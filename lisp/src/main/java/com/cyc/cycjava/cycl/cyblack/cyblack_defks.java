/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 */
package com.cyc.cycjava.cycl.cyblack;

import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.append;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.cons;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.listS;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.nconc;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.nth;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.rplacd;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.bind;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.currentBinding;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.rebind;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.sublisp_throw;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.identity;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.add;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Packages.intern;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow.format;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.cconcatenate;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.delete;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.length;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.nreverse;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.position;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.def_csetf;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.makeStructDeclNative;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.register_method;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.get;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.make_symbol;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.put;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_function;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_name;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.$is_thread_performing_cleanupP$;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.stringp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.values;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors.aref;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors.set_aref;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeBoolean;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeInteger;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeKeyword;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeString;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeSymbol;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeUninternedSymbol;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.cdestructuring_bind_error;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.destructuring_bind_must_consp;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.assoc;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.caar;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.cadr;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.cddr;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.copy_list;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.copy_tree;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.getf;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.intersection;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.last;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.member;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.remf;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.set_difference;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.union;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.$print_object_method_table$;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.print;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader.bq_cons;
import static com.cyc.tool.subl.util.SubLFiles.declareFunction;
import static com.cyc.tool.subl.util.SubLFiles.declareMacro;
import static com.cyc.tool.subl.util.SubLFiles.defconstant;
import static com.cyc.tool.subl.util.SubLFiles.defparameter;
import static com.cyc.tool.subl.util.SubLFiles.defvar;

import org.armedbear.lisp.Lisp;

import com.cyc.cycjava.cycl.V02;
import com.cyc.cycjava.cycl.classes;
import com.cyc.cycjava.cycl.enumerations;
import com.cyc.cycjava.cycl.instances;
import com.cyc.cycjava.cycl.interfaces;
import com.cyc.cycjava.cycl.list_utilities;
import com.cyc.cycjava.cycl.methods;
import com.cyc.cycjava.cycl.object;
import com.cyc.cycjava.cycl.slots;
import com.cyc.cycjava.cycl.subl_promotions;
import com.cyc.cycjava.cycl.subloop_structures;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.StreamsLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDecl;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDeclNative;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.UnaryFunction;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLStructNative;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLInteger;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.bytes;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.compatibility;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLTrampolineFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;

/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 *  module:      CYBLACK-DEFKS
 *  source file: /cyc/top/cycl/cyblack/cyblack-defks.lisp
 *  created:     2019/07/03 17:38:49
 */
public final class cyblack_defks extends SubLTranslatedFile implements V02 {
    // // Constructor
    private cyblack_defks() {
    }

    public static final SubLFile me = new cyblack_defks();

    public static final String myName = "com.cyc.cycjava.cycl.cyblack.cyblack_defks";

    // // Definitions
    public static final SubLObject cyblack_variable_list_p(SubLObject list) {
	if (!list.isList()) {
	    return NIL;
	}
	{
	    SubLObject cdolist_list_var = list;
	    SubLObject element = NIL;
	    for (element = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), element = cdolist_list_var.first()) {
		if (!((NIL != element) && element.isSymbol())) {
		    return NIL;
		}
	    }
	}
	return T;
    }

    /**
     * Enumerated values of type CYBLACK-UNIFICATION-MODIFIER.
     */
    // defconstant
    private static final SubLSymbol $valid_cyblack_unification_modifiers$ = makeSymbol("*VALID-CYBLACK-UNIFICATION-MODIFIERS*");

    /**
     * Returns a list of all valid members of the CYBLACK-UNIFICATION-MODIFIER enumeration.
     */
    public static final SubLObject valid_cyblack_unification_modifiers() {
	return $valid_cyblack_unification_modifiers$.getGlobalValue();
    }

    /**
     * Return T iff OBJECT is a member of the CYBLACK-UNIFICATION-MODIFIER enumeration.
     */
    public static final SubLObject cyblack_unification_modifier_p(SubLObject v_object) {
	return NIL != member(v_object, $valid_cyblack_unification_modifiers$.getGlobalValue(), UNPROVIDED, UNPROVIDED) ? ((SubLObject) (T)) : NIL;
    }

    /**
     * Maps a member of the CYBLACK-UNIFICATION-MODIFIER enumeration to an integer encoding.
     */
    public static final SubLObject encode_cyblack_unification_modifier(SubLObject value) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject pos = position(value, $valid_cyblack_unification_modifiers$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == pos) {
			Errors.error($str_alt2$_S___S_is_not_a_member_of_the__S_, ENCODE_CYBLACK_UNIFICATION_MODIFIER, value, CYBLACK_UNIFICATION_MODIFIER);
		    }
		}
		return pos;
	    }
	}
    }

    /**
     * Maps an encoded value to a member of the CYBLACK-UNIFICATION-MODIFIER enumeration.
     */
    public static final SubLObject decode_cyblack_unification_modifier(SubLObject value) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject element = nth(value, $valid_cyblack_unification_modifiers$.getGlobalValue());
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == element) {
			Errors.error($str_alt4$_S___S_is_not_a_valid_encoding_of, DECODE_CYBLACK_UNIFICATION_MODIFIER, value, CYBLACK_UNIFICATION_MODIFIER);
		    }
		}
		return element;
	    }
	}
    }

    /**
     * Provides a LESSP predicate for members of the CYBLACK-UNIFICATION-MODIFIER enumeration.
     */
    public static final SubLObject cyblack_unification_modifier_less_p(SubLObject value1, SubLObject value2) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_unification_modifier_p(value1)) {
		    Errors.error($str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_UNIFICATION_MODIFIER_P, value1, CYBLACK_UNIFICATION_MODIFIER);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_unification_modifier_p(value2)) {
		    Errors.error($str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_UNIFICATION_MODIFIER_P, value2, CYBLACK_UNIFICATION_MODIFIER);
		}
	    }
	    {
		SubLObject cdolist_list_var = $valid_cyblack_unification_modifiers$.getGlobalValue();
		SubLObject value = NIL;
		for (value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value = cdolist_list_var.first()) {
		    if (value == value1) {
			return makeBoolean(value != value2);
		    } else if (value == value2) {
			return NIL;
		    }

		}
	    }
	    return NIL;
	}
    }

    /**
     * Provides a GREATERP predicate for members of the CYBLACK-UNIFICATION-MODIFIER enumeration.
     */
    public static final SubLObject cyblack_unification_modifier_greater_p(SubLObject value1, SubLObject value2) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_unification_modifier_p(value1)) {
		    Errors.error($str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_UNIFICATION_MODIFIER_P, value1, CYBLACK_UNIFICATION_MODIFIER);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_unification_modifier_p(value2)) {
		    Errors.error($str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_UNIFICATION_MODIFIER_P, value2, CYBLACK_UNIFICATION_MODIFIER);
		}
	    }
	    {
		SubLObject cdolist_list_var = $valid_cyblack_unification_modifiers$.getGlobalValue();
		SubLObject value = NIL;
		for (value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value = cdolist_list_var.first()) {
		    if (value == value2) {
			return makeBoolean(value != value1);
		    } else if (value == value1) {
			return NIL;
		    }

		}
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_unification_modifier_list_p(SubLObject list) {
	if (!list.isCons()) {
	    return NIL;
	}
	{
	    SubLObject cdolist_list_var = list;
	    SubLObject element = NIL;
	    for (element = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), element = cdolist_list_var.first()) {
		if (NIL == cyblack_unification_modifier_p(element)) {
		    return NIL;
		}
	    }
	}
	return T;
    }

    /**
     * Enumerated values of type CYBLACK-KS-DEF-OPTION.
     */
    // defconstant
    private static final SubLSymbol $valid_cyblack_ks_def_options$ = makeSymbol("*VALID-CYBLACK-KS-DEF-OPTIONS*");

    /**
     * Returns a list of all valid members of the CYBLACK-KS-DEF-OPTION enumeration.
     */
    public static final SubLObject valid_cyblack_ks_def_options() {
	return $valid_cyblack_ks_def_options$.getGlobalValue();
    }

    /**
     * Return T iff OBJECT is a member of the CYBLACK-KS-DEF-OPTION enumeration.
     */
    public static final SubLObject cyblack_ks_def_option_p(SubLObject v_object) {
	return NIL != member(v_object, $valid_cyblack_ks_def_options$.getGlobalValue(), UNPROVIDED, UNPROVIDED) ? ((SubLObject) (T)) : NIL;
    }

    /**
     * Maps a member of the CYBLACK-KS-DEF-OPTION enumeration to an integer encoding.
     */
    public static final SubLObject encode_cyblack_ks_def_option(SubLObject value) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject pos = position(value, $valid_cyblack_ks_def_options$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == pos) {
			Errors.error($str_alt2$_S___S_is_not_a_member_of_the__S_, ENCODE_CYBLACK_KS_DEF_OPTION, value, CYBLACK_KS_DEF_OPTION);
		    }
		}
		return pos;
	    }
	}
    }

    /**
     * Maps an encoded value to a member of the CYBLACK-KS-DEF-OPTION enumeration.
     */
    public static final SubLObject decode_cyblack_ks_def_option(SubLObject value) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject element = nth(value, $valid_cyblack_ks_def_options$.getGlobalValue());
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == element) {
			Errors.error($str_alt4$_S___S_is_not_a_valid_encoding_of, DECODE_CYBLACK_KS_DEF_OPTION, value, CYBLACK_KS_DEF_OPTION);
		    }
		}
		return element;
	    }
	}
    }

    /**
     * Provides a LESSP predicate for members of the CYBLACK-KS-DEF-OPTION enumeration.
     */
    public static final SubLObject cyblack_ks_def_option_less_p(SubLObject value1, SubLObject value2) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_ks_def_option_p(value1)) {
		    Errors.error($str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_KS_DEF_OPTION_P, value1, CYBLACK_KS_DEF_OPTION);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_ks_def_option_p(value2)) {
		    Errors.error($str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_KS_DEF_OPTION_P, value2, CYBLACK_KS_DEF_OPTION);
		}
	    }
	    {
		SubLObject cdolist_list_var = $valid_cyblack_ks_def_options$.getGlobalValue();
		SubLObject value = NIL;
		for (value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value = cdolist_list_var.first()) {
		    if (value == value1) {
			return makeBoolean(value != value2);
		    } else if (value == value2) {
			return NIL;
		    }

		}
	    }
	    return NIL;
	}
    }

    /**
     * Provides a GREATERP predicate for members of the CYBLACK-KS-DEF-OPTION enumeration.
     */
    public static final SubLObject cyblack_ks_def_option_greater_p(SubLObject value1, SubLObject value2) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_ks_def_option_p(value1)) {
		    Errors.error($str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_KS_DEF_OPTION_P, value1, CYBLACK_KS_DEF_OPTION);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_ks_def_option_p(value2)) {
		    Errors.error($str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_KS_DEF_OPTION_P, value2, CYBLACK_KS_DEF_OPTION);
		}
	    }
	    {
		SubLObject cdolist_list_var = $valid_cyblack_ks_def_options$.getGlobalValue();
		SubLObject value = NIL;
		for (value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value = cdolist_list_var.first()) {
		    if (value == value2) {
			return makeBoolean(value != value1);
		    } else if (value == value1) {
			return NIL;
		    }

		}
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_ks_def_options_plist_p(SubLObject v_object) {
	if (v_object.isList()) {
	    if (NIL == v_object) {
		return T;
	    }
	    {
		SubLObject current_cons = v_object;
		SubLObject key = NIL;
		while (NIL != current_cons) {
		    key = current_cons.first();
		    if (NIL == cyblack_ks_def_option_p(key)) {
			return NIL;
		    }
		    if (current_cons.rest().isCons() && cddr(current_cons).isList()) {
			current_cons = cddr(current_cons);
		    } else {
			return NIL;
		    }
		}
		return T;
	    }
	}
	return NIL;
    }

    /**
     * Enumerated values of type CYBLACK-KS-DEF-EXTERNAL-OPTION.
     */
    // defconstant
    private static final SubLSymbol $valid_cyblack_ks_def_external_options$ = makeSymbol("*VALID-CYBLACK-KS-DEF-EXTERNAL-OPTIONS*");

    /**
     * Returns a list of all valid members of the CYBLACK-KS-DEF-EXTERNAL-OPTION enumeration.
     */
    public static final SubLObject valid_cyblack_ks_def_external_options() {
	return $valid_cyblack_ks_def_external_options$.getGlobalValue();
    }

    /**
     * Return T iff OBJECT is a member of the CYBLACK-KS-DEF-EXTERNAL-OPTION enumeration.
     */
    public static final SubLObject cyblack_ks_def_external_option_p(SubLObject v_object) {
	return NIL != member(v_object, $valid_cyblack_ks_def_external_options$.getGlobalValue(), UNPROVIDED, UNPROVIDED) ? ((SubLObject) (T)) : NIL;
    }

    /**
     * Maps a member of the CYBLACK-KS-DEF-EXTERNAL-OPTION enumeration to an integer encoding.
     */
    public static final SubLObject encode_cyblack_ks_def_external_option(SubLObject value) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject pos = position(value, $valid_cyblack_ks_def_external_options$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == pos) {
			Errors.error($str_alt2$_S___S_is_not_a_member_of_the__S_, ENCODE_CYBLACK_KS_DEF_EXTERNAL_OPTION, value, CYBLACK_KS_DEF_EXTERNAL_OPTION);
		    }
		}
		return pos;
	    }
	}
    }

    /**
     * Maps an encoded value to a member of the CYBLACK-KS-DEF-EXTERNAL-OPTION enumeration.
     */
    public static final SubLObject decode_cyblack_ks_def_external_option(SubLObject value) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject element = nth(value, $valid_cyblack_ks_def_external_options$.getGlobalValue());
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == element) {
			Errors.error($str_alt4$_S___S_is_not_a_valid_encoding_of, DECODE_CYBLACK_KS_DEF_EXTERNAL_OPTION, value, CYBLACK_KS_DEF_EXTERNAL_OPTION);
		    }
		}
		return element;
	    }
	}
    }

    /**
     * Provides a LESSP predicate for members of the CYBLACK-KS-DEF-EXTERNAL-OPTION enumeration.
     */
    public static final SubLObject cyblack_ks_def_external_option_less_p(SubLObject value1, SubLObject value2) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_ks_def_external_option_p(value1)) {
		    Errors.error($str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_KS_DEF_EXTERNAL_OPTION_P, value1, CYBLACK_KS_DEF_EXTERNAL_OPTION);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_ks_def_external_option_p(value2)) {
		    Errors.error($str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_KS_DEF_EXTERNAL_OPTION_P, value2, CYBLACK_KS_DEF_EXTERNAL_OPTION);
		}
	    }
	    {
		SubLObject cdolist_list_var = $valid_cyblack_ks_def_external_options$.getGlobalValue();
		SubLObject value = NIL;
		for (value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value = cdolist_list_var.first()) {
		    if (value == value1) {
			return makeBoolean(value != value2);
		    } else if (value == value2) {
			return NIL;
		    }

		}
	    }
	    return NIL;
	}
    }

    /**
     * Provides a GREATERP predicate for members of the CYBLACK-KS-DEF-EXTERNAL-OPTION enumeration.
     */
    public static final SubLObject cyblack_ks_def_external_option_greater_p(SubLObject value1, SubLObject value2) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_ks_def_external_option_p(value1)) {
		    Errors.error($str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_KS_DEF_EXTERNAL_OPTION_P, value1, CYBLACK_KS_DEF_EXTERNAL_OPTION);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_ks_def_external_option_p(value2)) {
		    Errors.error($str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_KS_DEF_EXTERNAL_OPTION_P, value2, CYBLACK_KS_DEF_EXTERNAL_OPTION);
		}
	    }
	    {
		SubLObject cdolist_list_var = $valid_cyblack_ks_def_external_options$.getGlobalValue();
		SubLObject value = NIL;
		for (value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value = cdolist_list_var.first()) {
		    if (value == value2) {
			return makeBoolean(value != value1);
		    } else if (value == value1) {
			return NIL;
		    }

		}
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_ks_def_external_options_plist_p(SubLObject v_object) {
	if (v_object.isList()) {
	    if (NIL == v_object) {
		return T;
	    }
	    {
		SubLObject current_cons = v_object;
		SubLObject key = NIL;
		while (NIL != current_cons) {
		    key = current_cons.first();
		    if (NIL == cyblack_ks_def_external_option_p(key)) {
			return NIL;
		    }
		    if (current_cons.rest().isCons() && cddr(current_cons).isList()) {
			current_cons = cddr(current_cons);
		    } else {
			return NIL;
		    }
		}
		return T;
	    }
	}
	return NIL;
    }

    /**
     * Enumerated values of type CYBLACK-PROPOSE-EXPRESSION-OPTION.
     */
    // defconstant
    private static final SubLSymbol $valid_cyblack_propose_expression_options$ = makeSymbol("*VALID-CYBLACK-PROPOSE-EXPRESSION-OPTIONS*");

    /**
     * Returns a list of all valid members of the CYBLACK-PROPOSE-EXPRESSION-OPTION enumeration.
     */
    public static final SubLObject valid_cyblack_propose_expression_options() {
	return $valid_cyblack_propose_expression_options$.getGlobalValue();
    }

    /**
     * Return T iff OBJECT is a member of the CYBLACK-PROPOSE-EXPRESSION-OPTION enumeration.
     */
    public static final SubLObject cyblack_propose_expression_option_p(SubLObject v_object) {
	return NIL != member(v_object, $valid_cyblack_propose_expression_options$.getGlobalValue(), UNPROVIDED, UNPROVIDED) ? ((SubLObject) (T)) : NIL;
    }

    /**
     * Maps a member of the CYBLACK-PROPOSE-EXPRESSION-OPTION enumeration to an integer encoding.
     */
    public static final SubLObject encode_cyblack_propose_expression_option(SubLObject value) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject pos = position(value, $valid_cyblack_propose_expression_options$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == pos) {
			Errors.error($str_alt2$_S___S_is_not_a_member_of_the__S_, ENCODE_CYBLACK_PROPOSE_EXPRESSION_OPTION, value, CYBLACK_PROPOSE_EXPRESSION_OPTION);
		    }
		}
		return pos;
	    }
	}
    }

    /**
     * Maps an encoded value to a member of the CYBLACK-PROPOSE-EXPRESSION-OPTION enumeration.
     */
    public static final SubLObject decode_cyblack_propose_expression_option(SubLObject value) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject element = nth(value, $valid_cyblack_propose_expression_options$.getGlobalValue());
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == element) {
			Errors.error($str_alt4$_S___S_is_not_a_valid_encoding_of, DECODE_CYBLACK_PROPOSE_EXPRESSION_OPTION, value, CYBLACK_PROPOSE_EXPRESSION_OPTION);
		    }
		}
		return element;
	    }
	}
    }

    /**
     * Provides a LESSP predicate for members of the CYBLACK-PROPOSE-EXPRESSION-OPTION enumeration.
     */
    public static final SubLObject cyblack_propose_expression_option_less_p(SubLObject value1, SubLObject value2) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_propose_expression_option_p(value1)) {
		    Errors.error($str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_PROPOSE_EXPRESSION_OPTION_P, value1, CYBLACK_PROPOSE_EXPRESSION_OPTION);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_propose_expression_option_p(value2)) {
		    Errors.error($str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_PROPOSE_EXPRESSION_OPTION_P, value2, CYBLACK_PROPOSE_EXPRESSION_OPTION);
		}
	    }
	    {
		SubLObject cdolist_list_var = $valid_cyblack_propose_expression_options$.getGlobalValue();
		SubLObject value = NIL;
		for (value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value = cdolist_list_var.first()) {
		    if (value == value1) {
			return makeBoolean(value != value2);
		    } else if (value == value2) {
			return NIL;
		    }

		}
	    }
	    return NIL;
	}
    }

    /**
     * Provides a GREATERP predicate for members of the CYBLACK-PROPOSE-EXPRESSION-OPTION enumeration.
     */
    public static final SubLObject cyblack_propose_expression_option_greater_p(SubLObject value1, SubLObject value2) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_propose_expression_option_p(value1)) {
		    Errors.error($str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_PROPOSE_EXPRESSION_OPTION_P, value1, CYBLACK_PROPOSE_EXPRESSION_OPTION);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_propose_expression_option_p(value2)) {
		    Errors.error($str_alt6$_S___S_was_expected_to_be_a_membe, CYBLACK_PROPOSE_EXPRESSION_OPTION_P, value2, CYBLACK_PROPOSE_EXPRESSION_OPTION);
		}
	    }
	    {
		SubLObject cdolist_list_var = $valid_cyblack_propose_expression_options$.getGlobalValue();
		SubLObject value = NIL;
		for (value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), value = cdolist_list_var.first()) {
		    if (value == value2) {
			return makeBoolean(value != value1);
		    } else if (value == value1) {
			return NIL;
		    }

		}
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_propose_expression_options_plist_p(SubLObject v_object) {
	if (v_object.isList()) {
	    if (NIL == v_object) {
		return T;
	    }
	    {
		SubLObject current_cons = v_object;
		SubLObject key = NIL;
		while (NIL != current_cons) {
		    key = current_cons.first();
		    if (NIL == cyblack_propose_expression_option_p(key)) {
			return NIL;
		    }
		    if (current_cons.rest().isCons() && cddr(current_cons).isList()) {
			current_cons = cddr(current_cons);
		    } else {
			return NIL;
		    }
		}
		return T;
	    }
	}
	return NIL;
    }

    public static final SubLObject cyblack_keword_plist_p(SubLObject v_object) {
	if (v_object.isList()) {
	    if (NIL == v_object) {
		return T;
	    }
	    {
		SubLObject current_cons = v_object;
		SubLObject key = NIL;
		while (NIL != current_cons) {
		    key = current_cons.first();
		    if (!key.isKeyword()) {
			return NIL;
		    }
		    if (current_cons.rest().isCons() && cddr(current_cons).isList()) {
			current_cons = cddr(current_cons);
		    } else {
			return NIL;
		    }
		}
		return T;
	    }
	}
	return NIL;
    }

    public static final class $integer_reference_native extends SubLStructNative {
	@Override
	public SubLStructDecl getStructDecl() {
	    return cyblack_defks.$integer_reference_native.structDecl;
	}

	@Override
	public SubLObject getField2() {
	    return $value;
	}

	@Override
	public SubLObject setField2(SubLObject value) {
	    return $value = value;
	}

	public SubLObject $value = Lisp.NIL;

	private static final SubLStructDeclNative structDecl = makeStructDeclNative(cyblack_defks.$integer_reference_native.class, INTEGER_REFERENCE, INTEGER_REFERENCE_P, $list_alt25, $list_alt26, new String[] { "$value" }, $list_alt27, $list_alt28, DEFAULT_STRUCT_PRINT_FUNCTION);
    }

    // defconstant
    public static final SubLSymbol $dtp_integer_reference$ = makeSymbol("*DTP-INTEGER-REFERENCE*");

    public static final SubLObject integer_reference_print_function_trampoline(SubLObject v_object, SubLObject stream) {
	compatibility.default_struct_print_function(v_object, stream, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject integer_reference_p(SubLObject v_object) {
	return v_object.getClass() == cyblack_defks.$integer_reference_native.class ? ((SubLObject) (T)) : NIL;
    }

    public static final class $integer_reference_p$UnaryFunction extends UnaryFunction {
	public $integer_reference_p$UnaryFunction() {
	    super(extractFunctionNamed("INTEGER-REFERENCE-P"));
	}

	@Override
	public SubLObject processItem(SubLObject arg1) {
	    return integer_reference_p(arg1);
	}
    }

    public static final SubLObject integer_reference_value(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INTEGER_REFERENCE_P);
	return v_object.getField2();
    }

    public static final SubLObject _csetf_integer_reference_value(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INTEGER_REFERENCE_P);
	return v_object.setField2(value);
    }

    public static final SubLObject make_integer_reference(SubLObject arglist) {
	if (arglist == UNPROVIDED) {
	    arglist = NIL;
	}
	{
	    SubLObject v_new = new cyblack_defks.$integer_reference_native();
	    SubLObject next = NIL;
	    for (next = arglist; NIL != next; next = cddr(next)) {
		{
		    SubLObject current_arg = next.first();
		    SubLObject current_value = cadr(next);
		    SubLObject pcase_var = current_arg;
		    if (pcase_var.eql($VALUE)) {
			_csetf_integer_reference_value(v_new, current_value);
		    } else {
			Errors.error($str_alt34$Invalid_slot__S_for_construction_, current_arg);
		    }
		}
	    }
	    return v_new;
	}
    }

    public static final SubLObject new_integer_reference(SubLObject initial_value) {
	if (initial_value == UNPROVIDED) {
	    initial_value = ZERO_INTEGER;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!initial_value.isInteger()) {
		    Errors.error($str_alt35$NEW_INTEGER_REFERENCE___S_is_not_, initial_value);
		}
	    }
	    {
		SubLObject reference = make_integer_reference(UNPROVIDED);
		_csetf_integer_reference_value(reference, initial_value);
		return reference;
	    }
	}
    }

    public static final SubLObject inc_integer_reference(SubLObject integer_reference_ref) {
	{
	    SubLObject new_value = add(integer_reference_value(integer_reference_ref), ONE_INTEGER);
	    _csetf_integer_reference_value(integer_reference_ref, new_value);
	    return new_value;
	}
    }

    public static final SubLObject get_integer_from_reference(SubLObject integer_reference_ref) {
	return integer_reference_value(integer_reference_ref);
    }

    public static final SubLObject cyblack_unifier_class_given_description(SubLObject unifier_modifier_list) {
	{
	    SubLObject is_full = (NIL != member($FULL, unifier_modifier_list, UNPROVIDED, UNPROVIDED)) ? ((SubLObject) (T)) : NIL;
	    SubLObject is_constrained = (NIL != member($CONSTRAINED, unifier_modifier_list, UNPROVIDED, UNPROVIDED)) ? ((SubLObject) (T)) : NIL;
	    SubLObject is_all = (NIL != member($ALL, unifier_modifier_list, UNPROVIDED, UNPROVIDED)) ? ((SubLObject) (T)) : NIL;
	    SubLObject is_any = (NIL != member($ANY, unifier_modifier_list, UNPROVIDED, UNPROVIDED)) ? ((SubLObject) (T)) : NIL;
	    if ((NIL != is_full) && (NIL != is_constrained)) {
		Errors.warn($str_alt40$CYBLACK_UNIFIER_GIVEN_DESCRIPTION);
		is_constrained = NIL;
	    }
	    if ((NIL != is_all) && (NIL != is_any)) {
		Errors.warn($str_alt41$CYBLACK_UNIFIER_GIVEN_DESCRIPTION);
		is_any = NIL;
	    }
	    if (!((((NIL != is_full) || (NIL != is_constrained)) || (NIL != is_all)) || (NIL != is_any))) {
		return CYBLACK_UNIFICATION_ROBOT;
	    }
	    if (NIL != is_all) {
		if (NIL != is_constrained) {
		    return CYBLACK_CONSTRAINED_UNIFICATION_ROBOT;
		} else {
		    return CYBLACK_UNIFICATION_ROBOT;
		}
	    } else {
		if (NIL != is_any) {
		    if (NIL != is_constrained) {
			return CYBLACK_CONSTRAINED_UNIFICATION_ROBOT_SATISFIED_BY_ANY_SOLUTION;
		    } else {
			return CYBLACK_UNIFICATION_ROBOT_SATISFIED_BY_ANY_SOLUTION;
		    }
		} else {
		    if (NIL != is_constrained) {
			return CYBLACK_CONSTRAINED_UNIFICATION_ROBOT;
		    } else {
			return CYBLACK_UNIFICATION_ROBOT;
		    }
		}
	    }
	}
    }

    public static final SubLObject cyblack_clet_merge(SubLObject clets) {
	if (NIL != clets) {
	    {
		SubLObject first_clet = clets.first();
		SubLObject shared_bindings = cadr(first_clet);
		{
		    SubLObject cdolist_list_var = clets.rest();
		    SubLObject next_clet = NIL;
		    for (next_clet = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), next_clet = cdolist_list_var.first()) {
			shared_bindings = intersection(shared_bindings, cadr(next_clet), symbol_function(EQUAL), UNPROVIDED);
		    }
		}
		if (NIL != shared_bindings) {
		    {
			SubLObject trimmed_clets = NIL;
			SubLObject difference = NIL;
			SubLObject cdolist_list_var = clets;
			SubLObject current_clet = NIL;
			for (current_clet = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), current_clet = cdolist_list_var.first()) {
			    difference = set_difference(cadr(current_clet), shared_bindings, symbol_function(EQUAL), UNPROVIDED);
			    if (NIL != difference) {
				trimmed_clets = cons(listS(CLET, difference, append(cddr(current_clet), NIL)), trimmed_clets);
			    } else {
				trimmed_clets = cons(bq_cons(PROGN, append(cddr(current_clet), NIL)), trimmed_clets);
			    }
			}
			return list(listS(CLET, shared_bindings, append(nreverse(trimmed_clets), NIL)));
		    }
		} else {
		    return clets;
		}
	    }
	} else {
	    return NIL;
	}
    }

    public static final SubLObject cyblack_flatten_progns(SubLObject form) {
	if (form.isCons()) {
	    if (form.first() == PROGN) {
		{
		    SubLObject flattened_forms = NIL;
		    SubLObject cdolist_list_var = form.rest();
		    SubLObject subform = NIL;
		    for (subform = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), subform = cdolist_list_var.first()) {
			subform = cyblack_flatten_progns(subform);
			if (subform.isCons() && (subform.first() == PROGN)) {
			    flattened_forms = nconc(flattened_forms, copy_list(subform.rest()));
			} else {
			    flattened_forms = nconc(flattened_forms, list(subform));
			}
		    }
		    return cons(PROGN, flattened_forms);
		}
	    } else if (form.first() == CLET) {
		{
		    SubLObject flattened_forms = NIL;
		    SubLObject cdolist_list_var = cddr(form);
		    SubLObject subform = NIL;
		    for (subform = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), subform = cdolist_list_var.first()) {
			subform = cyblack_flatten_progns(subform);
			if (subform.isCons() && (subform.first() == PROGN)) {
			    flattened_forms = nconc(flattened_forms, copy_list(subform.rest()));
			} else {
			    flattened_forms = nconc(flattened_forms, list(subform));
			}
		    }
		    return listS(CLET, cadr(form), flattened_forms);
		}
	    } else {
		{
		    SubLObject flattened_forms = NIL;
		    SubLObject list_expression = form;
		    if (NIL == list_expression) {
			flattened_forms = NIL;
		    } else if (list_expression.isAtom()) {
			flattened_forms = list(list_expression);
		    } else if (NIL == list_expression.rest()) {
			{
			    SubLObject subform = list_expression.first();
			    flattened_forms = list(cyblack_flatten_progns(subform));
			}
		    } else {
			{
			    SubLObject tail_cons = NIL;
			    SubLObject result = NIL;
			    {
				SubLObject subform = list_expression.first();
				flattened_forms = list(cyblack_flatten_progns(subform));
				tail_cons = flattened_forms;
			    }
			    {
				SubLObject cdolist_list_var = list_expression.rest();
				SubLObject subform = NIL;
				for (subform = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), subform = cdolist_list_var.first()) {
				    result = list(cyblack_flatten_progns(subform));
				    rplacd(tail_cons, result);
				    tail_cons = result;
				}
			    }
			}
		    }

		    return flattened_forms;
		}
	    }

	} else {
	    return form;
	}
    }

    public static final SubLObject cyblack_simple_environment_template_p(SubLObject cyblack_simple_environment_template) {
	return interfaces.subloop_instanceof_interface(cyblack_simple_environment_template, CYBLACK_SIMPLE_ENVIRONMENT_TEMPLATE);
    }

    public static final SubLObject cyblack_get_ks_assistant(SubLObject ks_root_name) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!((NIL != ks_root_name) && ks_root_name.isSymbol())) {
		    Errors.error($str_alt75$CYBLACK_GET_KS_ASSISTANT___S_is_n, ks_root_name);
		}
	    }
	    return get(ks_root_name, $CYBLACK_AUTO_GENERATED_KS_ASSISTANT, UNPROVIDED);
	}
    }

    public static final SubLObject cyblack_set_ks_assistant(SubLObject ks_root_name, SubLObject new_ks_assistant) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!((NIL != ks_root_name) && ks_root_name.isSymbol())) {
		    Errors.error($str_alt77$CYBLACK_SET_KS_ASSISTANT___S_is_n, ks_root_name);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_auto_generated_ks_assistant_p(new_ks_assistant)) {
		    Errors.error($str_alt78$CYBLACK_SET_KS_ASSISTANT___S_is_n, new_ks_assistant);
		}
	    }
	    put(ks_root_name, $CYBLACK_AUTO_GENERATED_KS_ASSISTANT, new_ks_assistant);
	    return new_ks_assistant;
	}
    }

    public static final SubLObject get_cyblack_auto_generated_ks_assistant_external_module_name(SubLObject cyblack_auto_generated_ks_assistant) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_ks_assistant, EIGHT_INTEGER, EXTERNAL_MODULE_NAME);
    }

    public static final SubLObject set_cyblack_auto_generated_ks_assistant_external_module_name(SubLObject cyblack_auto_generated_ks_assistant, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_ks_assistant, value, EIGHT_INTEGER, EXTERNAL_MODULE_NAME);
    }

    public static final SubLObject get_cyblack_auto_generated_ks_assistant_port_id(SubLObject cyblack_auto_generated_ks_assistant) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_ks_assistant, SEVEN_INTEGER, PORT_ID);
    }

    public static final SubLObject set_cyblack_auto_generated_ks_assistant_port_id(SubLObject cyblack_auto_generated_ks_assistant, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_ks_assistant, value, SEVEN_INTEGER, PORT_ID);
    }

    public static final SubLObject get_cyblack_auto_generated_ks_assistant_knowledge_source_type(SubLObject cyblack_auto_generated_ks_assistant) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_ks_assistant, SIX_INTEGER, KNOWLEDGE_SOURCE_TYPE);
    }

    public static final SubLObject set_cyblack_auto_generated_ks_assistant_knowledge_source_type(SubLObject cyblack_auto_generated_ks_assistant, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_ks_assistant, value, SIX_INTEGER, KNOWLEDGE_SOURCE_TYPE);
    }

    public static final SubLObject get_cyblack_auto_generated_ks_assistant_unification_types(SubLObject cyblack_auto_generated_ks_assistant) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_ks_assistant, FIVE_INTEGER, UNIFICATION_TYPES);
    }

    public static final SubLObject set_cyblack_auto_generated_ks_assistant_unification_types(SubLObject cyblack_auto_generated_ks_assistant, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_ks_assistant, value, FIVE_INTEGER, UNIFICATION_TYPES);
    }

    public static final SubLObject get_cyblack_auto_generated_ks_assistant_precondition_pattern(SubLObject cyblack_auto_generated_ks_assistant) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_ks_assistant, FOUR_INTEGER, PRECONDITION_PATTERN);
    }

    public static final SubLObject set_cyblack_auto_generated_ks_assistant_precondition_pattern(SubLObject cyblack_auto_generated_ks_assistant, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_ks_assistant, value, FOUR_INTEGER, PRECONDITION_PATTERN);
    }

    public static final SubLObject get_cyblack_auto_generated_ks_assistant_knowledge_source_instantiation_class(SubLObject cyblack_auto_generated_ks_assistant) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_ks_assistant, THREE_INTEGER, KNOWLEDGE_SOURCE_INSTANTIATION_CLASS);
    }

    public static final SubLObject set_cyblack_auto_generated_ks_assistant_knowledge_source_instantiation_class(SubLObject cyblack_auto_generated_ks_assistant, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_ks_assistant, value, THREE_INTEGER, KNOWLEDGE_SOURCE_INSTANTIATION_CLASS);
    }

    public static final SubLObject get_cyblack_auto_generated_ks_assistant_proposal_class(SubLObject cyblack_auto_generated_ks_assistant) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_ks_assistant, TWO_INTEGER, PROPOSAL_CLASS);
    }

    public static final SubLObject set_cyblack_auto_generated_ks_assistant_proposal_class(SubLObject cyblack_auto_generated_ks_assistant, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_ks_assistant, value, TWO_INTEGER, PROPOSAL_CLASS);
    }

    public static final SubLObject get_cyblack_auto_generated_ks_assistant_knowledge_source_class(SubLObject cyblack_auto_generated_ks_assistant) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_ks_assistant, ONE_INTEGER, KNOWLEDGE_SOURCE_CLASS);
    }

    public static final SubLObject set_cyblack_auto_generated_ks_assistant_knowledge_source_class(SubLObject cyblack_auto_generated_ks_assistant, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_ks_assistant, value, ONE_INTEGER, KNOWLEDGE_SOURCE_CLASS);
    }

    public static final SubLObject get_cyblack_auto_generated_ks_assistant_post_at_will(SubLObject cyblack_auto_generated_ks_assistant) {
	{
	    SubLObject v_class = subloop_structures.instance_class(cyblack_auto_generated_ks_assistant);
	    SubLObject slot = slots.slot_assoc(POST_AT_WILL, subloop_structures.class_compiled_instance_boolean_slot_access_alist(v_class));
	    instances.instances_access_check_instance_slot(v_class, cyblack_auto_generated_ks_assistant, slot);
	}
	return classes.ldb_test($int$4097, subloop_structures.instance_boolean_slots(cyblack_auto_generated_ks_assistant));
    }

    public static final SubLObject set_cyblack_auto_generated_ks_assistant_post_at_will(SubLObject cyblack_auto_generated_ks_assistant, SubLObject value) {
	{
	    SubLObject v_class = subloop_structures.instance_class(cyblack_auto_generated_ks_assistant);
	    SubLObject slot = slots.slot_assoc(POST_AT_WILL, subloop_structures.class_compiled_instance_boolean_slot_access_alist(v_class));
	    instances.instances_access_check_instance_slot(v_class, cyblack_auto_generated_ks_assistant, slot);
	}
	subloop_structures._csetf_instance_boolean_slots(cyblack_auto_generated_ks_assistant, bytes.dpb(NIL != value ? ((SubLObject) (ONE_INTEGER)) : ZERO_INTEGER, $int$4097, subloop_structures.instance_boolean_slots(cyblack_auto_generated_ks_assistant)));
	return value;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_auto_generated_ks_assistant_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_auto_generated_ks_assistant_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, POST_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, KNOWLEDGE_SOURCE_CLASS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, PROPOSAL_CLASS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, KNOWLEDGE_SOURCE_INSTANTIATION_CLASS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, PRECONDITION_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, UNIFICATION_TYPES, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, KNOWLEDGE_SOURCE_TYPE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, PORT_ID, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, EXTERNAL_MODULE_NAME, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_p(SubLObject cyblack_auto_generated_ks_assistant) {
	return classes.subloop_instanceof_class(cyblack_auto_generated_ks_assistant, CYBLACK_AUTO_GENERATED_KS_ASSISTANT);
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_auto_generated_ks_assistant_method = NIL;
	    SubLObject knowledge_source_type = get_cyblack_auto_generated_ks_assistant_knowledge_source_type(self);
	    SubLObject unification_types = get_cyblack_auto_generated_ks_assistant_unification_types(self);
	    SubLObject precondition_pattern = get_cyblack_auto_generated_ks_assistant_precondition_pattern(self);
	    SubLObject knowledge_source_instantiation_class = get_cyblack_auto_generated_ks_assistant_knowledge_source_instantiation_class(self);
	    SubLObject proposal_class = get_cyblack_auto_generated_ks_assistant_proposal_class(self);
	    SubLObject knowledge_source_class = get_cyblack_auto_generated_ks_assistant_knowledge_source_class(self);
	    SubLObject post_at_will = get_cyblack_auto_generated_ks_assistant_post_at_will(self);
	    try {
		try {
		    object.object_initialize_method(self);
		    knowledge_source_class = CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE;
		    proposal_class = CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL;
		    knowledge_source_instantiation_class = CYBLACK_AUTO_GENERATED_INTERNAL_KSI;
		    post_at_will = NIL;
		    precondition_pattern = NIL;
		    unification_types = copy_list($list_alt104);
		    knowledge_source_type = $INTERNAL;
		    sublisp_throw($sym100$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_auto_generated_ks_assistant_knowledge_source_type(self, knowledge_source_type);
			    set_cyblack_auto_generated_ks_assistant_unification_types(self, unification_types);
			    set_cyblack_auto_generated_ks_assistant_precondition_pattern(self, precondition_pattern);
			    set_cyblack_auto_generated_ks_assistant_knowledge_source_instantiation_class(self, knowledge_source_instantiation_class);
			    set_cyblack_auto_generated_ks_assistant_proposal_class(self, proposal_class);
			    set_cyblack_auto_generated_ks_assistant_knowledge_source_class(self, knowledge_source_class);
			    set_cyblack_auto_generated_ks_assistant_post_at_will(self, post_at_will);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_auto_generated_ks_assistant_method = Errors.handleThrowable(ccatch_env_var, $sym100$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD);
	    }
	    return catch_var_for_cyblack_auto_generated_ks_assistant_method;
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_get_knowledge_source_class_method(SubLObject self) {
	{
	    SubLObject knowledge_source_class = get_cyblack_auto_generated_ks_assistant_knowledge_source_class(self);
	    return knowledge_source_class;
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_set_knowledge_source_class_method(SubLObject self, SubLObject symbolic_class_name) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_ks_assistant_method = NIL;
		SubLObject knowledge_source_class = get_cyblack_auto_generated_ks_assistant_knowledge_source_class(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == symbolic_class_name) || symbolic_class_name.isSymbol())) {
				Errors.error($str_alt115$_SET_KNOWLEDGE_SOURCE_CLASS__S___, self, symbolic_class_name);
			    }
			}
			knowledge_source_class = symbolic_class_name;
			sublisp_throw($sym114$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD, symbolic_class_name);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_ks_assistant_knowledge_source_class(self, knowledge_source_class);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_ks_assistant_method = Errors.handleThrowable(ccatch_env_var, $sym114$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD);
		}
		return catch_var_for_cyblack_auto_generated_ks_assistant_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_get_proposal_class_method(SubLObject self) {
	{
	    SubLObject proposal_class = get_cyblack_auto_generated_ks_assistant_proposal_class(self);
	    return proposal_class;
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_set_proposal_class_method(SubLObject self, SubLObject symbolic_class_name) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_ks_assistant_method = NIL;
		SubLObject proposal_class = get_cyblack_auto_generated_ks_assistant_proposal_class(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == symbolic_class_name) || symbolic_class_name.isSymbol())) {
				Errors.error($str_alt123$_SET_PROPOSAL_CLASS__S____S_is_no, self, symbolic_class_name);
			    }
			}
			proposal_class = symbolic_class_name;
			sublisp_throw($sym122$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD, symbolic_class_name);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_ks_assistant_proposal_class(self, proposal_class);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_ks_assistant_method = Errors.handleThrowable(ccatch_env_var, $sym122$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD);
		}
		return catch_var_for_cyblack_auto_generated_ks_assistant_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_get_knowledge_source_instantiation_class_method(SubLObject self) {
	{
	    SubLObject knowledge_source_instantiation_class = get_cyblack_auto_generated_ks_assistant_knowledge_source_instantiation_class(self);
	    return knowledge_source_instantiation_class;
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_set_knowledge_source_instantiation_class_method(SubLObject self, SubLObject symbolic_class_name) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_ks_assistant_method = NIL;
		SubLObject knowledge_source_instantiation_class = get_cyblack_auto_generated_ks_assistant_knowledge_source_instantiation_class(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == symbolic_class_name) || symbolic_class_name.isSymbol())) {
				Errors.error($str_alt131$_SET_KNOWLEDGE_SOURCE_INSTANTIATI, self, symbolic_class_name);
			    }
			}
			knowledge_source_instantiation_class = symbolic_class_name;
			sublisp_throw($sym130$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD, symbolic_class_name);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_ks_assistant_knowledge_source_instantiation_class(self, knowledge_source_instantiation_class);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_ks_assistant_method = Errors.handleThrowable(ccatch_env_var, $sym130$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD);
		}
		return catch_var_for_cyblack_auto_generated_ks_assistant_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_get_post_at_will_method(SubLObject self) {
	{
	    SubLObject post_at_will = get_cyblack_auto_generated_ks_assistant_post_at_will(self);
	    return post_at_will;
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_set_post_at_will_method(SubLObject self, SubLObject new_state) {
	{
	    SubLObject catch_var_for_cyblack_auto_generated_ks_assistant_method = NIL;
	    SubLObject post_at_will = get_cyblack_auto_generated_ks_assistant_post_at_will(self);
	    try {
		try {
		    post_at_will = (NIL != new_state) ? ((SubLObject) (T)) : NIL;
		    sublisp_throw($sym139$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD, post_at_will);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_auto_generated_ks_assistant_post_at_will(self, post_at_will);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_auto_generated_ks_assistant_method = Errors.handleThrowable(ccatch_env_var, $sym139$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD);
	    }
	    return catch_var_for_cyblack_auto_generated_ks_assistant_method;
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_get_precondition_pattern_method(SubLObject self) {
	{
	    SubLObject precondition_pattern = get_cyblack_auto_generated_ks_assistant_precondition_pattern(self);
	    return precondition_pattern;
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_set_precondition_pattern_method(SubLObject self, SubLObject new_precondition_pattern) {
	{
	    SubLObject catch_var_for_cyblack_auto_generated_ks_assistant_method = NIL;
	    SubLObject precondition_pattern = get_cyblack_auto_generated_ks_assistant_precondition_pattern(self);
	    try {
		try {
		    precondition_pattern = new_precondition_pattern;
		    sublisp_throw($sym147$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD, new_precondition_pattern);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_auto_generated_ks_assistant_precondition_pattern(self, precondition_pattern);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_auto_generated_ks_assistant_method = Errors.handleThrowable(ccatch_env_var, $sym147$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD);
	    }
	    return catch_var_for_cyblack_auto_generated_ks_assistant_method;
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_get_unification_types_method(SubLObject self) {
	{
	    SubLObject unification_types = get_cyblack_auto_generated_ks_assistant_unification_types(self);
	    return unification_types;
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_set_unification_types_method(SubLObject self, SubLObject new_unification_types) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_ks_assistant_method = NIL;
		SubLObject unification_types = get_cyblack_auto_generated_ks_assistant_unification_types(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_unification_modifier_list_p(new_unification_types)) {
				Errors.error($str_alt156$_SET_UNIFICATION_TYPES__S____S_is, self, new_unification_types);
			    }
			}
			unification_types = copy_list(new_unification_types);
			sublisp_throw($sym155$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD, new_unification_types);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_ks_assistant_unification_types(self, unification_types);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_ks_assistant_method = Errors.handleThrowable(ccatch_env_var, $sym155$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD);
		}
		return catch_var_for_cyblack_auto_generated_ks_assistant_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_get_knowledge_source_type_method(SubLObject self) {
	{
	    SubLObject knowledge_source_type = get_cyblack_auto_generated_ks_assistant_knowledge_source_type(self);
	    return knowledge_source_type;
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_set_knowledge_source_type_method(SubLObject self, SubLObject new_knowledge_source_type) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_ks_assistant_method = NIL;
		SubLObject knowledge_source_type = get_cyblack_auto_generated_ks_assistant_knowledge_source_type(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_globals.cyblack_knowledge_source_type_p(new_knowledge_source_type)) {
				Errors.error($str_alt165$_SET_KNOWLEDGE_SOURCE_TYPE__S____, self, new_knowledge_source_type);
			    }
			}
			knowledge_source_type = new_knowledge_source_type;
			sublisp_throw($sym164$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD, new_knowledge_source_type);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_ks_assistant_knowledge_source_type(self, knowledge_source_type);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_ks_assistant_method = Errors.handleThrowable(ccatch_env_var, $sym164$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD);
		}
		return catch_var_for_cyblack_auto_generated_ks_assistant_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_get_port_id_method(SubLObject self) {
	{
	    SubLObject port_id = get_cyblack_auto_generated_ks_assistant_port_id(self);
	    return port_id;
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_set_port_id_method(SubLObject self, SubLObject new_port_id) {
	{
	    SubLObject catch_var_for_cyblack_auto_generated_ks_assistant_method = NIL;
	    SubLObject port_id = get_cyblack_auto_generated_ks_assistant_port_id(self);
	    try {
		try {
		    port_id = new_port_id;
		    sublisp_throw($sym173$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD, new_port_id);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_auto_generated_ks_assistant_port_id(self, port_id);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_auto_generated_ks_assistant_method = Errors.handleThrowable(ccatch_env_var, $sym173$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD);
	    }
	    return catch_var_for_cyblack_auto_generated_ks_assistant_method;
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_get_external_module_name_method(SubLObject self) {
	{
	    SubLObject external_module_name = get_cyblack_auto_generated_ks_assistant_external_module_name(self);
	    return external_module_name;
	}
    }

    public static final SubLObject cyblack_auto_generated_ks_assistant_set_external_module_name_method(SubLObject self, SubLObject new_external_module_name) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_ks_assistant_method = NIL;
		SubLObject external_module_name = get_cyblack_auto_generated_ks_assistant_external_module_name(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!new_external_module_name.isString()) {
				Errors.error($str_alt182$_SET_EXTERNAL_MODULE_NAME__S____S, self, new_external_module_name);
			    }
			}
			external_module_name = new_external_module_name;
			sublisp_throw($sym181$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD, new_external_module_name);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_ks_assistant_external_module_name(self, external_module_name);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_ks_assistant_method = Errors.handleThrowable(ccatch_env_var, $sym181$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD);
		}
		return catch_var_for_cyblack_auto_generated_ks_assistant_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_knowledge_source_component_p(SubLObject cyblack_auto_generated_knowledge_source_component) {
	return interfaces.subloop_instanceof_interface(cyblack_auto_generated_knowledge_source_component, CYBLACK_AUTO_GENERATED_KNOWLEDGE_SOURCE_COMPONENT);
    }

    public static final SubLObject cyblack_auto_generated_knowledge_source_p(SubLObject cyblack_auto_generated_knowledge_source) {
	return interfaces.subloop_instanceof_interface(cyblack_auto_generated_knowledge_source, CYBLACK_AUTO_GENERATED_KNOWLEDGE_SOURCE);
    }

    public static final SubLObject cyblack_auto_generated_proposal_p(SubLObject cyblack_auto_generated_proposal) {
	return interfaces.subloop_instanceof_interface(cyblack_auto_generated_proposal, CYBLACK_AUTO_GENERATED_PROPOSAL);
    }

    public static final SubLObject cyblack_auto_generated_ksi_p(SubLObject cyblack_auto_generated_ksi) {
	return interfaces.subloop_instanceof_interface(cyblack_auto_generated_ksi, CYBLACK_AUTO_GENERATED_KSI);
    }

    public static final SubLObject get_cyblack_auto_generated_internal_knowledge_source_binding_list(SubLObject cyblack_auto_generated_internal_knowledge_source) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_internal_knowledge_source, FOURTEEN_INTEGER, BINDING_LIST);
    }

    public static final SubLObject set_cyblack_auto_generated_internal_knowledge_source_binding_list(SubLObject cyblack_auto_generated_internal_knowledge_source, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_internal_knowledge_source, value, FOURTEEN_INTEGER, BINDING_LIST);
    }

    public static final SubLObject get_cyblack_auto_generated_internal_knowledge_source_trace_basic_methods(SubLObject cyblack_auto_generated_internal_knowledge_source) {
	{
	    SubLObject v_class = subloop_structures.instance_class(cyblack_auto_generated_internal_knowledge_source);
	    SubLObject slot = slots.slot_assoc(TRACE_BASIC_METHODS, subloop_structures.class_compiled_instance_boolean_slot_access_alist(v_class));
	    instances.instances_access_check_instance_slot(v_class, cyblack_auto_generated_internal_knowledge_source, slot);
	}
	return classes.ldb_test($int$4107, subloop_structures.instance_boolean_slots(cyblack_auto_generated_internal_knowledge_source));
    }

    public static final SubLObject set_cyblack_auto_generated_internal_knowledge_source_trace_basic_methods(SubLObject cyblack_auto_generated_internal_knowledge_source, SubLObject value) {
	{
	    SubLObject v_class = subloop_structures.instance_class(cyblack_auto_generated_internal_knowledge_source);
	    SubLObject slot = slots.slot_assoc(TRACE_BASIC_METHODS, subloop_structures.class_compiled_instance_boolean_slot_access_alist(v_class));
	    instances.instances_access_check_instance_slot(v_class, cyblack_auto_generated_internal_knowledge_source, slot);
	}
	subloop_structures._csetf_instance_boolean_slots(cyblack_auto_generated_internal_knowledge_source, bytes.dpb(NIL != value ? ((SubLObject) (ONE_INTEGER)) : ZERO_INTEGER, $int$4107, subloop_structures.instance_boolean_slots(cyblack_auto_generated_internal_knowledge_source)));
	return value;
    }

    public static final SubLObject get_cyblack_auto_generated_internal_knowledge_source_auto_generated_ks_assistent(SubLObject cyblack_auto_generated_internal_knowledge_source) {
	{
	    SubLObject v_class = (cyblack_auto_generated_internal_knowledge_source.isSymbol()) ? ((SubLObject) (classes.classes_retrieve_class(cyblack_auto_generated_internal_knowledge_source)))
		    : NIL != subloop_structures.class_p(cyblack_auto_generated_internal_knowledge_source) ? ((SubLObject) (cyblack_auto_generated_internal_knowledge_source))
			    : NIL != subloop_structures.instance_p(cyblack_auto_generated_internal_knowledge_source) ? ((SubLObject) (subloop_structures.instance_class(cyblack_auto_generated_internal_knowledge_source))) : NIL;
	    if (NIL != v_class) {
		classes.classes_access_check_class_slot(v_class, slots.slot_assoc(AUTO_GENERATED_KS_ASSISTENT, subloop_structures.class_compiled_class_slot_access_alist(v_class)));
		return aref(subloop_structures.class_any_slots(v_class), ONE_INTEGER);
	    }
	    return NIL;
	}
    }

    public static final SubLObject set_cyblack_auto_generated_internal_knowledge_source_auto_generated_ks_assistent(SubLObject cyblack_auto_generated_internal_knowledge_source, SubLObject value) {
	{
	    SubLObject v_class = (cyblack_auto_generated_internal_knowledge_source.isSymbol()) ? ((SubLObject) (classes.classes_retrieve_class(cyblack_auto_generated_internal_knowledge_source)))
		    : NIL != subloop_structures.class_p(cyblack_auto_generated_internal_knowledge_source) ? ((SubLObject) (cyblack_auto_generated_internal_knowledge_source))
			    : NIL != subloop_structures.instance_p(cyblack_auto_generated_internal_knowledge_source) ? ((SubLObject) (subloop_structures.instance_class(cyblack_auto_generated_internal_knowledge_source))) : NIL;
	    if (NIL != v_class) {
		classes.classes_access_check_class_slot(v_class, slots.slot_assoc(AUTO_GENERATED_KS_ASSISTENT, subloop_structures.class_compiled_class_slot_access_alist(v_class)));
		return set_aref(subloop_structures.class_any_slots(v_class), ONE_INTEGER, value);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_generate_to_bindings_code_given_vars_method(SubLObject self, SubLObject var, SubLObject vars) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!((NIL != var) && var.isSymbol())) {
		    Errors.error($str_alt207$_GENERATE_TO_BINDINGS_CODE_GIVEN_, self, var);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_variable_list_p(vars)) {
		    Errors.error($str_alt208$_GENERATE_TO_BINDINGS_CODE_GIVEN_, self, vars);
		}
	    }
	    {
		SubLObject template_binding_setters = NIL;
		SubLObject list_expression = vars;
		if (NIL == list_expression) {
		    template_binding_setters = NIL;
		} else if (list_expression.isAtom()) {
		    template_binding_setters = list(list_expression);
		} else if (NIL == list_expression.rest()) {
		    {
			SubLObject current_var = list_expression.first();
			template_binding_setters = list(list(list(FUNCALL_INSTANCE_METHOD, var, $list_alt210, current_var)));
		    }
		} else {
		    {
			SubLObject tail_cons = NIL;
			SubLObject result = NIL;
			{
			    SubLObject current_var = list_expression.first();
			    template_binding_setters = list(list(list(FUNCALL_INSTANCE_METHOD, var, $list_alt210, current_var)));
			    tail_cons = template_binding_setters;
			}
			{
			    SubLObject cdolist_list_var = list_expression.rest();
			    SubLObject current_var = NIL;
			    for (current_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), current_var = cdolist_list_var.first()) {
				result = list(list(list(FUNCALL_INSTANCE_METHOD, var, $list_alt210, current_var)));
				rplacd(tail_cons, result);
				tail_cons = result;
			    }
			}
		    }
		}

		return template_binding_setters;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_generate_from_bindings_code_given_vars_method(SubLObject self, SubLObject var, SubLObject vars) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!((NIL != var) && var.isSymbol())) {
		    Errors.error($str_alt212$_GENERATE_FROM_BINDINGS_CODE_GIVE, self, var);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_variable_list_p(vars)) {
		    Errors.error($str_alt213$_GENERATE_FROM_BINDINGS_CODE_GIVE, self, vars);
		}
	    }
	    {
		SubLObject template_bindings = NIL;
		SubLObject list_expression = vars;
		if (NIL == list_expression) {
		    template_bindings = NIL;
		} else if (list_expression.isAtom()) {
		    template_bindings = list(list_expression);
		} else if (NIL == list_expression.rest()) {
		    {
			SubLObject current_var = list_expression.first();
			template_bindings = list(list(current_var, list(FUNCALL_INSTANCE_METHOD, var, $list_alt214)));
		    }
		} else {
		    {
			SubLObject tail_cons = NIL;
			SubLObject result = NIL;
			{
			    SubLObject current_var = list_expression.first();
			    template_bindings = list(list(current_var, list(FUNCALL_INSTANCE_METHOD, var, $list_alt214)));
			    tail_cons = template_bindings;
			}
			{
			    SubLObject cdolist_list_var = list_expression.rest();
			    SubLObject current_var = NIL;
			    for (current_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), current_var = cdolist_list_var.first()) {
				result = list(list(current_var, list(FUNCALL_INSTANCE_METHOD, var, $list_alt214)));
				rplacd(tail_cons, result);
				tail_cons = result;
			    }
			}
		    }
		}

		return template_bindings;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_generate_to_bindings_code_method(SubLObject self, SubLObject var) {
	{
	    SubLObject template_variables = cyblack_auto_generated_internal_knowledge_source_get_variables_method(self);
	    return cyblack_auto_generated_internal_knowledge_source_generate_to_bindings_code_given_vars_method(self, var, template_variables);
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_generate_from_bindings_code_method(SubLObject self, SubLObject var) {
	{
	    SubLObject template_variables = cyblack_auto_generated_internal_knowledge_source_get_variables_method(self);
	    return cyblack_auto_generated_internal_knowledge_source_generate_from_bindings_code_given_vars_method(self, var, template_variables);
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_copy_bindings_method(SubLObject self, SubLObject other_environment) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_simple_environment_template_p(other_environment)) {
		    Errors.error($str_alt218$_COPY_BINDINGS__S____S_is_not_an_, self, other_environment);
		}
	    }
	    cyblack_auto_generated_internal_knowledge_source_set_binding_list_method(self, methods.funcall_instance_method_with_0_args(other_environment, GET_COPY_OF_BINDING_LIST));
	    return other_environment;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_get_values_method(SubLObject self) {
	{
	    SubLObject template_values = NIL;
	    SubLObject template_binding_list = cyblack_auto_generated_internal_knowledge_source_get_binding_list_method(self);
	    SubLObject list_expression = template_binding_list;
	    if (NIL == list_expression) {
		template_values = NIL;
	    } else if (list_expression.isAtom()) {
		template_values = list(list_expression);
	    } else if (NIL == list_expression.rest()) {
		{
		    SubLObject template_binding = list_expression.first();
		    template_values = list(template_binding.rest());
		}
	    } else {
		{
		    SubLObject tail_cons = NIL;
		    SubLObject result = NIL;
		    {
			SubLObject template_binding = list_expression.first();
			template_values = list(template_binding.rest());
			tail_cons = template_values;
		    }
		    {
			SubLObject cdolist_list_var = list_expression.rest();
			SubLObject template_binding = NIL;
			for (template_binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), template_binding = cdolist_list_var.first()) {
			    result = list(template_binding.rest());
			    rplacd(tail_cons, result);
			    tail_cons = result;
			}
		    }
		}
	    }

	    return template_values;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_get_variables_method(SubLObject self) {
	{
	    SubLObject template_variables = NIL;
	    SubLObject template_binding_list = cyblack_auto_generated_internal_knowledge_source_get_binding_list_method(self);
	    SubLObject list_expression = template_binding_list;
	    if (NIL == list_expression) {
		template_variables = NIL;
	    } else if (list_expression.isAtom()) {
		template_variables = list(list_expression);
	    } else if (NIL == list_expression.rest()) {
		{
		    SubLObject template_binding = list_expression.first();
		    template_variables = list(template_binding.first());
		}
	    } else {
		{
		    SubLObject tail_cons = NIL;
		    SubLObject result = NIL;
		    {
			SubLObject template_binding = list_expression.first();
			template_variables = list(template_binding.first());
			tail_cons = template_variables;
		    }
		    {
			SubLObject cdolist_list_var = list_expression.rest();
			SubLObject template_binding = NIL;
			for (template_binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), template_binding = cdolist_list_var.first()) {
			    result = list(template_binding.first());
			    rplacd(tail_cons, result);
			    tail_cons = result;
			}
		    }
		}
	    }

	    return template_variables;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_eval_var_method(SubLObject self, SubLObject var) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject template_binding = assoc(var, cyblack_auto_generated_internal_knowledge_source_get_binding_list_method(self), UNPROVIDED, UNPROVIDED);
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == template_binding) {
			Errors.error($str_alt222$_EVAL_VAR__S___Variable__S_is_not, self, var);
		    }
		}
		return template_binding.rest();
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_bind_var_method(SubLObject self, SubLObject var, SubLObject value) {
	{
	    SubLObject template_binding_list = cyblack_auto_generated_internal_knowledge_source_get_binding_list_method(self);
	    SubLObject template_binding = assoc(var, template_binding_list, UNPROVIDED, UNPROVIDED);
	    if (NIL != template_binding) {
		rplacd(template_binding, value);
		return value;
	    }
	    cyblack_auto_generated_internal_knowledge_source_set_binding_list_method(self, cons(cons(var, value), template_binding_list));
	    return var;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_get_copy_of_binding_list_method(SubLObject self) {
	return copy_tree(cyblack_auto_generated_internal_knowledge_source_get_binding_list_method(self));
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_auto_generated_internal_knowledge_source_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, AUTO_GENERATED_KS_ASSISTENT, NIL);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_auto_generated_internal_knowledge_source_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, QUA_LIST_ELEMENT_SELF_DELETION_MODE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, IS_A_MONITOR, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, POST_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, ADD_PANELS_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, REMOVE_PANELS_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, ADD_POSTING_CLASSES_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, ADD_KNOWLEDGE_SOURCES_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, REMOVE_KNOWLEDGE_SOURCES_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, LINKED_TO_PANELS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, HAS_CACHED_DOMAIN_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, TRACE_BASIC_METHODS, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, LOCK, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, OWNER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, QUA_LIST_ELEMENT_PARENT_LINKS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, AUTHOR_NAMES, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, KNOWLEDGE_SOURCE_BATTERY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, UNCOMPILED_PRECONDITION_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, UNIFICATION_ROBOT_CLASS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, CACHED_DOMAIN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, RANGE_SET, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_INTERNAL_KNOWLEDGE_SOURCE, PRECONDITION_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_INTERNAL_KNOWLEDGE_SOURCE, PRECONDITION_DATATYPES, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, BINDING_LIST, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_p(SubLObject cyblack_auto_generated_internal_knowledge_source) {
	return classes.subloop_instanceof_class(cyblack_auto_generated_internal_knowledge_source, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE);
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_auto_generated_internal_knowledge_source_method = NIL;
	    SubLObject binding_list = get_cyblack_auto_generated_internal_knowledge_source_binding_list(self);
	    SubLObject unification_robot_class = cyblack_ks.get_cyblack_basic_knowledge_source_unification_robot_class(self);
	    try {
		try {
		    binding_list = NIL;
		    unification_robot_class = CYBLACK_CONSTRAINED_UNIFICATION_ROBOT_SATISFIED_BY_ANY_SOLUTION;
		    sublisp_throw($sym254$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_auto_generated_internal_knowledge_source_binding_list(self, binding_list);
			    cyblack_ks.set_cyblack_basic_knowledge_source_unification_robot_class(self, unification_robot_class);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_auto_generated_internal_knowledge_source_method = Errors.handleThrowable(ccatch_env_var, $sym254$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_);
	    }
	    return catch_var_for_cyblack_auto_generated_internal_knowledge_source_method;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_get_binding_list_method(SubLObject self) {
	{
	    SubLObject binding_list = get_cyblack_auto_generated_internal_knowledge_source_binding_list(self);
	    return binding_list;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_set_binding_list_method(SubLObject self, SubLObject new_binding_list) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_internal_knowledge_source_method = NIL;
		SubLObject binding_list = get_cyblack_auto_generated_internal_knowledge_source_binding_list(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!binding_list.isList()) {
				Errors.error($str_alt264$_SET_BINDING_LIST__S___A_binding_, self, new_binding_list);
			    }
			}
			binding_list = new_binding_list;
			sublisp_throw($sym263$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_, new_binding_list);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_internal_knowledge_source_binding_list(self, binding_list);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_internal_knowledge_source_method = Errors.handleThrowable(ccatch_env_var, $sym263$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_);
		}
		return catch_var_for_cyblack_auto_generated_internal_knowledge_source_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_get_auto_generated_ks_assistant_method(SubLObject self) {
	{
	    SubLObject assistant = NIL;
	    SubLObject cdolist_list_var = subloop_structures.class_compiled_inheritance_path(self);
	    SubLObject class_reference = NIL;
	    for (class_reference = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), class_reference = cdolist_list_var.first()) {
		if (NIL == classes.subclassp(class_reference, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE)) {
		    return NIL;
		}
		assistant = cyblack_auto_generated_internal_knowledge_source_get_auto_generated_ks_assistant_method(class_reference);
		if (NIL != assistant) {
		    return assistant;
		}
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_set_auto_generated_ks_assistant_method(SubLObject self, SubLObject new_assistant) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_internal_knowledge_source_method = NIL;
		SubLObject auto_generated_ks_assistent = get_cyblack_auto_generated_internal_knowledge_source_auto_generated_ks_assistent(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == new_assistant) || (NIL != cyblack_auto_generated_ks_assistant_p(new_assistant)))) {
				Errors.error($str_alt274$_SET_AUTO_GENERATED_KS_ASSISTANT_, self, new_assistant);
			    }
			}
			auto_generated_ks_assistent = new_assistant;
			sublisp_throw($sym273$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_, new_assistant);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_internal_knowledge_source_auto_generated_ks_assistent(self, auto_generated_ks_assistent);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_internal_knowledge_source_method = Errors.handleThrowable(ccatch_env_var, $sym273$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_);
		}
		return catch_var_for_cyblack_auto_generated_internal_knowledge_source_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_set_trace_state_method(SubLObject self, SubLObject new_state) {
	{
	    SubLObject catch_var_for_cyblack_auto_generated_internal_knowledge_source_method = NIL;
	    SubLObject trace_basic_methods = get_cyblack_auto_generated_internal_knowledge_source_trace_basic_methods(self);
	    try {
		try {
		    trace_basic_methods = new_state;
		    sublisp_throw($sym278$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_, new_state);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_auto_generated_internal_knowledge_source_trace_basic_methods(self, trace_basic_methods);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_auto_generated_internal_knowledge_source_method = Errors.handleThrowable(ccatch_env_var, $sym278$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_);
	    }
	    return catch_var_for_cyblack_auto_generated_internal_knowledge_source_method;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_new_knowledge_source_method(SubLObject self, SubLObject new_application) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_internal_knowledge_source_method = NIL;
		SubLObject unification_robot_class = cyblack_ks.get_cyblack_basic_knowledge_source_unification_robot_class(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == new_application) || (NIL != cyblack_application.cyblack_application_p(new_application)))) {
				Errors.error($str_alt284$_NEW_KNOWLEDGE_SOURCE__S____S_is_, self, new_application);
			    }
			}
			{
			    SubLObject assistant = cyblack_auto_generated_internal_knowledge_source_get_auto_generated_ks_assistant_method(self);
			    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				if (NIL == assistant) {
				    Errors.error($str_alt285$_NEW_KNOWLEDGE_SOURCE__S___No_aut, self);
				}
			    }
			    {
				SubLObject knowledge_source_class = cyblack_auto_generated_ks_assistant_get_knowledge_source_class_method(assistant);
				SubLObject raw_precondition_pattern = cyblack_auto_generated_ks_assistant_get_precondition_pattern_method(assistant);
				SubLObject unification_types = cyblack_auto_generated_ks_assistant_get_unification_types_method(assistant);
				SubLObject unification_robot_class_1 = cyblack_unifier_class_given_description(unification_types);
				if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				    if (NIL == knowledge_source_class) {
					Errors.error($str_alt286$_NEW_KNOWLEDGE_SOURCE__S___The_au, self, knowledge_source_class);
				    }
				}
				{
				    SubLObject knowledge_source = object.new_class_instance(knowledge_source_class);
				    methods.funcall_instance_method_with_1_args(knowledge_source, SET_APPLICATION, new_application);
				    methods.funcall_instance_method_with_1_args(knowledge_source, SET_PRECONDITION_PATTERN, copy_tree(raw_precondition_pattern));
				    methods.funcall_instance_method_with_1_args(knowledge_source, SET_UNIFICATION_ROBOT_CLASS, unification_robot_class_1);
				    sublisp_throw($sym283$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_, knowledge_source);
				}
			    }
			}
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				cyblack_ks.set_cyblack_basic_knowledge_source_unification_robot_class(self, unification_robot_class);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_internal_knowledge_source_method = Errors.handleThrowable(ccatch_env_var, $sym283$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_);
		}
		return catch_var_for_cyblack_auto_generated_internal_knowledge_source_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_new_proposal_method(SubLObject self, SubLObject knowledge_source) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_ks.cyblack_knowledge_source_p(knowledge_source)) {
		    Errors.error($str_alt293$_NEW_PROPOSAL__S____S_is_not_an_i, self, knowledge_source);
		}
	    }
	    {
		SubLObject assistant = cyblack_auto_generated_internal_knowledge_source_get_auto_generated_ks_assistant_method(self);
		SubLObject ks_application = methods.funcall_instance_method_with_0_args(knowledge_source, GET_APPLICATION);
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == assistant) {
			Errors.error($str_alt285$_NEW_KNOWLEDGE_SOURCE__S___No_aut, self);
		    }
		}
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == cyblack_application.cyblack_application_p(ks_application)) {
			Errors.error($str_alt295$_NEW_KNOWLEDGE_SOURCE__S___The_va, self, ks_application, knowledge_source);
		    }
		}
		{
		    SubLObject proposal_class = cyblack_auto_generated_ks_assistant_get_proposal_class_method(assistant);
		    SubLObject knowledge_source_class = cyblack_auto_generated_ks_assistant_get_knowledge_source_class_method(assistant);
		    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			if (NIL == instances.instance_of_p(knowledge_source, knowledge_source_class)) {
			    Errors.error($str_alt296$_NEW_PROPOSAL__S___Illegal_use_of, self, knowledge_source, knowledge_source_class);
			}
		    }
		    {
			SubLObject proposal_instance = object.new_class_instance(proposal_class);
			methods.funcall_instance_method_with_1_args(proposal_instance, SET_APPLICATION, ks_application);
			methods.funcall_instance_method_with_1_args(proposal_instance, SET_KNOWLEDGE_SOURCE, knowledge_source);
			methods.funcall_instance_method_with_1_args(proposal_instance, SET_EXECUTION_MODE, $SYNCHRONOUS);
			methods.funcall_instance_method_with_1_args(proposal_instance, SET_AGENDA, methods.funcall_instance_method_with_0_args(ks_application, GET_AGENDA));
			return proposal_instance;
		    }
		}
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_new_ksi_method(SubLObject self, SubLObject proposal) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_proposal.cyblack_proposal_p(proposal)) {
		    Errors.error($str_alt306$_NEW_KSI__S____S_is_not_a_valid_i, self, proposal);
		}
	    }
	    {
		SubLObject assistant = cyblack_auto_generated_internal_knowledge_source_get_auto_generated_ks_assistant_method(self);
		SubLObject proposal_application = methods.funcall_instance_method_with_0_args(proposal, GET_APPLICATION);
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == assistant) {
			Errors.error($str_alt307$_NEW_KSI__S___No_auto_generated_k, self);
		    }
		}
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == cyblack_proposal.cyblack_proposal_p(proposal_application)) {
			Errors.error($str_alt308$_NEW_KSI__S___The_value__S_associ, self, proposal_application, proposal);
		    }
		}
		{
		    SubLObject ksi_class = cyblack_auto_generated_ks_assistant_get_knowledge_source_instantiation_class_method(assistant);
		    SubLObject proposal_class = cyblack_auto_generated_ks_assistant_get_proposal_class_method(assistant);
		    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			if (NIL == instances.instance_of_p(proposal, proposal_class)) {
			    Errors.error($str_alt309$_NEW_KSI__S___Illegal_use_of_NEW_, self, proposal, proposal_class);
			}
		    }
		    {
			SubLObject ksi_instance = object.new_class_instance(ksi_class);
			SubLObject proposal_activation_pattern = methods.funcall_instance_method_with_0_args(proposal, GET_ACTIVATION_PATTERN);
			methods.funcall_instance_method_with_1_args(ksi_instance, SET_APPLICATION, proposal_application);
			methods.funcall_instance_method_with_1_args(ksi_instance, SET_EXECUTION_MODE, methods.funcall_instance_method_with_0_args(proposal, GET_EXECUTION_MODE));
			methods.funcall_instance_method_with_1_args(ksi_instance, SET_ACTIVATION_PATTERN, NIL != proposal_activation_pattern ? ((SubLObject) (methods.funcall_instance_method_with_0_args(proposal_activation_pattern, CLONE))) : NIL);
			return ksi_instance;
		    }
		}
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_stimulate_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_internal_knowledge_source_method = NIL;
		SubLObject precondition_pattern = cyblack_ks.get_cyblack_internal_knowledge_source_precondition_pattern(self);
		SubLObject unification_robot_class = cyblack_ks.get_cyblack_basic_knowledge_source_unification_robot_class(self);
		SubLObject application = cyblack_object.get_cyblack_object_application(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == application) {
				Errors.error($str_alt319$_STIMULATE__S___No_application_is, self, self);
			    }
			}
			{
			    SubLObject blackboard = methods.funcall_instance_method_with_0_args(application, GET_BLACKBOARD);
			    SubLObject v_agenda = methods.funcall_instance_method_with_0_args(application, GET_AGENDA);
			    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				if (NIL == blackboard) {
				    Errors.error($str_alt321$_STIMULATE__S___No_blackboard_is_, self, application);
				}
			    }
			    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				if (NIL == v_agenda) {
				    Errors.error($str_alt322$_STIMULATE__S___No_agenda_is_asso, self, v_agenda);
				}
			    }
			    {
				SubLObject precondition_pattern_2 = methods.funcall_instance_method_with_0_args(self, GET_PRECONDITION_PATTERN);
				if (NIL != precondition_pattern_2) {
				    cyblack_precondition_pattern.cyblack_pattern_set_environment(precondition_pattern_2, environment);
				    {
					SubLObject activation_patterns = methods.funcall_instance_method_with_2_args(blackboard, UNIFY, precondition_pattern_2, unification_robot_class);
					if (NIL != activation_patterns) {
					    if (NIL != cyblack_ks.cyblack_monitoring_ks_p(self)) {
						methods.funcall_instance_method_with_1_args(self, PERFORM_ACTION, activation_patterns);
					    } else {
						{
						    SubLObject enumerator = methods.funcall_instance_method_with_0_args(activation_patterns, ALLOCATE_ENUMERATOR);
						    if (NIL == methods.funcall_instance_method_with_0_args(enumerator, EMPTY_P)) {
							{
							    SubLObject activation_pattern = methods.funcall_instance_method_with_0_args(enumerator, FIRST);
							    if (NIL != methods.funcall_instance_method_with_1_args(self, ON_ACTIVATE, activation_pattern)) {
								{
								    SubLObject proposals = methods.funcall_instance_method_with_1_args(self, CREATE_PROPOSALS, activation_pattern);
								    SubLObject cdolist_list_var = proposals;
								    SubLObject proposal = NIL;
								    for (proposal = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), proposal = cdolist_list_var.first()) {
									methods.funcall_instance_method_with_2_args(self, POST_PROPOSAL, proposal, v_agenda);
								    }
								}
							    }
							    while (NIL == methods.funcall_instance_method_with_0_args(enumerator, LAST_P)) {
								activation_pattern = methods.funcall_instance_method_with_0_args(enumerator, NEXT);
								if (NIL != methods.funcall_instance_method_with_1_args(self, ON_ACTIVATE, activation_pattern)) {
								    {
									SubLObject proposals = methods.funcall_instance_method_with_1_args(self, CREATE_PROPOSALS, activation_pattern);
									SubLObject cdolist_list_var = proposals;
									SubLObject proposal = NIL;
									for (proposal = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), proposal = cdolist_list_var.first()) {
									    methods.funcall_instance_method_with_2_args(self, POST_PROPOSAL, proposal, v_agenda);
									}
								    }
								}
							    }
							}
						    }
						    methods.funcall_instance_method_with_1_args(activation_patterns, DEALLOCATE_ENUMERATOR, enumerator);
						}
					    }
					}
				    }
				}
			    }
			}
			sublisp_throw($sym318$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_, NIL);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				cyblack_ks.set_cyblack_internal_knowledge_source_precondition_pattern(self, precondition_pattern);
				cyblack_ks.set_cyblack_basic_knowledge_source_unification_robot_class(self, unification_robot_class);
				cyblack_object.set_cyblack_object_application(self, application);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_internal_knowledge_source_method = Errors.handleThrowable(ccatch_env_var, $sym318$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_);
		}
		return catch_var_for_cyblack_auto_generated_internal_knowledge_source_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_knowledge_source_create_proposals_method(SubLObject self, SubLObject environment) {
	if (environment == UNPROVIDED) {
	    environment = NIL;
	}
	return NIL;
    }

    public static final SubLObject get_cyblack_auto_generated_internal_proposal_trace_basic_methods(SubLObject cyblack_auto_generated_internal_proposal) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_internal_proposal, SEVENTEEN_INTEGER, TRACE_BASIC_METHODS);
    }

    public static final SubLObject set_cyblack_auto_generated_internal_proposal_trace_basic_methods(SubLObject cyblack_auto_generated_internal_proposal, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_internal_proposal, value, SEVENTEEN_INTEGER, TRACE_BASIC_METHODS);
    }

    public static final SubLObject get_cyblack_auto_generated_internal_proposal_proposal_index(SubLObject cyblack_auto_generated_internal_proposal) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_internal_proposal, SIXTEEN_INTEGER, PROPOSAL_INDEX);
    }

    public static final SubLObject set_cyblack_auto_generated_internal_proposal_proposal_index(SubLObject cyblack_auto_generated_internal_proposal, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_internal_proposal, value, SIXTEEN_INTEGER, PROPOSAL_INDEX);
    }

    public static final SubLObject get_cyblack_auto_generated_internal_proposal_binding_list(SubLObject cyblack_auto_generated_internal_proposal) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_internal_proposal, FIFTEEN_INTEGER, BINDING_LIST);
    }

    public static final SubLObject set_cyblack_auto_generated_internal_proposal_binding_list(SubLObject cyblack_auto_generated_internal_proposal, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_internal_proposal, value, FIFTEEN_INTEGER, BINDING_LIST);
    }

    public static final SubLObject get_cyblack_auto_generated_internal_proposal_auto_generated_ks_assistent(SubLObject cyblack_auto_generated_internal_proposal) {
	{
	    SubLObject v_class = (cyblack_auto_generated_internal_proposal.isSymbol()) ? ((SubLObject) (classes.classes_retrieve_class(cyblack_auto_generated_internal_proposal)))
		    : NIL != subloop_structures.class_p(cyblack_auto_generated_internal_proposal) ? ((SubLObject) (cyblack_auto_generated_internal_proposal))
			    : NIL != subloop_structures.instance_p(cyblack_auto_generated_internal_proposal) ? ((SubLObject) (subloop_structures.instance_class(cyblack_auto_generated_internal_proposal))) : NIL;
	    if (NIL != v_class) {
		classes.classes_access_check_class_slot(v_class, slots.slot_assoc(AUTO_GENERATED_KS_ASSISTENT, subloop_structures.class_compiled_class_slot_access_alist(v_class)));
		return aref(subloop_structures.class_any_slots(v_class), ONE_INTEGER);
	    }
	    return NIL;
	}
    }

    public static final SubLObject set_cyblack_auto_generated_internal_proposal_auto_generated_ks_assistent(SubLObject cyblack_auto_generated_internal_proposal, SubLObject value) {
	{
	    SubLObject v_class = (cyblack_auto_generated_internal_proposal.isSymbol()) ? ((SubLObject) (classes.classes_retrieve_class(cyblack_auto_generated_internal_proposal)))
		    : NIL != subloop_structures.class_p(cyblack_auto_generated_internal_proposal) ? ((SubLObject) (cyblack_auto_generated_internal_proposal))
			    : NIL != subloop_structures.instance_p(cyblack_auto_generated_internal_proposal) ? ((SubLObject) (subloop_structures.instance_class(cyblack_auto_generated_internal_proposal))) : NIL;
	    if (NIL != v_class) {
		classes.classes_access_check_class_slot(v_class, slots.slot_assoc(AUTO_GENERATED_KS_ASSISTENT, subloop_structures.class_compiled_class_slot_access_alist(v_class)));
		return set_aref(subloop_structures.class_any_slots(v_class), ONE_INTEGER, value);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_generate_to_bindings_code_given_vars_method(SubLObject self, SubLObject var, SubLObject vars) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!((NIL != var) && var.isSymbol())) {
		    Errors.error($str_alt207$_GENERATE_TO_BINDINGS_CODE_GIVEN_, self, var);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_variable_list_p(vars)) {
		    Errors.error($str_alt208$_GENERATE_TO_BINDINGS_CODE_GIVEN_, self, vars);
		}
	    }
	    {
		SubLObject template_binding_setters = NIL;
		SubLObject list_expression = vars;
		if (NIL == list_expression) {
		    template_binding_setters = NIL;
		} else if (list_expression.isAtom()) {
		    template_binding_setters = list(list_expression);
		} else if (NIL == list_expression.rest()) {
		    {
			SubLObject current_var = list_expression.first();
			template_binding_setters = list(list(list(FUNCALL_INSTANCE_METHOD, var, $list_alt210, current_var)));
		    }
		} else {
		    {
			SubLObject tail_cons = NIL;
			SubLObject result = NIL;
			{
			    SubLObject current_var = list_expression.first();
			    template_binding_setters = list(list(list(FUNCALL_INSTANCE_METHOD, var, $list_alt210, current_var)));
			    tail_cons = template_binding_setters;
			}
			{
			    SubLObject cdolist_list_var = list_expression.rest();
			    SubLObject current_var = NIL;
			    for (current_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), current_var = cdolist_list_var.first()) {
				result = list(list(list(FUNCALL_INSTANCE_METHOD, var, $list_alt210, current_var)));
				rplacd(tail_cons, result);
				tail_cons = result;
			    }
			}
		    }
		}

		return template_binding_setters;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_generate_from_bindings_code_given_vars_method(SubLObject self, SubLObject var, SubLObject vars) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!((NIL != var) && var.isSymbol())) {
		    Errors.error($str_alt212$_GENERATE_FROM_BINDINGS_CODE_GIVE, self, var);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_variable_list_p(vars)) {
		    Errors.error($str_alt213$_GENERATE_FROM_BINDINGS_CODE_GIVE, self, vars);
		}
	    }
	    {
		SubLObject template_bindings = NIL;
		SubLObject list_expression = vars;
		if (NIL == list_expression) {
		    template_bindings = NIL;
		} else if (list_expression.isAtom()) {
		    template_bindings = list(list_expression);
		} else if (NIL == list_expression.rest()) {
		    {
			SubLObject current_var = list_expression.first();
			template_bindings = list(list(current_var, list(FUNCALL_INSTANCE_METHOD, var, $list_alt214)));
		    }
		} else {
		    {
			SubLObject tail_cons = NIL;
			SubLObject result = NIL;
			{
			    SubLObject current_var = list_expression.first();
			    template_bindings = list(list(current_var, list(FUNCALL_INSTANCE_METHOD, var, $list_alt214)));
			    tail_cons = template_bindings;
			}
			{
			    SubLObject cdolist_list_var = list_expression.rest();
			    SubLObject current_var = NIL;
			    for (current_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), current_var = cdolist_list_var.first()) {
				result = list(list(current_var, list(FUNCALL_INSTANCE_METHOD, var, $list_alt214)));
				rplacd(tail_cons, result);
				tail_cons = result;
			    }
			}
		    }
		}

		return template_bindings;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_generate_to_bindings_code_method(SubLObject self, SubLObject var) {
	{
	    SubLObject template_variables = cyblack_auto_generated_internal_proposal_get_variables_method(self);
	    return cyblack_auto_generated_internal_proposal_generate_to_bindings_code_given_vars_method(self, var, template_variables);
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_generate_from_bindings_code_method(SubLObject self, SubLObject var) {
	{
	    SubLObject template_variables = cyblack_auto_generated_internal_proposal_get_variables_method(self);
	    return cyblack_auto_generated_internal_proposal_generate_from_bindings_code_given_vars_method(self, var, template_variables);
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_copy_bindings_method(SubLObject self, SubLObject other_environment) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_simple_environment_template_p(other_environment)) {
		    Errors.error($str_alt218$_COPY_BINDINGS__S____S_is_not_an_, self, other_environment);
		}
	    }
	    cyblack_auto_generated_internal_proposal_set_binding_list_method(self, methods.funcall_instance_method_with_0_args(other_environment, GET_COPY_OF_BINDING_LIST));
	    return other_environment;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_get_values_method(SubLObject self) {
	{
	    SubLObject template_values = NIL;
	    SubLObject template_binding_list = cyblack_auto_generated_internal_proposal_get_binding_list_method(self);
	    SubLObject list_expression = template_binding_list;
	    if (NIL == list_expression) {
		template_values = NIL;
	    } else if (list_expression.isAtom()) {
		template_values = list(list_expression);
	    } else if (NIL == list_expression.rest()) {
		{
		    SubLObject template_binding = list_expression.first();
		    template_values = list(template_binding.rest());
		}
	    } else {
		{
		    SubLObject tail_cons = NIL;
		    SubLObject result = NIL;
		    {
			SubLObject template_binding = list_expression.first();
			template_values = list(template_binding.rest());
			tail_cons = template_values;
		    }
		    {
			SubLObject cdolist_list_var = list_expression.rest();
			SubLObject template_binding = NIL;
			for (template_binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), template_binding = cdolist_list_var.first()) {
			    result = list(template_binding.rest());
			    rplacd(tail_cons, result);
			    tail_cons = result;
			}
		    }
		}
	    }

	    return template_values;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_get_variables_method(SubLObject self) {
	{
	    SubLObject template_variables = NIL;
	    SubLObject template_binding_list = cyblack_auto_generated_internal_proposal_get_binding_list_method(self);
	    SubLObject list_expression = template_binding_list;
	    if (NIL == list_expression) {
		template_variables = NIL;
	    } else if (list_expression.isAtom()) {
		template_variables = list(list_expression);
	    } else if (NIL == list_expression.rest()) {
		{
		    SubLObject template_binding = list_expression.first();
		    template_variables = list(template_binding.first());
		}
	    } else {
		{
		    SubLObject tail_cons = NIL;
		    SubLObject result = NIL;
		    {
			SubLObject template_binding = list_expression.first();
			template_variables = list(template_binding.first());
			tail_cons = template_variables;
		    }
		    {
			SubLObject cdolist_list_var = list_expression.rest();
			SubLObject template_binding = NIL;
			for (template_binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), template_binding = cdolist_list_var.first()) {
			    result = list(template_binding.first());
			    rplacd(tail_cons, result);
			    tail_cons = result;
			}
		    }
		}
	    }

	    return template_variables;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_eval_var_method(SubLObject self, SubLObject var) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject template_binding = assoc(var, cyblack_auto_generated_internal_proposal_get_binding_list_method(self), UNPROVIDED, UNPROVIDED);
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == template_binding) {
			Errors.error($str_alt222$_EVAL_VAR__S___Variable__S_is_not, self, var);
		    }
		}
		return template_binding.rest();
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_bind_var_method(SubLObject self, SubLObject var, SubLObject value) {
	{
	    SubLObject template_binding_list = cyblack_auto_generated_internal_proposal_get_binding_list_method(self);
	    SubLObject template_binding = assoc(var, template_binding_list, UNPROVIDED, UNPROVIDED);
	    if (NIL != template_binding) {
		rplacd(template_binding, value);
		return value;
	    }
	    cyblack_auto_generated_internal_proposal_set_binding_list_method(self, cons(cons(var, value), template_binding_list));
	    return var;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_get_copy_of_binding_list_method(SubLObject self) {
	return copy_tree(cyblack_auto_generated_internal_proposal_get_binding_list_method(self));
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_auto_generated_internal_proposal_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, AUTO_GENERATED_KS_ASSISTENT, NIL);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_auto_generated_internal_proposal_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, QUA_LIST_ELEMENT_SELF_DELETION_MODE, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, LOCK, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, OWNER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, AGENDA, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, PROPOSED_CONTRIBUTIONS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, PROPOSED_REMOVALS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, EXECUTION_MODE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, VERIFIED, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, QUA_LIST_ELEMENT_PARENT_LINKS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_INTERNAL_PROPOSAL, KNOWLEDGE_SOURCE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_INTERNAL_PROPOSAL, ACTIVATION_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_INTERNAL_PROPOSAL, REASONS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_INTERNAL_PROPOSAL, TIMESTAMP, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, BINDING_LIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, PROPOSAL_INDEX, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, TRACE_BASIC_METHODS, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_p(SubLObject cyblack_auto_generated_internal_proposal) {
	return classes.subloop_instanceof_class(cyblack_auto_generated_internal_proposal, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL);
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_auto_generated_internal_proposal_method = NIL;
	    SubLObject proposal_index = get_cyblack_auto_generated_internal_proposal_proposal_index(self);
	    SubLObject binding_list = get_cyblack_auto_generated_internal_proposal_binding_list(self);
	    try {
		try {
		    binding_list = NIL;
		    proposal_index = NIL;
		    sublisp_throw($sym364$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_auto_generated_internal_proposal_proposal_index(self, proposal_index);
			    set_cyblack_auto_generated_internal_proposal_binding_list(self, binding_list);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_auto_generated_internal_proposal_method = Errors.handleThrowable(ccatch_env_var, $sym364$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_METHOD);
	    }
	    return catch_var_for_cyblack_auto_generated_internal_proposal_method;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	format(stream, $str_alt369$__PROPOSAL__S___KS__S_, subloop_structures.class_name(object.object_class_of_method(self)), cyblack_proposal.cyblack_internal_proposal_get_knowledge_source_method(self));
	return self;
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_get_binding_list_method(SubLObject self) {
	{
	    SubLObject binding_list = get_cyblack_auto_generated_internal_proposal_binding_list(self);
	    return binding_list;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_set_binding_list_method(SubLObject self, SubLObject new_binding_list) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_internal_proposal_method = NIL;
		SubLObject binding_list = get_cyblack_auto_generated_internal_proposal_binding_list(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!binding_list.isList()) {
				Errors.error($str_alt264$_SET_BINDING_LIST__S___A_binding_, self, new_binding_list);
			    }
			}
			binding_list = new_binding_list;
			sublisp_throw($sym372$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_METHOD, new_binding_list);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_internal_proposal_binding_list(self, binding_list);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_internal_proposal_method = Errors.handleThrowable(ccatch_env_var, $sym372$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_METHOD);
		}
		return catch_var_for_cyblack_auto_generated_internal_proposal_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_get_auto_generated_ks_assistant_method(SubLObject self) {
	{
	    SubLObject assistant = NIL;
	    SubLObject cdolist_list_var = subloop_structures.class_compiled_inheritance_path(self);
	    SubLObject class_reference = NIL;
	    for (class_reference = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), class_reference = cdolist_list_var.first()) {
		if (NIL == classes.subclassp(class_reference, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL)) {
		    return NIL;
		}
		assistant = cyblack_auto_generated_internal_proposal_get_auto_generated_ks_assistant_method(class_reference);
		if (NIL != assistant) {
		    return assistant;
		}
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_set_auto_generated_ks_assistant_method(SubLObject self, SubLObject new_assistant) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_internal_proposal_method = NIL;
		SubLObject auto_generated_ks_assistent = get_cyblack_auto_generated_internal_proposal_auto_generated_ks_assistent(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == new_assistant) || (NIL != cyblack_auto_generated_ks_assistant_p(new_assistant)))) {
				Errors.error($str_alt274$_SET_AUTO_GENERATED_KS_ASSISTANT_, self, new_assistant);
			    }
			}
			auto_generated_ks_assistent = new_assistant;
			sublisp_throw($sym376$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_METHOD, new_assistant);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_internal_proposal_auto_generated_ks_assistent(self, auto_generated_ks_assistent);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_internal_proposal_method = Errors.handleThrowable(ccatch_env_var, $sym376$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_METHOD);
		}
		return catch_var_for_cyblack_auto_generated_internal_proposal_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_get_proposal_index_method(SubLObject self) {
	{
	    SubLObject proposal_index = get_cyblack_auto_generated_internal_proposal_proposal_index(self);
	    return proposal_index;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_set_proposal_index_method(SubLObject self, SubLObject new_index) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_internal_proposal_method = NIL;
		SubLObject proposal_index = get_cyblack_auto_generated_internal_proposal_proposal_index(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!(new_index.isInteger() && new_index.numGE(ZERO_INTEGER))) {
				Errors.error($str_alt382$_SET_PROPOSAL_INDEX__S___Index__S, self, new_index);
			    }
			}
			proposal_index = new_index;
			sublisp_throw($sym381$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_METHOD, new_index);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_internal_proposal_proposal_index(self, proposal_index);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_internal_proposal_method = Errors.handleThrowable(ccatch_env_var, $sym381$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_METHOD);
		}
		return catch_var_for_cyblack_auto_generated_internal_proposal_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_proposal_set_trace_state_method(SubLObject self, SubLObject new_state) {
	{
	    SubLObject catch_var_for_cyblack_auto_generated_internal_proposal_method = NIL;
	    SubLObject trace_basic_methods = get_cyblack_auto_generated_internal_proposal_trace_basic_methods(self);
	    try {
		try {
		    trace_basic_methods = new_state;
		    sublisp_throw($sym384$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_METHOD, new_state);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_auto_generated_internal_proposal_trace_basic_methods(self, trace_basic_methods);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_auto_generated_internal_proposal_method = Errors.handleThrowable(ccatch_env_var, $sym384$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_METHOD);
	    }
	    return catch_var_for_cyblack_auto_generated_internal_proposal_method;
	}
    }

    public static final SubLObject get_cyblack_auto_generated_internal_ksi_proposal(SubLObject cyblack_auto_generated_internal_ksi) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_internal_ksi, EIGHT_INTEGER, PROPOSAL);
    }

    public static final SubLObject set_cyblack_auto_generated_internal_ksi_proposal(SubLObject cyblack_auto_generated_internal_ksi, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_internal_ksi, value, EIGHT_INTEGER, PROPOSAL);
    }

    public static final SubLObject get_cyblack_auto_generated_internal_ksi_trace_basic_methods(SubLObject cyblack_auto_generated_internal_ksi) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_internal_ksi, SEVEN_INTEGER, TRACE_BASIC_METHODS);
    }

    public static final SubLObject set_cyblack_auto_generated_internal_ksi_trace_basic_methods(SubLObject cyblack_auto_generated_internal_ksi, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_internal_ksi, value, SEVEN_INTEGER, TRACE_BASIC_METHODS);
    }

    public static final SubLObject get_cyblack_auto_generated_internal_ksi_ksi_index(SubLObject cyblack_auto_generated_internal_ksi) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_internal_ksi, SIX_INTEGER, KSI_INDEX);
    }

    public static final SubLObject set_cyblack_auto_generated_internal_ksi_ksi_index(SubLObject cyblack_auto_generated_internal_ksi, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_internal_ksi, value, SIX_INTEGER, KSI_INDEX);
    }

    public static final SubLObject get_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(SubLObject cyblack_auto_generated_internal_ksi) {
	{
	    SubLObject v_class = subloop_structures.instance_class(cyblack_auto_generated_internal_ksi);
	    SubLObject slot = slots.slot_assoc(IS_PROPOSAL_AUTO_GENERATED, subloop_structures.class_compiled_instance_boolean_slot_access_alist(v_class));
	    instances.instances_access_check_instance_slot(v_class, cyblack_auto_generated_internal_ksi, slot);
	}
	return classes.ldb_test($int$4097, subloop_structures.instance_boolean_slots(cyblack_auto_generated_internal_ksi));
    }

    public static final SubLObject set_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(SubLObject cyblack_auto_generated_internal_ksi, SubLObject value) {
	{
	    SubLObject v_class = subloop_structures.instance_class(cyblack_auto_generated_internal_ksi);
	    SubLObject slot = slots.slot_assoc(IS_PROPOSAL_AUTO_GENERATED, subloop_structures.class_compiled_instance_boolean_slot_access_alist(v_class));
	    instances.instances_access_check_instance_slot(v_class, cyblack_auto_generated_internal_ksi, slot);
	}
	subloop_structures._csetf_instance_boolean_slots(cyblack_auto_generated_internal_ksi, bytes.dpb(NIL != value ? ((SubLObject) (ONE_INTEGER)) : ZERO_INTEGER, $int$4097, subloop_structures.instance_boolean_slots(cyblack_auto_generated_internal_ksi)));
	return value;
    }

    public static final SubLObject get_cyblack_auto_generated_internal_ksi_auto_generated_ks_assistent(SubLObject cyblack_auto_generated_internal_ksi) {
	{
	    SubLObject v_class = (cyblack_auto_generated_internal_ksi.isSymbol()) ? ((SubLObject) (classes.classes_retrieve_class(cyblack_auto_generated_internal_ksi)))
		    : NIL != subloop_structures.class_p(cyblack_auto_generated_internal_ksi) ? ((SubLObject) (cyblack_auto_generated_internal_ksi))
			    : NIL != subloop_structures.instance_p(cyblack_auto_generated_internal_ksi) ? ((SubLObject) (subloop_structures.instance_class(cyblack_auto_generated_internal_ksi))) : NIL;
	    if (NIL != v_class) {
		classes.classes_access_check_class_slot(v_class, slots.slot_assoc(AUTO_GENERATED_KS_ASSISTENT, subloop_structures.class_compiled_class_slot_access_alist(v_class)));
		return aref(subloop_structures.class_any_slots(v_class), ONE_INTEGER);
	    }
	    return NIL;
	}
    }

    public static final SubLObject set_cyblack_auto_generated_internal_ksi_auto_generated_ks_assistent(SubLObject cyblack_auto_generated_internal_ksi, SubLObject value) {
	{
	    SubLObject v_class = (cyblack_auto_generated_internal_ksi.isSymbol()) ? ((SubLObject) (classes.classes_retrieve_class(cyblack_auto_generated_internal_ksi)))
		    : NIL != subloop_structures.class_p(cyblack_auto_generated_internal_ksi) ? ((SubLObject) (cyblack_auto_generated_internal_ksi))
			    : NIL != subloop_structures.instance_p(cyblack_auto_generated_internal_ksi) ? ((SubLObject) (subloop_structures.instance_class(cyblack_auto_generated_internal_ksi))) : NIL;
	    if (NIL != v_class) {
		classes.classes_access_check_class_slot(v_class, slots.slot_assoc(AUTO_GENERATED_KS_ASSISTENT, subloop_structures.class_compiled_class_slot_access_alist(v_class)));
		return set_aref(subloop_structures.class_any_slots(v_class), ONE_INTEGER, value);
	    }
	    return NIL;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_auto_generated_internal_ksi_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, AUTO_GENERATED_KS_ASSISTENT, NIL);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_auto_generated_internal_ksi_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, IS_PROPOSAL_AUTO_GENERATED, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KSI, ACTIVATION_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KSI, KNOWLEDGE_SOURCE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KSI, EXECUTION_MODE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, KSI_INDEX, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, TRACE_BASIC_METHODS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, PROPOSAL, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_p(SubLObject cyblack_auto_generated_internal_ksi) {
	return classes.subloop_instanceof_class(cyblack_auto_generated_internal_ksi, CYBLACK_AUTO_GENERATED_INTERNAL_KSI);
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_get_binding_list_method(SubLObject self) {
	{
	    SubLObject proposal = get_cyblack_auto_generated_internal_ksi_proposal(self);
	    SubLObject is_proposal_auto_generated = get_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(self);
	    if (NIL != is_proposal_auto_generated) {
		return cyblack_auto_generated_internal_proposal_get_binding_list_method(proposal);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_set_binding_list_method(SubLObject self, SubLObject new_binding_list) {
	{
	    SubLObject proposal = get_cyblack_auto_generated_internal_ksi_proposal(self);
	    SubLObject is_proposal_auto_generated = get_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(self);
	    if (NIL != is_proposal_auto_generated) {
		return cyblack_auto_generated_internal_proposal_set_binding_list_method(proposal, new_binding_list);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_get_copy_of_binding_list_method(SubLObject self) {
	{
	    SubLObject proposal = get_cyblack_auto_generated_internal_ksi_proposal(self);
	    SubLObject is_proposal_auto_generated = get_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(self);
	    if (NIL != is_proposal_auto_generated) {
		return cyblack_auto_generated_internal_proposal_get_copy_of_binding_list_method(proposal);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_bind_var_method(SubLObject self, SubLObject var, SubLObject value) {
	{
	    SubLObject proposal = get_cyblack_auto_generated_internal_ksi_proposal(self);
	    SubLObject is_proposal_auto_generated = get_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(self);
	    if (NIL != is_proposal_auto_generated) {
		return cyblack_auto_generated_internal_proposal_bind_var_method(proposal, var, value);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_eval_var_method(SubLObject self, SubLObject var) {
	{
	    SubLObject proposal = get_cyblack_auto_generated_internal_ksi_proposal(self);
	    SubLObject is_proposal_auto_generated = get_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(self);
	    if (NIL != is_proposal_auto_generated) {
		return cyblack_auto_generated_internal_proposal_eval_var_method(proposal, var);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_get_variables_method(SubLObject self) {
	{
	    SubLObject proposal = get_cyblack_auto_generated_internal_ksi_proposal(self);
	    SubLObject is_proposal_auto_generated = get_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(self);
	    if (NIL != is_proposal_auto_generated) {
		return cyblack_auto_generated_internal_proposal_get_variables_method(proposal);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_get_values_method(SubLObject self) {
	{
	    SubLObject proposal = get_cyblack_auto_generated_internal_ksi_proposal(self);
	    SubLObject is_proposal_auto_generated = get_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(self);
	    if (NIL != is_proposal_auto_generated) {
		return cyblack_auto_generated_internal_proposal_get_values_method(proposal);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_copy_bindings_method(SubLObject self, SubLObject other_environment) {
	{
	    SubLObject proposal = get_cyblack_auto_generated_internal_ksi_proposal(self);
	    SubLObject is_proposal_auto_generated = get_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(self);
	    if (NIL != is_proposal_auto_generated) {
		return cyblack_auto_generated_internal_proposal_copy_bindings_method(proposal, other_environment);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_generate_from_bindings_code_method(SubLObject self, SubLObject var) {
	{
	    SubLObject proposal = get_cyblack_auto_generated_internal_ksi_proposal(self);
	    SubLObject is_proposal_auto_generated = get_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(self);
	    if (NIL != is_proposal_auto_generated) {
		return cyblack_auto_generated_internal_proposal_generate_from_bindings_code_method(proposal, var);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_generate_to_bindings_code_method(SubLObject self, SubLObject var) {
	{
	    SubLObject proposal = get_cyblack_auto_generated_internal_ksi_proposal(self);
	    SubLObject is_proposal_auto_generated = get_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(self);
	    if (NIL != is_proposal_auto_generated) {
		return cyblack_auto_generated_internal_proposal_generate_to_bindings_code_method(proposal, var);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_generate_from_bindings_code_given_vars_method(SubLObject self, SubLObject var, SubLObject vars) {
	{
	    SubLObject proposal = get_cyblack_auto_generated_internal_ksi_proposal(self);
	    SubLObject is_proposal_auto_generated = get_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(self);
	    if (NIL != is_proposal_auto_generated) {
		return cyblack_auto_generated_internal_proposal_generate_from_bindings_code_given_vars_method(proposal, var, vars);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_generate_to_bindings_code_given_vars_method(SubLObject self, SubLObject var, SubLObject vars) {
	{
	    SubLObject proposal = get_cyblack_auto_generated_internal_ksi_proposal(self);
	    SubLObject is_proposal_auto_generated = get_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(self);
	    if (NIL != is_proposal_auto_generated) {
		return cyblack_auto_generated_internal_proposal_generate_to_bindings_code_given_vars_method(proposal, var, vars);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_get_auto_generated_ks_assistant_method(SubLObject self) {
	{
	    SubLObject auto_generated_ks_assistent = get_cyblack_auto_generated_internal_ksi_auto_generated_ks_assistent(self);
	    return auto_generated_ks_assistent;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_set_auto_generated_ks_assistant_method(SubLObject self, SubLObject new_assistant) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_internal_ksi_method = NIL;
		SubLObject auto_generated_ks_assistent = get_cyblack_auto_generated_internal_ksi_auto_generated_ks_assistent(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == new_assistant) || (NIL != cyblack_auto_generated_ks_assistant_p(new_assistant)))) {
				Errors.error($str_alt274$_SET_AUTO_GENERATED_KS_ASSISTANT_, self, new_assistant);
			    }
			}
			auto_generated_ks_assistent = new_assistant;
			sublisp_throw($sym420$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_METHOD, new_assistant);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_internal_ksi_auto_generated_ks_assistent(self, auto_generated_ks_assistent);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_internal_ksi_method = Errors.handleThrowable(ccatch_env_var, $sym420$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_METHOD);
		}
		return catch_var_for_cyblack_auto_generated_internal_ksi_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_get_ksi_index_method(SubLObject self) {
	{
	    SubLObject ksi_index = get_cyblack_auto_generated_internal_ksi_ksi_index(self);
	    return ksi_index;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_set_ksi_index_method(SubLObject self, SubLObject new_index) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_internal_ksi_method = NIL;
		SubLObject ksi_index = get_cyblack_auto_generated_internal_ksi_ksi_index(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!(new_index.isInteger() && new_index.numGE(ZERO_INTEGER))) {
				Errors.error($str_alt426$_SET_KSI_INDEX__S___Index__S_is_o, self, new_index);
			    }
			}
			ksi_index = new_index;
			sublisp_throw($sym425$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_METHOD, new_index);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_internal_ksi_ksi_index(self, ksi_index);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_internal_ksi_method = Errors.handleThrowable(ccatch_env_var, $sym425$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_METHOD);
		}
		return catch_var_for_cyblack_auto_generated_internal_ksi_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_set_trace_state_method(SubLObject self, SubLObject new_state) {
	{
	    SubLObject catch_var_for_cyblack_auto_generated_internal_ksi_method = NIL;
	    SubLObject trace_basic_methods = get_cyblack_auto_generated_internal_ksi_trace_basic_methods(self);
	    try {
		try {
		    trace_basic_methods = new_state;
		    sublisp_throw($sym428$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_METHOD, new_state);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_auto_generated_internal_ksi_trace_basic_methods(self, trace_basic_methods);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_auto_generated_internal_ksi_method = Errors.handleThrowable(ccatch_env_var, $sym428$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_METHOD);
	    }
	    return catch_var_for_cyblack_auto_generated_internal_ksi_method;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_auto_generated_internal_ksi_method = NIL;
	    SubLObject auto_generated_ks_assistent = get_cyblack_auto_generated_internal_ksi_auto_generated_ks_assistent(self);
	    SubLObject proposal = get_cyblack_auto_generated_internal_ksi_proposal(self);
	    SubLObject ksi_index = get_cyblack_auto_generated_internal_ksi_ksi_index(self);
	    SubLObject is_proposal_auto_generated = get_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(self);
	    try {
		try {
		    cyblack_ksi.cyblack_basic_ksi_initialize_method(self);
		    auto_generated_ks_assistent = NIL;
		    ksi_index = NIL;
		    proposal = NIL;
		    is_proposal_auto_generated = NIL;
		    sublisp_throw($sym431$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_auto_generated_internal_ksi_auto_generated_ks_assistent(self, auto_generated_ks_assistent);
			    set_cyblack_auto_generated_internal_ksi_proposal(self, proposal);
			    set_cyblack_auto_generated_internal_ksi_ksi_index(self, ksi_index);
			    set_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(self, is_proposal_auto_generated);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_auto_generated_internal_ksi_method = Errors.handleThrowable(ccatch_env_var, $sym431$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_METHOD);
	    }
	    return catch_var_for_cyblack_auto_generated_internal_ksi_method;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_get_proposal_method(SubLObject self) {
	{
	    SubLObject proposal = get_cyblack_auto_generated_internal_ksi_proposal(self);
	    return proposal;
	}
    }

    public static final SubLObject cyblack_auto_generated_internal_ksi_set_proposal_method(SubLObject self, SubLObject new_proposal) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_internal_ksi_method = NIL;
		SubLObject proposal = get_cyblack_auto_generated_internal_ksi_proposal(self);
		SubLObject is_proposal_auto_generated = get_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == new_proposal) || (NIL != cyblack_proposal.cyblack_proposal_p(new_proposal)))) {
				Errors.error($str_alt440$_SET_PROPOSAL__S____S_is_not_an_i, self, new_proposal);
			    }
			}
			proposal = new_proposal;
			is_proposal_auto_generated = makeBoolean((NIL != new_proposal) && (NIL != cyblack_auto_generated_internal_proposal_p(new_proposal)));
			sublisp_throw($sym439$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_METHOD, new_proposal);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_internal_ksi_proposal(self, proposal);
				set_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated(self, is_proposal_auto_generated);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_internal_ksi_method = Errors.handleThrowable(ccatch_env_var, $sym439$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_METHOD);
		}
		return catch_var_for_cyblack_auto_generated_internal_ksi_method;
	    }
	}
    }

    public static final SubLObject bind_current_defks_body(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt442);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject expression = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt442);
		    expression = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    SubLObject old_value_var = make_symbol($str_alt443$old_value);
			    return list(CLET, list(bq_cons(old_value_var, $list_alt444)), list(CSETQ, $cyblack_current_defks_body$, expression), list(CUNWIND_PROTECT, bq_cons(PROGN, append(body, NIL)), list(CSETQ, $cyblack_current_defks_body$, old_value_var)));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt442);
		    }
		}
	    }
	}
	return NIL;
    }

    public static final SubLObject with_current_defks_body(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt448);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject var = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt448);
		    var = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    return listS(CLET, list(bq_cons(var, $list_alt444)), body);
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt448);
		    }
		}
	    }
	}
	return NIL;
    }

    public static final SubLObject get_current_defks_body() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    return $cyblack_current_defks_body$.getDynamicValue(thread);
	}
    }

    public static final SubLObject get_cyblack_defks_expression_children(SubLObject cyblack_defks_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_defks_expression, TWO_INTEGER, CHILDREN);
    }

    public static final SubLObject set_cyblack_defks_expression_children(SubLObject cyblack_defks_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_defks_expression, value, TWO_INTEGER, CHILDREN);
    }

    public static final SubLObject get_cyblack_defks_expression_parent(SubLObject cyblack_defks_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_defks_expression, ONE_INTEGER, PARENT);
    }

    public static final SubLObject set_cyblack_defks_expression_parent(SubLObject cyblack_defks_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_defks_expression, value, ONE_INTEGER, PARENT);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_defks_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_defks_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_defks_expression_p(SubLObject cyblack_defks_expression) {
	return classes.subloop_instanceof_class(cyblack_defks_expression, CYBLACK_DEFKS_EXPRESSION);
    }

    public static final SubLObject cyblack_defks_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_defks_expression_method = NIL;
	    SubLObject children = get_cyblack_defks_expression_children(self);
	    SubLObject parent = get_cyblack_defks_expression_parent(self);
	    try {
		try {
		    object.object_initialize_method(self);
		    parent = NIL;
		    children = NIL;
		    sublisp_throw($sym456$OUTER_CATCH_FOR_CYBLACK_DEFKS_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_expression_children(self, children);
			    set_cyblack_defks_expression_parent(self, parent);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_expression_method = Errors.handleThrowable(ccatch_env_var, $sym456$OUTER_CATCH_FOR_CYBLACK_DEFKS_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_defks_expression_method;
	}
    }

    public static final SubLObject cyblack_defks_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject cdolist_list_var = cyblack_defks_expression_get_children_method(self);
	    SubLObject child = NIL;
	    for (child = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), child = cdolist_list_var.first()) {
		print(child, stream);
	    }
	    return self;
	}
    }

    public static final SubLObject cyblack_defks_expression_get_parent_method(SubLObject self) {
	{
	    SubLObject parent = get_cyblack_defks_expression_parent(self);
	    return parent;
	}
    }

    public static final SubLObject cyblack_defks_expression_set_parent_method(SubLObject self, SubLObject new_parent) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_expression_method = NIL;
		SubLObject parent = get_cyblack_defks_expression_parent(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == new_parent) || (NIL != cyblack_defks_expression_p(new_parent)))) {
				Errors.error($str_alt467$_SET_PARENT__S____S_is_not_an_ins, self, new_parent);
			    }
			}
			parent = new_parent;
			if (NIL != parent) {
			    cyblack_defks_expression_add_child_method(parent, self);
			}
			sublisp_throw($sym466$OUTER_CATCH_FOR_CYBLACK_DEFKS_EXPRESSION_METHOD, parent);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_expression_parent(self, parent);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_expression_method = Errors.handleThrowable(ccatch_env_var, $sym466$OUTER_CATCH_FOR_CYBLACK_DEFKS_EXPRESSION_METHOD);
		}
		return catch_var_for_cyblack_defks_expression_method;
	    }
	}
    }

    public static final SubLObject cyblack_defks_expression_add_child_method(SubLObject self, SubLObject new_child) {
	{
	    SubLObject children = get_cyblack_defks_expression_children(self);
	    if (NIL == subl_promotions.memberP(new_child, children, UNPROVIDED, UNPROVIDED)) {
		children = nconc(children, list(new_child));
		set_cyblack_defks_expression_children(self, children);
	    }
	    return new_child;
	}
    }

    public static final SubLObject cyblack_defks_expression_get_children_method(SubLObject self) {
	{
	    SubLObject children = get_cyblack_defks_expression_children(self);
	    return children;
	}
    }

    public static final SubLObject cyblack_defks_expression_compile_method(SubLObject self) {
	return NIL;
    }

    public static final SubLObject cyblack_defks_expression_get_proposals_var_method(SubLObject self) {
	{
	    SubLObject parent = get_cyblack_defks_expression_parent(self);
	    if (NIL != parent) {
		return methods.funcall_instance_method_with_0_args(parent, GET_PROPOSALS_VAR);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_defks_expression_get_environment_var_method(SubLObject self) {
	{
	    SubLObject parent = get_cyblack_defks_expression_parent(self);
	    if (NIL != parent) {
		return methods.funcall_instance_method_with_0_args(parent, GET_ENVIRONMENT_VAR);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_defks_expression_register_posting_expression_method(SubLObject self, SubLObject posting_expression) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject parent = get_cyblack_defks_expression_parent(self);
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == cyblack_action_expression_p(posting_expression)) {
			Errors.error($str_alt487$_REGISTER_POSTING_EXPRESSION__S__, self, posting_expression);
		    }
		}
		if (NIL != parent) {
		    return methods.funcall_instance_method_with_1_args(parent, REGISTER_POSTING_EXPRESSION, posting_expression);
		}
		return NIL;
	    }
	}
    }

    public static final SubLObject cyblack_defks_expression_get_integer_reference_method(SubLObject self) {
	{
	    SubLObject parent = get_cyblack_defks_expression_parent(self);
	    if (NIL != parent) {
		return methods.funcall_instance_method_with_0_args(parent, GET_INTEGER_REFERENCE);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_defks_expression_generate_to_bindings_code_method(SubLObject self, SubLObject var, SubLObject vars) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!((NIL != var) && var.isSymbol())) {
		    Errors.error($str_alt493$_GENERATE_TO_BINDINGS_CODE__S____, self, var);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_variable_list_p(vars)) {
		    Errors.error($str_alt494$_GENERATE_TO_BINDINGS_CODE__S____, self, vars);
		}
	    }
	    {
		SubLObject template_binding_setters = NIL;
		SubLObject list_expression = vars;
		if (NIL == list_expression) {
		    template_binding_setters = NIL;
		} else if (list_expression.isAtom()) {
		    template_binding_setters = list(list_expression);
		} else if (NIL == list_expression.rest()) {
		    {
			SubLObject current_var = list_expression.first();
			template_binding_setters = list(var == SELF ? ((SubLObject) (list(BIND_VAR, SELF, list(QUOTE, current_var), current_var))) : list(FUNCALL_INSTANCE_METHOD, var, $list_alt210, list(QUOTE, current_var), current_var));
		    }
		} else {
		    {
			SubLObject tail_cons = NIL;
			SubLObject result = NIL;
			{
			    SubLObject current_var = list_expression.first();
			    template_binding_setters = list(var == SELF ? ((SubLObject) (list(BIND_VAR, SELF, list(QUOTE, current_var), current_var))) : list(FUNCALL_INSTANCE_METHOD, var, $list_alt210, list(QUOTE, current_var), current_var));
			    tail_cons = template_binding_setters;
			}
			{
			    SubLObject cdolist_list_var = list_expression.rest();
			    SubLObject current_var = NIL;
			    for (current_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), current_var = cdolist_list_var.first()) {
				result = list(var == SELF ? ((SubLObject) (list(BIND_VAR, SELF, list(QUOTE, current_var), current_var))) : list(FUNCALL_INSTANCE_METHOD, var, $list_alt210, list(QUOTE, current_var), current_var));
				rplacd(tail_cons, result);
				tail_cons = result;
			    }
			}
		    }
		}

		return template_binding_setters;
	    }
	}
    }

    public static final SubLObject cyblack_defks_expression_generate_from_bindings_code_method(SubLObject self, SubLObject var, SubLObject vars) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!((NIL != var) && var.isSymbol())) {
		    Errors.error($str_alt499$_GENERATE_FROM_BINDINGS_CODE__S__, self, var);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_variable_list_p(vars)) {
		    Errors.error($str_alt500$_GENERATE_FROM_BINDINGS_CODE__S__, self, vars);
		}
	    }
	    {
		SubLObject template_bindings = NIL;
		SubLObject list_expression = vars;
		if (NIL == list_expression) {
		    template_bindings = NIL;
		} else if (list_expression.isAtom()) {
		    template_bindings = list(list_expression);
		} else if (NIL == list_expression.rest()) {
		    {
			SubLObject current_var = list_expression.first();
			template_bindings = list(list(current_var, list(FUNCALL_INSTANCE_METHOD, var, $list_alt214, list(QUOTE, current_var))));
		    }
		} else {
		    {
			SubLObject tail_cons = NIL;
			SubLObject result = NIL;
			{
			    SubLObject current_var = list_expression.first();
			    template_bindings = list(list(current_var, list(FUNCALL_INSTANCE_METHOD, var, $list_alt214, list(QUOTE, current_var))));
			    tail_cons = template_bindings;
			}
			{
			    SubLObject cdolist_list_var = list_expression.rest();
			    SubLObject current_var = NIL;
			    for (current_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), current_var = cdolist_list_var.first()) {
				result = list(list(current_var, list(FUNCALL_INSTANCE_METHOD, var, $list_alt214, list(QUOTE, current_var))));
				rplacd(tail_cons, result);
				tail_cons = result;
			    }
			}
		    }
		}

		return template_bindings;
	    }
	}
    }

    public static final SubLObject cyblack_defks_expression_generate_noop_calls_method(SubLObject self, SubLObject vars) {
	{
	    SubLObject noop_calls = NIL;
	    SubLObject list_expression = vars;
	    if (NIL == list_expression) {
		noop_calls = NIL;
	    } else if (list_expression.isAtom()) {
		noop_calls = list(list_expression);
	    } else if (NIL == list_expression.rest()) {
		{
		    SubLObject var = list_expression.first();
		    noop_calls = list(list(CYBLACK_SILENCE, var));
		}
	    } else {
		{
		    SubLObject tail_cons = NIL;
		    SubLObject result = NIL;
		    {
			SubLObject var = list_expression.first();
			noop_calls = list(list(CYBLACK_SILENCE, var));
			tail_cons = noop_calls;
		    }
		    {
			SubLObject cdolist_list_var = list_expression.rest();
			SubLObject var = NIL;
			for (var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), var = cdolist_list_var.first()) {
			    result = list(list(CYBLACK_SILENCE, var));
			    rplacd(tail_cons, result);
			    tail_cons = result;
			}
		    }
		}
	    }

	    return noop_calls;
	}
    }

    public static final SubLObject cyblack_quick_symbolic_expression_p(SubLObject v_object) {
	return makeBoolean(((v_object.isSymbol() || v_object.isNumber()) || (NIL != cyblack_defks_expression_p(v_object))) || (v_object.isCons() && v_object.first().isSymbol()));
    }

    public static final SubLObject cyblack_copy_tree_while_setting_parent(SubLObject v_object, SubLObject parent) {
	if (NIL != cyblack_defks_expression_p(v_object)) {
	    cyblack_defks_expression_set_parent_method(v_object, parent);
	    return v_object;
	} else if (v_object.isCons()) {
	    return cons(cyblack_copy_tree_while_setting_parent(v_object.first(), parent), cyblack_copy_tree_while_setting_parent(v_object.rest(), parent));
	} else {
	    return v_object;
	}

    }

    public static final SubLObject cyblack_traverse_tree_while_setting_parent(SubLObject v_object, SubLObject parent) {
	if (NIL != cyblack_defks_expression_p(v_object)) {
	    cyblack_defks_expression_set_parent_method(v_object, parent);
	    return NIL;
	} else if (v_object.isCons()) {
	    cyblack_traverse_tree_while_setting_parent(v_object.first(), parent);
	    cyblack_traverse_tree_while_setting_parent(v_object.rest(), parent);
	    return NIL;
	} else {
	    return NIL;
	}

    }

    public static final SubLObject get_cyblack_defks_body_method_definitions(SubLObject cyblack_defks_body) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_defks_body, ELEVEN_INTEGER, METHOD_DEFINITIONS);
    }

    public static final SubLObject set_cyblack_defks_body_method_definitions(SubLObject cyblack_defks_body, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_defks_body, value, ELEVEN_INTEGER, METHOD_DEFINITIONS);
    }

    public static final SubLObject get_cyblack_defks_body_slot_declarations(SubLObject cyblack_defks_body) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_defks_body, TEN_INTEGER, SLOT_DECLARATIONS);
    }

    public static final SubLObject set_cyblack_defks_body_slot_declarations(SubLObject cyblack_defks_body, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_defks_body, value, TEN_INTEGER, SLOT_DECLARATIONS);
    }

    public static final SubLObject get_cyblack_defks_body_integer_reference(SubLObject cyblack_defks_body) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_defks_body, NINE_INTEGER, INTEGER_REFERENCE);
    }

    public static final SubLObject set_cyblack_defks_body_integer_reference(SubLObject cyblack_defks_body, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_defks_body, value, NINE_INTEGER, INTEGER_REFERENCE);
    }

    public static final SubLObject get_cyblack_defks_body_posting_expression_alist(SubLObject cyblack_defks_body) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_defks_body, EIGHT_INTEGER, POSTING_EXPRESSION_ALIST);
    }

    public static final SubLObject set_cyblack_defks_body_posting_expression_alist(SubLObject cyblack_defks_body, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_defks_body, value, EIGHT_INTEGER, POSTING_EXPRESSION_ALIST);
    }

    public static final SubLObject get_cyblack_defks_body_posting_expression_count(SubLObject cyblack_defks_body) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_defks_body, SEVEN_INTEGER, POSTING_EXPRESSION_COUNT);
    }

    public static final SubLObject set_cyblack_defks_body_posting_expression_count(SubLObject cyblack_defks_body, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_defks_body, value, SEVEN_INTEGER, POSTING_EXPRESSION_COUNT);
    }

    public static final SubLObject get_cyblack_defks_body_environment_var(SubLObject cyblack_defks_body) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_defks_body, SIX_INTEGER, ENVIRONMENT_VAR);
    }

    public static final SubLObject set_cyblack_defks_body_environment_var(SubLObject cyblack_defks_body, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_defks_body, value, SIX_INTEGER, ENVIRONMENT_VAR);
    }

    public static final SubLObject get_cyblack_defks_body_proposals_var(SubLObject cyblack_defks_body) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_defks_body, FIVE_INTEGER, PROPOSALS_VAR);
    }

    public static final SubLObject set_cyblack_defks_body_proposals_var(SubLObject cyblack_defks_body, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_defks_body, value, FIVE_INTEGER, PROPOSALS_VAR);
    }

    public static final SubLObject get_cyblack_defks_body_stimulation_cond(SubLObject cyblack_defks_body) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_defks_body, FOUR_INTEGER, STIMULATION_COND);
    }

    public static final SubLObject set_cyblack_defks_body_stimulation_cond(SubLObject cyblack_defks_body, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_defks_body, value, FOUR_INTEGER, STIMULATION_COND);
    }

    public static final SubLObject get_cyblack_defks_body_on_startup_clause(SubLObject cyblack_defks_body) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_defks_body, THREE_INTEGER, ON_STARTUP_CLAUSE);
    }

    public static final SubLObject set_cyblack_defks_body_on_startup_clause(SubLObject cyblack_defks_body, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_defks_body, value, THREE_INTEGER, ON_STARTUP_CLAUSE);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_defks_body_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_defks_body_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_BODY, ON_STARTUP_CLAUSE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_BODY, STIMULATION_COND, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_BODY, PROPOSALS_VAR, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_BODY, ENVIRONMENT_VAR, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_BODY, POSTING_EXPRESSION_COUNT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_BODY, POSTING_EXPRESSION_ALIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_BODY, INTEGER_REFERENCE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_BODY, SLOT_DECLARATIONS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_BODY, METHOD_DEFINITIONS, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_defks_body_p(SubLObject cyblack_defks_body) {
	return classes.subloop_instanceof_class(cyblack_defks_body, CYBLACK_DEFKS_BODY);
    }

    public static final SubLObject cyblack_defks_body_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_defks_body_method = NIL;
	    SubLObject method_definitions = get_cyblack_defks_body_method_definitions(self);
	    SubLObject slot_declarations = get_cyblack_defks_body_slot_declarations(self);
	    SubLObject integer_reference = get_cyblack_defks_body_integer_reference(self);
	    SubLObject posting_expression_alist = get_cyblack_defks_body_posting_expression_alist(self);
	    SubLObject posting_expression_count = get_cyblack_defks_body_posting_expression_count(self);
	    SubLObject environment_var = get_cyblack_defks_body_environment_var(self);
	    SubLObject proposals_var = get_cyblack_defks_body_proposals_var(self);
	    SubLObject stimulation_cond = get_cyblack_defks_body_stimulation_cond(self);
	    try {
		try {
		    cyblack_defks_expression_initialize_method(self);
		    stimulation_cond = NIL;
		    proposals_var = make_symbol($$$proposals);
		    environment_var = make_symbol($$$environment);
		    posting_expression_count = ZERO_INTEGER;
		    posting_expression_alist = NIL;
		    integer_reference = new_integer_reference(UNPROVIDED);
		    slot_declarations = NIL;
		    method_definitions = NIL;
		    sublisp_throw($sym520$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_body_method_definitions(self, method_definitions);
			    set_cyblack_defks_body_slot_declarations(self, slot_declarations);
			    set_cyblack_defks_body_integer_reference(self, integer_reference);
			    set_cyblack_defks_body_posting_expression_alist(self, posting_expression_alist);
			    set_cyblack_defks_body_posting_expression_count(self, posting_expression_count);
			    set_cyblack_defks_body_environment_var(self, environment_var);
			    set_cyblack_defks_body_proposals_var(self, proposals_var);
			    set_cyblack_defks_body_stimulation_cond(self, stimulation_cond);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_body_method = Errors.handleThrowable(ccatch_env_var, $sym520$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD);
	    }
	    return catch_var_for_cyblack_defks_body_method;
	}
    }

    public static final SubLObject cyblack_defks_body_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject stimulation_cond = get_cyblack_defks_body_stimulation_cond(self);
	    if (NIL != stimulation_cond) {
		format(stream, $str_alt525$_S, stimulation_cond);
	    } else {
		format(stream, $str_alt526$__STIMULATION_COND_);
	    }
	    return self;
	}
    }

    public static final SubLObject cyblack_defks_body_get_on_startup_clause_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_defks_body_method = NIL;
	    SubLObject on_startup_clause = get_cyblack_defks_body_on_startup_clause(self);
	    try {
		try {
		    sublisp_throw($sym530$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD, on_startup_clause);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_body_on_startup_clause(self, on_startup_clause);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_body_method = Errors.handleThrowable(ccatch_env_var, $sym530$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD);
	    }
	    return catch_var_for_cyblack_defks_body_method;
	}
    }

    public static final SubLObject cyblack_defks_body_set_on_startup_clause_method(SubLObject self, SubLObject new_clause) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_body_method = NIL;
		SubLObject on_startup_clause = get_cyblack_defks_body_on_startup_clause(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == new_clause) || (NIL != cyblack_defks_on_startup_clause_p(new_clause)))) {
				Errors.error($str_alt536$_SET_ON_STARTUP_CLAUSE__S____S_is, self, new_clause);
			    }
			}
			on_startup_clause = new_clause;
			sublisp_throw($sym535$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD, new_clause);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_body_on_startup_clause(self, on_startup_clause);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_body_method = Errors.handleThrowable(ccatch_env_var, $sym535$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD);
		}
		return catch_var_for_cyblack_defks_body_method;
	    }
	}
    }

    public static final SubLObject cyblack_defks_body_get_stimulation_cond_method(SubLObject self) {
	{
	    SubLObject stimulation_cond = get_cyblack_defks_body_stimulation_cond(self);
	    return stimulation_cond;
	}
    }

    public static final SubLObject cyblack_defks_body_set_stimulation_cond_method(SubLObject self, SubLObject new_stimulation_cond) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject stimulation_cond = get_cyblack_defks_body_stimulation_cond(self);
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (!((NIL == new_stimulation_cond) || (NIL != cyblack_defks_stimulation_cond_p(new_stimulation_cond)))) {
			Errors.error($str_alt545$_SET_STIMULATION_COND__S____S_is_, self, new_stimulation_cond);
		    }
		}
		stimulation_cond = new_stimulation_cond;
		set_cyblack_defks_body_stimulation_cond(self, stimulation_cond);
		cyblack_defks_expression_set_parent_method(stimulation_cond, self);
		cyblack_defks_body_distribute_binding_info_method(self);
		return new_stimulation_cond;
	    }
	}
    }

    public static final SubLObject cyblack_defks_body_distribute_binding_info_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_defks_body_method = NIL;
	    SubLObject stimulation_cond = get_cyblack_defks_body_stimulation_cond(self);
	    try {
		try {
		    if (NIL != stimulation_cond) {
			methods.funcall_instance_method_with_0_args(stimulation_cond, DISTRIBUTE_BINDING_INFO);
		    }
		    sublisp_throw($sym549$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD, NIL);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_body_stimulation_cond(self, stimulation_cond);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_body_method = Errors.handleThrowable(ccatch_env_var, $sym549$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD);
	    }
	    return catch_var_for_cyblack_defks_body_method;
	}
    }

    public static final SubLObject cyblack_defks_body_compile_to_on_startup_method_method(SubLObject self, SubLObject ks_assistant) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_body_method = NIL;
		SubLObject on_startup_clause = get_cyblack_defks_body_on_startup_clause(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_auto_generated_ks_assistant_p(ks_assistant)) {
				Errors.error($str_alt555$_COMPILE_TO_ON_STARTUP_METHOD__S_, self, ks_assistant);
			    }
			}
			if (NIL != on_startup_clause) {
			    sublisp_throw($sym554$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD, cyblack_defks_on_startup_clause_compile_to_on_startup_method_method(on_startup_clause, ks_assistant));
			}
			sublisp_throw($sym554$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD, listS(DEF_INSTANCE_METHOD, listS(ON_STARTUP, cyblack_auto_generated_ks_assistant_get_knowledge_source_class_method(ks_assistant), $list_alt51), $list_alt558));
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_body_on_startup_clause(self, on_startup_clause);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_body_method = Errors.handleThrowable(ccatch_env_var, $sym554$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD);
		}
		return catch_var_for_cyblack_defks_body_method;
	    }
	}
    }

    public static final SubLObject cyblack_defks_body_compile_to_create_proposals_method_method(SubLObject self, SubLObject ks_assistant) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject environment_var = get_cyblack_defks_body_environment_var(self);
		SubLObject proposals_var = get_cyblack_defks_body_proposals_var(self);
		SubLObject stimulation_cond = get_cyblack_defks_body_stimulation_cond(self);
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == cyblack_auto_generated_ks_assistant_p(ks_assistant)) {
			Errors.error($str_alt562$_COMPILE_TO_CREATE_PROPOSALS_METH, self, ks_assistant);
		    }
		}
		if (NIL == stimulation_cond) {
		    return NIL;
		}
		{
		    SubLObject knowledge_source_class = cyblack_auto_generated_ks_assistant_get_knowledge_source_class_method(ks_assistant);
		    SubLObject precondition_pattern = cyblack_auto_generated_ks_assistant_get_precondition_pattern_method(ks_assistant);
		    SubLObject precondition_pattern_parameters = (NIL != precondition_pattern) ? ((SubLObject) (cyblack_precondition_pattern.cyblack_get_parameters(precondition_pattern))) : NIL;
		    SubLObject body = methods.funcall_instance_method_with_3_args(stimulation_cond, COMPILE_TO_CREATE_PROPOSALS_METHOD_BODY, ks_assistant, knowledge_source_class, precondition_pattern_parameters);
		    return list(DEF_INSTANCE_METHOD, listS(CREATE_PROPOSALS, knowledge_source_class, $list_alt51), list(environment_var), listS(CLET, list(bq_cons(proposals_var, $list_alt564)), append(body, list(list(RET, list(NREVERSE, proposals_var))))));
		}
	    }
	}
    }

    public static final SubLObject cyblack_defks_body_compile_to_execute_method_method(SubLObject self, SubLObject ks_assistant) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_body_method = NIL;
		SubLObject posting_expression_alist = get_cyblack_defks_body_posting_expression_alist(self);
		SubLObject stimulation_cond = get_cyblack_defks_body_stimulation_cond(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_auto_generated_ks_assistant_p(ks_assistant)) {
				Errors.error($str_alt571$_COMPILE_TO_CREATE_EXECUTE_METHOD, self, ks_assistant);
			    }
			}
			if (NIL == stimulation_cond) {
			    sublisp_throw($sym570$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD, NIL);
			}
			{
			    SubLObject ksi_class = cyblack_auto_generated_ks_assistant_get_knowledge_source_instantiation_class_method(ks_assistant);
			    SubLObject application_var = make_symbol($$$application);
			    SubLObject ksi_index_var = make_symbol($str_alt573$ksi_index);
			    SubLObject posting_var = make_symbol($$$posting);
			    SubLObject blackboard_var = make_symbol($$$blackboard);
			    SubLObject datatype_var = make_symbol($$$datatype);
			    SubLObject datatype_dictionary_var = make_symbol($str_alt577$datatype_dictionary);
			    SubLObject arglist = NIL;
			    SubLObject v_bindings = NIL;
			    SubLObject cases = NIL;
			    SubLObject list_expression = cyblack_defks_stimulation_cond_get_arg_list_method(stimulation_cond);
			    if (NIL == list_expression) {
				arglist = NIL;
			    } else if (list_expression.isAtom()) {
				arglist = list(list_expression);
			    } else if (NIL == list_expression.rest()) {
				{
				    SubLObject arg = list_expression.first();
				    arglist = list(cyblack_defks_stimulation_cond_arg_get_arg_method(arg));
				}
			    } else {
				{
				    SubLObject tail_cons = NIL;
				    SubLObject result = NIL;
				    {
					SubLObject arg = list_expression.first();
					arglist = list(cyblack_defks_stimulation_cond_arg_get_arg_method(arg));
					tail_cons = arglist;
				    }
				    {
					SubLObject cdolist_list_var = list_expression.rest();
					SubLObject arg = NIL;
					for (arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), arg = cdolist_list_var.first()) {
					    result = list(cyblack_defks_stimulation_cond_arg_get_arg_method(arg));
					    rplacd(tail_cons, result);
					    tail_cons = result;
					}
				    }
				}
			    }

			    {
				SubLObject list_expression_3 = arglist;
				if (NIL == list_expression_3) {
				    v_bindings = NIL;
				} else if (list_expression_3.isAtom()) {
				    v_bindings = list(list_expression_3);
				} else if (NIL == list_expression_3.rest()) {
				    {
					SubLObject arg = list_expression_3.first();
					v_bindings = list(list(arg, list(EVAL_VAR, SELF, list(QUOTE, arg))));
				    }
				} else {
				    {
					SubLObject tail_cons = NIL;
					SubLObject result = NIL;
					{
					    SubLObject arg = list_expression_3.first();
					    v_bindings = list(list(arg, list(EVAL_VAR, SELF, list(QUOTE, arg))));
					    tail_cons = v_bindings;
					}
					{
					    SubLObject cdolist_list_var = list_expression_3.rest();
					    SubLObject arg = NIL;
					    for (arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), arg = cdolist_list_var.first()) {
						result = list(list(arg, list(EVAL_VAR, SELF, list(QUOTE, arg))));
						rplacd(tail_cons, result);
						tail_cons = result;
					    }
					}
				    }
				}

			    }
			    {
				SubLObject cdolist_list_var = posting_expression_alist;
				SubLObject cons = NIL;
				for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
				    {
					SubLObject datum = cons;
					SubLObject current = datum;
					SubLObject index = NIL;
					SubLObject posting_expression = NIL;
					destructuring_bind_must_consp(current, datum, $list_alt578);
					index = current.first();
					current = current.rest();
					posting_expression = current;
					if (NIL != cyblack_posting_expr_p(posting_expression)) {
					    cases = list_utilities.dotted_assoc_push(
						    instances.get_slot(cyblack_defks_expression_get_parent_method(
							    posting_expression), EXPRESSION_INDEX),
						    listS(CLET, append(cyblack_posting_expr_get_execute_method_bindings_method(posting_expression, SELF), NIL),
							    list(CSETQ, datatype_var, list(CYBLACK_DATATYPE_DICTIONARY_INTERN, datatype_dictionary_var, instances.get_slot(posting_expression, DATATYPE_STRING))), list(CSETQ, posting_var, list(CREATE_POSTING, SELF, datatype_var)),
							    list(INLINE_METHOD, $list_alt584, posting_var, bq_cons(LIST, append(copy_tree(instances.get_slot(posting_expression, SLOT_INITIALIZATIONS)), NIL))), append(
								    NIL != instances.get_slot(posting_expression, CONFIDENCE_EXPRESSION)
									    ? ((SubLObject) (NIL != instances.get_slot(posting_expression, COMPUTE_CONFIDENCE) ? ((SubLObject) (list(list(CYBLACK_POSTING_SET_CONFIDENCE, posting_var, instances.get_slot(posting_expression, CONFIDENCE_EXPRESSION)))))
										    : list(list(CYBLACK_POSTING_SET_CONFIDENCE, posting_var, list(LIST, $list_alt590, instances.get_slot(posting_expression, CONFIDENCE_EXPRESSION))))))
									    : NIL,
								    list(list(CYBLACK_BLACKBOARD_POST, blackboard_var, posting_var)))),
						    cases, UNPROVIDED);
					} else if (NIL != cyblack_removal_expr_p(posting_expression)) {
					    {
						SubLObject execute_method_bindings = cyblack_posting_expr_get_execute_method_bindings_method(posting_expression, SELF);
						SubLObject ignore_clauses = NIL;
						SubLObject list_expression_4 = execute_method_bindings;
						if (NIL == list_expression_4) {
						    ignore_clauses = NIL;
						} else if (list_expression_4.isAtom()) {
						    ignore_clauses = list(list_expression_4);
						} else if (NIL == list_expression_4.rest()) {
						    {
							SubLObject binding = list_expression_4.first();
							ignore_clauses = list(binding.isCons() ? ((SubLObject) (list(CYBLACK_SILENCE, binding.first()))) : list(CYBLACK_SILENCE, binding));
						    }
						} else {
						    {
							SubLObject tail_cons = NIL;
							SubLObject result = NIL;
							{
							    SubLObject binding = list_expression_4.first();
							    ignore_clauses = list(binding.isCons() ? ((SubLObject) (list(CYBLACK_SILENCE, binding.first()))) : list(CYBLACK_SILENCE, binding));
							    tail_cons = ignore_clauses;
							}
							{
							    SubLObject cdolist_list_var_5 = list_expression_4.rest();
							    SubLObject binding = NIL;
							    for (binding = cdolist_list_var_5.first(); NIL != cdolist_list_var_5; cdolist_list_var_5 = cdolist_list_var_5.rest(), binding = cdolist_list_var_5.first()) {
								result = list(binding.isCons() ? ((SubLObject) (list(CYBLACK_SILENCE, binding.first()))) : list(CYBLACK_SILENCE, binding));
								rplacd(tail_cons, result);
								tail_cons = result;
							    }
							}
						    }
						}

						cases = list_utilities.dotted_assoc_push(instances.get_slot(cyblack_defks_expression_get_parent_method(posting_expression), EXPRESSION_INDEX), listS(CLET, append(execute_method_bindings, NIL),
							append(NIL != ignore_clauses ? ((SubLObject) (ignore_clauses)) : NIL, list(list(CYBLACK_BLACKBOARD_UNPOST, blackboard_var, instances.get_slot(posting_expression, POSTING_REFERENCE_EXPRESSION))))), cases, UNPROVIDED);
					    }
					} else if (NIL != cyblack_deactivate_expr_p(posting_expression)) {
					    cases = list_utilities.dotted_assoc_push(instances.get_slot(cyblack_defks_expression_get_parent_method(posting_expression), EXPRESSION_INDEX), list(CLET, append(cyblack_posting_expr_get_execute_method_bindings_method(posting_expression, SELF), NIL),
						    list(CSETQ, posting_var, instances.get_slot(posting_expression, POSTING_REFERENCE_EXPRESSION)), list(PWHEN, posting_var, listS(CYBLACK_POSTING_SET_ACTIVE, posting_var, $list_alt564))), cases, UNPROVIDED);
					} else if (NIL != cyblack_set_result_expression_p(posting_expression)) {
					    cases = list_utilities.dotted_assoc_push(instances.get_slot(cyblack_defks_expression_get_parent_method(posting_expression), EXPRESSION_INDEX), list(CLET, append(cyblack_posting_expr_get_execute_method_bindings_method(posting_expression, SELF), NIL),
						    list(CSETQ, posting_var, instances.get_slot(posting_expression, POSTING_REFERENCE_EXPRESSION)), list(PWHEN, list(CAND, posting_var, application_var), list(CYBLACK_APPLICATION_SET_RESULT, application_var, posting_var))), cases, UNPROVIDED);
					} else if (NIL != cyblack_return_expression_p(posting_expression)) {
					    cases = list_utilities.dotted_assoc_push(instances.get_slot(cyblack_defks_expression_get_parent_method(posting_expression), EXPRESSION_INDEX),
						    list(CLET, append(cyblack_posting_expr_get_execute_method_bindings_method(posting_expression, SELF), NIL), list(CSETQ, posting_var, instances.get_slot(posting_expression, POSTING_REFERENCE_EXPRESSION)),
							    list(PWHEN, list(CAND, posting_var, application_var), list(CYBLACK_APPLICATION_SET_RESULT, application_var, posting_var), list(CYBLACK_APPLICATION_HALT, application_var))),
						    cases, UNPROVIDED);
					} else if (NIL != cyblack_reset_action_expression_p(posting_expression)) {
					    cases = list_utilities.dotted_assoc_push(instances.get_slot(cyblack_defks_expression_get_parent_method(posting_expression), EXPRESSION_INDEX), list(CLET, append(cyblack_posting_expr_get_execute_method_bindings_method(posting_expression, SELF), NIL),
						    list(PWHEN, application_var, list(FUNCALL_INSTANCE_METHOD, application_var, $list_alt599, list(QUOTE, cyblack_reset_action_expression_get_destination_list_method(posting_expression))))), cases, UNPROVIDED);
					} else if (NIL != cyblack_error_expression_p(posting_expression)) {
					    cases = list_utilities.dotted_assoc_push(instances.get_slot(cyblack_defks_expression_get_parent_method(posting_expression), EXPRESSION_INDEX),
						    list(CLET, append(cyblack_posting_expr_get_execute_method_bindings_method(posting_expression, SELF), NIL), list(CSETQ, posting_var, instances.get_slot(posting_expression, POSTING_REFERENCE_EXPRESSION)),
							    list(PWHEN, list(CAND, posting_var, application_var), listS(CYBLACK_APPLICATION_SET_RESULT, application_var, $list_alt600),
								    listS(ERROR, cyblack_error_expression_get_error_string_method(posting_expression), cyblack_error_expression_get_error_args_method(posting_expression)))),
						    cases, UNPROVIDED);
					} else if (NIL != cyblack_halt_expression_p(posting_expression)) {
					    cases = list_utilities.dotted_assoc_push(instances.get_slot(cyblack_defks_expression_get_parent_method(posting_expression), EXPRESSION_INDEX), list(CLET, append(cyblack_posting_expr_get_execute_method_bindings_method(posting_expression, SELF), NIL),
						    list(PWHEN, application_var, listS(CYBLACK_APPLICATION_SET_RESULT, application_var, $list_alt602), list(CYBLACK_APPLICATION_HALT, application_var))), cases, UNPROVIDED);
					}

				    }
				}
			    }
			    {
				SubLObject cdolist_list_var = cases;
				SubLObject v_case = NIL;
				for (v_case = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), v_case = cdolist_list_var.first()) {
				    rplacd(v_case, cyblack_flatten_progns(cyblack_clet_merge(v_case.rest())));
				}
			    }
			    sublisp_throw($sym570$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD,
				    list(DEF_INSTANCE_METHOD, listS(EXECUTE, ksi_class, $list_alt267), NIL,
					    listS(CLET, list(bq_cons(application_var, $list_alt604), bq_cons(ksi_index_var, $list_alt605)), list(CYBLACK_SILENCE, ksi_index_var), listS(MUST, application_var, $list_alt607),
						    list(CLET, list(list(blackboard_var, list(CYBLACK_APPLICATION_GET_BLACKBOARD, application_var))), list(MUST, blackboard_var, $str_alt609$_EXECUTE__S___No_blackboard_is_as, SELF, application_var),
							    list(CLET, list(list(datatype_dictionary_var, list(CYBLACK_APPLICATION_GET_DATATYPE_DICTIONARY, application_var))), list(MUST, datatype_dictionary_var, $str_alt611$_EXECUTE__S___No_datatype_diction, SELF, application_var),
								    list(CLET, list(datatype_var, posting_var), list(CYBLACK_SILENCE, datatype_var), list(CYBLACK_SILENCE, posting_var), listS(PCASE, ksi_index_var, append(cases, NIL))))),
						    $list_alt192)));
			}
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_body_posting_expression_alist(self, posting_expression_alist);
				set_cyblack_defks_body_stimulation_cond(self, stimulation_cond);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_body_method = Errors.handleThrowable(ccatch_env_var, $sym570$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD);
		}
		return catch_var_for_cyblack_defks_body_method;
	    }
	}
    }

    public static final SubLObject cyblack_defks_body_get_proposals_var_method(SubLObject self) {
	{
	    SubLObject proposals_var = get_cyblack_defks_body_proposals_var(self);
	    return proposals_var;
	}
    }

    public static final SubLObject cyblack_defks_body_get_environment_var_method(SubLObject self) {
	{
	    SubLObject environment_var = get_cyblack_defks_body_environment_var(self);
	    return environment_var;
	}
    }

    public static final SubLObject cyblack_defks_body_register_posting_expression_method(SubLObject self, SubLObject posting_expression) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_body_method = NIL;
		SubLObject posting_expression_alist = get_cyblack_defks_body_posting_expression_alist(self);
		SubLObject posting_expression_count = get_cyblack_defks_body_posting_expression_count(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_action_expression_p(posting_expression)) {
				Errors.error($str_alt487$_REGISTER_POSTING_EXPRESSION__S__, self, posting_expression);
			    }
			}
			posting_expression_alist = cons(cons(posting_expression_count, posting_expression), posting_expression_alist);
			posting_expression_count = add(posting_expression_count, ONE_INTEGER);
			sublisp_throw($sym619$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD, posting_expression);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_body_posting_expression_alist(self, posting_expression_alist);
				set_cyblack_defks_body_posting_expression_count(self, posting_expression_count);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_body_method = Errors.handleThrowable(ccatch_env_var, $sym619$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD);
		}
		return catch_var_for_cyblack_defks_body_method;
	    }
	}
    }

    public static final SubLObject cyblack_defks_body_get_posting_expression_count_method(SubLObject self) {
	{
	    SubLObject posting_expression_count = get_cyblack_defks_body_posting_expression_count(self);
	    return posting_expression_count;
	}
    }

    public static final SubLObject cyblack_defks_body_get_posting_expression_method(SubLObject self, SubLObject index) {
	{
	    SubLObject posting_expression_alist = get_cyblack_defks_body_posting_expression_alist(self);
	    SubLObject association = assoc(index, posting_expression_alist, UNPROVIDED, UNPROVIDED);
	    if (NIL != association) {
		return association.rest();
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_defks_body_get_integer_reference_method(SubLObject self) {
	{
	    SubLObject integer_reference = get_cyblack_defks_body_integer_reference(self);
	    return integer_reference;
	}
    }

    public static final SubLObject cyblack_defks_body_get_slot_declarations_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_defks_body_method = NIL;
	    SubLObject slot_declarations = get_cyblack_defks_body_slot_declarations(self);
	    try {
		try {
		    sublisp_throw($sym632$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD, slot_declarations);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_body_slot_declarations(self, slot_declarations);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_body_method = Errors.handleThrowable(ccatch_env_var, $sym632$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD);
	    }
	    return catch_var_for_cyblack_defks_body_method;
	}
    }

    public static final SubLObject cyblack_defks_body_set_slot_declarations_method(SubLObject self, SubLObject new_slot_declarations) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_body_method = NIL;
		SubLObject slot_declarations = get_cyblack_defks_body_slot_declarations(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!new_slot_declarations.isList()) {
				Errors.error($str_alt638$_SET_SLOT_DECLARATIONS__S____S_is, self, new_slot_declarations);
			    }
			}
			{
			    SubLObject cdolist_list_var = new_slot_declarations;
			    SubLObject slot_declaration = NIL;
			    for (slot_declaration = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), slot_declaration = cdolist_list_var.first()) {
				if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				    if (!(((slot_declaration.isCons() && slot_declaration.first().isSymbol()) && slot_declaration.rest().isList()) && (NIL != slot_declaration.first()))) {
					Errors.error($str_alt639$_SET_SLOT_DECLARATIONS__S____S_is, self, slot_declaration);
				    }
				}
			    }
			}
			slot_declarations = copy_list(new_slot_declarations);
			sublisp_throw($sym637$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD, new_slot_declarations);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_body_slot_declarations(self, slot_declarations);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_body_method = Errors.handleThrowable(ccatch_env_var, $sym637$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD);
		}
		return catch_var_for_cyblack_defks_body_method;
	    }
	}
    }

    public static final SubLObject cyblack_defks_body_add_slot_declaration_method(SubLObject self, SubLObject new_slot_declaration) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_body_method = NIL;
		SubLObject slot_declarations = get_cyblack_defks_body_slot_declarations(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!(((new_slot_declaration.isCons() && new_slot_declaration.first().isSymbol()) && new_slot_declaration.rest().isList()) && (NIL != new_slot_declaration.first()))) {
				Errors.error($str_alt645$_ADD_SLOT_DECLARATION__S____S_is_, self, new_slot_declaration);
			    }
			}
			slot_declarations = nconc(slot_declarations, list(new_slot_declaration));
			sublisp_throw($sym644$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD, new_slot_declaration);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_body_slot_declarations(self, slot_declarations);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_body_method = Errors.handleThrowable(ccatch_env_var, $sym644$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD);
		}
		return catch_var_for_cyblack_defks_body_method;
	    }
	}
    }

    public static final SubLObject cyblack_defks_body_get_method_definitions_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_defks_body_method = NIL;
	    SubLObject method_definitions = get_cyblack_defks_body_method_definitions(self);
	    try {
		try {
		    sublisp_throw($sym649$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD, method_definitions);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_body_method_definitions(self, method_definitions);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_body_method = Errors.handleThrowable(ccatch_env_var, $sym649$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD);
	    }
	    return catch_var_for_cyblack_defks_body_method;
	}
    }

    public static final SubLObject cyblack_defks_body_set_method_definitions_method(SubLObject self, SubLObject new_method_definitions) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_body_method = NIL;
		SubLObject method_definitions = get_cyblack_defks_body_method_definitions(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!new_method_definitions.isList()) {
				Errors.error($str_alt655$_SET_METHOD_DEFINITIONS__S____S_i, self, new_method_definitions);
			    }
			}
			{
			    SubLObject cdolist_list_var = new_method_definitions;
			    SubLObject method_definition = NIL;
			    for (method_definition = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), method_definition = cdolist_list_var.first()) {
				if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				    if (!((((((((((method_definition.isCons() && method_definition.first().isSymbol()) && method_definition.rest().isCons()) && method_definition.rest().first().isCons()) && method_definition.rest().first().first().isSymbol())
					    && method_definition.rest().first().rest().isList()) && method_definition.rest().rest().isCons()) && method_definition.rest().rest().first().isList()) && method_definition.rest().rest().rest().isList())
					    && (NIL != member(method_definition.first(), $list_alt656, UNPROVIDED, UNPROVIDED))) && (NIL != cadr(method_definition).first()))) {
					Errors.error($str_alt655$_SET_METHOD_DEFINITIONS__S____S_i, self, method_definition);
				    }
				}
			    }
			}
			method_definitions = copy_tree(new_method_definitions);
			sublisp_throw($sym654$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD, new_method_definitions);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_body_method_definitions(self, method_definitions);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_body_method = Errors.handleThrowable(ccatch_env_var, $sym654$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD);
		}
		return catch_var_for_cyblack_defks_body_method;
	    }
	}
    }

    public static final SubLObject cyblack_defks_body_add_method_definition_method(SubLObject self, SubLObject new_method_definition) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_body_method = NIL;
		SubLObject method_definitions = get_cyblack_defks_body_method_definitions(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((((((((((new_method_definition.isCons() && new_method_definition.first().isSymbol()) && new_method_definition.rest().isCons()) && new_method_definition.rest().first().isCons()) && new_method_definition.rest().first().first().isSymbol())
				    && new_method_definition.rest().first().rest().isList()) && new_method_definition.rest().rest().isCons()) && new_method_definition.rest().rest().first().isList()) && new_method_definition.rest().rest().rest().isList())
				    && (NIL != member(new_method_definition.first(), $list_alt656, UNPROVIDED, UNPROVIDED))) && (NIL != cadr(new_method_definition).first()))) {
				Errors.error($str_alt662$_ADD_METHOD_DEFINITION__S____S_is, self, new_method_definition);
			    }
			}
			method_definitions = nconc(method_definitions, list(copy_tree(new_method_definition)));
			sublisp_throw($sym661$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD, new_method_definition);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_body_method_definitions(self, method_definitions);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_body_method = Errors.handleThrowable(ccatch_env_var, $sym661$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD);
		}
		return catch_var_for_cyblack_defks_body_method;
	    }
	}
    }

    public static final SubLObject get_cyblack_defks_on_startup_clause_posting_expressions(SubLObject cyblack_defks_on_startup_clause) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_defks_on_startup_clause, THREE_INTEGER, POSTING_EXPRESSIONS);
    }

    public static final SubLObject set_cyblack_defks_on_startup_clause_posting_expressions(SubLObject cyblack_defks_on_startup_clause, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_defks_on_startup_clause, value, THREE_INTEGER, POSTING_EXPRESSIONS);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_defks_on_startup_clause_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_defks_on_startup_clause_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_ON_STARTUP_CLAUSE, POSTING_EXPRESSIONS, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_defks_on_startup_clause_p(SubLObject cyblack_defks_on_startup_clause) {
	return classes.subloop_instanceof_class(cyblack_defks_on_startup_clause, CYBLACK_DEFKS_ON_STARTUP_CLAUSE);
    }

    public static final SubLObject cyblack_defks_on_startup_clause_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_defks_on_startup_clause_method = NIL;
	    SubLObject posting_expressions = get_cyblack_defks_on_startup_clause_posting_expressions(self);
	    try {
		try {
		    cyblack_defks_expression_initialize_method(self);
		    posting_expressions = NIL;
		    sublisp_throw($sym670$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD, NIL);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_on_startup_clause_posting_expressions(self, posting_expressions);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_on_startup_clause_method = Errors.handleThrowable(ccatch_env_var, $sym670$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD);
	    }
	    return catch_var_for_cyblack_defks_on_startup_clause_method;
	}
    }

    public static final SubLObject cyblack_defks_on_startup_clause_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject catch_var_for_cyblack_defks_on_startup_clause_method = NIL;
	    SubLObject posting_expressions = get_cyblack_defks_on_startup_clause_posting_expressions(self);
	    try {
		try {
		    format(stream, $str_alt674$__ON_STARTUP);
		    {
			SubLObject cdolist_list_var = posting_expressions;
			SubLObject posting_expression = NIL;
			for (posting_expression = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), posting_expression = cdolist_list_var.first()) {
			    format(stream, $str_alt675$__S, posting_expression);
			}
		    }
		    format(stream, $str_alt676$_);
		    sublisp_throw($sym673$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_on_startup_clause_posting_expressions(self, posting_expressions);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_on_startup_clause_method = Errors.handleThrowable(ccatch_env_var, $sym673$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD);
	    }
	    return catch_var_for_cyblack_defks_on_startup_clause_method;
	}
    }

    public static final SubLObject cyblack_defks_on_startup_clause_get_posting_expressions_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_defks_on_startup_clause_method = NIL;
	    SubLObject posting_expressions = get_cyblack_defks_on_startup_clause_posting_expressions(self);
	    try {
		try {
		    sublisp_throw($sym680$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD, posting_expressions);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_on_startup_clause_posting_expressions(self, posting_expressions);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_on_startup_clause_method = Errors.handleThrowable(ccatch_env_var, $sym680$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD);
	    }
	    return catch_var_for_cyblack_defks_on_startup_clause_method;
	}
    }

    public static final SubLObject cyblack_defks_on_startup_clause_set_posting_expressions_method(SubLObject self, SubLObject new_posting_expressions) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_on_startup_clause_method = NIL;
		SubLObject posting_expressions = get_cyblack_defks_on_startup_clause_posting_expressions(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_posting_expr_list_p(new_posting_expressions)) {
				Errors.error($str_alt686$_SET_POSTING_EXPRESSIONS__S____S_, self, new_posting_expressions);
			    }
			}
			posting_expressions = copy_list(new_posting_expressions);
			sublisp_throw($sym685$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD, new_posting_expressions);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_on_startup_clause_posting_expressions(self, posting_expressions);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_on_startup_clause_method = Errors.handleThrowable(ccatch_env_var, $sym685$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD);
		}
		return catch_var_for_cyblack_defks_on_startup_clause_method;
	    }
	}
    }

    public static final SubLObject cyblack_defks_on_startup_clause_add_posting_expression_method(SubLObject self, SubLObject posting_expression) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_on_startup_clause_method = NIL;
		SubLObject posting_expressions = get_cyblack_defks_on_startup_clause_posting_expressions(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_action_expression_p(posting_expression)) {
				Errors.error($str_alt691$_ADD_POSTING_EXPRESSION__S____S_i, self, posting_expression);
			    }
			}
			posting_expressions = nconc(posting_expressions, list(posting_expression));
			sublisp_throw($sym690$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD, posting_expression);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_on_startup_clause_posting_expressions(self, posting_expressions);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_on_startup_clause_method = Errors.handleThrowable(ccatch_env_var, $sym690$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD);
		}
		return catch_var_for_cyblack_defks_on_startup_clause_method;
	    }
	}
    }

    public static final SubLObject cyblack_defks_on_startup_clause_compile_to_on_startup_method_method(SubLObject self, SubLObject ks_assistant) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_on_startup_clause_method = NIL;
		SubLObject posting_expressions = get_cyblack_defks_on_startup_clause_posting_expressions(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_auto_generated_ks_assistant_p(ks_assistant)) {
				Errors.error($str_alt555$_COMPILE_TO_ON_STARTUP_METHOD__S_, self, ks_assistant);
			    }
			}
			{
			    SubLObject ks_class = cyblack_auto_generated_ks_assistant_get_knowledge_source_class_method(ks_assistant);
			    SubLObject datatype_string = NIL;
			    SubLObject slot_initializations = NIL;
			    SubLObject posting_var = make_symbol($$$posting);
			    SubLObject dictionary_var = make_symbol($$$dictionary);
			    SubLObject datatype_var = make_symbol($$$datatype);
			    SubLObject blackboard_var = make_symbol($$$blackboard);
			    SubLObject body = NIL;
			    SubLObject cdolist_list_var = posting_expressions;
			    SubLObject posting_expression = NIL;
			    for (posting_expression = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), posting_expression = cdolist_list_var.first()) {
				datatype_string = cyblack_posting_expr_get_datatype_string_method(posting_expression);
				slot_initializations = cyblack_posting_expr_get_slot_initializations_method(posting_expression);
				body = cons(copy_tree(listS(CLET, new SubLObject[] { list(list(datatype_var, list(CYBLACK_DATATYPE_DICTIONARY_INTERN, dictionary_var, datatype_string)), list(posting_var, listS(FIF, datatype_var, list(CYBLACK_DATATYPE_CREATE_POSTING, datatype_var), $list_alt564))),
					list(MUST, posting_var, $str_alt698$_ON_STARTUP__S___Failed_to_create, SELF, datatype_var), listS(CYBLACK_POSTING_SET_APPLICATION, posting_var, $list_alt700), list(CYBLACK_POSTING_SET_DATATYPE, posting_var, datatype_var),
					listS(CYBLACK_POSTING_SET_SUPPORT_TYPE, posting_var, $list_alt703), list(INLINE_METHOD, $list_alt584, posting_var, bq_cons(LIST, append(copy_tree(slot_initializations), NIL))), append(
						NIL != instances.get_slot(posting_expression, CONFIDENCE_EXPRESSION)
							? ((SubLObject) (NIL != instances.get_slot(posting_expression, COMPUTE_CONFIDENCE) ? ((SubLObject) (list(list(CYBLACK_POSTING_SET_CONFIDENCE, posting_var, instances.get_slot(posting_expression, CONFIDENCE_EXPRESSION)))))
								: list(list(CYBLACK_POSTING_SET_CONFIDENCE, posting_var, list(LIST, $list_alt590, instances.get_slot(posting_expression, CONFIDENCE_EXPRESSION))))))
							: NIL,
						NIL != instances.get_slot(posting_expression, IMMUTABLE_EXPRESSION) ? ((SubLObject) (list(list(CYBLACK_POSTING_SET_IMMUTABLE, posting_var, instances.get_slot(posting_expression, IMMUTABLE_EXPRESSION))))) : NIL,
						list(list(CYBLACK_BLACKBOARD_POST, blackboard_var, posting_var))) })),
					body);
			    }
			    sublisp_throw($sym694$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD, listS(DEF_INSTANCE_METHOD, new SubLObject[] { listS(ON_STARTUP, ks_class, $list_alt51), NIL, $list_alt706, $list_alt707,
				    listS(CLET, list(bq_cons(dictionary_var, $list_alt708), bq_cons(blackboard_var, $list_alt709)), listS(MUST, dictionary_var, $list_alt710), listS(MUST, blackboard_var, $list_alt711), append(nreverse(body), NIL)), $list_alt192 }));
			}
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_on_startup_clause_posting_expressions(self, posting_expressions);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_on_startup_clause_method = Errors.handleThrowable(ccatch_env_var, $sym694$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD);
		}
		return catch_var_for_cyblack_defks_on_startup_clause_method;
	    }
	}
    }

    public static final SubLObject get_cyblack_defks_stimulation_cond_clauses(SubLObject cyblack_defks_stimulation_cond) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_defks_stimulation_cond, FOUR_INTEGER, CLAUSES);
    }

    public static final SubLObject set_cyblack_defks_stimulation_cond_clauses(SubLObject cyblack_defks_stimulation_cond, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_defks_stimulation_cond, value, FOUR_INTEGER, CLAUSES);
    }

    public static final SubLObject get_cyblack_defks_stimulation_cond_arg_list(SubLObject cyblack_defks_stimulation_cond) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_defks_stimulation_cond, THREE_INTEGER, ARG_LIST);
    }

    public static final SubLObject set_cyblack_defks_stimulation_cond_arg_list(SubLObject cyblack_defks_stimulation_cond, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_defks_stimulation_cond, value, THREE_INTEGER, ARG_LIST);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_defks_stimulation_cond_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_defks_stimulation_cond_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_STIMULATION_COND, ARG_LIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_STIMULATION_COND, CLAUSES, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_defks_stimulation_cond_p(SubLObject cyblack_defks_stimulation_cond) {
	return classes.subloop_instanceof_class(cyblack_defks_stimulation_cond, CYBLACK_DEFKS_STIMULATION_COND);
    }

    public static final SubLObject cyblack_defks_stimulation_cond_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_defks_stimulation_cond_method = NIL;
	    SubLObject v_clauses = get_cyblack_defks_stimulation_cond_clauses(self);
	    SubLObject arg_list = get_cyblack_defks_stimulation_cond_arg_list(self);
	    try {
		try {
		    cyblack_defks_expression_initialize_method(self);
		    arg_list = NIL;
		    v_clauses = NIL;
		    sublisp_throw($sym720$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_stimulation_cond_clauses(self, v_clauses);
			    set_cyblack_defks_stimulation_cond_arg_list(self, arg_list);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_stimulation_cond_method = Errors.handleThrowable(ccatch_env_var, $sym720$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD);
	    }
	    return catch_var_for_cyblack_defks_stimulation_cond_method;
	}
    }

    public static final SubLObject cyblack_defks_stimulation_cond_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject catch_var_for_cyblack_defks_stimulation_cond_method = NIL;
	    SubLObject v_clauses = get_cyblack_defks_stimulation_cond_clauses(self);
	    SubLObject arg_list = get_cyblack_defks_stimulation_cond_arg_list(self);
	    try {
		try {
		    format(stream, $str_alt724$__STIMULATION_COND_);
		    print(arg_list, stream);
		    {
			SubLObject cdolist_list_var = v_clauses;
			SubLObject clause = NIL;
			for (clause = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), clause = cdolist_list_var.first()) {
			    print(clause, stream);
			}
		    }
		    format(stream, $str_alt676$_);
		    sublisp_throw($sym723$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_stimulation_cond_clauses(self, v_clauses);
			    set_cyblack_defks_stimulation_cond_arg_list(self, arg_list);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_stimulation_cond_method = Errors.handleThrowable(ccatch_env_var, $sym723$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD);
	    }
	    return catch_var_for_cyblack_defks_stimulation_cond_method;
	}
    }

    public static final SubLObject cyblack_defks_stimulation_cond_get_arg_list_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_defks_stimulation_cond_method = NIL;
	    SubLObject arg_list = get_cyblack_defks_stimulation_cond_arg_list(self);
	    try {
		try {
		    sublisp_throw($sym728$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD, arg_list);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_stimulation_cond_arg_list(self, arg_list);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_stimulation_cond_method = Errors.handleThrowable(ccatch_env_var, $sym728$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD);
	    }
	    return catch_var_for_cyblack_defks_stimulation_cond_method;
	}
    }

    public static final SubLObject cyblack_defks_stimulation_cond_set_arg_list_method(SubLObject self, SubLObject new_arg_list) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_stimulation_cond_method = NIL;
		SubLObject arg_list = get_cyblack_defks_stimulation_cond_arg_list(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!new_arg_list.isList()) {
				Errors.error($str_alt734$_SET_ARG_LIST__S____S_is_not_a_va, self, new_arg_list);
			    }
			}
			{
			    SubLObject cdolist_list_var = new_arg_list;
			    SubLObject arg = NIL;
			    for (arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), arg = cdolist_list_var.first()) {
				if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				    if (NIL == cyblack_defks_stimulation_cond_arg_p(arg)) {
					Errors.error($str_alt735$_SET_ARG_LIST__S____S_is_not_a_va, self, arg);
				    }
				}
				cyblack_defks_expression_set_parent_method(arg, self);
			    }
			}
			arg_list = copy_list(new_arg_list);
			sublisp_throw($sym733$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD, new_arg_list);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_stimulation_cond_arg_list(self, arg_list);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_stimulation_cond_method = Errors.handleThrowable(ccatch_env_var, $sym733$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD);
		}
		return catch_var_for_cyblack_defks_stimulation_cond_method;
	    }
	}
    }

    public static final SubLObject cyblack_defks_stimulation_cond_add_arg_method(SubLObject self, SubLObject new_arg) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_stimulation_cond_method = NIL;
		SubLObject arg_list = get_cyblack_defks_stimulation_cond_arg_list(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_defks_stimulation_cond_arg_p(new_arg)) {
				Errors.error($str_alt741$_ADD_ARG__S____S_is_not_a_valid_a, self, new_arg);
			    }
			}
			cyblack_defks_expression_set_parent_method(new_arg, self);
			if (NIL != arg_list) {
			    arg_list = nconc(arg_list, cons(new_arg, NIL));
			} else {
			    arg_list = cons(new_arg, NIL);
			}
			sublisp_throw($sym740$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD, new_arg);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_stimulation_cond_arg_list(self, arg_list);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_stimulation_cond_method = Errors.handleThrowable(ccatch_env_var, $sym740$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD);
		}
		return catch_var_for_cyblack_defks_stimulation_cond_method;
	    }
	}
    }

    public static final SubLObject cyblack_defks_stimulation_cond_get_clauses_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_defks_stimulation_cond_method = NIL;
	    SubLObject v_clauses = get_cyblack_defks_stimulation_cond_clauses(self);
	    try {
		try {
		    sublisp_throw($sym745$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD, v_clauses);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_stimulation_cond_clauses(self, v_clauses);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_stimulation_cond_method = Errors.handleThrowable(ccatch_env_var, $sym745$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD);
	    }
	    return catch_var_for_cyblack_defks_stimulation_cond_method;
	}
    }

    public static final SubLObject cyblack_defks_stimulation_cond_set_clauses_method(SubLObject self, SubLObject new_clause_list) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_stimulation_cond_method = NIL;
		SubLObject v_clauses = get_cyblack_defks_stimulation_cond_clauses(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!new_clause_list.isList()) {
				Errors.error($str_alt751$_SET_CLAUSES__S____S_is_not_a_val, self, new_clause_list);
			    }
			}
			{
			    SubLObject cdolist_list_var = new_clause_list;
			    SubLObject clause = NIL;
			    for (clause = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), clause = cdolist_list_var.first()) {
				if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				    if (NIL == cyblack_defks_stimulation_cond_clause_p(clause)) {
					Errors.error($str_alt752$_SET_CLAUSES__S____S_is_not_a_val, self, clause);
				    }
				}
				cyblack_defks_expression_set_parent_method(clause, self);
			    }
			}
			v_clauses = copy_list(new_clause_list);
			sublisp_throw($sym750$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD, new_clause_list);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_stimulation_cond_clauses(self, v_clauses);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_stimulation_cond_method = Errors.handleThrowable(ccatch_env_var, $sym750$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD);
		}
		return catch_var_for_cyblack_defks_stimulation_cond_method;
	    }
	}
    }

    public static final SubLObject cyblack_defks_stimulation_cond_add_clause_method(SubLObject self, SubLObject clause) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_stimulation_cond_method = NIL;
		SubLObject v_clauses = get_cyblack_defks_stimulation_cond_clauses(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_defks_stimulation_cond_clause_p(clause)) {
				Errors.error($str_alt758$_ADD_CLAUSE__S____S_is_not_a_vali, self, clause);
			    }
			}
			if (NIL != v_clauses) {
			    v_clauses = nconc(v_clauses, cons(clause, NIL));
			} else {
			    v_clauses = cons(clause, NIL);
			}
			sublisp_throw($sym757$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD, clause);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_stimulation_cond_clauses(self, v_clauses);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_stimulation_cond_method = Errors.handleThrowable(ccatch_env_var, $sym757$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD);
		}
		return catch_var_for_cyblack_defks_stimulation_cond_method;
	    }
	}
    }

    public static final SubLObject cyblack_defks_stimulation_cond_distribute_binding_info_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_defks_stimulation_cond_method = NIL;
	    SubLObject v_clauses = get_cyblack_defks_stimulation_cond_clauses(self);
	    SubLObject arg_list = get_cyblack_defks_stimulation_cond_arg_list(self);
	    try {
		try {
		    {
			SubLObject local_args = NIL;
			SubLObject list_expression = arg_list;
			if (NIL == list_expression) {
			    local_args = NIL;
			} else if (list_expression.isAtom()) {
			    local_args = list(list_expression);
			} else if (NIL == list_expression.rest()) {
			    {
				SubLObject arg = list_expression.first();
				local_args = (NIL != cyblack_defks_stimulation_cond_arg_p(arg)) ? ((SubLObject) (list(cyblack_defks_stimulation_cond_arg_get_arg_method(arg)))) : NIL;
			    }
			} else {
			    {
				SubLObject tail_cons = NIL;
				SubLObject result = NIL;
				local_args = NIL;
				{
				    SubLObject cdolist_list_var = list_expression;
				    SubLObject arg = NIL;
				    for (arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), arg = cdolist_list_var.first()) {
					result = (NIL != cyblack_defks_stimulation_cond_arg_p(arg)) ? ((SubLObject) (list(cyblack_defks_stimulation_cond_arg_get_arg_method(arg)))) : NIL;
					if (NIL != result) {
					    if (NIL != tail_cons) {
						rplacd(tail_cons, result);
						tail_cons = last(result, UNPROVIDED);
					    } else {
						local_args = (NIL != cyblack_defks_stimulation_cond_arg_p(arg)) ? ((SubLObject) (list(cyblack_defks_stimulation_cond_arg_get_arg_method(arg)))) : NIL;
						tail_cons = last(local_args, UNPROVIDED);
					    }
					}
				    }
				}
			    }
			}

			{
			    SubLObject cdolist_list_var = v_clauses;
			    SubLObject clause = NIL;
			    for (clause = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), clause = cdolist_list_var.first()) {
				methods.funcall_instance_method_with_1_args(clause, DISTRIBUTE_BINDING_INFO, local_args);
			    }
			}
			sublisp_throw($sym761$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD, NIL);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_stimulation_cond_clauses(self, v_clauses);
			    set_cyblack_defks_stimulation_cond_arg_list(self, arg_list);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_stimulation_cond_method = Errors.handleThrowable(ccatch_env_var, $sym761$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD);
	    }
	    return catch_var_for_cyblack_defks_stimulation_cond_method;
	}
    }

    public static final SubLObject cyblack_defks_stimulation_cond_compile_to_create_proposals_method_body_method(SubLObject self, SubLObject ks_assistant, SubLObject ks_class, SubLObject precon_parameters) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_stimulation_cond_method = NIL;
		SubLObject v_clauses = get_cyblack_defks_stimulation_cond_clauses(self);
		SubLObject arg_list = get_cyblack_defks_stimulation_cond_arg_list(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL != ks_class) && ks_class.isSymbol())) {
				Errors.error($str_alt766$_COMPILE_TO_CREATE_PROPOSALS_METH, self, ks_class);
			    }
			}
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!precon_parameters.isList()) {
				Errors.error($str_alt767$_COMPILE_TO_CREATE_PROPOSALS_METH, self, precon_parameters);
			    }
			}
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!length(precon_parameters).numE(length(arg_list))) {
				Errors.error($str_alt768$_COMPILE_TO_CREATE_PROPOSALS_METH, self, precon_parameters, arg_list);
			    }
			}
			{
			    SubLObject var_bindings = NIL;
			    SubLObject var = NIL;
			    SubLObject vars = NIL;
			    SubLObject binding_savers = NIL;
			    SubLObject precon_parameter_sublist = precon_parameters;
			    SubLObject arg_list_sublist = arg_list;
			    SubLObject current_arg = NIL;
			    SubLObject compiled_clauses = NIL;
			    SubLObject environment_var = cyblack_defks_expression_get_environment_var_method(self);
			    SubLObject proposals_var = cyblack_defks_expression_get_proposals_var_method(self);
			    SubLObject proposal_class = cyblack_auto_generated_ks_assistant_get_proposal_class_method(ks_assistant);
			    while (NIL != arg_list_sublist) {
				var = methods.funcall_instance_method_with_0_args(arg_list_sublist.first(), GET_ARG);
				vars = cons(var, vars);
				var_bindings = cons(list(var, listS(FIF, environment_var, list(INLINE_METHOD, $list_alt770, environment_var, list(QUOTE, precon_parameter_sublist.first())), $list_alt564)), var_bindings);
				current_arg = methods.funcall_instance_method_with_0_args(arg_list_sublist.first(), GET_ARG);
				binding_savers = cons(list(INLINE_METHOD, list(BIND_VAR, proposal_class), proposals_var, list(QUOTE, current_arg), current_arg), binding_savers);
				arg_list_sublist = arg_list_sublist.rest();
				precon_parameter_sublist = precon_parameter_sublist.rest();
			    }
			    vars = nreverse(vars);
			    {
				SubLObject cdolist_list_var = v_clauses;
				SubLObject clause = NIL;
				for (clause = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), clause = cdolist_list_var.first()) {
				    compiled_clauses = cons(methods.funcall_instance_method_with_1_args(clause, COMPILE_CREATE_PROPOSALS_CLAUSE, ks_assistant), compiled_clauses);
				}
			    }
			    var_bindings = nreverse(var_bindings);
			    sublisp_throw($sym765$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD, list(listS(CLET, var_bindings, append(cyblack_defks_expression_generate_noop_calls_method(self, vars), list(bq_cons(PROGN, append(nreverse(compiled_clauses), NIL)))))));
			}
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_stimulation_cond_clauses(self, v_clauses);
				set_cyblack_defks_stimulation_cond_arg_list(self, arg_list);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_stimulation_cond_method = Errors.handleThrowable(ccatch_env_var, $sym765$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD);
		}
		return catch_var_for_cyblack_defks_stimulation_cond_method;
	    }
	}
    }

    public static final SubLObject get_cyblack_defks_stimulation_cond_arg_arg(SubLObject cyblack_defks_stimulation_cond_arg) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_defks_stimulation_cond_arg, THREE_INTEGER, ARG);
    }

    public static final SubLObject set_cyblack_defks_stimulation_cond_arg_arg(SubLObject cyblack_defks_stimulation_cond_arg, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_defks_stimulation_cond_arg, value, THREE_INTEGER, ARG);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_defks_stimulation_cond_arg_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_defks_stimulation_cond_arg_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_STIMULATION_COND_ARG, ARG, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_defks_stimulation_cond_arg_p(SubLObject cyblack_defks_stimulation_cond_arg) {
	return classes.subloop_instanceof_class(cyblack_defks_stimulation_cond_arg, CYBLACK_DEFKS_STIMULATION_COND_ARG);
    }

    public static final SubLObject cyblack_defks_stimulation_cond_arg_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_defks_stimulation_cond_arg_method = NIL;
	    SubLObject arg = get_cyblack_defks_stimulation_cond_arg_arg(self);
	    try {
		try {
		    cyblack_defks_expression_initialize_method(self);
		    arg = NIL;
		    sublisp_throw($sym779$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_ARG_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_stimulation_cond_arg_arg(self, arg);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_stimulation_cond_arg_method = Errors.handleThrowable(ccatch_env_var, $sym779$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_ARG_METHOD);
	    }
	    return catch_var_for_cyblack_defks_stimulation_cond_arg_method;
	}
    }

    public static final SubLObject cyblack_defks_stimulation_cond_arg_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject catch_var_for_cyblack_defks_stimulation_cond_arg_method = NIL;
	    SubLObject arg = get_cyblack_defks_stimulation_cond_arg_arg(self);
	    try {
		try {
		    format(stream, $str_alt525$_S, arg);
		    sublisp_throw($sym782$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_ARG_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_stimulation_cond_arg_arg(self, arg);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_stimulation_cond_arg_method = Errors.handleThrowable(ccatch_env_var, $sym782$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_ARG_METHOD);
	    }
	    return catch_var_for_cyblack_defks_stimulation_cond_arg_method;
	}
    }

    public static final SubLObject cyblack_defks_stimulation_cond_arg_get_arg_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_defks_stimulation_cond_arg_method = NIL;
	    SubLObject arg = get_cyblack_defks_stimulation_cond_arg_arg(self);
	    try {
		try {
		    sublisp_throw($sym785$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_ARG_METHOD, arg);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_stimulation_cond_arg_arg(self, arg);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_stimulation_cond_arg_method = Errors.handleThrowable(ccatch_env_var, $sym785$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_ARG_METHOD);
	    }
	    return catch_var_for_cyblack_defks_stimulation_cond_arg_method;
	}
    }

    public static final SubLObject cyblack_defks_stimulation_cond_arg_set_arg_method(SubLObject self, SubLObject new_arg) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_stimulation_cond_arg_method = NIL;
		SubLObject arg = get_cyblack_defks_stimulation_cond_arg_arg(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!(((NIL != new_arg) && new_arg.isSymbol()) && (!new_arg.isKeyword()))) {
				Errors.error($str_alt790$_SET_ARG__S____S_is_not_a_valid_p, self, new_arg);
			    }
			}
			arg = new_arg;
			sublisp_throw($sym789$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_ARG_METHOD, new_arg);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_stimulation_cond_arg_arg(self, arg);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_stimulation_cond_arg_method = Errors.handleThrowable(ccatch_env_var, $sym789$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_ARG_METHOD);
		}
		return catch_var_for_cyblack_defks_stimulation_cond_arg_method;
	    }
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_defks_stimulation_cond_clause_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_defks_stimulation_cond_clause_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_defks_stimulation_cond_clause_p(SubLObject cyblack_defks_stimulation_cond_clause) {
	return classes.subloop_instanceof_class(cyblack_defks_stimulation_cond_clause, CYBLACK_DEFKS_STIMULATION_COND_CLAUSE);
    }

    public static final SubLObject cyblack_defks_stimulation_cond_clause_distribute_binding_info_method(SubLObject self, SubLObject local_args) {
	return local_args;
    }

    public static final SubLObject cyblack_defks_stimulation_cond_clause_compile_create_proposals_clause_method(SubLObject self, SubLObject ks_assistant) {
	return NIL;
    }

    public static final SubLObject get_cyblack_defks_when_clause_on_propose_body(SubLObject cyblack_defks_when_clause) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_defks_when_clause, FOUR_INTEGER, ON_PROPOSE_BODY);
    }

    public static final SubLObject set_cyblack_defks_when_clause_on_propose_body(SubLObject cyblack_defks_when_clause, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_defks_when_clause, value, FOUR_INTEGER, ON_PROPOSE_BODY);
    }

    public static final SubLObject get_cyblack_defks_when_clause_lisp_expression(SubLObject cyblack_defks_when_clause) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_defks_when_clause, THREE_INTEGER, LISP_EXPRESSION);
    }

    public static final SubLObject set_cyblack_defks_when_clause_lisp_expression(SubLObject cyblack_defks_when_clause, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_defks_when_clause, value, THREE_INTEGER, LISP_EXPRESSION);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_defks_when_clause_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_defks_when_clause_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_WHEN_CLAUSE, LISP_EXPRESSION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_WHEN_CLAUSE, ON_PROPOSE_BODY, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_defks_when_clause_p(SubLObject cyblack_defks_when_clause) {
	return classes.subloop_instanceof_class(cyblack_defks_when_clause, CYBLACK_DEFKS_WHEN_CLAUSE);
    }

    public static final SubLObject cyblack_defks_when_clause_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_defks_when_clause_method = NIL;
	    SubLObject on_propose_body = get_cyblack_defks_when_clause_on_propose_body(self);
	    SubLObject lisp_expression = get_cyblack_defks_when_clause_lisp_expression(self);
	    try {
		try {
		    cyblack_defks_expression_initialize_method(self);
		    lisp_expression = NIL;
		    on_propose_body = NIL;
		    sublisp_throw($sym808$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_when_clause_on_propose_body(self, on_propose_body);
			    set_cyblack_defks_when_clause_lisp_expression(self, lisp_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_when_clause_method = Errors.handleThrowable(ccatch_env_var, $sym808$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD);
	    }
	    return catch_var_for_cyblack_defks_when_clause_method;
	}
    }

    public static final SubLObject cyblack_defks_when_clause_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject catch_var_for_cyblack_defks_when_clause_method = NIL;
	    SubLObject on_propose_body = get_cyblack_defks_when_clause_on_propose_body(self);
	    SubLObject lisp_expression = get_cyblack_defks_when_clause_lisp_expression(self);
	    try {
		try {
		    format(stream, $str_alt812$__WHEN__S, lisp_expression);
		    format(stream, $str_alt813$__S_, on_propose_body);
		    sublisp_throw($sym811$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_when_clause_on_propose_body(self, on_propose_body);
			    set_cyblack_defks_when_clause_lisp_expression(self, lisp_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_when_clause_method = Errors.handleThrowable(ccatch_env_var, $sym811$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD);
	    }
	    return catch_var_for_cyblack_defks_when_clause_method;
	}
    }

    public static final SubLObject cyblack_defks_when_clause_get_lisp_expression_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_defks_when_clause_method = NIL;
	    SubLObject lisp_expression = get_cyblack_defks_when_clause_lisp_expression(self);
	    try {
		try {
		    sublisp_throw($sym817$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD, lisp_expression);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_when_clause_lisp_expression(self, lisp_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_when_clause_method = Errors.handleThrowable(ccatch_env_var, $sym817$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD);
	    }
	    return catch_var_for_cyblack_defks_when_clause_method;
	}
    }

    public static final SubLObject cyblack_defks_when_clause_set_lisp_expression_method(SubLObject self, SubLObject new_lisp_expression) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_when_clause_method = NIL;
		SubLObject lisp_expression = get_cyblack_defks_when_clause_lisp_expression(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_quick_symbolic_expression_p(new_lisp_expression)) {
				Errors.error($str_alt823$_SET_LISP_EXPRESSION__S____S_is_n, self, new_lisp_expression);
			    }
			}
			lisp_expression = cyblack_copy_tree_while_setting_parent(new_lisp_expression, self);
			sublisp_throw($sym822$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD, new_lisp_expression);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_when_clause_lisp_expression(self, lisp_expression);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_when_clause_method = Errors.handleThrowable(ccatch_env_var, $sym822$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD);
		}
		return catch_var_for_cyblack_defks_when_clause_method;
	    }
	}
    }

    public static final SubLObject cyblack_defks_when_clause_get_on_propose_body_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_defks_when_clause_method = NIL;
	    SubLObject on_propose_body = get_cyblack_defks_when_clause_on_propose_body(self);
	    try {
		try {
		    sublisp_throw($sym827$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD, on_propose_body);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_when_clause_on_propose_body(self, on_propose_body);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_when_clause_method = Errors.handleThrowable(ccatch_env_var, $sym827$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD);
	    }
	    return catch_var_for_cyblack_defks_when_clause_method;
	}
    }

    public static final SubLObject cyblack_defks_when_clause_set_on_propose_body_method(SubLObject self, SubLObject new_on_propose_body) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_defks_when_clause_method = NIL;
		SubLObject on_propose_body = get_cyblack_defks_when_clause_on_propose_body(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_on_propose_body_p(new_on_propose_body)) {
				Errors.error($str_alt833$_SET_ON_PROPOSE_BODY__S____S_is_n, self, new_on_propose_body);
			    }
			}
			on_propose_body = new_on_propose_body;
			cyblack_defks_expression_set_parent_method(on_propose_body, self);
			sublisp_throw($sym832$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD, new_on_propose_body);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_defks_when_clause_on_propose_body(self, on_propose_body);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_defks_when_clause_method = Errors.handleThrowable(ccatch_env_var, $sym832$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD);
		}
		return catch_var_for_cyblack_defks_when_clause_method;
	    }
	}
    }

    public static final SubLObject cyblack_defks_when_clause_distribute_binding_info_method(SubLObject self, SubLObject local_args) {
	{
	    SubLObject catch_var_for_cyblack_defks_when_clause_method = NIL;
	    SubLObject on_propose_body = get_cyblack_defks_when_clause_on_propose_body(self);
	    try {
		try {
		    if (NIL != on_propose_body) {
			methods.funcall_instance_method_with_1_args(on_propose_body, DISTRIBUTE_BINDING_INFO, local_args);
		    }
		    sublisp_throw($sym836$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD, NIL);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_when_clause_on_propose_body(self, on_propose_body);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_when_clause_method = Errors.handleThrowable(ccatch_env_var, $sym836$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD);
	    }
	    return catch_var_for_cyblack_defks_when_clause_method;
	}
    }

    public static final SubLObject cyblack_defks_when_clause_compile_create_proposals_clause_method(SubLObject self, SubLObject ks_assistant) {
	{
	    SubLObject catch_var_for_cyblack_defks_when_clause_method = NIL;
	    SubLObject on_propose_body = get_cyblack_defks_when_clause_on_propose_body(self);
	    SubLObject lisp_expression = get_cyblack_defks_when_clause_lisp_expression(self);
	    try {
		try {
		    {
			SubLObject compiled_on_propose_body = (NIL != on_propose_body) ? ((SubLObject) (methods.funcall_instance_method_with_1_args(on_propose_body, COMPILE_CREATE_PROPOSALS_ON_PROPOSE_BODY, ks_assistant))) : NIL;
			sublisp_throw($sym839$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD, listS(PWHEN, copy_tree(lisp_expression), append(compiled_on_propose_body, NIL)));
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_when_clause_on_propose_body(self, on_propose_body);
			    set_cyblack_defks_when_clause_lisp_expression(self, lisp_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_defks_when_clause_method = Errors.handleThrowable(ccatch_env_var, $sym839$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD);
	    }
	    return catch_var_for_cyblack_defks_when_clause_method;
	}
    }

    public static final SubLObject get_cyblack_on_propose_body_on_propose_expressions(SubLObject cyblack_on_propose_body) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_on_propose_body, THREE_INTEGER, ON_PROPOSE_EXPRESSIONS);
    }

    public static final SubLObject set_cyblack_on_propose_body_on_propose_expressions(SubLObject cyblack_on_propose_body, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_on_propose_body, value, THREE_INTEGER, ON_PROPOSE_EXPRESSIONS);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_on_propose_body_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_on_propose_body_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ON_PROPOSE_BODY, ON_PROPOSE_EXPRESSIONS, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_on_propose_body_p(SubLObject cyblack_on_propose_body) {
	return classes.subloop_instanceof_class(cyblack_on_propose_body, CYBLACK_ON_PROPOSE_BODY);
    }

    public static final SubLObject cyblack_on_propose_body_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_on_propose_body_method = NIL;
	    SubLObject on_propose_expressions = get_cyblack_on_propose_body_on_propose_expressions(self);
	    try {
		try {
		    cyblack_defks_expression_initialize_method(self);
		    on_propose_expressions = NIL;
		    sublisp_throw($sym848$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_on_propose_body_on_propose_expressions(self, on_propose_expressions);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_on_propose_body_method = Errors.handleThrowable(ccatch_env_var, $sym848$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD);
	    }
	    return catch_var_for_cyblack_on_propose_body_method;
	}
    }

    public static final SubLObject cyblack_on_propose_body_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject catch_var_for_cyblack_on_propose_body_method = NIL;
	    SubLObject on_propose_expressions = get_cyblack_on_propose_body_on_propose_expressions(self);
	    try {
		try {
		    {
			SubLObject cdolist_list_var = on_propose_expressions;
			SubLObject on_propose_expression = NIL;
			for (on_propose_expression = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), on_propose_expression = cdolist_list_var.first()) {
			    format(stream, $str_alt525$_S, on_propose_expression);
			}
			sublisp_throw($sym851$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD, self);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_on_propose_body_on_propose_expressions(self, on_propose_expressions);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_on_propose_body_method = Errors.handleThrowable(ccatch_env_var, $sym851$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD);
	    }
	    return catch_var_for_cyblack_on_propose_body_method;
	}
    }

    public static final SubLObject cyblack_on_propose_body_get_on_propose_expressions_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_on_propose_body_method = NIL;
	    SubLObject on_propose_expressions = get_cyblack_on_propose_body_on_propose_expressions(self);
	    try {
		try {
		    sublisp_throw($sym855$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD, on_propose_expressions);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_on_propose_body_on_propose_expressions(self, on_propose_expressions);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_on_propose_body_method = Errors.handleThrowable(ccatch_env_var, $sym855$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD);
	    }
	    return catch_var_for_cyblack_on_propose_body_method;
	}
    }

    public static final SubLObject cyblack_on_propose_body_recursively_set_on_propose_expression_parent_method(SubLObject self, SubLObject expression) {
	if (NIL != cyblack_on_propose_expression_p(expression)) {
	    cyblack_defks_expression_set_parent_method(expression, self);
	} else if (expression.isCons()) {
	    cyblack_on_propose_body_recursively_set_on_propose_expression_parent_method(self, expression.first());
	    cyblack_on_propose_body_recursively_set_on_propose_expression_parent_method(self, expression.rest());
	}

	return NIL;
    }

    public static final SubLObject cyblack_on_propose_body_recursively_set_on_propose_expressions_parent_method(SubLObject self, SubLObject expressions) {
	{
	    SubLObject cdolist_list_var = expressions;
	    SubLObject expression = NIL;
	    for (expression = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), expression = cdolist_list_var.first()) {
		cyblack_on_propose_body_recursively_set_on_propose_expression_parent_method(self, expression);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_on_propose_body_set_on_propose_expressions_method(SubLObject self, SubLObject new_on_propose_expressions) {
	{
	    SubLObject catch_var_for_cyblack_on_propose_body_method = NIL;
	    SubLObject on_propose_expressions = get_cyblack_on_propose_body_on_propose_expressions(self);
	    try {
		try {
		    cyblack_on_propose_body_recursively_set_on_propose_expressions_parent_method(self, new_on_propose_expressions);
		    on_propose_expressions = copy_list(new_on_propose_expressions);
		    sublisp_throw($sym869$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD, new_on_propose_expressions);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_on_propose_body_on_propose_expressions(self, on_propose_expressions);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_on_propose_body_method = Errors.handleThrowable(ccatch_env_var, $sym869$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD);
	    }
	    return catch_var_for_cyblack_on_propose_body_method;
	}
    }

    public static final SubLObject cyblack_on_propose_body_add_on_propose_expression_method(SubLObject self, SubLObject on_propose_expression) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_on_propose_body_method = NIL;
		SubLObject on_propose_expressions = get_cyblack_on_propose_body_on_propose_expressions(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_on_propose_expression_p(on_propose_expression)) {
				Errors.error($str_alt875$_ADD_ON_PROPOSE_EXPRESSION__S____, self, on_propose_expression);
			    }
			}
			if (NIL != on_propose_expressions) {
			    on_propose_expressions = nconc(on_propose_expressions, cons(on_propose_expression, NIL));
			} else {
			    on_propose_expressions = cons(on_propose_expression, NIL);
			}
			cyblack_defks_expression_set_parent_method(on_propose_expression, self);
			sublisp_throw($sym874$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD, on_propose_expression);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_on_propose_body_on_propose_expressions(self, on_propose_expressions);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_on_propose_body_method = Errors.handleThrowable(ccatch_env_var, $sym874$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD);
		}
		return catch_var_for_cyblack_on_propose_body_method;
	    }
	}
    }

    public static final SubLObject cyblack_on_propose_body_remove_on_propose_expression_method(SubLObject self, SubLObject on_propose_expression) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_on_propose_body_method = NIL;
		SubLObject on_propose_expressions = get_cyblack_on_propose_body_on_propose_expressions(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_on_propose_expression_p(on_propose_expression)) {
				Errors.error($str_alt880$_REMOVE_ON_PROPOSE_EXPRESSION__S_, self, on_propose_expression);
			    }
			}
			on_propose_expressions = delete(on_propose_expression, on_propose_expressions, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
			sublisp_throw($sym879$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD, on_propose_expression);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_on_propose_body_on_propose_expressions(self, on_propose_expressions);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_on_propose_body_method = Errors.handleThrowable(ccatch_env_var, $sym879$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD);
		}
		return catch_var_for_cyblack_on_propose_body_method;
	    }
	}
    }

    public static final SubLObject cyblack_on_propose_body_distribute_binding_info_method(SubLObject self, SubLObject local_args) {
	{
	    SubLObject catch_var_for_cyblack_on_propose_body_method = NIL;
	    SubLObject on_propose_expressions = get_cyblack_on_propose_body_on_propose_expressions(self);
	    try {
		try {
		    {
			SubLObject cdolist_list_var = on_propose_expressions;
			SubLObject expression = NIL;
			for (expression = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), expression = cdolist_list_var.first()) {
			    cyblack_traverse_on_propose_expression_distributing_binding_info(expression, local_args);
			}
			sublisp_throw($sym883$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD, NIL);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_on_propose_body_on_propose_expressions(self, on_propose_expressions);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_on_propose_body_method = Errors.handleThrowable(ccatch_env_var, $sym883$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD);
	    }
	    return catch_var_for_cyblack_on_propose_body_method;
	}
    }

    // defvar
    private static final SubLSymbol $cyblack_simple_do_forms$ = makeSymbol("*CYBLACK-SIMPLE-DO-FORMS*");

    public static final SubLObject cyblack_traverse_on_propose_expression_distributing_binding_info(SubLObject expression, SubLObject local_args) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL != cyblack_on_propose_expression_p(expression)) {
		cyblack_set_bound_variables(expression, local_args);
		return expression;
	    } else if (expression.isCons()) {
		{
		    SubLObject head = expression.first();
		    if (NIL != member(head, $cyblack_simple_do_forms$.getDynamicValue(thread), UNPROVIDED, UNPROVIDED)) {
			if ((expression.rest().isCons() && cadr(expression).isCons()) && cddr(expression).isList()) {
			    {
				SubLObject cdolist_list_var = cddr(expression);
				SubLObject statement = NIL;
				for (statement = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), statement = cdolist_list_var.first()) {
				    cyblack_traverse_on_propose_expression_distributing_binding_info(statement, cons(cadr(expression).first(), local_args));
				}
			    }
			} else {
			    if (expression.rest().isList()) {
				{
				    SubLObject cdolist_list_var = expression.rest();
				    SubLObject statement = NIL;
				    for (statement = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), statement = cdolist_list_var.first()) {
					cyblack_traverse_on_propose_expression_distributing_binding_info(statement, local_args);
				    }
				}
			    }
			}
		    } else if (head == CLET) {
			if ((expression.rest().isCons() && cadr(expression).isList()) && cddr(expression).isList()) {
			    {
				SubLObject more_local_args = NIL;
				SubLObject list_expression = cadr(expression);
				if (NIL == list_expression) {
				    more_local_args = NIL;
				} else if (list_expression.isAtom()) {
				    more_local_args = list(list_expression);
				} else if (NIL == list_expression.rest()) {
				    {
					SubLObject binding = list_expression.first();
					more_local_args = (binding.isCons()) ? ((SubLObject) (binding.first().isSymbol() ? ((SubLObject) (list(binding.first()))) : NIL)) : binding.isSymbol() ? ((SubLObject) (list(binding))) : NIL;
				    }
				} else {
				    {
					SubLObject tail_cons = NIL;
					SubLObject result = NIL;
					more_local_args = NIL;
					{
					    SubLObject cdolist_list_var = list_expression;
					    SubLObject binding = NIL;
					    for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
						result = (binding.isCons()) ? ((SubLObject) (binding.first().isSymbol() ? ((SubLObject) (list(binding.first()))) : NIL)) : binding.isSymbol() ? ((SubLObject) (list(binding))) : NIL;
						if (NIL != result) {
						    if (NIL != tail_cons) {
							rplacd(tail_cons, result);
							tail_cons = last(result, UNPROVIDED);
						    } else {
							more_local_args = (binding.isCons()) ? ((SubLObject) (binding.first().isSymbol() ? ((SubLObject) (list(binding.first()))) : NIL)) : binding.isSymbol() ? ((SubLObject) (list(binding))) : NIL;
							tail_cons = last(more_local_args, UNPROVIDED);
						    }
						}
					    }
					}
				    }
				}

				local_args = nconc(more_local_args, local_args);
				{
				    SubLObject cdolist_list_var = cddr(expression);
				    SubLObject statement = NIL;
				    for (statement = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), statement = cdolist_list_var.first()) {
					cyblack_traverse_on_propose_expression_distributing_binding_info(statement, local_args);
				    }
				}
			    }
			} else {
			    {
				SubLObject cdolist_list_var = expression.rest();
				SubLObject statement = NIL;
				for (statement = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), statement = cdolist_list_var.first()) {
				    cyblack_traverse_on_propose_expression_distributing_binding_info(statement, local_args);
				}
			    }
			}
		    } else if (head == CDO) {
			if ((expression.rest().isCons() && cddr(expression).isCons()) && cddr(expression).rest().isList()) {
			    {
				SubLObject more_local_args = NIL;
				SubLObject list_expression = cadr(expression);
				if (NIL == list_expression) {
				    more_local_args = NIL;
				} else if (list_expression.isAtom()) {
				    more_local_args = list(list_expression);
				} else if (NIL == list_expression.rest()) {
				    {
					SubLObject binding = list_expression.first();
					more_local_args = (binding.isCons()) ? ((SubLObject) (binding.first().isSymbol() ? ((SubLObject) (list(binding.first()))) : NIL)) : binding.isSymbol() ? ((SubLObject) (list(binding))) : NIL;
				    }
				} else {
				    {
					SubLObject tail_cons = NIL;
					SubLObject result = NIL;
					more_local_args = NIL;
					{
					    SubLObject cdolist_list_var = list_expression;
					    SubLObject binding = NIL;
					    for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), binding = cdolist_list_var.first()) {
						result = (binding.isCons()) ? ((SubLObject) (binding.first().isSymbol() ? ((SubLObject) (list(binding.first()))) : NIL)) : binding.isSymbol() ? ((SubLObject) (list(binding))) : NIL;
						if (NIL != result) {
						    if (NIL != tail_cons) {
							rplacd(tail_cons, result);
							tail_cons = last(result, UNPROVIDED);
						    } else {
							more_local_args = (binding.isCons()) ? ((SubLObject) (binding.first().isSymbol() ? ((SubLObject) (list(binding.first()))) : NIL)) : binding.isSymbol() ? ((SubLObject) (list(binding))) : NIL;
							tail_cons = last(more_local_args, UNPROVIDED);
						    }
						}
					    }
					}
				    }
				}

				local_args = nconc(more_local_args, local_args);
				cyblack_traverse_on_propose_expression_distributing_binding_info(cddr(expression).first(), local_args);
				{
				    SubLObject cdolist_list_var = cddr(expression).rest();
				    SubLObject statement = NIL;
				    for (statement = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), statement = cdolist_list_var.first()) {
					cyblack_traverse_on_propose_expression_distributing_binding_info(statement, local_args);
				    }
				}
			    }
			} else {
			    {
				SubLObject cdolist_list_var = expression.rest();
				SubLObject statement = NIL;
				for (statement = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), statement = cdolist_list_var.first()) {
				    cyblack_traverse_on_propose_expression_distributing_binding_info(statement, local_args);
				}
			    }
			}
		    } else {
			{
			    SubLObject cdolist_list_var = expression;
			    SubLObject statement = NIL;
			    for (statement = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), statement = cdolist_list_var.first()) {
				cyblack_traverse_on_propose_expression_distributing_binding_info(statement, local_args);
			    }
			}
		    }

		}
	    }

	    return NIL;
	}
    }

    public static final SubLObject cyblack_on_propose_body_compile_create_proposals_on_propose_body_method(SubLObject self, SubLObject ks_assistant) {
	{
	    SubLObject catch_var_for_cyblack_on_propose_body_method = NIL;
	    SubLObject on_propose_expressions = get_cyblack_on_propose_body_on_propose_expressions(self);
	    try {
		try {
		    {
			SubLObject compiled_on_propose_expressions = NIL;
			SubLObject cdolist_list_var = on_propose_expressions;
			SubLObject on_propose_expression = NIL;
			for (on_propose_expression = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), on_propose_expression = cdolist_list_var.first()) {
			    compiled_on_propose_expressions = cons(compile_on_propose_expression(on_propose_expression, ks_assistant), compiled_on_propose_expressions);
			}
			sublisp_throw($sym888$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD, nreverse(compiled_on_propose_expressions));
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_on_propose_body_on_propose_expressions(self, on_propose_expressions);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_on_propose_body_method = Errors.handleThrowable(ccatch_env_var, $sym888$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD);
	    }
	    return catch_var_for_cyblack_on_propose_body_method;
	}
    }

    public static final SubLObject compile_on_propose_expression(SubLObject on_propose_expression, SubLObject ks_assistant) {
	if (NIL != cyblack_on_propose_expression_p(on_propose_expression)) {
	    return methods.funcall_instance_method_with_1_args(on_propose_expression, COMPILE_ON_PROPOSE_EXPRESSION, ks_assistant);
	} else if (on_propose_expression.isCons()) {
	    return cons(compile_on_propose_expression(on_propose_expression.first(), ks_assistant), compile_on_propose_expression(on_propose_expression.rest(), ks_assistant));
	} else {
	    return on_propose_expression;
	}

    }

    public static final SubLObject cyblack_datatype_list_p(SubLObject list) {
	if (!list.isList()) {
	    return NIL;
	}
	{
	    SubLObject cdolist_list_var = list;
	    SubLObject element = NIL;
	    for (element = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), element = cdolist_list_var.first()) {
		if (!element.isString()) {
		    return NIL;
		}
	    }
	}
	return T;
    }

    public static final SubLObject get_cyblack_on_propose_expression_bound_variables(SubLObject cyblack_on_propose_expression) {
	return classes.subloop_get_instance_slot(cyblack_on_propose_expression, SEVEN_INTEGER);
    }

    public static final SubLObject set_cyblack_on_propose_expression_bound_variables(SubLObject cyblack_on_propose_expression, SubLObject value) {
	return classes.subloop_set_instance_slot(cyblack_on_propose_expression, value, SEVEN_INTEGER);
    }

    public static final SubLObject get_cyblack_on_propose_expression_on_accept_expression(SubLObject cyblack_on_propose_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_on_propose_expression, SIX_INTEGER, ON_ACCEPT_EXPRESSION);
    }

    public static final SubLObject set_cyblack_on_propose_expression_on_accept_expression(SubLObject cyblack_on_propose_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_on_propose_expression, value, SIX_INTEGER, ON_ACCEPT_EXPRESSION);
    }

    public static final SubLObject get_cyblack_on_propose_expression_reason_list(SubLObject cyblack_on_propose_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_on_propose_expression, FIVE_INTEGER, REASON_LIST);
    }

    public static final SubLObject set_cyblack_on_propose_expression_reason_list(SubLObject cyblack_on_propose_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_on_propose_expression, value, FIVE_INTEGER, REASON_LIST);
    }

    public static final SubLObject get_cyblack_on_propose_expression_datatype_list(SubLObject cyblack_on_propose_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_on_propose_expression, FOUR_INTEGER, DATATYPE_LIST);
    }

    public static final SubLObject set_cyblack_on_propose_expression_datatype_list(SubLObject cyblack_on_propose_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_on_propose_expression, value, FOUR_INTEGER, DATATYPE_LIST);
    }

    public static final SubLObject get_cyblack_on_propose_expression_expression_index(SubLObject cyblack_on_propose_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_on_propose_expression, THREE_INTEGER, EXPRESSION_INDEX);
    }

    public static final SubLObject set_cyblack_on_propose_expression_expression_index(SubLObject cyblack_on_propose_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_on_propose_expression, value, THREE_INTEGER, EXPRESSION_INDEX);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_on_propose_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_on_propose_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ON_PROPOSE_EXPRESSION, EXPRESSION_INDEX, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ON_PROPOSE_EXPRESSION, DATATYPE_LIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ON_PROPOSE_EXPRESSION, REASON_LIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ON_PROPOSE_EXPRESSION, ON_ACCEPT_EXPRESSION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ON_PROPOSE_EXPRESSION, BOUND_VARIABLES, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_on_propose_expression_p(SubLObject cyblack_on_propose_expression) {
	return classes.subloop_instanceof_class(cyblack_on_propose_expression, CYBLACK_ON_PROPOSE_EXPRESSION);
    }

    public static final SubLObject cyblack_set_bound_variables(SubLObject on_propose_expression, SubLObject v_variables) {
	set_cyblack_on_propose_expression_bound_variables(on_propose_expression, copy_list(v_variables));
	return v_variables;
    }

    public static final SubLObject cyblack_on_propose_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_on_propose_expression_method = NIL;
	    SubLObject on_accept_expression = get_cyblack_on_propose_expression_on_accept_expression(self);
	    SubLObject datatype_list = get_cyblack_on_propose_expression_datatype_list(self);
	    SubLObject expression_index = get_cyblack_on_propose_expression_expression_index(self);
	    try {
		try {
		    cyblack_defks_expression_initialize_method(self);
		    expression_index = NIL;
		    datatype_list = NIL;
		    on_accept_expression = NIL;
		    sublisp_throw($sym900$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_on_propose_expression_on_accept_expression(self, on_accept_expression);
			    set_cyblack_on_propose_expression_datatype_list(self, datatype_list);
			    set_cyblack_on_propose_expression_expression_index(self, expression_index);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_on_propose_expression_method = Errors.handleThrowable(ccatch_env_var, $sym900$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_on_propose_expression_method;
	}
    }

    public static final SubLObject cyblack_on_propose_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject catch_var_for_cyblack_on_propose_expression_method = NIL;
	    SubLObject on_accept_expression = get_cyblack_on_propose_expression_on_accept_expression(self);
	    SubLObject reason_list = get_cyblack_on_propose_expression_reason_list(self);
	    SubLObject datatype_list = get_cyblack_on_propose_expression_datatype_list(self);
	    try {
		try {
		    if (NIL != reason_list) {
			format(stream, $str_alt904$__PROPOSE__S__REASONS__S__ON_ACCE, new SubLObject[] { datatype_list, reason_list, on_accept_expression });
		    } else {
			format(stream, $str_alt905$__PROPOSE__S__ON_ACCEPT_DO__S_, datatype_list, on_accept_expression);
		    }
		    sublisp_throw($sym903$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_on_propose_expression_on_accept_expression(self, on_accept_expression);
			    set_cyblack_on_propose_expression_reason_list(self, reason_list);
			    set_cyblack_on_propose_expression_datatype_list(self, datatype_list);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_on_propose_expression_method = Errors.handleThrowable(ccatch_env_var, $sym903$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_on_propose_expression_method;
	}
    }

    public static final SubLObject cyblack_on_propose_expression_get_expression_index_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_on_propose_expression_method = NIL;
	    SubLObject expression_index = get_cyblack_on_propose_expression_expression_index(self);
	    try {
		try {
		    sublisp_throw($sym909$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD, expression_index);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_on_propose_expression_expression_index(self, expression_index);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_on_propose_expression_method = Errors.handleThrowable(ccatch_env_var, $sym909$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_on_propose_expression_method;
	}
    }

    public static final SubLObject cyblack_on_propose_expression_set_expression_index_method(SubLObject self, SubLObject new_expression_index) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_on_propose_expression_method = NIL;
		SubLObject expression_index = get_cyblack_on_propose_expression_expression_index(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!(new_expression_index.isInteger() && new_expression_index.numGE(ZERO_INTEGER))) {
				Errors.error($str_alt915$_SET_EXPRESSION_INDEX__S___Expres, self, new_expression_index);
			    }
			}
			expression_index = new_expression_index;
			sublisp_throw($sym914$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD, expression_index);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_on_propose_expression_expression_index(self, expression_index);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_on_propose_expression_method = Errors.handleThrowable(ccatch_env_var, $sym914$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD);
		}
		return catch_var_for_cyblack_on_propose_expression_method;
	    }
	}
    }

    public static final SubLObject cyblack_on_propose_expression_get_datatype_list_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_on_propose_expression_method = NIL;
	    SubLObject datatype_list = get_cyblack_on_propose_expression_datatype_list(self);
	    try {
		try {
		    sublisp_throw($sym919$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD, datatype_list);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_on_propose_expression_datatype_list(self, datatype_list);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_on_propose_expression_method = Errors.handleThrowable(ccatch_env_var, $sym919$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_on_propose_expression_method;
	}
    }

    public static final SubLObject cyblack_on_propose_expression_set_datatype_list_method(SubLObject self, SubLObject new_datatype_list) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_on_propose_expression_method = NIL;
		SubLObject datatype_list = get_cyblack_on_propose_expression_datatype_list(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_datatype_list_p(new_datatype_list)) {
				Errors.error($str_alt925$_SET_DATATYPE_LIST__S____S_is_not, self, new_datatype_list);
			    }
			}
			datatype_list = copy_list(new_datatype_list);
			sublisp_throw($sym924$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD, new_datatype_list);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_on_propose_expression_datatype_list(self, datatype_list);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_on_propose_expression_method = Errors.handleThrowable(ccatch_env_var, $sym924$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD);
		}
		return catch_var_for_cyblack_on_propose_expression_method;
	    }
	}
    }

    public static final SubLObject cyblack_on_propose_expression_get_reason_list_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_on_propose_expression_method = NIL;
	    SubLObject reason_list = get_cyblack_on_propose_expression_reason_list(self);
	    try {
		try {
		    sublisp_throw($sym929$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD, reason_list);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_on_propose_expression_reason_list(self, reason_list);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_on_propose_expression_method = Errors.handleThrowable(ccatch_env_var, $sym929$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_on_propose_expression_method;
	}
    }

    public static final SubLObject cyblack_on_propose_expression_set_reason_list_method(SubLObject self, SubLObject new_reason_list) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_on_propose_expression_method = NIL;
		SubLObject reason_list = get_cyblack_on_propose_expression_reason_list(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!new_reason_list.isList()) {
				Errors.error($str_alt935$_SET_REASON_LIST__S____S_is_not_a, self, new_reason_list);
			    }
			}
			reason_list = copy_tree(new_reason_list);
			sublisp_throw($sym934$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD, new_reason_list);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_on_propose_expression_reason_list(self, reason_list);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_on_propose_expression_method = Errors.handleThrowable(ccatch_env_var, $sym934$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD);
		}
		return catch_var_for_cyblack_on_propose_expression_method;
	    }
	}
    }

    public static final SubLObject cyblack_on_propose_expression_get_on_accept_expression_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_on_propose_expression_method = NIL;
	    SubLObject on_accept_expression = get_cyblack_on_propose_expression_on_accept_expression(self);
	    try {
		try {
		    sublisp_throw($sym939$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD, on_accept_expression);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_on_propose_expression_on_accept_expression(self, on_accept_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_on_propose_expression_method = Errors.handleThrowable(ccatch_env_var, $sym939$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_on_propose_expression_method;
	}
    }

    public static final SubLObject cyblack_on_propose_expression_set_on_accept_expression_method(SubLObject self, SubLObject new_on_accept_expression) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_on_propose_expression_method = NIL;
		SubLObject on_accept_expression = get_cyblack_on_propose_expression_on_accept_expression(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_quick_symbolic_expression_p(new_on_accept_expression)) {
				Errors.error($str_alt945$_SET_ON_ACCEPT_EXPRESSION_P__S___, self, new_on_accept_expression);
			    }
			}
			on_accept_expression = cyblack_copy_tree_while_setting_parent(new_on_accept_expression, self);
			sublisp_throw($sym944$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD, new_on_accept_expression);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_on_propose_expression_on_accept_expression(self, on_accept_expression);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_on_propose_expression_method = Errors.handleThrowable(ccatch_env_var, $sym944$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD);
		}
		return catch_var_for_cyblack_on_propose_expression_method;
	    }
	}
    }

    public static final SubLObject cyblack_on_propose_expression_compile_on_propose_expression_method(SubLObject self, SubLObject ks_assistant) {
	{
	    SubLObject catch_var_for_cyblack_on_propose_expression_method = NIL;
	    SubLObject bound_variables = get_cyblack_on_propose_expression_bound_variables(self);
	    SubLObject datatype_list = get_cyblack_on_propose_expression_datatype_list(self);
	    SubLObject expression_index = get_cyblack_on_propose_expression_expression_index(self);
	    try {
		try {
		    {
			SubLObject proposal_var = make_symbol($$$proposal);
			SubLObject proposals_var = cyblack_defks_expression_get_proposals_var_method(self);
			SubLObject proposal_class = cyblack_auto_generated_ks_assistant_get_proposal_class_method(ks_assistant);
			sublisp_throw($sym948$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD,
				listS(CLET,
					new SubLObject[] { list(list(proposal_var, list(NEW_CLASS_INSTANCE, list(QUOTE, proposal_class)))), listS(INLINE_METHOD, list(SET_APPLICATION, proposal_class), proposal_var, $list_alt700),
						listS(INLINE_METHOD, list(SET_KNOWLEDGE_SOURCE, proposal_class), proposal_var, $list_alt951),
						list(INLINE_METHOD, list(SET_PROPOSED_CONTRIBUTIONS, proposal_class), proposal_var, list(INLINE_METHOD, list(CREATE_DATATYPE_BAG, proposal_class), proposal_var, list(QUOTE, datatype_list))),
						list(INLINE_METHOD, list(SET_PROPOSAL_INDEX, proposal_class), proposal_var, expression_index), list(INLINE_METHOD, list(SET_ACTIVATION_PATTERN, proposal_class), proposal_var, cyblack_defks_expression_get_environment_var_method(self)),
						list(INLINE_METHOD, list(SET_REASONS, proposal_class), proposal_var, list(QUOTE, copy_tree(cyblack_on_propose_expression_get_reason_list_method(self)))),
						append(cyblack_defks_expression_generate_to_bindings_code_method(self, proposal_var, bound_variables), list(list(CPUSH, proposal_var, proposals_var))) }));
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_on_propose_expression_bound_variables(self, bound_variables);
			    set_cyblack_on_propose_expression_datatype_list(self, datatype_list);
			    set_cyblack_on_propose_expression_expression_index(self, expression_index);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_on_propose_expression_method = Errors.handleThrowable(ccatch_env_var, $sym948$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_on_propose_expression_method;
	}
    }

    public static final SubLObject cyblack_on_propose_expression_get_execute_method_bindings_method(SubLObject self, SubLObject var) {
	{
	    SubLObject catch_var_for_cyblack_on_propose_expression_method = NIL;
	    SubLObject bound_variables = get_cyblack_on_propose_expression_bound_variables(self);
	    try {
		try {
		    sublisp_throw($sym959$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD, cyblack_defks_expression_generate_from_bindings_code_method(self, var, bound_variables));
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_on_propose_expression_bound_variables(self, bound_variables);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_on_propose_expression_method = Errors.handleThrowable(ccatch_env_var, $sym959$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_on_propose_expression_method;
	}
    }

    public static final SubLObject cyblack_on_propose_expression_get_silence_statements_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_on_propose_expression_method = NIL;
	    SubLObject bound_variables = get_cyblack_on_propose_expression_bound_variables(self);
	    try {
		try {
		    sublisp_throw($sym963$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD, cyblack_defks_expression_generate_noop_calls_method(self, bound_variables));
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_on_propose_expression_bound_variables(self, bound_variables);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_on_propose_expression_method = Errors.handleThrowable(ccatch_env_var, $sym963$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_on_propose_expression_method;
	}
    }

    public static final SubLObject cyblack_on_propose_expression_list_p(SubLObject list) {
	if (!list.isList()) {
	    return NIL;
	}
	{
	    SubLObject cdolist_list_var = list;
	    SubLObject element = NIL;
	    for (element = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), element = cdolist_list_var.first()) {
		if (NIL == cyblack_on_propose_expression_p(element)) {
		    return NIL;
		}
	    }
	}
	return T;
    }

    public static final SubLObject cyblack_datatype_string_p(SubLObject v_object) {
	return stringp(v_object);
    }

    public static final SubLObject cyblack_slot_initializations_p(SubLObject v_object) {
	if (!v_object.isList()) {
	    return NIL;
	}
	if (NIL == v_object) {
	    return T;
	}
	if (!((v_object.first().isKeyword() && (NIL != v_object.rest())) && v_object.rest().isCons())) {
	    return NIL;
	}
	return cyblack_slot_initializations_p(cddr(v_object));
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_action_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_action_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_action_expression_p(SubLObject cyblack_action_expression) {
	return classes.subloop_instanceof_class(cyblack_action_expression, CYBLACK_ACTION_EXPRESSION);
    }

    public static final SubLObject get_cyblack_posting_action_expression_posting_reference_expression(SubLObject cyblack_posting_action_expression) {
	return classes.subloop_get_instance_slot(cyblack_posting_action_expression, THREE_INTEGER);
    }

    public static final SubLObject set_cyblack_posting_action_expression_posting_reference_expression(SubLObject cyblack_posting_action_expression, SubLObject value) {
	return classes.subloop_set_instance_slot(cyblack_posting_action_expression, value, THREE_INTEGER);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_posting_action_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_posting_action_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_POSTING_ACTION_EXPRESSION, POSTING_REFERENCE_EXPRESSION, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_posting_action_expression_p(SubLObject cyblack_posting_action_expression) {
	return classes.subloop_instanceof_class(cyblack_posting_action_expression, CYBLACK_POSTING_ACTION_EXPRESSION);
    }

    public static final SubLObject cyblack_posting_action_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_posting_action_expression_method = NIL;
	    SubLObject posting_reference_expression = get_cyblack_posting_action_expression_posting_reference_expression(self);
	    try {
		try {
		    cyblack_defks_expression_initialize_method(self);
		    posting_reference_expression = NIL;
		    sublisp_throw($sym973$OUTER_CATCH_FOR_CYBLACK_POSTING_ACTION_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_posting_action_expression_posting_reference_expression(self, posting_reference_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_posting_action_expression_method = Errors.handleThrowable(ccatch_env_var, $sym973$OUTER_CATCH_FOR_CYBLACK_POSTING_ACTION_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_posting_action_expression_method;
	}
    }

    public static final SubLObject cyblack_posting_action_expression_get_posting_reference_expression_method(SubLObject self) {
	{
	    SubLObject posting_reference_expression = get_cyblack_posting_action_expression_posting_reference_expression(self);
	    return posting_reference_expression;
	}
    }

    public static final SubLObject cyblack_posting_action_expression_set_posting_reference_expression_method(SubLObject self, SubLObject new_posting_reference_expression) {
	{
	    SubLObject catch_var_for_cyblack_posting_action_expression_method = NIL;
	    SubLObject posting_reference_expression = get_cyblack_posting_action_expression_posting_reference_expression(self);
	    try {
		try {
		    posting_reference_expression = new_posting_reference_expression;
		    sublisp_throw($sym981$OUTER_CATCH_FOR_CYBLACK_POSTING_ACTION_EXPRESSION_METHOD, new_posting_reference_expression);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_posting_action_expression_posting_reference_expression(self, posting_reference_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_posting_action_expression_method = Errors.handleThrowable(ccatch_env_var, $sym981$OUTER_CATCH_FOR_CYBLACK_POSTING_ACTION_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_posting_action_expression_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_deactivate_expr_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_deactivate_expr_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_POSTING_ACTION_EXPRESSION, POSTING_REFERENCE_EXPRESSION, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_deactivate_expr_p(SubLObject cyblack_deactivate_expr) {
	return classes.subloop_instanceof_class(cyblack_deactivate_expr, CYBLACK_DEACTIVATE_EXPR);
    }

    public static final SubLObject cyblack_deactivate_expr_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject catch_var_for_cyblack_deactivate_expr_method = NIL;
	    SubLObject posting_reference_expression = get_cyblack_posting_action_expression_posting_reference_expression(self);
	    try {
		try {
		    format(stream, $str_alt989$__DEACTIVATE__S_, posting_reference_expression);
		    sublisp_throw($sym988$OUTER_CATCH_FOR_CYBLACK_DEACTIVATE_EXPR_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_posting_action_expression_posting_reference_expression(self, posting_reference_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_deactivate_expr_method = Errors.handleThrowable(ccatch_env_var, $sym988$OUTER_CATCH_FOR_CYBLACK_DEACTIVATE_EXPR_METHOD);
	    }
	    return catch_var_for_cyblack_deactivate_expr_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_removal_expr_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_removal_expr_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_POSTING_ACTION_EXPRESSION, POSTING_REFERENCE_EXPRESSION, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_removal_expr_p(SubLObject cyblack_removal_expr) {
	return classes.subloop_instanceof_class(cyblack_removal_expr, CYBLACK_REMOVAL_EXPR);
    }

    public static final SubLObject cyblack_removal_expr_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject catch_var_for_cyblack_removal_expr_method = NIL;
	    SubLObject posting_reference_expression = get_cyblack_posting_action_expression_posting_reference_expression(self);
	    try {
		try {
		    format(stream, $str_alt996$__UNPOST__S_, posting_reference_expression);
		    sublisp_throw($sym995$OUTER_CATCH_FOR_CYBLACK_REMOVAL_EXPR_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_posting_action_expression_posting_reference_expression(self, posting_reference_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_removal_expr_method = Errors.handleThrowable(ccatch_env_var, $sym995$OUTER_CATCH_FOR_CYBLACK_REMOVAL_EXPR_METHOD);
	    }
	    return catch_var_for_cyblack_removal_expr_method;
	}
    }

    public static final SubLObject get_cyblack_posting_expr_immutable_expression(SubLObject cyblack_posting_expr) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_posting_expr, SIX_INTEGER, IMMUTABLE_EXPRESSION);
    }

    public static final SubLObject set_cyblack_posting_expr_immutable_expression(SubLObject cyblack_posting_expr, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_posting_expr, value, SIX_INTEGER, IMMUTABLE_EXPRESSION);
    }

    public static final SubLObject get_cyblack_posting_expr_confidence_expression(SubLObject cyblack_posting_expr) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_posting_expr, FIVE_INTEGER, CONFIDENCE_EXPRESSION);
    }

    public static final SubLObject set_cyblack_posting_expr_confidence_expression(SubLObject cyblack_posting_expr, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_posting_expr, value, FIVE_INTEGER, CONFIDENCE_EXPRESSION);
    }

    public static final SubLObject get_cyblack_posting_expr_slot_initializations(SubLObject cyblack_posting_expr) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_posting_expr, FOUR_INTEGER, SLOT_INITIALIZATIONS);
    }

    public static final SubLObject set_cyblack_posting_expr_slot_initializations(SubLObject cyblack_posting_expr, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_posting_expr, value, FOUR_INTEGER, SLOT_INITIALIZATIONS);
    }

    public static final SubLObject get_cyblack_posting_expr_datatype_string(SubLObject cyblack_posting_expr) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_posting_expr, THREE_INTEGER, DATATYPE_STRING);
    }

    public static final SubLObject set_cyblack_posting_expr_datatype_string(SubLObject cyblack_posting_expr, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_posting_expr, value, THREE_INTEGER, DATATYPE_STRING);
    }

    public static final SubLObject get_cyblack_posting_expr_compute_confidence(SubLObject cyblack_posting_expr) {
	{
	    SubLObject v_class = subloop_structures.instance_class(cyblack_posting_expr);
	    SubLObject slot = slots.slot_assoc(COMPUTE_CONFIDENCE, subloop_structures.class_compiled_instance_boolean_slot_access_alist(v_class));
	    instances.instances_access_check_instance_slot(v_class, cyblack_posting_expr, slot);
	}
	return classes.ldb_test($int$4097, subloop_structures.instance_boolean_slots(cyblack_posting_expr));
    }

    public static final SubLObject set_cyblack_posting_expr_compute_confidence(SubLObject cyblack_posting_expr, SubLObject value) {
	{
	    SubLObject v_class = subloop_structures.instance_class(cyblack_posting_expr);
	    SubLObject slot = slots.slot_assoc(COMPUTE_CONFIDENCE, subloop_structures.class_compiled_instance_boolean_slot_access_alist(v_class));
	    instances.instances_access_check_instance_slot(v_class, cyblack_posting_expr, slot);
	}
	subloop_structures._csetf_instance_boolean_slots(cyblack_posting_expr, bytes.dpb(NIL != value ? ((SubLObject) (ONE_INTEGER)) : ZERO_INTEGER, $int$4097, subloop_structures.instance_boolean_slots(cyblack_posting_expr)));
	return value;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_posting_expr_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_posting_expr_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_POSTING_EXPR, COMPUTE_CONFIDENCE, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_POSTING_EXPR, DATATYPE_STRING, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_POSTING_EXPR, SLOT_INITIALIZATIONS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_POSTING_EXPR, CONFIDENCE_EXPRESSION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_POSTING_EXPR, IMMUTABLE_EXPRESSION, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_posting_expr_p(SubLObject cyblack_posting_expr) {
	return classes.subloop_instanceof_class(cyblack_posting_expr, CYBLACK_POSTING_EXPR);
    }

    public static final SubLObject cyblack_posting_expr_list_p(SubLObject list) {
	if (!list.isList()) {
	    return NIL;
	}
	{
	    SubLObject cdolist_list_var = list;
	    SubLObject element = NIL;
	    for (element = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), element = cdolist_list_var.first()) {
		if (NIL == cyblack_action_expression_p(element)) {
		    return NIL;
		}
	    }
	}
	return T;
    }

    public static final SubLObject cyblack_posting_expr_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_posting_expr_method = NIL;
	    SubLObject immutable_expression = get_cyblack_posting_expr_immutable_expression(self);
	    SubLObject confidence_expression = get_cyblack_posting_expr_confidence_expression(self);
	    SubLObject slot_initializations = get_cyblack_posting_expr_slot_initializations(self);
	    SubLObject datatype_string = get_cyblack_posting_expr_datatype_string(self);
	    SubLObject compute_confidence = get_cyblack_posting_expr_compute_confidence(self);
	    try {
		try {
		    cyblack_defks_expression_initialize_method(self);
		    datatype_string = NIL;
		    slot_initializations = NIL;
		    confidence_expression = NIL;
		    compute_confidence = NIL;
		    immutable_expression = NIL;
		    sublisp_throw($sym1003$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_posting_expr_immutable_expression(self, immutable_expression);
			    set_cyblack_posting_expr_confidence_expression(self, confidence_expression);
			    set_cyblack_posting_expr_slot_initializations(self, slot_initializations);
			    set_cyblack_posting_expr_datatype_string(self, datatype_string);
			    set_cyblack_posting_expr_compute_confidence(self, compute_confidence);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_posting_expr_method = Errors.handleThrowable(ccatch_env_var, $sym1003$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD);
	    }
	    return catch_var_for_cyblack_posting_expr_method;
	}
    }

    public static final SubLObject cyblack_posting_expr_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject catch_var_for_cyblack_posting_expr_method = NIL;
	    SubLObject confidence_expression = get_cyblack_posting_expr_confidence_expression(self);
	    SubLObject slot_initializations = get_cyblack_posting_expr_slot_initializations(self);
	    SubLObject datatype_string = get_cyblack_posting_expr_datatype_string(self);
	    SubLObject compute_confidence = get_cyblack_posting_expr_compute_confidence(self);
	    try {
		try {
		    format(stream, $str_alt1007$__POST___S, datatype_string);
		    if (NIL == slot_initializations) {
			format(stream, $str_alt676$_);
			sublisp_throw($sym1006$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD, self);
		    }
		    {
			SubLObject remainder = NIL;
			for (remainder = slot_initializations; NIL != remainder; remainder = cddr(remainder)) {
			    {
				SubLObject key = remainder.first();
				SubLObject value = cadr(remainder);
				format(stream, $str_alt1008$__S__S, key, value);
			    }
			}
		    }
		    format(stream, $str_alt676$_);
		    if (NIL != confidence_expression) {
			if (NIL != compute_confidence) {
			    format(stream, $str_alt1009$__COMPUTE_CONFIDENCE);
			} else {
			    format(stream, $str_alt1010$__CONFIDENCE);
			}
			format(stream, $str_alt675$__S, confidence_expression);
		    }
		    format(stream, $str_alt676$_);
		    sublisp_throw($sym1006$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_posting_expr_confidence_expression(self, confidence_expression);
			    set_cyblack_posting_expr_slot_initializations(self, slot_initializations);
			    set_cyblack_posting_expr_datatype_string(self, datatype_string);
			    set_cyblack_posting_expr_compute_confidence(self, compute_confidence);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_posting_expr_method = Errors.handleThrowable(ccatch_env_var, $sym1006$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD);
	    }
	    return catch_var_for_cyblack_posting_expr_method;
	}
    }

    public static final SubLObject cyblack_posting_expr_get_datatype_string_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_posting_expr_method = NIL;
	    SubLObject datatype_string = get_cyblack_posting_expr_datatype_string(self);
	    try {
		try {
		    sublisp_throw($sym1014$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD, datatype_string);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_posting_expr_datatype_string(self, datatype_string);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_posting_expr_method = Errors.handleThrowable(ccatch_env_var, $sym1014$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD);
	    }
	    return catch_var_for_cyblack_posting_expr_method;
	}
    }

    public static final SubLObject cyblack_posting_expr_set_datatype_string_method(SubLObject self, SubLObject new_datatype_string) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_posting_expr_method = NIL;
		SubLObject datatype_string = get_cyblack_posting_expr_datatype_string(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_datatype_string_p(new_datatype_string)) {
				Errors.error($str_alt1020$_SET_DATATYPE_STRING__S____S_is_n, self, new_datatype_string);
			    }
			}
			datatype_string = new_datatype_string;
			sublisp_throw($sym1019$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD, self);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_posting_expr_datatype_string(self, datatype_string);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_posting_expr_method = Errors.handleThrowable(ccatch_env_var, $sym1019$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD);
		}
		return catch_var_for_cyblack_posting_expr_method;
	    }
	}
    }

    public static final SubLObject cyblack_posting_expr_get_slot_initializations_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_posting_expr_method = NIL;
	    SubLObject slot_initializations = get_cyblack_posting_expr_slot_initializations(self);
	    try {
		try {
		    sublisp_throw($sym1024$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD, slot_initializations);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_posting_expr_slot_initializations(self, slot_initializations);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_posting_expr_method = Errors.handleThrowable(ccatch_env_var, $sym1024$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD);
	    }
	    return catch_var_for_cyblack_posting_expr_method;
	}
    }

    public static final SubLObject cyblack_posting_expr_set_slot_initializations_method(SubLObject self, SubLObject new_slot_initializations) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_posting_expr_method = NIL;
		SubLObject slot_initializations = get_cyblack_posting_expr_slot_initializations(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == new_slot_initializations) || (NIL != cyblack_slot_initializations_p(new_slot_initializations)))) {
				Errors.error($str_alt1030$_SET_SLOT_INITIALIZATIONS__S____S, self, new_slot_initializations);
			    }
			}
			slot_initializations = copy_tree(new_slot_initializations);
			sublisp_throw($sym1029$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD, new_slot_initializations);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_posting_expr_slot_initializations(self, slot_initializations);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_posting_expr_method = Errors.handleThrowable(ccatch_env_var, $sym1029$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD);
		}
		return catch_var_for_cyblack_posting_expr_method;
	    }
	}
    }

    public static final SubLObject cyblack_posting_expr_add_slot_initializations_method(SubLObject self, SubLObject slot_key, SubLObject expression) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_posting_expr_method = NIL;
		SubLObject slot_initializations = get_cyblack_posting_expr_slot_initializations(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!slot_key.isKeyword()) {
				Errors.error($str_alt1036$_ADD_SLOT_INITIALIZATIONS__S____S, self, slot_key);
			    }
			}
			if (NIL != slot_initializations) {
			    slot_initializations = nconc(slot_initializations, list(slot_key, expression));
			} else {
			    slot_initializations = list(slot_key, expression);
			}
			sublisp_throw($sym1035$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD, slot_key);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_posting_expr_slot_initializations(self, slot_initializations);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_posting_expr_method = Errors.handleThrowable(ccatch_env_var, $sym1035$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD);
		}
		return catch_var_for_cyblack_posting_expr_method;
	    }
	}
    }

    public static final SubLObject cyblack_posting_expr_remove_slot_initializations_method(SubLObject self, SubLObject slot_key) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_posting_expr_method = NIL;
		SubLObject slot_initializations = get_cyblack_posting_expr_slot_initializations(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!slot_key.isKeyword()) {
				Errors.error($str_alt1042$_REMOVE_SLOT_INITIALIZATIONS__S__, self, slot_key);
			    }
			}
			if (NIL == slot_initializations) {
			    sublisp_throw($sym1041$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD, NIL);
			}
			slot_initializations = remf(slot_initializations, slot_key);
			sublisp_throw($sym1041$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD, slot_key);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_posting_expr_slot_initializations(self, slot_initializations);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_posting_expr_method = Errors.handleThrowable(ccatch_env_var, $sym1041$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD);
		}
		return catch_var_for_cyblack_posting_expr_method;
	    }
	}
    }

    public static final SubLObject cyblack_posting_expr_get_confidence_expression_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_posting_expr_method = NIL;
	    SubLObject confidence_expression = get_cyblack_posting_expr_confidence_expression(self);
	    try {
		try {
		    sublisp_throw($sym1046$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD, confidence_expression);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_posting_expr_confidence_expression(self, confidence_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_posting_expr_method = Errors.handleThrowable(ccatch_env_var, $sym1046$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD);
	    }
	    return catch_var_for_cyblack_posting_expr_method;
	}
    }

    public static final SubLObject cyblack_posting_expr_set_confidence_expression_method(SubLObject self, SubLObject new_expression, SubLObject compute) {
	if (compute == UNPROVIDED) {
	    compute = NIL;
	}
	{
	    SubLObject catch_var_for_cyblack_posting_expr_method = NIL;
	    SubLObject confidence_expression = get_cyblack_posting_expr_confidence_expression(self);
	    SubLObject compute_confidence = get_cyblack_posting_expr_compute_confidence(self);
	    try {
		try {
		    confidence_expression = new_expression;
		    compute_confidence = compute;
		    sublisp_throw($sym1051$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD, new_expression);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_posting_expr_confidence_expression(self, confidence_expression);
			    set_cyblack_posting_expr_compute_confidence(self, compute_confidence);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_posting_expr_method = Errors.handleThrowable(ccatch_env_var, $sym1051$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD);
	    }
	    return catch_var_for_cyblack_posting_expr_method;
	}
    }

    public static final SubLObject cyblack_posting_expr_get_immutable_expression_method(SubLObject self) {
	{
	    SubLObject immutable_expression = get_cyblack_posting_expr_immutable_expression(self);
	    return immutable_expression;
	}
    }

    public static final SubLObject cyblack_posting_expr_set_immutable_expression_method(SubLObject self, SubLObject new_immutable_expression) {
	{
	    SubLObject catch_var_for_cyblack_posting_expr_method = NIL;
	    SubLObject immutable_expression = get_cyblack_posting_expr_immutable_expression(self);
	    try {
		try {
		    immutable_expression = new_immutable_expression;
		    sublisp_throw($sym1059$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD, new_immutable_expression);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_posting_expr_immutable_expression(self, immutable_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_posting_expr_method = Errors.handleThrowable(ccatch_env_var, $sym1059$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD);
	    }
	    return catch_var_for_cyblack_posting_expr_method;
	}
    }

    public static final SubLObject cyblack_posting_expr_get_execute_method_bindings_method(SubLObject self, SubLObject var) {
	{
	    SubLObject catch_var_for_cyblack_posting_expr_method = NIL;
	    SubLObject parent = get_cyblack_defks_expression_parent(self);
	    try {
		try {
		    if (NIL != parent) {
			sublisp_throw($sym1062$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD, cyblack_on_propose_expression_get_execute_method_bindings_method(parent, var));
		    }
		    sublisp_throw($sym1062$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD, NIL);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_expression_parent(self, parent);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_posting_expr_method = Errors.handleThrowable(ccatch_env_var, $sym1062$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD);
	    }
	    return catch_var_for_cyblack_posting_expr_method;
	}
    }

    public static final SubLObject cyblack_posting_expr_get_silence_statements_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_posting_expr_method = NIL;
	    SubLObject parent = get_cyblack_defks_expression_parent(self);
	    try {
		try {
		    if (NIL != parent) {
			sublisp_throw($sym1065$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD, cyblack_on_propose_expression_get_silence_statements_method(parent));
		    }
		    sublisp_throw($sym1065$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD, NIL);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_defks_expression_parent(self, parent);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_posting_expr_method = Errors.handleThrowable(ccatch_env_var, $sym1065$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD);
	    }
	    return catch_var_for_cyblack_posting_expr_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_set_result_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_set_result_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_POSTING_ACTION_EXPRESSION, POSTING_REFERENCE_EXPRESSION, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_set_result_expression_p(SubLObject cyblack_set_result_expression) {
	return classes.subloop_instanceof_class(cyblack_set_result_expression, CYBLACK_SET_RESULT_EXPRESSION);
    }

    public static final SubLObject cyblack_set_result_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject catch_var_for_cyblack_set_result_expression_method = NIL;
	    SubLObject posting_reference_expression = get_cyblack_posting_action_expression_posting_reference_expression(self);
	    try {
		try {
		    format(stream, $str_alt1072$__SET_RESULT__S_, posting_reference_expression);
		    sublisp_throw($sym1071$OUTER_CATCH_FOR_CYBLACK_SET_RESULT_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_posting_action_expression_posting_reference_expression(self, posting_reference_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_set_result_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1071$OUTER_CATCH_FOR_CYBLACK_SET_RESULT_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_set_result_expression_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_return_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_return_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_POSTING_ACTION_EXPRESSION, POSTING_REFERENCE_EXPRESSION, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_return_expression_p(SubLObject cyblack_return_expression) {
	return classes.subloop_instanceof_class(cyblack_return_expression, CYBLACK_RETURN_EXPRESSION);
    }

    public static final SubLObject cyblack_return_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject catch_var_for_cyblack_return_expression_method = NIL;
	    SubLObject posting_reference_expression = get_cyblack_posting_action_expression_posting_reference_expression(self);
	    try {
		try {
		    format(stream, $str_alt1079$__RETURN__S_, posting_reference_expression);
		    sublisp_throw($sym1078$OUTER_CATCH_FOR_CYBLACK_RETURN_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_posting_action_expression_posting_reference_expression(self, posting_reference_expression);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_return_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1078$OUTER_CATCH_FOR_CYBLACK_RETURN_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_return_expression_method;
	}
    }

    public static final SubLObject get_cyblack_reset_action_expression_destination_list(SubLObject cyblack_reset_action_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_reset_action_expression, THREE_INTEGER, DESTINATION_LIST);
    }

    public static final SubLObject set_cyblack_reset_action_expression_destination_list(SubLObject cyblack_reset_action_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_reset_action_expression, value, THREE_INTEGER, DESTINATION_LIST);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_reset_action_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_reset_action_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_RESET_ACTION_EXPRESSION, DESTINATION_LIST, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_reset_action_expression_p(SubLObject cyblack_reset_action_expression) {
	return classes.subloop_instanceof_class(cyblack_reset_action_expression, CYBLACK_RESET_ACTION_EXPRESSION);
    }

    public static final SubLObject cyblack_reset_action_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_reset_action_expression_method = NIL;
	    SubLObject destination_list = get_cyblack_reset_action_expression_destination_list(self);
	    try {
		try {
		    cyblack_defks_expression_initialize_method(self);
		    destination_list = NIL;
		    sublisp_throw($sym1087$OUTER_CATCH_FOR_CYBLACK_RESET_ACTION_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_reset_action_expression_destination_list(self, destination_list);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_reset_action_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1087$OUTER_CATCH_FOR_CYBLACK_RESET_ACTION_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_reset_action_expression_method;
	}
    }

    public static final SubLObject cyblack_reset_action_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject catch_var_for_cyblack_reset_action_expression_method = NIL;
	    SubLObject destination_list = get_cyblack_reset_action_expression_destination_list(self);
	    try {
		try {
		    format(stream, $str_alt1091$__RESET__S_, destination_list);
		    sublisp_throw($sym1090$OUTER_CATCH_FOR_CYBLACK_RESET_ACTION_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_reset_action_expression_destination_list(self, destination_list);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_reset_action_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1090$OUTER_CATCH_FOR_CYBLACK_RESET_ACTION_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_reset_action_expression_method;
	}
    }

    public static final SubLObject cyblack_reset_action_expression_get_destination_list_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_reset_action_expression_method = NIL;
	    SubLObject destination_list = get_cyblack_reset_action_expression_destination_list(self);
	    try {
		try {
		    sublisp_throw($sym1095$OUTER_CATCH_FOR_CYBLACK_RESET_ACTION_EXPRESSION_METHOD, copy_list(destination_list));
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_reset_action_expression_destination_list(self, destination_list);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_reset_action_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1095$OUTER_CATCH_FOR_CYBLACK_RESET_ACTION_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_reset_action_expression_method;
	}
    }

    public static final SubLObject cyblack_reset_action_expression_set_destination_list_method(SubLObject self, SubLObject new_destination_list) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_reset_action_expression_method = NIL;
		SubLObject destination_list = get_cyblack_reset_action_expression_destination_list(self);
		try {
		    try {
			{
			    SubLObject cdolist_list_var = new_destination_list;
			    SubLObject destination = NIL;
			    for (destination = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), destination = cdolist_list_var.first()) {
				if (!((NIL != cyblack_application.cyblack_application_command_destination_p(destination)) || destination.isString())) {
				    Errors.warn(StreamsLow.$standard_output$.getDynamicValue(thread), $str_alt1101$_SET_DESTINATION_LIST__S____S_is_, self, destination);
				}
			    }
			    destination_list = copy_list(new_destination_list);
			    sublisp_throw($sym1100$OUTER_CATCH_FOR_CYBLACK_RESET_ACTION_EXPRESSION_METHOD, new_destination_list);
			}
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_reset_action_expression_destination_list(self, destination_list);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_reset_action_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1100$OUTER_CATCH_FOR_CYBLACK_RESET_ACTION_EXPRESSION_METHOD);
		}
		return catch_var_for_cyblack_reset_action_expression_method;
	    }
	}
    }

    public static final SubLObject get_cyblack_error_expression_error_args(SubLObject cyblack_error_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_error_expression, FOUR_INTEGER, ERROR_ARGS);
    }

    public static final SubLObject set_cyblack_error_expression_error_args(SubLObject cyblack_error_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_error_expression, value, FOUR_INTEGER, ERROR_ARGS);
    }

    public static final SubLObject get_cyblack_error_expression_error_string(SubLObject cyblack_error_expression) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_error_expression, THREE_INTEGER, ERROR_STRING);
    }

    public static final SubLObject set_cyblack_error_expression_error_string(SubLObject cyblack_error_expression, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_error_expression, value, THREE_INTEGER, ERROR_STRING);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_error_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_error_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ERROR_EXPRESSION, ERROR_STRING, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_ERROR_EXPRESSION, ERROR_ARGS, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_error_expression_p(SubLObject cyblack_error_expression) {
	return classes.subloop_instanceof_class(cyblack_error_expression, CYBLACK_ERROR_EXPRESSION);
    }

    public static final SubLObject cyblack_error_expression_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_error_expression_method = NIL;
	    SubLObject error_string = get_cyblack_error_expression_error_string(self);
	    try {
		try {
		    cyblack_defks_expression_initialize_method(self);
		    error_string = NIL;
		    sublisp_throw($sym1110$OUTER_CATCH_FOR_CYBLACK_ERROR_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_error_expression_error_string(self, error_string);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_error_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1110$OUTER_CATCH_FOR_CYBLACK_ERROR_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_error_expression_method;
	}
    }

    public static final SubLObject cyblack_error_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	{
	    SubLObject catch_var_for_cyblack_error_expression_method = NIL;
	    SubLObject error_args = get_cyblack_error_expression_error_args(self);
	    SubLObject error_string = get_cyblack_error_expression_error_string(self);
	    try {
		try {
		    format(stream, $str_alt1114$__ERROR__S, error_string);
		    {
			SubLObject cdolist_list_var = error_args;
			SubLObject arg = NIL;
			for (arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), arg = cdolist_list_var.first()) {
			    format(stream, $str_alt675$__S, arg);
			}
		    }
		    format(stream, $str_alt676$_);
		    sublisp_throw($sym1113$OUTER_CATCH_FOR_CYBLACK_ERROR_EXPRESSION_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_error_expression_error_args(self, error_args);
			    set_cyblack_error_expression_error_string(self, error_string);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_error_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1113$OUTER_CATCH_FOR_CYBLACK_ERROR_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_error_expression_method;
	}
    }

    public static final SubLObject cyblack_error_expression_get_error_string_method(SubLObject self) {
	{
	    SubLObject error_string = get_cyblack_error_expression_error_string(self);
	    return error_string;
	}
    }

    public static final SubLObject cyblack_error_expression_set_error_string_method(SubLObject self, SubLObject string) {
	{
	    SubLObject catch_var_for_cyblack_error_expression_method = NIL;
	    SubLObject error_string = get_cyblack_error_expression_error_string(self);
	    try {
		try {
		    error_string = string;
		    sublisp_throw($sym1122$OUTER_CATCH_FOR_CYBLACK_ERROR_EXPRESSION_METHOD, string);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_error_expression_error_string(self, error_string);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_error_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1122$OUTER_CATCH_FOR_CYBLACK_ERROR_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_error_expression_method;
	}
    }

    public static final SubLObject cyblack_error_expression_get_error_args_method(SubLObject self) {
	{
	    SubLObject error_args = get_cyblack_error_expression_error_args(self);
	    return error_args;
	}
    }

    public static final SubLObject cyblack_error_expression_set_error_args_method(SubLObject self, SubLObject new_error_args) {
	{
	    SubLObject catch_var_for_cyblack_error_expression_method = NIL;
	    SubLObject error_args = get_cyblack_error_expression_error_args(self);
	    try {
		try {
		    error_args = copy_tree(new_error_args);
		    sublisp_throw($sym1130$OUTER_CATCH_FOR_CYBLACK_ERROR_EXPRESSION_METHOD, new_error_args);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_error_expression_error_args(self, error_args);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_error_expression_method = Errors.handleThrowable(ccatch_env_var, $sym1130$OUTER_CATCH_FOR_CYBLACK_ERROR_EXPRESSION_METHOD);
	    }
	    return catch_var_for_cyblack_error_expression_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_halt_expression_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_halt_expression_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, PARENT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_DEFKS_EXPRESSION, CHILDREN, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_halt_expression_p(SubLObject cyblack_halt_expression) {
	return classes.subloop_instanceof_class(cyblack_halt_expression, CYBLACK_HALT_EXPRESSION);
    }

    public static final SubLObject cyblack_halt_expression_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	format(stream, $str_alt1136$__HALT_);
	return self;
    }

    public static final SubLObject report_parse_stage(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    SubLObject function = NIL;
	    SubLObject v_object = NIL;
	    destructuring_bind_must_consp(current, datum, $list_alt1138);
	    function = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt1138);
	    v_object = current.first();
	    current = current.rest();
	    if (NIL == current) {
		return listS(PROGN, list(FORMAT, T, $str_alt1140$___S__S_, list(QUOTE, function), v_object), $list_alt1141);
	    } else {
		cdestructuring_bind_error(datum, $list_alt1138);
	    }
	}
	return NIL;
    }

    public static final SubLObject parse_cyblack_defks_body(SubLObject v_object) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!v_object.isList()) {
		    Errors.error($str_alt1142$PARSE_CYBLACK_DEFKS_EXPRESSION___, v_object);
		}
	    }
	    {
		SubLObject result = NIL;
		SubLObject defks_body = object.new_class_instance(CYBLACK_DEFKS_BODY);
		if (NIL != v_object) {
		    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			if (!((v_object.isCons() && v_object.first().isCons()) && (((caar(v_object) == $STIMULATION_COND) && (((v_object.rest().isCons() && cadr(v_object).isCons()) && (cadr(v_object).first() == $ON_STARTUP)) || (NIL == v_object.rest())))
				|| ((caar(v_object) == $ON_STARTUP) && (((v_object.rest().isCons() && cadr(v_object).isCons()) && (cadr(v_object).first() == $STIMULATION_COND)) || (NIL == v_object.rest())))))) {
			    Errors.error($str_alt1145$PARSE_CYBLACK_DEFKS_BODY___S_is_n, v_object);
			}
		    }
		    {
			SubLObject old_value = $cyblack_current_defks_body$.getDynamicValue(thread);
			$cyblack_current_defks_body$.setDynamicValue(defks_body, thread);
			try {
			    {
				SubLObject unparsed_stimulation_cond = assoc($STIMULATION_COND, v_object, UNPROVIDED, UNPROVIDED);
				SubLObject stimulation_cond = (NIL != unparsed_stimulation_cond) ? ((SubLObject) (parse_cyblack_defks_stimulation_cond(unparsed_stimulation_cond))) : NIL;
				SubLObject unparsed_on_startup = assoc($ON_STARTUP, v_object, UNPROVIDED, UNPROVIDED);
				SubLObject on_startup = (NIL != unparsed_on_startup) ? ((SubLObject) (parse_cyblack_defks_on_startup_clause(unparsed_on_startup))) : NIL;
				if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				    if (NIL == cyblack_defks_stimulation_cond_p(stimulation_cond)) {
					Errors.error($str_alt1146$PARSE_CYBLACK_DEFKS_BODY__Failed_, unparsed_stimulation_cond);
				    }
				}
				if (NIL != stimulation_cond) {
				    cyblack_defks_body_set_stimulation_cond_method(defks_body, stimulation_cond);
				}
				if (NIL != on_startup) {
				    cyblack_defks_body_set_on_startup_clause_method(defks_body, on_startup);
				}
				result = defks_body;
			    }
			} finally {
			    {
				SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
				try {
				    $is_thread_performing_cleanupP$.bind(T, thread);
				    $cyblack_current_defks_body$.setDynamicValue(old_value, thread);
				} finally {
				    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
				}
			    }
			}
		    }
		    return result;
		}
	    }
	    return object.new_class_instance(CYBLACK_DEFKS_BODY);
	}
    }

    public static final SubLObject parse_cyblack_defks_on_startup_clause(SubLObject v_object) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!((v_object.isCons() && (v_object.first() == $ON_STARTUP)) && v_object.rest().isList())) {
		    Errors.error($str_alt1147$PARSE_CYBLACK_DEFKS_ON_STARTUP_CL, v_object);
		}
	    }
	    {
		SubLObject parsed_post_expressions = NIL;
		SubLObject on_startup_clause = object.new_class_instance(CYBLACK_DEFKS_ON_STARTUP_CLAUSE);
		SubLObject list_expression = v_object.rest();
		if (NIL == list_expression) {
		    parsed_post_expressions = NIL;
		} else if (list_expression.isAtom()) {
		    parsed_post_expressions = list(list_expression);
		} else if (NIL == list_expression.rest()) {
		    {
			SubLObject element = list_expression.first();
			parsed_post_expressions = list(parse_post_expression(element, NIL));
		    }
		} else {
		    {
			SubLObject tail_cons = NIL;
			SubLObject result = NIL;
			{
			    SubLObject element = list_expression.first();
			    parsed_post_expressions = list(parse_post_expression(element, NIL));
			    tail_cons = parsed_post_expressions;
			}
			{
			    SubLObject cdolist_list_var = list_expression.rest();
			    SubLObject element = NIL;
			    for (element = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), element = cdolist_list_var.first()) {
				result = list(parse_post_expression(element, NIL));
				rplacd(tail_cons, result);
				tail_cons = result;
			    }
			}
		    }
		}

		{
		    SubLObject cdolist_list_var = parsed_post_expressions;
		    SubLObject posting_expression = NIL;
		    for (posting_expression = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), posting_expression = cdolist_list_var.first()) {
			cyblack_defks_expression_set_parent_method(posting_expression, on_startup_clause);
		    }
		}
		cyblack_defks_on_startup_clause_set_posting_expressions_method(on_startup_clause, parsed_post_expressions);
		return on_startup_clause;
	    }
	}
    }

    public static final SubLObject parse_cyblack_defks_stimulation_cond(SubLObject v_object) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!((((v_object.isCons() && (v_object.first() == $STIMULATION_COND)) && v_object.rest().isCons()) && cadr(v_object).isList()) && cddr(v_object).isList())) {
		    Errors.error($str_alt1148$PARSE_CYBLACK_DEFKS_STIMULATION_C, v_object);
		}
	    }
	    {
		SubLObject unparsed_parameter_list = cadr(v_object);
		SubLObject parsed_parameter_list = parse_cyblack_defks_stimulation_cond_parameter_list(unparsed_parameter_list);
		SubLObject unparsed_when_clauses = cddr(v_object);
		SubLObject parsed_when_clauses = parse_cyblack_defks_stimulation_cond_when_clauses(unparsed_when_clauses);
		SubLObject defks_stimulation_cond = object.new_class_instance(CYBLACK_DEFKS_STIMULATION_COND);
		cyblack_defks_stimulation_cond_set_arg_list_method(defks_stimulation_cond, parsed_parameter_list);
		cyblack_defks_stimulation_cond_set_clauses_method(defks_stimulation_cond, parsed_when_clauses);
		return defks_stimulation_cond;
	    }
	}
    }

    public static final SubLObject parse_cyblack_defks_stimulation_cond_parameter_list(SubLObject v_object) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!v_object.isList()) {
		    Errors.error($str_alt1149$PARSE_CYBLACK_DEFKS_STIMULATION_C, v_object);
		}
	    }
	    {
		SubLObject copy_of_list = NIL;
		SubLObject cdolist_list_var = v_object;
		SubLObject element = NIL;
		for (element = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), element = cdolist_list_var.first()) {
		    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			if (!((NIL != element) && element.isSymbol())) {
			    Errors.error($str_alt1150$PARSE_CYBLACK_DEFKS_STIMULATION_C, element);
			}
		    }
		    copy_of_list = cons(parse_cyblack_defks_stimulation_cond_arg(element), copy_of_list);
		}
		return nreverse(copy_of_list);
	    }
	}
    }

    public static final SubLObject parse_cyblack_defks_stimulation_cond_arg(SubLObject v_object) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!((NIL != v_object) && v_object.isSymbol())) {
		    Errors.error($str_alt1151$_PARSE_CYBLACK_DEFKS_STIMULATION_, v_object);
		}
	    }
	    {
		SubLObject parsed_arg = object.new_class_instance(CYBLACK_DEFKS_STIMULATION_COND_ARG);
		cyblack_defks_stimulation_cond_arg_set_arg_method(parsed_arg, v_object);
		return parsed_arg;
	    }
	}
    }

    public static final SubLObject parse_cyblack_defks_stimulation_cond_when_clauses(SubLObject v_object) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!v_object.isList()) {
		    Errors.error($str_alt1152$PARSE_CYBLACK_DEFKS_STIMULATION_C, v_object);
		}
	    }
	    {
		SubLObject parsed_when_clauses = NIL;
		SubLObject cdolist_list_var = v_object;
		SubLObject element = NIL;
		for (element = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), element = cdolist_list_var.first()) {
		    parsed_when_clauses = cons(parse_cyblack_defks_stimulation_cond_when_clause(element), parsed_when_clauses);
		}
		return nreverse(parsed_when_clauses);
	    }
	}
    }

    public static final SubLObject parse_cyblack_defks_stimulation_cond_when_clause(SubLObject v_object) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!(((v_object.isCons() && (v_object.first() == $WHEN)) && v_object.rest().isCons()) && cddr(v_object).isList())) {
		    Errors.error($str_alt1154$PARSE_CYBLACK_DEFKS_STIMULATION_C, v_object);
		}
	    }
	    {
		SubLObject defks_body = $cyblack_current_defks_body$.getDynamicValue(thread);
		SubLObject lisp_expression = cadr(v_object);
		SubLObject on_propose_body = cddr(v_object);
		SubLObject parsed_on_propose_body = parse_cyblack_when_clause_on_propose_body(on_propose_body, NIL != defks_body ? ((SubLObject) (cyblack_defks_body_get_integer_reference_method(defks_body))) : new_integer_reference(UNPROVIDED));
		SubLObject when_clause = object.new_class_instance(CYBLACK_DEFKS_WHEN_CLAUSE);
		cyblack_defks_when_clause_set_lisp_expression_method(when_clause, lisp_expression);
		cyblack_defks_when_clause_set_on_propose_body_method(when_clause, parsed_on_propose_body);
		return when_clause;
	    }
	}
    }

    public static final SubLObject parse_cyblack_when_clause_on_propose_body(SubLObject v_object, SubLObject index) {
	if (index == UNPROVIDED) {
	    index = new_integer_reference(ZERO_INTEGER);
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!v_object.isList()) {
		    Errors.error($str_alt1155$PARSE_CYBLACK_WHEN_CLAUSE_ON_PROP, v_object);
		}
	    }
	    {
		SubLObject parsed_on_propose_expressions = NIL;
		SubLObject cdolist_list_var = v_object;
		SubLObject on_propose_expression = NIL;
		for (on_propose_expression = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), on_propose_expression = cdolist_list_var.first()) {
		    parsed_on_propose_expressions = cons(parse_cyblack_on_propose_expression(on_propose_expression, index), parsed_on_propose_expressions);
		}
		{
		    SubLObject on_propose_body = object.new_class_instance(CYBLACK_ON_PROPOSE_BODY);
		    cyblack_on_propose_body_set_on_propose_expressions_method(on_propose_body, parsed_on_propose_expressions);
		    return on_propose_body;
		}
	    }
	}
    }

    public static final SubLObject parse_cyblack_on_propose_expression(SubLObject v_object, SubLObject index) {
	if (index == UNPROVIDED) {
	    index = new_integer_reference(ZERO_INTEGER);
	}
	if (v_object.isCons()) {
	    {
		SubLObject first_element = v_object.first();
		SubLObject rest_of_list = v_object.rest();
		if (first_element == $PROPOSE) {
		    return parse_propose_expression(v_object, index);
		} else {
		    return cons(parse_cyblack_on_propose_expression(first_element, index), parse_cyblack_on_propose_expression(rest_of_list, index));
		}
	    }
	} else {
	    return v_object;
	}
    }

    public static final SubLObject parse_propose_expression(SubLObject v_object, SubLObject index) {
	if (index == UNPROVIDED) {
	    index = new_integer_reference(ZERO_INTEGER);
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!((((v_object.isCons() && (v_object.first() == $PROPOSE)) && v_object.rest().isCons()) && cadr(v_object).isList()) && (NIL != cyblack_propose_expression_options_plist_p(cddr(v_object))))) {
		    Errors.error($str_alt1157$PARSE_PROPOSE_EXPRESSION___S_is_n, v_object);
		}
	    }
	    {
		SubLObject datatype_list = cadr(v_object);
		SubLObject parsed_datatype_list = parse_datatype_list(datatype_list);
		SubLObject reasons_expression = getf(cddr(v_object), $REASONS, UNPROVIDED);
		SubLObject posting_expression = getf(cddr(v_object), $ON_ACCEPT_DO, UNPROVIDED);
		SubLObject parsed_posting_expression = parse_posting_expression(posting_expression, UNPROVIDED);
		SubLObject propose_expression = object.new_class_instance(CYBLACK_ON_PROPOSE_EXPRESSION);
		cyblack_on_propose_expression_set_datatype_list_method(propose_expression, parsed_datatype_list);
		cyblack_on_propose_expression_set_reason_list_method(propose_expression, reasons_expression);
		cyblack_on_propose_expression_set_on_accept_expression_method(propose_expression, parsed_posting_expression);
		cyblack_on_propose_expression_set_expression_index_method(propose_expression, get_integer_from_reference(index));
		inc_integer_reference(index);
		return propose_expression;
	    }
	}
    }

    public static final SubLObject parse_datatype_list(SubLObject v_object) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!v_object.isList()) {
		    Errors.error($str_alt1160$PARSE_DATATYPE_LIST___S_is_not_a_, v_object);
		}
	    }
	    {
		SubLObject parsed_datatype_list = NIL;
		SubLObject cdolist_list_var = v_object;
		SubLObject element = NIL;
		for (element = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), element = cdolist_list_var.first()) {
		    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			if (!element.isString()) {
			    Errors.error($str_alt1161$PARSE_DATATYPE_LIST___S_is_not_a_, element);
			}
		    }
		    parsed_datatype_list = cons(element, parsed_datatype_list);
		}
		return parsed_datatype_list;
	    }
	}
    }

    public static final SubLObject parse_posting_expression(SubLObject v_object, SubLObject within_stimulation_cond) {
	if (within_stimulation_cond == UNPROVIDED) {
	    within_stimulation_cond = T;
	}
	if (v_object.isCons()) {
	    {
		SubLObject first_element = v_object.first();
		SubLObject rest_of_list = v_object.rest();
		if (first_element == $POST) {
		    return parse_post_expression(v_object, within_stimulation_cond);
		} else if (first_element == $UNPOST) {
		    return parse_unpost_expression(v_object, within_stimulation_cond);
		} else if (first_element == $DEACTIVATE) {
		    return parse_deactivate_expression(v_object, within_stimulation_cond);
		} else if (first_element == $SET_RESULT) {
		    return parse_set_result_expression(v_object, within_stimulation_cond);
		} else if (first_element == $RETURN) {
		    return parse_return_expression(v_object, within_stimulation_cond);
		} else if (first_element == $RESET) {
		    return parse_reset_action_expression(v_object, within_stimulation_cond);
		} else if (first_element == $ERROR) {
		    return parse_error_expression(v_object, within_stimulation_cond);
		} else if (first_element == $HALT) {
		    return parse_halt_expression(v_object, within_stimulation_cond);
		} else {
		    return cons(parse_posting_expression(first_element, within_stimulation_cond), parse_posting_expression(rest_of_list, within_stimulation_cond));
		}

	    }
	} else {
	    return v_object;
	}
    }

    public static final SubLObject parse_post_expression(SubLObject v_object, SubLObject within_stimulation_cond) {
	if (within_stimulation_cond == UNPROVIDED) {
	    within_stimulation_cond = T;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!(((((v_object.isCons() && (v_object.first() == $POST)) && v_object.rest().isCons()) && cadr(v_object).isCons()) && (NIL != cyblack_datatype_string_p(cadr(v_object).first()))) && (NIL != cyblack_keword_plist_p(cadr(v_object).rest())))) {
		    Errors.error($str_alt1170$PARSE_POST_EXPRESSION___S_is_not_, v_object);
		}
	    }
	    {
		SubLObject type_string = cadr(v_object).first();
		SubLObject plist = cadr(v_object).rest();
		SubLObject posting_expression = object.new_class_instance(CYBLACK_POSTING_EXPR);
		SubLObject compute_confidence_expression = getf(cddr(v_object), $COMPUTE_CONFIDENCE, UNPROVIDED);
		SubLObject confidence_expression = getf(cddr(v_object), $CONFIDENCE, UNPROVIDED);
		SubLObject immutable_expression = getf(cddr(v_object), $IMMUTABLE, UNPROVIDED);
		cyblack_posting_expr_set_datatype_string_method(posting_expression, type_string);
		cyblack_posting_expr_set_slot_initializations_method(posting_expression, plist);
		if (NIL != compute_confidence_expression) {
		    cyblack_posting_expr_set_confidence_expression_method(posting_expression, copy_tree(compute_confidence_expression), T);
		} else if (NIL != confidence_expression) {
		    cyblack_posting_expr_set_confidence_expression_method(posting_expression, copy_tree(confidence_expression), NIL);
		} else if (NIL != immutable_expression) {
		    cyblack_posting_expr_set_immutable_expression_method(posting_expression, copy_tree(immutable_expression));
		}

		if (NIL != within_stimulation_cond) {
		    {
			SubLObject defks_body = $cyblack_current_defks_body$.getDynamicValue(thread);
			if (NIL != defks_body) {
			    cyblack_defks_body_register_posting_expression_method(defks_body, posting_expression);
			}
		    }
		}
		return posting_expression;
	    }
	}
    }

    public static final SubLObject parse_unpost_expression(SubLObject v_object, SubLObject within_stimulation_cond) {
	if (within_stimulation_cond == UNPROVIDED) {
	    within_stimulation_cond = T;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!(((v_object.isCons() && (v_object.first() == $UNPOST)) && v_object.rest().isCons()) && (NIL == cddr(v_object)))) {
		    Errors.error($str_alt1174$PARSE_UNPOST_EXPRESSION___S_is_no, v_object);
		}
	    }
	    {
		SubLObject expression = cadr(v_object);
		SubLObject removal_expression = object.new_class_instance(CYBLACK_REMOVAL_EXPR);
		cyblack_posting_action_expression_set_posting_reference_expression_method(removal_expression, copy_tree(expression));
		if (NIL != within_stimulation_cond) {
		    {
			SubLObject defks_body = $cyblack_current_defks_body$.getDynamicValue(thread);
			if (NIL != defks_body) {
			    cyblack_defks_body_register_posting_expression_method(defks_body, removal_expression);
			}
		    }
		}
		return removal_expression;
	    }
	}
    }

    public static final SubLObject parse_deactivate_expression(SubLObject v_object, SubLObject within_stimulation_cond) {
	if (within_stimulation_cond == UNPROVIDED) {
	    within_stimulation_cond = T;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!(((v_object.isCons() && (v_object.first() == $DEACTIVATE)) && v_object.rest().isCons()) && (NIL == cddr(v_object)))) {
		    Errors.error($str_alt1174$PARSE_UNPOST_EXPRESSION___S_is_no, v_object);
		}
	    }
	    {
		SubLObject expression = cadr(v_object);
		SubLObject deactivate_expression = object.new_class_instance(CYBLACK_DEACTIVATE_EXPR);
		cyblack_posting_action_expression_set_posting_reference_expression_method(deactivate_expression, copy_tree(expression));
		if (NIL != within_stimulation_cond) {
		    {
			SubLObject defks_body = $cyblack_current_defks_body$.getDynamicValue(thread);
			if (NIL != defks_body) {
			    cyblack_defks_body_register_posting_expression_method(defks_body, deactivate_expression);
			}
		    }
		}
		return deactivate_expression;
	    }
	}
    }

    public static final SubLObject parse_set_result_expression(SubLObject v_object, SubLObject within_stimulation_cond) {
	if (within_stimulation_cond == UNPROVIDED) {
	    within_stimulation_cond = T;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!(((v_object.isCons() && (v_object.first() == $SET_RESULT)) && v_object.rest().isCons()) && (NIL == cddr(v_object)))) {
		    Errors.error($str_alt1175$PARSE_SET_RESULT_EXPRESSION___S_i, v_object);
		}
	    }
	    {
		SubLObject expression = cadr(v_object);
		SubLObject set_result_expression = object.new_class_instance(CYBLACK_SET_RESULT_EXPRESSION);
		cyblack_posting_action_expression_set_posting_reference_expression_method(set_result_expression, copy_tree(expression));
		if (NIL != within_stimulation_cond) {
		    {
			SubLObject defks_body = $cyblack_current_defks_body$.getDynamicValue(thread);
			if (NIL != defks_body) {
			    cyblack_defks_body_register_posting_expression_method(defks_body, set_result_expression);
			}
		    }
		}
		return set_result_expression;
	    }
	}
    }

    public static final SubLObject parse_return_expression(SubLObject v_object, SubLObject within_stimulation_cond) {
	if (within_stimulation_cond == UNPROVIDED) {
	    within_stimulation_cond = T;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!(((v_object.isCons() && (v_object.first() == $RETURN)) && v_object.rest().isCons()) && (NIL == cddr(v_object)))) {
		    Errors.error($str_alt1176$PARSE_RETURN_EXPRESSION___S_is_no, v_object);
		}
	    }
	    {
		SubLObject expression = cadr(v_object);
		SubLObject return_expression = object.new_class_instance(CYBLACK_RETURN_EXPRESSION);
		cyblack_posting_action_expression_set_posting_reference_expression_method(return_expression, copy_tree(expression));
		if (NIL != within_stimulation_cond) {
		    {
			SubLObject defks_body = $cyblack_current_defks_body$.getDynamicValue(thread);
			if (NIL != defks_body) {
			    cyblack_defks_body_register_posting_expression_method(defks_body, return_expression);
			}
		    }
		}
		return return_expression;
	    }
	}
    }

    public static final SubLObject parse_reset_action_expression(SubLObject v_object, SubLObject within_stimulation_cond) {
	if (within_stimulation_cond == UNPROVIDED) {
	    within_stimulation_cond = T;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!((((v_object.isCons() && (v_object.first() == $RESET)) && v_object.rest().isCons()) && cadr(v_object).isList()) && (NIL == cddr(v_object)))) {
		    Errors.error($str_alt1177$PARSE_RESET_ACTION_EXPRESSION___S, v_object);
		}
	    }
	    {
		SubLObject expression = cadr(v_object);
		SubLObject reset_action_expression = object.new_class_instance(CYBLACK_RESET_ACTION_EXPRESSION);
		cyblack_reset_action_expression_set_destination_list_method(reset_action_expression, expression);
		if (NIL != within_stimulation_cond) {
		    {
			SubLObject defks_body = $cyblack_current_defks_body$.getDynamicValue(thread);
			if (NIL != defks_body) {
			    cyblack_defks_body_register_posting_expression_method(defks_body, reset_action_expression);
			}
		    }
		}
		return reset_action_expression;
	    }
	}
    }

    public static final SubLObject parse_error_expression(SubLObject v_object, SubLObject within_stimulation_cond) {
	if (within_stimulation_cond == UNPROVIDED) {
	    within_stimulation_cond = T;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!(((v_object.isCons() && (v_object.first() == $ERROR)) && v_object.rest().isCons()) && cddr(v_object).isList())) {
		    Errors.error($str_alt1178$PARSE_ERROR_EXPRESSION___S_is_not, v_object);
		}
	    }
	    {
		SubLObject string_expression = cadr(v_object);
		SubLObject error_args = cddr(v_object);
		SubLObject error_expression = object.new_class_instance(CYBLACK_ERROR_EXPRESSION);
		cyblack_error_expression_set_error_string_method(error_expression, string_expression);
		cyblack_error_expression_set_error_args_method(error_expression, error_args);
		if (NIL != within_stimulation_cond) {
		    {
			SubLObject defks_body = $cyblack_current_defks_body$.getDynamicValue(thread);
			if (NIL != defks_body) {
			    cyblack_defks_body_register_posting_expression_method(defks_body, error_expression);
			}
		    }
		}
		return error_expression;
	    }
	}
    }

    public static final SubLObject parse_halt_expression(SubLObject v_object, SubLObject within_stimulation_cond) {
	if (within_stimulation_cond == UNPROVIDED) {
	    within_stimulation_cond = T;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (!((v_object.isCons() && (v_object.first() == $HALT)) && (NIL == v_object.rest()))) {
		    Errors.error($str_alt1179$PARSE_HALT_EXPRESSION___S_is_not_, v_object);
		}
	    }
	    {
		SubLObject halt_expression = object.new_class_instance(CYBLACK_HALT_EXPRESSION);
		if (NIL != within_stimulation_cond) {
		    {
			SubLObject defks_body = $cyblack_current_defks_body$.getDynamicValue(thread);
			if (NIL != defks_body) {
			    cyblack_defks_body_register_posting_expression_method(defks_body, halt_expression);
			}
		    }
		}
		return halt_expression;
	    }
	}
    }

    public static final SubLObject get_cyblack_ks_factory_added_declarations_for_ks_class(SubLObject cyblack_ks_factory) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_ks_factory, SEVENTEEN_INTEGER, ADDED_DECLARATIONS_FOR_KS_CLASS);
    }

    public static final SubLObject set_cyblack_ks_factory_added_declarations_for_ks_class(SubLObject cyblack_ks_factory, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_ks_factory, value, SEVENTEEN_INTEGER, ADDED_DECLARATIONS_FOR_KS_CLASS);
    }

    public static final SubLObject get_cyblack_ks_factory_port_id(SubLObject cyblack_ks_factory) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_ks_factory, SIXTEEN_INTEGER, PORT_ID);
    }

    public static final SubLObject set_cyblack_ks_factory_port_id(SubLObject cyblack_ks_factory, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_ks_factory, value, SIXTEEN_INTEGER, PORT_ID);
    }

    public static final SubLObject get_cyblack_ks_factory_external_module_name(SubLObject cyblack_ks_factory) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_ks_factory, FIFTEEN_INTEGER, EXTERNAL_MODULE_NAME);
    }

    public static final SubLObject set_cyblack_ks_factory_external_module_name(SubLObject cyblack_ks_factory, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_ks_factory, value, FIFTEEN_INTEGER, EXTERNAL_MODULE_NAME);
    }

    public static final SubLObject get_cyblack_ks_factory_parsed_body(SubLObject cyblack_ks_factory) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_ks_factory, FOURTEEN_INTEGER, PARSED_BODY);
    }

    public static final SubLObject set_cyblack_ks_factory_parsed_body(SubLObject cyblack_ks_factory, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_ks_factory, value, FOURTEEN_INTEGER, PARSED_BODY);
    }

    public static final SubLObject get_cyblack_ks_factory_unparsed_body(SubLObject cyblack_ks_factory) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_ks_factory, THIRTEEN_INTEGER, UNPARSED_BODY);
    }

    public static final SubLObject set_cyblack_ks_factory_unparsed_body(SubLObject cyblack_ks_factory, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_ks_factory, value, THIRTEEN_INTEGER, UNPARSED_BODY);
    }

    public static final SubLObject get_cyblack_ks_factory_parser_function(SubLObject cyblack_ks_factory) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_ks_factory, TWELVE_INTEGER, PARSER_FUNCTION);
    }

    public static final SubLObject set_cyblack_ks_factory_parser_function(SubLObject cyblack_ks_factory, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_ks_factory, value, TWELVE_INTEGER, PARSER_FUNCTION);
    }

    public static final SubLObject get_cyblack_ks_factory_precondition_pattern(SubLObject cyblack_ks_factory) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_ks_factory, ELEVEN_INTEGER, PRECONDITION_PATTERN);
    }

    public static final SubLObject set_cyblack_ks_factory_precondition_pattern(SubLObject cyblack_ks_factory, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_ks_factory, value, ELEVEN_INTEGER, PRECONDITION_PATTERN);
    }

    public static final SubLObject get_cyblack_ks_factory_interface_names(SubLObject cyblack_ks_factory) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_ks_factory, TEN_INTEGER, INTERFACE_NAMES);
    }

    public static final SubLObject set_cyblack_ks_factory_interface_names(SubLObject cyblack_ks_factory, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_ks_factory, value, TEN_INTEGER, INTERFACE_NAMES);
    }

    public static final SubLObject get_cyblack_ks_factory_super_ksi_name(SubLObject cyblack_ks_factory) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_ks_factory, NINE_INTEGER, SUPER_KSI_NAME);
    }

    public static final SubLObject set_cyblack_ks_factory_super_ksi_name(SubLObject cyblack_ks_factory, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_ks_factory, value, NINE_INTEGER, SUPER_KSI_NAME);
    }

    public static final SubLObject get_cyblack_ks_factory_ksi_name(SubLObject cyblack_ks_factory) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_ks_factory, EIGHT_INTEGER, KSI_NAME);
    }

    public static final SubLObject set_cyblack_ks_factory_ksi_name(SubLObject cyblack_ks_factory, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_ks_factory, value, EIGHT_INTEGER, KSI_NAME);
    }

    public static final SubLObject get_cyblack_ks_factory_super_proposal_name(SubLObject cyblack_ks_factory) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_ks_factory, SEVEN_INTEGER, SUPER_PROPOSAL_NAME);
    }

    public static final SubLObject set_cyblack_ks_factory_super_proposal_name(SubLObject cyblack_ks_factory, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_ks_factory, value, SEVEN_INTEGER, SUPER_PROPOSAL_NAME);
    }

    public static final SubLObject get_cyblack_ks_factory_proposal_name(SubLObject cyblack_ks_factory) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_ks_factory, SIX_INTEGER, PROPOSAL_NAME);
    }

    public static final SubLObject set_cyblack_ks_factory_proposal_name(SubLObject cyblack_ks_factory, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_ks_factory, value, SIX_INTEGER, PROPOSAL_NAME);
    }

    public static final SubLObject get_cyblack_ks_factory_super_ks_name(SubLObject cyblack_ks_factory) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_ks_factory, FIVE_INTEGER, SUPER_KS_NAME);
    }

    public static final SubLObject set_cyblack_ks_factory_super_ks_name(SubLObject cyblack_ks_factory, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_ks_factory, value, FIVE_INTEGER, SUPER_KS_NAME);
    }

    public static final SubLObject get_cyblack_ks_factory_super_ks_root_name(SubLObject cyblack_ks_factory) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_ks_factory, FOUR_INTEGER, SUPER_KS_ROOT_NAME);
    }

    public static final SubLObject set_cyblack_ks_factory_super_ks_root_name(SubLObject cyblack_ks_factory, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_ks_factory, value, FOUR_INTEGER, SUPER_KS_ROOT_NAME);
    }

    public static final SubLObject get_cyblack_ks_factory_ks_name(SubLObject cyblack_ks_factory) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_ks_factory, THREE_INTEGER, KS_NAME);
    }

    public static final SubLObject set_cyblack_ks_factory_ks_name(SubLObject cyblack_ks_factory, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_ks_factory, value, THREE_INTEGER, KS_NAME);
    }

    public static final SubLObject get_cyblack_ks_factory_ks_root_name(SubLObject cyblack_ks_factory) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_ks_factory, TWO_INTEGER, KS_ROOT_NAME);
    }

    public static final SubLObject set_cyblack_ks_factory_ks_root_name(SubLObject cyblack_ks_factory, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_ks_factory, value, TWO_INTEGER, KS_ROOT_NAME);
    }

    public static final SubLObject get_cyblack_ks_factory_assistant(SubLObject cyblack_ks_factory) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_ks_factory, ONE_INTEGER, ASSISTANT);
    }

    public static final SubLObject set_cyblack_ks_factory_assistant(SubLObject cyblack_ks_factory, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_ks_factory, value, ONE_INTEGER, ASSISTANT);
    }

    public static final SubLObject get_cyblack_ks_factory_external_p(SubLObject cyblack_ks_factory) {
	{
	    SubLObject v_class = subloop_structures.instance_class(cyblack_ks_factory);
	    SubLObject slot = slots.slot_assoc(EXTERNAL_P, subloop_structures.class_compiled_instance_boolean_slot_access_alist(v_class));
	    instances.instances_access_check_instance_slot(v_class, cyblack_ks_factory, slot);
	}
	return classes.ldb_test($int$4097, subloop_structures.instance_boolean_slots(cyblack_ks_factory));
    }

    public static final SubLObject set_cyblack_ks_factory_external_p(SubLObject cyblack_ks_factory, SubLObject value) {
	{
	    SubLObject v_class = subloop_structures.instance_class(cyblack_ks_factory);
	    SubLObject slot = slots.slot_assoc(EXTERNAL_P, subloop_structures.class_compiled_instance_boolean_slot_access_alist(v_class));
	    instances.instances_access_check_instance_slot(v_class, cyblack_ks_factory, slot);
	}
	subloop_structures._csetf_instance_boolean_slots(cyblack_ks_factory, bytes.dpb(NIL != value ? ((SubLObject) (ONE_INTEGER)) : ZERO_INTEGER, $int$4097, subloop_structures.instance_boolean_slots(cyblack_ks_factory)));
	return value;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_ks_factory_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_ks_factory_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, EXTERNAL_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, ASSISTANT, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, KS_ROOT_NAME, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, KS_NAME, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, SUPER_KS_ROOT_NAME, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, SUPER_KS_NAME, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, PROPOSAL_NAME, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, SUPER_PROPOSAL_NAME, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, KSI_NAME, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, SUPER_KSI_NAME, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, INTERFACE_NAMES, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, PRECONDITION_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, PARSER_FUNCTION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, UNPARSED_BODY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, PARSED_BODY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, EXTERNAL_MODULE_NAME, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, PORT_ID, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_KS_FACTORY, ADDED_DECLARATIONS_FOR_KS_CLASS, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_ks_factory_p(SubLObject cyblack_ks_factory) {
	return classes.subloop_instanceof_class(cyblack_ks_factory, CYBLACK_KS_FACTORY);
    }

    public static final SubLObject cyblack_ks_factory_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject parsed_body = get_cyblack_ks_factory_parsed_body(self);
	    SubLObject unparsed_body = get_cyblack_ks_factory_unparsed_body(self);
	    SubLObject parser_function = get_cyblack_ks_factory_parser_function(self);
	    SubLObject precondition_pattern = get_cyblack_ks_factory_precondition_pattern(self);
	    SubLObject interface_names = get_cyblack_ks_factory_interface_names(self);
	    SubLObject super_ksi_name = get_cyblack_ks_factory_super_ksi_name(self);
	    SubLObject ksi_name = get_cyblack_ks_factory_ksi_name(self);
	    SubLObject super_proposal_name = get_cyblack_ks_factory_super_proposal_name(self);
	    SubLObject proposal_name = get_cyblack_ks_factory_proposal_name(self);
	    SubLObject super_ks_name = get_cyblack_ks_factory_super_ks_name(self);
	    SubLObject super_ks_root_name = get_cyblack_ks_factory_super_ks_root_name(self);
	    SubLObject ks_name = get_cyblack_ks_factory_ks_name(self);
	    SubLObject ks_root_name = get_cyblack_ks_factory_ks_root_name(self);
	    SubLObject assistant = get_cyblack_ks_factory_assistant(self);
	    SubLObject external_p = get_cyblack_ks_factory_external_p(self);
	    try {
		try {
		    object.object_initialize_method(self);
		    assistant = NIL;
		    ks_root_name = NIL;
		    ks_name = NIL;
		    super_ks_root_name = NIL;
		    super_ks_name = NIL;
		    proposal_name = NIL;
		    super_proposal_name = NIL;
		    ksi_name = NIL;
		    super_ksi_name = NIL;
		    interface_names = NIL;
		    precondition_pattern = NIL;
		    parser_function = NIL;
		    unparsed_body = NIL;
		    parsed_body = NIL;
		    external_p = NIL;
		    sublisp_throw($sym1200$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_parsed_body(self, parsed_body);
			    set_cyblack_ks_factory_unparsed_body(self, unparsed_body);
			    set_cyblack_ks_factory_parser_function(self, parser_function);
			    set_cyblack_ks_factory_precondition_pattern(self, precondition_pattern);
			    set_cyblack_ks_factory_interface_names(self, interface_names);
			    set_cyblack_ks_factory_super_ksi_name(self, super_ksi_name);
			    set_cyblack_ks_factory_ksi_name(self, ksi_name);
			    set_cyblack_ks_factory_super_proposal_name(self, super_proposal_name);
			    set_cyblack_ks_factory_proposal_name(self, proposal_name);
			    set_cyblack_ks_factory_super_ks_name(self, super_ks_name);
			    set_cyblack_ks_factory_super_ks_root_name(self, super_ks_root_name);
			    set_cyblack_ks_factory_ks_name(self, ks_name);
			    set_cyblack_ks_factory_ks_root_name(self, ks_root_name);
			    set_cyblack_ks_factory_assistant(self, assistant);
			    set_cyblack_ks_factory_external_p(self, external_p);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1200$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_assistant_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject assistant = get_cyblack_ks_factory_assistant(self);
	    try {
		try {
		    sublisp_throw($sym1204$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, assistant);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_assistant(self, assistant);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1204$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_assistant_method(SubLObject self, SubLObject new_assistant) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
		SubLObject assistant = get_cyblack_ks_factory_assistant(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == new_assistant) || (NIL != cyblack_auto_generated_ks_assistant_p(new_assistant)))) {
				Errors.error($str_alt1209$_SET_ASSISTANT__S____S_is_not_an_, self, new_assistant);
			    }
			}
			assistant = new_assistant;
			sublisp_throw($sym1208$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, new_assistant);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_ks_factory_assistant(self, assistant);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1208$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
		}
		return catch_var_for_cyblack_ks_factory_method;
	    }
	}
    }

    public static final SubLObject cyblack_ks_factory_get_unifier_class_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject assistant = get_cyblack_ks_factory_assistant(self);
	    try {
		try {
		    if (NIL != assistant) {
			sublisp_throw($sym1213$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, cyblack_unifier_class_given_description(cyblack_auto_generated_ks_assistant_get_unification_types_method(assistant)));
		    }
		    sublisp_throw($sym1213$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, CYBLACK_UNIFICATION_ROBOT);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_assistant(self, assistant);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1213$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_post_at_will_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject assistant = get_cyblack_ks_factory_assistant(self);
	    try {
		try {
		    if (NIL != assistant) {
			sublisp_throw($sym1216$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, cyblack_auto_generated_ks_assistant_get_post_at_will_method(assistant));
		    }
		    sublisp_throw($sym1216$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, NIL);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_assistant(self, assistant);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1216$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_post_at_will_method(SubLObject self, SubLObject new_state) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject assistant = get_cyblack_ks_factory_assistant(self);
	    try {
		try {
		    if (NIL != assistant) {
			sublisp_throw($sym1219$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, cyblack_auto_generated_ks_assistant_set_post_at_will_method(assistant, new_state));
		    }
		    sublisp_throw($sym1219$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, NIL);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_assistant(self, assistant);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1219$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_ks_root_name_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject ks_root_name = get_cyblack_ks_factory_ks_root_name(self);
	    try {
		try {
		    sublisp_throw($sym1223$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, ks_root_name);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_ks_root_name(self, ks_root_name);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1223$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_ks_root_name_method(SubLObject self, SubLObject new_ks_root_name) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
		SubLObject ksi_name = get_cyblack_ks_factory_ksi_name(self);
		SubLObject proposal_name = get_cyblack_ks_factory_proposal_name(self);
		SubLObject ks_name = get_cyblack_ks_factory_ks_name(self);
		SubLObject ks_root_name = get_cyblack_ks_factory_ks_root_name(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!new_ks_root_name.isSymbol()) {
				Errors.error($str_alt1229$_SET_KS_ROOT_NAME__S____S_is_not_, new_ks_root_name);
			    }
			}
			ks_root_name = new_ks_root_name;
			if (NIL != new_ks_root_name) {
			    ks_name = intern(cconcatenate(symbol_name(new_ks_root_name), $str_alt1230$_KS), UNPROVIDED);
			    proposal_name = intern(cconcatenate(symbol_name(new_ks_root_name), $str_alt1231$_PROPOSAL), UNPROVIDED);
			    ksi_name = intern(cconcatenate(symbol_name(new_ks_root_name), $str_alt1232$_KSI), UNPROVIDED);
			}
			sublisp_throw($sym1228$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, new_ks_root_name);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_ks_factory_ksi_name(self, ksi_name);
				set_cyblack_ks_factory_proposal_name(self, proposal_name);
				set_cyblack_ks_factory_ks_name(self, ks_name);
				set_cyblack_ks_factory_ks_root_name(self, ks_root_name);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1228$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
		}
		return catch_var_for_cyblack_ks_factory_method;
	    }
	}
    }

    public static final SubLObject cyblack_ks_factory_get_ks_name_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject ks_name = get_cyblack_ks_factory_ks_name(self);
	    try {
		try {
		    sublisp_throw($sym1236$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, ks_name);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_ks_name(self, ks_name);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1236$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_ks_name_method(SubLObject self, SubLObject new_ks_name) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
		SubLObject ks_name = get_cyblack_ks_factory_ks_name(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!new_ks_name.isSymbol()) {
				Errors.error($str_alt1242$_SET_KS_NAME__S____S_is_not_a_val, self, new_ks_name);
			    }
			}
			ks_name = new_ks_name;
			sublisp_throw($sym1241$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, new_ks_name);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_ks_factory_ks_name(self, ks_name);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1241$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
		}
		return catch_var_for_cyblack_ks_factory_method;
	    }
	}
    }

    public static final SubLObject cyblack_ks_factory_get_super_ks_root_name_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject super_ks_root_name = get_cyblack_ks_factory_super_ks_root_name(self);
	    try {
		try {
		    sublisp_throw($sym1246$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, super_ks_root_name);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_super_ks_root_name(self, super_ks_root_name);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1246$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_super_ks_root_name_method(SubLObject self, SubLObject new_super_ks_root_name) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
		SubLObject super_ksi_name = get_cyblack_ks_factory_super_ksi_name(self);
		SubLObject super_proposal_name = get_cyblack_ks_factory_super_proposal_name(self);
		SubLObject super_ks_name = get_cyblack_ks_factory_super_ks_name(self);
		SubLObject super_ks_root_name = get_cyblack_ks_factory_super_ks_root_name(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!new_super_ks_root_name.isSymbol()) {
				Errors.error($str_alt1252$_SET_SUPER_KS_ROOT_NAME__S____S_i, self, new_super_ks_root_name);
			    }
			}
			super_ks_root_name = new_super_ks_root_name;
			if (NIL != new_super_ks_root_name) {
			    super_ks_name = intern(cconcatenate(symbol_name(new_super_ks_root_name), $str_alt1230$_KS), UNPROVIDED);
			    super_proposal_name = intern(cconcatenate(symbol_name(new_super_ks_root_name), $str_alt1231$_PROPOSAL), UNPROVIDED);
			    super_ksi_name = intern(cconcatenate(symbol_name(new_super_ks_root_name), $str_alt1232$_KSI), UNPROVIDED);
			}
			sublisp_throw($sym1251$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, new_super_ks_root_name);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_ks_factory_super_ksi_name(self, super_ksi_name);
				set_cyblack_ks_factory_super_proposal_name(self, super_proposal_name);
				set_cyblack_ks_factory_super_ks_name(self, super_ks_name);
				set_cyblack_ks_factory_super_ks_root_name(self, super_ks_root_name);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1251$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
		}
		return catch_var_for_cyblack_ks_factory_method;
	    }
	}
    }

    public static final SubLObject cyblack_ks_factory_get_super_ks_name_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject super_ks_name = get_cyblack_ks_factory_super_ks_name(self);
	    try {
		try {
		    sublisp_throw($sym1256$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, super_ks_name);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_super_ks_name(self, super_ks_name);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1256$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_super_ks_name_method(SubLObject self, SubLObject new_super_ks_name) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
		SubLObject super_ks_name = get_cyblack_ks_factory_super_ks_name(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!new_super_ks_name.isSymbol()) {
				Errors.error($str_alt1262$_SET_SUPER_KS_NAME__S____S_is_not, self, new_super_ks_name);
			    }
			}
			super_ks_name = new_super_ks_name;
			sublisp_throw($sym1261$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, new_super_ks_name);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_ks_factory_super_ks_name(self, super_ks_name);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1261$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
		}
		return catch_var_for_cyblack_ks_factory_method;
	    }
	}
    }

    public static final SubLObject cyblack_ks_factory_get_proposal_name_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject proposal_name = get_cyblack_ks_factory_proposal_name(self);
	    try {
		try {
		    sublisp_throw($sym1266$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, proposal_name);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_proposal_name(self, proposal_name);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1266$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_proposal_name_method(SubLObject self, SubLObject new_proposal_name) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
		SubLObject proposal_name = get_cyblack_ks_factory_proposal_name(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!new_proposal_name.isSymbol()) {
				Errors.error($str_alt1272$_SET_PROPOSAL_NAME__S____S_is_not, self, new_proposal_name);
			    }
			}
			proposal_name = new_proposal_name;
			sublisp_throw($sym1271$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, new_proposal_name);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_ks_factory_proposal_name(self, proposal_name);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1271$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
		}
		return catch_var_for_cyblack_ks_factory_method;
	    }
	}
    }

    public static final SubLObject cyblack_ks_factory_get_super_proposal_name_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject super_proposal_name = get_cyblack_ks_factory_super_proposal_name(self);
	    try {
		try {
		    sublisp_throw($sym1276$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, super_proposal_name);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_super_proposal_name(self, super_proposal_name);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1276$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_super_proposal_name_method(SubLObject self, SubLObject new_super_proposal_name) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
		SubLObject super_proposal_name = get_cyblack_ks_factory_super_proposal_name(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!new_super_proposal_name.isSymbol()) {
				Errors.error($str_alt1282$_SET_SUPER_PROPOSAL_NAME__S____S_, self, new_super_proposal_name);
			    }
			}
			super_proposal_name = new_super_proposal_name;
			sublisp_throw($sym1281$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, new_super_proposal_name);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_ks_factory_super_proposal_name(self, super_proposal_name);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1281$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
		}
		return catch_var_for_cyblack_ks_factory_method;
	    }
	}
    }

    public static final SubLObject cyblack_ks_factory_get_ksi_name_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject ksi_name = get_cyblack_ks_factory_ksi_name(self);
	    try {
		try {
		    sublisp_throw($sym1286$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, ksi_name);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_ksi_name(self, ksi_name);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1286$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_ksi_name_method(SubLObject self, SubLObject new_ksi_name) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
		SubLObject ksi_name = get_cyblack_ks_factory_ksi_name(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!new_ksi_name.isSymbol()) {
				Errors.error($str_alt1292$_SET_KSI_NAME__S____S_is_not_a_va, new_ksi_name);
			    }
			}
			ksi_name = new_ksi_name;
			sublisp_throw($sym1291$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, new_ksi_name);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_ks_factory_ksi_name(self, ksi_name);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1291$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
		}
		return catch_var_for_cyblack_ks_factory_method;
	    }
	}
    }

    public static final SubLObject cyblack_ks_factory_get_super_ksi_name_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject super_ksi_name = get_cyblack_ks_factory_super_ksi_name(self);
	    try {
		try {
		    sublisp_throw($sym1296$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, super_ksi_name);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_super_ksi_name(self, super_ksi_name);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1296$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_super_ksi_name_method(SubLObject self, SubLObject new_super_ksi_name) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
		SubLObject super_ksi_name = get_cyblack_ks_factory_super_ksi_name(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!new_super_ksi_name.isSymbol()) {
				Errors.error($str_alt1302$_SET_SUPER_KSI_NAME__S____S_is_no, self, new_super_ksi_name);
			    }
			}
			super_ksi_name = new_super_ksi_name;
			sublisp_throw($sym1301$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, self);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_ks_factory_super_ksi_name(self, super_ksi_name);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1301$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
		}
		return catch_var_for_cyblack_ks_factory_method;
	    }
	}
    }

    public static final SubLObject cyblack_ks_factory_get_interface_names_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject interface_names = get_cyblack_ks_factory_interface_names(self);
	    try {
		try {
		    sublisp_throw($sym1306$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, interface_names);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_interface_names(self, interface_names);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1306$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_interface_names_method(SubLObject self, SubLObject new_interface_names) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
		SubLObject interface_names = get_cyblack_ks_factory_interface_names(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!new_interface_names.isList()) {
				Errors.error($str_alt1312$_SET_INTERFACE_NAMES__S____S_is_n, self, new_interface_names);
			    }
			}
			{
			    SubLObject cdolist_list_var = new_interface_names;
			    SubLObject interface_name = NIL;
			    for (interface_name = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), interface_name = cdolist_list_var.first()) {
				if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				    if (!((NIL != interface_name) && interface_name.isSymbol())) {
					Errors.error($str_alt1313$_SET_INTERFACE_NAMES__S____S_is_n, self, interface_name);
				    }
				}
			    }
			}
			interface_names = copy_list(new_interface_names);
			sublisp_throw($sym1311$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, new_interface_names);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_ks_factory_interface_names(self, interface_names);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1311$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
		}
		return catch_var_for_cyblack_ks_factory_method;
	    }
	}
    }

    public static final SubLObject cyblack_ks_factory_get_precondition_pattern_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject precondition_pattern = get_cyblack_ks_factory_precondition_pattern(self);
	    try {
		try {
		    sublisp_throw($sym1315$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, precondition_pattern);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_precondition_pattern(self, precondition_pattern);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1315$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_precondition_pattern_method(SubLObject self, SubLObject new_precondition_pattern) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
		SubLObject precondition_pattern = get_cyblack_ks_factory_precondition_pattern(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!(new_precondition_pattern.isCons() && ((new_precondition_pattern.first() == $KS_ARGS) || (new_precondition_pattern.first() == $MONITOR)))) {
				Errors.error($str_alt1321$_SET_PRECONDITION_PATTERN__S____S, self, new_precondition_pattern);
			    }
			}
			precondition_pattern = new_precondition_pattern;
			sublisp_throw($sym1318$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, new_precondition_pattern);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_ks_factory_precondition_pattern(self, precondition_pattern);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1318$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
		}
		return catch_var_for_cyblack_ks_factory_method;
	    }
	}
    }

    public static final SubLObject cyblack_ks_factory_get_precondition_pattern_vars_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject precondition_pattern = get_cyblack_ks_factory_precondition_pattern(self);
	    try {
		try {
		    sublisp_throw($sym1325$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, cyblack_precondition_pattern.cyblack_get_parameters(precondition_pattern));
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_precondition_pattern(self, precondition_pattern);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1325$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_parser_function_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject parser_function = get_cyblack_ks_factory_parser_function(self);
	    try {
		try {
		    sublisp_throw($sym1329$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, parser_function);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_parser_function(self, parser_function);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1329$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_parser_function_method(SubLObject self, SubLObject new_parser_function) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
		SubLObject parser_function = get_cyblack_ks_factory_parser_function(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!new_parser_function.isSymbol()) {
				Errors.error($str_alt1335$_SET_PARSER_FUNCTION__S___A_parse, self, new_parser_function);
			    }
			}
			parser_function = new_parser_function;
			sublisp_throw($sym1334$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, new_parser_function);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_ks_factory_parser_function(self, parser_function);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1334$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
		}
		return catch_var_for_cyblack_ks_factory_method;
	    }
	}
    }

    public static final SubLObject cyblack_ks_factory_get_unparsed_body_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject unparsed_body = get_cyblack_ks_factory_unparsed_body(self);
	    try {
		try {
		    sublisp_throw($sym1339$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, unparsed_body);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_unparsed_body(self, unparsed_body);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1339$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_unparsed_body_method(SubLObject self, SubLObject new_unparsed_body) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject unparsed_body = get_cyblack_ks_factory_unparsed_body(self);
	    try {
		try {
		    unparsed_body = new_unparsed_body;
		    cyblack_ks_factory_set_parsed_body_method(self, parse_cyblack_defks_body(new_unparsed_body));
		    sublisp_throw($sym1344$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, new_unparsed_body);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_unparsed_body(self, unparsed_body);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1344$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_parsed_body_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject parsed_body = get_cyblack_ks_factory_parsed_body(self);
	    try {
		try {
		    sublisp_throw($sym1348$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, parsed_body);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_parsed_body(self, parsed_body);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1348$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_parsed_body_method(SubLObject self, SubLObject new_parsed_body) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
		SubLObject parsed_body = get_cyblack_ks_factory_parsed_body(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == new_parsed_body) || (NIL != cyblack_defks_body_p(new_parsed_body)))) {
				Errors.error($str_alt1354$_SET_PARSED_BODY__S____S_is_not_a, self, new_parsed_body);
			    }
			}
			parsed_body = new_parsed_body;
			sublisp_throw($sym1353$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, new_parsed_body);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_ks_factory_parsed_body(self, parsed_body);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1353$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
		}
		return catch_var_for_cyblack_ks_factory_method;
	    }
	}
    }

    public static final SubLObject cyblack_ks_factory_get_ks_declaration_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject added_declarations_for_ks_class = get_cyblack_ks_factory_added_declarations_for_ks_class(self);
	    SubLObject interface_names = get_cyblack_ks_factory_interface_names(self);
	    SubLObject super_ks_name = get_cyblack_ks_factory_super_ks_name(self);
	    SubLObject ks_name = get_cyblack_ks_factory_ks_name(self);
	    SubLObject external_p = get_cyblack_ks_factory_external_p(self);
	    try {
		try {
		    if (NIL != external_p) {
			sublisp_throw($sym1358$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, listS(DEFINE_CLASS, list(ks_name, $EXTENDS, super_ks_name, $IMPLEMENTS, copy_list(interface_names)), append(union($list_alt1362, added_declarations_for_ks_class, symbol_function(EQUAL), UNPROVIDED), NIL)));
		    } else {
			sublisp_throw($sym1358$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, listS(DEFINE_CLASS, list(ks_name, $EXTENDS, super_ks_name, $IMPLEMENTS, copy_list(interface_names)), append(union($list_alt1363, added_declarations_for_ks_class, symbol_function(EQUAL), UNPROVIDED), NIL)));
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_added_declarations_for_ks_class(self, added_declarations_for_ks_class);
			    set_cyblack_ks_factory_interface_names(self, interface_names);
			    set_cyblack_ks_factory_super_ks_name(self, super_ks_name);
			    set_cyblack_ks_factory_ks_name(self, ks_name);
			    set_cyblack_ks_factory_external_p(self, external_p);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1358$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_ks_initialize_definition_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject precondition_pattern = get_cyblack_ks_factory_precondition_pattern(self);
	    SubLObject ks_name = get_cyblack_ks_factory_ks_name(self);
	    try {
		try {
		    {
			SubLObject result = listS(DEF_INSTANCE_METHOD, new SubLObject[] { listS(INITIALIZE, ks_name, $list_alt858), NIL, $list_alt1368, list(SET_POST_AT_WILL, SELF, methods.funcall_instance_method_with_0_args(self, GET_POST_AT_WILL)),
				list(SET_UNIFICATION_ROBOT_CLASS, SELF, list(QUOTE, methods.funcall_instance_method_with_0_args(self, GET_UNIFIER_CLASS))), list(SET_PRECONDITION_PATTERN, SELF, list(QUOTE, copy_tree(precondition_pattern))), $list_alt1369 });
			sublisp_throw($sym1367$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, result);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_precondition_pattern(self, precondition_pattern);
			    set_cyblack_ks_factory_ks_name(self, ks_name);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1367$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_ks_on_startup_definition_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject parsed_body = get_cyblack_ks_factory_parsed_body(self);
	    SubLObject assistant = get_cyblack_ks_factory_assistant(self);
	    try {
		try {
		    if ((NIL != parsed_body) && (NIL != assistant)) {
			sublisp_throw($sym1373$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, cyblack_defks_body_compile_to_on_startup_method_method(parsed_body, assistant));
		    }
		    sublisp_throw($sym1373$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, NIL);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_parsed_body(self, parsed_body);
			    set_cyblack_ks_factory_assistant(self, assistant);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1373$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_ks_create_proposals_definition_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject parsed_body = get_cyblack_ks_factory_parsed_body(self);
	    SubLObject assistant = get_cyblack_ks_factory_assistant(self);
	    try {
		try {
		    if ((NIL != parsed_body) && (NIL != assistant)) {
			sublisp_throw($sym1377$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, cyblack_defks_body_compile_to_create_proposals_method_method(parsed_body, assistant));
		    }
		    sublisp_throw($sym1377$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, NIL);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_parsed_body(self, parsed_body);
			    set_cyblack_ks_factory_assistant(self, assistant);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1377$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_ks_generate_ksi_definition_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject ksi_name = get_cyblack_ks_factory_ksi_name(self);
	    SubLObject proposal_name = get_cyblack_ks_factory_proposal_name(self);
	    SubLObject ks_name = get_cyblack_ks_factory_ks_name(self);
	    SubLObject external_p = get_cyblack_ks_factory_external_p(self);
	    try {
		try {
		    if (NIL != external_p) {
			sublisp_throw($sym1381$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, list(DEF_INSTANCE_METHOD, listS(GENERATE_KSI, ks_name, $list_alt267), $list_alt304, listS(CLET, list(list(KSI, list(NEW_CLASS_INSTANCE, list(QUOTE, ksi_name)))), $list_alt1384)));
		    } else {
			sublisp_throw($sym1381$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, list(DEF_INSTANCE_METHOD, listS(GENERATE_KSI, ks_name, $list_alt267), $list_alt304,
				listS(CLET, list(list(KSI, list(NEW_CLASS_INSTANCE, list(QUOTE, ksi_name)))), list(INLINE_METHOD, list(SET_KSI_INDEX, ksi_name), KSI, listS(INLINE_METHOD, list(GET_PROPOSAL_INDEX, proposal_name), $list_alt304)), $list_alt1384)));
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_ksi_name(self, ksi_name);
			    set_cyblack_ks_factory_proposal_name(self, proposal_name);
			    set_cyblack_ks_factory_ks_name(self, ks_name);
			    set_cyblack_ks_factory_external_p(self, external_p);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1381$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_ks_method_definitions_method(SubLObject self) {
	return append(NIL != cyblack_ks_factory_has_added_declaration_for_method_p_method(self, INITIALIZE) ? ((SubLObject) (NIL)) : list(cyblack_ks_factory_get_ks_initialize_definition_method(self)),
		NIL != cyblack_ks_factory_has_added_declaration_for_method_p_method(self, ON_STARTUP) ? ((SubLObject) (NIL)) : list(cyblack_ks_factory_get_ks_on_startup_definition_method(self)),
		NIL != cyblack_ks_factory_has_added_declaration_for_method_p_method(self, CREATE_PROPOSALS) ? ((SubLObject) (NIL)) : list(cyblack_ks_factory_get_ks_create_proposals_definition_method(self)),
		NIL != cyblack_ks_factory_has_added_declaration_for_method_p_method(self, GENERATE_KSI) ? ((SubLObject) (NIL)) : list(cyblack_ks_factory_get_ks_generate_ksi_definition_method(self)));
    }

    public static final SubLObject cyblack_ks_factory_get_proposal_declaration_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject super_proposal_name = get_cyblack_ks_factory_super_proposal_name(self);
	    SubLObject proposal_name = get_cyblack_ks_factory_proposal_name(self);
	    try {
		try {
		    sublisp_throw($sym1391$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, listS(DEFINE_CLASS, list(proposal_name, $EXTENDS, super_proposal_name), $list_alt1392));
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_super_proposal_name(self, super_proposal_name);
			    set_cyblack_ks_factory_proposal_name(self, proposal_name);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1391$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_proposal_initialize_definition_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject proposal_name = get_cyblack_ks_factory_proposal_name(self);
	    try {
		try {
		    sublisp_throw($sym1396$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, listS(DEF_INSTANCE_METHOD, listS(INITIALIZE, proposal_name, $list_alt98), $list_alt1397));
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_proposal_name(self, proposal_name);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1396$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_proposal_generate_ksi_definition_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject proposal_name = get_cyblack_ks_factory_proposal_name(self);
	    try {
		try {
		    cyblack_utilities.cyblack_silence(proposal_name);
		    sublisp_throw($sym1401$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, listS(DEF_INSTANCE_METHOD, listS(GENERATE_KSI, proposal_name, $list_alt51), $list_alt1402));
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_proposal_name(self, proposal_name);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1401$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_proposal_method_definitions_method(SubLObject self) {
	return list(cyblack_ks_factory_get_proposal_initialize_definition_method(self), cyblack_ks_factory_get_proposal_generate_ksi_definition_method(self));
    }

    public static final SubLObject cyblack_ks_factory_get_ksi_declaration_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject super_ksi_name = get_cyblack_ks_factory_super_ksi_name(self);
	    SubLObject ksi_name = get_cyblack_ks_factory_ksi_name(self);
	    SubLObject external_p = get_cyblack_ks_factory_external_p(self);
	    try {
		try {
		    if (NIL != external_p) {
			sublisp_throw($sym1409$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, listS(DEFINE_CLASS, list(ksi_name, $EXTENDS, super_ksi_name), $list_alt1410));
		    } else {
			sublisp_throw($sym1409$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, listS(DEFINE_CLASS, list(ksi_name, $EXTENDS, super_ksi_name), $list_alt1411));
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_super_ksi_name(self, super_ksi_name);
			    set_cyblack_ks_factory_ksi_name(self, ksi_name);
			    set_cyblack_ks_factory_external_p(self, external_p);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1409$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_ksi_initialize_definition_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject ksi_name = get_cyblack_ks_factory_ksi_name(self);
	    try {
		try {
		    sublisp_throw($sym1415$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, listS(DEF_INSTANCE_METHOD, listS(INITIALIZE, ksi_name, $list_alt98), $list_alt1397));
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_ksi_name(self, ksi_name);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1415$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_ksi_create_posting_definition_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject ksi_name = get_cyblack_ks_factory_ksi_name(self);
	    try {
		try {
		    sublisp_throw($sym1419$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, listS(DEF_INSTANCE_METHOD, listS(CREATE_POSTING, ksi_name, $list_alt98), $list_alt1420));
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_ksi_name(self, ksi_name);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1419$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_ksi_execute_definition_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject parsed_body = get_cyblack_ks_factory_parsed_body(self);
	    SubLObject assistant = get_cyblack_ks_factory_assistant(self);
	    try {
		try {
		    if ((NIL != parsed_body) && (NIL != assistant)) {
			sublisp_throw($sym1424$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, cyblack_defks_body_compile_to_execute_method_method(parsed_body, assistant));
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_parsed_body(self, parsed_body);
			    set_cyblack_ks_factory_assistant(self, assistant);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1424$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_ksi_method_definitions_method(SubLObject self) {
	{
	    SubLObject initialize_def = cyblack_ks_factory_get_ksi_initialize_definition_method(self);
	    SubLObject create_posting_def = cyblack_ks_factory_get_ksi_create_posting_definition_method(self);
	    SubLObject execute_def = cyblack_ks_factory_get_ksi_execute_definition_method(self);
	    return NIL != initialize_def
		    ? ((SubLObject) (NIL != create_posting_def ? ((SubLObject) (NIL != execute_def ? ((SubLObject) (list(initialize_def, create_posting_def, execute_def))) : list(initialize_def, create_posting_def)))
			    : NIL != execute_def ? ((SubLObject) (list(initialize_def, execute_def))) : list(initialize_def)))
		    : NIL != create_posting_def ? ((SubLObject) (NIL != execute_def ? ((SubLObject) (list(create_posting_def, execute_def))) : list(create_posting_def))) : NIL != execute_def ? ((SubLObject) (list(execute_def))) : NIL;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_external_module_name_method(SubLObject self) {
	{
	    SubLObject external_module_name = get_cyblack_ks_factory_external_module_name(self);
	    return external_module_name;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_external_module_name_method(SubLObject self, SubLObject new_external_module_name) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject external_module_name = get_cyblack_ks_factory_external_module_name(self);
	    try {
		try {
		    external_module_name = new_external_module_name;
		    sublisp_throw($sym1431$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, new_external_module_name);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_external_module_name(self, external_module_name);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1431$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_port_id_method(SubLObject self) {
	{
	    SubLObject port_id = get_cyblack_ks_factory_port_id(self);
	    return port_id;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_port_id_method(SubLObject self, SubLObject new_port_id) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject port_id = get_cyblack_ks_factory_port_id(self);
	    try {
		try {
		    port_id = new_port_id;
		    sublisp_throw($sym1434$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, new_port_id);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_port_id(self, port_id);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1434$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_is_external_method(SubLObject self) {
	{
	    SubLObject external_p = get_cyblack_ks_factory_external_p(self);
	    return external_p;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_external_method(SubLObject self, SubLObject new_state) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject external_p = get_cyblack_ks_factory_external_p(self);
	    try {
		try {
		    external_p = new_state;
		    sublisp_throw($sym1441$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, new_state);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_external_p(self, external_p);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1441$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_get_added_declarations_for_ks_class_method(SubLObject self) {
	{
	    SubLObject added_declarations_for_ks_class = get_cyblack_ks_factory_added_declarations_for_ks_class(self);
	    return added_declarations_for_ks_class;
	}
    }

    public static final SubLObject cyblack_ks_factory_set_added_declarations_for_ks_class_method(SubLObject self, SubLObject new_decls) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject added_declarations_for_ks_class = get_cyblack_ks_factory_added_declarations_for_ks_class(self);
	    try {
		try {
		    added_declarations_for_ks_class = copy_tree(new_decls);
		    sublisp_throw($sym1449$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, new_decls);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_added_declarations_for_ks_class(self, added_declarations_for_ks_class);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1449$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_add_declaration_for_ks_class_method(SubLObject self, SubLObject decl) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject added_declarations_for_ks_class = get_cyblack_ks_factory_added_declarations_for_ks_class(self);
	    try {
		try {
		    added_declarations_for_ks_class = nconc(added_declarations_for_ks_class, list(copy_tree(decl)));
		    sublisp_throw($sym1454$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, decl);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_added_declarations_for_ks_class(self, added_declarations_for_ks_class);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1454$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject cyblack_ks_factory_has_added_declaration_for_method_p_method(SubLObject self, SubLObject method_name) {
	{
	    SubLObject catch_var_for_cyblack_ks_factory_method = NIL;
	    SubLObject added_declarations_for_ks_class = get_cyblack_ks_factory_added_declarations_for_ks_class(self);
	    try {
		try {
		    {
			SubLObject cdolist_list_var = added_declarations_for_ks_class;
			SubLObject added_decl = NIL;
			for (added_decl = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), added_decl = cdolist_list_var.first()) {
			    if (((added_decl.isCons() && ((added_decl.first() == DEF_INSTANCE_METHOD) || (added_decl.first() == DEF_CLASS_METHOD))) && added_decl.rest().isCons()) && (cadr(added_decl) == method_name)) {
				sublisp_throw($sym1459$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, T);
			    }
			}
			sublisp_throw($sym1459$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD, NIL);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_ks_factory_added_declarations_for_ks_class(self, added_declarations_for_ks_class);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_ks_factory_method = Errors.handleThrowable(ccatch_env_var, $sym1459$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD);
	    }
	    return catch_var_for_cyblack_ks_factory_method;
	}
    }

    public static final SubLObject ks_name_root_p(SubLObject v_object) {
	return makeBoolean((NIL != v_object) && v_object.isSymbol());
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_internal_base_ks_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, AUTO_GENERATED_KS_ASSISTENT, NIL);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_internal_base_ks_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, QUA_LIST_ELEMENT_SELF_DELETION_MODE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, IS_A_MONITOR, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, POST_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, ADD_PANELS_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, REMOVE_PANELS_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, ADD_POSTING_CLASSES_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, ADD_KNOWLEDGE_SOURCES_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, REMOVE_KNOWLEDGE_SOURCES_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, LINKED_TO_PANELS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, HAS_CACHED_DOMAIN_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, TRACE_BASIC_METHODS, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, LOCK, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, OWNER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, QUA_LIST_ELEMENT_PARENT_LINKS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, AUTHOR_NAMES, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, KNOWLEDGE_SOURCE_BATTERY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, UNCOMPILED_PRECONDITION_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, UNIFICATION_ROBOT_CLASS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, CACHED_DOMAIN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, RANGE_SET, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_INTERNAL_KNOWLEDGE_SOURCE, PRECONDITION_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_INTERNAL_KNOWLEDGE_SOURCE, PRECONDITION_DATATYPES, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, BINDING_LIST, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_internal_base_ks_p(SubLObject cyblack_internal_base_ks) {
	return classes.subloop_instanceof_class(cyblack_internal_base_ks, CYBLACK_INTERNAL_BASE_KS);
    }

    /**
     * Override me to provide actions before startup.
     */
    public static final SubLObject cyblack_internal_base_ks_before_startup_method(SubLObject self) {
	return NIL;
    }

    public static final SubLObject cyblack_internal_base_ks_on_startup_method(SubLObject self) {
	methods.funcall_instance_method_with_0_args(self, BEFORE_STARTUP);
	cyblack_ks.cyblack_internal_knowledge_source_on_startup_method(self);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_internal_base_proposal_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, AUTO_GENERATED_KS_ASSISTENT, NIL);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_internal_base_proposal_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, QUA_LIST_ELEMENT_SELF_DELETION_MODE, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, LOCK, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, OWNER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, AGENDA, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, PROPOSED_CONTRIBUTIONS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, PROPOSED_REMOVALS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, EXECUTION_MODE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, VERIFIED, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, QUA_LIST_ELEMENT_PARENT_LINKS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_INTERNAL_PROPOSAL, KNOWLEDGE_SOURCE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_INTERNAL_PROPOSAL, ACTIVATION_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_INTERNAL_PROPOSAL, REASONS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_INTERNAL_PROPOSAL, TIMESTAMP, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, BINDING_LIST, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, PROPOSAL_INDEX, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, TRACE_BASIC_METHODS, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_internal_base_proposal_p(SubLObject cyblack_internal_base_proposal) {
	return classes.subloop_instanceof_class(cyblack_internal_base_proposal, CYBLACK_INTERNAL_BASE_PROPOSAL);
    }

    public static final SubLObject cyblack_internal_base_proposal_initialize_method(SubLObject self) {
	cyblack_auto_generated_internal_proposal_initialize_method(self);
	return self;
    }

    public static final SubLObject cyblack_internal_base_proposal_generate_ksi_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_internal_base_proposal_method = NIL;
	    SubLObject activation_pattern = cyblack_proposal.get_cyblack_internal_proposal_activation_pattern(self);
	    try {
		try {
		    {
			SubLObject new_ksi = cyblack_proposal.cyblack_basic_proposal_generate_ksi_method(self);
			SubLObject new_activation_pattern = (NIL != activation_pattern) ? ((SubLObject) (methods.funcall_instance_method_with_0_args(activation_pattern, CLONE))) : NIL;
			if (NIL != new_ksi) {
			    methods.funcall_instance_method_with_1_args(new_ksi, SET_ACTIVATION_PATTERN, new_activation_pattern);
			}
			sublisp_throw($sym1477$OUTER_CATCH_FOR_CYBLACK_INTERNAL_BASE_PROPOSAL_METHOD, new_ksi);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    cyblack_proposal.set_cyblack_internal_proposal_activation_pattern(self, activation_pattern);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_internal_base_proposal_method = Errors.handleThrowable(ccatch_env_var, $sym1477$OUTER_CATCH_FOR_CYBLACK_INTERNAL_BASE_PROPOSAL_METHOD);
	    }
	    return catch_var_for_cyblack_internal_base_proposal_method;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_internal_base_ksi_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, AUTO_GENERATED_KS_ASSISTENT, NIL);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_internal_base_ksi_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, IS_PROPOSAL_AUTO_GENERATED, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KSI, ACTIVATION_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KSI, KNOWLEDGE_SOURCE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KSI, EXECUTION_MODE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, KSI_INDEX, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, TRACE_BASIC_METHODS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, PROPOSAL, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_internal_base_ksi_p(SubLObject cyblack_internal_base_ksi) {
	return classes.subloop_instanceof_class(cyblack_internal_base_ksi, CYBLACK_INTERNAL_BASE_KSI);
    }

    public static final SubLObject cyblack_internal_base_ksi_initialize_method(SubLObject self) {
	cyblack_auto_generated_internal_ksi_initialize_method(self);
	return self;
    }

    public static final SubLObject cyblack_internal_base_ksi_create_posting_method(SubLObject self, SubLObject datatype) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_internal_base_ksi_method = NIL;
		SubLObject activation_pattern = cyblack_ksi.get_cyblack_basic_ksi_activation_pattern(self);
		SubLObject application = cyblack_object.get_cyblack_object_application(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_datatype.cyblack_datatype_p(datatype)) {
				Errors.error($str_alt1486$_CREATE_POSTING__S____S_is_not_an, self, datatype);
			    }
			}
			{
			    SubLObject posting = cyblack_datatype.cyblack_datatype_create_posting(datatype);
			    cyblack_posting_dispatch_functions.cyblack_posting_set_application(posting, application);
			    if (NIL != activation_pattern) {
				cyblack_posting_dispatch_functions.cyblack_posting_set_activation_pattern(posting, methods.funcall_instance_method_with_0_args(activation_pattern, CLONE));
			    }
			    cyblack_posting_dispatch_functions.cyblack_posting_set_ksi(posting, self);
			    sublisp_throw($sym1485$OUTER_CATCH_FOR_CYBLACK_INTERNAL_BASE_KSI_METHOD, posting);
			}
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				cyblack_ksi.set_cyblack_basic_ksi_activation_pattern(self, activation_pattern);
				cyblack_object.set_cyblack_object_application(self, application);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_internal_base_ksi_method = Errors.handleThrowable(ccatch_env_var, $sym1485$OUTER_CATCH_FOR_CYBLACK_INTERNAL_BASE_KSI_METHOD);
		}
		return catch_var_for_cyblack_internal_base_ksi_method;
	    }
	}
    }

    public static final SubLObject cyblack_internal_base_ksi_execute_method(SubLObject self) {
	return NIL;
    }

    public static final SubLObject cyblack_create_defks_assistant(SubLObject root_name) {
	{
	    SubLObject internal_base_assistant = object.new_class_instance(CYBLACK_AUTO_GENERATED_KS_ASSISTANT);
	    cyblack_set_ks_assistant(root_name, internal_base_assistant);
	    return internal_base_assistant;
	}
    }

    public static final SubLObject cyblack_create_defks_assistant_extended(SubLObject root_name, SubLObject ks_class, SubLObject proposal_class, SubLObject ksi_class, SubLObject precondition_pattern) {
	{
	    SubLObject internal_base_assistant = cyblack_create_defks_assistant(root_name);
	    cyblack_auto_generated_ks_assistant_set_knowledge_source_class_method(internal_base_assistant, ks_class);
	    cyblack_auto_generated_ks_assistant_set_proposal_class_method(internal_base_assistant, proposal_class);
	    cyblack_auto_generated_ks_assistant_set_knowledge_source_instantiation_class_method(internal_base_assistant, ksi_class);
	    cyblack_auto_generated_ks_assistant_set_precondition_pattern_method(internal_base_assistant, precondition_pattern);
	    cyblack_auto_generated_internal_knowledge_source_set_auto_generated_ks_assistant_method(ks_class, internal_base_assistant);
	    cyblack_auto_generated_internal_proposal_set_auto_generated_ks_assistant_method(proposal_class, internal_base_assistant);
	    cyblack_auto_generated_internal_ksi_set_auto_generated_ks_assistant_method(ksi_class, internal_base_assistant);
	    return internal_base_assistant;
	}
    }

    public static final SubLObject cyblack_defks_initialize() {
	return cyblack_create_defks_assistant_extended(CYBLACK_INTERNAL_BASE, CYBLACK_INTERNAL_BASE_KS, CYBLACK_INTERNAL_BASE_PROPOSAL, CYBLACK_INTERNAL_BASE_KSI, NIL);
    }

    // defvar
    public static final SubLSymbol $factory$ = makeSymbol("*FACTORY*");

    public static final SubLObject cyblack_defks_strip_body(SubLObject body) {
	{
	    SubLObject tool_body = NIL;
	    SubLObject code_body = NIL;
	    SubLObject cdolist_list_var = body;
	    SubLObject form = NIL;
	    for (form = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), form = cdolist_list_var.first()) {
		if (form.isCons() && form.first().isKeyword()) {
		    tool_body = cons(form, tool_body);
		} else {
		    code_body = cons(form, code_body);
		}
	    }
	    return values(nreverse(tool_body), nreverse(code_body));
	}
    }

    public static final SubLObject cyblack_defks_get_class_body_decls(SubLObject body) {
	{
	    SubLObject decls = NIL;
	    SubLObject list_expression = body;
	    if (NIL == list_expression) {
		decls = NIL;
	    } else if (list_expression.isAtom()) {
		decls = list(list_expression);
	    } else if (NIL == list_expression.rest()) {
		{
		    SubLObject decl = list_expression.first();
		    decls = (decl.isCons()) ? ((SubLObject) (NIL != member(decl.first(), $list_alt1490, UNPROVIDED, UNPROVIDED) ? ((SubLObject) (list(decl))) : (NIL != decl.first()) && decl.first().isSymbol() ? ((SubLObject) (list(decl))) : NIL)) : NIL;
		}
	    } else {
		{
		    SubLObject tail_cons = NIL;
		    SubLObject result = NIL;
		    decls = NIL;
		    {
			SubLObject cdolist_list_var = list_expression;
			SubLObject decl = NIL;
			for (decl = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), decl = cdolist_list_var.first()) {
			    result = (decl.isCons()) ? ((SubLObject) (NIL != member(decl.first(), $list_alt1490, UNPROVIDED, UNPROVIDED) ? ((SubLObject) (list(decl))) : (NIL != decl.first()) && decl.first().isSymbol() ? ((SubLObject) (list(decl))) : NIL)) : NIL;
			    if (NIL != result) {
				if (NIL != tail_cons) {
				    rplacd(tail_cons, result);
				    tail_cons = last(result, UNPROVIDED);
				} else {
				    decls = (decl.isCons()) ? ((SubLObject) (NIL != member(decl.first(), $list_alt1490, UNPROVIDED, UNPROVIDED) ? ((SubLObject) (list(decl))) : (NIL != decl.first()) && decl.first().isSymbol() ? ((SubLObject) (list(decl))) : NIL)) : NIL;
				    tail_cons = last(decls, UNPROVIDED);
				}
			    }
			}
		    }
		}
	    }

	    return decls;
	}
    }

    public static final SubLObject cyblack_expand_knowledge_source_definition(SubLObject ks_name_root, SubLObject options_plist, SubLObject body) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == ks_name_root_p(ks_name_root)) {
		    Errors.error($str_alt1491$_DEFINE_KNOWLEDGE_SOURCE___S_is_n, ks_name_root);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_ks_def_options_plist_p(options_plist)) {
		    Errors.error($str_alt1492$_DEFINE_KNOWLEDGE_SOURCE___S_is_n, options_plist);
		}
	    }
	    thread.resetMultipleValues();
	    {
		SubLObject tool_body = cyblack_defks_strip_body(body);
		SubLObject code_body = thread.secondMultipleValue();
		thread.resetMultipleValues();
		{
		    SubLObject factory = object.new_class_instance(CYBLACK_KS_FACTORY);
		    SubLObject super_root_name = getf(options_plist, $EXTENDS, UNPROVIDED);
		    SubLObject implements_list = getf(options_plist, $IMPLEMENTS, UNPROVIDED);
		    SubLObject precondition_pattern = getf(options_plist, $PRECONDITION, UNPROVIDED);
		    SubLObject post_at_will = getf(options_plist, $POST_AT_WILL, UNPROVIDED);
		    SubLObject class_body_decls = cyblack_defks_get_class_body_decls(code_body);
		    if (NIL == super_root_name) {
			super_root_name = CYBLACK_INTERNAL_BASE;
		    }
		    $factory$.setDynamicValue(factory, thread);
		    cyblack_ks_factory_set_ks_root_name_method(factory, ks_name_root);
		    cyblack_ks_factory_set_super_ks_root_name_method(factory, super_root_name);
		    cyblack_ks_factory_set_interface_names_method(factory, implements_list);
		    cyblack_ks_factory_set_precondition_pattern_method(factory, precondition_pattern);
		    cyblack_ks_factory_set_unparsed_body_method(factory, tool_body);
		    cyblack_ks_factory_set_post_at_will_method(factory, post_at_will);
		    cyblack_ks_factory_set_assistant_method(factory, cyblack_create_defks_assistant_extended(ks_name_root, cyblack_ks_factory_get_ks_name_method(factory), cyblack_ks_factory_get_proposal_name_method(factory), cyblack_ks_factory_get_ksi_name_method(factory), precondition_pattern));
		    cyblack_ks_factory_set_added_declarations_for_ks_class_method(factory, class_body_decls);
		    return listS(PROGN,
			    list(CYBLACK_CREATE_DEFKS_ASSISTANT_EXTENDED, list(QUOTE, ks_name_root), list(QUOTE, cyblack_ks_factory_get_ks_name_method(factory)), list(QUOTE, cyblack_ks_factory_get_proposal_name_method(factory)), list(QUOTE, cyblack_ks_factory_get_ksi_name_method(factory)),
				    list(QUOTE, copy_tree(precondition_pattern))),
			    cyblack_ks_factory_get_ks_declaration_method(factory), append(cyblack_ks_factory_get_ks_method_definitions_method(factory), bq_cons(cyblack_ks_factory_get_proposal_declaration_method(factory),
				    append(cyblack_ks_factory_get_proposal_method_definitions_method(factory), bq_cons(cyblack_ks_factory_get_ksi_declaration_method(factory), append(cyblack_ks_factory_get_ksi_method_definitions_method(factory), NIL))))));
		}
	    }
	}
    }

    public static final SubLObject define_knowledge_source(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt1496);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject ks_name_root = NIL;
		    SubLObject options_plist = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt1496);
		    ks_name_root = current.first();
		    current = current.rest();
		    options_plist = current;
		    current = temp;
		    {
			SubLObject body = current;
			return cyblack_expand_knowledge_source_definition(ks_name_root, options_plist, body);
		    }
		}
	    }
	}
    }

    public static final SubLObject get_cyblack_auto_generated_external_knowledge_source_trace_basic_methods(SubLObject cyblack_auto_generated_external_knowledge_source) {
	{
	    SubLObject v_class = subloop_structures.instance_class(cyblack_auto_generated_external_knowledge_source);
	    SubLObject slot = slots.slot_assoc(TRACE_BASIC_METHODS, subloop_structures.class_compiled_instance_boolean_slot_access_alist(v_class));
	    instances.instances_access_check_instance_slot(v_class, cyblack_auto_generated_external_knowledge_source, slot);
	}
	return classes.ldb_test($int$4109, subloop_structures.instance_boolean_slots(cyblack_auto_generated_external_knowledge_source));
    }

    public static final SubLObject set_cyblack_auto_generated_external_knowledge_source_trace_basic_methods(SubLObject cyblack_auto_generated_external_knowledge_source, SubLObject value) {
	{
	    SubLObject v_class = subloop_structures.instance_class(cyblack_auto_generated_external_knowledge_source);
	    SubLObject slot = slots.slot_assoc(TRACE_BASIC_METHODS, subloop_structures.class_compiled_instance_boolean_slot_access_alist(v_class));
	    instances.instances_access_check_instance_slot(v_class, cyblack_auto_generated_external_knowledge_source, slot);
	}
	subloop_structures._csetf_instance_boolean_slots(cyblack_auto_generated_external_knowledge_source, bytes.dpb(NIL != value ? ((SubLObject) (ONE_INTEGER)) : ZERO_INTEGER, $int$4109, subloop_structures.instance_boolean_slots(cyblack_auto_generated_external_knowledge_source)));
	return value;
    }

    public static final SubLObject get_cyblack_auto_generated_external_knowledge_source_auto_generated_ks_assistent(SubLObject cyblack_auto_generated_external_knowledge_source) {
	{
	    SubLObject v_class = (cyblack_auto_generated_external_knowledge_source.isSymbol()) ? ((SubLObject) (classes.classes_retrieve_class(cyblack_auto_generated_external_knowledge_source)))
		    : NIL != subloop_structures.class_p(cyblack_auto_generated_external_knowledge_source) ? ((SubLObject) (cyblack_auto_generated_external_knowledge_source))
			    : NIL != subloop_structures.instance_p(cyblack_auto_generated_external_knowledge_source) ? ((SubLObject) (subloop_structures.instance_class(cyblack_auto_generated_external_knowledge_source))) : NIL;
	    if (NIL != v_class) {
		classes.classes_access_check_class_slot(v_class, slots.slot_assoc(AUTO_GENERATED_KS_ASSISTENT, subloop_structures.class_compiled_class_slot_access_alist(v_class)));
		return aref(subloop_structures.class_any_slots(v_class), ONE_INTEGER);
	    }
	    return NIL;
	}
    }

    public static final SubLObject set_cyblack_auto_generated_external_knowledge_source_auto_generated_ks_assistent(SubLObject cyblack_auto_generated_external_knowledge_source, SubLObject value) {
	{
	    SubLObject v_class = (cyblack_auto_generated_external_knowledge_source.isSymbol()) ? ((SubLObject) (classes.classes_retrieve_class(cyblack_auto_generated_external_knowledge_source)))
		    : NIL != subloop_structures.class_p(cyblack_auto_generated_external_knowledge_source) ? ((SubLObject) (cyblack_auto_generated_external_knowledge_source))
			    : NIL != subloop_structures.instance_p(cyblack_auto_generated_external_knowledge_source) ? ((SubLObject) (subloop_structures.instance_class(cyblack_auto_generated_external_knowledge_source))) : NIL;
	    if (NIL != v_class) {
		classes.classes_access_check_class_slot(v_class, slots.slot_assoc(AUTO_GENERATED_KS_ASSISTENT, subloop_structures.class_compiled_class_slot_access_alist(v_class)));
		return set_aref(subloop_structures.class_any_slots(v_class), ONE_INTEGER, value);
	    }
	    return NIL;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_auto_generated_external_knowledge_source_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, AUTO_GENERATED_KS_ASSISTENT, NIL);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_auto_generated_external_knowledge_source_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, QUA_LIST_ELEMENT_SELF_DELETION_MODE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, IS_A_MONITOR, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, POST_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, ADD_PANELS_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, REMOVE_PANELS_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, ADD_POSTING_CLASSES_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, ADD_KNOWLEDGE_SOURCES_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, REMOVE_KNOWLEDGE_SOURCES_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, LINKED_TO_PANELS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, HAS_CACHED_DOMAIN_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, WAITING_ON_LINK_CALLBACK, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, REJECTED, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, TRACE_BASIC_METHODS, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, LOCK, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, OWNER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, QUA_LIST_ELEMENT_PARENT_LINKS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, AUTHOR_NAMES, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, KNOWLEDGE_SOURCE_BATTERY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, UNCOMPILED_PRECONDITION_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, UNIFICATION_ROBOT_CLASS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, CACHED_DOMAIN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, RANGE_SET, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, NAME, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, EXTERNAL_KNOWLEDGE_SOURCE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, CACHED_MESSAGE_BROKER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, CACHED_PROPOSAL_CLASS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, PROPOSAL_CLASS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, INVITATION_TRANSACTION_ID, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, GUID_AS_STRING, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, REJECTION_EXCUSES, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, PORT_ID, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_auto_generated_external_knowledge_source_p(SubLObject cyblack_auto_generated_external_knowledge_source) {
	return classes.subloop_instanceof_class(cyblack_auto_generated_external_knowledge_source, CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE);
    }

    public static final SubLObject cyblack_auto_generated_external_knowledge_source_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_auto_generated_external_knowledge_source_method = NIL;
	    SubLObject auto_generated_ks_assistent = get_cyblack_auto_generated_external_knowledge_source_auto_generated_ks_assistent(self);
	    SubLObject unification_robot_class = cyblack_ks.get_cyblack_basic_knowledge_source_unification_robot_class(self);
	    SubLObject trace_basic_methods = get_cyblack_auto_generated_external_knowledge_source_trace_basic_methods(self);
	    try {
		try {
		    cyblack_ks.cyblack_external_knowledge_source_initialize_method(self);
		    unification_robot_class = CYBLACK_CONSTRAINED_UNIFICATION_ROBOT_SATISFIED_BY_ANY_SOLUTION;
		    auto_generated_ks_assistent = NIL;
		    trace_basic_methods = NIL;
		    sublisp_throw($sym1514$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_auto_generated_external_knowledge_source_auto_generated_ks_assistent(self, auto_generated_ks_assistent);
			    cyblack_ks.set_cyblack_basic_knowledge_source_unification_robot_class(self, unification_robot_class);
			    set_cyblack_auto_generated_external_knowledge_source_trace_basic_methods(self, trace_basic_methods);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_auto_generated_external_knowledge_source_method = Errors.handleThrowable(ccatch_env_var, $sym1514$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_);
	    }
	    return catch_var_for_cyblack_auto_generated_external_knowledge_source_method;
	}
    }

    public static final SubLObject cyblack_auto_generated_external_knowledge_source_get_auto_generated_ks_assistant_method(SubLObject self) {
	{
	    SubLObject auto_generated_ks_assistent = get_cyblack_auto_generated_external_knowledge_source_auto_generated_ks_assistent(self);
	    return auto_generated_ks_assistent;
	}
    }

    public static final SubLObject cyblack_auto_generated_external_knowledge_source_set_auto_generated_ks_assistant_method(SubLObject self, SubLObject new_assistant) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_external_knowledge_source_method = NIL;
		SubLObject auto_generated_ks_assistent = get_cyblack_auto_generated_external_knowledge_source_auto_generated_ks_assistent(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == new_assistant) || (NIL != cyblack_auto_generated_ks_assistant_p(new_assistant)))) {
				Errors.error($str_alt274$_SET_AUTO_GENERATED_KS_ASSISTANT_, self, new_assistant);
			    }
			}
			auto_generated_ks_assistent = new_assistant;
			sublisp_throw($sym1517$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_, new_assistant);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_external_knowledge_source_auto_generated_ks_assistent(self, auto_generated_ks_assistent);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_external_knowledge_source_method = Errors.handleThrowable(ccatch_env_var, $sym1517$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_);
		}
		return catch_var_for_cyblack_auto_generated_external_knowledge_source_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_external_knowledge_source_set_trace_state_method(SubLObject self, SubLObject new_state) {
	{
	    SubLObject catch_var_for_cyblack_auto_generated_external_knowledge_source_method = NIL;
	    SubLObject trace_basic_methods = get_cyblack_auto_generated_external_knowledge_source_trace_basic_methods(self);
	    try {
		try {
		    trace_basic_methods = new_state;
		    sublisp_throw($sym1519$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_, new_state);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_auto_generated_external_knowledge_source_trace_basic_methods(self, trace_basic_methods);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_auto_generated_external_knowledge_source_method = Errors.handleThrowable(ccatch_env_var, $sym1519$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_);
	    }
	    return catch_var_for_cyblack_auto_generated_external_knowledge_source_method;
	}
    }

    public static final SubLObject cyblack_auto_generated_external_knowledge_source_new_proposal_method(SubLObject self, SubLObject knowledge_source) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_external_knowledge_source_method = NIL;
		SubLObject proposal_class = cyblack_ks.get_cyblack_external_knowledge_source_proposal_class(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_ks.cyblack_knowledge_source_p(knowledge_source)) {
				Errors.error($str_alt293$_NEW_PROPOSAL__S____S_is_not_an_i, self, knowledge_source);
			    }
			}
			{
			    SubLObject assistant = cyblack_auto_generated_external_knowledge_source_get_auto_generated_ks_assistant_method(self);
			    SubLObject ks_application = methods.funcall_instance_method_with_0_args(knowledge_source, GET_APPLICATION);
			    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				if (NIL == assistant) {
				    Errors.error($str_alt285$_NEW_KNOWLEDGE_SOURCE__S___No_aut, self);
				}
			    }
			    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				if (NIL == cyblack_application.cyblack_application_p(ks_application)) {
				    Errors.error($str_alt295$_NEW_KNOWLEDGE_SOURCE__S___The_va, self, ks_application, knowledge_source);
				}
			    }
			    {
				SubLObject proposal_class_6 = cyblack_auto_generated_ks_assistant_get_proposal_class_method(assistant);
				SubLObject knowledge_source_class = cyblack_auto_generated_ks_assistant_get_knowledge_source_class_method(assistant);
				if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				    if (NIL == instances.instance_of_p(knowledge_source, knowledge_source_class)) {
					Errors.error($str_alt296$_NEW_PROPOSAL__S___Illegal_use_of, self, knowledge_source, knowledge_source_class);
				    }
				}
				{
				    SubLObject proposal_instance = object.new_class_instance(proposal_class_6);
				    methods.funcall_instance_method_with_1_args(proposal_instance, SET_APPLICATION, ks_application);
				    methods.funcall_instance_method_with_1_args(proposal_instance, SET_KNOWLEDGE_SOURCE, knowledge_source);
				    methods.funcall_instance_method_with_1_args(proposal_instance, SET_EXECUTION_MODE, $SYNCHRONOUS);
				    methods.funcall_instance_method_with_1_args(proposal_instance, SET_AGENDA, methods.funcall_instance_method_with_0_args(ks_application, GET_AGENDA));
				    sublisp_throw($sym1521$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_, proposal_instance);
				}
			    }
			}
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				cyblack_ks.set_cyblack_external_knowledge_source_proposal_class(self, proposal_class);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_external_knowledge_source_method = Errors.handleThrowable(ccatch_env_var, $sym1521$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_);
		}
		return catch_var_for_cyblack_auto_generated_external_knowledge_source_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_external_knowledge_source_new_knowledge_source_method(SubLObject self, SubLObject new_application) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_external_knowledge_source_method = NIL;
		SubLObject unification_robot_class = cyblack_ks.get_cyblack_basic_knowledge_source_unification_robot_class(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == new_application) || (NIL != cyblack_application.cyblack_application_p(new_application)))) {
				Errors.error($str_alt284$_NEW_KNOWLEDGE_SOURCE__S____S_is_, self, new_application);
			    }
			}
			{
			    SubLObject assistant = cyblack_auto_generated_external_knowledge_source_get_auto_generated_ks_assistant_method(self);
			    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				if (NIL == assistant) {
				    Errors.error($str_alt285$_NEW_KNOWLEDGE_SOURCE__S___No_aut, self);
				}
			    }
			    {
				SubLObject knowledge_source_class = cyblack_auto_generated_ks_assistant_get_knowledge_source_class_method(assistant);
				SubLObject unification_types = cyblack_auto_generated_ks_assistant_get_unification_types_method(assistant);
				SubLObject unification_robot_class_7 = cyblack_unifier_class_given_description(unification_types);
				if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				    if (NIL == knowledge_source_class) {
					Errors.error($str_alt286$_NEW_KNOWLEDGE_SOURCE__S___The_au, self, knowledge_source_class);
				    }
				}
				{
				    SubLObject knowledge_source = object.new_class_instance(knowledge_source_class);
				    methods.funcall_instance_method_with_1_args(knowledge_source, SET_APPLICATION, new_application);
				    methods.funcall_instance_method_with_1_args(knowledge_source, SET_UNIFICATION_ROBOT_CLASS, unification_robot_class_7);
				    sublisp_throw($sym1524$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_, knowledge_source);
				}
			    }
			}
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				cyblack_ks.set_cyblack_basic_knowledge_source_unification_robot_class(self, unification_robot_class);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_external_knowledge_source_method = Errors.handleThrowable(ccatch_env_var, $sym1524$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_);
		}
		return catch_var_for_cyblack_auto_generated_external_knowledge_source_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_external_knowledge_source_new_ksi_method(SubLObject self, SubLObject proposal) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_external_knowledge_source_method = NIL;
		SubLObject proposal_class = cyblack_ks.get_cyblack_external_knowledge_source_proposal_class(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_proposal.cyblack_proposal_p(proposal)) {
				Errors.error($str_alt306$_NEW_KSI__S____S_is_not_a_valid_i, self, proposal);
			    }
			}
			{
			    SubLObject assistant = cyblack_auto_generated_external_knowledge_source_get_auto_generated_ks_assistant_method(self);
			    SubLObject proposal_application = methods.funcall_instance_method_with_0_args(proposal, GET_APPLICATION);
			    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				if (NIL == assistant) {
				    Errors.error($str_alt307$_NEW_KSI__S___No_auto_generated_k, self);
				}
			    }
			    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				if (NIL == cyblack_proposal.cyblack_proposal_p(proposal_application)) {
				    Errors.error($str_alt308$_NEW_KSI__S___The_value__S_associ, self, proposal_application, proposal);
				}
			    }
			    {
				SubLObject ksi_class = cyblack_auto_generated_ks_assistant_get_knowledge_source_instantiation_class_method(assistant);
				SubLObject proposal_class_8 = cyblack_auto_generated_ks_assistant_get_proposal_class_method(assistant);
				if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
				    if (NIL == instances.instance_of_p(proposal, proposal_class_8)) {
					Errors.error($str_alt309$_NEW_KSI__S___Illegal_use_of_NEW_, self, proposal, proposal_class_8);
				    }
				}
				{
				    SubLObject ksi_instance = object.new_class_instance(ksi_class);
				    SubLObject proposal_activation_pattern = methods.funcall_instance_method_with_0_args(proposal, GET_ACTIVATION_PATTERN);
				    methods.funcall_instance_method_with_1_args(ksi_instance, SET_APPLICATION, proposal_application);
				    methods.funcall_instance_method_with_1_args(ksi_instance, SET_EXECUTION_MODE, methods.funcall_instance_method_with_0_args(proposal, GET_EXECUTION_MODE));
				    methods.funcall_instance_method_with_1_args(ksi_instance, SET_ACTIVATION_PATTERN, NIL != proposal_activation_pattern ? ((SubLObject) (methods.funcall_instance_method_with_0_args(proposal_activation_pattern, CLONE))) : NIL);
				    sublisp_throw($sym1526$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_, ksi_instance);
				}
			    }
			}
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				cyblack_ks.set_cyblack_external_knowledge_source_proposal_class(self, proposal_class);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_external_knowledge_source_method = Errors.handleThrowable(ccatch_env_var, $sym1526$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_);
		}
		return catch_var_for_cyblack_auto_generated_external_knowledge_source_method;
	    }
	}
    }

    public static final SubLObject get_cyblack_auto_generated_external_proposal_trace_basic_methods(SubLObject cyblack_auto_generated_external_proposal) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_external_proposal, FOURTEEN_INTEGER, TRACE_BASIC_METHODS);
    }

    public static final SubLObject set_cyblack_auto_generated_external_proposal_trace_basic_methods(SubLObject cyblack_auto_generated_external_proposal, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_external_proposal, value, FOURTEEN_INTEGER, TRACE_BASIC_METHODS);
    }

    public static final SubLObject get_cyblack_auto_generated_external_proposal_auto_generated_ks_assistent(SubLObject cyblack_auto_generated_external_proposal) {
	{
	    SubLObject v_class = (cyblack_auto_generated_external_proposal.isSymbol()) ? ((SubLObject) (classes.classes_retrieve_class(cyblack_auto_generated_external_proposal)))
		    : NIL != subloop_structures.class_p(cyblack_auto_generated_external_proposal) ? ((SubLObject) (cyblack_auto_generated_external_proposal))
			    : NIL != subloop_structures.instance_p(cyblack_auto_generated_external_proposal) ? ((SubLObject) (subloop_structures.instance_class(cyblack_auto_generated_external_proposal))) : NIL;
	    if (NIL != v_class) {
		classes.classes_access_check_class_slot(v_class, slots.slot_assoc(AUTO_GENERATED_KS_ASSISTENT, subloop_structures.class_compiled_class_slot_access_alist(v_class)));
		return aref(subloop_structures.class_any_slots(v_class), ONE_INTEGER);
	    }
	    return NIL;
	}
    }

    public static final SubLObject set_cyblack_auto_generated_external_proposal_auto_generated_ks_assistent(SubLObject cyblack_auto_generated_external_proposal, SubLObject value) {
	{
	    SubLObject v_class = (cyblack_auto_generated_external_proposal.isSymbol()) ? ((SubLObject) (classes.classes_retrieve_class(cyblack_auto_generated_external_proposal)))
		    : NIL != subloop_structures.class_p(cyblack_auto_generated_external_proposal) ? ((SubLObject) (cyblack_auto_generated_external_proposal))
			    : NIL != subloop_structures.instance_p(cyblack_auto_generated_external_proposal) ? ((SubLObject) (subloop_structures.instance_class(cyblack_auto_generated_external_proposal))) : NIL;
	    if (NIL != v_class) {
		classes.classes_access_check_class_slot(v_class, slots.slot_assoc(AUTO_GENERATED_KS_ASSISTENT, subloop_structures.class_compiled_class_slot_access_alist(v_class)));
		return set_aref(subloop_structures.class_any_slots(v_class), ONE_INTEGER, value);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_external_proposal_set_proposal_index_method(SubLObject self, SubLObject new_index) {
	return NIL;
    }

    public static final SubLObject cyblack_auto_generated_external_proposal_get_proposal_index_method(SubLObject self) {
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_auto_generated_external_proposal_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, AUTO_GENERATED_KS_ASSISTENT, NIL);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_auto_generated_external_proposal_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, QUA_LIST_ELEMENT_SELF_DELETION_MODE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_PROPOSAL, ALREADY_RECONFIRMED, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, LOCK, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, OWNER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, AGENDA, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, PROPOSED_CONTRIBUTIONS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, PROPOSED_REMOVALS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, EXECUTION_MODE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, VERIFIED, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, QUA_LIST_ELEMENT_PARENT_LINKS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_PROPOSAL, EXTERNAL_PROPOSAL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_PROPOSAL, CACHED_KSI_CLASS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_PROPOSAL, KSI_CLASS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, TRACE_BASIC_METHODS, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_auto_generated_external_proposal_p(SubLObject cyblack_auto_generated_external_proposal) {
	return classes.subloop_instanceof_class(cyblack_auto_generated_external_proposal, CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL);
    }

    public static final SubLObject cyblack_auto_generated_external_proposal_initialize_method(SubLObject self) {
	cyblack_proposal.cyblack_external_proposal_initialize_method(self);
	return self;
    }

    public static final SubLObject cyblack_auto_generated_external_proposal_print_method(SubLObject self, SubLObject stream, SubLObject depth) {
	format(stream, $str_alt369$__PROPOSAL__S___KS__S_, subloop_structures.class_name(object.object_class_of_method(self)), cyblack_proposal.cyblack_external_proposal_get_knowledge_source_method(self));
	return self;
    }

    public static final SubLObject cyblack_auto_generated_external_proposal_get_auto_generated_ks_assistant_method(SubLObject self) {
	{
	    SubLObject assistant = NIL;
	    SubLObject cdolist_list_var = subloop_structures.class_compiled_inheritance_path(self);
	    SubLObject class_reference = NIL;
	    for (class_reference = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), class_reference = cdolist_list_var.first()) {
		if (NIL == classes.subclassp(class_reference, CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL)) {
		    return NIL;
		}
		assistant = cyblack_auto_generated_external_proposal_get_auto_generated_ks_assistant_method(class_reference);
		if (NIL != assistant) {
		    return assistant;
		}
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_external_proposal_set_auto_generated_ks_assistant_method(SubLObject self, SubLObject new_assistant) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_external_proposal_method = NIL;
		SubLObject auto_generated_ks_assistent = get_cyblack_auto_generated_external_proposal_auto_generated_ks_assistent(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == new_assistant) || (NIL != cyblack_auto_generated_ks_assistant_p(new_assistant)))) {
				Errors.error($str_alt274$_SET_AUTO_GENERATED_KS_ASSISTANT_, self, new_assistant);
			    }
			}
			auto_generated_ks_assistent = new_assistant;
			sublisp_throw($sym1544$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_METHOD, new_assistant);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_external_proposal_auto_generated_ks_assistent(self, auto_generated_ks_assistent);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_external_proposal_method = Errors.handleThrowable(ccatch_env_var, $sym1544$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_METHOD);
		}
		return catch_var_for_cyblack_auto_generated_external_proposal_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_external_proposal_set_trace_state_method(SubLObject self, SubLObject new_state) {
	{
	    SubLObject catch_var_for_cyblack_auto_generated_external_proposal_method = NIL;
	    SubLObject trace_basic_methods = get_cyblack_auto_generated_external_proposal_trace_basic_methods(self);
	    try {
		try {
		    trace_basic_methods = new_state;
		    sublisp_throw($sym1546$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_METHOD, new_state);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_auto_generated_external_proposal_trace_basic_methods(self, trace_basic_methods);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_auto_generated_external_proposal_method = Errors.handleThrowable(ccatch_env_var, $sym1546$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_METHOD);
	    }
	    return catch_var_for_cyblack_auto_generated_external_proposal_method;
	}
    }

    public static final SubLObject get_cyblack_auto_generated_external_ksi_proposal(SubLObject cyblack_auto_generated_external_ksi) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_external_ksi, SEVEN_INTEGER, PROPOSAL);
    }

    public static final SubLObject set_cyblack_auto_generated_external_ksi_proposal(SubLObject cyblack_auto_generated_external_ksi, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_external_ksi, value, SEVEN_INTEGER, PROPOSAL);
    }

    public static final SubLObject get_cyblack_auto_generated_external_ksi_trace_basic_methods(SubLObject cyblack_auto_generated_external_ksi) {
	return classes.subloop_get_access_protected_instance_slot(cyblack_auto_generated_external_ksi, SIX_INTEGER, TRACE_BASIC_METHODS);
    }

    public static final SubLObject set_cyblack_auto_generated_external_ksi_trace_basic_methods(SubLObject cyblack_auto_generated_external_ksi, SubLObject value) {
	return classes.subloop_set_access_protected_instance_slot(cyblack_auto_generated_external_ksi, value, SIX_INTEGER, TRACE_BASIC_METHODS);
    }

    public static final SubLObject get_cyblack_auto_generated_external_ksi_is_proposal_auto_generated(SubLObject cyblack_auto_generated_external_ksi) {
	{
	    SubLObject v_class = subloop_structures.instance_class(cyblack_auto_generated_external_ksi);
	    SubLObject slot = slots.slot_assoc(IS_PROPOSAL_AUTO_GENERATED, subloop_structures.class_compiled_instance_boolean_slot_access_alist(v_class));
	    instances.instances_access_check_instance_slot(v_class, cyblack_auto_generated_external_ksi, slot);
	}
	return classes.ldb_test($int$4097, subloop_structures.instance_boolean_slots(cyblack_auto_generated_external_ksi));
    }

    public static final SubLObject set_cyblack_auto_generated_external_ksi_is_proposal_auto_generated(SubLObject cyblack_auto_generated_external_ksi, SubLObject value) {
	{
	    SubLObject v_class = subloop_structures.instance_class(cyblack_auto_generated_external_ksi);
	    SubLObject slot = slots.slot_assoc(IS_PROPOSAL_AUTO_GENERATED, subloop_structures.class_compiled_instance_boolean_slot_access_alist(v_class));
	    instances.instances_access_check_instance_slot(v_class, cyblack_auto_generated_external_ksi, slot);
	}
	subloop_structures._csetf_instance_boolean_slots(cyblack_auto_generated_external_ksi, bytes.dpb(NIL != value ? ((SubLObject) (ONE_INTEGER)) : ZERO_INTEGER, $int$4097, subloop_structures.instance_boolean_slots(cyblack_auto_generated_external_ksi)));
	return value;
    }

    public static final SubLObject get_cyblack_auto_generated_external_ksi_auto_generated_ks_assistent(SubLObject cyblack_auto_generated_external_ksi) {
	{
	    SubLObject v_class = (cyblack_auto_generated_external_ksi.isSymbol()) ? ((SubLObject) (classes.classes_retrieve_class(cyblack_auto_generated_external_ksi)))
		    : NIL != subloop_structures.class_p(cyblack_auto_generated_external_ksi) ? ((SubLObject) (cyblack_auto_generated_external_ksi))
			    : NIL != subloop_structures.instance_p(cyblack_auto_generated_external_ksi) ? ((SubLObject) (subloop_structures.instance_class(cyblack_auto_generated_external_ksi))) : NIL;
	    if (NIL != v_class) {
		classes.classes_access_check_class_slot(v_class, slots.slot_assoc(AUTO_GENERATED_KS_ASSISTENT, subloop_structures.class_compiled_class_slot_access_alist(v_class)));
		return aref(subloop_structures.class_any_slots(v_class), ONE_INTEGER);
	    }
	    return NIL;
	}
    }

    public static final SubLObject set_cyblack_auto_generated_external_ksi_auto_generated_ks_assistent(SubLObject cyblack_auto_generated_external_ksi, SubLObject value) {
	{
	    SubLObject v_class = (cyblack_auto_generated_external_ksi.isSymbol()) ? ((SubLObject) (classes.classes_retrieve_class(cyblack_auto_generated_external_ksi)))
		    : NIL != subloop_structures.class_p(cyblack_auto_generated_external_ksi) ? ((SubLObject) (cyblack_auto_generated_external_ksi))
			    : NIL != subloop_structures.instance_p(cyblack_auto_generated_external_ksi) ? ((SubLObject) (subloop_structures.instance_class(cyblack_auto_generated_external_ksi))) : NIL;
	    if (NIL != v_class) {
		classes.classes_access_check_class_slot(v_class, slots.slot_assoc(AUTO_GENERATED_KS_ASSISTENT, subloop_structures.class_compiled_class_slot_access_alist(v_class)));
		return set_aref(subloop_structures.class_any_slots(v_class), ONE_INTEGER, value);
	    }
	    return NIL;
	}
    }

    public static final SubLObject cyblack_auto_generated_external_ksi_set_ksi_index_method(SubLObject self, SubLObject new_index) {
	return NIL;
    }

    public static final SubLObject cyblack_auto_generated_external_ksi_get_ksi_index_method(SubLObject self) {
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_auto_generated_external_ksi_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, AUTO_GENERATED_KS_ASSISTENT, NIL);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_auto_generated_external_ksi_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, IS_PROPOSAL_AUTO_GENERATED, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KSI, ACTIVATION_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KSI, KNOWLEDGE_SOURCE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KSI, EXECUTION_MODE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, TRACE_BASIC_METHODS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, PROPOSAL, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_auto_generated_external_ksi_p(SubLObject cyblack_auto_generated_external_ksi) {
	return classes.subloop_instanceof_class(cyblack_auto_generated_external_ksi, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI);
    }

    public static final SubLObject cyblack_auto_generated_external_ksi_get_auto_generated_ks_assistant_method(SubLObject self) {
	{
	    SubLObject auto_generated_ks_assistent = get_cyblack_auto_generated_external_ksi_auto_generated_ks_assistent(self);
	    return auto_generated_ks_assistent;
	}
    }

    public static final SubLObject cyblack_auto_generated_external_ksi_set_auto_generated_ks_assistant_method(SubLObject self, SubLObject new_assistant) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_external_ksi_method = NIL;
		SubLObject auto_generated_ks_assistent = get_cyblack_auto_generated_external_ksi_auto_generated_ks_assistent(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == new_assistant) || (NIL != cyblack_auto_generated_ks_assistant_p(new_assistant)))) {
				Errors.error($str_alt274$_SET_AUTO_GENERATED_KS_ASSISTANT_, self, new_assistant);
			    }
			}
			auto_generated_ks_assistent = new_assistant;
			sublisp_throw($sym1556$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_METHOD, new_assistant);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_external_ksi_auto_generated_ks_assistent(self, auto_generated_ks_assistent);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_external_ksi_method = Errors.handleThrowable(ccatch_env_var, $sym1556$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_METHOD);
		}
		return catch_var_for_cyblack_auto_generated_external_ksi_method;
	    }
	}
    }

    public static final SubLObject cyblack_auto_generated_external_ksi_set_trace_state_method(SubLObject self, SubLObject new_state) {
	{
	    SubLObject catch_var_for_cyblack_auto_generated_external_ksi_method = NIL;
	    SubLObject trace_basic_methods = get_cyblack_auto_generated_external_ksi_trace_basic_methods(self);
	    try {
		try {
		    trace_basic_methods = new_state;
		    sublisp_throw($sym1558$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_METHOD, new_state);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_auto_generated_external_ksi_trace_basic_methods(self, trace_basic_methods);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_auto_generated_external_ksi_method = Errors.handleThrowable(ccatch_env_var, $sym1558$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_METHOD);
	    }
	    return catch_var_for_cyblack_auto_generated_external_ksi_method;
	}
    }

    public static final SubLObject cyblack_auto_generated_external_ksi_initialize_method(SubLObject self) {
	{
	    SubLObject catch_var_for_cyblack_auto_generated_external_ksi_method = NIL;
	    SubLObject auto_generated_ks_assistent = get_cyblack_auto_generated_external_ksi_auto_generated_ks_assistent(self);
	    SubLObject proposal = get_cyblack_auto_generated_external_ksi_proposal(self);
	    SubLObject is_proposal_auto_generated = get_cyblack_auto_generated_external_ksi_is_proposal_auto_generated(self);
	    try {
		try {
		    cyblack_ksi.cyblack_basic_ksi_initialize_method(self);
		    auto_generated_ks_assistent = NIL;
		    proposal = NIL;
		    is_proposal_auto_generated = NIL;
		    sublisp_throw($sym1561$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_METHOD, self);
		} finally {
		    {
			SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    set_cyblack_auto_generated_external_ksi_auto_generated_ks_assistent(self, auto_generated_ks_assistent);
			    set_cyblack_auto_generated_external_ksi_proposal(self, proposal);
			    set_cyblack_auto_generated_external_ksi_is_proposal_auto_generated(self, is_proposal_auto_generated);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		catch_var_for_cyblack_auto_generated_external_ksi_method = Errors.handleThrowable(ccatch_env_var, $sym1561$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_METHOD);
	    }
	    return catch_var_for_cyblack_auto_generated_external_ksi_method;
	}
    }

    public static final SubLObject cyblack_auto_generated_external_ksi_get_proposal_method(SubLObject self) {
	{
	    SubLObject proposal = get_cyblack_auto_generated_external_ksi_proposal(self);
	    return proposal;
	}
    }

    public static final SubLObject cyblack_auto_generated_external_ksi_set_proposal_method(SubLObject self, SubLObject new_proposal) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_auto_generated_external_ksi_method = NIL;
		SubLObject proposal = get_cyblack_auto_generated_external_ksi_proposal(self);
		SubLObject is_proposal_auto_generated = get_cyblack_auto_generated_external_ksi_is_proposal_auto_generated(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (!((NIL == new_proposal) || (NIL != cyblack_proposal.cyblack_proposal_p(new_proposal)))) {
				Errors.error($str_alt440$_SET_PROPOSAL__S____S_is_not_an_i, self, new_proposal);
			    }
			}
			proposal = new_proposal;
			is_proposal_auto_generated = makeBoolean((NIL != new_proposal) && (NIL != cyblack_auto_generated_external_proposal_p(new_proposal)));
			sublisp_throw($sym1565$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_METHOD, new_proposal);
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				set_cyblack_auto_generated_external_ksi_proposal(self, proposal);
				set_cyblack_auto_generated_external_ksi_is_proposal_auto_generated(self, is_proposal_auto_generated);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_auto_generated_external_ksi_method = Errors.handleThrowable(ccatch_env_var, $sym1565$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_METHOD);
		}
		return catch_var_for_cyblack_auto_generated_external_ksi_method;
	    }
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_external_base_ks_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, AUTO_GENERATED_KS_ASSISTENT, NIL);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_external_base_ks_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, QUA_LIST_ELEMENT_SELF_DELETION_MODE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, IS_A_MONITOR, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, POST_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, ADD_PANELS_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, REMOVE_PANELS_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, ADD_POSTING_CLASSES_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, ADD_KNOWLEDGE_SOURCES_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, REMOVE_KNOWLEDGE_SOURCES_AT_WILL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, LINKED_TO_PANELS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, HAS_CACHED_DOMAIN_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, WAITING_ON_LINK_CALLBACK, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, REJECTED, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, TRACE_BASIC_METHODS, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, LOCK, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, OWNER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, QUA_LIST_ELEMENT_PARENT_LINKS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, AUTHOR_NAMES, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_PROTO_KNOWLEDGE_SOURCE, KNOWLEDGE_SOURCE_BATTERY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, UNCOMPILED_PRECONDITION_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, UNIFICATION_ROBOT_CLASS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, CACHED_DOMAIN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KNOWLEDGE_SOURCE, RANGE_SET, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, NAME, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, EXTERNAL_KNOWLEDGE_SOURCE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, CACHED_MESSAGE_BROKER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, CACHED_PROPOSAL_CLASS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, PROPOSAL_CLASS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, INVITATION_TRANSACTION_ID, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, GUID_AS_STRING, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, REJECTION_EXCUSES, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, PORT_ID, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_external_base_ks_p(SubLObject cyblack_external_base_ks) {
	return classes.subloop_instanceof_class(cyblack_external_base_ks, CYBLACK_EXTERNAL_BASE_KS);
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_external_base_proposal_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, AUTO_GENERATED_KS_ASSISTENT, NIL);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_external_base_proposal_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, QUA_LIST_ELEMENT_SELF_DELETION_MODE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_PROPOSAL, ALREADY_RECONFIRMED, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, LOCK, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_LOCKABLE, OWNER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, AGENDA, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, PROPOSED_CONTRIBUTIONS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, PROPOSED_REMOVALS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, EXECUTION_MODE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, VERIFIED, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_PROPOSAL, QUA_LIST_ELEMENT_PARENT_LINKS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_PROPOSAL, EXTERNAL_PROPOSAL, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_PROPOSAL, CACHED_KSI_CLASS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_EXTERNAL_PROPOSAL, KSI_CLASS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, TRACE_BASIC_METHODS, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_external_base_proposal_p(SubLObject cyblack_external_base_proposal) {
	return classes.subloop_instanceof_class(cyblack_external_base_proposal, CYBLACK_EXTERNAL_BASE_PROPOSAL);
    }

    public static final SubLObject cyblack_external_base_proposal_initialize_method(SubLObject self) {
	cyblack_auto_generated_external_proposal_initialize_method(self);
	return self;
    }

    public static final SubLObject cyblack_external_base_proposal_generate_ksi_method(SubLObject self) {
	{
	    SubLObject exprop = self;
	    SubLObject activation_pattern = cyblack_proposal.exprop_activation_pattern(exprop);
	    SubLObject new_ksi = cyblack_proposal.cyblack_external_proposal_generate_ksi_method(self, UNPROVIDED);
	    SubLObject new_activation_pattern = (NIL != activation_pattern) ? ((SubLObject) (methods.funcall_instance_method_with_0_args(activation_pattern, CLONE))) : NIL;
	    if (NIL != new_ksi) {
		methods.funcall_instance_method_with_1_args(new_ksi, SET_ACTIVATION_PATTERN, new_activation_pattern);
	    }
	    return new_ksi;
	}
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_external_base_ksi_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, AUTO_GENERATED_KS_ASSISTENT, NIL);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_cyblack_external_base_ksi_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, IS_PROPOSAL_AUTO_GENERATED, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, APPLICATION, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_OBJECT, HTML_INDENT_BY, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KSI, ACTIVATION_PATTERN, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KSI, KNOWLEDGE_SOURCE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_BASIC_KSI, EXECUTION_MODE, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, TRACE_BASIC_METHODS, NIL);
	classes.subloop_initialize_slot(new_instance, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, PROPOSAL, NIL);
	return NIL;
    }

    public static final SubLObject cyblack_external_base_ksi_p(SubLObject cyblack_external_base_ksi) {
	return classes.subloop_instanceof_class(cyblack_external_base_ksi, CYBLACK_EXTERNAL_BASE_KSI);
    }

    public static final SubLObject cyblack_external_base_ksi_initialize_method(SubLObject self) {
	cyblack_auto_generated_external_ksi_initialize_method(self);
	return self;
    }

    public static final SubLObject cyblack_external_base_ksi_create_posting_method(SubLObject self, SubLObject datatype) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject catch_var_for_cyblack_external_base_ksi_method = NIL;
		SubLObject activation_pattern = cyblack_ksi.get_cyblack_basic_ksi_activation_pattern(self);
		SubLObject application = cyblack_object.get_cyblack_object_application(self);
		try {
		    try {
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == cyblack_datatype.cyblack_datatype_p(datatype)) {
				Errors.error($str_alt1486$_CREATE_POSTING__S____S_is_not_an, self, datatype);
			    }
			}
			{
			    SubLObject posting = cyblack_datatype.cyblack_datatype_create_posting(datatype);
			    cyblack_posting_dispatch_functions.cyblack_posting_set_application(posting, application);
			    if (NIL != activation_pattern) {
				cyblack_posting_dispatch_functions.cyblack_posting_set_activation_pattern(posting, methods.funcall_instance_method_with_0_args(activation_pattern, CLONE));
			    }
			    cyblack_posting_dispatch_functions.cyblack_posting_set_ksi(posting, self);
			    sublisp_throw($sym1580$OUTER_CATCH_FOR_CYBLACK_EXTERNAL_BASE_KSI_METHOD, posting);
			}
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				cyblack_ksi.set_cyblack_basic_ksi_activation_pattern(self, activation_pattern);
				cyblack_object.set_cyblack_object_application(self, application);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    catch_var_for_cyblack_external_base_ksi_method = Errors.handleThrowable(ccatch_env_var, $sym1580$OUTER_CATCH_FOR_CYBLACK_EXTERNAL_BASE_KSI_METHOD);
		}
		return catch_var_for_cyblack_external_base_ksi_method;
	    }
	}
    }

    public static final SubLObject cyblack_external_base_ksi_execute_method(SubLObject self) {
	return cyblack_ksi.cyblack_basic_ksi_execute_method(self);
    }

    public static final SubLObject cyblack_expand_external_knowledge_source_definition(SubLObject ks_name_root, SubLObject options_plist) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == ks_name_root_p(ks_name_root)) {
		    Errors.error($str_alt1584$_DEFINE_EXTERNAL_KNOWLEDGE_SOURCE, ks_name_root);
		}
	    }
	    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		if (NIL == cyblack_ks_def_external_options_plist_p(options_plist)) {
		    Errors.error($str_alt1585$_DEFINE_EXTERNAL_KNOWLEDGE_SOURCE, options_plist);
		}
	    }
	    {
		SubLObject factory = object.new_class_instance(CYBLACK_KS_FACTORY);
		SubLObject super_root_name = getf(options_plist, $EXTENDS, UNPROVIDED);
		SubLObject implements_list = getf(options_plist, $IMPLEMENTS, UNPROVIDED);
		SubLObject post_at_will = getf(options_plist, $POST_AT_WILL, UNPROVIDED);
		SubLObject external_module_name = getf(options_plist, $EXTERNAL_MODULE_NAME, UNPROVIDED);
		SubLObject port_id = getf(options_plist, $PORT_ID, UNPROVIDED);
		if (NIL == super_root_name) {
		    super_root_name = CYBLACK_EXTERNAL_BASE;
		}
		$factory$.setDynamicValue(factory, thread);
		cyblack_ks_factory_set_external_method(factory, T);
		cyblack_ks_factory_set_ks_root_name_method(factory, ks_name_root);
		cyblack_ks_factory_set_super_ks_root_name_method(factory, super_root_name);
		cyblack_ks_factory_set_interface_names_method(factory, implements_list);
		cyblack_ks_factory_set_unparsed_body_method(factory, NIL);
		cyblack_ks_factory_set_post_at_will_method(factory, post_at_will);
		cyblack_ks_factory_set_external_module_name_method(factory, external_module_name);
		cyblack_ks_factory_set_port_id_method(factory, port_id);
		cyblack_ks_factory_set_assistant_method(factory, cyblack_create_defks_assistant_extended(ks_name_root, cyblack_ks_factory_get_ks_name_method(factory), cyblack_ks_factory_get_proposal_name_method(factory), cyblack_ks_factory_get_ksi_name_method(factory), NIL));
		return listS(PROGN,
			listS(CYBLACK_CREATE_DEFKS_ASSISTANT_EXTENDED, list(QUOTE, ks_name_root), list(QUOTE, cyblack_ks_factory_get_ks_name_method(factory)), list(QUOTE, cyblack_ks_factory_get_proposal_name_method(factory)), list(QUOTE, cyblack_ks_factory_get_ksi_name_method(factory)),
				$list_alt564),
			cyblack_ks_factory_get_ks_declaration_method(factory), append(cyblack_ks_factory_get_ks_method_definitions_method(factory), bq_cons(cyblack_ks_factory_get_proposal_declaration_method(factory),
				append(cyblack_ks_factory_get_proposal_method_definitions_method(factory), bq_cons(cyblack_ks_factory_get_ksi_declaration_method(factory), append(cyblack_ks_factory_get_ksi_method_definitions_method(factory), NIL))))));
	    }
	}
    }

    public static final SubLObject define_external_knowledge_source(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt1589);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject ks_name_root = NIL;
		    SubLObject options_plist = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt1589);
		    ks_name_root = current.first();
		    current = current.rest();
		    options_plist = current;
		    current = temp;
		    if (NIL == current) {
			return cyblack_expand_external_knowledge_source_definition(ks_name_root, options_plist);
		    } else {
			cdestructuring_bind_error(datum, $list_alt1589);
		    }
		}
	    }
	}
	return NIL;
    }

    public static final SubLObject declare_cyblack_defks_file() {
	declareFunction("cyblack_variable_list_p", "CYBLACK-VARIABLE-LIST-P", 1, 0, false);
	declareFunction("valid_cyblack_unification_modifiers", "VALID-CYBLACK-UNIFICATION-MODIFIERS", 0, 0, false);
	declareFunction("cyblack_unification_modifier_p", "CYBLACK-UNIFICATION-MODIFIER-P", 1, 0, false);
	declareFunction("encode_cyblack_unification_modifier", "ENCODE-CYBLACK-UNIFICATION-MODIFIER", 1, 0, false);
	declareFunction("decode_cyblack_unification_modifier", "DECODE-CYBLACK-UNIFICATION-MODIFIER", 1, 0, false);
	declareFunction("cyblack_unification_modifier_less_p", "CYBLACK-UNIFICATION-MODIFIER-LESS-P", 2, 0, false);
	declareFunction("cyblack_unification_modifier_greater_p", "CYBLACK-UNIFICATION-MODIFIER-GREATER-P", 2, 0, false);
	declareFunction("cyblack_unification_modifier_list_p", "CYBLACK-UNIFICATION-MODIFIER-LIST-P", 1, 0, false);
	declareFunction("valid_cyblack_ks_def_options", "VALID-CYBLACK-KS-DEF-OPTIONS", 0, 0, false);
	declareFunction("cyblack_ks_def_option_p", "CYBLACK-KS-DEF-OPTION-P", 1, 0, false);
	declareFunction("encode_cyblack_ks_def_option", "ENCODE-CYBLACK-KS-DEF-OPTION", 1, 0, false);
	declareFunction("decode_cyblack_ks_def_option", "DECODE-CYBLACK-KS-DEF-OPTION", 1, 0, false);
	declareFunction("cyblack_ks_def_option_less_p", "CYBLACK-KS-DEF-OPTION-LESS-P", 2, 0, false);
	declareFunction("cyblack_ks_def_option_greater_p", "CYBLACK-KS-DEF-OPTION-GREATER-P", 2, 0, false);
	declareFunction("cyblack_ks_def_options_plist_p", "CYBLACK-KS-DEF-OPTIONS-PLIST-P", 1, 0, false);
	declareFunction("valid_cyblack_ks_def_external_options", "VALID-CYBLACK-KS-DEF-EXTERNAL-OPTIONS", 0, 0, false);
	declareFunction("cyblack_ks_def_external_option_p", "CYBLACK-KS-DEF-EXTERNAL-OPTION-P", 1, 0, false);
	declareFunction("encode_cyblack_ks_def_external_option", "ENCODE-CYBLACK-KS-DEF-EXTERNAL-OPTION", 1, 0, false);
	declareFunction("decode_cyblack_ks_def_external_option", "DECODE-CYBLACK-KS-DEF-EXTERNAL-OPTION", 1, 0, false);
	declareFunction("cyblack_ks_def_external_option_less_p", "CYBLACK-KS-DEF-EXTERNAL-OPTION-LESS-P", 2, 0, false);
	declareFunction("cyblack_ks_def_external_option_greater_p", "CYBLACK-KS-DEF-EXTERNAL-OPTION-GREATER-P", 2, 0, false);
	declareFunction("cyblack_ks_def_external_options_plist_p", "CYBLACK-KS-DEF-EXTERNAL-OPTIONS-PLIST-P", 1, 0, false);
	declareFunction("valid_cyblack_propose_expression_options", "VALID-CYBLACK-PROPOSE-EXPRESSION-OPTIONS", 0, 0, false);
	declareFunction("cyblack_propose_expression_option_p", "CYBLACK-PROPOSE-EXPRESSION-OPTION-P", 1, 0, false);
	declareFunction("encode_cyblack_propose_expression_option", "ENCODE-CYBLACK-PROPOSE-EXPRESSION-OPTION", 1, 0, false);
	declareFunction("decode_cyblack_propose_expression_option", "DECODE-CYBLACK-PROPOSE-EXPRESSION-OPTION", 1, 0, false);
	declareFunction("cyblack_propose_expression_option_less_p", "CYBLACK-PROPOSE-EXPRESSION-OPTION-LESS-P", 2, 0, false);
	declareFunction("cyblack_propose_expression_option_greater_p", "CYBLACK-PROPOSE-EXPRESSION-OPTION-GREATER-P", 2, 0, false);
	declareFunction("cyblack_propose_expression_options_plist_p", "CYBLACK-PROPOSE-EXPRESSION-OPTIONS-PLIST-P", 1, 0, false);
	declareFunction("cyblack_keword_plist_p", "CYBLACK-KEWORD-PLIST-P", 1, 0, false);
	declareFunction("integer_reference_print_function_trampoline", "INTEGER-REFERENCE-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
	declareFunction("integer_reference_p", "INTEGER-REFERENCE-P", 1, 0, false);
	new cyblack_defks.$integer_reference_p$UnaryFunction();
	declareFunction("integer_reference_value", "INTEGER-REFERENCE-VALUE", 1, 0, false);
	declareFunction("_csetf_integer_reference_value", "_CSETF-INTEGER-REFERENCE-VALUE", 2, 0, false);
	declareFunction("make_integer_reference", "MAKE-INTEGER-REFERENCE", 0, 1, false);
	declareFunction("new_integer_reference", "NEW-INTEGER-REFERENCE", 0, 1, false);
	declareFunction("inc_integer_reference", "INC-INTEGER-REFERENCE", 1, 0, false);
	declareFunction("get_integer_from_reference", "GET-INTEGER-FROM-REFERENCE", 1, 0, false);
	declareFunction("cyblack_unifier_class_given_description", "CYBLACK-UNIFIER-CLASS-GIVEN-DESCRIPTION", 1, 0, false);
	declareFunction("cyblack_clet_merge", "CYBLACK-CLET-MERGE", 1, 0, false);
	declareFunction("cyblack_flatten_progns", "CYBLACK-FLATTEN-PROGNS", 1, 0, false);
	declareFunction("cyblack_simple_environment_template_p", "CYBLACK-SIMPLE-ENVIRONMENT-TEMPLATE-P", 1, 0, false);
	declareFunction("cyblack_get_ks_assistant", "CYBLACK-GET-KS-ASSISTANT", 1, 0, false);
	declareFunction("cyblack_set_ks_assistant", "CYBLACK-SET-KS-ASSISTANT", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_ks_assistant_external_module_name", "GET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-EXTERNAL-MODULE-NAME", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_ks_assistant_external_module_name", "SET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-EXTERNAL-MODULE-NAME", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_ks_assistant_port_id", "GET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-PORT-ID", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_ks_assistant_port_id", "SET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-PORT-ID", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_ks_assistant_knowledge_source_type", "GET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-KNOWLEDGE-SOURCE-TYPE", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_ks_assistant_knowledge_source_type", "SET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-KNOWLEDGE-SOURCE-TYPE", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_ks_assistant_unification_types", "GET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-UNIFICATION-TYPES", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_ks_assistant_unification_types", "SET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-UNIFICATION-TYPES", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_ks_assistant_precondition_pattern", "GET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-PRECONDITION-PATTERN", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_ks_assistant_precondition_pattern", "SET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-PRECONDITION-PATTERN", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_ks_assistant_knowledge_source_instantiation_class", "GET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-KNOWLEDGE-SOURCE-INSTANTIATION-CLASS", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_ks_assistant_knowledge_source_instantiation_class", "SET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-KNOWLEDGE-SOURCE-INSTANTIATION-CLASS", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_ks_assistant_proposal_class", "GET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-PROPOSAL-CLASS", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_ks_assistant_proposal_class", "SET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-PROPOSAL-CLASS", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_ks_assistant_knowledge_source_class", "GET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-KNOWLEDGE-SOURCE-CLASS", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_ks_assistant_knowledge_source_class", "SET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-KNOWLEDGE-SOURCE-CLASS", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_ks_assistant_post_at_will", "GET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-POST-AT-WILL", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_ks_assistant_post_at_will", "SET-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-POST-AT-WILL", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_auto_generated_ks_assistant_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_auto_generated_ks_assistant_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-INSTANCE", 1, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_p", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-P", 1, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_initialize_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_get_knowledge_source_class_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-KNOWLEDGE-SOURCE-CLASS-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_set_knowledge_source_class_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-KNOWLEDGE-SOURCE-CLASS-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_get_proposal_class_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-PROPOSAL-CLASS-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_set_proposal_class_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-PROPOSAL-CLASS-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_get_knowledge_source_instantiation_class_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-KNOWLEDGE-SOURCE-INSTANTIATION-CLASS-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_set_knowledge_source_instantiation_class_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-KNOWLEDGE-SOURCE-INSTANTIATION-CLASS-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_get_post_at_will_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-POST-AT-WILL-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_set_post_at_will_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-POST-AT-WILL-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_get_precondition_pattern_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-PRECONDITION-PATTERN-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_set_precondition_pattern_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-PRECONDITION-PATTERN-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_get_unification_types_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-UNIFICATION-TYPES-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_set_unification_types_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-UNIFICATION-TYPES-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_get_knowledge_source_type_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-KNOWLEDGE-SOURCE-TYPE-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_set_knowledge_source_type_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-KNOWLEDGE-SOURCE-TYPE-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_get_port_id_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-PORT-ID-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_set_port_id_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-PORT-ID-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_get_external_module_name_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-EXTERNAL-MODULE-NAME-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_ks_assistant_set_external_module_name_method", "CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-EXTERNAL-MODULE-NAME-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_knowledge_source_component_p", "CYBLACK-AUTO-GENERATED-KNOWLEDGE-SOURCE-COMPONENT-P", 1, 0, false);
	declareFunction("cyblack_auto_generated_knowledge_source_p", "CYBLACK-AUTO-GENERATED-KNOWLEDGE-SOURCE-P", 1, 0, false);
	declareFunction("cyblack_auto_generated_proposal_p", "CYBLACK-AUTO-GENERATED-PROPOSAL-P", 1, 0, false);
	declareFunction("cyblack_auto_generated_ksi_p", "CYBLACK-AUTO-GENERATED-KSI-P", 1, 0, false);
	declareFunction("get_cyblack_auto_generated_internal_knowledge_source_binding_list", "GET-CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-BINDING-LIST", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_internal_knowledge_source_binding_list", "SET-CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-BINDING-LIST", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_internal_knowledge_source_trace_basic_methods", "GET-CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-TRACE-BASIC-METHODS", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_internal_knowledge_source_trace_basic_methods", "SET-CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-TRACE-BASIC-METHODS", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_internal_knowledge_source_auto_generated_ks_assistent", "GET-CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-AUTO-GENERATED-KS-ASSISTENT", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_internal_knowledge_source_auto_generated_ks_assistent", "SET-CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-AUTO-GENERATED-KS-ASSISTENT", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_generate_to_bindings_code_given_vars_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GENERATE-TO-BINDINGS-CODE-GIVEN-VARS-METHOD", 3, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_generate_from_bindings_code_given_vars_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GENERATE-FROM-BINDINGS-CODE-GIVEN-VARS-METHOD", 3, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_generate_to_bindings_code_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GENERATE-TO-BINDINGS-CODE-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_generate_from_bindings_code_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GENERATE-FROM-BINDINGS-CODE-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_copy_bindings_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-COPY-BINDINGS-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_get_values_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GET-VALUES-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_get_variables_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GET-VARIABLES-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_eval_var_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-EVAL-VAR-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_bind_var_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-BIND-VAR-METHOD", 3, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_get_copy_of_binding_list_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GET-COPY-OF-BINDING-LIST-METHOD", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_auto_generated_internal_knowledge_source_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_auto_generated_internal_knowledge_source_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_p", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-P", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_initialize_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_get_binding_list_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GET-BINDING-LIST-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_set_binding_list_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-SET-BINDING-LIST-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_get_auto_generated_ks_assistant_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GET-AUTO-GENERATED-KS-ASSISTANT-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_set_auto_generated_ks_assistant_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-SET-AUTO-GENERATED-KS-ASSISTANT-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_set_trace_state_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-SET-TRACE-STATE-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_new_knowledge_source_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-NEW-KNOWLEDGE-SOURCE-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_new_proposal_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-NEW-PROPOSAL-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_new_ksi_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-NEW-KSI-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_stimulate_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-STIMULATE-METHOD", 1, 1, false);
	declareFunction("cyblack_auto_generated_internal_knowledge_source_create_proposals_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-CREATE-PROPOSALS-METHOD", 1, 1, false);
	declareFunction("get_cyblack_auto_generated_internal_proposal_trace_basic_methods", "GET-CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-TRACE-BASIC-METHODS", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_internal_proposal_trace_basic_methods", "SET-CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-TRACE-BASIC-METHODS", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_internal_proposal_proposal_index", "GET-CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-PROPOSAL-INDEX", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_internal_proposal_proposal_index", "SET-CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-PROPOSAL-INDEX", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_internal_proposal_binding_list", "GET-CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-BINDING-LIST", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_internal_proposal_binding_list", "SET-CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-BINDING-LIST", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_internal_proposal_auto_generated_ks_assistent", "GET-CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-AUTO-GENERATED-KS-ASSISTENT", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_internal_proposal_auto_generated_ks_assistent", "SET-CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-AUTO-GENERATED-KS-ASSISTENT", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_generate_to_bindings_code_given_vars_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GENERATE-TO-BINDINGS-CODE-GIVEN-VARS-METHOD", 3, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_generate_from_bindings_code_given_vars_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GENERATE-FROM-BINDINGS-CODE-GIVEN-VARS-METHOD", 3, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_generate_to_bindings_code_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GENERATE-TO-BINDINGS-CODE-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_generate_from_bindings_code_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GENERATE-FROM-BINDINGS-CODE-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_copy_bindings_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-COPY-BINDINGS-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_get_values_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GET-VALUES-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_get_variables_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GET-VARIABLES-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_eval_var_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-EVAL-VAR-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_bind_var_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-BIND-VAR-METHOD", 3, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_get_copy_of_binding_list_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GET-COPY-OF-BINDING-LIST-METHOD", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_auto_generated_internal_proposal_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_auto_generated_internal_proposal_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-INSTANCE", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_p", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-P", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_initialize_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_print_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_get_binding_list_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GET-BINDING-LIST-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_set_binding_list_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-SET-BINDING-LIST-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_get_auto_generated_ks_assistant_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GET-AUTO-GENERATED-KS-ASSISTANT-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_set_auto_generated_ks_assistant_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-SET-AUTO-GENERATED-KS-ASSISTANT-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_get_proposal_index_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GET-PROPOSAL-INDEX-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_set_proposal_index_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-SET-PROPOSAL-INDEX-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_proposal_set_trace_state_method", "CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-SET-TRACE-STATE-METHOD", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_internal_ksi_proposal", "GET-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-PROPOSAL", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_internal_ksi_proposal", "SET-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-PROPOSAL", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_internal_ksi_trace_basic_methods", "GET-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-TRACE-BASIC-METHODS", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_internal_ksi_trace_basic_methods", "SET-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-TRACE-BASIC-METHODS", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_internal_ksi_ksi_index", "GET-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-KSI-INDEX", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_internal_ksi_ksi_index", "SET-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-KSI-INDEX", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated", "GET-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-IS-PROPOSAL-AUTO-GENERATED", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_internal_ksi_is_proposal_auto_generated", "SET-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-IS-PROPOSAL-AUTO-GENERATED", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_internal_ksi_auto_generated_ks_assistent", "GET-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-AUTO-GENERATED-KS-ASSISTENT", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_internal_ksi_auto_generated_ks_assistent", "SET-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-AUTO-GENERATED-KS-ASSISTENT", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_auto_generated_internal_ksi_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_auto_generated_internal_ksi_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-INSTANCE", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_p", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-P", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_get_binding_list_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GET-BINDING-LIST-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_set_binding_list_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-SET-BINDING-LIST-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_get_copy_of_binding_list_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GET-COPY-OF-BINDING-LIST-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_bind_var_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-BIND-VAR-METHOD", 3, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_eval_var_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-EVAL-VAR-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_get_variables_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GET-VARIABLES-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_get_values_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GET-VALUES-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_copy_bindings_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-COPY-BINDINGS-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_generate_from_bindings_code_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GENERATE-FROM-BINDINGS-CODE-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_generate_to_bindings_code_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GENERATE-TO-BINDINGS-CODE-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_generate_from_bindings_code_given_vars_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GENERATE-FROM-BINDINGS-CODE-GIVEN-VARS-METHOD", 3, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_generate_to_bindings_code_given_vars_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GENERATE-TO-BINDINGS-CODE-GIVEN-VARS-METHOD", 3, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_get_auto_generated_ks_assistant_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GET-AUTO-GENERATED-KS-ASSISTANT-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_set_auto_generated_ks_assistant_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-SET-AUTO-GENERATED-KS-ASSISTANT-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_get_ksi_index_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GET-KSI-INDEX-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_set_ksi_index_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-SET-KSI-INDEX-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_set_trace_state_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-SET-TRACE-STATE-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_initialize_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_get_proposal_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GET-PROPOSAL-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_internal_ksi_set_proposal_method", "CYBLACK-AUTO-GENERATED-INTERNAL-KSI-SET-PROPOSAL-METHOD", 2, 0, false);
	declareMacro("bind_current_defks_body", "BIND-CURRENT-DEFKS-BODY");
	declareMacro("with_current_defks_body", "WITH-CURRENT-DEFKS-BODY");
	declareFunction("get_current_defks_body", "GET-CURRENT-DEFKS-BODY", 0, 0, false);
	declareFunction("get_cyblack_defks_expression_children", "GET-CYBLACK-DEFKS-EXPRESSION-CHILDREN", 1, 0, false);
	declareFunction("set_cyblack_defks_expression_children", "SET-CYBLACK-DEFKS-EXPRESSION-CHILDREN", 2, 0, false);
	declareFunction("get_cyblack_defks_expression_parent", "GET-CYBLACK-DEFKS-EXPRESSION-PARENT", 1, 0, false);
	declareFunction("set_cyblack_defks_expression_parent", "SET-CYBLACK-DEFKS-EXPRESSION-PARENT", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_defks_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_defks_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_defks_expression_p", "CYBLACK-DEFKS-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_defks_expression_initialize_method", "CYBLACK-DEFKS-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_expression_print_method", "CYBLACK-DEFKS-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_defks_expression_get_parent_method", "CYBLACK-DEFKS-EXPRESSION-GET-PARENT-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_expression_set_parent_method", "CYBLACK-DEFKS-EXPRESSION-SET-PARENT-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_expression_add_child_method", "CYBLACK-DEFKS-EXPRESSION-ADD-CHILD-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_expression_get_children_method", "CYBLACK-DEFKS-EXPRESSION-GET-CHILDREN-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_expression_compile_method", "CYBLACK-DEFKS-EXPRESSION-COMPILE-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_expression_get_proposals_var_method", "CYBLACK-DEFKS-EXPRESSION-GET-PROPOSALS-VAR-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_expression_get_environment_var_method", "CYBLACK-DEFKS-EXPRESSION-GET-ENVIRONMENT-VAR-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_expression_register_posting_expression_method", "CYBLACK-DEFKS-EXPRESSION-REGISTER-POSTING-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_expression_get_integer_reference_method", "CYBLACK-DEFKS-EXPRESSION-GET-INTEGER-REFERENCE-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_expression_generate_to_bindings_code_method", "CYBLACK-DEFKS-EXPRESSION-GENERATE-TO-BINDINGS-CODE-METHOD", 3, 0, false);
	declareFunction("cyblack_defks_expression_generate_from_bindings_code_method", "CYBLACK-DEFKS-EXPRESSION-GENERATE-FROM-BINDINGS-CODE-METHOD", 3, 0, false);
	declareFunction("cyblack_defks_expression_generate_noop_calls_method", "CYBLACK-DEFKS-EXPRESSION-GENERATE-NOOP-CALLS-METHOD", 2, 0, false);
	declareFunction("cyblack_quick_symbolic_expression_p", "CYBLACK-QUICK-SYMBOLIC-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_copy_tree_while_setting_parent", "CYBLACK-COPY-TREE-WHILE-SETTING-PARENT", 2, 0, false);
	declareFunction("cyblack_traverse_tree_while_setting_parent", "CYBLACK-TRAVERSE-TREE-WHILE-SETTING-PARENT", 2, 0, false);
	declareFunction("get_cyblack_defks_body_method_definitions", "GET-CYBLACK-DEFKS-BODY-METHOD-DEFINITIONS", 1, 0, false);
	declareFunction("set_cyblack_defks_body_method_definitions", "SET-CYBLACK-DEFKS-BODY-METHOD-DEFINITIONS", 2, 0, false);
	declareFunction("get_cyblack_defks_body_slot_declarations", "GET-CYBLACK-DEFKS-BODY-SLOT-DECLARATIONS", 1, 0, false);
	declareFunction("set_cyblack_defks_body_slot_declarations", "SET-CYBLACK-DEFKS-BODY-SLOT-DECLARATIONS", 2, 0, false);
	declareFunction("get_cyblack_defks_body_integer_reference", "GET-CYBLACK-DEFKS-BODY-INTEGER-REFERENCE", 1, 0, false);
	declareFunction("set_cyblack_defks_body_integer_reference", "SET-CYBLACK-DEFKS-BODY-INTEGER-REFERENCE", 2, 0, false);
	declareFunction("get_cyblack_defks_body_posting_expression_alist", "GET-CYBLACK-DEFKS-BODY-POSTING-EXPRESSION-ALIST", 1, 0, false);
	declareFunction("set_cyblack_defks_body_posting_expression_alist", "SET-CYBLACK-DEFKS-BODY-POSTING-EXPRESSION-ALIST", 2, 0, false);
	declareFunction("get_cyblack_defks_body_posting_expression_count", "GET-CYBLACK-DEFKS-BODY-POSTING-EXPRESSION-COUNT", 1, 0, false);
	declareFunction("set_cyblack_defks_body_posting_expression_count", "SET-CYBLACK-DEFKS-BODY-POSTING-EXPRESSION-COUNT", 2, 0, false);
	declareFunction("get_cyblack_defks_body_environment_var", "GET-CYBLACK-DEFKS-BODY-ENVIRONMENT-VAR", 1, 0, false);
	declareFunction("set_cyblack_defks_body_environment_var", "SET-CYBLACK-DEFKS-BODY-ENVIRONMENT-VAR", 2, 0, false);
	declareFunction("get_cyblack_defks_body_proposals_var", "GET-CYBLACK-DEFKS-BODY-PROPOSALS-VAR", 1, 0, false);
	declareFunction("set_cyblack_defks_body_proposals_var", "SET-CYBLACK-DEFKS-BODY-PROPOSALS-VAR", 2, 0, false);
	declareFunction("get_cyblack_defks_body_stimulation_cond", "GET-CYBLACK-DEFKS-BODY-STIMULATION-COND", 1, 0, false);
	declareFunction("set_cyblack_defks_body_stimulation_cond", "SET-CYBLACK-DEFKS-BODY-STIMULATION-COND", 2, 0, false);
	declareFunction("get_cyblack_defks_body_on_startup_clause", "GET-CYBLACK-DEFKS-BODY-ON-STARTUP-CLAUSE", 1, 0, false);
	declareFunction("set_cyblack_defks_body_on_startup_clause", "SET-CYBLACK-DEFKS-BODY-ON-STARTUP-CLAUSE", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_defks_body_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-BODY-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_defks_body_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-BODY-INSTANCE", 1, 0, false);
	declareFunction("cyblack_defks_body_p", "CYBLACK-DEFKS-BODY-P", 1, 0, false);
	declareFunction("cyblack_defks_body_initialize_method", "CYBLACK-DEFKS-BODY-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_body_print_method", "CYBLACK-DEFKS-BODY-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_defks_body_get_on_startup_clause_method", "CYBLACK-DEFKS-BODY-GET-ON-STARTUP-CLAUSE-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_body_set_on_startup_clause_method", "CYBLACK-DEFKS-BODY-SET-ON-STARTUP-CLAUSE-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_body_get_stimulation_cond_method", "CYBLACK-DEFKS-BODY-GET-STIMULATION-COND-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_body_set_stimulation_cond_method", "CYBLACK-DEFKS-BODY-SET-STIMULATION-COND-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_body_distribute_binding_info_method", "CYBLACK-DEFKS-BODY-DISTRIBUTE-BINDING-INFO-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_body_compile_to_on_startup_method_method", "CYBLACK-DEFKS-BODY-COMPILE-TO-ON-STARTUP-METHOD-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_body_compile_to_create_proposals_method_method", "CYBLACK-DEFKS-BODY-COMPILE-TO-CREATE-PROPOSALS-METHOD-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_body_compile_to_execute_method_method", "CYBLACK-DEFKS-BODY-COMPILE-TO-EXECUTE-METHOD-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_body_get_proposals_var_method", "CYBLACK-DEFKS-BODY-GET-PROPOSALS-VAR-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_body_get_environment_var_method", "CYBLACK-DEFKS-BODY-GET-ENVIRONMENT-VAR-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_body_register_posting_expression_method", "CYBLACK-DEFKS-BODY-REGISTER-POSTING-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_body_get_posting_expression_count_method", "CYBLACK-DEFKS-BODY-GET-POSTING-EXPRESSION-COUNT-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_body_get_posting_expression_method", "CYBLACK-DEFKS-BODY-GET-POSTING-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_body_get_integer_reference_method", "CYBLACK-DEFKS-BODY-GET-INTEGER-REFERENCE-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_body_get_slot_declarations_method", "CYBLACK-DEFKS-BODY-GET-SLOT-DECLARATIONS-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_body_set_slot_declarations_method", "CYBLACK-DEFKS-BODY-SET-SLOT-DECLARATIONS-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_body_add_slot_declaration_method", "CYBLACK-DEFKS-BODY-ADD-SLOT-DECLARATION-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_body_get_method_definitions_method", "CYBLACK-DEFKS-BODY-GET-METHOD-DEFINITIONS-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_body_set_method_definitions_method", "CYBLACK-DEFKS-BODY-SET-METHOD-DEFINITIONS-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_body_add_method_definition_method", "CYBLACK-DEFKS-BODY-ADD-METHOD-DEFINITION-METHOD", 2, 0, false);
	declareFunction("get_cyblack_defks_on_startup_clause_posting_expressions", "GET-CYBLACK-DEFKS-ON-STARTUP-CLAUSE-POSTING-EXPRESSIONS", 1, 0, false);
	declareFunction("set_cyblack_defks_on_startup_clause_posting_expressions", "SET-CYBLACK-DEFKS-ON-STARTUP-CLAUSE-POSTING-EXPRESSIONS", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_defks_on_startup_clause_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-ON-STARTUP-CLAUSE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_defks_on_startup_clause_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-ON-STARTUP-CLAUSE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_defks_on_startup_clause_p", "CYBLACK-DEFKS-ON-STARTUP-CLAUSE-P", 1, 0, false);
	declareFunction("cyblack_defks_on_startup_clause_initialize_method", "CYBLACK-DEFKS-ON-STARTUP-CLAUSE-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_on_startup_clause_print_method", "CYBLACK-DEFKS-ON-STARTUP-CLAUSE-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_defks_on_startup_clause_get_posting_expressions_method", "CYBLACK-DEFKS-ON-STARTUP-CLAUSE-GET-POSTING-EXPRESSIONS-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_on_startup_clause_set_posting_expressions_method", "CYBLACK-DEFKS-ON-STARTUP-CLAUSE-SET-POSTING-EXPRESSIONS-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_on_startup_clause_add_posting_expression_method", "CYBLACK-DEFKS-ON-STARTUP-CLAUSE-ADD-POSTING-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_on_startup_clause_compile_to_on_startup_method_method", "CYBLACK-DEFKS-ON-STARTUP-CLAUSE-COMPILE-TO-ON-STARTUP-METHOD-METHOD", 2, 0, false);
	declareFunction("get_cyblack_defks_stimulation_cond_clauses", "GET-CYBLACK-DEFKS-STIMULATION-COND-CLAUSES", 1, 0, false);
	declareFunction("set_cyblack_defks_stimulation_cond_clauses", "SET-CYBLACK-DEFKS-STIMULATION-COND-CLAUSES", 2, 0, false);
	declareFunction("get_cyblack_defks_stimulation_cond_arg_list", "GET-CYBLACK-DEFKS-STIMULATION-COND-ARG-LIST", 1, 0, false);
	declareFunction("set_cyblack_defks_stimulation_cond_arg_list", "SET-CYBLACK-DEFKS-STIMULATION-COND-ARG-LIST", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_defks_stimulation_cond_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-STIMULATION-COND-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_defks_stimulation_cond_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-STIMULATION-COND-INSTANCE", 1, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_p", "CYBLACK-DEFKS-STIMULATION-COND-P", 1, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_initialize_method", "CYBLACK-DEFKS-STIMULATION-COND-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_print_method", "CYBLACK-DEFKS-STIMULATION-COND-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_get_arg_list_method", "CYBLACK-DEFKS-STIMULATION-COND-GET-ARG-LIST-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_set_arg_list_method", "CYBLACK-DEFKS-STIMULATION-COND-SET-ARG-LIST-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_add_arg_method", "CYBLACK-DEFKS-STIMULATION-COND-ADD-ARG-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_get_clauses_method", "CYBLACK-DEFKS-STIMULATION-COND-GET-CLAUSES-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_set_clauses_method", "CYBLACK-DEFKS-STIMULATION-COND-SET-CLAUSES-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_add_clause_method", "CYBLACK-DEFKS-STIMULATION-COND-ADD-CLAUSE-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_distribute_binding_info_method", "CYBLACK-DEFKS-STIMULATION-COND-DISTRIBUTE-BINDING-INFO-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_compile_to_create_proposals_method_body_method", "CYBLACK-DEFKS-STIMULATION-COND-COMPILE-TO-CREATE-PROPOSALS-METHOD-BODY-METHOD", 4, 0, false);
	declareFunction("get_cyblack_defks_stimulation_cond_arg_arg", "GET-CYBLACK-DEFKS-STIMULATION-COND-ARG-ARG", 1, 0, false);
	declareFunction("set_cyblack_defks_stimulation_cond_arg_arg", "SET-CYBLACK-DEFKS-STIMULATION-COND-ARG-ARG", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_defks_stimulation_cond_arg_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-STIMULATION-COND-ARG-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_defks_stimulation_cond_arg_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-STIMULATION-COND-ARG-INSTANCE", 1, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_arg_p", "CYBLACK-DEFKS-STIMULATION-COND-ARG-P", 1, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_arg_initialize_method", "CYBLACK-DEFKS-STIMULATION-COND-ARG-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_arg_print_method", "CYBLACK-DEFKS-STIMULATION-COND-ARG-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_arg_get_arg_method", "CYBLACK-DEFKS-STIMULATION-COND-ARG-GET-ARG-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_arg_set_arg_method", "CYBLACK-DEFKS-STIMULATION-COND-ARG-SET-ARG-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_defks_stimulation_cond_clause_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-STIMULATION-COND-CLAUSE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_defks_stimulation_cond_clause_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-STIMULATION-COND-CLAUSE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_clause_p", "CYBLACK-DEFKS-STIMULATION-COND-CLAUSE-P", 1, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_clause_distribute_binding_info_method", "CYBLACK-DEFKS-STIMULATION-COND-CLAUSE-DISTRIBUTE-BINDING-INFO-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_stimulation_cond_clause_compile_create_proposals_clause_method", "CYBLACK-DEFKS-STIMULATION-COND-CLAUSE-COMPILE-CREATE-PROPOSALS-CLAUSE-METHOD", 2, 0, false);
	declareFunction("get_cyblack_defks_when_clause_on_propose_body", "GET-CYBLACK-DEFKS-WHEN-CLAUSE-ON-PROPOSE-BODY", 1, 0, false);
	declareFunction("set_cyblack_defks_when_clause_on_propose_body", "SET-CYBLACK-DEFKS-WHEN-CLAUSE-ON-PROPOSE-BODY", 2, 0, false);
	declareFunction("get_cyblack_defks_when_clause_lisp_expression", "GET-CYBLACK-DEFKS-WHEN-CLAUSE-LISP-EXPRESSION", 1, 0, false);
	declareFunction("set_cyblack_defks_when_clause_lisp_expression", "SET-CYBLACK-DEFKS-WHEN-CLAUSE-LISP-EXPRESSION", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_defks_when_clause_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-WHEN-CLAUSE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_defks_when_clause_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-WHEN-CLAUSE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_defks_when_clause_p", "CYBLACK-DEFKS-WHEN-CLAUSE-P", 1, 0, false);
	declareFunction("cyblack_defks_when_clause_initialize_method", "CYBLACK-DEFKS-WHEN-CLAUSE-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_when_clause_print_method", "CYBLACK-DEFKS-WHEN-CLAUSE-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_defks_when_clause_get_lisp_expression_method", "CYBLACK-DEFKS-WHEN-CLAUSE-GET-LISP-EXPRESSION-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_when_clause_set_lisp_expression_method", "CYBLACK-DEFKS-WHEN-CLAUSE-SET-LISP-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_when_clause_get_on_propose_body_method", "CYBLACK-DEFKS-WHEN-CLAUSE-GET-ON-PROPOSE-BODY-METHOD", 1, 0, false);
	declareFunction("cyblack_defks_when_clause_set_on_propose_body_method", "CYBLACK-DEFKS-WHEN-CLAUSE-SET-ON-PROPOSE-BODY-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_when_clause_distribute_binding_info_method", "CYBLACK-DEFKS-WHEN-CLAUSE-DISTRIBUTE-BINDING-INFO-METHOD", 2, 0, false);
	declareFunction("cyblack_defks_when_clause_compile_create_proposals_clause_method", "CYBLACK-DEFKS-WHEN-CLAUSE-COMPILE-CREATE-PROPOSALS-CLAUSE-METHOD", 2, 0, false);
	declareFunction("get_cyblack_on_propose_body_on_propose_expressions", "GET-CYBLACK-ON-PROPOSE-BODY-ON-PROPOSE-EXPRESSIONS", 1, 0, false);
	declareFunction("set_cyblack_on_propose_body_on_propose_expressions", "SET-CYBLACK-ON-PROPOSE-BODY-ON-PROPOSE-EXPRESSIONS", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_on_propose_body_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ON-PROPOSE-BODY-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_on_propose_body_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ON-PROPOSE-BODY-INSTANCE", 1, 0, false);
	declareFunction("cyblack_on_propose_body_p", "CYBLACK-ON-PROPOSE-BODY-P", 1, 0, false);
	declareFunction("cyblack_on_propose_body_initialize_method", "CYBLACK-ON-PROPOSE-BODY-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_on_propose_body_print_method", "CYBLACK-ON-PROPOSE-BODY-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_on_propose_body_get_on_propose_expressions_method", "CYBLACK-ON-PROPOSE-BODY-GET-ON-PROPOSE-EXPRESSIONS-METHOD", 1, 0, false);
	declareFunction("cyblack_on_propose_body_recursively_set_on_propose_expression_parent_method", "CYBLACK-ON-PROPOSE-BODY-RECURSIVELY-SET-ON-PROPOSE-EXPRESSION-PARENT-METHOD", 2, 0, false);
	declareFunction("cyblack_on_propose_body_recursively_set_on_propose_expressions_parent_method", "CYBLACK-ON-PROPOSE-BODY-RECURSIVELY-SET-ON-PROPOSE-EXPRESSIONS-PARENT-METHOD", 2, 0, false);
	declareFunction("cyblack_on_propose_body_set_on_propose_expressions_method", "CYBLACK-ON-PROPOSE-BODY-SET-ON-PROPOSE-EXPRESSIONS-METHOD", 2, 0, false);
	declareFunction("cyblack_on_propose_body_add_on_propose_expression_method", "CYBLACK-ON-PROPOSE-BODY-ADD-ON-PROPOSE-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("cyblack_on_propose_body_remove_on_propose_expression_method", "CYBLACK-ON-PROPOSE-BODY-REMOVE-ON-PROPOSE-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("cyblack_on_propose_body_distribute_binding_info_method", "CYBLACK-ON-PROPOSE-BODY-DISTRIBUTE-BINDING-INFO-METHOD", 2, 0, false);
	declareFunction("cyblack_traverse_on_propose_expression_distributing_binding_info", "CYBLACK-TRAVERSE-ON-PROPOSE-EXPRESSION-DISTRIBUTING-BINDING-INFO", 2, 0, false);
	declareFunction("cyblack_on_propose_body_compile_create_proposals_on_propose_body_method", "CYBLACK-ON-PROPOSE-BODY-COMPILE-CREATE-PROPOSALS-ON-PROPOSE-BODY-METHOD", 2, 0, false);
	declareFunction("compile_on_propose_expression", "COMPILE-ON-PROPOSE-EXPRESSION", 2, 0, false);
	declareFunction("cyblack_datatype_list_p", "CYBLACK-DATATYPE-LIST-P", 1, 0, false);
	declareFunction("get_cyblack_on_propose_expression_bound_variables", "GET-CYBLACK-ON-PROPOSE-EXPRESSION-BOUND-VARIABLES", 1, 0, false);
	declareFunction("set_cyblack_on_propose_expression_bound_variables", "SET-CYBLACK-ON-PROPOSE-EXPRESSION-BOUND-VARIABLES", 2, 0, false);
	declareFunction("get_cyblack_on_propose_expression_on_accept_expression", "GET-CYBLACK-ON-PROPOSE-EXPRESSION-ON-ACCEPT-EXPRESSION", 1, 0, false);
	declareFunction("set_cyblack_on_propose_expression_on_accept_expression", "SET-CYBLACK-ON-PROPOSE-EXPRESSION-ON-ACCEPT-EXPRESSION", 2, 0, false);
	declareFunction("get_cyblack_on_propose_expression_reason_list", "GET-CYBLACK-ON-PROPOSE-EXPRESSION-REASON-LIST", 1, 0, false);
	declareFunction("set_cyblack_on_propose_expression_reason_list", "SET-CYBLACK-ON-PROPOSE-EXPRESSION-REASON-LIST", 2, 0, false);
	declareFunction("get_cyblack_on_propose_expression_datatype_list", "GET-CYBLACK-ON-PROPOSE-EXPRESSION-DATATYPE-LIST", 1, 0, false);
	declareFunction("set_cyblack_on_propose_expression_datatype_list", "SET-CYBLACK-ON-PROPOSE-EXPRESSION-DATATYPE-LIST", 2, 0, false);
	declareFunction("get_cyblack_on_propose_expression_expression_index", "GET-CYBLACK-ON-PROPOSE-EXPRESSION-EXPRESSION-INDEX", 1, 0, false);
	declareFunction("set_cyblack_on_propose_expression_expression_index", "SET-CYBLACK-ON-PROPOSE-EXPRESSION-EXPRESSION-INDEX", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_on_propose_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ON-PROPOSE-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_on_propose_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ON-PROPOSE-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_on_propose_expression_p", "CYBLACK-ON-PROPOSE-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_set_bound_variables", "CYBLACK-SET-BOUND-VARIABLES", 2, 0, false);
	declareFunction("cyblack_on_propose_expression_initialize_method", "CYBLACK-ON-PROPOSE-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_on_propose_expression_print_method", "CYBLACK-ON-PROPOSE-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_on_propose_expression_get_expression_index_method", "CYBLACK-ON-PROPOSE-EXPRESSION-GET-EXPRESSION-INDEX-METHOD", 1, 0, false);
	declareFunction("cyblack_on_propose_expression_set_expression_index_method", "CYBLACK-ON-PROPOSE-EXPRESSION-SET-EXPRESSION-INDEX-METHOD", 2, 0, false);
	declareFunction("cyblack_on_propose_expression_get_datatype_list_method", "CYBLACK-ON-PROPOSE-EXPRESSION-GET-DATATYPE-LIST-METHOD", 1, 0, false);
	declareFunction("cyblack_on_propose_expression_set_datatype_list_method", "CYBLACK-ON-PROPOSE-EXPRESSION-SET-DATATYPE-LIST-METHOD", 2, 0, false);
	declareFunction("cyblack_on_propose_expression_get_reason_list_method", "CYBLACK-ON-PROPOSE-EXPRESSION-GET-REASON-LIST-METHOD", 1, 0, false);
	declareFunction("cyblack_on_propose_expression_set_reason_list_method", "CYBLACK-ON-PROPOSE-EXPRESSION-SET-REASON-LIST-METHOD", 2, 0, false);
	declareFunction("cyblack_on_propose_expression_get_on_accept_expression_method", "CYBLACK-ON-PROPOSE-EXPRESSION-GET-ON-ACCEPT-EXPRESSION-METHOD", 1, 0, false);
	declareFunction("cyblack_on_propose_expression_set_on_accept_expression_method", "CYBLACK-ON-PROPOSE-EXPRESSION-SET-ON-ACCEPT-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("cyblack_on_propose_expression_compile_on_propose_expression_method", "CYBLACK-ON-PROPOSE-EXPRESSION-COMPILE-ON-PROPOSE-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("cyblack_on_propose_expression_get_execute_method_bindings_method", "CYBLACK-ON-PROPOSE-EXPRESSION-GET-EXECUTE-METHOD-BINDINGS-METHOD", 2, 0, false);
	declareFunction("cyblack_on_propose_expression_get_silence_statements_method", "CYBLACK-ON-PROPOSE-EXPRESSION-GET-SILENCE-STATEMENTS-METHOD", 1, 0, false);
	declareFunction("cyblack_on_propose_expression_list_p", "CYBLACK-ON-PROPOSE-EXPRESSION-LIST-P", 1, 0, false);
	declareFunction("cyblack_datatype_string_p", "CYBLACK-DATATYPE-STRING-P", 1, 0, false);
	declareFunction("cyblack_slot_initializations_p", "CYBLACK-SLOT-INITIALIZATIONS-P", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_action_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ACTION-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_action_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ACTION-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_action_expression_p", "CYBLACK-ACTION-EXPRESSION-P", 1, 0, false);
	declareFunction("get_cyblack_posting_action_expression_posting_reference_expression", "GET-CYBLACK-POSTING-ACTION-EXPRESSION-POSTING-REFERENCE-EXPRESSION", 1, 0, false);
	declareFunction("set_cyblack_posting_action_expression_posting_reference_expression", "SET-CYBLACK-POSTING-ACTION-EXPRESSION-POSTING-REFERENCE-EXPRESSION", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_posting_action_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-ACTION-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_posting_action_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-ACTION-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_posting_action_expression_p", "CYBLACK-POSTING-ACTION-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_posting_action_expression_initialize_method", "CYBLACK-POSTING-ACTION-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_posting_action_expression_get_posting_reference_expression_method", "CYBLACK-POSTING-ACTION-EXPRESSION-GET-POSTING-REFERENCE-EXPRESSION-METHOD", 1, 0, false);
	declareFunction("cyblack_posting_action_expression_set_posting_reference_expression_method", "CYBLACK-POSTING-ACTION-EXPRESSION-SET-POSTING-REFERENCE-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_deactivate_expr_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEACTIVATE-EXPR-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_deactivate_expr_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEACTIVATE-EXPR-INSTANCE", 1, 0, false);
	declareFunction("cyblack_deactivate_expr_p", "CYBLACK-DEACTIVATE-EXPR-P", 1, 0, false);
	declareFunction("cyblack_deactivate_expr_print_method", "CYBLACK-DEACTIVATE-EXPR-PRINT-METHOD", 3, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_removal_expr_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-REMOVAL-EXPR-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_removal_expr_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-REMOVAL-EXPR-INSTANCE", 1, 0, false);
	declareFunction("cyblack_removal_expr_p", "CYBLACK-REMOVAL-EXPR-P", 1, 0, false);
	declareFunction("cyblack_removal_expr_print_method", "CYBLACK-REMOVAL-EXPR-PRINT-METHOD", 3, 0, false);
	declareFunction("get_cyblack_posting_expr_immutable_expression", "GET-CYBLACK-POSTING-EXPR-IMMUTABLE-EXPRESSION", 1, 0, false);
	declareFunction("set_cyblack_posting_expr_immutable_expression", "SET-CYBLACK-POSTING-EXPR-IMMUTABLE-EXPRESSION", 2, 0, false);
	declareFunction("get_cyblack_posting_expr_confidence_expression", "GET-CYBLACK-POSTING-EXPR-CONFIDENCE-EXPRESSION", 1, 0, false);
	declareFunction("set_cyblack_posting_expr_confidence_expression", "SET-CYBLACK-POSTING-EXPR-CONFIDENCE-EXPRESSION", 2, 0, false);
	declareFunction("get_cyblack_posting_expr_slot_initializations", "GET-CYBLACK-POSTING-EXPR-SLOT-INITIALIZATIONS", 1, 0, false);
	declareFunction("set_cyblack_posting_expr_slot_initializations", "SET-CYBLACK-POSTING-EXPR-SLOT-INITIALIZATIONS", 2, 0, false);
	declareFunction("get_cyblack_posting_expr_datatype_string", "GET-CYBLACK-POSTING-EXPR-DATATYPE-STRING", 1, 0, false);
	declareFunction("set_cyblack_posting_expr_datatype_string", "SET-CYBLACK-POSTING-EXPR-DATATYPE-STRING", 2, 0, false);
	declareFunction("get_cyblack_posting_expr_compute_confidence", "GET-CYBLACK-POSTING-EXPR-COMPUTE-CONFIDENCE", 1, 0, false);
	declareFunction("set_cyblack_posting_expr_compute_confidence", "SET-CYBLACK-POSTING-EXPR-COMPUTE-CONFIDENCE", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_posting_expr_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-EXPR-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_posting_expr_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-EXPR-INSTANCE", 1, 0, false);
	declareFunction("cyblack_posting_expr_p", "CYBLACK-POSTING-EXPR-P", 1, 0, false);
	declareFunction("cyblack_posting_expr_list_p", "CYBLACK-POSTING-EXPR-LIST-P", 1, 0, false);
	declareFunction("cyblack_posting_expr_initialize_method", "CYBLACK-POSTING-EXPR-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_posting_expr_print_method", "CYBLACK-POSTING-EXPR-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_posting_expr_get_datatype_string_method", "CYBLACK-POSTING-EXPR-GET-DATATYPE-STRING-METHOD", 1, 0, false);
	declareFunction("cyblack_posting_expr_set_datatype_string_method", "CYBLACK-POSTING-EXPR-SET-DATATYPE-STRING-METHOD", 2, 0, false);
	declareFunction("cyblack_posting_expr_get_slot_initializations_method", "CYBLACK-POSTING-EXPR-GET-SLOT-INITIALIZATIONS-METHOD", 1, 0, false);
	declareFunction("cyblack_posting_expr_set_slot_initializations_method", "CYBLACK-POSTING-EXPR-SET-SLOT-INITIALIZATIONS-METHOD", 2, 0, false);
	declareFunction("cyblack_posting_expr_add_slot_initializations_method", "CYBLACK-POSTING-EXPR-ADD-SLOT-INITIALIZATIONS-METHOD", 3, 0, false);
	declareFunction("cyblack_posting_expr_remove_slot_initializations_method", "CYBLACK-POSTING-EXPR-REMOVE-SLOT-INITIALIZATIONS-METHOD", 2, 0, false);
	declareFunction("cyblack_posting_expr_get_confidence_expression_method", "CYBLACK-POSTING-EXPR-GET-CONFIDENCE-EXPRESSION-METHOD", 1, 0, false);
	declareFunction("cyblack_posting_expr_set_confidence_expression_method", "CYBLACK-POSTING-EXPR-SET-CONFIDENCE-EXPRESSION-METHOD", 2, 1, false);
	declareFunction("cyblack_posting_expr_get_immutable_expression_method", "CYBLACK-POSTING-EXPR-GET-IMMUTABLE-EXPRESSION-METHOD", 1, 0, false);
	declareFunction("cyblack_posting_expr_set_immutable_expression_method", "CYBLACK-POSTING-EXPR-SET-IMMUTABLE-EXPRESSION-METHOD", 2, 0, false);
	declareFunction("cyblack_posting_expr_get_execute_method_bindings_method", "CYBLACK-POSTING-EXPR-GET-EXECUTE-METHOD-BINDINGS-METHOD", 2, 0, false);
	declareFunction("cyblack_posting_expr_get_silence_statements_method", "CYBLACK-POSTING-EXPR-GET-SILENCE-STATEMENTS-METHOD", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_set_result_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SET-RESULT-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_set_result_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SET-RESULT-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_set_result_expression_p", "CYBLACK-SET-RESULT-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_set_result_expression_print_method", "CYBLACK-SET-RESULT-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_return_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-RETURN-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_return_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-RETURN-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_return_expression_p", "CYBLACK-RETURN-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_return_expression_print_method", "CYBLACK-RETURN-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("get_cyblack_reset_action_expression_destination_list", "GET-CYBLACK-RESET-ACTION-EXPRESSION-DESTINATION-LIST", 1, 0, false);
	declareFunction("set_cyblack_reset_action_expression_destination_list", "SET-CYBLACK-RESET-ACTION-EXPRESSION-DESTINATION-LIST", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_reset_action_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-RESET-ACTION-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_reset_action_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-RESET-ACTION-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_reset_action_expression_p", "CYBLACK-RESET-ACTION-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_reset_action_expression_initialize_method", "CYBLACK-RESET-ACTION-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_reset_action_expression_print_method", "CYBLACK-RESET-ACTION-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_reset_action_expression_get_destination_list_method", "CYBLACK-RESET-ACTION-EXPRESSION-GET-DESTINATION-LIST-METHOD", 1, 0, false);
	declareFunction("cyblack_reset_action_expression_set_destination_list_method", "CYBLACK-RESET-ACTION-EXPRESSION-SET-DESTINATION-LIST-METHOD", 2, 0, false);
	declareFunction("get_cyblack_error_expression_error_args", "GET-CYBLACK-ERROR-EXPRESSION-ERROR-ARGS", 1, 0, false);
	declareFunction("set_cyblack_error_expression_error_args", "SET-CYBLACK-ERROR-EXPRESSION-ERROR-ARGS", 2, 0, false);
	declareFunction("get_cyblack_error_expression_error_string", "GET-CYBLACK-ERROR-EXPRESSION-ERROR-STRING", 1, 0, false);
	declareFunction("set_cyblack_error_expression_error_string", "SET-CYBLACK-ERROR-EXPRESSION-ERROR-STRING", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_error_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ERROR-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_error_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ERROR-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_error_expression_p", "CYBLACK-ERROR-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_error_expression_initialize_method", "CYBLACK-ERROR-EXPRESSION-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_error_expression_print_method", "CYBLACK-ERROR-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_error_expression_get_error_string_method", "CYBLACK-ERROR-EXPRESSION-GET-ERROR-STRING-METHOD", 1, 0, false);
	declareFunction("cyblack_error_expression_set_error_string_method", "CYBLACK-ERROR-EXPRESSION-SET-ERROR-STRING-METHOD", 2, 0, false);
	declareFunction("cyblack_error_expression_get_error_args_method", "CYBLACK-ERROR-EXPRESSION-GET-ERROR-ARGS-METHOD", 1, 0, false);
	declareFunction("cyblack_error_expression_set_error_args_method", "CYBLACK-ERROR-EXPRESSION-SET-ERROR-ARGS-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_halt_expression_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-HALT-EXPRESSION-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_halt_expression_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-HALT-EXPRESSION-INSTANCE", 1, 0, false);
	declareFunction("cyblack_halt_expression_p", "CYBLACK-HALT-EXPRESSION-P", 1, 0, false);
	declareFunction("cyblack_halt_expression_print_method", "CYBLACK-HALT-EXPRESSION-PRINT-METHOD", 3, 0, false);
	declareMacro("report_parse_stage", "REPORT-PARSE-STAGE");
	declareFunction("parse_cyblack_defks_body", "PARSE-CYBLACK-DEFKS-BODY", 1, 0, false);
	declareFunction("parse_cyblack_defks_on_startup_clause", "PARSE-CYBLACK-DEFKS-ON-STARTUP-CLAUSE", 1, 0, false);
	declareFunction("parse_cyblack_defks_stimulation_cond", "PARSE-CYBLACK-DEFKS-STIMULATION-COND", 1, 0, false);
	declareFunction("parse_cyblack_defks_stimulation_cond_parameter_list", "PARSE-CYBLACK-DEFKS-STIMULATION-COND-PARAMETER-LIST", 1, 0, false);
	declareFunction("parse_cyblack_defks_stimulation_cond_arg", "PARSE-CYBLACK-DEFKS-STIMULATION-COND-ARG", 1, 0, false);
	declareFunction("parse_cyblack_defks_stimulation_cond_when_clauses", "PARSE-CYBLACK-DEFKS-STIMULATION-COND-WHEN-CLAUSES", 1, 0, false);
	declareFunction("parse_cyblack_defks_stimulation_cond_when_clause", "PARSE-CYBLACK-DEFKS-STIMULATION-COND-WHEN-CLAUSE", 1, 0, false);
	declareFunction("parse_cyblack_when_clause_on_propose_body", "PARSE-CYBLACK-WHEN-CLAUSE-ON-PROPOSE-BODY", 1, 1, false);
	declareFunction("parse_cyblack_on_propose_expression", "PARSE-CYBLACK-ON-PROPOSE-EXPRESSION", 1, 1, false);
	declareFunction("parse_propose_expression", "PARSE-PROPOSE-EXPRESSION", 1, 1, false);
	declareFunction("parse_datatype_list", "PARSE-DATATYPE-LIST", 1, 0, false);
	declareFunction("parse_posting_expression", "PARSE-POSTING-EXPRESSION", 1, 1, false);
	declareFunction("parse_post_expression", "PARSE-POST-EXPRESSION", 1, 1, false);
	declareFunction("parse_unpost_expression", "PARSE-UNPOST-EXPRESSION", 1, 1, false);
	declareFunction("parse_deactivate_expression", "PARSE-DEACTIVATE-EXPRESSION", 1, 1, false);
	declareFunction("parse_set_result_expression", "PARSE-SET-RESULT-EXPRESSION", 1, 1, false);
	declareFunction("parse_return_expression", "PARSE-RETURN-EXPRESSION", 1, 1, false);
	declareFunction("parse_reset_action_expression", "PARSE-RESET-ACTION-EXPRESSION", 1, 1, false);
	declareFunction("parse_error_expression", "PARSE-ERROR-EXPRESSION", 1, 1, false);
	declareFunction("parse_halt_expression", "PARSE-HALT-EXPRESSION", 1, 1, false);
	declareFunction("get_cyblack_ks_factory_added_declarations_for_ks_class", "GET-CYBLACK-KS-FACTORY-ADDED-DECLARATIONS-FOR-KS-CLASS", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_added_declarations_for_ks_class", "SET-CYBLACK-KS-FACTORY-ADDED-DECLARATIONS-FOR-KS-CLASS", 2, 0, false);
	declareFunction("get_cyblack_ks_factory_port_id", "GET-CYBLACK-KS-FACTORY-PORT-ID", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_port_id", "SET-CYBLACK-KS-FACTORY-PORT-ID", 2, 0, false);
	declareFunction("get_cyblack_ks_factory_external_module_name", "GET-CYBLACK-KS-FACTORY-EXTERNAL-MODULE-NAME", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_external_module_name", "SET-CYBLACK-KS-FACTORY-EXTERNAL-MODULE-NAME", 2, 0, false);
	declareFunction("get_cyblack_ks_factory_parsed_body", "GET-CYBLACK-KS-FACTORY-PARSED-BODY", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_parsed_body", "SET-CYBLACK-KS-FACTORY-PARSED-BODY", 2, 0, false);
	declareFunction("get_cyblack_ks_factory_unparsed_body", "GET-CYBLACK-KS-FACTORY-UNPARSED-BODY", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_unparsed_body", "SET-CYBLACK-KS-FACTORY-UNPARSED-BODY", 2, 0, false);
	declareFunction("get_cyblack_ks_factory_parser_function", "GET-CYBLACK-KS-FACTORY-PARSER-FUNCTION", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_parser_function", "SET-CYBLACK-KS-FACTORY-PARSER-FUNCTION", 2, 0, false);
	declareFunction("get_cyblack_ks_factory_precondition_pattern", "GET-CYBLACK-KS-FACTORY-PRECONDITION-PATTERN", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_precondition_pattern", "SET-CYBLACK-KS-FACTORY-PRECONDITION-PATTERN", 2, 0, false);
	declareFunction("get_cyblack_ks_factory_interface_names", "GET-CYBLACK-KS-FACTORY-INTERFACE-NAMES", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_interface_names", "SET-CYBLACK-KS-FACTORY-INTERFACE-NAMES", 2, 0, false);
	declareFunction("get_cyblack_ks_factory_super_ksi_name", "GET-CYBLACK-KS-FACTORY-SUPER-KSI-NAME", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_super_ksi_name", "SET-CYBLACK-KS-FACTORY-SUPER-KSI-NAME", 2, 0, false);
	declareFunction("get_cyblack_ks_factory_ksi_name", "GET-CYBLACK-KS-FACTORY-KSI-NAME", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_ksi_name", "SET-CYBLACK-KS-FACTORY-KSI-NAME", 2, 0, false);
	declareFunction("get_cyblack_ks_factory_super_proposal_name", "GET-CYBLACK-KS-FACTORY-SUPER-PROPOSAL-NAME", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_super_proposal_name", "SET-CYBLACK-KS-FACTORY-SUPER-PROPOSAL-NAME", 2, 0, false);
	declareFunction("get_cyblack_ks_factory_proposal_name", "GET-CYBLACK-KS-FACTORY-PROPOSAL-NAME", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_proposal_name", "SET-CYBLACK-KS-FACTORY-PROPOSAL-NAME", 2, 0, false);
	declareFunction("get_cyblack_ks_factory_super_ks_name", "GET-CYBLACK-KS-FACTORY-SUPER-KS-NAME", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_super_ks_name", "SET-CYBLACK-KS-FACTORY-SUPER-KS-NAME", 2, 0, false);
	declareFunction("get_cyblack_ks_factory_super_ks_root_name", "GET-CYBLACK-KS-FACTORY-SUPER-KS-ROOT-NAME", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_super_ks_root_name", "SET-CYBLACK-KS-FACTORY-SUPER-KS-ROOT-NAME", 2, 0, false);
	declareFunction("get_cyblack_ks_factory_ks_name", "GET-CYBLACK-KS-FACTORY-KS-NAME", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_ks_name", "SET-CYBLACK-KS-FACTORY-KS-NAME", 2, 0, false);
	declareFunction("get_cyblack_ks_factory_ks_root_name", "GET-CYBLACK-KS-FACTORY-KS-ROOT-NAME", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_ks_root_name", "SET-CYBLACK-KS-FACTORY-KS-ROOT-NAME", 2, 0, false);
	declareFunction("get_cyblack_ks_factory_assistant", "GET-CYBLACK-KS-FACTORY-ASSISTANT", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_assistant", "SET-CYBLACK-KS-FACTORY-ASSISTANT", 2, 0, false);
	declareFunction("get_cyblack_ks_factory_external_p", "GET-CYBLACK-KS-FACTORY-EXTERNAL-P", 1, 0, false);
	declareFunction("set_cyblack_ks_factory_external_p", "SET-CYBLACK-KS-FACTORY-EXTERNAL-P", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_ks_factory_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-KS-FACTORY-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_ks_factory_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-KS-FACTORY-INSTANCE", 1, 0, false);
	declareFunction("cyblack_ks_factory_p", "CYBLACK-KS-FACTORY-P", 1, 0, false);
	declareFunction("cyblack_ks_factory_initialize_method", "CYBLACK-KS-FACTORY-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_assistant_method", "CYBLACK-KS-FACTORY-GET-ASSISTANT-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_assistant_method", "CYBLACK-KS-FACTORY-SET-ASSISTANT-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_get_unifier_class_method", "CYBLACK-KS-FACTORY-GET-UNIFIER-CLASS-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_post_at_will_method", "CYBLACK-KS-FACTORY-GET-POST-AT-WILL-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_post_at_will_method", "CYBLACK-KS-FACTORY-SET-POST-AT-WILL-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_get_ks_root_name_method", "CYBLACK-KS-FACTORY-GET-KS-ROOT-NAME-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_ks_root_name_method", "CYBLACK-KS-FACTORY-SET-KS-ROOT-NAME-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_get_ks_name_method", "CYBLACK-KS-FACTORY-GET-KS-NAME-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_ks_name_method", "CYBLACK-KS-FACTORY-SET-KS-NAME-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_get_super_ks_root_name_method", "CYBLACK-KS-FACTORY-GET-SUPER-KS-ROOT-NAME-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_super_ks_root_name_method", "CYBLACK-KS-FACTORY-SET-SUPER-KS-ROOT-NAME-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_get_super_ks_name_method", "CYBLACK-KS-FACTORY-GET-SUPER-KS-NAME-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_super_ks_name_method", "CYBLACK-KS-FACTORY-SET-SUPER-KS-NAME-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_get_proposal_name_method", "CYBLACK-KS-FACTORY-GET-PROPOSAL-NAME-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_proposal_name_method", "CYBLACK-KS-FACTORY-SET-PROPOSAL-NAME-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_get_super_proposal_name_method", "CYBLACK-KS-FACTORY-GET-SUPER-PROPOSAL-NAME-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_super_proposal_name_method", "CYBLACK-KS-FACTORY-SET-SUPER-PROPOSAL-NAME-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_get_ksi_name_method", "CYBLACK-KS-FACTORY-GET-KSI-NAME-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_ksi_name_method", "CYBLACK-KS-FACTORY-SET-KSI-NAME-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_get_super_ksi_name_method", "CYBLACK-KS-FACTORY-GET-SUPER-KSI-NAME-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_super_ksi_name_method", "CYBLACK-KS-FACTORY-SET-SUPER-KSI-NAME-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_get_interface_names_method", "CYBLACK-KS-FACTORY-GET-INTERFACE-NAMES-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_interface_names_method", "CYBLACK-KS-FACTORY-SET-INTERFACE-NAMES-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_get_precondition_pattern_method", "CYBLACK-KS-FACTORY-GET-PRECONDITION-PATTERN-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_precondition_pattern_method", "CYBLACK-KS-FACTORY-SET-PRECONDITION-PATTERN-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_get_precondition_pattern_vars_method", "CYBLACK-KS-FACTORY-GET-PRECONDITION-PATTERN-VARS-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_parser_function_method", "CYBLACK-KS-FACTORY-GET-PARSER-FUNCTION-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_parser_function_method", "CYBLACK-KS-FACTORY-SET-PARSER-FUNCTION-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_get_unparsed_body_method", "CYBLACK-KS-FACTORY-GET-UNPARSED-BODY-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_unparsed_body_method", "CYBLACK-KS-FACTORY-SET-UNPARSED-BODY-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_get_parsed_body_method", "CYBLACK-KS-FACTORY-GET-PARSED-BODY-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_parsed_body_method", "CYBLACK-KS-FACTORY-SET-PARSED-BODY-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_get_ks_declaration_method", "CYBLACK-KS-FACTORY-GET-KS-DECLARATION-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_ks_initialize_definition_method", "CYBLACK-KS-FACTORY-GET-KS-INITIALIZE-DEFINITION-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_ks_on_startup_definition_method", "CYBLACK-KS-FACTORY-GET-KS-ON-STARTUP-DEFINITION-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_ks_create_proposals_definition_method", "CYBLACK-KS-FACTORY-GET-KS-CREATE-PROPOSALS-DEFINITION-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_ks_generate_ksi_definition_method", "CYBLACK-KS-FACTORY-GET-KS-GENERATE-KSI-DEFINITION-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_ks_method_definitions_method", "CYBLACK-KS-FACTORY-GET-KS-METHOD-DEFINITIONS-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_proposal_declaration_method", "CYBLACK-KS-FACTORY-GET-PROPOSAL-DECLARATION-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_proposal_initialize_definition_method", "CYBLACK-KS-FACTORY-GET-PROPOSAL-INITIALIZE-DEFINITION-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_proposal_generate_ksi_definition_method", "CYBLACK-KS-FACTORY-GET-PROPOSAL-GENERATE-KSI-DEFINITION-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_proposal_method_definitions_method", "CYBLACK-KS-FACTORY-GET-PROPOSAL-METHOD-DEFINITIONS-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_ksi_declaration_method", "CYBLACK-KS-FACTORY-GET-KSI-DECLARATION-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_ksi_initialize_definition_method", "CYBLACK-KS-FACTORY-GET-KSI-INITIALIZE-DEFINITION-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_ksi_create_posting_definition_method", "CYBLACK-KS-FACTORY-GET-KSI-CREATE-POSTING-DEFINITION-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_ksi_execute_definition_method", "CYBLACK-KS-FACTORY-GET-KSI-EXECUTE-DEFINITION-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_ksi_method_definitions_method", "CYBLACK-KS-FACTORY-GET-KSI-METHOD-DEFINITIONS-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_get_external_module_name_method", "CYBLACK-KS-FACTORY-GET-EXTERNAL-MODULE-NAME-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_external_module_name_method", "CYBLACK-KS-FACTORY-SET-EXTERNAL-MODULE-NAME-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_get_port_id_method", "CYBLACK-KS-FACTORY-GET-PORT-ID-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_port_id_method", "CYBLACK-KS-FACTORY-SET-PORT-ID-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_is_external_method", "CYBLACK-KS-FACTORY-IS-EXTERNAL-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_external_method", "CYBLACK-KS-FACTORY-SET-EXTERNAL-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_get_added_declarations_for_ks_class_method", "CYBLACK-KS-FACTORY-GET-ADDED-DECLARATIONS-FOR-KS-CLASS-METHOD", 1, 0, false);
	declareFunction("cyblack_ks_factory_set_added_declarations_for_ks_class_method", "CYBLACK-KS-FACTORY-SET-ADDED-DECLARATIONS-FOR-KS-CLASS-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_add_declaration_for_ks_class_method", "CYBLACK-KS-FACTORY-ADD-DECLARATION-FOR-KS-CLASS-METHOD", 2, 0, false);
	declareFunction("cyblack_ks_factory_has_added_declaration_for_method_p_method", "CYBLACK-KS-FACTORY-HAS-ADDED-DECLARATION-FOR-METHOD-P-METHOD", 2, 0, false);
	declareFunction("ks_name_root_p", "KS-NAME-ROOT-P", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_internal_base_ks_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-INTERNAL-BASE-KS-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_internal_base_ks_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-INTERNAL-BASE-KS-INSTANCE", 1, 0, false);
	declareFunction("cyblack_internal_base_ks_p", "CYBLACK-INTERNAL-BASE-KS-P", 1, 0, false);
	declareFunction("cyblack_internal_base_ks_before_startup_method", "CYBLACK-INTERNAL-BASE-KS-BEFORE-STARTUP-METHOD", 1, 0, false);
	declareFunction("cyblack_internal_base_ks_on_startup_method", "CYBLACK-INTERNAL-BASE-KS-ON-STARTUP-METHOD", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_internal_base_proposal_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-INTERNAL-BASE-PROPOSAL-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_internal_base_proposal_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-INTERNAL-BASE-PROPOSAL-INSTANCE", 1, 0, false);
	declareFunction("cyblack_internal_base_proposal_p", "CYBLACK-INTERNAL-BASE-PROPOSAL-P", 1, 0, false);
	declareFunction("cyblack_internal_base_proposal_initialize_method", "CYBLACK-INTERNAL-BASE-PROPOSAL-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_internal_base_proposal_generate_ksi_method", "CYBLACK-INTERNAL-BASE-PROPOSAL-GENERATE-KSI-METHOD", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_internal_base_ksi_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-INTERNAL-BASE-KSI-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_internal_base_ksi_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-INTERNAL-BASE-KSI-INSTANCE", 1, 0, false);
	declareFunction("cyblack_internal_base_ksi_p", "CYBLACK-INTERNAL-BASE-KSI-P", 1, 0, false);
	declareFunction("cyblack_internal_base_ksi_initialize_method", "CYBLACK-INTERNAL-BASE-KSI-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_internal_base_ksi_create_posting_method", "CYBLACK-INTERNAL-BASE-KSI-CREATE-POSTING-METHOD", 2, 0, false);
	declareFunction("cyblack_internal_base_ksi_execute_method", "CYBLACK-INTERNAL-BASE-KSI-EXECUTE-METHOD", 1, 0, false);
	declareFunction("cyblack_create_defks_assistant", "CYBLACK-CREATE-DEFKS-ASSISTANT", 1, 0, false);
	declareFunction("cyblack_create_defks_assistant_extended", "CYBLACK-CREATE-DEFKS-ASSISTANT-EXTENDED", 5, 0, false);
	declareFunction("cyblack_defks_initialize", "CYBLACK-DEFKS-INITIALIZE", 0, 0, false);
	declareFunction("cyblack_defks_strip_body", "CYBLACK-DEFKS-STRIP-BODY", 1, 0, false);
	declareFunction("cyblack_defks_get_class_body_decls", "CYBLACK-DEFKS-GET-CLASS-BODY-DECLS", 1, 0, false);
	declareFunction("cyblack_expand_knowledge_source_definition", "CYBLACK-EXPAND-KNOWLEDGE-SOURCE-DEFINITION", 3, 0, false);
	declareMacro("define_knowledge_source", "DEFINE-KNOWLEDGE-SOURCE");
	declareFunction("get_cyblack_auto_generated_external_knowledge_source_trace_basic_methods", "GET-CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-TRACE-BASIC-METHODS", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_external_knowledge_source_trace_basic_methods", "SET-CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-TRACE-BASIC-METHODS", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_external_knowledge_source_auto_generated_ks_assistent", "GET-CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-AUTO-GENERATED-KS-ASSISTENT", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_external_knowledge_source_auto_generated_ks_assistent", "SET-CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-AUTO-GENERATED-KS-ASSISTENT", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_auto_generated_external_knowledge_source_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_auto_generated_external_knowledge_source_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-INSTANCE", 1, 0, false);
	declareFunction("cyblack_auto_generated_external_knowledge_source_p", "CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-P", 1, 0, false);
	declareFunction("cyblack_auto_generated_external_knowledge_source_initialize_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_external_knowledge_source_get_auto_generated_ks_assistant_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-GET-AUTO-GENERATED-KS-ASSISTANT-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_external_knowledge_source_set_auto_generated_ks_assistant_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-SET-AUTO-GENERATED-KS-ASSISTANT-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_external_knowledge_source_set_trace_state_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-SET-TRACE-STATE-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_external_knowledge_source_new_proposal_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-NEW-PROPOSAL-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_external_knowledge_source_new_knowledge_source_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-NEW-KNOWLEDGE-SOURCE-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_external_knowledge_source_new_ksi_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-NEW-KSI-METHOD", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_external_proposal_trace_basic_methods", "GET-CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-TRACE-BASIC-METHODS", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_external_proposal_trace_basic_methods", "SET-CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-TRACE-BASIC-METHODS", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_external_proposal_auto_generated_ks_assistent", "GET-CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-AUTO-GENERATED-KS-ASSISTENT", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_external_proposal_auto_generated_ks_assistent", "SET-CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-AUTO-GENERATED-KS-ASSISTENT", 2, 0, false);
	declareFunction("cyblack_auto_generated_external_proposal_set_proposal_index_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-SET-PROPOSAL-INDEX-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_external_proposal_get_proposal_index_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-GET-PROPOSAL-INDEX-METHOD", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_auto_generated_external_proposal_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_auto_generated_external_proposal_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-INSTANCE", 1, 0, false);
	declareFunction("cyblack_auto_generated_external_proposal_p", "CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-P", 1, 0, false);
	declareFunction("cyblack_auto_generated_external_proposal_initialize_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_external_proposal_print_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-PRINT-METHOD", 3, 0, false);
	declareFunction("cyblack_auto_generated_external_proposal_get_auto_generated_ks_assistant_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-GET-AUTO-GENERATED-KS-ASSISTANT-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_external_proposal_set_auto_generated_ks_assistant_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-SET-AUTO-GENERATED-KS-ASSISTANT-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_external_proposal_set_trace_state_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-SET-TRACE-STATE-METHOD", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_external_ksi_proposal", "GET-CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-PROPOSAL", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_external_ksi_proposal", "SET-CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-PROPOSAL", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_external_ksi_trace_basic_methods", "GET-CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-TRACE-BASIC-METHODS", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_external_ksi_trace_basic_methods", "SET-CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-TRACE-BASIC-METHODS", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_external_ksi_is_proposal_auto_generated", "GET-CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-IS-PROPOSAL-AUTO-GENERATED", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_external_ksi_is_proposal_auto_generated", "SET-CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-IS-PROPOSAL-AUTO-GENERATED", 2, 0, false);
	declareFunction("get_cyblack_auto_generated_external_ksi_auto_generated_ks_assistent", "GET-CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-AUTO-GENERATED-KS-ASSISTENT", 1, 0, false);
	declareFunction("set_cyblack_auto_generated_external_ksi_auto_generated_ks_assistent", "SET-CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-AUTO-GENERATED-KS-ASSISTENT", 2, 0, false);
	declareFunction("cyblack_auto_generated_external_ksi_set_ksi_index_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-SET-KSI-INDEX-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_external_ksi_get_ksi_index_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-GET-KSI-INDEX-METHOD", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_auto_generated_external_ksi_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_auto_generated_external_ksi_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-INSTANCE", 1, 0, false);
	declareFunction("cyblack_auto_generated_external_ksi_p", "CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-P", 1, 0, false);
	declareFunction("cyblack_auto_generated_external_ksi_get_auto_generated_ks_assistant_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-GET-AUTO-GENERATED-KS-ASSISTANT-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_external_ksi_set_auto_generated_ks_assistant_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-SET-AUTO-GENERATED-KS-ASSISTANT-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_external_ksi_set_trace_state_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-SET-TRACE-STATE-METHOD", 2, 0, false);
	declareFunction("cyblack_auto_generated_external_ksi_initialize_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_external_ksi_get_proposal_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-GET-PROPOSAL-METHOD", 1, 0, false);
	declareFunction("cyblack_auto_generated_external_ksi_set_proposal_method", "CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-SET-PROPOSAL-METHOD", 2, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_external_base_ks_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXTERNAL-BASE-KS-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_external_base_ks_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXTERNAL-BASE-KS-INSTANCE", 1, 0, false);
	declareFunction("cyblack_external_base_ks_p", "CYBLACK-EXTERNAL-BASE-KS-P", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_external_base_proposal_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXTERNAL-BASE-PROPOSAL-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_external_base_proposal_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXTERNAL-BASE-PROPOSAL-INSTANCE", 1, 0, false);
	declareFunction("cyblack_external_base_proposal_p", "CYBLACK-EXTERNAL-BASE-PROPOSAL-P", 1, 0, false);
	declareFunction("cyblack_external_base_proposal_initialize_method", "CYBLACK-EXTERNAL-BASE-PROPOSAL-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_external_base_proposal_generate_ksi_method", "CYBLACK-EXTERNAL-BASE-PROPOSAL-GENERATE-KSI-METHOD", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_external_base_ksi_class", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXTERNAL-BASE-KSI-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_cyblack_external_base_ksi_instance", "SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXTERNAL-BASE-KSI-INSTANCE", 1, 0, false);
	declareFunction("cyblack_external_base_ksi_p", "CYBLACK-EXTERNAL-BASE-KSI-P", 1, 0, false);
	declareFunction("cyblack_external_base_ksi_initialize_method", "CYBLACK-EXTERNAL-BASE-KSI-INITIALIZE-METHOD", 1, 0, false);
	declareFunction("cyblack_external_base_ksi_create_posting_method", "CYBLACK-EXTERNAL-BASE-KSI-CREATE-POSTING-METHOD", 2, 0, false);
	declareFunction("cyblack_external_base_ksi_execute_method", "CYBLACK-EXTERNAL-BASE-KSI-EXECUTE-METHOD", 1, 0, false);
	declareFunction("cyblack_expand_external_knowledge_source_definition", "CYBLACK-EXPAND-EXTERNAL-KNOWLEDGE-SOURCE-DEFINITION", 2, 0, false);
	declareMacro("define_external_knowledge_source", "DEFINE-EXTERNAL-KNOWLEDGE-SOURCE");
	return NIL;
    }

    public static final SubLObject init_cyblack_defks_file() {
	defconstant("*VALID-CYBLACK-UNIFICATION-MODIFIERS*", $list_alt0);
	defconstant("*VALID-CYBLACK-KS-DEF-OPTIONS*", $list_alt8);
	defconstant("*VALID-CYBLACK-KS-DEF-EXTERNAL-OPTIONS*", $list_alt13);
	defconstant("*VALID-CYBLACK-PROPOSE-EXPRESSION-OPTIONS*", $list_alt18);
	defconstant("*DTP-INTEGER-REFERENCE*", INTEGER_REFERENCE);
	defparameter("*CYBLACK-CURRENT-DEFKS-BODY*", NIL);
	defvar("*CYBLACK-SIMPLE-DO-FORMS*", $list_alt885);
	defvar("*FACTORY*", NIL);
	return NIL;
    }

    public static final SubLObject setup_cyblack_defks_file() {
	enumerations.enumerations_incorporate_definition(CYBLACK_UNIFICATION_MODIFIER, $list_alt0);
	enumerations.enumerations_incorporate_definition(CYBLACK_KS_DEF_OPTION, $list_alt8);
	enumerations.enumerations_incorporate_definition(CYBLACK_KS_DEF_EXTERNAL_OPTION, $list_alt13);
	enumerations.enumerations_incorporate_definition(CYBLACK_PROPOSE_EXPRESSION_OPTION, $list_alt18);
	register_method($print_object_method_table$.getGlobalValue(), $dtp_integer_reference$.getGlobalValue(), symbol_function(INTEGER_REFERENCE_PRINT_FUNCTION_TRAMPOLINE));
	def_csetf(INTEGER_REFERENCE_VALUE, _CSETF_INTEGER_REFERENCE_VALUE);
	identity(INTEGER_REFERENCE);
	interfaces.new_interface(CYBLACK_SIMPLE_ENVIRONMENT_TEMPLATE, NIL, NIL, $list_alt49);
	interfaces.interfaces_add_interface_instance_method(GET_COPY_OF_BINDING_LIST, CYBLACK_SIMPLE_ENVIRONMENT_TEMPLATE, $list_alt51, NIL, $list_alt52);
	interfaces.interfaces_add_interface_instance_method(BIND_VAR, CYBLACK_SIMPLE_ENVIRONMENT_TEMPLATE, $list_alt51, $list_alt54, $list_alt55);
	interfaces.interfaces_add_interface_instance_method(EVAL_VAR, CYBLACK_SIMPLE_ENVIRONMENT_TEMPLATE, $list_alt51, $list_alt57, $list_alt58);
	interfaces.interfaces_add_interface_instance_method(GET_VARIABLES, CYBLACK_SIMPLE_ENVIRONMENT_TEMPLATE, $list_alt51, NIL, $list_alt60);
	interfaces.interfaces_add_interface_instance_method(GET_VALUES, CYBLACK_SIMPLE_ENVIRONMENT_TEMPLATE, $list_alt51, NIL, $list_alt62);
	interfaces.interfaces_add_interface_instance_method(COPY_BINDINGS, CYBLACK_SIMPLE_ENVIRONMENT_TEMPLATE, $list_alt51, $list_alt64, $list_alt65);
	interfaces.interfaces_add_interface_instance_method(GENERATE_FROM_BINDINGS_CODE, CYBLACK_SIMPLE_ENVIRONMENT_TEMPLATE, $list_alt51, $list_alt57, $list_alt67);
	interfaces.interfaces_add_interface_instance_method(GENERATE_TO_BINDINGS_CODE, CYBLACK_SIMPLE_ENVIRONMENT_TEMPLATE, $list_alt51, $list_alt57, $list_alt69);
	interfaces.interfaces_add_interface_instance_method(GENERATE_FROM_BINDINGS_CODE_GIVEN_VARS, CYBLACK_SIMPLE_ENVIRONMENT_TEMPLATE, $list_alt51, $list_alt71, $list_alt72);
	interfaces.interfaces_add_interface_instance_method(GENERATE_TO_BINDINGS_CODE_GIVEN_VARS, CYBLACK_SIMPLE_ENVIRONMENT_TEMPLATE, $list_alt51, $list_alt71, $list_alt74);
	classes.subloop_new_class(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, OBJECT, NIL, NIL, $list_alt81);
	classes.class_set_implements_slot_listeners(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $sym93$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_C);
	classes.subloop_note_instance_initialization_function(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $sym96$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_I);
	subloop_reserved_initialize_cyblack_auto_generated_ks_assistant_class(CYBLACK_AUTO_GENERATED_KS_ASSISTANT);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt98, NIL, $list_alt99);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, INITIALIZE, CYBLACK_AUTO_GENERATED_KS_ASSISTANT_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(GET_KNOWLEDGE_SOURCE_CLASS, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt108, NIL, $list_alt109);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, GET_KNOWLEDGE_SOURCE_CLASS, $sym110$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_KNOWLEDGE_SOURCE_CLASS_ME);
	methods.methods_incorporate_instance_method(SET_KNOWLEDGE_SOURCE_CLASS, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt51, $list_alt112, $list_alt113);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, SET_KNOWLEDGE_SOURCE_CLASS, $sym116$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_KNOWLEDGE_SOURCE_CLASS_ME);
	methods.methods_incorporate_instance_method(GET_PROPOSAL_CLASS, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt108, NIL, $list_alt118);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, GET_PROPOSAL_CLASS, CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_PROPOSAL_CLASS_METHOD);
	methods.methods_incorporate_instance_method(SET_PROPOSAL_CLASS, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt51, $list_alt112, $list_alt121);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, SET_PROPOSAL_CLASS, CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_PROPOSAL_CLASS_METHOD);
	methods.methods_incorporate_instance_method(GET_KNOWLEDGE_SOURCE_INSTANTIATION_CLASS, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt108, NIL, $list_alt126);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, GET_KNOWLEDGE_SOURCE_INSTANTIATION_CLASS, $sym127$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_KNOWLEDGE_SOURCE_INSTANTI);
	methods.methods_incorporate_instance_method(SET_KNOWLEDGE_SOURCE_INSTANTIATION_CLASS, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt51, $list_alt112, $list_alt129);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, SET_KNOWLEDGE_SOURCE_INSTANTIATION_CLASS, $sym132$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_KNOWLEDGE_SOURCE_INSTANTI);
	methods.methods_incorporate_instance_method(GET_POST_AT_WILL, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt108, NIL, $list_alt134);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, GET_POST_AT_WILL, CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_POST_AT_WILL_METHOD);
	methods.methods_incorporate_instance_method(SET_POST_AT_WILL, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt51, $list_alt137, $list_alt138);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, SET_POST_AT_WILL, CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_POST_AT_WILL_METHOD);
	methods.methods_incorporate_instance_method(GET_PRECONDITION_PATTERN, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt108, NIL, $list_alt142);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, GET_PRECONDITION_PATTERN, $sym143$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_PRECONDITION_PATTERN_METH);
	methods.methods_incorporate_instance_method(SET_PRECONDITION_PATTERN, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt51, $list_alt145, $list_alt146);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, SET_PRECONDITION_PATTERN, $sym148$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_PRECONDITION_PATTERN_METH);
	methods.methods_incorporate_instance_method(GET_UNIFICATION_TYPES, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt108, NIL, $list_alt150);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, GET_UNIFICATION_TYPES, CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_UNIFICATION_TYPES_METHOD);
	methods.methods_incorporate_instance_method(SET_UNIFICATION_TYPES, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt51, $list_alt153, $list_alt154);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, SET_UNIFICATION_TYPES, CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_UNIFICATION_TYPES_METHOD);
	methods.methods_incorporate_instance_method(GET_KNOWLEDGE_SOURCE_TYPE, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt108, NIL, $list_alt159);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, GET_KNOWLEDGE_SOURCE_TYPE, $sym160$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_KNOWLEDGE_SOURCE_TYPE_MET);
	methods.methods_incorporate_instance_method(SET_KNOWLEDGE_SOURCE_TYPE, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt51, $list_alt162, $list_alt163);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, SET_KNOWLEDGE_SOURCE_TYPE, $sym166$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_KNOWLEDGE_SOURCE_TYPE_MET);
	methods.methods_incorporate_instance_method(GET_PORT_ID, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt108, NIL, $list_alt168);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, GET_PORT_ID, CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_PORT_ID_METHOD);
	methods.methods_incorporate_instance_method(SET_PORT_ID, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt51, $list_alt171, $list_alt172);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, SET_PORT_ID, CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_PORT_ID_METHOD);
	methods.methods_incorporate_instance_method(GET_EXTERNAL_MODULE_NAME, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt108, NIL, $list_alt176);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, GET_EXTERNAL_MODULE_NAME, $sym177$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_EXTERNAL_MODULE_NAME_METH);
	methods.methods_incorporate_instance_method(SET_EXTERNAL_MODULE_NAME, CYBLACK_AUTO_GENERATED_KS_ASSISTANT, $list_alt51, $list_alt179, $list_alt180);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_KS_ASSISTANT, SET_EXTERNAL_MODULE_NAME, $sym183$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_EXTERNAL_MODULE_NAME_METH);
	interfaces.new_interface(CYBLACK_AUTO_GENERATED_KNOWLEDGE_SOURCE_COMPONENT, NIL, NIL, $list_alt185);
	interfaces.new_interface(CYBLACK_AUTO_GENERATED_KNOWLEDGE_SOURCE, $list_alt187, $list_alt188, NIL);
	interfaces.new_interface(CYBLACK_AUTO_GENERATED_PROPOSAL, $list_alt187, $list_alt188, $list_alt190);
	interfaces.interfaces_add_interface_instance_method(GET_PROPOSAL_INDEX, CYBLACK_AUTO_GENERATED_PROPOSAL, $list_alt51, NIL, $list_alt192);
	interfaces.interfaces_add_interface_instance_method(SET_PROPOSAL_INDEX, CYBLACK_AUTO_GENERATED_PROPOSAL, $list_alt51, $list_alt194, $list_alt195);
	interfaces.new_interface(CYBLACK_AUTO_GENERATED_KSI, $list_alt187, $list_alt188, $list_alt197);
	interfaces.interfaces_add_interface_instance_method(GET_KSI_INDEX, CYBLACK_AUTO_GENERATED_KSI, $list_alt51, NIL, $list_alt192);
	interfaces.interfaces_add_interface_instance_method(SET_KSI_INDEX, CYBLACK_AUTO_GENERATED_KSI, $list_alt51, $list_alt194, $list_alt195);
	classes.subloop_new_class(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, CYBLACK_INTERNAL_KNOWLEDGE_SOURCE, $list_alt201, NIL, $list_alt202);
	classes.class_set_implements_slot_listeners(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, NIL);
	methods.methods_incorporate_instance_method(GENERATE_TO_BINDINGS_CODE_GIVEN_VARS, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt71, $list_alt74);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, GENERATE_TO_BINDINGS_CODE_GIVEN_VARS, $sym211$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GENERATE_TO_BIND);
	methods.methods_incorporate_instance_method(GENERATE_FROM_BINDINGS_CODE_GIVEN_VARS, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt71, $list_alt72);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, GENERATE_FROM_BINDINGS_CODE_GIVEN_VARS, $sym215$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GENERATE_FROM_BI);
	methods.methods_incorporate_instance_method(GENERATE_TO_BINDINGS_CODE, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt57, $list_alt69);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, GENERATE_TO_BINDINGS_CODE, $sym216$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GENERATE_TO_BIND);
	methods.methods_incorporate_instance_method(GENERATE_FROM_BINDINGS_CODE, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt57, $list_alt67);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, GENERATE_FROM_BINDINGS_CODE, $sym217$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GENERATE_FROM_BI);
	methods.methods_incorporate_instance_method(COPY_BINDINGS, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt64, $list_alt65);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, COPY_BINDINGS, $sym219$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_COPY_BINDINGS_ME);
	methods.methods_incorporate_instance_method(GET_VALUES, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt51, NIL, $list_alt62);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, GET_VALUES, $sym220$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GET_VALUES_METHO);
	methods.methods_incorporate_instance_method(GET_VARIABLES, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt51, NIL, $list_alt60);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, GET_VARIABLES, $sym221$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GET_VARIABLES_ME);
	methods.methods_incorporate_instance_method(EVAL_VAR, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt57, $list_alt58);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, EVAL_VAR, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_EVAL_VAR_METHOD);
	methods.methods_incorporate_instance_method(BIND_VAR, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt54, $list_alt55);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, BIND_VAR, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_BIND_VAR_METHOD);
	methods.methods_incorporate_instance_method(GET_COPY_OF_BINDING_LIST, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt51, NIL, $list_alt52);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, GET_COPY_OF_BINDING_LIST, $sym225$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GET_COPY_OF_BIND);
	classes.subloop_note_class_initialization_function(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $sym226$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWL);
	classes.subloop_note_instance_initialization_function(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $sym252$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWL);
	subloop_reserved_initialize_cyblack_auto_generated_internal_knowledge_source_class(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt98, NIL, $list_alt253);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, INITIALIZE, $sym255$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_INITIALIZE_METHO);
	methods.methods_incorporate_instance_method(GET_BINDING_LIST, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt257, NIL, $list_alt258);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, GET_BINDING_LIST, $sym259$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GET_BINDING_LIST);
	methods.methods_incorporate_instance_method(SET_BINDING_LIST, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt98, $list_alt261, $list_alt262);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, SET_BINDING_LIST, $sym265$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_SET_BINDING_LIST);
	methods.methods_incorporate_class_method(GET_AUTO_GENERATED_KS_ASSISTANT, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt267, NIL, $list_alt268);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, GET_AUTO_GENERATED_KS_ASSISTANT, $sym269$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GET_AUTO_GENERAT);
	methods.methods_incorporate_class_method(SET_AUTO_GENERATED_KS_ASSISTANT, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt271, $list_alt272);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, SET_AUTO_GENERATED_KS_ASSISTANT, $sym275$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_SET_AUTO_GENERAT);
	methods.methods_incorporate_instance_method(SET_TRACE_STATE, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt137, $list_alt277);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, SET_TRACE_STATE, $sym279$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_SET_TRACE_STATE_);
	methods.methods_incorporate_class_method(NEW_KNOWLEDGE_SOURCE, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt281, $list_alt282);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, NEW_KNOWLEDGE_SOURCE, $sym289$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_NEW_KNOWLEDGE_SO);
	methods.methods_incorporate_class_method(NEW_PROPOSAL, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt291, $list_alt292);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, NEW_PROPOSAL, $sym302$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_NEW_PROPOSAL_MET);
	methods.methods_incorporate_class_method(NEW_KSI, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt304, $list_alt305);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, NEW_KSI, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_NEW_KSI_METHOD);
	methods.methods_incorporate_instance_method(STIMULATE, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt316, $list_alt317);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, STIMULATE, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_STIMULATE_METHOD);
	methods.methods_incorporate_instance_method(CREATE_PROPOSALS, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt316, $list_alt335);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, CREATE_PROPOSALS, $sym336$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_CREATE_PROPOSALS);
	classes.subloop_new_class(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, CYBLACK_INTERNAL_PROPOSAL, $list_alt338, NIL, $list_alt339);
	classes.class_set_implements_slot_listeners(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, NIL);
	methods.methods_incorporate_instance_method(GENERATE_TO_BINDINGS_CODE_GIVEN_VARS, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt51, $list_alt71, $list_alt74);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, GENERATE_TO_BINDINGS_CODE_GIVEN_VARS, $sym341$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GENERATE_TO_BINDINGS_COD);
	methods.methods_incorporate_instance_method(GENERATE_FROM_BINDINGS_CODE_GIVEN_VARS, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt51, $list_alt71, $list_alt72);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, GENERATE_FROM_BINDINGS_CODE_GIVEN_VARS, $sym342$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GENERATE_FROM_BINDINGS_C);
	methods.methods_incorporate_instance_method(GENERATE_TO_BINDINGS_CODE, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt51, $list_alt57, $list_alt69);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, GENERATE_TO_BINDINGS_CODE, $sym343$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GENERATE_TO_BINDINGS_COD);
	methods.methods_incorporate_instance_method(GENERATE_FROM_BINDINGS_CODE, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt51, $list_alt57, $list_alt67);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, GENERATE_FROM_BINDINGS_CODE, $sym344$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GENERATE_FROM_BINDINGS_C);
	methods.methods_incorporate_instance_method(COPY_BINDINGS, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt51, $list_alt64, $list_alt65);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, COPY_BINDINGS, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_COPY_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUES, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt51, NIL, $list_alt62);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, GET_VALUES, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GET_VALUES_METHOD);
	methods.methods_incorporate_instance_method(GET_VARIABLES, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt51, NIL, $list_alt60);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, GET_VARIABLES, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GET_VARIABLES_METHOD);
	methods.methods_incorporate_instance_method(EVAL_VAR, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt51, $list_alt57, $list_alt58);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, EVAL_VAR, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_EVAL_VAR_METHOD);
	methods.methods_incorporate_instance_method(BIND_VAR, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt51, $list_alt54, $list_alt55);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, BIND_VAR, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_BIND_VAR_METHOD);
	methods.methods_incorporate_instance_method(GET_COPY_OF_BINDING_LIST, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt51, NIL, $list_alt52);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, GET_COPY_OF_BINDING_LIST, $sym350$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GET_COPY_OF_BINDING_LIST);
	classes.subloop_note_class_initialization_function(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $sym351$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_INTERNAL_PROPO);
	classes.subloop_note_instance_initialization_function(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $sym362$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_INTERNAL_PROPO);
	subloop_reserved_initialize_cyblack_auto_generated_internal_proposal_class(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt98, NIL, $list_alt363);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, INITIALIZE, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt51, $list_alt367, $list_alt368);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, PRINT, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_BINDING_LIST, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt257, NIL, $list_alt258);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, GET_BINDING_LIST, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GET_BINDING_LIST_METHOD);
	methods.methods_incorporate_instance_method(SET_BINDING_LIST, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt98, $list_alt261, $list_alt262);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, SET_BINDING_LIST, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_SET_BINDING_LIST_METHOD);
	methods.methods_incorporate_class_method(GET_AUTO_GENERATED_KS_ASSISTANT, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt267, NIL, $list_alt374);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, GET_AUTO_GENERATED_KS_ASSISTANT, $sym375$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GET_AUTO_GENERATED_KS_AS);
	methods.methods_incorporate_class_method(SET_AUTO_GENERATED_KS_ASSISTANT, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt51, $list_alt271, $list_alt272);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, SET_AUTO_GENERATED_KS_ASSISTANT, $sym377$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_SET_AUTO_GENERATED_KS_AS);
	methods.methods_incorporate_instance_method(GET_PROPOSAL_INDEX, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt108, NIL, $list_alt378);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, GET_PROPOSAL_INDEX, $sym379$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GET_PROPOSAL_INDEX_METHO);
	methods.methods_incorporate_instance_method(SET_PROPOSAL_INDEX, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt51, $list_alt194, $list_alt380);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, SET_PROPOSAL_INDEX, $sym383$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_SET_PROPOSAL_INDEX_METHO);
	methods.methods_incorporate_instance_method(SET_TRACE_STATE, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, $list_alt51, $list_alt137, $list_alt277);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, SET_TRACE_STATE, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_SET_TRACE_STATE_METHOD);
	classes.subloop_new_class(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, CYBLACK_BASIC_KSI, $list_alt387, NIL, $list_alt388);
	classes.class_set_implements_slot_listeners(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $sym392$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_C);
	classes.subloop_note_instance_initialization_function(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $sym393$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_I);
	subloop_reserved_initialize_cyblack_auto_generated_internal_ksi_class(CYBLACK_AUTO_GENERATED_INTERNAL_KSI);
	methods.methods_incorporate_instance_method(GET_BINDING_LIST, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt257, NIL, $list_alt394);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, GET_BINDING_LIST, CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GET_BINDING_LIST_METHOD);
	methods.methods_incorporate_instance_method(SET_BINDING_LIST, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt257, $list_alt261, $list_alt396);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, SET_BINDING_LIST, CYBLACK_AUTO_GENERATED_INTERNAL_KSI_SET_BINDING_LIST_METHOD);
	methods.methods_incorporate_instance_method(GET_COPY_OF_BINDING_LIST, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt108, NIL, $list_alt398);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, GET_COPY_OF_BINDING_LIST, $sym399$CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GET_COPY_OF_BINDING_LIST_METH);
	methods.methods_incorporate_instance_method(BIND_VAR, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt108, $list_alt54, $list_alt400);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, BIND_VAR, CYBLACK_AUTO_GENERATED_INTERNAL_KSI_BIND_VAR_METHOD);
	methods.methods_incorporate_instance_method(EVAL_VAR, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt108, $list_alt57, $list_alt402);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, EVAL_VAR, CYBLACK_AUTO_GENERATED_INTERNAL_KSI_EVAL_VAR_METHOD);
	methods.methods_incorporate_instance_method(GET_VARIABLES, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt108, NIL, $list_alt404);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, GET_VARIABLES, CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GET_VARIABLES_METHOD);
	methods.methods_incorporate_instance_method(GET_VALUES, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt108, NIL, $list_alt406);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, GET_VALUES, CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GET_VALUES_METHOD);
	methods.methods_incorporate_instance_method(COPY_BINDINGS, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt108, $list_alt64, $list_alt408);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, COPY_BINDINGS, CYBLACK_AUTO_GENERATED_INTERNAL_KSI_COPY_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(GENERATE_FROM_BINDINGS_CODE, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt108, $list_alt57, $list_alt410);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, GENERATE_FROM_BINDINGS_CODE, $sym411$CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GENERATE_FROM_BINDINGS_CODE_M);
	methods.methods_incorporate_instance_method(GENERATE_TO_BINDINGS_CODE, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt108, $list_alt57, $list_alt412);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, GENERATE_TO_BINDINGS_CODE, $sym413$CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GENERATE_TO_BINDINGS_CODE_MET);
	methods.methods_incorporate_instance_method(GENERATE_FROM_BINDINGS_CODE_GIVEN_VARS, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt108, $list_alt71, $list_alt414);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, GENERATE_FROM_BINDINGS_CODE_GIVEN_VARS, $sym415$CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GENERATE_FROM_BINDINGS_CODE_G);
	methods.methods_incorporate_instance_method(GENERATE_TO_BINDINGS_CODE_GIVEN_VARS, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt108, $list_alt71, $list_alt416);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, GENERATE_TO_BINDINGS_CODE_GIVEN_VARS, $sym417$CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GENERATE_TO_BINDINGS_CODE_GIV);
	methods.methods_incorporate_class_method(GET_AUTO_GENERATED_KS_ASSISTANT, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt108, NIL, $list_alt418);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, GET_AUTO_GENERATED_KS_ASSISTANT, $sym419$CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GET_AUTO_GENERATED_KS_ASSISTA);
	methods.methods_incorporate_class_method(SET_AUTO_GENERATED_KS_ASSISTANT, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt51, $list_alt271, $list_alt272);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, SET_AUTO_GENERATED_KS_ASSISTANT, $sym421$CYBLACK_AUTO_GENERATED_INTERNAL_KSI_SET_AUTO_GENERATED_KS_ASSISTA);
	methods.methods_incorporate_instance_method(GET_KSI_INDEX, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt108, NIL, $list_alt422);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, GET_KSI_INDEX, CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GET_KSI_INDEX_METHOD);
	methods.methods_incorporate_instance_method(SET_KSI_INDEX, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt51, $list_alt194, $list_alt424);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, SET_KSI_INDEX, CYBLACK_AUTO_GENERATED_INTERNAL_KSI_SET_KSI_INDEX_METHOD);
	methods.methods_incorporate_instance_method(SET_TRACE_STATE, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt51, $list_alt137, $list_alt277);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, SET_TRACE_STATE, CYBLACK_AUTO_GENERATED_INTERNAL_KSI_SET_TRACE_STATE_METHOD);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt98, NIL, $list_alt430);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, INITIALIZE, CYBLACK_AUTO_GENERATED_INTERNAL_KSI_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(GET_PROPOSAL, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt108, NIL, $list_alt434);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, GET_PROPOSAL, CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GET_PROPOSAL_METHOD);
	methods.methods_incorporate_instance_method(SET_PROPOSAL, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, $list_alt51, $list_alt437, $list_alt438);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_INTERNAL_KSI, SET_PROPOSAL, CYBLACK_AUTO_GENERATED_INTERNAL_KSI_SET_PROPOSAL_METHOD);
	classes.subloop_new_class(CYBLACK_DEFKS_EXPRESSION, OBJECT, NIL, NIL, $list_alt450);
	classes.class_set_implements_slot_listeners(CYBLACK_DEFKS_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_DEFKS_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_DEFKS_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_defks_expression_class(CYBLACK_DEFKS_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_DEFKS_EXPRESSION, $list_alt98, NIL, $list_alt455);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_EXPRESSION, INITIALIZE, CYBLACK_DEFKS_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_DEFKS_EXPRESSION, $list_alt108, $list_alt367, $list_alt458);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_EXPRESSION, PRINT, CYBLACK_DEFKS_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_PARENT, CYBLACK_DEFKS_EXPRESSION, $list_alt108, NIL, $list_alt461);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_EXPRESSION, GET_PARENT, CYBLACK_DEFKS_EXPRESSION_GET_PARENT_METHOD);
	methods.methods_incorporate_instance_method(SET_PARENT, CYBLACK_DEFKS_EXPRESSION, $list_alt51, $list_alt464, $list_alt465);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_EXPRESSION, SET_PARENT, CYBLACK_DEFKS_EXPRESSION_SET_PARENT_METHOD);
	methods.methods_incorporate_instance_method(ADD_CHILD, CYBLACK_DEFKS_EXPRESSION, $list_alt108, $list_alt470, $list_alt471);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_EXPRESSION, ADD_CHILD, CYBLACK_DEFKS_EXPRESSION_ADD_CHILD_METHOD);
	methods.methods_incorporate_instance_method(GET_CHILDREN, CYBLACK_DEFKS_EXPRESSION, $list_alt108, NIL, $list_alt474);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_EXPRESSION, GET_CHILDREN, CYBLACK_DEFKS_EXPRESSION_GET_CHILDREN_METHOD);
	methods.methods_incorporate_instance_method(COMPILE, CYBLACK_DEFKS_EXPRESSION, $list_alt108, NIL, $list_alt192);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_EXPRESSION, COMPILE, CYBLACK_DEFKS_EXPRESSION_COMPILE_METHOD);
	methods.methods_incorporate_instance_method(GET_PROPOSALS_VAR, CYBLACK_DEFKS_EXPRESSION, $list_alt108, NIL, $list_alt479);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_EXPRESSION, GET_PROPOSALS_VAR, CYBLACK_DEFKS_EXPRESSION_GET_PROPOSALS_VAR_METHOD);
	methods.methods_incorporate_instance_method(GET_ENVIRONMENT_VAR, CYBLACK_DEFKS_EXPRESSION, $list_alt108, NIL, $list_alt482);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_EXPRESSION, GET_ENVIRONMENT_VAR, CYBLACK_DEFKS_EXPRESSION_GET_ENVIRONMENT_VAR_METHOD);
	methods.methods_incorporate_instance_method(REGISTER_POSTING_EXPRESSION, CYBLACK_DEFKS_EXPRESSION, $list_alt108, $list_alt485, $list_alt486);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_EXPRESSION, REGISTER_POSTING_EXPRESSION, CYBLACK_DEFKS_EXPRESSION_REGISTER_POSTING_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(GET_INTEGER_REFERENCE, CYBLACK_DEFKS_EXPRESSION, $list_alt108, NIL, $list_alt490);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_EXPRESSION, GET_INTEGER_REFERENCE, CYBLACK_DEFKS_EXPRESSION_GET_INTEGER_REFERENCE_METHOD);
	methods.methods_incorporate_instance_method(GENERATE_TO_BINDINGS_CODE, CYBLACK_DEFKS_EXPRESSION, $list_alt98, $list_alt71, $list_alt492);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_EXPRESSION, GENERATE_TO_BINDINGS_CODE, CYBLACK_DEFKS_EXPRESSION_GENERATE_TO_BINDINGS_CODE_METHOD);
	methods.methods_incorporate_instance_method(GENERATE_FROM_BINDINGS_CODE, CYBLACK_DEFKS_EXPRESSION, $list_alt98, $list_alt71, $list_alt498);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_EXPRESSION, GENERATE_FROM_BINDINGS_CODE, CYBLACK_DEFKS_EXPRESSION_GENERATE_FROM_BINDINGS_CODE_METHOD);
	methods.methods_incorporate_instance_method(GENERATE_NOOP_CALLS, CYBLACK_DEFKS_EXPRESSION, $list_alt51, $list_alt503, $list_alt504);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_EXPRESSION, GENERATE_NOOP_CALLS, CYBLACK_DEFKS_EXPRESSION_GENERATE_NOOP_CALLS_METHOD);
	classes.subloop_new_class(CYBLACK_DEFKS_BODY, CYBLACK_DEFKS_EXPRESSION, NIL, NIL, $list_alt508);
	classes.class_set_implements_slot_listeners(CYBLACK_DEFKS_BODY, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_DEFKS_BODY, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_BODY_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_DEFKS_BODY, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_BODY_INSTANCE);
	subloop_reserved_initialize_cyblack_defks_body_class(CYBLACK_DEFKS_BODY);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_DEFKS_BODY, $list_alt98, NIL, $list_alt519);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, INITIALIZE, CYBLACK_DEFKS_BODY_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_DEFKS_BODY, $list_alt108, $list_alt367, $list_alt524);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, PRINT, CYBLACK_DEFKS_BODY_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_ON_STARTUP_CLAUSE, CYBLACK_DEFKS_BODY, $list_alt51, NIL, $list_alt529);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, GET_ON_STARTUP_CLAUSE, CYBLACK_DEFKS_BODY_GET_ON_STARTUP_CLAUSE_METHOD);
	methods.methods_incorporate_instance_method(SET_ON_STARTUP_CLAUSE, CYBLACK_DEFKS_BODY, $list_alt51, $list_alt533, $list_alt534);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, SET_ON_STARTUP_CLAUSE, CYBLACK_DEFKS_BODY_SET_ON_STARTUP_CLAUSE_METHOD);
	methods.methods_incorporate_instance_method(GET_STIMULATION_COND, CYBLACK_DEFKS_BODY, $list_alt108, NIL, $list_alt539);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, GET_STIMULATION_COND, CYBLACK_DEFKS_BODY_GET_STIMULATION_COND_METHOD);
	methods.methods_incorporate_instance_method(SET_STIMULATION_COND, CYBLACK_DEFKS_BODY, $list_alt542, $list_alt543, $list_alt544);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, SET_STIMULATION_COND, CYBLACK_DEFKS_BODY_SET_STIMULATION_COND_METHOD);
	methods.methods_incorporate_instance_method(DISTRIBUTE_BINDING_INFO, CYBLACK_DEFKS_BODY, $list_alt98, NIL, $list_alt548);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, DISTRIBUTE_BINDING_INFO, CYBLACK_DEFKS_BODY_DISTRIBUTE_BINDING_INFO_METHOD);
	methods.methods_incorporate_instance_method(COMPILE_TO_ON_STARTUP_METHOD, CYBLACK_DEFKS_BODY, $list_alt51, $list_alt552, $list_alt553);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, COMPILE_TO_ON_STARTUP_METHOD, CYBLACK_DEFKS_BODY_COMPILE_TO_ON_STARTUP_METHOD_METHOD);
	methods.methods_incorporate_instance_method(COMPILE_TO_CREATE_PROPOSALS_METHOD, CYBLACK_DEFKS_BODY, $list_alt108, $list_alt552, $list_alt561);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, COMPILE_TO_CREATE_PROPOSALS_METHOD, CYBLACK_DEFKS_BODY_COMPILE_TO_CREATE_PROPOSALS_METHOD_METHOD);
	methods.methods_incorporate_instance_method(COMPILE_TO_EXECUTE_METHOD, CYBLACK_DEFKS_BODY, $list_alt51, $list_alt552, $list_alt569);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, COMPILE_TO_EXECUTE_METHOD, CYBLACK_DEFKS_BODY_COMPILE_TO_EXECUTE_METHOD_METHOD);
	methods.methods_incorporate_instance_method(GET_PROPOSALS_VAR, CYBLACK_DEFKS_BODY, $list_alt108, NIL, $list_alt614);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, GET_PROPOSALS_VAR, CYBLACK_DEFKS_BODY_GET_PROPOSALS_VAR_METHOD);
	methods.methods_incorporate_instance_method(GET_ENVIRONMENT_VAR, CYBLACK_DEFKS_BODY, $list_alt108, NIL, $list_alt616);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, GET_ENVIRONMENT_VAR, CYBLACK_DEFKS_BODY_GET_ENVIRONMENT_VAR_METHOD);
	methods.methods_incorporate_instance_method(REGISTER_POSTING_EXPRESSION, CYBLACK_DEFKS_BODY, $list_alt51, $list_alt485, $list_alt618);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, REGISTER_POSTING_EXPRESSION, CYBLACK_DEFKS_BODY_REGISTER_POSTING_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(GET_POSTING_EXPRESSION_COUNT, CYBLACK_DEFKS_BODY, $list_alt108, NIL, $list_alt622);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, GET_POSTING_EXPRESSION_COUNT, CYBLACK_DEFKS_BODY_GET_POSTING_EXPRESSION_COUNT_METHOD);
	methods.methods_incorporate_instance_method(GET_POSTING_EXPRESSION, CYBLACK_DEFKS_BODY, $list_alt108, $list_alt625, $list_alt626);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, GET_POSTING_EXPRESSION, CYBLACK_DEFKS_BODY_GET_POSTING_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(GET_INTEGER_REFERENCE, CYBLACK_DEFKS_BODY, $list_alt108, NIL, $list_alt628);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, GET_INTEGER_REFERENCE, CYBLACK_DEFKS_BODY_GET_INTEGER_REFERENCE_METHOD);
	methods.methods_incorporate_instance_method(GET_SLOT_DECLARATIONS, CYBLACK_DEFKS_BODY, $list_alt51, NIL, $list_alt631);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, GET_SLOT_DECLARATIONS, CYBLACK_DEFKS_BODY_GET_SLOT_DECLARATIONS_METHOD);
	methods.methods_incorporate_instance_method(SET_SLOT_DECLARATIONS, CYBLACK_DEFKS_BODY, $list_alt51, $list_alt635, $list_alt636);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, SET_SLOT_DECLARATIONS, CYBLACK_DEFKS_BODY_SET_SLOT_DECLARATIONS_METHOD);
	methods.methods_incorporate_instance_method(ADD_SLOT_DECLARATION, CYBLACK_DEFKS_BODY, $list_alt51, $list_alt642, $list_alt643);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, ADD_SLOT_DECLARATION, CYBLACK_DEFKS_BODY_ADD_SLOT_DECLARATION_METHOD);
	methods.methods_incorporate_instance_method(GET_METHOD_DEFINITIONS, CYBLACK_DEFKS_BODY, $list_alt51, NIL, $list_alt648);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, GET_METHOD_DEFINITIONS, CYBLACK_DEFKS_BODY_GET_METHOD_DEFINITIONS_METHOD);
	methods.methods_incorporate_instance_method(SET_METHOD_DEFINITIONS, CYBLACK_DEFKS_BODY, $list_alt51, $list_alt652, $list_alt653);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, SET_METHOD_DEFINITIONS, CYBLACK_DEFKS_BODY_SET_METHOD_DEFINITIONS_METHOD);
	methods.methods_incorporate_instance_method(ADD_METHOD_DEFINITION, CYBLACK_DEFKS_BODY, $list_alt51, $list_alt659, $list_alt660);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_BODY, ADD_METHOD_DEFINITION, CYBLACK_DEFKS_BODY_ADD_METHOD_DEFINITION_METHOD);
	classes.subloop_new_class(CYBLACK_DEFKS_ON_STARTUP_CLAUSE, CYBLACK_DEFKS_EXPRESSION, NIL, NIL, $list_alt665);
	classes.class_set_implements_slot_listeners(CYBLACK_DEFKS_ON_STARTUP_CLAUSE, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_DEFKS_ON_STARTUP_CLAUSE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_DEFKS_ON_STARTUP_CLAUSE, $sym668$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_INSTA);
	subloop_reserved_initialize_cyblack_defks_on_startup_clause_class(CYBLACK_DEFKS_ON_STARTUP_CLAUSE);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_DEFKS_ON_STARTUP_CLAUSE, $list_alt98, NIL, $list_alt669);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_ON_STARTUP_CLAUSE, INITIALIZE, CYBLACK_DEFKS_ON_STARTUP_CLAUSE_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_DEFKS_ON_STARTUP_CLAUSE, $list_alt51, $list_alt367, $list_alt672);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_ON_STARTUP_CLAUSE, PRINT, CYBLACK_DEFKS_ON_STARTUP_CLAUSE_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_POSTING_EXPRESSIONS, CYBLACK_DEFKS_ON_STARTUP_CLAUSE, $list_alt51, NIL, $list_alt679);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_ON_STARTUP_CLAUSE, GET_POSTING_EXPRESSIONS, CYBLACK_DEFKS_ON_STARTUP_CLAUSE_GET_POSTING_EXPRESSIONS_METHOD);
	methods.methods_incorporate_instance_method(SET_POSTING_EXPRESSIONS, CYBLACK_DEFKS_ON_STARTUP_CLAUSE, $list_alt51, $list_alt683, $list_alt684);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_ON_STARTUP_CLAUSE, SET_POSTING_EXPRESSIONS, CYBLACK_DEFKS_ON_STARTUP_CLAUSE_SET_POSTING_EXPRESSIONS_METHOD);
	methods.methods_incorporate_instance_method(ADD_POSTING_EXPRESSION, CYBLACK_DEFKS_ON_STARTUP_CLAUSE, $list_alt51, $list_alt485, $list_alt689);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_ON_STARTUP_CLAUSE, ADD_POSTING_EXPRESSION, CYBLACK_DEFKS_ON_STARTUP_CLAUSE_ADD_POSTING_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(COMPILE_TO_ON_STARTUP_METHOD, CYBLACK_DEFKS_ON_STARTUP_CLAUSE, $list_alt51, $list_alt552, $list_alt693);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_ON_STARTUP_CLAUSE, COMPILE_TO_ON_STARTUP_METHOD, $sym712$CYBLACK_DEFKS_ON_STARTUP_CLAUSE_COMPILE_TO_ON_STARTUP_METHOD_METH);
	classes.subloop_new_class(CYBLACK_DEFKS_STIMULATION_COND, CYBLACK_DEFKS_EXPRESSION, NIL, NIL, $list_alt714);
	classes.class_set_implements_slot_listeners(CYBLACK_DEFKS_STIMULATION_COND, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_DEFKS_STIMULATION_COND, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_STIMULATION_COND_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_DEFKS_STIMULATION_COND, $sym718$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_STIMULATION_COND_INSTAN);
	subloop_reserved_initialize_cyblack_defks_stimulation_cond_class(CYBLACK_DEFKS_STIMULATION_COND);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_DEFKS_STIMULATION_COND, $list_alt98, NIL, $list_alt719);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_STIMULATION_COND, INITIALIZE, CYBLACK_DEFKS_STIMULATION_COND_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_DEFKS_STIMULATION_COND, $list_alt51, $list_alt367, $list_alt722);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_STIMULATION_COND, PRINT, CYBLACK_DEFKS_STIMULATION_COND_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_ARG_LIST, CYBLACK_DEFKS_STIMULATION_COND, $list_alt51, NIL, $list_alt727);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_STIMULATION_COND, GET_ARG_LIST, CYBLACK_DEFKS_STIMULATION_COND_GET_ARG_LIST_METHOD);
	methods.methods_incorporate_instance_method(SET_ARG_LIST, CYBLACK_DEFKS_STIMULATION_COND, $list_alt51, $list_alt731, $list_alt732);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_STIMULATION_COND, SET_ARG_LIST, CYBLACK_DEFKS_STIMULATION_COND_SET_ARG_LIST_METHOD);
	methods.methods_incorporate_instance_method(ADD_ARG, CYBLACK_DEFKS_STIMULATION_COND, $list_alt51, $list_alt738, $list_alt739);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_STIMULATION_COND, ADD_ARG, CYBLACK_DEFKS_STIMULATION_COND_ADD_ARG_METHOD);
	methods.methods_incorporate_instance_method(GET_CLAUSES, CYBLACK_DEFKS_STIMULATION_COND, $list_alt51, NIL, $list_alt744);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_STIMULATION_COND, GET_CLAUSES, CYBLACK_DEFKS_STIMULATION_COND_GET_CLAUSES_METHOD);
	methods.methods_incorporate_instance_method(SET_CLAUSES, CYBLACK_DEFKS_STIMULATION_COND, $list_alt51, $list_alt748, $list_alt749);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_STIMULATION_COND, SET_CLAUSES, CYBLACK_DEFKS_STIMULATION_COND_SET_CLAUSES_METHOD);
	methods.methods_incorporate_instance_method(ADD_CLAUSE, CYBLACK_DEFKS_STIMULATION_COND, $list_alt51, $list_alt755, $list_alt756);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_STIMULATION_COND, ADD_CLAUSE, CYBLACK_DEFKS_STIMULATION_COND_ADD_CLAUSE_METHOD);
	methods.methods_incorporate_instance_method(DISTRIBUTE_BINDING_INFO, CYBLACK_DEFKS_STIMULATION_COND, $list_alt98, NIL, $list_alt760);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_STIMULATION_COND, DISTRIBUTE_BINDING_INFO, CYBLACK_DEFKS_STIMULATION_COND_DISTRIBUTE_BINDING_INFO_METHOD);
	methods.methods_incorporate_instance_method(COMPILE_TO_CREATE_PROPOSALS_METHOD_BODY, CYBLACK_DEFKS_STIMULATION_COND, $list_alt51, $list_alt763, $list_alt764);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_STIMULATION_COND, COMPILE_TO_CREATE_PROPOSALS_METHOD_BODY, $sym772$CYBLACK_DEFKS_STIMULATION_COND_COMPILE_TO_CREATE_PROPOSALS_METHOD);
	classes.subloop_new_class(CYBLACK_DEFKS_STIMULATION_COND_ARG, CYBLACK_DEFKS_EXPRESSION, NIL, NIL, $list_alt774);
	classes.class_set_implements_slot_listeners(CYBLACK_DEFKS_STIMULATION_COND_ARG, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_DEFKS_STIMULATION_COND_ARG, $sym776$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_STIMULATION_COND_ARG_CL);
	classes.subloop_note_instance_initialization_function(CYBLACK_DEFKS_STIMULATION_COND_ARG, $sym777$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_STIMULATION_COND_ARG_IN);
	subloop_reserved_initialize_cyblack_defks_stimulation_cond_arg_class(CYBLACK_DEFKS_STIMULATION_COND_ARG);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_DEFKS_STIMULATION_COND_ARG, $list_alt98, NIL, $list_alt778);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_STIMULATION_COND_ARG, INITIALIZE, CYBLACK_DEFKS_STIMULATION_COND_ARG_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_DEFKS_STIMULATION_COND_ARG, $list_alt51, $list_alt367, $list_alt781);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_STIMULATION_COND_ARG, PRINT, CYBLACK_DEFKS_STIMULATION_COND_ARG_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_ARG, CYBLACK_DEFKS_STIMULATION_COND_ARG, $list_alt51, NIL, $list_alt784);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_STIMULATION_COND_ARG, GET_ARG, CYBLACK_DEFKS_STIMULATION_COND_ARG_GET_ARG_METHOD);
	methods.methods_incorporate_instance_method(SET_ARG, CYBLACK_DEFKS_STIMULATION_COND_ARG, $list_alt51, $list_alt738, $list_alt788);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_STIMULATION_COND_ARG, SET_ARG, CYBLACK_DEFKS_STIMULATION_COND_ARG_SET_ARG_METHOD);
	classes.subloop_new_class(CYBLACK_DEFKS_STIMULATION_COND_CLAUSE, CYBLACK_DEFKS_EXPRESSION, NIL, NIL, $list_alt793);
	classes.class_set_implements_slot_listeners(CYBLACK_DEFKS_STIMULATION_COND_CLAUSE, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_DEFKS_STIMULATION_COND_CLAUSE, $sym794$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_STIMULATION_COND_CLAUSE);
	classes.subloop_note_instance_initialization_function(CYBLACK_DEFKS_STIMULATION_COND_CLAUSE, $sym795$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_STIMULATION_COND_CLAUSE);
	subloop_reserved_initialize_cyblack_defks_stimulation_cond_clause_class(CYBLACK_DEFKS_STIMULATION_COND_CLAUSE);
	methods.methods_incorporate_instance_method(DISTRIBUTE_BINDING_INFO, CYBLACK_DEFKS_STIMULATION_COND_CLAUSE, $list_alt98, $list_alt796, $list_alt797);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_STIMULATION_COND_CLAUSE, DISTRIBUTE_BINDING_INFO, $sym798$CYBLACK_DEFKS_STIMULATION_COND_CLAUSE_DISTRIBUTE_BINDING_INFO_MET);
	methods.methods_incorporate_instance_method(COMPILE_CREATE_PROPOSALS_CLAUSE, CYBLACK_DEFKS_STIMULATION_COND_CLAUSE, $list_alt51, $list_alt552, $list_alt799);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_STIMULATION_COND_CLAUSE, COMPILE_CREATE_PROPOSALS_CLAUSE, $sym800$CYBLACK_DEFKS_STIMULATION_COND_CLAUSE_COMPILE_CREATE_PROPOSALS_CL);
	classes.subloop_new_class(CYBLACK_DEFKS_WHEN_CLAUSE, CYBLACK_DEFKS_STIMULATION_COND_CLAUSE, NIL, NIL, $list_alt802);
	classes.class_set_implements_slot_listeners(CYBLACK_DEFKS_WHEN_CLAUSE, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_DEFKS_WHEN_CLAUSE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_WHEN_CLAUSE_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_DEFKS_WHEN_CLAUSE, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_WHEN_CLAUSE_INSTANCE);
	subloop_reserved_initialize_cyblack_defks_when_clause_class(CYBLACK_DEFKS_WHEN_CLAUSE);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_DEFKS_WHEN_CLAUSE, $list_alt98, NIL, $list_alt807);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_WHEN_CLAUSE, INITIALIZE, CYBLACK_DEFKS_WHEN_CLAUSE_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_DEFKS_WHEN_CLAUSE, $list_alt51, $list_alt367, $list_alt810);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_WHEN_CLAUSE, PRINT, CYBLACK_DEFKS_WHEN_CLAUSE_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_LISP_EXPRESSION, CYBLACK_DEFKS_WHEN_CLAUSE, $list_alt51, NIL, $list_alt816);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_WHEN_CLAUSE, GET_LISP_EXPRESSION, CYBLACK_DEFKS_WHEN_CLAUSE_GET_LISP_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(SET_LISP_EXPRESSION, CYBLACK_DEFKS_WHEN_CLAUSE, $list_alt51, $list_alt820, $list_alt821);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_WHEN_CLAUSE, SET_LISP_EXPRESSION, CYBLACK_DEFKS_WHEN_CLAUSE_SET_LISP_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(GET_ON_PROPOSE_BODY, CYBLACK_DEFKS_WHEN_CLAUSE, $list_alt51, NIL, $list_alt826);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_WHEN_CLAUSE, GET_ON_PROPOSE_BODY, CYBLACK_DEFKS_WHEN_CLAUSE_GET_ON_PROPOSE_BODY_METHOD);
	methods.methods_incorporate_instance_method(SET_ON_PROPOSE_BODY, CYBLACK_DEFKS_WHEN_CLAUSE, NIL, $list_alt830, $list_alt831);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_WHEN_CLAUSE, SET_ON_PROPOSE_BODY, CYBLACK_DEFKS_WHEN_CLAUSE_SET_ON_PROPOSE_BODY_METHOD);
	methods.methods_incorporate_instance_method(DISTRIBUTE_BINDING_INFO, CYBLACK_DEFKS_WHEN_CLAUSE, $list_alt98, $list_alt796, $list_alt835);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_WHEN_CLAUSE, DISTRIBUTE_BINDING_INFO, CYBLACK_DEFKS_WHEN_CLAUSE_DISTRIBUTE_BINDING_INFO_METHOD);
	methods.methods_incorporate_instance_method(COMPILE_CREATE_PROPOSALS_CLAUSE, CYBLACK_DEFKS_WHEN_CLAUSE, $list_alt51, $list_alt552, $list_alt838);
	methods.subloop_register_instance_method(CYBLACK_DEFKS_WHEN_CLAUSE, COMPILE_CREATE_PROPOSALS_CLAUSE, CYBLACK_DEFKS_WHEN_CLAUSE_COMPILE_CREATE_PROPOSALS_CLAUSE_METHOD);
	classes.subloop_new_class(CYBLACK_ON_PROPOSE_BODY, CYBLACK_DEFKS_EXPRESSION, NIL, NIL, $list_alt843);
	classes.class_set_implements_slot_listeners(CYBLACK_ON_PROPOSE_BODY, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_ON_PROPOSE_BODY, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ON_PROPOSE_BODY_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_ON_PROPOSE_BODY, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ON_PROPOSE_BODY_INSTANCE);
	subloop_reserved_initialize_cyblack_on_propose_body_class(CYBLACK_ON_PROPOSE_BODY);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_ON_PROPOSE_BODY, $list_alt98, NIL, $list_alt847);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_BODY, INITIALIZE, CYBLACK_ON_PROPOSE_BODY_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_ON_PROPOSE_BODY, $list_alt51, $list_alt367, $list_alt850);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_BODY, PRINT, CYBLACK_ON_PROPOSE_BODY_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_ON_PROPOSE_EXPRESSIONS, CYBLACK_ON_PROPOSE_BODY, $list_alt51, NIL, $list_alt854);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_BODY, GET_ON_PROPOSE_EXPRESSIONS, CYBLACK_ON_PROPOSE_BODY_GET_ON_PROPOSE_EXPRESSIONS_METHOD);
	methods.methods_incorporate_instance_method(RECURSIVELY_SET_ON_PROPOSE_EXPRESSION_PARENT, CYBLACK_ON_PROPOSE_BODY, $list_alt858, $list_alt859, $list_alt860);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_BODY, RECURSIVELY_SET_ON_PROPOSE_EXPRESSION_PARENT, $sym861$CYBLACK_ON_PROPOSE_BODY_RECURSIVELY_SET_ON_PROPOSE_EXPRESSION_PAR);
	methods.methods_incorporate_instance_method(RECURSIVELY_SET_ON_PROPOSE_EXPRESSIONS_PARENT, CYBLACK_ON_PROPOSE_BODY, $list_alt858, $list_alt863, $list_alt864);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_BODY, RECURSIVELY_SET_ON_PROPOSE_EXPRESSIONS_PARENT, $sym865$CYBLACK_ON_PROPOSE_BODY_RECURSIVELY_SET_ON_PROPOSE_EXPRESSIONS_PA);
	methods.methods_incorporate_instance_method(SET_ON_PROPOSE_EXPRESSIONS, CYBLACK_ON_PROPOSE_BODY, $list_alt51, $list_alt867, $list_alt868);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_BODY, SET_ON_PROPOSE_EXPRESSIONS, CYBLACK_ON_PROPOSE_BODY_SET_ON_PROPOSE_EXPRESSIONS_METHOD);
	methods.methods_incorporate_instance_method(ADD_ON_PROPOSE_EXPRESSION, CYBLACK_ON_PROPOSE_BODY, $list_alt51, $list_alt872, $list_alt873);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_BODY, ADD_ON_PROPOSE_EXPRESSION, CYBLACK_ON_PROPOSE_BODY_ADD_ON_PROPOSE_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(REMOVE_ON_PROPOSE_EXPRESSION, CYBLACK_ON_PROPOSE_BODY, $list_alt51, $list_alt872, $list_alt878);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_BODY, REMOVE_ON_PROPOSE_EXPRESSION, CYBLACK_ON_PROPOSE_BODY_REMOVE_ON_PROPOSE_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(DISTRIBUTE_BINDING_INFO, CYBLACK_ON_PROPOSE_BODY, $list_alt98, $list_alt796, $list_alt882);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_BODY, DISTRIBUTE_BINDING_INFO, CYBLACK_ON_PROPOSE_BODY_DISTRIBUTE_BINDING_INFO_METHOD);
	methods.methods_incorporate_instance_method(COMPILE_CREATE_PROPOSALS_ON_PROPOSE_BODY, CYBLACK_ON_PROPOSE_BODY, $list_alt51, $list_alt552, $list_alt887);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_BODY, COMPILE_CREATE_PROPOSALS_ON_PROPOSE_BODY, $sym889$CYBLACK_ON_PROPOSE_BODY_COMPILE_CREATE_PROPOSALS_ON_PROPOSE_BODY_);
	classes.subloop_new_class(CYBLACK_ON_PROPOSE_EXPRESSION, CYBLACK_DEFKS_EXPRESSION, NIL, NIL, $list_alt892);
	classes.class_set_implements_slot_listeners(CYBLACK_ON_PROPOSE_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_ON_PROPOSE_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ON_PROPOSE_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_ON_PROPOSE_EXPRESSION, $sym898$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ON_PROPOSE_EXPRESSION_INSTANC);
	subloop_reserved_initialize_cyblack_on_propose_expression_class(CYBLACK_ON_PROPOSE_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_ON_PROPOSE_EXPRESSION, $list_alt98, NIL, $list_alt899);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_EXPRESSION, INITIALIZE, CYBLACK_ON_PROPOSE_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_ON_PROPOSE_EXPRESSION, $list_alt51, $list_alt367, $list_alt902);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_EXPRESSION, PRINT, CYBLACK_ON_PROPOSE_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_EXPRESSION_INDEX, CYBLACK_ON_PROPOSE_EXPRESSION, $list_alt51, NIL, $list_alt908);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_EXPRESSION, GET_EXPRESSION_INDEX, CYBLACK_ON_PROPOSE_EXPRESSION_GET_EXPRESSION_INDEX_METHOD);
	methods.methods_incorporate_instance_method(SET_EXPRESSION_INDEX, CYBLACK_ON_PROPOSE_EXPRESSION, $list_alt51, $list_alt912, $list_alt913);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_EXPRESSION, SET_EXPRESSION_INDEX, CYBLACK_ON_PROPOSE_EXPRESSION_SET_EXPRESSION_INDEX_METHOD);
	methods.methods_incorporate_instance_method(GET_DATATYPE_LIST, CYBLACK_ON_PROPOSE_EXPRESSION, $list_alt51, NIL, $list_alt918);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_EXPRESSION, GET_DATATYPE_LIST, CYBLACK_ON_PROPOSE_EXPRESSION_GET_DATATYPE_LIST_METHOD);
	methods.methods_incorporate_instance_method(SET_DATATYPE_LIST, CYBLACK_ON_PROPOSE_EXPRESSION, $list_alt51, $list_alt922, $list_alt923);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_EXPRESSION, SET_DATATYPE_LIST, CYBLACK_ON_PROPOSE_EXPRESSION_SET_DATATYPE_LIST_METHOD);
	methods.methods_incorporate_instance_method(GET_REASON_LIST, CYBLACK_ON_PROPOSE_EXPRESSION, $list_alt51, NIL, $list_alt928);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_EXPRESSION, GET_REASON_LIST, CYBLACK_ON_PROPOSE_EXPRESSION_GET_REASON_LIST_METHOD);
	methods.methods_incorporate_instance_method(SET_REASON_LIST, CYBLACK_ON_PROPOSE_EXPRESSION, $list_alt51, $list_alt932, $list_alt933);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_EXPRESSION, SET_REASON_LIST, CYBLACK_ON_PROPOSE_EXPRESSION_SET_REASON_LIST_METHOD);
	methods.methods_incorporate_instance_method(GET_ON_ACCEPT_EXPRESSION, CYBLACK_ON_PROPOSE_EXPRESSION, $list_alt51, NIL, $list_alt938);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_EXPRESSION, GET_ON_ACCEPT_EXPRESSION, CYBLACK_ON_PROPOSE_EXPRESSION_GET_ON_ACCEPT_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(SET_ON_ACCEPT_EXPRESSION, CYBLACK_ON_PROPOSE_EXPRESSION, $list_alt51, $list_alt942, $list_alt943);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_EXPRESSION, SET_ON_ACCEPT_EXPRESSION, CYBLACK_ON_PROPOSE_EXPRESSION_SET_ON_ACCEPT_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(COMPILE_ON_PROPOSE_EXPRESSION, CYBLACK_ON_PROPOSE_EXPRESSION, $list_alt51, $list_alt552, $list_alt947);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_EXPRESSION, COMPILE_ON_PROPOSE_EXPRESSION, $sym956$CYBLACK_ON_PROPOSE_EXPRESSION_COMPILE_ON_PROPOSE_EXPRESSION_METHO);
	methods.methods_incorporate_instance_method(GET_EXECUTE_METHOD_BINDINGS, CYBLACK_ON_PROPOSE_EXPRESSION, $list_alt51, $list_alt57, $list_alt958);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_EXPRESSION, GET_EXECUTE_METHOD_BINDINGS, CYBLACK_ON_PROPOSE_EXPRESSION_GET_EXECUTE_METHOD_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(GET_SILENCE_STATEMENTS, CYBLACK_ON_PROPOSE_EXPRESSION, $list_alt51, NIL, $list_alt962);
	methods.subloop_register_instance_method(CYBLACK_ON_PROPOSE_EXPRESSION, GET_SILENCE_STATEMENTS, CYBLACK_ON_PROPOSE_EXPRESSION_GET_SILENCE_STATEMENTS_METHOD);
	classes.subloop_new_class(CYBLACK_ACTION_EXPRESSION, CYBLACK_DEFKS_EXPRESSION, NIL, NIL, NIL);
	classes.class_set_implements_slot_listeners(CYBLACK_ACTION_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_ACTION_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ACTION_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_ACTION_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ACTION_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_action_expression_class(CYBLACK_ACTION_EXPRESSION);
	classes.subloop_new_class(CYBLACK_POSTING_ACTION_EXPRESSION, CYBLACK_ACTION_EXPRESSION, NIL, NIL, $list_alt969);
	classes.class_set_implements_slot_listeners(CYBLACK_POSTING_ACTION_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_POSTING_ACTION_EXPRESSION, $sym970$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_ACTION_EXPRESSION_CLA);
	classes.subloop_note_instance_initialization_function(CYBLACK_POSTING_ACTION_EXPRESSION, $sym971$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_ACTION_EXPRESSION_INS);
	subloop_reserved_initialize_cyblack_posting_action_expression_class(CYBLACK_POSTING_ACTION_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_POSTING_ACTION_EXPRESSION, $list_alt98, NIL, $list_alt972);
	methods.subloop_register_instance_method(CYBLACK_POSTING_ACTION_EXPRESSION, INITIALIZE, CYBLACK_POSTING_ACTION_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(GET_POSTING_REFERENCE_EXPRESSION, CYBLACK_POSTING_ACTION_EXPRESSION, $list_alt108, NIL, $list_alt976);
	methods.subloop_register_instance_method(CYBLACK_POSTING_ACTION_EXPRESSION, GET_POSTING_REFERENCE_EXPRESSION, $sym977$CYBLACK_POSTING_ACTION_EXPRESSION_GET_POSTING_REFERENCE_EXPRESSIO);
	methods.methods_incorporate_instance_method(SET_POSTING_REFERENCE_EXPRESSION, CYBLACK_POSTING_ACTION_EXPRESSION, $list_alt51, $list_alt979, $list_alt980);
	methods.subloop_register_instance_method(CYBLACK_POSTING_ACTION_EXPRESSION, SET_POSTING_REFERENCE_EXPRESSION, $sym982$CYBLACK_POSTING_ACTION_EXPRESSION_SET_POSTING_REFERENCE_EXPRESSIO);
	classes.subloop_new_class(CYBLACK_DEACTIVATE_EXPR, CYBLACK_POSTING_ACTION_EXPRESSION, NIL, NIL, $list_alt984);
	classes.class_set_implements_slot_listeners(CYBLACK_DEACTIVATE_EXPR, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_DEACTIVATE_EXPR, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEACTIVATE_EXPR_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_DEACTIVATE_EXPR, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEACTIVATE_EXPR_INSTANCE);
	subloop_reserved_initialize_cyblack_deactivate_expr_class(CYBLACK_DEACTIVATE_EXPR);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_DEACTIVATE_EXPR, $list_alt51, $list_alt367, $list_alt987);
	methods.subloop_register_instance_method(CYBLACK_DEACTIVATE_EXPR, PRINT, CYBLACK_DEACTIVATE_EXPR_PRINT_METHOD);
	classes.subloop_new_class(CYBLACK_REMOVAL_EXPR, CYBLACK_POSTING_ACTION_EXPRESSION, NIL, NIL, $list_alt984);
	classes.class_set_implements_slot_listeners(CYBLACK_REMOVAL_EXPR, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_REMOVAL_EXPR, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_REMOVAL_EXPR_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_REMOVAL_EXPR, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_REMOVAL_EXPR_INSTANCE);
	subloop_reserved_initialize_cyblack_removal_expr_class(CYBLACK_REMOVAL_EXPR);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_REMOVAL_EXPR, $list_alt51, $list_alt367, $list_alt994);
	methods.subloop_register_instance_method(CYBLACK_REMOVAL_EXPR, PRINT, CYBLACK_REMOVAL_EXPR_PRINT_METHOD);
	classes.subloop_new_class(CYBLACK_POSTING_EXPR, CYBLACK_ACTION_EXPRESSION, NIL, NIL, $list_alt999);
	classes.class_set_implements_slot_listeners(CYBLACK_POSTING_EXPR, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_POSTING_EXPR, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_EXPR_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_POSTING_EXPR, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_EXPR_INSTANCE);
	subloop_reserved_initialize_cyblack_posting_expr_class(CYBLACK_POSTING_EXPR);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_POSTING_EXPR, $list_alt98, NIL, $list_alt1002);
	methods.subloop_register_instance_method(CYBLACK_POSTING_EXPR, INITIALIZE, CYBLACK_POSTING_EXPR_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_POSTING_EXPR, $list_alt51, $list_alt367, $list_alt1005);
	methods.subloop_register_instance_method(CYBLACK_POSTING_EXPR, PRINT, CYBLACK_POSTING_EXPR_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_DATATYPE_STRING, CYBLACK_POSTING_EXPR, $list_alt51, NIL, $list_alt1013);
	methods.subloop_register_instance_method(CYBLACK_POSTING_EXPR, GET_DATATYPE_STRING, CYBLACK_POSTING_EXPR_GET_DATATYPE_STRING_METHOD);
	methods.methods_incorporate_instance_method(SET_DATATYPE_STRING, CYBLACK_POSTING_EXPR, $list_alt51, $list_alt1017, $list_alt1018);
	methods.subloop_register_instance_method(CYBLACK_POSTING_EXPR, SET_DATATYPE_STRING, CYBLACK_POSTING_EXPR_SET_DATATYPE_STRING_METHOD);
	methods.methods_incorporate_instance_method(GET_SLOT_INITIALIZATIONS, CYBLACK_POSTING_EXPR, $list_alt51, NIL, $list_alt1023);
	methods.subloop_register_instance_method(CYBLACK_POSTING_EXPR, GET_SLOT_INITIALIZATIONS, CYBLACK_POSTING_EXPR_GET_SLOT_INITIALIZATIONS_METHOD);
	methods.methods_incorporate_instance_method(SET_SLOT_INITIALIZATIONS, CYBLACK_POSTING_EXPR, $list_alt51, $list_alt1027, $list_alt1028);
	methods.subloop_register_instance_method(CYBLACK_POSTING_EXPR, SET_SLOT_INITIALIZATIONS, CYBLACK_POSTING_EXPR_SET_SLOT_INITIALIZATIONS_METHOD);
	methods.methods_incorporate_instance_method(ADD_SLOT_INITIALIZATIONS, CYBLACK_POSTING_EXPR, $list_alt51, $list_alt1033, $list_alt1034);
	methods.subloop_register_instance_method(CYBLACK_POSTING_EXPR, ADD_SLOT_INITIALIZATIONS, CYBLACK_POSTING_EXPR_ADD_SLOT_INITIALIZATIONS_METHOD);
	methods.methods_incorporate_instance_method(REMOVE_SLOT_INITIALIZATIONS, CYBLACK_POSTING_EXPR, $list_alt51, $list_alt1039, $list_alt1040);
	methods.subloop_register_instance_method(CYBLACK_POSTING_EXPR, REMOVE_SLOT_INITIALIZATIONS, CYBLACK_POSTING_EXPR_REMOVE_SLOT_INITIALIZATIONS_METHOD);
	methods.methods_incorporate_instance_method(GET_CONFIDENCE_EXPRESSION, CYBLACK_POSTING_EXPR, $list_alt51, NIL, $list_alt1045);
	methods.subloop_register_instance_method(CYBLACK_POSTING_EXPR, GET_CONFIDENCE_EXPRESSION, CYBLACK_POSTING_EXPR_GET_CONFIDENCE_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(SET_CONFIDENCE_EXPRESSION, CYBLACK_POSTING_EXPR, $list_alt51, $list_alt1049, $list_alt1050);
	methods.subloop_register_instance_method(CYBLACK_POSTING_EXPR, SET_CONFIDENCE_EXPRESSION, CYBLACK_POSTING_EXPR_SET_CONFIDENCE_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(GET_IMMUTABLE_EXPRESSION, CYBLACK_POSTING_EXPR, $list_alt108, NIL, $list_alt1054);
	methods.subloop_register_instance_method(CYBLACK_POSTING_EXPR, GET_IMMUTABLE_EXPRESSION, CYBLACK_POSTING_EXPR_GET_IMMUTABLE_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(SET_IMMUTABLE_EXPRESSION, CYBLACK_POSTING_EXPR, $list_alt51, $list_alt1057, $list_alt1058);
	methods.subloop_register_instance_method(CYBLACK_POSTING_EXPR, SET_IMMUTABLE_EXPRESSION, CYBLACK_POSTING_EXPR_SET_IMMUTABLE_EXPRESSION_METHOD);
	methods.methods_incorporate_instance_method(GET_EXECUTE_METHOD_BINDINGS, CYBLACK_POSTING_EXPR, $list_alt51, $list_alt57, $list_alt1061);
	methods.subloop_register_instance_method(CYBLACK_POSTING_EXPR, GET_EXECUTE_METHOD_BINDINGS, CYBLACK_POSTING_EXPR_GET_EXECUTE_METHOD_BINDINGS_METHOD);
	methods.methods_incorporate_instance_method(GET_SILENCE_STATEMENTS, CYBLACK_POSTING_EXPR, $list_alt51, NIL, $list_alt1064);
	methods.subloop_register_instance_method(CYBLACK_POSTING_EXPR, GET_SILENCE_STATEMENTS, CYBLACK_POSTING_EXPR_GET_SILENCE_STATEMENTS_METHOD);
	classes.subloop_new_class(CYBLACK_SET_RESULT_EXPRESSION, CYBLACK_POSTING_ACTION_EXPRESSION, NIL, NIL, $list_alt984);
	classes.class_set_implements_slot_listeners(CYBLACK_SET_RESULT_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_SET_RESULT_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SET_RESULT_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_SET_RESULT_EXPRESSION, $sym1069$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SET_RESULT_EXPRESSION_INSTANC);
	subloop_reserved_initialize_cyblack_set_result_expression_class(CYBLACK_SET_RESULT_EXPRESSION);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_SET_RESULT_EXPRESSION, $list_alt51, $list_alt367, $list_alt1070);
	methods.subloop_register_instance_method(CYBLACK_SET_RESULT_EXPRESSION, PRINT, CYBLACK_SET_RESULT_EXPRESSION_PRINT_METHOD);
	classes.subloop_new_class(CYBLACK_RETURN_EXPRESSION, CYBLACK_POSTING_ACTION_EXPRESSION, NIL, NIL, $list_alt984);
	classes.class_set_implements_slot_listeners(CYBLACK_RETURN_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_RETURN_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_RETURN_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_RETURN_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_RETURN_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_return_expression_class(CYBLACK_RETURN_EXPRESSION);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_RETURN_EXPRESSION, $list_alt51, $list_alt367, $list_alt1077);
	methods.subloop_register_instance_method(CYBLACK_RETURN_EXPRESSION, PRINT, CYBLACK_RETURN_EXPRESSION_PRINT_METHOD);
	classes.subloop_new_class(CYBLACK_RESET_ACTION_EXPRESSION, CYBLACK_ACTION_EXPRESSION, NIL, NIL, $list_alt1082);
	classes.class_set_implements_slot_listeners(CYBLACK_RESET_ACTION_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_RESET_ACTION_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_RESET_ACTION_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_RESET_ACTION_EXPRESSION, $sym1085$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_RESET_ACTION_EXPRESSION_INSTA);
	subloop_reserved_initialize_cyblack_reset_action_expression_class(CYBLACK_RESET_ACTION_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_RESET_ACTION_EXPRESSION, $list_alt98, NIL, $list_alt1086);
	methods.subloop_register_instance_method(CYBLACK_RESET_ACTION_EXPRESSION, INITIALIZE, CYBLACK_RESET_ACTION_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_RESET_ACTION_EXPRESSION, $list_alt51, $list_alt367, $list_alt1089);
	methods.subloop_register_instance_method(CYBLACK_RESET_ACTION_EXPRESSION, PRINT, CYBLACK_RESET_ACTION_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_DESTINATION_LIST, CYBLACK_RESET_ACTION_EXPRESSION, $list_alt51, NIL, $list_alt1094);
	methods.subloop_register_instance_method(CYBLACK_RESET_ACTION_EXPRESSION, GET_DESTINATION_LIST, CYBLACK_RESET_ACTION_EXPRESSION_GET_DESTINATION_LIST_METHOD);
	methods.methods_incorporate_instance_method(SET_DESTINATION_LIST, CYBLACK_RESET_ACTION_EXPRESSION, $list_alt51, $list_alt1098, $list_alt1099);
	methods.subloop_register_instance_method(CYBLACK_RESET_ACTION_EXPRESSION, SET_DESTINATION_LIST, CYBLACK_RESET_ACTION_EXPRESSION_SET_DESTINATION_LIST_METHOD);
	classes.subloop_new_class(CYBLACK_ERROR_EXPRESSION, CYBLACK_ACTION_EXPRESSION, NIL, NIL, $list_alt1104);
	classes.class_set_implements_slot_listeners(CYBLACK_ERROR_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_ERROR_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ERROR_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_ERROR_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ERROR_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_error_expression_class(CYBLACK_ERROR_EXPRESSION);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_ERROR_EXPRESSION, $list_alt98, NIL, $list_alt1109);
	methods.subloop_register_instance_method(CYBLACK_ERROR_EXPRESSION, INITIALIZE, CYBLACK_ERROR_EXPRESSION_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_ERROR_EXPRESSION, $list_alt51, $list_alt367, $list_alt1112);
	methods.subloop_register_instance_method(CYBLACK_ERROR_EXPRESSION, PRINT, CYBLACK_ERROR_EXPRESSION_PRINT_METHOD);
	methods.methods_incorporate_instance_method(GET_ERROR_STRING, CYBLACK_ERROR_EXPRESSION, $list_alt108, NIL, $list_alt1117);
	methods.subloop_register_instance_method(CYBLACK_ERROR_EXPRESSION, GET_ERROR_STRING, CYBLACK_ERROR_EXPRESSION_GET_ERROR_STRING_METHOD);
	methods.methods_incorporate_instance_method(SET_ERROR_STRING, CYBLACK_ERROR_EXPRESSION, $list_alt51, $list_alt1120, $list_alt1121);
	methods.subloop_register_instance_method(CYBLACK_ERROR_EXPRESSION, SET_ERROR_STRING, CYBLACK_ERROR_EXPRESSION_SET_ERROR_STRING_METHOD);
	methods.methods_incorporate_instance_method(GET_ERROR_ARGS, CYBLACK_ERROR_EXPRESSION, $list_alt108, NIL, $list_alt1125);
	methods.subloop_register_instance_method(CYBLACK_ERROR_EXPRESSION, GET_ERROR_ARGS, CYBLACK_ERROR_EXPRESSION_GET_ERROR_ARGS_METHOD);
	methods.methods_incorporate_instance_method(SET_ERROR_ARGS, CYBLACK_ERROR_EXPRESSION, $list_alt51, $list_alt1128, $list_alt1129);
	methods.subloop_register_instance_method(CYBLACK_ERROR_EXPRESSION, SET_ERROR_ARGS, CYBLACK_ERROR_EXPRESSION_SET_ERROR_ARGS_METHOD);
	classes.subloop_new_class(CYBLACK_HALT_EXPRESSION, CYBLACK_ACTION_EXPRESSION, NIL, NIL, $list_alt984);
	classes.class_set_implements_slot_listeners(CYBLACK_HALT_EXPRESSION, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_HALT_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_HALT_EXPRESSION_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_HALT_EXPRESSION, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_HALT_EXPRESSION_INSTANCE);
	subloop_reserved_initialize_cyblack_halt_expression_class(CYBLACK_HALT_EXPRESSION);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_HALT_EXPRESSION, $list_alt51, $list_alt367, $list_alt1135);
	methods.subloop_register_instance_method(CYBLACK_HALT_EXPRESSION, PRINT, CYBLACK_HALT_EXPRESSION_PRINT_METHOD);
	classes.subloop_new_class(CYBLACK_KS_FACTORY, OBJECT, NIL, NIL, $list_alt1181);
	classes.class_set_implements_slot_listeners(CYBLACK_KS_FACTORY, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_KS_FACTORY, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_KS_FACTORY_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_KS_FACTORY, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_KS_FACTORY_INSTANCE);
	subloop_reserved_initialize_cyblack_ks_factory_class(CYBLACK_KS_FACTORY);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_KS_FACTORY, $list_alt98, NIL, $list_alt1199);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, INITIALIZE, CYBLACK_KS_FACTORY_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(GET_ASSISTANT, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1203);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_ASSISTANT, CYBLACK_KS_FACTORY_GET_ASSISTANT_METHOD);
	methods.methods_incorporate_instance_method(SET_ASSISTANT, CYBLACK_KS_FACTORY, $list_alt51, $list_alt271, $list_alt1207);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_ASSISTANT, CYBLACK_KS_FACTORY_SET_ASSISTANT_METHOD);
	methods.methods_incorporate_instance_method(GET_UNIFIER_CLASS, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1212);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_UNIFIER_CLASS, CYBLACK_KS_FACTORY_GET_UNIFIER_CLASS_METHOD);
	methods.methods_incorporate_instance_method(GET_POST_AT_WILL, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1215);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_POST_AT_WILL, CYBLACK_KS_FACTORY_GET_POST_AT_WILL_METHOD);
	methods.methods_incorporate_instance_method(SET_POST_AT_WILL, CYBLACK_KS_FACTORY, $list_alt51, $list_alt137, $list_alt1218);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_POST_AT_WILL, CYBLACK_KS_FACTORY_SET_POST_AT_WILL_METHOD);
	methods.methods_incorporate_instance_method(GET_KS_ROOT_NAME, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1222);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_KS_ROOT_NAME, CYBLACK_KS_FACTORY_GET_KS_ROOT_NAME_METHOD);
	methods.methods_incorporate_instance_method(SET_KS_ROOT_NAME, CYBLACK_KS_FACTORY, $list_alt51, $list_alt1226, $list_alt1227);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_KS_ROOT_NAME, CYBLACK_KS_FACTORY_SET_KS_ROOT_NAME_METHOD);
	methods.methods_incorporate_instance_method(GET_KS_NAME, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1235);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_KS_NAME, CYBLACK_KS_FACTORY_GET_KS_NAME_METHOD);
	methods.methods_incorporate_instance_method(SET_KS_NAME, CYBLACK_KS_FACTORY, $list_alt51, $list_alt1239, $list_alt1240);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_KS_NAME, CYBLACK_KS_FACTORY_SET_KS_NAME_METHOD);
	methods.methods_incorporate_instance_method(GET_SUPER_KS_ROOT_NAME, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1245);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_SUPER_KS_ROOT_NAME, CYBLACK_KS_FACTORY_GET_SUPER_KS_ROOT_NAME_METHOD);
	methods.methods_incorporate_instance_method(SET_SUPER_KS_ROOT_NAME, CYBLACK_KS_FACTORY, $list_alt51, $list_alt1249, $list_alt1250);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_SUPER_KS_ROOT_NAME, CYBLACK_KS_FACTORY_SET_SUPER_KS_ROOT_NAME_METHOD);
	methods.methods_incorporate_instance_method(GET_SUPER_KS_NAME, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1255);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_SUPER_KS_NAME, CYBLACK_KS_FACTORY_GET_SUPER_KS_NAME_METHOD);
	methods.methods_incorporate_instance_method(SET_SUPER_KS_NAME, CYBLACK_KS_FACTORY, $list_alt51, $list_alt1259, $list_alt1260);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_SUPER_KS_NAME, CYBLACK_KS_FACTORY_SET_SUPER_KS_NAME_METHOD);
	methods.methods_incorporate_instance_method(GET_PROPOSAL_NAME, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1265);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_PROPOSAL_NAME, CYBLACK_KS_FACTORY_GET_PROPOSAL_NAME_METHOD);
	methods.methods_incorporate_instance_method(SET_PROPOSAL_NAME, CYBLACK_KS_FACTORY, $list_alt51, $list_alt1269, $list_alt1270);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_PROPOSAL_NAME, CYBLACK_KS_FACTORY_SET_PROPOSAL_NAME_METHOD);
	methods.methods_incorporate_instance_method(GET_SUPER_PROPOSAL_NAME, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1275);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_SUPER_PROPOSAL_NAME, CYBLACK_KS_FACTORY_GET_SUPER_PROPOSAL_NAME_METHOD);
	methods.methods_incorporate_instance_method(SET_SUPER_PROPOSAL_NAME, CYBLACK_KS_FACTORY, $list_alt51, $list_alt1279, $list_alt1280);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_SUPER_PROPOSAL_NAME, CYBLACK_KS_FACTORY_SET_SUPER_PROPOSAL_NAME_METHOD);
	methods.methods_incorporate_instance_method(GET_KSI_NAME, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1285);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_KSI_NAME, CYBLACK_KS_FACTORY_GET_KSI_NAME_METHOD);
	methods.methods_incorporate_instance_method(SET_KSI_NAME, CYBLACK_KS_FACTORY, $list_alt51, $list_alt1289, $list_alt1290);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_KSI_NAME, CYBLACK_KS_FACTORY_SET_KSI_NAME_METHOD);
	methods.methods_incorporate_instance_method(GET_SUPER_KSI_NAME, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1295);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_SUPER_KSI_NAME, CYBLACK_KS_FACTORY_GET_SUPER_KSI_NAME_METHOD);
	methods.methods_incorporate_instance_method(SET_SUPER_KSI_NAME, CYBLACK_KS_FACTORY, $list_alt51, $list_alt1299, $list_alt1300);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_SUPER_KSI_NAME, CYBLACK_KS_FACTORY_SET_SUPER_KSI_NAME_METHOD);
	methods.methods_incorporate_instance_method(GET_INTERFACE_NAMES, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1305);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_INTERFACE_NAMES, CYBLACK_KS_FACTORY_GET_INTERFACE_NAMES_METHOD);
	methods.methods_incorporate_instance_method(SET_INTERFACE_NAMES, CYBLACK_KS_FACTORY, $list_alt51, $list_alt1309, $list_alt1310);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_INTERFACE_NAMES, CYBLACK_KS_FACTORY_SET_INTERFACE_NAMES_METHOD);
	methods.methods_incorporate_instance_method(GET_PRECONDITION_PATTERN, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt142);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_PRECONDITION_PATTERN, CYBLACK_KS_FACTORY_GET_PRECONDITION_PATTERN_METHOD);
	methods.methods_incorporate_instance_method(SET_PRECONDITION_PATTERN, CYBLACK_KS_FACTORY, $list_alt51, $list_alt145, $list_alt1317);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_PRECONDITION_PATTERN, CYBLACK_KS_FACTORY_SET_PRECONDITION_PATTERN_METHOD);
	methods.methods_incorporate_instance_method(GET_PRECONDITION_PATTERN_VARS, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1324);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_PRECONDITION_PATTERN_VARS, CYBLACK_KS_FACTORY_GET_PRECONDITION_PATTERN_VARS_METHOD);
	methods.methods_incorporate_instance_method(GET_PARSER_FUNCTION, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1328);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_PARSER_FUNCTION, CYBLACK_KS_FACTORY_GET_PARSER_FUNCTION_METHOD);
	methods.methods_incorporate_instance_method(SET_PARSER_FUNCTION, CYBLACK_KS_FACTORY, $list_alt51, $list_alt1332, $list_alt1333);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_PARSER_FUNCTION, CYBLACK_KS_FACTORY_SET_PARSER_FUNCTION_METHOD);
	methods.methods_incorporate_instance_method(GET_UNPARSED_BODY, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1338);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_UNPARSED_BODY, CYBLACK_KS_FACTORY_GET_UNPARSED_BODY_METHOD);
	methods.methods_incorporate_instance_method(SET_UNPARSED_BODY, CYBLACK_KS_FACTORY, $list_alt51, $list_alt1342, $list_alt1343);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_UNPARSED_BODY, CYBLACK_KS_FACTORY_SET_UNPARSED_BODY_METHOD);
	methods.methods_incorporate_instance_method(GET_PARSED_BODY, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1347);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_PARSED_BODY, CYBLACK_KS_FACTORY_GET_PARSED_BODY_METHOD);
	methods.methods_incorporate_instance_method(SET_PARSED_BODY, CYBLACK_KS_FACTORY, $list_alt51, $list_alt1351, $list_alt1352);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_PARSED_BODY, CYBLACK_KS_FACTORY_SET_PARSED_BODY_METHOD);
	methods.methods_incorporate_instance_method(GET_KS_DECLARATION, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1357);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_KS_DECLARATION, CYBLACK_KS_FACTORY_GET_KS_DECLARATION_METHOD);
	methods.methods_incorporate_instance_method(GET_KS_INITIALIZE_DEFINITION, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1366);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_KS_INITIALIZE_DEFINITION, CYBLACK_KS_FACTORY_GET_KS_INITIALIZE_DEFINITION_METHOD);
	methods.methods_incorporate_instance_method(GET_KS_ON_STARTUP_DEFINITION, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1372);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_KS_ON_STARTUP_DEFINITION, CYBLACK_KS_FACTORY_GET_KS_ON_STARTUP_DEFINITION_METHOD);
	methods.methods_incorporate_instance_method(GET_KS_CREATE_PROPOSALS_DEFINITION, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1376);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_KS_CREATE_PROPOSALS_DEFINITION, CYBLACK_KS_FACTORY_GET_KS_CREATE_PROPOSALS_DEFINITION_METHOD);
	methods.methods_incorporate_instance_method(GET_KS_GENERATE_KSI_DEFINITION, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1380);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_KS_GENERATE_KSI_DEFINITION, CYBLACK_KS_FACTORY_GET_KS_GENERATE_KSI_DEFINITION_METHOD);
	methods.methods_incorporate_instance_method(GET_KS_METHOD_DEFINITIONS, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1387);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_KS_METHOD_DEFINITIONS, CYBLACK_KS_FACTORY_GET_KS_METHOD_DEFINITIONS_METHOD);
	methods.methods_incorporate_instance_method(GET_PROPOSAL_DECLARATION, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1390);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_PROPOSAL_DECLARATION, CYBLACK_KS_FACTORY_GET_PROPOSAL_DECLARATION_METHOD);
	methods.methods_incorporate_instance_method(GET_PROPOSAL_INITIALIZE_DEFINITION, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1395);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_PROPOSAL_INITIALIZE_DEFINITION, CYBLACK_KS_FACTORY_GET_PROPOSAL_INITIALIZE_DEFINITION_METHOD);
	methods.methods_incorporate_instance_method(GET_PROPOSAL_GENERATE_KSI_DEFINITION, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1400);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_PROPOSAL_GENERATE_KSI_DEFINITION, CYBLACK_KS_FACTORY_GET_PROPOSAL_GENERATE_KSI_DEFINITION_METHOD);
	methods.methods_incorporate_instance_method(GET_PROPOSAL_METHOD_DEFINITIONS, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1405);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_PROPOSAL_METHOD_DEFINITIONS, CYBLACK_KS_FACTORY_GET_PROPOSAL_METHOD_DEFINITIONS_METHOD);
	methods.methods_incorporate_instance_method(GET_KSI_DECLARATION, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1408);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_KSI_DECLARATION, CYBLACK_KS_FACTORY_GET_KSI_DECLARATION_METHOD);
	methods.methods_incorporate_instance_method(GET_KSI_INITIALIZE_DEFINITION, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1414);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_KSI_INITIALIZE_DEFINITION, CYBLACK_KS_FACTORY_GET_KSI_INITIALIZE_DEFINITION_METHOD);
	methods.methods_incorporate_instance_method(GET_KSI_CREATE_POSTING_DEFINITION, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1418);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_KSI_CREATE_POSTING_DEFINITION, CYBLACK_KS_FACTORY_GET_KSI_CREATE_POSTING_DEFINITION_METHOD);
	methods.methods_incorporate_instance_method(GET_KSI_EXECUTE_DEFINITION, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1423);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_KSI_EXECUTE_DEFINITION, CYBLACK_KS_FACTORY_GET_KSI_EXECUTE_DEFINITION_METHOD);
	methods.methods_incorporate_instance_method(GET_KSI_METHOD_DEFINITIONS, CYBLACK_KS_FACTORY, $list_alt51, NIL, $list_alt1427);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_KSI_METHOD_DEFINITIONS, CYBLACK_KS_FACTORY_GET_KSI_METHOD_DEFINITIONS_METHOD);
	methods.methods_incorporate_instance_method(GET_EXTERNAL_MODULE_NAME, CYBLACK_KS_FACTORY, $list_alt108, NIL, $list_alt176);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_EXTERNAL_MODULE_NAME, CYBLACK_KS_FACTORY_GET_EXTERNAL_MODULE_NAME_METHOD);
	methods.methods_incorporate_instance_method(SET_EXTERNAL_MODULE_NAME, CYBLACK_KS_FACTORY, $list_alt51, $list_alt179, $list_alt1430);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_EXTERNAL_MODULE_NAME, CYBLACK_KS_FACTORY_SET_EXTERNAL_MODULE_NAME_METHOD);
	methods.methods_incorporate_instance_method(GET_PORT_ID, CYBLACK_KS_FACTORY, $list_alt108, NIL, $list_alt168);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_PORT_ID, CYBLACK_KS_FACTORY_GET_PORT_ID_METHOD);
	methods.methods_incorporate_instance_method(SET_PORT_ID, CYBLACK_KS_FACTORY, $list_alt51, $list_alt171, $list_alt172);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_PORT_ID, CYBLACK_KS_FACTORY_SET_PORT_ID_METHOD);
	methods.methods_incorporate_instance_method(IS_EXTERNAL, CYBLACK_KS_FACTORY, $list_alt108, NIL, $list_alt1437);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, IS_EXTERNAL, CYBLACK_KS_FACTORY_IS_EXTERNAL_METHOD);
	methods.methods_incorporate_instance_method(SET_EXTERNAL, CYBLACK_KS_FACTORY, $list_alt51, $list_alt137, $list_alt1440);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_EXTERNAL, CYBLACK_KS_FACTORY_SET_EXTERNAL_METHOD);
	methods.methods_incorporate_instance_method(GET_ADDED_DECLARATIONS_FOR_KS_CLASS, CYBLACK_KS_FACTORY, $list_alt108, NIL, $list_alt1444);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, GET_ADDED_DECLARATIONS_FOR_KS_CLASS, CYBLACK_KS_FACTORY_GET_ADDED_DECLARATIONS_FOR_KS_CLASS_METHOD);
	methods.methods_incorporate_instance_method(SET_ADDED_DECLARATIONS_FOR_KS_CLASS, CYBLACK_KS_FACTORY, $list_alt51, $list_alt1447, $list_alt1448);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, SET_ADDED_DECLARATIONS_FOR_KS_CLASS, CYBLACK_KS_FACTORY_SET_ADDED_DECLARATIONS_FOR_KS_CLASS_METHOD);
	methods.methods_incorporate_instance_method(ADD_DECLARATION_FOR_KS_CLASS, CYBLACK_KS_FACTORY, $list_alt51, $list_alt1452, $list_alt1453);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, ADD_DECLARATION_FOR_KS_CLASS, CYBLACK_KS_FACTORY_ADD_DECLARATION_FOR_KS_CLASS_METHOD);
	methods.methods_incorporate_instance_method(HAS_ADDED_DECLARATION_FOR_METHOD_P, CYBLACK_KS_FACTORY, $list_alt51, $list_alt1457, $list_alt1458);
	methods.subloop_register_instance_method(CYBLACK_KS_FACTORY, HAS_ADDED_DECLARATION_FOR_METHOD_P, CYBLACK_KS_FACTORY_HAS_ADDED_DECLARATION_FOR_METHOD_P_METHOD);
	classes.subloop_new_class(CYBLACK_INTERNAL_BASE_KS, CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE, NIL, NIL, $list_alt1463);
	classes.class_set_implements_slot_listeners(CYBLACK_INTERNAL_BASE_KS, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_INTERNAL_BASE_KS, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_INTERNAL_BASE_KS_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_INTERNAL_BASE_KS, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_INTERNAL_BASE_KS_INSTANCE);
	subloop_reserved_initialize_cyblack_internal_base_ks_class(CYBLACK_INTERNAL_BASE_KS);
	methods.methods_incorporate_instance_method(BEFORE_STARTUP, CYBLACK_INTERNAL_BASE_KS, $list_alt51, NIL, $list_alt1467);
	methods.subloop_register_instance_method(CYBLACK_INTERNAL_BASE_KS, BEFORE_STARTUP, CYBLACK_INTERNAL_BASE_KS_BEFORE_STARTUP_METHOD);
	methods.methods_incorporate_instance_method(ON_STARTUP, CYBLACK_INTERNAL_BASE_KS, $list_alt51, NIL, $list_alt1469);
	methods.subloop_register_instance_method(CYBLACK_INTERNAL_BASE_KS, ON_STARTUP, CYBLACK_INTERNAL_BASE_KS_ON_STARTUP_METHOD);
	classes.subloop_new_class(CYBLACK_INTERNAL_BASE_PROPOSAL, CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL, NIL, NIL, $list_alt1392);
	classes.class_set_implements_slot_listeners(CYBLACK_INTERNAL_BASE_PROPOSAL, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_INTERNAL_BASE_PROPOSAL, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_INTERNAL_BASE_PROPOSAL_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_INTERNAL_BASE_PROPOSAL, $sym1473$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_INTERNAL_BASE_PROPOSAL_INSTAN);
	subloop_reserved_initialize_cyblack_internal_base_proposal_class(CYBLACK_INTERNAL_BASE_PROPOSAL);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_INTERNAL_BASE_PROPOSAL, $list_alt98, NIL, $list_alt1474);
	methods.subloop_register_instance_method(CYBLACK_INTERNAL_BASE_PROPOSAL, INITIALIZE, CYBLACK_INTERNAL_BASE_PROPOSAL_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(GENERATE_KSI, CYBLACK_INTERNAL_BASE_PROPOSAL, $list_alt51, NIL, $list_alt1476);
	methods.subloop_register_instance_method(CYBLACK_INTERNAL_BASE_PROPOSAL, GENERATE_KSI, CYBLACK_INTERNAL_BASE_PROPOSAL_GENERATE_KSI_METHOD);
	classes.subloop_new_class(CYBLACK_INTERNAL_BASE_KSI, CYBLACK_AUTO_GENERATED_INTERNAL_KSI, NIL, NIL, $list_alt1411);
	classes.class_set_implements_slot_listeners(CYBLACK_INTERNAL_BASE_KSI, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_INTERNAL_BASE_KSI, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_INTERNAL_BASE_KSI_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_INTERNAL_BASE_KSI, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_INTERNAL_BASE_KSI_INSTANCE);
	subloop_reserved_initialize_cyblack_internal_base_ksi_class(CYBLACK_INTERNAL_BASE_KSI);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_INTERNAL_BASE_KSI, $list_alt98, NIL, $list_alt1474);
	methods.subloop_register_instance_method(CYBLACK_INTERNAL_BASE_KSI, INITIALIZE, CYBLACK_INTERNAL_BASE_KSI_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(CREATE_POSTING, CYBLACK_INTERNAL_BASE_KSI, $list_alt98, $list_alt1483, $list_alt1484);
	methods.subloop_register_instance_method(CYBLACK_INTERNAL_BASE_KSI, CREATE_POSTING, CYBLACK_INTERNAL_BASE_KSI_CREATE_POSTING_METHOD);
	methods.methods_incorporate_instance_method(EXECUTE, CYBLACK_INTERNAL_BASE_KSI, $list_alt51, NIL, $list_alt192);
	methods.subloop_register_instance_method(CYBLACK_INTERNAL_BASE_KSI, EXECUTE, CYBLACK_INTERNAL_BASE_KSI_EXECUTE_METHOD);
	classes.subloop_new_class(CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, CYBLACK_EXTERNAL_KNOWLEDGE_SOURCE, $list_alt1499, NIL, $list_alt1500);
	classes.class_set_implements_slot_listeners(CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, $sym1502$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWL);
	classes.subloop_note_instance_initialization_function(CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, $sym1512$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWL);
	subloop_reserved_initialize_cyblack_auto_generated_external_knowledge_source_class(CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, $list_alt98, NIL, $list_alt1513);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, INITIALIZE, $sym1515$CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_INITIALIZE_METHO);
	methods.methods_incorporate_class_method(GET_AUTO_GENERATED_KS_ASSISTANT, CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, $list_alt108, NIL, $list_alt418);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, GET_AUTO_GENERATED_KS_ASSISTANT, $sym1516$CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_GET_AUTO_GENERAT);
	methods.methods_incorporate_class_method(SET_AUTO_GENERATED_KS_ASSISTANT, CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt271, $list_alt272);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, SET_AUTO_GENERATED_KS_ASSISTANT, $sym1518$CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_SET_AUTO_GENERAT);
	methods.methods_incorporate_instance_method(SET_TRACE_STATE, CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt137, $list_alt277);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, SET_TRACE_STATE, $sym1520$CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_SET_TRACE_STATE_);
	methods.methods_incorporate_class_method(NEW_PROPOSAL, CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt291, $list_alt292);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, NEW_PROPOSAL, $sym1522$CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_NEW_PROPOSAL_MET);
	methods.methods_incorporate_class_method(NEW_KNOWLEDGE_SOURCE, CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt281, $list_alt1523);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, NEW_KNOWLEDGE_SOURCE, $sym1525$CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_NEW_KNOWLEDGE_SO);
	methods.methods_incorporate_class_method(NEW_KSI, CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, $list_alt51, $list_alt304, $list_alt305);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, NEW_KSI, CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_NEW_KSI_METHOD);
	classes.subloop_new_class(CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, CYBLACK_EXTERNAL_PROPOSAL, $list_alt1530, NIL, $list_alt1531);
	classes.class_set_implements_slot_listeners(CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, NIL);
	methods.methods_incorporate_instance_method(SET_PROPOSAL_INDEX, CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, $list_alt51, $list_alt194, $list_alt195);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, SET_PROPOSAL_INDEX, $sym1532$CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_SET_PROPOSAL_INDEX_METHO);
	methods.methods_incorporate_instance_method(GET_PROPOSAL_INDEX, CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, $list_alt51, NIL, $list_alt192);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, GET_PROPOSAL_INDEX, $sym1533$CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_GET_PROPOSAL_INDEX_METHO);
	classes.subloop_note_class_initialization_function(CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, $sym1534$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_EXTERNAL_PROPO);
	classes.subloop_note_instance_initialization_function(CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, $sym1539$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_EXTERNAL_PROPO);
	subloop_reserved_initialize_cyblack_auto_generated_external_proposal_class(CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, $list_alt98, NIL, $list_alt1474);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, INITIALIZE, CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(PRINT, CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, $list_alt51, $list_alt367, $list_alt368);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, PRINT, CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_PRINT_METHOD);
	methods.methods_incorporate_class_method(GET_AUTO_GENERATED_KS_ASSISTANT, CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, $list_alt267, NIL, $list_alt1542);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, GET_AUTO_GENERATED_KS_ASSISTANT, $sym1543$CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_GET_AUTO_GENERATED_KS_AS);
	methods.methods_incorporate_class_method(SET_AUTO_GENERATED_KS_ASSISTANT, CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, $list_alt51, $list_alt271, $list_alt272);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, SET_AUTO_GENERATED_KS_ASSISTANT, $sym1545$CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_SET_AUTO_GENERATED_KS_AS);
	methods.methods_incorporate_instance_method(SET_TRACE_STATE, CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, $list_alt51, $list_alt137, $list_alt277);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, SET_TRACE_STATE, CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_SET_TRACE_STATE_METHOD);
	classes.subloop_new_class(CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, CYBLACK_BASIC_KSI, $list_alt1549, NIL, $list_alt1550);
	classes.class_set_implements_slot_listeners(CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, NIL);
	methods.methods_incorporate_instance_method(SET_KSI_INDEX, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, $list_alt51, $list_alt194, $list_alt195);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, SET_KSI_INDEX, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_SET_KSI_INDEX_METHOD);
	methods.methods_incorporate_instance_method(GET_KSI_INDEX, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, $list_alt51, NIL, $list_alt192);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, GET_KSI_INDEX, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_GET_KSI_INDEX_METHOD);
	classes.subloop_note_class_initialization_function(CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, $sym1553$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_C);
	classes.subloop_note_instance_initialization_function(CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, $sym1554$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_I);
	subloop_reserved_initialize_cyblack_auto_generated_external_ksi_class(CYBLACK_AUTO_GENERATED_EXTERNAL_KSI);
	methods.methods_incorporate_class_method(GET_AUTO_GENERATED_KS_ASSISTANT, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, $list_alt108, NIL, $list_alt418);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, GET_AUTO_GENERATED_KS_ASSISTANT, $sym1555$CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_GET_AUTO_GENERATED_KS_ASSISTA);
	methods.methods_incorporate_class_method(SET_AUTO_GENERATED_KS_ASSISTANT, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, $list_alt51, $list_alt271, $list_alt272);
	methods.subloop_register_class_method(CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, SET_AUTO_GENERATED_KS_ASSISTANT, $sym1557$CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_SET_AUTO_GENERATED_KS_ASSISTA);
	methods.methods_incorporate_instance_method(SET_TRACE_STATE, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, $list_alt51, $list_alt137, $list_alt277);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, SET_TRACE_STATE, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_SET_TRACE_STATE_METHOD);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, $list_alt98, NIL, $list_alt1560);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, INITIALIZE, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(GET_PROPOSAL, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, $list_alt108, NIL, $list_alt434);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, GET_PROPOSAL, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_GET_PROPOSAL_METHOD);
	methods.methods_incorporate_instance_method(SET_PROPOSAL, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, $list_alt51, $list_alt437, $list_alt1564);
	methods.subloop_register_instance_method(CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, SET_PROPOSAL, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_SET_PROPOSAL_METHOD);
	classes.subloop_new_class(CYBLACK_EXTERNAL_BASE_KS, CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE, NIL, NIL, NIL);
	classes.class_set_implements_slot_listeners(CYBLACK_EXTERNAL_BASE_KS, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_EXTERNAL_BASE_KS, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXTERNAL_BASE_KS_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_EXTERNAL_BASE_KS, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXTERNAL_BASE_KS_INSTANCE);
	subloop_reserved_initialize_cyblack_external_base_ks_class(CYBLACK_EXTERNAL_BASE_KS);
	classes.subloop_new_class(CYBLACK_EXTERNAL_BASE_PROPOSAL, CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL, NIL, NIL, $list_alt1392);
	classes.class_set_implements_slot_listeners(CYBLACK_EXTERNAL_BASE_PROPOSAL, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_EXTERNAL_BASE_PROPOSAL, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXTERNAL_BASE_PROPOSAL_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_EXTERNAL_BASE_PROPOSAL, $sym1572$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXTERNAL_BASE_PROPOSAL_INSTAN);
	subloop_reserved_initialize_cyblack_external_base_proposal_class(CYBLACK_EXTERNAL_BASE_PROPOSAL);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_EXTERNAL_BASE_PROPOSAL, $list_alt98, NIL, $list_alt1474);
	methods.subloop_register_instance_method(CYBLACK_EXTERNAL_BASE_PROPOSAL, INITIALIZE, CYBLACK_EXTERNAL_BASE_PROPOSAL_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(GENERATE_KSI, CYBLACK_EXTERNAL_BASE_PROPOSAL, $list_alt51, NIL, $list_alt1574);
	methods.subloop_register_instance_method(CYBLACK_EXTERNAL_BASE_PROPOSAL, GENERATE_KSI, CYBLACK_EXTERNAL_BASE_PROPOSAL_GENERATE_KSI_METHOD);
	classes.subloop_new_class(CYBLACK_EXTERNAL_BASE_KSI, CYBLACK_AUTO_GENERATED_EXTERNAL_KSI, NIL, NIL, $list_alt1411);
	classes.class_set_implements_slot_listeners(CYBLACK_EXTERNAL_BASE_KSI, NIL);
	classes.subloop_note_class_initialization_function(CYBLACK_EXTERNAL_BASE_KSI, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXTERNAL_BASE_KSI_CLASS);
	classes.subloop_note_instance_initialization_function(CYBLACK_EXTERNAL_BASE_KSI, SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXTERNAL_BASE_KSI_INSTANCE);
	subloop_reserved_initialize_cyblack_external_base_ksi_class(CYBLACK_EXTERNAL_BASE_KSI);
	methods.methods_incorporate_instance_method(INITIALIZE, CYBLACK_EXTERNAL_BASE_KSI, $list_alt98, NIL, $list_alt1474);
	methods.subloop_register_instance_method(CYBLACK_EXTERNAL_BASE_KSI, INITIALIZE, CYBLACK_EXTERNAL_BASE_KSI_INITIALIZE_METHOD);
	methods.methods_incorporate_instance_method(CREATE_POSTING, CYBLACK_EXTERNAL_BASE_KSI, $list_alt98, $list_alt1483, $list_alt1484);
	methods.subloop_register_instance_method(CYBLACK_EXTERNAL_BASE_KSI, CREATE_POSTING, CYBLACK_EXTERNAL_BASE_KSI_CREATE_POSTING_METHOD);
	methods.methods_incorporate_instance_method(EXECUTE, CYBLACK_EXTERNAL_BASE_KSI, $list_alt51, NIL, $list_alt1582);
	methods.subloop_register_instance_method(CYBLACK_EXTERNAL_BASE_KSI, EXECUTE, CYBLACK_EXTERNAL_BASE_KSI_EXECUTE_METHOD);
	return NIL;
    }

    // // Internal Constants
    static private final SubLList $list_alt0 = list(makeKeyword("UNDEFINED"), $FULL, makeKeyword("CONSTRAINED"), makeKeyword("ALL"), makeKeyword("ANY"));

    private static final SubLSymbol CYBLACK_UNIFICATION_MODIFIER = makeSymbol("CYBLACK-UNIFICATION-MODIFIER");

    static private final SubLString $str_alt2$_S___S_is_not_a_member_of_the__S_ = makeString("~S: ~S is not a member of the ~S enumeration.");

    private static final SubLSymbol ENCODE_CYBLACK_UNIFICATION_MODIFIER = makeSymbol("ENCODE-CYBLACK-UNIFICATION-MODIFIER");

    static private final SubLString $str_alt4$_S___S_is_not_a_valid_encoding_of = makeString("~S: ~S is not a valid encoding of the ~S enumeration.");

    private static final SubLSymbol DECODE_CYBLACK_UNIFICATION_MODIFIER = makeSymbol("DECODE-CYBLACK-UNIFICATION-MODIFIER");

    static private final SubLString $str_alt6$_S___S_was_expected_to_be_a_membe = makeString("~S: ~S was expected to be a member of the enumeration ~S.");

    private static final SubLSymbol CYBLACK_UNIFICATION_MODIFIER_P = makeSymbol("CYBLACK-UNIFICATION-MODIFIER-P");

    static private final SubLList $list_alt8 = list(makeKeyword("EXTENDS"), makeKeyword("IMPLEMENTS"), makeKeyword("PRECONDITION"), makeKeyword("POST-AT-WILL"));

    private static final SubLSymbol CYBLACK_KS_DEF_OPTION = makeSymbol("CYBLACK-KS-DEF-OPTION");

    private static final SubLSymbol ENCODE_CYBLACK_KS_DEF_OPTION = makeSymbol("ENCODE-CYBLACK-KS-DEF-OPTION");

    private static final SubLSymbol DECODE_CYBLACK_KS_DEF_OPTION = makeSymbol("DECODE-CYBLACK-KS-DEF-OPTION");

    private static final SubLSymbol CYBLACK_KS_DEF_OPTION_P = makeSymbol("CYBLACK-KS-DEF-OPTION-P");

    static private final SubLList $list_alt13 = list(makeKeyword("EXTENDS"), makeKeyword("IMPLEMENTS"), makeKeyword("PRECONDITION"), makeKeyword("POST-AT-WILL"), makeKeyword("PORT-ID"), makeKeyword("EXTERNAL-MODULE-NAME"));

    private static final SubLSymbol CYBLACK_KS_DEF_EXTERNAL_OPTION = makeSymbol("CYBLACK-KS-DEF-EXTERNAL-OPTION");

    private static final SubLSymbol ENCODE_CYBLACK_KS_DEF_EXTERNAL_OPTION = makeSymbol("ENCODE-CYBLACK-KS-DEF-EXTERNAL-OPTION");

    private static final SubLSymbol DECODE_CYBLACK_KS_DEF_EXTERNAL_OPTION = makeSymbol("DECODE-CYBLACK-KS-DEF-EXTERNAL-OPTION");

    private static final SubLSymbol CYBLACK_KS_DEF_EXTERNAL_OPTION_P = makeSymbol("CYBLACK-KS-DEF-EXTERNAL-OPTION-P");

    static private final SubLList $list_alt18 = list(makeKeyword("REASONS"), makeKeyword("ON-ACCEPT-DO"));

    private static final SubLSymbol CYBLACK_PROPOSE_EXPRESSION_OPTION = makeSymbol("CYBLACK-PROPOSE-EXPRESSION-OPTION");

    private static final SubLSymbol ENCODE_CYBLACK_PROPOSE_EXPRESSION_OPTION = makeSymbol("ENCODE-CYBLACK-PROPOSE-EXPRESSION-OPTION");

    private static final SubLSymbol DECODE_CYBLACK_PROPOSE_EXPRESSION_OPTION = makeSymbol("DECODE-CYBLACK-PROPOSE-EXPRESSION-OPTION");

    private static final SubLSymbol CYBLACK_PROPOSE_EXPRESSION_OPTION_P = makeSymbol("CYBLACK-PROPOSE-EXPRESSION-OPTION-P");

    private static final SubLSymbol INTEGER_REFERENCE = makeSymbol("INTEGER-REFERENCE");

    private static final SubLSymbol INTEGER_REFERENCE_P = makeSymbol("INTEGER-REFERENCE-P");

    static private final SubLList $list_alt25 = list(makeSymbol("VALUE"));

    static private final SubLList $list_alt26 = list(makeKeyword("VALUE"));

    static private final SubLList $list_alt27 = list(makeSymbol("INTEGER-REFERENCE-VALUE"));

    static private final SubLList $list_alt28 = list(makeSymbol("_CSETF-INTEGER-REFERENCE-VALUE"));

    private static final SubLSymbol INTEGER_REFERENCE_PRINT_FUNCTION_TRAMPOLINE = makeSymbol("INTEGER-REFERENCE-PRINT-FUNCTION-TRAMPOLINE");

    private static final SubLSymbol INTEGER_REFERENCE_VALUE = makeSymbol("INTEGER-REFERENCE-VALUE");

    public static final SubLSymbol _CSETF_INTEGER_REFERENCE_VALUE = makeSymbol("_CSETF-INTEGER-REFERENCE-VALUE");

    static private final SubLString $str_alt34$Invalid_slot__S_for_construction_ = makeString("Invalid slot ~S for construction function");

    static private final SubLString $str_alt35$NEW_INTEGER_REFERENCE___S_is_not_ = makeString("NEW-INTEGER-REFERENCE: ~S is not a valid initial value for an integer reference. ~\n     An integer was expected.");

    private static final SubLSymbol $CONSTRAINED = makeKeyword("CONSTRAINED");

    static private final SubLString $str_alt40$CYBLACK_UNIFIER_GIVEN_DESCRIPTION = makeString("CYBLACK-UNIFIER-GIVEN-DESCRIPTION: Both :FULL and :CONSTRAINED have been specified. ~\n             Assuming :CONSTRAINED");

    static private final SubLString $str_alt41$CYBLACK_UNIFIER_GIVEN_DESCRIPTION = makeString("CYBLACK-UNIFIER-GIVEN-DESCRIPTION: Both :ALL and :ANY have been specified. ~\n             Assuming :ALL");

    private static final SubLSymbol CYBLACK_UNIFICATION_ROBOT_SATISFIED_BY_ANY_SOLUTION = makeSymbol("CYBLACK-UNIFICATION-ROBOT-SATISFIED-BY-ANY-SOLUTION");

    private static final SubLSymbol CYBLACK_SIMPLE_ENVIRONMENT_TEMPLATE = makeSymbol("CYBLACK-SIMPLE-ENVIRONMENT-TEMPLATE");

    static private final SubLList $list_alt49 = list(
	    new SubLObject[] { list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-BINDING-LIST"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-BINDING-LIST"), list(makeSymbol("NEW-BINDING-LIST")), makeKeyword("PROTECTED")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-COPY-OF-BINDING-LIST"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("BIND-VAR"), list(makeSymbol("VAR"), makeSymbol("VALUE")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("EVAL-VAR"), list(makeSymbol("VAR")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VARIABLES"), NIL, makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUES"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COPY-BINDINGS"), list(makeSymbol("OTHER-ENVIRONMENT")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-FROM-BINDINGS-CODE"), list(makeSymbol("VAR")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-TO-BINDINGS-CODE"), list(makeSymbol("VAR")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-FROM-BINDINGS-CODE-GIVEN-VARS"), list(makeSymbol("VAR"), makeSymbol("VARS")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-TO-BINDINGS-CODE-GIVEN-VARS"), list(makeSymbol("VAR"), makeSymbol("VARS")), makeKeyword("PUBLIC")) });

    private static final SubLSymbol GET_COPY_OF_BINDING_LIST = makeSymbol("GET-COPY-OF-BINDING-LIST");

    static private final SubLList $list_alt51 = list(makeKeyword("PUBLIC"));

    static private final SubLList $list_alt52 = list(list(RET, list(makeSymbol("COPY-TREE"), list(makeSymbol("GET-BINDING-LIST"), makeSymbol("SELF")))));

    static private final SubLList $list_alt54 = list(makeSymbol("VAR"), makeSymbol("VALUE"));

    static private final SubLList $list_alt55 = list(
	    list(makeSymbol("CLET"), list(list(makeSymbol("TEMPLATE-BINDING-LIST"), list(makeSymbol("GET-BINDING-LIST"), makeSymbol("SELF"))), list(makeSymbol("TEMPLATE-BINDING"), list(makeSymbol("ASSOC"), makeSymbol("VAR"), makeSymbol("TEMPLATE-BINDING-LIST")))),
		    list(makeSymbol("PWHEN"), makeSymbol("TEMPLATE-BINDING"), list(makeSymbol("RPLACD"), makeSymbol("TEMPLATE-BINDING"), makeSymbol("VALUE")), list(RET, makeSymbol("VALUE"))),
		    list(makeSymbol("SET-BINDING-LIST"), makeSymbol("SELF"), list(makeSymbol("CONS"), list(makeSymbol("CONS"), makeSymbol("VAR"), makeSymbol("VALUE")), makeSymbol("TEMPLATE-BINDING-LIST"))), list(RET, makeSymbol("VAR"))));

    static private final SubLList $list_alt57 = list(makeSymbol("VAR"));

    static private final SubLList $list_alt58 = list(list(makeSymbol("CLET"), list(list(makeSymbol("TEMPLATE-BINDING"), list(makeSymbol("ASSOC"), makeSymbol("VAR"), list(makeSymbol("GET-BINDING-LIST"), makeSymbol("SELF"))))),
	    list(makeSymbol("MUST"), makeSymbol("TEMPLATE-BINDING"), makeString("(EVAL-VAR ~S): Variable ~S is not bound."), makeSymbol("SELF"), makeSymbol("VAR")), list(RET, list(makeSymbol("CDR"), makeSymbol("TEMPLATE-BINDING")))));

    static private final SubLList $list_alt60 = list(list(makeSymbol("CLET"), list(list(makeSymbol("TEMPLATE-VARIABLES"), NIL), list(makeSymbol("TEMPLATE-BINDING-LIST"), list(makeSymbol("GET-BINDING-LIST"), makeSymbol("SELF")))),
	    list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("TEMPLATE-BINDING"), makeSymbol("TEMPLATE-BINDING-LIST"), makeSymbol("TEMPLATE-VARIABLES")), list(makeSymbol("CAR"), makeSymbol("TEMPLATE-BINDING"))), list(RET, makeSymbol("TEMPLATE-VARIABLES"))));

    static private final SubLList $list_alt62 = list(list(makeSymbol("CLET"), list(list(makeSymbol("TEMPLATE-VALUES"), NIL), list(makeSymbol("TEMPLATE-BINDING-LIST"), list(makeSymbol("GET-BINDING-LIST"), makeSymbol("SELF")))),
	    list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("TEMPLATE-BINDING"), makeSymbol("TEMPLATE-BINDING-LIST"), makeSymbol("TEMPLATE-VALUES")), list(makeSymbol("CDR"), makeSymbol("TEMPLATE-BINDING"))), list(RET, makeSymbol("TEMPLATE-VALUES"))));

    private static final SubLSymbol COPY_BINDINGS = makeSymbol("COPY-BINDINGS");

    static private final SubLList $list_alt64 = list(makeSymbol("OTHER-ENVIRONMENT"));

    static private final SubLList $list_alt65 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-SIMPLE-ENVIRONMENT-TEMPLATE-P"), makeSymbol("OTHER-ENVIRONMENT")), makeString("(COPY-BINDINGS ~S): ~S is not an instance of CYBLACK-SIMPLE-ENVIRONMENT-TEMPLATE."), makeSymbol("SELF"), makeSymbol("OTHER-ENVIRONMENT")),
	    list(makeSymbol("SET-BINDING-LIST"), makeSymbol("SELF"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("OTHER-ENVIRONMENT"), list(QUOTE, makeSymbol("GET-COPY-OF-BINDING-LIST")))), list(RET, makeSymbol("OTHER-ENVIRONMENT")));

    static private final SubLList $list_alt67 = list(
	    list(makeSymbol("CLET"), list(list(makeSymbol("TEMPLATE-VARIABLES"), list(makeSymbol("GET-VARIABLES"), makeSymbol("SELF")))), list(RET, list(makeSymbol("GENERATE-FROM-BINDINGS-CODE-GIVEN-VARS"), makeSymbol("SELF"), makeSymbol("VAR"), makeSymbol("TEMPLATE-VARIABLES")))));

    static private final SubLList $list_alt69 = list(
	    list(makeSymbol("CLET"), list(list(makeSymbol("TEMPLATE-VARIABLES"), list(makeSymbol("GET-VARIABLES"), makeSymbol("SELF")))), list(RET, list(makeSymbol("GENERATE-TO-BINDINGS-CODE-GIVEN-VARS"), makeSymbol("SELF"), makeSymbol("VAR"), makeSymbol("TEMPLATE-VARIABLES")))));

    private static final SubLSymbol GENERATE_FROM_BINDINGS_CODE_GIVEN_VARS = makeSymbol("GENERATE-FROM-BINDINGS-CODE-GIVEN-VARS");

    static private final SubLList $list_alt71 = list(makeSymbol("VAR"), makeSymbol("VARS"));

    static private final SubLList $list_alt72 = list(list(makeSymbol("MUST"), list(makeSymbol("CAND"), makeSymbol("VAR"), list(makeSymbol("SYMBOLP"), makeSymbol("VAR"))), makeString("(GENERATE-FROM-BINDINGS-CODE-GIVEN-VARS ~S): ~S is not a valie variable."), makeSymbol("SELF"), makeSymbol("VAR")),
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-VARIABLE-LIST-P"), makeSymbol("VARS")), makeString("(GENERATE-FROM-BINDINGS-CODE-GIVEN-VARS ~S): ~S is not a valid list of variables."), makeSymbol("SELF"), makeSymbol("VARS")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("TEMPLATE-BINDINGS"), NIL)),
		    list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("CURRENT-VAR"), makeSymbol("VARS"), makeSymbol("TEMPLATE-BINDINGS")),
			    list(makeSymbol("LIST"), makeSymbol("CURRENT-VAR"), list(makeSymbol("LIST"), list(QUOTE, makeSymbol("FUNCALL-INSTANCE-METHOD")), makeSymbol("VAR"), list(QUOTE, list(QUOTE, makeSymbol("EVAL-VAR")))))),
		    list(RET, makeSymbol("TEMPLATE-BINDINGS"))));

    private static final SubLSymbol GENERATE_TO_BINDINGS_CODE_GIVEN_VARS = makeSymbol("GENERATE-TO-BINDINGS-CODE-GIVEN-VARS");

    static private final SubLList $list_alt74 = list(list(makeSymbol("MUST"), list(makeSymbol("CAND"), makeSymbol("VAR"), list(makeSymbol("SYMBOLP"), makeSymbol("VAR"))), makeString("(GENERATE-TO-BINDINGS-CODE-GIVEN-VARS ~S): ~S is not a valie variable."), makeSymbol("SELF"), makeSymbol("VAR")),
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-VARIABLE-LIST-P"), makeSymbol("VARS")), makeString("(GENERATE-TO-BINDINGS-CODE-GIVEN-VARS ~S): ~S is not a valid list of variables."), makeSymbol("SELF"), makeSymbol("VARS")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("TEMPLATE-BINDING-SETTERS"), NIL)),
		    list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("CURRENT-VAR"), makeSymbol("VARS"), makeSymbol("TEMPLATE-BINDING-SETTERS")),
			    list(makeSymbol("LIST"), list(makeSymbol("LIST"), list(QUOTE, makeSymbol("FUNCALL-INSTANCE-METHOD")), makeSymbol("VAR"), list(QUOTE, list(QUOTE, makeSymbol("BIND-VAR"))), makeSymbol("CURRENT-VAR")))),
		    list(RET, makeSymbol("TEMPLATE-BINDING-SETTERS"))));

    static private final SubLString $str_alt75$CYBLACK_GET_KS_ASSISTANT___S_is_n = makeString("CYBLACK-GET-KS-ASSISTANT: ~S is not a non-nil symbol.  A non-nil symbol was expected.");

    private static final SubLSymbol $CYBLACK_AUTO_GENERATED_KS_ASSISTANT = makeKeyword("CYBLACK-AUTO-GENERATED-KS-ASSISTANT");

    static private final SubLString $str_alt77$CYBLACK_SET_KS_ASSISTANT___S_is_n = makeString("CYBLACK-SET-KS-ASSISTANT: ~S is not a non-nil symbol.  A non-nil symbol was expected.");

    static private final SubLString $str_alt78$CYBLACK_SET_KS_ASSISTANT___S_is_n = makeString("CYBLACK-SET-KS-ASSISTANT: ~S is not an auto generated ks assistant. ~\n     an instance of the class CYBLACK-AUTO-GENERATED-KS-ASSISTANT was expected.");

    static private final SubLList $list_alt81 = list(new SubLObject[] { list(makeSymbol("KNOWLEDGE-SOURCE-CLASS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("PROPOSAL-CLASS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("KNOWLEDGE-SOURCE-INSTANTIATION-CLASS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("POST-AT-WILL"), makeKeyword("BOOLEAN"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("PRECONDITION-PATTERN"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("UNIFICATION-TYPES"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("KNOWLEDGE-SOURCE-TYPE"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("PORT-ID"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("EXTERNAL-MODULE-NAME"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KNOWLEDGE-SOURCE-CLASS"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-KNOWLEDGE-SOURCE-CLASS"), list(makeSymbol("SYMBOLIC-CLASS-NAME")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PROPOSAL-CLASS"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-PROPOSAL-CLASS"), list(makeSymbol("SYMBOLIC-CLASS-NAME")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KNOWLEDGE-SOURCE-INSTANTIATION-CLASS"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-KNOWLEDGE-SOURCE-INSTANTIATION-CLASS"), list(makeSymbol("SYMBOLIC-CLASS-NAME")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-POST-AT-WILL"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-POST-AT-WILL"), list(makeSymbol("NEW-STATE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PRECONDITION-PATTERN"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-PRECONDITION-PATTERN"), list(makeSymbol("NEW-PRECONDITION-PATTERN")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-UNIFICATION-TYPES"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-UNIFICATION-TYPES"), list(makeSymbol("NEW-UNIFICATION-TYPES")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KNOWLEDGE-SOURCE-TYPE"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-KNOWLEDGE-SOURCE-TYPE"), list(makeSymbol("NEW-KNOWLEDGE-SOURCE-TYPE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PORT-ID"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-PORT-ID"), list(makeSymbol("NEW-PORT-ID")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-EXTERNAL-MODULE-NAME"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-EXTERNAL-MODULE-NAME"), list(makeSymbol("NEW-EXTERNAL-MODULE-NAME")), makeKeyword("PUBLIC")) });

    private static final SubLSymbol KNOWLEDGE_SOURCE_TYPE = makeSymbol("KNOWLEDGE-SOURCE-TYPE");

    private static final SubLSymbol KNOWLEDGE_SOURCE_INSTANTIATION_CLASS = makeSymbol("KNOWLEDGE-SOURCE-INSTANTIATION-CLASS");

    public static final SubLInteger $int$4097 = makeInteger(4097);

    static private final SubLSymbol $sym93$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_C = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-CLASS");

    static private final SubLSymbol $sym96$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_I = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-INSTANCE");

    static private final SubLList $list_alt98 = list(makeKeyword("PROTECTED"));

    static private final SubLList $list_alt99 = list(new SubLObject[] { list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("KNOWLEDGE-SOURCE-CLASS"), list(QUOTE, makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE"))),
	    list(makeSymbol("CSETQ"), makeSymbol("PROPOSAL-CLASS"), list(QUOTE, makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL"))),
	    list(makeSymbol("CSETQ"), makeSymbol("KNOWLEDGE-SOURCE-INSTANTIATION-CLASS"), list(QUOTE, makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI"))), list(makeSymbol("CSETQ"), makeSymbol("POST-AT-WILL"), NIL), list(makeSymbol("CSETQ"), makeSymbol("PRECONDITION-PATTERN"), NIL),
	    list(makeSymbol("CSETQ"), makeSymbol("UNIFICATION-TYPES"), list(makeSymbol("COPY-LIST"), list(QUOTE, list(makeKeyword("CONSTRAINED"), makeKeyword("ANY"))))), list(makeSymbol("CSETQ"), makeSymbol("KNOWLEDGE-SOURCE-TYPE"), makeKeyword("INTERNAL")),
	    list(RET, makeSymbol("SELF")) });

    static private final SubLSymbol $sym100$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE");

    static private final SubLList $list_alt104 = list(makeKeyword("CONSTRAINED"), makeKeyword("ANY"));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_KS_ASSISTANT_INITIALIZE_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-INITIALIZE-METHOD");

    static private final SubLList $list_alt108 = list(makeKeyword("READ-ONLY"), makeKeyword("PUBLIC"));

    static private final SubLList $list_alt109 = list(list(RET, makeSymbol("KNOWLEDGE-SOURCE-CLASS")));

    static private final SubLSymbol $sym110$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_KNOWLEDGE_SOURCE_CLASS_ME = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-KNOWLEDGE-SOURCE-CLASS-METHOD");

    private static final SubLSymbol SET_KNOWLEDGE_SOURCE_CLASS = makeSymbol("SET-KNOWLEDGE-SOURCE-CLASS");

    static private final SubLList $list_alt112 = list(makeSymbol("SYMBOLIC-CLASS-NAME"));

    static private final SubLList $list_alt113 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("SYMBOLIC-CLASS-NAME")), list(makeSymbol("SYMBOLP"), makeSymbol("SYMBOLIC-CLASS-NAME"))),
		    makeString("(SET-KNOWLEDGE-SOURCE-CLASS ~S): ~S is not a class implementing the CYBLACK-AUTO-GENERATED-KNOWLEDGE-SOURCE interface."), makeSymbol("SELF"), makeSymbol("SYMBOLIC-CLASS-NAME")),
	    list(makeSymbol("CSETQ"), makeSymbol("KNOWLEDGE-SOURCE-CLASS"), makeSymbol("SYMBOLIC-CLASS-NAME")), list(RET, makeSymbol("SYMBOLIC-CLASS-NAME")));

    static private final SubLSymbol $sym114$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLString $str_alt115$_SET_KNOWLEDGE_SOURCE_CLASS__S___ = makeString("(SET-KNOWLEDGE-SOURCE-CLASS ~S): ~S is not a class implementing the CYBLACK-AUTO-GENERATED-KNOWLEDGE-SOURCE interface.");

    static private final SubLSymbol $sym116$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_KNOWLEDGE_SOURCE_CLASS_ME = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-KNOWLEDGE-SOURCE-CLASS-METHOD");

    static private final SubLList $list_alt118 = list(list(RET, makeSymbol("PROPOSAL-CLASS")));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_PROPOSAL_CLASS_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-PROPOSAL-CLASS-METHOD");

    static private final SubLList $list_alt121 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("SYMBOLIC-CLASS-NAME")), list(makeSymbol("SYMBOLP"), makeSymbol("SYMBOLIC-CLASS-NAME"))),
		    makeString("(SET-PROPOSAL-CLASS ~S): ~S is not a class implementing the CYBLACK-AUTO-GENERATED-PROPOSAL interface."), makeSymbol("SELF"), makeSymbol("SYMBOLIC-CLASS-NAME")),
	    list(makeSymbol("CSETQ"), makeSymbol("PROPOSAL-CLASS"), makeSymbol("SYMBOLIC-CLASS-NAME")), list(RET, makeSymbol("SYMBOLIC-CLASS-NAME")));

    static private final SubLSymbol $sym122$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLString $str_alt123$_SET_PROPOSAL_CLASS__S____S_is_no = makeString("(SET-PROPOSAL-CLASS ~S): ~S is not a class implementing the CYBLACK-AUTO-GENERATED-PROPOSAL interface.");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_PROPOSAL_CLASS_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-PROPOSAL-CLASS-METHOD");

    private static final SubLSymbol GET_KNOWLEDGE_SOURCE_INSTANTIATION_CLASS = makeSymbol("GET-KNOWLEDGE-SOURCE-INSTANTIATION-CLASS");

    static private final SubLList $list_alt126 = list(list(RET, makeSymbol("KNOWLEDGE-SOURCE-INSTANTIATION-CLASS")));

    static private final SubLSymbol $sym127$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_KNOWLEDGE_SOURCE_INSTANTI = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-KNOWLEDGE-SOURCE-INSTANTIATION-CLASS-METHOD");

    private static final SubLSymbol SET_KNOWLEDGE_SOURCE_INSTANTIATION_CLASS = makeSymbol("SET-KNOWLEDGE-SOURCE-INSTANTIATION-CLASS");

    static private final SubLList $list_alt129 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("SYMBOLIC-CLASS-NAME")), list(makeSymbol("SYMBOLP"), makeSymbol("SYMBOLIC-CLASS-NAME"))),
		    makeString("(SET-KNOWLEDGE-SOURCE-INSTANTIATION-CLASS ~S): ~S is not a class implementing the CYBLACK-AUTO-GENERATED-KSI interface."), makeSymbol("SELF"), makeSymbol("SYMBOLIC-CLASS-NAME")),
	    list(makeSymbol("CSETQ"), makeSymbol("KNOWLEDGE-SOURCE-INSTANTIATION-CLASS"), makeSymbol("SYMBOLIC-CLASS-NAME")), list(RET, makeSymbol("SYMBOLIC-CLASS-NAME")));

    static private final SubLSymbol $sym130$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLString $str_alt131$_SET_KNOWLEDGE_SOURCE_INSTANTIATI = makeString("(SET-KNOWLEDGE-SOURCE-INSTANTIATION-CLASS ~S): ~S is not a class implementing the CYBLACK-AUTO-GENERATED-KSI interface.");

    static private final SubLSymbol $sym132$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_KNOWLEDGE_SOURCE_INSTANTI = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-KNOWLEDGE-SOURCE-INSTANTIATION-CLASS-METHOD");

    private static final SubLSymbol GET_POST_AT_WILL = makeSymbol("GET-POST-AT-WILL");

    static private final SubLList $list_alt134 = list(list(RET, makeSymbol("POST-AT-WILL")));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_POST_AT_WILL_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-POST-AT-WILL-METHOD");

    static private final SubLList $list_alt137 = list(makeSymbol("NEW-STATE"));

    static private final SubLList $list_alt138 = list(list(makeSymbol("CSETQ"), makeSymbol("POST-AT-WILL"), list(makeSymbol("FIF"), makeSymbol("NEW-STATE"), T, NIL)), list(RET, makeSymbol("POST-AT-WILL")));

    static private final SubLSymbol $sym139$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_POST_AT_WILL_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-POST-AT-WILL-METHOD");

    static private final SubLList $list_alt142 = list(list(RET, makeSymbol("PRECONDITION-PATTERN")));

    static private final SubLSymbol $sym143$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_PRECONDITION_PATTERN_METH = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-PRECONDITION-PATTERN-METHOD");

    static private final SubLList $list_alt145 = list(makeSymbol("NEW-PRECONDITION-PATTERN"));

    static private final SubLList $list_alt146 = list(list(makeSymbol("CSETQ"), makeSymbol("PRECONDITION-PATTERN"), makeSymbol("NEW-PRECONDITION-PATTERN")), list(RET, makeSymbol("NEW-PRECONDITION-PATTERN")));

    static private final SubLSymbol $sym147$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLSymbol $sym148$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_PRECONDITION_PATTERN_METH = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-PRECONDITION-PATTERN-METHOD");

    private static final SubLSymbol GET_UNIFICATION_TYPES = makeSymbol("GET-UNIFICATION-TYPES");

    static private final SubLList $list_alt150 = list(list(RET, makeSymbol("UNIFICATION-TYPES")));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_UNIFICATION_TYPES_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-UNIFICATION-TYPES-METHOD");

    private static final SubLSymbol SET_UNIFICATION_TYPES = makeSymbol("SET-UNIFICATION-TYPES");

    static private final SubLList $list_alt153 = list(makeSymbol("NEW-UNIFICATION-TYPES"));

    static private final SubLList $list_alt154 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-UNIFICATION-MODIFIER-LIST-P"), makeSymbol("NEW-UNIFICATION-TYPES")), makeString("(SET-UNIFICATION-TYPES ~S): ~S is not a valid cyblack unification modifier list."), makeSymbol("SELF"), makeSymbol("NEW-UNIFICATION-TYPES")),
	    list(makeSymbol("CSETQ"), makeSymbol("UNIFICATION-TYPES"), list(makeSymbol("COPY-LIST"), makeSymbol("NEW-UNIFICATION-TYPES"))), list(RET, makeSymbol("NEW-UNIFICATION-TYPES")));

    static private final SubLSymbol $sym155$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLString $str_alt156$_SET_UNIFICATION_TYPES__S____S_is = makeString("(SET-UNIFICATION-TYPES ~S): ~S is not a valid cyblack unification modifier list.");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_UNIFICATION_TYPES_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-UNIFICATION-TYPES-METHOD");

    private static final SubLSymbol GET_KNOWLEDGE_SOURCE_TYPE = makeSymbol("GET-KNOWLEDGE-SOURCE-TYPE");

    static private final SubLList $list_alt159 = list(list(RET, makeSymbol("KNOWLEDGE-SOURCE-TYPE")));

    static private final SubLSymbol $sym160$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_KNOWLEDGE_SOURCE_TYPE_MET = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-KNOWLEDGE-SOURCE-TYPE-METHOD");

    private static final SubLSymbol SET_KNOWLEDGE_SOURCE_TYPE = makeSymbol("SET-KNOWLEDGE-SOURCE-TYPE");

    static private final SubLList $list_alt162 = list(makeSymbol("NEW-KNOWLEDGE-SOURCE-TYPE"));

    static private final SubLList $list_alt163 = list(list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-KNOWLEDGE-SOURCE-TYPE-P"), makeSymbol("NEW-KNOWLEDGE-SOURCE-TYPE")), makeString("(SET-KNOWLEDGE-SOURCE-TYPE ~S): ~S is not a member of the CYBLACK-KNOWLEDGE-SOURCE-TYPE enumeration."),
	    makeSymbol("SELF"), makeSymbol("NEW-KNOWLEDGE-SOURCE-TYPE")), list(makeSymbol("CSETQ"), makeSymbol("KNOWLEDGE-SOURCE-TYPE"), makeSymbol("NEW-KNOWLEDGE-SOURCE-TYPE")), list(RET, makeSymbol("NEW-KNOWLEDGE-SOURCE-TYPE")));

    static private final SubLSymbol $sym164$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLString $str_alt165$_SET_KNOWLEDGE_SOURCE_TYPE__S____ = makeString("(SET-KNOWLEDGE-SOURCE-TYPE ~S): ~S is not a member of the CYBLACK-KNOWLEDGE-SOURCE-TYPE enumeration.");

    static private final SubLSymbol $sym166$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_KNOWLEDGE_SOURCE_TYPE_MET = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-KNOWLEDGE-SOURCE-TYPE-METHOD");

    static private final SubLList $list_alt168 = list(list(RET, makeSymbol("PORT-ID")));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_PORT_ID_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-PORT-ID-METHOD");

    static private final SubLList $list_alt171 = list(makeSymbol("NEW-PORT-ID"));

    static private final SubLList $list_alt172 = list(list(makeSymbol("CSETQ"), makeSymbol("PORT-ID"), makeSymbol("NEW-PORT-ID")), list(RET, makeSymbol("NEW-PORT-ID")));

    static private final SubLSymbol $sym173$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_PORT_ID_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-PORT-ID-METHOD");

    static private final SubLList $list_alt176 = list(list(RET, makeSymbol("EXTERNAL-MODULE-NAME")));

    static private final SubLSymbol $sym177$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_GET_EXTERNAL_MODULE_NAME_METH = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-GET-EXTERNAL-MODULE-NAME-METHOD");

    static private final SubLList $list_alt179 = list(makeSymbol("NEW-EXTERNAL-MODULE-NAME"));

    static private final SubLList $list_alt180 = list(list(makeSymbol("MUST"), list(makeSymbol("STRINGP"), makeSymbol("NEW-EXTERNAL-MODULE-NAME")), makeString("(SET-EXTERNAL-MODULE-NAME ~S): ~S is not a string."), makeSymbol("SELF"), makeSymbol("NEW-EXTERNAL-MODULE-NAME")),
	    list(makeSymbol("CSETQ"), makeSymbol("EXTERNAL-MODULE-NAME"), makeSymbol("NEW-EXTERNAL-MODULE-NAME")), list(RET, makeSymbol("NEW-EXTERNAL-MODULE-NAME")));

    static private final SubLSymbol $sym181$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_KS_ASSISTANT_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLString $str_alt182$_SET_EXTERNAL_MODULE_NAME__S____S = makeString("(SET-EXTERNAL-MODULE-NAME ~S): ~S is not a string.");

    static private final SubLSymbol $sym183$CYBLACK_AUTO_GENERATED_KS_ASSISTANT_SET_EXTERNAL_MODULE_NAME_METH = makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-SET-EXTERNAL-MODULE-NAME-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_KNOWLEDGE_SOURCE_COMPONENT = makeSymbol("CYBLACK-AUTO-GENERATED-KNOWLEDGE-SOURCE-COMPONENT");

    static private final SubLList $list_alt185 = list(list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("GET-AUTO-GENERATED-KS-ASSISTANT"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("SET-AUTO-GENERATED-KS-ASSISTANT"), list(makeSymbol("NEW-ASSISTANT")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-TRACE-STATE"), list(makeSymbol("NEW-STATE")), makeKeyword("PUBLIC")));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_KNOWLEDGE_SOURCE = makeSymbol("CYBLACK-AUTO-GENERATED-KNOWLEDGE-SOURCE");

    static private final SubLList $list_alt187 = list(makeSymbol("CYBLACK-AUTO-GENERATED-KNOWLEDGE-SOURCE-COMPONENT"));

    static private final SubLList $list_alt188 = list(makeKeyword("EXTENDS"), list(makeSymbol("CYBLACK-AUTO-GENERATED-KNOWLEDGE-SOURCE-COMPONENT")));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_PROPOSAL = makeSymbol("CYBLACK-AUTO-GENERATED-PROPOSAL");

    static private final SubLList $list_alt190 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PROPOSAL-INDEX"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-PROPOSAL-INDEX"), list(makeSymbol("NEW-INDEX")), makeKeyword("PUBLIC")));

    static private final SubLList $list_alt192 = list(list(RET, NIL));

    static private final SubLList $list_alt194 = list(makeSymbol("NEW-INDEX"));

    static private final SubLList $list_alt195 = list(list(makeSymbol("IGNORE"), makeSymbol("NEW-INDEX")), list(RET, NIL));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_KSI = makeSymbol("CYBLACK-AUTO-GENERATED-KSI");

    static private final SubLList $list_alt197 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KSI-INDEX"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-KSI-INDEX"), list(makeSymbol("NEW-INDEX")), makeKeyword("PUBLIC")));

    private static final SubLSymbol CYBLACK_INTERNAL_KNOWLEDGE_SOURCE = makeSymbol("CYBLACK-INTERNAL-KNOWLEDGE-SOURCE");

    static private final SubLList $list_alt201 = list(makeSymbol("CYBLACK-AUTO-GENERATED-KNOWLEDGE-SOURCE"), makeSymbol("CYBLACK-SIMPLE-ENVIRONMENT-TEMPLATE"));

    static private final SubLList $list_alt202 = list(new SubLObject[] { list(makeSymbol("BINDING-LIST"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-BINDING-LIST"), NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-BINDING-LIST"), list(makeSymbol("NEW-BINDING-LIST")), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-COPY-OF-BINDING-LIST"), NIL, makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("BIND-VAR"), list(makeSymbol("VAR"), makeSymbol("VALUE")), makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("EVAL-VAR"), list(makeSymbol("VAR")), makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VARIABLES"), NIL, makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUES"), NIL, makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COPY-BINDINGS"), list(makeSymbol("OTHER-ENVIRONMENT")), makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-FROM-BINDINGS-CODE"), list(makeSymbol("VAR")), makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-TO-BINDINGS-CODE"), list(makeSymbol("VAR")), makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-FROM-BINDINGS-CODE-GIVEN-VARS"), list(makeSymbol("VAR"), makeSymbol("VARS")), makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-TO-BINDINGS-CODE-GIVEN-VARS"), list(makeSymbol("VAR"), makeSymbol("VARS")), makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("AUTO-GENERATED-KS-ASSISTENT"), makeKeyword("CLASS"), makeKeyword("PROTECTED")), list(makeSymbol("TRACE-BASIC-METHODS"), makeKeyword("BOOLEAN"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("GET-AUTO-GENERATED-KS-ASSISTANT"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("SET-AUTO-GENERATED-KS-ASSISTANT"), list(makeSymbol("NEW-ASSISTANT")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-TRACE-STATE"), list(makeSymbol("NEW-STATE")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("NEW-KNOWLEDGE-SOURCE"), list(makeSymbol("NEW-APPLICATION")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("NEW-PROPOSAL"), list(makeSymbol("KNOWLEDGE-SOURCE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("NEW-KSI"), list(makeSymbol("PROPOSAL")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("STIMULATE"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), NIL)), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CREATE-PROPOSALS"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), NIL)), makeKeyword("PUBLIC")) });

    public static final SubLInteger $int$4107 = makeInteger(4107);

    static private final SubLString $str_alt207$_GENERATE_TO_BINDINGS_CODE_GIVEN_ = makeString("(GENERATE-TO-BINDINGS-CODE-GIVEN-VARS ~S): ~S is not a valie variable.");

    static private final SubLString $str_alt208$_GENERATE_TO_BINDINGS_CODE_GIVEN_ = makeString("(GENERATE-TO-BINDINGS-CODE-GIVEN-VARS ~S): ~S is not a valid list of variables.");

    static private final SubLList $list_alt210 = list(QUOTE, makeSymbol("BIND-VAR"));

    static private final SubLSymbol $sym211$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GENERATE_TO_BIND = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GENERATE-TO-BINDINGS-CODE-GIVEN-VARS-METHOD");

    static private final SubLString $str_alt212$_GENERATE_FROM_BINDINGS_CODE_GIVE = makeString("(GENERATE-FROM-BINDINGS-CODE-GIVEN-VARS ~S): ~S is not a valie variable.");

    static private final SubLString $str_alt213$_GENERATE_FROM_BINDINGS_CODE_GIVE = makeString("(GENERATE-FROM-BINDINGS-CODE-GIVEN-VARS ~S): ~S is not a valid list of variables.");

    static private final SubLList $list_alt214 = list(QUOTE, makeSymbol("EVAL-VAR"));

    static private final SubLSymbol $sym215$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GENERATE_FROM_BI = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GENERATE-FROM-BINDINGS-CODE-GIVEN-VARS-METHOD");

    static private final SubLSymbol $sym216$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GENERATE_TO_BIND = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GENERATE-TO-BINDINGS-CODE-METHOD");

    static private final SubLSymbol $sym217$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GENERATE_FROM_BI = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GENERATE-FROM-BINDINGS-CODE-METHOD");

    static private final SubLString $str_alt218$_COPY_BINDINGS__S____S_is_not_an_ = makeString("(COPY-BINDINGS ~S): ~S is not an instance of CYBLACK-SIMPLE-ENVIRONMENT-TEMPLATE.");

    static private final SubLSymbol $sym219$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_COPY_BINDINGS_ME = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-COPY-BINDINGS-METHOD");

    static private final SubLSymbol $sym220$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GET_VALUES_METHO = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GET-VALUES-METHOD");

    static private final SubLSymbol $sym221$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GET_VARIABLES_ME = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GET-VARIABLES-METHOD");

    static private final SubLString $str_alt222$_EVAL_VAR__S___Variable__S_is_not = makeString("(EVAL-VAR ~S): Variable ~S is not bound.");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_EVAL_VAR_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-EVAL-VAR-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_BIND_VAR_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-BIND-VAR-METHOD");

    static private final SubLSymbol $sym225$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GET_COPY_OF_BIND = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GET-COPY-OF-BINDING-LIST-METHOD");

    static private final SubLSymbol $sym226$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWL = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-CLASS");

    private static final SubLSymbol CYBLACK_PROTO_KNOWLEDGE_SOURCE = makeSymbol("CYBLACK-PROTO-KNOWLEDGE-SOURCE");

    private static final SubLSymbol REMOVE_KNOWLEDGE_SOURCES_AT_WILL = makeSymbol("REMOVE-KNOWLEDGE-SOURCES-AT-WILL");

    private static final SubLSymbol CYBLACK_BASIC_KNOWLEDGE_SOURCE = makeSymbol("CYBLACK-BASIC-KNOWLEDGE-SOURCE");

    private static final SubLSymbol RANGE_SET = makeSymbol("RANGE-SET");

    static private final SubLSymbol $sym252$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWL = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-INSTANCE");

    static private final SubLList $list_alt253 = list(list(makeSymbol("CSETQ"), makeSymbol("BINDING-LIST"), NIL), list(makeSymbol("CSETQ"), makeSymbol("UNIFICATION-ROBOT-CLASS"), list(QUOTE, makeSymbol("CYBLACK-CONSTRAINED-UNIFICATION-ROBOT-SATISFIED-BY-ANY-SOLUTION"))),
	    list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym254$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_ = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-METHOD");

    static private final SubLSymbol $sym255$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_INITIALIZE_METHO = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-INITIALIZE-METHOD");

    static private final SubLList $list_alt257 = list(makeKeyword("READ-ONLY"), makeKeyword("PROTECTED"));

    static private final SubLList $list_alt258 = list(list(RET, makeSymbol("BINDING-LIST")));

    static private final SubLSymbol $sym259$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GET_BINDING_LIST = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GET-BINDING-LIST-METHOD");

    static private final SubLList $list_alt261 = list(makeSymbol("NEW-BINDING-LIST"));

    static private final SubLList $list_alt262 = list(list(makeSymbol("MUST"), list(makeSymbol("LISTP"), makeSymbol("BINDING-LIST")), makeString("(SET-BINDING-LIST ~S): A binding list must be a list.  ~S is not a list."), makeSymbol("SELF"), makeSymbol("NEW-BINDING-LIST")),
	    list(makeSymbol("CSETQ"), makeSymbol("BINDING-LIST"), makeSymbol("NEW-BINDING-LIST")), list(RET, makeSymbol("NEW-BINDING-LIST")));

    static private final SubLSymbol $sym263$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_ = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-METHOD");

    static private final SubLString $str_alt264$_SET_BINDING_LIST__S___A_binding_ = makeString("(SET-BINDING-LIST ~S): A binding list must be a list.  ~S is not a list.");

    static private final SubLSymbol $sym265$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_SET_BINDING_LIST = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-SET-BINDING-LIST-METHOD");

    static private final SubLList $list_alt267 = list(makeKeyword("NO-MEMBER-VARIABLES"), makeKeyword("PUBLIC"));

    static private final SubLList $list_alt268 = list(list(makeSymbol("CLET"), list(list(makeSymbol("ASSISTANT"), NIL)),
	    list(makeSymbol("CDOLIST"), list(makeSymbol("CLASS-REFERENCE"), list(makeSymbol("CLASS-COMPILED-INHERITANCE-PATH"), makeSymbol("SELF"))),
		    list(makeSymbol("PUNLESS"), list(makeSymbol("SUBCLASSP"), makeSymbol("CLASS-REFERENCE"), list(QUOTE, makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE"))), list(RET, NIL)),
		    list(makeSymbol("CSETQ"), makeSymbol("ASSISTANT"), list(makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GET-AUTO-GENERATED-KS-ASSISTANT-METHOD"), makeSymbol("CLASS-REFERENCE"))),
		    list(makeSymbol("PWHEN"), makeSymbol("ASSISTANT"), list(RET, makeSymbol("ASSISTANT")))),
	    list(RET, NIL)));

    static private final SubLSymbol $sym269$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_GET_AUTO_GENERAT = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-GET-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    private static final SubLSymbol SET_AUTO_GENERATED_KS_ASSISTANT = makeSymbol("SET-AUTO-GENERATED-KS-ASSISTANT");

    static private final SubLList $list_alt271 = list(makeSymbol("NEW-ASSISTANT"));

    static private final SubLList $list_alt272 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-ASSISTANT")), list(makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-P"), makeSymbol("NEW-ASSISTANT"))),
		    makeString("(SET-AUTO-GENERATED-KS-ASSISTANT ~S): ~S is not an instance of CYBLACK-AUTO-GENERATED-KS-ASSISTANT."), makeSymbol("SELF"), makeSymbol("NEW-ASSISTANT")),
	    list(makeSymbol("CSETQ"), makeSymbol("AUTO-GENERATED-KS-ASSISTENT"), makeSymbol("NEW-ASSISTANT")), list(RET, makeSymbol("NEW-ASSISTANT")));

    static private final SubLSymbol $sym273$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_ = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-METHOD");

    static private final SubLString $str_alt274$_SET_AUTO_GENERATED_KS_ASSISTANT_ = makeString("(SET-AUTO-GENERATED-KS-ASSISTANT ~S): ~S is not an instance of CYBLACK-AUTO-GENERATED-KS-ASSISTANT.");

    static private final SubLSymbol $sym275$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_SET_AUTO_GENERAT = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-SET-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLList $list_alt277 = list(list(makeSymbol("CSETQ"), makeSymbol("TRACE-BASIC-METHODS"), makeSymbol("NEW-STATE")), list(RET, makeSymbol("NEW-STATE")));

    static private final SubLSymbol $sym278$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_ = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-METHOD");

    static private final SubLSymbol $sym279$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_SET_TRACE_STATE_ = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-SET-TRACE-STATE-METHOD");

    static private final SubLList $list_alt281 = list(makeSymbol("NEW-APPLICATION"));

    static private final SubLList $list_alt282 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-APPLICATION")), list(makeSymbol("CYBLACK-APPLICATION-P"), makeSymbol("NEW-APPLICATION"))), makeString("(NEW-KNOWLEDGE-SOURCE ~S): ~S is not an instance of CYBLACK-APPLICATION."), makeSymbol("SELF"),
		    makeSymbol("NEW-APPLICATION")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("ASSISTANT"), list(makeSymbol("GET-AUTO-GENERATED-KS-ASSISTANT"), makeSymbol("SELF")))),
		    list(makeSymbol("MUST"), makeSymbol("ASSISTANT"), makeString("(NEW-KNOWLEDGE-SOURCE ~S): No auto generated knowledge source assistant is associated with this knowledge souce class."), makeSymbol("SELF")),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("KNOWLEDGE-SOURCE-CLASS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-KNOWLEDGE-SOURCE-CLASS"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("ASSISTANT"))),
				    list(makeSymbol("RAW-PRECONDITION-PATTERN"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-PRECONDITION-PATTERN"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("ASSISTANT"))),
				    list(makeSymbol("UNIFICATION-TYPES"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-UNIFICATION-TYPES"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("ASSISTANT"))),
				    list(makeSymbol("UNIFICATION-ROBOT-CLASS"), list(makeSymbol("CYBLACK-UNIFIER-CLASS-GIVEN-DESCRIPTION"), makeSymbol("UNIFICATION-TYPES")))),
			    list(makeSymbol("MUST"), makeSymbol("KNOWLEDGE-SOURCE-CLASS"), makeString("(NEW-KNOWLEDGE-SOURCE ~S): The auto generated assistant ~S associated with this KS has ~\n         no associated knowledge source class."), makeSymbol("SELF"),
				    makeSymbol("KNOWLEDGE-SOURCE-CLASS")),
			    list(makeSymbol("CLET"), list(list(makeSymbol("KNOWLEDGE-SOURCE"), list(makeSymbol("NEW-CLASS-INSTANCE"), makeSymbol("KNOWLEDGE-SOURCE-CLASS")))),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("KNOWLEDGE-SOURCE"), list(QUOTE, makeSymbol("SET-APPLICATION")), makeSymbol("NEW-APPLICATION")),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("KNOWLEDGE-SOURCE"), list(QUOTE, makeSymbol("SET-PRECONDITION-PATTERN")), list(makeSymbol("COPY-TREE"), makeSymbol("RAW-PRECONDITION-PATTERN"))),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("KNOWLEDGE-SOURCE"), list(QUOTE, makeSymbol("SET-UNIFICATION-ROBOT-CLASS")), makeSymbol("UNIFICATION-ROBOT-CLASS")), list(RET, makeSymbol("KNOWLEDGE-SOURCE"))))));

    static private final SubLSymbol $sym283$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_ = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-METHOD");

    static private final SubLString $str_alt284$_NEW_KNOWLEDGE_SOURCE__S____S_is_ = makeString("(NEW-KNOWLEDGE-SOURCE ~S): ~S is not an instance of CYBLACK-APPLICATION.");

    static private final SubLString $str_alt285$_NEW_KNOWLEDGE_SOURCE__S___No_aut = makeString("(NEW-KNOWLEDGE-SOURCE ~S): No auto generated knowledge source assistant is associated with this knowledge souce class.");

    static private final SubLString $str_alt286$_NEW_KNOWLEDGE_SOURCE__S___The_au = makeString("(NEW-KNOWLEDGE-SOURCE ~S): The auto generated assistant ~S associated with this KS has ~\n         no associated knowledge source class.");

    static private final SubLSymbol $sym289$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_NEW_KNOWLEDGE_SO = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-NEW-KNOWLEDGE-SOURCE-METHOD");

    static private final SubLList $list_alt291 = list(makeSymbol("KNOWLEDGE-SOURCE"));

    static private final SubLList $list_alt292 = list(list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-KNOWLEDGE-SOURCE-P"), makeSymbol("KNOWLEDGE-SOURCE")), makeString("(NEW-PROPOSAL ~S): ~S is not an instance of CYBLACK-KNOWLEDGE-SOURCE."), makeSymbol("SELF"), makeSymbol("KNOWLEDGE-SOURCE")),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("ASSISTANT"), list(makeSymbol("GET-AUTO-GENERATED-KS-ASSISTANT"), makeSymbol("SELF"))), list(makeSymbol("KS-APPLICATION"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("KNOWLEDGE-SOURCE"), list(QUOTE, makeSymbol("GET-APPLICATION"))))),
		    list(makeSymbol("MUST"), makeSymbol("ASSISTANT"), makeString("(NEW-KNOWLEDGE-SOURCE ~S): No auto generated knowledge source assistant is associated with this knowledge souce class."), makeSymbol("SELF")),
		    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-APPLICATION-P"), makeSymbol("KS-APPLICATION")), makeString("(NEW-KNOWLEDGE-SOURCE ~S): The value ~S associated with knowledge source ~S is not an instance of CYBLACK-APPLICATION."), makeSymbol("SELF"),
			    makeSymbol("KS-APPLICATION"), makeSymbol("KNOWLEDGE-SOURCE")),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("PROPOSAL-CLASS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-PROPOSAL-CLASS"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("ASSISTANT"))),
				    list(makeSymbol("KNOWLEDGE-SOURCE-CLASS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-KNOWLEDGE-SOURCE-CLASS"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("ASSISTANT")))),
			    list(makeSymbol("MUST"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("KNOWLEDGE-SOURCE"), makeSymbol("KNOWLEDGE-SOURCE-CLASS")), makeString("(NEW-PROPOSAL ~S): Illegal use of NEW-PROPOSAL.  Knowledge source ~S is not an instance of ~S."), makeSymbol("SELF"),
				    makeSymbol("KNOWLEDGE-SOURCE"), makeSymbol("KNOWLEDGE-SOURCE-CLASS")),
			    list(makeSymbol("CLET"), list(list(makeSymbol("PROPOSAL-INSTANCE"), list(makeSymbol("NEW-CLASS-INSTANCE"), makeSymbol("PROPOSAL-CLASS")))),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("PROPOSAL-INSTANCE"), list(QUOTE, makeSymbol("SET-APPLICATION")), makeSymbol("KS-APPLICATION")),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("PROPOSAL-INSTANCE"), list(QUOTE, makeSymbol("SET-KNOWLEDGE-SOURCE")), makeSymbol("KNOWLEDGE-SOURCE")),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("PROPOSAL-INSTANCE"), list(QUOTE, makeSymbol("SET-EXECUTION-MODE")), makeKeyword("SYNCHRONOUS")),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("PROPOSAL-INSTANCE"), list(QUOTE, makeSymbol("SET-AGENDA")), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("KS-APPLICATION"), list(QUOTE, makeSymbol("GET-AGENDA")))),
				    list(RET, makeSymbol("PROPOSAL-INSTANCE"))))));

    static private final SubLString $str_alt293$_NEW_PROPOSAL__S____S_is_not_an_i = makeString("(NEW-PROPOSAL ~S): ~S is not an instance of CYBLACK-KNOWLEDGE-SOURCE.");

    static private final SubLString $str_alt295$_NEW_KNOWLEDGE_SOURCE__S___The_va = makeString("(NEW-KNOWLEDGE-SOURCE ~S): The value ~S associated with knowledge source ~S is not an instance of CYBLACK-APPLICATION.");

    static private final SubLString $str_alt296$_NEW_PROPOSAL__S___Illegal_use_of = makeString("(NEW-PROPOSAL ~S): Illegal use of NEW-PROPOSAL.  Knowledge source ~S is not an instance of ~S.");

    private static final SubLSymbol $SYNCHRONOUS = makeKeyword("SYNCHRONOUS");

    private static final SubLSymbol SET_AGENDA = makeSymbol("SET-AGENDA");

    static private final SubLSymbol $sym302$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_NEW_PROPOSAL_MET = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-NEW-PROPOSAL-METHOD");

    static private final SubLList $list_alt304 = list(makeSymbol("PROPOSAL"));

    static private final SubLList $list_alt305 = list(list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-PROPOSAL-P"), makeSymbol("PROPOSAL")), makeString("(NEW-KSI ~S): ~S is not a valid instance of CYBLACK-PROPOSAL."), makeSymbol("SELF"), makeSymbol("PROPOSAL")), list(makeSymbol("CLET"),
	    list(list(makeSymbol("ASSISTANT"), list(makeSymbol("GET-AUTO-GENERATED-KS-ASSISTANT"), makeSymbol("SELF"))), list(makeSymbol("PROPOSAL-APPLICATION"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("PROPOSAL"), list(QUOTE, makeSymbol("GET-APPLICATION"))))),
	    list(makeSymbol("MUST"), makeSymbol("ASSISTANT"), makeString("(NEW-KSI ~S): No auto generated knowledge source assistant is associated with this knowledge souce class."), makeSymbol("SELF")),
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-PROPOSAL-P"), makeSymbol("PROPOSAL-APPLICATION")), makeString("(NEW-KSI ~S): The value ~S associated with proposal ~S is not an instance of CYBLACK-APPLICATION."), makeSymbol("SELF"), makeSymbol("PROPOSAL-APPLICATION"),
		    makeSymbol("PROPOSAL")),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("KSI-CLASS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-KNOWLEDGE-SOURCE-INSTANTIATION-CLASS"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("ASSISTANT"))),
			    list(makeSymbol("PROPOSAL-CLASS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-PROPOSAL-CLASS"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("ASSISTANT")))),
		    list(makeSymbol("MUST"), list(makeSymbol("INSTANCE-OF-P"), makeSymbol("PROPOSAL"), makeSymbol("PROPOSAL-CLASS")), makeString("(NEW-KSI ~S): Illegal use of NEW-KSI.  Proposal ~S is not an instance of ~S."), makeSymbol("SELF"), makeSymbol("PROPOSAL"), makeSymbol("PROPOSAL-CLASS")),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("KSI-INSTANCE"), list(makeSymbol("NEW-CLASS-INSTANCE"), makeSymbol("KSI-CLASS"))),
				    list(makeSymbol("PROPOSAL-ACTIVATION-PATTERN"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("PROPOSAL"), list(QUOTE, makeSymbol("GET-ACTIVATION-PATTERN"))))),
			    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("KSI-INSTANCE"), list(QUOTE, makeSymbol("SET-APPLICATION")), makeSymbol("PROPOSAL-APPLICATION")),
			    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("KSI-INSTANCE"), list(QUOTE, makeSymbol("SET-EXECUTION-MODE")), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("PROPOSAL"), list(QUOTE, makeSymbol("GET-EXECUTION-MODE")))),
			    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("KSI-INSTANCE"), list(QUOTE, makeSymbol("SET-ACTIVATION-PATTERN")),
				    list(makeSymbol("FIF"), makeSymbol("PROPOSAL-ACTIVATION-PATTERN"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("PROPOSAL-ACTIVATION-PATTERN"), list(QUOTE, makeSymbol("CLONE"))), NIL)),
			    list(RET, makeSymbol("KSI-INSTANCE"))))));

    static private final SubLString $str_alt306$_NEW_KSI__S____S_is_not_a_valid_i = makeString("(NEW-KSI ~S): ~S is not a valid instance of CYBLACK-PROPOSAL.");

    static private final SubLString $str_alt307$_NEW_KSI__S___No_auto_generated_k = makeString("(NEW-KSI ~S): No auto generated knowledge source assistant is associated with this knowledge souce class.");

    static private final SubLString $str_alt308$_NEW_KSI__S___The_value__S_associ = makeString("(NEW-KSI ~S): The value ~S associated with proposal ~S is not an instance of CYBLACK-APPLICATION.");

    static private final SubLString $str_alt309$_NEW_KSI__S___Illegal_use_of_NEW_ = makeString("(NEW-KSI ~S): Illegal use of NEW-KSI.  Proposal ~S is not an instance of ~S.");

    private static final SubLSymbol GET_EXECUTION_MODE = makeSymbol("GET-EXECUTION-MODE");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_NEW_KSI_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-NEW-KSI-METHOD");

    static private final SubLList $list_alt316 = list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), NIL));

    static private final SubLList $list_alt317 = list(
	    list(makeSymbol("MUST"), makeSymbol("APPLICATION"), makeString("(STIMULATE ~S): No application is associated with knowledge source ~S."), makeSymbol("SELF"), makeSymbol(
		    "SELF")),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("BLACKBOARD"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("APPLICATION"), list(QUOTE, makeSymbol("GET-BLACKBOARD")))),
			    list(makeSymbol("AGENDA"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("APPLICATION"), list(QUOTE, makeSymbol("GET-AGENDA"))))),
		    list(makeSymbol("MUST"), makeSymbol("BLACKBOARD"), makeString("(STIMULATE ~S): No blackboard is associated with application ~S."), makeSymbol("SELF"), makeSymbol("APPLICATION")),
		    list(makeSymbol("MUST"), makeSymbol("AGENDA"), makeString(
			    "(STIMULATE ~S): No agenda is associated with application ~S."), makeSymbol("SELF"), makeSymbol("AGENDA")),
		    list(makeSymbol("CLET"), list(list(makeSymbol("PRECONDITION-PATTERN"),
			    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("GET-PRECONDITION-PATTERN"))))), list(makeSymbol("PWHEN"), makeSymbol("PRECONDITION-PATTERN"),
				    list(makeSymbol("CYBLACK-PATTERN-SET-ENVIRONMENT"), makeSymbol("PRECONDITION-PATTERN"), makeSymbol(
					    "ENVIRONMENT")),
				    list(makeSymbol("CLET"),
					    list(list(makeSymbol("ACTIVATION-PATTERNS"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("BLACKBOARD"), list(QUOTE, makeSymbol("UNIFY")), makeSymbol("PRECONDITION-PATTERN"), makeSymbol("UNIFICATION-ROBOT-CLASS")))),
					    list(makeSymbol("PWHEN"), makeSymbol("ACTIVATION-PATTERNS"), list(makeSymbol("PIF"), list(makeSymbol("CYBLACK-MONITORING-KS-P"), makeSymbol("SELF")),
						    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("PERFORM-ACTION")), makeSymbol("ACTIVATION-PATTERNS")),
						    list(makeSymbol("CLET"), list(list(makeSymbol("ENUMERATOR"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ACTIVATION-PATTERNS"), list(QUOTE, makeSymbol("ALLOCATE-ENUMERATOR"))))), list(makeSymbol("PUNLESS"),
							    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ENUMERATOR"), list(QUOTE, makeSymbol("EMPTY-P"))),
							    list(makeSymbol("CLET"), list(list(makeSymbol("ACTIVATION-PATTERN"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ENUMERATOR"), list(QUOTE, makeSymbol("FIRST"))))),
								    list(makeSymbol("PWHEN"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("ON-ACTIVATE")), makeSymbol("ACTIVATION-PATTERN")), list(makeSymbol("CLET"),
									    list(list(makeSymbol("PROPOSALS"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("CREATE-PROPOSALS")), makeSymbol("ACTIVATION-PATTERN")))),
									    list(makeSymbol("CDOLIST"), list(makeSymbol("PROPOSAL"), makeSymbol("PROPOSALS")),
										    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("POST-PROPOSAL")), makeSymbol("PROPOSAL"), makeSymbol("AGENDA"))))),
								    list(makeSymbol("WHILE"), list(makeSymbol("CNOT"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ENUMERATOR"), list(QUOTE, makeSymbol("LAST-P")))),
									    list(makeSymbol("CSETQ"), makeSymbol("ACTIVATION-PATTERN"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ENUMERATOR"), list(QUOTE, makeSymbol("NEXT")))),
									    list(makeSymbol("PWHEN"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("ON-ACTIVATE")), makeSymbol("ACTIVATION-PATTERN")),
										    list(makeSymbol("CLET"),
											    list(list(makeSymbol("PROPOSALS"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("CREATE-PROPOSALS")), makeSymbol("ACTIVATION-PATTERN")))),
											    list(makeSymbol("CDOLIST"), list(makeSymbol("PROPOSAL"), makeSymbol("PROPOSALS")),
												    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("POST-PROPOSAL")), makeSymbol("PROPOSAL"), makeSymbol("AGENDA")))))))),
							    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ACTIVATION-PATTERNS"), list(QUOTE, makeSymbol("DEALLOCATE-ENUMERATOR")), makeSymbol("ENUMERATOR"))))))))),
	    list(RET, NIL));

    static private final SubLSymbol $sym318$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_ = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-METHOD");

    static private final SubLString $str_alt319$_STIMULATE__S___No_application_is = makeString("(STIMULATE ~S): No application is associated with knowledge source ~S.");

    static private final SubLString $str_alt321$_STIMULATE__S___No_blackboard_is_ = makeString("(STIMULATE ~S): No blackboard is associated with application ~S.");

    static private final SubLString $str_alt322$_STIMULATE__S___No_agenda_is_asso = makeString("(STIMULATE ~S): No agenda is associated with application ~S.");

    private static final SubLSymbol POST_PROPOSAL = makeSymbol("POST-PROPOSAL");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_STIMULATE_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-STIMULATE-METHOD");

    static private final SubLList $list_alt335 = list(list(makeSymbol("IGNORE"), makeSymbol("ENVIRONMENT")), list(RET, NIL));

    static private final SubLSymbol $sym336$CYBLACK_AUTO_GENERATED_INTERNAL_KNOWLEDGE_SOURCE_CREATE_PROPOSALS = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KNOWLEDGE-SOURCE-CREATE-PROPOSALS-METHOD");

    private static final SubLSymbol CYBLACK_INTERNAL_PROPOSAL = makeSymbol("CYBLACK-INTERNAL-PROPOSAL");

    static private final SubLList $list_alt338 = list(makeSymbol("CYBLACK-AUTO-GENERATED-PROPOSAL"), makeSymbol("CYBLACK-SIMPLE-ENVIRONMENT-TEMPLATE"));

    static private final SubLList $list_alt339 = list(new SubLObject[] { list(makeSymbol("BINDING-LIST"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-BINDING-LIST"), NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-BINDING-LIST"), list(makeSymbol("NEW-BINDING-LIST")), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-COPY-OF-BINDING-LIST"), NIL, makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("BIND-VAR"), list(makeSymbol("VAR"), makeSymbol("VALUE")), makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("EVAL-VAR"), list(makeSymbol("VAR")), makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VARIABLES"), NIL, makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUES"), NIL, makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COPY-BINDINGS"), list(makeSymbol("OTHER-ENVIRONMENT")), makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-FROM-BINDINGS-CODE"), list(makeSymbol("VAR")), makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-TO-BINDINGS-CODE"), list(makeSymbol("VAR")), makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-FROM-BINDINGS-CODE-GIVEN-VARS"), list(makeSymbol("VAR"), makeSymbol("VARS")), makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-TO-BINDINGS-CODE-GIVEN-VARS"), list(makeSymbol("VAR"), makeSymbol("VARS")), makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("AUTO-GENERATED-KS-ASSISTENT"), makeKeyword("CLASS"), makeKeyword("PROTECTED")), list(makeSymbol("PROPOSAL-INDEX"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("TRACE-BASIC-METHODS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("GET-AUTO-GENERATED-KS-ASSISTANT"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("SET-AUTO-GENERATED-KS-ASSISTANT"), list(makeSymbol("NEW-ASSISTANT")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PROPOSAL-INDEX"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-PROPOSAL-INDEX"), list(makeSymbol("NEW-INDEX")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-TRACE-STATE"), list(makeSymbol("NEW-STATE")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")) });

    private static final SubLSymbol PROPOSAL_INDEX = makeSymbol("PROPOSAL-INDEX");

    static private final SubLSymbol $sym341$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GENERATE_TO_BINDINGS_COD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GENERATE-TO-BINDINGS-CODE-GIVEN-VARS-METHOD");

    static private final SubLSymbol $sym342$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GENERATE_FROM_BINDINGS_C = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GENERATE-FROM-BINDINGS-CODE-GIVEN-VARS-METHOD");

    static private final SubLSymbol $sym343$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GENERATE_TO_BINDINGS_COD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GENERATE-TO-BINDINGS-CODE-METHOD");

    static private final SubLSymbol $sym344$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GENERATE_FROM_BINDINGS_C = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GENERATE-FROM-BINDINGS-CODE-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_COPY_BINDINGS_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-COPY-BINDINGS-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GET_VALUES_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GET-VALUES-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GET_VARIABLES_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GET-VARIABLES-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_EVAL_VAR_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-EVAL-VAR-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_BIND_VAR_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-BIND-VAR-METHOD");

    static private final SubLSymbol $sym350$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GET_COPY_OF_BINDING_LIST = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GET-COPY-OF-BINDING-LIST-METHOD");

    static private final SubLSymbol $sym351$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_INTERNAL_PROPO = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-CLASS");

    static private final SubLSymbol $sym362$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_INTERNAL_PROPO = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-INSTANCE");

    static private final SubLList $list_alt363 = list(list(makeSymbol("CSETQ"), makeSymbol("BINDING-LIST"), NIL), list(makeSymbol("CSETQ"), makeSymbol("PROPOSAL-INDEX"), NIL), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym364$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_INITIALIZE_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-INITIALIZE-METHOD");

    static private final SubLList $list_alt367 = list(makeSymbol("STREAM"), makeSymbol("DEPTH"));

    static private final SubLList $list_alt368 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")),
	    list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("#<PROPOSAL(~S): KS=~S>"), list(makeSymbol("CLASS-NAME"), list(makeSymbol("CLASS-OF"), makeSymbol("SELF"))), list(makeSymbol("GET-KNOWLEDGE-SOURCE"), makeSymbol("SELF"))), list(RET, makeSymbol("SELF")));

    static private final SubLString $str_alt369$__PROPOSAL__S___KS__S_ = makeString("#<PROPOSAL(~S): KS=~S>");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_PRINT_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GET_BINDING_LIST_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GET-BINDING-LIST-METHOD");

    static private final SubLSymbol $sym372$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_SET_BINDING_LIST_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-SET-BINDING-LIST-METHOD");

    static private final SubLList $list_alt374 = list(list(makeSymbol("CLET"), list(list(makeSymbol("ASSISTANT"), NIL)), list(makeSymbol("CDOLIST"), list(makeSymbol("CLASS-REFERENCE"), list(makeSymbol("CLASS-COMPILED-INHERITANCE-PATH"), makeSymbol("SELF"))),
	    list(makeSymbol("PUNLESS"), list(makeSymbol("SUBCLASSP"), makeSymbol("CLASS-REFERENCE"), list(QUOTE, makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL"))), list(RET, NIL)),
	    list(makeSymbol("CSETQ"), makeSymbol("ASSISTANT"), list(makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GET-AUTO-GENERATED-KS-ASSISTANT-METHOD"), makeSymbol("CLASS-REFERENCE"))), list(makeSymbol("PWHEN"), makeSymbol("ASSISTANT"), list(RET, makeSymbol("ASSISTANT")))),
	    list(RET, NIL)));

    static private final SubLSymbol $sym375$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GET_AUTO_GENERATED_KS_AS = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GET-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLSymbol $sym376$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-METHOD");

    static private final SubLSymbol $sym377$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_SET_AUTO_GENERATED_KS_AS = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-SET-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLList $list_alt378 = list(list(RET, makeSymbol("PROPOSAL-INDEX")));

    static private final SubLSymbol $sym379$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_GET_PROPOSAL_INDEX_METHO = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-GET-PROPOSAL-INDEX-METHOD");

    static private final SubLList $list_alt380 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CAND"), list(makeSymbol("INTEGERP"), makeSymbol("NEW-INDEX")), list(makeSymbol(">="), makeSymbol("NEW-INDEX"), ZERO_INTEGER)), makeString("(SET-PROPOSAL-INDEX ~S): Index ~S is out of range."), makeSymbol("SELF"), makeSymbol("NEW-INDEX")),
	    list(makeSymbol("CSETQ"), makeSymbol("PROPOSAL-INDEX"), makeSymbol("NEW-INDEX")), list(RET, makeSymbol("NEW-INDEX")));

    static private final SubLSymbol $sym381$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-METHOD");

    static private final SubLString $str_alt382$_SET_PROPOSAL_INDEX__S___Index__S = makeString("(SET-PROPOSAL-INDEX ~S): Index ~S is out of range.");

    static private final SubLSymbol $sym383$CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_SET_PROPOSAL_INDEX_METHO = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-SET-PROPOSAL-INDEX-METHOD");

    static private final SubLSymbol $sym384$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_PROPOSAL_SET_TRACE_STATE_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-SET-TRACE-STATE-METHOD");

    static private final SubLList $list_alt387 = list(makeSymbol("CYBLACK-AUTO-GENERATED-KSI"), makeSymbol("CYBLACK-SIMPLE-ENVIRONMENT-TEMPLATE"));

    static private final SubLList $list_alt388 = list(
	    new SubLObject[] { list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-BINDING-LIST"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-BINDING-LIST"), list(makeSymbol("NEW-BINDING-LIST")), makeKeyword("PROTECTED")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-COPY-OF-BINDING-LIST"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("BIND-VAR"), list(makeSymbol("VAR"), makeSymbol("VALUE")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("EVAL-VAR"), list(makeSymbol("VAR")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VARIABLES"), NIL, makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-VALUES"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COPY-BINDINGS"), list(makeSymbol("OTHER-ENVIRONMENT")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-FROM-BINDINGS-CODE"), list(makeSymbol("VAR")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-TO-BINDINGS-CODE"), list(makeSymbol("VAR")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-FROM-BINDINGS-CODE-GIVEN-VARS"), list(makeSymbol("VAR"), makeSymbol("VARS")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-TO-BINDINGS-CODE-GIVEN-VARS"), list(makeSymbol("VAR"), makeSymbol("VARS")), makeKeyword("PUBLIC")), list(makeSymbol("AUTO-GENERATED-KS-ASSISTENT"), makeKeyword("CLASS"), makeKeyword("PROTECTED")),
		    list(makeSymbol("KSI-INDEX"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("TRACE-BASIC-METHODS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
		    list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("GET-AUTO-GENERATED-KS-ASSISTANT"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("SET-AUTO-GENERATED-KS-ASSISTANT"), list(makeSymbol("NEW-ASSISTANT")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KSI-INDEX"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-KSI-INDEX"), list(makeSymbol("NEW-INDEX")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-TRACE-STATE"), list(makeSymbol("NEW-STATE")), makeKeyword("PUBLIC")), list(makeSymbol("PROPOSAL"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
		    list(makeSymbol("IS-PROPOSAL-AUTO-GENERATED"), makeKeyword("BOOLEAN"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PROPOSAL"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-PROPOSAL"), list(makeSymbol("NEW-PROPOSAL")), makeKeyword("PUBLIC")) });

    static private final SubLSymbol $sym392$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_C = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-CLASS");

    static private final SubLSymbol $sym393$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_I = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-INSTANCE");

    static private final SubLList $list_alt394 = list(list(makeSymbol("PWHEN"), makeSymbol("IS-PROPOSAL-AUTO-GENERATED"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-BINDING-LIST"), makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL")), makeSymbol("PROPOSAL")))),
	    list(RET, NIL));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GET_BINDING_LIST_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GET-BINDING-LIST-METHOD");

    static private final SubLList $list_alt396 = list(
	    list(makeSymbol("PWHEN"), makeSymbol("IS-PROPOSAL-AUTO-GENERATED"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-BINDING-LIST"), makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL")), makeSymbol("PROPOSAL"), makeSymbol("NEW-BINDING-LIST")))),
	    list(RET, NIL));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KSI_SET_BINDING_LIST_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-SET-BINDING-LIST-METHOD");

    static private final SubLList $list_alt398 = list(
	    list(makeSymbol("PWHEN"), makeSymbol("IS-PROPOSAL-AUTO-GENERATED"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-COPY-OF-BINDING-LIST"), makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL")), makeSymbol("PROPOSAL")))), list(RET, NIL));

    static private final SubLSymbol $sym399$CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GET_COPY_OF_BINDING_LIST_METH = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GET-COPY-OF-BINDING-LIST-METHOD");

    static private final SubLList $list_alt400 = list(
	    list(makeSymbol("PWHEN"), makeSymbol("IS-PROPOSAL-AUTO-GENERATED"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("BIND-VAR"), makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL")), makeSymbol("PROPOSAL"), makeSymbol("VAR"), makeSymbol("VALUE")))),
	    list(RET, NIL));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KSI_BIND_VAR_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-BIND-VAR-METHOD");

    static private final SubLList $list_alt402 = list(
	    list(makeSymbol("PWHEN"), makeSymbol("IS-PROPOSAL-AUTO-GENERATED"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("EVAL-VAR"), makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL")), makeSymbol("PROPOSAL"), makeSymbol("VAR")))), list(RET, NIL));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KSI_EVAL_VAR_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-EVAL-VAR-METHOD");

    static private final SubLList $list_alt404 = list(list(makeSymbol("PWHEN"), makeSymbol("IS-PROPOSAL-AUTO-GENERATED"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-VARIABLES"), makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL")), makeSymbol("PROPOSAL")))),
	    list(RET, NIL));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GET_VARIABLES_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GET-VARIABLES-METHOD");

    static private final SubLList $list_alt406 = list(list(makeSymbol("PWHEN"), makeSymbol("IS-PROPOSAL-AUTO-GENERATED"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-VALUES"), makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL")), makeSymbol("PROPOSAL")))),
	    list(RET, NIL));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GET_VALUES_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GET-VALUES-METHOD");

    static private final SubLList $list_alt408 = list(
	    list(makeSymbol("PWHEN"), makeSymbol("IS-PROPOSAL-AUTO-GENERATED"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("COPY-BINDINGS"), makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL")), makeSymbol("PROPOSAL"), makeSymbol("OTHER-ENVIRONMENT")))),
	    list(RET, NIL));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KSI_COPY_BINDINGS_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-COPY-BINDINGS-METHOD");

    static private final SubLList $list_alt410 = list(
	    list(makeSymbol("PWHEN"), makeSymbol("IS-PROPOSAL-AUTO-GENERATED"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GENERATE-FROM-BINDINGS-CODE"), makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL")), makeSymbol("PROPOSAL"), makeSymbol("VAR")))),
	    list(RET, NIL));

    static private final SubLSymbol $sym411$CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GENERATE_FROM_BINDINGS_CODE_M = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GENERATE-FROM-BINDINGS-CODE-METHOD");

    static private final SubLList $list_alt412 = list(
	    list(makeSymbol("PWHEN"), makeSymbol("IS-PROPOSAL-AUTO-GENERATED"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GENERATE-TO-BINDINGS-CODE"), makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL")), makeSymbol("PROPOSAL"), makeSymbol("VAR")))),
	    list(RET, NIL));

    static private final SubLSymbol $sym413$CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GENERATE_TO_BINDINGS_CODE_MET = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GENERATE-TO-BINDINGS-CODE-METHOD");

    static private final SubLList $list_alt414 = list(list(makeSymbol("PWHEN"), makeSymbol("IS-PROPOSAL-AUTO-GENERATED"),
	    list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GENERATE-FROM-BINDINGS-CODE-GIVEN-VARS"), makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL")), makeSymbol("PROPOSAL"), makeSymbol("VAR"), makeSymbol("VARS")))), list(RET, NIL));

    static private final SubLSymbol $sym415$CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GENERATE_FROM_BINDINGS_CODE_G = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GENERATE-FROM-BINDINGS-CODE-GIVEN-VARS-METHOD");

    static private final SubLList $list_alt416 = list(list(makeSymbol("PWHEN"), makeSymbol("IS-PROPOSAL-AUTO-GENERATED"),
	    list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GENERATE-TO-BINDINGS-CODE-GIVEN-VARS"), makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL")), makeSymbol("PROPOSAL"), makeSymbol("VAR"), makeSymbol("VARS")))), list(RET, NIL));

    static private final SubLSymbol $sym417$CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GENERATE_TO_BINDINGS_CODE_GIV = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GENERATE-TO-BINDINGS-CODE-GIVEN-VARS-METHOD");

    static private final SubLList $list_alt418 = list(list(RET, makeSymbol("AUTO-GENERATED-KS-ASSISTENT")));

    static private final SubLSymbol $sym419$CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GET_AUTO_GENERATED_KS_ASSISTA = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GET-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLSymbol $sym420$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-METHOD");

    static private final SubLSymbol $sym421$CYBLACK_AUTO_GENERATED_INTERNAL_KSI_SET_AUTO_GENERATED_KS_ASSISTA = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-SET-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLList $list_alt422 = list(list(RET, makeSymbol("KSI-INDEX")));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GET_KSI_INDEX_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GET-KSI-INDEX-METHOD");

    static private final SubLList $list_alt424 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CAND"), list(makeSymbol("INTEGERP"), makeSymbol("NEW-INDEX")), list(makeSymbol(">="), makeSymbol("NEW-INDEX"), ZERO_INTEGER)), makeString("(SET-KSI-INDEX ~S): Index ~S is out of range."), makeSymbol("SELF"), makeSymbol("NEW-INDEX")),
	    list(makeSymbol("CSETQ"), makeSymbol("KSI-INDEX"), makeSymbol("NEW-INDEX")), list(RET, makeSymbol("NEW-INDEX")));

    static private final SubLSymbol $sym425$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-METHOD");

    static private final SubLString $str_alt426$_SET_KSI_INDEX__S___Index__S_is_o = makeString("(SET-KSI-INDEX ~S): Index ~S is out of range.");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KSI_SET_KSI_INDEX_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-SET-KSI-INDEX-METHOD");

    static private final SubLSymbol $sym428$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KSI_SET_TRACE_STATE_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-SET-TRACE-STATE-METHOD");

    static private final SubLList $list_alt430 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("AUTO-GENERATED-KS-ASSISTENT"), NIL), list(makeSymbol("CSETQ"), makeSymbol("KSI-INDEX"), NIL), list(makeSymbol("CSETQ"), makeSymbol("PROPOSAL"), NIL),
	    list(makeSymbol("CSETQ"), makeSymbol("IS-PROPOSAL-AUTO-GENERATED"), NIL), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym431$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KSI_INITIALIZE_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-INITIALIZE-METHOD");

    private static final SubLSymbol GET_PROPOSAL = makeSymbol("GET-PROPOSAL");

    static private final SubLList $list_alt434 = list(list(RET, makeSymbol("PROPOSAL")));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KSI_GET_PROPOSAL_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-GET-PROPOSAL-METHOD");

    static private final SubLList $list_alt437 = list(makeSymbol("NEW-PROPOSAL"));

    static private final SubLList $list_alt438 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-PROPOSAL")), list(makeSymbol("CYBLACK-PROPOSAL-P"), makeSymbol("NEW-PROPOSAL"))), makeString("(SET-PROPOSAL ~S): ~S is not an instance of CYBLACK-PROPOSAL."), makeSymbol("SELF"),
		    makeSymbol("NEW-PROPOSAL")),
	    list(makeSymbol("CSETQ"), makeSymbol("PROPOSAL"), makeSymbol("NEW-PROPOSAL")),
	    list(makeSymbol("CSETQ"), makeSymbol("IS-PROPOSAL-AUTO-GENERATED"), list(makeSymbol("CAND"), makeSymbol("NEW-PROPOSAL"), list(makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-PROPOSAL-P"), makeSymbol("NEW-PROPOSAL")))), list(RET, makeSymbol("NEW-PROPOSAL")));

    static private final SubLSymbol $sym439$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_INTERNAL_KSI_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-INTERNAL-KSI-METHOD");

    static private final SubLString $str_alt440$_SET_PROPOSAL__S____S_is_not_an_i = makeString("(SET-PROPOSAL ~S): ~S is not an instance of CYBLACK-PROPOSAL.");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_INTERNAL_KSI_SET_PROPOSAL_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI-SET-PROPOSAL-METHOD");

    static private final SubLList $list_alt442 = list(list(makeSymbol("EXPRESSION")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLString $str_alt443$old_value = makeString("old-value");

    static private final SubLList $list_alt444 = list(makeSymbol("*CYBLACK-CURRENT-DEFKS-BODY*"));

    public static final SubLSymbol $cyblack_current_defks_body$ = makeSymbol("*CYBLACK-CURRENT-DEFKS-BODY*");

    static private final SubLList $list_alt448 = list(list(makeSymbol("VAR")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLList $list_alt450 = list(new SubLObject[] { list(makeSymbol("PARENT"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("CHILDREN"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PARENT"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-PARENT"), list(makeSymbol("NEW-PARENT")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("ADD-CHILD"), list(makeSymbol("NEW-CHILD")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-CHILDREN"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COMPILE"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PROPOSALS-VAR"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ENVIRONMENT-VAR"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("REGISTER-POSTING-EXPRESSION"), list(makeSymbol("POSTING-EXPRESSION")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-INTEGER-REFERENCE"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-TO-BINDINGS-CODE"), list(makeSymbol("VAR"), makeSymbol("VARS")), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-FROM-BINDINGS-CODE"), list(makeSymbol("VAR"), makeSymbol("VARS")), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-NOOP-CALLS"), list(makeSymbol("VARS")), makeKeyword("PUBLIC")) });

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-EXPRESSION-INSTANCE");

    static private final SubLList $list_alt455 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("PARENT"), NIL), list(makeSymbol("CSETQ"), makeSymbol("CHILDREN"), NIL), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym456$OUTER_CATCH_FOR_CYBLACK_DEFKS_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-DEFKS-EXPRESSION-INITIALIZE-METHOD");

    static private final SubLList $list_alt458 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("CDOLIST"), list(makeSymbol("CHILD"), list(makeSymbol("GET-CHILDREN"), makeSymbol("SELF"))), list(makeSymbol("PRINT"), makeSymbol("CHILD"), makeSymbol("STREAM"))),
	    list(RET, makeSymbol("SELF")));

    private static final SubLSymbol CYBLACK_DEFKS_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-DEFKS-EXPRESSION-PRINT-METHOD");

    static private final SubLList $list_alt461 = list(list(RET, makeSymbol("PARENT")));

    private static final SubLSymbol CYBLACK_DEFKS_EXPRESSION_GET_PARENT_METHOD = makeSymbol("CYBLACK-DEFKS-EXPRESSION-GET-PARENT-METHOD");

    static private final SubLList $list_alt464 = list(makeSymbol("NEW-PARENT"));

    static private final SubLList $list_alt465 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-PARENT")), list(makeSymbol("CYBLACK-DEFKS-EXPRESSION-P"), makeSymbol("NEW-PARENT"))), makeString("(SET-PARENT ~S): ~S is not an instance of CYBLACK-DEFKS-EXPRESSION."), makeSymbol("SELF"),
		    makeSymbol("NEW-PARENT")),
	    list(makeSymbol("CSETQ"), makeSymbol("PARENT"), makeSymbol("NEW-PARENT")), list(makeSymbol("PWHEN"), makeSymbol("PARENT"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("ADD-CHILD"), makeSymbol("CYBLACK-DEFKS-EXPRESSION")), makeSymbol("PARENT"), makeSymbol("SELF"))),
	    list(RET, makeSymbol("PARENT")));

    static private final SubLSymbol $sym466$OUTER_CATCH_FOR_CYBLACK_DEFKS_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-EXPRESSION-METHOD");

    static private final SubLString $str_alt467$_SET_PARENT__S____S_is_not_an_ins = makeString("(SET-PARENT ~S): ~S is not an instance of CYBLACK-DEFKS-EXPRESSION.");

    private static final SubLSymbol CYBLACK_DEFKS_EXPRESSION_SET_PARENT_METHOD = makeSymbol("CYBLACK-DEFKS-EXPRESSION-SET-PARENT-METHOD");

    static private final SubLList $list_alt470 = list(makeSymbol("NEW-CHILD"));

    static private final SubLList $list_alt471 = list(list(makeSymbol("PUNLESS"), list(makeSymbol("MEMBER?"), makeSymbol("NEW-CHILD"), makeSymbol("CHILDREN")),
	    list(makeSymbol("CSETQ"), makeSymbol("CHILDREN"), list(makeSymbol("NCONC"), makeSymbol("CHILDREN"), list(makeSymbol("LIST"), makeSymbol("NEW-CHILD")))), list(makeSymbol("SET-CYBLACK-DEFKS-EXPRESSION-CHILDREN"), makeSymbol("SELF"), makeSymbol("CHILDREN"))),
	    list(RET, makeSymbol("NEW-CHILD")));

    private static final SubLSymbol CYBLACK_DEFKS_EXPRESSION_ADD_CHILD_METHOD = makeSymbol("CYBLACK-DEFKS-EXPRESSION-ADD-CHILD-METHOD");

    static private final SubLList $list_alt474 = list(list(RET, makeSymbol("CHILDREN")));

    private static final SubLSymbol CYBLACK_DEFKS_EXPRESSION_GET_CHILDREN_METHOD = makeSymbol("CYBLACK-DEFKS-EXPRESSION-GET-CHILDREN-METHOD");

    private static final SubLSymbol COMPILE = makeSymbol("COMPILE");

    private static final SubLSymbol CYBLACK_DEFKS_EXPRESSION_COMPILE_METHOD = makeSymbol("CYBLACK-DEFKS-EXPRESSION-COMPILE-METHOD");

    private static final SubLSymbol GET_PROPOSALS_VAR = makeSymbol("GET-PROPOSALS-VAR");

    static private final SubLList $list_alt479 = list(list(makeSymbol("PWHEN"), makeSymbol("PARENT"), list(RET, list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("PARENT"), list(QUOTE, makeSymbol("GET-PROPOSALS-VAR"))))), list(RET, NIL));

    private static final SubLSymbol CYBLACK_DEFKS_EXPRESSION_GET_PROPOSALS_VAR_METHOD = makeSymbol("CYBLACK-DEFKS-EXPRESSION-GET-PROPOSALS-VAR-METHOD");

    private static final SubLSymbol GET_ENVIRONMENT_VAR = makeSymbol("GET-ENVIRONMENT-VAR");

    static private final SubLList $list_alt482 = list(list(makeSymbol("PWHEN"), makeSymbol("PARENT"), list(RET, list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("PARENT"), list(QUOTE, makeSymbol("GET-ENVIRONMENT-VAR"))))), list(RET, NIL));

    private static final SubLSymbol CYBLACK_DEFKS_EXPRESSION_GET_ENVIRONMENT_VAR_METHOD = makeSymbol("CYBLACK-DEFKS-EXPRESSION-GET-ENVIRONMENT-VAR-METHOD");

    private static final SubLSymbol REGISTER_POSTING_EXPRESSION = makeSymbol("REGISTER-POSTING-EXPRESSION");

    static private final SubLList $list_alt485 = list(makeSymbol("POSTING-EXPRESSION"));

    static private final SubLList $list_alt486 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-ACTION-EXPRESSION-P"), makeSymbol("POSTING-EXPRESSION")), makeString("(REGISTER-POSTING-EXPRESSION ~S): ~S is not an instance of CYBLACK-POSTING-EXPR."), makeSymbol("SELF"), makeSymbol("POSTING-EXPRESSION")),
	    list(makeSymbol("PWHEN"), makeSymbol("PARENT"), list(RET, list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("PARENT"), list(QUOTE, makeSymbol("REGISTER-POSTING-EXPRESSION")), makeSymbol("POSTING-EXPRESSION")))), list(RET, NIL));

    static private final SubLString $str_alt487$_REGISTER_POSTING_EXPRESSION__S__ = makeString("(REGISTER-POSTING-EXPRESSION ~S): ~S is not an instance of CYBLACK-POSTING-EXPR.");

    private static final SubLSymbol CYBLACK_DEFKS_EXPRESSION_REGISTER_POSTING_EXPRESSION_METHOD = makeSymbol("CYBLACK-DEFKS-EXPRESSION-REGISTER-POSTING-EXPRESSION-METHOD");

    private static final SubLSymbol GET_INTEGER_REFERENCE = makeSymbol("GET-INTEGER-REFERENCE");

    static private final SubLList $list_alt490 = list(list(makeSymbol("PWHEN"), makeSymbol("PARENT"), list(RET, list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("PARENT"), list(QUOTE, makeSymbol("GET-INTEGER-REFERENCE"))))), list(RET, NIL));

    private static final SubLSymbol CYBLACK_DEFKS_EXPRESSION_GET_INTEGER_REFERENCE_METHOD = makeSymbol("CYBLACK-DEFKS-EXPRESSION-GET-INTEGER-REFERENCE-METHOD");

    static private final SubLList $list_alt492 = list(list(makeSymbol("MUST"), list(makeSymbol("CAND"), makeSymbol("VAR"), list(makeSymbol("SYMBOLP"), makeSymbol("VAR"))), makeString("(GENERATE-TO-BINDINGS-CODE ~S): ~S is not a valie variable."), makeSymbol("SELF"), makeSymbol("VAR")),
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-VARIABLE-LIST-P"), makeSymbol("VARS")), makeString("(GENERATE-TO-BINDINGS-CODE ~S): ~S is not a valid list of variables."), makeSymbol("SELF"), makeSymbol("VARS")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("TEMPLATE-BINDING-SETTERS"), NIL)),
		    list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("CURRENT-VAR"), makeSymbol("VARS"), makeSymbol("TEMPLATE-BINDING-SETTERS")),
			    list(makeSymbol("FIF"), list(EQ, makeSymbol("VAR"), list(QUOTE, makeSymbol("SELF"))),
				    list(makeSymbol("LIST"), list(QUOTE, makeSymbol("BIND-VAR")), list(QUOTE, makeSymbol("SELF")), list(makeSymbol("LIST"), list(QUOTE, QUOTE), makeSymbol("CURRENT-VAR")), makeSymbol("CURRENT-VAR")),
				    list(makeSymbol("LIST"), list(QUOTE, makeSymbol("FUNCALL-INSTANCE-METHOD")), makeSymbol("VAR"), list(QUOTE, list(QUOTE, makeSymbol("BIND-VAR"))),
					    list(makeSymbol("LIST"), list(QUOTE, QUOTE), makeSymbol("CURRENT-VAR")), makeSymbol("CURRENT-VAR")))),
		    list(RET, makeSymbol("TEMPLATE-BINDING-SETTERS"))));

    static private final SubLString $str_alt493$_GENERATE_TO_BINDINGS_CODE__S____ = makeString("(GENERATE-TO-BINDINGS-CODE ~S): ~S is not a valie variable.");

    static private final SubLString $str_alt494$_GENERATE_TO_BINDINGS_CODE__S____ = makeString("(GENERATE-TO-BINDINGS-CODE ~S): ~S is not a valid list of variables.");

    private static final SubLSymbol CYBLACK_DEFKS_EXPRESSION_GENERATE_TO_BINDINGS_CODE_METHOD = makeSymbol("CYBLACK-DEFKS-EXPRESSION-GENERATE-TO-BINDINGS-CODE-METHOD");

    static private final SubLList $list_alt498 = list(list(makeSymbol("MUST"), list(makeSymbol("CAND"), makeSymbol("VAR"), list(makeSymbol("SYMBOLP"), makeSymbol("VAR"))), makeString("(GENERATE-FROM-BINDINGS-CODE ~S): ~S is not a valie variable."), makeSymbol("SELF"), makeSymbol("VAR")),
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-VARIABLE-LIST-P"), makeSymbol("VARS")), makeString("(GENERATE-FROM-BINDINGS-CODE ~S): ~S is not a valid list of variables."), makeSymbol("SELF"), makeSymbol("VARS")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("TEMPLATE-BINDINGS"), NIL)), list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("CURRENT-VAR"), makeSymbol("VARS"), makeSymbol("TEMPLATE-BINDINGS")), list(makeSymbol("LIST"), makeSymbol("CURRENT-VAR"), list(makeSymbol("LIST"),
		    list(QUOTE, makeSymbol("FUNCALL-INSTANCE-METHOD")), makeSymbol("VAR"), list(QUOTE, list(QUOTE, makeSymbol("EVAL-VAR"))), list(makeSymbol("LIST"), list(QUOTE, QUOTE), makeSymbol("CURRENT-VAR"))))),
		    list(RET, makeSymbol("TEMPLATE-BINDINGS"))));

    static private final SubLString $str_alt499$_GENERATE_FROM_BINDINGS_CODE__S__ = makeString("(GENERATE-FROM-BINDINGS-CODE ~S): ~S is not a valie variable.");

    static private final SubLString $str_alt500$_GENERATE_FROM_BINDINGS_CODE__S__ = makeString("(GENERATE-FROM-BINDINGS-CODE ~S): ~S is not a valid list of variables.");

    private static final SubLSymbol CYBLACK_DEFKS_EXPRESSION_GENERATE_FROM_BINDINGS_CODE_METHOD = makeSymbol("CYBLACK-DEFKS-EXPRESSION-GENERATE-FROM-BINDINGS-CODE-METHOD");

    private static final SubLSymbol GENERATE_NOOP_CALLS = makeSymbol("GENERATE-NOOP-CALLS");

    static private final SubLList $list_alt503 = list(makeSymbol("VARS"));

    static private final SubLList $list_alt504 = list(list(makeSymbol("CLET"), list(list(makeSymbol("NOOP-CALLS"), NIL)),
	    list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("VAR"), makeSymbol("VARS"), makeSymbol("NOOP-CALLS")), list(makeSymbol("LIST"), list(QUOTE, makeSymbol("CYBLACK-SILENCE")), makeSymbol("VAR"))), list(RET, makeSymbol("NOOP-CALLS"))));

    private static final SubLSymbol CYBLACK_DEFKS_EXPRESSION_GENERATE_NOOP_CALLS_METHOD = makeSymbol("CYBLACK-DEFKS-EXPRESSION-GENERATE-NOOP-CALLS-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_BODY = makeSymbol("CYBLACK-DEFKS-BODY");

    static private final SubLList $list_alt508 = list(new SubLObject[] { list(makeSymbol("ON-STARTUP-CLAUSE"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("STIMULATION-COND"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("PROPOSALS-VAR"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("ENVIRONMENT-VAR"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("POSTING-EXPRESSION-COUNT"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("POSTING-EXPRESSION-ALIST"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("INTEGER-REFERENCE"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("SLOT-DECLARATIONS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("METHOD-DEFINITIONS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ON-STARTUP-CLAUSE"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ON-STARTUP-CLAUSE"), list(makeSymbol("NEW-CLAUSE")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-STIMULATION-COND"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-STIMULATION-COND"), list(makeSymbol("NEW-STIMULATION-COND")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("DISTRIBUTE-BINDING-INFO"), NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COMPILE-TO-ON-STARTUP-METHOD"), list(makeSymbol("KS-ASSISTANT")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COMPILE-TO-CREATE-PROPOSALS-METHOD"), list(makeSymbol("KS-ASSISTANT")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COMPILE-TO-EXECUTE-METHOD"), list(makeSymbol("KS-ASSISTANT")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PROPOSALS-VAR"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ENVIRONMENT-VAR"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("REGISTER-POSTING-EXPRESSION"), list(makeSymbol("POSTING-EXPRESSION")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-POSTING-EXPRESSION-COUNT"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-POSTING-EXPRESSION"), list(makeSymbol("INDEX")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-INTEGER-REFERENCE"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-SLOT-DECLARATION"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-SLOT-DECLARATION"), list(makeSymbol("NEW-SLOT-DECLARATION")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("ADD-SLOT-DECLARATION"), list(makeSymbol("NEW-SLOT-DECLARATION")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-METHOD-DEFINITIONS"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-METHOD-DEFINITIONS"), list(makeSymbol("NEW-METHOD-DEFINITIONS")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("ADD-METHOD-DEFINITION"), list(makeSymbol("NEW-METHOD-DEFINITION")), makeKeyword("PUBLIC")) });

    private static final SubLSymbol SLOT_DECLARATIONS = makeSymbol("SLOT-DECLARATIONS");

    private static final SubLSymbol POSTING_EXPRESSION_ALIST = makeSymbol("POSTING-EXPRESSION-ALIST");

    private static final SubLSymbol POSTING_EXPRESSION_COUNT = makeSymbol("POSTING-EXPRESSION-COUNT");

    private static final SubLSymbol ON_STARTUP_CLAUSE = makeSymbol("ON-STARTUP-CLAUSE");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_BODY_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-BODY-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_BODY_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-BODY-INSTANCE");

    static private final SubLList $list_alt519 = list(new SubLObject[] { list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("STIMULATION-COND"), NIL),
	    list(makeSymbol("CSETQ"), makeSymbol("PROPOSALS-VAR"), list(makeSymbol("MAKE-SYMBOL"), makeString("proposals"))), list(makeSymbol("CSETQ"), makeSymbol("ENVIRONMENT-VAR"), list(makeSymbol("MAKE-SYMBOL"), makeString("environment"))),
	    list(makeSymbol("CSETQ"), makeSymbol("POSTING-EXPRESSION-COUNT"), ZERO_INTEGER), list(makeSymbol("CSETQ"), makeSymbol("POSTING-EXPRESSION-ALIST"), NIL), list(makeSymbol("CSETQ"), makeSymbol("INTEGER-REFERENCE"), list(makeSymbol("NEW-INTEGER-REFERENCE"))),
	    list(makeSymbol("CSETQ"), makeSymbol("SLOT-DECLARATIONS"), NIL), list(makeSymbol("CSETQ"), makeSymbol("METHOD-DEFINITIONS"), NIL), list(RET, makeSymbol("SELF")) });

    static private final SubLSymbol $sym520$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-BODY-METHOD");

    static private final SubLString $$$proposals = makeString("proposals");

    static private final SubLString $$$environment = makeString("environment");

    private static final SubLSymbol CYBLACK_DEFKS_BODY_INITIALIZE_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-INITIALIZE-METHOD");

    static private final SubLList $list_alt524 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")),
	    list(makeSymbol("PIF"), makeSymbol("STIMULATION-COND"), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("~S"), makeSymbol("STIMULATION-COND")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:STIMULATION-COND)"))), list(RET, makeSymbol("SELF")));

    static private final SubLString $str_alt525$_S = makeString("~S");

    static private final SubLString $str_alt526$__STIMULATION_COND_ = makeString("(:STIMULATION-COND)");

    private static final SubLSymbol CYBLACK_DEFKS_BODY_PRINT_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-PRINT-METHOD");

    private static final SubLSymbol GET_ON_STARTUP_CLAUSE = makeSymbol("GET-ON-STARTUP-CLAUSE");

    static private final SubLList $list_alt529 = list(list(RET, makeSymbol("ON-STARTUP-CLAUSE")));

    static private final SubLSymbol $sym530$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-BODY-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_BODY_GET_ON_STARTUP_CLAUSE_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-GET-ON-STARTUP-CLAUSE-METHOD");

    private static final SubLSymbol SET_ON_STARTUP_CLAUSE = makeSymbol("SET-ON-STARTUP-CLAUSE");

    static private final SubLList $list_alt533 = list(makeSymbol("NEW-CLAUSE"));

    static private final SubLList $list_alt534 = list(list(makeSymbol("MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-CLAUSE")), list(makeSymbol("CYBLACK-DEFKS-ON-STARTUP-CLAUSE-P"), makeSymbol("NEW-CLAUSE"))),
	    makeString("(SET-ON-STARTUP-CLAUSE ~S): ~S is not an instance of CYBLACK-DEFKS-ON-STARTUP-CLAUSE."), makeSymbol("SELF"), makeSymbol("NEW-CLAUSE")), list(makeSymbol("CSETQ"), makeSymbol("ON-STARTUP-CLAUSE"), makeSymbol("NEW-CLAUSE")), list(RET, makeSymbol("NEW-CLAUSE")));

    static private final SubLSymbol $sym535$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-BODY-METHOD");

    static private final SubLString $str_alt536$_SET_ON_STARTUP_CLAUSE__S____S_is = makeString("(SET-ON-STARTUP-CLAUSE ~S): ~S is not an instance of CYBLACK-DEFKS-ON-STARTUP-CLAUSE.");

    private static final SubLSymbol CYBLACK_DEFKS_BODY_SET_ON_STARTUP_CLAUSE_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-SET-ON-STARTUP-CLAUSE-METHOD");

    private static final SubLSymbol GET_STIMULATION_COND = makeSymbol("GET-STIMULATION-COND");

    static private final SubLList $list_alt539 = list(list(RET, makeSymbol("STIMULATION-COND")));

    private static final SubLSymbol CYBLACK_DEFKS_BODY_GET_STIMULATION_COND_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-GET-STIMULATION-COND-METHOD");

    private static final SubLSymbol SET_STIMULATION_COND = makeSymbol("SET-STIMULATION-COND");

    static private final SubLList $list_alt542 = list(makeKeyword("AUTO-UPDATE"), makeKeyword("PUBLIC"));

    static private final SubLList $list_alt543 = list(makeSymbol("NEW-STIMULATION-COND"));

    static private final SubLList $list_alt544 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-STIMULATION-COND")), list(makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-P"), makeSymbol("NEW-STIMULATION-COND"))),
		    makeString("(SET-STIMULATION-COND ~S): ~S is not an instance of CYBLACK-DEFKS-STIMULATION-COND."), makeSymbol("SELF"), makeSymbol("NEW-STIMULATION-COND")),
	    list(makeSymbol("CSETQ"), makeSymbol("STIMULATION-COND"), makeSymbol("NEW-STIMULATION-COND")), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-PARENT"), makeSymbol("CYBLACK-DEFKS-EXPRESSION")), makeSymbol("STIMULATION-COND"), makeSymbol("SELF")),
	    list(makeSymbol("DISTRIBUTE-BINDING-INFO"), makeSymbol("SELF")), list(RET, makeSymbol("NEW-STIMULATION-COND")));

    static private final SubLString $str_alt545$_SET_STIMULATION_COND__S____S_is_ = makeString("(SET-STIMULATION-COND ~S): ~S is not an instance of CYBLACK-DEFKS-STIMULATION-COND.");

    private static final SubLSymbol CYBLACK_DEFKS_BODY_SET_STIMULATION_COND_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-SET-STIMULATION-COND-METHOD");

    static private final SubLList $list_alt548 = list(list(makeSymbol("PWHEN"), makeSymbol("STIMULATION-COND"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("STIMULATION-COND"), list(QUOTE, makeSymbol("DISTRIBUTE-BINDING-INFO")))), list(RET, NIL));

    static private final SubLSymbol $sym549$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-BODY-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_BODY_DISTRIBUTE_BINDING_INFO_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-DISTRIBUTE-BINDING-INFO-METHOD");

    private static final SubLSymbol COMPILE_TO_ON_STARTUP_METHOD = makeSymbol("COMPILE-TO-ON-STARTUP-METHOD");

    static private final SubLList $list_alt552 = list(makeSymbol("KS-ASSISTANT"));

    static private final SubLList $list_alt553 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-P"), makeSymbol("KS-ASSISTANT")), makeString("(COMPILE-TO-ON-STARTUP-METHOD ~S): ~S is not an instance of CYBLACK-AUTO-GENERATED-KS-ASSISTANT."), makeSymbol("SELF"), makeSymbol("KS-ASSISTANT")),
	    list(makeSymbol("PWHEN"), makeSymbol("ON-STARTUP-CLAUSE"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("COMPILE-TO-ON-STARTUP-METHOD"), makeSymbol("CYBLACK-DEFKS-ON-STARTUP-CLAUSE")), makeSymbol("ON-STARTUP-CLAUSE"), makeSymbol("KS-ASSISTANT")))),
	    list(RET,
		    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("DEF-INSTANCE-METHOD")), list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("ON-STARTUP")),
			    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-KNOWLEDGE-SOURCE-CLASS"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("KS-ASSISTANT")), list(QUOTE, list(makeKeyword("PUBLIC")))),
			    list(QUOTE, list(NIL, list(RET, list(makeSymbol("ON-STARTUP"), makeSymbol("SUPER"))))))));

    static private final SubLSymbol $sym554$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-BODY-METHOD");

    static private final SubLString $str_alt555$_COMPILE_TO_ON_STARTUP_METHOD__S_ = makeString("(COMPILE-TO-ON-STARTUP-METHOD ~S): ~S is not an instance of CYBLACK-AUTO-GENERATED-KS-ASSISTANT.");

    static private final SubLList $list_alt558 = list(NIL, list(RET, list(makeSymbol("ON-STARTUP"), makeSymbol("SUPER"))));

    private static final SubLSymbol CYBLACK_DEFKS_BODY_COMPILE_TO_ON_STARTUP_METHOD_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-COMPILE-TO-ON-STARTUP-METHOD-METHOD");

    private static final SubLSymbol COMPILE_TO_CREATE_PROPOSALS_METHOD = makeSymbol("COMPILE-TO-CREATE-PROPOSALS-METHOD");

    static private final SubLList $list_alt561 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-P"), makeSymbol("KS-ASSISTANT")), makeString("(COMPILE-TO-CREATE-PROPOSALS-METHOD ~S): ~S is not an instance of CYBLACK-AUTO-GENERATED-KS-ASSISTANT."), makeSymbol("SELF"), makeSymbol("KS-ASSISTANT")),
	    list(makeSymbol("PUNLESS"), makeSymbol("STIMULATION-COND"), list(RET, NIL)),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("KNOWLEDGE-SOURCE-CLASS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-KNOWLEDGE-SOURCE-CLASS"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("KS-ASSISTANT"))),
			    list(makeSymbol("PRECONDITION-PATTERN"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-PRECONDITION-PATTERN"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("KS-ASSISTANT"))),
			    list(makeSymbol("PRECONDITION-PATTERN-PARAMETERS"), list(makeSymbol("FIF"), makeSymbol("PRECONDITION-PATTERN"), list(makeSymbol("CYBLACK-GET-PARAMETERS"), makeSymbol("PRECONDITION-PATTERN")), NIL)),
			    list(makeSymbol("BODY"),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("STIMULATION-COND"), list(QUOTE, makeSymbol("COMPILE-TO-CREATE-PROPOSALS-METHOD-BODY")), makeSymbol("KS-ASSISTANT"), makeSymbol("KNOWLEDGE-SOURCE-CLASS"),
					    makeSymbol("PRECONDITION-PATTERN-PARAMETERS")))),
		    list(RET,
			    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("DEF-INSTANCE-METHOD")), list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("CREATE-PROPOSALS")), makeSymbol("KNOWLEDGE-SOURCE-CLASS"), list(QUOTE, list(makeKeyword("PUBLIC")))),
				    list(makeSymbol("BQ-LIST"), makeSymbol("ENVIRONMENT-VAR")),
				    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("CLET")), list(makeSymbol("BQ-LIST"), list(makeSymbol("BQ-CONS"), makeSymbol("PROPOSALS-VAR"), list(QUOTE, list(NIL)))), list(makeSymbol("BQ-APPEND"), makeSymbol("BODY"),
					    list(makeSymbol("BQ-LIST"), list(makeSymbol("BQ-LIST"), list(QUOTE, RET), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("NREVERSE")), makeSymbol("PROPOSALS-VAR"))))))))));

    static private final SubLString $str_alt562$_COMPILE_TO_CREATE_PROPOSALS_METH = makeString("(COMPILE-TO-CREATE-PROPOSALS-METHOD ~S): ~S is not an instance of CYBLACK-AUTO-GENERATED-KS-ASSISTANT.");

    private static final SubLSymbol COMPILE_TO_CREATE_PROPOSALS_METHOD_BODY = makeSymbol("COMPILE-TO-CREATE-PROPOSALS-METHOD-BODY");

    static private final SubLList $list_alt564 = list(NIL);

    private static final SubLSymbol CYBLACK_DEFKS_BODY_COMPILE_TO_CREATE_PROPOSALS_METHOD_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-COMPILE-TO-CREATE-PROPOSALS-METHOD-METHOD");

    private static final SubLSymbol COMPILE_TO_EXECUTE_METHOD = makeSymbol("COMPILE-TO-EXECUTE-METHOD");

    public static final SubLObject $list_alt569 = _constant_569_initializer();

    static private final SubLSymbol $sym570$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-BODY-METHOD");

    static private final SubLString $str_alt571$_COMPILE_TO_CREATE_EXECUTE_METHOD = makeString("(COMPILE-TO-CREATE-EXECUTE-METHOD ~S): ~S is not an instance of CYBLACK-AUTO-GENERATED-KS-ASSISTANT.");

    static private final SubLString $$$application = makeString("application");

    static private final SubLString $str_alt573$ksi_index = makeString("ksi-index");

    static private final SubLString $$$posting = makeString("posting");

    static private final SubLString $$$blackboard = makeString("blackboard");

    static private final SubLString $$$datatype = makeString("datatype");

    static private final SubLString $str_alt577$datatype_dictionary = makeString("datatype-dictionary");

    static private final SubLList $list_alt578 = cons(makeSymbol("INDEX"), makeSymbol("POSTING-EXPRESSION"));

    static private final SubLList $list_alt584 = list(makeSymbol("ASSIMILATE"), makeSymbol("OBJECT"));

    private static final SubLSymbol COMPUTE_CONFIDENCE = makeSymbol("COMPUTE-CONFIDENCE");

    private static final SubLSymbol CYBLACK_POSTING_SET_CONFIDENCE = makeSymbol("CYBLACK-POSTING-SET-CONFIDENCE");

    static private final SubLList $list_alt590 = list(QUOTE, QUOTE);

    private static final SubLSymbol CYBLACK_BLACKBOARD_UNPOST = makeSymbol("CYBLACK-BLACKBOARD-UNPOST");

    private static final SubLSymbol CYBLACK_POSTING_SET_ACTIVE = makeSymbol("CYBLACK-POSTING-SET-ACTIVE");

    private static final SubLSymbol CYBLACK_APPLICATION_SET_RESULT = makeSymbol("CYBLACK-APPLICATION-SET-RESULT");

    private static final SubLSymbol CYBLACK_APPLICATION_HALT = makeSymbol("CYBLACK-APPLICATION-HALT");

    static private final SubLList $list_alt599 = list(QUOTE, makeSymbol("RESET"));

    static private final SubLList $list_alt600 = list(makeKeyword("ERROR"));

    static private final SubLList $list_alt602 = list(makeKeyword("HALTED"));

    static private final SubLList $list_alt604 = list(list(makeSymbol("GET-APPLICATION"), makeSymbol("SELF")));

    static private final SubLList $list_alt605 = list(list(makeSymbol("GET-KSI-INDEX"), makeSymbol("SELF")));

    static private final SubLList $list_alt607 = list(makeString("(EXECUTE ~S): No application is associated with this KSI."), makeSymbol("SELF"));

    static private final SubLString $str_alt609$_EXECUTE__S___No_blackboard_is_as = makeString("(EXECUTE ~S): No blackboard is associated with application ~S.");

    static private final SubLString $str_alt611$_EXECUTE__S___No_datatype_diction = makeString("(EXECUTE ~S): No datatype dictionary is associated with application ~S.");

    private static final SubLSymbol CYBLACK_DEFKS_BODY_COMPILE_TO_EXECUTE_METHOD_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-COMPILE-TO-EXECUTE-METHOD-METHOD");

    static private final SubLList $list_alt614 = list(list(RET, makeSymbol("PROPOSALS-VAR")));

    private static final SubLSymbol CYBLACK_DEFKS_BODY_GET_PROPOSALS_VAR_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-GET-PROPOSALS-VAR-METHOD");

    static private final SubLList $list_alt616 = list(list(RET, makeSymbol("ENVIRONMENT-VAR")));

    private static final SubLSymbol CYBLACK_DEFKS_BODY_GET_ENVIRONMENT_VAR_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-GET-ENVIRONMENT-VAR-METHOD");

    static private final SubLList $list_alt618 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-ACTION-EXPRESSION-P"), makeSymbol("POSTING-EXPRESSION")), makeString("(REGISTER-POSTING-EXPRESSION ~S): ~S is not an instance of CYBLACK-POSTING-EXPR."), makeSymbol("SELF"), makeSymbol("POSTING-EXPRESSION")),
	    list(makeSymbol("CPUSH"), list(makeSymbol("CONS"), makeSymbol("POSTING-EXPRESSION-COUNT"), makeSymbol("POSTING-EXPRESSION")), makeSymbol("POSTING-EXPRESSION-ALIST")), list(makeSymbol("CINC"), makeSymbol("POSTING-EXPRESSION-COUNT")),
	    list(RET, makeSymbol("POSTING-EXPRESSION")));

    static private final SubLSymbol $sym619$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-BODY-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_BODY_REGISTER_POSTING_EXPRESSION_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-REGISTER-POSTING-EXPRESSION-METHOD");

    private static final SubLSymbol GET_POSTING_EXPRESSION_COUNT = makeSymbol("GET-POSTING-EXPRESSION-COUNT");

    static private final SubLList $list_alt622 = list(list(RET, makeSymbol("POSTING-EXPRESSION-COUNT")));

    private static final SubLSymbol CYBLACK_DEFKS_BODY_GET_POSTING_EXPRESSION_COUNT_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-GET-POSTING-EXPRESSION-COUNT-METHOD");

    private static final SubLSymbol GET_POSTING_EXPRESSION = makeSymbol("GET-POSTING-EXPRESSION");

    static private final SubLList $list_alt625 = list(makeSymbol("INDEX"));

    static private final SubLList $list_alt626 = list(list(makeSymbol("CLET"), list(list(makeSymbol("ASSOCIATION"), list(makeSymbol("ASSOC"), makeSymbol("INDEX"), makeSymbol("POSTING-EXPRESSION-ALIST")))),
	    list(makeSymbol("PWHEN"), makeSymbol("ASSOCIATION"), list(RET, list(makeSymbol("CDR"), makeSymbol("ASSOCIATION")))), list(RET, NIL)));

    private static final SubLSymbol CYBLACK_DEFKS_BODY_GET_POSTING_EXPRESSION_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-GET-POSTING-EXPRESSION-METHOD");

    static private final SubLList $list_alt628 = list(list(RET, makeSymbol("INTEGER-REFERENCE")));

    private static final SubLSymbol CYBLACK_DEFKS_BODY_GET_INTEGER_REFERENCE_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-GET-INTEGER-REFERENCE-METHOD");

    private static final SubLSymbol GET_SLOT_DECLARATIONS = makeSymbol("GET-SLOT-DECLARATIONS");

    static private final SubLList $list_alt631 = list(list(RET, makeSymbol("SLOT-DECLARATIONS")));

    static private final SubLSymbol $sym632$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-BODY-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_BODY_GET_SLOT_DECLARATIONS_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-GET-SLOT-DECLARATIONS-METHOD");

    private static final SubLSymbol SET_SLOT_DECLARATIONS = makeSymbol("SET-SLOT-DECLARATIONS");

    static private final SubLList $list_alt635 = list(makeSymbol("NEW-SLOT-DECLARATIONS"));

    static private final SubLList $list_alt636 = list(list(makeSymbol("MUST"), list(makeSymbol("LISTP"), makeSymbol("NEW-SLOT-DECLARATIONS")), makeString("(SET-SLOT-DECLARATIONS ~S): ~S is not a valid slot declaration list."), makeSymbol("SELF"), makeSymbol("NEW-SLOT-DECLARATIONS")),
	    list(makeSymbol("CDOLIST"), list(makeSymbol("SLOT-DECLARATION"), makeSymbol("NEW-SLOT-DECLARATIONS")),
		    list(makeSymbol("MUST"), list(makeSymbol("CAND"), list(makeSymbol("DESTRUCTURING-PREDICATION-GENERATOR"), cons(makeSymbol("SYMBOLP"), makeSymbol("LISTP")), makeSymbol("SLOT-DECLARATION")), list(makeSymbol("CAR"), makeSymbol("SLOT-DECLARATION"))),
			    makeString("(SET-SLOT-DECLARATIONS ~S): ~S is not a valid slot declaration."), makeSymbol("SELF"), makeSymbol("SLOT-DECLARATION"))),
	    list(makeSymbol("CSETQ"), makeSymbol("SLOT-DECLARATIONS"), list(makeSymbol("COPY-LIST"), makeSymbol("NEW-SLOT-DECLARATIONS"))), list(RET, makeSymbol("NEW-SLOT-DECLARATIONS")));

    static private final SubLSymbol $sym637$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-BODY-METHOD");

    static private final SubLString $str_alt638$_SET_SLOT_DECLARATIONS__S____S_is = makeString("(SET-SLOT-DECLARATIONS ~S): ~S is not a valid slot declaration list.");

    static private final SubLString $str_alt639$_SET_SLOT_DECLARATIONS__S____S_is = makeString("(SET-SLOT-DECLARATIONS ~S): ~S is not a valid slot declaration.");

    private static final SubLSymbol CYBLACK_DEFKS_BODY_SET_SLOT_DECLARATIONS_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-SET-SLOT-DECLARATIONS-METHOD");

    private static final SubLSymbol ADD_SLOT_DECLARATION = makeSymbol("ADD-SLOT-DECLARATION");

    static private final SubLList $list_alt642 = list(makeSymbol("NEW-SLOT-DECLARATION"));

    static private final SubLList $list_alt643 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CAND"), list(makeSymbol("DESTRUCTURING-PREDICATION-GENERATOR"), cons(makeSymbol("SYMBOLP"), makeSymbol("LISTP")), makeSymbol("NEW-SLOT-DECLARATION")), list(makeSymbol("CAR"), makeSymbol("NEW-SLOT-DECLARATION"))),
		    makeString("(ADD-SLOT-DECLARATION ~S): ~S is not a valid slot declaration."), makeSymbol("SELF"), makeSymbol("NEW-SLOT-DECLARATION")),
	    list(makeSymbol("CSETQ"), makeSymbol("SLOT-DECLARATIONS"), list(makeSymbol("NCONC"), makeSymbol("SLOT-DECLARATIONS"), list(makeSymbol("LIST"), makeSymbol("NEW-SLOT-DECLARATION")))), list(RET, makeSymbol("NEW-SLOT-DECLARATION")));

    static private final SubLSymbol $sym644$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-BODY-METHOD");

    static private final SubLString $str_alt645$_ADD_SLOT_DECLARATION__S____S_is_ = makeString("(ADD-SLOT-DECLARATION ~S): ~S is not a valid slot declaration.");

    private static final SubLSymbol CYBLACK_DEFKS_BODY_ADD_SLOT_DECLARATION_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-ADD-SLOT-DECLARATION-METHOD");

    private static final SubLSymbol GET_METHOD_DEFINITIONS = makeSymbol("GET-METHOD-DEFINITIONS");

    static private final SubLList $list_alt648 = list(list(RET, makeSymbol("METHOD-DEFINITIONS")));

    static private final SubLSymbol $sym649$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-BODY-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_BODY_GET_METHOD_DEFINITIONS_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-GET-METHOD-DEFINITIONS-METHOD");

    private static final SubLSymbol SET_METHOD_DEFINITIONS = makeSymbol("SET-METHOD-DEFINITIONS");

    static private final SubLList $list_alt652 = list(makeSymbol("NEW-METHOD-DEFINITIONS"));

    static private final SubLList $list_alt653 = list(list(makeSymbol("MUST"), list(makeSymbol("LISTP"), makeSymbol("NEW-METHOD-DEFINITIONS")), makeString("(SET-METHOD-DEFINITIONS ~S): ~S is not a valid method definition."), makeSymbol("SELF"), makeSymbol("NEW-METHOD-DEFINITIONS")),
	    list(makeSymbol("CDOLIST"), list(makeSymbol("METHOD-DEFINITION"), makeSymbol("NEW-METHOD-DEFINITIONS")),
		    list(makeSymbol("MUST"),
			    list(makeSymbol("CAND"), list(makeSymbol("DESTRUCTURING-PREDICATION-GENERATOR"), listS(makeSymbol("SYMBOLP"), cons(makeSymbol("SYMBOLP"), makeSymbol("LISTP")), makeSymbol("LISTP"), makeSymbol("LISTP")), makeSymbol("METHOD-DEFINITION")),
				    list(makeSymbol("MEMBER"), list(makeSymbol("CAR"), makeSymbol("METHOD-DEFINITION")), list(QUOTE, list(makeSymbol("DEF-INSTANCE-METHOD"), list(QUOTE, makeSymbol("DEF-CLASS-METHOD"))))),
				    list(makeSymbol("CAR"), list(makeSymbol("CADR"), makeSymbol("METHOD-DEFINITION")))),
			    makeString("(SET-METHOD-DEFINITIONS ~S): ~S is not a valid method definition."), makeSymbol("SELF"), makeSymbol("METHOD-DEFINITION"))),
	    list(makeSymbol("CSETQ"), makeSymbol("METHOD-DEFINITIONS"), list(makeSymbol("COPY-TREE"), makeSymbol("NEW-METHOD-DEFINITIONS"))), list(RET, makeSymbol("NEW-METHOD-DEFINITIONS")));

    static private final SubLSymbol $sym654$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-BODY-METHOD");

    static private final SubLString $str_alt655$_SET_METHOD_DEFINITIONS__S____S_i = makeString("(SET-METHOD-DEFINITIONS ~S): ~S is not a valid method definition.");

    static private final SubLList $list_alt656 = list(makeSymbol("DEF-INSTANCE-METHOD"), list(QUOTE, makeSymbol("DEF-CLASS-METHOD")));

    private static final SubLSymbol CYBLACK_DEFKS_BODY_SET_METHOD_DEFINITIONS_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-SET-METHOD-DEFINITIONS-METHOD");

    private static final SubLSymbol ADD_METHOD_DEFINITION = makeSymbol("ADD-METHOD-DEFINITION");

    static private final SubLList $list_alt659 = list(makeSymbol("NEW-METHOD-DEFINITION"));

    static private final SubLList $list_alt660 = list(
	    list(makeSymbol("MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("DESTRUCTURING-PREDICATION-GENERATOR"), listS(makeSymbol("SYMBOLP"), cons(makeSymbol("SYMBOLP"), makeSymbol("LISTP")), makeSymbol("LISTP"), makeSymbol("LISTP")), makeSymbol("NEW-METHOD-DEFINITION")),
			    list(makeSymbol("MEMBER"), list(makeSymbol("CAR"), makeSymbol("NEW-METHOD-DEFINITION")), list(QUOTE, list(makeSymbol("DEF-INSTANCE-METHOD"), list(QUOTE, makeSymbol("DEF-CLASS-METHOD"))))),
			    list(makeSymbol("CAR"), list(makeSymbol("CADR"), makeSymbol("NEW-METHOD-DEFINITION")))),
		    makeString("(ADD-METHOD-DEFINITION ~S): ~S is not a valid method definition."), makeSymbol("SELF"), makeSymbol("NEW-METHOD-DEFINITION")),
	    list(makeSymbol("CSETQ"), makeSymbol("METHOD-DEFINITIONS"), list(makeSymbol("NCONC"), makeSymbol("METHOD-DEFINITIONS"), list(makeSymbol("LIST"), list(makeSymbol("COPY-TREE"), makeSymbol("NEW-METHOD-DEFINITION"))))), list(RET, makeSymbol("NEW-METHOD-DEFINITION")));

    static private final SubLSymbol $sym661$OUTER_CATCH_FOR_CYBLACK_DEFKS_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-BODY-METHOD");

    static private final SubLString $str_alt662$_ADD_METHOD_DEFINITION__S____S_is = makeString("(ADD-METHOD-DEFINITION ~S): ~S is not a valid method definition.");

    private static final SubLSymbol CYBLACK_DEFKS_BODY_ADD_METHOD_DEFINITION_METHOD = makeSymbol("CYBLACK-DEFKS-BODY-ADD-METHOD-DEFINITION-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_ON_STARTUP_CLAUSE = makeSymbol("CYBLACK-DEFKS-ON-STARTUP-CLAUSE");

    static private final SubLList $list_alt665 = list(list(makeSymbol("POSTING-EXPRESSIONS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-POSTING-EXPRESSIONS"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-POSTING-EXPRESSIONS"), list(makeSymbol("NEW-POSTING-EXPRESSIONS")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("ADD-POSTING-EXPRESSION"), list(makeSymbol("POSTING-EXPRESSION")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COMPILE-TO-ON-STARTUP-METHOD"), list(makeSymbol("KS-ASSISTANT")), makeKeyword("PUBLIC")));

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-ON-STARTUP-CLAUSE-CLASS");

    static private final SubLSymbol $sym668$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_INSTA = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-ON-STARTUP-CLAUSE-INSTANCE");

    static private final SubLList $list_alt669 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("POSTING-EXPRESSIONS"), NIL), list(RET, NIL));

    static private final SubLSymbol $sym670$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-ON-STARTUP-CLAUSE-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_ON_STARTUP_CLAUSE_INITIALIZE_METHOD = makeSymbol("CYBLACK-DEFKS-ON-STARTUP-CLAUSE-INITIALIZE-METHOD");

    static private final SubLList $list_alt672 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:ON-STARTUP")),
	    list(makeSymbol("CDOLIST"), list(makeSymbol("POSTING-EXPRESSION"), makeSymbol("POSTING-EXPRESSIONS")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(" ~S"), makeSymbol("POSTING-EXPRESSION"))), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(")")),
	    list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym673$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-ON-STARTUP-CLAUSE-METHOD");

    static private final SubLString $str_alt674$__ON_STARTUP = makeString("(:ON-STARTUP");

    static private final SubLString $str_alt675$__S = makeString(" ~S");

    static private final SubLString $str_alt676$_ = makeString(")");

    private static final SubLSymbol CYBLACK_DEFKS_ON_STARTUP_CLAUSE_PRINT_METHOD = makeSymbol("CYBLACK-DEFKS-ON-STARTUP-CLAUSE-PRINT-METHOD");

    private static final SubLSymbol GET_POSTING_EXPRESSIONS = makeSymbol("GET-POSTING-EXPRESSIONS");

    static private final SubLList $list_alt679 = list(list(RET, makeSymbol("POSTING-EXPRESSIONS")));

    static private final SubLSymbol $sym680$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-ON-STARTUP-CLAUSE-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_ON_STARTUP_CLAUSE_GET_POSTING_EXPRESSIONS_METHOD = makeSymbol("CYBLACK-DEFKS-ON-STARTUP-CLAUSE-GET-POSTING-EXPRESSIONS-METHOD");

    private static final SubLSymbol SET_POSTING_EXPRESSIONS = makeSymbol("SET-POSTING-EXPRESSIONS");

    static private final SubLList $list_alt683 = list(makeSymbol("NEW-POSTING-EXPRESSIONS"));

    static private final SubLList $list_alt684 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-POSTING-EXPR-LIST-P"), makeSymbol("NEW-POSTING-EXPRESSIONS")), makeString("(SET-POSTING-EXPRESSIONS ~S): ~S is not a valid list of posting expressions."), makeSymbol("SELF"), makeSymbol("NEW-POSTING-EXPRESSIONS")),
	    list(makeSymbol("CSETQ"), makeSymbol("POSTING-EXPRESSIONS"), list(makeSymbol("COPY-LIST"), makeSymbol("NEW-POSTING-EXPRESSIONS"))), list(RET, makeSymbol("NEW-POSTING-EXPRESSIONS")));

    static private final SubLSymbol $sym685$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-ON-STARTUP-CLAUSE-METHOD");

    static private final SubLString $str_alt686$_SET_POSTING_EXPRESSIONS__S____S_ = makeString("(SET-POSTING-EXPRESSIONS ~S): ~S is not a valid list of posting expressions.");

    private static final SubLSymbol CYBLACK_DEFKS_ON_STARTUP_CLAUSE_SET_POSTING_EXPRESSIONS_METHOD = makeSymbol("CYBLACK-DEFKS-ON-STARTUP-CLAUSE-SET-POSTING-EXPRESSIONS-METHOD");

    private static final SubLSymbol ADD_POSTING_EXPRESSION = makeSymbol("ADD-POSTING-EXPRESSION");

    static private final SubLList $list_alt689 = list(list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-ACTION-EXPRESSION-P"), makeSymbol("POSTING-EXPRESSION")), makeString("(ADD-POSTING-EXPRESSION ~S): ~S is not a valid posting expression."), makeSymbol("SELF"), makeSymbol("POSTING-EXPRESSION")),
	    list(makeSymbol("CSETQ"), makeSymbol("POSTING-EXPRESSIONS"), list(makeSymbol("NCONC"), makeSymbol("POSTING-EXPRESSIONS"), list(makeSymbol("LIST"), makeSymbol("POSTING-EXPRESSION")))), list(RET, makeSymbol("POSTING-EXPRESSION")));

    static private final SubLSymbol $sym690$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-ON-STARTUP-CLAUSE-METHOD");

    static private final SubLString $str_alt691$_ADD_POSTING_EXPRESSION__S____S_i = makeString("(ADD-POSTING-EXPRESSION ~S): ~S is not a valid posting expression.");

    private static final SubLSymbol CYBLACK_DEFKS_ON_STARTUP_CLAUSE_ADD_POSTING_EXPRESSION_METHOD = makeSymbol("CYBLACK-DEFKS-ON-STARTUP-CLAUSE-ADD-POSTING-EXPRESSION-METHOD");

    static private final SubLList $list_alt693 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-P"), makeSymbol("KS-ASSISTANT")), makeString("(COMPILE-TO-ON-STARTUP-METHOD ~S): ~S is not an instance of CYBLACK-AUTO-GENERATED-KS-ASSISTANT."), makeSymbol("SELF"), makeSymbol("KS-ASSISTANT")),
	    list(makeSymbol("CLET"),
		    list(list(makeSymbol("KS-CLASS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-KNOWLEDGE-SOURCE-CLASS"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("KS-ASSISTANT"))), list(makeSymbol("DATATYPE-STRING"), NIL),
			    list(makeSymbol("SLOT-INITIALIZATIONS"), NIL), list(makeSymbol("POSTING-VAR"), list(makeSymbol("MAKE-SYMBOL"), makeString("posting"))), list(makeSymbol("DICTIONARY-VAR"), list(makeSymbol("MAKE-SYMBOL"), makeString("dictionary"))),
			    list(makeSymbol("DATATYPE-VAR"), list(makeSymbol("MAKE-SYMBOL"), makeString("datatype"))), list(makeSymbol("BLACKBOARD-VAR"), list(makeSymbol("MAKE-SYMBOL"), makeString("blackboard"))), list(makeSymbol("BODY"), NIL)),
		    list(makeSymbol("CDOLIST"), list(makeSymbol("POSTING-EXPRESSION"), makeSymbol("POSTING-EXPRESSIONS")),
			    list(makeSymbol("CSETQ"), makeSymbol("DATATYPE-STRING"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-DATATYPE-STRING"), makeSymbol("CYBLACK-POSTING-EXPR")), makeSymbol("POSTING-EXPRESSION")), makeSymbol("SLOT-INITIALIZATIONS"),
				    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-SLOT-INITIALIZATIONS"), makeSymbol("CYBLACK-POSTING-EXPR")), makeSymbol("POSTING-EXPRESSION"))),
			    list(makeSymbol("CPUSH"),
				    list(makeSymbol("COPY-TREE"), list(new SubLObject[] { makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("CLET")),
					    list(makeSymbol("BQ-LIST"), list(makeSymbol("BQ-LIST"), makeSymbol("DATATYPE-VAR"), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-DATATYPE-DICTIONARY-INTERN")), makeSymbol("DICTIONARY-VAR"), makeSymbol("DATATYPE-STRING"))),
						    list(makeSymbol("BQ-LIST"), makeSymbol("POSTING-VAR"),
							    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("FIF")), makeSymbol("DATATYPE-VAR"), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-DATATYPE-CREATE-POSTING")), makeSymbol("DATATYPE-VAR")),
								    list(QUOTE, list(NIL))))),
					    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("MUST")), makeSymbol("POSTING-VAR"), makeString("(ON-STARTUP ~S): Failed to create posting of type ~S."), list(QUOTE, makeSymbol("SELF")), makeSymbol("DATATYPE-VAR")),
					    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("CYBLACK-POSTING-SET-APPLICATION")), makeSymbol("POSTING-VAR"), list(QUOTE, list(makeSymbol("APPLICATION")))),
					    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-POSTING-SET-DATATYPE")), makeSymbol("POSTING-VAR"), makeSymbol("DATATYPE-VAR")),
					    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("CYBLACK-POSTING-SET-SUPPORT-TYPE")), makeSymbol("POSTING-VAR"), list(QUOTE, list(makeKeyword("GROUND")))),
					    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("INLINE-METHOD")), list(QUOTE, list(makeSymbol("ASSIMILATE"), makeSymbol("OBJECT"))), makeSymbol("POSTING-VAR"),
						    list(makeSymbol("BQ-CONS"), list(QUOTE, makeSymbol("LIST")), list(makeSymbol("BQ-APPEND"), list(makeSymbol("COPY-TREE"), makeSymbol("SLOT-INITIALIZATIONS")), NIL))),
					    list(makeSymbol("BQ-APPEND"),
						    list(makeSymbol("FIF"), list(makeSymbol("GET-SLOT"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("CONFIDENCE-EXPRESSION"))),
							    list(makeSymbol("FIF"), list(makeSymbol("GET-SLOT"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("COMPUTE-CONFIDENCE"))),
								    list(makeSymbol("BQ-LIST"),
									    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-POSTING-SET-CONFIDENCE")), makeSymbol("POSTING-VAR"),
										    list(makeSymbol("GET-SLOT"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("CONFIDENCE-EXPRESSION"))))),
								    list(makeSymbol("BQ-LIST"),
									    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-POSTING-SET-CONFIDENCE")), makeSymbol("POSTING-VAR"),
										    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("LIST")), list(QUOTE, list(QUOTE, QUOTE)),
											    list(makeSymbol("GET-SLOT"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("CONFIDENCE-EXPRESSION"))))))),
							    NIL),
						    list(makeSymbol("FIF"), list(makeSymbol("GET-SLOT"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("IMMUTABLE-EXPRESSION"))),
							    list(makeSymbol("BQ-LIST"),
								    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-POSTING-SET-IMMUTABLE")), makeSymbol("POSTING-VAR"),
									    list(makeSymbol("GET-SLOT"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("IMMUTABLE-EXPRESSION"))))),
							    NIL),
						    list(makeSymbol("BQ-LIST"), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-BLACKBOARD-POST")), makeSymbol("BLACKBOARD-VAR"), makeSymbol("POSTING-VAR")))) })),
				    makeSymbol("BODY"))),
		    list(RET,
			    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("DEF-INSTANCE-METHOD")), list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("ON-STARTUP")), makeSymbol("KS-CLASS"), list(QUOTE, list(makeKeyword("PUBLIC")))), NIL,
				    list(QUOTE, list(makeSymbol("ON-STARTUP"), makeSymbol("SUPER"))),
				    list(QUOTE, list(makeSymbol("MUST"), makeSymbol("APPLICATION"), makeString("(ON-STARTUP ~S): No application is associated with this knowledge source."), makeSymbol("SELF"))),
				    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("CLET")),
					    list(makeSymbol("BQ-LIST"), list(makeSymbol("BQ-CONS"), makeSymbol("DICTIONARY-VAR"), list(QUOTE, list(list(makeSymbol("CYBLACK-APPLICATION-GET-DATATYPE-DICTIONARY"), makeSymbol("APPLICATION"))))),
						    list(makeSymbol("BQ-CONS"), makeSymbol("BLACKBOARD-VAR"), list(QUOTE, list(list(makeSymbol("CYBLACK-APPLICATION-GET-BLACKBOARD"), makeSymbol("APPLICATION")))))),
					    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("MUST")), makeSymbol("DICTIONARY-VAR"),
						    list(QUOTE, list(makeString("(ON-STARTUP ~S): No dictionary is associated with application ~S."), makeSymbol("SELF"), makeSymbol("APPLICATION")))),
					    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("MUST")), makeSymbol("BLACKBOARD-VAR"),
						    list(QUOTE, list(makeString("(ON-STARTUP ~S): No blackboard is associated with application ~S."), makeSymbol("SELF"), makeSymbol("APPLICATION")))),
					    list(makeSymbol("BQ-APPEND"), list(makeSymbol("NREVERSE"), makeSymbol("BODY")), NIL)),
				    list(QUOTE, list(list(RET, NIL)))))));

    static private final SubLSymbol $sym694$OUTER_CATCH_FOR_CYBLACK_DEFKS_ON_STARTUP_CLAUSE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-ON-STARTUP-CLAUSE-METHOD");

    static private final SubLString $$$dictionary = makeString("dictionary");

    private static final SubLSymbol CYBLACK_DATATYPE_CREATE_POSTING = makeSymbol("CYBLACK-DATATYPE-CREATE-POSTING");

    static private final SubLString $str_alt698$_ON_STARTUP__S___Failed_to_create = makeString("(ON-STARTUP ~S): Failed to create posting of type ~S.");

    private static final SubLSymbol CYBLACK_POSTING_SET_APPLICATION = makeSymbol("CYBLACK-POSTING-SET-APPLICATION");

    static private final SubLList $list_alt700 = list(makeSymbol("APPLICATION"));

    private static final SubLSymbol CYBLACK_POSTING_SET_DATATYPE = makeSymbol("CYBLACK-POSTING-SET-DATATYPE");

    private static final SubLSymbol CYBLACK_POSTING_SET_SUPPORT_TYPE = makeSymbol("CYBLACK-POSTING-SET-SUPPORT-TYPE");

    static private final SubLList $list_alt703 = list(makeKeyword("GROUND"));

    private static final SubLSymbol IMMUTABLE_EXPRESSION = makeSymbol("IMMUTABLE-EXPRESSION");

    private static final SubLSymbol CYBLACK_POSTING_SET_IMMUTABLE = makeSymbol("CYBLACK-POSTING-SET-IMMUTABLE");

    static private final SubLList $list_alt706 = list(makeSymbol("ON-STARTUP"), makeSymbol("SUPER"));

    static private final SubLList $list_alt707 = list(makeSymbol("MUST"), makeSymbol("APPLICATION"), makeString("(ON-STARTUP ~S): No application is associated with this knowledge source."), makeSymbol("SELF"));

    static private final SubLList $list_alt708 = list(list(makeSymbol("CYBLACK-APPLICATION-GET-DATATYPE-DICTIONARY"), makeSymbol("APPLICATION")));

    static private final SubLList $list_alt709 = list(list(makeSymbol("CYBLACK-APPLICATION-GET-BLACKBOARD"), makeSymbol("APPLICATION")));

    static private final SubLList $list_alt710 = list(makeString("(ON-STARTUP ~S): No dictionary is associated with application ~S."), makeSymbol("SELF"), makeSymbol("APPLICATION"));

    static private final SubLList $list_alt711 = list(makeString("(ON-STARTUP ~S): No blackboard is associated with application ~S."), makeSymbol("SELF"), makeSymbol("APPLICATION"));

    static private final SubLSymbol $sym712$CYBLACK_DEFKS_ON_STARTUP_CLAUSE_COMPILE_TO_ON_STARTUP_METHOD_METH = makeSymbol("CYBLACK-DEFKS-ON-STARTUP-CLAUSE-COMPILE-TO-ON-STARTUP-METHOD-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_STIMULATION_COND = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND");

    static private final SubLList $list_alt714 = list(
	    new SubLObject[] { list(makeSymbol("ARG-LIST"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("CLAUSES"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARG-LIST"), NIL, makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARG-LIST"), list(makeSymbol("NEW-ARG-LIST")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("ADD-ARG"), list(makeSymbol("NEW-ARG")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-CLAUSES"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-CLAUSES"), list(makeSymbol("NEW-CLAUSE-LIST")), makeKeyword("PUBLIC")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("ADD-CLAUSE"), list(makeSymbol("CLAUSE")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("DISTRIBUTE-BINDING-INFO"), NIL, makeKeyword("PROTECTED")),
		    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COMPILE-TO-CREATE-PROPOSALS-METHOD-BODY"), list(makeSymbol("KS-ASSISTANT"), makeSymbol("KS-CLASS"), makeSymbol("PRECON-PARAMETERS")), makeKeyword("PUBLIC")) });

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_STIMULATION_COND_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-STIMULATION-COND-CLASS");

    static private final SubLSymbol $sym718$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_STIMULATION_COND_INSTAN = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-STIMULATION-COND-INSTANCE");

    static private final SubLList $list_alt719 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("ARG-LIST"), NIL), list(makeSymbol("CSETQ"), makeSymbol("CLAUSES"), NIL), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym720$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-STIMULATION-COND-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_STIMULATION_COND_INITIALIZE_METHOD = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-INITIALIZE-METHOD");

    static private final SubLList $list_alt722 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:STIMULATION-COND ")), list(makeSymbol("PRINT"), makeSymbol("ARG-LIST"), makeSymbol("STREAM")),
	    list(makeSymbol("CDOLIST"), list(makeSymbol("CLAUSE"), makeSymbol("CLAUSES")), list(makeSymbol("PRINT"), makeSymbol("CLAUSE"), makeSymbol("STREAM"))), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(")")), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym723$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-STIMULATION-COND-METHOD");

    static private final SubLString $str_alt724$__STIMULATION_COND_ = makeString("(:STIMULATION-COND ");

    private static final SubLSymbol CYBLACK_DEFKS_STIMULATION_COND_PRINT_METHOD = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-PRINT-METHOD");

    private static final SubLSymbol GET_ARG_LIST = makeSymbol("GET-ARG-LIST");

    static private final SubLList $list_alt727 = list(list(RET, makeSymbol("ARG-LIST")));

    static private final SubLSymbol $sym728$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-STIMULATION-COND-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_STIMULATION_COND_GET_ARG_LIST_METHOD = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-GET-ARG-LIST-METHOD");

    private static final SubLSymbol SET_ARG_LIST = makeSymbol("SET-ARG-LIST");

    static private final SubLList $list_alt731 = list(makeSymbol("NEW-ARG-LIST"));

    static private final SubLList $list_alt732 = list(list(makeSymbol("MUST"), list(makeSymbol("LISTP"), makeSymbol("NEW-ARG-LIST")), makeString("(SET-ARG-LIST ~S): ~S is not a valid argument list."), makeSymbol("SELF"), makeSymbol("NEW-ARG-LIST")),
	    list(makeSymbol("CDOLIST"), list(makeSymbol("ARG"), makeSymbol("NEW-ARG-LIST")), list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-ARG-P"), makeSymbol("ARG")), makeString("(SET-ARG-LIST ~S): ~S is not a valid argument."), makeSymbol("SELF"), makeSymbol("ARG")),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-PARENT"), makeSymbol("CYBLACK-DEFKS-EXPRESSION")), makeSymbol("ARG"), makeSymbol("SELF"))),
	    list(makeSymbol("CSETQ"), makeSymbol("ARG-LIST"), list(makeSymbol("COPY-LIST"), makeSymbol("NEW-ARG-LIST"))), list(RET, makeSymbol("NEW-ARG-LIST")));

    static private final SubLSymbol $sym733$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-STIMULATION-COND-METHOD");

    static private final SubLString $str_alt734$_SET_ARG_LIST__S____S_is_not_a_va = makeString("(SET-ARG-LIST ~S): ~S is not a valid argument list.");

    static private final SubLString $str_alt735$_SET_ARG_LIST__S____S_is_not_a_va = makeString("(SET-ARG-LIST ~S): ~S is not a valid argument.");

    private static final SubLSymbol CYBLACK_DEFKS_STIMULATION_COND_SET_ARG_LIST_METHOD = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-SET-ARG-LIST-METHOD");

    private static final SubLSymbol ADD_ARG = makeSymbol("ADD-ARG");

    static private final SubLList $list_alt738 = list(makeSymbol("NEW-ARG"));

    static private final SubLList $list_alt739 = list(list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-ARG-P"), makeSymbol("NEW-ARG")), makeString("(ADD-ARG ~S): ~S is not a valid argument."), makeSymbol("SELF"), makeSymbol("NEW-ARG")),
	    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-PARENT"), makeSymbol("CYBLACK-DEFKS-EXPRESSION")), makeSymbol("NEW-ARG"), makeSymbol("SELF")), list(makeSymbol("PIF"), makeSymbol("ARG-LIST"),
		    list(makeSymbol("CSETQ"), makeSymbol("ARG-LIST"), list(makeSymbol("NCONC"), makeSymbol("ARG-LIST"), list(makeSymbol("CONS"), makeSymbol("NEW-ARG"), NIL))), list(makeSymbol("CSETQ"), makeSymbol("ARG-LIST"), list(makeSymbol("CONS"), makeSymbol("NEW-ARG"), NIL))),
	    list(RET, makeSymbol("NEW-ARG")));

    static private final SubLSymbol $sym740$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-STIMULATION-COND-METHOD");

    static private final SubLString $str_alt741$_ADD_ARG__S____S_is_not_a_valid_a = makeString("(ADD-ARG ~S): ~S is not a valid argument.");

    private static final SubLSymbol CYBLACK_DEFKS_STIMULATION_COND_ADD_ARG_METHOD = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-ADD-ARG-METHOD");

    private static final SubLSymbol GET_CLAUSES = makeSymbol("GET-CLAUSES");

    static private final SubLList $list_alt744 = list(list(RET, makeSymbol("CLAUSES")));

    static private final SubLSymbol $sym745$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-STIMULATION-COND-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_STIMULATION_COND_GET_CLAUSES_METHOD = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-GET-CLAUSES-METHOD");

    private static final SubLSymbol SET_CLAUSES = makeSymbol("SET-CLAUSES");

    static private final SubLList $list_alt748 = list(makeSymbol("NEW-CLAUSE-LIST"));

    static private final SubLList $list_alt749 = list(list(makeSymbol("MUST"), list(makeSymbol("LISTP"), makeSymbol("NEW-CLAUSE-LIST")), makeString("(SET-CLAUSES ~S): ~S is not a valid clause list."), makeSymbol("SELF"), makeSymbol("NEW-CLAUSE-LIST")),
	    list(makeSymbol("CDOLIST"), list(makeSymbol("CLAUSE"), makeSymbol("NEW-CLAUSE-LIST")),
		    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-CLAUSE-P"), makeSymbol("CLAUSE")), makeString("(SET-CLAUSES ~S): ~S is not a valid clause."), makeSymbol("SELF"), makeSymbol("CLAUSE")),
		    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-PARENT"), makeSymbol("CYBLACK-DEFKS-EXPRESSION")), makeSymbol("CLAUSE"), makeSymbol("SELF"))),
	    list(makeSymbol("CSETQ"), makeSymbol("CLAUSES"), list(makeSymbol("COPY-LIST"), makeSymbol("NEW-CLAUSE-LIST"))), list(RET, makeSymbol("NEW-CLAUSE-LIST")));

    static private final SubLSymbol $sym750$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-STIMULATION-COND-METHOD");

    static private final SubLString $str_alt751$_SET_CLAUSES__S____S_is_not_a_val = makeString("(SET-CLAUSES ~S): ~S is not a valid clause list.");

    static private final SubLString $str_alt752$_SET_CLAUSES__S____S_is_not_a_val = makeString("(SET-CLAUSES ~S): ~S is not a valid clause.");

    private static final SubLSymbol CYBLACK_DEFKS_STIMULATION_COND_SET_CLAUSES_METHOD = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-SET-CLAUSES-METHOD");

    private static final SubLSymbol ADD_CLAUSE = makeSymbol("ADD-CLAUSE");

    static private final SubLList $list_alt755 = list(makeSymbol("CLAUSE"));

    static private final SubLList $list_alt756 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-CLAUSE-P"), makeSymbol("CLAUSE")), makeString("(ADD-CLAUSE ~S): ~S is not a valid clause."), makeSymbol("SELF"), makeSymbol("CLAUSE")), list(makeSymbol("PIF"), makeSymbol("CLAUSES"),
		    list(makeSymbol("CSETQ"), makeSymbol("CLAUSES"), list(makeSymbol("NCONC"), makeSymbol("CLAUSES"), list(makeSymbol("CONS"), makeSymbol("CLAUSE"), NIL))), list(makeSymbol("CSETQ"), makeSymbol("CLAUSES"), list(makeSymbol("CONS"), makeSymbol("CLAUSE"), NIL))),
	    list(RET, makeSymbol("CLAUSE")));

    static private final SubLSymbol $sym757$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-STIMULATION-COND-METHOD");

    static private final SubLString $str_alt758$_ADD_CLAUSE__S____S_is_not_a_vali = makeString("(ADD-CLAUSE ~S): ~S is not a valid clause.");

    private static final SubLSymbol CYBLACK_DEFKS_STIMULATION_COND_ADD_CLAUSE_METHOD = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-ADD-CLAUSE-METHOD");

    static private final SubLList $list_alt760 = list(list(makeSymbol("CLET"), list(list(makeSymbol("LOCAL-ARGS"), NIL)),
	    list(makeSymbol("CDOLIST-APPENDING"), list(makeSymbol("ARG"), makeSymbol("ARG-LIST"), makeSymbol("LOCAL-ARGS")),
		    list(makeSymbol("FIF"), list(makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-ARG-P"), makeSymbol("ARG")), list(makeSymbol("LIST"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-ARG"), makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-ARG")), makeSymbol("ARG"))), NIL)),
	    list(makeSymbol("CDOLIST"), list(makeSymbol("CLAUSE"), makeSymbol("CLAUSES")), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("CLAUSE"), list(QUOTE, makeSymbol("DISTRIBUTE-BINDING-INFO")), makeSymbol("LOCAL-ARGS"))), list(RET, NIL)));

    static private final SubLSymbol $sym761$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-STIMULATION-COND-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_STIMULATION_COND_DISTRIBUTE_BINDING_INFO_METHOD = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-DISTRIBUTE-BINDING-INFO-METHOD");

    static private final SubLList $list_alt763 = list(makeSymbol("KS-ASSISTANT"), makeSymbol("KS-CLASS"), makeSymbol("PRECON-PARAMETERS"));

    static private final SubLList $list_alt764 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CAND"), makeSymbol("KS-CLASS"), list(makeSymbol("SYMBOLP"), makeSymbol("KS-CLASS"))), makeString("(COMPILE-TO-CREATE-PROPOSALS-METHOD-BODY ~S): ~S is not a valid class name."), makeSymbol("SELF"), makeSymbol("KS-CLASS")),
	    list(makeSymbol("MUST"), list(makeSymbol("LISTP"), makeSymbol("PRECON-PARAMETERS")), makeString("(COMPILE-TO-CREATE-PROPOSALS-METHOD-BODY ~S): ~S is not a valid precondition pattern parameter list."), makeSymbol("SELF"), makeSymbol("PRECON-PARAMETERS")),
	    list(makeSymbol("MUST"), list(makeSymbol("="), list(makeSymbol("LENGTH"), makeSymbol("PRECON-PARAMETERS")), list(makeSymbol("LENGTH"), makeSymbol("ARG-LIST"))),
		    makeString("(COMPILE-TO-CREATE-PROPOSALS-METHOD-BODY ~S): Precondition pattern parameter list ~S and ~\n     arg list ~S do not match.  Each list should contain the same number of elements."), makeSymbol("SELF"), makeSymbol("PRECON-PARAMETERS"), makeSymbol("ARG-LIST")),
	    list(makeSymbol("CLET"),
		    list(new SubLObject[] { list(makeSymbol("VAR-BINDINGS"), NIL), list(makeSymbol("VAR"), NIL), list(makeSymbol("VARS"), NIL), list(makeSymbol("BINDING-SAVERS"), NIL), list(makeSymbol("PRECON-PARAMETER-SUBLIST"), makeSymbol("PRECON-PARAMETERS")),
			    list(makeSymbol("ARG-LIST-SUBLIST"), makeSymbol("ARG-LIST")), list(makeSymbol("CURRENT-ARG"), NIL), list(makeSymbol("COMPILED-CLAUSES"), NIL), list(makeSymbol("ENVIRONMENT-VAR"), list(makeSymbol("GET-ENVIRONMENT-VAR"), makeSymbol("SELF"))),
			    list(makeSymbol("PROPOSALS-VAR"), list(makeSymbol("GET-PROPOSALS-VAR"), makeSymbol("SELF"))),
			    list(makeSymbol("PROPOSAL-CLASS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-PROPOSAL-CLASS"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("KS-ASSISTANT"))) }),
		    list(makeSymbol("WHILE"), makeSymbol("ARG-LIST-SUBLIST"), list(makeSymbol("CSETQ"), makeSymbol("VAR"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), list(makeSymbol("CAR"), makeSymbol("ARG-LIST-SUBLIST")), list(QUOTE, makeSymbol("GET-ARG")))),
			    list(makeSymbol("CPUSH"), makeSymbol("VAR"), makeSymbol("VARS")),
			    list(makeSymbol("CPUSH"),
				    list(makeSymbol("LIST"), makeSymbol("VAR"),
					    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("FIF")), makeSymbol("ENVIRONMENT-VAR"),
						    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("INLINE-METHOD")), list(QUOTE, list(makeSymbol("GET"), makeSymbol("CYBLACK-ACTIVATION-PATTERN"))), makeSymbol("ENVIRONMENT-VAR"),
							    list(makeSymbol("BQ-LIST"), list(QUOTE, QUOTE), list(makeSymbol("CAR"), makeSymbol("PRECON-PARAMETER-SUBLIST")))),
						    list(QUOTE, list(NIL)))),
				    makeSymbol("VAR-BINDINGS")),
			    list(makeSymbol("CSETQ"), makeSymbol("CURRENT-ARG"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), list(makeSymbol("CAR"), makeSymbol("ARG-LIST-SUBLIST")), list(QUOTE, makeSymbol("GET-ARG")))),
			    list(makeSymbol("CPUSH"),
				    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("INLINE-METHOD")), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("BIND-VAR")), makeSymbol("PROPOSAL-CLASS")), makeSymbol("PROPOSALS-VAR"),
					    list(makeSymbol("BQ-LIST"), list(QUOTE, QUOTE), makeSymbol("CURRENT-ARG")), makeSymbol("CURRENT-ARG")),
				    makeSymbol("BINDING-SAVERS")),
			    list(makeSymbol("CSETQ"), makeSymbol("ARG-LIST-SUBLIST"), list(makeSymbol("CDR"), makeSymbol("ARG-LIST-SUBLIST")), makeSymbol("PRECON-PARAMETER-SUBLIST"), list(makeSymbol("CDR"), makeSymbol("PRECON-PARAMETER-SUBLIST")))),
		    list(makeSymbol("CSETQ"), makeSymbol("VARS"), list(makeSymbol("NREVERSE"), makeSymbol("VARS"))),
		    list(makeSymbol("CDOLIST"), list(makeSymbol("CLAUSE"), makeSymbol("CLAUSES")),
			    list(makeSymbol("CPUSH"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("CLAUSE"), list(QUOTE, makeSymbol("COMPILE-CREATE-PROPOSALS-CLAUSE")), makeSymbol("KS-ASSISTANT")), makeSymbol("COMPILED-CLAUSES"))),
		    list(makeSymbol("CSETQ"), makeSymbol("VAR-BINDINGS"), list(makeSymbol("NREVERSE"), makeSymbol("VAR-BINDINGS"))),
		    list(RET, list(makeSymbol("BQ-LIST"), list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("CLET")), makeSymbol("VAR-BINDINGS"), list(makeSymbol("BQ-APPEND"), list(makeSymbol("GENERATE-NOOP-CALLS"), makeSymbol("SELF"), makeSymbol("VARS")),
			    list(makeSymbol("BQ-LIST"), list(makeSymbol("BQ-CONS"), list(QUOTE, makeSymbol("PROGN")), list(makeSymbol("BQ-APPEND"), list(makeSymbol("NREVERSE"), makeSymbol("COMPILED-CLAUSES")), NIL)))))))));

    static private final SubLSymbol $sym765$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-STIMULATION-COND-METHOD");

    static private final SubLString $str_alt766$_COMPILE_TO_CREATE_PROPOSALS_METH = makeString("(COMPILE-TO-CREATE-PROPOSALS-METHOD-BODY ~S): ~S is not a valid class name.");

    static private final SubLString $str_alt767$_COMPILE_TO_CREATE_PROPOSALS_METH = makeString("(COMPILE-TO-CREATE-PROPOSALS-METHOD-BODY ~S): ~S is not a valid precondition pattern parameter list.");

    static private final SubLString $str_alt768$_COMPILE_TO_CREATE_PROPOSALS_METH = makeString("(COMPILE-TO-CREATE-PROPOSALS-METHOD-BODY ~S): Precondition pattern parameter list ~S and ~\n     arg list ~S do not match.  Each list should contain the same number of elements.");

    static private final SubLList $list_alt770 = list(makeSymbol("GET"), makeSymbol("CYBLACK-ACTIVATION-PATTERN"));

    private static final SubLSymbol COMPILE_CREATE_PROPOSALS_CLAUSE = makeSymbol("COMPILE-CREATE-PROPOSALS-CLAUSE");

    static private final SubLSymbol $sym772$CYBLACK_DEFKS_STIMULATION_COND_COMPILE_TO_CREATE_PROPOSALS_METHOD = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-COMPILE-TO-CREATE-PROPOSALS-METHOD-BODY-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_STIMULATION_COND_ARG = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-ARG");

    static private final SubLList $list_alt774 = list(list(makeSymbol("ARG"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ARG"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ARG"), list(makeSymbol("NEW-ARG")), makeKeyword("PUBLIC")));

    static private final SubLSymbol $sym776$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_STIMULATION_COND_ARG_CL = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-STIMULATION-COND-ARG-CLASS");

    static private final SubLSymbol $sym777$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_STIMULATION_COND_ARG_IN = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-STIMULATION-COND-ARG-INSTANCE");

    static private final SubLList $list_alt778 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("ARG"), NIL), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym779$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_ARG_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-STIMULATION-COND-ARG-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_STIMULATION_COND_ARG_INITIALIZE_METHOD = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-ARG-INITIALIZE-METHOD");

    static private final SubLList $list_alt781 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("~S"), makeSymbol("ARG")), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym782$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_ARG_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-STIMULATION-COND-ARG-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_STIMULATION_COND_ARG_PRINT_METHOD = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-ARG-PRINT-METHOD");

    static private final SubLList $list_alt784 = list(list(RET, makeSymbol("ARG")));

    static private final SubLSymbol $sym785$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_ARG_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-STIMULATION-COND-ARG-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_STIMULATION_COND_ARG_GET_ARG_METHOD = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-ARG-GET-ARG-METHOD");

    private static final SubLSymbol SET_ARG = makeSymbol("SET-ARG");

    static private final SubLList $list_alt788 = list(list(makeSymbol("MUST"), list(makeSymbol("CAND"), makeSymbol("NEW-ARG"), list(makeSymbol("SYMBOLP"), makeSymbol("NEW-ARG")), list(makeSymbol("CNOT"), list(makeSymbol("KEYWORDP"), makeSymbol("NEW-ARG")))),
	    makeString("(SET-ARG ~S): ~S is not a valid parameter.  A non-nil, non-keyword symbol was expected."), makeSymbol("SELF"), makeSymbol("NEW-ARG")), list(makeSymbol("CSETQ"), makeSymbol("ARG"), makeSymbol("NEW-ARG")), list(RET, makeSymbol("NEW-ARG")));

    static private final SubLSymbol $sym789$OUTER_CATCH_FOR_CYBLACK_DEFKS_STIMULATION_COND_ARG_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-STIMULATION-COND-ARG-METHOD");

    static private final SubLString $str_alt790$_SET_ARG__S____S_is_not_a_valid_p = makeString("(SET-ARG ~S): ~S is not a valid parameter.  A non-nil, non-keyword symbol was expected.");

    private static final SubLSymbol CYBLACK_DEFKS_STIMULATION_COND_ARG_SET_ARG_METHOD = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-ARG-SET-ARG-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_STIMULATION_COND_CLAUSE = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-CLAUSE");

    static private final SubLList $list_alt793 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("DISTRIBUTE-BINDING-INFO"), list(makeSymbol("LOCAL-ARGS")), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COMPILE-CREATE-PROPOSALS-CLAUSE"), list(makeSymbol("KS-ASSISTANT")), makeKeyword("PUBLIC")));

    static private final SubLSymbol $sym794$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_STIMULATION_COND_CLAUSE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-STIMULATION-COND-CLAUSE-CLASS");

    static private final SubLSymbol $sym795$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_STIMULATION_COND_CLAUSE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-STIMULATION-COND-CLAUSE-INSTANCE");

    static private final SubLList $list_alt796 = list(makeSymbol("LOCAL-ARGS"));

    static private final SubLList $list_alt797 = list(list(RET, makeSymbol("LOCAL-ARGS")));

    static private final SubLSymbol $sym798$CYBLACK_DEFKS_STIMULATION_COND_CLAUSE_DISTRIBUTE_BINDING_INFO_MET = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-CLAUSE-DISTRIBUTE-BINDING-INFO-METHOD");

    static private final SubLList $list_alt799 = list(list(makeSymbol("IGNORE"), makeSymbol("KS-ASSISTANT")), list(RET, NIL));

    static private final SubLSymbol $sym800$CYBLACK_DEFKS_STIMULATION_COND_CLAUSE_COMPILE_CREATE_PROPOSALS_CL = makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-CLAUSE-COMPILE-CREATE-PROPOSALS-CLAUSE-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_WHEN_CLAUSE = makeSymbol("CYBLACK-DEFKS-WHEN-CLAUSE");

    static private final SubLList $list_alt802 = list(new SubLObject[] { list(makeSymbol("LISP-EXPRESSION"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("ON-PROPOSE-BODY"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-LISP-EXPRESSION"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-LISP-EXPRESSION"), list(makeSymbol("NEW-LISP-EXPRESSION")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ON-PROPOSE-BODY"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ON-PROPOSE-BODY"), list(makeSymbol("NEW-ON-PROPOSE-BODY"))),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("DISTRIBUTE-BINDING-INFO"), list(makeSymbol("LOCAL-ARGS")), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COMPILE-CREATE-PROPOSALS-CLAUSE"), list(makeSymbol("KS-ASSISTANT")), makeKeyword("PUBLIC")) });

    private static final SubLSymbol LISP_EXPRESSION = makeSymbol("LISP-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_WHEN_CLAUSE_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-WHEN-CLAUSE-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEFKS_WHEN_CLAUSE_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEFKS-WHEN-CLAUSE-INSTANCE");

    static private final SubLList $list_alt807 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("LISP-EXPRESSION"), NIL), list(makeSymbol("CSETQ"), makeSymbol("ON-PROPOSE-BODY"), NIL), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym808$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-WHEN-CLAUSE-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_WHEN_CLAUSE_INITIALIZE_METHOD = makeSymbol("CYBLACK-DEFKS-WHEN-CLAUSE-INITIALIZE-METHOD");

    static private final SubLList $list_alt810 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:WHEN ~S"), makeSymbol("LISP-EXPRESSION")),
	    list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(" ~S)"), makeSymbol("ON-PROPOSE-BODY")), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym811$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-WHEN-CLAUSE-METHOD");

    static private final SubLString $str_alt812$__WHEN__S = makeString("(:WHEN ~S");

    static private final SubLString $str_alt813$__S_ = makeString(" ~S)");

    private static final SubLSymbol CYBLACK_DEFKS_WHEN_CLAUSE_PRINT_METHOD = makeSymbol("CYBLACK-DEFKS-WHEN-CLAUSE-PRINT-METHOD");

    private static final SubLSymbol GET_LISP_EXPRESSION = makeSymbol("GET-LISP-EXPRESSION");

    static private final SubLList $list_alt816 = list(list(RET, makeSymbol("LISP-EXPRESSION")));

    static private final SubLSymbol $sym817$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-WHEN-CLAUSE-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_WHEN_CLAUSE_GET_LISP_EXPRESSION_METHOD = makeSymbol("CYBLACK-DEFKS-WHEN-CLAUSE-GET-LISP-EXPRESSION-METHOD");

    private static final SubLSymbol SET_LISP_EXPRESSION = makeSymbol("SET-LISP-EXPRESSION");

    static private final SubLList $list_alt820 = list(makeSymbol("NEW-LISP-EXPRESSION"));

    static private final SubLList $list_alt821 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-QUICK-SYMBOLIC-EXPRESSION-P"), makeSymbol("NEW-LISP-EXPRESSION")), makeString("(SET-LISP-EXPRESSION ~S): ~S is not a valid LISP expression."), makeSymbol("SELF"), makeSymbol("NEW-LISP-EXPRESSION")),
	    list(makeSymbol("CSETQ"), makeSymbol("LISP-EXPRESSION"), list(makeSymbol("CYBLACK-COPY-TREE-WHILE-SETTING-PARENT"), makeSymbol("NEW-LISP-EXPRESSION"), makeSymbol("SELF"))), list(RET, makeSymbol("NEW-LISP-EXPRESSION")));

    static private final SubLSymbol $sym822$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-WHEN-CLAUSE-METHOD");

    static private final SubLString $str_alt823$_SET_LISP_EXPRESSION__S____S_is_n = makeString("(SET-LISP-EXPRESSION ~S): ~S is not a valid LISP expression.");

    private static final SubLSymbol CYBLACK_DEFKS_WHEN_CLAUSE_SET_LISP_EXPRESSION_METHOD = makeSymbol("CYBLACK-DEFKS-WHEN-CLAUSE-SET-LISP-EXPRESSION-METHOD");

    private static final SubLSymbol GET_ON_PROPOSE_BODY = makeSymbol("GET-ON-PROPOSE-BODY");

    static private final SubLList $list_alt826 = list(list(RET, makeSymbol("ON-PROPOSE-BODY")));

    static private final SubLSymbol $sym827$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-WHEN-CLAUSE-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_WHEN_CLAUSE_GET_ON_PROPOSE_BODY_METHOD = makeSymbol("CYBLACK-DEFKS-WHEN-CLAUSE-GET-ON-PROPOSE-BODY-METHOD");

    private static final SubLSymbol SET_ON_PROPOSE_BODY = makeSymbol("SET-ON-PROPOSE-BODY");

    static private final SubLList $list_alt830 = list(makeSymbol("NEW-ON-PROPOSE-BODY"));

    static private final SubLList $list_alt831 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-ON-PROPOSE-BODY-P"), makeSymbol("NEW-ON-PROPOSE-BODY")), makeString("(SET-ON-PROPOSE-BODY ~S): ~S is not an instance of CYBLACK-ON-PROPOSE-BODY."), makeSymbol("SELF"), makeSymbol("NEW-ON-PROPOSE-BODY")),
	    list(makeSymbol("CSETQ"), makeSymbol("ON-PROPOSE-BODY"), makeSymbol("NEW-ON-PROPOSE-BODY")), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-PARENT"), makeSymbol("CYBLACK-DEFKS-EXPRESSION")), makeSymbol("ON-PROPOSE-BODY"), makeSymbol("SELF")),
	    list(RET, makeSymbol("NEW-ON-PROPOSE-BODY")));

    static private final SubLSymbol $sym832$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-WHEN-CLAUSE-METHOD");

    static private final SubLString $str_alt833$_SET_ON_PROPOSE_BODY__S____S_is_n = makeString("(SET-ON-PROPOSE-BODY ~S): ~S is not an instance of CYBLACK-ON-PROPOSE-BODY.");

    private static final SubLSymbol CYBLACK_DEFKS_WHEN_CLAUSE_SET_ON_PROPOSE_BODY_METHOD = makeSymbol("CYBLACK-DEFKS-WHEN-CLAUSE-SET-ON-PROPOSE-BODY-METHOD");

    static private final SubLList $list_alt835 = list(list(makeSymbol("PWHEN"), makeSymbol("ON-PROPOSE-BODY"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ON-PROPOSE-BODY"), list(QUOTE, makeSymbol("DISTRIBUTE-BINDING-INFO")), makeSymbol("LOCAL-ARGS"))),
	    list(RET, NIL));

    static private final SubLSymbol $sym836$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-WHEN-CLAUSE-METHOD");

    private static final SubLSymbol CYBLACK_DEFKS_WHEN_CLAUSE_DISTRIBUTE_BINDING_INFO_METHOD = makeSymbol("CYBLACK-DEFKS-WHEN-CLAUSE-DISTRIBUTE-BINDING-INFO-METHOD");

    static private final SubLList $list_alt838 = list(list(makeSymbol("CLET"),
	    list(list(makeSymbol("COMPILED-ON-PROPOSE-BODY"),
		    list(makeSymbol("FIF"), makeSymbol("ON-PROPOSE-BODY"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ON-PROPOSE-BODY"), list(QUOTE, makeSymbol("COMPILE-CREATE-PROPOSALS-ON-PROPOSE-BODY")), makeSymbol("KS-ASSISTANT")), NIL))),
	    list(RET, list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("PWHEN")), list(makeSymbol("COPY-TREE"), makeSymbol("LISP-EXPRESSION")), list(makeSymbol("BQ-APPEND"), makeSymbol("COMPILED-ON-PROPOSE-BODY"), NIL)))));

    static private final SubLSymbol $sym839$OUTER_CATCH_FOR_CYBLACK_DEFKS_WHEN_CLAUSE_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEFKS-WHEN-CLAUSE-METHOD");

    private static final SubLSymbol COMPILE_CREATE_PROPOSALS_ON_PROPOSE_BODY = makeSymbol("COMPILE-CREATE-PROPOSALS-ON-PROPOSE-BODY");

    private static final SubLSymbol CYBLACK_DEFKS_WHEN_CLAUSE_COMPILE_CREATE_PROPOSALS_CLAUSE_METHOD = makeSymbol("CYBLACK-DEFKS-WHEN-CLAUSE-COMPILE-CREATE-PROPOSALS-CLAUSE-METHOD");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_BODY = makeSymbol("CYBLACK-ON-PROPOSE-BODY");

    static private final SubLList $list_alt843 = list(new SubLObject[] { list(makeSymbol("ON-PROPOSE-EXPRESSIONS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ON-PROPOSE-EXPRESSIONS"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ON-PROPOSE-EXPRESSIONS"), list(makeSymbol("NEW-ON-PROPOSE-EXPRESSIONS")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("RECURSIVELY-SET-ON-PROPOSE-EXPRESSION-PARENT"), list(makeSymbol("EXPRESSION")), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("RECURSIVELY-SET-ON-PROPOSE-EXPRESSIONS-PARENT"), list(makeSymbol("EXPRESSIONS")), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("ADD-ON-PROPOSE-EXPRESSION"), list(makeSymbol("ON-PROPOSE-EXPRESSION")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("REMOVE-ON-PROPOSE-EXPRESSION"), list(makeSymbol("ON-PROPOSE-EXPRESSION")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("DISTRIBUTE-BINDING-INFO"), list(makeSymbol("LOCAL-ARGS")), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COMPILE-CREATE-PROPOSALS-ON-PROPOSE-BODY"), list(makeSymbol("KS-ASSISTANT")), makeKeyword("PUBLIC")) });

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ON_PROPOSE_BODY_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ON-PROPOSE-BODY-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ON_PROPOSE_BODY_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ON-PROPOSE-BODY-INSTANCE");

    static private final SubLList $list_alt847 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("ON-PROPOSE-EXPRESSIONS"), NIL), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym848$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-BODY-METHOD");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_BODY_INITIALIZE_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-BODY-INITIALIZE-METHOD");

    static private final SubLList $list_alt850 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")),
	    list(makeSymbol("CDOLIST"), list(makeSymbol("ON-PROPOSE-EXPRESSION"), makeSymbol("ON-PROPOSE-EXPRESSIONS")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("~S"), makeSymbol("ON-PROPOSE-EXPRESSION"))), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym851$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-BODY-METHOD");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_BODY_PRINT_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-BODY-PRINT-METHOD");

    private static final SubLSymbol GET_ON_PROPOSE_EXPRESSIONS = makeSymbol("GET-ON-PROPOSE-EXPRESSIONS");

    static private final SubLList $list_alt854 = list(list(RET, makeSymbol("ON-PROPOSE-EXPRESSIONS")));

    static private final SubLSymbol $sym855$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-BODY-METHOD");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_BODY_GET_ON_PROPOSE_EXPRESSIONS_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-BODY-GET-ON-PROPOSE-EXPRESSIONS-METHOD");

    private static final SubLSymbol RECURSIVELY_SET_ON_PROPOSE_EXPRESSION_PARENT = makeSymbol("RECURSIVELY-SET-ON-PROPOSE-EXPRESSION-PARENT");

    static private final SubLList $list_alt858 = list(makeKeyword("NO-MEMBER-VARIABLES"), makeKeyword("PROTECTED"));

    static private final SubLList $list_alt859 = list(makeSymbol("EXPRESSION"));

    static private final SubLList $list_alt860 = list(
	    list(makeSymbol("PCOND"), list(list(makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION-P"), makeSymbol("EXPRESSION")), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-PARENT"), makeSymbol("CYBLACK-DEFKS-EXPRESSION")), makeSymbol("EXPRESSION"), makeSymbol("SELF"))),
		    list(list(makeSymbol("CONSP"), makeSymbol("EXPRESSION")), list(makeSymbol("RECURSIVELY-SET-ON-PROPOSE-EXPRESSION-PARENT"), makeSymbol("SELF"), list(makeSymbol("CAR"), makeSymbol("EXPRESSION"))),
			    list(makeSymbol("RECURSIVELY-SET-ON-PROPOSE-EXPRESSION-PARENT"), makeSymbol("SELF"), list(makeSymbol("CDR"), makeSymbol("EXPRESSION"))))),
	    list(RET, NIL));

    static private final SubLSymbol $sym861$CYBLACK_ON_PROPOSE_BODY_RECURSIVELY_SET_ON_PROPOSE_EXPRESSION_PAR = makeSymbol("CYBLACK-ON-PROPOSE-BODY-RECURSIVELY-SET-ON-PROPOSE-EXPRESSION-PARENT-METHOD");

    private static final SubLSymbol RECURSIVELY_SET_ON_PROPOSE_EXPRESSIONS_PARENT = makeSymbol("RECURSIVELY-SET-ON-PROPOSE-EXPRESSIONS-PARENT");

    static private final SubLList $list_alt863 = list(makeSymbol("EXPRESSIONS"));

    static private final SubLList $list_alt864 = list(list(makeSymbol("CDOLIST"), list(makeSymbol("EXPRESSION"), makeSymbol("EXPRESSIONS")), list(makeSymbol("RECURSIVELY-SET-ON-PROPOSE-EXPRESSION-PARENT"), makeSymbol("SELF"), makeSymbol("EXPRESSION"))), list(RET, NIL));

    static private final SubLSymbol $sym865$CYBLACK_ON_PROPOSE_BODY_RECURSIVELY_SET_ON_PROPOSE_EXPRESSIONS_PA = makeSymbol("CYBLACK-ON-PROPOSE-BODY-RECURSIVELY-SET-ON-PROPOSE-EXPRESSIONS-PARENT-METHOD");

    private static final SubLSymbol SET_ON_PROPOSE_EXPRESSIONS = makeSymbol("SET-ON-PROPOSE-EXPRESSIONS");

    static private final SubLList $list_alt867 = list(makeSymbol("NEW-ON-PROPOSE-EXPRESSIONS"));

    static private final SubLList $list_alt868 = list(list(makeSymbol("RECURSIVELY-SET-ON-PROPOSE-EXPRESSIONS-PARENT"), makeSymbol("SELF"), makeSymbol("NEW-ON-PROPOSE-EXPRESSIONS")),
	    list(makeSymbol("CSETQ"), makeSymbol("ON-PROPOSE-EXPRESSIONS"), list(makeSymbol("COPY-LIST"), makeSymbol("NEW-ON-PROPOSE-EXPRESSIONS"))), list(RET, makeSymbol("NEW-ON-PROPOSE-EXPRESSIONS")));

    static private final SubLSymbol $sym869$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-BODY-METHOD");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_BODY_SET_ON_PROPOSE_EXPRESSIONS_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-BODY-SET-ON-PROPOSE-EXPRESSIONS-METHOD");

    private static final SubLSymbol ADD_ON_PROPOSE_EXPRESSION = makeSymbol("ADD-ON-PROPOSE-EXPRESSION");

    static private final SubLList $list_alt872 = list(makeSymbol("ON-PROPOSE-EXPRESSION"));

    static private final SubLList $list_alt873 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION-P"), makeSymbol("ON-PROPOSE-EXPRESSION")), makeString("(ADD-ON-PROPOSE-EXPRESSION ~S): ~S is not a valid ON-PROPOSE-EXPRESSION."), makeSymbol("SELF"), makeSymbol("ON-PROPOSE-EXPRESSION")),
	    list(makeSymbol("PIF"), makeSymbol("ON-PROPOSE-EXPRESSIONS"), list(makeSymbol("CSETQ"), makeSymbol("ON-PROPOSE-EXPRESSIONS"), list(makeSymbol("NCONC"), makeSymbol("ON-PROPOSE-EXPRESSIONS"), list(makeSymbol("CONS"), makeSymbol("ON-PROPOSE-EXPRESSION"), NIL))),
		    list(makeSymbol("CSETQ"), makeSymbol("ON-PROPOSE-EXPRESSIONS"), list(makeSymbol("CONS"), makeSymbol("ON-PROPOSE-EXPRESSION"), NIL))),
	    list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-PARENT"), makeSymbol("CYBLACK-DEFKS-EXPRESSION")), makeSymbol("ON-PROPOSE-EXPRESSION"), makeSymbol("SELF")), list(RET, makeSymbol("ON-PROPOSE-EXPRESSION")));

    static private final SubLSymbol $sym874$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-BODY-METHOD");

    static private final SubLString $str_alt875$_ADD_ON_PROPOSE_EXPRESSION__S____ = makeString("(ADD-ON-PROPOSE-EXPRESSION ~S): ~S is not a valid ON-PROPOSE-EXPRESSION.");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_BODY_ADD_ON_PROPOSE_EXPRESSION_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-BODY-ADD-ON-PROPOSE-EXPRESSION-METHOD");

    private static final SubLSymbol REMOVE_ON_PROPOSE_EXPRESSION = makeSymbol("REMOVE-ON-PROPOSE-EXPRESSION");

    static private final SubLList $list_alt878 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION-P"), makeSymbol("ON-PROPOSE-EXPRESSION")), makeString("(REMOVE-ON-PROPOSE-EXPRESSION ~S): ~S is not an instance of CYBLACK-ON-PROPOSE-EXPRESSION."), makeSymbol("SELF"), makeSymbol("ON-PROPOSE-EXPRESSION")),
	    list(makeSymbol("CSETQ"), makeSymbol("ON-PROPOSE-EXPRESSIONS"), list(makeSymbol("DELETE"), makeSymbol("ON-PROPOSE-EXPRESSION"), makeSymbol("ON-PROPOSE-EXPRESSIONS"))), list(RET, makeSymbol("ON-PROPOSE-EXPRESSION")));

    static private final SubLSymbol $sym879$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-BODY-METHOD");

    static private final SubLString $str_alt880$_REMOVE_ON_PROPOSE_EXPRESSION__S_ = makeString("(REMOVE-ON-PROPOSE-EXPRESSION ~S): ~S is not an instance of CYBLACK-ON-PROPOSE-EXPRESSION.");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_BODY_REMOVE_ON_PROPOSE_EXPRESSION_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-BODY-REMOVE-ON-PROPOSE-EXPRESSION-METHOD");

    static private final SubLList $list_alt882 = list(list(makeSymbol("CDOLIST"), list(makeSymbol("EXPRESSION"), makeSymbol("ON-PROPOSE-EXPRESSIONS")), list(makeSymbol("CYBLACK-TRAVERSE-ON-PROPOSE-EXPRESSION-DISTRIBUTING-BINDING-INFO"), makeSymbol("EXPRESSION"), makeSymbol("LOCAL-ARGS"))),
	    list(RET, NIL));

    static private final SubLSymbol $sym883$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-BODY-METHOD");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_BODY_DISTRIBUTE_BINDING_INFO_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-BODY-DISTRIBUTE-BINDING-INFO-METHOD");

    static private final SubLList $list_alt885 = list(makeSymbol("CDOTIMES"), makeSymbol("CDOLIST"), makeSymbol("CDOLIST-COLLECTING"), makeSymbol("CDOLIST-APPENDING"), makeSymbol("CDOHASH"), makeSymbol("CSOME"), makeSymbol("DO-DICTIONARY"));

    static private final SubLList $list_alt887 = list(list(makeSymbol("CLET"), list(list(makeSymbol("COMPILED-ON-PROPOSE-EXPRESSIONS"), NIL)),
	    list(makeSymbol("CDOLIST"), list(makeSymbol("ON-PROPOSE-EXPRESSION"), makeSymbol("ON-PROPOSE-EXPRESSIONS")),
		    list(makeSymbol("CPUSH"), list(makeSymbol("COMPILE-ON-PROPOSE-EXPRESSION"), makeSymbol("ON-PROPOSE-EXPRESSION"), makeSymbol("KS-ASSISTANT")), makeSymbol("COMPILED-ON-PROPOSE-EXPRESSIONS"))),
	    list(RET, list(makeSymbol("NREVERSE"), makeSymbol("COMPILED-ON-PROPOSE-EXPRESSIONS")))));

    static private final SubLSymbol $sym888$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_BODY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-BODY-METHOD");

    static private final SubLSymbol $sym889$CYBLACK_ON_PROPOSE_BODY_COMPILE_CREATE_PROPOSALS_ON_PROPOSE_BODY_ = makeSymbol("CYBLACK-ON-PROPOSE-BODY-COMPILE-CREATE-PROPOSALS-ON-PROPOSE-BODY-METHOD");

    private static final SubLSymbol COMPILE_ON_PROPOSE_EXPRESSION = makeSymbol("COMPILE-ON-PROPOSE-EXPRESSION");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_EXPRESSION = makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION");

    static private final SubLList $list_alt892 = list(new SubLObject[] { list(makeSymbol("EXPRESSION-INDEX"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DATATYPE-LIST"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("REASON-LIST"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("ON-ACCEPT-EXPRESSION"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("BOUND-VARIABLES"), makeKeyword("INSTANCE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-EXPRESSION-INDEX"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-EXPRESSION-INDEX"), list(makeSymbol("NEW-EXPRESSION-INDEX")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-DATATYPE-LIST"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-DATATYPE-LIST"), list(makeSymbol("NEW-DATATYPE-LIST")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-REASON-LIST"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-REASON-LIST"), list(makeSymbol("NEW-REASON-LIST")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ON-ACCEPT-EXPRESSION"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ON-ACCEPT-EXPRESSION"), list(makeSymbol("NEW-ON-ACCEPT-EXPRESSION")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("COMPILE-ON-PROPOSE-EXPRESSION"), list(makeSymbol("KS-ASSISTANT")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-EXECUTE-METHOD-BINDINGS"), list(makeSymbol("VAR")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-SILENCE-STATEMENTS"), NIL, makeKeyword("PUBLIC")) });

    private static final SubLSymbol ON_ACCEPT_EXPRESSION = makeSymbol("ON-ACCEPT-EXPRESSION");

    private static final SubLSymbol REASON_LIST = makeSymbol("REASON-LIST");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ON_PROPOSE_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ON-PROPOSE-EXPRESSION-CLASS");

    private static final SubLSymbol BOUND_VARIABLES = makeSymbol("BOUND-VARIABLES");

    static private final SubLSymbol $sym898$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ON_PROPOSE_EXPRESSION_INSTANC = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ON-PROPOSE-EXPRESSION-INSTANCE");

    static private final SubLList $list_alt899 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("EXPRESSION-INDEX"), NIL), list(makeSymbol("CSETQ"), makeSymbol("DATATYPE-LIST"), NIL), list(makeSymbol("CSETQ"), makeSymbol("ON-ACCEPT-EXPRESSION"), NIL),
	    list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym900$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION-INITIALIZE-METHOD");

    static private final SubLList $list_alt902 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")),
	    list(makeSymbol("PIF"), makeSymbol("REASON-LIST"), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:PROPOSE ~S :REASONS ~S :ON-ACCEPT-DO ~S)"), makeSymbol("DATATYPE-LIST"), makeSymbol("REASON-LIST"), makeSymbol("ON-ACCEPT-EXPRESSION")),
		    list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:PROPOSE ~S :ON-ACCEPT-DO ~S)"), makeSymbol("DATATYPE-LIST"), makeSymbol("ON-ACCEPT-EXPRESSION"))),
	    list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym903$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-EXPRESSION-METHOD");

    static private final SubLString $str_alt904$__PROPOSE__S__REASONS__S__ON_ACCE = makeString("(:PROPOSE ~S :REASONS ~S :ON-ACCEPT-DO ~S)");

    static private final SubLString $str_alt905$__PROPOSE__S__ON_ACCEPT_DO__S_ = makeString("(:PROPOSE ~S :ON-ACCEPT-DO ~S)");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol GET_EXPRESSION_INDEX = makeSymbol("GET-EXPRESSION-INDEX");

    static private final SubLList $list_alt908 = list(list(RET, makeSymbol("EXPRESSION-INDEX")));

    static private final SubLSymbol $sym909$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_EXPRESSION_GET_EXPRESSION_INDEX_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION-GET-EXPRESSION-INDEX-METHOD");

    private static final SubLSymbol SET_EXPRESSION_INDEX = makeSymbol("SET-EXPRESSION-INDEX");

    static private final SubLList $list_alt912 = list(makeSymbol("NEW-EXPRESSION-INDEX"));

    static private final SubLList $list_alt913 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CAND"), list(makeSymbol("INTEGERP"), makeSymbol("NEW-EXPRESSION-INDEX")), list(makeSymbol(">="), makeSymbol("NEW-EXPRESSION-INDEX"), ZERO_INTEGER)),
		    makeString("(SET-EXPRESSION-INDEX ~S): Expression index ~S is not a valid index.  ~\n     A non-negative integer was expected."), makeSymbol("SELF"), makeSymbol("NEW-EXPRESSION-INDEX")),
	    list(makeSymbol("CSETQ"), makeSymbol("EXPRESSION-INDEX"), makeSymbol("NEW-EXPRESSION-INDEX")), list(RET, makeSymbol("EXPRESSION-INDEX")));

    static private final SubLSymbol $sym914$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-EXPRESSION-METHOD");

    static private final SubLString $str_alt915$_SET_EXPRESSION_INDEX__S___Expres = makeString("(SET-EXPRESSION-INDEX ~S): Expression index ~S is not a valid index.  ~\n     A non-negative integer was expected.");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_EXPRESSION_SET_EXPRESSION_INDEX_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION-SET-EXPRESSION-INDEX-METHOD");

    private static final SubLSymbol GET_DATATYPE_LIST = makeSymbol("GET-DATATYPE-LIST");

    static private final SubLList $list_alt918 = list(list(RET, makeSymbol("DATATYPE-LIST")));

    static private final SubLSymbol $sym919$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_EXPRESSION_GET_DATATYPE_LIST_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION-GET-DATATYPE-LIST-METHOD");

    private static final SubLSymbol SET_DATATYPE_LIST = makeSymbol("SET-DATATYPE-LIST");

    static private final SubLList $list_alt922 = list(makeSymbol("NEW-DATATYPE-LIST"));

    static private final SubLList $list_alt923 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-DATATYPE-LIST-P"), makeSymbol("NEW-DATATYPE-LIST")), makeString("(SET-DATATYPE-LIST ~S): ~S is not a valid datatype list.  A list of strings was expected."), makeSymbol("SELF"), makeSymbol("NEW-DATATYPE-LIST")),
	    list(makeSymbol("CSETQ"), makeSymbol("DATATYPE-LIST"), list(makeSymbol("COPY-LIST"), makeSymbol("NEW-DATATYPE-LIST"))), list(RET, makeSymbol("NEW-DATATYPE-LIST")));

    static private final SubLSymbol $sym924$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-EXPRESSION-METHOD");

    static private final SubLString $str_alt925$_SET_DATATYPE_LIST__S____S_is_not = makeString("(SET-DATATYPE-LIST ~S): ~S is not a valid datatype list.  A list of strings was expected.");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_EXPRESSION_SET_DATATYPE_LIST_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION-SET-DATATYPE-LIST-METHOD");

    private static final SubLSymbol GET_REASON_LIST = makeSymbol("GET-REASON-LIST");

    static private final SubLList $list_alt928 = list(list(RET, makeSymbol("REASON-LIST")));

    static private final SubLSymbol $sym929$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_EXPRESSION_GET_REASON_LIST_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION-GET-REASON-LIST-METHOD");

    private static final SubLSymbol SET_REASON_LIST = makeSymbol("SET-REASON-LIST");

    static private final SubLList $list_alt932 = list(makeSymbol("NEW-REASON-LIST"));

    static private final SubLList $list_alt933 = list(list(makeSymbol("MUST"), list(makeSymbol("LISTP"), makeSymbol("NEW-REASON-LIST")), makeString("(SET-REASON-LIST ~S): ~S is not a valid reason list.  A list was expected."), makeSymbol("SELF"), makeSymbol("NEW-REASON-LIST")),
	    list(makeSymbol("CSETQ"), makeSymbol("REASON-LIST"), list(makeSymbol("COPY-TREE"), makeSymbol("NEW-REASON-LIST"))), list(RET, makeSymbol("NEW-REASON-LIST")));

    static private final SubLSymbol $sym934$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-EXPRESSION-METHOD");

    static private final SubLString $str_alt935$_SET_REASON_LIST__S____S_is_not_a = makeString("(SET-REASON-LIST ~S): ~S is not a valid reason list.  A list was expected.");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_EXPRESSION_SET_REASON_LIST_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION-SET-REASON-LIST-METHOD");

    private static final SubLSymbol GET_ON_ACCEPT_EXPRESSION = makeSymbol("GET-ON-ACCEPT-EXPRESSION");

    static private final SubLList $list_alt938 = list(list(RET, makeSymbol("ON-ACCEPT-EXPRESSION")));

    static private final SubLSymbol $sym939$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_EXPRESSION_GET_ON_ACCEPT_EXPRESSION_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION-GET-ON-ACCEPT-EXPRESSION-METHOD");

    private static final SubLSymbol SET_ON_ACCEPT_EXPRESSION = makeSymbol("SET-ON-ACCEPT-EXPRESSION");

    static private final SubLList $list_alt942 = list(makeSymbol("NEW-ON-ACCEPT-EXPRESSION"));

    static private final SubLList $list_alt943 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-QUICK-SYMBOLIC-EXPRESSION-P"), makeSymbol("NEW-ON-ACCEPT-EXPRESSION")), makeString("(SET-ON-ACCEPT-EXPRESSION-P ~S): ~S is not a valid LISP expression."), makeSymbol("SELF"), makeSymbol("NEW-ON-ACCEPT-EXPRESSION")),
	    list(makeSymbol("CSETQ"), makeSymbol("ON-ACCEPT-EXPRESSION"), list(makeSymbol("CYBLACK-COPY-TREE-WHILE-SETTING-PARENT"), makeSymbol("NEW-ON-ACCEPT-EXPRESSION"), makeSymbol("SELF"))), list(RET, makeSymbol("NEW-ON-ACCEPT-EXPRESSION")));

    static private final SubLSymbol $sym944$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-EXPRESSION-METHOD");

    static private final SubLString $str_alt945$_SET_ON_ACCEPT_EXPRESSION_P__S___ = makeString("(SET-ON-ACCEPT-EXPRESSION-P ~S): ~S is not a valid LISP expression.");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_EXPRESSION_SET_ON_ACCEPT_EXPRESSION_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION-SET-ON-ACCEPT-EXPRESSION-METHOD");

    static private final SubLList $list_alt947 = list(list(makeSymbol("CLET"),
	    list(list(makeSymbol("PROPOSAL-VAR"), list(makeSymbol("MAKE-SYMBOL"), makeString("proposal"))), list(makeSymbol("PROPOSALS-VAR"), list(makeSymbol("GET-PROPOSALS-VAR"), makeSymbol("SELF"))),
		    list(makeSymbol("PROPOSAL-CLASS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-PROPOSAL-CLASS"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("KS-ASSISTANT")))),
	    list(RET,
		    list(new SubLObject[] { makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("CLET")),
			    list(makeSymbol("BQ-LIST"),
				    list(makeSymbol("BQ-LIST"), makeSymbol("PROPOSAL-VAR"), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("NEW-CLASS-INSTANCE")), list(makeSymbol("BQ-LIST"), list(QUOTE, QUOTE), makeSymbol("PROPOSAL-CLASS"))))),
			    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("INLINE-METHOD")), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("SET-APPLICATION")), makeSymbol("PROPOSAL-CLASS")), makeSymbol("PROPOSAL-VAR"),
				    list(QUOTE, list(makeSymbol("APPLICATION")))),
			    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("INLINE-METHOD")), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("SET-KNOWLEDGE-SOURCE")), makeSymbol("PROPOSAL-CLASS")), makeSymbol("PROPOSAL-VAR"),
				    list(QUOTE, list(makeSymbol("SELF")))),
			    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("INLINE-METHOD")), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("SET-PROPOSED-CONTRIBUTIONS")), makeSymbol("PROPOSAL-CLASS")), makeSymbol("PROPOSAL-VAR"),
				    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("INLINE-METHOD")), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CREATE-DATATYPE-BAG")), makeSymbol("PROPOSAL-CLASS")), makeSymbol("PROPOSAL-VAR"),
					    list(makeSymbol("BQ-LIST"), list(QUOTE, QUOTE), makeSymbol("DATATYPE-LIST")))),
			    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("INLINE-METHOD")), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("SET-PROPOSAL-INDEX")), makeSymbol("PROPOSAL-CLASS")), makeSymbol("PROPOSAL-VAR"), makeSymbol("EXPRESSION-INDEX")),
			    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("INLINE-METHOD")), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("SET-ACTIVATION-PATTERN")), makeSymbol("PROPOSAL-CLASS")), makeSymbol("PROPOSAL-VAR"),
				    list(makeSymbol("GET-ENVIRONMENT-VAR"), makeSymbol("SELF"))),
			    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("INLINE-METHOD")), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("SET-REASONS")), makeSymbol("PROPOSAL-CLASS")), makeSymbol("PROPOSAL-VAR"),
				    list(makeSymbol("BQ-LIST"), list(QUOTE, QUOTE), list(makeSymbol("COPY-TREE"), list(makeSymbol("GET-REASON-LIST"), makeSymbol("SELF"))))),
			    list(makeSymbol("BQ-APPEND"), list(makeSymbol("GENERATE-TO-BINDINGS-CODE"), makeSymbol("SELF"), makeSymbol("PROPOSAL-VAR"), makeSymbol("BOUND-VARIABLES")),
				    list(makeSymbol("BQ-LIST"), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CPUSH")), makeSymbol("PROPOSAL-VAR"), makeSymbol("PROPOSALS-VAR")))) }))));

    static private final SubLSymbol $sym948$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-EXPRESSION-METHOD");

    static private final SubLString $$$proposal = makeString("proposal");

    static private final SubLList $list_alt951 = list(makeSymbol("SELF"));

    static private final SubLSymbol $sym956$CYBLACK_ON_PROPOSE_EXPRESSION_COMPILE_ON_PROPOSE_EXPRESSION_METHO = makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION-COMPILE-ON-PROPOSE-EXPRESSION-METHOD");

    private static final SubLSymbol GET_EXECUTE_METHOD_BINDINGS = makeSymbol("GET-EXECUTE-METHOD-BINDINGS");

    static private final SubLList $list_alt958 = list(list(RET, list(makeSymbol("GENERATE-FROM-BINDINGS-CODE"), makeSymbol("SELF"), makeSymbol("VAR"), makeSymbol("BOUND-VARIABLES"))));

    static private final SubLSymbol $sym959$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_EXPRESSION_GET_EXECUTE_METHOD_BINDINGS_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION-GET-EXECUTE-METHOD-BINDINGS-METHOD");

    private static final SubLSymbol GET_SILENCE_STATEMENTS = makeSymbol("GET-SILENCE-STATEMENTS");

    static private final SubLList $list_alt962 = list(list(RET, list(makeSymbol("GENERATE-NOOP-CALLS"), makeSymbol("SELF"), makeSymbol("BOUND-VARIABLES"))));

    static private final SubLSymbol $sym963$OUTER_CATCH_FOR_CYBLACK_ON_PROPOSE_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ON-PROPOSE-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_ON_PROPOSE_EXPRESSION_GET_SILENCE_STATEMENTS_METHOD = makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION-GET-SILENCE-STATEMENTS-METHOD");

    private static final SubLSymbol CYBLACK_ACTION_EXPRESSION = makeSymbol("CYBLACK-ACTION-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ACTION_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ACTION-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ACTION_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ACTION-EXPRESSION-INSTANCE");

    private static final SubLSymbol CYBLACK_POSTING_ACTION_EXPRESSION = makeSymbol("CYBLACK-POSTING-ACTION-EXPRESSION");

    static private final SubLList $list_alt969 = list(list(makeSymbol("POSTING-REFERENCE-EXPRESSION"), makeKeyword("INSTANCE"), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-POSTING-REFERENCE-EXPRESSION"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-POSTING-REFERENCE-EXPRESSION"), list(makeSymbol("NEW-POSTING-REFERENCE-EXPRESSION")), makeKeyword("PUBLIC")));

    static private final SubLSymbol $sym970$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_ACTION_EXPRESSION_CLA = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-ACTION-EXPRESSION-CLASS");

    static private final SubLSymbol $sym971$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_ACTION_EXPRESSION_INS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-ACTION-EXPRESSION-INSTANCE");

    static private final SubLList $list_alt972 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("POSTING-REFERENCE-EXPRESSION"), NIL), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym973$OUTER_CATCH_FOR_CYBLACK_POSTING_ACTION_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-ACTION-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_ACTION_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-POSTING-ACTION-EXPRESSION-INITIALIZE-METHOD");

    private static final SubLSymbol GET_POSTING_REFERENCE_EXPRESSION = makeSymbol("GET-POSTING-REFERENCE-EXPRESSION");

    static private final SubLList $list_alt976 = list(list(RET, makeSymbol("POSTING-REFERENCE-EXPRESSION")));

    static private final SubLSymbol $sym977$CYBLACK_POSTING_ACTION_EXPRESSION_GET_POSTING_REFERENCE_EXPRESSIO = makeSymbol("CYBLACK-POSTING-ACTION-EXPRESSION-GET-POSTING-REFERENCE-EXPRESSION-METHOD");

    private static final SubLSymbol SET_POSTING_REFERENCE_EXPRESSION = makeSymbol("SET-POSTING-REFERENCE-EXPRESSION");

    static private final SubLList $list_alt979 = list(makeSymbol("NEW-POSTING-REFERENCE-EXPRESSION"));

    static private final SubLList $list_alt980 = list(list(makeSymbol("CSETQ"), makeSymbol("POSTING-REFERENCE-EXPRESSION"), makeSymbol("NEW-POSTING-REFERENCE-EXPRESSION")), list(RET, makeSymbol("NEW-POSTING-REFERENCE-EXPRESSION")));

    static private final SubLSymbol $sym981$OUTER_CATCH_FOR_CYBLACK_POSTING_ACTION_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-ACTION-EXPRESSION-METHOD");

    static private final SubLSymbol $sym982$CYBLACK_POSTING_ACTION_EXPRESSION_SET_POSTING_REFERENCE_EXPRESSIO = makeSymbol("CYBLACK-POSTING-ACTION-EXPRESSION-SET-POSTING-REFERENCE-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_DEACTIVATE_EXPR = makeSymbol("CYBLACK-DEACTIVATE-EXPR");

    static private final SubLList $list_alt984 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")));

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEACTIVATE_EXPR_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEACTIVATE-EXPR-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_DEACTIVATE_EXPR_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-DEACTIVATE-EXPR-INSTANCE");

    static private final SubLList $list_alt987 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:DEACTIVATE ~S)"), makeSymbol("POSTING-REFERENCE-EXPRESSION")), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym988$OUTER_CATCH_FOR_CYBLACK_DEACTIVATE_EXPR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-DEACTIVATE-EXPR-METHOD");

    static private final SubLString $str_alt989$__DEACTIVATE__S_ = makeString("(:DEACTIVATE ~S)");

    private static final SubLSymbol CYBLACK_DEACTIVATE_EXPR_PRINT_METHOD = makeSymbol("CYBLACK-DEACTIVATE-EXPR-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_REMOVAL_EXPR = makeSymbol("CYBLACK-REMOVAL-EXPR");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_REMOVAL_EXPR_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-REMOVAL-EXPR-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_REMOVAL_EXPR_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-REMOVAL-EXPR-INSTANCE");

    static private final SubLList $list_alt994 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:UNPOST ~S)"), makeSymbol("POSTING-REFERENCE-EXPRESSION")), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym995$OUTER_CATCH_FOR_CYBLACK_REMOVAL_EXPR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-REMOVAL-EXPR-METHOD");

    static private final SubLString $str_alt996$__UNPOST__S_ = makeString("(:UNPOST ~S)");

    private static final SubLSymbol CYBLACK_REMOVAL_EXPR_PRINT_METHOD = makeSymbol("CYBLACK-REMOVAL-EXPR-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_EXPR = makeSymbol("CYBLACK-POSTING-EXPR");

    static private final SubLList $list_alt999 = list(new SubLObject[] { list(makeSymbol("DATATYPE-STRING"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("SLOT-INITIALIZATIONS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("CONFIDENCE-EXPRESSION"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("COMPUTE-CONFIDENCE"), makeKeyword("BOOLEAN"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("IMMUTABLE-EXPRESSION"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-DATATYPE-STRING"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-DATATYPE-STRING"), list(makeSymbol("NEW-DATATYPE-STRING")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-SLOT-INITIALIZATIONS"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-SLOT-INITIALIZATIONS"), list(makeSymbol("NEW-SLOT-INITIALIZATIONS")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("ADD-SLOT-INITIALIZATIONS"), list(makeSymbol("SLOT-KEY"), makeSymbol("EXPRESSION")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("REMOVE-SLOT-INITIALIZATIONS"), list(makeSymbol("SLOT-KEY")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-CONFIDENCE-EXPRESSION"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-CONFIDENCE-EXPRESSION"), list(makeSymbol("NEW-EXPRESSION"), makeSymbol("&OPTIONAL"), list(makeSymbol("COMPUTE"), NIL)), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-IMMUTABLE-EXPRESSION"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-IMMUTABLE-EXPRESSION"), list(makeSymbol("NEW-IMMUTABLE-EXPRESSION")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-EXECUTE-METHOD-BINDINGS"), list(makeSymbol("VAR")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-SILENCE-STATEMENTS"), NIL, makeKeyword("PUBLIC")) });

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_EXPR_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-EXPR-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_POSTING_EXPR_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-POSTING-EXPR-INSTANCE");

    static private final SubLList $list_alt1002 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("DATATYPE-STRING"), NIL), list(makeSymbol("CSETQ"), makeSymbol("SLOT-INITIALIZATIONS"), NIL),
	    list(makeSymbol("CSETQ"), makeSymbol("CONFIDENCE-EXPRESSION"), NIL), list(makeSymbol("CSETQ"), makeSymbol("COMPUTE-CONFIDENCE"), NIL), list(makeSymbol("CSETQ"), makeSymbol("IMMUTABLE-EXPRESSION"), NIL), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym1003$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-EXPR-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_EXPR_INITIALIZE_METHOD = makeSymbol("CYBLACK-POSTING-EXPR-INITIALIZE-METHOD");

    static private final SubLList $list_alt1005 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:POST (~S"), makeSymbol("DATATYPE-STRING")),
	    list(makeSymbol("PUNLESS"), makeSymbol("SLOT-INITIALIZATIONS"), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(")")), list(RET, makeSymbol("SELF"))),
	    list(makeSymbol("CDOPLIST"), list(makeSymbol("KEY"), makeSymbol("VALUE"), makeSymbol("SLOT-INITIALIZATIONS")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(" ~S ~S"), makeSymbol("KEY"), makeSymbol("VALUE"))),
	    list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(")")),
	    list(makeSymbol("PWHEN"), makeSymbol("CONFIDENCE-EXPRESSION"), list(makeSymbol("PIF"), makeSymbol("COMPUTE-CONFIDENCE"), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(" :COMPUTE-CONFIDENCE")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(" :CONFIDENCE"))),
		    list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(" ~S"), makeSymbol("CONFIDENCE-EXPRESSION"))),
	    list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(")")), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym1006$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-EXPR-METHOD");

    static private final SubLString $str_alt1007$__POST___S = makeString("(:POST (~S");

    static private final SubLString $str_alt1008$__S__S = makeString(" ~S ~S");

    static private final SubLString $str_alt1009$__COMPUTE_CONFIDENCE = makeString(" :COMPUTE-CONFIDENCE");

    static private final SubLString $str_alt1010$__CONFIDENCE = makeString(" :CONFIDENCE");

    private static final SubLSymbol CYBLACK_POSTING_EXPR_PRINT_METHOD = makeSymbol("CYBLACK-POSTING-EXPR-PRINT-METHOD");

    private static final SubLSymbol GET_DATATYPE_STRING = makeSymbol("GET-DATATYPE-STRING");

    static private final SubLList $list_alt1013 = list(list(RET, makeSymbol("DATATYPE-STRING")));

    static private final SubLSymbol $sym1014$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-EXPR-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_EXPR_GET_DATATYPE_STRING_METHOD = makeSymbol("CYBLACK-POSTING-EXPR-GET-DATATYPE-STRING-METHOD");

    private static final SubLSymbol SET_DATATYPE_STRING = makeSymbol("SET-DATATYPE-STRING");

    static private final SubLList $list_alt1017 = list(makeSymbol("NEW-DATATYPE-STRING"));

    static private final SubLList $list_alt1018 = list(list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-DATATYPE-STRING-P"), makeSymbol("NEW-DATATYPE-STRING")), makeString("(SET-DATATYPE-STRING ~S): ~S is not a valid datatype string."), makeSymbol("SELF"), makeSymbol("NEW-DATATYPE-STRING")),
	    list(makeSymbol("CSETQ"), makeSymbol("DATATYPE-STRING"), makeSymbol("NEW-DATATYPE-STRING")), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym1019$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-EXPR-METHOD");

    static private final SubLString $str_alt1020$_SET_DATATYPE_STRING__S____S_is_n = makeString("(SET-DATATYPE-STRING ~S): ~S is not a valid datatype string.");

    private static final SubLSymbol CYBLACK_POSTING_EXPR_SET_DATATYPE_STRING_METHOD = makeSymbol("CYBLACK-POSTING-EXPR-SET-DATATYPE-STRING-METHOD");

    private static final SubLSymbol GET_SLOT_INITIALIZATIONS = makeSymbol("GET-SLOT-INITIALIZATIONS");

    static private final SubLList $list_alt1023 = list(list(RET, makeSymbol("SLOT-INITIALIZATIONS")));

    static private final SubLSymbol $sym1024$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-EXPR-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_EXPR_GET_SLOT_INITIALIZATIONS_METHOD = makeSymbol("CYBLACK-POSTING-EXPR-GET-SLOT-INITIALIZATIONS-METHOD");

    private static final SubLSymbol SET_SLOT_INITIALIZATIONS = makeSymbol("SET-SLOT-INITIALIZATIONS");

    static private final SubLList $list_alt1027 = list(makeSymbol("NEW-SLOT-INITIALIZATIONS"));

    static private final SubLList $list_alt1028 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-SLOT-INITIALIZATIONS")), list(makeSymbol("CYBLACK-SLOT-INITIALIZATIONS-P"), makeSymbol("NEW-SLOT-INITIALIZATIONS"))),
		    makeString("(SET-SLOT-INITIALIZATIONS ~S): ~S is not a valid slot initialization list."), makeSymbol("SELF"), makeSymbol("NEW-SLOT-INITIALIZATIONS")),
	    list(makeSymbol("CSETQ"), makeSymbol("SLOT-INITIALIZATIONS"), list(makeSymbol("COPY-TREE"), makeSymbol("NEW-SLOT-INITIALIZATIONS"))), list(RET, makeSymbol("NEW-SLOT-INITIALIZATIONS")));

    static private final SubLSymbol $sym1029$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-EXPR-METHOD");

    static private final SubLString $str_alt1030$_SET_SLOT_INITIALIZATIONS__S____S = makeString("(SET-SLOT-INITIALIZATIONS ~S): ~S is not a valid slot initialization list.");

    private static final SubLSymbol CYBLACK_POSTING_EXPR_SET_SLOT_INITIALIZATIONS_METHOD = makeSymbol("CYBLACK-POSTING-EXPR-SET-SLOT-INITIALIZATIONS-METHOD");

    private static final SubLSymbol ADD_SLOT_INITIALIZATIONS = makeSymbol("ADD-SLOT-INITIALIZATIONS");

    static private final SubLList $list_alt1033 = list(makeSymbol("SLOT-KEY"), makeSymbol("EXPRESSION"));

    static private final SubLList $list_alt1034 = list(list(makeSymbol("MUST"), list(makeSymbol("KEYWORDP"), makeSymbol("SLOT-KEY")), makeString("(ADD-SLOT-INITIALIZATIONS ~S): ~S is not a valid slot key.  A keyword was expected."), makeSymbol("SELF"), makeSymbol("SLOT-KEY")),
	    list(makeSymbol("PIF"), makeSymbol("SLOT-INITIALIZATIONS"), list(makeSymbol("CSETQ"), makeSymbol("SLOT-INITIALIZATIONS"), list(makeSymbol("NCONC"), makeSymbol("SLOT-INITIALIZATIONS"), list(makeSymbol("LIST"), makeSymbol("SLOT-KEY"), makeSymbol("EXPRESSION")))),
		    list(makeSymbol("CSETQ"), makeSymbol("SLOT-INITIALIZATIONS"), list(makeSymbol("LIST"), makeSymbol("SLOT-KEY"), makeSymbol("EXPRESSION")))),
	    list(RET, makeSymbol("SLOT-KEY")));

    static private final SubLSymbol $sym1035$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-EXPR-METHOD");

    static private final SubLString $str_alt1036$_ADD_SLOT_INITIALIZATIONS__S____S = makeString("(ADD-SLOT-INITIALIZATIONS ~S): ~S is not a valid slot key.  A keyword was expected.");

    private static final SubLSymbol CYBLACK_POSTING_EXPR_ADD_SLOT_INITIALIZATIONS_METHOD = makeSymbol("CYBLACK-POSTING-EXPR-ADD-SLOT-INITIALIZATIONS-METHOD");

    private static final SubLSymbol REMOVE_SLOT_INITIALIZATIONS = makeSymbol("REMOVE-SLOT-INITIALIZATIONS");

    static private final SubLList $list_alt1039 = list(makeSymbol("SLOT-KEY"));

    static private final SubLList $list_alt1040 = list(list(makeSymbol("MUST"), list(makeSymbol("KEYWORDP"), makeSymbol("SLOT-KEY")), makeString("(REMOVE-SLOT-INITIALIZATIONS ~S): ~S is not a valid slot key.  A keyword was expected."), makeSymbol("SELF"), makeSymbol("SLOT-KEY")),
	    list(makeSymbol("PUNLESS"), makeSymbol("SLOT-INITIALIZATIONS"), list(RET, NIL)), list(makeSymbol("CSETQ"), makeSymbol("SLOT-INITIALIZATIONS"), list(makeSymbol("REMF"), makeSymbol("SLOT-INITIALIZATIONS"), makeSymbol("SLOT-KEY"))),
	    list(RET, makeSymbol("SLOT-KEY")));

    static private final SubLSymbol $sym1041$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-EXPR-METHOD");

    static private final SubLString $str_alt1042$_REMOVE_SLOT_INITIALIZATIONS__S__ = makeString("(REMOVE-SLOT-INITIALIZATIONS ~S): ~S is not a valid slot key.  A keyword was expected.");

    private static final SubLSymbol CYBLACK_POSTING_EXPR_REMOVE_SLOT_INITIALIZATIONS_METHOD = makeSymbol("CYBLACK-POSTING-EXPR-REMOVE-SLOT-INITIALIZATIONS-METHOD");

    private static final SubLSymbol GET_CONFIDENCE_EXPRESSION = makeSymbol("GET-CONFIDENCE-EXPRESSION");

    static private final SubLList $list_alt1045 = list(list(RET, makeSymbol("CONFIDENCE-EXPRESSION")));

    static private final SubLSymbol $sym1046$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-EXPR-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_EXPR_GET_CONFIDENCE_EXPRESSION_METHOD = makeSymbol("CYBLACK-POSTING-EXPR-GET-CONFIDENCE-EXPRESSION-METHOD");

    private static final SubLSymbol SET_CONFIDENCE_EXPRESSION = makeSymbol("SET-CONFIDENCE-EXPRESSION");

    static private final SubLList $list_alt1049 = list(makeSymbol("NEW-EXPRESSION"), makeSymbol("&OPTIONAL"), list(makeSymbol("COMPUTE"), NIL));

    static private final SubLList $list_alt1050 = list(list(makeSymbol("CSETQ"), makeSymbol("CONFIDENCE-EXPRESSION"), makeSymbol("NEW-EXPRESSION")), list(makeSymbol("CSETQ"), makeSymbol("COMPUTE-CONFIDENCE"), makeSymbol("COMPUTE")), list(RET, makeSymbol("NEW-EXPRESSION")));

    static private final SubLSymbol $sym1051$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-EXPR-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_EXPR_SET_CONFIDENCE_EXPRESSION_METHOD = makeSymbol("CYBLACK-POSTING-EXPR-SET-CONFIDENCE-EXPRESSION-METHOD");

    private static final SubLSymbol GET_IMMUTABLE_EXPRESSION = makeSymbol("GET-IMMUTABLE-EXPRESSION");

    static private final SubLList $list_alt1054 = list(list(RET, makeSymbol("IMMUTABLE-EXPRESSION")));

    private static final SubLSymbol CYBLACK_POSTING_EXPR_GET_IMMUTABLE_EXPRESSION_METHOD = makeSymbol("CYBLACK-POSTING-EXPR-GET-IMMUTABLE-EXPRESSION-METHOD");

    private static final SubLSymbol SET_IMMUTABLE_EXPRESSION = makeSymbol("SET-IMMUTABLE-EXPRESSION");

    static private final SubLList $list_alt1057 = list(makeSymbol("NEW-IMMUTABLE-EXPRESSION"));

    static private final SubLList $list_alt1058 = list(list(makeSymbol("CSETQ"), makeSymbol("IMMUTABLE-EXPRESSION"), makeSymbol("NEW-IMMUTABLE-EXPRESSION")), list(RET, makeSymbol("NEW-IMMUTABLE-EXPRESSION")));

    static private final SubLSymbol $sym1059$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-EXPR-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_EXPR_SET_IMMUTABLE_EXPRESSION_METHOD = makeSymbol("CYBLACK-POSTING-EXPR-SET-IMMUTABLE-EXPRESSION-METHOD");

    static private final SubLList $list_alt1061 = list(list(makeSymbol("PWHEN"), makeSymbol("PARENT"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-EXECUTE-METHOD-BINDINGS"), makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION")), makeSymbol("PARENT"), makeSymbol("VAR")))),
	    list(RET, NIL));

    static private final SubLSymbol $sym1062$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-EXPR-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_EXPR_GET_EXECUTE_METHOD_BINDINGS_METHOD = makeSymbol("CYBLACK-POSTING-EXPR-GET-EXECUTE-METHOD-BINDINGS-METHOD");

    static private final SubLList $list_alt1064 = list(list(makeSymbol("PWHEN"), makeSymbol("PARENT"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-SILENCE-STATEMENTS"), makeSymbol("CYBLACK-ON-PROPOSE-EXPRESSION")), makeSymbol("PARENT")))),
	    list(RET, NIL));

    static private final SubLSymbol $sym1065$OUTER_CATCH_FOR_CYBLACK_POSTING_EXPR_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-POSTING-EXPR-METHOD");

    private static final SubLSymbol CYBLACK_POSTING_EXPR_GET_SILENCE_STATEMENTS_METHOD = makeSymbol("CYBLACK-POSTING-EXPR-GET-SILENCE-STATEMENTS-METHOD");

    private static final SubLSymbol CYBLACK_SET_RESULT_EXPRESSION = makeSymbol("CYBLACK-SET-RESULT-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SET_RESULT_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SET-RESULT-EXPRESSION-CLASS");

    static private final SubLSymbol $sym1069$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_SET_RESULT_EXPRESSION_INSTANC = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-SET-RESULT-EXPRESSION-INSTANCE");

    static private final SubLList $list_alt1070 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:SET-RESULT ~S)"), makeSymbol("POSTING-REFERENCE-EXPRESSION")), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym1071$OUTER_CATCH_FOR_CYBLACK_SET_RESULT_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-SET-RESULT-EXPRESSION-METHOD");

    static private final SubLString $str_alt1072$__SET_RESULT__S_ = makeString("(:SET-RESULT ~S)");

    private static final SubLSymbol CYBLACK_SET_RESULT_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-SET-RESULT-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_RETURN_EXPRESSION = makeSymbol("CYBLACK-RETURN-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_RETURN_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-RETURN-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_RETURN_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-RETURN-EXPRESSION-INSTANCE");

    static private final SubLList $list_alt1077 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:RETURN ~S)"), makeSymbol("POSTING-REFERENCE-EXPRESSION")), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym1078$OUTER_CATCH_FOR_CYBLACK_RETURN_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-RETURN-EXPRESSION-METHOD");

    static private final SubLString $str_alt1079$__RETURN__S_ = makeString("(:RETURN ~S)");

    private static final SubLSymbol CYBLACK_RETURN_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-RETURN-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol CYBLACK_RESET_ACTION_EXPRESSION = makeSymbol("CYBLACK-RESET-ACTION-EXPRESSION");

    static private final SubLList $list_alt1082 = list(list(makeSymbol("DESTINATION-LIST"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-DESTINATION-LIST"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-DESTINATION-LIST"), list(makeSymbol("NEW-DESTINATION-LIST")), makeKeyword("PUBLIC")));

    private static final SubLSymbol DESTINATION_LIST = makeSymbol("DESTINATION-LIST");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_RESET_ACTION_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-RESET-ACTION-EXPRESSION-CLASS");

    static private final SubLSymbol $sym1085$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_RESET_ACTION_EXPRESSION_INSTA = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-RESET-ACTION-EXPRESSION-INSTANCE");

    static private final SubLList $list_alt1086 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("DESTINATION-LIST"), NIL), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym1087$OUTER_CATCH_FOR_CYBLACK_RESET_ACTION_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-RESET-ACTION-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_RESET_ACTION_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-RESET-ACTION-EXPRESSION-INITIALIZE-METHOD");

    static private final SubLList $list_alt1089 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:RESET ~S)"), makeSymbol("DESTINATION-LIST")), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym1090$OUTER_CATCH_FOR_CYBLACK_RESET_ACTION_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-RESET-ACTION-EXPRESSION-METHOD");

    static private final SubLString $str_alt1091$__RESET__S_ = makeString("(:RESET ~S)");

    private static final SubLSymbol CYBLACK_RESET_ACTION_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-RESET-ACTION-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol GET_DESTINATION_LIST = makeSymbol("GET-DESTINATION-LIST");

    static private final SubLList $list_alt1094 = list(list(RET, list(makeSymbol("COPY-LIST"), makeSymbol("DESTINATION-LIST"))));

    static private final SubLSymbol $sym1095$OUTER_CATCH_FOR_CYBLACK_RESET_ACTION_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-RESET-ACTION-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_RESET_ACTION_EXPRESSION_GET_DESTINATION_LIST_METHOD = makeSymbol("CYBLACK-RESET-ACTION-EXPRESSION-GET-DESTINATION-LIST-METHOD");

    private static final SubLSymbol SET_DESTINATION_LIST = makeSymbol("SET-DESTINATION-LIST");

    static private final SubLList $list_alt1098 = list(makeSymbol("NEW-DESTINATION-LIST"));

    static private final SubLList $list_alt1099 = list(
	    list(makeSymbol("CDOLIST"), list(makeSymbol("DESTINATION"), makeSymbol("NEW-DESTINATION-LIST")),
		    list(makeSymbol("PUNLESS"), list(makeSymbol("COR"), list(makeSymbol("CYBLACK-APPLICATION-COMMAND-DESTINATION-P"), makeSymbol("DESTINATION")), list(makeSymbol("STRINGP"), makeSymbol("DESTINATION"))),
			    list(makeSymbol("WARN"), makeSymbol("*STANDARD-OUTPUT*"), makeString("(SET-DESTINATION-LIST ~S): ~S is not a valid destination."), makeSymbol("SELF"), makeSymbol("DESTINATION")))),
	    list(makeSymbol("CSETQ"), makeSymbol("DESTINATION-LIST"), list(makeSymbol("COPY-LIST"), makeSymbol("NEW-DESTINATION-LIST"))), list(RET, makeSymbol("NEW-DESTINATION-LIST")));

    static private final SubLSymbol $sym1100$OUTER_CATCH_FOR_CYBLACK_RESET_ACTION_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-RESET-ACTION-EXPRESSION-METHOD");

    static private final SubLString $str_alt1101$_SET_DESTINATION_LIST__S____S_is_ = makeString("(SET-DESTINATION-LIST ~S): ~S is not a valid destination.");

    private static final SubLSymbol CYBLACK_RESET_ACTION_EXPRESSION_SET_DESTINATION_LIST_METHOD = makeSymbol("CYBLACK-RESET-ACTION-EXPRESSION-SET-DESTINATION-LIST-METHOD");

    private static final SubLSymbol CYBLACK_ERROR_EXPRESSION = makeSymbol("CYBLACK-ERROR-EXPRESSION");

    static private final SubLList $list_alt1104 = list(list(makeSymbol("ERROR-STRING"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("ERROR-ARGS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ERROR-STRING"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ERROR-STRING"), list(makeSymbol("STRING")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ERROR-ARGS"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ERROR-ARGS"), list(makeSymbol("NEW-ERROR-ARGS")), makeKeyword("PUBLIC")));

    private static final SubLSymbol ERROR_ARGS = makeSymbol("ERROR-ARGS");

    private static final SubLSymbol ERROR_STRING = makeSymbol("ERROR-STRING");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ERROR_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ERROR-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_ERROR_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-ERROR-EXPRESSION-INSTANCE");

    static private final SubLList $list_alt1109 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("ERROR-STRING"), NIL), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym1110$OUTER_CATCH_FOR_CYBLACK_ERROR_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ERROR-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_ERROR_EXPRESSION_INITIALIZE_METHOD = makeSymbol("CYBLACK-ERROR-EXPRESSION-INITIALIZE-METHOD");

    static private final SubLList $list_alt1112 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:ERROR ~S"), makeSymbol("ERROR-STRING")),
	    list(makeSymbol("CDOLIST"), list(makeSymbol("ARG"), makeSymbol("ERROR-ARGS")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(" ~S"), makeSymbol("ARG"))), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString(")")), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym1113$OUTER_CATCH_FOR_CYBLACK_ERROR_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ERROR-EXPRESSION-METHOD");

    static private final SubLString $str_alt1114$__ERROR__S = makeString("(:ERROR ~S");

    private static final SubLSymbol CYBLACK_ERROR_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-ERROR-EXPRESSION-PRINT-METHOD");

    private static final SubLSymbol GET_ERROR_STRING = makeSymbol("GET-ERROR-STRING");

    static private final SubLList $list_alt1117 = list(list(RET, makeSymbol("ERROR-STRING")));

    private static final SubLSymbol CYBLACK_ERROR_EXPRESSION_GET_ERROR_STRING_METHOD = makeSymbol("CYBLACK-ERROR-EXPRESSION-GET-ERROR-STRING-METHOD");

    private static final SubLSymbol SET_ERROR_STRING = makeSymbol("SET-ERROR-STRING");

    static private final SubLList $list_alt1120 = list(makeSymbol("STRING"));

    static private final SubLList $list_alt1121 = list(list(makeSymbol("CSETQ"), makeSymbol("ERROR-STRING"), makeSymbol("STRING")), list(RET, makeSymbol("STRING")));

    static private final SubLSymbol $sym1122$OUTER_CATCH_FOR_CYBLACK_ERROR_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ERROR-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_ERROR_EXPRESSION_SET_ERROR_STRING_METHOD = makeSymbol("CYBLACK-ERROR-EXPRESSION-SET-ERROR-STRING-METHOD");

    private static final SubLSymbol GET_ERROR_ARGS = makeSymbol("GET-ERROR-ARGS");

    static private final SubLList $list_alt1125 = list(list(RET, makeSymbol("ERROR-ARGS")));

    private static final SubLSymbol CYBLACK_ERROR_EXPRESSION_GET_ERROR_ARGS_METHOD = makeSymbol("CYBLACK-ERROR-EXPRESSION-GET-ERROR-ARGS-METHOD");

    private static final SubLSymbol SET_ERROR_ARGS = makeSymbol("SET-ERROR-ARGS");

    static private final SubLList $list_alt1128 = list(makeSymbol("NEW-ERROR-ARGS"));

    static private final SubLList $list_alt1129 = list(list(makeSymbol("CYBLACK-MUST"), list(makeSymbol("LISTP"), makeSymbol("NEW-ERROR-ARGS")), makeString("(SET-ERROR-ARGS ~S): ~S is not a list of args."), makeSymbol("SELF"), makeSymbol("NEW-ERROR-ARGS")),
	    list(makeSymbol("CSETQ"), makeSymbol("ERROR-ARGS"), list(makeSymbol("COPY-TREE"), makeSymbol("NEW-ERROR-ARGS"))), list(RET, makeSymbol("NEW-ERROR-ARGS")));

    static private final SubLSymbol $sym1130$OUTER_CATCH_FOR_CYBLACK_ERROR_EXPRESSION_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-ERROR-EXPRESSION-METHOD");

    private static final SubLSymbol CYBLACK_ERROR_EXPRESSION_SET_ERROR_ARGS_METHOD = makeSymbol("CYBLACK-ERROR-EXPRESSION-SET-ERROR-ARGS-METHOD");

    private static final SubLSymbol CYBLACK_HALT_EXPRESSION = makeSymbol("CYBLACK-HALT-EXPRESSION");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_HALT_EXPRESSION_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-HALT-EXPRESSION-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_HALT_EXPRESSION_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-HALT-EXPRESSION-INSTANCE");

    static private final SubLList $list_alt1135 = list(list(makeSymbol("IGNORE"), makeSymbol("DEPTH")), list(makeSymbol("FORMAT"), makeSymbol("STREAM"), makeString("(:HALT)")), list(RET, makeSymbol("SELF")));

    static private final SubLString $str_alt1136$__HALT_ = makeString("(:HALT)");

    private static final SubLSymbol CYBLACK_HALT_EXPRESSION_PRINT_METHOD = makeSymbol("CYBLACK-HALT-EXPRESSION-PRINT-METHOD");

    static private final SubLList $list_alt1138 = list(makeSymbol("FUNCTION"), makeSymbol("OBJECT"));

    static private final SubLString $str_alt1140$___S__S_ = makeString("~%~S[~S]");

    static private final SubLList $list_alt1141 = list(list(makeSymbol("FORCE-OUTPUT"), T));

    static private final SubLString $str_alt1142$PARSE_CYBLACK_DEFKS_EXPRESSION___ = makeString("PARSE-CYBLACK-DEFKS-EXPRESSION: ~S is not a valid define-knowledge-source body.  A list was expected.");

    private static final SubLSymbol $STIMULATION_COND = makeKeyword("STIMULATION-COND");

    private static final SubLSymbol $ON_STARTUP = makeKeyword("ON-STARTUP");

    static private final SubLString $str_alt1145$PARSE_CYBLACK_DEFKS_BODY___S_is_n = makeString("PARSE-CYBLACK-DEFKS-BODY: ~S is not a valid define-knowledge-source-body.");

    static private final SubLString $str_alt1146$PARSE_CYBLACK_DEFKS_BODY__Failed_ = makeString("PARSE-CYBLACK-DEFKS-BODY: Failed to parse stimulation condition ~S.");

    static private final SubLString $str_alt1147$PARSE_CYBLACK_DEFKS_ON_STARTUP_CL = makeString("PARSE-CYBLACK-DEFKS-ON-STARTUP-CLAUSE: ~S is not a valid on-startup expression. ~\n     A list of the form (:ON-STARTUP <posting expression>*) was expected.");

    static private final SubLString $str_alt1148$PARSE_CYBLACK_DEFKS_STIMULATION_C = makeString("PARSE-CYBLACK-DEFKS-STIMULATION-COND: ~S is not a valid stimulation condition expression. ~\n     A list of the form (:STIMULATION-COND <parameter list> <when clause>*) was expected.");

    static private final SubLString $str_alt1149$PARSE_CYBLACK_DEFKS_STIMULATION_C = makeString("PARSE-CYBLACK-DEFKS-STIMULATION-COND-PARAMETER-LIST: A parameter list is expected to be a list of symbols. ~\n     ~S is not a valid parameter list.");

    static private final SubLString $str_alt1150$PARSE_CYBLACK_DEFKS_STIMULATION_C = makeString("PARSE-CYBLACK-DEFKS-STIMULATION-COND-PARAMETER-LIST: A parameter list is expected to be a list ~\n        of non-nil symbols. ~S is not a non-nil symbol");

    static private final SubLString $str_alt1151$_PARSE_CYBLACK_DEFKS_STIMULATION_ = makeString("(PARSE-CYBLACK-DEFKS-STIMULATION-COND-ARG: ~S is not a valid parameter.  A symbol was expected.");

    static private final SubLString $str_alt1152$PARSE_CYBLACK_DEFKS_STIMULATION_C = makeString("PARSE-CYBLACK-DEFKS-STIMULATION-COND-WHEN-CLAUSES: A list of \'when clauses\' was expected.  ~\n     ~S is not a list.");

    static private final SubLString $str_alt1154$PARSE_CYBLACK_DEFKS_STIMULATION_C = makeString("PARSE-CYBLACK-DEFKS-STIMULATION-COND-WHEN-CLAUSE: A when clause must be of the form ~\n     (:WHEN <lisp expression> <on-propose-expression>*). ~\n     ~S is not of this form.");

    static private final SubLString $str_alt1155$PARSE_CYBLACK_WHEN_CLAUSE_ON_PROP = makeString("PARSE-CYBLACK-WHEN-CLAUSE-ON-PROPOSE-BODY: An on-propose-body must be a list.  ~\n     ~S is not a list.");

    static private final SubLString $str_alt1157$PARSE_PROPOSE_EXPRESSION___S_is_n = makeString("PARSE-PROPOSE-EXPRESSION: ~S is not a valid propose expression. ~\n     An expression of the following form was expected: ~\n     (:PROPOSE <datatype list> [:ON-ACCEPT-DO <posting expression>]).");

    private static final SubLSymbol $REASONS = makeKeyword("REASONS");

    private static final SubLSymbol $ON_ACCEPT_DO = makeKeyword("ON-ACCEPT-DO");

    static private final SubLString $str_alt1160$PARSE_DATATYPE_LIST___S_is_not_a_ = makeString("PARSE-DATATYPE-LIST: ~S is not a valid datatype list. ~\n     A list of the form (<string>*) was expected.");

    static private final SubLString $str_alt1161$PARSE_DATATYPE_LIST___S_is_not_a_ = makeString("PARSE-DATATYPE-LIST: ~S is not a valid datatype specification. ~\n         A string was expected.");

    private static final SubLSymbol $UNPOST = makeKeyword("UNPOST");

    private static final SubLSymbol $DEACTIVATE = makeKeyword("DEACTIVATE");

    private static final SubLSymbol $SET_RESULT = makeKeyword("SET-RESULT");

    static private final SubLString $str_alt1170$PARSE_POST_EXPRESSION___S_is_not_ = makeString("PARSE-POST-EXPRESSION: ~S is not a valid post expression");

    private static final SubLSymbol $COMPUTE_CONFIDENCE = makeKeyword("COMPUTE-CONFIDENCE");

    private static final SubLSymbol $IMMUTABLE = makeKeyword("IMMUTABLE");

    static private final SubLString $str_alt1174$PARSE_UNPOST_EXPRESSION___S_is_no = makeString("PARSE-UNPOST-EXPRESSION: ~S is not a valid unpost expression.");

    static private final SubLString $str_alt1175$PARSE_SET_RESULT_EXPRESSION___S_i = makeString("PARSE-SET-RESULT-EXPRESSION: ~S is not a valid set result expression.");

    static private final SubLString $str_alt1176$PARSE_RETURN_EXPRESSION___S_is_no = makeString("PARSE-RETURN-EXPRESSION: ~S is not a valid return expression.");

    static private final SubLString $str_alt1177$PARSE_RESET_ACTION_EXPRESSION___S = makeString("PARSE-RESET-ACTION-EXPRESSION: ~S is not a valid reset expression.");

    static private final SubLString $str_alt1178$PARSE_ERROR_EXPRESSION___S_is_not = makeString("PARSE-ERROR-EXPRESSION: ~S is not a valid error expression.");

    static private final SubLString $str_alt1179$PARSE_HALT_EXPRESSION___S_is_not_ = makeString("PARSE-HALT-EXPRESSION: ~S is not a valid halt expression.");

    private static final SubLSymbol CYBLACK_KS_FACTORY = makeSymbol("CYBLACK-KS-FACTORY");

    public static final SubLObject $list_alt1181 = _constant_1181_initializer();

    private static final SubLSymbol UNPARSED_BODY = makeSymbol("UNPARSED-BODY");

    private static final SubLSymbol PARSER_FUNCTION = makeSymbol("PARSER-FUNCTION");

    private static final SubLSymbol SUPER_PROPOSAL_NAME = makeSymbol("SUPER-PROPOSAL-NAME");

    private static final SubLSymbol SUPER_KS_ROOT_NAME = makeSymbol("SUPER-KS-ROOT-NAME");

    private static final SubLSymbol KS_ROOT_NAME = makeSymbol("KS-ROOT-NAME");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_KS_FACTORY_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-KS-FACTORY-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_KS_FACTORY_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-KS-FACTORY-INSTANCE");

    static private final SubLList $list_alt1199 = list(new SubLObject[] { list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("ASSISTANT"), NIL), list(makeSymbol("CSETQ"), makeSymbol("KS-ROOT-NAME"), NIL), list(makeSymbol("CSETQ"), makeSymbol("KS-NAME"), NIL),
	    list(makeSymbol("CSETQ"), makeSymbol("SUPER-KS-ROOT-NAME"), NIL), list(makeSymbol("CSETQ"), makeSymbol("SUPER-KS-NAME"), NIL), list(makeSymbol("CSETQ"), makeSymbol("PROPOSAL-NAME"), NIL), list(makeSymbol("CSETQ"), makeSymbol("SUPER-PROPOSAL-NAME"), NIL),
	    list(makeSymbol("CSETQ"), makeSymbol("KSI-NAME"), NIL), list(makeSymbol("CSETQ"), makeSymbol("SUPER-KSI-NAME"), NIL), list(makeSymbol("CSETQ"), makeSymbol("INTERFACE-NAMES"), NIL), list(makeSymbol("CSETQ"), makeSymbol("PRECONDITION-PATTERN"), NIL),
	    list(makeSymbol("CSETQ"), makeSymbol("PARSER-FUNCTION"), NIL), list(makeSymbol("CSETQ"), makeSymbol("UNPARSED-BODY"), NIL), list(makeSymbol("CSETQ"), makeSymbol("PARSED-BODY"), NIL), list(makeSymbol("CSETQ"), makeSymbol("EXTERNAL-P"), NIL), list(RET, makeSymbol("SELF")) });

    static private final SubLSymbol $sym1200$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_INITIALIZE_METHOD = makeSymbol("CYBLACK-KS-FACTORY-INITIALIZE-METHOD");

    private static final SubLSymbol GET_ASSISTANT = makeSymbol("GET-ASSISTANT");

    static private final SubLList $list_alt1203 = list(list(RET, makeSymbol("ASSISTANT")));

    static private final SubLSymbol $sym1204$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_ASSISTANT_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-ASSISTANT-METHOD");

    private static final SubLSymbol SET_ASSISTANT = makeSymbol("SET-ASSISTANT");

    static private final SubLList $list_alt1207 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-ASSISTANT")), list(makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-P"), makeSymbol("NEW-ASSISTANT"))),
		    makeString("(SET-ASSISTANT ~S): ~S is not an instance of the class CYBLACK-AUTO-GENERATED-KS-ASSISTANT."), makeSymbol("SELF"), makeSymbol("NEW-ASSISTANT")),
	    list(makeSymbol("CSETQ"), makeSymbol("ASSISTANT"), makeSymbol("NEW-ASSISTANT")), list(RET, makeSymbol("NEW-ASSISTANT")));

    static private final SubLSymbol $sym1208$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLString $str_alt1209$_SET_ASSISTANT__S____S_is_not_an_ = makeString("(SET-ASSISTANT ~S): ~S is not an instance of the class CYBLACK-AUTO-GENERATED-KS-ASSISTANT.");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_ASSISTANT_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-ASSISTANT-METHOD");

    private static final SubLSymbol GET_UNIFIER_CLASS = makeSymbol("GET-UNIFIER-CLASS");

    static private final SubLList $list_alt1212 = list(
	    list(makeSymbol("PWHEN"), makeSymbol("ASSISTANT"),
		    list(RET, list(makeSymbol("CYBLACK-UNIFIER-CLASS-GIVEN-DESCRIPTION"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-UNIFICATION-TYPES"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("ASSISTANT"))))),
	    list(RET, list(QUOTE, makeSymbol("CYBLACK-UNIFICATION-ROBOT"))));

    static private final SubLSymbol $sym1213$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_UNIFIER_CLASS_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-UNIFIER-CLASS-METHOD");

    static private final SubLList $list_alt1215 = list(list(makeSymbol("PWHEN"), makeSymbol("ASSISTANT"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-POST-AT-WILL"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("ASSISTANT")))),
	    list(RET, NIL));

    static private final SubLSymbol $sym1216$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_POST_AT_WILL_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-POST-AT-WILL-METHOD");

    static private final SubLList $list_alt1218 = list(
	    list(makeSymbol("PWHEN"), makeSymbol("ASSISTANT"), list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-POST-AT-WILL"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("ASSISTANT"), makeSymbol("NEW-STATE")))), list(RET, NIL));

    static private final SubLSymbol $sym1219$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_POST_AT_WILL_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-POST-AT-WILL-METHOD");

    private static final SubLSymbol GET_KS_ROOT_NAME = makeSymbol("GET-KS-ROOT-NAME");

    static private final SubLList $list_alt1222 = list(list(RET, makeSymbol("KS-ROOT-NAME")));

    static private final SubLSymbol $sym1223$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_KS_ROOT_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-KS-ROOT-NAME-METHOD");

    private static final SubLSymbol SET_KS_ROOT_NAME = makeSymbol("SET-KS-ROOT-NAME");

    static private final SubLList $list_alt1226 = list(makeSymbol("NEW-KS-ROOT-NAME"));

    static private final SubLList $list_alt1227 = list(list(makeSymbol("MUST"), list(makeSymbol("SYMBOLP"), makeSymbol("NEW-KS-ROOT-NAME")), makeString("(SET-KS-ROOT-NAME ~S): ~S is not a valid KS root name.  A symbol was expected."), makeSymbol("NEW-KS-ROOT-NAME")),
	    list(makeSymbol("CSETQ"), makeSymbol("KS-ROOT-NAME"), makeSymbol("NEW-KS-ROOT-NAME")),
	    list(makeSymbol("PWHEN"), makeSymbol("NEW-KS-ROOT-NAME"), list(makeSymbol("CSETQ"), makeSymbol("KS-NAME"), list(makeSymbol("INTERN"), list(makeSymbol("FORMAT-TO-STRING"), makeKeyword("S"), makeSymbol("NEW-KS-ROOT-NAME"), makeKeyword("A"), makeString("-KS")))),
		    list(makeSymbol("CSETQ"), makeSymbol("PROPOSAL-NAME"), list(makeSymbol("INTERN"), list(makeSymbol("FORMAT-TO-STRING"), makeKeyword("S"), makeSymbol("NEW-KS-ROOT-NAME"), makeKeyword("A"), makeString("-PROPOSAL")))),
		    list(makeSymbol("CSETQ"), makeSymbol("KSI-NAME"), list(makeSymbol("INTERN"), list(makeSymbol("FORMAT-TO-STRING"), makeKeyword("S"), makeSymbol("NEW-KS-ROOT-NAME"), makeKeyword("A"), makeString("-KSI"))))),
	    list(RET, makeSymbol("NEW-KS-ROOT-NAME")));

    static private final SubLSymbol $sym1228$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLString $str_alt1229$_SET_KS_ROOT_NAME__S____S_is_not_ = makeString("(SET-KS-ROOT-NAME ~S): ~S is not a valid KS root name.  A symbol was expected.");

    static private final SubLString $str_alt1230$_KS = makeString("-KS");

    static private final SubLString $str_alt1231$_PROPOSAL = makeString("-PROPOSAL");

    static private final SubLString $str_alt1232$_KSI = makeString("-KSI");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_KS_ROOT_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-KS-ROOT-NAME-METHOD");

    private static final SubLSymbol GET_KS_NAME = makeSymbol("GET-KS-NAME");

    static private final SubLList $list_alt1235 = list(list(RET, makeSymbol("KS-NAME")));

    static private final SubLSymbol $sym1236$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_KS_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-KS-NAME-METHOD");

    private static final SubLSymbol SET_KS_NAME = makeSymbol("SET-KS-NAME");

    static private final SubLList $list_alt1239 = list(makeSymbol("NEW-KS-NAME"));

    static private final SubLList $list_alt1240 = list(list(makeSymbol("MUST"), list(makeSymbol("SYMBOLP"), makeSymbol("NEW-KS-NAME")), makeString("(SET-KS-NAME ~S): ~S is not a valid KS name.  A symbol was expected."), makeSymbol("SELF"), makeSymbol("NEW-KS-NAME")),
	    list(makeSymbol("CSETQ"), makeSymbol("KS-NAME"), makeSymbol("NEW-KS-NAME")), list(RET, makeSymbol("NEW-KS-NAME")));

    static private final SubLSymbol $sym1241$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLString $str_alt1242$_SET_KS_NAME__S____S_is_not_a_val = makeString("(SET-KS-NAME ~S): ~S is not a valid KS name.  A symbol was expected.");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_KS_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-KS-NAME-METHOD");

    private static final SubLSymbol GET_SUPER_KS_ROOT_NAME = makeSymbol("GET-SUPER-KS-ROOT-NAME");

    static private final SubLList $list_alt1245 = list(list(RET, makeSymbol("SUPER-KS-ROOT-NAME")));

    static private final SubLSymbol $sym1246$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_SUPER_KS_ROOT_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-SUPER-KS-ROOT-NAME-METHOD");

    private static final SubLSymbol SET_SUPER_KS_ROOT_NAME = makeSymbol("SET-SUPER-KS-ROOT-NAME");

    static private final SubLList $list_alt1249 = list(makeSymbol("NEW-SUPER-KS-ROOT-NAME"));

    static private final SubLList $list_alt1250 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("SYMBOLP"), makeSymbol("NEW-SUPER-KS-ROOT-NAME")), makeString("(SET-SUPER-KS-ROOT-NAME ~S): ~S is not a valid KS root name.  A symbol was expected."), makeSymbol("SELF"), makeSymbol("NEW-SUPER-KS-ROOT-NAME")),
	    list(makeSymbol("CSETQ"), makeSymbol("SUPER-KS-ROOT-NAME"), makeSymbol("NEW-SUPER-KS-ROOT-NAME")),
	    list(makeSymbol("PWHEN"), makeSymbol("NEW-SUPER-KS-ROOT-NAME"), list(makeSymbol("CSETQ"), makeSymbol("SUPER-KS-NAME"), list(makeSymbol("INTERN"), list(makeSymbol("FORMAT-TO-STRING"), makeKeyword("S"), makeSymbol("NEW-SUPER-KS-ROOT-NAME"), makeKeyword("A"), makeString("-KS")))),
		    list(makeSymbol("CSETQ"), makeSymbol("SUPER-PROPOSAL-NAME"), list(makeSymbol("INTERN"), list(makeSymbol("FORMAT-TO-STRING"), makeKeyword("S"), makeSymbol("NEW-SUPER-KS-ROOT-NAME"), makeKeyword("A"), makeString("-PROPOSAL")))),
		    list(makeSymbol("CSETQ"), makeSymbol("SUPER-KSI-NAME"), list(makeSymbol("INTERN"), list(makeSymbol("FORMAT-TO-STRING"), makeKeyword("S"), makeSymbol("NEW-SUPER-KS-ROOT-NAME"), makeKeyword("A"), makeString("-KSI"))))),
	    list(RET, makeSymbol("NEW-SUPER-KS-ROOT-NAME")));

    static private final SubLSymbol $sym1251$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLString $str_alt1252$_SET_SUPER_KS_ROOT_NAME__S____S_i = makeString("(SET-SUPER-KS-ROOT-NAME ~S): ~S is not a valid KS root name.  A symbol was expected.");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_SUPER_KS_ROOT_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-SUPER-KS-ROOT-NAME-METHOD");

    private static final SubLSymbol GET_SUPER_KS_NAME = makeSymbol("GET-SUPER-KS-NAME");

    static private final SubLList $list_alt1255 = list(list(RET, makeSymbol("SUPER-KS-NAME")));

    static private final SubLSymbol $sym1256$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_SUPER_KS_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-SUPER-KS-NAME-METHOD");

    private static final SubLSymbol SET_SUPER_KS_NAME = makeSymbol("SET-SUPER-KS-NAME");

    static private final SubLList $list_alt1259 = list(makeSymbol("NEW-SUPER-KS-NAME"));

    static private final SubLList $list_alt1260 = list(list(makeSymbol("MUST"), list(makeSymbol("SYMBOLP"), makeSymbol("NEW-SUPER-KS-NAME")), makeString("(SET-SUPER-KS-NAME ~S): ~S is not a valid KS name.  A symbol was expected."), makeSymbol("SELF"), makeSymbol("NEW-SUPER-KS-NAME")),
	    list(makeSymbol("CSETQ"), makeSymbol("SUPER-KS-NAME"), makeSymbol("NEW-SUPER-KS-NAME")), list(RET, makeSymbol("NEW-SUPER-KS-NAME")));

    static private final SubLSymbol $sym1261$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLString $str_alt1262$_SET_SUPER_KS_NAME__S____S_is_not = makeString("(SET-SUPER-KS-NAME ~S): ~S is not a valid KS name.  A symbol was expected.");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_SUPER_KS_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-SUPER-KS-NAME-METHOD");

    private static final SubLSymbol GET_PROPOSAL_NAME = makeSymbol("GET-PROPOSAL-NAME");

    static private final SubLList $list_alt1265 = list(list(RET, makeSymbol("PROPOSAL-NAME")));

    static private final SubLSymbol $sym1266$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_PROPOSAL_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-PROPOSAL-NAME-METHOD");

    private static final SubLSymbol SET_PROPOSAL_NAME = makeSymbol("SET-PROPOSAL-NAME");

    static private final SubLList $list_alt1269 = list(makeSymbol("NEW-PROPOSAL-NAME"));

    static private final SubLList $list_alt1270 = list(list(makeSymbol("MUST"), list(makeSymbol("SYMBOLP"), makeSymbol("NEW-PROPOSAL-NAME")), makeString("(SET-PROPOSAL-NAME ~S): ~S is not a valid proposal class name.  A symbol was expected."), makeSymbol("SELF"), makeSymbol("NEW-PROPOSAL-NAME")),
	    list(makeSymbol("CSETQ"), makeSymbol("PROPOSAL-NAME"), makeSymbol("NEW-PROPOSAL-NAME")), list(RET, makeSymbol("NEW-PROPOSAL-NAME")));

    static private final SubLSymbol $sym1271$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLString $str_alt1272$_SET_PROPOSAL_NAME__S____S_is_not = makeString("(SET-PROPOSAL-NAME ~S): ~S is not a valid proposal class name.  A symbol was expected.");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_PROPOSAL_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-PROPOSAL-NAME-METHOD");

    private static final SubLSymbol GET_SUPER_PROPOSAL_NAME = makeSymbol("GET-SUPER-PROPOSAL-NAME");

    static private final SubLList $list_alt1275 = list(list(RET, makeSymbol("SUPER-PROPOSAL-NAME")));

    static private final SubLSymbol $sym1276$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_SUPER_PROPOSAL_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-SUPER-PROPOSAL-NAME-METHOD");

    private static final SubLSymbol SET_SUPER_PROPOSAL_NAME = makeSymbol("SET-SUPER-PROPOSAL-NAME");

    static private final SubLList $list_alt1279 = list(makeSymbol("NEW-SUPER-PROPOSAL-NAME"));

    static private final SubLList $list_alt1280 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("SYMBOLP"), makeSymbol("NEW-SUPER-PROPOSAL-NAME")), makeString("(SET-SUPER-PROPOSAL-NAME ~S): ~S is not a valid proposal class name.  A symbol was expected."), makeSymbol("SELF"), makeSymbol("NEW-SUPER-PROPOSAL-NAME")),
	    list(makeSymbol("CSETQ"), makeSymbol("SUPER-PROPOSAL-NAME"), makeSymbol("NEW-SUPER-PROPOSAL-NAME")), list(RET, makeSymbol("NEW-SUPER-PROPOSAL-NAME")));

    static private final SubLSymbol $sym1281$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLString $str_alt1282$_SET_SUPER_PROPOSAL_NAME__S____S_ = makeString("(SET-SUPER-PROPOSAL-NAME ~S): ~S is not a valid proposal class name.  A symbol was expected.");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_SUPER_PROPOSAL_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-SUPER-PROPOSAL-NAME-METHOD");

    private static final SubLSymbol GET_KSI_NAME = makeSymbol("GET-KSI-NAME");

    static private final SubLList $list_alt1285 = list(list(RET, makeSymbol("KSI-NAME")));

    static private final SubLSymbol $sym1286$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_KSI_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-KSI-NAME-METHOD");

    private static final SubLSymbol SET_KSI_NAME = makeSymbol("SET-KSI-NAME");

    static private final SubLList $list_alt1289 = list(makeSymbol("NEW-KSI-NAME"));

    static private final SubLList $list_alt1290 = list(list(makeSymbol("MUST"), list(makeSymbol("SYMBOLP"), makeSymbol("NEW-KSI-NAME")), makeString("(SET-KSI-NAME ~S): ~S is not a valid KSI class name.  A symbol was expected."), makeSymbol("NEW-KSI-NAME")),
	    list(makeSymbol("CSETQ"), makeSymbol("KSI-NAME"), makeSymbol("NEW-KSI-NAME")), list(RET, makeSymbol("NEW-KSI-NAME")));

    static private final SubLSymbol $sym1291$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLString $str_alt1292$_SET_KSI_NAME__S____S_is_not_a_va = makeString("(SET-KSI-NAME ~S): ~S is not a valid KSI class name.  A symbol was expected.");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_KSI_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-KSI-NAME-METHOD");

    private static final SubLSymbol GET_SUPER_KSI_NAME = makeSymbol("GET-SUPER-KSI-NAME");

    static private final SubLList $list_alt1295 = list(list(RET, makeSymbol("SUPER-KSI-NAME")));

    static private final SubLSymbol $sym1296$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_SUPER_KSI_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-SUPER-KSI-NAME-METHOD");

    private static final SubLSymbol SET_SUPER_KSI_NAME = makeSymbol("SET-SUPER-KSI-NAME");

    static private final SubLList $list_alt1299 = list(makeSymbol("NEW-SUPER-KSI-NAME"));

    static private final SubLList $list_alt1300 = list(list(makeSymbol("MUST"), list(makeSymbol("SYMBOLP"), makeSymbol("NEW-SUPER-KSI-NAME")), makeString("(SET-SUPER-KSI-NAME ~S): ~S is not a valid KSI class name.  A symbol was expected."), makeSymbol("SELF"), makeSymbol("NEW-SUPER-KSI-NAME")),
	    list(makeSymbol("CSETQ"), makeSymbol("SUPER-KSI-NAME"), makeSymbol("NEW-SUPER-KSI-NAME")), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym1301$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLString $str_alt1302$_SET_SUPER_KSI_NAME__S____S_is_no = makeString("(SET-SUPER-KSI-NAME ~S): ~S is not a valid KSI class name.  A symbol was expected.");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_SUPER_KSI_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-SUPER-KSI-NAME-METHOD");

    private static final SubLSymbol GET_INTERFACE_NAMES = makeSymbol("GET-INTERFACE-NAMES");

    static private final SubLList $list_alt1305 = list(list(RET, makeSymbol("INTERFACE-NAMES")));

    static private final SubLSymbol $sym1306$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_INTERFACE_NAMES_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-INTERFACE-NAMES-METHOD");

    private static final SubLSymbol SET_INTERFACE_NAMES = makeSymbol("SET-INTERFACE-NAMES");

    static private final SubLList $list_alt1309 = list(makeSymbol("NEW-INTERFACE-NAMES"));

    static private final SubLList $list_alt1310 = list(list(makeSymbol("MUST"), list(makeSymbol("LISTP"), makeSymbol("NEW-INTERFACE-NAMES")), makeString("(SET-INTERFACE-NAMES ~S): ~S is not a valid list."), makeSymbol("SELF"), makeSymbol("NEW-INTERFACE-NAMES")),
	    list(makeSymbol("CDOLIST"), list(makeSymbol("INTERFACE-NAME"), makeSymbol("NEW-INTERFACE-NAMES")), list(makeSymbol("MUST"), list(makeSymbol("CAND"), makeSymbol("INTERFACE-NAME"), list(makeSymbol("SYMBOLP"), makeSymbol("INTERFACE-NAME"))),
		    makeString("(SET-INTERFACE-NAMES ~S): ~S is not a valid interface name.  A non-nil symbol was expected."), makeSymbol("SELF"), makeSymbol("INTERFACE-NAME"))),
	    list(makeSymbol("CSETQ"), makeSymbol("INTERFACE-NAMES"), list(makeSymbol("COPY-LIST"), makeSymbol("NEW-INTERFACE-NAMES"))), list(RET, makeSymbol("NEW-INTERFACE-NAMES")));

    static private final SubLSymbol $sym1311$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLString $str_alt1312$_SET_INTERFACE_NAMES__S____S_is_n = makeString("(SET-INTERFACE-NAMES ~S): ~S is not a valid list.");

    static private final SubLString $str_alt1313$_SET_INTERFACE_NAMES__S____S_is_n = makeString("(SET-INTERFACE-NAMES ~S): ~S is not a valid interface name.  A non-nil symbol was expected.");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_INTERFACE_NAMES_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-INTERFACE-NAMES-METHOD");

    static private final SubLSymbol $sym1315$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_PRECONDITION_PATTERN_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-PRECONDITION-PATTERN-METHOD");

    static private final SubLList $list_alt1317 = list(
	    list(makeSymbol("MUST"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("NEW-PRECONDITION-PATTERN")),
			    list(makeSymbol("COR"), list(EQ, list(makeSymbol("CAR"), makeSymbol("NEW-PRECONDITION-PATTERN")), makeKeyword("KS-ARGS")), list(EQ, list(makeSymbol("CAR"), makeSymbol("NEW-PRECONDITION-PATTERN")), makeKeyword("MONITOR")))),
		    makeString("(SET-PRECONDITION-PATTERN ~S): ~S is not a valid precondition pattern."), makeSymbol("SELF"), makeSymbol("NEW-PRECONDITION-PATTERN")),
	    list(makeSymbol("CSETQ"), makeSymbol("PRECONDITION-PATTERN"), makeSymbol("NEW-PRECONDITION-PATTERN")), list(RET, makeSymbol("NEW-PRECONDITION-PATTERN")));

    static private final SubLSymbol $sym1318$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol $KS_ARGS = makeKeyword("KS-ARGS");

    private static final SubLSymbol $MONITOR = makeKeyword("MONITOR");

    static private final SubLString $str_alt1321$_SET_PRECONDITION_PATTERN__S____S = makeString("(SET-PRECONDITION-PATTERN ~S): ~S is not a valid precondition pattern.");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_PRECONDITION_PATTERN_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-PRECONDITION-PATTERN-METHOD");

    private static final SubLSymbol GET_PRECONDITION_PATTERN_VARS = makeSymbol("GET-PRECONDITION-PATTERN-VARS");

    static private final SubLList $list_alt1324 = list(list(RET, list(makeSymbol("CYBLACK-GET-PARAMETERS"), makeSymbol("PRECONDITION-PATTERN"))));

    static private final SubLSymbol $sym1325$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_PRECONDITION_PATTERN_VARS_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-PRECONDITION-PATTERN-VARS-METHOD");

    private static final SubLSymbol GET_PARSER_FUNCTION = makeSymbol("GET-PARSER-FUNCTION");

    static private final SubLList $list_alt1328 = list(list(RET, makeSymbol("PARSER-FUNCTION")));

    static private final SubLSymbol $sym1329$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_PARSER_FUNCTION_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-PARSER-FUNCTION-METHOD");

    private static final SubLSymbol SET_PARSER_FUNCTION = makeSymbol("SET-PARSER-FUNCTION");

    static private final SubLList $list_alt1332 = list(makeSymbol("NEW-PARSER-FUNCTION"));

    static private final SubLList $list_alt1333 = list(list(makeSymbol("MUST"), list(makeSymbol("SYMBOLP"), makeSymbol("NEW-PARSER-FUNCTION")), makeString("(SET-PARSER-FUNCTION ~S): A parser function must be a non-nil symbol.  ~S is invalid."), makeSymbol("SELF"), makeSymbol("NEW-PARSER-FUNCTION")),
	    list(makeSymbol("CSETQ"), makeSymbol("PARSER-FUNCTION"), makeSymbol("NEW-PARSER-FUNCTION")), list(RET, makeSymbol("NEW-PARSER-FUNCTION")));

    static private final SubLSymbol $sym1334$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLString $str_alt1335$_SET_PARSER_FUNCTION__S___A_parse = makeString("(SET-PARSER-FUNCTION ~S): A parser function must be a non-nil symbol.  ~S is invalid.");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_PARSER_FUNCTION_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-PARSER-FUNCTION-METHOD");

    private static final SubLSymbol GET_UNPARSED_BODY = makeSymbol("GET-UNPARSED-BODY");

    static private final SubLList $list_alt1338 = list(list(RET, makeSymbol("UNPARSED-BODY")));

    static private final SubLSymbol $sym1339$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_UNPARSED_BODY_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-UNPARSED-BODY-METHOD");

    private static final SubLSymbol SET_UNPARSED_BODY = makeSymbol("SET-UNPARSED-BODY");

    static private final SubLList $list_alt1342 = list(makeSymbol("NEW-UNPARSED-BODY"));

    static private final SubLList $list_alt1343 = list(list(makeSymbol("CSETQ"), makeSymbol("UNPARSED-BODY"), makeSymbol("NEW-UNPARSED-BODY")), list(makeSymbol("SET-PARSED-BODY"), makeSymbol("SELF"), list(makeSymbol("PARSE-CYBLACK-DEFKS-BODY"), makeSymbol("NEW-UNPARSED-BODY"))),
	    list(RET, makeSymbol("NEW-UNPARSED-BODY")));

    static private final SubLSymbol $sym1344$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_UNPARSED_BODY_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-UNPARSED-BODY-METHOD");

    private static final SubLSymbol GET_PARSED_BODY = makeSymbol("GET-PARSED-BODY");

    static private final SubLList $list_alt1347 = list(list(RET, makeSymbol("PARSED-BODY")));

    static private final SubLSymbol $sym1348$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_PARSED_BODY_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-PARSED-BODY-METHOD");

    private static final SubLSymbol SET_PARSED_BODY = makeSymbol("SET-PARSED-BODY");

    static private final SubLList $list_alt1351 = list(makeSymbol("NEW-PARSED-BODY"));

    static private final SubLList $list_alt1352 = list(list(makeSymbol("MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-PARSED-BODY")), list(makeSymbol("CYBLACK-DEFKS-BODY-P"), makeSymbol("NEW-PARSED-BODY"))),
	    makeString("(SET-PARSED-BODY ~S): ~S is not an instance of CYBLACK-DEFKS-BODY."), makeSymbol("SELF"), makeSymbol("NEW-PARSED-BODY")), list(makeSymbol("CSETQ"), makeSymbol("PARSED-BODY"), makeSymbol("NEW-PARSED-BODY")), list(RET, makeSymbol("NEW-PARSED-BODY")));

    static private final SubLSymbol $sym1353$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLString $str_alt1354$_SET_PARSED_BODY__S____S_is_not_a = makeString("(SET-PARSED-BODY ~S): ~S is not an instance of CYBLACK-DEFKS-BODY.");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_PARSED_BODY_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-PARSED-BODY-METHOD");

    private static final SubLSymbol GET_KS_DECLARATION = makeSymbol("GET-KS-DECLARATION");

    static private final SubLList $list_alt1357 = list(list(makeSymbol("PIF"), makeSymbol("EXTERNAL-P"),
	    list(RET,
		    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("DEFINE-CLASS")), list(makeSymbol("BQ-LIST"), makeSymbol("KS-NAME"), makeKeyword("EXTENDS"), makeSymbol("SUPER-KS-NAME"), makeKeyword("IMPLEMENTS"), list(makeSymbol("COPY-LIST"), makeSymbol("INTERFACE-NAMES"))),
			    list(makeSymbol("BQ-APPEND"),
				    list(makeSymbol("UNION"),
					    list(QUOTE,
						    list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("ON-STARTUP"), NIL, makeKeyword("PUBLIC")),
							    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-KSI"), list(makeSymbol("PROPOSAL")), makeKeyword("PUBLIC")))),
					    makeSymbol("ADDED-DECLARATIONS-FOR-KS-CLASS"), list(makeSymbol("FUNCTION"), EQUAL)),
				    NIL))),
	    list(RET,
		    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("DEFINE-CLASS")), list(makeSymbol("BQ-LIST"), makeSymbol("KS-NAME"), makeKeyword("EXTENDS"), makeSymbol("SUPER-KS-NAME"), makeKeyword("IMPLEMENTS"), list(makeSymbol("COPY-LIST"), makeSymbol("INTERFACE-NAMES"))),
			    list(makeSymbol("BQ-APPEND"),
				    list(makeSymbol("UNION"),
					    list(QUOTE,
						    list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("ON-STARTUP"), NIL, makeKeyword("PUBLIC")),
							    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CREATE-PROPOSALS"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), NIL)), makeKeyword("PUBLIC")),
							    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-KSI"), list(makeSymbol("PROPOSAL")), makeKeyword("PUBLIC")))),
					    makeSymbol("ADDED-DECLARATIONS-FOR-KS-CLASS"), list(makeSymbol("FUNCTION"), EQUAL)),
				    NIL)))));

    static private final SubLSymbol $sym1358$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLList $list_alt1362 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("ON-STARTUP"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-KSI"), list(makeSymbol("PROPOSAL")), makeKeyword("PUBLIC")));

    static private final SubLList $list_alt1363 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("ON-STARTUP"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CREATE-PROPOSALS"), list(makeSymbol("&OPTIONAL"), list(makeSymbol("ENVIRONMENT"), NIL)), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-KSI"), list(makeSymbol("PROPOSAL")), makeKeyword("PUBLIC")));

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_KS_DECLARATION_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-KS-DECLARATION-METHOD");

    private static final SubLSymbol GET_KS_INITIALIZE_DEFINITION = makeSymbol("GET-KS-INITIALIZE-DEFINITION");

    static private final SubLList $list_alt1366 = list(list(makeSymbol("CLET"), list(list(makeSymbol("RESULT"), list(new SubLObject[] { makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("DEF-INSTANCE-METHOD")),
	    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("INITIALIZE")), makeSymbol("KS-NAME"), list(QUOTE, list(makeKeyword("NO-MEMBER-VARIABLES"), makeKeyword("PROTECTED")))), NIL, list(QUOTE, list(makeSymbol("INITIALIZE"), makeSymbol("SUPER"))),
	    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("SET-POST-AT-WILL")), list(QUOTE, makeSymbol("SELF")), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-POST-AT-WILL"), makeSymbol("GET-KS-INITIALIZE-DEFINITION")), makeSymbol("SELF"))),
	    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("SET-UNIFICATION-ROBOT-CLASS")), list(QUOTE, makeSymbol("SELF")),
		    list(makeSymbol("BQ-LIST"), list(QUOTE, QUOTE), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-UNIFIER-CLASS"), makeSymbol("GET-KS-INITIALIZE-DEFINITION")), makeSymbol("SELF")))),
	    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("SET-PRECONDITION-PATTERN")), list(QUOTE, makeSymbol("SELF")), list(makeSymbol("BQ-LIST"), list(QUOTE, QUOTE), list(makeSymbol("COPY-TREE"), makeSymbol("PRECONDITION-PATTERN")))),
	    list(QUOTE, list(list(RET, makeSymbol("SELF")))) }))), list(RET, makeSymbol("RESULT"))));

    static private final SubLSymbol $sym1367$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLList $list_alt1368 = list(makeSymbol("INITIALIZE"), makeSymbol("SUPER"));

    static private final SubLList $list_alt1369 = list(list(RET, makeSymbol("SELF")));

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_KS_INITIALIZE_DEFINITION_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-KS-INITIALIZE-DEFINITION-METHOD");

    private static final SubLSymbol GET_KS_ON_STARTUP_DEFINITION = makeSymbol("GET-KS-ON-STARTUP-DEFINITION");

    static private final SubLList $list_alt1372 = list(list(makeSymbol("PWHEN"), list(makeSymbol("CAND"), makeSymbol("PARSED-BODY"), makeSymbol("ASSISTANT")),
	    list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("COMPILE-TO-ON-STARTUP-METHOD"), makeSymbol("CYBLACK-DEFKS-BODY")), makeSymbol("PARSED-BODY"), makeSymbol("ASSISTANT")))), list(RET, NIL));

    static private final SubLSymbol $sym1373$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_KS_ON_STARTUP_DEFINITION_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-KS-ON-STARTUP-DEFINITION-METHOD");

    private static final SubLSymbol GET_KS_CREATE_PROPOSALS_DEFINITION = makeSymbol("GET-KS-CREATE-PROPOSALS-DEFINITION");

    static private final SubLList $list_alt1376 = list(list(makeSymbol("PWHEN"), list(makeSymbol("CAND"), makeSymbol("PARSED-BODY"), makeSymbol("ASSISTANT")),
	    list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("COMPILE-TO-CREATE-PROPOSALS-METHOD"), makeSymbol("CYBLACK-DEFKS-BODY")), makeSymbol("PARSED-BODY"), makeSymbol("ASSISTANT")))), list(RET, NIL));

    static private final SubLSymbol $sym1377$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_KS_CREATE_PROPOSALS_DEFINITION_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-KS-CREATE-PROPOSALS-DEFINITION-METHOD");

    private static final SubLSymbol GET_KS_GENERATE_KSI_DEFINITION = makeSymbol("GET-KS-GENERATE-KSI-DEFINITION");

    static private final SubLList $list_alt1380 = list(list(makeSymbol("PIF"), makeSymbol("EXTERNAL-P"), list(RET, list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("DEF-INSTANCE-METHOD")),
	    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("GENERATE-KSI")), makeSymbol("KS-NAME"), list(QUOTE, list(makeKeyword("NO-MEMBER-VARIABLES"), makeKeyword("PUBLIC")))), list(QUOTE, list(makeSymbol("PROPOSAL"))),
	    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("CLET")),
		    list(makeSymbol("BQ-LIST"),
			    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("KSI")), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("NEW-CLASS-INSTANCE")), list(makeSymbol("BQ-LIST"), list(QUOTE, QUOTE), makeSymbol("KSI-NAME"))))),
		    list(QUOTE,
			    list(list(makeSymbol("LINK-KSI"), makeSymbol("SELF"), makeSymbol("KSI")), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-PROPOSAL"), makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI")), makeSymbol("KSI"), makeSymbol("PROPOSAL")),
				    list(RET, makeSymbol("KSI"))))))),
	    list(RET, list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("DEF-INSTANCE-METHOD")),
		    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("GENERATE-KSI")), makeSymbol("KS-NAME"), list(QUOTE, list(makeKeyword("NO-MEMBER-VARIABLES"), makeKeyword("PUBLIC")))), list(QUOTE, list(makeSymbol("PROPOSAL"))),
		    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("CLET")),
			    list(makeSymbol("BQ-LIST"),
				    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("KSI")),
					    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("NEW-CLASS-INSTANCE")), list(makeSymbol("BQ-LIST"), list(QUOTE, QUOTE), makeSymbol("KSI-NAME"))))),
			    list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("INLINE-METHOD")), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("SET-KSI-INDEX")), makeSymbol("KSI-NAME")), list(QUOTE, makeSymbol("KSI")),
				    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("INLINE-METHOD")), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("GET-PROPOSAL-INDEX")), makeSymbol("PROPOSAL-NAME")), list(QUOTE, list(makeSymbol("PROPOSAL"))))),
			    list(QUOTE, list(list(makeSymbol("LINK-KSI"), makeSymbol("SELF"), makeSymbol("KSI")), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-PROPOSAL"), makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI")), makeSymbol("KSI"), makeSymbol("PROPOSAL")),
				    list(RET, makeSymbol("KSI")))))))));

    static private final SubLSymbol $sym1381$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLList $list_alt1384 = list(list(makeSymbol("LINK-KSI"), makeSymbol("SELF"), makeSymbol("KSI")), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-PROPOSAL"), makeSymbol("CYBLACK-AUTO-GENERATED-INTERNAL-KSI")), makeSymbol("KSI"), makeSymbol("PROPOSAL")),
	    list(RET, makeSymbol("KSI")));

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_KS_GENERATE_KSI_DEFINITION_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-KS-GENERATE-KSI-DEFINITION-METHOD");

    private static final SubLSymbol GET_KS_METHOD_DEFINITIONS = makeSymbol("GET-KS-METHOD-DEFINITIONS");

    static private final SubLList $list_alt1387 = list(list(RET,
	    list(makeSymbol("APPEND"), list(makeSymbol("FIF"), list(makeSymbol("HAS-ADDED-DECLARATION-FOR-METHOD-P"), makeSymbol("SELF"), list(QUOTE, makeSymbol("INITIALIZE"))), NIL, list(makeSymbol("LIST"), list(makeSymbol("GET-KS-INITIALIZE-DEFINITION"), makeSymbol("SELF")))),
		    list(makeSymbol("FIF"), list(makeSymbol("HAS-ADDED-DECLARATION-FOR-METHOD-P"), makeSymbol("SELF"), list(QUOTE, makeSymbol("ON-STARTUP"))), NIL, list(makeSymbol("LIST"), list(makeSymbol("GET-KS-ON-STARTUP-DEFINITION"), makeSymbol("SELF")))),
		    list(makeSymbol("FIF"), list(makeSymbol("HAS-ADDED-DECLARATION-FOR-METHOD-P"), makeSymbol("SELF"), list(QUOTE, makeSymbol("CREATE-PROPOSALS"))), NIL, list(makeSymbol("LIST"), list(makeSymbol("GET-KS-CREATE-PROPOSALS-DEFINITION"), makeSymbol("SELF")))),
		    list(makeSymbol("FIF"), list(makeSymbol("HAS-ADDED-DECLARATION-FOR-METHOD-P"), makeSymbol("SELF"), list(QUOTE, makeSymbol("GENERATE-KSI"))), NIL, list(makeSymbol("LIST"), list(makeSymbol("GET-KS-GENERATE-KSI-DEFINITION"), makeSymbol("SELF")))))));

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_KS_METHOD_DEFINITIONS_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-KS-METHOD-DEFINITIONS-METHOD");

    private static final SubLSymbol GET_PROPOSAL_DECLARATION = makeSymbol("GET-PROPOSAL-DECLARATION");

    static private final SubLList $list_alt1390 = list(list(RET, list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("DEFINE-CLASS")), list(makeSymbol("BQ-LIST"), makeSymbol("PROPOSAL-NAME"), makeKeyword("EXTENDS"), makeSymbol("SUPER-PROPOSAL-NAME")),
	    list(QUOTE, list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-KSI"), NIL, makeKeyword("PUBLIC")))))));

    static private final SubLSymbol $sym1391$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLList $list_alt1392 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-KSI"), NIL, makeKeyword("PUBLIC")));

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_PROPOSAL_DECLARATION_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-PROPOSAL-DECLARATION-METHOD");

    private static final SubLSymbol GET_PROPOSAL_INITIALIZE_DEFINITION = makeSymbol("GET-PROPOSAL-INITIALIZE-DEFINITION");

    static private final SubLList $list_alt1395 = list(
	    list(RET, list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("DEF-INSTANCE-METHOD")), list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("INITIALIZE")), makeSymbol("PROPOSAL-NAME"), list(QUOTE, list(makeKeyword("PROTECTED")))),
		    list(QUOTE, list(NIL, list(RET, list(makeSymbol("INITIALIZE"), makeSymbol("SUPER"))))))));

    static private final SubLSymbol $sym1396$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLList $list_alt1397 = list(NIL, list(RET, list(makeSymbol("INITIALIZE"), makeSymbol("SUPER"))));

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_PROPOSAL_INITIALIZE_DEFINITION_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-PROPOSAL-INITIALIZE-DEFINITION-METHOD");

    private static final SubLSymbol GET_PROPOSAL_GENERATE_KSI_DEFINITION = makeSymbol("GET-PROPOSAL-GENERATE-KSI-DEFINITION");

    static private final SubLList $list_alt1400 = list(list(makeSymbol("CYBLACK-SILENCE"), makeSymbol("PROPOSAL-NAME")),
	    list(RET,
		    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("DEF-INSTANCE-METHOD")), list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("GENERATE-KSI")), makeSymbol("PROPOSAL-NAME"), list(QUOTE, list(makeKeyword("PUBLIC")))),
			    list(QUOTE,
				    list(NIL,
					    list(makeSymbol("CLET"), list(list(makeSymbol("GENERATED-KSI"), list(makeSymbol("GENERATE-KSI"), makeSymbol("SUPER")))),
						    list(makeSymbol("PWHEN"), makeSymbol("GENERATED-KSI"), list(makeSymbol("SET-SLOT"), makeSymbol("GENERATED-KSI"), list(QUOTE, makeSymbol("KSI-INDEX")), list(makeSymbol("GET-PROPOSAL-INDEX"), makeSymbol("SELF")))),
						    list(RET, makeSymbol("GENERATED-KSI"))))))));

    static private final SubLSymbol $sym1401$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLList $list_alt1402 = list(NIL, list(makeSymbol("CLET"), list(list(makeSymbol("GENERATED-KSI"), list(makeSymbol("GENERATE-KSI"), makeSymbol("SUPER")))),
	    list(makeSymbol("PWHEN"), makeSymbol("GENERATED-KSI"), list(makeSymbol("SET-SLOT"), makeSymbol("GENERATED-KSI"), list(QUOTE, makeSymbol("KSI-INDEX")), list(makeSymbol("GET-PROPOSAL-INDEX"), makeSymbol("SELF")))), list(RET, makeSymbol("GENERATED-KSI"))));

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_PROPOSAL_GENERATE_KSI_DEFINITION_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-PROPOSAL-GENERATE-KSI-DEFINITION-METHOD");

    private static final SubLSymbol GET_PROPOSAL_METHOD_DEFINITIONS = makeSymbol("GET-PROPOSAL-METHOD-DEFINITIONS");

    static private final SubLList $list_alt1405 = list(list(RET, list(makeSymbol("LIST"), list(makeSymbol("GET-PROPOSAL-INITIALIZE-DEFINITION"), makeSymbol("SELF")), list(makeSymbol("GET-PROPOSAL-GENERATE-KSI-DEFINITION"), makeSymbol("SELF")))));

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_PROPOSAL_METHOD_DEFINITIONS_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-PROPOSAL-METHOD-DEFINITIONS-METHOD");

    private static final SubLSymbol GET_KSI_DECLARATION = makeSymbol("GET-KSI-DECLARATION");

    static private final SubLList $list_alt1408 = list(list(makeSymbol("PIF"), makeSymbol("EXTERNAL-P"),
	    list(RET,
		    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("DEFINE-CLASS")), list(makeSymbol("BQ-LIST"), makeSymbol("KSI-NAME"), makeKeyword("EXTENDS"), makeSymbol("SUPER-KSI-NAME")),
			    list(QUOTE, list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CREATE-POSTING"), list(makeSymbol("DATATYPE")), makeKeyword("PROTECTED")))))),
	    list(RET,
		    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("DEFINE-CLASS")), list(makeSymbol("BQ-LIST"), makeSymbol("KSI-NAME"), makeKeyword("EXTENDS"), makeSymbol("SUPER-KSI-NAME")),
			    list(QUOTE, list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CREATE-POSTING"), list(makeSymbol("DATATYPE")), makeKeyword("PROTECTED")),
				    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("EXECUTE"), NIL, makeKeyword("PUBLIC"))))))));

    static private final SubLSymbol $sym1409$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLList $list_alt1410 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CREATE-POSTING"), list(makeSymbol("DATATYPE")), makeKeyword("PROTECTED")));

    static private final SubLList $list_alt1411 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CREATE-POSTING"), list(makeSymbol("DATATYPE")), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("EXECUTE"), NIL, makeKeyword("PUBLIC")));

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_KSI_DECLARATION_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-KSI-DECLARATION-METHOD");

    private static final SubLSymbol GET_KSI_INITIALIZE_DEFINITION = makeSymbol("GET-KSI-INITIALIZE-DEFINITION");

    static private final SubLList $list_alt1414 = list(list(RET, list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("DEF-INSTANCE-METHOD")),
	    list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("INITIALIZE")), makeSymbol("KSI-NAME"), list(QUOTE, list(makeKeyword("PROTECTED")))), list(QUOTE, list(NIL, list(RET, list(makeSymbol("INITIALIZE"), makeSymbol("SUPER"))))))));

    static private final SubLSymbol $sym1415$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_KSI_INITIALIZE_DEFINITION_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-KSI-INITIALIZE-DEFINITION-METHOD");

    private static final SubLSymbol GET_KSI_CREATE_POSTING_DEFINITION = makeSymbol("GET-KSI-CREATE-POSTING-DEFINITION");

    static private final SubLList $list_alt1418 = list(
	    list(RET, list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("DEF-INSTANCE-METHOD")), list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("CREATE-POSTING")), makeSymbol("KSI-NAME"), list(QUOTE, list(makeKeyword("PROTECTED")))),
		    list(QUOTE, list(list(makeSymbol("DATATYPE")), list(RET, list(makeSymbol("CREATE-POSTING"), makeSymbol("SUPER"), makeSymbol("DATATYPE"))))))));

    static private final SubLSymbol $sym1419$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    static private final SubLList $list_alt1420 = list(list(makeSymbol("DATATYPE")), list(RET, list(makeSymbol("CREATE-POSTING"), makeSymbol("SUPER"), makeSymbol("DATATYPE"))));

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_KSI_CREATE_POSTING_DEFINITION_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-KSI-CREATE-POSTING-DEFINITION-METHOD");

    private static final SubLSymbol GET_KSI_EXECUTE_DEFINITION = makeSymbol("GET-KSI-EXECUTE-DEFINITION");

    static private final SubLList $list_alt1423 = list(list(makeSymbol("PWHEN"), list(makeSymbol("CAND"), makeSymbol("PARSED-BODY"), makeSymbol("ASSISTANT")),
	    list(RET, list(makeSymbol("INLINE-METHOD"), list(makeSymbol("COMPILE-TO-EXECUTE-METHOD"), makeSymbol("CYBLACK-DEFKS-BODY")), makeSymbol("PARSED-BODY"), makeSymbol("ASSISTANT")))));

    static private final SubLSymbol $sym1424$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_KSI_EXECUTE_DEFINITION_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-KSI-EXECUTE-DEFINITION-METHOD");

    private static final SubLSymbol GET_KSI_METHOD_DEFINITIONS = makeSymbol("GET-KSI-METHOD-DEFINITIONS");

    static private final SubLList $list_alt1427 = list(list(makeSymbol("CLET"),
	    list(list(makeSymbol("INITIALIZE-DEF"), list(makeSymbol("GET-KSI-INITIALIZE-DEFINITION"), makeSymbol("SELF"))), list(makeSymbol("CREATE-POSTING-DEF"), list(makeSymbol("GET-KSI-CREATE-POSTING-DEFINITION"), makeSymbol("SELF"))),
		    list(makeSymbol("EXECUTE-DEF"), list(makeSymbol("GET-KSI-EXECUTE-DEFINITION"), makeSymbol("SELF")))),
	    list(RET,
		    list(makeSymbol("FIF"), makeSymbol("INITIALIZE-DEF"),
			    list(makeSymbol("FIF"), makeSymbol("CREATE-POSTING-DEF"),
				    list(makeSymbol("FIF"), makeSymbol("EXECUTE-DEF"), list(makeSymbol("LIST"), makeSymbol("INITIALIZE-DEF"), makeSymbol("CREATE-POSTING-DEF"), makeSymbol("EXECUTE-DEF")), list(makeSymbol("LIST"), makeSymbol("INITIALIZE-DEF"), makeSymbol("CREATE-POSTING-DEF"))),
				    list(makeSymbol("FIF"), makeSymbol("EXECUTE-DEF"), list(makeSymbol("LIST"), makeSymbol("INITIALIZE-DEF"), makeSymbol("EXECUTE-DEF")), list(makeSymbol("LIST"), makeSymbol("INITIALIZE-DEF")))),
			    list(makeSymbol("FIF"), makeSymbol("CREATE-POSTING-DEF"), list(makeSymbol("FIF"), makeSymbol("EXECUTE-DEF"), list(makeSymbol("LIST"), makeSymbol("CREATE-POSTING-DEF"), makeSymbol("EXECUTE-DEF")), list(makeSymbol("LIST"), makeSymbol("CREATE-POSTING-DEF"))),
				    list(makeSymbol("FIF"), makeSymbol("EXECUTE-DEF"), list(makeSymbol("LIST"), makeSymbol("EXECUTE-DEF")), NIL))))));

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_KSI_METHOD_DEFINITIONS_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-KSI-METHOD-DEFINITIONS-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_EXTERNAL_MODULE_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-EXTERNAL-MODULE-NAME-METHOD");

    static private final SubLList $list_alt1430 = list(list(makeSymbol("CSETQ"), makeSymbol("EXTERNAL-MODULE-NAME"), makeSymbol("NEW-EXTERNAL-MODULE-NAME")), list(RET, makeSymbol("NEW-EXTERNAL-MODULE-NAME")));

    static private final SubLSymbol $sym1431$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_EXTERNAL_MODULE_NAME_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-EXTERNAL-MODULE-NAME-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_PORT_ID_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-PORT-ID-METHOD");

    static private final SubLSymbol $sym1434$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_PORT_ID_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-PORT-ID-METHOD");

    private static final SubLSymbol IS_EXTERNAL = makeSymbol("IS-EXTERNAL");

    static private final SubLList $list_alt1437 = list(list(RET, makeSymbol("EXTERNAL-P")));

    private static final SubLSymbol CYBLACK_KS_FACTORY_IS_EXTERNAL_METHOD = makeSymbol("CYBLACK-KS-FACTORY-IS-EXTERNAL-METHOD");

    private static final SubLSymbol SET_EXTERNAL = makeSymbol("SET-EXTERNAL");

    static private final SubLList $list_alt1440 = list(list(makeSymbol("CSETQ"), makeSymbol("EXTERNAL-P"), makeSymbol("NEW-STATE")), list(RET, makeSymbol("NEW-STATE")));

    static private final SubLSymbol $sym1441$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_EXTERNAL_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-EXTERNAL-METHOD");

    private static final SubLSymbol GET_ADDED_DECLARATIONS_FOR_KS_CLASS = makeSymbol("GET-ADDED-DECLARATIONS-FOR-KS-CLASS");

    static private final SubLList $list_alt1444 = list(list(RET, makeSymbol("ADDED-DECLARATIONS-FOR-KS-CLASS")));

    private static final SubLSymbol CYBLACK_KS_FACTORY_GET_ADDED_DECLARATIONS_FOR_KS_CLASS_METHOD = makeSymbol("CYBLACK-KS-FACTORY-GET-ADDED-DECLARATIONS-FOR-KS-CLASS-METHOD");

    private static final SubLSymbol SET_ADDED_DECLARATIONS_FOR_KS_CLASS = makeSymbol("SET-ADDED-DECLARATIONS-FOR-KS-CLASS");

    static private final SubLList $list_alt1447 = list(makeSymbol("NEW-DECLS"));

    static private final SubLList $list_alt1448 = list(list(makeSymbol("CSETQ"), makeSymbol("ADDED-DECLARATIONS-FOR-KS-CLASS"), list(makeSymbol("COPY-TREE"), makeSymbol("NEW-DECLS"))), list(RET, makeSymbol("NEW-DECLS")));

    static private final SubLSymbol $sym1449$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_SET_ADDED_DECLARATIONS_FOR_KS_CLASS_METHOD = makeSymbol("CYBLACK-KS-FACTORY-SET-ADDED-DECLARATIONS-FOR-KS-CLASS-METHOD");

    private static final SubLSymbol ADD_DECLARATION_FOR_KS_CLASS = makeSymbol("ADD-DECLARATION-FOR-KS-CLASS");

    static private final SubLList $list_alt1452 = list(makeSymbol("DECL"));

    static private final SubLList $list_alt1453 = list(list(makeSymbol("CSETQ"), makeSymbol("ADDED-DECLARATIONS-FOR-KS-CLASS"), list(makeSymbol("NCONC"), makeSymbol("ADDED-DECLARATIONS-FOR-KS-CLASS"), list(makeSymbol("LIST"), list(makeSymbol("COPY-TREE"), makeSymbol("DECL"))))),
	    list(RET, makeSymbol("DECL")));

    static private final SubLSymbol $sym1454$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_ADD_DECLARATION_FOR_KS_CLASS_METHOD = makeSymbol("CYBLACK-KS-FACTORY-ADD-DECLARATION-FOR-KS-CLASS-METHOD");

    private static final SubLSymbol HAS_ADDED_DECLARATION_FOR_METHOD_P = makeSymbol("HAS-ADDED-DECLARATION-FOR-METHOD-P");

    static private final SubLList $list_alt1457 = list(makeSymbol("METHOD-NAME"));

    static private final SubLList $list_alt1458 = list(list(makeSymbol("CDOLIST"), list(makeSymbol("ADDED-DECL"), makeSymbol("ADDED-DECLARATIONS-FOR-KS-CLASS")),
	    list(makeSymbol("PWHEN"),
		    list(makeSymbol("CAND"), list(makeSymbol("CONSP"), makeSymbol("ADDED-DECL")),
			    list(makeSymbol("COR"), list(EQ, list(makeSymbol("CAR"), makeSymbol("ADDED-DECL")), list(QUOTE, makeSymbol("DEF-INSTANCE-METHOD"))), list(EQ, list(makeSymbol("CAR"), makeSymbol("ADDED-DECL")), list(QUOTE, makeSymbol("DEF-CLASS-METHOD")))),
			    list(makeSymbol("CONSP"), list(makeSymbol("CDR"), makeSymbol("ADDED-DECL"))), list(EQ, list(makeSymbol("CADR"), makeSymbol("ADDED-DECL")), makeSymbol("METHOD-NAME"))),
		    list(RET, T))),
	    list(RET, NIL));

    static private final SubLSymbol $sym1459$OUTER_CATCH_FOR_CYBLACK_KS_FACTORY_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-KS-FACTORY-METHOD");

    private static final SubLSymbol CYBLACK_KS_FACTORY_HAS_ADDED_DECLARATION_FOR_METHOD_P_METHOD = makeSymbol("CYBLACK-KS-FACTORY-HAS-ADDED-DECLARATION-FOR-METHOD-P-METHOD");

    private static final SubLSymbol CYBLACK_INTERNAL_BASE_KS = makeSymbol("CYBLACK-INTERNAL-BASE-KS");

    static private final SubLList $list_alt1463 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("BEFORE-STARTUP"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("ON-STARTUP"), NIL, makeKeyword("PUBLIC")));

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_INTERNAL_BASE_KS_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-INTERNAL-BASE-KS-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_INTERNAL_BASE_KS_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-INTERNAL-BASE-KS-INSTANCE");

    private static final SubLSymbol BEFORE_STARTUP = makeSymbol("BEFORE-STARTUP");

    static private final SubLList $list_alt1467 = list(makeString("Override me to provide actions before startup."), list(RET, NIL));

    private static final SubLSymbol CYBLACK_INTERNAL_BASE_KS_BEFORE_STARTUP_METHOD = makeSymbol("CYBLACK-INTERNAL-BASE-KS-BEFORE-STARTUP-METHOD");

    static private final SubLList $list_alt1469 = list(list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("SELF"), list(QUOTE, makeSymbol("BEFORE-STARTUP"))), list(makeSymbol("ON-STARTUP"), makeSymbol("SUPER")), list(RET, NIL));

    private static final SubLSymbol CYBLACK_INTERNAL_BASE_KS_ON_STARTUP_METHOD = makeSymbol("CYBLACK-INTERNAL-BASE-KS-ON-STARTUP-METHOD");

    private static final SubLSymbol CYBLACK_INTERNAL_BASE_PROPOSAL = makeSymbol("CYBLACK-INTERNAL-BASE-PROPOSAL");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_INTERNAL_BASE_PROPOSAL_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-INTERNAL-BASE-PROPOSAL-CLASS");

    static private final SubLSymbol $sym1473$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_INTERNAL_BASE_PROPOSAL_INSTAN = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-INTERNAL-BASE-PROPOSAL-INSTANCE");

    static private final SubLList $list_alt1474 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(RET, makeSymbol("SELF")));

    private static final SubLSymbol CYBLACK_INTERNAL_BASE_PROPOSAL_INITIALIZE_METHOD = makeSymbol("CYBLACK-INTERNAL-BASE-PROPOSAL-INITIALIZE-METHOD");

    static private final SubLList $list_alt1476 = list(list(makeSymbol("CLET"),
	    list(list(makeSymbol("NEW-KSI"), list(makeSymbol("GENERATE-KSI"), makeSymbol("SUPER"))),
		    list(makeSymbol("NEW-ACTIVATION-PATTERN"), list(makeSymbol("FIF"), makeSymbol("ACTIVATION-PATTERN"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ACTIVATION-PATTERN"), list(QUOTE, makeSymbol("CLONE"))), NIL))),
	    list(makeSymbol("PWHEN"), makeSymbol("NEW-KSI"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ACTIVATION-PATTERN"), makeSymbol("RKF-FIBONACCI-REQUEST-KSI")), makeSymbol("NEW-KSI"), makeSymbol("NEW-ACTIVATION-PATTERN"))), list(RET, makeSymbol("NEW-KSI"))));

    static private final SubLSymbol $sym1477$OUTER_CATCH_FOR_CYBLACK_INTERNAL_BASE_PROPOSAL_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-INTERNAL-BASE-PROPOSAL-METHOD");

    private static final SubLSymbol CYBLACK_INTERNAL_BASE_PROPOSAL_GENERATE_KSI_METHOD = makeSymbol("CYBLACK-INTERNAL-BASE-PROPOSAL-GENERATE-KSI-METHOD");

    private static final SubLSymbol CYBLACK_INTERNAL_BASE_KSI = makeSymbol("CYBLACK-INTERNAL-BASE-KSI");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_INTERNAL_BASE_KSI_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-INTERNAL-BASE-KSI-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_INTERNAL_BASE_KSI_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-INTERNAL-BASE-KSI-INSTANCE");

    private static final SubLSymbol CYBLACK_INTERNAL_BASE_KSI_INITIALIZE_METHOD = makeSymbol("CYBLACK-INTERNAL-BASE-KSI-INITIALIZE-METHOD");

    static private final SubLList $list_alt1483 = list(makeSymbol("DATATYPE"));

    static private final SubLList $list_alt1484 = list(list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-DATATYPE-P"), makeSymbol("DATATYPE")), makeString("(CREATE-POSTING ~S): ~S is not an instance of CYBLACK-DATATYPE."), makeSymbol("SELF"), makeSymbol("DATATYPE")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("POSTING"), list(makeSymbol("CYBLACK-DATATYPE-CREATE-POSTING"), makeSymbol("DATATYPE")))), list(makeSymbol("CYBLACK-POSTING-SET-APPLICATION"), makeSymbol("POSTING"), makeSymbol("APPLICATION")),
		    list(makeSymbol("PWHEN"), makeSymbol("ACTIVATION-PATTERN"), list(makeSymbol("CYBLACK-POSTING-SET-ACTIVATION-PATTERN"), makeSymbol("POSTING"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ACTIVATION-PATTERN"), list(QUOTE, makeSymbol("CLONE"))))),
		    list(makeSymbol("CYBLACK-POSTING-SET-KSI"), makeSymbol("POSTING"), makeSymbol("SELF")), list(RET, makeSymbol("POSTING"))));

    static private final SubLSymbol $sym1485$OUTER_CATCH_FOR_CYBLACK_INTERNAL_BASE_KSI_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-INTERNAL-BASE-KSI-METHOD");

    static private final SubLString $str_alt1486$_CREATE_POSTING__S____S_is_not_an = makeString("(CREATE-POSTING ~S): ~S is not an instance of CYBLACK-DATATYPE.");

    private static final SubLSymbol CYBLACK_INTERNAL_BASE_KSI_CREATE_POSTING_METHOD = makeSymbol("CYBLACK-INTERNAL-BASE-KSI-CREATE-POSTING-METHOD");

    private static final SubLSymbol CYBLACK_INTERNAL_BASE_KSI_EXECUTE_METHOD = makeSymbol("CYBLACK-INTERNAL-BASE-KSI-EXECUTE-METHOD");

    private static final SubLSymbol CYBLACK_INTERNAL_BASE = makeSymbol("CYBLACK-INTERNAL-BASE");

    static private final SubLList $list_alt1490 = list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("DEF-INSTANCE-METHOD"));

    static private final SubLString $str_alt1491$_DEFINE_KNOWLEDGE_SOURCE___S_is_n = makeString("(DEFINE-KNOWLEDGE-SOURCE: ~S is not a valid root for a knowledge source name. ~\n     A non-nil symbol was expected.");

    static private final SubLString $str_alt1492$_DEFINE_KNOWLEDGE_SOURCE___S_is_n = makeString("(DEFINE-KNOWLEDGE-SOURCE: ~S is not a valid knowledge source options property list.");

    private static final SubLSymbol $PRECONDITION = makeKeyword("PRECONDITION");

    private static final SubLSymbol $POST_AT_WILL = makeKeyword("POST-AT-WILL");

    private static final SubLSymbol CYBLACK_CREATE_DEFKS_ASSISTANT_EXTENDED = makeSymbol("CYBLACK-CREATE-DEFKS-ASSISTANT-EXTENDED");

    static private final SubLList $list_alt1496 = list(cons(makeSymbol("KS-NAME-ROOT"), makeSymbol("OPTIONS-PLIST")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE");

    static private final SubLList $list_alt1499 = list(makeSymbol("CYBLACK-AUTO-GENERATED-KNOWLEDGE-SOURCE"));

    static private final SubLList $list_alt1500 = list(list(makeSymbol("AUTO-GENERATED-KS-ASSISTENT"), makeKeyword("CLASS"), makeKeyword("PROTECTED")), list(makeSymbol("TRACE-BASIC-METHODS"), makeKeyword("BOOLEAN"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("GET-AUTO-GENERATED-KS-ASSISTANT"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("SET-AUTO-GENERATED-KS-ASSISTANT"), list(makeSymbol("NEW-ASSISTANT")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-TRACE-STATE"), list(makeSymbol("NEW-STATE")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("NEW-KNOWLEDGE-SOURCE"), list(makeSymbol("NEW-APPLICATION")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("NEW-KSI"), list(makeSymbol("PROPOSAL")), makeKeyword("PUBLIC")));

    public static final SubLInteger $int$4109 = makeInteger(4109);

    static private final SubLSymbol $sym1502$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWL = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-CLASS");

    private static final SubLSymbol REJECTION_EXCUSES = makeSymbol("REJECTION-EXCUSES");

    static private final SubLSymbol $sym1512$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWL = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-INSTANCE");

    static private final SubLList $list_alt1513 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("UNIFICATION-ROBOT-CLASS"), list(QUOTE, makeSymbol("CYBLACK-CONSTRAINED-UNIFICATION-ROBOT-SATISFIED-BY-ANY-SOLUTION"))),
	    list(makeSymbol("CSETQ"), makeSymbol("AUTO-GENERATED-KS-ASSISTENT"), NIL), list(makeSymbol("CSETQ"), makeSymbol("TRACE-BASIC-METHODS"), NIL), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym1514$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_ = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-METHOD");

    static private final SubLSymbol $sym1515$CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_INITIALIZE_METHO = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1516$CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_GET_AUTO_GENERAT = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-GET-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLSymbol $sym1517$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_ = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-METHOD");

    static private final SubLSymbol $sym1518$CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_SET_AUTO_GENERAT = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-SET-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLSymbol $sym1519$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_ = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-METHOD");

    static private final SubLSymbol $sym1520$CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_SET_TRACE_STATE_ = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-SET-TRACE-STATE-METHOD");

    static private final SubLSymbol $sym1521$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_ = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-METHOD");

    static private final SubLSymbol $sym1522$CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_NEW_PROPOSAL_MET = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-NEW-PROPOSAL-METHOD");

    static private final SubLList $list_alt1523 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-APPLICATION")), list(makeSymbol("CYBLACK-APPLICATION-P"), makeSymbol("NEW-APPLICATION"))), makeString("(NEW-KNOWLEDGE-SOURCE ~S): ~S is not an instance of CYBLACK-APPLICATION."), makeSymbol("SELF"),
		    makeSymbol("NEW-APPLICATION")),
	    list(makeSymbol("CLET"), list(list(makeSymbol("ASSISTANT"), list(makeSymbol("GET-AUTO-GENERATED-KS-ASSISTANT"), makeSymbol("SELF")))),
		    list(makeSymbol("MUST"), makeSymbol("ASSISTANT"), makeString("(NEW-KNOWLEDGE-SOURCE ~S): No auto generated knowledge source assistant is associated with this knowledge souce class."), makeSymbol("SELF")),
		    list(makeSymbol("CLET"),
			    list(list(makeSymbol("KNOWLEDGE-SOURCE-CLASS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-KNOWLEDGE-SOURCE-CLASS"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("ASSISTANT"))),
				    list(makeSymbol("UNIFICATION-TYPES"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-UNIFICATION-TYPES"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("ASSISTANT"))),
				    list(makeSymbol("UNIFICATION-ROBOT-CLASS"), list(makeSymbol("CYBLACK-UNIFIER-CLASS-GIVEN-DESCRIPTION"), makeSymbol("UNIFICATION-TYPES")))),
			    list(makeSymbol("MUST"), makeSymbol("KNOWLEDGE-SOURCE-CLASS"), makeString("(NEW-KNOWLEDGE-SOURCE ~S): The auto generated assistant ~S associated with this KS has ~\n         no associated knowledge source class."), makeSymbol("SELF"),
				    makeSymbol("KNOWLEDGE-SOURCE-CLASS")),
			    list(makeSymbol("CLET"), list(list(makeSymbol("KNOWLEDGE-SOURCE"), list(makeSymbol("NEW-CLASS-INSTANCE"), makeSymbol("KNOWLEDGE-SOURCE-CLASS")))),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("KNOWLEDGE-SOURCE"), list(QUOTE, makeSymbol("SET-APPLICATION")), makeSymbol("NEW-APPLICATION")),
				    list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("KNOWLEDGE-SOURCE"), list(QUOTE, makeSymbol("SET-UNIFICATION-ROBOT-CLASS")), makeSymbol("UNIFICATION-ROBOT-CLASS")), list(RET, makeSymbol("KNOWLEDGE-SOURCE"))))));

    static private final SubLSymbol $sym1524$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_ = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-METHOD");

    static private final SubLSymbol $sym1525$CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_NEW_KNOWLEDGE_SO = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-NEW-KNOWLEDGE-SOURCE-METHOD");

    static private final SubLSymbol $sym1526$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_ = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_EXTERNAL_KNOWLEDGE_SOURCE_NEW_KSI_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-KNOWLEDGE-SOURCE-NEW-KSI-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL");

    static private final SubLList $list_alt1530 = list(makeSymbol("CYBLACK-AUTO-GENERATED-PROPOSAL"));

    static private final SubLList $list_alt1531 = list(new SubLObject[] { list(makeSymbol("AUTO-GENERATED-KS-ASSISTENT"), makeKeyword("CLASS"), makeKeyword("PROTECTED")), list(makeSymbol("TRACE-BASIC-METHODS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("GET-AUTO-GENERATED-KS-ASSISTANT"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("SET-AUTO-GENERATED-KS-ASSISTANT"), list(makeSymbol("NEW-ASSISTANT")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PROPOSAL-INDEX"), NIL, makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-PROPOSAL-INDEX"), list(makeSymbol("NEW-INDEX")), makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-TRACE-STATE"), list(makeSymbol("NEW-STATE")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("PRINT"), list(makeSymbol("STREAM"), makeSymbol("DEPTH")), makeKeyword("PUBLIC")) });

    static private final SubLSymbol $sym1532$CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_SET_PROPOSAL_INDEX_METHO = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-SET-PROPOSAL-INDEX-METHOD");

    static private final SubLSymbol $sym1533$CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_GET_PROPOSAL_INDEX_METHO = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-GET-PROPOSAL-INDEX-METHOD");

    static private final SubLSymbol $sym1534$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_EXTERNAL_PROPO = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-CLASS");

    private static final SubLSymbol ALREADY_RECONFIRMED = makeSymbol("ALREADY-RECONFIRMED");

    static private final SubLSymbol $sym1539$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_EXTERNAL_PROPO = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-INSTANCE");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_INITIALIZE_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_PRINT_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-PRINT-METHOD");

    static private final SubLList $list_alt1542 = list(list(makeSymbol("CLET"), list(list(makeSymbol("ASSISTANT"), NIL)), list(makeSymbol("CDOLIST"), list(makeSymbol("CLASS-REFERENCE"), list(makeSymbol("CLASS-COMPILED-INHERITANCE-PATH"), makeSymbol("SELF"))),
	    list(makeSymbol("PUNLESS"), list(makeSymbol("SUBCLASSP"), makeSymbol("CLASS-REFERENCE"), list(QUOTE, makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL"))), list(RET, NIL)),
	    list(makeSymbol("CSETQ"), makeSymbol("ASSISTANT"), list(makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-GET-AUTO-GENERATED-KS-ASSISTANT-METHOD"), makeSymbol("CLASS-REFERENCE"))), list(makeSymbol("PWHEN"), makeSymbol("ASSISTANT"), list(RET, makeSymbol("ASSISTANT")))),
	    list(RET, NIL)));

    static private final SubLSymbol $sym1543$CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_GET_AUTO_GENERATED_KS_AS = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-GET-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLSymbol $sym1544$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-METHOD");

    static private final SubLSymbol $sym1545$CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_SET_AUTO_GENERATED_KS_AS = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-SET-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLSymbol $sym1546$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_EXTERNAL_PROPOSAL_SET_TRACE_STATE_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-SET-TRACE-STATE-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_EXTERNAL_KSI = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-KSI");

    static private final SubLList $list_alt1549 = list(makeSymbol("CYBLACK-AUTO-GENERATED-KSI"));

    static private final SubLList $list_alt1550 = list(new SubLObject[] { list(makeSymbol("AUTO-GENERATED-KS-ASSISTENT"), makeKeyword("CLASS"), makeKeyword("PROTECTED")), list(makeSymbol("TRACE-BASIC-METHODS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("GET-AUTO-GENERATED-KS-ASSISTANT"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-CLASS-METHOD"), makeSymbol("SET-AUTO-GENERATED-KS-ASSISTANT"), list(makeSymbol("NEW-ASSISTANT")), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KSI-INDEX"), NIL, makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-KSI-INDEX"), list(makeSymbol("NEW-INDEX")), makeKeyword("INSTANTIATE-TEMPLATE"), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-TRACE-STATE"), list(makeSymbol("NEW-STATE")), makeKeyword("PUBLIC")),
	    list(makeSymbol("PROPOSAL"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("IS-PROPOSAL-AUTO-GENERATED"), makeKeyword("BOOLEAN"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PROPOSAL"), NIL, makeKeyword("PUBLIC")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-PROPOSAL"), list(makeSymbol("NEW-PROPOSAL")), makeKeyword("PUBLIC")) });

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_SET_KSI_INDEX_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-SET-KSI-INDEX-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_GET_KSI_INDEX_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-GET-KSI-INDEX-METHOD");

    static private final SubLSymbol $sym1553$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_C = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-CLASS");

    static private final SubLSymbol $sym1554$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_I = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-INSTANCE");

    static private final SubLSymbol $sym1555$CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_GET_AUTO_GENERATED_KS_ASSISTA = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-GET-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLSymbol $sym1556$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-METHOD");

    static private final SubLSymbol $sym1557$CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_SET_AUTO_GENERATED_KS_ASSISTA = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-SET-AUTO-GENERATED-KS-ASSISTANT-METHOD");

    static private final SubLSymbol $sym1558$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_SET_TRACE_STATE_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-SET-TRACE-STATE-METHOD");

    static private final SubLList $list_alt1560 = list(list(makeSymbol("INITIALIZE"), makeSymbol("SUPER")), list(makeSymbol("CSETQ"), makeSymbol("AUTO-GENERATED-KS-ASSISTENT"), NIL), list(makeSymbol("CSETQ"), makeSymbol("PROPOSAL"), NIL),
	    list(makeSymbol("CSETQ"), makeSymbol("IS-PROPOSAL-AUTO-GENERATED"), NIL), list(RET, makeSymbol("SELF")));

    static private final SubLSymbol $sym1561$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_INITIALIZE_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-INITIALIZE-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_GET_PROPOSAL_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-GET-PROPOSAL-METHOD");

    static private final SubLList $list_alt1564 = list(
	    list(makeSymbol("MUST"), list(makeSymbol("COR"), list(makeSymbol("NULL"), makeSymbol("NEW-PROPOSAL")), list(makeSymbol("CYBLACK-PROPOSAL-P"), makeSymbol("NEW-PROPOSAL"))), makeString("(SET-PROPOSAL ~S): ~S is not an instance of CYBLACK-PROPOSAL."), makeSymbol("SELF"),
		    makeSymbol("NEW-PROPOSAL")),
	    list(makeSymbol("CSETQ"), makeSymbol("PROPOSAL"), makeSymbol("NEW-PROPOSAL")),
	    list(makeSymbol("CSETQ"), makeSymbol("IS-PROPOSAL-AUTO-GENERATED"), list(makeSymbol("CAND"), makeSymbol("NEW-PROPOSAL"), list(makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-PROPOSAL-P"), makeSymbol("NEW-PROPOSAL")))), list(RET, makeSymbol("NEW-PROPOSAL")));

    static private final SubLSymbol $sym1565$OUTER_CATCH_FOR_CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-METHOD");

    private static final SubLSymbol CYBLACK_AUTO_GENERATED_EXTERNAL_KSI_SET_PROPOSAL_METHOD = makeSymbol("CYBLACK-AUTO-GENERATED-EXTERNAL-KSI-SET-PROPOSAL-METHOD");

    private static final SubLSymbol CYBLACK_EXTERNAL_BASE_KS = makeSymbol("CYBLACK-EXTERNAL-BASE-KS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXTERNAL_BASE_KS_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXTERNAL-BASE-KS-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXTERNAL_BASE_KS_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXTERNAL-BASE-KS-INSTANCE");

    private static final SubLSymbol CYBLACK_EXTERNAL_BASE_PROPOSAL = makeSymbol("CYBLACK-EXTERNAL-BASE-PROPOSAL");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXTERNAL_BASE_PROPOSAL_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXTERNAL-BASE-PROPOSAL-CLASS");

    static private final SubLSymbol $sym1572$SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXTERNAL_BASE_PROPOSAL_INSTAN = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXTERNAL-BASE-PROPOSAL-INSTANCE");

    private static final SubLSymbol CYBLACK_EXTERNAL_BASE_PROPOSAL_INITIALIZE_METHOD = makeSymbol("CYBLACK-EXTERNAL-BASE-PROPOSAL-INITIALIZE-METHOD");

    static private final SubLList $list_alt1574 = list(list(makeSymbol("WITH-EXPROP-READ-ONLY"), makeSymbol("SELF"), list(makeSymbol("CLET"),
	    list(list(makeSymbol("NEW-KSI"), list(makeSymbol("GENERATE-KSI"), makeSymbol("SUPER"))),
		    list(makeSymbol("NEW-ACTIVATION-PATTERN"), list(makeSymbol("FIF"), makeSymbol("ACTIVATION-PATTERN"), list(makeSymbol("FUNCALL-INSTANCE-METHOD"), makeSymbol("ACTIVATION-PATTERN"), list(QUOTE, makeSymbol("CLONE"))), NIL))),
	    list(makeSymbol("PWHEN"), makeSymbol("NEW-KSI"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("SET-ACTIVATION-PATTERN"), makeSymbol("RKF-FIBONACCI-REQUEST-KSI")), makeSymbol("NEW-KSI"), makeSymbol("NEW-ACTIVATION-PATTERN"))), list(RET, makeSymbol("NEW-KSI")))));

    private static final SubLSymbol CYBLACK_EXTERNAL_BASE_PROPOSAL_GENERATE_KSI_METHOD = makeSymbol("CYBLACK-EXTERNAL-BASE-PROPOSAL-GENERATE-KSI-METHOD");

    private static final SubLSymbol CYBLACK_EXTERNAL_BASE_KSI = makeSymbol("CYBLACK-EXTERNAL-BASE-KSI");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXTERNAL_BASE_KSI_CLASS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXTERNAL-BASE-KSI-CLASS");

    private static final SubLSymbol SUBLOOP_RESERVED_INITIALIZE_CYBLACK_EXTERNAL_BASE_KSI_INSTANCE = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-CYBLACK-EXTERNAL-BASE-KSI-INSTANCE");

    private static final SubLSymbol CYBLACK_EXTERNAL_BASE_KSI_INITIALIZE_METHOD = makeSymbol("CYBLACK-EXTERNAL-BASE-KSI-INITIALIZE-METHOD");

    static private final SubLSymbol $sym1580$OUTER_CATCH_FOR_CYBLACK_EXTERNAL_BASE_KSI_METHOD = makeUninternedSymbol("OUTER-CATCH-FOR-CYBLACK-EXTERNAL-BASE-KSI-METHOD");

    private static final SubLSymbol CYBLACK_EXTERNAL_BASE_KSI_CREATE_POSTING_METHOD = makeSymbol("CYBLACK-EXTERNAL-BASE-KSI-CREATE-POSTING-METHOD");

    static private final SubLList $list_alt1582 = list(list(RET, list(makeSymbol("EXECUTE"), makeSymbol("SUPER"))));

    private static final SubLSymbol CYBLACK_EXTERNAL_BASE_KSI_EXECUTE_METHOD = makeSymbol("CYBLACK-EXTERNAL-BASE-KSI-EXECUTE-METHOD");

    static private final SubLString $str_alt1584$_DEFINE_EXTERNAL_KNOWLEDGE_SOURCE = makeString("(DEFINE-EXTERNAL-KNOWLEDGE-SOURCE: ~S is not a valid root for a knowledge source name. ~\n     A non-nil symbol was expected.");

    static private final SubLString $str_alt1585$_DEFINE_EXTERNAL_KNOWLEDGE_SOURCE = makeString("(DEFINE-EXTERNAL-KNOWLEDGE-SOURCE: ~S is not a valid knowledge source options property list.");

    private static final SubLSymbol $EXTERNAL_MODULE_NAME = makeKeyword("EXTERNAL-MODULE-NAME");

    private static final SubLSymbol $PORT_ID = makeKeyword("PORT-ID");

    private static final SubLSymbol CYBLACK_EXTERNAL_BASE = makeSymbol("CYBLACK-EXTERNAL-BASE");

    static private final SubLList $list_alt1589 = list(cons(makeSymbol("KS-NAME-ROOT"), makeSymbol("OPTIONS-PLIST")));

    // // Internal Constant Initializer Methods
    private static final SubLObject _constant_569_initializer() {
	return list(list(makeSymbol("MUST"), list(makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT-P"), makeSymbol("KS-ASSISTANT")), makeString("(COMPILE-TO-CREATE-EXECUTE-METHOD ~S): ~S is not an instance of CYBLACK-AUTO-GENERATED-KS-ASSISTANT."), makeSymbol("SELF"), makeSymbol("KS-ASSISTANT")),
		list(makeSymbol("PUNLESS"), makeSymbol("STIMULATION-COND"), list(RET, NIL)), list(
			makeSymbol("CLET"), list(
				new SubLObject[] { list(makeSymbol("KSI-CLASS"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-KNOWLEDGE-SOURCE-INSTANTIATION-CLASS"), makeSymbol("CYBLACK-AUTO-GENERATED-KS-ASSISTANT")), makeSymbol("KS-ASSISTANT"))),
					list(makeSymbol("APPLICATION-VAR"), list(makeSymbol("MAKE-SYMBOL"), makeString("application"))), list(makeSymbol("KSI-INDEX-VAR"), list(makeSymbol("MAKE-SYMBOL"), makeString("ksi-index"))),
					list(makeSymbol("POSTING-VAR"), list(makeSymbol("MAKE-SYMBOL"), makeString("posting"))), list(makeSymbol("BLACKBOARD-VAR"), list(makeSymbol("MAKE-SYMBOL"), makeString("blackboard"))),
					list(makeSymbol("DATATYPE-VAR"), list(makeSymbol("MAKE-SYMBOL"), makeString("datatype"))), list(makeSymbol("DATATYPE-DICTIONARY-VAR"), list(makeSymbol("MAKE-SYMBOL"), makeString("datatype-dictionary"))), list(makeSymbol("ARGLIST"), NIL),
					list(makeSymbol("BINDINGS"), NIL), list(makeSymbol("CASES"), NIL) }),
			list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("ARG"), list(makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-GET-ARG-LIST-METHOD"),
				makeSymbol("STIMULATION-COND")), makeSymbol("ARGLIST")), list(makeSymbol("CYBLACK-DEFKS-STIMULATION-COND-ARG-GET-ARG-METHOD"),
					makeSymbol("ARG"))),
			list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("ARG"), makeSymbol("ARGLIST"), makeSymbol("BINDINGS")),
				list(makeSymbol("LIST"), makeSymbol("ARG"), list(makeSymbol("LIST"), list(QUOTE, makeSymbol("EVAL-VAR")), list(QUOTE, makeSymbol("SELF")), list(makeSymbol("LIST"), list(QUOTE, QUOTE), makeSymbol("ARG"))))),
			list(makeSymbol("DO-ALIST"), list(makeSymbol("INDEX"), makeSymbol("POSTING-EXPRESSION"), makeSymbol("POSTING-EXPRESSION-ALIST")), list(makeSymbol("IGNORE"), makeSymbol("INDEX")),
				list(new SubLObject[] { makeSymbol("PCOND"),
					list(list(makeSymbol("CYBLACK-POSTING-EXPR-P"), makeSymbol("POSTING-EXPRESSION")), list(makeSymbol("CSETQ"), makeSymbol("CASES"), list(makeSymbol("DOTTED-ASSOC-PUSH"),
						list(makeSymbol("GET-SLOT"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-PARENT"), makeSymbol("CYBLACK-DEFKS-EXPRESSION")), makeSymbol("POSTING-EXPRESSION")), list(QUOTE, makeSymbol("EXPRESSION-INDEX"))),
						list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("CLET")),
							list(makeSymbol("BQ-APPEND"), list(makeSymbol("CYBLACK-POSTING-EXPR-GET-EXECUTE-METHOD-BINDINGS-METHOD"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("SELF"))), NIL),
							list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CSETQ")), makeSymbol("DATATYPE-VAR"),
								list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-DATATYPE-DICTIONARY-INTERN")), makeSymbol("DATATYPE-DICTIONARY-VAR"),
									list(makeSymbol("GET-SLOT"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("DATATYPE-STRING"))))),
							list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CSETQ")), makeSymbol("POSTING-VAR"),
								list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CREATE-POSTING")), list(QUOTE, makeSymbol("SELF")), makeSymbol("DATATYPE-VAR"))),
							list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("INLINE-METHOD")), list(QUOTE, list(makeSymbol("ASSIMILATE"), makeSymbol("OBJECT"))), makeSymbol("POSTING-VAR"),
								list(makeSymbol("BQ-CONS"), list(QUOTE, makeSymbol("LIST")),
									list(makeSymbol("BQ-APPEND"), list(makeSymbol("COPY-TREE"), list(makeSymbol("GET-SLOT"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("SLOT-INITIALIZATIONS")))), NIL))),
							list(makeSymbol("BQ-APPEND"),
								list(makeSymbol("FIF"), list(makeSymbol("GET-SLOT"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("CONFIDENCE-EXPRESSION"))),
									list(makeSymbol("FIF"), list(makeSymbol("GET-SLOT"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("COMPUTE-CONFIDENCE"))),
										list(makeSymbol("BQ-LIST"),
											list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-POSTING-SET-CONFIDENCE")), makeSymbol("POSTING-VAR"),
												list(makeSymbol("GET-SLOT"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("CONFIDENCE-EXPRESSION"))))),
										list(makeSymbol("BQ-LIST"),
											list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-POSTING-SET-CONFIDENCE")), makeSymbol("POSTING-VAR"),
												list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("LIST")), list(QUOTE, list(QUOTE, QUOTE)),
													list(makeSymbol("GET-SLOT"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("CONFIDENCE-EXPRESSION"))))))),
									NIL),
								list(makeSymbol("BQ-LIST"), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-BLACKBOARD-POST")), makeSymbol("BLACKBOARD-VAR"), makeSymbol("POSTING-VAR"))))),
						makeSymbol("CASES")))),
					list(list(makeSymbol("CYBLACK-REMOVAL-EXPR-P"), makeSymbol("POSTING-EXPRESSION")), list(makeSymbol("CLET"),
						list(list(makeSymbol("EXECUTE-METHOD-BINDINGS"), list(makeSymbol("CYBLACK-POSTING-EXPR-GET-EXECUTE-METHOD-BINDINGS-METHOD"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("SELF")))), list(makeSymbol("IGNORE-CLAUSES"), NIL)),
						list(makeSymbol("CDOLIST-COLLECTING"), list(makeSymbol("BINDING"), makeSymbol("EXECUTE-METHOD-BINDINGS"), makeSymbol("IGNORE-CLAUSES")),
							list(makeSymbol("FIF"), list(makeSymbol("CONSP"), makeSymbol("BINDING")), list(makeSymbol("LIST"), list(QUOTE, makeSymbol("CYBLACK-SILENCE")), list(makeSymbol("CAR"), makeSymbol("BINDING"))),
								list(makeSymbol("LIST"), list(QUOTE, makeSymbol("CYBLACK-SILENCE")), makeSymbol("BINDING")))),
						list(makeSymbol("CSETQ"), makeSymbol("CASES"),
							list(makeSymbol("DOTTED-ASSOC-PUSH"),
								list(makeSymbol("GET-SLOT"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-PARENT"), makeSymbol("CYBLACK-DEFKS-EXPRESSION")), makeSymbol("POSTING-EXPRESSION")), list(QUOTE, makeSymbol("EXPRESSION-INDEX"))),
								list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("CLET")), list(makeSymbol("BQ-APPEND"), makeSymbol("EXECUTE-METHOD-BINDINGS"), NIL),
									list(makeSymbol("BQ-APPEND"), list(makeSymbol("FIF"), makeSymbol("IGNORE-CLAUSES"), makeSymbol("IGNORE-CLAUSES"), NIL),
										list(makeSymbol("BQ-LIST"),
											list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-BLACKBOARD-UNPOST")), makeSymbol("BLACKBOARD-VAR"),
												list(makeSymbol("GET-SLOT"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("POSTING-REFERENCE-EXPRESSION"))))))),
								makeSymbol("CASES"))))),
					list(list(makeSymbol("CYBLACK-DEACTIVATE-EXPR-P"), makeSymbol("POSTING-EXPRESSION")), list(makeSymbol("CSETQ"), makeSymbol("CASES"), list(makeSymbol("DOTTED-ASSOC-PUSH"),
						list(makeSymbol("GET-SLOT"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-PARENT"), makeSymbol("CYBLACK-DEFKS-EXPRESSION")), makeSymbol("POSTING-EXPRESSION")), list(QUOTE, makeSymbol("EXPRESSION-INDEX"))),
						list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CLET")),
							list(makeSymbol("BQ-APPEND"), list(makeSymbol("CYBLACK-POSTING-EXPR-GET-EXECUTE-METHOD-BINDINGS-METHOD"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("SELF"))), NIL),
							list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CSETQ")), makeSymbol("POSTING-VAR"), list(makeSymbol("GET-SLOT"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("POSTING-REFERENCE-EXPRESSION")))),
							list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("PWHEN")), makeSymbol("POSTING-VAR"),
								list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("CYBLACK-POSTING-SET-ACTIVE")), makeSymbol("POSTING-VAR"), list(QUOTE, list(NIL))))),
						makeSymbol("CASES")))),
					list(list(makeSymbol("CYBLACK-SET-RESULT-EXPRESSION-P"), makeSymbol("POSTING-EXPRESSION")), list(makeSymbol("CSETQ"), makeSymbol("CASES"), list(makeSymbol("DOTTED-ASSOC-PUSH"),
						list(makeSymbol("GET-SLOT"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-PARENT"), makeSymbol("CYBLACK-DEFKS-EXPRESSION")), makeSymbol("POSTING-EXPRESSION")), list(QUOTE, makeSymbol("EXPRESSION-INDEX"))),
						list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CLET")),
							list(makeSymbol("BQ-APPEND"), list(makeSymbol("CYBLACK-POSTING-EXPR-GET-EXECUTE-METHOD-BINDINGS-METHOD"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("SELF"))), NIL),
							list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CSETQ")), makeSymbol("POSTING-VAR"), list(makeSymbol("GET-SLOT"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("POSTING-REFERENCE-EXPRESSION")))),
							list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("PWHEN")), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CAND")), makeSymbol("POSTING-VAR"), makeSymbol("APPLICATION-VAR")),
								list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-APPLICATION-SET-RESULT")), makeSymbol("APPLICATION-VAR"), makeSymbol("POSTING-VAR")))),
						makeSymbol("CASES")))),
					list(list(makeSymbol("CYBLACK-RETURN-EXPRESSION-P"), makeSymbol("POSTING-EXPRESSION")), list(makeSymbol("CSETQ"), makeSymbol("CASES"), list(makeSymbol("DOTTED-ASSOC-PUSH"),
						list(makeSymbol("GET-SLOT"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-PARENT"), makeSymbol("CYBLACK-DEFKS-EXPRESSION")), makeSymbol("POSTING-EXPRESSION")), list(QUOTE, makeSymbol("EXPRESSION-INDEX"))),
						list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CLET")),
							list(makeSymbol("BQ-APPEND"), list(makeSymbol("CYBLACK-POSTING-EXPR-GET-EXECUTE-METHOD-BINDINGS-METHOD"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("SELF"))), NIL),
							list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CSETQ")), makeSymbol("POSTING-VAR"), list(makeSymbol("GET-SLOT"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("POSTING-REFERENCE-EXPRESSION")))),
							list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("PWHEN")), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CAND")), makeSymbol("POSTING-VAR"), makeSymbol("APPLICATION-VAR")),
								list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-APPLICATION-SET-RESULT")), makeSymbol("APPLICATION-VAR"), makeSymbol("POSTING-VAR")),
								list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-APPLICATION-HALT")), makeSymbol("APPLICATION-VAR")))),
						makeSymbol("CASES")))),
					list(list(makeSymbol("CYBLACK-RESET-ACTION-EXPRESSION-P"), makeSymbol("POSTING-EXPRESSION")), list(makeSymbol("CSETQ"), makeSymbol("CASES"), list(makeSymbol("DOTTED-ASSOC-PUSH"),
						list(makeSymbol("GET-SLOT"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-PARENT"), makeSymbol("CYBLACK-DEFKS-EXPRESSION")), makeSymbol("POSTING-EXPRESSION")), list(QUOTE, makeSymbol("EXPRESSION-INDEX"))),
						list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CLET")),
							list(makeSymbol("BQ-APPEND"), list(makeSymbol("CYBLACK-POSTING-EXPR-GET-EXECUTE-METHOD-BINDINGS-METHOD"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("SELF"))), NIL),
							list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("PWHEN")), makeSymbol("APPLICATION-VAR"),
								list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("FUNCALL-INSTANCE-METHOD")), makeSymbol("APPLICATION-VAR"), list(QUOTE, list(QUOTE, makeSymbol("RESET"))),
									list(makeSymbol("BQ-LIST"), list(QUOTE, QUOTE),
										list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-DESTINATION-LIST"), makeSymbol("CYBLACK-RESET-ACTION-EXPRESSION")), makeSymbol("POSTING-EXPRESSION")))))),
						makeSymbol("CASES")))),
					list(list(makeSymbol("CYBLACK-ERROR-EXPRESSION-P"), makeSymbol("POSTING-EXPRESSION")), list(makeSymbol("CSETQ"), makeSymbol("CASES"), list(makeSymbol("DOTTED-ASSOC-PUSH"),
						list(makeSymbol("GET-SLOT"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-PARENT"), makeSymbol("CYBLACK-DEFKS-EXPRESSION")), makeSymbol("POSTING-EXPRESSION")), list(QUOTE, makeSymbol("EXPRESSION-INDEX"))),
						list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CLET")),
							list(makeSymbol("BQ-APPEND"), list(makeSymbol("CYBLACK-POSTING-EXPR-GET-EXECUTE-METHOD-BINDINGS-METHOD"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("SELF"))), NIL),
							list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CSETQ")), makeSymbol("POSTING-VAR"), list(makeSymbol("GET-SLOT"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("POSTING-REFERENCE-EXPRESSION")))),
							list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("PWHEN")), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CAND")), makeSymbol("POSTING-VAR"), makeSymbol("APPLICATION-VAR")),
								list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("CYBLACK-APPLICATION-SET-RESULT")), makeSymbol("APPLICATION-VAR"), list(QUOTE, list(makeKeyword("ERROR")))),
								list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("ERROR")), list(makeSymbol("CYBLACK-ERROR-EXPRESSION-GET-ERROR-STRING-METHOD"), makeSymbol("POSTING-EXPRESSION")),
									list(makeSymbol("CYBLACK-ERROR-EXPRESSION-GET-ERROR-ARGS-METHOD"), makeSymbol("POSTING-EXPRESSION"))))),
						makeSymbol("CASES")))),
					list(list(makeSymbol("CYBLACK-HALT-EXPRESSION-P"), makeSymbol("POSTING-EXPRESSION")),
						list(makeSymbol("CSETQ"), makeSymbol("CASES"),
							list(makeSymbol("DOTTED-ASSOC-PUSH"),
								list(makeSymbol("GET-SLOT"), list(makeSymbol("INLINE-METHOD"), list(makeSymbol("GET-PARENT"), makeSymbol("CYBLACK-DEFKS-EXPRESSION")), makeSymbol("POSTING-EXPRESSION")), list(QUOTE, makeSymbol("EXPRESSION-INDEX"))),
								list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CLET")),
									list(makeSymbol("BQ-APPEND"), list(makeSymbol("CYBLACK-POSTING-EXPR-GET-EXECUTE-METHOD-BINDINGS-METHOD"), makeSymbol("POSTING-EXPRESSION"), list(QUOTE, makeSymbol("SELF"))), NIL),
									list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("PWHEN")), makeSymbol("APPLICATION-VAR"),
										list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("CYBLACK-APPLICATION-SET-RESULT")), makeSymbol("APPLICATION-VAR"), list(QUOTE, list(makeKeyword("HALTED")))),
										list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-APPLICATION-HALT")), makeSymbol("APPLICATION-VAR")))),
								makeSymbol("CASES")))) })),
			list(makeSymbol("CDOLIST"), list(makeSymbol("CASE"), makeSymbol("CASES")), list(makeSymbol("RPLACD"), makeSymbol("CASE"), list(makeSymbol("CYBLACK-FLATTEN-PROGNS"), list(makeSymbol("CYBLACK-CLET-MERGE"), list(makeSymbol("CDR"), makeSymbol("CASE")))))),
			list(RET, list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("DEF-INSTANCE-METHOD")),
				list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("EXECUTE")), makeSymbol("KSI-CLASS"), list(QUOTE, list(makeKeyword("NO-MEMBER-VARIABLES"), makeKeyword("PUBLIC")))), NIL,
				list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("CLET")),
					list(makeSymbol("BQ-LIST"), list(makeSymbol("BQ-CONS"), makeSymbol("APPLICATION-VAR"), list(QUOTE, list(list(makeSymbol("GET-APPLICATION"), makeSymbol("SELF"))))),
						list(makeSymbol("BQ-CONS"), makeSymbol("KSI-INDEX-VAR"), list(QUOTE, list(list(makeSymbol("GET-KSI-INDEX"), makeSymbol("SELF")))))),
					list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-SILENCE")), makeSymbol("KSI-INDEX-VAR")),
					list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("MUST")), makeSymbol("APPLICATION-VAR"), list(QUOTE, list(makeString("(EXECUTE ~S): No application is associated with this KSI."), makeSymbol("SELF")))),
					list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CLET")),
						list(makeSymbol("BQ-LIST"), list(makeSymbol("BQ-LIST"), makeSymbol("BLACKBOARD-VAR"), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-APPLICATION-GET-BLACKBOARD")), makeSymbol("APPLICATION-VAR")))),
						list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("MUST")), makeSymbol("BLACKBOARD-VAR"), makeString("(EXECUTE ~S): No blackboard is associated with application ~S."), list(QUOTE, makeSymbol("SELF")),
							makeSymbol("APPLICATION-VAR")),
						list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CLET")),
							list(makeSymbol("BQ-LIST"), list(makeSymbol("BQ-LIST"), makeSymbol("DATATYPE-DICTIONARY-VAR"), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-APPLICATION-GET-DATATYPE-DICTIONARY")), makeSymbol("APPLICATION-VAR")))),
							list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("MUST")), makeSymbol("DATATYPE-DICTIONARY-VAR"), makeString("(EXECUTE ~S): No datatype dictionary is associated with application ~S."),
								list(QUOTE, makeSymbol("SELF")), makeSymbol("APPLICATION-VAR")),
							list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CLET")), list(makeSymbol("BQ-LIST"), makeSymbol("DATATYPE-VAR"), makeSymbol("POSTING-VAR")),
								list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-SILENCE")), makeSymbol("DATATYPE-VAR")), list(makeSymbol("BQ-LIST"), list(QUOTE, makeSymbol("CYBLACK-SILENCE")), makeSymbol("POSTING-VAR")),
								list(makeSymbol("BQ-LIST*"), list(QUOTE, makeSymbol("PCASE")), makeSymbol("KSI-INDEX-VAR"), list(makeSymbol("BQ-APPEND"), makeSymbol("CASES"), NIL))))),
					list(QUOTE, list(list(RET, NIL))))))));
    }

    private static final SubLObject _constant_1181_initializer() {
	return list(new SubLObject[] { list(makeSymbol("ASSISTANT"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("KS-ROOT-NAME"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("KS-NAME"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
		list(makeSymbol("SUPER-KS-ROOT-NAME"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("SUPER-KS-NAME"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("PROPOSAL-NAME"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
		list(makeSymbol("SUPER-PROPOSAL-NAME"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("KSI-NAME"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("SUPER-KSI-NAME"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
		list(makeSymbol("INTERFACE-NAMES"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("PRECONDITION-PATTERN"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("PARSER-FUNCTION"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
		list(makeSymbol("UNPARSED-BODY"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("PARSED-BODY"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("EXTERNAL-MODULE-NAME"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
		list(makeSymbol("PORT-ID"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("EXTERNAL-P"), makeKeyword("BOOLEAN"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")),
		list(makeSymbol("ADDED-DECLARATIONS-FOR-KS-CLASS"), makeKeyword("INSTANCE"), makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("INITIALIZE"), NIL, makeKeyword("PROTECTED")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ASSISTANT"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ASSISTANT"), list(makeSymbol("NEW-ASSISTANT")), makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-UNIFIER-CLASS"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-POST-AT-WILL"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-POST-AT-WILL"), list(makeSymbol("NEW-STATE")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KS-ROOT-NAME"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-KS-ROOT-NAME"), list(makeSymbol("NEW-KS-ROOT-NAME")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KS-NAME"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-KS-NAME"), list(makeSymbol("NEW-KS-NAME")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-SUPER-KS-ROOT-NAME"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-SUPER-KS-ROOT-NAME"), list(makeSymbol("NEW-SUPER-KS-ROOT-NAME")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-SUPER-KS-NAME"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-SUPER-KS-NAME"), list(makeSymbol("NEW-SUPER-KS-NAME")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PROPOSAL-NAME"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-PROPOSAL-NAME"), list(makeSymbol("NEW-PROPOSAL-NAME")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-SUPER-PROPOSAL-NAME"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-SUPER-PROPOSAL-NAME"), list(makeSymbol("NEW-SUPER-PROPOSAL-NAME")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KSI-NAME"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-KSI-NAME"), list(makeSymbol("NEW-KSI-NAME")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-SUPER-KSI-NAME"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-SUPER-KSI-NAME"), list(makeSymbol("NEW-SUPER-KSI-NAME")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-INTERFACE-NAMES"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-INTERFACE-NAMES"), list(makeSymbol("NEW-INTERFACE-NAMES")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PRECONDITION-PATTERN"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-PRECONDITION-PATTERN"), list(makeSymbol("NEW-PRECONDITION-PATTERN")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PRECONDITION-PATTERN-VARS"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PARSER-FUNCTION"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-PARSER-FUNCTION"), list(makeSymbol("NEW-PARSER-FUNCTION")), makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-UNPARSED-BODY"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-UNPARSED-BODY"), list(makeSymbol("NEW-UNPARSED-BODY")), makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PARSED-BODY"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-PARSED-BODY"), list(makeSymbol("NEW-PARSED-BODY")), makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KS-DECLARATION"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KS-INITIALIZE-DEFINITION"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KS-ON-STARTUP-DEFINITION"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KS-CREATE-PROPOSALS-DEFINITION"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KS-GENERATE-KSI-DEFINITION"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KS-METHOD-DEFINITIONS"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PROPOSAL-DECLARATION"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PROPOSAL-INITIALIZE-DEFINITION"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PROPOSAL-GENERATE-KSI-DEFINITION"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PROPOSAL-METHOD-DEFINITIONS"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KSI-DECLARATION"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KSI-INITIALIZE-DEFINITION"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KSI-CREATE-POSTING-DEFINITION"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KSI-EXECUTE-DEFINITION"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-KSI-METHOD-DEFINITIONS"), NIL, makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-EXTERNAL-MODULE-NAME"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-EXTERNAL-MODULE-NAME"), list(makeSymbol("NEW-EXTERNAL-MODULE-NAME")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-PORT-ID"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-PORT-ID"), list(makeSymbol("NEW-PORT-ID")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("IS-EXTERNAL"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-EXTERNAL"), list(makeSymbol("NEW-STATE")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GET-ADDED-DECLARATIONS-FOR-KS-CLASS"), NIL, makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SET-ADDED-DECLARATIONS-FOR-KS-CLASS"), list(makeSymbol("NEW-DECLS")), makeKeyword("PUBLIC")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("ADD-DECLARATION-FOR-KS-CLASS"), list(makeSymbol("DECL")), makeKeyword("PUBLIC")),
		list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("HAS-ADDED-DECLARATION-FOR-METHOD-P"), list(makeSymbol("METHOD-NAME")), makeKeyword("PUBLIC")) });
    }

    // // Initializers
    @Override
    public void declareFunctions() {
	declare_cyblack_defks_file();
    }

    @Override
    public void initializeVariables() {
	init_cyblack_defks_file();
    }

    @Override
    public void runTopLevelForms() {
	setup_cyblack_defks_file();
    }
}
