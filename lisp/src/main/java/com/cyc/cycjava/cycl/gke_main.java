/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 */
package com.cyc.cycjava.cycl;


import static com.cyc.cycjava.cycl.access_macros.register_external_symbol;
import static com.cyc.cycjava.cycl.collection_defns.cycl_atomic_sentenceP;
import static com.cyc.cycjava.cycl.collection_defns.cycl_open_formulaP;
import static com.cyc.cycjava.cycl.constant_handles.reader_make_constant_shell;
import static com.cyc.cycjava.cycl.constant_handles.valid_constantP;
import static com.cyc.cycjava.cycl.control_vars.$within_assert$;
import static com.cyc.cycjava.cycl.cyc_testing.generic_testing.define_test_case_table_int;
import static com.cyc.cycjava.cycl.el_utilities.atomic_sentenceP;
import static com.cyc.cycjava.cycl.el_utilities.copy_expression;
import static com.cyc.cycjava.cycl.el_utilities.correct_variable;
import static com.cyc.cycjava.cycl.el_utilities.el_conjunction_p;
import static com.cyc.cycjava.cycl.el_utilities.el_disjunction_p;
import static com.cyc.cycjava.cycl.el_utilities.el_formula_p;
import static com.cyc.cycjava.cycl.el_utilities.el_set_items;
import static com.cyc.cycjava.cycl.el_utilities.formula_arityG;
import static com.cyc.cycjava.cycl.el_utilities.formula_has_arg_position_p;
import static com.cyc.cycjava.cycl.el_utilities.literalP;
import static com.cyc.cycjava.cycl.el_utilities.make_binary_formula;
import static com.cyc.cycjava.cycl.el_utilities.make_el_formula;
import static com.cyc.cycjava.cycl.el_utilities.make_existential;
import static com.cyc.cycjava.cycl.el_utilities.optimize_el_formula_variable_name;
import static com.cyc.cycjava.cycl.el_utilities.optimize_el_formula_variable_names;
import static com.cyc.cycjava.cycl.el_utilities.possibly_naut_p;
import static com.cyc.cycjava.cycl.el_utilities.quantified_sub_sentence;
import static com.cyc.cycjava.cycl.el_utilities.replace_formula_arg;
import static com.cyc.cycjava.cycl.el_utilities.replace_formula_arg_position;
import static com.cyc.cycjava.cycl.el_utilities.sentence_free_variables;
import static com.cyc.cycjava.cycl.html_utilities.html_markup;
import static com.cyc.cycjava.cycl.id_index.do_id_index_empty_p;
import static com.cyc.cycjava.cycl.id_index.do_id_index_id_and_object_validP;
import static com.cyc.cycjava.cycl.id_index.do_id_index_next_id;
import static com.cyc.cycjava.cycl.id_index.do_id_index_next_state;
import static com.cyc.cycjava.cycl.id_index.do_id_index_state_object;
import static com.cyc.cycjava.cycl.id_index.id_index_count;
import static com.cyc.cycjava.cycl.id_index.id_index_dense_objects;
import static com.cyc.cycjava.cycl.id_index.id_index_dense_objects_empty_p;
import static com.cyc.cycjava.cycl.id_index.id_index_objects_empty_p;
import static com.cyc.cycjava.cycl.id_index.id_index_skip_tombstones_p;
import static com.cyc.cycjava.cycl.id_index.id_index_sparse_objects;
import static com.cyc.cycjava.cycl.id_index.id_index_sparse_objects_empty_p;
import static com.cyc.cycjava.cycl.id_index.id_index_tombstone_p;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.continuable_inference_p;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.find_inference_answer_by_id;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_id_index;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_inference;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_hypothetical_bindings;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_mt;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_status;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_suid;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_suspend_status;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.running_inference_p;
import static com.cyc.cycjava.cycl.kb_indexing_datastructures.indexed_term_p;
import static com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars.$resourced_sbhl_marking_space_limit$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars.$resourced_sbhl_marking_spaces$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars.determine_resource_limit;
import static com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars.possibly_new_marking_resource;
import static com.cyc.cycjava.cycl.subl_macro_promotions.declare_defglobal;
import static com.cyc.cycjava.cycl.utilities_macros.$last_percent_progress_index$;
import static com.cyc.cycjava.cycl.utilities_macros.$last_percent_progress_prediction$;
import static com.cyc.cycjava.cycl.utilities_macros.$percent_progress_start_time$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_note$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_sofar$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_start_time$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_total$;
import static com.cyc.cycjava.cycl.utilities_macros.$within_noting_percent_progress$;
import static com.cyc.cycjava.cycl.utilities_macros.note_funcall_helper_function;
import static com.cyc.cycjava.cycl.utilities_macros.note_percent_progress;
import static com.cyc.cycjava.cycl.utilities_macros.noting_percent_progress_postamble;
import static com.cyc.cycjava.cycl.utilities_macros.noting_percent_progress_preamble;
import static com.cyc.cycjava.cycl.utilities_macros.register_cyc_api_function;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.append;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.cons;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.listS;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.nth;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.rplaca;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.rplacd;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.bind_dynamic_vars;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.extract_dynamic_values;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.rebind_dynamic_vars;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.equal;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.identity;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.funcall;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntryKey;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntrySetIterator;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntryValue;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.gethash;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.iteratorHasNext;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.iteratorNextEntry;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.make_hash_table;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.releaseEntrySetIterator;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.remhash;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.sethash;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.add;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.integerDivide;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.max;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.mod;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.subtract;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow.format;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.delete;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.delete_duplicates;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.delete_if;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.length;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.nreverse;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.remove;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.remove_duplicates;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.remove_if;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.reverse;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.def_csetf;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.makeStructDeclNative;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.register_method;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.boundp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_function;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.$is_thread_performing_cleanupP$;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.current_process;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.sleep;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Time.get_universal_time;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.listp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.stringp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.arg2;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.getValuesAsVector;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.multiple_value_list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.resetMultipleValues;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.restoreValuesFromVector;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.values;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors.aref;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors.make_vector;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors.set_aref;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeBoolean;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeInteger;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeKeyword;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeString;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeSymbol;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.cdestructuring_bind_error;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.destructuring_bind_must_consp;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.butlast;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.cadr;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.cddr;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.copy_list;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.copy_tree;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.intersection;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.last;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.member;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.nsublis;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.putf;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.second;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.sublis;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.third;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.union;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.$print_object_method_table$;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.princ;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.print;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader.bq_cons;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.close;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.get_output_stream_string;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.make_private_string_output_stream;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.terpri;
import static com.cyc.tool.subl.util.SubLFiles.declareFunction;
import static com.cyc.tool.subl.util.SubLFiles.defconstant;
import static com.cyc.tool.subl.util.SubLFiles.deflexical;
import static com.cyc.tool.subl.util.SubLFiles.defparameter;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;

import org.armedbear.lisp.Lisp;

import com.cyc.cycjava.cycl.inference.ask_utilities;
import com.cyc.cycjava.cycl.inference.harness.abnormal;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem_store;
import com.cyc.cycjava.cycl.inference.harness.inference_kernel;
import com.cyc.cycjava.cycl.inference.harness.inference_strategist;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Mapping;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.ReadWriteLocks;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sort;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.StreamsLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Strings;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLSpecialOperatorDeclarations;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDecl;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDeclNative;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.UnaryFunction;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLStructNative;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLInteger;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.visitation;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLFiles;
import com.cyc.tool.subl.util.SubLFiles.LispMethod;
import com.cyc.tool.subl.util.SubLTrampolineFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;


/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 * module:      GKE-MAIN
 * source file: /cyc/top/cycl/gke-main.lisp
 * created:     2019/07/03 17:37:55
 */
public final class gke_main extends SubLTranslatedFile implements V12 {
    /**
     * Call CANDIDATE-REPLACEMENT-RENDERERS-FOR-SENTENCE on a bunch of saved queries.
     */
    @LispMethod(comment = "Call CANDIDATE-REPLACEMENT-RENDERERS-FOR-SENTENCE on a bunch of saved queries.")
    public static final SubLObject test_cae_user_query_replacements() {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject done_count = ZERO_INTEGER;
                SubLObject found_count = ZERO_INTEGER;
                SubLObject literals = set.new_set(symbol_function(EQUAL), UNPROVIDED);
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
                        mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
                        {
                            SubLObject template = NIL;
                            SubLObject pred_var = $$folderContainsResource;
                            if (NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(narts_high.find_nart($list_alt107), NIL, pred_var)) {
                                {
                                    SubLObject iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(narts_high.find_nart($list_alt107), NIL, pred_var);
                                    SubLObject done_var = NIL;
                                    SubLObject token_var = NIL;
                                    while (NIL == done_var) {
                                        {
                                            SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
                                            SubLObject valid = makeBoolean(token_var != final_index_spec);
                                            if (NIL != valid) {
                                                {
                                                    SubLObject final_index_iterator = NIL;
                                                    try {
                                                        final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, $GAF, NIL, NIL);
                                                        {
                                                            SubLObject done_var_39 = NIL;
                                                            SubLObject token_var_40 = NIL;
                                                            while (NIL == done_var_39) {
                                                                {
                                                                    SubLObject assertion = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_40);
                                                                    SubLObject valid_41 = makeBoolean(token_var_40 != assertion);
                                                                    if (NIL != valid_41) {
                                                                        template = assertions_high.gaf_arg(assertion, TWO_INTEGER);
                                                                        if (NIL != isa.isaP(template, $$FormulaTemplate, UNPROVIDED, UNPROVIDED)) {
                                                                            {
                                                                                SubLObject query_spec = NIL;
                                                                                SubLObject pred_var_42 = $const110$querySpecificationForFormulaTempl;
                                                                                if (NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(template, NIL, pred_var_42)) {
                                                                                    {
                                                                                        SubLObject iterator_var_43 = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(template, NIL, pred_var_42);
                                                                                        SubLObject done_var_44 = NIL;
                                                                                        SubLObject token_var_45 = NIL;
                                                                                        while (NIL == done_var_44) {
                                                                                            {
                                                                                                SubLObject final_index_spec_46 = iteration.iteration_next_without_values_macro_helper(iterator_var_43, token_var_45);
                                                                                                SubLObject valid_47 = makeBoolean(token_var_45 != final_index_spec_46);
                                                                                                if (NIL != valid_47) {
                                                                                                    {
                                                                                                        SubLObject final_index_iterator_48 = NIL;
                                                                                                        try {
                                                                                                            final_index_iterator_48 = kb_mapping_macros.new_final_index_iterator(final_index_spec_46, $GAF, NIL, NIL);
                                                                                                            {
                                                                                                                SubLObject done_var_49 = NIL;
                                                                                                                SubLObject token_var_50 = NIL;
                                                                                                                while (NIL == done_var_49) {
                                                                                                                    {
                                                                                                                        SubLObject assertion_51 = iteration.iteration_next_without_values_macro_helper(final_index_iterator_48, token_var_50);
                                                                                                                        SubLObject valid_52 = makeBoolean(token_var_50 != assertion_51);
                                                                                                                        if (NIL != valid_52) {
                                                                                                                            query_spec = assertions_high.gaf_arg(assertion_51, TWO_INTEGER);
                                                                                                                            {
                                                                                                                                SubLObject quoted_sentence = NIL;
                                                                                                                                SubLObject pred_var_53 = $const111$sentenceParameterValueInSpecifica;
                                                                                                                                if (NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(query_spec, TWO_INTEGER, pred_var_53)) {
                                                                                                                                    {
                                                                                                                                        SubLObject iterator_var_54 = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(query_spec, TWO_INTEGER, pred_var_53);
                                                                                                                                        SubLObject done_var_55 = NIL;
                                                                                                                                        SubLObject token_var_56 = NIL;
                                                                                                                                        while (NIL == done_var_55) {
                                                                                                                                            {
                                                                                                                                                SubLObject final_index_spec_57 = iteration.iteration_next_without_values_macro_helper(iterator_var_54, token_var_56);
                                                                                                                                                SubLObject valid_58 = makeBoolean(token_var_56 != final_index_spec_57);
                                                                                                                                                if (NIL != valid_58) {
                                                                                                                                                    {
                                                                                                                                                        SubLObject final_index_iterator_59 = NIL;
                                                                                                                                                        try {
                                                                                                                                                            final_index_iterator_59 = kb_mapping_macros.new_final_index_iterator(final_index_spec_57, $GAF, NIL, NIL);
                                                                                                                                                            {
                                                                                                                                                                SubLObject done_var_60 = NIL;
                                                                                                                                                                SubLObject token_var_61 = NIL;
                                                                                                                                                                while (NIL == done_var_60) {
                                                                                                                                                                    {
                                                                                                                                                                        SubLObject assertion_62 = iteration.iteration_next_without_values_macro_helper(final_index_iterator_59, token_var_61);
                                                                                                                                                                        SubLObject valid_63 = makeBoolean(token_var_61 != assertion_62);
                                                                                                                                                                        if (NIL != valid_63) {
                                                                                                                                                                            quoted_sentence = assertions_high.gaf_arg(assertion_62, ONE_INTEGER);
                                                                                                                                                                            {
                                                                                                                                                                                SubLObject sentence = cycl_utilities.formula_arg1(quoted_sentence, UNPROVIDED);
                                                                                                                                                                                SubLObject mt = NIL;
                                                                                                                                                                                SubLObject pred_var_64 = $const112$microtheoryParameterValueInSpecif;
                                                                                                                                                                                if (NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(query_spec, TWO_INTEGER, pred_var_64)) {
                                                                                                                                                                                    {
                                                                                                                                                                                        SubLObject iterator_var_65 = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(query_spec, TWO_INTEGER, pred_var_64);
                                                                                                                                                                                        SubLObject done_var_66 = NIL;
                                                                                                                                                                                        SubLObject token_var_67 = NIL;
                                                                                                                                                                                        while (NIL == done_var_66) {
                                                                                                                                                                                            {
                                                                                                                                                                                                SubLObject final_index_spec_68 = iteration.iteration_next_without_values_macro_helper(iterator_var_65, token_var_67);
                                                                                                                                                                                                SubLObject valid_69 = makeBoolean(token_var_67 != final_index_spec_68);
                                                                                                                                                                                                if (NIL != valid_69) {
                                                                                                                                                                                                    {
                                                                                                                                                                                                        SubLObject final_index_iterator_70 = NIL;
                                                                                                                                                                                                        try {
                                                                                                                                                                                                            final_index_iterator_70 = kb_mapping_macros.new_final_index_iterator(final_index_spec_68, $GAF, NIL, NIL);
                                                                                                                                                                                                            {
                                                                                                                                                                                                                SubLObject done_var_71 = NIL;
                                                                                                                                                                                                                SubLObject token_var_72 = NIL;
                                                                                                                                                                                                                while (NIL == done_var_71) {
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        SubLObject assertion_73 = iteration.iteration_next_without_values_macro_helper(final_index_iterator_70, token_var_72);
                                                                                                                                                                                                                        SubLObject valid_74 = makeBoolean(token_var_72 != assertion_73);
                                                                                                                                                                                                                        if (NIL != valid_74) {
                                                                                                                                                                                                                            mt = assertions_high.gaf_arg(assertion_73, ONE_INTEGER);
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                SubLObject stack = stacks.create_stack();
                                                                                                                                                                                                                                SubLObject literal = NIL;
                                                                                                                                                                                                                                stacks.stack_push(sentence, stack);
                                                                                                                                                                                                                                while (NIL == stacks.stack_empty_p(stack)) {
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        SubLObject entry = stacks.stack_pop(stack);
                                                                                                                                                                                                                                        if (NIL != literalP(entry)) {
                                                                                                                                                                                                                                            literal = entry;
                                                                                                                                                                                                                                            set.set_add(cons(literal, mt), literals);
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            SubLObject cdolist_list_var = cycl_utilities.formula_args(entry, UNPROVIDED);
                                                                                                                                                                                                                                            SubLObject arg = NIL;
                                                                                                                                                                                                                                            for (arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , arg = cdolist_list_var.first()) {
                                                                                                                                                                                                                                                stacks.stack_push(arg, stack);
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                } 
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        done_var_71 = makeBoolean(NIL == valid_74);
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                } 
                                                                                                                                                                                                            }
                                                                                                                                                                                                        } finally {
                                                                                                                                                                                                            {
                                                                                                                                                                                                                SubLObject _prev_bind_0_75 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                                                                                                                                                try {
                                                                                                                                                                                                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                                                                                                                                                                                                    if (NIL != final_index_iterator_70) {
                                                                                                                                                                                                                        kb_mapping_macros.destroy_final_index_iterator(final_index_iterator_70);
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                } finally {
                                                                                                                                                                                                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_75, thread);
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                                done_var_66 = makeBoolean(NIL == valid_69);
                                                                                                                                                                                            }
                                                                                                                                                                                        } 
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        done_var_60 = makeBoolean(NIL == valid_63);
                                                                                                                                                                    }
                                                                                                                                                                } 
                                                                                                                                                            }
                                                                                                                                                        } finally {
                                                                                                                                                            {
                                                                                                                                                                SubLObject _prev_bind_0_76 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                                                                                                try {
                                                                                                                                                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                                                                                                                                                    if (NIL != final_index_iterator_59) {
                                                                                                                                                                        kb_mapping_macros.destroy_final_index_iterator(final_index_iterator_59);
                                                                                                                                                                    }
                                                                                                                                                                } finally {
                                                                                                                                                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_76, thread);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                done_var_55 = makeBoolean(NIL == valid_58);
                                                                                                                                            }
                                                                                                                                        } 
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        done_var_49 = makeBoolean(NIL == valid_52);
                                                                                                                    }
                                                                                                                } 
                                                                                                            }
                                                                                                        } finally {
                                                                                                            {
                                                                                                                SubLObject _prev_bind_0_77 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                                                try {
                                                                                                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                                                                                                    if (NIL != final_index_iterator_48) {
                                                                                                                        kb_mapping_macros.destroy_final_index_iterator(final_index_iterator_48);
                                                                                                                    }
                                                                                                                } finally {
                                                                                                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_77, thread);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                done_var_44 = makeBoolean(NIL == valid_47);
                                                                                            }
                                                                                        } 
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    done_var_39 = makeBoolean(NIL == valid_41);
                                                                }
                                                            } 
                                                        }
                                                    } finally {
                                                        {
                                                            SubLObject _prev_bind_0_78 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                            try {
                                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                                if (NIL != final_index_iterator) {
                                                                    kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
                                                                }
                                                            } finally {
                                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_78, thread);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            done_var = makeBoolean(NIL == valid);
                                        }
                                    } 
                                }
                            }
                        }
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                {
                    SubLObject period = max(integerDivide(set.set_size(literals), TEN_INTEGER), ONE_INTEGER);
                    SubLObject set_var = literals;
                    $progress_note$.setDynamicValue($str_alt113$Testing_replacements_for_saved_qu, thread);
                    $progress_start_time$.setDynamicValue(get_universal_time(), thread);
                    $progress_total$.setDynamicValue(set.set_size(set_var), thread);
                    $progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
                    {
                        SubLObject _prev_bind_0 = $last_percent_progress_index$.currentBinding(thread);
                        SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
                        SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
                        SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
                        try {
                            $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
                            $last_percent_progress_prediction$.bind(NIL, thread);
                            $within_noting_percent_progress$.bind(T, thread);
                            $percent_progress_start_time$.bind(get_universal_time(), thread);
                            noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
                            {
                                SubLObject set_contents_var = set.do_set_internal(set_var);
                                SubLObject basis_object = set_contents.do_set_contents_basis_object(set_contents_var);
                                SubLObject state = NIL;
                                for (state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                    {
                                        SubLObject literalXmt = set_contents.do_set_contents_next(basis_object, state);
                                        if (NIL != set_contents.do_set_contents_element_validP(state, literalXmt)) {
                                            note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
                                            $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
                                            {
                                                SubLObject datum = literalXmt;
                                                SubLObject current = datum;
                                                SubLObject literal = NIL;
                                                SubLObject mt = NIL;
                                                destructuring_bind_must_consp(current, datum, $list_alt114);
                                                literal = current.first();
                                                current = current.rest();
                                                mt = current;
                                                if (NIL != list_utilities.non_empty_list_p(com.cyc.cycjava.cycl.gke_main.candidate_replacement_renderers_for_sentence(literal, mt, UNPROVIDED))) {
                                                    found_count = add(found_count, ONE_INTEGER);
                                                }
                                                done_count = add(done_count, ONE_INTEGER);
                                                if (mod(done_count, period).isZero()) {
                                                    format(T, $str_alt115$___D_of__D_had_suggestions___, found_count, done_count);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            noting_percent_progress_postamble();
                        } finally {
                            $percent_progress_start_time$.rebind(_prev_bind_3, thread);
                            $within_noting_percent_progress$.rebind(_prev_bind_2, thread);
                            $last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
                            $last_percent_progress_index$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
            }
            return NIL;
        }
    }

    public static final SubLObject subloop_reserved_initialize_gke_literal_manipulation_test_case_instance(SubLObject new_instance) {
        classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
        classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
        classes.subloop_initialize_slot(new_instance, TEST_CASE, RESULT, NIL);
        classes.subloop_initialize_slot(new_instance, TEST_CASE, TEST_METHOD, NIL);
        return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_gke_literal_manipulation_test_case_class(SubLObject new_instance) {
        classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
        classes.subloop_initialize_slot(new_instance, TEST_CASE, MODULE, NIL);
        classes.subloop_initialize_slot(new_instance, TEST_CASE, CATEGORIES, NIL);
        classes.subloop_initialize_slot(new_instance, TEST_CASE, SUITES, NIL);
        classes.subloop_initialize_slot(new_instance, TEST_CASE, TEST_METHODS, NIL);
        classes.subloop_initialize_slot(new_instance, TEST_CASE, ENABLED, NIL);
        classes.subloop_initialize_slot(new_instance, TEST_CASE, LOCK, NIL);
        return NIL;
    }

    public static final SubLObject gke_literal_manipulation_test_case_p(SubLObject gke_literal_manipulation_test_case) {
        return classes.subloop_instanceof_class(gke_literal_manipulation_test_case, GKE_LITERAL_MANIPULATION_TEST_CASE);
    }

    private static final SubLObject _constant_311_initializer() {
        return list(new SubLObject[]{ list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), makeSymbol("?PERSON")), list(TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), reader_make_constant_shell("OsamaBinLaden"))), list(list(reader_make_constant_shell("Person"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y")), list(TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("isa"), makeSymbol("?X"), reader_make_constant_shell("Person"))), list(list(reader_make_constant_shell("Person"), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), makeSymbol("?PERSON")), list(TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), NIL, NIL, NIL), NIL), list(list(reader_make_constant_shell("Person"), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), makeSymbol("?PERSON")), list(TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), makeSymbol("?PERSON")), list(reader_make_constant_shell("isa"), makeSymbol("?PERSON"), reader_make_constant_shell("Person")))), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y")), list(TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), NIL, NIL, NIL), NIL), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y")), list(TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("equals"), makeSymbol("?X"), reader_make_constant_shell("OsamaBinLaden"))), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y")), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), makeSymbol("?X"))), list(ONE_INTEGER, TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), reader_make_constant_shell("OsamaBinLaden"))), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y")), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), makeSymbol("?X")), list(reader_make_constant_shell("dateOfEvent"), makeSymbol("?EVENT"), makeSymbol("?DATE"))), list(ONE_INTEGER, TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), reader_make_constant_shell("OsamaBinLaden")), list(reader_make_constant_shell("dateOfEvent"), makeSymbol("?EVENT"), makeSymbol("?DATE")))), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("dateOfEvent"), makeSymbol("?EVENT"), makeSymbol("?DATE")), list(ONE_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), NIL), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("dateOfEvent"), makeSymbol("?EVENT"), makeSymbol("?DATE")), list(TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), NIL), list(list(reader_make_constant_shell("Person"), list(reader_make_constant_shell("dateOfEvent"), makeSymbol("?EVENT"), makeSymbol("?DATE")), list(ONE_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), NIL), list(list(reader_make_constant_shell("Person"), list(reader_make_constant_shell("dateOfEvent"), makeSymbol("?EVENT"), makeSymbol("?DATE")), list(TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), NIL), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), reader_make_constant_shell("Cat")), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y"))), list(TWO_INTEGER, TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), reader_make_constant_shell("Cat")), list(reader_make_constant_shell("equals"), makeSymbol("?X"), reader_make_constant_shell("OsamaBinLaden")))), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("isa"), makeSymbol("?WHO"), reader_make_constant_shell("Cat")), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("isa"), makeSymbol("?WHO"), makeSymbol("?Y")), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), makeSymbol("?WHO")))), list(TWO_INTEGER, ONE_INTEGER, TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("isa"), makeSymbol("?WHO"), reader_make_constant_shell("Cat")), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), reader_make_constant_shell("OsamaBinLaden")))), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("thereExists"), makeSymbol("?X"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y"))), list(TWO_INTEGER, TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("thereExists"), makeSymbol("?X"), list(reader_make_constant_shell("equals"), makeSymbol("?X"), reader_make_constant_shell("OsamaBinLaden")))), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("thereExists"), makeSymbol("?Y"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y"))), list(TWO_INTEGER, TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("equals"), makeSymbol("?X"), reader_make_constant_shell("OsamaBinLaden"))), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("thereExists"), makeSymbol("?Y"), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y")), list(reader_make_constant_shell("isa"), makeSymbol("?Z"), makeSymbol("?Y")))), list(TWO_INTEGER, ONE_INTEGER, TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("thereExists"), makeSymbol("?Y"), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("equals"), makeSymbol("?X"), reader_make_constant_shell("OsamaBinLaden")), list(reader_make_constant_shell("isa"), makeSymbol("?Z"), makeSymbol("?Y"))))), list(list(reader_make_constant_shell("Person"), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("beneficiary"), makeSymbol("?EVENT"), makeSymbol("?WHO")), list(reader_make_constant_shell("maleficiary"), makeSymbol("?EVENT"), makeSymbol("?WHO"))), list(ONE_INTEGER, TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("beneficiary"), makeSymbol("?EVENT"), makeSymbol("?BENEFICIARY")), list(reader_make_constant_shell("isa"), makeSymbol("?BENEFICIARY"), reader_make_constant_shell("Person"))), list(reader_make_constant_shell("maleficiary"), makeSymbol("?EVENT"), makeSymbol("?WHO")))), list(list(reader_make_constant_shell("Person"), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("beneficiary"), makeSymbol("?EVENT"), makeSymbol("?WHO")), list(reader_make_constant_shell("maleficiary"), makeSymbol("?EVENT"), makeSymbol("?WHO"))), list(ONE_INTEGER, TWO_INTEGER), T, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("beneficiary"), makeSymbol("?EVENT"), makeSymbol("?MALEFICIARY")), list(reader_make_constant_shell("maleficiary"), makeSymbol("?EVENT"), makeSymbol("?MALEFICIARY"))), list(reader_make_constant_shell("isa"), makeSymbol("?MALEFICIARY"), reader_make_constant_shell("Person")))) });
    }

    // Internal Constant Initializer Methods
    @LispMethod(comment = "Internal Constant Initializer Methods")
    private static final SubLObject _constant_308_initializer() {
        return list(list(list(list(reader_make_constant_shell("dataForValveOfEventRecordsStenosisSeverity"), makeSymbol("?CARDIAC-VALVE-DATA"), makeSymbol("?MEDICALLY-RELATED-EVENT"), list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), reader_make_constant_shell("MedicalResearchCAEGuidanceMt")), list(list(list(THREE_INTEGER), list(list(reader_make_constant_shell("CardiacValveStenosis_critical")), list(reader_make_constant_shell("CardiacValveStenosis_present")), list(reader_make_constant_shell("CardiacValveStenosis_trivial")), list(reader_make_constant_shell("Moderate-SevereToSevereCardiacValveStenosis"), list(list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("SeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")))), list(reader_make_constant_shell("ModerateToModerate-SevereToSevereCardiacValveStenosis"), list(list(reader_make_constant_shell("ModeratePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("SeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")))), list(reader_make_constant_shell("None-CardiacValveStenosis")), list(list(reader_make_constant_shell("MildPhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("MildToModeratePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))))))), list(list(list(reader_make_constant_shell("valveProsthesisTypeExplanted"), makeSymbol("?HEART-VALVE-REPLACEMENT"), reader_make_constant_shell("CardiacValveProsthesisModel3000"), makeSymbol("?VALVE-PROSTHESIS")), reader_make_constant_shell("MedicalResearchCAEGuidanceMt")), list(list(list(TWO_INTEGER), list(list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis"), list(reader_make_constant_shell("AorticAndMitralValveProsthesis"), list(reader_make_constant_shell("CardiacValveProsthesisModel52842007-D")), list(reader_make_constant_shell("CardiacValveProsthesisModelHALL"))), list(new SubLObject[]{ reader_make_constant_shell("AorticValveProsthesis"), list(reader_make_constant_shell("AorticSilasticBallValveProsthesis")), list(reader_make_constant_shell("AorticValveMechanicalProsthesis")), list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis-Aortic-Biological"), list(reader_make_constant_shell("CardiacValveProsthesis-3FAorticBioprosthesis"), list(reader_make_constant_shell("CardiacValveProsthesisModel1000"))), list(reader_make_constant_shell("CardiacValveProsthesisModel2625")), list(reader_make_constant_shell("CardiacValveProsthesisModel2700")), list(reader_make_constant_shell("CardiacValveProsthesisModel2700PM")), list(reader_make_constant_shell("CardiacValveProsthesisModel2800")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel9000IDE")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_3300TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_BSP100")), list(reader_make_constant_shell("CardiacValveProsthesisModelTF-IDE")) }), list(reader_make_constant_shell("CardiacValveProsthesis-AorticApex"), list(reader_make_constant_shell("CardiacValveProsthesisModel503DA"))), list(reader_make_constant_shell("CardiacValveProsthesis-AorticCompositeGraft"), list(reader_make_constant_shell("CardiacValveProsthesisModelXAGV"))), list(reader_make_constant_shell("CardiacValveProsthesis-AorticHighProfile"), list(reader_make_constant_shell("CardiacValveProsthesisModelAHP-105"))), list(reader_make_constant_shell("CardiacValveProsthesis-AorticSingleComponent"), list(reader_make_constant_shell("CardiacValveProsthesisModel320"))), list(reader_make_constant_shell("CardiacValveProsthesis-AorticStabilizedGlutaraldehydeProcess"), list(reader_make_constant_shell("CardiacValveProsthesisModel250"))), list(reader_make_constant_shell("CardiacValveProsthesis-CConvex-Concave"), list(reader_make_constant_shell("CardiacValveProsthesisModelAGVC"))), list(reader_make_constant_shell("CardiacValveProsthesis-FreestyleAorticRoot"), list(reader_make_constant_shell("CardiacValveProsthesisModel995"))), list(reader_make_constant_shell("CardiacValveProsthesis-MagnaAortic"), list(reader_make_constant_shell("CardiacValveProsthesisModel3000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_3300TFX"))), list(reader_make_constant_shell("CardiacValveProsthesis-MosaicUltraAortic"), list(reader_make_constant_shell("CardiacValveProsthesisModel305"))), list(reader_make_constant_shell("CardiacValveProsthesis-PremarketAortic"), list(reader_make_constant_shell("CardiacValveProsthesisModel2700PM"))), list(reader_make_constant_shell("CardiacValveProsthesis-PrimaPlusStentlessAortic"), list(reader_make_constant_shell("CardiacValveProsthesisModel2500P"))), list(reader_make_constant_shell("CardiacValveProsthesis-ReducedAortic"), list(reader_make_constant_shell("CardiacValveProsthesisModelR500"))), list(reader_make_constant_shell("CardiacValveProsthesisModel1200")), list(reader_make_constant_shell("CardiacValveProsthesisModel1260")), list(reader_make_constant_shell("CardiacValveProsthesisModel150")), list(reader_make_constant_shell("CardiacValveProsthesisModel2310")), list(reader_make_constant_shell("CardiacValveProsthesisModel2320")), list(reader_make_constant_shell("CardiacValveProsthesisModel242")), list(reader_make_constant_shell("CardiacValveProsthesisModel2650")), list(reader_make_constant_shell("CardiacValveProsthesisModel300")), list(reader_make_constant_shell("CardiacValveProsthesisModel3160")), list(reader_make_constant_shell("CardiacValveProsthesisModel350")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842006-D")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842006-F")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842050-B")), list(reader_make_constant_shell("CardiacValveProsthesisModel606366")), list(reader_make_constant_shell("CardiacValveProsthesisModelA-101")), list(reader_make_constant_shell("CardiacValveProsthesisModelABP")), list(reader_make_constant_shell("CardiacValveProsthesisModelAEC-102")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGFN-756")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGFN-756-IDE")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGN-751")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGVM")), list(reader_make_constant_shell("CardiacValveProsthesisModelAJ-501")), list(reader_make_constant_shell("CardiacValveProsthesisModelAP")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-201")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-301")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-CUS")), list(reader_make_constant_shell("CardiacValveProsthesisModelB10")), list(reader_make_constant_shell("CardiacValveProsthesisModelB10SP")), list(reader_make_constant_shell("CardiacValveProsthesisModelCAVG-404")), list(reader_make_constant_shell("CardiacValveProsthesisModelCAVGJ-514")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_BiocorAortic")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXA")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXAC")), list(list(reader_make_constant_shell("CollectionIntersection2Fn"), reader_make_constant_shell("CardiacValveProsthesis-Biological"), reader_make_constant_shell("AorticValveProsthesis"))), list(new SubLObject[]{ list(reader_make_constant_shell("CollectionIntersection2Fn"), reader_make_constant_shell("CardiacValveProsthesis-Biological-Pericardial"), reader_make_constant_shell("AorticValveProsthesis")), list(reader_make_constant_shell("CardiacValveProsthesis-3FAorticBioprosthesis"), list(reader_make_constant_shell("CardiacValveProsthesisModel1000"))), list(reader_make_constant_shell("CardiacValveProsthesisModel2700")), list(reader_make_constant_shell("CardiacValveProsthesisModel2700PM")), list(reader_make_constant_shell("CardiacValveProsthesisModel2800")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel9000IDE")), list(reader_make_constant_shell("CardiacValveProsthesisModelISA")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_3300TFX")) }), list(list(reader_make_constant_shell("CollectionIntersection2Fn"), reader_make_constant_shell("CardiacValveProsthesis-Mechanical"), reader_make_constant_shell("AorticValveProsthesis"))) }), list(reader_make_constant_shell("CardiacValveProsthesis-3FAortic"), list(reader_make_constant_shell("CardiacValveProsthesisModel1000"))), list(reader_make_constant_shell("CardiacValveProsthesis-AorticConduit"), list(reader_make_constant_shell("CardiacValveProsthesisModel606366"))), list(reader_make_constant_shell("CardiacValveProsthesis-AorticDisc"), list(reader_make_constant_shell("CardiacValveProsthesisModelABP"))), list(reader_make_constant_shell("CardiacValveProsthesis-AorticRegent"), list(reader_make_constant_shell("CardiacValveProsthesisModelAGFN-756-IDE"))), list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis-AorticValvedConduit"), list(reader_make_constant_shell("CardiacValveProsthesis-CConvex-Concave"), list(reader_make_constant_shell("CardiacValveProsthesisModelAGVC"))), list(reader_make_constant_shell("CardiacValveProsthesis-NotLowPorosity"), list(reader_make_constant_shell("CardiacValveProsthesisModelAGVM"))), list(reader_make_constant_shell("CardiacValveProsthesisModel150")), list(reader_make_constant_shell("CardiacValveProsthesisModel350")), list(reader_make_constant_shell("CardiacValveProsthesisModelAP")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-201")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-301")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-CUS")), list(reader_make_constant_shell("CardiacValveProsthesisModelCAVG-404")), list(reader_make_constant_shell("CardiacValveProsthesisModelCAVGJ-514")) }), list(reader_make_constant_shell("CardiacValveProsthesis-Bicor"), list(reader_make_constant_shell("CardiacValveProsthesisModelB10")), list(reader_make_constant_shell("CardiacValveProsthesisModelB10SP")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_BiocorAortic")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_BiocorMitral"))), list(reader_make_constant_shell("CardiacValveProsthesis-Bileaflet"), list(reader_make_constant_shell("CardiacValveProsthesisModel3160")), list(reader_make_constant_shell("CardiacValveProsthesisModel9120")), list(reader_make_constant_shell("CardiacValveProsthesisModelHALL"))), list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis-Biological"), list(reader_make_constant_shell("CardiacValveProsthesis-Allograft"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("CryolifeAorticAllograft"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("CryolifePulmonaryAllograft"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("LifenetAorticAllograft"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("LifenetPulmonaryAllograft"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("UnknownManufacturer-Allograft")))), list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis-Aortic-Biological"), list(reader_make_constant_shell("CardiacValveProsthesis-3FAorticBioprosthesis"), list(reader_make_constant_shell("CardiacValveProsthesisModel1000"))), list(reader_make_constant_shell("CardiacValveProsthesisModel2625")), list(reader_make_constant_shell("CardiacValveProsthesisModel2700")), list(reader_make_constant_shell("CardiacValveProsthesisModel2700PM")), list(reader_make_constant_shell("CardiacValveProsthesisModel2800")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel9000IDE")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_3300TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_BSP100")), list(reader_make_constant_shell("CardiacValveProsthesisModelTF-IDE")) }), list(reader_make_constant_shell("CardiacValveProsthesis-Biological-BovineOrPorcine"), list(reader_make_constant_shell("CardiacValveProsthesis-Biological-Bovine"), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_3300TFX"))), list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis-Biological-Porcine"), list(reader_make_constant_shell("CardiacValveProsthesis-AorticStabilizedGlutaraldehydeProcess"), list(reader_make_constant_shell("CardiacValveProsthesisModel250"))), list(reader_make_constant_shell("CardiacValveProsthesis-PrimaPlusStentlessAortic"), list(reader_make_constant_shell("CardiacValveProsthesisModel2500P"))), list(reader_make_constant_shell("CardiacValveProsthesisModel109411-1")), list(reader_make_constant_shell("CardiacValveProsthesisModel150")), list(reader_make_constant_shell("CardiacValveProsthesisModel200")), list(reader_make_constant_shell("CardiacValveProsthesisModel242")), list(reader_make_constant_shell("CardiacValveProsthesisModel2625")), list(reader_make_constant_shell("CardiacValveProsthesisModel2650")), list(reader_make_constant_shell("CardiacValveProsthesisModel300")), list(reader_make_constant_shell("CardiacValveProsthesisModel305")), list(reader_make_constant_shell("CardiacValveProsthesisModel310")), list(reader_make_constant_shell("CardiacValveProsthesisModel320")), list(reader_make_constant_shell("CardiacValveProsthesisModel342A-V")), list(reader_make_constant_shell("CardiacValveProsthesisModel342R")), list(reader_make_constant_shell("CardiacValveProsthesisModel350")), list(reader_make_constant_shell("CardiacValveProsthesisModel606306")), list(reader_make_constant_shell("CardiacValveProsthesisModel606366")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625-ESR-LP")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625LP")), list(reader_make_constant_shell("CardiacValveProsthesisModel6650")), list(reader_make_constant_shell("CardiacValveProsthesisModel995")), list(reader_make_constant_shell("CardiacValveProsthesisModelISU")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_995")), list(reader_make_constant_shell("CardiacValveProsthesisModelXAGV")) }), list(reader_make_constant_shell("CardiacValveProsthesisModelB100-M")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_B100-A")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_B100-M")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_BSP100")), list(reader_make_constant_shell("CardiacValveProsthesisModelTF-IDE"))), list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis-Biological-Pericardial"), list(reader_make_constant_shell("CardiacValveProsthesisModel2900")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900P")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900PTFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel7000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModelISLM")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_12A")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_9000TFX")), list(new SubLObject[]{ list(reader_make_constant_shell("CollectionIntersection2Fn"), reader_make_constant_shell("CardiacValveProsthesis-Biological-Pericardial"), reader_make_constant_shell("AorticValveProsthesis")), list(reader_make_constant_shell("CardiacValveProsthesis-3FAorticBioprosthesis"), list(reader_make_constant_shell("CardiacValveProsthesisModel1000"))), list(reader_make_constant_shell("CardiacValveProsthesisModel2700")), list(reader_make_constant_shell("CardiacValveProsthesisModel2700PM")), list(reader_make_constant_shell("CardiacValveProsthesisModel2800")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel9000IDE")), list(reader_make_constant_shell("CardiacValveProsthesisModelISA")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_3300TFX")) }) }), list(reader_make_constant_shell("CardiacValveProsthesis-Heterograft"), list(reader_make_constant_shell("CardiacValveProsthesis-Biological-Equine"), list(reader_make_constant_shell("CardiacValveProsthesisModel9000IDE"))), list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis-Biological-Porcine"), list(reader_make_constant_shell("CardiacValveProsthesis-AorticStabilizedGlutaraldehydeProcess"), list(reader_make_constant_shell("CardiacValveProsthesisModel250"))), list(reader_make_constant_shell("CardiacValveProsthesis-PrimaPlusStentlessAortic"), list(reader_make_constant_shell("CardiacValveProsthesisModel2500P"))), list(reader_make_constant_shell("CardiacValveProsthesisModel109411-1")), list(reader_make_constant_shell("CardiacValveProsthesisModel150")), list(reader_make_constant_shell("CardiacValveProsthesisModel200")), list(reader_make_constant_shell("CardiacValveProsthesisModel242")), list(reader_make_constant_shell("CardiacValveProsthesisModel2625")), list(reader_make_constant_shell("CardiacValveProsthesisModel2650")), list(reader_make_constant_shell("CardiacValveProsthesisModel300")), list(reader_make_constant_shell("CardiacValveProsthesisModel305")), list(reader_make_constant_shell("CardiacValveProsthesisModel310")), list(reader_make_constant_shell("CardiacValveProsthesisModel320")), list(reader_make_constant_shell("CardiacValveProsthesisModel342A-V")), list(reader_make_constant_shell("CardiacValveProsthesisModel342R")), list(reader_make_constant_shell("CardiacValveProsthesisModel350")), list(reader_make_constant_shell("CardiacValveProsthesisModel606306")), list(reader_make_constant_shell("CardiacValveProsthesisModel606366")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625-ESR-LP")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625LP")), list(reader_make_constant_shell("CardiacValveProsthesisModel6650")), list(reader_make_constant_shell("CardiacValveProsthesisModel995")), list(reader_make_constant_shell("CardiacValveProsthesisModelISU")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_995")), list(reader_make_constant_shell("CardiacValveProsthesisModelXAGV")) })), list(reader_make_constant_shell("CardiacValveProsthesisModelB10")), list(reader_make_constant_shell("CardiacValveProsthesisModelB10SP")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_4300")), list(list(reader_make_constant_shell("CollectionIntersection2Fn"), reader_make_constant_shell("CardiacValveProsthesis-Biological"), reader_make_constant_shell("AorticValveProsthesis"))) }), list(reader_make_constant_shell("CardiacValveProsthesis-CompositeGraft"), list(reader_make_constant_shell("CardiacValveProsthesisModelXAGV"))), list(reader_make_constant_shell("CardiacValveProsthesis-ExpandedCuff"), list(reader_make_constant_shell("CardiacValveProsthesisModelAEC-102")), list(reader_make_constant_shell("CardiacValveProsthesisModelMEC-102"))), list(reader_make_constant_shell("CardiacValveProsthesis-LowProfile"), list(reader_make_constant_shell("CardiacValveProsthesisModelISLM"))), list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis-Mechanical"), list(reader_make_constant_shell("AorticSilasticBallValveProsthesis")), list(reader_make_constant_shell("AorticValveMechanicalProsthesis")), list(reader_make_constant_shell("CardiacValveProsthesis-Disk"), list(reader_make_constant_shell("CardiacValveProsthesisModel606366")), list(reader_make_constant_shell("CardiacValveProsthesisModel9120")), list(reader_make_constant_shell("CardiacValveProsthesisModelABP"))), list(reader_make_constant_shell("CardiacValveProsthesisModel1200")), list(reader_make_constant_shell("CardiacValveProsthesisModel1260")), list(reader_make_constant_shell("CardiacValveProsthesisModel2310")), list(reader_make_constant_shell("CardiacValveProsthesisModel2320")), list(reader_make_constant_shell("CardiacValveProsthesisModel3160")), list(reader_make_constant_shell("CardiacValveProsthesisModel503DA")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842006-D")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842006-F")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842007-D")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842050-B")), list(reader_make_constant_shell("CardiacValveProsthesisModel6120")), list(reader_make_constant_shell("CardiacValveProsthesisModel6320")), list(reader_make_constant_shell("CardiacValveProsthesisModel65")), list(reader_make_constant_shell("CardiacValveProsthesisModel70")), list(reader_make_constant_shell("CardiacValveProsthesisModel700")), list(reader_make_constant_shell("CardiacValveProsthesisModel750")), list(reader_make_constant_shell("CardiacValveProsthesisModel825")), list(reader_make_constant_shell("CardiacValveProsthesisModel900")), list(reader_make_constant_shell("CardiacValveProsthesisModelA-101")), list(reader_make_constant_shell("CardiacValveProsthesisModelAEC-102")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGFN-756")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGFN-756-IDE")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGN-751")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGVC")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGVM")), list(reader_make_constant_shell("CardiacValveProsthesisModelAHP-105")), list(reader_make_constant_shell("CardiacValveProsthesisModelAHPJ-505")), list(reader_make_constant_shell("CardiacValveProsthesisModelAJ-501")), list(reader_make_constant_shell("CardiacValveProsthesisModelAP")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-201")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-301")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-CUS")), list(reader_make_constant_shell("CardiacValveProsthesisModelCAVG-404")), list(reader_make_constant_shell("CardiacValveProsthesisModelCAVGJ-514")), list(reader_make_constant_shell("CardiacValveProsthesisModelF700")), list(reader_make_constant_shell("CardiacValveProsthesisModelHALL")), list(reader_make_constant_shell("CardiacValveProsthesisModelM-101")), list(reader_make_constant_shell("CardiacValveProsthesisModelMBP")), list(reader_make_constant_shell("CardiacValveProsthesisModelMBRP")), list(reader_make_constant_shell("CardiacValveProsthesisModelMEC-102")), list(reader_make_constant_shell("CardiacValveProsthesisModelMECJ-502")), list(reader_make_constant_shell("CardiacValveProsthesisModelMHP-105")), list(reader_make_constant_shell("CardiacValveProsthesisModelMJ-501")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_106")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_503DA")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_AEC-102")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_ONCMC")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_ONXA")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_ONXMC")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXA")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXAC")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXM")), list(reader_make_constant_shell("CardiacValveProsthesisModelR500")), list(reader_make_constant_shell("CardiacValveProsthesisModelS500")), list(list(reader_make_constant_shell("CollectionIntersection2Fn"), reader_make_constant_shell("CardiacValveProsthesis-Mechanical"), reader_make_constant_shell("AorticValveProsthesis"))) }), list(reader_make_constant_shell("CardiacValveProsthesis-On-X"), list(reader_make_constant_shell("CardiacValveProsthesisModelONXA")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXAC")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXM"))), list(reader_make_constant_shell("CardiacValveProsthesis-OptiformMitralValve"), list(reader_make_constant_shell("CardiacValveProsthesisModelF700"))), list(reader_make_constant_shell("CardiacValveProsthesis-Perimont"), list(reader_make_constant_shell("CardiacValveProsthesisModel2700")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900P")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_3300TFX"))), list(reader_make_constant_shell("CardiacValveProsthesis-Stented"), list(reader_make_constant_shell("CardiacValveProsthesisModel6650"))), list(reader_make_constant_shell("CardiacValveProsthesis-SubAnular"), list(reader_make_constant_shell("CardiacValveProsthesisModelMBP"))), list(reader_make_constant_shell("CardiacValveProsthesis-SupraAnular"), list(reader_make_constant_shell("CardiacValveProsthesisModel2650")), list(reader_make_constant_shell("CardiacValveProsthesisModelB10SP")), list(reader_make_constant_shell("CardiacValveProsthesisModelMBRP")), list(reader_make_constant_shell("CardiacValveProsthesisModelS500"))), list(reader_make_constant_shell("CardiacValveProsthesis-TwoComponent"), list(reader_make_constant_shell("CardiacValveProsthesisModel200")), list(reader_make_constant_shell("CardiacValveProsthesisModel300"))), list(reader_make_constant_shell("CardiacValveProsthesis-Universal"), list(reader_make_constant_shell("CardiacValveProsthesisModelISU"))), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_Photofix")), list(new SubLObject[]{ reader_make_constant_shell("MitralValveProsthesis"), list(reader_make_constant_shell("CardiacValveProsthesis-ClothCoveredMitral"), list(reader_make_constant_shell("CardiacValveProsthesisModel6320"))), list(reader_make_constant_shell("CardiacValveProsthesis-MitralUpsideDown"), list(reader_make_constant_shell("CardiacValveProsthesisModel2900"))), list(reader_make_constant_shell("CardiacValveProsthesis-SilasticMitral"), list(reader_make_constant_shell("CardiacValveProsthesisModel6120"))), list(reader_make_constant_shell("CardiacValveProsthesis-VascorMitralValveProstheis"), list(reader_make_constant_shell("CardiacValveProsthesisModel342R"))), list(reader_make_constant_shell("CardiacValveProsthesisModel109411-1")), list(reader_make_constant_shell("CardiacValveProsthesisModel200")), list(reader_make_constant_shell("CardiacValveProsthesisModel305")), list(reader_make_constant_shell("CardiacValveProsthesisModel310")), list(reader_make_constant_shell("CardiacValveProsthesisModel342A-V")), list(reader_make_constant_shell("CardiacValveProsthesisModel606306")), list(reader_make_constant_shell("CardiacValveProsthesisModel65")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625-ESR-LP")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625LP")), list(reader_make_constant_shell("CardiacValveProsthesisModel6650")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900P")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900PTFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel70")), list(reader_make_constant_shell("CardiacValveProsthesisModel700")), list(reader_make_constant_shell("CardiacValveProsthesisModel7000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel750")), list(reader_make_constant_shell("CardiacValveProsthesisModel825")), list(reader_make_constant_shell("CardiacValveProsthesisModel900")), list(reader_make_constant_shell("CardiacValveProsthesisModel9120")), list(reader_make_constant_shell("CardiacValveProsthesisModelAHPJ-505")), list(reader_make_constant_shell("CardiacValveProsthesisModelB100-M")), list(reader_make_constant_shell("CardiacValveProsthesisModelF700")), list(reader_make_constant_shell("CardiacValveProsthesisModelISLM")), list(reader_make_constant_shell("CardiacValveProsthesisModelISU")), list(reader_make_constant_shell("CardiacValveProsthesisModelM-101")), list(reader_make_constant_shell("CardiacValveProsthesisModelMBP")), list(reader_make_constant_shell("CardiacValveProsthesisModelMBRP")), list(reader_make_constant_shell("CardiacValveProsthesisModelMEC-102")), list(reader_make_constant_shell("CardiacValveProsthesisModelMECJ-502")), list(reader_make_constant_shell("CardiacValveProsthesisModelMHP-105")), list(reader_make_constant_shell("CardiacValveProsthesisModelMJ-501")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_BiocorMitral")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXM")), list(reader_make_constant_shell("CardiacValveProsthesisModelS500")) }), list(list(reader_make_constant_shell("CollectionUnionFn"), list(reader_make_constant_shell("TheSet"), reader_make_constant_shell("CCFCardiacValveExistingOrExplantProsthesis"), reader_make_constant_shell("CCFCardiacValveImplantProsthesis"))), list(reader_make_constant_shell("CCFCardiacValveExistingOrExplantProsthesis")), list(reader_make_constant_shell("CCFCardiacValveImplantProsthesis"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("BaxterHealthcareCorp")), list(reader_make_constant_shell("CardiacValveProsthesisModel2500P"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Beall"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("BeallSurgitool"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Bjork-shiley")), list(reader_make_constant_shell("CardiacValveProsthesisModelABP")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGVC")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGVM")), list(reader_make_constant_shell("CardiacValveProsthesisModelMBP")), list(reader_make_constant_shell("CardiacValveProsthesisModelMBRP")), list(reader_make_constant_shell("CardiacValveProsthesisModelXAGV"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Braunwald-cutter"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Carbomedic")), list(reader_make_constant_shell("CardiacValveProsthesisModel700")), list(reader_make_constant_shell("CardiacValveProsthesisModelAP")), list(reader_make_constant_shell("CardiacValveProsthesisModelF700")), list(reader_make_constant_shell("CardiacValveProsthesisModelR500")), list(reader_make_constant_shell("CardiacValveProsthesisModelS500"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Caster-hall"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Cooley-bloodwell-cutter"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Cooley-cutter"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Cross-jones")), list(reader_make_constant_shell("CardiacValveProsthesisModel65")), list(reader_make_constant_shell("CardiacValveProsthesisModel70"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Cutter-TheOrganization"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("DebakeySurgitool"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("EdwardsDuromedic")), list(reader_make_constant_shell("CardiacValveProsthesisModel3160")), list(reader_make_constant_shell("CardiacValveProsthesisModel9120"))), list(new SubLObject[]{ list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("EdwardsLifesciences")), list(reader_make_constant_shell("CardiacValveProsthesisModel109411-1")), list(reader_make_constant_shell("CardiacValveProsthesisModel2625")), list(reader_make_constant_shell("CardiacValveProsthesisModel2650")), list(reader_make_constant_shell("CardiacValveProsthesisModel2700")), list(reader_make_constant_shell("CardiacValveProsthesisModel2700PM")), list(reader_make_constant_shell("CardiacValveProsthesisModel2800")), list(reader_make_constant_shell("CardiacValveProsthesisModel2900")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel606306")), list(reader_make_constant_shell("CardiacValveProsthesisModel606366")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625-ESR-LP")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625LP")), list(reader_make_constant_shell("CardiacValveProsthesisModel6650")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900P")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900PTFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel7000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel9000IDE")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_3300TFX")) }), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("FasciaLata"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Gott-daggett"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Hancock")), list(reader_make_constant_shell("CardiacValveProsthesisModel150")), list(reader_make_constant_shell("CardiacValveProsthesisModel242")), list(reader_make_constant_shell("CardiacValveProsthesisModel250")), list(reader_make_constant_shell("CardiacValveProsthesisModel342A-V")), list(reader_make_constant_shell("CardiacValveProsthesisModel342R"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Harken"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Homograft"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Inescu-shiley")), list(reader_make_constant_shell("CardiacValveProsthesisModelISA")), list(reader_make_constant_shell("CardiacValveProsthesisModelISLM")), list(reader_make_constant_shell("CardiacValveProsthesisModelISU"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Kay-shiley"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Kay-suzuki"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Lillihei-kaster"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Magovern-cromie"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("MedicalCarbonResearchInstitute")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXA")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXAC")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXM"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("MedtronicInc")), list(reader_make_constant_shell("CardiacValveProsthesisModel305")), list(reader_make_constant_shell("CardiacValveProsthesisModel310")), list(reader_make_constant_shell("CardiacValveProsthesisModel995")), list(reader_make_constant_shell("CardiacValveProsthesisModelHALL"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Omni-science"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("PulmonaryAutograft"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Smeloff-cutter")), list(reader_make_constant_shell("CardiacValveProsthesisModel750")), list(reader_make_constant_shell("CardiacValveProsthesisModel825")), list(reader_make_constant_shell("CardiacValveProsthesisModel900"))), list(new SubLObject[]{ list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("StJudeMedical")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842006-D")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842006-F")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842007-D")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842050-B")), list(reader_make_constant_shell("CardiacValveProsthesisModelA-101")), list(reader_make_constant_shell("CardiacValveProsthesisModelAEC-102")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGFN-756")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGFN-756-IDE")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGN-751")), list(reader_make_constant_shell("CardiacValveProsthesisModelAHP-105")), list(reader_make_constant_shell("CardiacValveProsthesisModelAHPJ-505")), list(reader_make_constant_shell("CardiacValveProsthesisModelAJ-501")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-201")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-301")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-CUS")), list(reader_make_constant_shell("CardiacValveProsthesisModelB10")), list(reader_make_constant_shell("CardiacValveProsthesisModelB100-M")), list(reader_make_constant_shell("CardiacValveProsthesisModelB10SP")), list(reader_make_constant_shell("CardiacValveProsthesisModelCAVG-404")), list(reader_make_constant_shell("CardiacValveProsthesisModelCAVGJ-514")), list(reader_make_constant_shell("CardiacValveProsthesisModelM-101")), list(reader_make_constant_shell("CardiacValveProsthesisModelMEC-102")), list(reader_make_constant_shell("CardiacValveProsthesisModelMECJ-502")), list(reader_make_constant_shell("CardiacValveProsthesisModelMHP-105")), list(reader_make_constant_shell("CardiacValveProsthesisModelMJ-501")), list(reader_make_constant_shell("CardiacValveProsthesisModelTF-IDE")) }), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Starr-edwards")), list(reader_make_constant_shell("CardiacValveProsthesisModel1200")), list(reader_make_constant_shell("CardiacValveProsthesisModel1260")), list(reader_make_constant_shell("CardiacValveProsthesisModel2310")), list(reader_make_constant_shell("CardiacValveProsthesisModel2320")), list(reader_make_constant_shell("CardiacValveProsthesisModel6320"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Tascon")), list(reader_make_constant_shell("CardiacValveProsthesisModel200")), list(reader_make_constant_shell("CardiacValveProsthesisModel300")), list(reader_make_constant_shell("CardiacValveProsthesisModel320")), list(reader_make_constant_shell("CardiacValveProsthesisModel350"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Therapeutic")), list(reader_make_constant_shell("CardiacValveProsthesis-3FAorticBioprosthesis"), list(reader_make_constant_shell("CardiacValveProsthesisModel1000")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("UnknownManufacturer-BiologicValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("UnknownManufacturer-MechanicalValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Wada-cutter"))) }))))), list(list(list(reader_make_constant_shell("hasDiagnosis"), makeSymbol("?DIAG"), reader_make_constant_shell("HeartRhythm")), reader_make_constant_shell("MedicalResearchCAEGuidanceMt")), list(list(list(TWO_INTEGER), list(new SubLObject[]{ list(reader_make_constant_shell("AbnormalAorticConduit")), list(reader_make_constant_shell("AbnormalNumberOfCusps"), list(reader_make_constant_shell("AbnormalNumberOfCusps-AorticValve")), list(reader_make_constant_shell("AbnormalNumberOfCusps-MitralValve")), list(reader_make_constant_shell("AbnormalNumberOfCusps-PulmonaryValve")), list(reader_make_constant_shell("AbnormalNumberOfCusps-TricuspidValve"))), list(reader_make_constant_shell("Abscess"), list(reader_make_constant_shell("Abscess-AorticRoot"))), list(reader_make_constant_shell("Aneurysmal")), list(reader_make_constant_shell("AortaAscendingRupture")), list(reader_make_constant_shell("AortaDescendingRupture")), list(reader_make_constant_shell("AorticArchAbnormalities")), list(reader_make_constant_shell("AorticArchRupture")), list(reader_make_constant_shell("AtheromaOrAtherosclerosis"), list(reader_make_constant_shell("Atherosclerosis"), list(reader_make_constant_shell("Atherosclerosis-AbdominalAorta")), list(reader_make_constant_shell("Atherosclerosis-Aorta")), list(reader_make_constant_shell("Atherosclerosis-AortaArch")), list(reader_make_constant_shell("Atherosclerosis-AscendingAorta")), list(reader_make_constant_shell("Atherosclerosis-DescendingAorta"), list(reader_make_constant_shell("Atherosclerosis-DescendingThoracicAorta"))))), list(reader_make_constant_shell("Atresia"), list(reader_make_constant_shell("AorticArchAtresia")), list(reader_make_constant_shell("Atresia-AorticValve")), list(reader_make_constant_shell("Atresia-MitralValve")), list(reader_make_constant_shell("Atresia-PulmonaryValve"), list(reader_make_constant_shell("AtresiaWithIntactSeptum-PulmonaryValve")), list(reader_make_constant_shell("AtresiaWithVentricularSeptalDefect-PulmonaryValve"))), list(reader_make_constant_shell("Atresia-TricuspidValve"))), list(reader_make_constant_shell("AtrialDisorder"), list(reader_make_constant_shell("AtrialArrhythmia"), list(reader_make_constant_shell("AtrialFibrillationOrFlutter"), list(reader_make_constant_shell("AtrialFibrillation")), list(reader_make_constant_shell("AtrialFibrillationOrFlutterRequiringTreatment")), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal")))), list(reader_make_constant_shell("AtrialTachycardia")), list(reader_make_constant_shell("CardiacFlutter"), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal")))), list(reader_make_constant_shell("EctopicHeartbeat")), list(reader_make_constant_shell("PrematureAtrialComplex")), list(reader_make_constant_shell("PrematureEctopicBeats")), list(reader_make_constant_shell("WanderingPacemaker"))), list(reader_make_constant_shell("AtrialSeptalDefectPrimum")), list(reader_make_constant_shell("AtrialSeptalDefectSecundum")), list(reader_make_constant_shell("AtriallyPacedHeartRhythm"))), list(reader_make_constant_shell("AtrialVentricularFistulaToRightVentricle")), list(reader_make_constant_shell("BallooningOrProlapsedCardiacValve"), list(reader_make_constant_shell("BallooningOrProlapsedCardiacValve-MitralValve")), list(reader_make_constant_shell("BallooningOrProlapsedCardiacValve-TricuspidValve"))), list(new SubLObject[]{ reader_make_constant_shell("Calcification"), list(reader_make_constant_shell("AnnularCalcification"), list(reader_make_constant_shell("AnnularCalcification-AorticValve")), list(reader_make_constant_shell("AnnularCalcification-MitralValve")), list(reader_make_constant_shell("AnnularCalcification-PulmonaryValve")), list(reader_make_constant_shell("AnnularCalcification-TricuspidValve"))), list(reader_make_constant_shell("Calcification-AbdominalAorta")), list(reader_make_constant_shell("Calcification-Aorta")), list(reader_make_constant_shell("Calcification-AortaArch")), list(reader_make_constant_shell("Calcification-AorticRoot")), list(reader_make_constant_shell("Calcification-AorticValve")), list(reader_make_constant_shell("Calcification-AscendingAorta")), list(reader_make_constant_shell("Calcification-MitralValve")), list(reader_make_constant_shell("Calcification-PulmonaryValve")), list(reader_make_constant_shell("Calcification-ThoracicAorta")), list(reader_make_constant_shell("Calcification-TricuspidValve")) }), list(reader_make_constant_shell("CardiogenicShock")), list(reader_make_constant_shell("ChronicCondition"), list(reader_make_constant_shell("Arthritis"), list(reader_make_constant_shell("RheumatoidArthritis")), list(reader_make_constant_shell("Scleroderma"))), list(reader_make_constant_shell("ChronicArrhythmia")), list(reader_make_constant_shell("ChronicLungDisease"), list(reader_make_constant_shell("ChronicLungDisease-Mild")), list(reader_make_constant_shell("ChronicLungDisease-Moderate")), list(reader_make_constant_shell("ChronicLungDisease-Severe")), list(reader_make_constant_shell("ChronicObstructivePulmonaryDisease"), list(reader_make_constant_shell("ChronicObstructivePulmonaryDisease-Clinical")), list(reader_make_constant_shell("ChronicObstructivePulmonaryDisease-Pharmacologic")))), list(reader_make_constant_shell("DiabetesMellitus")), list(reader_make_constant_shell("GeneticCondition"), list(reader_make_constant_shell("GeneticDisorder"), list(reader_make_constant_shell("LoeysDietzSyndrome")), list(reader_make_constant_shell("MarfansSyndrome")))), list(reader_make_constant_shell("Hypertension"), list(reader_make_constant_shell("Hypertension-Systemic"))), list(reader_make_constant_shell("Lupus"))), list(reader_make_constant_shell("Coarctation"), list(reader_make_constant_shell("AorticCoarctation"), list(reader_make_constant_shell("AbdominalAortaCoarctation")), list(reader_make_constant_shell("AortaArchCoarctation")), list(reader_make_constant_shell("DescendingAortaCoarctation"), list(reader_make_constant_shell("DescendingThoracicAortaCoarctation"))))), list(reader_make_constant_shell("CongenitalCondition"), list(new SubLObject[]{ reader_make_constant_shell("CongenitalHeartDisease"), list(reader_make_constant_shell("AbsentPulmonaryArtery")), list(reader_make_constant_shell("Aneurysm-diverticulum-MembranousSeptum-SpontaneousClosureOfIVSD")), list(reader_make_constant_shell("AneurysmSinusValsalva")), list(reader_make_constant_shell("AnomalousPulmonaryVenousReturn-Partial")), list(reader_make_constant_shell("AnomalousPulmonaryVenousReturn-Total")), list(reader_make_constant_shell("AnomalyOfSystemicDrainage-PersistentLeftSVC")), list(reader_make_constant_shell("Aorta-rightVentricleCommunication")), list(reader_make_constant_shell("AortopulmonaryWindow")), list(reader_make_constant_shell("AspleniaSyndrome")), list(reader_make_constant_shell("Atrial-ventricularCanalDefectComplete")), list(reader_make_constant_shell("AtrialSeptalAnyeurysm-Congenital")), list(reader_make_constant_shell("AtrialSeptalDefectPrimum")), list(reader_make_constant_shell("AtrialSeptalDefectSecundum")), list(reader_make_constant_shell("AtrialVentricularFistula"), list(reader_make_constant_shell("AtrialVentricularFistulaToLeftAtrium")), list(reader_make_constant_shell("AtrialVentricularFistulaToLeftVentricle")), list(reader_make_constant_shell("AtrialVentricularFistulaToPulmonaryArtery")), list(reader_make_constant_shell("AtrialVentricularFistulaToRightAtrium")), list(reader_make_constant_shell("AtrialVentricularFistulaToUndeterminedLocation"))), list(reader_make_constant_shell("AtrioventricularMalformations")), list(reader_make_constant_shell("CommonVentricleTypeAOrTypeC")), list(reader_make_constant_shell("CongenitalCoronaryArteryAnomalyOtherOrMultipleCongenitalAnomalies")), list(reader_make_constant_shell("CongenitalDoubleOrificeLeftSinus")), list(reader_make_constant_shell("CongenitalDoubleOrificeRightSinus")), list(new SubLObject[]{ reader_make_constant_shell("CoronaryAnomaly"), list(reader_make_constant_shell("CoronaryAnomalyFistulaEctopicOrigin")), list(reader_make_constant_shell("CoronaryArteryAnomaly-CircumflexFromLeftAndRight")), list(reader_make_constant_shell("CoronaryArteryAnomaly-CircumflexFromRight")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftAnteriorDescendingAndCircumflexWithCommonOstium")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftAnteriorDescendingFromRight")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftCircumflexArteryAbsent")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftCoronaryArteryFromRight")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftFromPulmonaryArtery")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftMainTrunkAbsent")), list(reader_make_constant_shell("CoronaryArteryAnomaly-RightFromLeft")) }), list(reader_make_constant_shell("Criss-crossHeart")), list(reader_make_constant_shell("Dextroversion")), list(reader_make_constant_shell("DoubleChamberedRightVentricle")), list(reader_make_constant_shell("DoubleOutletLeftVentricle")), list(reader_make_constant_shell("DoubleOutletRightVentricle")), list(reader_make_constant_shell("DoubleRightVentricle")), list(reader_make_constant_shell("EbsteinAnomaly")), list(reader_make_constant_shell("EndocardialFibroelastosis")), list(reader_make_constant_shell("HypertrophicObstructiveCardiomyopathy-Congenital")), list(reader_make_constant_shell("HypoplasticLeftHeartSyndrome")), list(reader_make_constant_shell("HypoplasticRightHeartSyndrome")), list(reader_make_constant_shell("IsolatedDextrocardia")), list(reader_make_constant_shell("IsolatedLevocardiaNoSitusInversus")), list(reader_make_constant_shell("MalpositionOfGreatVessels")), list(reader_make_constant_shell("MalpositionOfTheHeart")), list(reader_make_constant_shell("Mapca")), list(reader_make_constant_shell("MultipleVentricularSeptalDefect")), list(reader_make_constant_shell("PatentDuctusArteriosus")), list(reader_make_constant_shell("PatentForamenOvale")), list(reader_make_constant_shell("PolyspleniaSyndrome")), list(reader_make_constant_shell("PulmonaryArteryStenosis")), list(reader_make_constant_shell("PulmonaryAtrial-ventricularFistulaPulmonaryArtery-PulmonaryVein")), list(reader_make_constant_shell("SeptalDefect-CommonAtrium")), list(reader_make_constant_shell("SimpleDextrocardiaWithSitusInversus")), list(reader_make_constant_shell("SinusVenosusAtrialSeptalDefect")), list(reader_make_constant_shell("StorageDiseaseOfTheHeart")), list(reader_make_constant_shell("SystemicVenousObstruction")), list(reader_make_constant_shell("TetralogyOfFallot")), list(reader_make_constant_shell("TetralogyOfFallotWithAbsentPulmonaryValve")), list(reader_make_constant_shell("TranspositionGreatVessels-Dextro-transpositionOrLevo-transposition")), list(reader_make_constant_shell("TranspositionGreatVesselsCorrected")), list(reader_make_constant_shell("TruncusArteriosus")), list(reader_make_constant_shell("VascularRing")), list(reader_make_constant_shell("VentricularInversion")), list(reader_make_constant_shell("VentricularSeptalDefect"), list(reader_make_constant_shell("VentricularSeptalDefect-Atrial-ventricularCanalType")), list(reader_make_constant_shell("VentricularSeptalDefect-Membranous")), list(reader_make_constant_shell("VentricularSeptalDefect-Muscular"))) }), list(reader_make_constant_shell("FistulaCondition-CoronaryArteriovenous")), list(reader_make_constant_shell("FistulaCondition-CoronaryArteriovenousToRightVentricle")), list(reader_make_constant_shell("GeneticCondition"), list(reader_make_constant_shell("GeneticDisorder"), list(reader_make_constant_shell("LoeysDietzSyndrome")), list(reader_make_constant_shell("MarfansSyndrome"))))), list(reader_make_constant_shell("CongenitalLeftCoronaryArteryFromRight")), list(new SubLObject[]{ reader_make_constant_shell("ConnectiveTissueDisorder"), list(reader_make_constant_shell("Arthritis"), list(reader_make_constant_shell("RheumatoidArthritis")), list(reader_make_constant_shell("Scleroderma"))), list(reader_make_constant_shell("BeurgersDisease")), list(reader_make_constant_shell("EhlersDanlosSyndrome")), list(reader_make_constant_shell("GiantCellAortitis")), list(reader_make_constant_shell("KawasakiDisease")), list(reader_make_constant_shell("Lupus")), list(reader_make_constant_shell("PolymyalgiaRheumatica")), list(reader_make_constant_shell("RaynaudsDisease")), list(reader_make_constant_shell("SjogrensSyndrome")), list(reader_make_constant_shell("VasculiticSyndrome")), list(reader_make_constant_shell("WegenersGranulomatosis")) }), list(reader_make_constant_shell("CoronaryArteryDisease"), list(reader_make_constant_shell("CoronaryArteryAneurysm")), list(reader_make_constant_shell("CoronaryArteryDisease-Ischemic")), list(reader_make_constant_shell("OtherCoronaryArteryAbnormality"))), list(reader_make_constant_shell("CysticMedialNecrosis"), list(reader_make_constant_shell("CysticMedialNecrisis-Aorta")), list(reader_make_constant_shell("CysticMedialNecrosis-AbdominalAorta")), list(reader_make_constant_shell("CysticMedialNecrosis-AortaArch")), list(reader_make_constant_shell("CysticMedialNecrosis-AscendingAorta")), list(reader_make_constant_shell("CysticMedialNecrosis-DescendingAorta"), list(reader_make_constant_shell("CysticMedialNecrosis-DescendingThoracicAorta")))), list(reader_make_constant_shell("DigestiveDisorder"), list(reader_make_constant_shell("DigestiveHepaticFailure")), list(reader_make_constant_shell("HiatalHernia")), list(reader_make_constant_shell("RefluxDisease"))), list(reader_make_constant_shell("Dilatation-PhysiologicalCondition"), list(reader_make_constant_shell("Dilatation-AbdominalAorta")), list(reader_make_constant_shell("Dilatation-AortaArch")), list(reader_make_constant_shell("Dilatation-AorticRoot")), list(reader_make_constant_shell("Dilatation-AscendingAorta")), list(reader_make_constant_shell("Dilatation-AscendingAortaRoot")), list(reader_make_constant_shell("Dilatation-DescendingAorta"), list(reader_make_constant_shell("Dilatation-DescendingThoracicAorta")))), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheAorta"), list(reader_make_constant_shell("Aorta-rightVentricleCommunication")), list(reader_make_constant_shell("AortaAneurysmOrDissection"), list(reader_make_constant_shell("AortaDissection"), list(reader_make_constant_shell("AcuteAorticDissection"), list(reader_make_constant_shell("AcuteDissection-AbdominalAorta-Intraoperative")), list(reader_make_constant_shell("AcuteDissection-AortaArch")), list(reader_make_constant_shell("AcuteDissection-AorticRoot-Intraoperative")), list(reader_make_constant_shell("AcuteDissection-AscendingAorta")), list(reader_make_constant_shell("AcuteDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingThoracicAorta")))), list(reader_make_constant_shell("ChronicAortaDissection"), list(reader_make_constant_shell("ChronicDissection-AbdominalAorta")), list(reader_make_constant_shell("ChronicDissection-AortaArch")), list(reader_make_constant_shell("ChronicDissection-AorticRoot")), list(reader_make_constant_shell("ChronicDissection-AscendingAorta")), list(reader_make_constant_shell("ChronicDissection-DescendingAorta"), list(reader_make_constant_shell("ChronicDissection-DescendingThoracicAorta"))))), list(reader_make_constant_shell("AorticAneurysm"), list(reader_make_constant_shell("AortaUnspecifiedAneurysm")))), list(reader_make_constant_shell("AortaFistula"), list(reader_make_constant_shell("FistulaCondition-DescendingAorta-Bronchial"), list(reader_make_constant_shell("FistulaCondition-DescendingThoracicAorta-Bronchial"))), list(reader_make_constant_shell("FistulaCondition-DescendingAorta-Esophageal"), list(reader_make_constant_shell("FistulaCondition-DescendingThoracicAorta-Esophageal"))), list(reader_make_constant_shell("FistulaCondition-ThoracicAorta-Bronchial")), list(reader_make_constant_shell("FistulaCondition-ThoracicAorta-Esophageal"))), list(reader_make_constant_shell("AorticCoarctation"), list(reader_make_constant_shell("AbdominalAortaCoarctation")), list(reader_make_constant_shell("AortaArchCoarctation")), list(reader_make_constant_shell("DescendingAortaCoarctation"), list(reader_make_constant_shell("DescendingThoracicAortaCoarctation")))), list(reader_make_constant_shell("Aortitis"), list(reader_make_constant_shell("AbdominalAortaAortitis")), list(reader_make_constant_shell("AortaArchAortitis")), list(reader_make_constant_shell("AscendingAortaAortitis")), list(reader_make_constant_shell("DescendingAortaAortitis"), list(reader_make_constant_shell("DescendingThoracicAortaAortitis")))), list(reader_make_constant_shell("Atherosclerosis-Aorta")), list(reader_make_constant_shell("Calcification-Aorta")), list(reader_make_constant_shell("CysticMedialNecrisis-Aorta")), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheAbdominalAorta"), list(reader_make_constant_shell("AbdominalAortaAortitis")), list(reader_make_constant_shell("AbdominalAortaCoarctation")), list(reader_make_constant_shell("AcuteDissection-AbdominalAorta-Intraoperative")), list(reader_make_constant_shell("Aneurysm-AbdominalAorta"), list(reader_make_constant_shell("SaccularAneurysm-AbdominalAorta"))), list(reader_make_constant_shell("Atherosclerosis-AbdominalAorta")), list(reader_make_constant_shell("Calcification-AbdominalAorta")), list(reader_make_constant_shell("ChronicDissection-AbdominalAorta")), list(reader_make_constant_shell("CysticMedialNecrosis-AbdominalAorta")), list(reader_make_constant_shell("Dilatation-AbdominalAorta")), list(reader_make_constant_shell("DissectingAneurysm-AbdominalAorta")), list(reader_make_constant_shell("Fibrosis-AbdominalAorta")), list(reader_make_constant_shell("Pseudoaneurysm-AbdominalAorta")), list(reader_make_constant_shell("Thrombosis-AbdominalAorta")) }), list(reader_make_constant_shell("DiseaseOfTheAorta-NonAneurysmal")), list(reader_make_constant_shell("DiseaseOfTheAorta-Normal")), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheAorticArch"), list(reader_make_constant_shell("AcuteDissection-AortaArch")), list(reader_make_constant_shell("AortaArch-AbnormalConduit")), list(reader_make_constant_shell("AortaArch-NormalConduit")), list(reader_make_constant_shell("AortaArchAortitis")), list(reader_make_constant_shell("AortaArchCoarctation")), list(reader_make_constant_shell("AorticArchAneurysmOrDissection"), list(reader_make_constant_shell("Aneurysm-AortaArch"), list(reader_make_constant_shell("DissectingAneurysm-AortaArch")), list(reader_make_constant_shell("SaccularAneurysm-AortaArch")))), list(reader_make_constant_shell("AorticArchAtresia")), list(reader_make_constant_shell("Atherosclerosis-AortaArch")), list(reader_make_constant_shell("Calcification-AortaArch")), list(reader_make_constant_shell("CysticMedialNecrosis-AortaArch")), list(reader_make_constant_shell("Dilatation-AortaArch")), list(reader_make_constant_shell("Dissection-AortaArch"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AortaArch")), list(reader_make_constant_shell("ChronicDissection-AortaArch"))), list(reader_make_constant_shell("Fibrosis-AortaArch")), list(reader_make_constant_shell("InfectionOrMycotic-AortaArch")), list(reader_make_constant_shell("IntramuralHematoma-AortaArch")), list(reader_make_constant_shell("PenetratingUlcer-AortaArch")), list(reader_make_constant_shell("Pseudoaneurysm-AortaArch")), list(reader_make_constant_shell("Trauma-AortaArch")), list(reader_make_constant_shell("Trombosis-AortaArch")) }), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheAorticRoot"), list(reader_make_constant_shell("Abscess-AorticRoot")), list(reader_make_constant_shell("AcuteDissection-AorticRoot")), list(reader_make_constant_shell("AcuteDissection-AorticRoot-Intraoperative")), list(reader_make_constant_shell("Aneurysm-AorticRoot"), list(reader_make_constant_shell("DissectingAneurysm-AorticRoot")), list(reader_make_constant_shell("SaccularAneurysm-AorticRoot"))), list(reader_make_constant_shell("Calcification-AorticRoot")), list(reader_make_constant_shell("ChronicDissection-AorticRoot")), list(reader_make_constant_shell("Dilatation-AorticRoot")), list(reader_make_constant_shell("Dissection-AorticRoot")), list(reader_make_constant_shell("Fibrosis-AorticRoot")) }), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheAscendingAorta"), list(reader_make_constant_shell("AscendingAorta-AbnormalConduit")), list(reader_make_constant_shell("AscendingAorta-NormalConduit")), list(reader_make_constant_shell("AscendingAortaAneurysmOrDissection"), list(reader_make_constant_shell("Aneurysm-AscendingAorta"), list(reader_make_constant_shell("DissectingAneurysm-AscendingAorta")), list(reader_make_constant_shell("SaccularAneurysm-AscendingAorta")))), list(reader_make_constant_shell("AscendingAortaAortitis")), list(reader_make_constant_shell("Atherosclerosis-AscendingAorta")), list(reader_make_constant_shell("Calcification-AscendingAorta")), list(reader_make_constant_shell("CysticMedialNecrosis-AscendingAorta")), list(reader_make_constant_shell("Dilatation-AscendingAorta")), list(reader_make_constant_shell("Dilatation-AscendingAortaRoot")), list(reader_make_constant_shell("DiseaseOfTheAscendingAorta-Other")), list(reader_make_constant_shell("Dissection-AscendingAorta"), list(reader_make_constant_shell("AcuteDissection-AscendingAorta")), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AscendingAorta")), list(reader_make_constant_shell("ChronicDissection-AscendingAorta"))), list(reader_make_constant_shell("Fibrosis-AscendingAorta")), list(reader_make_constant_shell("InfectionOrMycotic-AscendingAorta")), list(reader_make_constant_shell("IntramuralHematoma-AscendingAorta")), list(reader_make_constant_shell("LeakInEndograftStent-AscendingAorta")), list(reader_make_constant_shell("PenetratingUlcer-AscendingAorta")), list(reader_make_constant_shell("Pseudoaneurysm-AscendingAorta")), list(reader_make_constant_shell("Thrombosis-AscendingAorta")), list(reader_make_constant_shell("Trauma-AscendingAorta")) }), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheDescendingAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingThoracicAorta"))), list(reader_make_constant_shell("Aneurysm-DescendingAorta"), list(reader_make_constant_shell("Aneurysm-DescendingThoracicAorta")), list(reader_make_constant_shell("DissectingAneurysm-DescendingThoracicAorta")), list(reader_make_constant_shell("SaccularAneurysm-DescendingAorta"), list(reader_make_constant_shell("SaccularAneurysm-DescendingThoracicAorta")))), list(reader_make_constant_shell("Atherosclerosis-DescendingAorta"), list(reader_make_constant_shell("Atherosclerosis-DescendingThoracicAorta"))), list(reader_make_constant_shell("ChronicDissection-DescendingAorta"), list(reader_make_constant_shell("ChronicDissection-DescendingThoracicAorta"))), list(reader_make_constant_shell("CysticMedialNecrosis-DescendingAorta"), list(reader_make_constant_shell("CysticMedialNecrosis-DescendingThoracicAorta"))), list(reader_make_constant_shell("DescendingAorta-AbnormalConduit"), list(reader_make_constant_shell("DescendingThoracicAorta-AbnormalConduit"))), list(reader_make_constant_shell("DescendingAorta-NormalConduit"), list(reader_make_constant_shell("DescendingThoracicAorta-NormalConduit"))), list(reader_make_constant_shell("DescendingAortaAortitis"), list(reader_make_constant_shell("DescendingThoracicAortaAortitis"))), list(reader_make_constant_shell("DescendingAortaCoarctation"), list(reader_make_constant_shell("DescendingThoracicAortaCoarctation"))), list(reader_make_constant_shell("DescendingAortaThrombosis"), list(reader_make_constant_shell("DescendingThoracicAortaThrombosis"))), list(reader_make_constant_shell("Dilatation-DescendingAorta"), list(reader_make_constant_shell("Dilatation-DescendingThoracicAorta"))), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheDescendingThoracicAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingThoracicAorta")), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingThoracicAorta")), list(reader_make_constant_shell("Aneurysm-DescendingThoracicAorta")), list(reader_make_constant_shell("Atherosclerosis-DescendingThoracicAorta")), list(reader_make_constant_shell("ChronicDissection-DescendingThoracicAorta")), list(reader_make_constant_shell("CysticMedialNecrosis-DescendingThoracicAorta")), list(reader_make_constant_shell("DescendingThoracicAorta-AbnormalConduit")), list(reader_make_constant_shell("DescendingThoracicAorta-NormalConduit")), list(reader_make_constant_shell("DescendingThoracicAortaAortitis")), list(reader_make_constant_shell("DescendingThoracicAortaCoarctation")), list(reader_make_constant_shell("DescendingThoracicAortaThrombosis")), list(reader_make_constant_shell("Dilatation-DescendingThoracicAorta")), list(reader_make_constant_shell("DissectingAneurysm-DescendingThoracicAorta")), list(reader_make_constant_shell("Dissection-DescendingThoracicAorta")), list(reader_make_constant_shell("FistulaCondition-DescendingThoracicAorta-Bronchial")), list(reader_make_constant_shell("FistulaCondition-DescendingThoracicAorta-Esophageal")), list(reader_make_constant_shell("InfectionOrMycotic-DescendingThoracicAorta")), list(reader_make_constant_shell("IntramuralHematoma-DescendingThoracicAorta")), list(reader_make_constant_shell("PenetratingUlcer-DescendingThoracicAorta")), list(reader_make_constant_shell("Pseudoaneurysm-ThoracicAorta")), list(reader_make_constant_shell("SaccularAneurysm-DescendingThoracicAorta")), list(reader_make_constant_shell("Trauma-DescendingThoracicAorta")) }), list(reader_make_constant_shell("Dissection-DescendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingThoracicAorta"))), list(reader_make_constant_shell("Dissection-DescendingThoracicAorta"))), list(reader_make_constant_shell("FistulaCondition-DescendingAorta-Bronchial"), list(reader_make_constant_shell("FistulaCondition-DescendingThoracicAorta-Bronchial"))), list(reader_make_constant_shell("FistulaCondition-DescendingAorta-Esophageal"), list(reader_make_constant_shell("FistulaCondition-DescendingThoracicAorta-Esophageal"))), list(reader_make_constant_shell("InfectionOrMycotic-DescendingAorta"), list(reader_make_constant_shell("InfectionOrMycotic-DescendingThoracicAorta"))), list(reader_make_constant_shell("IntramuralHematoma-DescendingAorta"), list(reader_make_constant_shell("IntramuralHematoma-DescendingThoracicAorta"))), list(reader_make_constant_shell("PenetratingUlcer-DescendingAorta"), list(reader_make_constant_shell("PenetratingUlcer-DescendingThoracicAorta"))), list(reader_make_constant_shell("Trauma-DescendingAorta"), list(reader_make_constant_shell("Trauma-DescendingThoracicAorta"))) }), list(reader_make_constant_shell("DiseaseOfTheThoracicAbdominalAorta"), list(reader_make_constant_shell("Aneurysm-ThoracicAbdominalAorta"))), list(reader_make_constant_shell("DiseaseOfTheThoracicAorta"), list(reader_make_constant_shell("Aneurysm-ThoracicAorta"), list(reader_make_constant_shell("DissectingAneurysm-ThoracicAorta"), list(reader_make_constant_shell("DissectingAneurysm-DescendingThoracicAorta")))), list(reader_make_constant_shell("Calcification-ThoracicAorta")), list(reader_make_constant_shell("DiseaseOfTheThoracicAorta-NonAneurysmal")), list(reader_make_constant_shell("Fibrosis-ThoracicAorta")), list(reader_make_constant_shell("FistulaCondition-ThoracicAorta-Bronchial")), list(reader_make_constant_shell("FistulaCondition-ThoracicAorta-Esophageal")), list(reader_make_constant_shell("Pseudoaneurysm-ThoracicAorta"))), list(reader_make_constant_shell("Fibrosis-Aorta")), list(reader_make_constant_shell("Thrombosis-Aorta")) }), list(reader_make_constant_shell("DrugInducedToxicity")), list(reader_make_constant_shell("Endocarditis-Generic"), list(reader_make_constant_shell("Endocarditis-Morbidity"), list(reader_make_constant_shell("Endocarditis-CardiacValve"), list(reader_make_constant_shell("Endocarditis-AorticValve")), list(reader_make_constant_shell("Endocarditis-MitralValve")), list(reader_make_constant_shell("Endocarditis-PulmonaryValve")), list(reader_make_constant_shell("Endocarditis-TricuspidValve"))))), list(reader_make_constant_shell("EndocrineDisorder"), list(reader_make_constant_shell("DiabetesMellitus")), list(reader_make_constant_shell("HashimotosThyroiditis")), list(reader_make_constant_shell("Hyperthyroidism")), list(reader_make_constant_shell("Hypothyroidism"))), list(reader_make_constant_shell("Enlarged-HeartChamberCondition")), list(reader_make_constant_shell("Fibrosis-thickening"), list(reader_make_constant_shell("Fibrosis-AbdominalAorta")), list(reader_make_constant_shell("Fibrosis-Aorta")), list(reader_make_constant_shell("Fibrosis-AortaArch")), list(reader_make_constant_shell("Fibrosis-AorticRoot")), list(reader_make_constant_shell("Fibrosis-AscendingAorta")), list(reader_make_constant_shell("Fibrosis-CardiacValve"), list(reader_make_constant_shell("Fibrosis-AorticValve")), list(reader_make_constant_shell("Fibrosis-MitralValve")), list(reader_make_constant_shell("Fibrosis-PulmonaryValve")), list(reader_make_constant_shell("Fibrosis-TricuspidValve"))), list(reader_make_constant_shell("Fibrosis-ThoracicAorta"))), list(reader_make_constant_shell("FistulaCondition"), list(reader_make_constant_shell("AortaFistula"), list(reader_make_constant_shell("FistulaCondition-DescendingAorta-Bronchial"), list(reader_make_constant_shell("FistulaCondition-DescendingThoracicAorta-Bronchial"))), list(reader_make_constant_shell("FistulaCondition-DescendingAorta-Esophageal"), list(reader_make_constant_shell("FistulaCondition-DescendingThoracicAorta-Esophageal"))), list(reader_make_constant_shell("FistulaCondition-ThoracicAorta-Bronchial")), list(reader_make_constant_shell("FistulaCondition-ThoracicAorta-Esophageal"))), list(reader_make_constant_shell("AtrialVentricularFistula"), list(reader_make_constant_shell("AtrialVentricularFistulaToLeftAtrium")), list(reader_make_constant_shell("AtrialVentricularFistulaToLeftVentricle")), list(reader_make_constant_shell("AtrialVentricularFistulaToPulmonaryArtery")), list(reader_make_constant_shell("AtrialVentricularFistulaToRightAtrium")), list(reader_make_constant_shell("AtrialVentricularFistulaToUndeterminedLocation"))), list(reader_make_constant_shell("FistulaCondition-CoronaryArteriovenous")), list(reader_make_constant_shell("FistulaCondition-CoronaryArteriovenousToRightVentricle")), list(reader_make_constant_shell("PulmonaryAtrial-ventricularFistulaPulmonaryArtery-PulmonaryVein"))), list(reader_make_constant_shell("Giant-HeartChamberCondition")), list(reader_make_constant_shell("HeartChamberCondition_small")), list(new SubLObject[]{ reader_make_constant_shell("HeartCondition"), list(reader_make_constant_shell("AcquiredHeartDisease"), list(reader_make_constant_shell("AcquiredValvularHeartDisease"), list(reader_make_constant_shell("AcquiredNonRheumaticValvularHeartDisease")), list(reader_make_constant_shell("Endocarditis-Infection")), list(reader_make_constant_shell("Endocarditis-Morbidity"), list(reader_make_constant_shell("Endocarditis-CardiacValve"), list(reader_make_constant_shell("Endocarditis-AorticValve")), list(reader_make_constant_shell("Endocarditis-MitralValve")), list(reader_make_constant_shell("Endocarditis-PulmonaryValve")), list(reader_make_constant_shell("Endocarditis-TricuspidValve")))), list(reader_make_constant_shell("Regurgitation-MitralValve"), list(reader_make_constant_shell("MitralValveRegurgitationFromPapillaryMuscleDysfunction"))), list(reader_make_constant_shell("RheumaticHeartDisease")))), list(reader_make_constant_shell("CardiacArrest")), list(reader_make_constant_shell("CardiacEnlargement")), list(reader_make_constant_shell("CardiacEnlargement-Questionable")), list(new SubLObject[]{ reader_make_constant_shell("CongenitalHeartDisease"), list(reader_make_constant_shell("AbsentPulmonaryArtery")), list(reader_make_constant_shell("Aneurysm-diverticulum-MembranousSeptum-SpontaneousClosureOfIVSD")), list(reader_make_constant_shell("AneurysmSinusValsalva")), list(reader_make_constant_shell("AnomalousPulmonaryVenousReturn-Partial")), list(reader_make_constant_shell("AnomalousPulmonaryVenousReturn-Total")), list(reader_make_constant_shell("AnomalyOfSystemicDrainage-PersistentLeftSVC")), list(reader_make_constant_shell("Aorta-rightVentricleCommunication")), list(reader_make_constant_shell("AortopulmonaryWindow")), list(reader_make_constant_shell("AspleniaSyndrome")), list(reader_make_constant_shell("Atrial-ventricularCanalDefectComplete")), list(reader_make_constant_shell("AtrialSeptalAnyeurysm-Congenital")), list(reader_make_constant_shell("AtrialSeptalDefectPrimum")), list(reader_make_constant_shell("AtrialSeptalDefectSecundum")), list(reader_make_constant_shell("AtrialVentricularFistula"), list(reader_make_constant_shell("AtrialVentricularFistulaToLeftAtrium")), list(reader_make_constant_shell("AtrialVentricularFistulaToLeftVentricle")), list(reader_make_constant_shell("AtrialVentricularFistulaToPulmonaryArtery")), list(reader_make_constant_shell("AtrialVentricularFistulaToRightAtrium")), list(reader_make_constant_shell("AtrialVentricularFistulaToUndeterminedLocation"))), list(reader_make_constant_shell("AtrioventricularMalformations")), list(reader_make_constant_shell("CommonVentricleTypeAOrTypeC")), list(reader_make_constant_shell("CongenitalCoronaryArteryAnomalyOtherOrMultipleCongenitalAnomalies")), list(reader_make_constant_shell("CongenitalDoubleOrificeLeftSinus")), list(reader_make_constant_shell("CongenitalDoubleOrificeRightSinus")), list(new SubLObject[]{ reader_make_constant_shell("CoronaryAnomaly"), list(reader_make_constant_shell("CoronaryAnomalyFistulaEctopicOrigin")), list(reader_make_constant_shell("CoronaryArteryAnomaly-CircumflexFromLeftAndRight")), list(reader_make_constant_shell("CoronaryArteryAnomaly-CircumflexFromRight")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftAnteriorDescendingAndCircumflexWithCommonOstium")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftAnteriorDescendingFromRight")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftCircumflexArteryAbsent")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftCoronaryArteryFromRight")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftFromPulmonaryArtery")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftMainTrunkAbsent")), list(reader_make_constant_shell("CoronaryArteryAnomaly-RightFromLeft")) }), list(reader_make_constant_shell("Criss-crossHeart")), list(reader_make_constant_shell("Dextroversion")), list(reader_make_constant_shell("DoubleChamberedRightVentricle")), list(reader_make_constant_shell("DoubleOutletLeftVentricle")), list(reader_make_constant_shell("DoubleOutletRightVentricle")), list(reader_make_constant_shell("DoubleRightVentricle")), list(reader_make_constant_shell("EbsteinAnomaly")), list(reader_make_constant_shell("EndocardialFibroelastosis")), list(reader_make_constant_shell("HypertrophicObstructiveCardiomyopathy-Congenital")), list(reader_make_constant_shell("HypoplasticLeftHeartSyndrome")), list(reader_make_constant_shell("HypoplasticRightHeartSyndrome")), list(reader_make_constant_shell("IsolatedDextrocardia")), list(reader_make_constant_shell("IsolatedLevocardiaNoSitusInversus")), list(reader_make_constant_shell("MalpositionOfGreatVessels")), list(reader_make_constant_shell("MalpositionOfTheHeart")), list(reader_make_constant_shell("Mapca")), list(reader_make_constant_shell("MultipleVentricularSeptalDefect")), list(reader_make_constant_shell("PatentDuctusArteriosus")), list(reader_make_constant_shell("PatentForamenOvale")), list(reader_make_constant_shell("PolyspleniaSyndrome")), list(reader_make_constant_shell("PulmonaryArteryStenosis")), list(reader_make_constant_shell("PulmonaryAtrial-ventricularFistulaPulmonaryArtery-PulmonaryVein")), list(reader_make_constant_shell("SeptalDefect-CommonAtrium")), list(reader_make_constant_shell("SimpleDextrocardiaWithSitusInversus")), list(reader_make_constant_shell("SinusVenosusAtrialSeptalDefect")), list(reader_make_constant_shell("StorageDiseaseOfTheHeart")), list(reader_make_constant_shell("SystemicVenousObstruction")), list(reader_make_constant_shell("TetralogyOfFallot")), list(reader_make_constant_shell("TetralogyOfFallotWithAbsentPulmonaryValve")), list(reader_make_constant_shell("TranspositionGreatVessels-Dextro-transpositionOrLevo-transposition")), list(reader_make_constant_shell("TranspositionGreatVesselsCorrected")), list(reader_make_constant_shell("TruncusArteriosus")), list(reader_make_constant_shell("VascularRing")), list(reader_make_constant_shell("VentricularInversion")), list(reader_make_constant_shell("VentricularSeptalDefect"), list(reader_make_constant_shell("VentricularSeptalDefect-Atrial-ventricularCanalType")), list(reader_make_constant_shell("VentricularSeptalDefect-Membranous")), list(reader_make_constant_shell("VentricularSeptalDefect-Muscular"))) }), list(new SubLObject[]{ reader_make_constant_shell("CoronaryAbnormality"), list(reader_make_constant_shell("CoronaryArteryAneurysm")), list(reader_make_constant_shell("CoronaryArteryDilation")), list(reader_make_constant_shell("CoronaryArteryEmbolus")), list(reader_make_constant_shell("CoronaryArteryThrombosis")), list(reader_make_constant_shell("Dissection-CoronaryArtery"), list(reader_make_constant_shell("AcuteDissection-CoronaryArtery"), list(reader_make_constant_shell("AcuteDissection-CoronaryArtery-Intraoperative"))), list(reader_make_constant_shell("ChronicDissection-CoronaryArtery"))), list(reader_make_constant_shell("MultipleCoronaryArteryAbnormalities")), list(reader_make_constant_shell("MyocardialBridging")), list(reader_make_constant_shell("OtherCoronaryArteryAbnormality")) }), list(reader_make_constant_shell("HeartCondition-TumorOrMass")), list(reader_make_constant_shell("HeartDisease-NonValvular"), list(new SubLObject[]{ reader_make_constant_shell("CardiacArrhythmia"), list(reader_make_constant_shell("3rdDegreeAVBlock")), list(reader_make_constant_shell("AcuteArrhythmia")), list(reader_make_constant_shell("ArrhythmiaOrHeartBlockOrPacemakerInsertion")), list(reader_make_constant_shell("AtrialArrhythmia"), list(reader_make_constant_shell("AtrialFibrillationOrFlutter"), list(reader_make_constant_shell("AtrialFibrillation")), list(reader_make_constant_shell("AtrialFibrillationOrFlutterRequiringTreatment")), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal")))), list(reader_make_constant_shell("AtrialTachycardia")), list(reader_make_constant_shell("CardiacFlutter"), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal")))), list(reader_make_constant_shell("EctopicHeartbeat")), list(reader_make_constant_shell("PrematureAtrialComplex")), list(reader_make_constant_shell("PrematureEctopicBeats")), list(reader_make_constant_shell("WanderingPacemaker"))), list(reader_make_constant_shell("CardiacArrhythmia-Junctional"), list(reader_make_constant_shell("HeartRhythm_junctional_accelerated_junctional_rhythm")), list(reader_make_constant_shell("HeartRhythm_junctional_junctional_escape_rhythm"))), list(reader_make_constant_shell("CardiacFibrillation"), list(reader_make_constant_shell("AtrialFibrillation"))), list(reader_make_constant_shell("CardiacSinusRhythm"), list(reader_make_constant_shell("Bradycardia"), list(reader_make_constant_shell("HeartBlock"), list(reader_make_constant_shell("AVBlock"), list(reader_make_constant_shell("HeartBlock-CompleteWithJunctionalEscape")), list(reader_make_constant_shell("HeartBlock-CompleteWithVentricularEscape")), list(reader_make_constant_shell("HeartBlock-FirstDegree")), list(reader_make_constant_shell("HeartBlock-SecondDegree"), list(reader_make_constant_shell("HeartBlock-SecondDegree-Type1")), list(reader_make_constant_shell("HeartBlock-SecondDegree-Type2"))), list(reader_make_constant_shell("ThirdDegreeAvBlock"))), list(reader_make_constant_shell("CompleteHeartBlock"), list(reader_make_constant_shell("HeartBlock-CompleteWithJunctionalEscape")), list(reader_make_constant_shell("HeartBlock-CompleteWithVentricularEscape")), list(reader_make_constant_shell("HeartRhythm_ventricular_complete_heart_block")), list(reader_make_constant_shell("HeartRhythm_ventricular_complete_heart_block_with_junctional_escape")), list(reader_make_constant_shell("HeartRhythm_ventricular_complete_heart_block_with_ventricular_escape"))), list(reader_make_constant_shell("HeartRhythm_heart_block_complete_heart_block")))), list(reader_make_constant_shell("ParoxysmalTachycardia-Sinus")), list(reader_make_constant_shell("SickSinusSyndrome")), list(reader_make_constant_shell("SinusRhythm-Normal")), list(reader_make_constant_shell("SinusTachycardia"))), list(reader_make_constant_shell("ChronicArrhythmia")), list(reader_make_constant_shell("FibrillationFlutterTachycardiaOrHeartBlock"), list(reader_make_constant_shell("AtrialFibrillationVentricularTachycardia-fibrillation")), list(reader_make_constant_shell("FibrillationOrFlutter"), list(reader_make_constant_shell("AtrialFibrillationOrFlutter"), list(reader_make_constant_shell("AtrialFibrillation")), list(reader_make_constant_shell("AtrialFibrillationOrFlutterRequiringTreatment")), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal"))))), list(reader_make_constant_shell("Tachycardia"), list(reader_make_constant_shell("ParoxysmalTachycardia-Sinus")), list(reader_make_constant_shell("SinusTachycardia")), list(reader_make_constant_shell("SupraventricularTachycardia"), list(reader_make_constant_shell("AtrialTachycardia"))), list(reader_make_constant_shell("VentricularTachycardia")))), list(reader_make_constant_shell("HeartBlock-NotComplete")), list(reader_make_constant_shell("OtherArrhythmia")), list(reader_make_constant_shell("Paced-HeartRhythm"), list(reader_make_constant_shell("Atrial-ventricular-PacedHeartRhythm")), list(reader_make_constant_shell("AtrialPacedRhythm")), list(reader_make_constant_shell("AtriallyPacedHeartRhythm")), list(reader_make_constant_shell("VentricularlyPacedHeartRhythm"))), list(reader_make_constant_shell("PermanentCardiacArrhythmia")), list(reader_make_constant_shell("PrematureVentricularContraction")), list(reader_make_constant_shell("VentricularArrhythmia"), list(reader_make_constant_shell("PrematureVentricularComplex")), list(reader_make_constant_shell("VentricularTachycardiaOrFibrillation"), list(reader_make_constant_shell("VentricularFibrillation")), list(reader_make_constant_shell("VentricularTachycardia")))) }), list(reader_make_constant_shell("Cardiomyopathy"), list(reader_make_constant_shell("HypertrophicCardiomyopathy"), list(reader_make_constant_shell("HypertrophicObstructiveCardiomyopathy"), list(reader_make_constant_shell("HypertrophicObstructiveCardiomyopathy-Congenital"))), list(reader_make_constant_shell("Non-obstructiveHypertrophicCardiomyopathy"))), list(reader_make_constant_shell("IschemicCardiomyopathy")), list(reader_make_constant_shell("RestrictiveCardiomyopathyAmyloid"))), list(reader_make_constant_shell("Pericarditis"))), list(reader_make_constant_shell("HeartFailure"), list(reader_make_constant_shell("CongestiveHeartFailure"))), list(reader_make_constant_shell("HeartValveRelatedProblem"), list(reader_make_constant_shell("AcquiredValvularHeartDisease"), list(reader_make_constant_shell("AcquiredNonRheumaticValvularHeartDisease")), list(reader_make_constant_shell("Endocarditis-Infection")), list(reader_make_constant_shell("Endocarditis-Morbidity"), list(reader_make_constant_shell("Endocarditis-CardiacValve"), list(reader_make_constant_shell("Endocarditis-AorticValve")), list(reader_make_constant_shell("Endocarditis-MitralValve")), list(reader_make_constant_shell("Endocarditis-PulmonaryValve")), list(reader_make_constant_shell("Endocarditis-TricuspidValve")))), list(reader_make_constant_shell("Regurgitation-MitralValve"), list(reader_make_constant_shell("MitralValveRegurgitationFromPapillaryMuscleDysfunction"))), list(reader_make_constant_shell("RheumaticHeartDisease"))), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheAorticValve"), list(reader_make_constant_shell("AbnormalNumberOfCusps-AorticValve")), list(reader_make_constant_shell("AnnularCalcification-AorticValve")), list(reader_make_constant_shell("Atresia-AorticValve")), list(reader_make_constant_shell("Calcification-AorticValve")), list(reader_make_constant_shell("Endocarditis-AorticValve")), list(reader_make_constant_shell("Fibrosis-AorticValve")), list(reader_make_constant_shell("ProstheticValveDysfunction-AorticValve")), list(reader_make_constant_shell("Regurgitation-AorticValve")), list(reader_make_constant_shell("RheumaticValveDisease-AorticValve")) }), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheMitralValve"), list(reader_make_constant_shell("AbnormalNumberOfCusps-MitralValve")), list(reader_make_constant_shell("AnnularCalcification-MitralValve")), list(reader_make_constant_shell("Atresia-MitralValve")), list(reader_make_constant_shell("BallooningOrProlapsedCardiacValve-MitralValve")), list(reader_make_constant_shell("Calcification-MitralValve")), list(reader_make_constant_shell("Endocarditis-MitralValve")), list(reader_make_constant_shell("Fibrosis-MitralValve")), list(reader_make_constant_shell("MyxomatousDegeneration-MitralValve")), list(reader_make_constant_shell("PapillaryMuscleDysfunction-MitralValve")), list(reader_make_constant_shell("ProstheticValveDysfunction-MitralValve")), list(reader_make_constant_shell("Regurgitation-MitralValve"), list(reader_make_constant_shell("MitralValveRegurgitationFromPapillaryMuscleDysfunction"))), list(reader_make_constant_shell("RheumaticValveDisease-MitralValve")) }), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfThePulmonaryValve"), list(reader_make_constant_shell("AbnormalNumberOfCusps-PulmonaryValve")), list(reader_make_constant_shell("AnnularCalcification-PulmonaryValve")), list(reader_make_constant_shell("Atresia-PulmonaryValve"), list(reader_make_constant_shell("AtresiaWithIntactSeptum-PulmonaryValve")), list(reader_make_constant_shell("AtresiaWithVentricularSeptalDefect-PulmonaryValve"))), list(reader_make_constant_shell("Calcification-PulmonaryValve")), list(reader_make_constant_shell("Endocarditis-PulmonaryValve")), list(reader_make_constant_shell("Fibrosis-PulmonaryValve")), list(reader_make_constant_shell("ProstheticValveDysfunction-PulmonaryValve")), list(reader_make_constant_shell("Regurgitation-PulmonaryValve")), list(reader_make_constant_shell("RheumaticValveDisease-PulmonaryValve")), list(reader_make_constant_shell("Stenosis-PulmonaryValve")) }), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheTricuspidValve"), list(reader_make_constant_shell("AbnormalNumberOfCusps-TricuspidValve")), list(reader_make_constant_shell("AnnularCalcification-TricuspidValve")), list(reader_make_constant_shell("Atresia-TricuspidValve")), list(reader_make_constant_shell("BallooningOrProlapsedCardiacValve-TricuspidValve")), list(reader_make_constant_shell("Calcification-TricuspidValve")), list(reader_make_constant_shell("Endocarditis-TricuspidValve")), list(reader_make_constant_shell("Fibrosis-TricuspidValve")), list(reader_make_constant_shell("MyxomatousDegeneration-TricuspidValve")), list(reader_make_constant_shell("PapillaryMuscleDysfunction-TricuspidValve")), list(reader_make_constant_shell("ProstheticValveDysfunction-TricuspidValve")), list(reader_make_constant_shell("Regurgitation-TricuspidValve")), list(reader_make_constant_shell("RheumaticValveDisease-TricuspidValve")), list(reader_make_constant_shell("Stenosis-TricuspidValve")) }), list(reader_make_constant_shell("HeartValveDysfunction"), list(reader_make_constant_shell("CardiacValveStenosis"), list(reader_make_constant_shell("Stenosis-AorticValve")), list(reader_make_constant_shell("Stenosis-MitralValve")), list(reader_make_constant_shell("Stenosis-PulmonaryValve")), list(reader_make_constant_shell("Stenosis-TricuspidValve")))), list(reader_make_constant_shell("RheumaticValveDisease"), list(reader_make_constant_shell("RheumaticValveDisease-AorticValve")), list(reader_make_constant_shell("RheumaticValveDisease-MitralValve")), list(reader_make_constant_shell("RheumaticValveDisease-PulmonaryValve")), list(reader_make_constant_shell("RheumaticValveDisease-TricuspidValve")))), list(reader_make_constant_shell("HypertensiveHeartDisease")), list(reader_make_constant_shell("IschemicHeartDisease"), list(reader_make_constant_shell("CoronaryArteryDisease-Ischemic")), list(reader_make_constant_shell("In-stentStenosis")), list(reader_make_constant_shell("PostInfarctVentricularSeptalDefect")), list(reader_make_constant_shell("RightVentricularInfarction"))), list(reader_make_constant_shell("TraumaticHeartDisease")), list(reader_make_constant_shell("VentricularDisorder"), list(reader_make_constant_shell("LeftVentricularDisorder"), list(reader_make_constant_shell("LeftVentricleAneurysm"))), list(reader_make_constant_shell("RightVentricularDisorder"), list(reader_make_constant_shell("RightVentricleAneurysm"))), list(reader_make_constant_shell("VentricularAneurysm"), list(reader_make_constant_shell("LeftVentricleAneurysm")), list(reader_make_constant_shell("RightVentricleAneurysm"))), list(reader_make_constant_shell("VentricularArrhythmia"), list(reader_make_constant_shell("PrematureVentricularComplex")), list(reader_make_constant_shell("VentricularTachycardiaOrFibrillation"), list(reader_make_constant_shell("VentricularFibrillation")), list(reader_make_constant_shell("VentricularTachycardia"))))) }), list(reader_make_constant_shell("HeartRhythm"), list(reader_make_constant_shell("HeartRhythm_atrial"), list(reader_make_constant_shell("AtrialArrhythmia"), list(reader_make_constant_shell("AtrialFibrillationOrFlutter"), list(reader_make_constant_shell("AtrialFibrillation")), list(reader_make_constant_shell("AtrialFibrillationOrFlutterRequiringTreatment")), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal")))), list(reader_make_constant_shell("AtrialTachycardia")), list(reader_make_constant_shell("CardiacFlutter"), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal")))), list(reader_make_constant_shell("EctopicHeartbeat")), list(reader_make_constant_shell("PrematureAtrialComplex")), list(reader_make_constant_shell("PrematureEctopicBeats")), list(reader_make_constant_shell("WanderingPacemaker"))), list(reader_make_constant_shell("HeartRhythm_atrial_other")), list(reader_make_constant_shell("HeartRhythm_atrial_supraventricular_tachycardia"))), list(reader_make_constant_shell("HeartRhythm_cardiac"), list(new SubLObject[]{ reader_make_constant_shell("CardiacArrhythmia"), list(reader_make_constant_shell("3rdDegreeAVBlock")), list(reader_make_constant_shell("AcuteArrhythmia")), list(reader_make_constant_shell("ArrhythmiaOrHeartBlockOrPacemakerInsertion")), list(reader_make_constant_shell("AtrialArrhythmia"), list(reader_make_constant_shell("AtrialFibrillationOrFlutter"), list(reader_make_constant_shell("AtrialFibrillation")), list(reader_make_constant_shell("AtrialFibrillationOrFlutterRequiringTreatment")), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal")))), list(reader_make_constant_shell("AtrialTachycardia")), list(reader_make_constant_shell("CardiacFlutter"), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal")))), list(reader_make_constant_shell("EctopicHeartbeat")), list(reader_make_constant_shell("PrematureAtrialComplex")), list(reader_make_constant_shell("PrematureEctopicBeats")), list(reader_make_constant_shell("WanderingPacemaker"))), list(reader_make_constant_shell("CardiacArrhythmia-Junctional"), list(reader_make_constant_shell("HeartRhythm_junctional_accelerated_junctional_rhythm")), list(reader_make_constant_shell("HeartRhythm_junctional_junctional_escape_rhythm"))), list(reader_make_constant_shell("CardiacFibrillation"), list(reader_make_constant_shell("AtrialFibrillation"))), list(reader_make_constant_shell("CardiacSinusRhythm"), list(reader_make_constant_shell("Bradycardia"), list(reader_make_constant_shell("HeartBlock"), list(reader_make_constant_shell("AVBlock"), list(reader_make_constant_shell("HeartBlock-CompleteWithJunctionalEscape")), list(reader_make_constant_shell("HeartBlock-CompleteWithVentricularEscape")), list(reader_make_constant_shell("HeartBlock-FirstDegree")), list(reader_make_constant_shell("HeartBlock-SecondDegree"), list(reader_make_constant_shell("HeartBlock-SecondDegree-Type1")), list(reader_make_constant_shell("HeartBlock-SecondDegree-Type2"))), list(reader_make_constant_shell("ThirdDegreeAvBlock"))), list(reader_make_constant_shell("CompleteHeartBlock"), list(reader_make_constant_shell("HeartBlock-CompleteWithJunctionalEscape")), list(reader_make_constant_shell("HeartBlock-CompleteWithVentricularEscape")), list(reader_make_constant_shell("HeartRhythm_ventricular_complete_heart_block")), list(reader_make_constant_shell("HeartRhythm_ventricular_complete_heart_block_with_junctional_escape")), list(reader_make_constant_shell("HeartRhythm_ventricular_complete_heart_block_with_ventricular_escape"))), list(reader_make_constant_shell("HeartRhythm_heart_block_complete_heart_block")))), list(reader_make_constant_shell("ParoxysmalTachycardia-Sinus")), list(reader_make_constant_shell("SickSinusSyndrome")), list(reader_make_constant_shell("SinusRhythm-Normal")), list(reader_make_constant_shell("SinusTachycardia"))), list(reader_make_constant_shell("ChronicArrhythmia")), list(reader_make_constant_shell("FibrillationFlutterTachycardiaOrHeartBlock"), list(reader_make_constant_shell("AtrialFibrillationVentricularTachycardia-fibrillation")), list(reader_make_constant_shell("FibrillationOrFlutter"), list(reader_make_constant_shell("AtrialFibrillationOrFlutter"), list(reader_make_constant_shell("AtrialFibrillation")), list(reader_make_constant_shell("AtrialFibrillationOrFlutterRequiringTreatment")), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal"))))), list(reader_make_constant_shell("Tachycardia"), list(reader_make_constant_shell("ParoxysmalTachycardia-Sinus")), list(reader_make_constant_shell("SinusTachycardia")), list(reader_make_constant_shell("SupraventricularTachycardia"), list(reader_make_constant_shell("AtrialTachycardia"))), list(reader_make_constant_shell("VentricularTachycardia")))), list(reader_make_constant_shell("HeartBlock-NotComplete")), list(reader_make_constant_shell("OtherArrhythmia")), list(reader_make_constant_shell("Paced-HeartRhythm"), list(reader_make_constant_shell("Atrial-ventricular-PacedHeartRhythm")), list(reader_make_constant_shell("AtrialPacedRhythm")), list(reader_make_constant_shell("AtriallyPacedHeartRhythm")), list(reader_make_constant_shell("VentricularlyPacedHeartRhythm"))), list(reader_make_constant_shell("PermanentCardiacArrhythmia")), list(reader_make_constant_shell("PrematureVentricularContraction")), list(reader_make_constant_shell("VentricularArrhythmia"), list(reader_make_constant_shell("PrematureVentricularComplex")), list(reader_make_constant_shell("VentricularTachycardiaOrFibrillation"), list(reader_make_constant_shell("VentricularFibrillation")), list(reader_make_constant_shell("VentricularTachycardia")))) })), list(reader_make_constant_shell("HeartRhythm_other_pulseless_electrical_activity")), list(reader_make_constant_shell("HeartRhythm_ventricular"), list(reader_make_constant_shell("HeartRhythm_ventricular_accelerated_idioventricular")), list(reader_make_constant_shell("HeartRhythm_ventricular_ventricular_escape")), list(reader_make_constant_shell("VentricularArrhythmia"), list(reader_make_constant_shell("PrematureVentricularComplex")), list(reader_make_constant_shell("VentricularTachycardiaOrFibrillation"), list(reader_make_constant_shell("VentricularFibrillation")), list(reader_make_constant_shell("VentricularTachycardia"))))), list(reader_make_constant_shell("OtherHeartRhythmType"), list(reader_make_constant_shell("Asystole")), list(reader_make_constant_shell("IdioventricularHeartRhythm")))), list(reader_make_constant_shell("HematologicDisorder"), list(reader_make_constant_shell("Anemia"), list(reader_make_constant_shell("HemolyticAnemia")))), list(reader_make_constant_shell("Hernia"), list(reader_make_constant_shell("HiatalHernia"))), list(reader_make_constant_shell("IatrogenicInjury")), list(reader_make_constant_shell("InfectedEndocardialPacingLead")), list(reader_make_constant_shell("InfectedEpicardialPacingLead")), list(reader_make_constant_shell("Infection"), list(reader_make_constant_shell("Endocarditis-Infection")), list(reader_make_constant_shell("InfectionOrMycotic"), list(reader_make_constant_shell("InfectionOrMycotic-AortaArch")), list(reader_make_constant_shell("InfectionOrMycotic-AscendingAorta")), list(reader_make_constant_shell("InfectionOrMycotic-DescendingAorta"), list(reader_make_constant_shell("InfectionOrMycotic-DescendingThoracicAorta"))))), list(reader_make_constant_shell("InflammationCondition"), list(reader_make_constant_shell("Endocarditis-Infection")), list(reader_make_constant_shell("Myocarditis")), list(reader_make_constant_shell("Pericarditis"))), list(reader_make_constant_shell("IntramuralHematoma"), list(reader_make_constant_shell("IntramuralHematoma-AortaArch")), list(reader_make_constant_shell("IntramuralHematoma-AscendingAorta")), list(reader_make_constant_shell("IntramuralHematoma-DescendingAorta"), list(reader_make_constant_shell("IntramuralHematoma-DescendingThoracicAorta")))), list(reader_make_constant_shell("LeakInEndograftStent-AorticArch")), list(reader_make_constant_shell("LeakInEndograftStent-DescendingAorta")), list(reader_make_constant_shell("LifeThreateningCondition"), list(reader_make_constant_shell("Cancer")), list(reader_make_constant_shell("DiabetesMellitus")), list(reader_make_constant_shell("Hepatitis")), list(reader_make_constant_shell("ImmediatelyLifeThreateningCondition"), list(reader_make_constant_shell("CardiacArrest")), list(reader_make_constant_shell("Stroke-PhysiologicalCondition"), list(reader_make_constant_shell("StrokeDueToBleed")), list(reader_make_constant_shell("StrokeDueToEmbolus"))))), list(reader_make_constant_shell("MyxomatousDegeneration"), list(reader_make_constant_shell("MyxomatousDegeneration-MitralValve")), list(reader_make_constant_shell("MyxomatousDegeneration-TricuspidValve"))), list(reader_make_constant_shell("NeurologicalAilmentCondition"), list(reader_make_constant_shell("NeurologicalDisease"), list(reader_make_constant_shell("CerebrovascularNeurologicAttack"), list(reader_make_constant_shell("Stroke-PhysiologicalCondition"), list(reader_make_constant_shell("StrokeDueToBleed")), list(reader_make_constant_shell("StrokeDueToEmbolus"))), list(reader_make_constant_shell("TIAOrRIND"), list(reader_make_constant_shell("ReversibleIschemicNeurologicDeficit")), list(reader_make_constant_shell("TransientIschemicAttack"))), list(list(reader_make_constant_shell("CollectionUnionFn"), list(reader_make_constant_shell("TheSet"), reader_make_constant_shell("TransientIschemicAttack"), reader_make_constant_shell("ReversibleIschemicNeurologicDeficit"))), list(reader_make_constant_shell("ReversibleIschemicNeurologicDeficit")), list(reader_make_constant_shell("TransientIschemicAttack")))), list(reader_make_constant_shell("DementiaOrAlzheimersDisease")), list(reader_make_constant_shell("OtherCentralNervousSystemDisease")))), list(reader_make_constant_shell("Normal-Condition")), list(reader_make_constant_shell("NormalEndograftStent-AorticArch")), list(reader_make_constant_shell("NormalEndograftStent-AscendingAorta")), list(reader_make_constant_shell("NormalEndograftStent-DescendingAorta")), list(reader_make_constant_shell("OtherDiagnosis")), list(reader_make_constant_shell("OtherDisease"), list(reader_make_constant_shell("AcuteRheumaticFever")), list(reader_make_constant_shell("CollagenDisease")), list(reader_make_constant_shell("ConnectiveTissueDisease-Non-marfan")), list(reader_make_constant_shell("Dyslipidemia")), list(reader_make_constant_shell("Immunosupressed-Condition")), list(reader_make_constant_shell("MarfansSyndrome")), list(reader_make_constant_shell("Obesity"), list(reader_make_constant_shell("MorbidObesity")))), list(reader_make_constant_shell("PapillaryMuscleDysfunction"), list(reader_make_constant_shell("PapillaryMuscleDysfunction-MitralValve")), list(reader_make_constant_shell("PapillaryMuscleDysfunction-TricuspidValve"))), list(reader_make_constant_shell("PericardialDisease"), list(reader_make_constant_shell("PericardialEffusion")), list(reader_make_constant_shell("Pericarditis"))), list(reader_make_constant_shell("PrimaryMyocardialDisease")), list(reader_make_constant_shell("ProstheticValveDysfunction"), list(reader_make_constant_shell("ProstheticValveDysfunction-AorticValve")), list(reader_make_constant_shell("ProstheticValveDysfunction-MitralValve")), list(reader_make_constant_shell("ProstheticValveDysfunction-PulmonaryValve")), list(reader_make_constant_shell("ProstheticValveDysfunction-TricuspidValve"))), list(reader_make_constant_shell("Pseudoaneurysm"), list(reader_make_constant_shell("AorticPseudoaneurysm"), list(reader_make_constant_shell("Pseudoaneurysm-AbdominalAorta")), list(reader_make_constant_shell("Pseudoaneurysm-AortaArch")), list(reader_make_constant_shell("Pseudoaneurysm-AscendingAorta")), list(reader_make_constant_shell("Pseudoaneurysm-ThoracicAorta")))), list(reader_make_constant_shell("RadiationInducedToxicity")), list(reader_make_constant_shell("Regurgitation-Circulatory"), list(reader_make_constant_shell("Regurgitation-CardiacValve"), list(reader_make_constant_shell("Regurgitation-AorticValve")), list(reader_make_constant_shell("Regurgitation-MitralValve"), list(reader_make_constant_shell("MitralValveRegurgitationFromPapillaryMuscleDysfunction"))), list(reader_make_constant_shell("Regurgitation-PulmonaryValve")), list(reader_make_constant_shell("Regurgitation-TricuspidValve")))), list(reader_make_constant_shell("RenalDisease"), list(reader_make_constant_shell("RenalFailure"), list(reader_make_constant_shell("RenalFailureRequiringDialysis")))), list(reader_make_constant_shell("RespiratoryAilment"), list(new SubLObject[]{ reader_make_constant_shell("LungDisease"), list(reader_make_constant_shell("ChronicLungDisease"), list(reader_make_constant_shell("ChronicLungDisease-Mild")), list(reader_make_constant_shell("ChronicLungDisease-Moderate")), list(reader_make_constant_shell("ChronicLungDisease-Severe")), list(reader_make_constant_shell("ChronicObstructivePulmonaryDisease"), list(reader_make_constant_shell("ChronicObstructivePulmonaryDisease-Clinical")), list(reader_make_constant_shell("ChronicObstructivePulmonaryDisease-Pharmacologic")))), list(reader_make_constant_shell("ChronicObstructivePulmonaryDisease-PulmonaryFunctionTest")), list(reader_make_constant_shell("PulmonaryEmbolism")), list(reader_make_constant_shell("PulmonaryHypertension")), list(reader_make_constant_shell("PulmonaryHypertension-Clinical")), list(reader_make_constant_shell("PulmonaryHypertension-Primary")), list(reader_make_constant_shell("PulmonaryHypertension-Secondary")), list(reader_make_constant_shell("PulmonaryHypertensionWithNoPaSystolicPressureReading")), list(reader_make_constant_shell("PulmonaryHypertensionWithPaSystolicPressureGt35")), list(reader_make_constant_shell("PulmonaryHypertensionWithRVSystolicPressureGt35")) })), list(reader_make_constant_shell("SeptalHypertrophyNonHOCM")), list(reader_make_constant_shell("SkinAilment"), list(reader_make_constant_shell("Scleroderma"))), list(reader_make_constant_shell("Stenosis-Condition"), list(reader_make_constant_shell("CardiacValveStenosis"), list(reader_make_constant_shell("Stenosis-AorticValve")), list(reader_make_constant_shell("Stenosis-MitralValve")), list(reader_make_constant_shell("Stenosis-PulmonaryValve")), list(reader_make_constant_shell("Stenosis-TricuspidValve"))), list(reader_make_constant_shell("CarotidArteryStenosisGreaterThan20"), list(reader_make_constant_shell("CarotidArteryStenosisGreaterThan20LessThanOrEqualTo75")), list(reader_make_constant_shell("CarotidArteryStenosisGreaterThan75"), list(reader_make_constant_shell("CarotidArteryStenosisGreaterThan79")))), list(reader_make_constant_shell("PulmonaryArteryStenosis"))), list(reader_make_constant_shell("SuspectedDissectingAneurysm-AbdominalAorta")), list(reader_make_constant_shell("SuspectedDissectingAneurysm-AortaArch")), list(reader_make_constant_shell("SuspectedDissectingAneurysm-AorticRoot")), list(reader_make_constant_shell("SuspectedDissectingAneurysm-AscendingAorta")), list(reader_make_constant_shell("SuspectedDissectingAneurysm-ThoracicAorta")), list(reader_make_constant_shell("Thrombosis"), list(reader_make_constant_shell("CoronaryArteryThrombosis")), list(reader_make_constant_shell("DescendingAortaThrombosis"), list(reader_make_constant_shell("DescendingThoracicAortaThrombosis"))), list(reader_make_constant_shell("Thrombosis-AbdominalAorta")), list(reader_make_constant_shell("Thrombosis-Aorta")), list(reader_make_constant_shell("Thrombosis-AscendingAorta")), list(reader_make_constant_shell("Trombosis-AortaArch"))), list(reader_make_constant_shell("ToxicallyInducediatrogenic")), list(reader_make_constant_shell("Trauma"), list(reader_make_constant_shell("Trauma-AortaArch")), list(reader_make_constant_shell("Trauma-AscendingAorta")), list(reader_make_constant_shell("Trauma-DescendingAorta"), list(reader_make_constant_shell("Trauma-DescendingThoracicAorta")))), list(reader_make_constant_shell("TumorCondition"), list(reader_make_constant_shell("Cancer"))), list(reader_make_constant_shell("UlcerDisease"), list(reader_make_constant_shell("AorticUlcer"), list(reader_make_constant_shell("PenetratingUlcer-AortaArch")), list(reader_make_constant_shell("PenetratingUlcer-AscendingAorta")), list(reader_make_constant_shell("PenetratingUlcer-DescendingAorta"), list(reader_make_constant_shell("PenetratingUlcer-DescendingThoracicAorta")))), list(reader_make_constant_shell("PenetratingUlcer"), list(reader_make_constant_shell("PenetratingUlcer-AortaArch")), list(reader_make_constant_shell("PenetratingUlcer-AscendingAorta")), list(reader_make_constant_shell("PenetratingUlcer-DescendingAorta"), list(reader_make_constant_shell("PenetratingUlcer-DescendingThoracicAorta"))))), list(reader_make_constant_shell("VascularDisorder"), list(reader_make_constant_shell("Aneurysm_Or_Dissection"), list(new SubLObject[]{ reader_make_constant_shell("Aneurysm"), list(reader_make_constant_shell("Aneurysm-AbdominalAorta"), list(reader_make_constant_shell("SaccularAneurysm-AbdominalAorta"))), list(reader_make_constant_shell("Aneurysm-AortaArch"), list(reader_make_constant_shell("DissectingAneurysm-AortaArch")), list(reader_make_constant_shell("SaccularAneurysm-AortaArch"))), list(reader_make_constant_shell("Aneurysm-AorticRoot"), list(reader_make_constant_shell("DissectingAneurysm-AorticRoot")), list(reader_make_constant_shell("SaccularAneurysm-AorticRoot"))), list(reader_make_constant_shell("Aneurysm-AscendingAorta"), list(reader_make_constant_shell("DissectingAneurysm-AscendingAorta")), list(reader_make_constant_shell("SaccularAneurysm-AscendingAorta"))), list(reader_make_constant_shell("Aneurysm-DescendingAorta"), list(reader_make_constant_shell("Aneurysm-DescendingThoracicAorta")), list(reader_make_constant_shell("DissectingAneurysm-DescendingThoracicAorta")), list(reader_make_constant_shell("SaccularAneurysm-DescendingAorta"), list(reader_make_constant_shell("SaccularAneurysm-DescendingThoracicAorta")))), list(reader_make_constant_shell("Aneurysm-ThoracicAbdominalAorta")), list(reader_make_constant_shell("Aneurysm-ThoracicAorta"), list(reader_make_constant_shell("DissectingAneurysm-ThoracicAorta"), list(reader_make_constant_shell("DissectingAneurysm-DescendingThoracicAorta")))), list(reader_make_constant_shell("AorticAneurysm"), list(reader_make_constant_shell("AortaUnspecifiedAneurysm"))), list(reader_make_constant_shell("AtrialSeptalAneurysm"), list(reader_make_constant_shell("AtrialSeptalAnyeurysm-Congenital"))), list(reader_make_constant_shell("CoronaryArteryAneurysm")), list(reader_make_constant_shell("DissectingAneurysm"), list(reader_make_constant_shell("DissectingAneurysm-AbdominalAorta")), list(reader_make_constant_shell("DissectingAneurysm-AortaArch")), list(reader_make_constant_shell("DissectingAneurysm-AorticRoot")), list(reader_make_constant_shell("DissectingAneurysm-AscendingAorta")), list(reader_make_constant_shell("DissectingAneurysm-ThoracicAorta"), list(reader_make_constant_shell("DissectingAneurysm-DescendingThoracicAorta")))), list(reader_make_constant_shell("SaccularAneurysm"), list(reader_make_constant_shell("SaccularAneurysm-AbdominalAorta")), list(reader_make_constant_shell("SaccularAneurysm-AortaArch")), list(reader_make_constant_shell("SaccularAneurysm-AorticRoot")), list(reader_make_constant_shell("SaccularAneurysm-AscendingAorta")), list(reader_make_constant_shell("SaccularAneurysm-DescendingAorta"), list(reader_make_constant_shell("SaccularAneurysm-DescendingThoracicAorta")))), list(reader_make_constant_shell("VentricularAneurysm"), list(reader_make_constant_shell("LeftVentricleAneurysm")), list(reader_make_constant_shell("RightVentricleAneurysm"))), list(reader_make_constant_shell("VentricularSeptalAneurysm")) }), list(reader_make_constant_shell("AortaAneurysmOrDissection"), list(reader_make_constant_shell("AortaDissection"), list(reader_make_constant_shell("AcuteAorticDissection"), list(reader_make_constant_shell("AcuteDissection-AbdominalAorta-Intraoperative")), list(reader_make_constant_shell("AcuteDissection-AortaArch")), list(reader_make_constant_shell("AcuteDissection-AorticRoot-Intraoperative")), list(reader_make_constant_shell("AcuteDissection-AscendingAorta")), list(reader_make_constant_shell("AcuteDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingThoracicAorta")))), list(reader_make_constant_shell("ChronicAortaDissection"), list(reader_make_constant_shell("ChronicDissection-AbdominalAorta")), list(reader_make_constant_shell("ChronicDissection-AortaArch")), list(reader_make_constant_shell("ChronicDissection-AorticRoot")), list(reader_make_constant_shell("ChronicDissection-AscendingAorta")), list(reader_make_constant_shell("ChronicDissection-DescendingAorta"), list(reader_make_constant_shell("ChronicDissection-DescendingThoracicAorta"))))), list(reader_make_constant_shell("AorticAneurysm"), list(reader_make_constant_shell("AortaUnspecifiedAneurysm")))), list(reader_make_constant_shell("Dissection"), list(reader_make_constant_shell("AcuteDissection"), list(reader_make_constant_shell("AcuteAorticDissection"), list(reader_make_constant_shell("AcuteDissection-AbdominalAorta-Intraoperative")), list(reader_make_constant_shell("AcuteDissection-AortaArch")), list(reader_make_constant_shell("AcuteDissection-AorticRoot-Intraoperative")), list(reader_make_constant_shell("AcuteDissection-AscendingAorta")), list(reader_make_constant_shell("AcuteDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingThoracicAorta")))), list(reader_make_constant_shell("AcuteDissection-AorticRoot")), list(reader_make_constant_shell("AcuteDissection-CoronaryArtery"), list(reader_make_constant_shell("AcuteDissection-CoronaryArtery-Intraoperative"))), list(reader_make_constant_shell("AcuteIntraoperativeDissection"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AortaArch")), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AscendingAorta")), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingThoracicAorta"))))), list(reader_make_constant_shell("AortaDissection"), list(reader_make_constant_shell("AcuteAorticDissection"), list(reader_make_constant_shell("AcuteDissection-AbdominalAorta-Intraoperative")), list(reader_make_constant_shell("AcuteDissection-AortaArch")), list(reader_make_constant_shell("AcuteDissection-AorticRoot-Intraoperative")), list(reader_make_constant_shell("AcuteDissection-AscendingAorta")), list(reader_make_constant_shell("AcuteDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingThoracicAorta")))), list(reader_make_constant_shell("ChronicAortaDissection"), list(reader_make_constant_shell("ChronicDissection-AbdominalAorta")), list(reader_make_constant_shell("ChronicDissection-AortaArch")), list(reader_make_constant_shell("ChronicDissection-AorticRoot")), list(reader_make_constant_shell("ChronicDissection-AscendingAorta")), list(reader_make_constant_shell("ChronicDissection-DescendingAorta"), list(reader_make_constant_shell("ChronicDissection-DescendingThoracicAorta"))))), list(reader_make_constant_shell("ChronicDissection"), list(reader_make_constant_shell("ChronicAortaDissection"), list(reader_make_constant_shell("ChronicDissection-AbdominalAorta")), list(reader_make_constant_shell("ChronicDissection-AortaArch")), list(reader_make_constant_shell("ChronicDissection-AorticRoot")), list(reader_make_constant_shell("ChronicDissection-AscendingAorta")), list(reader_make_constant_shell("ChronicDissection-DescendingAorta"), list(reader_make_constant_shell("ChronicDissection-DescendingThoracicAorta")))), list(reader_make_constant_shell("ChronicDissection-CoronaryArtery"))), list(reader_make_constant_shell("Dissection-AortaArch"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AortaArch")), list(reader_make_constant_shell("ChronicDissection-AortaArch"))), list(reader_make_constant_shell("Dissection-AorticRoot")), list(reader_make_constant_shell("Dissection-AscendingAorta"), list(reader_make_constant_shell("AcuteDissection-AscendingAorta")), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AscendingAorta")), list(reader_make_constant_shell("ChronicDissection-AscendingAorta"))), list(reader_make_constant_shell("Dissection-DescendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingThoracicAorta"))), list(reader_make_constant_shell("Dissection-DescendingThoracicAorta"))))), list(reader_make_constant_shell("ArterioscleroticObliterans")), list(reader_make_constant_shell("CarotidArteryStenosisGreaterThan20"), list(reader_make_constant_shell("CarotidArteryStenosisGreaterThan20LessThanOrEqualTo75")), list(reader_make_constant_shell("CarotidArteryStenosisGreaterThan75"), list(reader_make_constant_shell("CarotidArteryStenosisGreaterThan79")))), list(reader_make_constant_shell("Embolus-Systemic"), list(reader_make_constant_shell("CoronaryArteryEmbolus")), list(reader_make_constant_shell("PulmonaryEmbolism"))), list(reader_make_constant_shell("PeripheralVascularDisease")), list(reader_make_constant_shell("PulmonaryArteryStenosis"))), list(list(reader_make_constant_shell("DiseaseAfflictingPartFn"), reader_make_constant_shell("Liver")), list(reader_make_constant_shell("HepaticFailure"), list(reader_make_constant_shell("DigestiveHepaticFailure"))), list(reader_make_constant_shell("Hepatitis"))) })))), list(list(list(reader_make_constant_shell("isa"), makeSymbol("?X"), reader_make_constant_shell("Debridement-VascularProcedure")), reader_make_constant_shell("MedicalResearchCAEGuidanceMt")), list(list(list(TWO_INTEGER), list(list(new SubLObject[]{ reader_make_constant_shell("SurgicalProcedure"), list(reader_make_constant_shell("Allograft-SurgicalProcedure")), list(reader_make_constant_shell("AnnulusEnlarging-ValvularProcedure")), list(reader_make_constant_shell("AnteriorToAnteriorCardiacValveChordaeTransfer")), list(reader_make_constant_shell("AnterolateralCommissuroplasty")), list(reader_make_constant_shell("AnteroseptalCommisuroplasty")), list(reader_make_constant_shell("AortaProcedureOrIABPProcedure-ExceptionSpecification"), list(reader_make_constant_shell("AortaProcedure-ExceptionSpecification")), list(reader_make_constant_shell("Intra-aorticBalloonPumpRemovalOrInsertion-ExceptionSpecification"))), list(reader_make_constant_shell("AorticAneurysmRepair-STS")), list(reader_make_constant_shell("Biopsy-SurgicalProcedure"), list(reader_make_constant_shell("Biopsy-Lung-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-LymphNode-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Myocardium-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Pericardium-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Pleura-SurgicalProcedure")), list(reader_make_constant_shell("ChestWallBiopsyOfBoneMarrow-SurgicalProcedure")), list(reader_make_constant_shell("VascularBiopsy-VascularProcedure"))), list(reader_make_constant_shell("BleedingControl-Chest-SurgicalProcedure"), list(reader_make_constant_shell("EvacuationOfHematoma-ChestCavity-SurgicalProcedure")), list(reader_make_constant_shell("PericardialWindow-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_pericardium_evacuation_of_hematoma_in_pericardium_or_mediastinum"))), list(reader_make_constant_shell("CardiacOrThoracicAortaProcedure"), list(reader_make_constant_shell("CardiacProcedure-Expanded")), list(reader_make_constant_shell("ThoracicAortaProcedure-STS"))), list(reader_make_constant_shell("CardiacOrThoracicAortaProcedure-NonExpanded"), list(new SubLObject[]{ reader_make_constant_shell("CardiacProcedure-CCF"), list(reader_make_constant_shell("AssistDeviceProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_assist_device_extracorporeal_membrane_oxygenation_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_extracorporeal_membrane_oxygenation_removal")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_intra-aortic_balloon_pump_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_intra-aortic_balloon_pump_removal")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_ventricular_assist_device_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_ventricular_assist_device_removal"))), list(new SubLObject[]{ reader_make_constant_shell("AtrialProcedure-Surgical"), list(reader_make_constant_shell("AtrialAppendageExclusion-SurgicalProcedure"), list(reader_make_constant_shell("LeftAtrialAppendageExclusion-SurgicalProcedure"), list(reader_make_constant_shell("LeftAtrialAppendageExclusionUsingStaples-SurgicalProcedure")), list(reader_make_constant_shell("LeftAtrialAppendageLigation-SurgicalProcedure")), list(reader_make_constant_shell("LeftAtrialAppendageSizeReduction-SurgicalProcedure")))), list(reader_make_constant_shell("AtrialEndarterectomy-SurgicalProcedure")), list(reader_make_constant_shell("AtrialExcisionOfTumor-SurgicalProcedure")), list(reader_make_constant_shell("AtrialExcisionProcedure-Surgical")), list(reader_make_constant_shell("AtrialFibrillationProcedure-Surgical"), list(reader_make_constant_shell("MazeProcedure-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryVeinIsolationProcedure-Surgical")), list(reader_make_constant_shell("RadioFrequencyAblationProcedure-Surgical"), list(reader_make_constant_shell("BipolarRadiofrequencyAblation")), list(reader_make_constant_shell("UnipolarRadiofrequencyAblation")))), list(reader_make_constant_shell("AtrialPlication-SurgicalProcedure")), list(reader_make_constant_shell("AtrialRe-directionOfVenousFlow-SenningProcedure-SurgicalProcedure")), list(reader_make_constant_shell("AtrialRepairProcedure-Surgical")), list(reader_make_constant_shell("AtrialSeptation-SurgicalProcedure")), list(reader_make_constant_shell("AtrialSeptectomy-SurgicalProcedure"), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_closed_atrial_septectomy_blalock-hanlon"))), list(reader_make_constant_shell("AtrialThrombectomy-SurgicalProcedure")), list(reader_make_constant_shell("AtrialWallDebridement-SurgicalProcedure")) }), list(new SubLObject[]{ reader_make_constant_shell("CardiacSeptumProcedure-Surgical"), list(reader_make_constant_shell("Debridement-AtrialOrVentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("Repair-AtrialSeptalAneurysm-SurgicalProcedure")), list(reader_make_constant_shell("Repair-PostInfarctIvsd-SurgicalProcedure")), list(reader_make_constant_shell("Repair-VentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrResection-VentricularSeptalAneurysm-SurgicalProcedure")), list(reader_make_constant_shell("SeptalMyectomy"), list(reader_make_constant_shell("Myectomy-VentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_septal_myectomy"))), list(reader_make_constant_shell("SurgicalProcedure_septum_debridement")), list(reader_make_constant_shell("SurgicalProcedure_septum_repair_of_atrial_septum")), list(reader_make_constant_shell("SurgicalProcedure_septum_repair_of_post_infarct_ventricular_septal_defect")) }), list(new SubLObject[]{ reader_make_constant_shell("CongenitalHeartProcedure-Surgical"), list(reader_make_constant_shell("AVCanalCompleteCorrectionIncludesASDPatchRepair-SurgicalProcedure")), list(reader_make_constant_shell("Aorta-aorticConduit-SurgicalProcedure")), list(reader_make_constant_shell("AorticAllograft-SurgicalProcedure")), list(reader_make_constant_shell("AorticValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("ArterialSwitch-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortaToDescendingAortaGraft-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortaToPulmonaryArteryShuntWaterson-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortoplasty-SurgicalProcedure")), list(reader_make_constant_shell("AtrialRe-directionOfVenousFlow-SenningProcedure-SurgicalProcedure")), list(reader_make_constant_shell("AtrialSeptation-SurgicalProcedure")), list(reader_make_constant_shell("CongenitalSeptalDefectRepairSurgery"), list(reader_make_constant_shell("AtrialSeptalDefectRepairProcedure-Congenital"), list(reader_make_constant_shell("AtrialSeptalDefectSutureClosure-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_atrial_septal_defect_patch_closure"))), list(reader_make_constant_shell("VentricularSeptalDefectRepairProcedure-Congenital"), list(reader_make_constant_shell("VsdPatchClosure-SurgicalProcedure")), list(reader_make_constant_shell("VsdSutureClosure-SurgicalProcedure")))), list(reader_make_constant_shell("CorrectionAnomalousVenousReturn-TotalOrPartial-SurgicalProcedure")), list(reader_make_constant_shell("CreationOfAorto-pulmonaryWindow-SurgicalProcedure")), list(reader_make_constant_shell("CreationPericardialMonocuspValve-SurgicalProcedure")), list(reader_make_constant_shell("DamusKayStanselProcedure-SurgicalProcedure")), list(reader_make_constant_shell("DescendingAortaToPulmonaryArteryShuntPotts-SurgicalProcedure")), list(reader_make_constant_shell("DivisionOfAorticArchOrRemoval-VascularRing-SurgicalProcedure")), list(reader_make_constant_shell("EnlargementIasd-SurgicalProcedure")), list(reader_make_constant_shell("ExcisionCardiacDiverticulum-SurgicalProcedure")), list(reader_make_constant_shell("InnominateArteryToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("Intra-atrialBaffle-MustardProcedure-SurgicalProcedure")), list(reader_make_constant_shell("LeftSubclavianToDescendingAortaGraft-SurgicalProcedure")), list(reader_make_constant_shell("LeftVentricleToAortaConduit-SurgicalProcedure")), list(reader_make_constant_shell("LigationAnomalousSystemicVeinsSuperiorVenaCava-SurgicalProcedure")), list(reader_make_constant_shell("LigationOfCoronaryArteryOrFistula-SurgicalProcedure")), list(reader_make_constant_shell("LigationSystemicFistula-SurgicalProcedure")), list(reader_make_constant_shell("MeeShuntMelbourne-SurgicalProcedure")), list(reader_make_constant_shell("NorwoodProcedure-SurgicalProcedure")), list(reader_make_constant_shell("ObliterationOfAortoPulmonaryArteryCommunication")), list(reader_make_constant_shell("PatchOrAngioplastyOfAortaForCoarctationOrInterrupt-SurgicalProcedure")), list(reader_make_constant_shell("ProstheticAorto-pulmonaryShunt-SurgicalProcedure")), list(reader_make_constant_shell("ProstheticGraft-AortaToPulmonaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArterioplastyOrReconstruction-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArteryAllograft-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArteryBanding-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("RadicalAtrialSeptectomy-SurgicalProcedure")), list(reader_make_constant_shell("RastelliProcedure-SurgicalProcedure")), list(reader_make_constant_shell("Re-implantationOfCoronaryArteryToAorta-SurgicalProcedure")), list(reader_make_constant_shell("ReconstructionOfCoronaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("RepairCleftMitralValveLeaflet-SurgicalProcedure")), list(reader_make_constant_shell("ResectionAnd1ReanastomosisForCoarctationOrInterruption-SurgicalProcedure")), list(reader_make_constant_shell("ResectionAneurysmSinusOfValsalva-SurgicalProcedure")), list(reader_make_constant_shell("ResectionDiscreteSubvalvularMuscle-SurgicalProcedure")), list(reader_make_constant_shell("ResectionLeftVentricularMuscle-SurgicalProcedure")), list(reader_make_constant_shell("ResectionOfLeftAtrialMembraneCortriatrium-SurgicalProcedure")), list(reader_make_constant_shell("ResectionRightVentricleMuscle-Infundibulectomy-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfBlalock-taussigShunt-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfPottsShunt-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfWatersonShunt-SurgicalProcedure")), list(reader_make_constant_shell("RightAtriumToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("RightVentriclePlication-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricleToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricularOutflowPatch-SurgicalProcedure")), list(reader_make_constant_shell("RoofingOfCoronarySinus-SurgicalProcedure")), list(reader_make_constant_shell("SubaorticStenosis-SurgicalProcedure")), list(reader_make_constant_shell("SubclavianToPulmonaryArteryShuntBlalock-taussig-SurgicalProcedure")), list(reader_make_constant_shell("SuperiorVenaCavaToPulmonaryArterGlenn-SurgicalProcedure")), list(reader_make_constant_shell("Supra-aorticStenosis-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalBandingOfPulmonaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_Da_Silva_valve_repair")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_Danielson_technique")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_aorta-aortic_conduit")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_atrial_re-direction_of_venous_flow_senning_procedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_closed_atrial_septectomy_blalock-hanlon")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_complete_correction_of_atrioventricular_canal_defect")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_creation_of_aorto-pulmonary_window")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_creation_of_pulmonary_pericardial_monocusp_valve")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_enlargement_intra-atrial_septal_defect")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_intra-atrial_baffle_mustard_procedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_left_subclavian_or_aortic_arch_to_descending_aorta_graft")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_ligation_systemic_vessel_fistula")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_obliteration_or_ligation_of_patent_ductus_arteriosus")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_patch_or_angioplasty_for_coarctation_or_interruption_of_aorta")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_prosthetic_aorto-pulmonary_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_re-implantation_of_native_coronary_artery_to_aorta")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_and_single_reanastomosis_for_aortic_coarctation_or_interruption")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_atrial_membrane_-_radical_atrial_septectomy")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_of_supra-aortic_stenosis")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_revision_of_blalock-taussig_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_septal_myectomy")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_subclavian_to_pulmonary_artery_shunt_blalock-taussig")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_ascending_aorta_to_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_descending_aorta_to_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_subclavian-pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_superior_vena_cava_-_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalShunting-SurgicalProcedure")), list(reader_make_constant_shell("Take-downAscendingAorta-pulmonaryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downDescendingAorta-pulmonaryArteryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downPulmonaryArteryBanding-SurgicalProcedure")), list(reader_make_constant_shell("Take-downSubclavian-pulmonaryArteryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downSuperiorVenaPulmonaryArteryShuntWaterson-SurgicalProcedure")), list(reader_make_constant_shell("TricuspidValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("UnifocalizationOfMapcas-SurgicalProcedure")), list(reader_make_constant_shell("UnroofingOfCoronaryOstium-SurgicalProcedure")), list(reader_make_constant_shell("VentricularSeptation-SurgicalProcedure")) }), list(reader_make_constant_shell("CoronaryArteryBypassGraft-SurgicalProcedure"), list(reader_make_constant_shell("CABGWithBilateralITAGraft")), list(reader_make_constant_shell("CABGWithMultipleGrafts")), list(reader_make_constant_shell("CabgWithSingleITAGraft")), list(reader_make_constant_shell("SingleGraftCAGB"))), list(reader_make_constant_shell("HeartTransplantProcedure-Surgical")), list(reader_make_constant_shell("HeartValveRepairOrReplacement"), list(reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))))), list(new SubLObject[]{ reader_make_constant_shell("HeartVentricleProcedure-Surgical"), list(reader_make_constant_shell("Aneurysmectomy-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Myocardium-SurgicalProcedure")), list(reader_make_constant_shell("Cardiomyoplasty-SurgicalProcedure")), list(reader_make_constant_shell("Cryoablation-VentricularTissue-SurgicalProcedure")), list(reader_make_constant_shell("Debridement-VentricularWall-SurgicalProcedure")), list(reader_make_constant_shell("LeftVentricleProcedure-Surgical"), list(reader_make_constant_shell("BatistaProcedure-LeftVentricle-SurgicalProcedure")), list(reader_make_constant_shell("DorProcedure-LeftVentricle-SurgicalProcedure")), list(reader_make_constant_shell("FistulaRepairWithPatch-LeftVentricle-rightAtrium-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_repair_of_left_ventricular_outflow_tract")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricle")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricular_outflow_tract"))), list(reader_make_constant_shell("MyocorSplint-SurgicalProcedure")), list(reader_make_constant_shell("OtherVentricularRemodelingProcedure-SurgicalProcedure")), list(reader_make_constant_shell("PlacementOfAcornDevice-SurgicalProcedure")), list(reader_make_constant_shell("Repair-FreeWallVentricularRupture-SurgicalProcedure")), list(reader_make_constant_shell("Repair-VentricularOutflowTract-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Subendocardial-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricleProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_ventricle_batista_procedure_on_right_ventricle"))), list(reader_make_constant_shell("SkeletalMuscleCellDiacrinTransplant-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_excision_of_tumor")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_repair_of_ventricular_wall")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_resection_of_subendocardium")), list(reader_make_constant_shell("TransmyocardialRevascularization-SurgicalProcedure")), list(reader_make_constant_shell("Tri-svr-SurgicalProcedure")), list(reader_make_constant_shell("VentricularPlication-SurgicalProcedure")), list(reader_make_constant_shell("VentricularRepair-SurgicalProcedure")), list(reader_make_constant_shell("Ventriculotomy-SurgicalProcedure")) }), list(new SubLObject[]{ reader_make_constant_shell("OtherCardiacProcedure-Surgical"), list(reader_make_constant_shell("AbortedCardiacProcedure-SurgicalProcedure")), list(reader_make_constant_shell("AnnularReconstruction-SurgicalProcedure")), list(reader_make_constant_shell("CardiacExplorationOnly-SurgicalProcedure")), list(reader_make_constant_shell("CardiacPartialAutotransplantation-SurgicalProcedure")), list(reader_make_constant_shell("CardiopulmonaryBypass-SurgicalProcedure")), list(reader_make_constant_shell("EvacuationOfHematoma-PericardiumMediastinumDueToBleed-tamponade-SurgicalProcedure")), list(reader_make_constant_shell("NotCardiopulmonaryBypass-SurgicalProcedure")), list(reader_make_constant_shell("PericardialPatch-Non-congenital-SurgicalProcedure")), list(reader_make_constant_shell("Repair-AtrioventricularGroove-SurgicalProcedure")), list(reader_make_constant_shell("Repair-CoronarySinus-SurgicalProcedure")), list(reader_make_constant_shell("Repair-FibrousTrigone-SurgicalProcedure")), list(reader_make_constant_shell("Repair-SubvalvularApparatus-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfHeartWound-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfSubvalvularArea-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrDebridement-CoronaryOstium-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Subendocardial-SurgicalProcedure")), list(reader_make_constant_shell("Revision-PulmonaryArteryAnastomosis-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_cardiac-thoracic_procedure")), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_excision_of_tumor"), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_excision_of_tumor-mass_in_pulmonary_artery"))), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_other")), list(reader_make_constant_shell("ThrombectomyFromPacingLeads-wires-SurgicalProcedure")), list(reader_make_constant_shell("UnspecifiedCardiac-thoracicProcedure-SurgicalProcedure")) }), list(reader_make_constant_shell("OtherVascularCoronaryArteryProcedure-Surgical")), list(new SubLObject[]{ reader_make_constant_shell("PericardialProcedure-Surgical"), list(reader_make_constant_shell("BeckPoudrage-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Pericardium-SurgicalProcedure")), list(reader_make_constant_shell("Excision-PericardialCyst-SurgicalProcedure")), list(reader_make_constant_shell("PericardialPatch"), list(reader_make_constant_shell("PericardialPatch-Non-congenital-SurgicalProcedure")), list(reader_make_constant_shell("PericardialPatchToLungs-SurgicalProcedure"))), list(reader_make_constant_shell("PericardialWindow-SurgicalProcedure")), list(reader_make_constant_shell("Pericardiectomy-SurgicalProcedure")), list(reader_make_constant_shell("Pericardiocentesis-drainageOfPericardialEffusion-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrDebridement-Pericardium-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_pericardium_evacuation_of_hematoma_in_pericardium_or_mediastinum")), list(reader_make_constant_shell("SurgicalProcedure_pericardium_pericardiocentesis")) }), list(new SubLObject[]{ reader_make_constant_shell("SurgicalProcedure_eps"), list(reader_make_constant_shell("DrainageOfPacemakerWound-SurgicalProcedure")), list(reader_make_constant_shell("Explant-BiventricularPacerCrtIcd-SurgicalProcedure")), list(reader_make_constant_shell("Explant-Icd-SurgicalProcedure")), list(reader_make_constant_shell("ExplantICDWithSingleChamberOrDualChamberPacing-SurgicalProcedure")), list(reader_make_constant_shell("ExplantOfEndocardialPacemakerLead")), list(reader_make_constant_shell("ExplantOfEpicardialPacemakerLead")), list(reader_make_constant_shell("ExplantOfImplantableCardioverterDefibrillatorPatch")), list(reader_make_constant_shell("Implant-BiventricularPacerCrtIcd-SurgicalProcedure")), list(reader_make_constant_shell("Implant-Icd-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOrExplant-Icd-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOrExplant-PermanentPacemaker-SurgicalProcedure"), list(reader_make_constant_shell("ExplantOfPermanentPacemakerSingleChamberOrDualChamber-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOfPermanentBiventricularPacemaker-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOfPermanentPacemakerSingleChamberOrDualChamber-SurgicalProcedure"))), list(reader_make_constant_shell("MappingAndAblationOfAccessoryPathways-SurgicalProcedure")), list(reader_make_constant_shell("PacemakerInsertion-SurgicalProcedure"), list(reader_make_constant_shell("ImplantOfPermanentBiventricularPacemaker-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOfPermanentPacemakerSingleChamberOrDualChamber-SurgicalProcedure"))), list(reader_make_constant_shell("Placement-PpmicdEndocardialLead-SurgicalProcedure")), list(reader_make_constant_shell("PlacementEpicardialLeadsNotIncludingLeftVentricular-SurgicalProcedure")), list(reader_make_constant_shell("PlacementOfRightAtrialEpicardialPacemakerLead")), list(reader_make_constant_shell("PlacementOfRightVentricularEpicardialPacemakerLead")), list(reader_make_constant_shell("RemovalOfEpicardialPacingWires-SurgicalProcedure")), list(reader_make_constant_shell("RemovalOfICDLeads-SurgicalProcedure")), list(reader_make_constant_shell("RemovalOfTemporaryEpicardialPacingWires-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfPpmicdLeads-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_endocardial_pacemaker_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_epicardial_pacemaker_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_implantable_cardioverter_defibrillator_generator")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_implantable_cardioverter_defibrillator_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_left_ventricular_epicardial_pacing_lead")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_permanent_pacemaker")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_temporary_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_epicardial_pacing_leads_not_including_left_ventricular")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_left_ventricular_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_permanent_endocardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_right_atrial_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_right_ventricular_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_revision_of_permanent_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_thrombectomy_from_pacing_leads")) }), list(reader_make_constant_shell("SurgicalProcedure_vascular_Vineberg-Sewell_implant")) }), list(reader_make_constant_shell("ThoracicAortaProcedure-CSQR")), list(reader_make_constant_shell("ThoracicAortaProcedure-Surgical"))), list(new SubLObject[]{ reader_make_constant_shell("CardiacProcedure-Surgical"), list(reader_make_constant_shell("AssistDeviceProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_assist_device_extracorporeal_membrane_oxygenation_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_extracorporeal_membrane_oxygenation_removal")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_intra-aortic_balloon_pump_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_intra-aortic_balloon_pump_removal")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_ventricular_assist_device_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_ventricular_assist_device_removal"))), list(new SubLObject[]{ reader_make_constant_shell("AtrialProcedure-Surgical"), list(reader_make_constant_shell("AtrialAppendageExclusion-SurgicalProcedure"), list(reader_make_constant_shell("LeftAtrialAppendageExclusion-SurgicalProcedure"), list(reader_make_constant_shell("LeftAtrialAppendageExclusionUsingStaples-SurgicalProcedure")), list(reader_make_constant_shell("LeftAtrialAppendageLigation-SurgicalProcedure")), list(reader_make_constant_shell("LeftAtrialAppendageSizeReduction-SurgicalProcedure")))), list(reader_make_constant_shell("AtrialEndarterectomy-SurgicalProcedure")), list(reader_make_constant_shell("AtrialExcisionOfTumor-SurgicalProcedure")), list(reader_make_constant_shell("AtrialExcisionProcedure-Surgical")), list(reader_make_constant_shell("AtrialFibrillationProcedure-Surgical"), list(reader_make_constant_shell("MazeProcedure-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryVeinIsolationProcedure-Surgical")), list(reader_make_constant_shell("RadioFrequencyAblationProcedure-Surgical"), list(reader_make_constant_shell("BipolarRadiofrequencyAblation")), list(reader_make_constant_shell("UnipolarRadiofrequencyAblation")))), list(reader_make_constant_shell("AtrialPlication-SurgicalProcedure")), list(reader_make_constant_shell("AtrialRe-directionOfVenousFlow-SenningProcedure-SurgicalProcedure")), list(reader_make_constant_shell("AtrialRepairProcedure-Surgical")), list(reader_make_constant_shell("AtrialSeptation-SurgicalProcedure")), list(reader_make_constant_shell("AtrialSeptectomy-SurgicalProcedure"), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_closed_atrial_septectomy_blalock-hanlon"))), list(reader_make_constant_shell("AtrialThrombectomy-SurgicalProcedure")), list(reader_make_constant_shell("AtrialWallDebridement-SurgicalProcedure")) }), list(new SubLObject[]{ reader_make_constant_shell("CardiacSeptumProcedure-Surgical"), list(reader_make_constant_shell("Debridement-AtrialOrVentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("Repair-AtrialSeptalAneurysm-SurgicalProcedure")), list(reader_make_constant_shell("Repair-PostInfarctIvsd-SurgicalProcedure")), list(reader_make_constant_shell("Repair-VentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrResection-VentricularSeptalAneurysm-SurgicalProcedure")), list(reader_make_constant_shell("SeptalMyectomy"), list(reader_make_constant_shell("Myectomy-VentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_septal_myectomy"))), list(reader_make_constant_shell("SurgicalProcedure_septum_debridement")), list(reader_make_constant_shell("SurgicalProcedure_septum_repair_of_atrial_septum")), list(reader_make_constant_shell("SurgicalProcedure_septum_repair_of_post_infarct_ventricular_septal_defect")) }), list(new SubLObject[]{ reader_make_constant_shell("CongenitalHeartProcedure-Surgical"), list(reader_make_constant_shell("AVCanalCompleteCorrectionIncludesASDPatchRepair-SurgicalProcedure")), list(reader_make_constant_shell("Aorta-aorticConduit-SurgicalProcedure")), list(reader_make_constant_shell("AorticAllograft-SurgicalProcedure")), list(reader_make_constant_shell("AorticValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("ArterialSwitch-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortaToDescendingAortaGraft-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortaToPulmonaryArteryShuntWaterson-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortoplasty-SurgicalProcedure")), list(reader_make_constant_shell("AtrialRe-directionOfVenousFlow-SenningProcedure-SurgicalProcedure")), list(reader_make_constant_shell("AtrialSeptation-SurgicalProcedure")), list(reader_make_constant_shell("CongenitalSeptalDefectRepairSurgery"), list(reader_make_constant_shell("AtrialSeptalDefectRepairProcedure-Congenital"), list(reader_make_constant_shell("AtrialSeptalDefectSutureClosure-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_atrial_septal_defect_patch_closure"))), list(reader_make_constant_shell("VentricularSeptalDefectRepairProcedure-Congenital"), list(reader_make_constant_shell("VsdPatchClosure-SurgicalProcedure")), list(reader_make_constant_shell("VsdSutureClosure-SurgicalProcedure")))), list(reader_make_constant_shell("CorrectionAnomalousVenousReturn-TotalOrPartial-SurgicalProcedure")), list(reader_make_constant_shell("CreationOfAorto-pulmonaryWindow-SurgicalProcedure")), list(reader_make_constant_shell("CreationPericardialMonocuspValve-SurgicalProcedure")), list(reader_make_constant_shell("DamusKayStanselProcedure-SurgicalProcedure")), list(reader_make_constant_shell("DescendingAortaToPulmonaryArteryShuntPotts-SurgicalProcedure")), list(reader_make_constant_shell("DivisionOfAorticArchOrRemoval-VascularRing-SurgicalProcedure")), list(reader_make_constant_shell("EnlargementIasd-SurgicalProcedure")), list(reader_make_constant_shell("ExcisionCardiacDiverticulum-SurgicalProcedure")), list(reader_make_constant_shell("InnominateArteryToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("Intra-atrialBaffle-MustardProcedure-SurgicalProcedure")), list(reader_make_constant_shell("LeftSubclavianToDescendingAortaGraft-SurgicalProcedure")), list(reader_make_constant_shell("LeftVentricleToAortaConduit-SurgicalProcedure")), list(reader_make_constant_shell("LigationAnomalousSystemicVeinsSuperiorVenaCava-SurgicalProcedure")), list(reader_make_constant_shell("LigationOfCoronaryArteryOrFistula-SurgicalProcedure")), list(reader_make_constant_shell("LigationSystemicFistula-SurgicalProcedure")), list(reader_make_constant_shell("MeeShuntMelbourne-SurgicalProcedure")), list(reader_make_constant_shell("NorwoodProcedure-SurgicalProcedure")), list(reader_make_constant_shell("ObliterationOfAortoPulmonaryArteryCommunication")), list(reader_make_constant_shell("PatchOrAngioplastyOfAortaForCoarctationOrInterrupt-SurgicalProcedure")), list(reader_make_constant_shell("ProstheticAorto-pulmonaryShunt-SurgicalProcedure")), list(reader_make_constant_shell("ProstheticGraft-AortaToPulmonaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArterioplastyOrReconstruction-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArteryAllograft-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArteryBanding-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("RadicalAtrialSeptectomy-SurgicalProcedure")), list(reader_make_constant_shell("RastelliProcedure-SurgicalProcedure")), list(reader_make_constant_shell("Re-implantationOfCoronaryArteryToAorta-SurgicalProcedure")), list(reader_make_constant_shell("ReconstructionOfCoronaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("RepairCleftMitralValveLeaflet-SurgicalProcedure")), list(reader_make_constant_shell("ResectionAnd1ReanastomosisForCoarctationOrInterruption-SurgicalProcedure")), list(reader_make_constant_shell("ResectionAneurysmSinusOfValsalva-SurgicalProcedure")), list(reader_make_constant_shell("ResectionDiscreteSubvalvularMuscle-SurgicalProcedure")), list(reader_make_constant_shell("ResectionLeftVentricularMuscle-SurgicalProcedure")), list(reader_make_constant_shell("ResectionOfLeftAtrialMembraneCortriatrium-SurgicalProcedure")), list(reader_make_constant_shell("ResectionRightVentricleMuscle-Infundibulectomy-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfBlalock-taussigShunt-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfPottsShunt-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfWatersonShunt-SurgicalProcedure")), list(reader_make_constant_shell("RightAtriumToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("RightVentriclePlication-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricleToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricularOutflowPatch-SurgicalProcedure")), list(reader_make_constant_shell("RoofingOfCoronarySinus-SurgicalProcedure")), list(reader_make_constant_shell("SubaorticStenosis-SurgicalProcedure")), list(reader_make_constant_shell("SubclavianToPulmonaryArteryShuntBlalock-taussig-SurgicalProcedure")), list(reader_make_constant_shell("SuperiorVenaCavaToPulmonaryArterGlenn-SurgicalProcedure")), list(reader_make_constant_shell("Supra-aorticStenosis-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalBandingOfPulmonaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_Da_Silva_valve_repair")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_Danielson_technique")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_aorta-aortic_conduit")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_atrial_re-direction_of_venous_flow_senning_procedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_closed_atrial_septectomy_blalock-hanlon")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_complete_correction_of_atrioventricular_canal_defect")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_creation_of_aorto-pulmonary_window")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_creation_of_pulmonary_pericardial_monocusp_valve")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_enlargement_intra-atrial_septal_defect")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_intra-atrial_baffle_mustard_procedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_left_subclavian_or_aortic_arch_to_descending_aorta_graft")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_ligation_systemic_vessel_fistula")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_obliteration_or_ligation_of_patent_ductus_arteriosus")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_patch_or_angioplasty_for_coarctation_or_interruption_of_aorta")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_prosthetic_aorto-pulmonary_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_re-implantation_of_native_coronary_artery_to_aorta")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_and_single_reanastomosis_for_aortic_coarctation_or_interruption")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_atrial_membrane_-_radical_atrial_septectomy")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_of_supra-aortic_stenosis")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_revision_of_blalock-taussig_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_septal_myectomy")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_subclavian_to_pulmonary_artery_shunt_blalock-taussig")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_ascending_aorta_to_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_descending_aorta_to_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_subclavian-pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_superior_vena_cava_-_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalShunting-SurgicalProcedure")), list(reader_make_constant_shell("Take-downAscendingAorta-pulmonaryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downDescendingAorta-pulmonaryArteryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downPulmonaryArteryBanding-SurgicalProcedure")), list(reader_make_constant_shell("Take-downSubclavian-pulmonaryArteryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downSuperiorVenaPulmonaryArteryShuntWaterson-SurgicalProcedure")), list(reader_make_constant_shell("TricuspidValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("UnifocalizationOfMapcas-SurgicalProcedure")), list(reader_make_constant_shell("UnroofingOfCoronaryOstium-SurgicalProcedure")), list(reader_make_constant_shell("VentricularSeptation-SurgicalProcedure")) }), list(reader_make_constant_shell("Cryoablation"), list(reader_make_constant_shell("Cryoablation-VentricularTissue-SurgicalProcedure"))), list(reader_make_constant_shell("HeartTransplantProcedure-Surgical")), list(new SubLObject[]{ reader_make_constant_shell("HeartValveProcedure-Surgical"), list(reader_make_constant_shell("Anuloplasty"), list(reader_make_constant_shell("AnnuloplastyWithRing"), list(reader_make_constant_shell("CompleteAnnuloplastyWithRing"))), list(reader_make_constant_shell("Anuloplasty-WithoutRing-Complete")), list(reader_make_constant_shell("Anuloplasty-WithoutRing-Incomplete"))), list(reader_make_constant_shell("Commissuroplasty"), list(reader_make_constant_shell("Antero-posteriorCommissuroplasty")), list(reader_make_constant_shell("Commissuroplasty-AccordingToKay-bicuspidization")), list(reader_make_constant_shell("Commissuroplasty-Anteroposterior")), list(reader_make_constant_shell("Commissuroplasty-CongenitalBiscupsid")), list(reader_make_constant_shell("Commissuroplasty-Left-anterior")), list(reader_make_constant_shell("Commissuroplasty-Posteroseptal")), list(reader_make_constant_shell("Commissuroplasty-Right-anterior"))), list(reader_make_constant_shell("HeartValveRepairReplacementOrExploration"), list(reader_make_constant_shell("Exploration-AorticValve-SurgicalProcedure")), list(reader_make_constant_shell("Exploration-MitralValve-SurgicalProcedure")), list(reader_make_constant_shell("Exploration-PulmonaryValve-SurgicalProcedure")), list(reader_make_constant_shell("Exploration-TricuspidValve-SurgicalProcedure")), list(reader_make_constant_shell("HeartValveRepairOrReplacement"), list(reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))))), list(reader_make_constant_shell("Plication-ValvularProcedure"), list(reader_make_constant_shell("AtrialPlication-SurgicalProcedure")), list(reader_make_constant_shell("Plication-BicuspidLeaflet")), list(reader_make_constant_shell("RightVentriclePlication-SurgicalProcedure")), list(reader_make_constant_shell("VentricularPlication-SurgicalProcedure"))), list(reader_make_constant_shell("Reconstruction-CardiacValveRepair"), list(reader_make_constant_shell("AnnularReconstruction-SurgicalProcedure")), list(reader_make_constant_shell("RootReconstruction"))), list(reader_make_constant_shell("Reorientation-CardiacValveRepair")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_aortic_valve_aborted_repair_attempt")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_mitral_valve_aborted_repair_attempt")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_pulmonary_valve_aborted_repair_attempt")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_tricuspid_valve_aborted_repair_attempt")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveProcedure-Surgical"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveProcedure-Surgical"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveProcedure-Surgical"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveProcedure-Surgical"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_tricuspid_valvectomy")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))))) }), list(new SubLObject[]{ reader_make_constant_shell("HeartVentricleProcedure-Surgical"), list(reader_make_constant_shell("Aneurysmectomy-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Myocardium-SurgicalProcedure")), list(reader_make_constant_shell("Cardiomyoplasty-SurgicalProcedure")), list(reader_make_constant_shell("Cryoablation-VentricularTissue-SurgicalProcedure")), list(reader_make_constant_shell("Debridement-VentricularWall-SurgicalProcedure")), list(reader_make_constant_shell("LeftVentricleProcedure-Surgical"), list(reader_make_constant_shell("BatistaProcedure-LeftVentricle-SurgicalProcedure")), list(reader_make_constant_shell("DorProcedure-LeftVentricle-SurgicalProcedure")), list(reader_make_constant_shell("FistulaRepairWithPatch-LeftVentricle-rightAtrium-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_repair_of_left_ventricular_outflow_tract")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricle")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricular_outflow_tract"))), list(reader_make_constant_shell("MyocorSplint-SurgicalProcedure")), list(reader_make_constant_shell("OtherVentricularRemodelingProcedure-SurgicalProcedure")), list(reader_make_constant_shell("PlacementOfAcornDevice-SurgicalProcedure")), list(reader_make_constant_shell("Repair-FreeWallVentricularRupture-SurgicalProcedure")), list(reader_make_constant_shell("Repair-VentricularOutflowTract-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Subendocardial-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricleProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_ventricle_batista_procedure_on_right_ventricle"))), list(reader_make_constant_shell("SkeletalMuscleCellDiacrinTransplant-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_excision_of_tumor")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_repair_of_ventricular_wall")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_resection_of_subendocardium")), list(reader_make_constant_shell("TransmyocardialRevascularization-SurgicalProcedure")), list(reader_make_constant_shell("Tri-svr-SurgicalProcedure")), list(reader_make_constant_shell("VentricularPlication-SurgicalProcedure")), list(reader_make_constant_shell("VentricularRepair-SurgicalProcedure")), list(reader_make_constant_shell("Ventriculotomy-SurgicalProcedure")) }), list(new SubLObject[]{ reader_make_constant_shell("OtherCardiacProcedure-Surgical"), list(reader_make_constant_shell("AbortedCardiacProcedure-SurgicalProcedure")), list(reader_make_constant_shell("AnnularReconstruction-SurgicalProcedure")), list(reader_make_constant_shell("CardiacExplorationOnly-SurgicalProcedure")), list(reader_make_constant_shell("CardiacPartialAutotransplantation-SurgicalProcedure")), list(reader_make_constant_shell("CardiopulmonaryBypass-SurgicalProcedure")), list(reader_make_constant_shell("EvacuationOfHematoma-PericardiumMediastinumDueToBleed-tamponade-SurgicalProcedure")), list(reader_make_constant_shell("NotCardiopulmonaryBypass-SurgicalProcedure")), list(reader_make_constant_shell("PericardialPatch-Non-congenital-SurgicalProcedure")), list(reader_make_constant_shell("Repair-AtrioventricularGroove-SurgicalProcedure")), list(reader_make_constant_shell("Repair-CoronarySinus-SurgicalProcedure")), list(reader_make_constant_shell("Repair-FibrousTrigone-SurgicalProcedure")), list(reader_make_constant_shell("Repair-SubvalvularApparatus-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfHeartWound-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfSubvalvularArea-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrDebridement-CoronaryOstium-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Subendocardial-SurgicalProcedure")), list(reader_make_constant_shell("Revision-PulmonaryArteryAnastomosis-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_cardiac-thoracic_procedure")), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_excision_of_tumor"), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_excision_of_tumor-mass_in_pulmonary_artery"))), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_other")), list(reader_make_constant_shell("ThrombectomyFromPacingLeads-wires-SurgicalProcedure")), list(reader_make_constant_shell("UnspecifiedCardiac-thoracicProcedure-SurgicalProcedure")) }), list(new SubLObject[]{ reader_make_constant_shell("PericardialProcedure-Surgical"), list(reader_make_constant_shell("BeckPoudrage-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Pericardium-SurgicalProcedure")), list(reader_make_constant_shell("Excision-PericardialCyst-SurgicalProcedure")), list(reader_make_constant_shell("PericardialPatch"), list(reader_make_constant_shell("PericardialPatch-Non-congenital-SurgicalProcedure")), list(reader_make_constant_shell("PericardialPatchToLungs-SurgicalProcedure"))), list(reader_make_constant_shell("PericardialWindow-SurgicalProcedure")), list(reader_make_constant_shell("Pericardiectomy-SurgicalProcedure")), list(reader_make_constant_shell("Pericardiocentesis-drainageOfPericardialEffusion-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrDebridement-Pericardium-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_pericardium_evacuation_of_hematoma_in_pericardium_or_mediastinum")), list(reader_make_constant_shell("SurgicalProcedure_pericardium_pericardiocentesis")) }), list(reader_make_constant_shell("TBLOperativeValveProcedure")), list(reader_make_constant_shell("Valvuloplasty-MedicalProcedure"), list(reader_make_constant_shell("AorticValvuloplasty-SurgicalProcedure")), list(new SubLObject[]{ reader_make_constant_shell("Commissurotomy"), list(reader_make_constant_shell("Commissurotomy-Anterolateral")), list(reader_make_constant_shell("Commissurotomy-Anteroseptal")), list(reader_make_constant_shell("Commissurotomy-Left-anterior")), list(reader_make_constant_shell("Commissurotomy-Left-noncoronary")), list(reader_make_constant_shell("Commissurotomy-Posteromedial")), list(reader_make_constant_shell("Commissurotomy-Posteroseptal")), list(reader_make_constant_shell("Commissurotomy-Right-anterior")), list(reader_make_constant_shell("Commissurotomy-Right-noncoronary")), list(reader_make_constant_shell("Commissurotomy-right-left")) }), list(reader_make_constant_shell("CusaValvuloplasty")), list(reader_make_constant_shell("PulmonaryValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("TricuspidValvuloplasty-SurgicalProcedure"))), list(list(reader_make_constant_shell("CollectionIntersectionFn"), list(reader_make_constant_shell("TheSet"), reader_make_constant_shell("CardiacProcedure-Surgical"), reader_make_constant_shell("RoboticSurgery")))) }), list(reader_make_constant_shell("CardiacValveRepairProcedure_alfieir_leaflet_stitch_anterior-posterior")), list(reader_make_constant_shell("CardiacValveRepairProcedure_augmentation_with_pericardium")), list(reader_make_constant_shell("CardiacValveRepairProcedure_cone_repair")), list(reader_make_constant_shell("CardiacValveRepairProcedure_cut_of_leaflet_bridge")), list(reader_make_constant_shell("CardiacValveRepairProcedure_shorten")), list(reader_make_constant_shell("CardiacValveRepairProcedure_sling_repair")), list(reader_make_constant_shell("CleftRepair")), list(reader_make_constant_shell("ConduitRelated-SurgicalProcedure"), list(reader_make_constant_shell("Aorta-aorticConduit-SurgicalProcedure")), list(reader_make_constant_shell("BentallHemashieldValvedConduit-VascularProcedure")), list(reader_make_constant_shell("InnominateArteryToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("LeftVentricleToAortaConduit-SurgicalProcedure")), list(reader_make_constant_shell("ReplacementWithConduit-SurgicalProcedure")), list(reader_make_constant_shell("RightAtriumToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricleToPulmonaryArteryConduit-SurgicalProcedure"))), list(reader_make_constant_shell("Decalcification-ValvularProcedure")), list(reader_make_constant_shell("DevegaProcedure")), list(reader_make_constant_shell("EdgeToEdgeRepair")), list(reader_make_constant_shell("Exclusion-SurgicalProcedure"), list(reader_make_constant_shell("AtrialAppendageExclusion-SurgicalProcedure"), list(reader_make_constant_shell("LeftAtrialAppendageExclusion-SurgicalProcedure"), list(reader_make_constant_shell("LeftAtrialAppendageExclusionUsingStaples-SurgicalProcedure")), list(reader_make_constant_shell("LeftAtrialAppendageLigation-SurgicalProcedure")), list(reader_make_constant_shell("LeftAtrialAppendageSizeReduction-SurgicalProcedure"))))), list(reader_make_constant_shell("Fenestration")), list(reader_make_constant_shell("IsolatedCABGExclusion-NonExpandedGraph"), list(new SubLObject[]{ reader_make_constant_shell("CommonConcomitantExclusion-NonExpandedGraph"), list(reader_make_constant_shell("Aneurysmectomy-SurgicalProcedure")), list(reader_make_constant_shell("AorticAneurysmRepair-STSNonExpandedGraph")), list(reader_make_constant_shell("AtrialFibrillationProcedure-Surgical"), list(reader_make_constant_shell("MazeProcedure-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryVeinIsolationProcedure-Surgical")), list(reader_make_constant_shell("RadioFrequencyAblationProcedure-Surgical"), list(reader_make_constant_shell("BipolarRadiofrequencyAblation")), list(reader_make_constant_shell("UnipolarRadiofrequencyAblation")))), list(reader_make_constant_shell("BatistaProcedure-LeftVentricle-SurgicalProcedure")), list(new SubLObject[]{ reader_make_constant_shell("CongenitalHeartProcedure-Surgical"), list(reader_make_constant_shell("AVCanalCompleteCorrectionIncludesASDPatchRepair-SurgicalProcedure")), list(reader_make_constant_shell("Aorta-aorticConduit-SurgicalProcedure")), list(reader_make_constant_shell("AorticAllograft-SurgicalProcedure")), list(reader_make_constant_shell("AorticValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("ArterialSwitch-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortaToDescendingAortaGraft-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortaToPulmonaryArteryShuntWaterson-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortoplasty-SurgicalProcedure")), list(reader_make_constant_shell("AtrialRe-directionOfVenousFlow-SenningProcedure-SurgicalProcedure")), list(reader_make_constant_shell("AtrialSeptation-SurgicalProcedure")), list(reader_make_constant_shell("CongenitalSeptalDefectRepairSurgery"), list(reader_make_constant_shell("AtrialSeptalDefectRepairProcedure-Congenital"), list(reader_make_constant_shell("AtrialSeptalDefectSutureClosure-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_atrial_septal_defect_patch_closure"))), list(reader_make_constant_shell("VentricularSeptalDefectRepairProcedure-Congenital"), list(reader_make_constant_shell("VsdPatchClosure-SurgicalProcedure")), list(reader_make_constant_shell("VsdSutureClosure-SurgicalProcedure")))), list(reader_make_constant_shell("CorrectionAnomalousVenousReturn-TotalOrPartial-SurgicalProcedure")), list(reader_make_constant_shell("CreationOfAorto-pulmonaryWindow-SurgicalProcedure")), list(reader_make_constant_shell("CreationPericardialMonocuspValve-SurgicalProcedure")), list(reader_make_constant_shell("DamusKayStanselProcedure-SurgicalProcedure")), list(reader_make_constant_shell("DescendingAortaToPulmonaryArteryShuntPotts-SurgicalProcedure")), list(reader_make_constant_shell("DivisionOfAorticArchOrRemoval-VascularRing-SurgicalProcedure")), list(reader_make_constant_shell("EnlargementIasd-SurgicalProcedure")), list(reader_make_constant_shell("ExcisionCardiacDiverticulum-SurgicalProcedure")), list(reader_make_constant_shell("InnominateArteryToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("Intra-atrialBaffle-MustardProcedure-SurgicalProcedure")), list(reader_make_constant_shell("LeftSubclavianToDescendingAortaGraft-SurgicalProcedure")), list(reader_make_constant_shell("LeftVentricleToAortaConduit-SurgicalProcedure")), list(reader_make_constant_shell("LigationAnomalousSystemicVeinsSuperiorVenaCava-SurgicalProcedure")), list(reader_make_constant_shell("LigationOfCoronaryArteryOrFistula-SurgicalProcedure")), list(reader_make_constant_shell("LigationSystemicFistula-SurgicalProcedure")), list(reader_make_constant_shell("MeeShuntMelbourne-SurgicalProcedure")), list(reader_make_constant_shell("NorwoodProcedure-SurgicalProcedure")), list(reader_make_constant_shell("ObliterationOfAortoPulmonaryArteryCommunication")), list(reader_make_constant_shell("PatchOrAngioplastyOfAortaForCoarctationOrInterrupt-SurgicalProcedure")), list(reader_make_constant_shell("ProstheticAorto-pulmonaryShunt-SurgicalProcedure")), list(reader_make_constant_shell("ProstheticGraft-AortaToPulmonaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArterioplastyOrReconstruction-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArteryAllograft-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArteryBanding-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("RadicalAtrialSeptectomy-SurgicalProcedure")), list(reader_make_constant_shell("RastelliProcedure-SurgicalProcedure")), list(reader_make_constant_shell("Re-implantationOfCoronaryArteryToAorta-SurgicalProcedure")), list(reader_make_constant_shell("ReconstructionOfCoronaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("RepairCleftMitralValveLeaflet-SurgicalProcedure")), list(reader_make_constant_shell("ResectionAnd1ReanastomosisForCoarctationOrInterruption-SurgicalProcedure")), list(reader_make_constant_shell("ResectionAneurysmSinusOfValsalva-SurgicalProcedure")), list(reader_make_constant_shell("ResectionDiscreteSubvalvularMuscle-SurgicalProcedure")), list(reader_make_constant_shell("ResectionLeftVentricularMuscle-SurgicalProcedure")), list(reader_make_constant_shell("ResectionOfLeftAtrialMembraneCortriatrium-SurgicalProcedure")), list(reader_make_constant_shell("ResectionRightVentricleMuscle-Infundibulectomy-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfBlalock-taussigShunt-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfPottsShunt-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfWatersonShunt-SurgicalProcedure")), list(reader_make_constant_shell("RightAtriumToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("RightVentriclePlication-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricleToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricularOutflowPatch-SurgicalProcedure")), list(reader_make_constant_shell("RoofingOfCoronarySinus-SurgicalProcedure")), list(reader_make_constant_shell("SubaorticStenosis-SurgicalProcedure")), list(reader_make_constant_shell("SubclavianToPulmonaryArteryShuntBlalock-taussig-SurgicalProcedure")), list(reader_make_constant_shell("SuperiorVenaCavaToPulmonaryArterGlenn-SurgicalProcedure")), list(reader_make_constant_shell("Supra-aorticStenosis-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalBandingOfPulmonaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_Da_Silva_valve_repair")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_Danielson_technique")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_aorta-aortic_conduit")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_atrial_re-direction_of_venous_flow_senning_procedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_closed_atrial_septectomy_blalock-hanlon")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_complete_correction_of_atrioventricular_canal_defect")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_creation_of_aorto-pulmonary_window")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_creation_of_pulmonary_pericardial_monocusp_valve")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_enlargement_intra-atrial_septal_defect")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_intra-atrial_baffle_mustard_procedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_left_subclavian_or_aortic_arch_to_descending_aorta_graft")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_ligation_systemic_vessel_fistula")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_obliteration_or_ligation_of_patent_ductus_arteriosus")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_patch_or_angioplasty_for_coarctation_or_interruption_of_aorta")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_prosthetic_aorto-pulmonary_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_re-implantation_of_native_coronary_artery_to_aorta")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_and_single_reanastomosis_for_aortic_coarctation_or_interruption")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_atrial_membrane_-_radical_atrial_septectomy")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_of_supra-aortic_stenosis")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_revision_of_blalock-taussig_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_septal_myectomy")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_subclavian_to_pulmonary_artery_shunt_blalock-taussig")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_ascending_aorta_to_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_descending_aorta_to_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_subclavian-pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_superior_vena_cava_-_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalShunting-SurgicalProcedure")), list(reader_make_constant_shell("Take-downAscendingAorta-pulmonaryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downDescendingAorta-pulmonaryArteryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downPulmonaryArteryBanding-SurgicalProcedure")), list(reader_make_constant_shell("Take-downSubclavian-pulmonaryArteryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downSuperiorVenaPulmonaryArteryShuntWaterson-SurgicalProcedure")), list(reader_make_constant_shell("TricuspidValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("UnifocalizationOfMapcas-SurgicalProcedure")), list(reader_make_constant_shell("UnroofingOfCoronaryOstium-SurgicalProcedure")), list(reader_make_constant_shell("VentricularSeptation-SurgicalProcedure")) }), list(reader_make_constant_shell("DorProcedure-LeftVentricle-SurgicalProcedure")), list(reader_make_constant_shell("HeartTransplantProcedure-Surgical")), list(reader_make_constant_shell("Myectomy-VentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("OtherNonCardiacProcedure-STSNonExpandedGraph"), list(reader_make_constant_shell("OtherNonCardiacOther-STSNonExpandedGraph"), list(reader_make_constant_shell("KidneyTransplantProcedure-Surgical")), list(reader_make_constant_shell("LiverTransplantProcedure-Surgical")), list(reader_make_constant_shell("OtherNoncardiothoracicProcedure-Surgical"), list(reader_make_constant_shell("Resection-KommerellsDiverticulum-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_other_noncardiothoracic_other")), list(reader_make_constant_shell("SurgicalProcedure_other_noncardiothoracic_repair_of_leg_wound"))), list(reader_make_constant_shell("PancreasTransplantProcedure-Surgical")), list(reader_make_constant_shell("SurgicalProcedure_abdominal_drainage_of_ascites"))), list(new SubLObject[]{ reader_make_constant_shell("OtherNonCardiacOtherThoracic-STSNonExpandedGraph"), list(reader_make_constant_shell("Decortication-SurgicalProcedure")), list(reader_make_constant_shell("DiaphragmProcedure-Surgical"), list(reader_make_constant_shell("Repair-DiaphragmaticHernia-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_diaphragm_excision_of_diaphragm"))), list(reader_make_constant_shell("LungTransplantProcedure-Surgical")), list(reader_make_constant_shell("MediastinumNeckThymectomy-SurgicalProcedure")), list(reader_make_constant_shell("Pleurodesis-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryProcedure-Surgical"), list(reader_make_constant_shell("Biopsy-Lung-SurgicalProcedure")), list(reader_make_constant_shell("Excision-LungBulla-SurgicalProcedure")), list(reader_make_constant_shell("PericardialPatchToLungs-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryEmbolectomy-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Lung-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_pulmonary_valvectomy"))), list(reader_make_constant_shell("SurgicalProcedure_thoracic_chest_open")), list(reader_make_constant_shell("SurgicalProcedure_thoracic_excision_of_tumor-mass_in_thoracic_cavity")) }), list(reader_make_constant_shell("OtherVascularProcedure-Surgical"))), list(reader_make_constant_shell("OtherVentricularRemodelingProcedure-SurgicalProcedure")), list(reader_make_constant_shell("Pericardiectomy-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfHeartWound-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_septum_repair_of_post_infarct_ventricular_septal_defect")), list(reader_make_constant_shell("TransmyocardialRevascularization-SurgicalProcedure")), list(reader_make_constant_shell("Tri-svr-SurgicalProcedure")), list(reader_make_constant_shell("VADInsertion-STSNonExpandedGraph")) }), list(reader_make_constant_shell("HeartValveRepairOrReplacement"), list(reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))))), list(reader_make_constant_shell("IsolatedCABGProcedure-NonExpandedGraph")), list(reader_make_constant_shell("LeafletPatching")), list(reader_make_constant_shell("Left-RightCommissuroplasty")), list(reader_make_constant_shell("MycorAnuloplastySystemPlacement")), list(reader_make_constant_shell("Myectomy"), list(reader_make_constant_shell("SeptalMyectomy"), list(reader_make_constant_shell("Myectomy-VentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_septal_myectomy")))), list(reader_make_constant_shell("Non-coronary-LeftCommissuroplasty")), list(reader_make_constant_shell("NoncardiacProcedure-NonExpanded")), list(reader_make_constant_shell("PartialResection")), list(reader_make_constant_shell("PlacementOfArtificialChordae")), list(reader_make_constant_shell("PlacementOfSubannularSuturesInTheLvot")), list(reader_make_constant_shell("PosteromedialCommissuroplasty")), list(reader_make_constant_shell("PrimaryProcedure")), list(reader_make_constant_shell("ProcedurePerformedDuringReop")), list(reader_make_constant_shell("ProstheticValveRingRemoval")), list(reader_make_constant_shell("RedoProcedure")), list(reader_make_constant_shell("Reimplantation")), list(reader_make_constant_shell("Remodeling-5")), list(reader_make_constant_shell("RemovalOfPreviousAlfieriStitch")), list(reader_make_constant_shell("ResectionOfStenosis")), list(reader_make_constant_shell("ResectionProcedure-Surgical"), list(reader_make_constant_shell("CompleteResection")), list(reader_make_constant_shell("Resection-CardiacValve")), list(reader_make_constant_shell("Resection-KommerellsDiverticulum-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Lung-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Subendocardial-SurgicalProcedure")), list(reader_make_constant_shell("ResectionAneurysmSinusOfValsalva-SurgicalProcedure")), list(reader_make_constant_shell("ResectionOfPannus"))), list(reader_make_constant_shell("Resuspension")), list(reader_make_constant_shell("ResuturingPre-existingRing")), list(reader_make_constant_shell("Right-Non-coronaryCommissuroplasty")), list(reader_make_constant_shell("Shaving-ValvularProcedure")), list(reader_make_constant_shell("SlidingRepair")), list(reader_make_constant_shell("SurgicalProcedure-Abdominal"), list(reader_make_constant_shell("Nephrectomy-SurgicalProcedure")), list(reader_make_constant_shell("Repair-Ventral-incisionalHernia-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfSpleen-SurgicalProcedure")), list(reader_make_constant_shell("Splenectomy-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_abdominal_drainage_of_ascites"))), list(new SubLObject[]{ reader_make_constant_shell("SurgicalProcedureNonCongenital"), list(reader_make_constant_shell("AirwayProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_airway_resection_of_bronchus")), list(reader_make_constant_shell("Tracheostomy-SurgicalProcedure"))), list(reader_make_constant_shell("AorticProcedure-Surgical"), list(reader_make_constant_shell("AbdominalAortaProcedure-Surgical")), list(reader_make_constant_shell("Aortoplasty-SurgicalProcedure")), list(reader_make_constant_shell("BentallHemashieldValvedConduit-VascularProcedure")), list(reader_make_constant_shell("ElephantTrunkAortaReplacementStage1-SurgicalProcedure")), list(reader_make_constant_shell("ThoracicAortaProcedure-Surgical"))), list(reader_make_constant_shell("ArterioscleroticPlaqueRemoval-Procedure"), list(reader_make_constant_shell("Endarterectomy-SurgicalProcedure"), list(reader_make_constant_shell("AtrialEndarterectomy-SurgicalProcedure")), list(reader_make_constant_shell("EndarterectomyLaser-SurgicalProcedure")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("Endarterectomy-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("CommonCarotidArtery"))))), list(reader_make_constant_shell("AssistDeviceProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_assist_device_extracorporeal_membrane_oxygenation_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_extracorporeal_membrane_oxygenation_removal")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_intra-aortic_balloon_pump_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_intra-aortic_balloon_pump_removal")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_ventricular_assist_device_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_ventricular_assist_device_removal"))), list(reader_make_constant_shell("AtrialExcisionProcedure-Surgical")), list(reader_make_constant_shell("AtrialFibrillationProcedure-Surgical"), list(reader_make_constant_shell("MazeProcedure-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryVeinIsolationProcedure-Surgical")), list(reader_make_constant_shell("RadioFrequencyAblationProcedure-Surgical"), list(reader_make_constant_shell("BipolarRadiofrequencyAblation")), list(reader_make_constant_shell("UnipolarRadiofrequencyAblation")))), list(reader_make_constant_shell("AtrialWallDebridement-SurgicalProcedure")), list(reader_make_constant_shell("BalloonDilatation-SurgicalProcedure")), list(reader_make_constant_shell("BypassGraft-SurgicalProcedure"), list(reader_make_constant_shell("BypassGraftWithSaphenousVein-SurgicalProcedure")), list(reader_make_constant_shell("CoronaryArteryBypassGraft-SurgicalProcedure"), list(reader_make_constant_shell("CABGWithBilateralITAGraft")), list(reader_make_constant_shell("CABGWithMultipleGrafts")), list(reader_make_constant_shell("CabgWithSingleITAGraft")), list(reader_make_constant_shell("SingleGraftCAGB")))), list(reader_make_constant_shell("BypassGraftWithHemashield-SurgicalProcedure")), list(reader_make_constant_shell("CabrolFistula-SurgicalProcedure")), list(reader_make_constant_shell("ChestWallProcedure-Surgical"), list(reader_make_constant_shell("ChestWallBiopsyOfBoneMarrow-SurgicalProcedure")), list(reader_make_constant_shell("Debridement-RewireOfSternum-SurgicalProcedure")), list(reader_make_constant_shell("RepairLungOrChestWall-SurgicalProcedure")), list(reader_make_constant_shell("SternalFractureRepair-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_chest_wall_pectus_repair")), list(reader_make_constant_shell("SurgicalProcedure_chest_wall_repair_of_lung-chest_wall"))), list(reader_make_constant_shell("CongenitalIntervention-MedicalProcedure")), list(reader_make_constant_shell("CoronaryArteryProcedureNonCongenital-Surgical"), list(reader_make_constant_shell("CoronaryArteryBypassGraft-SurgicalProcedure"), list(reader_make_constant_shell("CABGWithBilateralITAGraft")), list(reader_make_constant_shell("CABGWithMultipleGrafts")), list(reader_make_constant_shell("CabgWithSingleITAGraft")), list(reader_make_constant_shell("SingleGraftCAGB"))), list(reader_make_constant_shell("OtherVascularCoronaryArteryProcedure-Surgical")), list(list(reader_make_constant_shell("CollectionDifferenceFn"), reader_make_constant_shell("CoronaryArteryProcedureNonCongenital-Surgical"), reader_make_constant_shell("CoronaryArteryBypassGraft-SurgicalProcedure")))), list(reader_make_constant_shell("CoronaryLaserProcedure-SurgicalProcedure")), list(reader_make_constant_shell("Cryoablation"), list(reader_make_constant_shell("Cryoablation-VentricularTissue-SurgicalProcedure"))), list(reader_make_constant_shell("Debridement-AtrialOrVentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("Debridement-VascularProcedure"), list(reader_make_constant_shell("ProstheticValveDebridement"))), list(reader_make_constant_shell("DiaphragmProcedure-Surgical"), list(reader_make_constant_shell("Repair-DiaphragmaticHernia-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_diaphragm_excision_of_diaphragm"))), list(reader_make_constant_shell("EndovascularProcedure-SurgicalProcedure"), list(reader_make_constant_shell("EndovascularStentProcedure-Surgical"), list(reader_make_constant_shell("EndovascularStentGraft-SurgicalProcedure"), list(reader_make_constant_shell("EndovascularStentGraftPlacementAfterLeak-SurgicalProcedure"))))), list(reader_make_constant_shell("EsophagogastricProcedure-Surgical"), list(reader_make_constant_shell("GiUnspecified-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_esophagogastric_control_bleeding"))), list(reader_make_constant_shell("Excision-Aneurysm-SurgicalProcedure")), list(reader_make_constant_shell("Exploration-SurgicalProcedure")), list(new SubLObject[]{ reader_make_constant_shell("HeartValveProcedure-Surgical"), list(reader_make_constant_shell("Anuloplasty"), list(reader_make_constant_shell("AnnuloplastyWithRing"), list(reader_make_constant_shell("CompleteAnnuloplastyWithRing"))), list(reader_make_constant_shell("Anuloplasty-WithoutRing-Complete")), list(reader_make_constant_shell("Anuloplasty-WithoutRing-Incomplete"))), list(reader_make_constant_shell("Commissuroplasty"), list(reader_make_constant_shell("Antero-posteriorCommissuroplasty")), list(reader_make_constant_shell("Commissuroplasty-AccordingToKay-bicuspidization")), list(reader_make_constant_shell("Commissuroplasty-Anteroposterior")), list(reader_make_constant_shell("Commissuroplasty-CongenitalBiscupsid")), list(reader_make_constant_shell("Commissuroplasty-Left-anterior")), list(reader_make_constant_shell("Commissuroplasty-Posteroseptal")), list(reader_make_constant_shell("Commissuroplasty-Right-anterior"))), list(reader_make_constant_shell("HeartValveRepairReplacementOrExploration"), list(reader_make_constant_shell("Exploration-AorticValve-SurgicalProcedure")), list(reader_make_constant_shell("Exploration-MitralValve-SurgicalProcedure")), list(reader_make_constant_shell("Exploration-PulmonaryValve-SurgicalProcedure")), list(reader_make_constant_shell("Exploration-TricuspidValve-SurgicalProcedure")), list(reader_make_constant_shell("HeartValveRepairOrReplacement"), list(reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))))), list(reader_make_constant_shell("Plication-ValvularProcedure"), list(reader_make_constant_shell("AtrialPlication-SurgicalProcedure")), list(reader_make_constant_shell("Plication-BicuspidLeaflet")), list(reader_make_constant_shell("RightVentriclePlication-SurgicalProcedure")), list(reader_make_constant_shell("VentricularPlication-SurgicalProcedure"))), list(reader_make_constant_shell("Reconstruction-CardiacValveRepair"), list(reader_make_constant_shell("AnnularReconstruction-SurgicalProcedure")), list(reader_make_constant_shell("RootReconstruction"))), list(reader_make_constant_shell("Reorientation-CardiacValveRepair")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_aortic_valve_aborted_repair_attempt")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_mitral_valve_aborted_repair_attempt")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_pulmonary_valve_aborted_repair_attempt")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_tricuspid_valve_aborted_repair_attempt")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveProcedure-Surgical"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveProcedure-Surgical"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveProcedure-Surgical"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveProcedure-Surgical"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_tricuspid_valvectomy")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))))) }), list(new SubLObject[]{ reader_make_constant_shell("HeartVentricleProcedure-Surgical"), list(reader_make_constant_shell("Aneurysmectomy-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Myocardium-SurgicalProcedure")), list(reader_make_constant_shell("Cardiomyoplasty-SurgicalProcedure")), list(reader_make_constant_shell("Cryoablation-VentricularTissue-SurgicalProcedure")), list(reader_make_constant_shell("Debridement-VentricularWall-SurgicalProcedure")), list(reader_make_constant_shell("LeftVentricleProcedure-Surgical"), list(reader_make_constant_shell("BatistaProcedure-LeftVentricle-SurgicalProcedure")), list(reader_make_constant_shell("DorProcedure-LeftVentricle-SurgicalProcedure")), list(reader_make_constant_shell("FistulaRepairWithPatch-LeftVentricle-rightAtrium-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_repair_of_left_ventricular_outflow_tract")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricle")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricular_outflow_tract"))), list(reader_make_constant_shell("MyocorSplint-SurgicalProcedure")), list(reader_make_constant_shell("OtherVentricularRemodelingProcedure-SurgicalProcedure")), list(reader_make_constant_shell("PlacementOfAcornDevice-SurgicalProcedure")), list(reader_make_constant_shell("Repair-FreeWallVentricularRupture-SurgicalProcedure")), list(reader_make_constant_shell("Repair-VentricularOutflowTract-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Subendocardial-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricleProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_ventricle_batista_procedure_on_right_ventricle"))), list(reader_make_constant_shell("SkeletalMuscleCellDiacrinTransplant-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_excision_of_tumor")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_repair_of_ventricular_wall")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_resection_of_subendocardium")), list(reader_make_constant_shell("TransmyocardialRevascularization-SurgicalProcedure")), list(reader_make_constant_shell("Tri-svr-SurgicalProcedure")), list(reader_make_constant_shell("VentricularPlication-SurgicalProcedure")), list(reader_make_constant_shell("VentricularRepair-SurgicalProcedure")), list(reader_make_constant_shell("Ventriculotomy-SurgicalProcedure")) }), list(reader_make_constant_shell("LeftAtrialAppendageProcedure-Surgical"), list(reader_make_constant_shell("LeftAtrialAppendageExclusion-SurgicalProcedure"), list(reader_make_constant_shell("LeftAtrialAppendageExclusionUsingStaples-SurgicalProcedure")), list(reader_make_constant_shell("LeftAtrialAppendageLigation-SurgicalProcedure")), list(reader_make_constant_shell("LeftAtrialAppendageSizeReduction-SurgicalProcedure")))), list(reader_make_constant_shell("MediastinumOrNeckProcedure-Surgical"), list(reader_make_constant_shell("Biopsy-LymphNode-SurgicalProcedure")), list(reader_make_constant_shell("EvacuationOfHematoma-ChestCavity-SurgicalProcedure")), list(reader_make_constant_shell("EvacuationOfHematoma-Subclavicular-SurgicalProcedure")), list(reader_make_constant_shell("MediastinumNeckThymectomy-SurgicalProcedure")), list(reader_make_constant_shell("PatchPlacement-Mediastinum-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_mediastinum-neck_evacuation_of_hematoma_in_subclavicular"))), list(reader_make_constant_shell("Myectomy-VentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("Nephrectomy-SurgicalProcedure")), list(reader_make_constant_shell("Omentopexy-SurgicalProcedure")), list(reader_make_constant_shell("OtherNoncardiothoracicProcedure-Surgical"), list(reader_make_constant_shell("Resection-KommerellsDiverticulum-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_other_noncardiothoracic_other")), list(reader_make_constant_shell("SurgicalProcedure_other_noncardiothoracic_repair_of_leg_wound"))), list(reader_make_constant_shell("OtherSurgicalProcedure"), list(reader_make_constant_shell("ControlBleeding-SurgicalProcedure")), list(new SubLObject[]{ reader_make_constant_shell("OtherCardiacProcedure-Surgical"), list(reader_make_constant_shell("AbortedCardiacProcedure-SurgicalProcedure")), list(reader_make_constant_shell("AnnularReconstruction-SurgicalProcedure")), list(reader_make_constant_shell("CardiacExplorationOnly-SurgicalProcedure")), list(reader_make_constant_shell("CardiacPartialAutotransplantation-SurgicalProcedure")), list(reader_make_constant_shell("CardiopulmonaryBypass-SurgicalProcedure")), list(reader_make_constant_shell("EvacuationOfHematoma-PericardiumMediastinumDueToBleed-tamponade-SurgicalProcedure")), list(reader_make_constant_shell("NotCardiopulmonaryBypass-SurgicalProcedure")), list(reader_make_constant_shell("PericardialPatch-Non-congenital-SurgicalProcedure")), list(reader_make_constant_shell("Repair-AtrioventricularGroove-SurgicalProcedure")), list(reader_make_constant_shell("Repair-CoronarySinus-SurgicalProcedure")), list(reader_make_constant_shell("Repair-FibrousTrigone-SurgicalProcedure")), list(reader_make_constant_shell("Repair-SubvalvularApparatus-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfHeartWound-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfSubvalvularArea-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrDebridement-CoronaryOstium-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Subendocardial-SurgicalProcedure")), list(reader_make_constant_shell("Revision-PulmonaryArteryAnastomosis-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_cardiac-thoracic_procedure")), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_excision_of_tumor"), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_excision_of_tumor-mass_in_pulmonary_artery"))), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_other")), list(reader_make_constant_shell("ThrombectomyFromPacingLeads-wires-SurgicalProcedure")), list(reader_make_constant_shell("UnspecifiedCardiac-thoracicProcedure-SurgicalProcedure")) })), list(reader_make_constant_shell("OtherVascularProcedure-Surgical")), list(reader_make_constant_shell("Oversewing")), list(reader_make_constant_shell("PatchGraft-SaphenousVein-SurgicalProcedure")), list(reader_make_constant_shell("PatchGraft-SurgicalProcedure")), list(new SubLObject[]{ reader_make_constant_shell("PericardialProcedure-Surgical"), list(reader_make_constant_shell("BeckPoudrage-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Pericardium-SurgicalProcedure")), list(reader_make_constant_shell("Excision-PericardialCyst-SurgicalProcedure")), list(reader_make_constant_shell("PericardialPatch"), list(reader_make_constant_shell("PericardialPatch-Non-congenital-SurgicalProcedure")), list(reader_make_constant_shell("PericardialPatchToLungs-SurgicalProcedure"))), list(reader_make_constant_shell("PericardialWindow-SurgicalProcedure")), list(reader_make_constant_shell("Pericardiectomy-SurgicalProcedure")), list(reader_make_constant_shell("Pericardiocentesis-drainageOfPericardialEffusion-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrDebridement-Pericardium-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_pericardium_evacuation_of_hematoma_in_pericardium_or_mediastinum")), list(reader_make_constant_shell("SurgicalProcedure_pericardium_pericardiocentesis")) }), list(reader_make_constant_shell("PleuraProcedure-Surgical"), list(reader_make_constant_shell("Biopsy-Pleura-SurgicalProcedure")), list(reader_make_constant_shell("Decortication-SurgicalProcedure")), list(reader_make_constant_shell("OtherPleuraProcedure-Surgical")), list(reader_make_constant_shell("Pleurodesis-SurgicalProcedure"))), list(reader_make_constant_shell("PulmonaryProcedure-Surgical"), list(reader_make_constant_shell("Biopsy-Lung-SurgicalProcedure")), list(reader_make_constant_shell("Excision-LungBulla-SurgicalProcedure")), list(reader_make_constant_shell("PericardialPatchToLungs-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryEmbolectomy-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Lung-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_pulmonary_valvectomy"))), list(new SubLObject[]{ reader_make_constant_shell("RepairProcedure-Surgical"), list(reader_make_constant_shell("AtrialRepairProcedure-Surgical")), list(reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(reader_make_constant_shell("HerniaRepairProcedure-Surgical"), list(reader_make_constant_shell("Repair-DiaphragmaticHernia-SurgicalProcedure")), list(reader_make_constant_shell("Repair-Ventral-incisionalHernia-SurgicalProcedure")), list(reader_make_constant_shell("ThoracicHerniaRepair-SurgicalProcedure"))), list(reader_make_constant_shell("NonHerniaRepairThoracic-SurgicalProcedure")), list(reader_make_constant_shell("Repair-AtrioventricularGroove-SurgicalProcedure")), list(reader_make_constant_shell("Repair-CoronarySinus-SurgicalProcedure")), list(reader_make_constant_shell("Repair-FibrousTrigone-SurgicalProcedure")), list(reader_make_constant_shell("Repair-FreeWallVentricularRupture-SurgicalProcedure")), list(reader_make_constant_shell("Repair-PostInfarctIvsd-SurgicalProcedure")), list(reader_make_constant_shell("Repair-SubvalvularApparatus-SurgicalProcedure")), list(reader_make_constant_shell("Repair-VentricularOutflowTract-SurgicalProcedure")), list(reader_make_constant_shell("Repair-VentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("RepairLungOrChestWall-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfHeartWound-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfPerivalvularLeak")), list(reader_make_constant_shell("RepairOfSpleen-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfSubvalvularArea-SurgicalProcedure")), list(reader_make_constant_shell("RepairWithRe-implantationOfAorticValve-SurgicalProcedure")), list(reader_make_constant_shell("VascularRepairProcedure-Surgical"), list(reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), list(reader_make_constant_shell("Repair-AtrialSeptalAneurysm-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrResection-VentricularSeptalAneurysm-SurgicalProcedure")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AbdominalAorta"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("ThoracicAorta")))), list(reader_make_constant_shell("Aortoplasty-SurgicalProcedure")), list(reader_make_constant_shell("RepairAfterPercutaneousValveReplacement-VascularProcedure")), list(reader_make_constant_shell("RepairByButton-SurgicalProcedure")), list(reader_make_constant_shell("RepairByPatchGraft-SurgicalProcedure")), list(reader_make_constant_shell("RepairByStitch-SurgicalProcedure"))), list(reader_make_constant_shell("VentricularRepair-SurgicalProcedure")) }), list(reader_make_constant_shell("Replacement-SurgicalProcedure"), list(reader_make_constant_shell("BentallHemashieldValvedConduit-VascularProcedure")), list(reader_make_constant_shell("ElephantTrunkAortaReplacementStage1-SurgicalProcedure")), list(reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(reader_make_constant_shell("OrganTransplantProcedure-Surgical"), list(reader_make_constant_shell("HeartTransplantProcedure-Surgical")), list(reader_make_constant_shell("KidneyTransplantProcedure-Surgical")), list(reader_make_constant_shell("LiverTransplantProcedure-Surgical")), list(reader_make_constant_shell("LungTransplantProcedure-Surgical")), list(reader_make_constant_shell("PancreasTransplantProcedure-Surgical"))), list(reader_make_constant_shell("ReplacementWithConduit-SurgicalProcedure"))), list(reader_make_constant_shell("ReplacementSurgicalProcedure"), list(list(reader_make_constant_shell("ReplacingFn"), reader_make_constant_shell("HeartValve")), list(reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))))), list(reader_make_constant_shell("Resection-CardiacValve")), list(reader_make_constant_shell("ResectionOfPannus")), list(reader_make_constant_shell("Shunt-bypassGraft-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure-Noncardiac")), list(new SubLObject[]{ reader_make_constant_shell("SurgicalProcedure_eps"), list(reader_make_constant_shell("DrainageOfPacemakerWound-SurgicalProcedure")), list(reader_make_constant_shell("Explant-BiventricularPacerCrtIcd-SurgicalProcedure")), list(reader_make_constant_shell("Explant-Icd-SurgicalProcedure")), list(reader_make_constant_shell("ExplantICDWithSingleChamberOrDualChamberPacing-SurgicalProcedure")), list(reader_make_constant_shell("ExplantOfEndocardialPacemakerLead")), list(reader_make_constant_shell("ExplantOfEpicardialPacemakerLead")), list(reader_make_constant_shell("ExplantOfImplantableCardioverterDefibrillatorPatch")), list(reader_make_constant_shell("Implant-BiventricularPacerCrtIcd-SurgicalProcedure")), list(reader_make_constant_shell("Implant-Icd-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOrExplant-Icd-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOrExplant-PermanentPacemaker-SurgicalProcedure"), list(reader_make_constant_shell("ExplantOfPermanentPacemakerSingleChamberOrDualChamber-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOfPermanentBiventricularPacemaker-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOfPermanentPacemakerSingleChamberOrDualChamber-SurgicalProcedure"))), list(reader_make_constant_shell("MappingAndAblationOfAccessoryPathways-SurgicalProcedure")), list(reader_make_constant_shell("PacemakerInsertion-SurgicalProcedure"), list(reader_make_constant_shell("ImplantOfPermanentBiventricularPacemaker-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOfPermanentPacemakerSingleChamberOrDualChamber-SurgicalProcedure"))), list(reader_make_constant_shell("Placement-PpmicdEndocardialLead-SurgicalProcedure")), list(reader_make_constant_shell("PlacementEpicardialLeadsNotIncludingLeftVentricular-SurgicalProcedure")), list(reader_make_constant_shell("PlacementOfRightAtrialEpicardialPacemakerLead")), list(reader_make_constant_shell("PlacementOfRightVentricularEpicardialPacemakerLead")), list(reader_make_constant_shell("RemovalOfEpicardialPacingWires-SurgicalProcedure")), list(reader_make_constant_shell("RemovalOfICDLeads-SurgicalProcedure")), list(reader_make_constant_shell("RemovalOfTemporaryEpicardialPacingWires-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfPpmicdLeads-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_endocardial_pacemaker_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_epicardial_pacemaker_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_implantable_cardioverter_defibrillator_generator")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_implantable_cardioverter_defibrillator_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_left_ventricular_epicardial_pacing_lead")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_permanent_pacemaker")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_temporary_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_epicardial_pacing_leads_not_including_left_ventricular")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_left_ventricular_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_permanent_endocardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_right_atrial_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_right_ventricular_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_revision_of_permanent_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_thrombectomy_from_pacing_leads")) }), list(new SubLObject[]{ reader_make_constant_shell("SurgicalWoundTreatment-SurgicalProcedure"), list(reader_make_constant_shell("ChestClosure-SurgicalProcedure")), list(reader_make_constant_shell("DebridementOfOperativeWoundNotSternal-SurgicalProcedure")), list(reader_make_constant_shell("HematomaRemovalFromGraftHarvestSite-SurgicalProcedure")), list(reader_make_constant_shell("RemovalOfSternalWires-SurgicalProcedure")), list(reader_make_constant_shell("SternalRe-wire-SurgicalProcedure")), list(reader_make_constant_shell("SternalResection-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_surgical_wound_treatment_debridement_or_rewire_of_sternum"), list(reader_make_constant_shell("SternalDebridement-SurgicalProcedure"))), list(reader_make_constant_shell("SurgicalProcedure_surgical_wound_treatment_sternal_fixation")) }), list(new SubLObject[]{ reader_make_constant_shell("ThoracicProcedure-Surgical"), list(reader_make_constant_shell("NonHerniaRepairThoracic-SurgicalProcedure")), list(reader_make_constant_shell("OtherThoracicProcedure-Surgical")), list(reader_make_constant_shell("RemovalOfForeignBodyMaterials-SurgicalProcedure")), list(reader_make_constant_shell("RepairThoracicWound-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_thoracic_chest_closure")), list(reader_make_constant_shell("SurgicalProcedure_thoracic_chest_open")), list(reader_make_constant_shell("SurgicalProcedure_thoracic_control_bleeding")), list(reader_make_constant_shell("SurgicalProcedure_thoracic_excision_of_tumor-mass_in_thoracic_cavity")), list(reader_make_constant_shell("SurgicalProcedure_thoracic_not_transplant")), list(reader_make_constant_shell("ThoracicHerniaRepair-SurgicalProcedure")) }), list(reader_make_constant_shell("ThrombectomyOrTumorExcision-SurgicalProcedure")), list(reader_make_constant_shell("TransluminalMyocardialRevascularization-MedicalProcedure"), list(reader_make_constant_shell("PercutaneousTransluminalMyocardialRevascularization"))), list(reader_make_constant_shell("TumorExcision"), list(reader_make_constant_shell("AtrialExcisionOfTumor-SurgicalProcedure")), list(reader_make_constant_shell("Excision-ValvularTumor")), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_excision_of_tumor"), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_excision_of_tumor-mass_in_pulmonary_artery"))), list(reader_make_constant_shell("SurgicalProcedure_thoracic_excision_of_tumor-mass_in_thoracic_cavity")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_excision_of_tumor"))), list(list(reader_make_constant_shell("RepairingFn"), reader_make_constant_shell("BloodVessel")), list(reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), list(reader_make_constant_shell("Repair-AtrialSeptalAneurysm-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrResection-VentricularSeptalAneurysm-SurgicalProcedure")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AbdominalAorta"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("ThoracicAorta"))))) }), list(reader_make_constant_shell("SuturingProcedure"), list(reader_make_constant_shell("SuturingProcedure-FigureOf8"))), list(reader_make_constant_shell("TestCollectionForMV")), list(reader_make_constant_shell("Thrombectomy"), list(reader_make_constant_shell("AtrialThrombectomy-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricle")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricular_outflow_tract"))), list(reader_make_constant_shell("Transfer")), list(reader_make_constant_shell("TransferPosteriorToAnterior")), list(reader_make_constant_shell("TransferPosteriorToPosterior")), list(reader_make_constant_shell("VascularProcedure-OtherOrAorta"), list(reader_make_constant_shell("AorticProcedure-Surgical"), list(reader_make_constant_shell("AbdominalAortaProcedure-Surgical")), list(reader_make_constant_shell("Aortoplasty-SurgicalProcedure")), list(reader_make_constant_shell("BentallHemashieldValvedConduit-VascularProcedure")), list(reader_make_constant_shell("ElephantTrunkAortaReplacementStage1-SurgicalProcedure")), list(reader_make_constant_shell("ThoracicAortaProcedure-Surgical"))), list(reader_make_constant_shell("OtherVascularProcedure-Surgical")), list(reader_make_constant_shell("ThoracicAortaProcedure-STS"))), list(new SubLObject[]{ reader_make_constant_shell("VascularProcedure-Surgical"), list(reader_make_constant_shell("AorticProcedure-Surgical"), list(reader_make_constant_shell("AbdominalAortaProcedure-Surgical")), list(reader_make_constant_shell("Aortoplasty-SurgicalProcedure")), list(reader_make_constant_shell("BentallHemashieldValvedConduit-VascularProcedure")), list(reader_make_constant_shell("ElephantTrunkAortaReplacementStage1-SurgicalProcedure")), list(reader_make_constant_shell("ThoracicAortaProcedure-Surgical"))), list(reader_make_constant_shell("ArterioscleroticPlaqueRemoval-Procedure"), list(reader_make_constant_shell("Endarterectomy-SurgicalProcedure"), list(reader_make_constant_shell("AtrialEndarterectomy-SurgicalProcedure")), list(reader_make_constant_shell("EndarterectomyLaser-SurgicalProcedure")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("Endarterectomy-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("CommonCarotidArtery"))))), list(reader_make_constant_shell("BalloonDilatation-SurgicalProcedure")), list(reader_make_constant_shell("BypassGraft-SurgicalProcedure"), list(reader_make_constant_shell("BypassGraftWithSaphenousVein-SurgicalProcedure")), list(reader_make_constant_shell("CoronaryArteryBypassGraft-SurgicalProcedure"), list(reader_make_constant_shell("CABGWithBilateralITAGraft")), list(reader_make_constant_shell("CABGWithMultipleGrafts")), list(reader_make_constant_shell("CabgWithSingleITAGraft")), list(reader_make_constant_shell("SingleGraftCAGB")))), list(reader_make_constant_shell("BypassGraftWithHemashield-SurgicalProcedure")), list(reader_make_constant_shell("CabrolFistula-SurgicalProcedure")), list(reader_make_constant_shell("CongenitalIntervention-MedicalProcedure")), list(reader_make_constant_shell("CoronaryArteryProcedureNonCongenital-Surgical"), list(reader_make_constant_shell("CoronaryArteryBypassGraft-SurgicalProcedure"), list(reader_make_constant_shell("CABGWithBilateralITAGraft")), list(reader_make_constant_shell("CABGWithMultipleGrafts")), list(reader_make_constant_shell("CabgWithSingleITAGraft")), list(reader_make_constant_shell("SingleGraftCAGB"))), list(reader_make_constant_shell("OtherVascularCoronaryArteryProcedure-Surgical")), list(list(reader_make_constant_shell("CollectionDifferenceFn"), reader_make_constant_shell("CoronaryArteryProcedureNonCongenital-Surgical"), reader_make_constant_shell("CoronaryArteryBypassGraft-SurgicalProcedure")))), list(reader_make_constant_shell("CoronaryLaserProcedure-SurgicalProcedure")), list(reader_make_constant_shell("Debridement-VascularProcedure"), list(reader_make_constant_shell("ProstheticValveDebridement"))), list(reader_make_constant_shell("EndovascularProcedure-SurgicalProcedure"), list(reader_make_constant_shell("EndovascularStentProcedure-Surgical"), list(reader_make_constant_shell("EndovascularStentGraft-SurgicalProcedure"), list(reader_make_constant_shell("EndovascularStentGraftPlacementAfterLeak-SurgicalProcedure"))))), list(reader_make_constant_shell("GraftInsertion"), list(reader_make_constant_shell("EndovascularStentGraft-SurgicalProcedure"), list(reader_make_constant_shell("EndovascularStentGraftPlacementAfterLeak-SurgicalProcedure")))), list(reader_make_constant_shell("Omentopexy-SurgicalProcedure")), list(reader_make_constant_shell("OtherVascularProcedure-Surgical")), list(reader_make_constant_shell("Oversewing")), list(reader_make_constant_shell("PatchGraft-SaphenousVein-SurgicalProcedure")), list(reader_make_constant_shell("PatchGraft-SurgicalProcedure")), list(reader_make_constant_shell("ReplacementWithConduit-SurgicalProcedure")), list(reader_make_constant_shell("RoofingOfCoronarySinus-SurgicalProcedure")), list(reader_make_constant_shell("Shunt-bypassGraft-SurgicalProcedure")), list(reader_make_constant_shell("ThrombectomyOrTumorExcision-SurgicalProcedure")), list(reader_make_constant_shell("TransluminalMyocardialRevascularization-MedicalProcedure"), list(reader_make_constant_shell("PercutaneousTransluminalMyocardialRevascularization"))), list(reader_make_constant_shell("Unroofing-SurgicalProcedure")), list(reader_make_constant_shell("VascularBiopsy-VascularProcedure")), list(reader_make_constant_shell("VascularRepairProcedure-Surgical"), list(reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), list(reader_make_constant_shell("Repair-AtrialSeptalAneurysm-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrResection-VentricularSeptalAneurysm-SurgicalProcedure")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AbdominalAorta"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("ThoracicAorta")))), list(reader_make_constant_shell("Aortoplasty-SurgicalProcedure")), list(reader_make_constant_shell("RepairAfterPercutaneousValveReplacement-VascularProcedure")), list(reader_make_constant_shell("RepairByButton-SurgicalProcedure")), list(reader_make_constant_shell("RepairByPatchGraft-SurgicalProcedure")), list(reader_make_constant_shell("RepairByStitch-SurgicalProcedure"))) }) }))))));
    }

    public static final class $replacement_tree_native extends SubLStructNative {
        public SubLStructDecl getStructDecl() {
            return structDecl;
        }

        public SubLObject getField2() {
            return com.cyc.cycjava.cycl.gke_main.$replacement_tree_native.this.$root;
        }

        public SubLObject getField3() {
            return com.cyc.cycjava.cycl.gke_main.$replacement_tree_native.this.$children;
        }

        public SubLObject setField2(SubLObject value) {
            return com.cyc.cycjava.cycl.gke_main.$replacement_tree_native.this.$root = value;
        }

        public SubLObject setField3(SubLObject value) {
            return com.cyc.cycjava.cycl.gke_main.$replacement_tree_native.this.$children = value;
        }

        public SubLObject $root = Lisp.NIL;

        public SubLObject $children = Lisp.NIL;

        private static final SubLStructDeclNative structDecl = makeStructDeclNative(com.cyc.cycjava.cycl.gke_main.$replacement_tree_native.class, REPLACEMENT_TREE, REPLACEMENT_TREE_P, $list_alt153, $list_alt154, new String[]{ "$root", "$children" }, $list_alt155, $list_alt156, PRINT_REPLACEMENT_TREE);
    }

    public static final SubLFile me = new gke_main();

 public static final String myName = "com.cyc.cycjava.cycl.gke_main";


    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $gke_overly_general_non_predicate_types$ = makeSymbol("*GKE-OVERLY-GENERAL-NON-PREDICATE-TYPES*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $gke_filtered_termP_caching_state$ = makeSymbol("*GKE-FILTERED-TERM?-CACHING-STATE*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $gke_overly_general_predicate_types$ = makeSymbol("*GKE-OVERLY-GENERAL-PREDICATE-TYPES*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $gke_predicate_filteredP_caching_state$ = makeSymbol("*GKE-PREDICATE-FILTERED?-CACHING-STATE*");

    // defparameter
    /**
     * BOOLEANP; Should we use the RBP-WFF functionality - when available - to
     * wff-check candidate replacements?
     */
    @LispMethod(comment = "BOOLEANP; Should we use the RBP-WFF functionality - when available - to\r\nwff-check candidate replacements?\ndefparameter\nBOOLEANP; Should we use the RBP-WFF functionality - when available - to\nwff-check candidate replacements?")
    public static final SubLSymbol $use_rbp_wff_in_gkeP$ = makeSymbol("*USE-RBP-WFF-IN-GKE?*");



    // defconstant
    @LispMethod(comment = "defconstant")
    public static final SubLSymbol $dtp_replacement_tree$ = makeSymbol("*DTP-REPLACEMENT-TREE*");



    // defparameter
    /**
     * amount of seconds to wait when trying to stop an inference before using
     * extreme measures...
     */
    @LispMethod(comment = "amount of seconds to wait when trying to stop an inference before using\r\nextreme measures...\ndefparameter\namount of seconds to wait when trying to stop an inference before using\nextreme measures...")
    public static final SubLSymbol $default_patience_wait_time$ = makeSymbol("*DEFAULT-PATIENCE-WAIT-TIME*");

    // defparameter
    // data member for accessing query threads related to the gke
    /**
     * data member for accessing query threads related to the gke
     */
    @LispMethod(comment = "data member for accessing query threads related to the gke\ndefparameter")
    public static final SubLSymbol $gke_query_threads$ = makeSymbol("*GKE-QUERY-THREADS*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $daemon_should_run_inference_statuses$ = makeSymbol("*DAEMON-SHOULD-RUN-INFERENCE-STATUSES*");

    // deflexical
    // Set to T if you need to get the old behavior back.
    /**
     * Set to T if you need to get the old behavior back.
     */
    @LispMethod(comment = "Set to T if you need to get the old behavior back.\ndeflexical")
    private static final SubLSymbol $gke_run_inference_with_adjusted_dynamic_propertiesP$ = makeSymbol("*GKE-RUN-INFERENCE-WITH-ADJUSTED-DYNAMIC-PROPERTIES?*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $inference_done_statuses$ = makeSymbol("*INFERENCE-DONE-STATUSES*");

    // Internal Constants
    @LispMethod(comment = "Internal Constants")
    private static final SubLSymbol GET_GKE_ARG_OPTIONS = makeSymbol("GET-GKE-ARG-OPTIONS");

    static private final SubLString $str1$Got_unknown_arg_type_for___A__ = makeString("Got unknown arg type for: ~A~%");

    static private final SubLString $str3$Natural_language_processing_has_d = makeString("Natural language processing has deleted an entry.~%Wrong sizes ~A and ~A");

    private static final SubLSymbol GET_GKE_EXPANDED_ITEMS = makeSymbol("GET-GKE-EXPANDED-ITEMS");

    static private final SubLList $list8 = list(reader_make_constant_shell("forAll"), reader_make_constant_shell("thereExists"), reader_make_constant_shell("thereExistExactly"), reader_make_constant_shell("thereExistAtLeast"), reader_make_constant_shell("thereExistAtMost"), reader_make_constant_shell("thereExistRange"));

    static private final SubLList $list9 = list(new SubLObject[]{ reader_make_constant_shell("AFew-Quant"), reader_make_constant_shell("Few-Quant"), reader_make_constant_shell("Many-Quant"), reader_make_constant_shell("Most-Quant"), reader_make_constant_shell("Tens-Quant"), reader_make_constant_shell("Dozens-Quant"), reader_make_constant_shell("Hundreds-Quant"), reader_make_constant_shell("Thousands-Quant"), reader_make_constant_shell("Millions-Quant"), reader_make_constant_shell("Billions-Quant") });

    private static final SubLSymbol GET_GKE_QUANTIFIER_RANGES = makeSymbol("GET-GKE-QUANTIFIER-RANGES");

    static private final SubLString $$$Get_the_quantifier_ranges = makeString("Get the quantifier ranges");

    private static final SubLSymbol NART_SUBSTITUTE = makeSymbol("NART-SUBSTITUTE");

    private static final SubLInteger $int$200 = makeInteger(200);

    private static final SubLSymbol GKE_LIST_ITEM_COMPARATOR = makeSymbol("GKE-LIST-ITEM-COMPARATOR");

    private static final SubLInteger $int$175 = makeInteger(175);

    private static final SubLSymbol $sym19$GKE_FILTERED_TERM_ = makeSymbol("GKE-FILTERED-TERM?");

    private static final SubLSymbol RKF_MAX_SPECS = makeSymbol("RKF-MAX-SPECS");

    private static final SubLSymbol RKF_INSTANTIATIONS = makeSymbol("RKF-INSTANTIATIONS");



    private static final SubLSymbol GKE_ISAS_FILTERED_TERM = makeSymbol("GKE-ISAS-FILTERED-TERM");

    private static final SubLSymbol RKF_ALL_GENLS = makeSymbol("RKF-ALL-GENLS");

    private static final SubLSymbol $gke_isas_filtered_term_caching_state$ = makeSymbol("*GKE-ISAS-FILTERED-TERM-CACHING-STATE*");

    private static final SubLList $list27 = list(new SubLObject[]{ reader_make_constant_shell("Collection"), reader_make_constant_shell("ConventionalClassificationType"), reader_make_constant_shell("SiblingDisjointSetOrCollectionType"), reader_make_constant_shell("SetOrCollectionType"), reader_make_constant_shell("DisjointSetOrCollectionType"), reader_make_constant_shell("SecondOrderCollection"), list(reader_make_constant_shell("GroupFn"), reader_make_constant_shell("PartiallyTangible")), reader_make_constant_shell("ObjectType"), reader_make_constant_shell("Group"), reader_make_constant_shell("Entity"), reader_make_constant_shell("PublicConstant-DefinitionalGAFsOK"), reader_make_constant_shell("ExistingStuffType"), reader_make_constant_shell("StuffType"), reader_make_constant_shell("PublicConstant-CommentOK"), reader_make_constant_shell("ReformulatorIrrelevantFORT"), reader_make_constant_shell("ExistingObjectType"), reader_make_constant_shell("Individual") });

    private static final SubLSymbol $sym28$_GKE_FILTERED_TERM__CACHING_STATE_ = makeSymbol("*GKE-FILTERED-TERM?-CACHING-STATE*");

    static private final SubLList $list29 = list(new SubLObject[]{ reader_make_constant_shell("SetOrCollectionPredicate"), reader_make_constant_shell("EvaluatablePredicate"), reader_make_constant_shell("AsymmetricBinaryPredicate"), reader_make_constant_shell("ReflexiveBinaryPredicate"), reader_make_constant_shell("TransitiveBinaryPredicate"), reader_make_constant_shell("RuleMacroPredicate"), reader_make_constant_shell("OpenCycDefinitionalPredicate"), reader_make_constant_shell("VocabularyDefiningPredicate"), reader_make_constant_shell("DefaultMonotonicPredicate") });

    private static final SubLSymbol $sym30$GKE_PREDICATE_FILTERED_ = makeSymbol("GKE-PREDICATE-FILTERED?");

    private static final SubLList $list32 = list(reader_make_constant_shell("arg1Isa"), reader_make_constant_shell("arg1Genl"), reader_make_constant_shell("arg1NotIsa"), reader_make_constant_shell("arg1NotGenl"), reader_make_constant_shell("arg1Format"));

    private static final SubLSymbol $sym33$_GKE_PREDICATE_FILTERED__CACHING_STATE_ = makeSymbol("*GKE-PREDICATE-FILTERED?-CACHING-STATE*");

    private static final SubLSymbol TREE_POSITION_P = makeSymbol("TREE-POSITION-P");

    private static final SubLSymbol $sym36$CYCL_FORMULA_ = makeSymbol("CYCL-FORMULA?");

    private static final SubLString $str38$OPERATOR_TERMS_PASS_CONSTRAINTS_r = makeString("OPERATOR-TERMS-PASS-CONSTRAINTS requires an operator arg position. Got ~S");

    private static final SubLString $str39$OPERATOR_TERMS_PASS_CONSTRAINTS_r = makeString("OPERATOR-TERMS-PASS-CONSTRAINTS requires an argument arg position. Got ~S");

    private static final SubLSymbol GET_GKE_NAUT_ARG_POSITION = makeSymbol("GET-GKE-NAUT-ARG-POSITION");

    private static final SubLSymbol GET_GKE_IS_KNOWN = makeSymbol("GET-GKE-IS-KNOWN");

    private static final SubLObject $const43$GenericIntelligenceAnalysis_CAE_A = reader_make_constant_shell("GenericIntelligenceAnalysis-CAE-Allotment");

    private static final SubLObject $const45$GenericMedicalResearchTask_Allotm = reader_make_constant_shell("GenericMedicalResearchTask-Allotment");

    private static final SubLString $$$Show_all_values_of_ = makeString("Show all values of ");

    private static final SubLString $str51$_such_that__ = makeString(" such that~%");

    private static final SubLString $str52$Is_it_true_that__ = makeString("Is it true that~%");



    private static final SubLSymbol PPH_ANCHOR_TAGS_FOR_TERM = makeSymbol("PPH-ANCHOR-TAGS-FOR-TERM");



    private static final SubLList $list56 = list(makeKeyword("NOR"), makeKeyword("NOT"));



    private static final SubLList $list61 = list(reader_make_constant_shell("unknownSentence"), reader_make_constant_shell("not"));

    private static final SubLList $list62 = list(ONE_INTEGER, ZERO_INTEGER);



    private static final SubLString $$$All_of_the_following_are_true = makeString("All of the following are true");

    private static final SubLString $str67$At_least_one_of_the_following_is_ = makeString("At least one of the following is true");

    private static final SubLString $$$None_of_the_following_is_true = makeString("None of the following is true");

    private static final SubLSymbol GKE_ADD_CLONED_LITERAL = makeSymbol("GKE-ADD-CLONED-LITERAL");

    private static final SubLList $list70 = list(makeKeyword("AND"), makeKeyword("OR"));

    private static final SubLString $str71$_S_must_be_one_of__S = makeString("~S must be one of ~S");

    private static final SubLSymbol GKE_REMOVE_LITERAL = makeSymbol("GKE-REMOVE-LITERAL");

    private static final SubLString $$$GKEReformulationRuleHoldingMt = makeString("GKEReformulationRuleHoldingMt");

    private static final SubLString $str78$useReformulationRuleForGuidedKnow = makeString("useReformulationRuleForGuidedKnowledgeEntry");

    private static final SubLList $list80 = list(makeKeyword("ANYTHING"));

    private static final SubLList $list81 = list(reader_make_constant_shell("thereExists"), makeKeyword("EL-VARIABLE"), makeKeyword("ANYTHING"));

    private static final SubLSymbol POSSIBLE_SENTENCE_SUBSTITUTIONS = makeSymbol("POSSIBLE-SENTENCE-SUBSTITUTIONS");



    private static final SubLObject $$nonPlural_Generic = reader_make_constant_shell("nonPlural-Generic");

    private static final SubLList $list85 = list(makeKeyword("CASE-INSENSITIVE"), $TRUE, makeKeyword("REGULAR-EXPRESSIONS"), makeKeyword("FALSE"));



    private static final SubLSymbol $sym88$GENERALITY_ESTIMATE_ = makeSymbol("GENERALITY-ESTIMATE<");

    private static final SubLSymbol SUBSTITUTE_TERM_INTO_SENTENCE = makeSymbol("SUBSTITUTE-TERM-INTO-SENTENCE");

    private static final SubLSymbol NART_EL_FORMULA = makeSymbol("NART-EL-FORMULA");

    private static final SubLString $str92$_S_does_not_have_arg_position__S = makeString("~S does not have arg-position ~S");



    private static final SubLList $list95 = list(reader_make_constant_shell("and"));

    private static final SubLSymbol $sym96$EL_VAR_ = makeSymbol("EL-VAR?");

    private static final SubLSymbol EL_VAR_NAME = makeSymbol("EL-VAR-NAME");







    private static final SubLSymbol GKE_MEMOIZATION_STATE = makeSymbol("GKE-MEMOIZATION-STATE");

    private static final SubLString $$$GKE_Memoization_State = makeString("GKE Memoization State");

    private static final SubLSymbol $gke_memoization_state_caching_state$ = makeSymbol("*GKE-MEMOIZATION-STATE-CACHING-STATE*");

    private static final SubLSymbol CLEAR_GKE_MEMOIZATION_STATE = makeSymbol("CLEAR-GKE-MEMOIZATION-STATE");

    private static final SubLSymbol GKE_GLOSS_FOR_LITERAL = makeSymbol("GKE-GLOSS-FOR-LITERAL");

    private static final SubLSymbol $sym107$ATOMIC_SENTENCE_ = makeSymbol("ATOMIC-SENTENCE?");



    private static final SubLSymbol GENERATE_GKE_GLOSS_WRT_MT_CACHED = makeSymbol("GENERATE-GKE-GLOSS-WRT-MT-CACHED");

    private static final SubLSymbol $generate_gke_gloss_wrt_mt_cached_caching_state$ = makeSymbol("*GENERATE-GKE-GLOSS-WRT-MT-CACHED-CACHING-STATE*");

    private static final SubLSymbol CANDIDATE_REPLACEMENT_RENDERERS_FOR_SENTENCE = makeSymbol("CANDIDATE-REPLACEMENT-RENDERERS-FOR-SENTENCE");

    private static final SubLList $list115 = cons(makeSymbol("KEY"), makeSymbol("TERMS"));

    private static final SubLSymbol CANDIDATE_REPLACEMENTS_FOR_VARIABLES = makeSymbol("CANDIDATE-REPLACEMENTS-FOR-VARIABLES");

    private static final SubLSymbol CANDIDATE_REPLACEMENTS_FOR_ARG = makeSymbol("CANDIDATE-REPLACEMENTS-FOR-ARG");

    private static final SubLSymbol CANDIDATE_REPLACEMENTS_FOR_SENTENCE_CACHED = makeSymbol("CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED");

    private static final SubLList $list120 = list(makeKeyword("INFERENCE-MODE"), makeKeyword("MINIMAL"), makeKeyword("ANSWER-LANGUAGE"), makeKeyword("HL"));

    private static final SubLList $list121 = cons(makeSymbol("KEY"), makeSymbol("REPLACEMENTS"));

    private static final SubLList $list122 = list(makeSymbol("?REP-COLL"), makeSymbol("?REP-POS"), makeSymbol("?CON-COLL"), makeSymbol("?CON-POS"));

    private static final SubLObject $const123$suggestionsForPredRelativeToIsaIn = reader_make_constant_shell("suggestionsForPredRelativeToIsaInArg");

    private static final SubLList $list124 = list(makeSymbol("REPLACEMENT-COLL"), makeSymbol("REPLACEMENT-POS"), makeSymbol("CONSTRAINT-COLL"), makeSymbol("CONSTRAINT-POS"));

    private static final SubLObject $const125$suggestionsForPredRelativeToGenls = reader_make_constant_shell("suggestionsForPredRelativeToGenlsInArg");

    private static final SubLSymbol $candidate_replacements_for_sentence_cached_caching_state$ = makeSymbol("*CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED-CACHING-STATE*");

    private static final SubLInteger $int$2048 = makeInteger(2048);

    private static final SubLSymbol CLEAR_CANDIDATE_REPLACEMENTS_FOR_SENTENCE_CACHED = makeSymbol("CLEAR-CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED");

    private static final SubLSymbol GKE_GET_ELEMENTS = makeSymbol("GKE-GET-ELEMENTS");

    private static final SubLSymbol $sym132$HL_PROTOTYPICAL_INSTANCE_ = makeSymbol("HL-PROTOTYPICAL-INSTANCE?");

    private static final SubLSymbol $sym133$_X = makeSymbol("?X");



    private static final SubLSymbol $gke_get_elements_caching_state$ = makeSymbol("*GKE-GET-ELEMENTS-CACHING-STATE*");

    private static final SubLSymbol CLEAR_GKE_GET_ELEMENTS = makeSymbol("CLEAR-GKE-GET-ELEMENTS");

    private static final SubLSymbol NEW_REPLACEMENT_TREE = makeSymbol("NEW-REPLACEMENT-TREE");

    private static final SubLList $list138 = cons(makeSymbol("BIN-PRED"), makeSymbol("ARGNUM"));

    private static final SubLString $str139$__Conflating__S_to__S_____ = makeString("~&Conflating ~S to ~S...~%");

    private static final SubLSymbol $omit_suggestion_stumpsP$ = makeSymbol("*OMIT-SUGGESTION-STUMPS?*");

    private static final SubLSymbol REPLACEMENT_TREE = makeSymbol("REPLACEMENT-TREE");

    private static final SubLSymbol REPLACEMENT_TREE_P = makeSymbol("REPLACEMENT-TREE-P");

    private static final SubLList $list143 = list(makeSymbol("ROOT"), makeSymbol("CHILDREN"));

    private static final SubLList $list144 = list($ROOT, makeKeyword("CHILDREN"));

    private static final SubLList $list145 = list(makeSymbol("R-TREE-ROOT"), makeSymbol("R-TREE-CHILDREN"));

    private static final SubLList $list146 = list(makeSymbol("_CSETF-R-TREE-ROOT"), makeSymbol("_CSETF-R-TREE-CHILDREN"));

    private static final SubLSymbol PRINT_REPLACEMENT_TREE = makeSymbol("PRINT-REPLACEMENT-TREE");

    private static final SubLSymbol REPLACEMENT_TREE_PRINT_FUNCTION_TRAMPOLINE = makeSymbol("REPLACEMENT-TREE-PRINT-FUNCTION-TRAMPOLINE");

    private static final SubLList $list149 = list(makeSymbol("OPTIMIZE-FUNCALL"), makeSymbol("REPLACEMENT-TREE-P"));

    private static final SubLSymbol R_TREE_ROOT = makeSymbol("R-TREE-ROOT");

    private static final SubLSymbol _CSETF_R_TREE_ROOT = makeSymbol("_CSETF-R-TREE-ROOT");

    private static final SubLSymbol R_TREE_CHILDREN = makeSymbol("R-TREE-CHILDREN");

    private static final SubLSymbol _CSETF_R_TREE_CHILDREN = makeSymbol("_CSETF-R-TREE-CHILDREN");

    private static final SubLString $str155$Invalid_slot__S_for_construction_ = makeString("Invalid slot ~S for construction function");

    private static final SubLSymbol MAKE_REPLACEMENT_TREE = makeSymbol("MAKE-REPLACEMENT-TREE");

    private static final SubLSymbol VISIT_DEFSTRUCT_OBJECT_REPLACEMENT_TREE_METHOD = makeSymbol("VISIT-DEFSTRUCT-OBJECT-REPLACEMENT-TREE-METHOD");

    private static final SubLString $str161$_REPLACEMENT_TREE__S_ = makeString("<REPLACEMENT-TREE ~S>");

    private static final SubLString $str163$Unable_to_place__D_renderers = makeString("Unable to place ~D renderers");

    private static final SubLString $str164$Hit_max_depth_of__D__Pruning__D_r = makeString("Hit max depth of ~D. Pruning ~D remaining renderers.");

    private static final SubLString $str165$__Placing__S_under_superiors___S_ = makeString("~&Placing ~S under superiors: ~S~%");

    private static final SubLString $str167$__Found__S_on_level__D___ = makeString("~&Found ~S on level ~D.~%");

    private static final SubLString $str168$__Not_in_subtree__so_adding__S_un = makeString("~&Not in subtree, so adding ~S under ~S on level ~D.~%");

    private static final SubLString $str169$___Tree_level__D_is_now__S___ = makeString("~& Tree level ~D is now ~S.~%");

    private static final SubLString $str170$Found_it_ = makeString("Found it.");

    private static final SubLString $str171$__Postponing__S_because__S_is_not = makeString("~&Postponing ~S because ~S is not yet in the tree.~%");

    private static final SubLSymbol $sym172$_COL = makeSymbol("?COL");



    private static final SubLList $list174 = list(makeSymbol("?PRED"), makeSymbol("?N"));

    private static final SubLList $list175 = list(reader_make_constant_shell("suggestionIsaClassOrderedBy"), makeSymbol("?COL"), makeSymbol("?PRED"), makeSymbol("?N"));

    private static final SubLList $list176 = list(makeSymbol("?COL"));

    private static final SubLList $list177 = cons(makeSymbol("?PRED"), makeSymbol("?N"));

    private static final SubLList $list183 = list(reader_make_constant_shell("conflateMembersOfSetWhenGeneratingHierarchicalOrderingsForSpecs"), makeSymbol("?COL"), makeSymbol("?SET"));



    private static final SubLList $list185 = list(reader_make_constant_shell("conflateMembersOfSetWhenGeneratingHierarchicalOrderingsForInstances"), makeSymbol("?COL"), makeSymbol("?SET"));

    private static final SubLSymbol $sym186$_SET = makeSymbol("?SET");

    private static final SubLString $str187$__Filtered_renderers___S__ = makeString("~&Filtered renderers: ~S~%");

    private static final SubLSymbol $use_tva_for_suggestionsP$ = makeSymbol("*USE-TVA-FOR-SUGGESTIONS?*");

    private static final SubLList $list191 = list(makeKeyword("NOT"), makeKeyword("REMOVAL-TVA-UNIFY"));

    private static final SubLList $list192 = cons(makeSymbol("VARIABLE"), makeSymbol("VALUE"));

    private static final SubLList $list193 = list(cons(makeSymbol("?TRUTH"), makeString("Yes")));

    private static final SubLString $$$_ = makeString(" ");

    private static final SubLString $str195$_ = makeString("-");

    private static final SubLSymbol $kw198$CONDITIONAL_SENTENCE_ = makeKeyword("CONDITIONAL-SENTENCE?");

    private static final SubLList $list199 = list(makeSymbol("*THE-CYCLIST*"));

    private static final SubLSymbol GKE_START_CONTINUABLE_QUERY = makeSymbol("GKE-START-CONTINUABLE-QUERY");

    private static final SubLList $list201 = list(makeSymbol("SENTENCE"), makeSymbol("MT"), makeSymbol("&OPTIONAL"), makeSymbol("PROPERTIES"));

    private static final SubLString $str202$Setup_a_query__and_immediately_re = makeString("Setup a query, and immediately return the query identifiers.  A separate java\n   thread will start up the query and check up on it for new results.");

    static private final SubLList $list203 = list(list(makeSymbol("SENTENCE"), makeSymbol("EL-FORMULA-P")), list(makeSymbol("MT"), makeSymbol("POSSIBLY-MT-P")), list(makeSymbol("PROPERTIES"), makeSymbol("QUERY-PROPERTIES-P")));

    private static final SubLString $str207$Error_with_query___A__ = makeString("Error with query: ~A~%");

    private static final SubLSymbol GKE_CONTINUE_QUERY = makeSymbol("GKE-CONTINUE-QUERY");

    private static final SubLList $list209 = list(makeSymbol("PROBLEM-STORE-ID"), makeSymbol("INFERENCE-ID"), makeSymbol("PROPERTIES"), makeSymbol("&OPTIONAL"), makeSymbol("SPECIAL-STATE"));

    private static final SubLString $str210$Continue_an_existing_query__ident = makeString("Continue an existing query (identified by PROBLEM-STORE-ID and INFERENCE-ID), \n   using PROPERTIES and immediately return the query identifiers.  A separate thread\n   will be started to keep track of the results and provide them to any other tools \n   (e.g. the Query Library) that need them.");

    private static final SubLList $list211 = list(list(makeSymbol("PROBLEM-STORE-ID"), makeSymbol("INTEGERP")), list(makeSymbol("INFERENCE-ID"), makeSymbol("INTEGERP")), list(makeSymbol("PROPERTIES"), makeSymbol("LISTP")));

    private static final SubLString $str212$gke_query_thread__A__A = makeString("gke query thread ~A ~A");

    private static final SubLSymbol GKE_RUN_INFERENCE = makeSymbol("GKE-RUN-INFERENCE");

    private static final SubLString $str214$results_daemon__A__A = makeString("results daemon ~A ~A");

    private static final SubLSymbol RESULTS_DAEMON = makeSymbol("RESULTS-DAEMON");

    private static final SubLSymbol $IGNORE_ERRORS_TARGET = makeKeyword("IGNORE-ERRORS-TARGET");

    private static final SubLSymbol IGNORE_ERRORS_HANDLER = makeSymbol("IGNORE-ERRORS-HANDLER", "SUBLISP");

    private static final SubLList $list220 = list(makeKeyword("RUNNING"), makeKeyword("NEW"), makeKeyword("PREPARED"), makeKeyword("READY"));

    private static final SubLSymbol $MAX_TRANSFORMATION_DEPTH = makeKeyword("MAX-TRANSFORMATION-DEPTH");

    private static final SubLSymbol SPECIAL_VARIABLE_STATE_P = makeSymbol("SPECIAL-VARIABLE-STATE-P");

    private static final SubLSymbol GKE_GET_ONE_INFERENCE_RESULT = makeSymbol("GKE-GET-ONE-INFERENCE-RESULT");

    private static final SubLList $list225 = list(makeSymbol("PROBLEM-STORE-ID"), makeSymbol("INFERENCE-ID"));

    private static final SubLString $$$Get_one_inference_result = makeString("Get one inference result");

    private static final SubLList $list227 = list(list(makeSymbol("PROBLEM-STORE-ID"), makeSymbol("INTEGERP")), list(makeSymbol("INFERENCE-ID"), makeSymbol("INTEGERP")));

    private static final SubLSymbol ID_OF_VALID_PROBLEM_STORE_P = makeSymbol("ID-OF-VALID-PROBLEM-STORE-P");

    private static final SubLSymbol GKE_GET_INFERENCE_RESULTS = makeSymbol("GKE-GET-INFERENCE-RESULTS");

    private static final SubLString $str231$get_all_the_inference_results_so_ = makeString("get all the inference results so far.\n@return LISTP of LISTP of triples of the form\n  - string-paraphrase of EL variable\n  - javalist-paraphrase of the variable\'s value\n  - CycL term to which the variable is bound\none list of triples for each set of bindings for the specified inference.");

    private static final SubLList $list232 = list(list(makeSymbol("PROBLEM-STORE-ID"), makeSymbol("ID-OF-VALID-PROBLEM-STORE-P")), list(makeSymbol("INFERENCE-ID"), makeSymbol("INTEGERP")));

    private static final SubLList $list233 = list(makeKeyword("SUSPENDED"), $DEAD, makeKeyword("TAUTOLOGY"), makeKeyword("CONTRADICTION"));

    private static final SubLSymbol $sym234$GKE_INFERENCE_COMPLETE_ = makeSymbol("GKE-INFERENCE-COMPLETE?");

    private static final SubLString $str235$ret_t_iff_inference_is_suspended_ = makeString("ret t iff inference is suspended || dead || tautology || contradiction\n&& queue is empty && daemon is :completed");

    private static final SubLSymbol GKE_GET_INFERENCE_STATUS = makeSymbol("GKE-GET-INFERENCE-STATUS");

    private static final SubLString $$$get_the_status_of_the_inference = makeString("get the status of the inference");

    private static final SubLSymbol GKE_GET_INFERENCE_SUSPEND_STATUS = makeSymbol("GKE-GET-INFERENCE-SUSPEND-STATUS");

    private static final SubLString $str239$get_the_suspend_status_of_the_inf = makeString("get the suspend-status of the inference");

    private static final SubLSymbol NULL_OR_INTEGERP = makeSymbol("NULL-OR-INTEGERP");

    private static final SubLSymbol GKE_STOP_CONTINUABLE_QUERY = makeSymbol("GKE-STOP-CONTINUABLE-QUERY");

    private static final SubLList $list242 = list(makeSymbol("PROBLEM-STORE-ID"), makeSymbol("INFERENCE-ID"), makeSymbol("&OPTIONAL"), makeSymbol("PATIENCE"));

    private static final SubLString $str243$Find_and_stop_the_inference_ = makeString("Find and stop the inference.");

    private static final SubLList $list244 = list(list(makeSymbol("PROBLEM-STORE-ID"), makeSymbol("INTEGERP")), list(makeSymbol("INFERENCE-ID"), makeSymbol("INTEGERP")), list(makeSymbol("PATIENCE"), makeSymbol("NULL-OR-INTEGERP")));

    private static final SubLSymbol GKE_RELEASE_INFERENCE_RESOURCES = makeSymbol("GKE-RELEASE-INFERENCE-RESOURCES");

    private static final SubLString $str246$Destroy_problem_store_and_inferen = makeString("Destroy problem store and inference");

    private static final SubLSymbol GKE_TEST_QUERIES = makeSymbol("GKE-TEST-QUERIES");

    private static final SubLSymbol $sym248$_SENT = makeSymbol("?SENT");

    private static final SubLSymbol $sym249$_QUERY = makeSymbol("?QUERY");

    private static final SubLList $list250 = list(list(reader_make_constant_shell("sentenceParameterValueInSpecification"), makeSymbol("?SENT"), list(reader_make_constant_shell("TestQueryFn"), makeSymbol("?QUERY"))));



    private static final SubLString $str252$GKE_Query_Sentence_Literal_Manipu = makeString("GKE Query Sentence Literal Manipulation");

    private static final SubLString $$$GKE_Main_Test_Suite = makeString("GKE Main Test Suite");

    static private final SubLList $list254 = list(makeString("GKE Query Sentence Literal Manipulation"));

    private static final SubLSymbol TEST_CANDIDATE_REPLACEMENTS = makeSymbol("TEST-CANDIDATE-REPLACEMENTS");

    private static final SubLSymbol $sym257$CANDIDATE_REPLACEMENTS_EQUAL_ = makeSymbol("CANDIDATE-REPLACEMENTS-EQUAL?");

    private static final SubLList $list260 = list(makeSymbol("GKE-TEST-CASE-TABLES"));

    private static final SubLList $list264 = list(list(list(list(reader_make_constant_shell("dataForValveOfEventRecordsStenosisSeverity"), makeSymbol("?CARDIAC-VALVE-DATA"), makeSymbol("?MEDICALLY-RELATED-EVENT"), list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), reader_make_constant_shell("CCF-CAE-QueryMt")), list(list(new SubLObject[]{ list(THREE_INTEGER), reader_make_constant_shell("CardiacValveStenosis_unknown"), reader_make_constant_shell("CardiacValveStenosis_critical"), reader_make_constant_shell("CardiacValveStenosis_trivial"), reader_make_constant_shell("CardiacValveStenosis_present"), reader_make_constant_shell("None-CardiacValveStenosis"), list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")), list(reader_make_constant_shell("SeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")), reader_make_constant_shell("ModerateToModerate-SevereToSevereCardiacValveStenosis"), list(reader_make_constant_shell("MildPhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")), list(reader_make_constant_shell("MildToModeratePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")), list(reader_make_constant_shell("ModeratePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")), reader_make_constant_shell("Moderate-SevereToSevereCardiacValveStenosis") }))));

    private static final SubLSymbol $sym266$_EXIT = makeSymbol("%EXIT");

    private static final SubLSymbol SORT_RESULT = makeSymbol("SORT-RESULT");

    private static final SubLSymbol REMOVE_JAVALIST_DETAIL = makeSymbol("REMOVE-JAVALIST-DETAIL");

    private static final SubLList $list269 = cons(makeSymbol("ARG-POSITION"), makeSymbol("GROVES"));

    private static final SubLSymbol SORT_GROVE = makeSymbol("SORT-GROVE");

    private static final SubLSymbol $sym271$TERM___WITH_CONSTANT_BY_NAME = makeSymbol("TERM-<-WITH-CONSTANT-BY-NAME");

    private static final SubLSymbol SORT_TREE = makeSymbol("SORT-TREE");

    private static final SubLList $list274 = cons(makeSymbol("ROOT"), makeSymbol("SUBTREES"));

    private static final SubLList $list275 = listS(makeSymbol("ARG-POSITION"), makeSymbol("FLAT-LIST"), makeSymbol("GROVES"));

    static private final SubLList $list276 = list(makeSymbol("JAVALIST"), makeSymbol("TERM"));

    private static final SubLSymbol TEST_CANDIDATE_REPLACEMENT_RENDERERS_FOR_VARS = makeSymbol("TEST-CANDIDATE-REPLACEMENT-RENDERERS-FOR-VARS");

    private static final SubLList $list278 = list(list(list(list(reader_make_constant_shell("medicalTestRelevantToPhysiologicalConditionType"), reader_make_constant_shell("DiastolicBloodPressureTest"), reader_make_constant_shell("RenalDisease")), list(reader_make_constant_shell("medicalTestRelevantToPhysiologicalConditionType"), makeSymbol("?X"), reader_make_constant_shell("RenalDisease")), list(reader_make_constant_shell("DocumentReaderFollowupsForTaskMtFn"), reader_make_constant_shell("GenericMedicalResearchTask-Allotment"))), T));

    private static final SubLSymbol TEST_CANDIDATE_REPLACEMENT_RENDERERS_STUMPS = makeSymbol("TEST-CANDIDATE-REPLACEMENT-RENDERERS-STUMPS");

    private static final SubLList $list280 = list(list(list(list(reader_make_constant_shell("dataForValveOfEventRecordsStenosisSeverity"), makeSymbol("?CARDIAC-VALVE-DATA"), makeSymbol("?MEDICALLY-RELATED-EVENT"), list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), reader_make_constant_shell("MedicalResearchCAEGuidanceMt")), list(list(list(list(THREE_INTEGER), list(new SubLObject[]{ list(reader_make_constant_shell("CardiacValveStenosis_critical")), list(reader_make_constant_shell("CardiacValveStenosis_present")), list(reader_make_constant_shell("CardiacValveStenosis_trivial")), list(reader_make_constant_shell("CardiacValveStenosis_unknown")), list(reader_make_constant_shell("Moderate-SevereToSevereCardiacValveStenosis"), list(list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("SeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")))), list(reader_make_constant_shell("ModerateToModerate-SevereToSevereCardiacValveStenosis"), list(list(reader_make_constant_shell("ModeratePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("SeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")))), list(reader_make_constant_shell("None-CardiacValveStenosis")), list(list(reader_make_constant_shell("MildPhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("MildToModeratePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))) }))), list(list(list(THREE_INTEGER), list(list(reader_make_constant_shell("Moderate-SevereToSevereCardiacValveStenosis"), list(list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("SeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")))), list(reader_make_constant_shell("ModerateToModerate-SevereToSevereCardiacValveStenosis"), list(list(reader_make_constant_shell("ModeratePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("SeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))))))))));

    private static final SubLSymbol TEST_CANDIDATE_REPLACEMENT_RENDERERS = makeSymbol("TEST-CANDIDATE-REPLACEMENT-RENDERERS");

    private static final SubLObject $list282 = gke_main._constant_282_initializer();

    private static final SubLSymbol NARTIFY_AND_SUBSTITUTE_TERM_INTO_SENTENCE = makeSymbol("NARTIFY-AND-SUBSTITUTE-TERM-INTO-SENTENCE");

    private static final SubLList $list284 = list(list(list(reader_make_constant_shell("Italy"), list(reader_make_constant_shell("performedBy"), makeSymbol("?ACT"), list(reader_make_constant_shell("GovernmentFn"), reader_make_constant_shell("France"))), list(TWO_INTEGER, ONE_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), NIL, NIL, NIL), list(reader_make_constant_shell("performedBy"), makeSymbol("?ACT"), list(reader_make_constant_shell("GovernmentFn"), reader_make_constant_shell("Italy")))));

    private static final SubLObject $list285 = gke_main._constant_285_initializer();

    // Definitions
    /**
     * Retrieve gke options
     */
    @LispMethod(comment = "Retrieve gke options")
    public static final SubLObject get_gke_arg_options_alt(SubLObject aterm, SubLObject arg_num, SubLObject options_type, SubLObject cycl_formula, SubLObject generation_mt, SubLObject domain_mt, SubLObject depth, SubLObject orig_term) {
        if (orig_term == UNPROVIDED) {
            orig_term = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            generation_mt = hlmt_czer.canonicalize_hlmt(generation_mt);
            domain_mt = hlmt_czer.canonicalize_hlmt(domain_mt);
            {
                SubLObject arg = narts_high.nart_substitute(aterm);
                SubLObject options = NIL;
                SubLObject nl_values = NIL;
                SubLObject validity_list = NIL;
                SubLObject substitutions = NIL;
                SubLObject already_resourcing_p = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.getDynamicValue(thread);
                {
                    SubLObject _prev_bind_0 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_resource_limit(already_resourcing_p, SIX_INTEGER), thread);
                        sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(sbhl_marking_vars.possibly_new_marking_resource(already_resourcing_p), thread);
                        sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                        if (NIL != fort_types_interface.isa_relationP(arg, UNPROVIDED)) {
                            options = com.cyc.cycjava.cycl.gke_main.get_arg_option_isa_relation(arg, arg_num, cycl_formula, domain_mt, depth, options_type);
                        } else {
                            if (NIL != fort_types_interface.isa_collectionP(arg, UNPROVIDED)) {
                                options = com.cyc.cycjava.cycl.gke_main.get_arg_option_collection(arg, arg_num, cycl_formula, domain_mt, depth, orig_term, options_type);
                            } else {
                                if (NIL != kb_accessors.individualP(arg)) {
                                    options = com.cyc.cycjava.cycl.gke_main.get_arg_option_individual(arg, arg_num, cycl_formula, domain_mt, depth, options_type);
                                } else {
                                    format(T, $str_alt1$Got_unknown_arg_type_for___A__, arg);
                                }
                            }
                        }
                        {
                            SubLObject datum_evaluated_var = com.cyc.cycjava.cycl.gke_main.get_gke_combine_with_is_valid_substitution(options, arg_num, cycl_formula, domain_mt);
                            substitutions = datum_evaluated_var.first();
                            validity_list = cadr(datum_evaluated_var);
                        }
                        {
                            SubLObject validity_dictionary = dictionary_utilities.add_values_from_lists_to_dictionary(substitutions, validity_list, UNPROVIDED);
                            {
                                SubLObject _prev_bind_0_1 = pph_vars.$pph_language_mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_2 = pph_vars.$pph_domain_mt$.currentBinding(thread);
                                try {
                                    pph_vars.$pph_language_mt$.bind(NIL != generation_mt ? ((SubLObject) (pph_utilities.pph_canonicalize_hlmt(generation_mt))) : pph_vars.$pph_language_mt$.getDynamicValue(thread), thread);
                                    pph_vars.$pph_domain_mt$.bind(NIL != domain_mt ? ((SubLObject) (pph_utilities.pph_canonicalize_hlmt(domain_mt))) : pph_vars.$pph_domain_mt$.getDynamicValue(thread), thread);
                                    if (options_type == $PARENTS) {
                                        nl_values = com.cyc.cycjava.cycl.gke_main.gke_process_results(NIL, substitutions, UNPROVIDED, UNPROVIDED);
                                    } else {
                                        nl_values = com.cyc.cycjava.cycl.gke_main.gke_process_results(T, substitutions, UNPROVIDED, UNPROVIDED);
                                    }
                                } finally {
                                    pph_vars.$pph_domain_mt$.rebind(_prev_bind_1_2, thread);
                                    pph_vars.$pph_language_mt$.rebind(_prev_bind_0_1, thread);
                                }
                            }
                            if (NIL == list_utilities.same_length_p(nl_values, validity_list)) {
                                Errors.warn($str_alt3$Natural_language_processing_has_d, length(nl_values), length(validity_list));
                            }
                            validity_list = NIL;
                            {
                                SubLObject cdolist_list_var = nl_values;
                                SubLObject nl_value = NIL;
                                for (nl_value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , nl_value = cdolist_list_var.first()) {
                                    validity_list = cons(dictionary.dictionary_lookup(validity_dictionary, second(nl_value), UNPROVIDED), validity_list);
                                }
                            }
                            validity_list = nreverse(validity_list);
                        }
                    } finally {
                        sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2, thread);
                        sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_1, thread);
                        sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_0, thread);
                    }
                }
                return list(nl_values, validity_list);
            }
        }
    }

    // Definitions
    /**
     * Retrieve gke options
     */
    @LispMethod(comment = "Retrieve gke options")
    public static SubLObject get_gke_arg_options(final SubLObject aterm, final SubLObject arg_num, final SubLObject options_type, final SubLObject cycl_formula, SubLObject generation_mt, SubLObject domain_mt, final SubLObject depth, SubLObject orig_term) {
        if (orig_term == UNPROVIDED) {
            orig_term = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        generation_mt = hlmt_czer.canonicalize_hlmt(generation_mt);
        domain_mt = hlmt_czer.canonicalize_hlmt(domain_mt);
        final SubLObject arg = narts_high.nart_substitute(aterm);
        SubLObject options = NIL;
        SubLObject nl_values = NIL;
        SubLObject validity_list = NIL;
        SubLObject substitutions = NIL;
        final SubLObject already_resourcing_p = $resourcing_sbhl_marking_spaces_p$.getDynamicValue(thread);
        final SubLObject _prev_bind_0 = $resourced_sbhl_marking_space_limit$.currentBinding(thread);
        final SubLObject _prev_bind_2 = $resourced_sbhl_marking_spaces$.currentBinding(thread);
        final SubLObject _prev_bind_3 = $resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
        try {
            $resourced_sbhl_marking_space_limit$.bind(determine_resource_limit(already_resourcing_p, SIX_INTEGER), thread);
            $resourced_sbhl_marking_spaces$.bind(possibly_new_marking_resource(already_resourcing_p), thread);
            $resourcing_sbhl_marking_spaces_p$.bind(T, thread);
            if (NIL != fort_types_interface.isa_relationP(arg, UNPROVIDED)) {
                options = gke_main.get_arg_option_isa_relation(arg, arg_num, cycl_formula, domain_mt, depth, options_type);
            } else
                if (NIL != fort_types_interface.isa_collectionP(arg, UNPROVIDED)) {
                    options = gke_main.get_arg_option_collection(arg, arg_num, cycl_formula, domain_mt, depth, orig_term, options_type);
                } else
                    if (NIL != kb_accessors.individualP(arg)) {
                        options = gke_main.get_arg_option_individual(arg, arg_num, cycl_formula, domain_mt, depth, options_type);
                    } else {
                        format(T, gke_main.$str1$Got_unknown_arg_type_for___A__, arg);
                    }


            final SubLObject datum_evaluated_var = gke_main.get_gke_combine_with_is_valid_substitution(options, arg_num, cycl_formula, domain_mt);
            substitutions = datum_evaluated_var.first();
            validity_list = cadr(datum_evaluated_var);
            final SubLObject validity_dictionary = dictionary_utilities.add_values_from_lists_to_dictionary(substitutions, validity_list, UNPROVIDED);
            final SubLObject _prev_bind_0_$1 = pph_vars.$pph_language_mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$2 = pph_vars.$pph_domain_mt$.currentBinding(thread);
            try {
                pph_vars.$pph_language_mt$.bind(NIL != generation_mt ? pph_utilities.pph_canonicalize_hlmt(generation_mt) : pph_vars.$pph_language_mt$.getDynamicValue(thread), thread);
                pph_vars.$pph_domain_mt$.bind(NIL != domain_mt ? pph_utilities.pph_canonicalize_hlmt(domain_mt) : pph_vars.$pph_domain_mt$.getDynamicValue(thread), thread);
                if (options_type == $PARENTS) {
                    nl_values = gke_main.gke_process_results(NIL, substitutions, UNPROVIDED, UNPROVIDED);
                } else {
                    nl_values = gke_main.gke_process_results(T, substitutions, UNPROVIDED, UNPROVIDED);
                }
            } finally {
                pph_vars.$pph_domain_mt$.rebind(_prev_bind_1_$2, thread);
                pph_vars.$pph_language_mt$.rebind(_prev_bind_0_$1, thread);
            }
            if (NIL == list_utilities.same_length_p(nl_values, validity_list)) {
                Errors.warn(gke_main.$str3$Natural_language_processing_has_d, length(nl_values), length(validity_list));
            }
            validity_list = NIL;
            SubLObject cdolist_list_var = nl_values;
            SubLObject nl_value = NIL;
            nl_value = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                validity_list = cons(dictionary.dictionary_lookup(validity_dictionary, second(nl_value), UNPROVIDED), validity_list);
                cdolist_list_var = cdolist_list_var.rest();
                nl_value = cdolist_list_var.first();
            } 
            validity_list = nreverse(validity_list);
        } finally {
            $resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_3, thread);
            $resourced_sbhl_marking_spaces$.rebind(_prev_bind_2, thread);
            $resourced_sbhl_marking_space_limit$.rebind(_prev_bind_0, thread);
        }
        return list(nl_values, validity_list);
    }

    public static final SubLObject get_arg_option_isa_relation_alt(SubLObject arg, SubLObject arg_num, SubLObject cycl_formula, SubLObject domain_mt, SubLObject depth, SubLObject options_type) {
        if (options_type == $CHILDREN) {
            return com.cyc.cycjava.cycl.gke_main.get_gke_spec_preds(arg, arg_num, cycl_formula, domain_mt, depth);
        } else {
            if (options_type == $SIBLINGS) {
                return com.cyc.cycjava.cycl.gke_main.get_gke_instance_siblings(arg, arg_num, cycl_formula, domain_mt, depth);
            } else {
                if (options_type == $PARENTS) {
                    return com.cyc.cycjava.cycl.gke_main.get_gke_genl_preds(arg, arg_num, cycl_formula, domain_mt, depth);
                }
            }
        }
        return NIL;
    }

    public static SubLObject get_arg_option_isa_relation(final SubLObject arg, final SubLObject arg_num, final SubLObject cycl_formula, final SubLObject domain_mt, final SubLObject depth, final SubLObject options_type) {
        if (options_type == $CHILDREN) {
            return gke_main.get_gke_spec_preds(arg, arg_num, cycl_formula, domain_mt, depth);
        }
        if (options_type == $SIBLINGS) {
            return gke_main.get_gke_instance_siblings(arg, arg_num, cycl_formula, domain_mt, depth);
        }
        if (options_type == $PARENTS) {
            return gke_main.get_gke_genl_preds(arg, arg_num, cycl_formula, domain_mt, depth);
        }
        return NIL;
    }

    public static final SubLObject get_arg_option_collection_alt(SubLObject arg, SubLObject arg_num, SubLObject cycl_formula, SubLObject domain_mt, SubLObject depth, SubLObject orig_term, SubLObject options_type) {
        if (options_type == $CHILDREN) {
            return com.cyc.cycjava.cycl.gke_main.get_gke_specs(arg, arg_num, cycl_formula, domain_mt, depth, orig_term);
        } else {
            if (options_type == $SIBLINGS) {
                return com.cyc.cycjava.cycl.gke_main.get_gke_collection_siblings(arg, arg_num, cycl_formula, domain_mt, depth);
            } else {
                if (options_type == $PARENTS) {
                    return com.cyc.cycjava.cycl.gke_main.get_gke_genls(arg, arg_num, cycl_formula, domain_mt, depth);
                }
            }
        }
        return NIL;
    }

    public static SubLObject get_arg_option_collection(final SubLObject arg, final SubLObject arg_num, final SubLObject cycl_formula, final SubLObject domain_mt, final SubLObject depth, final SubLObject orig_term, final SubLObject options_type) {
        if (options_type == $CHILDREN) {
            return gke_main.get_gke_specs(arg, arg_num, cycl_formula, domain_mt, depth, orig_term);
        }
        if (options_type == $SIBLINGS) {
            return gke_main.get_gke_collection_siblings(arg, arg_num, cycl_formula, domain_mt, depth);
        }
        if (options_type == $PARENTS) {
            return gke_main.get_gke_genls(arg, arg_num, cycl_formula, domain_mt, depth);
        }
        return NIL;
    }

    public static final SubLObject get_arg_option_individual_alt(SubLObject arg, SubLObject arg_num, SubLObject cycl_formula, SubLObject domain_mt, SubLObject depth, SubLObject options_type) {
        if (options_type == $CHILDREN) {
            return NIL;
        } else {
            if (options_type == $SIBLINGS) {
                return com.cyc.cycjava.cycl.gke_main.get_gke_instance_siblings(arg, arg_num, cycl_formula, domain_mt, depth);
            } else {
                if (options_type == $PARENTS) {
                    return com.cyc.cycjava.cycl.gke_main.get_gke_isas(arg, arg_num, cycl_formula, domain_mt, depth);
                }
            }
        }
        return NIL;
    }

    public static SubLObject get_arg_option_individual(final SubLObject arg, final SubLObject arg_num, final SubLObject cycl_formula, final SubLObject domain_mt, final SubLObject depth, final SubLObject options_type) {
        if (options_type == $CHILDREN) {
            return NIL;
        }
        if (options_type == $SIBLINGS) {
            return gke_main.get_gke_instance_siblings(arg, arg_num, cycl_formula, domain_mt, depth);
        }
        if (options_type == $PARENTS) {
            return gke_main.get_gke_isas(arg, arg_num, cycl_formula, domain_mt, depth);
        }
        return NIL;
    }

    public static final SubLObject get_gke_expanded_items_alt(SubLObject string, SubLObject domain_mt, SubLObject max_count) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt_relevance_macros.determine_inference_mt_relevance_el_spec(domain_mt));
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                        result = list_utilities.first_n(max_count, cb_frames.terms_for_browsing(string, UNPROVIDED, UNPROVIDED));
                        result = pph_main.generate_disambiguation_phrases(result, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    public static SubLObject get_gke_expanded_items(final SubLObject string, final SubLObject domain_mt, final SubLObject max_count) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt_relevance_macros.determine_inference_mt_relevance_el_spec(domain_mt));
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            result = list_utilities.first_n(max_count, cb_frames.terms_for_browsing(string, UNPROVIDED, UNPROVIDED));
            result = pph_main.generate_disambiguation_phrases(result, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    public static final SubLObject get_gke_combine_with_is_valid_substitution_alt(SubLObject list_of_substitutes, SubLObject term_position, SubLObject original_expression, SubLObject domain_mt) {
        if (domain_mt == UNPROVIDED) {
            domain_mt = NIL;
        }
        {
            SubLObject valid_substitutions = com.cyc.cycjava.cycl.gke_main.terms_pass_constraints(list_of_substitutes, term_position, original_expression, hlmt_czer.canonicalize_hlmt(domain_mt));
            return list(list_of_substitutes, valid_substitutions);
        }
    }

    public static SubLObject get_gke_combine_with_is_valid_substitution(final SubLObject list_of_substitutes, final SubLObject term_position, final SubLObject original_expression, SubLObject domain_mt) {
        if (domain_mt == UNPROVIDED) {
            domain_mt = NIL;
        }
        final SubLObject valid_substitutions = gke_main.terms_pass_constraints(list_of_substitutes, term_position, original_expression, hlmt_czer.canonicalize_hlmt(domain_mt));
        return list(list_of_substitutes, valid_substitutions);
    }

    public static final SubLObject get_gke_cycl_formulas_for_nl_phrase_alt(SubLObject nl_phrase, SubLObject parsing_mt, SubLObject domain_mt, SubLObject timeout) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject parsing_timed_outP = NIL;
                SubLObject result = NIL;
                SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt_relevance_macros.determine_inference_mt_relevance_el_spec(domain_mt));
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                    SubLObject _prev_bind_3 = $within_assert$.currentBinding(thread);
                    SubLObject _prev_bind_4 = wff_utilities.$check_arg_typesP$.currentBinding(thread);
                    SubLObject _prev_bind_5 = at_vars.$at_check_arg_typesP$.currentBinding(thread);
                    SubLObject _prev_bind_6 = wff_utilities.$check_wff_semanticsP$.currentBinding(thread);
                    SubLObject _prev_bind_7 = wff_utilities.$check_wff_coherenceP$.currentBinding(thread);
                    SubLObject _prev_bind_8 = wff_utilities.$check_var_typesP$.currentBinding(thread);
                    SubLObject _prev_bind_9 = czer_vars.$simplify_literalP$.currentBinding(thread);
                    SubLObject _prev_bind_10 = at_vars.$at_check_relator_constraintsP$.currentBinding(thread);
                    SubLObject _prev_bind_11 = at_vars.$at_check_arg_formatP$.currentBinding(thread);
                    SubLObject _prev_bind_12 = wff_vars.$validate_constantsP$.currentBinding(thread);
                    SubLObject _prev_bind_13 = system_parameters.$suspend_sbhl_type_checkingP$.currentBinding(thread);
                    SubLObject _prev_bind_14 = parsing_macros.$parsing_timeout_time_check_count$.currentBinding(thread);
                    SubLObject _prev_bind_15 = parsing_macros.$parsing_timeout_time$.currentBinding(thread);
                    SubLObject _prev_bind_16 = parsing_macros.$parsing_timeout_reachedP$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                        $within_assert$.bind(NIL, thread);
                        wff_utilities.$check_arg_typesP$.bind(NIL, thread);
                        at_vars.$at_check_arg_typesP$.bind(NIL, thread);
                        wff_utilities.$check_wff_semanticsP$.bind(NIL, thread);
                        wff_utilities.$check_wff_coherenceP$.bind(NIL, thread);
                        wff_utilities.$check_var_typesP$.bind(NIL, thread);
                        czer_vars.$simplify_literalP$.bind(NIL, thread);
                        at_vars.$at_check_relator_constraintsP$.bind(NIL, thread);
                        at_vars.$at_check_arg_formatP$.bind(NIL, thread);
                        wff_vars.$validate_constantsP$.bind(NIL, thread);
                        system_parameters.$suspend_sbhl_type_checkingP$.bind(T, thread);
                        parsing_macros.$parsing_timeout_time_check_count$.bind(ZERO_INTEGER, thread);
                        parsing_macros.$parsing_timeout_time$.bind(parsing_macros.parsing_compute_timeout_time(timeout), thread);
                        parsing_macros.$parsing_timeout_reachedP$.bind(parsing_macros.$parsing_timeout_reachedP$.getDynamicValue(thread), thread);
                        parsing_macros.$parsing_timeout_reachedP$.setDynamicValue(parsing_macros.parsing_timeout_time_reachedP(), thread);
                        if (NIL == parsing_macros.$parsing_timeout_reachedP$.getDynamicValue(thread)) {
                            {
                                SubLObject _prev_bind_0_3 = parsing_vars.$npp_use_nl_tagsP$.currentBinding(thread);
                                SubLObject _prev_bind_1_4 = abnormal.$abnormality_checking_enabled$.currentBinding(thread);
                                SubLObject _prev_bind_2_5 = lexicon_vars.$exclude_vulgaritiesP$.currentBinding(thread);
                                try {
                                    parsing_vars.$npp_use_nl_tagsP$.bind(NIL, thread);
                                    abnormal.$abnormality_checking_enabled$.bind(NIL, thread);
                                    lexicon_vars.$exclude_vulgaritiesP$.bind(T, thread);
                                    {
                                        SubLObject v_related_concepts = pph_main.generate_disambiguation_phrases(psp_main.ps_get_cycls_for_phrase(nl_phrase, $ANY, $ANY, NIL, psp_lexicon.get_default_psp_lexicon(hlmt_czer.canonicalize_hlmt(parsing_mt), UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        result = v_related_concepts;
                                    }
                                } finally {
                                    lexicon_vars.$exclude_vulgaritiesP$.rebind(_prev_bind_2_5, thread);
                                    abnormal.$abnormality_checking_enabled$.rebind(_prev_bind_1_4, thread);
                                    parsing_vars.$npp_use_nl_tagsP$.rebind(_prev_bind_0_3, thread);
                                }
                            }
                        }
                        parsing_timed_outP = parsing_macros.parsing_timeout_time_reachedP();
                    } finally {
                        parsing_macros.$parsing_timeout_reachedP$.rebind(_prev_bind_16, thread);
                        parsing_macros.$parsing_timeout_time$.rebind(_prev_bind_15, thread);
                        parsing_macros.$parsing_timeout_time_check_count$.rebind(_prev_bind_14, thread);
                        system_parameters.$suspend_sbhl_type_checkingP$.rebind(_prev_bind_13, thread);
                        wff_vars.$validate_constantsP$.rebind(_prev_bind_12, thread);
                        at_vars.$at_check_arg_formatP$.rebind(_prev_bind_11, thread);
                        at_vars.$at_check_relator_constraintsP$.rebind(_prev_bind_10, thread);
                        czer_vars.$simplify_literalP$.rebind(_prev_bind_9, thread);
                        wff_utilities.$check_var_typesP$.rebind(_prev_bind_8, thread);
                        wff_utilities.$check_wff_coherenceP$.rebind(_prev_bind_7, thread);
                        wff_utilities.$check_wff_semanticsP$.rebind(_prev_bind_6, thread);
                        at_vars.$at_check_arg_typesP$.rebind(_prev_bind_5, thread);
                        wff_utilities.$check_arg_typesP$.rebind(_prev_bind_4, thread);
                        $within_assert$.rebind(_prev_bind_3, thread);
                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    public static SubLObject get_gke_cycl_formulas_for_nl_phrase(final SubLObject nl_phrase, final SubLObject parsing_mt, final SubLObject domain_mt, final SubLObject timeout) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject parsing_timed_outP = NIL;
        SubLObject result = NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt_relevance_macros.determine_inference_mt_relevance_el_spec(domain_mt));
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        final SubLObject _prev_bind_4 = $within_assert$.currentBinding(thread);
        final SubLObject _prev_bind_5 = wff_utilities.$check_arg_typesP$.currentBinding(thread);
        final SubLObject _prev_bind_6 = at_vars.$at_check_arg_typesP$.currentBinding(thread);
        final SubLObject _prev_bind_7 = wff_utilities.$check_wff_semanticsP$.currentBinding(thread);
        final SubLObject _prev_bind_8 = wff_utilities.$check_wff_coherenceP$.currentBinding(thread);
        final SubLObject _prev_bind_9 = wff_utilities.$check_var_typesP$.currentBinding(thread);
        final SubLObject _prev_bind_10 = czer_vars.$simplify_literalP$.currentBinding(thread);
        final SubLObject _prev_bind_11 = at_vars.$at_check_relator_constraintsP$.currentBinding(thread);
        final SubLObject _prev_bind_12 = at_vars.$at_check_arg_formatP$.currentBinding(thread);
        final SubLObject _prev_bind_13 = wff_vars.$validate_constantsP$.currentBinding(thread);
        final SubLObject _prev_bind_14 = system_parameters.$suspend_sbhl_type_checkingP$.currentBinding(thread);
        final SubLObject _prev_bind_15 = parsing_macros.$parsing_timeout_time_check_count$.currentBinding(thread);
        final SubLObject _prev_bind_16 = parsing_macros.$parsing_timeout_time$.currentBinding(thread);
        final SubLObject _prev_bind_17 = parsing_macros.$parsing_timeout_reachedP$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            $within_assert$.bind(NIL, thread);
            wff_utilities.$check_arg_typesP$.bind(NIL, thread);
            at_vars.$at_check_arg_typesP$.bind(NIL, thread);
            wff_utilities.$check_wff_semanticsP$.bind(NIL, thread);
            wff_utilities.$check_wff_coherenceP$.bind(NIL, thread);
            wff_utilities.$check_var_typesP$.bind(NIL, thread);
            czer_vars.$simplify_literalP$.bind(NIL, thread);
            at_vars.$at_check_relator_constraintsP$.bind(NIL, thread);
            at_vars.$at_check_arg_formatP$.bind(NIL, thread);
            wff_vars.$validate_constantsP$.bind(NIL, thread);
            system_parameters.$suspend_sbhl_type_checkingP$.bind(T, thread);
            parsing_macros.$parsing_timeout_time_check_count$.bind(ZERO_INTEGER, thread);
            parsing_macros.$parsing_timeout_time$.bind(parsing_macros.parsing_compute_timeout_time(timeout), thread);
            parsing_macros.$parsing_timeout_reachedP$.bind(parsing_macros.$parsing_timeout_reachedP$.getDynamicValue(thread), thread);
            parsing_macros.$parsing_timeout_reachedP$.setDynamicValue(parsing_macros.parsing_timeout_time_reachedP(), thread);
            if (NIL == parsing_macros.$parsing_timeout_reachedP$.getDynamicValue(thread)) {
                final SubLObject _prev_bind_0_$3 = parsing_vars.$npp_use_nl_tagsP$.currentBinding(thread);
                final SubLObject _prev_bind_1_$4 = abnormal.$abnormality_checking_enabled$.currentBinding(thread);
                final SubLObject _prev_bind_2_$5 = lexicon_vars.$exclude_vulgaritiesP$.currentBinding(thread);
                try {
                    parsing_vars.$npp_use_nl_tagsP$.bind(NIL, thread);
                    abnormal.$abnormality_checking_enabled$.bind(NIL, thread);
                    lexicon_vars.$exclude_vulgaritiesP$.bind(T, thread);
                    final SubLObject v_related_concepts = result = pph_main.generate_disambiguation_phrases(psp_main.ps_get_cycls_for_phrase(nl_phrase, $ANY, $ANY, NIL, psp_lexicon.get_default_psp_lexicon(hlmt_czer.canonicalize_hlmt(parsing_mt), UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                } finally {
                    lexicon_vars.$exclude_vulgaritiesP$.rebind(_prev_bind_2_$5, thread);
                    abnormal.$abnormality_checking_enabled$.rebind(_prev_bind_1_$4, thread);
                    parsing_vars.$npp_use_nl_tagsP$.rebind(_prev_bind_0_$3, thread);
                }
            }
            parsing_timed_outP = parsing_macros.parsing_timeout_time_reachedP();
        } finally {
            parsing_macros.$parsing_timeout_reachedP$.rebind(_prev_bind_17, thread);
            parsing_macros.$parsing_timeout_time$.rebind(_prev_bind_16, thread);
            parsing_macros.$parsing_timeout_time_check_count$.rebind(_prev_bind_15, thread);
            system_parameters.$suspend_sbhl_type_checkingP$.rebind(_prev_bind_14, thread);
            wff_vars.$validate_constantsP$.rebind(_prev_bind_13, thread);
            at_vars.$at_check_arg_formatP$.rebind(_prev_bind_12, thread);
            at_vars.$at_check_relator_constraintsP$.rebind(_prev_bind_11, thread);
            czer_vars.$simplify_literalP$.rebind(_prev_bind_10, thread);
            wff_utilities.$check_var_typesP$.rebind(_prev_bind_9, thread);
            wff_utilities.$check_wff_coherenceP$.rebind(_prev_bind_8, thread);
            wff_utilities.$check_wff_semanticsP$.rebind(_prev_bind_7, thread);
            at_vars.$at_check_arg_typesP$.rebind(_prev_bind_6, thread);
            wff_utilities.$check_arg_typesP$.rebind(_prev_bind_5, thread);
            $within_assert$.rebind(_prev_bind_4, thread);
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    public static final SubLObject get_gke_quantifiers_alt() {
        return com.cyc.cycjava.cycl.gke_main.gke_process_results(NIL, $list_alt8, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject get_gke_quantifiers() {
        return gke_main.gke_process_results(NIL, gke_main.$list8, UNPROVIDED, UNPROVIDED);
    }

    /**
     * Get the quantifier ranges
     */
    @LispMethod(comment = "Get the quantifier ranges")
    public static final SubLObject get_gke_quantifier_ranges_alt() {
        return com.cyc.cycjava.cycl.gke_main.gke_process_results(NIL, $list_alt9, UNPROVIDED, UNPROVIDED);
    }

    /**
     * Get the quantifier ranges
     */
    @LispMethod(comment = "Get the quantifier ranges")
    public static SubLObject get_gke_quantifier_ranges() {
        return gke_main.gke_process_results(NIL, gke_main.$list9, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject gke_list_item_comparator_alt(SubLObject item_a, SubLObject item_b) {
        return funcall(symbol_function(STRING_LESSP), item_a.first().first(), item_b.first().first());
    }

    public static SubLObject gke_list_item_comparator(final SubLObject item_a, final SubLObject item_b) {
        return funcall(symbol_function(STRING_LESSP), item_a.first().first(), item_b.first().first());
    }

    public static final SubLObject gke_process_results_alt(SubLObject should_sort, SubLObject args, SubLObject generation_mt, SubLObject domain_mt) {
        if (generation_mt == UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (domain_mt == UNPROVIDED) {
            domain_mt = pph_vars.$pph_domain_mt$.getDynamicValue();
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = pph_vars.$pph_language_mt$.currentBinding(thread);
                    SubLObject _prev_bind_1 = pph_vars.$pph_domain_mt$.currentBinding(thread);
                    try {
                        pph_vars.$pph_language_mt$.bind(NIL != generation_mt ? ((SubLObject) (pph_utilities.pph_canonicalize_hlmt(generation_mt))) : pph_vars.$pph_language_mt$.getDynamicValue(thread), thread);
                        pph_vars.$pph_domain_mt$.bind(NIL != domain_mt ? ((SubLObject) (pph_utilities.pph_canonicalize_hlmt(domain_mt))) : pph_vars.$pph_domain_mt$.getDynamicValue(thread), thread);
                        thread.resetMultipleValues();
                        {
                            SubLObject _prev_bind_0_6 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
                            try {
                                pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                                {
                                    SubLObject reuseP = thread.secondMultipleValue();
                                    thread.resetMultipleValues();
                                    try {
                                        thread.resetMultipleValues();
                                        {
                                            SubLObject _prev_bind_0_7 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                                            try {
                                                pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                                                {
                                                    SubLObject new_or_reused = thread.secondMultipleValue();
                                                    thread.resetMultipleValues();
                                                    {
                                                        SubLObject _prev_bind_0_8 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                                                        try {
                                                            pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                                                            {
                                                                SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                                                                {
                                                                    SubLObject _prev_bind_0_9 = memoization_state.$memoization_state$.currentBinding(thread);
                                                                    try {
                                                                        memoization_state.$memoization_state$.bind(local_state, thread);
                                                                        {
                                                                            SubLObject original_memoization_process = NIL;
                                                                            if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
                                                                                original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
                                                                                {
                                                                                    SubLObject current_proc = current_process();
                                                                                    if (NIL == original_memoization_process) {
                                                                                        memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
                                                                                    } else {
                                                                                        if (original_memoization_process != current_proc) {
                                                                                            Errors.error($str_alt13$Invalid_attempt_to_reuse_memoizat);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            try {
                                                                                result = delete_if(symbol_function(NULL), list_utilities.nmapcar(NART_SUBSTITUTE, cardinality_estimates.sort_by_generality_estimate(remove_duplicates(list_utilities.first_n($int$200, args), symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED), UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                            } finally {
                                                                                {
                                                                                    SubLObject _prev_bind_0_10 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                    try {
                                                                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                                                                        if ((NIL != local_state) && (NIL == original_memoization_process)) {
                                                                                            memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
                                                                                        }
                                                                                    } finally {
                                                                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_10, thread);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } finally {
                                                                        memoization_state.$memoization_state$.rebind(_prev_bind_0_9, thread);
                                                                    }
                                                                }
                                                            }
                                                        } finally {
                                                            pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_8, thread);
                                                        }
                                                    }
                                                    if ((new_or_reused == $NEW) && (NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread)))) {
                                                        memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                                                    }
                                                }
                                            } finally {
                                                pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_7, thread);
                                            }
                                        }
                                    } finally {
                                        {
                                            SubLObject _prev_bind_0_11 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                            try {
                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                if (NIL == reuseP) {
                                                    pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                                                }
                                            } finally {
                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_11, thread);
                                            }
                                        }
                                    }
                                }
                            } finally {
                                pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_6, thread);
                            }
                        }
                        result = api_widgets.convert_term_list_to_renderings_for_java(result, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    } finally {
                        pph_vars.$pph_domain_mt$.rebind(_prev_bind_1, thread);
                        pph_vars.$pph_language_mt$.rebind(_prev_bind_0, thread);
                    }
                }
                if (NIL != should_sort) {
                    return Sort.sort(result, symbol_function(GKE_LIST_ITEM_COMPARATOR), UNPROVIDED);
                }
                return result;
            }
        }
    }

    public static SubLObject gke_process_results(final SubLObject should_sort, final SubLObject args, SubLObject generation_mt, SubLObject domain_mt) {
        if (generation_mt == UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (domain_mt == UNPROVIDED) {
            domain_mt = pph_vars.$pph_domain_mt$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = pph_vars.$pph_language_mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = pph_vars.$pph_domain_mt$.currentBinding(thread);
        try {
            pph_vars.$pph_language_mt$.bind(NIL != generation_mt ? pph_utilities.pph_canonicalize_hlmt(generation_mt) : pph_vars.$pph_language_mt$.getDynamicValue(thread), thread);
            pph_vars.$pph_domain_mt$.bind(NIL != domain_mt ? pph_utilities.pph_canonicalize_hlmt(domain_mt) : pph_vars.$pph_domain_mt$.getDynamicValue(thread), thread);
            final SubLObject _prev_bind_0_$6 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
            try {
                pph_macros.$free_pph_problem_store_pointers$.bind(NIL, thread);
                thread.resetMultipleValues();
                final SubLObject _prev_bind_0_$7 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
                try {
                    pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                    final SubLObject reuseP = thread.secondMultipleValue();
                    thread.resetMultipleValues();
                    try {
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$8 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                        try {
                            pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                            final SubLObject new_or_reused = thread.secondMultipleValue();
                            thread.resetMultipleValues();
                            final SubLObject _prev_bind_0_$9 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                            try {
                                pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                                final SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                                final SubLObject _prev_bind_0_$10 = memoization_state.$memoization_state$.currentBinding(thread);
                                try {
                                    memoization_state.$memoization_state$.bind(local_state, thread);
                                    final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                                    try {
                                        result = delete_if(symbol_function(NULL), list_utilities.nmapcar(gke_main.NART_SUBSTITUTE, cardinality_estimates.sort_by_generality_estimate(remove_duplicates(list_utilities.first_n(gke_main.$int$200, args), symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED), UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    } finally {
                                        final SubLObject _prev_bind_0_$11 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            $is_thread_performing_cleanupP$.bind(T, thread);
                                            final SubLObject _values = getValuesAsVector();
                                            memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                            restoreValuesFromVector(_values);
                                        } finally {
                                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$11, thread);
                                        }
                                    }
                                } finally {
                                    memoization_state.$memoization_state$.rebind(_prev_bind_0_$10, thread);
                                }
                            } finally {
                                pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$9, thread);
                            }
                            if ((new_or_reused == $NEW) && (NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread)))) {
                                memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                            }
                        } finally {
                            pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$8, thread);
                        }
                    } finally {
                        final SubLObject _prev_bind_0_$12 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values2 = getValuesAsVector();
                            if (NIL == reuseP) {
                                pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                            }
                            restoreValuesFromVector(_values2);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$12, thread);
                        }
                    }
                } finally {
                    pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$7, thread);
                }
            } finally {
                pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_0_$6, thread);
            }
            result = api_widgets.convert_term_list_to_renderings_for_java(result, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } finally {
            pph_vars.$pph_domain_mt$.rebind(_prev_bind_2, thread);
            pph_vars.$pph_language_mt$.rebind(_prev_bind_0, thread);
        }
        if (NIL != should_sort) {
            return Sort.sort(result, symbol_function(gke_main.GKE_LIST_ITEM_COMPARATOR), UNPROVIDED);
        }
        return result;
    }

    public static final SubLObject get_gke_specs_alt(SubLObject arg, SubLObject arg_num, SubLObject cycl_formula, SubLObject domain_mt, SubLObject depth, SubLObject orig_term) {
        if (orig_term == UNPROVIDED) {
            orig_term = NIL;
        }
        {
            SubLObject result = NIL;
            if ((NIL != orig_term) && (NIL != kb_accessors.individualP(orig_term))) {
                result = rkf_ontology_utilities.rkf_instantiations(arg, domain_mt);
                if (NIL != list_utilities.lengthG(result, $int$175, UNPROVIDED)) {
                    result = list_utilities.first_n($int$175, isa.asserted_instance(arg, domain_mt));
                }
            }
            result = append(result, rkf_ontology_utilities.rkf_max_specs(arg, domain_mt));
            return result;
        }
    }

    public static SubLObject get_gke_specs(final SubLObject arg, final SubLObject arg_num, final SubLObject cycl_formula, final SubLObject domain_mt, final SubLObject depth, SubLObject orig_term) {
        if (orig_term == UNPROVIDED) {
            orig_term = NIL;
        }
        SubLObject result = NIL;
        if ((NIL != orig_term) && (NIL != kb_accessors.individualP(orig_term))) {
            result = rkf_ontology_utilities.rkf_instantiations(arg, domain_mt);
            if (NIL != list_utilities.lengthG(result, gke_main.$int$175, UNPROVIDED)) {
                result = list_utilities.first_n(gke_main.$int$175, isa.asserted_instance(arg, domain_mt));
            }
        }
        result = append(result, rkf_ontology_utilities.rkf_max_specs(arg, domain_mt));
        return result;
    }

    public static final SubLObject get_gke_genls_alt(SubLObject arg, SubLObject arg_num, SubLObject cycl_formula, SubLObject domain_mt, SubLObject depth) {
        return rkf_ontology_utilities.rkf_all_genls(arg, domain_mt);
    }

    public static SubLObject get_gke_genls(final SubLObject arg, final SubLObject arg_num, final SubLObject cycl_formula, final SubLObject domain_mt, final SubLObject depth) {
        return rkf_ontology_utilities.rkf_all_genls(arg, domain_mt);
    }

    public static final SubLObject get_gke_spec_preds_alt(SubLObject arg, SubLObject arg_num, SubLObject cycl_formula, SubLObject domain_mt, SubLObject depth) {
        {
            SubLObject result = NIL;
            SubLObject cdolist_list_var = genl_predicates.max_spec_predicates(arg, domain_mt, UNPROVIDED);
            SubLObject spec_pred = NIL;
            for (spec_pred = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , spec_pred = cdolist_list_var.first()) {
                if (NIL == com.cyc.cycjava.cycl.gke_main.gke_predicate_filteredP(spec_pred, domain_mt)) {
                    result = cons(spec_pred, result);
                }
            }
            return result;
        }
    }

    public static SubLObject get_gke_spec_preds(final SubLObject arg, final SubLObject arg_num, final SubLObject cycl_formula, final SubLObject domain_mt, final SubLObject depth) {
        SubLObject result = NIL;
        SubLObject cdolist_list_var = genl_predicates.max_spec_predicates(arg, domain_mt, UNPROVIDED);
        SubLObject spec_pred = NIL;
        spec_pred = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL == gke_main.gke_predicate_filteredP(spec_pred, domain_mt)) {
                result = cons(spec_pred, result);
            }
            cdolist_list_var = cdolist_list_var.rest();
            spec_pred = cdolist_list_var.first();
        } 
        return result;
    }

    public static final SubLObject get_gke_genl_preds_alt(SubLObject arg, SubLObject arg_num, SubLObject cycl_formula, SubLObject domain_mt, SubLObject depth) {
        {
            SubLObject result = NIL;
            SubLObject cdolist_list_var = genl_predicates.genl_predicate_roots(arg, domain_mt, UNPROVIDED);
            SubLObject genl_pred = NIL;
            for (genl_pred = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , genl_pred = cdolist_list_var.first()) {
                if (NIL == com.cyc.cycjava.cycl.gke_main.gke_predicate_filteredP(genl_pred, domain_mt)) {
                    result = cons(genl_pred, result);
                }
            }
            return result;
        }
    }

    public static SubLObject get_gke_genl_preds(final SubLObject arg, final SubLObject arg_num, final SubLObject cycl_formula, final SubLObject domain_mt, final SubLObject depth) {
        SubLObject result = NIL;
        SubLObject cdolist_list_var = genl_predicates.genl_predicate_roots(arg, domain_mt, UNPROVIDED);
        SubLObject genl_pred = NIL;
        genl_pred = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL == gke_main.gke_predicate_filteredP(genl_pred, domain_mt)) {
                result = cons(genl_pred, result);
            }
            cdolist_list_var = cdolist_list_var.rest();
            genl_pred = cdolist_list_var.first();
        } 
        return result;
    }

    public static final SubLObject get_gke_collection_siblings_alt(SubLObject arg, SubLObject arg_num, SubLObject cycl_formula, SubLObject domain_mt, SubLObject depth) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(domain_mt);
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                        result = remove_if($sym20$GKE_FILTERED_TERM_, list_utilities.flatten(Mapping.mapcar(symbol_function(RKF_MAX_SPECS), remove_if($sym20$GKE_FILTERED_TERM_, cardinality_estimates.sort_by_generality_estimate(rkf_ontology_utilities.rkf_min_genls(arg, domain_mt), UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED))), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        result = union(result, remove_if($sym20$GKE_FILTERED_TERM_, list_utilities.flatten(Mapping.mapcar(symbol_function(RKF_MAX_SPECS), remove_if($sym20$GKE_FILTERED_TERM_, cardinality_estimates.sort_by_generality_estimate(rkf_ontology_utilities.rkf_min_isa(arg, domain_mt), UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED))), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED);
                        result = union(result, com.cyc.cycjava.cycl.gke_main.get_gke_instance_siblings(arg, arg_num, cycl_formula, domain_mt, depth), UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                    }
                }
                return remove_duplicates(result, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
        }
    }

    public static SubLObject get_gke_collection_siblings(final SubLObject arg, final SubLObject arg_num, final SubLObject cycl_formula, final SubLObject domain_mt, final SubLObject depth) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(domain_mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            result = remove_if(gke_main.$sym19$GKE_FILTERED_TERM_, list_utilities.flatten(Mapping.mapcar(symbol_function(gke_main.RKF_MAX_SPECS), remove_if(gke_main.$sym19$GKE_FILTERED_TERM_, cardinality_estimates.sort_by_generality_estimate(rkf_ontology_utilities.rkf_min_genls(arg, domain_mt), UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED))), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            result = union(result, remove_if(gke_main.$sym19$GKE_FILTERED_TERM_, list_utilities.flatten(Mapping.mapcar(symbol_function(gke_main.RKF_MAX_SPECS), remove_if(gke_main.$sym19$GKE_FILTERED_TERM_, cardinality_estimates.sort_by_generality_estimate(rkf_ontology_utilities.rkf_min_isa(arg, domain_mt), UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED))), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED);
            result = union(result, gke_main.get_gke_instance_siblings(arg, arg_num, cycl_formula, domain_mt, depth), UNPROVIDED, UNPROVIDED);
        } finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return remove_duplicates(result, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject get_gke_instance_siblings_alt(SubLObject arg, SubLObject arg_num, SubLObject cycl_formula, SubLObject domain_mt, SubLObject depth) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt_relevance_macros.determine_inference_mt_relevance_el_spec(domain_mt));
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                        result = remove_if($sym20$GKE_FILTERED_TERM_, list_utilities.flatten(Mapping.mapcar(symbol_function(RKF_INSTANTIATIONS), remove_if($sym20$GKE_FILTERED_TERM_, cardinality_estimates.sort_by_generality_estimate(rkf_ontology_utilities.rkf_min_isa(arg, domain_mt), UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED))), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    } finally {
                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    public static SubLObject get_gke_instance_siblings(final SubLObject arg, final SubLObject arg_num, final SubLObject cycl_formula, final SubLObject domain_mt, final SubLObject depth) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt_relevance_macros.determine_inference_mt_relevance_el_spec(domain_mt));
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            result = remove_if(gke_main.$sym19$GKE_FILTERED_TERM_, list_utilities.flatten(Mapping.mapcar(symbol_function(gke_main.RKF_INSTANTIATIONS), remove_if(gke_main.$sym19$GKE_FILTERED_TERM_, cardinality_estimates.sort_by_generality_estimate(rkf_ontology_utilities.rkf_min_isa(arg, domain_mt), UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED))), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    public static final SubLObject get_gke_siblings_alt(SubLObject arg, SubLObject arg_num, SubLObject cycl_formula, SubLObject domain_mt, SubLObject depth) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt_relevance_macros.determine_inference_mt_relevance_el_spec(domain_mt));
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                        result = reverse(list_utilities.flatten(Mapping.mapcar(symbol_function(RKF_MAX_SPECS), rkf_ontology_utilities.rkf_min_genls(arg, UNPROVIDED))));
                    } finally {
                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                    }
                }
                return com.cyc.cycjava.cycl.gke_main.gke_process_results(T, result, UNPROVIDED, UNPROVIDED);
            }
        }
    }

    public static SubLObject get_gke_siblings(final SubLObject arg, final SubLObject arg_num, final SubLObject cycl_formula, final SubLObject domain_mt, final SubLObject depth) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt_relevance_macros.determine_inference_mt_relevance_el_spec(domain_mt));
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            result = reverse(list_utilities.flatten(Mapping.mapcar(symbol_function(gke_main.RKF_MAX_SPECS), rkf_ontology_utilities.rkf_min_genls(arg, UNPROVIDED))));
        } finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return gke_main.gke_process_results(T, result, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject add_self_to_quantify_over_isas_alt(SubLObject arg, SubLObject domain_mt, SubLObject alist) {
        if (NIL != isa.isaP(arg, $$Collection, domain_mt, UNPROVIDED)) {
            return cons(arg, alist);
        } else {
            return alist;
        }
    }

    public static SubLObject add_self_to_quantify_over_isas(final SubLObject arg, final SubLObject domain_mt, final SubLObject alist) {
        if (NIL != isa.isaP(arg, gke_main.$$Collection, domain_mt, UNPROVIDED)) {
            return cons(arg, alist);
        }
        return alist;
    }

    public static final SubLObject get_gke_quantify_over_isas_alt(SubLObject arg, SubLObject generation_mt, SubLObject domain_mt, SubLObject depth) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            domain_mt = hlmt_czer.canonicalize_hlmt(domain_mt);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = pph_vars.$pph_language_mt$.currentBinding(thread);
                    SubLObject _prev_bind_1 = pph_vars.$pph_domain_mt$.currentBinding(thread);
                    try {
                        pph_vars.$pph_language_mt$.bind(NIL != generation_mt ? ((SubLObject) (pph_utilities.pph_canonicalize_hlmt(generation_mt))) : pph_vars.$pph_language_mt$.getDynamicValue(thread), thread);
                        pph_vars.$pph_domain_mt$.bind(NIL != domain_mt ? ((SubLObject) (pph_utilities.pph_canonicalize_hlmt(domain_mt))) : pph_vars.$pph_domain_mt$.getDynamicValue(thread), thread);
                        result = com.cyc.cycjava.cycl.gke_main.gke_process_results(NIL, com.cyc.cycjava.cycl.gke_main.add_self_to_quantify_over_isas(arg, domain_mt, remove_if(GKE_ISAS_FILTERED_TERM, list_utilities.flatten(Mapping.mapcar(ALL_GENLS, remove_if(GKE_ISAS_FILTERED_TERM, isa.all_isa(arg, domain_mt, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED))), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED)), UNPROVIDED, UNPROVIDED);
                    } finally {
                        pph_vars.$pph_domain_mt$.rebind(_prev_bind_1, thread);
                        pph_vars.$pph_language_mt$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    public static SubLObject get_gke_quantify_over_isas(final SubLObject arg, final SubLObject generation_mt, SubLObject domain_mt, final SubLObject depth) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        domain_mt = hlmt_czer.canonicalize_hlmt(domain_mt);
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = pph_vars.$pph_language_mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = pph_vars.$pph_domain_mt$.currentBinding(thread);
        try {
            pph_vars.$pph_language_mt$.bind(NIL != generation_mt ? pph_utilities.pph_canonicalize_hlmt(generation_mt) : pph_vars.$pph_language_mt$.getDynamicValue(thread), thread);
            pph_vars.$pph_domain_mt$.bind(NIL != domain_mt ? pph_utilities.pph_canonicalize_hlmt(domain_mt) : pph_vars.$pph_domain_mt$.getDynamicValue(thread), thread);
            result = gke_main.gke_process_results(NIL, gke_main.add_self_to_quantify_over_isas(arg, domain_mt, remove_if(gke_main.GKE_ISAS_FILTERED_TERM, list_utilities.flatten(Mapping.mapcar(ALL_GENLS, remove_if(gke_main.GKE_ISAS_FILTERED_TERM, isa.all_isa(arg, domain_mt, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED))), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED)), UNPROVIDED, UNPROVIDED);
        } finally {
            pph_vars.$pph_domain_mt$.rebind(_prev_bind_2, thread);
            pph_vars.$pph_language_mt$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    public static final SubLObject get_gke_isas_alt(SubLObject arg, SubLObject arg_num, SubLObject cycl_formula, SubLObject domain_mt, SubLObject depth) {
        return remove_if(GKE_ISAS_FILTERED_TERM, list_utilities.flatten(Mapping.mapcar(RKF_ALL_GENLS, remove_if(GKE_ISAS_FILTERED_TERM, rkf_ontology_utilities.rkf_all_isa(arg, domain_mt), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED))), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject get_gke_isas(final SubLObject arg, final SubLObject arg_num, final SubLObject cycl_formula, final SubLObject domain_mt, final SubLObject depth) {
        return remove_if(gke_main.GKE_ISAS_FILTERED_TERM, list_utilities.flatten(Mapping.mapcar(gke_main.RKF_ALL_GENLS, remove_if(gke_main.GKE_ISAS_FILTERED_TERM, rkf_ontology_utilities.rkf_all_isa(arg, domain_mt), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED))), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject clear_gke_isas_filtered_term_alt() {
        {
            SubLObject cs = $gke_isas_filtered_term_caching_state$.getGlobalValue();
            if (NIL != cs) {
                memoization_state.caching_state_clear(cs);
            }
        }
        return NIL;
    }

    public static SubLObject clear_gke_isas_filtered_term() {
        final SubLObject cs = gke_main.$gke_isas_filtered_term_caching_state$.getGlobalValue();
        if (NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return NIL;
    }

    public static final SubLObject remove_gke_isas_filtered_term_alt(SubLObject v_term, SubLObject domain_mt) {
        if (domain_mt == UNPROVIDED) {
            domain_mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        return memoization_state.caching_state_remove_function_results_with_args($gke_isas_filtered_term_caching_state$.getGlobalValue(), list(v_term, domain_mt), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_gke_isas_filtered_term(final SubLObject v_term, SubLObject domain_mt) {
        if (domain_mt == UNPROVIDED) {
            domain_mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        return memoization_state.caching_state_remove_function_results_with_args(gke_main.$gke_isas_filtered_term_caching_state$.getGlobalValue(), list(v_term, domain_mt), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject gke_isas_filtered_term_internal_alt(SubLObject v_term, SubLObject domain_mt) {
        {
            SubLObject overly_general_collections = NIL;
            return makeBoolean(((NIL == v_term) || (NIL != subl_promotions.memberP(v_term, overly_general_collections, UNPROVIDED, UNPROVIDED))) || (NIL != rkf_relevance_utilities.rkf_irrelevant_term(v_term, domain_mt)));
        }
    }

    public static SubLObject gke_isas_filtered_term_internal(final SubLObject v_term, final SubLObject domain_mt) {
        final SubLObject overly_general_collections = NIL;
        return makeBoolean(((NIL == v_term) || (NIL != subl_promotions.memberP(v_term, overly_general_collections, UNPROVIDED, UNPROVIDED))) || (NIL != rkf_relevance_utilities.rkf_irrelevant_term(v_term, domain_mt)));
    }

    public static final SubLObject gke_isas_filtered_term_alt(SubLObject v_term, SubLObject domain_mt) {
        if (domain_mt == UNPROVIDED) {
            domain_mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        {
            SubLObject caching_state = $gke_isas_filtered_term_caching_state$.getGlobalValue();
            if (NIL == caching_state) {
                caching_state = memoization_state.create_global_caching_state_for_name(GKE_ISAS_FILTERED_TERM, $gke_isas_filtered_term_caching_state$, NIL, EQUAL, TWO_INTEGER, ZERO_INTEGER);
            }
            {
                SubLObject sxhash = memoization_state.sxhash_calc_2(v_term, domain_mt);
                SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
                if (collisions != $kw28$_MEMOIZED_ITEM_NOT_FOUND_) {
                    {
                        SubLObject cdolist_list_var = collisions;
                        SubLObject collision = NIL;
                        for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , collision = cdolist_list_var.first()) {
                            {
                                SubLObject cached_args = collision.first();
                                SubLObject results2 = second(collision);
                                if (v_term.equal(cached_args.first())) {
                                    cached_args = cached_args.rest();
                                    if (((NIL != cached_args) && (NIL == cached_args.rest())) && domain_mt.equal(cached_args.first())) {
                                        return memoization_state.caching_results(results2);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.gke_main.gke_isas_filtered_term_internal(v_term, domain_mt)));
                    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(v_term, domain_mt));
                    return memoization_state.caching_results(results);
                }
            }
        }
    }

    public static SubLObject gke_isas_filtered_term(final SubLObject v_term, SubLObject domain_mt) {
        if (domain_mt == UNPROVIDED) {
            domain_mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        SubLObject caching_state = gke_main.$gke_isas_filtered_term_caching_state$.getGlobalValue();
        if (NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name(gke_main.GKE_ISAS_FILTERED_TERM, gke_main.$gke_isas_filtered_term_caching_state$, NIL, EQUAL, TWO_INTEGER, ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(v_term, domain_mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = NIL;
            collision = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = second(collision);
                if (v_term.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (((NIL != cached_args) && (NIL == cached_args.rest())) && domain_mt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            } 
        }
        final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(gke_main.gke_isas_filtered_term_internal(v_term, domain_mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(v_term, domain_mt));
        return memoization_state.caching_results(results3);
    }

    public static final SubLObject clear_gke_filtered_termP_alt() {
        {
            SubLObject cs = $gke_filtered_termP_caching_state$.getGlobalValue();
            if (NIL != cs) {
                memoization_state.caching_state_clear(cs);
            }
        }
        return NIL;
    }

    public static SubLObject clear_gke_filtered_termP() {
        final SubLObject cs = gke_main.$gke_filtered_termP_caching_state$.getGlobalValue();
        if (NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return NIL;
    }

    public static final SubLObject remove_gke_filtered_termP_alt(SubLObject v_term, SubLObject domain_mt) {
        if (domain_mt == UNPROVIDED) {
            domain_mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        return memoization_state.caching_state_remove_function_results_with_args($gke_filtered_termP_caching_state$.getGlobalValue(), list(v_term, domain_mt), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_gke_filtered_termP(final SubLObject v_term, SubLObject domain_mt) {
        if (domain_mt == UNPROVIDED) {
            domain_mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        return memoization_state.caching_state_remove_function_results_with_args(gke_main.$gke_filtered_termP_caching_state$.getGlobalValue(), list(v_term, domain_mt), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject gke_filtered_termP_internal_alt(SubLObject v_term, SubLObject domain_mt) {
        return makeBoolean(((((v_term == NIL) || (NIL != subl_promotions.memberP(cycl_utilities.hl_to_el(v_term), $gke_overly_general_non_predicate_types$.getGlobalValue(), symbol_function(EQUAL), UNPROVIDED))) || ((NIL != fort_types_interface.predicate_p(v_term)) && (NIL != com.cyc.cycjava.cycl.gke_main.gke_predicate_filteredP(v_term, domain_mt)))) || (NIL != rkf_relevance_utilities.rkf_irrelevant_term(v_term, domain_mt))) || (NIL != rkf_relevance_utilities.rkf_irrelevant_precision_suggestion(v_term, domain_mt)));
    }

    public static SubLObject gke_filtered_termP_internal(final SubLObject v_term, final SubLObject domain_mt) {
        return makeBoolean(((((v_term == NIL) || (NIL != subl_promotions.memberP(cycl_utilities.hl_to_el(v_term), gke_main.$gke_overly_general_non_predicate_types$.getGlobalValue(), symbol_function(EQUAL), UNPROVIDED))) || ((NIL != fort_types_interface.predicate_p(v_term)) && (NIL != gke_main.gke_predicate_filteredP(v_term, domain_mt)))) || (NIL != rkf_relevance_utilities.rkf_irrelevant_term(v_term, domain_mt))) || (NIL != rkf_relevance_utilities.rkf_irrelevant_precision_suggestion(v_term, domain_mt)));
    }

    public static final SubLObject gke_filtered_termP_alt(SubLObject v_term, SubLObject domain_mt) {
        if (domain_mt == UNPROVIDED) {
            domain_mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        {
            SubLObject caching_state = $gke_filtered_termP_caching_state$.getGlobalValue();
            if (NIL == caching_state) {
                caching_state = memoization_state.create_global_caching_state_for_name($sym20$GKE_FILTERED_TERM_, $sym30$_GKE_FILTERED_TERM__CACHING_STATE_, NIL, EQUAL, TWO_INTEGER, ZERO_INTEGER);
            }
            {
                SubLObject sxhash = memoization_state.sxhash_calc_2(v_term, domain_mt);
                SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
                if (collisions != $kw28$_MEMOIZED_ITEM_NOT_FOUND_) {
                    {
                        SubLObject cdolist_list_var = collisions;
                        SubLObject collision = NIL;
                        for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , collision = cdolist_list_var.first()) {
                            {
                                SubLObject cached_args = collision.first();
                                SubLObject results2 = second(collision);
                                if (v_term.equal(cached_args.first())) {
                                    cached_args = cached_args.rest();
                                    if (((NIL != cached_args) && (NIL == cached_args.rest())) && domain_mt.equal(cached_args.first())) {
                                        return memoization_state.caching_results(results2);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.gke_main.gke_filtered_termP_internal(v_term, domain_mt)));
                    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(v_term, domain_mt));
                    return memoization_state.caching_results(results);
                }
            }
        }
    }

    public static SubLObject gke_filtered_termP(final SubLObject v_term, SubLObject domain_mt) {
        if (domain_mt == UNPROVIDED) {
            domain_mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        SubLObject caching_state = gke_main.$gke_filtered_termP_caching_state$.getGlobalValue();
        if (NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name(gke_main.$sym19$GKE_FILTERED_TERM_, gke_main.$sym28$_GKE_FILTERED_TERM__CACHING_STATE_, NIL, EQUAL, TWO_INTEGER, ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(v_term, domain_mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = NIL;
            collision = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = second(collision);
                if (v_term.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (((NIL != cached_args) && (NIL == cached_args.rest())) && domain_mt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            } 
        }
        final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(gke_main.gke_filtered_termP_internal(v_term, domain_mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(v_term, domain_mt));
        return memoization_state.caching_results(results3);
    }

    public static final SubLObject clear_gke_predicate_filteredP_alt() {
        {
            SubLObject cs = $gke_predicate_filteredP_caching_state$.getGlobalValue();
            if (NIL != cs) {
                memoization_state.caching_state_clear(cs);
            }
        }
        return NIL;
    }

    public static SubLObject clear_gke_predicate_filteredP() {
        final SubLObject cs = gke_main.$gke_predicate_filteredP_caching_state$.getGlobalValue();
        if (NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return NIL;
    }

    public static final SubLObject remove_gke_predicate_filteredP_alt(SubLObject predicate, SubLObject domain_mt) {
        return memoization_state.caching_state_remove_function_results_with_args($gke_predicate_filteredP_caching_state$.getGlobalValue(), list(predicate, domain_mt), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_gke_predicate_filteredP(final SubLObject predicate, final SubLObject domain_mt) {
        return memoization_state.caching_state_remove_function_results_with_args(gke_main.$gke_predicate_filteredP_caching_state$.getGlobalValue(), list(predicate, domain_mt), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject gke_predicate_filteredP_internal_alt(SubLObject predicate, SubLObject domain_mt) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject goodP = NIL;
                if (NIL == subl_promotions.memberP(predicate, $gke_overly_general_predicate_types$.getGlobalValue(), UNPROVIDED, UNPROVIDED)) {
                    {
                        SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt_relevance_macros.determine_inference_mt_relevance_el_spec(domain_mt));
                        {
                            SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                            SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                if (NIL == goodP) {
                                    {
                                        SubLObject csome_list_var = $list_alt34;
                                        SubLObject pred = NIL;
                                        for (pred = csome_list_var.first(); !((NIL != goodP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , pred = csome_list_var.first()) {
                                            goodP = kb_mapping_utilities.some_pred_value(predicate, pred, ONE_INTEGER, $TRUE);
                                        }
                                    }
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                            }
                        }
                    }
                }
                return makeBoolean(NIL == goodP);
            }
        }
    }

    public static SubLObject gke_predicate_filteredP_internal(final SubLObject predicate, final SubLObject domain_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject goodP = NIL;
        if (NIL == subl_promotions.memberP(predicate, gke_main.$gke_overly_general_predicate_types$.getGlobalValue(), UNPROVIDED, UNPROVIDED)) {
            final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt_relevance_macros.determine_inference_mt_relevance_el_spec(domain_mt));
            final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                if (NIL == goodP) {
                    SubLObject csome_list_var;
                    SubLObject pred;
                    for (csome_list_var = gke_main.$list32, pred = NIL, pred = csome_list_var.first(); (NIL == goodP) && (NIL != csome_list_var); goodP = kb_mapping_utilities.some_pred_value(predicate, pred, ONE_INTEGER, $TRUE) , csome_list_var = csome_list_var.rest() , pred = csome_list_var.first()) {
                    }
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
            }
        }
        return makeBoolean(NIL == goodP);
    }

    public static final SubLObject gke_predicate_filteredP_alt(SubLObject predicate, SubLObject domain_mt) {
        {
            SubLObject caching_state = $gke_predicate_filteredP_caching_state$.getGlobalValue();
            if (NIL == caching_state) {
                caching_state = memoization_state.create_global_caching_state_for_name($sym32$GKE_PREDICATE_FILTERED_, $sym35$_GKE_PREDICATE_FILTERED__CACHING_STATE_, NIL, EQUAL, TWO_INTEGER, ZERO_INTEGER);
            }
            {
                SubLObject sxhash = memoization_state.sxhash_calc_2(predicate, domain_mt);
                SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
                if (collisions != $kw28$_MEMOIZED_ITEM_NOT_FOUND_) {
                    {
                        SubLObject cdolist_list_var = collisions;
                        SubLObject collision = NIL;
                        for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , collision = cdolist_list_var.first()) {
                            {
                                SubLObject cached_args = collision.first();
                                SubLObject results2 = second(collision);
                                if (predicate.equal(cached_args.first())) {
                                    cached_args = cached_args.rest();
                                    if (((NIL != cached_args) && (NIL == cached_args.rest())) && domain_mt.equal(cached_args.first())) {
                                        return memoization_state.caching_results(results2);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.gke_main.gke_predicate_filteredP_internal(predicate, domain_mt)));
                    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(predicate, domain_mt));
                    return memoization_state.caching_results(results);
                }
            }
        }
    }

    public static SubLObject gke_predicate_filteredP(final SubLObject predicate, final SubLObject domain_mt) {
        SubLObject caching_state = gke_main.$gke_predicate_filteredP_caching_state$.getGlobalValue();
        if (NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name(gke_main.$sym30$GKE_PREDICATE_FILTERED_, gke_main.$sym33$_GKE_PREDICATE_FILTERED__CACHING_STATE_, NIL, EQUAL, TWO_INTEGER, ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(predicate, domain_mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = NIL;
            collision = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = second(collision);
                if (predicate.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (((NIL != cached_args) && (NIL == cached_args.rest())) && domain_mt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            } 
        }
        final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(gke_main.gke_predicate_filteredP_internal(predicate, domain_mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(predicate, domain_mt));
        return memoization_state.caching_results(results3);
    }

    /**
     *
     *
     * @return LISTP of BOOLEANP; Each non-NIL iff the corresponding item on REPLACEMENT-TERMS
    passes all constraints on TERM-POSITION in FORMULA in DOMAIN-MT.
     */
    @LispMethod(comment = "@return LISTP of BOOLEANP; Each non-NIL iff the corresponding item on REPLACEMENT-TERMS\r\npasses all constraints on TERM-POSITION in FORMULA in DOMAIN-MT.")
    public static final SubLObject terms_pass_constraints_alt(SubLObject replacement_terms, SubLObject term_position, SubLObject formula, SubLObject domain_mt) {
        SubLTrampolineFile.checkType(replacement_terms, LISTP);
        SubLTrampolineFile.checkType(term_position, TREE_POSITION_P);
        SubLTrampolineFile.checkType(formula, $sym38$CYCL_FORMULA_);
        {
            SubLObject mt = hlmt_czer.canonicalize_hlmt(domain_mt);
            SubLTrampolineFile.checkType(mt, HLMT_P);
            if (list_utilities.last_one(term_position).isZero()) {
                return com.cyc.cycjava.cycl.gke_main.operator_terms_pass_constraints(replacement_terms, term_position, formula, mt);
            } else {
                return com.cyc.cycjava.cycl.gke_main.argument_terms_pass_constraints(replacement_terms, term_position, formula, mt);
            }
        }
    }

    /**
     *
     *
     * @return LISTP of BOOLEANP; Each non-NIL iff the corresponding item on REPLACEMENT-TERMS
    passes all constraints on TERM-POSITION in FORMULA in DOMAIN-MT.
     */
    @LispMethod(comment = "@return LISTP of BOOLEANP; Each non-NIL iff the corresponding item on REPLACEMENT-TERMS\r\npasses all constraints on TERM-POSITION in FORMULA in DOMAIN-MT.")
    public static SubLObject terms_pass_constraints(final SubLObject replacement_terms, final SubLObject term_position, final SubLObject formula, final SubLObject domain_mt) {
        assert NIL != listp(replacement_terms) : "! listp(replacement_terms) " + ("Types.listp(replacement_terms) " + "CommonSymbols.NIL != Types.listp(replacement_terms) ") + replacement_terms;
        assert NIL != list_utilities.tree_position_p(term_position) : "! list_utilities.tree_position_p(term_position) " + ("list_utilities.tree_position_p(term_position) " + "CommonSymbols.NIL != list_utilities.tree_position_p(term_position) ") + term_position;
        assert NIL != collection_defns.cycl_formulaP(formula) : "! collection_defns.cycl_formulaP(formula) " + ("collection_defns.cycl_formulaP(formula) " + "CommonSymbols.NIL != collection_defns.cycl_formulaP(formula) ") + formula;
        final SubLObject mt = hlmt_czer.canonicalize_hlmt(domain_mt);
        assert NIL != hlmt.hlmt_p(mt) : "! hlmt.hlmt_p(mt) " + ("hlmt.hlmt_p(mt) " + "CommonSymbols.NIL != hlmt.hlmt_p(mt) ") + mt;
        if (list_utilities.last_one(term_position).isZero()) {
            return gke_main.operator_terms_pass_constraints(replacement_terms, term_position, formula, mt);
        }
        return gke_main.argument_terms_pass_constraints(replacement_terms, term_position, formula, mt);
    }

    public static final SubLObject operator_terms_pass_constraints_alt(SubLObject replacement_terms, SubLObject term_position, SubLObject formula, SubLObject domain_mt) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                if (!list_utilities.last_one(term_position).isZero()) {
                    Errors.error($str_alt40$OPERATOR_TERMS_PASS_CONSTRAINTS_r, term_position);
                }
            }
            {
                SubLObject new_formula = copy_expression(formula);
                SubLObject result = NIL;
                SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(domain_mt);
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                    SubLObject _prev_bind_3 = wff_vars.$provide_wff_suggestionsP$.currentBinding(thread);
                    SubLObject _prev_bind_4 = czer_vars.$simplify_literalP$.currentBinding(thread);
                    SubLObject _prev_bind_5 = system_parameters.$suspend_sbhl_type_checkingP$.currentBinding(thread);
                    SubLObject _prev_bind_6 = $within_assert$.currentBinding(thread);
                    SubLObject _prev_bind_7 = wff_vars.$validate_constantsP$.currentBinding(thread);
                    SubLObject _prev_bind_8 = wff_vars.$permit_keyword_variablesP$.currentBinding(thread);
                    SubLObject _prev_bind_9 = wff_utilities.$check_var_typesP$.currentBinding(thread);
                    SubLObject _prev_bind_10 = wff_utilities.$check_arityP$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                        wff_vars.$provide_wff_suggestionsP$.bind(NIL, thread);
                        czer_vars.$simplify_literalP$.bind(NIL, thread);
                        system_parameters.$suspend_sbhl_type_checkingP$.bind(T, thread);
                        $within_assert$.bind(NIL, thread);
                        wff_vars.$validate_constantsP$.bind(NIL, thread);
                        wff_vars.$permit_keyword_variablesP$.bind(NIL, thread);
                        wff_utilities.$check_var_typesP$.bind(NIL, thread);
                        wff_utilities.$check_arityP$.bind(NIL, thread);
                        {
                            SubLObject state = memoization_state.new_memoization_state(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            SubLObject local_state = state;
                            {
                                SubLObject _prev_bind_0_12 = memoization_state.$memoization_state$.currentBinding(thread);
                                try {
                                    memoization_state.$memoization_state$.bind(local_state, thread);
                                    {
                                        SubLObject original_memoization_process = NIL;
                                        if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
                                            original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
                                            {
                                                SubLObject current_proc = current_process();
                                                if (NIL == original_memoization_process) {
                                                    memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
                                                } else {
                                                    if (original_memoization_process != current_proc) {
                                                        Errors.error($str_alt13$Invalid_attempt_to_reuse_memoizat);
                                                    }
                                                }
                                            }
                                        }
                                        try {
                                            {
                                                SubLObject already_resourcing_p = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.getDynamicValue(thread);
                                                {
                                                    SubLObject _prev_bind_0_13 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_14 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_15 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                                                    try {
                                                        sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_resource_limit(already_resourcing_p, SIX_INTEGER), thread);
                                                        sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(sbhl_marking_vars.possibly_new_marking_resource(already_resourcing_p), thread);
                                                        sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                                                        {
                                                            SubLObject cdolist_list_var = replacement_terms;
                                                            SubLObject v_term = NIL;
                                                            for (v_term = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , v_term = cdolist_list_var.first()) {
                                                                new_formula = cycl_utilities.formula_arg_position_nsubst(v_term, term_position, new_formula);
                                                                result = cons(T, result);
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2_15, thread);
                                                        sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_1_14, thread);
                                                        sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_0_13, thread);
                                                    }
                                                }
                                            }
                                        } finally {
                                            {
                                                SubLObject _prev_bind_0_16 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                                    if ((NIL != local_state) && (NIL == original_memoization_process)) {
                                                        memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
                                                    }
                                                } finally {
                                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_16, thread);
                                                }
                                            }
                                        }
                                    }
                                } finally {
                                    memoization_state.$memoization_state$.rebind(_prev_bind_0_12, thread);
                                }
                            }
                        }
                    } finally {
                        wff_utilities.$check_arityP$.rebind(_prev_bind_10, thread);
                        wff_utilities.$check_var_typesP$.rebind(_prev_bind_9, thread);
                        wff_vars.$permit_keyword_variablesP$.rebind(_prev_bind_8, thread);
                        wff_vars.$validate_constantsP$.rebind(_prev_bind_7, thread);
                        $within_assert$.rebind(_prev_bind_6, thread);
                        system_parameters.$suspend_sbhl_type_checkingP$.rebind(_prev_bind_5, thread);
                        czer_vars.$simplify_literalP$.rebind(_prev_bind_4, thread);
                        wff_vars.$provide_wff_suggestionsP$.rebind(_prev_bind_3, thread);
                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                    }
                }
                return nreverse(result);
            }
        }
    }

    public static SubLObject operator_terms_pass_constraints(final SubLObject replacement_terms, final SubLObject term_position, final SubLObject formula, final SubLObject domain_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (!list_utilities.last_one(term_position).isZero())) {
            Errors.error(gke_main.$str38$OPERATOR_TERMS_PASS_CONSTRAINTS_r, term_position);
        }
        SubLObject new_formula = copy_expression(formula);
        SubLObject result = NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(domain_mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        final SubLObject _prev_bind_4 = wff_vars.$provide_wff_suggestionsP$.currentBinding(thread);
        final SubLObject _prev_bind_5 = czer_vars.$simplify_literalP$.currentBinding(thread);
        final SubLObject _prev_bind_6 = system_parameters.$suspend_sbhl_type_checkingP$.currentBinding(thread);
        final SubLObject _prev_bind_7 = $within_assert$.currentBinding(thread);
        final SubLObject _prev_bind_8 = wff_vars.$validate_constantsP$.currentBinding(thread);
        final SubLObject _prev_bind_9 = wff_vars.$permit_keyword_variablesP$.currentBinding(thread);
        final SubLObject _prev_bind_10 = wff_utilities.$check_var_typesP$.currentBinding(thread);
        final SubLObject _prev_bind_11 = wff_utilities.$check_arityP$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            wff_vars.$provide_wff_suggestionsP$.bind(NIL, thread);
            czer_vars.$simplify_literalP$.bind(NIL, thread);
            system_parameters.$suspend_sbhl_type_checkingP$.bind(T, thread);
            $within_assert$.bind(NIL, thread);
            wff_vars.$validate_constantsP$.bind(NIL, thread);
            wff_vars.$permit_keyword_variablesP$.bind(NIL, thread);
            wff_utilities.$check_var_typesP$.bind(NIL, thread);
            wff_utilities.$check_arityP$.bind(NIL, thread);
            final SubLObject local_state;
            final SubLObject state = local_state = memoization_state.new_memoization_state(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            final SubLObject _prev_bind_0_$13 = memoization_state.$memoization_state$.currentBinding(thread);
            try {
                memoization_state.$memoization_state$.bind(local_state, thread);
                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                try {
                    final SubLObject already_resourcing_p = $resourcing_sbhl_marking_spaces_p$.getDynamicValue(thread);
                    final SubLObject _prev_bind_0_$14 = $resourced_sbhl_marking_space_limit$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$15 = $resourced_sbhl_marking_spaces$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$16 = $resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                    try {
                        $resourced_sbhl_marking_space_limit$.bind(determine_resource_limit(already_resourcing_p, SIX_INTEGER), thread);
                        $resourced_sbhl_marking_spaces$.bind(possibly_new_marking_resource(already_resourcing_p), thread);
                        $resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                        SubLObject cdolist_list_var = replacement_terms;
                        SubLObject v_term = NIL;
                        v_term = cdolist_list_var.first();
                        while (NIL != cdolist_list_var) {
                            new_formula = cycl_utilities.formula_arg_position_nsubst(v_term, term_position, new_formula);
                            result = cons(T, result);
                            cdolist_list_var = cdolist_list_var.rest();
                            v_term = cdolist_list_var.first();
                        } 
                    } finally {
                        $resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2_$16, thread);
                        $resourced_sbhl_marking_spaces$.rebind(_prev_bind_1_$15, thread);
                        $resourced_sbhl_marking_space_limit$.rebind(_prev_bind_0_$14, thread);
                    }
                } finally {
                    final SubLObject _prev_bind_0_$15 = $is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        $is_thread_performing_cleanupP$.bind(T, thread);
                        final SubLObject _values = getValuesAsVector();
                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                        restoreValuesFromVector(_values);
                    } finally {
                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$15, thread);
                    }
                }
            } finally {
                memoization_state.$memoization_state$.rebind(_prev_bind_0_$13, thread);
            }
        } finally {
            wff_utilities.$check_arityP$.rebind(_prev_bind_11, thread);
            wff_utilities.$check_var_typesP$.rebind(_prev_bind_10, thread);
            wff_vars.$permit_keyword_variablesP$.rebind(_prev_bind_9, thread);
            wff_vars.$validate_constantsP$.rebind(_prev_bind_8, thread);
            $within_assert$.rebind(_prev_bind_7, thread);
            system_parameters.$suspend_sbhl_type_checkingP$.rebind(_prev_bind_6, thread);
            czer_vars.$simplify_literalP$.rebind(_prev_bind_5, thread);
            wff_vars.$provide_wff_suggestionsP$.rebind(_prev_bind_4, thread);
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return nreverse(result);
    }

    public static final SubLObject argument_terms_pass_constraints_alt(SubLObject replacement_terms, SubLObject term_position, SubLObject formula, SubLObject domain_mt) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                if (list_utilities.last_one(term_position).isZero()) {
                    Errors.error($str_alt41$OPERATOR_TERMS_PASS_CONSTRAINTS_r, term_position);
                }
            }
            if (NIL != $use_rbp_wff_in_gkeP$.getDynamicValue(thread)) {
                {
                    SubLObject result = NIL;
                    {
                        SubLObject _prev_bind_0 = parsing_vars.$parsing_domain_mt$.currentBinding(thread);
                        try {
                            parsing_vars.$parsing_domain_mt$.bind(domain_mt, thread);
                            result = rbp_wff.rbp_wff_check_formula_arg_position_replacements(formula, term_position, replacement_terms);
                        } finally {
                            parsing_vars.$parsing_domain_mt$.rebind(_prev_bind_0, thread);
                        }
                    }
                    return result;
                }
            } else {
                return com.cyc.cycjava.cycl.gke_main.argument_terms_pass_isa_genls_constraints(replacement_terms, term_position, formula, domain_mt);
            }
        }
    }

    public static SubLObject argument_terms_pass_constraints(final SubLObject replacement_terms, final SubLObject term_position, final SubLObject formula, final SubLObject domain_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && list_utilities.last_one(term_position).isZero()) {
            Errors.error(gke_main.$str39$OPERATOR_TERMS_PASS_CONSTRAINTS_r, term_position);
        }
        if (NIL != gke_main.$use_rbp_wff_in_gkeP$.getDynamicValue(thread)) {
            SubLObject result = NIL;
            final SubLObject _prev_bind_0 = parsing_vars.$parsing_domain_mt$.currentBinding(thread);
            try {
                parsing_vars.$parsing_domain_mt$.bind(domain_mt, thread);
                result = rbp_wff.rbp_wff_check_formula_arg_position_replacements(formula, term_position, replacement_terms);
            } finally {
                parsing_vars.$parsing_domain_mt$.rebind(_prev_bind_0, thread);
            }
            return result;
        }
        return gke_main.argument_terms_pass_isa_genls_constraints(replacement_terms, term_position, formula, domain_mt);
    }

    public static final SubLObject argument_terms_pass_isa_genls_constraints_alt(SubLObject replacement_terms, SubLObject term_position, SubLObject formula, SubLObject domain_mt) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result_vector = make_vector(length(replacement_terms), UNPROVIDED);
                SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(domain_mt);
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                        {
                            SubLObject already_resourcing_p = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.getDynamicValue(thread);
                            {
                                SubLObject _prev_bind_0_17 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                                SubLObject _prev_bind_1_18 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                                SubLObject _prev_bind_2_19 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_resource_limit(already_resourcing_p, SIX_INTEGER), thread);
                                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(sbhl_marking_vars.possibly_new_marking_resource(already_resourcing_p), thread);
                                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                                    thread.resetMultipleValues();
                                    {
                                        SubLObject isa_constraints = at_utilities.term_position_requires_types_in_relation(term_position, formula, UNPROVIDED);
                                        SubLObject genl_constraints = thread.secondMultipleValue();
                                        thread.resetMultipleValues();
                                        {
                                            SubLObject list_var = NIL;
                                            SubLObject v_term = NIL;
                                            SubLObject n = NIL;
                                            for (list_var = replacement_terms, v_term = list_var.first(), n = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest() , v_term = list_var.first() , n = add(ONE_INTEGER, n)) {
                                                {
                                                    SubLObject problemP = makeBoolean(NIL == cycl_grammar.cycl_denotational_term_p(v_term));
                                                    if (NIL == problemP) {
                                                        {
                                                            SubLObject csome_list_var = genl_constraints;
                                                            SubLObject required_genl = NIL;
                                                            for (required_genl = csome_list_var.first(); !((NIL != problemP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , required_genl = csome_list_var.first()) {
                                                                if (NIL == genls.genlsP(v_term, required_genl, UNPROVIDED, UNPROVIDED)) {
                                                                    problemP = T;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (NIL == problemP) {
                                                        {
                                                            SubLObject csome_list_var = isa_constraints;
                                                            SubLObject required_isa = NIL;
                                                            for (required_isa = csome_list_var.first(); !((NIL != problemP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , required_isa = csome_list_var.first()) {
                                                                if (NIL == isa.isaP(v_term, required_isa, UNPROVIDED, UNPROVIDED)) {
                                                                    problemP = T;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    set_aref(result_vector, n, makeBoolean(NIL == problemP));
                                                }
                                            }
                                        }
                                    }
                                } finally {
                                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2_19, thread);
                                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_1_18, thread);
                                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_0_17, thread);
                                }
                            }
                        }
                    } finally {
                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                    }
                }
                return vector_utilities.vector_elements(result_vector, UNPROVIDED);
            }
        }
    }

    public static SubLObject argument_terms_pass_isa_genls_constraints(final SubLObject replacement_terms, final SubLObject term_position, final SubLObject formula, final SubLObject domain_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject result_vector = make_vector(length(replacement_terms), UNPROVIDED);
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(domain_mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            final SubLObject already_resourcing_p = $resourcing_sbhl_marking_spaces_p$.getDynamicValue(thread);
            final SubLObject _prev_bind_0_$18 = $resourced_sbhl_marking_space_limit$.currentBinding(thread);
            final SubLObject _prev_bind_1_$19 = $resourced_sbhl_marking_spaces$.currentBinding(thread);
            final SubLObject _prev_bind_2_$20 = $resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
            try {
                $resourced_sbhl_marking_space_limit$.bind(determine_resource_limit(already_resourcing_p, SIX_INTEGER), thread);
                $resourced_sbhl_marking_spaces$.bind(possibly_new_marking_resource(already_resourcing_p), thread);
                $resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                thread.resetMultipleValues();
                final SubLObject isa_constraints = at_utilities.term_position_requires_types_in_relation(term_position, formula, UNPROVIDED);
                final SubLObject genl_constraints = thread.secondMultipleValue();
                thread.resetMultipleValues();
                SubLObject list_var = NIL;
                SubLObject v_term = NIL;
                SubLObject n = NIL;
                list_var = replacement_terms;
                v_term = list_var.first();
                for (n = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest() , v_term = list_var.first() , n = add(ONE_INTEGER, n)) {
                    SubLObject problemP = makeBoolean(NIL == cycl_grammar.cycl_denotational_term_p(v_term));
                    if (NIL == problemP) {
                        SubLObject csome_list_var = genl_constraints;
                        SubLObject required_genl = NIL;
                        required_genl = csome_list_var.first();
                        while ((NIL == problemP) && (NIL != csome_list_var)) {
                            if (NIL == genls.genlsP(v_term, required_genl, UNPROVIDED, UNPROVIDED)) {
                                problemP = T;
                            }
                            csome_list_var = csome_list_var.rest();
                            required_genl = csome_list_var.first();
                        } 
                    }
                    if (NIL == problemP) {
                        SubLObject csome_list_var = isa_constraints;
                        SubLObject required_isa = NIL;
                        required_isa = csome_list_var.first();
                        while ((NIL == problemP) && (NIL != csome_list_var)) {
                            if (NIL == isa.isaP(v_term, required_isa, UNPROVIDED, UNPROVIDED)) {
                                problemP = T;
                            }
                            csome_list_var = csome_list_var.rest();
                            required_isa = csome_list_var.first();
                        } 
                    }
                    set_aref(result_vector, n, makeBoolean(NIL == problemP));
                }
            } finally {
                $resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2_$20, thread);
                $resourced_sbhl_marking_spaces$.rebind(_prev_bind_1_$19, thread);
                $resourced_sbhl_marking_space_limit$.rebind(_prev_bind_0_$18, thread);
            }
        } finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return vector_utilities.vector_elements(result_vector, UNPROVIDED);
    }

    /**
     * Finds the arg position of the smallest NAUT that encloses the arg-position, 'arg-pos', in the formula, 'cycl-formula', in the domain, 'domain-mt'. Returns nil if no enclosing NAUT and returns 'arg-pos' unchanged if the term at 'arg-pos' is itself a NAUT.
     */
    @LispMethod(comment = "Finds the arg position of the smallest NAUT that encloses the arg-position, \'arg-pos\', in the formula, \'cycl-formula\', in the domain, \'domain-mt\'. Returns nil if no enclosing NAUT and returns \'arg-pos\' unchanged if the term at \'arg-pos\' is itself a NAUT.")
    public static final SubLObject get_gke_naut_arg_position_alt(SubLObject arg_pos, SubLObject cycl_formula, SubLObject domain_mt) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject ret_arg_pos = arg_pos;
                SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt_relevance_macros.determine_inference_mt_relevance_el_spec(domain_mt));
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                        if (NIL != possibly_naut_p(cycl_utilities.formula_arg_position(cycl_formula, arg_pos, UNPROVIDED))) {
                            ret_arg_pos = arg_pos;
                        } else {
                            {
                                SubLObject possible_naut = NIL;
                                SubLObject end = subtract(length(arg_pos), ONE_INTEGER);
                                SubLObject i = NIL;
                                for (i = ZERO_INTEGER; !i.numGE(end); i = add(i, ONE_INTEGER)) {
                                    arg_pos = list_utilities.remove_last(arg_pos);
                                    possible_naut = cycl_utilities.formula_arg_position(cycl_formula, arg_pos, UNPROVIDED);
                                    if (NIL != cycl_grammar.cycl_nat_p(possible_naut)) {
                                        ret_arg_pos = arg_pos;
                                        i = end;
                                    }
                                }
                            }
                        }
                    } finally {
                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                    }
                }
                return ret_arg_pos;
            }
        }
    }

    /**
     * Finds the arg position of the smallest NAUT that encloses the arg-position, 'arg-pos', in the formula, 'cycl-formula', in the domain, 'domain-mt'. Returns nil if no enclosing NAUT and returns 'arg-pos' unchanged if the term at 'arg-pos' is itself a NAUT.
     */
    @LispMethod(comment = "Finds the arg position of the smallest NAUT that encloses the arg-position, \'arg-pos\', in the formula, \'cycl-formula\', in the domain, \'domain-mt\'. Returns nil if no enclosing NAUT and returns \'arg-pos\' unchanged if the term at \'arg-pos\' is itself a NAUT.")
    public static SubLObject get_gke_naut_arg_position(SubLObject arg_pos, final SubLObject cycl_formula, final SubLObject domain_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject ret_arg_pos = arg_pos;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt_relevance_macros.determine_inference_mt_relevance_el_spec(domain_mt));
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            if (NIL != possibly_naut_p(cycl_utilities.formula_arg_position(cycl_formula, arg_pos, UNPROVIDED))) {
                ret_arg_pos = arg_pos;
            } else {
                SubLObject possible_naut = NIL;
                SubLObject end;
                SubLObject i;
                for (end = subtract(length(arg_pos), ONE_INTEGER), i = NIL, i = ZERO_INTEGER; !i.numGE(end); i = add(i, ONE_INTEGER)) {
                    arg_pos = list_utilities.remove_last(arg_pos);
                    possible_naut = cycl_utilities.formula_arg_position(cycl_formula, arg_pos, UNPROVIDED);
                    if (NIL != cycl_grammar.cycl_nat_p(possible_naut)) {
                        ret_arg_pos = arg_pos;
                        i = end;
                    }
                }
            }
        } finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return ret_arg_pos;
    }

    public static final SubLObject get_gke_is_known_alt(SubLObject cycl_formula, SubLObject domain_mt) {
        return rkf_query_utilities.rkf_known(cycl_formula, domain_mt, UNPROVIDED);
    }

    public static SubLObject get_gke_is_known(final SubLObject cycl_formula, final SubLObject domain_mt) {
        return rkf_query_utilities.rkf_known(cycl_formula, domain_mt, UNPROVIDED);
    }

    /**
     *
     *
     * @param MODE
     * 		keywordp; :HTML or :TEXT.
     * @return 0 STRINGP; paraphrase of QUERY-SENTENCE that looks approximately like it
    would in the GKE, including links.
     * @return 1 LISTP; of PPH supports
     */
    @LispMethod(comment = "@param MODE\r\n\t\tkeywordp; :HTML or :TEXT.\r\n@return 0 STRINGP; paraphrase of QUERY-SENTENCE that looks approximately like it\r\nwould in the GKE, including links.\r\n@return 1 LISTP; of PPH supports")
    public static final SubLObject simulate_gke_query_paraphrase_alt(SubLObject query_sentence, SubLObject mode, SubLObject terseP, SubLObject task) {
        if (mode == UNPROVIDED) {
            mode = $HTML;
        }
        if (terseP == UNPROVIDED) {
            terseP = T;
        }
        if (task == UNPROVIDED) {
            task = $const45$GenericIntelligenceAnalysis_CAE_A;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject paraphrase_mt = query_library_utils.cae_default_paraphrase_mt(task);
                SubLObject nl_domain_mt = query_library_utils.cae_default_nl_domain_mt(task);
                thread.resetMultipleValues();
                {
                    SubLObject javalist = (NIL != terseP) ? ((SubLObject) (com.cyc.cycjava.cycl.gke_main.simulate_gke_query_paraphrase_terse(query_sentence, paraphrase_mt, nl_domain_mt))) : com.cyc.cycjava.cycl.gke_main.simulate_gke_query_paraphrase_verbose(query_sentence, paraphrase_mt, nl_domain_mt);
                    SubLObject supports = thread.secondMultipleValue();
                    thread.resetMultipleValues();
                    {
                        SubLObject pcase_var = mode;
                        if (pcase_var.eql($HTML)) {
                            return values(pph_utilities.pph_javalist_html_string(javalist, UNPROVIDED), supports);
                        } else {
                            if (pcase_var.eql($TEXT)) {
                                return values(pph_utilities.pph_javalist_string(javalist), supports);
                            }
                        }
                    }
                }
            }
            return NIL;
        }
    }

    /**
     *
     *
     * @param MODE
     * 		keywordp; :HTML or :TEXT.
     * @return 0 STRINGP; paraphrase of QUERY-SENTENCE that looks approximately like it
    would in the GKE, including links.
     * @return 1 LISTP; of PPH supports
     */
    @LispMethod(comment = "@param MODE\r\n\t\tkeywordp; :HTML or :TEXT.\r\n@return 0 STRINGP; paraphrase of QUERY-SENTENCE that looks approximately like it\r\nwould in the GKE, including links.\r\n@return 1 LISTP; of PPH supports")
    public static SubLObject simulate_gke_query_paraphrase(final SubLObject query_sentence, SubLObject mode, SubLObject terseP, SubLObject task) {
        if (mode == UNPROVIDED) {
            mode = $HTML;
        }
        if (terseP == UNPROVIDED) {
            terseP = T;
        }
        if (task == UNPROVIDED) {
            task = gke_main.$const43$GenericIntelligenceAnalysis_CAE_A;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject paraphrase_mt = query_library_utils.cae_default_paraphrase_mt(task);
        final SubLObject nl_domain_mt = query_library_utils.cae_default_nl_domain_mt(task);
        thread.resetMultipleValues();
        final SubLObject javalist = (NIL != terseP) ? gke_main.simulate_gke_query_paraphrase_terse(query_sentence, paraphrase_mt, nl_domain_mt) : gke_main.simulate_gke_query_paraphrase_verbose(query_sentence, paraphrase_mt, nl_domain_mt);
        final SubLObject supports = thread.secondMultipleValue();
        thread.resetMultipleValues();
        final SubLObject pcase_var = mode;
        if (pcase_var.eql($HTML)) {
            return values(pph_utilities.pph_javalist_html_string(javalist, UNPROVIDED), supports);
        }
        if (pcase_var.eql($TEXT)) {
            return values(pph_utilities.pph_javalist_string(javalist), supports);
        }
        return NIL;
    }

    public static final SubLObject simulate_ccf_paraphrase_alt(SubLObject query_sentence, SubLObject mode, SubLObject terse) {
        if (mode == UNPROVIDED) {
            mode = $HTML;
        }
        if (terse == UNPROVIDED) {
            terse = T;
        }
        return html_markup(com.cyc.cycjava.cycl.gke_main.simulate_gke_query_paraphrase(query_sentence, mode, terse, $const47$GenericMedicalResearchTask_Allotm));
    }

    public static SubLObject simulate_ccf_paraphrase(final SubLObject query_sentence, SubLObject mode, SubLObject terse) {
        if (mode == UNPROVIDED) {
            mode = $HTML;
        }
        if (terse == UNPROVIDED) {
            terse = T;
        }
        return html_markup(gke_main.simulate_gke_query_paraphrase(query_sentence, mode, terse, gke_main.$const45$GenericMedicalResearchTask_Allotm));
    }

    public static final SubLObject simulate_ccf3_paraphrase_alt(SubLObject query_sentence, SubLObject mode, SubLObject terse) {
        if (mode == UNPROVIDED) {
            mode = $HTML;
        }
        if (terse == UNPROVIDED) {
            terse = T;
        }
        return html_markup(com.cyc.cycjava.cycl.gke_main.simulate_gke3_query_paraphrase(query_sentence, mode, terse, $const47$GenericMedicalResearchTask_Allotm));
    }

    public static SubLObject simulate_ccf3_paraphrase(final SubLObject query_sentence, SubLObject mode, SubLObject terse) {
        if (mode == UNPROVIDED) {
            mode = $HTML;
        }
        if (terse == UNPROVIDED) {
            terse = T;
        }
        return html_markup(gke_main.simulate_gke3_query_paraphrase(query_sentence, mode, terse, gke_main.$const45$GenericMedicalResearchTask_Allotm));
    }

    public static final SubLObject simulate_gke_query_paraphrase_terse_alt(SubLObject query_sentence, SubLObject paraphrase_mt, SubLObject nl_domain_mt) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject javalist = NIL;
                SubLObject supports = NIL;
                {
                    SubLObject _prev_bind_0 = pph_vars.$pph_terse_modeP$.currentBinding(thread);
                    SubLObject _prev_bind_1 = pph_vars.$pph_use_bulleted_listsP$.currentBinding(thread);
                    SubLObject _prev_bind_2 = pph_vars.$pph_replace_bulleted_list_tagsP$.currentBinding(thread);
                    SubLObject _prev_bind_3 = pph_vars.$paraphrase_precision$.currentBinding(thread);
                    SubLObject _prev_bind_4 = pph_vars.$pph_terse_mt_scopeP$.currentBinding(thread);
                    SubLObject _prev_bind_5 = pph_vars.$pph_maximize_linksP$.currentBinding(thread);
                    SubLObject _prev_bind_6 = pph_vars.$pph_link_arg0P$.currentBinding(thread);
                    SubLObject _prev_bind_7 = pph_vars.$pph_consolidate_output_list_for_nartP$.currentBinding(thread);
                    SubLObject _prev_bind_8 = pph_vars.$pph_use_smart_variable_replacementP$.currentBinding(thread);
                    SubLObject _prev_bind_9 = pph_vars.$pph_demerit_cutoff$.currentBinding(thread);
                    SubLObject _prev_bind_10 = pph_vars.$pph_use_title_capitalizationP$.currentBinding(thread);
                    SubLObject _prev_bind_11 = pph_vars.$pph_use_indexical_datesP$.currentBinding(thread);
                    SubLObject _prev_bind_12 = pph_vars.$pph_addressee$.currentBinding(thread);
                    SubLObject _prev_bind_13 = pph_vars.$pph_speaker$.currentBinding(thread);
                    SubLObject _prev_bind_14 = pph_vars.$pph_quantify_varsP$.currentBinding(thread);
                    try {
                        pph_vars.$pph_terse_modeP$.bind(T, thread);
                        pph_vars.$pph_use_bulleted_listsP$.bind(T, thread);
                        pph_vars.$pph_replace_bulleted_list_tagsP$.bind(T, thread);
                        pph_vars.$paraphrase_precision$.bind(NIL, thread);
                        pph_vars.$pph_terse_mt_scopeP$.bind(T, thread);
                        pph_vars.$pph_maximize_linksP$.bind(NIL, thread);
                        pph_vars.$pph_link_arg0P$.bind(T, thread);
                        pph_vars.$pph_consolidate_output_list_for_nartP$.bind(NIL, thread);
                        pph_vars.$pph_use_smart_variable_replacementP$.bind(T, thread);
                        pph_vars.$pph_demerit_cutoff$.bind(number_utilities.positive_infinity(), thread);
                        pph_vars.$pph_use_title_capitalizationP$.bind(NIL, thread);
                        pph_vars.$pph_use_indexical_datesP$.bind(NIL, thread);
                        pph_vars.$pph_addressee$.bind($UNKNOWN, thread);
                        pph_vars.$pph_speaker$.bind($UNKNOWN, thread);
                        pph_vars.$pph_quantify_varsP$.bind(NIL, thread);
                        thread.resetMultipleValues();
                        {
                            SubLObject the_javalist = pph_main.generate_phrase_for_java(query_sentence, $DEFAULT, $DECLARATIVE, paraphrase_mt, nl_domain_mt, UNPROVIDED);
                            SubLObject ignore_me = thread.secondMultipleValue();
                            SubLObject the_justification = thread.thirdMultipleValue();
                            thread.resetMultipleValues();
                            javalist = the_javalist;
                            supports = the_justification;
                        }
                    } finally {
                        pph_vars.$pph_quantify_varsP$.rebind(_prev_bind_14, thread);
                        pph_vars.$pph_speaker$.rebind(_prev_bind_13, thread);
                        pph_vars.$pph_addressee$.rebind(_prev_bind_12, thread);
                        pph_vars.$pph_use_indexical_datesP$.rebind(_prev_bind_11, thread);
                        pph_vars.$pph_use_title_capitalizationP$.rebind(_prev_bind_10, thread);
                        pph_vars.$pph_demerit_cutoff$.rebind(_prev_bind_9, thread);
                        pph_vars.$pph_use_smart_variable_replacementP$.rebind(_prev_bind_8, thread);
                        pph_vars.$pph_consolidate_output_list_for_nartP$.rebind(_prev_bind_7, thread);
                        pph_vars.$pph_link_arg0P$.rebind(_prev_bind_6, thread);
                        pph_vars.$pph_maximize_linksP$.rebind(_prev_bind_5, thread);
                        pph_vars.$pph_terse_mt_scopeP$.rebind(_prev_bind_4, thread);
                        pph_vars.$paraphrase_precision$.rebind(_prev_bind_3, thread);
                        pph_vars.$pph_replace_bulleted_list_tagsP$.rebind(_prev_bind_2, thread);
                        pph_vars.$pph_use_bulleted_listsP$.rebind(_prev_bind_1, thread);
                        pph_vars.$pph_terse_modeP$.rebind(_prev_bind_0, thread);
                    }
                }
                return values(javalist, supports);
            }
        }
    }

    public static SubLObject simulate_gke_query_paraphrase_terse(final SubLObject query_sentence, final SubLObject paraphrase_mt, final SubLObject nl_domain_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject javalist = NIL;
        SubLObject supports = NIL;
        final SubLObject _prev_bind_0 = pph_vars.$pph_terse_modeP$.currentBinding(thread);
        final SubLObject _prev_bind_2 = pph_vars.$pph_use_bulleted_listsP$.currentBinding(thread);
        final SubLObject _prev_bind_3 = pph_vars.$pph_replace_bulleted_list_tagsP$.currentBinding(thread);
        final SubLObject _prev_bind_4 = pph_vars.$paraphrase_precision$.currentBinding(thread);
        final SubLObject _prev_bind_5 = pph_vars.$pph_terse_mt_scopeP$.currentBinding(thread);
        final SubLObject _prev_bind_6 = pph_vars.$pph_maximize_linksP$.currentBinding(thread);
        final SubLObject _prev_bind_7 = pph_vars.$pph_link_arg0P$.currentBinding(thread);
        final SubLObject _prev_bind_8 = pph_vars.$pph_consolidate_output_list_for_natP$.currentBinding(thread);
        final SubLObject _prev_bind_9 = pph_vars.$pph_use_smart_variable_replacementP$.currentBinding(thread);
        final SubLObject _prev_bind_10 = pph_vars.$pph_demerit_cutoff$.currentBinding(thread);
        final SubLObject _prev_bind_11 = pph_vars.$pph_use_title_capitalizationP$.currentBinding(thread);
        final SubLObject _prev_bind_12 = pph_vars.$pph_use_indexical_datesP$.currentBinding(thread);
        final SubLObject _prev_bind_13 = pph_vars.$pph_addressee$.currentBinding(thread);
        final SubLObject _prev_bind_14 = pph_vars.$pph_speaker$.currentBinding(thread);
        final SubLObject _prev_bind_15 = pph_vars.$pph_quantify_varsP$.currentBinding(thread);
        try {
            pph_vars.$pph_terse_modeP$.bind(T, thread);
            pph_vars.$pph_use_bulleted_listsP$.bind(T, thread);
            pph_vars.$pph_replace_bulleted_list_tagsP$.bind(T, thread);
            pph_vars.$paraphrase_precision$.bind(NIL, thread);
            pph_vars.$pph_terse_mt_scopeP$.bind(T, thread);
            pph_vars.$pph_maximize_linksP$.bind(NIL, thread);
            pph_vars.$pph_link_arg0P$.bind(T, thread);
            pph_vars.$pph_consolidate_output_list_for_natP$.bind(NIL, thread);
            pph_vars.$pph_use_smart_variable_replacementP$.bind(T, thread);
            pph_vars.$pph_demerit_cutoff$.bind(number_utilities.positive_infinity(), thread);
            pph_vars.$pph_use_title_capitalizationP$.bind(NIL, thread);
            pph_vars.$pph_use_indexical_datesP$.bind(NIL, thread);
            pph_vars.$pph_addressee$.bind($UNKNOWN, thread);
            pph_vars.$pph_speaker$.bind($UNKNOWN, thread);
            pph_vars.$pph_quantify_varsP$.bind(NIL, thread);
            thread.resetMultipleValues();
            final SubLObject the_javalist = pph_main.generate_phrase_for_java(query_sentence, $DEFAULT, $DECLARATIVE, paraphrase_mt, nl_domain_mt, UNPROVIDED);
            final SubLObject ignore_me = thread.secondMultipleValue();
            final SubLObject the_justification = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            javalist = the_javalist;
            supports = the_justification;
        } finally {
            pph_vars.$pph_quantify_varsP$.rebind(_prev_bind_15, thread);
            pph_vars.$pph_speaker$.rebind(_prev_bind_14, thread);
            pph_vars.$pph_addressee$.rebind(_prev_bind_13, thread);
            pph_vars.$pph_use_indexical_datesP$.rebind(_prev_bind_12, thread);
            pph_vars.$pph_use_title_capitalizationP$.rebind(_prev_bind_11, thread);
            pph_vars.$pph_demerit_cutoff$.rebind(_prev_bind_10, thread);
            pph_vars.$pph_use_smart_variable_replacementP$.rebind(_prev_bind_9, thread);
            pph_vars.$pph_consolidate_output_list_for_natP$.rebind(_prev_bind_8, thread);
            pph_vars.$pph_link_arg0P$.rebind(_prev_bind_7, thread);
            pph_vars.$pph_maximize_linksP$.rebind(_prev_bind_6, thread);
            pph_vars.$pph_terse_mt_scopeP$.rebind(_prev_bind_5, thread);
            pph_vars.$paraphrase_precision$.rebind(_prev_bind_4, thread);
            pph_vars.$pph_replace_bulleted_list_tagsP$.rebind(_prev_bind_3, thread);
            pph_vars.$pph_use_bulleted_listsP$.rebind(_prev_bind_2, thread);
            pph_vars.$pph_terse_modeP$.rebind(_prev_bind_0, thread);
        }
        return values(javalist, supports);
    }

    public static final SubLObject simulate_gke_query_paraphrase_verbose_alt(SubLObject query_sentence, SubLObject paraphrase_mt, SubLObject nl_domain_mt) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject javalist = NIL;
                SubLObject supports = NIL;
                {
                    SubLObject _prev_bind_0 = pph_vars.$pph_terse_modeP$.currentBinding(thread);
                    SubLObject _prev_bind_1 = pph_vars.$pph_use_bulleted_listsP$.currentBinding(thread);
                    SubLObject _prev_bind_2 = pph_vars.$pph_replace_bulleted_list_tagsP$.currentBinding(thread);
                    SubLObject _prev_bind_3 = pph_vars.$paraphrase_precision$.currentBinding(thread);
                    SubLObject _prev_bind_4 = pph_vars.$pph_terse_mt_scopeP$.currentBinding(thread);
                    SubLObject _prev_bind_5 = pph_vars.$pph_maximize_linksP$.currentBinding(thread);
                    SubLObject _prev_bind_6 = pph_vars.$pph_link_arg0P$.currentBinding(thread);
                    SubLObject _prev_bind_7 = pph_vars.$pph_consolidate_output_list_for_nartP$.currentBinding(thread);
                    SubLObject _prev_bind_8 = pph_vars.$pph_use_smart_variable_replacementP$.currentBinding(thread);
                    SubLObject _prev_bind_9 = pph_vars.$pph_demerit_cutoff$.currentBinding(thread);
                    SubLObject _prev_bind_10 = pph_vars.$pph_use_title_capitalizationP$.currentBinding(thread);
                    SubLObject _prev_bind_11 = pph_vars.$pph_use_indexical_datesP$.currentBinding(thread);
                    SubLObject _prev_bind_12 = pph_vars.$pph_addressee$.currentBinding(thread);
                    SubLObject _prev_bind_13 = pph_vars.$pph_speaker$.currentBinding(thread);
                    SubLObject _prev_bind_14 = pph_vars.$pph_quantify_varsP$.currentBinding(thread);
                    try {
                        pph_vars.$pph_terse_modeP$.bind(NIL, thread);
                        pph_vars.$pph_use_bulleted_listsP$.bind(T, thread);
                        pph_vars.$pph_replace_bulleted_list_tagsP$.bind(T, thread);
                        pph_vars.$paraphrase_precision$.bind(NIL, thread);
                        pph_vars.$pph_terse_mt_scopeP$.bind(T, thread);
                        pph_vars.$pph_maximize_linksP$.bind(T, thread);
                        pph_vars.$pph_link_arg0P$.bind(T, thread);
                        pph_vars.$pph_consolidate_output_list_for_nartP$.bind(NIL, thread);
                        pph_vars.$pph_use_smart_variable_replacementP$.bind(T, thread);
                        pph_vars.$pph_demerit_cutoff$.bind(number_utilities.positive_infinity(), thread);
                        pph_vars.$pph_use_title_capitalizationP$.bind(NIL, thread);
                        pph_vars.$pph_use_indexical_datesP$.bind(NIL, thread);
                        pph_vars.$pph_addressee$.bind($UNKNOWN, thread);
                        pph_vars.$pph_speaker$.bind($UNKNOWN, thread);
                        pph_vars.$pph_quantify_varsP$.bind(NIL, thread);
                        thread.resetMultipleValues();
                        {
                            SubLObject the_javalist = pph_main.generate_phrase_for_java(query_sentence, $DEFAULT, $DECLARATIVE, paraphrase_mt, nl_domain_mt, UNPROVIDED);
                            SubLObject ignore_me = thread.secondMultipleValue();
                            SubLObject the_justification = thread.thirdMultipleValue();
                            thread.resetMultipleValues();
                            javalist = the_javalist;
                            supports = the_justification;
                        }
                    } finally {
                        pph_vars.$pph_quantify_varsP$.rebind(_prev_bind_14, thread);
                        pph_vars.$pph_speaker$.rebind(_prev_bind_13, thread);
                        pph_vars.$pph_addressee$.rebind(_prev_bind_12, thread);
                        pph_vars.$pph_use_indexical_datesP$.rebind(_prev_bind_11, thread);
                        pph_vars.$pph_use_title_capitalizationP$.rebind(_prev_bind_10, thread);
                        pph_vars.$pph_demerit_cutoff$.rebind(_prev_bind_9, thread);
                        pph_vars.$pph_use_smart_variable_replacementP$.rebind(_prev_bind_8, thread);
                        pph_vars.$pph_consolidate_output_list_for_nartP$.rebind(_prev_bind_7, thread);
                        pph_vars.$pph_link_arg0P$.rebind(_prev_bind_6, thread);
                        pph_vars.$pph_maximize_linksP$.rebind(_prev_bind_5, thread);
                        pph_vars.$pph_terse_mt_scopeP$.rebind(_prev_bind_4, thread);
                        pph_vars.$paraphrase_precision$.rebind(_prev_bind_3, thread);
                        pph_vars.$pph_replace_bulleted_list_tagsP$.rebind(_prev_bind_2, thread);
                        pph_vars.$pph_use_bulleted_listsP$.rebind(_prev_bind_1, thread);
                        pph_vars.$pph_terse_modeP$.rebind(_prev_bind_0, thread);
                    }
                }
                return values(javalist, supports);
            }
        }
    }

    public static SubLObject simulate_gke_query_paraphrase_verbose(final SubLObject query_sentence, final SubLObject paraphrase_mt, final SubLObject nl_domain_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject javalist = NIL;
        SubLObject supports = NIL;
        final SubLObject _prev_bind_0 = pph_vars.$pph_terse_modeP$.currentBinding(thread);
        final SubLObject _prev_bind_2 = pph_vars.$pph_use_bulleted_listsP$.currentBinding(thread);
        final SubLObject _prev_bind_3 = pph_vars.$pph_replace_bulleted_list_tagsP$.currentBinding(thread);
        final SubLObject _prev_bind_4 = pph_vars.$paraphrase_precision$.currentBinding(thread);
        final SubLObject _prev_bind_5 = pph_vars.$pph_terse_mt_scopeP$.currentBinding(thread);
        final SubLObject _prev_bind_6 = pph_vars.$pph_maximize_linksP$.currentBinding(thread);
        final SubLObject _prev_bind_7 = pph_vars.$pph_link_arg0P$.currentBinding(thread);
        final SubLObject _prev_bind_8 = pph_vars.$pph_consolidate_output_list_for_natP$.currentBinding(thread);
        final SubLObject _prev_bind_9 = pph_vars.$pph_use_smart_variable_replacementP$.currentBinding(thread);
        final SubLObject _prev_bind_10 = pph_vars.$pph_demerit_cutoff$.currentBinding(thread);
        final SubLObject _prev_bind_11 = pph_vars.$pph_use_title_capitalizationP$.currentBinding(thread);
        final SubLObject _prev_bind_12 = pph_vars.$pph_use_indexical_datesP$.currentBinding(thread);
        final SubLObject _prev_bind_13 = pph_vars.$pph_addressee$.currentBinding(thread);
        final SubLObject _prev_bind_14 = pph_vars.$pph_speaker$.currentBinding(thread);
        final SubLObject _prev_bind_15 = pph_vars.$pph_quantify_varsP$.currentBinding(thread);
        try {
            pph_vars.$pph_terse_modeP$.bind(NIL, thread);
            pph_vars.$pph_use_bulleted_listsP$.bind(T, thread);
            pph_vars.$pph_replace_bulleted_list_tagsP$.bind(T, thread);
            pph_vars.$paraphrase_precision$.bind(NIL, thread);
            pph_vars.$pph_terse_mt_scopeP$.bind(T, thread);
            pph_vars.$pph_maximize_linksP$.bind(T, thread);
            pph_vars.$pph_link_arg0P$.bind(T, thread);
            pph_vars.$pph_consolidate_output_list_for_natP$.bind(NIL, thread);
            pph_vars.$pph_use_smart_variable_replacementP$.bind(T, thread);
            pph_vars.$pph_demerit_cutoff$.bind(number_utilities.positive_infinity(), thread);
            pph_vars.$pph_use_title_capitalizationP$.bind(NIL, thread);
            pph_vars.$pph_use_indexical_datesP$.bind(NIL, thread);
            pph_vars.$pph_addressee$.bind($UNKNOWN, thread);
            pph_vars.$pph_speaker$.bind($UNKNOWN, thread);
            pph_vars.$pph_quantify_varsP$.bind(NIL, thread);
            thread.resetMultipleValues();
            final SubLObject the_javalist = pph_main.generate_phrase_for_java(query_sentence, $DEFAULT, $DECLARATIVE, paraphrase_mt, nl_domain_mt, UNPROVIDED);
            final SubLObject ignore_me = thread.secondMultipleValue();
            final SubLObject the_justification = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            javalist = the_javalist;
            supports = the_justification;
        } finally {
            pph_vars.$pph_quantify_varsP$.rebind(_prev_bind_15, thread);
            pph_vars.$pph_speaker$.rebind(_prev_bind_14, thread);
            pph_vars.$pph_addressee$.rebind(_prev_bind_13, thread);
            pph_vars.$pph_use_indexical_datesP$.rebind(_prev_bind_12, thread);
            pph_vars.$pph_use_title_capitalizationP$.rebind(_prev_bind_11, thread);
            pph_vars.$pph_demerit_cutoff$.rebind(_prev_bind_10, thread);
            pph_vars.$pph_use_smart_variable_replacementP$.rebind(_prev_bind_9, thread);
            pph_vars.$pph_consolidate_output_list_for_natP$.rebind(_prev_bind_8, thread);
            pph_vars.$pph_link_arg0P$.rebind(_prev_bind_7, thread);
            pph_vars.$pph_maximize_linksP$.rebind(_prev_bind_6, thread);
            pph_vars.$pph_terse_mt_scopeP$.rebind(_prev_bind_5, thread);
            pph_vars.$paraphrase_precision$.rebind(_prev_bind_4, thread);
            pph_vars.$pph_replace_bulleted_list_tagsP$.rebind(_prev_bind_3, thread);
            pph_vars.$pph_use_bulleted_listsP$.rebind(_prev_bind_2, thread);
            pph_vars.$pph_terse_modeP$.rebind(_prev_bind_0, thread);
        }
        return values(javalist, supports);
    }

    /**
     *
     *
     * @param MODE
     * 		keywordp; :HTML or :TEXT.
     * @return 0 STRINGP; paraphrase of QUERY-SENTENCE that looks approximately like it
    would in the GKE, including links.
     * @return 1 LISTP; of PPH supports
     */
    @LispMethod(comment = "@param MODE\r\n\t\tkeywordp; :HTML or :TEXT.\r\n@return 0 STRINGP; paraphrase of QUERY-SENTENCE that looks approximately like it\r\nwould in the GKE, including links.\r\n@return 1 LISTP; of PPH supports")
    public static final SubLObject simulate_gke3_query_paraphrase_alt(SubLObject query_sentence, SubLObject mode, SubLObject terseP, SubLObject task) {
        if (mode == UNPROVIDED) {
            mode = $HTML;
        }
        if (terseP == UNPROVIDED) {
            terseP = T;
        }
        if (task == UNPROVIDED) {
            task = $const45$GenericIntelligenceAnalysis_CAE_A;
        }
        {
            SubLObject params = nl_generation_api.new_pph_parameters(UNPROVIDED);
            SubLObject params_20 = params;
            pph_parameter_declarations.set_pph_lexical_context_internal(params_20, query_library_utils.cae_default_paraphrase_mt(task));
            {
                SubLObject params_21 = params;
                pph_parameter_declarations.set_pph_semantic_mt_internal(params_21, query_library_utils.cae_default_nl_domain_mt(task));
            }
            {
                SubLObject params_22 = params;
                pph_parameter_declarations.set_prefer_terse_paraphraseP_internal(params_22, terseP);
            }
            return com.cyc.cycjava.cycl.gke_main.simulate_gke3_paraphrase_guts(query_sentence, params);
        }
    }

    /**
     *
     *
     * @param MODE
     * 		keywordp; :HTML or :TEXT.
     * @return 0 STRINGP; paraphrase of QUERY-SENTENCE that looks approximately like it
    would in the GKE, including links.
     * @return 1 LISTP; of PPH supports
     */
    @LispMethod(comment = "@param MODE\r\n\t\tkeywordp; :HTML or :TEXT.\r\n@return 0 STRINGP; paraphrase of QUERY-SENTENCE that looks approximately like it\r\nwould in the GKE, including links.\r\n@return 1 LISTP; of PPH supports")
    public static SubLObject simulate_gke3_query_paraphrase(final SubLObject query_sentence, SubLObject mode, SubLObject terseP, SubLObject task) {
        if (mode == UNPROVIDED) {
            mode = $HTML;
        }
        if (terseP == UNPROVIDED) {
            terseP = T;
        }
        if (task == UNPROVIDED) {
            task = gke_main.$const43$GenericIntelligenceAnalysis_CAE_A;
        }
        final SubLObject params_$21;
        final SubLObject params = params_$21 = nl_generation_api.new_pph_parameters(UNPROVIDED);
        pph_parameter_declarations.set_pph_lexical_context_internal(params_$21, query_library_utils.cae_default_paraphrase_mt(task));
        final SubLObject params_$22 = params;
        pph_parameter_declarations.set_pph_semantic_mt_internal(params_$22, query_library_utils.cae_default_nl_domain_mt(task));
        final SubLObject params_$23 = params;
        pph_parameter_declarations.set_prefer_terse_paraphraseP_internal(params_$23, terseP);
        return gke_main.simulate_gke3_paraphrase_guts(query_sentence, params);
    }

    public static final SubLObject simulate_gke3_paraphrase_guts_alt(SubLObject query_sentence, SubLObject params) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject output_string = NIL;
                SubLObject params_23 = params;
                pph_parameter_declarations.set_maximize_linksP_internal(params_23, NIL);
                {
                    SubLObject params_24 = params;
                    pph_parameter_declarations.set_use_smart_variable_replacementP_internal(params_24, T);
                }
                {
                    SubLObject params_25 = params;
                    pph_parameter_declarations.set_demerit_cutoff_internal(params_25, number_utilities.positive_infinity());
                }
                {
                    SubLObject params_26 = params;
                    pph_parameter_declarations.set_use_title_capitalizationP_internal(params_26, NIL);
                }
                {
                    SubLObject params_27 = params;
                    pph_parameter_declarations.set_use_indexical_datesP_internal(params_27, NIL);
                }
                {
                    SubLObject params_28 = params;
                    pph_parameter_declarations.set_quantify_variablesP_internal(params_28, NIL);
                }
                {
                    SubLObject params_29 = params;
                    pph_parameter_declarations.set_pph_sentential_force_internal(params_29, $NONE);
                }
                {
                    SubLObject _prev_bind_0 = pph_vars.$paraphrase_precision$.currentBinding(thread);
                    SubLObject _prev_bind_1 = pph_vars.$pph_terse_mt_scopeP$.currentBinding(thread);
                    SubLObject _prev_bind_2 = pph_vars.$pph_consolidate_output_list_for_nartP$.currentBinding(thread);
                    SubLObject _prev_bind_3 = pph_vars.$pph_addressee$.currentBinding(thread);
                    SubLObject _prev_bind_4 = pph_vars.$pph_speaker$.currentBinding(thread);
                    try {
                        pph_vars.$paraphrase_precision$.bind(NIL, thread);
                        pph_vars.$pph_terse_mt_scopeP$.bind(T, thread);
                        pph_vars.$pph_consolidate_output_list_for_nartP$.bind(NIL, thread);
                        pph_vars.$pph_addressee$.bind($UNKNOWN, thread);
                        pph_vars.$pph_speaker$.bind($UNKNOWN, thread);
                        {
                            SubLObject stream = NIL;
                            try {
                                stream = make_private_string_output_stream();
                                if (NIL != cycl_open_formulaP(query_sentence)) {
                                    format(stream, $str_alt52$Show_all_values_of_);
                                    com.cyc.cycjava.cycl.gke_main.gke3_paraphrase_open_vars(stream, query_sentence, params);
                                    format(stream, $str_alt53$_such_that__);
                                } else {
                                    format(stream, $str_alt54$Is_it_true_that__);
                                }
                                com.cyc.cycjava.cycl.gke_main.gke3_paraphrase_guts_int(stream, query_sentence, params, TWO_INTEGER);
                                output_string = get_output_stream_string(stream);
                            } finally {
                                {
                                    SubLObject _prev_bind_0_30 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                        close(stream, UNPROVIDED);
                                    } finally {
                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_30, thread);
                                    }
                                }
                            }
                        }
                    } finally {
                        pph_vars.$pph_speaker$.rebind(_prev_bind_4, thread);
                        pph_vars.$pph_addressee$.rebind(_prev_bind_3, thread);
                        pph_vars.$pph_consolidate_output_list_for_nartP$.rebind(_prev_bind_2, thread);
                        pph_vars.$pph_terse_mt_scopeP$.rebind(_prev_bind_1, thread);
                        pph_vars.$paraphrase_precision$.rebind(_prev_bind_0, thread);
                    }
                }
                return output_string;
            }
        }
    }

    public static SubLObject simulate_gke3_paraphrase_guts(final SubLObject query_sentence, final SubLObject params) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject output_string = NIL;
        pph_parameter_declarations.set_maximize_linksP_internal(params, NIL);
        pph_parameter_declarations.set_use_smart_variable_replacementP_internal(params, T);
        pph_parameter_declarations.set_demerit_cutoff_internal(params, number_utilities.positive_infinity());
        pph_parameter_declarations.set_use_title_capitalizationP_internal(params, NIL);
        pph_parameter_declarations.set_use_indexical_datesP_internal(params, NIL);
        pph_parameter_declarations.set_quantify_variablesP_internal(params, NIL);
        pph_parameter_declarations.set_pph_sentential_force_internal(params, $NONE);
        final SubLObject _prev_bind_0 = pph_vars.$paraphrase_precision$.currentBinding(thread);
        final SubLObject _prev_bind_2 = pph_vars.$pph_terse_mt_scopeP$.currentBinding(thread);
        final SubLObject _prev_bind_3 = pph_vars.$pph_consolidate_output_list_for_natP$.currentBinding(thread);
        final SubLObject _prev_bind_4 = pph_vars.$pph_addressee$.currentBinding(thread);
        final SubLObject _prev_bind_5 = pph_vars.$pph_speaker$.currentBinding(thread);
        try {
            pph_vars.$paraphrase_precision$.bind(NIL, thread);
            pph_vars.$pph_terse_mt_scopeP$.bind(T, thread);
            pph_vars.$pph_consolidate_output_list_for_natP$.bind(NIL, thread);
            pph_vars.$pph_addressee$.bind($UNKNOWN, thread);
            pph_vars.$pph_speaker$.bind($UNKNOWN, thread);
            SubLObject stream = NIL;
            try {
                stream = make_private_string_output_stream();
                if (NIL != collection_defns.cycl_open_formulaP(query_sentence)) {
                    format(stream, gke_main.$$$Show_all_values_of_);
                    gke_main.gke3_paraphrase_open_vars(stream, query_sentence, params);
                    format(stream, gke_main.$str51$_such_that__);
                } else {
                    format(stream, gke_main.$str52$Is_it_true_that__);
                }
                gke_main.gke3_paraphrase_guts_int(stream, query_sentence, params, TWO_INTEGER);
                output_string = get_output_stream_string(stream);
            } finally {
                final SubLObject _prev_bind_0_$31 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values = getValuesAsVector();
                    close(stream, UNPROVIDED);
                    restoreValuesFromVector(_values);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$31, thread);
                }
            }
        } finally {
            pph_vars.$pph_speaker$.rebind(_prev_bind_5, thread);
            pph_vars.$pph_addressee$.rebind(_prev_bind_4, thread);
            pph_vars.$pph_consolidate_output_list_for_natP$.rebind(_prev_bind_3, thread);
            pph_vars.$pph_terse_mt_scopeP$.rebind(_prev_bind_2, thread);
            pph_vars.$paraphrase_precision$.rebind(_prev_bind_0, thread);
        }
        return output_string;
    }

    public static final SubLObject gke3_paraphrase_open_vars_alt(SubLObject stream, SubLObject query_sentence, SubLObject params) {
        {
            SubLObject open_vars = sentence_free_variables(query_sentence, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject var_term = cons($$TheCoordinationSet, open_vars);
            SubLObject pph_map = nl_generation_api.cycl_term_to_nl_internal(var_term, params).first();
            SubLObject string = nl_generation_api.pph_output_map_to_html_internal(pph_map, PPH_ANCHOR_TAGS_FOR_TERM, T, ZERO_INTEGER, T, NIL);
            return princ(string, stream);
        }
    }

    public static SubLObject gke3_paraphrase_open_vars(final SubLObject stream, final SubLObject query_sentence, final SubLObject params) {
        final SubLObject open_vars = sentence_free_variables(query_sentence, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject var_term = cons(gke_main.$$TheCoordinationSet, open_vars);
        final SubLObject pph_map = nl_generation_api.cycl_term_to_nl_internal(var_term, params).first();
        final SubLObject string = nl_generation_api.pph_output_map_to_html_internal(pph_map, gke_main.PPH_ANCHOR_TAGS_FOR_TERM, T, ZERO_INTEGER, T, NIL);
        return princ(string, stream);
    }

    public static final SubLObject gke3_paraphrase_guts_int_alt(SubLObject stream, SubLObject sentence, SubLObject params, SubLObject depth) {
        if (depth == UNPROVIDED) {
            depth = ZERO_INTEGER;
        }
        if (cycl_utilities.formula_arg0(sentence) == $$thereExists) {
            com.cyc.cycjava.cycl.gke_main.gke3_paraphrase_guts_int(stream, cycl_utilities.formula_arg2(sentence, UNPROVIDED), params, depth);
        } else {
            if (NIL != com.cyc.cycjava.cycl.gke_main.starts_with_gke3_connectiveP(sentence)) {
                {
                    SubLObject connective = com.cyc.cycjava.cycl.gke_main.starts_with_gke3_connectiveP(sentence);
                    if (!((NIL != list_utilities.lengthE(sentence, TWO_INTEGER, UNPROVIDED)) && (NIL == member(connective, $list_alt58, UNPROVIDED, UNPROVIDED)))) {
                        string_utilities.indent(stream, depth);
                        princ(com.cyc.cycjava.cycl.gke_main.gke3_string_for_conjunction(connective), stream);
                        terpri(stream);
                        depth = add(depth, TWO_INTEGER);
                        if (connective == $NOR) {
                            sentence = cycl_utilities.formula_arg1(sentence, UNPROVIDED);
                        }
                    }
                    {
                        SubLObject args = cycl_utilities.formula_args(sentence, $IGNORE);
                        SubLObject cdolist_list_var = args;
                        SubLObject conjunct = NIL;
                        for (conjunct = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , conjunct = cdolist_list_var.first()) {
                            com.cyc.cycjava.cycl.gke_main.gke3_paraphrase_guts_int(stream, conjunct, params, depth);
                        }
                    }
                    return NIL;
                }
            } else {
                if (NIL != cycl_atomic_sentenceP(sentence)) {
                    {
                        SubLObject pph_map = nl_generation_api.cycl_term_to_nl_internal(sentence, params).first();
                        SubLObject string = nl_generation_api.pph_output_map_to_html_internal(pph_map, PPH_ANCHOR_TAGS_FOR_TERM, T, ZERO_INTEGER, T, NIL);
                        string_utilities.indent(stream, depth);
                        princ(string, stream);
                        terpri(stream);
                    }
                }
            }
        }
        return NIL;
    }

    public static SubLObject gke3_paraphrase_guts_int(final SubLObject stream, SubLObject sentence, final SubLObject params, SubLObject depth) {
        if (depth == UNPROVIDED) {
            depth = ZERO_INTEGER;
        }
        if (cycl_utilities.formula_arg0(sentence).eql(gke_main.$$thereExists)) {
            gke_main.gke3_paraphrase_guts_int(stream, cycl_utilities.formula_arg2(sentence, UNPROVIDED), params, depth);
        } else {
            if (NIL != gke_main.starts_with_gke3_connectiveP(sentence)) {
                final SubLObject connective = gke_main.starts_with_gke3_connectiveP(sentence);
                if ((NIL == list_utilities.lengthE(sentence, TWO_INTEGER, UNPROVIDED)) || (NIL != member(connective, gke_main.$list56, UNPROVIDED, UNPROVIDED))) {
                    string_utilities.indent(stream, depth);
                    princ(gke_main.gke3_string_for_conjunction(connective), stream);
                    terpri(stream);
                    depth = add(depth, TWO_INTEGER);
                    if (connective == $NOR) {
                        sentence = cycl_utilities.formula_arg1(sentence, UNPROVIDED);
                    }
                }
                SubLObject cdolist_list_var;
                final SubLObject args = cdolist_list_var = cycl_utilities.formula_args(sentence, $IGNORE);
                SubLObject conjunct = NIL;
                conjunct = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    gke_main.gke3_paraphrase_guts_int(stream, conjunct, params, depth);
                    cdolist_list_var = cdolist_list_var.rest();
                    conjunct = cdolist_list_var.first();
                } 
                return NIL;
            }
            if (NIL != collection_defns.cycl_atomic_sentenceP(sentence)) {
                final SubLObject pph_map = nl_generation_api.cycl_term_to_nl_internal(sentence, params).first();
                final SubLObject string = nl_generation_api.pph_output_map_to_html_internal(pph_map, gke_main.PPH_ANCHOR_TAGS_FOR_TERM, T, ZERO_INTEGER, T, NIL);
                string_utilities.indent(stream, depth);
                princ(string, stream);
                terpri(stream);
            }
        }
        return NIL;
    }

    public static final SubLObject starts_with_gke3_connectiveP_alt(SubLObject sentence) {
        if (cycl_utilities.formula_arg0(sentence) == $$and) {
            return $AND;
        } else {
            if ((NIL != member(cycl_utilities.formula_arg0(sentence), $list_alt63, UNPROVIDED, UNPROVIDED)) && (cycl_utilities.formula_arg_position(sentence, $list_alt64, UNPROVIDED) == $$or)) {
                return $NOR;
            } else {
                if (NIL != member(cycl_utilities.formula_arg0(sentence), $list_alt63, UNPROVIDED, UNPROVIDED)) {
                    return $NOT;
                } else {
                    if (cycl_utilities.formula_arg0(sentence) == $$or) {
                        return $OR;
                    }
                }
            }
        }
        return NIL;
    }

    public static SubLObject starts_with_gke3_connectiveP(final SubLObject sentence) {
        if (cycl_utilities.formula_arg0(sentence).eql(gke_main.$$and)) {
            return $AND;
        }
        if ((NIL != member(cycl_utilities.formula_arg0(sentence), gke_main.$list61, UNPROVIDED, UNPROVIDED)) && cycl_utilities.formula_arg_position(sentence, gke_main.$list62, UNPROVIDED).eql(gke_main.$$or)) {
            return $NOR;
        }
        if (NIL != member(cycl_utilities.formula_arg0(sentence), gke_main.$list61, UNPROVIDED, UNPROVIDED)) {
            return $NOT;
        }
        if (cycl_utilities.formula_arg0(sentence).eql(gke_main.$$or)) {
            return $OR;
        }
        return NIL;
    }

    public static final SubLObject gke3_string_for_conjunction_alt(SubLObject conj) {
        {
            SubLObject pcase_var = conj;
            if (pcase_var.eql($AND)) {
                return $$$All_of_the_following_are_true;
            } else {
                if (pcase_var.eql($OR)) {
                    return $str_alt69$At_least_one_of_the_following_is_;
                } else {
                    if (pcase_var.eql($NOR)) {
                        return $$$None_of_the_following_is_true;
                    } else {
                        if (pcase_var.eql($NOT)) {
                            return $$$None_of_the_following_is_true;
                        }
                    }
                }
            }
        }
        return NIL;
    }

    public static SubLObject gke3_string_for_conjunction(final SubLObject conj) {
        if (conj.eql($AND)) {
            return gke_main.$$$All_of_the_following_are_true;
        }
        if (conj.eql($OR)) {
            return gke_main.$str67$At_least_one_of_the_following_is_;
        }
        if (conj.eql($NOR)) {
            return gke_main.$$$None_of_the_following_is_true;
        }
        if (conj.eql($NOT)) {
            return gke_main.$$$None_of_the_following_is_true;
        }
        return NIL;
    }

    /**
     *
     *
     * @param MODE
     * 		keywordp; :HTML or :TEXT.
     * @return 0 STRINGP; paraphrase of TERM that looks approximately like it
    would in the GKE, including links.
     * @return 1 LISTP; of PPH supports
     */
    @LispMethod(comment = "@param MODE\r\n\t\tkeywordp; :HTML or :TEXT.\r\n@return 0 STRINGP; paraphrase of TERM that looks approximately like it\r\nwould in the GKE, including links.\r\n@return 1 LISTP; of PPH supports")
    public static final SubLObject simulate_gke_term_paraphrase_alt(SubLObject v_term, SubLObject mode, SubLObject terseP) {
        if (mode == UNPROVIDED) {
            mode = $HTML;
        }
        if (terseP == UNPROVIDED) {
            terseP = T;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject javalist = NIL;
                SubLObject supports = NIL;
                {
                    SubLObject _prev_bind_0 = pph_vars.$pph_terse_modeP$.currentBinding(thread);
                    SubLObject _prev_bind_1 = pph_vars.$paraphrase_precision$.currentBinding(thread);
                    SubLObject _prev_bind_2 = pph_vars.$pph_use_bulleted_listsP$.currentBinding(thread);
                    SubLObject _prev_bind_3 = pph_vars.$pph_replace_bulleted_list_tagsP$.currentBinding(thread);
                    SubLObject _prev_bind_4 = pph_vars.$pph_terse_mt_scopeP$.currentBinding(thread);
                    SubLObject _prev_bind_5 = pph_vars.$pph_maximize_linksP$.currentBinding(thread);
                    SubLObject _prev_bind_6 = pph_vars.$pph_link_arg0P$.currentBinding(thread);
                    SubLObject _prev_bind_7 = pph_vars.$pph_consolidate_output_list_for_nartP$.currentBinding(thread);
                    SubLObject _prev_bind_8 = pph_vars.$pph_use_smart_variable_replacementP$.currentBinding(thread);
                    SubLObject _prev_bind_9 = pph_vars.$pph_demerit_cutoff$.currentBinding(thread);
                    SubLObject _prev_bind_10 = pph_vars.$pph_use_title_capitalizationP$.currentBinding(thread);
                    SubLObject _prev_bind_11 = pph_vars.$pph_use_indexical_datesP$.currentBinding(thread);
                    SubLObject _prev_bind_12 = pph_vars.$pph_speaker$.currentBinding(thread);
                    SubLObject _prev_bind_13 = pph_vars.$pph_addressee$.currentBinding(thread);
                    try {
                        pph_vars.$pph_terse_modeP$.bind(terseP, thread);
                        pph_vars.$paraphrase_precision$.bind(makeBoolean(NIL == terseP), thread);
                        pph_vars.$pph_use_bulleted_listsP$.bind(T, thread);
                        pph_vars.$pph_replace_bulleted_list_tagsP$.bind(NIL, thread);
                        pph_vars.$pph_terse_mt_scopeP$.bind(T, thread);
                        pph_vars.$pph_maximize_linksP$.bind(makeBoolean(NIL == terseP), thread);
                        pph_vars.$pph_link_arg0P$.bind(T, thread);
                        pph_vars.$pph_consolidate_output_list_for_nartP$.bind(NIL, thread);
                        pph_vars.$pph_use_smart_variable_replacementP$.bind(T, thread);
                        pph_vars.$pph_demerit_cutoff$.bind(number_utilities.positive_infinity(), thread);
                        pph_vars.$pph_use_title_capitalizationP$.bind(NIL, thread);
                        pph_vars.$pph_use_indexical_datesP$.bind(NIL, thread);
                        pph_vars.$pph_speaker$.bind($UNKNOWN, thread);
                        pph_vars.$pph_addressee$.bind($UNKNOWN, thread);
                        thread.resetMultipleValues();
                        {
                            SubLObject _prev_bind_0_31 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
                            try {
                                pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                                {
                                    SubLObject reuseP = thread.secondMultipleValue();
                                    thread.resetMultipleValues();
                                    try {
                                        thread.resetMultipleValues();
                                        {
                                            SubLObject _prev_bind_0_32 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                                            try {
                                                pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                                                {
                                                    SubLObject new_or_reused = thread.secondMultipleValue();
                                                    thread.resetMultipleValues();
                                                    {
                                                        SubLObject _prev_bind_0_33 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                                                        try {
                                                            pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                                                            {
                                                                SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                                                                {
                                                                    SubLObject _prev_bind_0_34 = memoization_state.$memoization_state$.currentBinding(thread);
                                                                    try {
                                                                        memoization_state.$memoization_state$.bind(local_state, thread);
                                                                        {
                                                                            SubLObject original_memoization_process = NIL;
                                                                            if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
                                                                                original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
                                                                                {
                                                                                    SubLObject current_proc = current_process();
                                                                                    if (NIL == original_memoization_process) {
                                                                                        memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
                                                                                    } else {
                                                                                        if (original_memoization_process != current_proc) {
                                                                                            Errors.error($str_alt13$Invalid_attempt_to_reuse_memoizat);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            try {
                                                                                thread.resetMultipleValues();
                                                                                {
                                                                                    SubLObject the_javalist = pph_main.generate_phrase_for_java(v_term, $DEFAULT, $NONE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                    SubLObject ignore_me = thread.secondMultipleValue();
                                                                                    SubLObject the_justification = thread.thirdMultipleValue();
                                                                                    thread.resetMultipleValues();
                                                                                    javalist = the_javalist;
                                                                                    supports = the_justification;
                                                                                }
                                                                            } finally {
                                                                                {
                                                                                    SubLObject _prev_bind_0_35 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                    try {
                                                                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                                                                        if ((NIL != local_state) && (NIL == original_memoization_process)) {
                                                                                            memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
                                                                                        }
                                                                                    } finally {
                                                                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_35, thread);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } finally {
                                                                        memoization_state.$memoization_state$.rebind(_prev_bind_0_34, thread);
                                                                    }
                                                                }
                                                            }
                                                        } finally {
                                                            pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_33, thread);
                                                        }
                                                    }
                                                    if ((new_or_reused == $NEW) && (NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread)))) {
                                                        memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                                                    }
                                                }
                                            } finally {
                                                pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_32, thread);
                                            }
                                        }
                                    } finally {
                                        {
                                            SubLObject _prev_bind_0_36 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                            try {
                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                if (NIL == reuseP) {
                                                    pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                                                }
                                            } finally {
                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_36, thread);
                                            }
                                        }
                                    }
                                }
                            } finally {
                                pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_31, thread);
                            }
                        }
                    } finally {
                        pph_vars.$pph_addressee$.rebind(_prev_bind_13, thread);
                        pph_vars.$pph_speaker$.rebind(_prev_bind_12, thread);
                        pph_vars.$pph_use_indexical_datesP$.rebind(_prev_bind_11, thread);
                        pph_vars.$pph_use_title_capitalizationP$.rebind(_prev_bind_10, thread);
                        pph_vars.$pph_demerit_cutoff$.rebind(_prev_bind_9, thread);
                        pph_vars.$pph_use_smart_variable_replacementP$.rebind(_prev_bind_8, thread);
                        pph_vars.$pph_consolidate_output_list_for_nartP$.rebind(_prev_bind_7, thread);
                        pph_vars.$pph_link_arg0P$.rebind(_prev_bind_6, thread);
                        pph_vars.$pph_maximize_linksP$.rebind(_prev_bind_5, thread);
                        pph_vars.$pph_terse_mt_scopeP$.rebind(_prev_bind_4, thread);
                        pph_vars.$pph_replace_bulleted_list_tagsP$.rebind(_prev_bind_3, thread);
                        pph_vars.$pph_use_bulleted_listsP$.rebind(_prev_bind_2, thread);
                        pph_vars.$paraphrase_precision$.rebind(_prev_bind_1, thread);
                        pph_vars.$pph_terse_modeP$.rebind(_prev_bind_0, thread);
                    }
                }
                {
                    SubLObject pcase_var = mode;
                    if (pcase_var.eql($HTML)) {
                        return values(pph_utilities.pph_javalist_html_string(javalist, UNPROVIDED), supports);
                    } else {
                        if (pcase_var.eql($TEXT)) {
                            return values(pph_utilities.pph_javalist_string(javalist), supports);
                        }
                    }
                }
            }
            return NIL;
        }
    }

    /**
     *
     *
     * @param MODE
     * 		keywordp; :HTML or :TEXT.
     * @return 0 STRINGP; paraphrase of TERM that looks approximately like it
    would in the GKE, including links.
     * @return 1 LISTP; of PPH supports
     */
    @LispMethod(comment = "@param MODE\r\n\t\tkeywordp; :HTML or :TEXT.\r\n@return 0 STRINGP; paraphrase of TERM that looks approximately like it\r\nwould in the GKE, including links.\r\n@return 1 LISTP; of PPH supports")
    public static SubLObject simulate_gke_term_paraphrase(final SubLObject v_term, SubLObject mode, SubLObject terseP) {
        if (mode == UNPROVIDED) {
            mode = $HTML;
        }
        if (terseP == UNPROVIDED) {
            terseP = T;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject javalist = NIL;
        SubLObject supports = NIL;
        final SubLObject _prev_bind_0 = pph_vars.$pph_terse_modeP$.currentBinding(thread);
        final SubLObject _prev_bind_2 = pph_vars.$paraphrase_precision$.currentBinding(thread);
        final SubLObject _prev_bind_3 = pph_vars.$pph_use_bulleted_listsP$.currentBinding(thread);
        final SubLObject _prev_bind_4 = pph_vars.$pph_replace_bulleted_list_tagsP$.currentBinding(thread);
        final SubLObject _prev_bind_5 = pph_vars.$pph_terse_mt_scopeP$.currentBinding(thread);
        final SubLObject _prev_bind_6 = pph_vars.$pph_maximize_linksP$.currentBinding(thread);
        final SubLObject _prev_bind_7 = pph_vars.$pph_link_arg0P$.currentBinding(thread);
        final SubLObject _prev_bind_8 = pph_vars.$pph_consolidate_output_list_for_natP$.currentBinding(thread);
        final SubLObject _prev_bind_9 = pph_vars.$pph_use_smart_variable_replacementP$.currentBinding(thread);
        final SubLObject _prev_bind_10 = pph_vars.$pph_demerit_cutoff$.currentBinding(thread);
        final SubLObject _prev_bind_11 = pph_vars.$pph_use_title_capitalizationP$.currentBinding(thread);
        final SubLObject _prev_bind_12 = pph_vars.$pph_use_indexical_datesP$.currentBinding(thread);
        final SubLObject _prev_bind_13 = pph_vars.$pph_speaker$.currentBinding(thread);
        final SubLObject _prev_bind_14 = pph_vars.$pph_addressee$.currentBinding(thread);
        final SubLObject _prev_bind_15 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
        try {
            pph_vars.$pph_terse_modeP$.bind(terseP, thread);
            pph_vars.$paraphrase_precision$.bind(makeBoolean(NIL == terseP), thread);
            pph_vars.$pph_use_bulleted_listsP$.bind(T, thread);
            pph_vars.$pph_replace_bulleted_list_tagsP$.bind(NIL, thread);
            pph_vars.$pph_terse_mt_scopeP$.bind(T, thread);
            pph_vars.$pph_maximize_linksP$.bind(makeBoolean(NIL == terseP), thread);
            pph_vars.$pph_link_arg0P$.bind(T, thread);
            pph_vars.$pph_consolidate_output_list_for_natP$.bind(NIL, thread);
            pph_vars.$pph_use_smart_variable_replacementP$.bind(T, thread);
            pph_vars.$pph_demerit_cutoff$.bind(number_utilities.positive_infinity(), thread);
            pph_vars.$pph_use_title_capitalizationP$.bind(NIL, thread);
            pph_vars.$pph_use_indexical_datesP$.bind(NIL, thread);
            pph_vars.$pph_speaker$.bind($UNKNOWN, thread);
            pph_vars.$pph_addressee$.bind($UNKNOWN, thread);
            pph_macros.$free_pph_problem_store_pointers$.bind(NIL, thread);
            thread.resetMultipleValues();
            final SubLObject _prev_bind_0_$32 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
            try {
                pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                final SubLObject reuseP = thread.secondMultipleValue();
                thread.resetMultipleValues();
                try {
                    thread.resetMultipleValues();
                    final SubLObject _prev_bind_0_$33 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                    try {
                        pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                        final SubLObject new_or_reused = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$34 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                        try {
                            pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                            final SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                            final SubLObject _prev_bind_0_$35 = memoization_state.$memoization_state$.currentBinding(thread);
                            try {
                                memoization_state.$memoization_state$.bind(local_state, thread);
                                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                                try {
                                    thread.resetMultipleValues();
                                    final SubLObject the_javalist = pph_main.generate_phrase_for_java(v_term, $DEFAULT, $NONE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    final SubLObject ignore_me = thread.secondMultipleValue();
                                    final SubLObject the_justification = thread.thirdMultipleValue();
                                    thread.resetMultipleValues();
                                    javalist = the_javalist;
                                    supports = the_justification;
                                } finally {
                                    final SubLObject _prev_bind_0_$36 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                        final SubLObject _values = getValuesAsVector();
                                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                        restoreValuesFromVector(_values);
                                    } finally {
                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$36, thread);
                                    }
                                }
                            } finally {
                                memoization_state.$memoization_state$.rebind(_prev_bind_0_$35, thread);
                            }
                        } finally {
                            pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$34, thread);
                        }
                        if ((new_or_reused == $NEW) && (NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread)))) {
                            memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                        }
                    } finally {
                        pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$33, thread);
                    }
                } finally {
                    final SubLObject _prev_bind_0_$37 = $is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        $is_thread_performing_cleanupP$.bind(T, thread);
                        final SubLObject _values2 = getValuesAsVector();
                        if (NIL == reuseP) {
                            pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                        }
                        restoreValuesFromVector(_values2);
                    } finally {
                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$37, thread);
                    }
                }
            } finally {
                pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$32, thread);
            }
        } finally {
            pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_15, thread);
            pph_vars.$pph_addressee$.rebind(_prev_bind_14, thread);
            pph_vars.$pph_speaker$.rebind(_prev_bind_13, thread);
            pph_vars.$pph_use_indexical_datesP$.rebind(_prev_bind_12, thread);
            pph_vars.$pph_use_title_capitalizationP$.rebind(_prev_bind_11, thread);
            pph_vars.$pph_demerit_cutoff$.rebind(_prev_bind_10, thread);
            pph_vars.$pph_use_smart_variable_replacementP$.rebind(_prev_bind_9, thread);
            pph_vars.$pph_consolidate_output_list_for_natP$.rebind(_prev_bind_8, thread);
            pph_vars.$pph_link_arg0P$.rebind(_prev_bind_7, thread);
            pph_vars.$pph_maximize_linksP$.rebind(_prev_bind_6, thread);
            pph_vars.$pph_terse_mt_scopeP$.rebind(_prev_bind_5, thread);
            pph_vars.$pph_replace_bulleted_list_tagsP$.rebind(_prev_bind_4, thread);
            pph_vars.$pph_use_bulleted_listsP$.rebind(_prev_bind_3, thread);
            pph_vars.$paraphrase_precision$.rebind(_prev_bind_2, thread);
            pph_vars.$pph_terse_modeP$.rebind(_prev_bind_0, thread);
        }
        final SubLObject pcase_var = mode;
        if (pcase_var.eql($HTML)) {
            return values(pph_utilities.pph_javalist_html_string(javalist, UNPROVIDED), supports);
        }
        if (pcase_var.eql($TEXT)) {
            return values(pph_utilities.pph_javalist_string(javalist), supports);
        }
        return NIL;
    }

    /**
     * Clone and reformulate the literal in QUERY-SENTENCE that contains ARG-POSITION.
     */
    @LispMethod(comment = "Clone and reformulate the literal in QUERY-SENTENCE that contains ARG-POSITION.")
    public static final SubLObject gke_add_cloned_literal_alt(SubLObject query_sentence, SubLObject arg_position, SubLObject domain_mt, SubLObject connective) {
        if (connective == UNPROVIDED) {
            connective = $AND;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject valid_connectives = $list_alt72;
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                    if (NIL == member(connective, valid_connectives, UNPROVIDED, UNPROVIDED)) {
                        Errors.error($str_alt73$_S_must_be_one_of__S, connective, valid_connectives);
                    }
                }
            }
            {
                SubLObject ans = copy_expression(query_sentence);
                thread.resetMultipleValues();
                {
                    SubLObject target_literal = com.cyc.cycjava.cycl.gke_main.gke_find_literal_to_clone(query_sentence, arg_position);
                    SubLObject target_literal_arg_position = thread.secondMultipleValue();
                    thread.resetMultipleValues();
                    if ($ERROR != target_literal) {
                        {
                            SubLObject new_literal = com.cyc.cycjava.cycl.gke_main.loosen_gke_literal(target_literal, UNPROVIDED);
                            ans = com.cyc.cycjava.cycl.gke_main.gke_add_literal(query_sentence, target_literal_arg_position, new_literal, connective);
                        }
                    }
                }
                return ans;
            }
        }
    }

    /**
     * Clone and reformulate the literal in QUERY-SENTENCE that contains ARG-POSITION.
     */
    @LispMethod(comment = "Clone and reformulate the literal in QUERY-SENTENCE that contains ARG-POSITION.")
    public static SubLObject gke_add_cloned_literal(final SubLObject query_sentence, final SubLObject arg_position, final SubLObject domain_mt, SubLObject connective) {
        if (connective == UNPROVIDED) {
            connective = $AND;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject valid_connectives = gke_main.$list70;
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == member(connective, valid_connectives, UNPROVIDED, UNPROVIDED))) {
            Errors.error(gke_main.$str71$_S_must_be_one_of__S, connective, valid_connectives);
        }
        SubLObject ans = copy_expression(query_sentence);
        thread.resetMultipleValues();
        final SubLObject target_literal = gke_main.gke_find_literal_to_clone(query_sentence, arg_position);
        final SubLObject target_literal_arg_position = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if ($ERROR != target_literal) {
            final SubLObject new_literal = gke_main.loosen_gke_literal(target_literal, UNPROVIDED);
            ans = gke_main.gke_add_literal(query_sentence, target_literal_arg_position, new_literal, connective);
        }
        return ans;
    }

    /**
     * Strengthen the literal containing ARG-POSITION in QUERY-SENTENCE.
     */
    @LispMethod(comment = "Strengthen the literal containing ARG-POSITION in QUERY-SENTENCE.")
    public static final SubLObject gke_strengthen_query_sentence_alt(SubLObject query_sentence, SubLObject arg_position, SubLObject domain_mt) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject ans = copy_expression(query_sentence);
                thread.resetMultipleValues();
                {
                    SubLObject target_literal = com.cyc.cycjava.cycl.gke_main.gke_find_literal_to_strengthen(query_sentence, arg_position);
                    SubLObject target_literal_arg_position = thread.secondMultipleValue();
                    thread.resetMultipleValues();
                    if ($ERROR != target_literal) {
                        {
                            SubLObject new_literal = com.cyc.cycjava.cycl.gke_main.strengthen_gke_literal(target_literal, UNPROVIDED);
                            ans = com.cyc.cycjava.cycl.gke_main.gke_formula_arg_position_subst(new_literal, target_literal_arg_position, query_sentence);
                        }
                    }
                }
                return ans;
            }
        }
    }

    /**
     * Strengthen the literal containing ARG-POSITION in QUERY-SENTENCE.
     */
    @LispMethod(comment = "Strengthen the literal containing ARG-POSITION in QUERY-SENTENCE.")
    public static SubLObject gke_strengthen_query_sentence(final SubLObject query_sentence, final SubLObject arg_position, final SubLObject domain_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject ans = copy_expression(query_sentence);
        thread.resetMultipleValues();
        final SubLObject target_literal = gke_main.gke_find_literal_to_strengthen(query_sentence, arg_position);
        final SubLObject target_literal_arg_position = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if ($ERROR != target_literal) {
            final SubLObject new_literal = gke_main.strengthen_gke_literal(target_literal, UNPROVIDED);
            ans = gke_main.gke_formula_arg_position_subst(new_literal, target_literal_arg_position, query_sentence);
        }
        return ans;
    }

    /**
     * Remove the literal containing ARG-POSITION in QUERY-SENTENCE.
     * If the smallest enclosing sentence is the same as the original
     * sentence, QUERY-SENTENCE is returned unaltered
     */
    @LispMethod(comment = "Remove the literal containing ARG-POSITION in QUERY-SENTENCE.\r\nIf the smallest enclosing sentence is the same as the original\r\nsentence, QUERY-SENTENCE is returned unaltered\nRemove the literal containing ARG-POSITION in QUERY-SENTENCE.\nIf the smallest enclosing sentence is the same as the original\nsentence, QUERY-SENTENCE is returned unaltered")
    public static final SubLObject gke_remove_literal_alt(SubLObject query_sentence, SubLObject arg_position, SubLObject domain_mt) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject ans = copy_expression(query_sentence);
                thread.resetMultipleValues();
                {
                    SubLObject target_literal = com.cyc.cycjava.cycl.gke_main.gke_find_literal_to_remove(query_sentence, arg_position);
                    SubLObject target_literal_arg_position = thread.secondMultipleValue();
                    thread.resetMultipleValues();
                    if ($ERROR != target_literal) {
                        if (NIL != target_literal_arg_position) {
                            {
                                SubLObject enclosing_arg_position = butlast(target_literal_arg_position, UNPROVIDED);
                                SubLObject enclosing_formula = com.cyc.cycjava.cycl.gke_main.gke_formula_arg_position(query_sentence, enclosing_arg_position, UNPROVIDED);
                                if (((NIL != el_disjunction_p(enclosing_formula)) || (NIL != el_conjunction_p(enclosing_formula))) && (NIL != formula_arityG(enclosing_formula, ONE_INTEGER, UNPROVIDED))) {
                                    {
                                        SubLObject juncts = NIL;
                                        SubLObject target_arg_num = list_utilities.last_one(target_literal_arg_position);
                                        SubLObject current_arg_num = ZERO_INTEGER;
                                        SubLObject args = cycl_utilities.formula_args(enclosing_formula, $IGNORE);
                                        SubLObject cdolist_list_var = args;
                                        SubLObject arg = NIL;
                                        for (arg = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , arg = cdolist_list_var.first()) {
                                            current_arg_num = add(current_arg_num, ONE_INTEGER);
                                            if (!current_arg_num.eql(target_arg_num)) {
                                                juncts = cons(arg, juncts);
                                            }
                                        }
                                        ans = (NIL != list_utilities.lengthG(juncts, ONE_INTEGER, UNPROVIDED)) ? ((SubLObject) (make_el_formula(cycl_utilities.formula_arg0(enclosing_formula), nreverse(juncts), UNPROVIDED))) : juncts.first();
                                    }
                                    if (NIL != enclosing_arg_position) {
                                        ans = replace_formula_arg_position(enclosing_arg_position, ans, query_sentence);
                                    }
                                }
                            }
                        }
                    }
                }
                return ans;
            }
        }
    }

    /**
     * Remove the literal containing ARG-POSITION in QUERY-SENTENCE.
     * If the smallest enclosing sentence is the same as the original
     * sentence, QUERY-SENTENCE is returned unaltered
     */
    @LispMethod(comment = "Remove the literal containing ARG-POSITION in QUERY-SENTENCE.\r\nIf the smallest enclosing sentence is the same as the original\r\nsentence, QUERY-SENTENCE is returned unaltered\nRemove the literal containing ARG-POSITION in QUERY-SENTENCE.\nIf the smallest enclosing sentence is the same as the original\nsentence, QUERY-SENTENCE is returned unaltered")
    public static SubLObject gke_remove_literal(final SubLObject query_sentence, final SubLObject arg_position, final SubLObject domain_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject ans = copy_expression(query_sentence);
        thread.resetMultipleValues();
        final SubLObject target_literal = gke_main.gke_find_literal_to_remove(query_sentence, arg_position);
        final SubLObject target_literal_arg_position = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (($ERROR != target_literal) && (NIL != target_literal_arg_position)) {
            final SubLObject enclosing_arg_position = butlast(target_literal_arg_position, UNPROVIDED);
            final SubLObject enclosing_formula = gke_main.gke_formula_arg_position(query_sentence, enclosing_arg_position, UNPROVIDED);
            if (((NIL != el_disjunction_p(enclosing_formula)) || (NIL != el_conjunction_p(enclosing_formula))) && (NIL != formula_arityG(enclosing_formula, ONE_INTEGER, UNPROVIDED))) {
                SubLObject juncts = NIL;
                final SubLObject target_arg_num = list_utilities.last_one(target_literal_arg_position);
                SubLObject current_arg_num = ZERO_INTEGER;
                SubLObject cdolist_list_var;
                final SubLObject args = cdolist_list_var = cycl_utilities.formula_args(enclosing_formula, $IGNORE);
                SubLObject arg = NIL;
                arg = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    current_arg_num = add(current_arg_num, ONE_INTEGER);
                    if (!current_arg_num.eql(target_arg_num)) {
                        juncts = cons(arg, juncts);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    arg = cdolist_list_var.first();
                } 
                ans = (NIL != list_utilities.lengthG(juncts, ONE_INTEGER, UNPROVIDED)) ? make_el_formula(cycl_utilities.formula_arg0(enclosing_formula), nreverse(juncts), UNPROVIDED) : juncts.first();
                if (NIL != enclosing_arg_position) {
                    ans = replace_formula_arg_position(enclosing_arg_position, ans, query_sentence);
                }
            }
        }
        return ans;
    }

    public static final SubLObject gke_find_literal_to_clone_alt(SubLObject query_sentence, SubLObject arg_position) {
        return com.cyc.cycjava.cycl.gke_main.gke_find_literal_for_arg_position(query_sentence, arg_position);
    }

    public static SubLObject gke_find_literal_to_clone(final SubLObject query_sentence, final SubLObject arg_position) {
        return gke_main.gke_find_literal_for_arg_position(query_sentence, arg_position);
    }

    public static final SubLObject gke_find_literal_to_remove_alt(SubLObject query_sentence, SubLObject arg_position) {
        return com.cyc.cycjava.cycl.gke_main.gke_find_literal_for_arg_position(query_sentence, arg_position);
    }

    public static SubLObject gke_find_literal_to_remove(final SubLObject query_sentence, final SubLObject arg_position) {
        return gke_main.gke_find_literal_for_arg_position(query_sentence, arg_position);
    }

    public static final SubLObject gke_find_literal_to_strengthen_alt(SubLObject query_sentence, SubLObject arg_position) {
        return com.cyc.cycjava.cycl.gke_main.gke_find_literal_for_arg_position(query_sentence, arg_position);
    }

    public static SubLObject gke_find_literal_to_strengthen(final SubLObject query_sentence, final SubLObject arg_position) {
        return gke_main.gke_find_literal_for_arg_position(query_sentence, arg_position);
    }

    public static final SubLObject gke_find_literal_for_arg_position_alt(SubLObject query_sentence, SubLObject arg_position) {
        {
            SubLObject target_literal_arg_position = butlast(arg_position, UNPROVIDED);
            SubLObject target_literal = cycl_utilities.formula_arg_position(query_sentence, target_literal_arg_position, UNPROVIDED);
            while (!((NIL != atomic_sentenceP(target_literal)) || (NIL != list_utilities.lengthL(target_literal_arg_position, TWO_INTEGER, UNPROVIDED)))) {
                target_literal_arg_position = butlast(target_literal_arg_position, UNPROVIDED);
                target_literal = cycl_utilities.formula_arg_position(query_sentence, target_literal_arg_position, UNPROVIDED);
            } 
            if (NIL == atomic_sentenceP(target_literal)) {
                target_literal = $ERROR;
                target_literal_arg_position = $ERROR;
            }
            return values(target_literal, target_literal_arg_position);
        }
    }

    public static SubLObject gke_find_literal_for_arg_position(final SubLObject query_sentence, final SubLObject arg_position) {
        SubLObject target_literal_arg_position;
        SubLObject target_literal;
        for (target_literal_arg_position = butlast(arg_position, UNPROVIDED), target_literal = cycl_utilities.formula_arg_position(query_sentence, target_literal_arg_position, UNPROVIDED); (NIL == atomic_sentenceP(target_literal)) && (NIL == list_utilities.lengthL(target_literal_arg_position, TWO_INTEGER, UNPROVIDED)); target_literal_arg_position = butlast(target_literal_arg_position, UNPROVIDED) , target_literal = cycl_utilities.formula_arg_position(query_sentence, target_literal_arg_position, UNPROVIDED)) {
        }
        if (NIL == atomic_sentenceP(target_literal)) {
            target_literal = $ERROR;
            target_literal_arg_position = $ERROR;
        }
        return values(target_literal, target_literal_arg_position);
    }

    /**
     * Add NEW-LITERAL as a sibling to ARG-POSITION in QUERY-SENTENCE,
     * using CONNECTIVE.
     */
    @LispMethod(comment = "Add NEW-LITERAL as a sibling to ARG-POSITION in QUERY-SENTENCE,\r\nusing CONNECTIVE.\nAdd NEW-LITERAL as a sibling to ARG-POSITION in QUERY-SENTENCE,\nusing CONNECTIVE.")
    public static final SubLObject gke_add_literal_alt(SubLObject query_sentence, SubLObject arg_position, SubLObject new_literal, SubLObject connective) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            thread.resetMultipleValues();
            {
                SubLObject siblings = com.cyc.cycjava.cycl.gke_main.gke_get_siblings(query_sentence, arg_position, connective);
                SubLObject replace_enclosing_formulaP = thread.secondMultipleValue();
                thread.resetMultipleValues();
                {
                    SubLObject new_sub_formula = (connective == $AND) ? ((SubLObject) (simplifier.conjoin(cons(new_literal, siblings), UNPROVIDED))) : simplifier.disjoin(cons(new_literal, siblings), UNPROVIDED);
                    SubLObject target_arg_position = (NIL != replace_enclosing_formulaP) ? ((SubLObject) (butlast(arg_position, UNPROVIDED))) : arg_position;
                    SubLObject new_query_sentence = com.cyc.cycjava.cycl.gke_main.gke_formula_arg_position_subst(new_sub_formula, target_arg_position, query_sentence);
                    return new_query_sentence;
                }
            }
        }
    }

    /**
     * Add NEW-LITERAL as a sibling to ARG-POSITION in QUERY-SENTENCE,
     * using CONNECTIVE.
     */
    @LispMethod(comment = "Add NEW-LITERAL as a sibling to ARG-POSITION in QUERY-SENTENCE,\r\nusing CONNECTIVE.\nAdd NEW-LITERAL as a sibling to ARG-POSITION in QUERY-SENTENCE,\nusing CONNECTIVE.")
    public static SubLObject gke_add_literal(final SubLObject query_sentence, final SubLObject arg_position, final SubLObject new_literal, final SubLObject connective) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject siblings = gke_main.gke_get_siblings(query_sentence, arg_position, connective);
        final SubLObject replace_enclosing_formulaP = thread.secondMultipleValue();
        thread.resetMultipleValues();
        final SubLObject new_sub_formula = (connective == $AND) ? simplifier.conjoin(cons(new_literal, siblings), UNPROVIDED) : simplifier.disjoin(cons(new_literal, siblings), UNPROVIDED);
        final SubLObject target_arg_position = (NIL != replace_enclosing_formulaP) ? butlast(arg_position, UNPROVIDED) : arg_position;
        final SubLObject new_query_sentence = gke_main.gke_formula_arg_position_subst(new_sub_formula, target_arg_position, query_sentence);
        return new_query_sentence;
    }

    /**
     *
     *
     * @return 0; LISTP of literals from QUERY-SENTENCE including the one at ARG-POSITION,
    to which to add a new junct of type CONNECTIVE.
     * @return 1; BOOLEANP - Does the new set replace the enclosing formula, or just
    a single literal?
     */
    @LispMethod(comment = "@return 0; LISTP of literals from QUERY-SENTENCE including the one at ARG-POSITION,\r\nto which to add a new junct of type CONNECTIVE.\r\n@return 1; BOOLEANP - Does the new set replace the enclosing formula, or just\r\na single literal?")
    public static final SubLObject gke_get_siblings_alt(SubLObject query_sentence, SubLObject arg_position, SubLObject connective) {
        if (NIL == arg_position) {
            return values(list(query_sentence), NIL);
        }
        {
            SubLObject enclosing_formula = com.cyc.cycjava.cycl.gke_main.gke_formula_arg_position(query_sentence, butlast(arg_position, UNPROVIDED), UNPROVIDED);
            if ((connective == $AND) && (NIL != el_conjunction_p(enclosing_formula))) {
                return values(cycl_utilities.formula_args(enclosing_formula, UNPROVIDED), T);
            } else {
                if ((connective == $OR) && (NIL != el_disjunction_p(enclosing_formula))) {
                    return values(cycl_utilities.formula_args(enclosing_formula, UNPROVIDED), T);
                } else {
                    return values(list(com.cyc.cycjava.cycl.gke_main.gke_formula_arg_position(query_sentence, arg_position, UNPROVIDED)), NIL);
                }
            }
        }
    }

    /**
     *
     *
     * @return 0; LISTP of literals from QUERY-SENTENCE including the one at ARG-POSITION,
    to which to add a new junct of type CONNECTIVE.
     * @return 1; BOOLEANP - Does the new set replace the enclosing formula, or just
    a single literal?
     */
    @LispMethod(comment = "@return 0; LISTP of literals from QUERY-SENTENCE including the one at ARG-POSITION,\r\nto which to add a new junct of type CONNECTIVE.\r\n@return 1; BOOLEANP - Does the new set replace the enclosing formula, or just\r\na single literal?")
    public static SubLObject gke_get_siblings(final SubLObject query_sentence, final SubLObject arg_position, final SubLObject connective) {
        if (NIL == arg_position) {
            return values(list(query_sentence), NIL);
        }
        final SubLObject enclosing_formula = gke_main.gke_formula_arg_position(query_sentence, butlast(arg_position, UNPROVIDED), UNPROVIDED);
        if ((connective == $AND) && (NIL != el_conjunction_p(enclosing_formula))) {
            return values(cycl_utilities.formula_args(enclosing_formula, UNPROVIDED), T);
        }
        if ((connective == $OR) && (NIL != el_disjunction_p(enclosing_formula))) {
            return values(cycl_utilities.formula_args(enclosing_formula, UNPROVIDED), T);
        }
        return values(list(gke_main.gke_formula_arg_position(query_sentence, arg_position, UNPROVIDED)), NIL);
    }

    /**
     * Like @xref FORMULA-ARG-POSITION, but handles NIL as top-level arg-position.
     */
    @LispMethod(comment = "Like @xref FORMULA-ARG-POSITION, but handles NIL as top-level arg-position.")
    public static final SubLObject gke_formula_arg_position_alt(SubLObject formula, SubLObject arg_position, SubLObject v_default) {
        if (v_default == UNPROVIDED) {
            v_default = NIL;
        }
        if (NIL != cycl_utilities.arg_position_p(arg_position)) {
            return cycl_utilities.formula_arg_position(formula, arg_position, v_default);
        } else {
            if (NIL == arg_position) {
                return values(formula, T);
            } else {
                return values(v_default, NIL);
            }
        }
    }

    /**
     * Like @xref FORMULA-ARG-POSITION, but handles NIL as top-level arg-position.
     */
    @LispMethod(comment = "Like @xref FORMULA-ARG-POSITION, but handles NIL as top-level arg-position.")
    public static SubLObject gke_formula_arg_position(final SubLObject formula, final SubLObject arg_position, SubLObject v_default) {
        if (v_default == UNPROVIDED) {
            v_default = NIL;
        }
        if (NIL != cycl_utilities.arg_position_p(arg_position)) {
            return cycl_utilities.formula_arg_position(formula, arg_position, v_default);
        }
        if (NIL == arg_position) {
            return values(formula, T);
        }
        return values(v_default, NIL);
    }

    /**
     * Like @xref FORMULA-ARG-POSITION-SUBST, but handles NIL as top-level arg-position.
     */
    @LispMethod(comment = "Like @xref FORMULA-ARG-POSITION-SUBST, but handles NIL as top-level arg-position.")
    public static final SubLObject gke_formula_arg_position_subst_alt(SubLObject new_term, SubLObject arg_position, SubLObject formula) {
        if (NIL != cycl_utilities.arg_position_p(arg_position)) {
            return cycl_utilities.formula_arg_position_subst(new_term, arg_position, formula);
        } else {
            if (NIL == arg_position) {
                return new_term;
            } else {
                return formula;
            }
        }
    }

    /**
     * Like @xref FORMULA-ARG-POSITION-SUBST, but handles NIL as top-level arg-position.
     */
    @LispMethod(comment = "Like @xref FORMULA-ARG-POSITION-SUBST, but handles NIL as top-level arg-position.")
    public static SubLObject gke_formula_arg_position_subst(final SubLObject new_term, final SubLObject arg_position, final SubLObject formula) {
        if (NIL != cycl_utilities.arg_position_p(arg_position)) {
            return cycl_utilities.formula_arg_position_subst(new_term, arg_position, formula);
        }
        if (NIL == arg_position) {
            return new_term;
        }
        return formula;
    }

    /**
     * Loosen LITERAL, using GKE reformulation rules.
     */
    @LispMethod(comment = "Loosen LITERAL, using GKE reformulation rules.")
    public static final SubLObject loosen_gke_literal_alt(SubLObject literal, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = constants_high.find_constant($$$GKEReformulationRuleHoldingMt);
        }
        SubLTrampolineFile.checkType(literal, EL_SENTENCE_P);
        SubLTrampolineFile.checkType(mt, HLMT_P);
        {
            SubLObject settings = com.cyc.cycjava.cycl.gke_main.reformulator_settings_for_gke($LOOSEN);
            SubLObject v_answer = literal;
            if (NIL != settings) {
                v_answer = reformulator_hub.reformulate_cycl(literal, mt, settings);
            }
            return v_answer;
        }
    }

    /**
     * Loosen LITERAL, using GKE reformulation rules.
     */
    @LispMethod(comment = "Loosen LITERAL, using GKE reformulation rules.")
    public static SubLObject loosen_gke_literal(final SubLObject literal, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = constants_high.find_constant(gke_main.$$$GKEReformulationRuleHoldingMt);
        }
        assert NIL != el_grammar.el_sentence_p(literal) : "! el_grammar.el_sentence_p(literal) " + ("el_grammar.el_sentence_p(literal) " + "CommonSymbols.NIL != el_grammar.el_sentence_p(literal) ") + literal;
        assert NIL != hlmt.hlmt_p(mt) : "! hlmt.hlmt_p(mt) " + ("hlmt.hlmt_p(mt) " + "CommonSymbols.NIL != hlmt.hlmt_p(mt) ") + mt;
        final SubLObject settings = gke_main.reformulator_settings_for_gke($LOOSEN);
        SubLObject v_answer = literal;
        if (NIL != settings) {
            v_answer = reformulator_hub.reformulate_cycl(literal, mt, settings);
        }
        return v_answer;
    }

    /**
     * Strengthen LITERAL, using GKE reformulation rules.
     */
    @LispMethod(comment = "Strengthen LITERAL, using GKE reformulation rules.")
    public static final SubLObject strengthen_gke_literal_alt(SubLObject literal, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = constants_high.find_constant($$$GKEReformulationRuleHoldingMt);
        }
        SubLTrampolineFile.checkType(literal, EL_SENTENCE_P);
        if (NIL == mt) {
            return literal;
        }
        SubLTrampolineFile.checkType(mt, HLMT_P);
        {
            SubLObject settings = com.cyc.cycjava.cycl.gke_main.reformulator_settings_for_gke($STRENGTHEN);
            SubLObject v_answer = literal;
            if (NIL != settings) {
                v_answer = reformulator_hub.reformulate_cycl(literal, mt, settings);
            }
            return v_answer;
        }
    }

    /**
     * Strengthen LITERAL, using GKE reformulation rules.
     */
    @LispMethod(comment = "Strengthen LITERAL, using GKE reformulation rules.")
    public static SubLObject strengthen_gke_literal(final SubLObject literal, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = constants_high.find_constant(gke_main.$$$GKEReformulationRuleHoldingMt);
        }
        assert NIL != el_grammar.el_sentence_p(literal) : "! el_grammar.el_sentence_p(literal) " + ("el_grammar.el_sentence_p(literal) " + "CommonSymbols.NIL != el_grammar.el_sentence_p(literal) ") + literal;
        if (NIL == mt) {
            return literal;
        }
        assert NIL != hlmt.hlmt_p(mt) : "! hlmt.hlmt_p(mt) " + ("hlmt.hlmt_p(mt) " + "CommonSymbols.NIL != hlmt.hlmt_p(mt) ") + mt;
        final SubLObject settings = gke_main.reformulator_settings_for_gke($STRENGTHEN);
        SubLObject v_answer = literal;
        if (NIL != settings) {
            v_answer = reformulator_hub.reformulate_cycl(literal, mt, settings);
        }
        return v_answer;
    }

    public static final SubLObject reformulator_settings_for_gke_alt(SubLObject mode) {
        {
            SubLObject pcase_var = mode;
            if (pcase_var.eql($LOOSEN)) {
                {
                    SubLObject meta_predicate = constants_high.find_constant($str_alt80$useReformulationRuleForGuidedKnow);
                    SubLObject settings = NIL;
                    if (NIL != valid_constantP(meta_predicate, UNPROVIDED)) {
                        {
                            SubLObject meta_predicates = list(meta_predicate);
                            settings = list($META_PREDICATES, meta_predicates);
                        }
                    }
                    return settings;
                }
            } else {
                return NIL;
            }
        }
    }

    public static SubLObject reformulator_settings_for_gke(final SubLObject mode) {
        if (mode.eql($LOOSEN)) {
            final SubLObject meta_predicate = constants_high.find_constant(gke_main.$str78$useReformulationRuleForGuidedKnow);
            SubLObject settings = NIL;
            if (NIL != valid_constantP(meta_predicate, UNPROVIDED)) {
                final SubLObject meta_predicates = list(meta_predicate);
                settings = list($META_PREDICATES, meta_predicates);
            }
            return settings;
        }
        return NIL;
    }

    public static final SubLObject sentence_substitution_wffP_alt(SubLObject sentence, SubLObject mt) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject wffP = NIL;
                {
                    SubLObject _prev_bind_0 = at_vars.$at_assume_conjuncts_independentP$.currentBinding(thread);
                    try {
                        at_vars.$at_assume_conjuncts_independentP$.bind(NIL, thread);
                        wffP = wff.el_wffP(sentence, mt, UNPROVIDED);
                    } finally {
                        at_vars.$at_assume_conjuncts_independentP$.rebind(_prev_bind_0, thread);
                    }
                }
                return wffP;
            }
        }
    }

    public static SubLObject sentence_substitution_wffP(final SubLObject sentence, final SubLObject mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject wffP = NIL;
        final SubLObject _prev_bind_0 = at_vars.$at_assume_conjuncts_independentP$.currentBinding(thread);
        try {
            at_vars.$at_assume_conjuncts_independentP$.bind(NIL, thread);
            wffP = wff.el_wffP(sentence, mt, UNPROVIDED);
        } finally {
            at_vars.$at_assume_conjuncts_independentP$.rebind(_prev_bind_0, thread);
        }
        return wffP;
    }

    public static final SubLObject free_variable_alt(SubLObject variable, SubLObject sentence) {
        if (NIL != formula_pattern_match.formula_matches_pattern(sentence, listS($$thereExists, variable, $list_alt82))) {
            return third(sentence);
        } else {
            if (NIL != formula_pattern_match.formula_matches_pattern(sentence, $list_alt83)) {
                return list($$thereExists, second(sentence), com.cyc.cycjava.cycl.gke_main.free_variable(variable, third(sentence)));
            } else {
                return sentence;
            }
        }
    }

    public static SubLObject free_variable(final SubLObject variable, final SubLObject sentence) {
        if (NIL != formula_pattern_match.formula_matches_pattern(sentence, listS(gke_main.$$thereExists, variable, gke_main.$list80))) {
            return third(sentence);
        }
        if (NIL != formula_pattern_match.formula_matches_pattern(sentence, gke_main.$list81)) {
            return list(gke_main.$$thereExists, second(sentence), gke_main.free_variable(variable, third(sentence)));
        }
        return sentence;
    }

    public static final SubLObject existentially_boundP_alt(SubLObject variable, SubLObject sentence) {
        if (NIL != formula_pattern_match.formula_matches_pattern(sentence, listS($$thereExists, variable, $list_alt82))) {
            return T;
        } else {
            if (NIL != formula_pattern_match.formula_matches_pattern(sentence, $list_alt83)) {
                return com.cyc.cycjava.cycl.gke_main.existentially_boundP(variable, third(sentence));
            } else {
                return NIL;
            }
        }
    }

    public static SubLObject existentially_boundP(final SubLObject variable, final SubLObject sentence) {
        if (NIL != formula_pattern_match.formula_matches_pattern(sentence, listS(gke_main.$$thereExists, variable, gke_main.$list80))) {
            return T;
        }
        if (NIL != formula_pattern_match.formula_matches_pattern(sentence, gke_main.$list81)) {
            return gke_main.existentially_boundP(variable, third(sentence));
        }
        return NIL;
    }

    public static final SubLObject possible_sentence_substitutions_alt(SubLObject string, SubLObject sentence, SubLObject arg_pos, SubLObject replace_all, SubLObject domain_mt, SubLObject allow_coercionP, SubLObject generation_mt, SubLObject parsing_mt, SubLObject possibly_strip_extraneous_punctuationP, SubLObject force, SubLObject nl_preds, SubLObject string_match_options, SubLObject instance_limit) {
        if (allow_coercionP == UNPROVIDED) {
            allow_coercionP = T;
        }
        if (generation_mt == UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (parsing_mt == UNPROVIDED) {
            parsing_mt = $$EnglishMt;
        }
        if (possibly_strip_extraneous_punctuationP == UNPROVIDED) {
            possibly_strip_extraneous_punctuationP = T;
        }
        if (force == UNPROVIDED) {
            force = $NONE;
        }
        if (nl_preds == UNPROVIDED) {
            nl_preds = list($$nonPlural_Generic);
        }
        if (string_match_options == UNPROVIDED) {
            string_match_options = $list_alt87;
        }
        if (instance_limit == UNPROVIDED) {
            instance_limit = TEN_INTEGER;
        }
        SubLTrampolineFile.checkType(string, STRINGP);
        {
            SubLObject ans = NIL;
            SubLObject isa_constraint = com.cyc.cycjava.cycl.gke_main.formula_arg_pos_isa_constraint(sentence, arg_pos, domain_mt);
            SubLObject non_wffP = NIL;
            SubLObject candidates = api_widgets.get_constrained_cycl_for_string_int(string, isa_constraint, domain_mt, generation_mt, parsing_mt, NIL, NIL, possibly_strip_extraneous_punctuationP, force, nl_preds, NIL, NIL, string_match_options, instance_limit);
            SubLObject allow_non_wffP = NIL;
            ans = com.cyc.cycjava.cycl.gke_main.substitute_terms_into_sentence(candidates, sentence, arg_pos, replace_all, domain_mt, allow_non_wffP);
            if ((NIL != allow_coercionP) && (NIL != list_utilities.empty_list_p(ans))) {
                isa_constraint = $$Thing;
                candidates = delete_duplicates(append(candidates, api_widgets.get_constrained_cycl_for_string_int(string, isa_constraint, domain_mt, generation_mt, parsing_mt, NIL, NIL, possibly_strip_extraneous_punctuationP, force, nl_preds, NIL, NIL, string_match_options, instance_limit)), symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                {
                    SubLObject cdolist_list_var = candidates;
                    SubLObject candidate = NIL;
                    for (candidate = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , candidate = cdolist_list_var.first()) {
                        {
                            SubLObject v_term = last(candidate, UNPROVIDED).first();
                            SubLObject new_sentence = com.cyc.cycjava.cycl.gke_main.coerce_term_into_sentence(v_term, sentence, arg_pos, replace_all, domain_mt, UNPROVIDED);
                            if (NIL != new_sentence) {
                                if (NIL != el_formula_p(new_sentence)) {
                                    new_sentence = optimize_el_formula_variable_names(new_sentence, generation_mt, domain_mt);
                                }
                                ans = cons(list(candidate, new_sentence), ans);
                            }
                        }
                    }
                }
            }
            if (NIL != list_utilities.empty_list_p(ans)) {
                allow_non_wffP = T;
                ans = com.cyc.cycjava.cycl.gke_main.substitute_terms_into_sentence(candidates, sentence, arg_pos, replace_all, domain_mt, allow_non_wffP);
                if (NIL != list_utilities.non_empty_list_p(ans)) {
                    non_wffP = T;
                }
            }
            return list(nreverse(ans), non_wffP);
        }
    }

    public static SubLObject possible_sentence_substitutions(final SubLObject string, final SubLObject sentence, final SubLObject arg_pos, final SubLObject replace_all, final SubLObject domain_mt, SubLObject allow_coercionP, SubLObject generation_mt, SubLObject parsing_mt, SubLObject possibly_strip_extraneous_punctuationP, SubLObject force, SubLObject nl_preds, SubLObject string_match_options, SubLObject instance_limit) {
        if (allow_coercionP == UNPROVIDED) {
            allow_coercionP = T;
        }
        if (generation_mt == UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (parsing_mt == UNPROVIDED) {
            parsing_mt = gke_main.$$EnglishMt;
        }
        if (possibly_strip_extraneous_punctuationP == UNPROVIDED) {
            possibly_strip_extraneous_punctuationP = T;
        }
        if (force == UNPROVIDED) {
            force = $NONE;
        }
        if (nl_preds == UNPROVIDED) {
            nl_preds = list(gke_main.$$nonPlural_Generic);
        }
        if (string_match_options == UNPROVIDED) {
            string_match_options = gke_main.$list85;
        }
        if (instance_limit == UNPROVIDED) {
            instance_limit = TEN_INTEGER;
        }
        assert NIL != stringp(string) : "! stringp(string) " + ("Types.stringp(string) " + "CommonSymbols.NIL != Types.stringp(string) ") + string;
        SubLObject ans = NIL;
        SubLObject isa_constraint = gke_main.formula_arg_pos_isa_constraint(sentence, arg_pos, domain_mt);
        SubLObject non_wffP = NIL;
        SubLObject candidates = api_widgets.get_constrained_cycl_for_string_int(string, isa_constraint, domain_mt, generation_mt, parsing_mt, NIL, NIL, possibly_strip_extraneous_punctuationP, force, nl_preds, NIL, NIL, string_match_options, instance_limit);
        SubLObject allow_non_wffP = NIL;
        ans = gke_main.substitute_terms_into_sentence(candidates, sentence, arg_pos, replace_all, domain_mt, allow_non_wffP);
        if ((NIL != allow_coercionP) && (NIL != list_utilities.empty_list_p(ans))) {
            isa_constraint = gke_main.$$Thing;
            SubLObject cdolist_list_var;
            candidates = cdolist_list_var = delete_duplicates(append(candidates, api_widgets.get_constrained_cycl_for_string_int(string, isa_constraint, domain_mt, generation_mt, parsing_mt, NIL, NIL, possibly_strip_extraneous_punctuationP, force, nl_preds, NIL, NIL, string_match_options, instance_limit)), symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject candidate = NIL;
            candidate = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                final SubLObject v_term = last(candidate, UNPROVIDED).first();
                SubLObject new_sentence = gke_main.coerce_term_into_sentence(v_term, sentence, arg_pos, replace_all, domain_mt, UNPROVIDED);
                if (NIL != new_sentence) {
                    if (NIL != el_formula_p(new_sentence)) {
                        new_sentence = optimize_el_formula_variable_names(new_sentence, generation_mt, domain_mt, UNPROVIDED);
                    }
                    ans = cons(list(candidate, new_sentence), ans);
                }
                cdolist_list_var = cdolist_list_var.rest();
                candidate = cdolist_list_var.first();
            } 
        }
        if (NIL != list_utilities.empty_list_p(ans)) {
            allow_non_wffP = T;
            ans = gke_main.substitute_terms_into_sentence(candidates, sentence, arg_pos, replace_all, domain_mt, allow_non_wffP);
            if (NIL != list_utilities.non_empty_list_p(ans)) {
                non_wffP = T;
            }
        }
        return list(nreverse(ans), non_wffP);
    }

    /**
     *
     *
     * @return a #$Collection of which anything in ARG-POS of SENTENCE is required to be, if asserted in MT.
     */
    @LispMethod(comment = "@return a #$Collection of which anything in ARG-POS of SENTENCE is required to be, if asserted in MT.")
    public static final SubLObject formula_arg_pos_isa_constraint_alt(SubLObject sentence, SubLObject arg_pos, SubLObject mt) {
        {
            SubLObject var = czer_utilities.unique_el_var_wrt_expression(sentence, UNPROVIDED);
            SubLObject constraints = at_var_types.formula_variable_isa_constraints(var, replace_formula_arg_position(arg_pos, var, sentence), mt, UNPROVIDED);
            return NIL != constraints ? ((SubLObject) (list_utilities.extremal(constraints, $sym90$GENERALITY_ESTIMATE_, UNPROVIDED))) : $$Thing;
        }
    }

    /**
     *
     *
     * @return a #$Collection of which anything in ARG-POS of SENTENCE is required to be, if asserted in MT.
     */
    @LispMethod(comment = "@return a #$Collection of which anything in ARG-POS of SENTENCE is required to be, if asserted in MT.")
    public static SubLObject formula_arg_pos_isa_constraint(final SubLObject sentence, final SubLObject arg_pos, final SubLObject mt) {
        final SubLObject var = czer_utilities.unique_el_var_wrt_expression(sentence, UNPROVIDED);
        final SubLObject constraints = at_var_types.formula_variable_isa_constraints(var, replace_formula_arg_position(arg_pos, var, sentence), mt, UNPROVIDED);
        return NIL != constraints ? list_utilities.extremal(constraints, gke_main.$sym88$GENERALITY_ESTIMATE_, UNPROVIDED) : gke_main.$$Thing;
    }

    public static final SubLObject substitute_term_into_sentence_alt(SubLObject v_term, SubLObject sentence, SubLObject arg_pos, SubLObject replace_all, SubLObject domain_mt, SubLObject try_coercionP, SubLObject allow_non_wffP, SubLObject optimize_var_namesP) {
        if (try_coercionP == UNPROVIDED) {
            try_coercionP = T;
        }
        if (allow_non_wffP == UNPROVIDED) {
            allow_non_wffP = NIL;
        }
        if (optimize_var_namesP == UNPROVIDED) {
            optimize_var_namesP = T;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject el_sentence = cycl_utilities.expression_transform(sentence, NART_P, NART_EL_FORMULA, UNPROVIDED, UNPROVIDED);
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                    if (NIL == formula_has_arg_position_p(el_sentence, arg_pos)) {
                        Errors.error($str_alt94$_S_does_not_have_arg_position__S, sentence, arg_pos);
                    }
                }
                {
                    SubLObject ans = com.cyc.cycjava.cycl.gke_main.substitute_term_into_sentence_int(v_term, el_sentence, arg_pos, replace_all, domain_mt, allow_non_wffP);
                    if ((NIL != try_coercionP) && (NIL == ans)) {
                        ans = com.cyc.cycjava.cycl.gke_main.coerce_term_into_sentence(v_term, el_sentence, arg_pos, replace_all, domain_mt, UNPROVIDED);
                    }
                    if ((NIL != optimize_var_namesP) && (NIL != el_formula_p(ans))) {
                        ans = optimize_el_formula_variable_names(ans, pph_vars.$pph_language_mt$.getDynamicValue(thread), domain_mt);
                    }
                    return ans;
                }
            }
        }
    }

    public static SubLObject substitute_term_into_sentence(final SubLObject v_term, final SubLObject sentence, final SubLObject arg_pos, final SubLObject replace_all, final SubLObject domain_mt, SubLObject try_coercionP, SubLObject allow_non_wffP, SubLObject optimize_var_namesP) {
        if (try_coercionP == UNPROVIDED) {
            try_coercionP = T;
        }
        if (allow_non_wffP == UNPROVIDED) {
            allow_non_wffP = NIL;
        }
        if (optimize_var_namesP == UNPROVIDED) {
            optimize_var_namesP = T;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject el_sentence = cycl_utilities.expression_transform(sentence, NART_P, gke_main.NART_EL_FORMULA, UNPROVIDED, UNPROVIDED);
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == formula_has_arg_position_p(el_sentence, arg_pos))) {
            Errors.error(gke_main.$str92$_S_does_not_have_arg_position__S, sentence, arg_pos);
        }
        SubLObject ans = gke_main.substitute_term_into_sentence_int(v_term, el_sentence, arg_pos, replace_all, domain_mt, allow_non_wffP);
        if ((NIL != try_coercionP) && (NIL == ans)) {
            ans = gke_main.coerce_term_into_sentence(v_term, el_sentence, arg_pos, replace_all, domain_mt, UNPROVIDED);
        }
        if ((NIL != optimize_var_namesP) && (NIL != el_formula_p(ans))) {
            ans = optimize_el_formula_variable_names(ans, pph_vars.$pph_language_mt$.getDynamicValue(thread), domain_mt, sentence);
        }
        return ans;
    }

    public static final SubLObject substitute_terms_into_sentence_alt(SubLObject renderings, SubLObject sentence, SubLObject arg_pos, SubLObject replace_all, SubLObject domain_mt, SubLObject allow_non_wffP) {
        {
            SubLObject ans = NIL;
            SubLObject cdolist_list_var = renderings;
            SubLObject rendering = NIL;
            for (rendering = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , rendering = cdolist_list_var.first()) {
                {
                    SubLObject v_term = second(rendering);
                    SubLObject new_sentence = com.cyc.cycjava.cycl.gke_main.substitute_term_into_sentence_int(v_term, sentence, arg_pos, replace_all, domain_mt, allow_non_wffP);
                    if (NIL != new_sentence) {
                        ans = cons(list(rendering, new_sentence), ans);
                    }
                }
            }
            return ans;
        }
    }

    public static SubLObject substitute_terms_into_sentence(final SubLObject renderings, final SubLObject sentence, final SubLObject arg_pos, final SubLObject replace_all, final SubLObject domain_mt, final SubLObject allow_non_wffP) {
        SubLObject ans = NIL;
        SubLObject cdolist_list_var = renderings;
        SubLObject rendering = NIL;
        rendering = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject v_term = second(rendering);
            final SubLObject new_sentence = gke_main.substitute_term_into_sentence_int(v_term, sentence, arg_pos, replace_all, domain_mt, allow_non_wffP);
            if (NIL != new_sentence) {
                ans = cons(list(rendering, new_sentence), ans);
            }
            cdolist_list_var = cdolist_list_var.rest();
            rendering = cdolist_list_var.first();
        } 
        return ans;
    }

    public static final SubLObject substitute_term_into_sentence_int_alt(SubLObject v_term, SubLObject sentence, SubLObject arg_pos, SubLObject replace_all, SubLObject domain_mt, SubLObject allow_non_wffP) {
        {
            SubLObject replaced_term = cycl_utilities.formula_arg_position(sentence, arg_pos, UNPROVIDED);
            SubLObject new_sentence = (NIL != replace_all) ? ((SubLObject) (cycl_utilities.expression_subst(v_term, replaced_term, sentence, symbol_function(EQUAL), UNPROVIDED))) : replace_formula_arg_position(arg_pos, v_term, sentence);
            SubLObject cdolist_list_var = cycl_utilities.expression_gather(new_sentence, symbol_function(EL_FORMULA_P), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject expression = NIL;
            for (expression = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , expression = cdolist_list_var.first()) {
                if (NIL != formula_pattern_match.formula_matches_pattern(expression, listS($$thereExists, v_term, $list_alt82))) {
                    new_sentence = cycl_utilities.expression_nsubst(quantified_sub_sentence(expression), expression, new_sentence, symbol_function(EQUAL), UNPROVIDED);
                }
            }
            if (NIL != cycl_variables.cyc_varP(replaced_term)) {
                if (NIL != com.cyc.cycjava.cycl.gke_main.existentially_boundP(replaced_term, new_sentence)) {
                    if (NIL == list_utilities.tree_find(replaced_term, com.cyc.cycjava.cycl.gke_main.free_variable(replaced_term, new_sentence), UNPROVIDED, UNPROVIDED)) {
                        new_sentence = com.cyc.cycjava.cycl.gke_main.free_variable(replaced_term, new_sentence);
                    }
                }
            }
            if ((NIL != allow_non_wffP) || (NIL != com.cyc.cycjava.cycl.gke_main.sentence_substitution_wffP(new_sentence, domain_mt))) {
                return new_sentence;
            }
        }
        return NIL;
    }

    public static SubLObject substitute_term_into_sentence_int(final SubLObject v_term, final SubLObject sentence, final SubLObject arg_pos, final SubLObject replace_all, final SubLObject domain_mt, final SubLObject allow_non_wffP) {
        final SubLObject replaced_term = cycl_utilities.formula_arg_position(sentence, arg_pos, UNPROVIDED);
        SubLObject new_sentence = (NIL != replace_all) ? cycl_utilities.expression_subst(v_term, replaced_term, sentence, symbol_function(EQUAL), UNPROVIDED) : replace_formula_arg_position(arg_pos, v_term, sentence);
        SubLObject cdolist_list_var = cycl_utilities.expression_gather(new_sentence, symbol_function(EL_FORMULA_P), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        SubLObject expression = NIL;
        expression = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != formula_pattern_match.formula_matches_pattern(expression, listS(gke_main.$$thereExists, v_term, gke_main.$list80))) {
                new_sentence = cycl_utilities.expression_nsubst(quantified_sub_sentence(expression), expression, new_sentence, symbol_function(EQUAL), UNPROVIDED);
            }
            cdolist_list_var = cdolist_list_var.rest();
            expression = cdolist_list_var.first();
        } 
        if (((NIL != cycl_variables.cyc_varP(replaced_term)) && (NIL != gke_main.existentially_boundP(replaced_term, new_sentence))) && (NIL == list_utilities.tree_find(replaced_term, gke_main.free_variable(replaced_term, new_sentence), UNPROVIDED, UNPROVIDED))) {
            new_sentence = gke_main.free_variable(replaced_term, new_sentence);
        }
        if ((NIL != allow_non_wffP) || (NIL != gke_main.sentence_substitution_wffP(new_sentence, domain_mt))) {
            return new_sentence;
        }
        return NIL;
    }

    public static final SubLObject coerce_term_into_sentence_alt(SubLObject v_term, SubLObject sentence, SubLObject arg_pos, SubLObject replace_all, SubLObject domain_mt, SubLObject optimize_el_formula_variable_namesP) {
        if (optimize_el_formula_variable_namesP == UNPROVIDED) {
            optimize_el_formula_variable_namesP = T;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL != isa.isaP(v_term, $$Collection, domain_mt, UNPROVIDED)) {
                {
                    SubLObject new_variable = czer_utilities.unique_el_var_wrt_expression(sentence, UNPROVIDED);
                    SubLObject new_sentence = com.cyc.cycjava.cycl.gke_main.free_variable(cycl_utilities.formula_arg_position(sentence, arg_pos, UNPROVIDED), sentence);
                    if (NIL != replace_all) {
                        new_sentence = sublis(list(bq_cons(cycl_utilities.formula_arg_position(sentence, arg_pos, UNPROVIDED), new_variable)), new_sentence, UNPROVIDED, UNPROVIDED);
                    } else {
                        new_sentence = com.cyc.cycjava.cycl.gke_main.free_variable(cycl_utilities.formula_arg_position(sentence, arg_pos, UNPROVIDED), replace_formula_arg_position(arg_pos, new_variable, sentence));
                    }
                    {
                        SubLObject new_literal = list($$isa, new_variable, v_term);
                        thread.resetMultipleValues();
                        {
                            SubLObject uniq_new_literal = value_tables.varmap_uniquify_source_vars(new_literal, new_sentence);
                            SubLObject var_map = thread.secondMultipleValue();
                            thread.resetMultipleValues();
                            if (NIL != replace_all) {
                                new_sentence = query_library_api.combine_formulas_at_position($list_alt97, new_sentence, NIL, NIL, NIL, NIL);
                                new_sentence = query_library_api.combine_formulas_at_position(new_sentence, uniq_new_literal, NIL, NIL, NIL, NIL);
                            } else {
                                new_sentence = query_library_api.combine_formulas_at_position(new_sentence, uniq_new_literal, butlast(arg_pos, UNPROVIDED), NIL, NIL, NIL);
                            }
                            {
                                SubLObject new_variable_alias = list_utilities.alist_lookup(var_map, new_variable, UNPROVIDED, UNPROVIDED);
                                new_sentence = cycl_utilities.formula_subst(new_variable, new_variable_alias, new_sentence, UNPROVIDED, UNPROVIDED);
                            }
                        }
                    }
                    if (NIL != com.cyc.cycjava.cycl.gke_main.sentence_substitution_wffP(new_sentence, domain_mt)) {
                        {
                            SubLObject best_var_name = (NIL != optimize_el_formula_variable_namesP) ? ((SubLObject) (optimize_el_formula_variable_name(new_variable, new_sentence, UNPROVIDED, UNPROVIDED))) : cycl_variables.el_var_name(new_variable);
                            SubLObject other_vars = cycl_utilities.expression_gather(new_sentence, symbol_function($sym98$EL_VAR_), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            SubLObject other_var_names = Mapping.mapcar(symbol_function(EL_VAR_NAME), other_vars);
                            SubLObject unique_var_name = czer_utilities.unique_var_name_wrt(best_var_name, other_var_names);
                            SubLObject new_variable2 = correct_variable(cycl_variables.make_el_var(unique_var_name));
                            SubLObject new_sentence2 = nsublis(list(bq_cons(new_variable, new_variable2)), new_sentence, UNPROVIDED, UNPROVIDED);
                            return new_sentence2;
                        }
                    }
                }
            } else {
                if (NIL != isa.isaP(v_term, $$Individual, domain_mt, UNPROVIDED)) {
                    {
                        SubLObject new_term = kb_utilities.set_to_collection(list($$TheSet, v_term), domain_mt);
                        SubLObject new_sentence = com.cyc.cycjava.cycl.gke_main.substitute_term_into_sentence_int(new_term, sentence, arg_pos, replace_all, domain_mt, NIL);
                        if (NIL == new_sentence) {
                            return NIL;
                        }
                        {
                            SubLObject cdolist_list_var = cycl_utilities.expression_gather(new_sentence, symbol_function(LISTP), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            SubLObject expression = NIL;
                            for (expression = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , expression = cdolist_list_var.first()) {
                                if (NIL != formula_pattern_match.formula_matches_pattern(expression, list($$isa, $EL_VARIABLE, new_term))) {
                                    {
                                        SubLObject obsolete_variable = second(expression);
                                        SubLObject arg_positions = cycl_utilities.arg_positions_dfs(expression, new_sentence, symbol_function(EQUAL));
                                        SubLObject cdolist_list_var_37 = arg_positions;
                                        SubLObject arg_pos_38 = NIL;
                                        for (arg_pos_38 = cdolist_list_var_37.first(); NIL != cdolist_list_var_37; cdolist_list_var_37 = cdolist_list_var_37.rest() , arg_pos_38 = cdolist_list_var_37.first()) {
                                            if (NIL != arg_pos_38) {
                                                {
                                                    SubLObject group_arg_pos = butlast(arg_pos_38, UNPROVIDED);
                                                    SubLObject group = cycl_utilities.formula_arg_position(new_sentence, group_arg_pos, UNPROVIDED);
                                                    if ((group.first() == $$and) && (NIL != list_utilities.lengthG(group, TWO_INTEGER, UNPROVIDED))) {
                                                        group = remove(expression, group, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                        group = cycl_utilities.formula_subst(v_term, obsolete_variable, group, symbol_function(EQUAL), UNPROVIDED);
                                                        if (NIL != list_utilities.lengthE(group, TWO_INTEGER, UNPROVIDED)) {
                                                            group = second(group);
                                                        }
                                                        if (NIL != group_arg_pos) {
                                                            new_sentence = cycl_utilities.formula_arg_position_subst(group, group_arg_pos, new_sentence);
                                                        } else {
                                                            new_sentence = group;
                                                        }
                                                    } else {
                                                        {
                                                            SubLObject new_literal = list($$equals, second(expression), v_term);
                                                            new_sentence = cycl_utilities.formula_arg_position_subst(new_literal, arg_pos_38, new_sentence);
                                                        }
                                                    }
                                                }
                                            } else {
                                                new_sentence = list($$equals, second(new_sentence), v_term);
                                            }
                                        }
                                        if (NIL != com.cyc.cycjava.cycl.gke_main.existentially_boundP(obsolete_variable, new_sentence)) {
                                            if (NIL == list_utilities.tree_find(obsolete_variable, com.cyc.cycjava.cycl.gke_main.free_variable(obsolete_variable, new_sentence), UNPROVIDED, UNPROVIDED)) {
                                                new_sentence = com.cyc.cycjava.cycl.gke_main.free_variable(obsolete_variable, new_sentence);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (NIL == com.cyc.cycjava.cycl.gke_main.sentence_substitution_wffP(new_sentence, domain_mt)) {
                            return NIL;
                        }
                        return new_sentence;
                    }
                } else {
                    return NIL;
                }
            }
            return NIL;
        }
    }

    public static SubLObject coerce_term_into_sentence(final SubLObject v_term, final SubLObject sentence, final SubLObject arg_pos, final SubLObject replace_all, final SubLObject domain_mt, SubLObject optimize_el_formula_variable_namesP) {
        if (optimize_el_formula_variable_namesP == UNPROVIDED) {
            optimize_el_formula_variable_namesP = T;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != isa.isaP(v_term, gke_main.$$Collection, domain_mt, UNPROVIDED)) {
            final SubLObject new_variable = czer_utilities.unique_el_var_wrt_expression(sentence, UNPROVIDED);
            SubLObject new_sentence = gke_main.free_variable(cycl_utilities.formula_arg_position(sentence, arg_pos, UNPROVIDED), sentence);
            if (NIL != replace_all) {
                new_sentence = sublis(list(bq_cons(cycl_utilities.formula_arg_position(sentence, arg_pos, UNPROVIDED), new_variable)), new_sentence, UNPROVIDED, UNPROVIDED);
            } else {
                new_sentence = gke_main.free_variable(cycl_utilities.formula_arg_position(sentence, arg_pos, UNPROVIDED), replace_formula_arg_position(arg_pos, new_variable, sentence));
            }
            final SubLObject new_literal = list(gke_main.$$isa, new_variable, v_term);
            thread.resetMultipleValues();
            final SubLObject uniq_new_literal = value_tables.varmap_uniquify_source_vars(new_literal, new_sentence);
            final SubLObject var_map = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (NIL != replace_all) {
                new_sentence = query_library_api.combine_formulas_at_position(gke_main.$list95, new_sentence, NIL, NIL, NIL, NIL);
                new_sentence = query_library_api.combine_formulas_at_position(new_sentence, uniq_new_literal, NIL, NIL, NIL, NIL);
            } else {
                new_sentence = query_library_api.combine_formulas_at_position(new_sentence, uniq_new_literal, butlast(arg_pos, UNPROVIDED), NIL, NIL, NIL);
            }
            final SubLObject new_variable_alias = list_utilities.alist_lookup(var_map, new_variable, UNPROVIDED, UNPROVIDED);
            new_sentence = cycl_utilities.formula_subst(new_variable, new_variable_alias, new_sentence, UNPROVIDED, UNPROVIDED);
            if (NIL != gke_main.sentence_substitution_wffP(new_sentence, domain_mt)) {
                final SubLObject best_var_name = (NIL != optimize_el_formula_variable_namesP) ? optimize_el_formula_variable_name(new_variable, new_sentence, UNPROVIDED, UNPROVIDED) : cycl_variables.el_var_name(new_variable);
                final SubLObject other_vars = cycl_utilities.expression_gather(new_sentence, symbol_function(gke_main.$sym96$EL_VAR_), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                final SubLObject other_var_names = Mapping.mapcar(symbol_function(gke_main.EL_VAR_NAME), other_vars);
                final SubLObject unique_var_name = czer_utilities.unique_var_name_wrt(best_var_name, other_var_names);
                final SubLObject new_variable2 = correct_variable(cycl_variables.make_el_var(unique_var_name));
                final SubLObject new_sentence2 = nsublis(list(bq_cons(new_variable, new_variable2)), new_sentence, UNPROVIDED, UNPROVIDED);
                return new_sentence2;
            }
            return NIL;
        } else {
            if (NIL == isa.isaP(v_term, gke_main.$$Individual, domain_mt, UNPROVIDED)) {
                return NIL;
            }
            final SubLObject new_term = kb_utilities.set_to_collection(list(gke_main.$$TheSet, v_term), domain_mt);
            SubLObject new_sentence = gke_main.substitute_term_into_sentence_int(new_term, sentence, arg_pos, replace_all, domain_mt, NIL);
            if (NIL == new_sentence) {
                return NIL;
            }
            SubLObject cdolist_list_var = cycl_utilities.expression_gather(new_sentence, symbol_function(LISTP), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject expression = NIL;
            expression = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != formula_pattern_match.formula_matches_pattern(expression, list(gke_main.$$isa, $EL_VARIABLE, new_term))) {
                    final SubLObject obsolete_variable = second(expression);
                    SubLObject cdolist_list_var_$38;
                    final SubLObject arg_positions = cdolist_list_var_$38 = cycl_utilities.arg_positions_dfs(expression, new_sentence, symbol_function(EQUAL));
                    SubLObject arg_pos_$39 = NIL;
                    arg_pos_$39 = cdolist_list_var_$38.first();
                    while (NIL != cdolist_list_var_$38) {
                        if (NIL != arg_pos_$39) {
                            final SubLObject group_arg_pos = butlast(arg_pos_$39, UNPROVIDED);
                            SubLObject group = cycl_utilities.formula_arg_position(new_sentence, group_arg_pos, UNPROVIDED);
                            if (group.first().eql(gke_main.$$and) && (NIL != list_utilities.lengthG(group, TWO_INTEGER, UNPROVIDED))) {
                                group = remove(expression, group, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                group = cycl_utilities.formula_subst(v_term, obsolete_variable, group, symbol_function(EQUAL), UNPROVIDED);
                                if (NIL != list_utilities.lengthE(group, TWO_INTEGER, UNPROVIDED)) {
                                    group = second(group);
                                }
                                if (NIL != group_arg_pos) {
                                    new_sentence = cycl_utilities.formula_arg_position_subst(group, group_arg_pos, new_sentence);
                                } else {
                                    new_sentence = group;
                                }
                            } else {
                                final SubLObject new_literal2 = list(gke_main.$$equals, second(expression), v_term);
                                new_sentence = cycl_utilities.formula_arg_position_subst(new_literal2, arg_pos_$39, new_sentence);
                            }
                        } else {
                            new_sentence = list(gke_main.$$equals, second(new_sentence), v_term);
                        }
                        cdolist_list_var_$38 = cdolist_list_var_$38.rest();
                        arg_pos_$39 = cdolist_list_var_$38.first();
                    } 
                    if ((NIL != gke_main.existentially_boundP(obsolete_variable, new_sentence)) && (NIL == list_utilities.tree_find(obsolete_variable, gke_main.free_variable(obsolete_variable, new_sentence), UNPROVIDED, UNPROVIDED))) {
                        new_sentence = gke_main.free_variable(obsolete_variable, new_sentence);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                expression = cdolist_list_var.first();
            } 
            if (NIL == gke_main.sentence_substitution_wffP(new_sentence, domain_mt)) {
                return NIL;
            }
            return new_sentence;
        }
    }

    public static final SubLObject clear_gke_memoization_state_alt() {
        {
            SubLObject cs = $gke_memoization_state_caching_state$.getGlobalValue();
            if (NIL != cs) {
                memoization_state.caching_state_clear(cs);
            }
        }
        return NIL;
    }

    public static SubLObject clear_gke_memoization_state() {
        final SubLObject cs = gke_main.$gke_memoization_state_caching_state$.getGlobalValue();
        if (NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return NIL;
    }

    public static final SubLObject remove_gke_memoization_state_alt() {
        return memoization_state.caching_state_remove_function_results_with_args($gke_memoization_state_caching_state$.getGlobalValue(), list(EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_gke_memoization_state() {
        return memoization_state.caching_state_remove_function_results_with_args(gke_main.$gke_memoization_state_caching_state$.getGlobalValue(), list(EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject gke_memoization_state_internal_alt() {
        {
            SubLObject name = $$$GKE_Memoization_State;
            return memoization_state.new_memoization_state(name, ReadWriteLocks.new_rw_lock(name), UNPROVIDED, UNPROVIDED);
        }
    }

    public static SubLObject gke_memoization_state_internal() {
        final SubLObject name = gke_main.$$$GKE_Memoization_State;
        return memoization_state.new_memoization_state(name, ReadWriteLocks.new_rw_lock(name), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject gke_memoization_state_alt() {
        {
            SubLObject caching_state = $gke_memoization_state_caching_state$.getGlobalValue();
            if (NIL == caching_state) {
                caching_state = memoization_state.create_global_caching_state_for_name(GKE_MEMOIZATION_STATE, $gke_memoization_state_caching_state$, NIL, EQL, ZERO_INTEGER, ZERO_INTEGER);
                memoization_state.register_hl_store_cache_clear_callback(CLEAR_GKE_MEMOIZATION_STATE);
            }
            {
                SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
                if (results == $kw28$_MEMOIZED_ITEM_NOT_FOUND_) {
                    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.gke_main.gke_memoization_state_internal()));
                    memoization_state.caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
                }
                return memoization_state.caching_results(results);
            }
        }
    }

    public static SubLObject gke_memoization_state() {
        SubLObject caching_state = gke_main.$gke_memoization_state_caching_state$.getGlobalValue();
        if (NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name(gke_main.GKE_MEMOIZATION_STATE, gke_main.$gke_memoization_state_caching_state$, NIL, EQL, ZERO_INTEGER, ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback(gke_main.CLEAR_GKE_MEMOIZATION_STATE);
        }
        SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = arg2(resetMultipleValues(), multiple_value_list(gke_main.gke_memoization_state_internal()));
            memoization_state.caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }

    /**
     *
     *
     * @return PPH-JAVALIST-P suitable for using as a GKE gloss for LITERAL.
     */
    @LispMethod(comment = "@return PPH-JAVALIST-P suitable for using as a GKE gloss for LITERAL.")
    public static final SubLObject gke_gloss_for_literal_alt(SubLObject literal, SubLObject domain_mt, SubLObject language_mt) {
        if (domain_mt == UNPROVIDED) {
            domain_mt = pph_vars.$pph_domain_mt$.getDynamicValue();
        }
        if (language_mt == UNPROVIDED) {
            language_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        SubLTrampolineFile.checkType(literal, $sym121$ATOMIC_SENTENCE_);
        {
            SubLObject from_kb = com.cyc.cycjava.cycl.gke_main.get_gke_gloss_from_kb(literal, domain_mt, language_mt);
            return NIL != from_kb ? ((SubLObject) (from_kb)) : com.cyc.cycjava.cycl.gke_main.generate_gke_gloss_wrt_mt_cached(literal, domain_mt, language_mt);
        }
    }

    /**
     *
     *
     * @return PPH-JAVALIST-P suitable for using as a GKE gloss for LITERAL.
     */
    @LispMethod(comment = "@return PPH-JAVALIST-P suitable for using as a GKE gloss for LITERAL.")
    public static SubLObject gke_gloss_for_literal(final SubLObject literal, SubLObject domain_mt, SubLObject language_mt) {
        if (domain_mt == UNPROVIDED) {
            domain_mt = pph_vars.$pph_domain_mt$.getDynamicValue();
        }
        if (language_mt == UNPROVIDED) {
            language_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        assert NIL != atomic_sentenceP(literal) : "! el_utilities.atomic_sentenceP(literal) " + ("el_utilities.atomic_sentenceP(literal) " + "CommonSymbols.NIL != el_utilities.atomic_sentenceP(literal) ") + literal;
        final SubLObject from_kb = gke_main.get_gke_gloss_from_kb(literal, domain_mt, language_mt);
        return NIL != from_kb ? from_kb : gke_main.generate_gke_gloss_wrt_mt_cached(literal, domain_mt, language_mt);
    }

    public static final SubLObject get_gke_gloss_from_kb_alt(SubLObject literal, SubLObject domain_mt, SubLObject language_mt) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject gloss = NIL;
                SubLObject hl_literal = narts_high.nart_substitute(literal);
                {
                    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EQ, thread);
                        mt_relevance_macros.$mt$.bind(language_mt, thread);
                        {
                            SubLObject pred_var = $$gkeGlossWrtDomainMt;
                            if (NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(domain_mt, TWO_INTEGER, pred_var)) {
                                {
                                    SubLObject iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(domain_mt, TWO_INTEGER, pred_var);
                                    SubLObject done_var = NIL;
                                    SubLObject token_var = NIL;
                                    while (NIL == done_var) {
                                        {
                                            SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
                                            SubLObject valid = makeBoolean(token_var != final_index_spec);
                                            if (NIL != valid) {
                                                {
                                                    SubLObject final_index_iterator = NIL;
                                                    try {
                                                        final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, $GAF, NIL, NIL);
                                                        {
                                                            SubLObject done_var_79 = NIL;
                                                            SubLObject token_var_80 = NIL;
                                                            while (NIL == done_var_79) {
                                                                {
                                                                    SubLObject gaf = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_80);
                                                                    SubLObject valid_81 = makeBoolean(token_var_80 != gaf);
                                                                    if (NIL != valid_81) {
                                                                        if (cycl_utilities.formula_arg1(assertions_high.gaf_arg1(gaf), UNPROVIDED).equal(hl_literal)) {
                                                                            gloss = assertions_high.gaf_arg3(gaf);
                                                                        }
                                                                    }
                                                                    done_var_79 = makeBoolean(NIL == valid_81);
                                                                }
                                                            } 
                                                        }
                                                    } finally {
                                                        {
                                                            SubLObject _prev_bind_0_82 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                            try {
                                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                                if (NIL != final_index_iterator) {
                                                                    kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
                                                                }
                                                            } finally {
                                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_82, thread);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            done_var = makeBoolean(NIL == valid);
                                        }
                                    } 
                                }
                            }
                        }
                    } finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
                    }
                }
                return NIL != gloss ? ((SubLObject) (pph_utilities.cycl_structured_paraphrase_to_pph_javalist(gloss))) : NIL;
            }
        }
    }

    public static SubLObject get_gke_gloss_from_kb(final SubLObject literal, final SubLObject domain_mt, final SubLObject language_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject gloss = NIL;
        final SubLObject hl_literal = narts_high.nart_substitute(literal);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EQ, thread);
            mt_relevance_macros.$mt$.bind(language_mt, thread);
            final SubLObject pred_var = gke_main.$$gkeGlossWrtDomainMt;
            if (NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(domain_mt, TWO_INTEGER, pred_var)) {
                final SubLObject iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(domain_mt, TWO_INTEGER, pred_var);
                SubLObject done_var = NIL;
                final SubLObject token_var = NIL;
                while (NIL == done_var) {
                    final SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
                    final SubLObject valid = makeBoolean(!token_var.eql(final_index_spec));
                    if (NIL != valid) {
                        SubLObject final_index_iterator = NIL;
                        try {
                            final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, $GAF, NIL, NIL);
                            SubLObject done_var_$40 = NIL;
                            final SubLObject token_var_$41 = NIL;
                            while (NIL == done_var_$40) {
                                final SubLObject gaf = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_$41);
                                final SubLObject valid_$42 = makeBoolean(!token_var_$41.eql(gaf));
                                if ((NIL != valid_$42) && cycl_utilities.formula_arg1(assertions_high.gaf_arg1(gaf), UNPROVIDED).equal(hl_literal)) {
                                    gloss = assertions_high.gaf_arg3(gaf);
                                }
                                done_var_$40 = makeBoolean(NIL == valid_$42);
                            } 
                        } finally {
                            final SubLObject _prev_bind_0_$43 = $is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                $is_thread_performing_cleanupP$.bind(T, thread);
                                final SubLObject _values = getValuesAsVector();
                                if (NIL != final_index_iterator) {
                                    kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
                                }
                                restoreValuesFromVector(_values);
                            } finally {
                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$43, thread);
                            }
                        }
                    }
                    done_var = makeBoolean(NIL == valid);
                } 
            }
        } finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return NIL != gloss ? pph_utilities.cycl_structured_paraphrase_to_pph_javalist(gloss) : NIL;
    }

    public static final SubLObject clear_generate_gke_gloss_wrt_mt_cached_alt() {
        {
            SubLObject cs = $generate_gke_gloss_wrt_mt_cached_caching_state$.getGlobalValue();
            if (NIL != cs) {
                memoization_state.caching_state_clear(cs);
            }
        }
        return NIL;
    }

    public static SubLObject clear_generate_gke_gloss_wrt_mt_cached() {
        final SubLObject cs = gke_main.$generate_gke_gloss_wrt_mt_cached_caching_state$.getGlobalValue();
        if (NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return NIL;
    }

    public static final SubLObject remove_generate_gke_gloss_wrt_mt_cached_alt(SubLObject literal, SubLObject domain_mt, SubLObject language_mt) {
        return memoization_state.caching_state_remove_function_results_with_args($generate_gke_gloss_wrt_mt_cached_caching_state$.getGlobalValue(), list(literal, domain_mt, language_mt), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_generate_gke_gloss_wrt_mt_cached(final SubLObject literal, final SubLObject domain_mt, final SubLObject language_mt) {
        return memoization_state.caching_state_remove_function_results_with_args(gke_main.$generate_gke_gloss_wrt_mt_cached_caching_state$.getGlobalValue(), list(literal, domain_mt, language_mt), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject generate_gke_gloss_wrt_mt_cached_internal_alt(SubLObject literal, SubLObject domain_mt, SubLObject language_mt) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject javalist = NIL;
                {
                    SubLObject _prev_bind_0 = constant_completion_high.$require_case_insensitive_name_uniqueness$.currentBinding(thread);
                    SubLObject _prev_bind_1 = pph_vars.$paraphrase_mode$.currentBinding(thread);
                    SubLObject _prev_bind_2 = pph_vars.$pph_use_bulleted_listsP$.currentBinding(thread);
                    SubLObject _prev_bind_3 = pph_vars.$pph_replace_bulleted_list_tagsP$.currentBinding(thread);
                    SubLObject _prev_bind_4 = pph_vars.$use_parenthetical_disambiguationsP$.currentBinding(thread);
                    SubLObject _prev_bind_5 = pph_vars.$paraphrase_precision$.currentBinding(thread);
                    SubLObject _prev_bind_6 = pph_vars.$pph_terse_mt_scopeP$.currentBinding(thread);
                    SubLObject _prev_bind_7 = pph_vars.$pph_maximize_linksP$.currentBinding(thread);
                    SubLObject _prev_bind_8 = pph_vars.$pph_link_arg0P$.currentBinding(thread);
                    SubLObject _prev_bind_9 = pph_vars.$pph_consolidate_output_list_for_nartP$.currentBinding(thread);
                    SubLObject _prev_bind_10 = pph_vars.$pph_use_smart_variable_replacementP$.currentBinding(thread);
                    SubLObject _prev_bind_11 = pph_vars.$pph_demerit_cutoff$.currentBinding(thread);
                    SubLObject _prev_bind_12 = pph_vars.$pph_use_title_capitalizationP$.currentBinding(thread);
                    SubLObject _prev_bind_13 = pph_vars.$pph_use_indexical_datesP$.currentBinding(thread);
                    SubLObject _prev_bind_14 = pph_vars.$pph_addressee$.currentBinding(thread);
                    SubLObject _prev_bind_15 = pph_vars.$pph_speaker$.currentBinding(thread);
                    SubLObject _prev_bind_16 = pph_vars.$pph_quantify_varsP$.currentBinding(thread);
                    SubLObject _prev_bind_17 = pph_vars.$pph_blanks_for_varsP$.currentBinding(thread);
                    try {
                        constant_completion_high.$require_case_insensitive_name_uniqueness$.bind(NIL, thread);
                        pph_vars.$paraphrase_mode$.bind($HTML, thread);
                        pph_vars.$pph_use_bulleted_listsP$.bind(T, thread);
                        pph_vars.$pph_replace_bulleted_list_tagsP$.bind(NIL, thread);
                        pph_vars.$use_parenthetical_disambiguationsP$.bind(T, thread);
                        pph_vars.$paraphrase_precision$.bind(NIL, thread);
                        pph_vars.$pph_terse_mt_scopeP$.bind(T, thread);
                        pph_vars.$pph_maximize_linksP$.bind(T, thread);
                        pph_vars.$pph_link_arg0P$.bind(T, thread);
                        pph_vars.$pph_consolidate_output_list_for_nartP$.bind(NIL, thread);
                        pph_vars.$pph_use_smart_variable_replacementP$.bind(T, thread);
                        pph_vars.$pph_demerit_cutoff$.bind(number_utilities.positive_infinity(), thread);
                        pph_vars.$pph_use_title_capitalizationP$.bind(NIL, thread);
                        pph_vars.$pph_use_indexical_datesP$.bind(NIL, thread);
                        pph_vars.$pph_addressee$.bind($UNKNOWN, thread);
                        pph_vars.$pph_speaker$.bind($UNKNOWN, thread);
                        pph_vars.$pph_quantify_varsP$.bind(NIL, thread);
                        pph_vars.$pph_blanks_for_varsP$.bind(NIL, thread);
                        javalist = pph_main.generate_phrase_for_java(narts_high.nart_substitute(literal), $DEFAULT, $DECLARATIVE, language_mt, domain_mt, UNPROVIDED);
                    } finally {
                        pph_vars.$pph_blanks_for_varsP$.rebind(_prev_bind_17, thread);
                        pph_vars.$pph_quantify_varsP$.rebind(_prev_bind_16, thread);
                        pph_vars.$pph_speaker$.rebind(_prev_bind_15, thread);
                        pph_vars.$pph_addressee$.rebind(_prev_bind_14, thread);
                        pph_vars.$pph_use_indexical_datesP$.rebind(_prev_bind_13, thread);
                        pph_vars.$pph_use_title_capitalizationP$.rebind(_prev_bind_12, thread);
                        pph_vars.$pph_demerit_cutoff$.rebind(_prev_bind_11, thread);
                        pph_vars.$pph_use_smart_variable_replacementP$.rebind(_prev_bind_10, thread);
                        pph_vars.$pph_consolidate_output_list_for_nartP$.rebind(_prev_bind_9, thread);
                        pph_vars.$pph_link_arg0P$.rebind(_prev_bind_8, thread);
                        pph_vars.$pph_maximize_linksP$.rebind(_prev_bind_7, thread);
                        pph_vars.$pph_terse_mt_scopeP$.rebind(_prev_bind_6, thread);
                        pph_vars.$paraphrase_precision$.rebind(_prev_bind_5, thread);
                        pph_vars.$use_parenthetical_disambiguationsP$.rebind(_prev_bind_4, thread);
                        pph_vars.$pph_replace_bulleted_list_tagsP$.rebind(_prev_bind_3, thread);
                        pph_vars.$pph_use_bulleted_listsP$.rebind(_prev_bind_2, thread);
                        pph_vars.$paraphrase_mode$.rebind(_prev_bind_1, thread);
                        constant_completion_high.$require_case_insensitive_name_uniqueness$.rebind(_prev_bind_0, thread);
                    }
                }
                return javalist;
            }
        }
    }

    public static SubLObject generate_gke_gloss_wrt_mt_cached_internal(final SubLObject literal, final SubLObject domain_mt, final SubLObject language_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject javalist = NIL;
        final SubLObject _prev_bind_0 = constant_completion_high.$require_case_insensitive_name_uniqueness$.currentBinding(thread);
        final SubLObject _prev_bind_2 = pph_vars.$paraphrase_mode$.currentBinding(thread);
        final SubLObject _prev_bind_3 = pph_vars.$pph_use_bulleted_listsP$.currentBinding(thread);
        final SubLObject _prev_bind_4 = pph_vars.$pph_replace_bulleted_list_tagsP$.currentBinding(thread);
        final SubLObject _prev_bind_5 = pph_vars.$use_parenthetical_disambiguationsP$.currentBinding(thread);
        final SubLObject _prev_bind_6 = pph_vars.$paraphrase_precision$.currentBinding(thread);
        final SubLObject _prev_bind_7 = pph_vars.$pph_terse_mt_scopeP$.currentBinding(thread);
        final SubLObject _prev_bind_8 = pph_vars.$pph_maximize_linksP$.currentBinding(thread);
        final SubLObject _prev_bind_9 = pph_vars.$pph_link_arg0P$.currentBinding(thread);
        final SubLObject _prev_bind_10 = pph_vars.$pph_consolidate_output_list_for_natP$.currentBinding(thread);
        final SubLObject _prev_bind_11 = pph_vars.$pph_use_smart_variable_replacementP$.currentBinding(thread);
        final SubLObject _prev_bind_12 = pph_vars.$pph_demerit_cutoff$.currentBinding(thread);
        final SubLObject _prev_bind_13 = pph_vars.$pph_use_title_capitalizationP$.currentBinding(thread);
        final SubLObject _prev_bind_14 = pph_vars.$pph_use_indexical_datesP$.currentBinding(thread);
        final SubLObject _prev_bind_15 = pph_vars.$pph_addressee$.currentBinding(thread);
        final SubLObject _prev_bind_16 = pph_vars.$pph_speaker$.currentBinding(thread);
        final SubLObject _prev_bind_17 = pph_vars.$pph_quantify_varsP$.currentBinding(thread);
        final SubLObject _prev_bind_18 = pph_vars.$pph_blanks_for_varsP$.currentBinding(thread);
        try {
            constant_completion_high.$require_case_insensitive_name_uniqueness$.bind(NIL, thread);
            pph_vars.$paraphrase_mode$.bind($HTML, thread);
            pph_vars.$pph_use_bulleted_listsP$.bind(T, thread);
            pph_vars.$pph_replace_bulleted_list_tagsP$.bind(NIL, thread);
            pph_vars.$use_parenthetical_disambiguationsP$.bind(T, thread);
            pph_vars.$paraphrase_precision$.bind(NIL, thread);
            pph_vars.$pph_terse_mt_scopeP$.bind(T, thread);
            pph_vars.$pph_maximize_linksP$.bind(T, thread);
            pph_vars.$pph_link_arg0P$.bind(T, thread);
            pph_vars.$pph_consolidate_output_list_for_natP$.bind(NIL, thread);
            pph_vars.$pph_use_smart_variable_replacementP$.bind(T, thread);
            pph_vars.$pph_demerit_cutoff$.bind(number_utilities.positive_infinity(), thread);
            pph_vars.$pph_use_title_capitalizationP$.bind(NIL, thread);
            pph_vars.$pph_use_indexical_datesP$.bind(NIL, thread);
            pph_vars.$pph_addressee$.bind($UNKNOWN, thread);
            pph_vars.$pph_speaker$.bind($UNKNOWN, thread);
            pph_vars.$pph_quantify_varsP$.bind(NIL, thread);
            pph_vars.$pph_blanks_for_varsP$.bind(NIL, thread);
            javalist = pph_main.generate_phrase_for_java(narts_high.nart_substitute(literal), $DEFAULT, $DECLARATIVE, language_mt, domain_mt, UNPROVIDED);
        } finally {
            pph_vars.$pph_blanks_for_varsP$.rebind(_prev_bind_18, thread);
            pph_vars.$pph_quantify_varsP$.rebind(_prev_bind_17, thread);
            pph_vars.$pph_speaker$.rebind(_prev_bind_16, thread);
            pph_vars.$pph_addressee$.rebind(_prev_bind_15, thread);
            pph_vars.$pph_use_indexical_datesP$.rebind(_prev_bind_14, thread);
            pph_vars.$pph_use_title_capitalizationP$.rebind(_prev_bind_13, thread);
            pph_vars.$pph_demerit_cutoff$.rebind(_prev_bind_12, thread);
            pph_vars.$pph_use_smart_variable_replacementP$.rebind(_prev_bind_11, thread);
            pph_vars.$pph_consolidate_output_list_for_natP$.rebind(_prev_bind_10, thread);
            pph_vars.$pph_link_arg0P$.rebind(_prev_bind_9, thread);
            pph_vars.$pph_maximize_linksP$.rebind(_prev_bind_8, thread);
            pph_vars.$pph_terse_mt_scopeP$.rebind(_prev_bind_7, thread);
            pph_vars.$paraphrase_precision$.rebind(_prev_bind_6, thread);
            pph_vars.$use_parenthetical_disambiguationsP$.rebind(_prev_bind_5, thread);
            pph_vars.$pph_replace_bulleted_list_tagsP$.rebind(_prev_bind_4, thread);
            pph_vars.$pph_use_bulleted_listsP$.rebind(_prev_bind_3, thread);
            pph_vars.$paraphrase_mode$.rebind(_prev_bind_2, thread);
            constant_completion_high.$require_case_insensitive_name_uniqueness$.rebind(_prev_bind_0, thread);
        }
        return javalist;
    }

    public static final SubLObject generate_gke_gloss_wrt_mt_cached_alt(SubLObject literal, SubLObject domain_mt, SubLObject language_mt) {
        {
            SubLObject caching_state = $generate_gke_gloss_wrt_mt_cached_caching_state$.getGlobalValue();
            if (NIL == caching_state) {
                caching_state = memoization_state.create_global_caching_state_for_name(GENERATE_GKE_GLOSS_WRT_MT_CACHED, $generate_gke_gloss_wrt_mt_cached_caching_state$, $int$256, EQUAL, THREE_INTEGER, ZERO_INTEGER);
            }
            {
                SubLObject sxhash = memoization_state.sxhash_calc_3(literal, domain_mt, language_mt);
                SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
                if (collisions != $kw28$_MEMOIZED_ITEM_NOT_FOUND_) {
                    {
                        SubLObject cdolist_list_var = collisions;
                        SubLObject collision = NIL;
                        for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , collision = cdolist_list_var.first()) {
                            {
                                SubLObject cached_args = collision.first();
                                SubLObject results2 = second(collision);
                                if (literal.equal(cached_args.first())) {
                                    cached_args = cached_args.rest();
                                    if (domain_mt.equal(cached_args.first())) {
                                        cached_args = cached_args.rest();
                                        if (((NIL != cached_args) && (NIL == cached_args.rest())) && language_mt.equal(cached_args.first())) {
                                            return memoization_state.caching_results(results2);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.gke_main.generate_gke_gloss_wrt_mt_cached_internal(literal, domain_mt, language_mt)));
                    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(literal, domain_mt, language_mt));
                    return memoization_state.caching_results(results);
                }
            }
        }
    }

    public static SubLObject generate_gke_gloss_wrt_mt_cached(final SubLObject literal, final SubLObject domain_mt, final SubLObject language_mt) {
        SubLObject caching_state = gke_main.$generate_gke_gloss_wrt_mt_cached_caching_state$.getGlobalValue();
        if (NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name(gke_main.GENERATE_GKE_GLOSS_WRT_MT_CACHED, gke_main.$generate_gke_gloss_wrt_mt_cached_caching_state$, $int$256, EQUAL, THREE_INTEGER, ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_3(literal, domain_mt, language_mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = NIL;
            collision = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = second(collision);
                if (literal.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (domain_mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (((NIL != cached_args) && (NIL == cached_args.rest())) && language_mt.equal(cached_args.first())) {
                            return memoization_state.caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            } 
        }
        final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(gke_main.generate_gke_gloss_wrt_mt_cached_internal(literal, domain_mt, language_mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(literal, domain_mt, language_mt));
        return memoization_state.caching_results(results3);
    }

    /**
     *
     *
     * @return ALIST-P mapping each formula position with candidate replacements to
    a list consisting of a list of NL renderers for that position in SENTENCE followed
    by zero or more hierarchical tree sets organizing the replacement renderers.
     */
    @LispMethod(comment = "@return ALIST-P mapping each formula position with candidate replacements to\r\na list consisting of a list of NL renderers for that position in SENTENCE followed\r\nby zero or more hierarchical tree sets organizing the replacement renderers.")
    public static final SubLObject candidate_replacement_renderers_for_sentence_alt(SubLObject sentence, SubLObject mt, SubLObject generation_mt) {
        if (generation_mt == UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject replacements = com.cyc.cycjava.cycl.gke_main.candidate_replacements_for_sentence(sentence, mt);
                SubLObject renderers = NIL;
                SubLObject problem_store = NIL;
                try {
                    problem_store = inference_datastructures_problem_store.new_problem_store(NIL);
                    {
                        SubLObject local_state = com.cyc.cycjava.cycl.gke_main.gke_memoization_state();
                        {
                            SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
                            try {
                                memoization_state.$memoization_state$.bind(local_state, thread);
                                {
                                    SubLObject original_memoization_process = NIL;
                                    if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
                                        original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
                                        {
                                            SubLObject current_proc = current_process();
                                            if (NIL == original_memoization_process) {
                                                memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
                                            } else {
                                                if (original_memoization_process != current_proc) {
                                                    Errors.error($str_alt13$Invalid_attempt_to_reuse_memoizat);
                                                }
                                            }
                                        }
                                    }
                                    try {
                                        thread.resetMultipleValues();
                                        {
                                            SubLObject _prev_bind_0_83 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
                                            try {
                                                pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                                                {
                                                    SubLObject reuseP = thread.secondMultipleValue();
                                                    thread.resetMultipleValues();
                                                    try {
                                                        thread.resetMultipleValues();
                                                        {
                                                            SubLObject _prev_bind_0_84 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                                                            try {
                                                                pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                                                                {
                                                                    SubLObject new_or_reused = thread.secondMultipleValue();
                                                                    thread.resetMultipleValues();
                                                                    {
                                                                        SubLObject _prev_bind_0_85 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                                                                        try {
                                                                            pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                                                                            {
                                                                                SubLObject local_state_86 = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                                                                                {
                                                                                    SubLObject _prev_bind_0_87 = memoization_state.$memoization_state$.currentBinding(thread);
                                                                                    try {
                                                                                        memoization_state.$memoization_state$.bind(local_state_86, thread);
                                                                                        {
                                                                                            SubLObject original_memoization_process_88 = NIL;
                                                                                            if ((NIL != local_state_86) && (NIL == memoization_state.memoization_state_lock(local_state_86))) {
                                                                                                original_memoization_process_88 = memoization_state.memoization_state_get_current_process_internal(local_state_86);
                                                                                                {
                                                                                                    SubLObject current_proc = current_process();
                                                                                                    if (NIL == original_memoization_process_88) {
                                                                                                        memoization_state.memoization_state_set_current_process_internal(local_state_86, current_proc);
                                                                                                    } else {
                                                                                                        if (original_memoization_process_88 != current_proc) {
                                                                                                            Errors.error($str_alt13$Invalid_attempt_to_reuse_memoizat);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            try {
                                                                                                {
                                                                                                    SubLObject cdolist_list_var = replacements;
                                                                                                    SubLObject cons = NIL;
                                                                                                    for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , cons = cdolist_list_var.first()) {
                                                                                                        {
                                                                                                            SubLObject datum = cons;
                                                                                                            SubLObject current = datum;
                                                                                                            SubLObject key = NIL;
                                                                                                            SubLObject terms = NIL;
                                                                                                            destructuring_bind_must_consp(current, datum, $list_alt128);
                                                                                                            key = current.first();
                                                                                                            current = current.rest();
                                                                                                            terms = current;
                                                                                                            {
                                                                                                                SubLObject focal_term = cycl_utilities.formula_arg_position(sentence, key, $NOT_FOUND);
                                                                                                                SubLObject renderer_list = api_widgets.get_term_list_as_renderings(terms, mt, $NONE, generation_mt, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                if (NIL != cycl_variables.cyc_varP(focal_term)) {
                                                                                                                    focal_term = terms.first();
                                                                                                                }
                                                                                                                if (focal_term != $NOT_FOUND) {
                                                                                                                    {
                                                                                                                        SubLObject cdolist_list_var_89 = com.cyc.cycjava.cycl.gke_main.replacement_renderer_groves(focal_term, mt, renderer_list, problem_store);
                                                                                                                        SubLObject grove = NIL;
                                                                                                                        for (grove = cdolist_list_var_89.first(); NIL != cdolist_list_var_89; cdolist_list_var_89 = cdolist_list_var_89.rest() , grove = cdolist_list_var_89.first()) {
                                                                                                                            renderers = list_utilities.alist_push(renderers, key, grove, UNPROVIDED);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                renderers = list_utilities.alist_push(renderers, key, renderer_list, UNPROVIDED);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } finally {
                                                                                                {
                                                                                                    SubLObject _prev_bind_0_90 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                                    try {
                                                                                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                                                                                        if ((NIL != local_state_86) && (NIL == original_memoization_process_88)) {
                                                                                                            memoization_state.memoization_state_set_current_process_internal(local_state_86, NIL);
                                                                                                        }
                                                                                                    } finally {
                                                                                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_90, thread);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } finally {
                                                                                        memoization_state.$memoization_state$.rebind(_prev_bind_0_87, thread);
                                                                                    }
                                                                                }
                                                                            }
                                                                        } finally {
                                                                            pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_85, thread);
                                                                        }
                                                                    }
                                                                    if ((new_or_reused == $NEW) && (NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread)))) {
                                                                        memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                                                                    }
                                                                }
                                                            } finally {
                                                                pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_84, thread);
                                                            }
                                                        }
                                                    } finally {
                                                        {
                                                            SubLObject _prev_bind_0_91 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                            try {
                                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                                if (NIL == reuseP) {
                                                                    pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                                                                }
                                                            } finally {
                                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_91, thread);
                                                            }
                                                        }
                                                    }
                                                }
                                            } finally {
                                                pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_83, thread);
                                            }
                                        }
                                    } finally {
                                        {
                                            SubLObject _prev_bind_0_92 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                            try {
                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                if ((NIL != local_state) && (NIL == original_memoization_process)) {
                                                    memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
                                                }
                                            } finally {
                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_92, thread);
                                            }
                                        }
                                    }
                                }
                            } finally {
                                memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
                            }
                        }
                    }
                } finally {
                    {
                        SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            inference_datastructures_problem_store.destroy_problem_store(problem_store);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
                return renderers;
            }
        }
    }

    /**
     *
     *
     * @return ALIST-P mapping each formula position with candidate replacements to
    a list consisting of a list of NL renderers for that position in SENTENCE followed
    by zero or more hierarchical tree sets organizing the replacement renderers.
     */
    @LispMethod(comment = "@return ALIST-P mapping each formula position with candidate replacements to\r\na list consisting of a list of NL renderers for that position in SENTENCE followed\r\nby zero or more hierarchical tree sets organizing the replacement renderers.")
    public static SubLObject candidate_replacement_renderers_for_sentence(final SubLObject sentence, final SubLObject mt, SubLObject generation_mt) {
        if (generation_mt == UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject replacements = gke_main.candidate_replacements_for_sentence(sentence, mt);
        SubLObject renderers = NIL;
        SubLObject problem_store = NIL;
        try {
            problem_store = inference_datastructures_problem_store.new_problem_store(NIL);
            final SubLObject local_state = gke_main.gke_memoization_state();
            final SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
            try {
                memoization_state.$memoization_state$.bind(local_state, thread);
                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                try {
                    final SubLObject _prev_bind_0_$44 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
                    try {
                        pph_macros.$free_pph_problem_store_pointers$.bind(NIL, thread);
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$45 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
                        try {
                            pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                            final SubLObject reuseP = thread.secondMultipleValue();
                            thread.resetMultipleValues();
                            try {
                                thread.resetMultipleValues();
                                final SubLObject _prev_bind_0_$46 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                                try {
                                    pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                                    final SubLObject new_or_reused = thread.secondMultipleValue();
                                    thread.resetMultipleValues();
                                    final SubLObject _prev_bind_0_$47 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                                    try {
                                        pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                                        final SubLObject local_state_$48 = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                                        final SubLObject _prev_bind_0_$48 = memoization_state.$memoization_state$.currentBinding(thread);
                                        try {
                                            memoization_state.$memoization_state$.bind(local_state_$48, thread);
                                            final SubLObject original_memoization_process_$50 = memoization_state.memoization_state_original_process(local_state_$48);
                                            try {
                                                SubLObject cdolist_list_var = replacements;
                                                SubLObject cons = NIL;
                                                cons = cdolist_list_var.first();
                                                while (NIL != cdolist_list_var) {
                                                    SubLObject current;
                                                    final SubLObject datum = current = cons;
                                                    SubLObject key = NIL;
                                                    SubLObject terms = NIL;
                                                    destructuring_bind_must_consp(current, datum, gke_main.$list115);
                                                    key = current.first();
                                                    current = terms = current.rest();
                                                    SubLObject focal_term = cycl_utilities.formula_arg_position(sentence, key, $NOT_FOUND);
                                                    final SubLObject renderer_list = api_widgets.get_term_list_as_renderings(terms, mt, $NONE, generation_mt, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                    if (NIL != cycl_variables.cyc_varP(focal_term)) {
                                                        focal_term = terms.first();
                                                    }
                                                    if (focal_term != $NOT_FOUND) {
                                                        SubLObject cdolist_list_var_$51 = gke_main.replacement_renderer_groves(focal_term, mt, renderer_list, problem_store);
                                                        SubLObject grove = NIL;
                                                        grove = cdolist_list_var_$51.first();
                                                        while (NIL != cdolist_list_var_$51) {
                                                            renderers = list_utilities.alist_push(renderers, key, grove, UNPROVIDED);
                                                            cdolist_list_var_$51 = cdolist_list_var_$51.rest();
                                                            grove = cdolist_list_var_$51.first();
                                                        } 
                                                    }
                                                    renderers = list_utilities.alist_push(renderers, key, renderer_list, UNPROVIDED);
                                                    cdolist_list_var = cdolist_list_var.rest();
                                                    cons = cdolist_list_var.first();
                                                } 
                                            } finally {
                                                final SubLObject _prev_bind_0_$49 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                                    final SubLObject _values = getValuesAsVector();
                                                    memoization_state.memoization_state_possibly_clear_original_process(local_state_$48, original_memoization_process_$50);
                                                    restoreValuesFromVector(_values);
                                                } finally {
                                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$49, thread);
                                                }
                                            }
                                        } finally {
                                            memoization_state.$memoization_state$.rebind(_prev_bind_0_$48, thread);
                                        }
                                    } finally {
                                        pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$47, thread);
                                    }
                                    if ((new_or_reused == $NEW) && (NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread)))) {
                                        memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                                    }
                                } finally {
                                    pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$46, thread);
                                }
                            } finally {
                                final SubLObject _prev_bind_0_$50 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                    final SubLObject _values2 = getValuesAsVector();
                                    if (NIL == reuseP) {
                                        pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                                    }
                                    restoreValuesFromVector(_values2);
                                } finally {
                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$50, thread);
                                }
                            }
                        } finally {
                            pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$45, thread);
                        }
                    } finally {
                        pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_0_$44, thread);
                    }
                } finally {
                    final SubLObject _prev_bind_0_$51 = $is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        $is_thread_performing_cleanupP$.bind(T, thread);
                        final SubLObject _values3 = getValuesAsVector();
                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                        restoreValuesFromVector(_values3);
                    } finally {
                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$51, thread);
                    }
                }
            } finally {
                memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
            }
        } finally {
            final SubLObject _prev_bind_2 = $is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                $is_thread_performing_cleanupP$.bind(T, thread);
                final SubLObject _values4 = getValuesAsVector();
                inference_datastructures_problem_store.destroy_problem_store(problem_store);
                restoreValuesFromVector(_values4);
            } finally {
                $is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
            }
        }
        return renderers;
    }

    public static final SubLObject candidate_replacements_for_variables_alt(SubLObject sentence, SubLObject mt) {
        {
            SubLObject ans = NIL;
            SubLObject v_variables = sentence_free_variables(sentence, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject replacements = com.cyc.cycjava.cycl.gke_main.candidate_replacements_for_sentence(sentence, mt);
            SubLObject cdolist_list_var = v_variables;
            SubLObject variable = NIL;
            for (variable = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , variable = cdolist_list_var.first()) {
                {
                    SubLObject arg_positions = cycl_utilities.arg_positions_dfs(variable, sentence, UNPROVIDED);
                    SubLObject variable_replacements = NIL;
                    SubLObject cdolist_list_var_93 = arg_positions;
                    SubLObject arg_pos = NIL;
                    for (arg_pos = cdolist_list_var_93.first(); NIL != cdolist_list_var_93; cdolist_list_var_93 = cdolist_list_var_93.rest() , arg_pos = cdolist_list_var_93.first()) {
                        {
                            SubLObject new_variable_replacements = list_utilities.alist_lookup(replacements, arg_pos, symbol_function(EQUAL), UNPROVIDED);
                            if (NIL != new_variable_replacements) {
                                if (NIL == variable_replacements) {
                                    variable_replacements = new_variable_replacements;
                                } else {
                                    variable_replacements = intersection(variable_replacements, new_variable_replacements, UNPROVIDED, UNPROVIDED);
                                }
                            }
                        }
                    }
                    if (NIL != variable_replacements) {
                        ans = list_utilities.alist_enter(ans, variable, variable_replacements, symbol_function(EQUAL));
                    }
                }
            }
            return ans;
        }
    }

    public static SubLObject candidate_replacements_for_variables(final SubLObject sentence, final SubLObject mt) {
        SubLObject ans = NIL;
        final SubLObject v_variables = sentence_free_variables(sentence, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject replacements = gke_main.candidate_replacements_for_sentence(sentence, mt);
        SubLObject cdolist_list_var = v_variables;
        SubLObject variable = NIL;
        variable = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject arg_positions = cycl_utilities.arg_positions_dfs(variable, sentence, UNPROVIDED);
            SubLObject variable_replacements = NIL;
            SubLObject cdolist_list_var_$55 = arg_positions;
            SubLObject arg_pos = NIL;
            arg_pos = cdolist_list_var_$55.first();
            while (NIL != cdolist_list_var_$55) {
                final SubLObject new_variable_replacements = list_utilities.alist_lookup(replacements, arg_pos, symbol_function(EQUAL), UNPROVIDED);
                if (NIL != new_variable_replacements) {
                    if (NIL == variable_replacements) {
                        variable_replacements = new_variable_replacements;
                    } else {
                        variable_replacements = intersection(variable_replacements, new_variable_replacements, UNPROVIDED, UNPROVIDED);
                    }
                }
                cdolist_list_var_$55 = cdolist_list_var_$55.rest();
                arg_pos = cdolist_list_var_$55.first();
            } 
            if (NIL != variable_replacements) {
                ans = list_utilities.alist_enter(ans, variable, variable_replacements, symbol_function(EQUAL));
            }
            cdolist_list_var = cdolist_list_var.rest();
            variable = cdolist_list_var.first();
        } 
        return ans;
    }

    public static SubLObject candidate_replacements_for_arg(final SubLObject sentence, final SubLObject arg_position, final SubLObject mt) {
        return list_utilities.alist_lookup(gke_main.candidate_replacements_for_sentence(sentence, mt), arg_position, symbol_function(EQUAL), UNPROVIDED);
    }

    public static final SubLObject candidate_replacements_for_sentence_alt(SubLObject sentence, SubLObject mt) {
        return copy_list(com.cyc.cycjava.cycl.gke_main.candidate_replacements_for_sentence_cached(sentence, mt));
    }

    public static SubLObject candidate_replacements_for_sentence(final SubLObject sentence, final SubLObject mt) {
        return copy_list(gke_main.candidate_replacements_for_sentence_cached(sentence, mt));
    }

    public static final SubLObject clear_candidate_replacements_for_sentence_cached_alt() {
        {
            SubLObject cs = $candidate_replacements_for_sentence_cached_caching_state$.getGlobalValue();
            if (NIL != cs) {
                memoization_state.caching_state_clear(cs);
            }
        }
        return NIL;
    }

    public static SubLObject clear_candidate_replacements_for_sentence_cached() {
        final SubLObject cs = gke_main.$candidate_replacements_for_sentence_cached_caching_state$.getGlobalValue();
        if (NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return NIL;
    }

    public static final SubLObject remove_candidate_replacements_for_sentence_cached_alt(SubLObject sentence, SubLObject mt) {
        return memoization_state.caching_state_remove_function_results_with_args($candidate_replacements_for_sentence_cached_caching_state$.getGlobalValue(), list(sentence, mt), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_candidate_replacements_for_sentence_cached(final SubLObject sentence, final SubLObject mt) {
        return memoization_state.caching_state_remove_function_results_with_args(gke_main.$candidate_replacements_for_sentence_cached_caching_state$.getGlobalValue(), list(sentence, mt), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject candidate_replacements_for_sentence_cached_internal_alt(SubLObject sentence, SubLObject mt) {
        {
            SubLObject ans = NIL;
            SubLObject v_properties = $list_alt132;
            if (NIL != el_formula_p(sentence)) {
                {
                    SubLObject pos = ZERO_INTEGER;
                    SubLObject args = cycl_utilities.formula_args(sentence, $IGNORE);
                    SubLObject cdolist_list_var = args;
                    SubLObject item = NIL;
                    for (item = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , item = cdolist_list_var.first()) {
                        pos = add(pos, ONE_INTEGER);
                        {
                            SubLObject replacement_alist = com.cyc.cycjava.cycl.gke_main.candidate_replacements_for_sentence(item, mt);
                            SubLObject cdolist_list_var_94 = replacement_alist;
                            SubLObject cons = NIL;
                            for (cons = cdolist_list_var_94.first(); NIL != cdolist_list_var_94; cdolist_list_var_94 = cdolist_list_var_94.rest() , cons = cdolist_list_var_94.first()) {
                                {
                                    SubLObject datum = cons;
                                    SubLObject current = datum;
                                    SubLObject key = NIL;
                                    SubLObject replacements = NIL;
                                    destructuring_bind_must_consp(current, datum, $list_alt133);
                                    key = current.first();
                                    current = current.rest();
                                    replacements = current;
                                    {
                                        SubLObject cdolist_list_var_95 = replacements;
                                        SubLObject replacement = NIL;
                                        for (replacement = cdolist_list_var_95.first(); NIL != cdolist_list_var_95; cdolist_list_var_95 = cdolist_list_var_95.rest() , replacement = cdolist_list_var_95.first()) {
                                            ans = list_utilities.alist_pushnew(ans, cons(pos, key), replacement, symbol_function(EQUAL), UNPROVIDED);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    SubLObject pred = cycl_utilities.formula_arg0(sentence);
                    SubLObject vars = $list_alt134;
                    {
                        SubLObject query = listS($const135$suggestionsForPredRelativeToIsaIn, pred, vars);
                        SubLObject cdolist_list_var = ask_utilities.query_template(vars, query, mt, v_properties);
                        SubLObject result = NIL;
                        for (result = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , result = cdolist_list_var.first()) {
                            {
                                SubLObject datum = result;
                                SubLObject current = datum;
                                SubLObject replacement_coll = NIL;
                                SubLObject replacement_pos = NIL;
                                SubLObject constraint_coll = NIL;
                                SubLObject constraint_pos = NIL;
                                destructuring_bind_must_consp(current, datum, $list_alt136);
                                replacement_coll = current.first();
                                current = current.rest();
                                destructuring_bind_must_consp(current, datum, $list_alt136);
                                replacement_pos = current.first();
                                current = current.rest();
                                destructuring_bind_must_consp(current, datum, $list_alt136);
                                constraint_coll = current.first();
                                current = current.rest();
                                destructuring_bind_must_consp(current, datum, $list_alt136);
                                constraint_pos = current.first();
                                current = current.rest();
                                if (NIL == current) {
                                    {
                                        SubLObject constrained_arg = cycl_utilities.formula_arg_position(sentence, list(constraint_pos), UNPROVIDED);
                                        if (NIL == cycl_variables.cyc_varP(constrained_arg)) {
                                            if (NIL != isa.isaP(constrained_arg, constraint_coll, mt, UNPROVIDED)) {
                                                ans = com.cyc.cycjava.cycl.gke_main.add_candidate_replacements(ans, replacement_pos, replacement_coll, mt, v_properties);
                                            }
                                        }
                                    }
                                } else {
                                    cdestructuring_bind_error(datum, $list_alt136);
                                }
                            }
                        }
                    }
                    {
                        SubLObject query = listS($const137$suggestionsForPredRelativeToGenls, pred, vars);
                        SubLObject cdolist_list_var = ask_utilities.query_template(vars, query, mt, v_properties);
                        SubLObject result = NIL;
                        for (result = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , result = cdolist_list_var.first()) {
                            {
                                SubLObject datum = result;
                                SubLObject current = datum;
                                SubLObject replacement_coll = NIL;
                                SubLObject replacement_pos = NIL;
                                SubLObject constraint_coll = NIL;
                                SubLObject constraint_pos = NIL;
                                destructuring_bind_must_consp(current, datum, $list_alt136);
                                replacement_coll = current.first();
                                current = current.rest();
                                destructuring_bind_must_consp(current, datum, $list_alt136);
                                replacement_pos = current.first();
                                current = current.rest();
                                destructuring_bind_must_consp(current, datum, $list_alt136);
                                constraint_coll = current.first();
                                current = current.rest();
                                destructuring_bind_must_consp(current, datum, $list_alt136);
                                constraint_pos = current.first();
                                current = current.rest();
                                if (NIL == current) {
                                    {
                                        SubLObject constrained_arg = cycl_utilities.formula_arg_position(sentence, list(constraint_pos), UNPROVIDED);
                                        if (NIL == cycl_variables.cyc_varP(constrained_arg)) {
                                            if (NIL != genls.genlsP(constrained_arg, constraint_coll, mt, UNPROVIDED)) {
                                                ans = com.cyc.cycjava.cycl.gke_main.add_candidate_replacements(ans, replacement_pos, replacement_coll, mt, v_properties);
                                            }
                                        }
                                    }
                                } else {
                                    cdestructuring_bind_error(datum, $list_alt136);
                                }
                            }
                        }
                    }
                }
            }
            return ans;
        }
    }

    public static SubLObject candidate_replacements_for_sentence_cached_internal(final SubLObject sentence, final SubLObject mt) {
        SubLObject ans = NIL;
        final SubLObject v_properties = gke_main.$list120;
        if (NIL != el_formula_p(sentence)) {
            SubLObject pos = ZERO_INTEGER;
            SubLObject cdolist_list_var;
            final SubLObject args = cdolist_list_var = cycl_utilities.formula_args(sentence, $IGNORE);
            SubLObject item = NIL;
            item = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                pos = add(pos, ONE_INTEGER);
                SubLObject cdolist_list_var_$56;
                final SubLObject replacement_alist = cdolist_list_var_$56 = gke_main.candidate_replacements_for_sentence(item, mt);
                SubLObject cons = NIL;
                cons = cdolist_list_var_$56.first();
                while (NIL != cdolist_list_var_$56) {
                    SubLObject current;
                    final SubLObject datum = current = cons;
                    SubLObject key = NIL;
                    SubLObject replacements = NIL;
                    destructuring_bind_must_consp(current, datum, gke_main.$list121);
                    key = current.first();
                    current = current.rest();
                    SubLObject cdolist_list_var_$57;
                    replacements = cdolist_list_var_$57 = current;
                    SubLObject replacement = NIL;
                    replacement = cdolist_list_var_$57.first();
                    while (NIL != cdolist_list_var_$57) {
                        ans = list_utilities.alist_pushnew(ans, cons(pos, key), replacement, symbol_function(EQUAL), UNPROVIDED);
                        cdolist_list_var_$57 = cdolist_list_var_$57.rest();
                        replacement = cdolist_list_var_$57.first();
                    } 
                    cdolist_list_var_$56 = cdolist_list_var_$56.rest();
                    cons = cdolist_list_var_$56.first();
                } 
                cdolist_list_var = cdolist_list_var.rest();
                item = cdolist_list_var.first();
            } 
            final SubLObject pred = cycl_utilities.formula_arg0(sentence);
            final SubLObject vars = gke_main.$list122;
            SubLObject query = listS(gke_main.$const123$suggestionsForPredRelativeToIsaIn, pred, vars);
            SubLObject cdolist_list_var2 = ask_utilities.query_template(vars, query, mt, v_properties);
            SubLObject result = NIL;
            result = cdolist_list_var2.first();
            while (NIL != cdolist_list_var2) {
                SubLObject current2;
                final SubLObject datum2 = current2 = result;
                SubLObject replacement_coll = NIL;
                SubLObject replacement_pos = NIL;
                SubLObject constraint_coll = NIL;
                SubLObject constraint_pos = NIL;
                destructuring_bind_must_consp(current2, datum2, gke_main.$list124);
                replacement_coll = current2.first();
                current2 = current2.rest();
                destructuring_bind_must_consp(current2, datum2, gke_main.$list124);
                replacement_pos = current2.first();
                current2 = current2.rest();
                destructuring_bind_must_consp(current2, datum2, gke_main.$list124);
                constraint_coll = current2.first();
                current2 = current2.rest();
                destructuring_bind_must_consp(current2, datum2, gke_main.$list124);
                constraint_pos = current2.first();
                current2 = current2.rest();
                if (NIL == current2) {
                    final SubLObject constrained_arg = cycl_utilities.formula_arg_position(sentence, list(constraint_pos), UNPROVIDED);
                    if ((NIL == cycl_variables.cyc_varP(constrained_arg)) && (NIL != isa.isaP(constrained_arg, constraint_coll, mt, UNPROVIDED))) {
                        ans = gke_main.add_candidate_replacements(ans, replacement_pos, replacement_coll, mt, v_properties);
                    }
                } else {
                    cdestructuring_bind_error(datum2, gke_main.$list124);
                }
                cdolist_list_var2 = cdolist_list_var2.rest();
                result = cdolist_list_var2.first();
            } 
            query = listS(gke_main.$const125$suggestionsForPredRelativeToGenls, pred, vars);
            cdolist_list_var2 = ask_utilities.query_template(vars, query, mt, v_properties);
            result = NIL;
            result = cdolist_list_var2.first();
            while (NIL != cdolist_list_var2) {
                SubLObject current2;
                final SubLObject datum2 = current2 = result;
                SubLObject replacement_coll = NIL;
                SubLObject replacement_pos = NIL;
                SubLObject constraint_coll = NIL;
                SubLObject constraint_pos = NIL;
                destructuring_bind_must_consp(current2, datum2, gke_main.$list124);
                replacement_coll = current2.first();
                current2 = current2.rest();
                destructuring_bind_must_consp(current2, datum2, gke_main.$list124);
                replacement_pos = current2.first();
                current2 = current2.rest();
                destructuring_bind_must_consp(current2, datum2, gke_main.$list124);
                constraint_coll = current2.first();
                current2 = current2.rest();
                destructuring_bind_must_consp(current2, datum2, gke_main.$list124);
                constraint_pos = current2.first();
                current2 = current2.rest();
                if (NIL == current2) {
                    final SubLObject constrained_arg = cycl_utilities.formula_arg_position(sentence, list(constraint_pos), UNPROVIDED);
                    if ((NIL == cycl_variables.cyc_varP(constrained_arg)) && (NIL != genls.genlsP(constrained_arg, constraint_coll, mt, UNPROVIDED))) {
                        ans = gke_main.add_candidate_replacements(ans, replacement_pos, replacement_coll, mt, v_properties);
                    }
                } else {
                    cdestructuring_bind_error(datum2, gke_main.$list124);
                }
                cdolist_list_var2 = cdolist_list_var2.rest();
                result = cdolist_list_var2.first();
            } 
        }
        return ans;
    }

    public static final SubLObject candidate_replacements_for_sentence_cached_alt(SubLObject sentence, SubLObject mt) {
        {
            SubLObject caching_state = $candidate_replacements_for_sentence_cached_caching_state$.getGlobalValue();
            if (NIL == caching_state) {
                caching_state = memoization_state.create_global_caching_state_for_name(CANDIDATE_REPLACEMENTS_FOR_SENTENCE_CACHED, $candidate_replacements_for_sentence_cached_caching_state$, $int$2048, EQUAL, TWO_INTEGER, ZERO_INTEGER);
                memoization_state.register_hl_store_cache_clear_callback(CLEAR_CANDIDATE_REPLACEMENTS_FOR_SENTENCE_CACHED);
            }
            {
                SubLObject sxhash = memoization_state.sxhash_calc_2(sentence, mt);
                SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
                if (collisions != $kw28$_MEMOIZED_ITEM_NOT_FOUND_) {
                    {
                        SubLObject cdolist_list_var = collisions;
                        SubLObject collision = NIL;
                        for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , collision = cdolist_list_var.first()) {
                            {
                                SubLObject cached_args = collision.first();
                                SubLObject results2 = second(collision);
                                if (sentence.equal(cached_args.first())) {
                                    cached_args = cached_args.rest();
                                    if (((NIL != cached_args) && (NIL == cached_args.rest())) && mt.equal(cached_args.first())) {
                                        return memoization_state.caching_results(results2);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.gke_main.candidate_replacements_for_sentence_cached_internal(sentence, mt)));
                    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(sentence, mt));
                    return memoization_state.caching_results(results);
                }
            }
        }
    }

    public static SubLObject candidate_replacements_for_sentence_cached(final SubLObject sentence, final SubLObject mt) {
        SubLObject caching_state = gke_main.$candidate_replacements_for_sentence_cached_caching_state$.getGlobalValue();
        if (NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name(gke_main.CANDIDATE_REPLACEMENTS_FOR_SENTENCE_CACHED, gke_main.$candidate_replacements_for_sentence_cached_caching_state$, gke_main.$int$2048, EQUAL, TWO_INTEGER, ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback(gke_main.CLEAR_CANDIDATE_REPLACEMENTS_FOR_SENTENCE_CACHED);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(sentence, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = NIL;
            collision = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = second(collision);
                if (sentence.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (((NIL != cached_args) && (NIL == cached_args.rest())) && mt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            } 
        }
        final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(gke_main.candidate_replacements_for_sentence_cached_internal(sentence, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(sentence, mt));
        return memoization_state.caching_results(results3);
    }

    public static final SubLObject add_candidate_replacements_alt(SubLObject ans, SubLObject rep_pos, SubLObject rep_coll, SubLObject mt, SubLObject v_properties) {
        {
            SubLObject key = list(rep_pos);
            SubLObject old_values = list_utilities.alist_lookup(ans, key, symbol_function(EQUAL), UNPROVIDED);
            SubLObject new_values = com.cyc.cycjava.cycl.gke_main.gke_get_elements(rep_coll, mt, v_properties);
            if (NIL != list_utilities.non_empty_list_p(old_values)) {
                ans = list_utilities.alist_enter(ans, key, intersection(old_values, new_values, symbol_function(EQUAL), UNPROVIDED), symbol_function(EQUAL));
            } else {
                if (NIL != list_utilities.non_empty_list_p(new_values)) {
                    ans = list_utilities.alist_enter(ans, key, new_values, symbol_function(EQUAL));
                }
            }
        }
        return ans;
    }

    public static SubLObject add_candidate_replacements(SubLObject ans, final SubLObject rep_pos, final SubLObject rep_coll, final SubLObject mt, final SubLObject v_properties) {
        final SubLObject key = list(rep_pos);
        final SubLObject old_values = list_utilities.alist_lookup(ans, key, symbol_function(EQUAL), UNPROVIDED);
        final SubLObject new_values = gke_main.gke_get_elements(rep_coll, mt, v_properties);
        final SubLObject join_function = gke_main.candidate_replacement_join_function(cae_query_search.current_cae_task());
        if (NIL != list_utilities.non_empty_list_p(old_values)) {
            ans = list_utilities.alist_enter(ans, key, funcall(join_function, old_values, new_values, symbol_function(EQUAL)), symbol_function(EQUAL));
        } else
            if (NIL != list_utilities.non_empty_list_p(new_values)) {
                ans = list_utilities.alist_enter(ans, key, new_values, symbol_function(EQUAL));
            }

        return ans;
    }

    public static SubLObject candidate_replacement_join_function(final SubLObject task) {
        return NIL != query_library_utils.query_library_should_suggestions_be_intersected(task) ? symbol_function(INTERSECTION) : symbol_function(UNION);
    }

    public static final SubLObject clear_gke_get_elements_alt() {
        {
            SubLObject cs = $gke_get_elements_caching_state$.getGlobalValue();
            if (NIL != cs) {
                memoization_state.caching_state_clear(cs);
            }
        }
        return NIL;
    }

    public static SubLObject clear_gke_get_elements() {
        final SubLObject cs = gke_main.$gke_get_elements_caching_state$.getGlobalValue();
        if (NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return NIL;
    }

    public static final SubLObject remove_gke_get_elements_alt(SubLObject set_or_collection, SubLObject mt, SubLObject v_properties) {
        return memoization_state.caching_state_remove_function_results_with_args($gke_get_elements_caching_state$.getGlobalValue(), list(set_or_collection, mt, v_properties), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_gke_get_elements(final SubLObject set_or_collection, final SubLObject mt, final SubLObject v_properties) {
        return memoization_state.caching_state_remove_function_results_with_args(gke_main.$gke_get_elements_caching_state$.getGlobalValue(), list(set_or_collection, mt, v_properties), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject gke_get_elements_internal_alt(SubLObject set_or_collection, SubLObject mt, SubLObject v_properties) {
        return delete_if($sym142$HL_PROTOTYPICAL_INSTANCE_, ask_utilities.query_variable($sym143$_X, list($$elementOf, $sym143$_X, set_or_collection), mt, v_properties), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject gke_get_elements_internal(final SubLObject set_or_collection, final SubLObject mt, final SubLObject v_properties) {
        return delete_if(gke_main.$sym132$HL_PROTOTYPICAL_INSTANCE_, ask_utilities.query_variable(gke_main.$sym133$_X, list(gke_main.$$elementOf, gke_main.$sym133$_X, set_or_collection), mt, v_properties), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject gke_get_elements_alt(SubLObject set_or_collection, SubLObject mt, SubLObject v_properties) {
        {
            SubLObject caching_state = $gke_get_elements_caching_state$.getGlobalValue();
            if (NIL == caching_state) {
                caching_state = memoization_state.create_global_caching_state_for_name(GKE_GET_ELEMENTS, $gke_get_elements_caching_state$, $int$256, EQUAL, THREE_INTEGER, ZERO_INTEGER);
                memoization_state.register_hl_store_cache_clear_callback(CLEAR_GKE_GET_ELEMENTS);
            }
            {
                SubLObject sxhash = memoization_state.sxhash_calc_3(set_or_collection, mt, v_properties);
                SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
                if (collisions != $kw28$_MEMOIZED_ITEM_NOT_FOUND_) {
                    {
                        SubLObject cdolist_list_var = collisions;
                        SubLObject collision = NIL;
                        for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , collision = cdolist_list_var.first()) {
                            {
                                SubLObject cached_args = collision.first();
                                SubLObject results2 = second(collision);
                                if (set_or_collection.equal(cached_args.first())) {
                                    cached_args = cached_args.rest();
                                    if (mt.equal(cached_args.first())) {
                                        cached_args = cached_args.rest();
                                        if (((NIL != cached_args) && (NIL == cached_args.rest())) && v_properties.equal(cached_args.first())) {
                                            return memoization_state.caching_results(results2);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.gke_main.gke_get_elements_internal(set_or_collection, mt, v_properties)));
                    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(set_or_collection, mt, v_properties));
                    return memoization_state.caching_results(results);
                }
            }
        }
    }

    public static SubLObject gke_get_elements(final SubLObject set_or_collection, final SubLObject mt, final SubLObject v_properties) {
        SubLObject caching_state = gke_main.$gke_get_elements_caching_state$.getGlobalValue();
        if (NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name(gke_main.GKE_GET_ELEMENTS, gke_main.$gke_get_elements_caching_state$, $int$256, EQUAL, THREE_INTEGER, ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback(gke_main.CLEAR_GKE_GET_ELEMENTS);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_3(set_or_collection, mt, v_properties);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = NIL;
            collision = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = second(collision);
                if (set_or_collection.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (((NIL != cached_args) && (NIL == cached_args.rest())) && v_properties.equal(cached_args.first())) {
                            return memoization_state.caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            } 
        }
        final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(gke_main.gke_get_elements_internal(set_or_collection, mt, v_properties)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(set_or_collection, mt, v_properties));
        return memoization_state.caching_results(results3);
    }

    /**
     * Implementation of #$suggestionGenlClassOrderedBy, etc.
     *
     * @param RENDERER-LIST;
     * 		listp of renderers for candidates identified outside this function.
     */
    @LispMethod(comment = "Implementation of #$suggestionGenlClassOrderedBy, etc.\r\n\r\n@param RENDERER-LIST;\r\n\t\tlistp of renderers for candidates identified outside this function.")
    public static final SubLObject replacement_renderer_groves_alt(SubLObject focal_term, SubLObject mt, SubLObject renderer_list, SubLObject problem_store) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject tables = NIL;
                SubLObject renderer_nodes = Mapping.mapcar(NEW_REPLACEMENT_TREE, renderer_list);
                SubLObject conflation_table = com.cyc.cycjava.cycl.gke_main.replacement_renderer_tree_conflation_preds(focal_term, mt, problem_store);
                SubLObject track_conflationP = list_utilities.non_empty_list_p(conflation_table);
                SubLObject table_table = (NIL != track_conflationP) ? ((SubLObject) (dictionary.new_dictionary(symbol_function(EQL), UNPROVIDED))) : NIL;
                SubLObject already_resourcing_p = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.getDynamicValue(thread);
                {
                    SubLObject _prev_bind_0 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_resource_limit(already_resourcing_p, SIX_INTEGER), thread);
                        sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(sbhl_marking_vars.possibly_new_marking_resource(already_resourcing_p), thread);
                        sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                        {
                            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.gke_main.replacement_renderer_tree_specifications(focal_term, mt, problem_store);
                            SubLObject cons = NIL;
                            for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , cons = cdolist_list_var.first()) {
                                {
                                    SubLObject datum = cons;
                                    SubLObject current = datum;
                                    SubLObject bin_pred = NIL;
                                    SubLObject argnum = NIL;
                                    destructuring_bind_must_consp(current, datum, $list_alt148);
                                    bin_pred = current.first();
                                    current = current.rest();
                                    argnum = current;
                                    {
                                        SubLObject table_to_conflate_to = (NIL != track_conflationP) ? ((SubLObject) (com.cyc.cycjava.cycl.gke_main.find_table_to_conflate_to(bin_pred, conflation_table, table_table))) : NIL;
                                        SubLObject renderer_to_superiors = com.cyc.cycjava.cycl.gke_main.renderer_to_superiors_table(renderer_nodes, mt, bin_pred, argnum, problem_store, table_to_conflate_to);
                                        if (NIL != track_conflationP) {
                                            if (NIL == dictionary.dictionary_p(table_to_conflate_to)) {
                                                dictionary.dictionary_enter(table_table, bin_pred, renderer_to_superiors);
                                            }
                                        }
                                        {
                                            SubLObject item_var = renderer_to_superiors;
                                            if (NIL == member(item_var, tables, symbol_function(EQL), symbol_function(IDENTITY))) {
                                                tables = cons(item_var, tables);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } finally {
                        sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2, thread);
                        sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_1, thread);
                        sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_0, thread);
                    }
                }
                {
                    SubLObject groves = NIL;
                    SubLObject cdolist_list_var = tables;
                    SubLObject renderer_to_superiors = NIL;
                    for (renderer_to_superiors = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , renderer_to_superiors = cdolist_list_var.first()) {
                        {
                            SubLObject listy_grove = com.cyc.cycjava.cycl.gke_main.replacement_renderer_grove(renderer_nodes, renderer_to_superiors);
                            SubLObject var = listy_grove;
                            if (NIL != var) {
                                groves = cons(var, groves);
                            }
                        }
                    }
                    return groves;
                }
            }
        }
    }

    @LispMethod(comment = "Implementation of #$suggestionGenlClassOrderedBy, etc.\r\n\r\n@param RENDERER-LIST;\r\n\t\tlistp of renderers for candidates identified outside this function.")
    public static SubLObject replacement_renderer_groves(final SubLObject focal_term, final SubLObject mt, final SubLObject renderer_list, final SubLObject problem_store) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject tables = NIL;
        final SubLObject renderer_nodes = Mapping.mapcar(gke_main.NEW_REPLACEMENT_TREE, renderer_list);
        final SubLObject conflation_table = gke_main.replacement_renderer_tree_conflation_preds(focal_term, mt, problem_store);
        final SubLObject track_conflationP = list_utilities.non_empty_list_p(conflation_table);
        final SubLObject table_table = (NIL != track_conflationP) ? dictionary.new_dictionary(symbol_function(EQL), UNPROVIDED) : NIL;
        final SubLObject already_resourcing_p = $resourcing_sbhl_marking_spaces_p$.getDynamicValue(thread);
        final SubLObject _prev_bind_0 = $resourced_sbhl_marking_space_limit$.currentBinding(thread);
        final SubLObject _prev_bind_2 = $resourced_sbhl_marking_spaces$.currentBinding(thread);
        final SubLObject _prev_bind_3 = $resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
        try {
            $resourced_sbhl_marking_space_limit$.bind(determine_resource_limit(already_resourcing_p, SIX_INTEGER), thread);
            $resourced_sbhl_marking_spaces$.bind(possibly_new_marking_resource(already_resourcing_p), thread);
            $resourcing_sbhl_marking_spaces_p$.bind(T, thread);
            SubLObject cdolist_list_var = gke_main.replacement_renderer_tree_specifications(focal_term, mt, problem_store);
            SubLObject cons = NIL;
            cons = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject current;
                final SubLObject datum = current = cons;
                SubLObject bin_pred = NIL;
                SubLObject argnum = NIL;
                destructuring_bind_must_consp(current, datum, gke_main.$list138);
                bin_pred = current.first();
                current = argnum = current.rest();
                final SubLObject table_to_conflate_to = (NIL != track_conflationP) ? gke_main.find_table_to_conflate_to(bin_pred, conflation_table, table_table) : NIL;
                final SubLObject renderer_to_superiors = gke_main.renderer_to_superiors_table(renderer_nodes, mt, bin_pred, argnum, problem_store, table_to_conflate_to);
                if ((NIL != track_conflationP) && (NIL == dictionary.dictionary_p(table_to_conflate_to))) {
                    dictionary.dictionary_enter(table_table, bin_pred, renderer_to_superiors);
                }
                final SubLObject item_var = renderer_to_superiors;
                if (NIL == member(item_var, tables, symbol_function(EQL), symbol_function(IDENTITY))) {
                    tables = cons(item_var, tables);
                }
                cdolist_list_var = cdolist_list_var.rest();
                cons = cdolist_list_var.first();
            } 
        } finally {
            $resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_3, thread);
            $resourced_sbhl_marking_spaces$.rebind(_prev_bind_2, thread);
            $resourced_sbhl_marking_space_limit$.rebind(_prev_bind_0, thread);
        }
        SubLObject groves = NIL;
        SubLObject cdolist_list_var2 = tables;
        SubLObject renderer_to_superiors2 = NIL;
        renderer_to_superiors2 = cdolist_list_var2.first();
        while (NIL != cdolist_list_var2) {
            final SubLObject var;
            final SubLObject listy_grove = var = gke_main.replacement_renderer_grove(renderer_nodes, renderer_to_superiors2);
            if (NIL != var) {
                groves = cons(var, groves);
            }
            cdolist_list_var2 = cdolist_list_var2.rest();
            renderer_to_superiors2 = cdolist_list_var2.first();
        } 
        return groves;
    }/**
     * Implementation of #$suggestionGenlClassOrderedBy, etc.
     *
     * @param RENDERER-LIST;
     * 		listp of renderers for candidates identified outside this function.
     */


    /**
     *
     *
     * @param CONFLATION-TABLE;
     * 		listp of el-set-p of preds.
     * @param TABLE-TABLE;
     * 		dictionary from preds to tables.
     */
    @LispMethod(comment = "@param CONFLATION-TABLE;\r\n\t\tlistp of el-set-p of preds.\r\n@param TABLE-TABLE;\r\n\t\tdictionary from preds to tables.")
    public static final SubLObject find_table_to_conflate_to_alt(SubLObject bin_pred, SubLObject conflation_table, SubLObject table_table) {
        {
            SubLObject table = NIL;
            if (NIL == table) {
                {
                    SubLObject csome_list_var = conflation_table;
                    SubLObject conflation_set = NIL;
                    for (conflation_set = csome_list_var.first(); !((NIL != table) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , conflation_set = csome_list_var.first()) {
                        {
                            SubLObject preds = el_set_items(conflation_set);
                            if (NIL != member(bin_pred, preds, UNPROVIDED, UNPROVIDED)) {
                                if (NIL == table) {
                                    {
                                        SubLObject csome_list_var_96 = preds;
                                        SubLObject other_pred = NIL;
                                        for (other_pred = csome_list_var_96.first(); !((NIL != table) || (NIL == csome_list_var_96)); csome_list_var_96 = csome_list_var_96.rest() , other_pred = csome_list_var_96.first()) {
                                            if (!other_pred.eql(bin_pred)) {
                                                table = dictionary.dictionary_lookup_without_values(table_table, other_pred, NIL);
                                                if (NIL != table) {
                                                    format(T, $str_alt149$__Conflating__S_to__S_____, bin_pred, other_pred);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return table;
        }
    }

    /**
     *
     *
     * @param CONFLATION-TABLE;
     * 		listp of el-set-p of preds.
     * @param TABLE-TABLE;
     * 		dictionary from preds to tables.
     */
    @LispMethod(comment = "@param CONFLATION-TABLE;\r\n\t\tlistp of el-set-p of preds.\r\n@param TABLE-TABLE;\r\n\t\tdictionary from preds to tables.")
    public static SubLObject find_table_to_conflate_to(final SubLObject bin_pred, final SubLObject conflation_table, final SubLObject table_table) {
        SubLObject table = NIL;
        if (NIL == table) {
            SubLObject csome_list_var = conflation_table;
            SubLObject conflation_set = NIL;
            conflation_set = csome_list_var.first();
            while ((NIL == table) && (NIL != csome_list_var)) {
                final SubLObject preds = el_set_items(conflation_set);
                if ((NIL != member(bin_pred, preds, UNPROVIDED, UNPROVIDED)) && (NIL == table)) {
                    SubLObject csome_list_var_$58 = preds;
                    SubLObject other_pred = NIL;
                    other_pred = csome_list_var_$58.first();
                    while ((NIL == table) && (NIL != csome_list_var_$58)) {
                        if (!other_pred.eql(bin_pred)) {
                            table = dictionary.dictionary_lookup_without_values(table_table, other_pred, NIL);
                            if (NIL != table) {
                                format(T, gke_main.$str139$__Conflating__S_to__S_____, bin_pred, other_pred);
                            }
                        }
                        csome_list_var_$58 = csome_list_var_$58.rest();
                        other_pred = csome_list_var_$58.first();
                    } 
                }
                csome_list_var = csome_list_var.rest();
                conflation_set = csome_list_var.first();
            } 
        }
        return table;
    }

    public static final SubLObject replacement_tree_print_function_trampoline_alt(SubLObject v_object, SubLObject stream) {
        com.cyc.cycjava.cycl.gke_main.print_replacement_tree(v_object, stream, ZERO_INTEGER);
        return NIL;
    }

    public static SubLObject replacement_tree_print_function_trampoline(final SubLObject v_object, final SubLObject stream) {
        gke_main.print_replacement_tree(v_object, stream, ZERO_INTEGER);
        return NIL;
    }

    public static final SubLObject replacement_tree_p_alt(SubLObject v_object) {
        return v_object.getClass() == com.cyc.cycjava.cycl.gke_main.$replacement_tree_native.class ? ((SubLObject) (T)) : NIL;
    }

    public static SubLObject replacement_tree_p(final SubLObject v_object) {
        return v_object.getClass() == com.cyc.cycjava.cycl.gke_main.$replacement_tree_native.class ? T : NIL;
    }

    public static final SubLObject r_tree_root_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, REPLACEMENT_TREE_P);
        return v_object.getField2();
    }

    public static SubLObject r_tree_root(final SubLObject v_object) {
        assert NIL != gke_main.replacement_tree_p(v_object) : "! gke_main.replacement_tree_p(v_object) " + "gke_main.replacement_tree_p error :" + v_object;
        return v_object.getField2();
    }

    public static final SubLObject r_tree_children_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, REPLACEMENT_TREE_P);
        return v_object.getField3();
    }

    public static SubLObject r_tree_children(final SubLObject v_object) {
        assert NIL != gke_main.replacement_tree_p(v_object) : "! gke_main.replacement_tree_p(v_object) " + "gke_main.replacement_tree_p error :" + v_object;
        return v_object.getField3();
    }

    public static final SubLObject _csetf_r_tree_root_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, REPLACEMENT_TREE_P);
        return v_object.setField2(value);
    }

    public static SubLObject _csetf_r_tree_root(final SubLObject v_object, final SubLObject value) {
        assert NIL != gke_main.replacement_tree_p(v_object) : "! gke_main.replacement_tree_p(v_object) " + "gke_main.replacement_tree_p error :" + v_object;
        return v_object.setField2(value);
    }

    public static final SubLObject _csetf_r_tree_children_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, REPLACEMENT_TREE_P);
        return v_object.setField3(value);
    }

    public static SubLObject _csetf_r_tree_children(final SubLObject v_object, final SubLObject value) {
        assert NIL != gke_main.replacement_tree_p(v_object) : "! gke_main.replacement_tree_p(v_object) " + "gke_main.replacement_tree_p error :" + v_object;
        return v_object.setField3(value);
    }

    public static final SubLObject make_replacement_tree_alt(SubLObject arglist) {
        if (arglist == UNPROVIDED) {
            arglist = NIL;
        }
        {
            SubLObject v_new = new com.cyc.cycjava.cycl.gke_main.$replacement_tree_native();
            SubLObject next = NIL;
            for (next = arglist; NIL != next; next = cddr(next)) {
                {
                    SubLObject current_arg = next.first();
                    SubLObject current_value = cadr(next);
                    SubLObject pcase_var = current_arg;
                    if (pcase_var.eql($ROOT)) {
                        com.cyc.cycjava.cycl.gke_main._csetf_r_tree_root(v_new, current_value);
                    } else {
                        if (pcase_var.eql($CHILDREN)) {
                            com.cyc.cycjava.cycl.gke_main._csetf_r_tree_children(v_new, current_value);
                        } else {
                            Errors.error($str_alt164$Invalid_slot__S_for_construction_, current_arg);
                        }
                    }
                }
            }
            return v_new;
        }
    }

    public static SubLObject make_replacement_tree(SubLObject arglist) {
        if (arglist == UNPROVIDED) {
            arglist = NIL;
        }
        final SubLObject v_new = new com.cyc.cycjava.cycl.gke_main.$replacement_tree_native();
        SubLObject next;
        SubLObject current_arg;
        SubLObject current_value;
        SubLObject pcase_var;
        for (next = NIL, next = arglist; NIL != next; next = cddr(next)) {
            current_arg = next.first();
            current_value = cadr(next);
            pcase_var = current_arg;
            if (pcase_var.eql($ROOT)) {
                gke_main._csetf_r_tree_root(v_new, current_value);
            } else
                if (pcase_var.eql($CHILDREN)) {
                    gke_main._csetf_r_tree_children(v_new, current_value);
                } else {
                    Errors.error(gke_main.$str155$Invalid_slot__S_for_construction_, current_arg);
                }

        }
        return v_new;
    }

    public static SubLObject visit_defstruct_replacement_tree(final SubLObject obj, final SubLObject visitor_fn) {
        funcall(visitor_fn, obj, $BEGIN, gke_main.MAKE_REPLACEMENT_TREE, TWO_INTEGER);
        funcall(visitor_fn, obj, $SLOT, $ROOT, gke_main.r_tree_root(obj));
        funcall(visitor_fn, obj, $SLOT, $CHILDREN, gke_main.r_tree_children(obj));
        funcall(visitor_fn, obj, $END, gke_main.MAKE_REPLACEMENT_TREE, TWO_INTEGER);
        return obj;
    }

    public static SubLObject visit_defstruct_object_replacement_tree_method(final SubLObject obj, final SubLObject visitor_fn) {
        return gke_main.visit_defstruct_replacement_tree(obj, visitor_fn);
    }

    public static final SubLObject print_replacement_tree_alt(SubLObject v_object, SubLObject stream, SubLObject depth) {
        format(stream, $str_alt165$_REPLACEMENT_TREE__S_, second(com.cyc.cycjava.cycl.gke_main.replacement_tree_root(v_object)));
        return v_object;
    }

    public static SubLObject print_replacement_tree(final SubLObject v_object, final SubLObject stream, final SubLObject depth) {
        format(stream, gke_main.$str161$_REPLACEMENT_TREE__S_, second(gke_main.replacement_tree_root(v_object)));
        return v_object;
    }

    public static final SubLObject new_replacement_tree_alt(SubLObject root, SubLObject children) {
        if (children == UNPROVIDED) {
            children = NIL;
        }
        SubLTrampolineFile.checkType(root, LISTP);
        {
            SubLObject list_var = children;
            SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
            {
                SubLObject cdolist_list_var = list_var;
                SubLObject elem = NIL;
                for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , elem = cdolist_list_var.first()) {
                    SubLTrampolineFile.checkType(elem, REPLACEMENT_TREE_P);
                }
            }
        }
        {
            SubLObject tree = com.cyc.cycjava.cycl.gke_main.make_replacement_tree(UNPROVIDED);
            com.cyc.cycjava.cycl.gke_main._csetf_r_tree_root(tree, root);
            com.cyc.cycjava.cycl.gke_main._csetf_r_tree_children(tree, children);
            return tree;
        }
    }

    public static SubLObject new_replacement_tree(final SubLObject root, SubLObject children) {
        if (children == UNPROVIDED) {
            children = NIL;
        }
        assert NIL != listp(root) : "! listp(root) " + ("Types.listp(root) " + "CommonSymbols.NIL != Types.listp(root) ") + root;
        final SubLObject list_var = children;
        assert NIL != list_utilities.non_dotted_list_p(list_var) : "! list_utilities.non_dotted_list_p(list_var) " + ("list_utilities.non_dotted_list_p(list_var) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(list_var) ") + list_var;
        SubLObject cdolist_list_var = list_var;
        SubLObject elem = NIL;
        elem = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            assert NIL != gke_main.replacement_tree_p(elem) : "! gke_main.replacement_tree_p(elem) " + ("gke_main.replacement_tree_p(elem) " + "CommonSymbols.NIL != gke_main.replacement_tree_p(elem) ") + elem;
            cdolist_list_var = cdolist_list_var.rest();
            elem = cdolist_list_var.first();
        } 
        final SubLObject tree = gke_main.make_replacement_tree(UNPROVIDED);
        gke_main._csetf_r_tree_root(tree, root);
        gke_main._csetf_r_tree_children(tree, children);
        return tree;
    }

    public static final SubLObject replacement_tree_root_alt(SubLObject tree) {
        SubLTrampolineFile.checkType(tree, REPLACEMENT_TREE_P);
        return com.cyc.cycjava.cycl.gke_main.r_tree_root(tree);
    }

    public static SubLObject replacement_tree_root(final SubLObject tree) {
        assert NIL != gke_main.replacement_tree_p(tree) : "! gke_main.replacement_tree_p(tree) " + ("gke_main.replacement_tree_p(tree) " + "CommonSymbols.NIL != gke_main.replacement_tree_p(tree) ") + tree;
        return gke_main.r_tree_root(tree);
    }

    public static final SubLObject replacement_tree_children_alt(SubLObject tree) {
        SubLTrampolineFile.checkType(tree, REPLACEMENT_TREE_P);
        return com.cyc.cycjava.cycl.gke_main.r_tree_children(tree);
    }

    public static SubLObject replacement_tree_children(final SubLObject tree) {
        assert NIL != gke_main.replacement_tree_p(tree) : "! gke_main.replacement_tree_p(tree) " + ("gke_main.replacement_tree_p(tree) " + "CommonSymbols.NIL != gke_main.replacement_tree_p(tree) ") + tree;
        return gke_main.r_tree_children(tree);
    }

    public static final SubLObject replacement_tree_add_child_alt(SubLObject superior, SubLObject renderer) {
        SubLTrampolineFile.checkType(superior, REPLACEMENT_TREE_P);
        SubLTrampolineFile.checkType(renderer, REPLACEMENT_TREE_P);
        com.cyc.cycjava.cycl.gke_main._csetf_r_tree_children(superior, cons(renderer, com.cyc.cycjava.cycl.gke_main.r_tree_children(superior)));
        return superior;
    }

    public static SubLObject replacement_tree_add_child(final SubLObject superior, final SubLObject renderer) {
        assert NIL != gke_main.replacement_tree_p(superior) : "! gke_main.replacement_tree_p(superior) " + ("gke_main.replacement_tree_p(superior) " + "CommonSymbols.NIL != gke_main.replacement_tree_p(superior) ") + superior;
        assert NIL != gke_main.replacement_tree_p(renderer) : "! gke_main.replacement_tree_p(renderer) " + ("gke_main.replacement_tree_p(renderer) " + "CommonSymbols.NIL != gke_main.replacement_tree_p(renderer) ") + renderer;
        gke_main._csetf_r_tree_children(superior, cons(renderer, gke_main.r_tree_children(superior)));
        return superior;
    }

    public static final SubLObject replacement_renderer_grove_alt(SubLObject renderer_list, SubLObject renderer_to_superiors) {
        {
            SubLObject list_var = renderer_list;
            SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
            {
                SubLObject cdolist_list_var = list_var;
                SubLObject elem = NIL;
                for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , elem = cdolist_list_var.first()) {
                    SubLTrampolineFile.checkType(elem, REPLACEMENT_TREE_P);
                }
            }
        }
        return com.cyc.cycjava.cycl.gke_main.replacement_renderer_grove_recursive(renderer_list, renderer_to_superiors, NIL);
    }

    public static SubLObject replacement_renderer_grove(final SubLObject renderer_list, final SubLObject renderer_to_superiors) {
        assert NIL != list_utilities.non_dotted_list_p(renderer_list) : "! list_utilities.non_dotted_list_p(renderer_list) " + ("list_utilities.non_dotted_list_p(renderer_list) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(renderer_list) ") + renderer_list;
        SubLObject cdolist_list_var = renderer_list;
        SubLObject elem = NIL;
        elem = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            assert NIL != gke_main.replacement_tree_p(elem) : "! gke_main.replacement_tree_p(elem) " + ("gke_main.replacement_tree_p(elem) " + "CommonSymbols.NIL != gke_main.replacement_tree_p(elem) ") + elem;
            cdolist_list_var = cdolist_list_var.rest();
            elem = cdolist_list_var.first();
        } 
        return gke_main.replacement_renderer_grove_recursive(renderer_list, renderer_to_superiors, NIL);
    }

    /**
     *
     *
     * @return listp of trees (a.k.a. a 'grove') organizing the renderers on renderer-nodes according to the
    superiors links in RENDERER-TO-SUPERIORS.
     */
    @LispMethod(comment = "@return listp of trees (a.k.a. a \'grove\') organizing the renderers on renderer-nodes according to the\r\nsuperiors links in RENDERER-TO-SUPERIORS.")
    public static final SubLObject replacement_renderer_grove_recursive_alt(SubLObject renderer_nodes, SubLObject renderer_to_superiors, SubLObject recursedP) {
        {
            SubLObject list_var = renderer_nodes;
            SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
            {
                SubLObject cdolist_list_var = list_var;
                SubLObject elem = NIL;
                for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , elem = cdolist_list_var.first()) {
                    SubLTrampolineFile.checkType(elem, REPLACEMENT_TREE_P);
                }
            }
        }
        {
            SubLObject remaining = copy_list(renderer_nodes);
            SubLObject still_remaining = NIL;
            SubLObject tree = NIL;
            SubLObject no_progressP = NIL;
            SubLObject depth = ZERO_INTEGER;
            SubLObject max_depth = NIL;
            SubLObject listy_grove = NIL;
            while (!((((NIL != max_depth) && depth.numGE(max_depth)) || (NIL != list_utilities.empty_list_p(remaining))) || (NIL != no_progressP))) {
                still_remaining = NIL;
                no_progressP = T;
                {
                    SubLObject new_tree_level = set.new_set(symbol_function(EQL), UNPROVIDED);
                    SubLObject cdolist_list_var = nreverse(remaining);
                    SubLObject renderer_node = NIL;
                    for (renderer_node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , renderer_node = cdolist_list_var.first()) {
                        if (NIL != com.cyc.cycjava.cycl.gke_main.postpone_adding_replacementP(renderer_node, tree, renderer_to_superiors)) {
                            still_remaining = cons(renderer_node, still_remaining);
                        } else {
                            com.cyc.cycjava.cycl.gke_main.add_one_renderer(renderer_node, renderer_to_superiors, new_tree_level, tree);
                            no_progressP = NIL;
                        }
                    }
                    tree = list_utilities.add_to_end(new_tree_level, tree);
                    remaining = still_remaining;
                    depth = add(depth, ONE_INTEGER);
                }
            } 
            {
                SubLObject cycleP = makeBoolean(((NIL == max_depth) || depth.numL(max_depth)) && (NIL != list_utilities.non_empty_list_p(remaining)));
                if ((NIL != cycleP) && (NIL == recursedP)) {
                    com.cyc.cycjava.cycl.gke_main.break_replacement_renderer_cycles(remaining, renderer_to_superiors);
                    listy_grove = com.cyc.cycjava.cycl.gke_main.replacement_renderer_grove_recursive(renderer_nodes, renderer_to_superiors, T);
                } else {
                    if (NIL != cycleP) {
                        Errors.sublisp_break($str_alt167$Unable_to_place__D_renderers, new SubLObject[]{ length(remaining) });
                    } else {
                        if (depth.numG(ONE_INTEGER)) {
                            if (NIL != list_utilities.non_empty_list_p(remaining)) {
                                Errors.warn($str_alt168$Hit_max_depth_of__D__Pruning__D_r, max_depth, length(remaining));
                            }
                            listy_grove = NIL;
                            {
                                SubLObject set_contents_var = set.do_set_internal(tree.first());
                                SubLObject basis_object = set_contents.do_set_contents_basis_object(set_contents_var);
                                SubLObject state = NIL;
                                for (state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                    {
                                        SubLObject root_node = set_contents.do_set_contents_next(basis_object, state);
                                        if (NIL != set_contents.do_set_contents_element_validP(state, root_node)) {
                                            {
                                                SubLObject listy_tree = com.cyc.cycjava.cycl.gke_main.listy_replacement_tree(root_node, tree);
                                                if (!((NIL != $omit_suggestion_stumpsP$.getGlobalValue()) && (NIL != list_utilities.lengthLE(listy_tree, ONE_INTEGER, UNPROVIDED)))) {
                                                    listy_grove = cons(listy_tree, listy_grove);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return listy_grove;
        }
    }

    /**
     *
     *
     * @return listp of trees (a.k.a. a 'grove') organizing the renderers on renderer-nodes according to the
    superiors links in RENDERER-TO-SUPERIORS.
     */
    @LispMethod(comment = "@return listp of trees (a.k.a. a \'grove\') organizing the renderers on renderer-nodes according to the\r\nsuperiors links in RENDERER-TO-SUPERIORS.")
    public static SubLObject replacement_renderer_grove_recursive(final SubLObject renderer_nodes, final SubLObject renderer_to_superiors, final SubLObject recursedP) {
        assert NIL != list_utilities.non_dotted_list_p(renderer_nodes) : "! list_utilities.non_dotted_list_p(renderer_nodes) " + ("list_utilities.non_dotted_list_p(renderer_nodes) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(renderer_nodes) ") + renderer_nodes;
        SubLObject cdolist_list_var = renderer_nodes;
        SubLObject elem = NIL;
        elem = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            assert NIL != gke_main.replacement_tree_p(elem) : "! gke_main.replacement_tree_p(elem) " + ("gke_main.replacement_tree_p(elem) " + "CommonSymbols.NIL != gke_main.replacement_tree_p(elem) ") + elem;
            cdolist_list_var = cdolist_list_var.rest();
            elem = cdolist_list_var.first();
        } 
        SubLObject remaining = copy_list(renderer_nodes);
        SubLObject still_remaining = NIL;
        SubLObject tree = NIL;
        SubLObject no_progressP = NIL;
        SubLObject depth = ZERO_INTEGER;
        final SubLObject max_depth = NIL;
        SubLObject listy_grove = NIL;
        while ((((NIL == max_depth) || (!depth.numGE(max_depth))) && (NIL == list_utilities.empty_list_p(remaining))) && (NIL == no_progressP)) {
            still_remaining = NIL;
            no_progressP = T;
            final SubLObject new_tree_level = set.new_set(symbol_function(EQL), UNPROVIDED);
            SubLObject cdolist_list_var2 = nreverse(remaining);
            SubLObject renderer_node = NIL;
            renderer_node = cdolist_list_var2.first();
            while (NIL != cdolist_list_var2) {
                if (NIL != gke_main.postpone_adding_replacementP(renderer_node, tree, renderer_to_superiors)) {
                    still_remaining = cons(renderer_node, still_remaining);
                } else {
                    gke_main.add_one_renderer(renderer_node, renderer_to_superiors, new_tree_level, tree);
                    no_progressP = NIL;
                }
                cdolist_list_var2 = cdolist_list_var2.rest();
                renderer_node = cdolist_list_var2.first();
            } 
            tree = list_utilities.add_to_end(new_tree_level, tree);
            remaining = still_remaining;
            depth = add(depth, ONE_INTEGER);
        } 
        final SubLObject cycleP = makeBoolean(((NIL == max_depth) || depth.numL(max_depth)) && (NIL != list_utilities.non_empty_list_p(remaining)));
        if ((NIL != cycleP) && (NIL == recursedP)) {
            gke_main.break_replacement_renderer_cycles(remaining, renderer_to_superiors);
            listy_grove = gke_main.replacement_renderer_grove_recursive(renderer_nodes, renderer_to_superiors, T);
        } else
            if (NIL != cycleP) {
                Errors.sublisp_break(gke_main.$str163$Unable_to_place__D_renderers, new SubLObject[]{ length(remaining) });
            } else
                if (depth.numG(ONE_INTEGER)) {
                    if (NIL != list_utilities.non_empty_list_p(remaining)) {
                        Errors.warn(gke_main.$str164$Hit_max_depth_of__D__Pruning__D_r, max_depth, length(remaining));
                    }
                    listy_grove = NIL;
                    final SubLObject set_var = tree.first();
                    final SubLObject set_contents_var = set.do_set_internal(set_var);
                    SubLObject basis_object;
                    SubLObject state;
                    SubLObject root_node;
                    SubLObject listy_tree;
                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                        root_node = set_contents.do_set_contents_next(basis_object, state);
                        if (NIL != set_contents.do_set_contents_element_validP(state, root_node)) {
                            listy_tree = gke_main.listy_replacement_tree(root_node, tree);
                            if ((NIL == gke_main.$omit_suggestion_stumpsP$.getGlobalValue()) || (NIL == list_utilities.lengthLE(listy_tree, ONE_INTEGER, UNPROVIDED))) {
                                listy_grove = cons(listy_tree, listy_grove);
                            }
                        }
                    }
                }


        return listy_grove;
    }

    public static final SubLObject add_one_renderer_alt(SubLObject renderer_node, SubLObject renderer_to_superiors, SubLObject new_tree_level, SubLObject tree) {
        SubLTrampolineFile.checkType(renderer_node, REPLACEMENT_TREE_P);
        {
            SubLObject list_var = dictionary.dictionary_keys(renderer_to_superiors);
            SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
            {
                SubLObject cdolist_list_var = list_var;
                SubLObject elem = NIL;
                for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , elem = cdolist_list_var.first()) {
                    SubLTrampolineFile.checkType(elem, LISTP);
                }
            }
        }
        {
            SubLObject renderer = com.cyc.cycjava.cycl.gke_main.replacement_tree_root(renderer_node);
            SubLObject this_term = second(renderer);
            SubLObject traceP = NIL;
            SubLObject superiors = dictionary.dictionary_lookup_without_values(renderer_to_superiors, renderer, NIL);
            SubLObject list_var = set.set_element_list(superiors);
            SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
            {
                SubLObject cdolist_list_var = list_var;
                SubLObject elem = NIL;
                for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , elem = cdolist_list_var.first()) {
                    SubLTrampolineFile.checkType(elem, REPLACEMENT_TREE_P);
                }
            }
            if (NIL != traceP) {
                format(T, $str_alt169$__Placing__S_under_superiors___S_, this_term, Mapping.mapcar(SECOND, set.set_element_list(superiors)));
            }
            set.set_add(renderer_node, new_tree_level);
            {
                SubLObject doneP = NIL;
                SubLObject remaining_superiors = set.copy_set(superiors);
                if (NIL == doneP) {
                    {
                        SubLObject end_var = MINUS_ONE_INTEGER;
                        SubLObject i = NIL;
                        for (i = number_utilities.f_1_(length(tree)); !((NIL != doneP) || i.numLE(end_var)); i = add(i, MINUS_ONE_INTEGER)) {
                            {
                                SubLObject tree_level = nth(i, tree);
                                SubLObject set_contents_var = set.do_set_internal(superiors);
                                SubLObject basis_object = set_contents.do_set_contents_basis_object(set_contents_var);
                                SubLObject state = NIL;
                                for (state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                    {
                                        SubLObject superior = set_contents.do_set_contents_next(basis_object, state);
                                        if (NIL != set_contents.do_set_contents_element_validP(state, superior)) {
                                            if (NIL != set.set_memberP(superior, remaining_superiors)) {
                                                {
                                                    SubLObject foundP = NIL;
                                                    if (NIL != set.set_memberP(superior, tree_level)) {
                                                        foundP = T;
                                                        if (NIL != traceP) {
                                                            format(T, $str_alt171$__Found__S_on_level__D___, second(superior), i);
                                                        }
                                                        if (NIL == com.cyc.cycjava.cycl.gke_main.renderer_tree_contains_rendererP(superior, renderer_node, i, tree, traceP)) {
                                                            if (NIL != traceP) {
                                                                format(T, $str_alt172$__Not_in_subtree__so_adding__S_un, new SubLObject[]{ this_term, second(superior), i });
                                                            }
                                                            com.cyc.cycjava.cycl.gke_main.replacement_tree_add_child(superior, renderer_node);
                                                            if (NIL != traceP) {
                                                                format(T, $str_alt173$___Tree_level__D_is_now__S___, i, tree_level);
                                                            }
                                                        }
                                                    }
                                                    if (NIL != foundP) {
                                                        set.set_remove(superior, remaining_superiors);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            doneP = set.set_emptyP(remaining_superiors);
                        }
                    }
                }
            }
        }
        return NIL;
    }

    public static SubLObject add_one_renderer(final SubLObject renderer_node, final SubLObject renderer_to_superiors, final SubLObject new_tree_level, final SubLObject tree) {
        assert NIL != gke_main.replacement_tree_p(renderer_node) : "! gke_main.replacement_tree_p(renderer_node) " + ("gke_main.replacement_tree_p(renderer_node) " + "CommonSymbols.NIL != gke_main.replacement_tree_p(renderer_node) ") + renderer_node;
        final SubLObject list_var = dictionary.dictionary_keys(renderer_to_superiors);
        assert NIL != list_utilities.non_dotted_list_p(list_var) : "! list_utilities.non_dotted_list_p(list_var) " + ("list_utilities.non_dotted_list_p(list_var) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(list_var) ") + list_var;
        SubLObject cdolist_list_var = list_var;
        SubLObject elem = NIL;
        elem = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            assert NIL != listp(elem) : "! listp(elem) " + ("Types.listp(elem) " + "CommonSymbols.NIL != Types.listp(elem) ") + elem;
            cdolist_list_var = cdolist_list_var.rest();
            elem = cdolist_list_var.first();
        } 
        final SubLObject renderer = gke_main.replacement_tree_root(renderer_node);
        final SubLObject this_term = second(renderer);
        final SubLObject traceP = NIL;
        final SubLObject superiors = dictionary.dictionary_lookup_without_values(renderer_to_superiors, renderer, NIL);
        final SubLObject list_var2 = set.set_element_list(superiors);
        assert NIL != list_utilities.non_dotted_list_p(list_var2) : "! list_utilities.non_dotted_list_p(list_var2) " + ("list_utilities.non_dotted_list_p(list_var2) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(list_var2) ") + list_var2;
        SubLObject cdolist_list_var2 = list_var2;
        SubLObject elem2 = NIL;
        elem2 = cdolist_list_var2.first();
        while (NIL != cdolist_list_var2) {
            assert NIL != gke_main.replacement_tree_p(elem2) : "! gke_main.replacement_tree_p(elem2) " + ("gke_main.replacement_tree_p(elem2) " + "CommonSymbols.NIL != gke_main.replacement_tree_p(elem2) ") + elem2;
            cdolist_list_var2 = cdolist_list_var2.rest();
            elem2 = cdolist_list_var2.first();
        } 
        if (NIL != traceP) {
            format(T, gke_main.$str165$__Placing__S_under_superiors___S_, this_term, Mapping.mapcar(SECOND, set.set_element_list(superiors)));
        }
        set.set_add(renderer_node, new_tree_level);
        SubLObject doneP = NIL;
        final SubLObject remaining_superiors = set.copy_set(superiors);
        if (NIL == doneP) {
            SubLObject end_var;
            SubLObject i;
            SubLObject tree_level;
            SubLObject set_contents_var;
            SubLObject basis_object;
            SubLObject state;
            SubLObject superior;
            SubLObject foundP;
            for (end_var = MINUS_ONE_INTEGER, i = NIL, i = number_utilities.f_1_(length(tree)); (NIL == doneP) && (!i.numLE(end_var)); doneP = set.set_emptyP(remaining_superiors) , i = add(i, MINUS_ONE_INTEGER)) {
                tree_level = nth(i, tree);
                set_contents_var = set.do_set_internal(superiors);
                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                    superior = set_contents.do_set_contents_next(basis_object, state);
                    if ((NIL != set_contents.do_set_contents_element_validP(state, superior)) && (NIL != set.set_memberP(superior, remaining_superiors))) {
                        foundP = NIL;
                        if (NIL != set.set_memberP(superior, tree_level)) {
                            foundP = T;
                            if (NIL != traceP) {
                                format(T, gke_main.$str167$__Found__S_on_level__D___, second(superior), i);
                            }
                            if (NIL == gke_main.renderer_tree_contains_rendererP(superior, renderer_node, i, tree, traceP)) {
                                if (NIL != traceP) {
                                    format(T, gke_main.$str168$__Not_in_subtree__so_adding__S_un, new SubLObject[]{ this_term, second(superior), i });
                                }
                                gke_main.replacement_tree_add_child(superior, renderer_node);
                                if (NIL != traceP) {
                                    format(T, gke_main.$str169$___Tree_level__D_is_now__S___, i, tree_level);
                                }
                            }
                        }
                        if (NIL != foundP) {
                            set.set_remove(superior, remaining_superiors);
                        }
                    }
                }
            }
        }
        return NIL;
    }

    public static final SubLObject renderer_tree_contains_rendererP_alt(SubLObject root, SubLObject renderer, SubLObject i, SubLObject tree, SubLObject traceP) {
        if (traceP == UNPROVIDED) {
            traceP = NIL;
        }
        SubLTrampolineFile.checkType(root, REPLACEMENT_TREE_P);
        SubLTrampolineFile.checkType(renderer, REPLACEMENT_TREE_P);
        {
            SubLObject foundP = NIL;
            SubLObject immediate_subnodes = com.cyc.cycjava.cycl.gke_main.replacement_tree_children(root);
            if (NIL == foundP) {
                {
                    SubLObject csome_list_var = immediate_subnodes;
                    SubLObject subnode = NIL;
                    for (subnode = csome_list_var.first(); !((NIL != foundP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , subnode = csome_list_var.first()) {
                        if (com.cyc.cycjava.cycl.gke_main.replacement_tree_root(renderer).equal(com.cyc.cycjava.cycl.gke_main.replacement_tree_root(subnode))) {
                            foundP = T;
                            if (NIL != traceP) {
                                print($str_alt174$Found_it_, UNPROVIDED);
                            }
                        } else {
                            if (NIL != list_utilities.lengthG(tree, number_utilities.f_1X(i), UNPROVIDED)) {
                                foundP = com.cyc.cycjava.cycl.gke_main.renderer_tree_contains_rendererP(subnode, renderer, number_utilities.f_1X(i), tree, traceP);
                            }
                        }
                    }
                }
            }
            return foundP;
        }
    }

    public static SubLObject renderer_tree_contains_rendererP(final SubLObject root, final SubLObject renderer, final SubLObject i, final SubLObject tree, SubLObject traceP) {
        if (traceP == UNPROVIDED) {
            traceP = NIL;
        }
        assert NIL != gke_main.replacement_tree_p(root) : "! gke_main.replacement_tree_p(root) " + ("gke_main.replacement_tree_p(root) " + "CommonSymbols.NIL != gke_main.replacement_tree_p(root) ") + root;
        assert NIL != gke_main.replacement_tree_p(renderer) : "! gke_main.replacement_tree_p(renderer) " + ("gke_main.replacement_tree_p(renderer) " + "CommonSymbols.NIL != gke_main.replacement_tree_p(renderer) ") + renderer;
        SubLObject foundP = NIL;
        final SubLObject immediate_subnodes = gke_main.replacement_tree_children(root);
        if (NIL == foundP) {
            SubLObject csome_list_var = immediate_subnodes;
            SubLObject subnode = NIL;
            subnode = csome_list_var.first();
            while ((NIL == foundP) && (NIL != csome_list_var)) {
                if (gke_main.replacement_tree_root(renderer).equal(gke_main.replacement_tree_root(subnode))) {
                    foundP = T;
                    if (NIL != traceP) {
                        print(gke_main.$str170$Found_it_, UNPROVIDED);
                    }
                } else
                    if (NIL != list_utilities.lengthG(tree, number_utilities.f_1X(i), UNPROVIDED)) {
                        foundP = gke_main.renderer_tree_contains_rendererP(subnode, renderer, number_utilities.f_1X(i), tree, traceP);
                    }

                csome_list_var = csome_list_var.rest();
                subnode = csome_list_var.first();
            } 
        }
        return foundP;
    }

    public static final SubLObject break_replacement_renderer_cycles_alt(SubLObject remaining, SubLObject renderer_to_superiors) {
        {
            SubLObject list_var = remaining;
            SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
            {
                SubLObject cdolist_list_var = list_var;
                SubLObject elem = NIL;
                for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , elem = cdolist_list_var.first()) {
                    SubLTrampolineFile.checkType(elem, REPLACEMENT_TREE_P);
                }
            }
        }
        {
            SubLObject still_remaining = copy_list(remaining);
            SubLObject cdolist_list_var = remaining;
            SubLObject renderer_node = NIL;
            for (renderer_node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , renderer_node = cdolist_list_var.first()) {
                {
                    SubLObject renderer = com.cyc.cycjava.cycl.gke_main.replacement_tree_root(renderer_node);
                    SubLObject superiors = dictionary.dictionary_lookup_without_values(renderer_to_superiors, renderer, UNPROVIDED);
                    SubLObject old_size = set.set_size(superiors);
                    set_utilities.set_remove_all(still_remaining, superiors);
                    {
                        SubLObject new_size = set.set_size(dictionary.dictionary_lookup_without_values(renderer_to_superiors, renderer, UNPROVIDED));
                        if (old_size.numG(new_size)) {
                        }
                    }
                    still_remaining = delete(renderer, still_remaining, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                }
            }
        }
        return NIL;
    }

    public static SubLObject break_replacement_renderer_cycles(final SubLObject remaining, final SubLObject renderer_to_superiors) {
        assert NIL != list_utilities.non_dotted_list_p(remaining) : "! list_utilities.non_dotted_list_p(remaining) " + ("list_utilities.non_dotted_list_p(remaining) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(remaining) ") + remaining;
        SubLObject cdolist_list_var = remaining;
        SubLObject elem = NIL;
        elem = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            assert NIL != gke_main.replacement_tree_p(elem) : "! gke_main.replacement_tree_p(elem) " + ("gke_main.replacement_tree_p(elem) " + "CommonSymbols.NIL != gke_main.replacement_tree_p(elem) ") + elem;
            cdolist_list_var = cdolist_list_var.rest();
            elem = cdolist_list_var.first();
        } 
        SubLObject still_remaining = copy_list(remaining);
        cdolist_list_var = remaining;
        SubLObject renderer_node = NIL;
        renderer_node = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject renderer = gke_main.replacement_tree_root(renderer_node);
            final SubLObject superiors = dictionary.dictionary_lookup_without_values(renderer_to_superiors, renderer, UNPROVIDED);
            final SubLObject old_size = set.set_size(superiors);
            set_utilities.set_remove_all(still_remaining, superiors);
            final SubLObject new_size = set.set_size(dictionary.dictionary_lookup_without_values(renderer_to_superiors, renderer, UNPROVIDED));
            if (old_size.numG(new_size)) {
            }
            still_remaining = delete(renderer, still_remaining, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            renderer_node = cdolist_list_var.first();
        } 
        return NIL;
    }

    public static final SubLObject listy_replacement_tree_alt(SubLObject root_node, SubLObject tree) {
        {
            SubLObject subnodes = NIL;
            if (NIL != list_utilities.non_empty_list_p(tree)) {
                {
                    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.gke_main.replacement_tree_children(root_node);
                    SubLObject subnode = NIL;
                    for (subnode = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , subnode = cdolist_list_var.first()) {
                        subnodes = cons(com.cyc.cycjava.cycl.gke_main.listy_replacement_tree(subnode, tree.rest()), subnodes);
                    }
                }
            }
            return cons(com.cyc.cycjava.cycl.gke_main.replacement_tree_root(root_node), nreverse(subnodes));
        }
    }

    public static SubLObject listy_replacement_tree(final SubLObject root_node, final SubLObject tree) {
        SubLObject subnodes = NIL;
        if (NIL != list_utilities.non_empty_list_p(tree)) {
            SubLObject cdolist_list_var = gke_main.replacement_tree_children(root_node);
            SubLObject subnode = NIL;
            subnode = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                subnodes = cons(gke_main.listy_replacement_tree(subnode, tree.rest()), subnodes);
                cdolist_list_var = cdolist_list_var.rest();
                subnode = cdolist_list_var.first();
            } 
        }
        return cons(gke_main.replacement_tree_root(root_node), nreverse(subnodes));
    }

    public static final SubLObject postpone_adding_replacementP_alt(SubLObject renderer_node, SubLObject tree, SubLObject renderer_to_superiors) {
        SubLTrampolineFile.checkType(renderer_node, REPLACEMENT_TREE_P);
        {
            SubLObject postponeP = NIL;
            SubLObject renderer = com.cyc.cycjava.cycl.gke_main.replacement_tree_root(renderer_node);
            SubLObject this_term = second(renderer);
            SubLObject traceP = NIL;
            SubLObject superiors = dictionary.dictionary_lookup_without_values(renderer_to_superiors, renderer, NIL);
            SubLObject set_contents_var = set.do_set_internal(superiors);
            SubLObject basis_object = set_contents.do_set_contents_basis_object(set_contents_var);
            SubLObject state = NIL;
            for (state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); !((NIL != postponeP) || (NIL != set_contents.do_set_contents_doneP(basis_object, state))); state = set_contents.do_set_contents_update_state(state)) {
                {
                    SubLObject superior = set_contents.do_set_contents_next(basis_object, state);
                    if (NIL != set_contents.do_set_contents_element_validP(state, superior)) {
                        {
                            SubLObject foundP = NIL;
                            if (NIL == foundP) {
                                {
                                    SubLObject csome_list_var = tree;
                                    SubLObject tree_level = NIL;
                                    for (tree_level = csome_list_var.first(); !((NIL != foundP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , tree_level = csome_list_var.first()) {
                                        foundP = set.set_memberP(superior, tree_level);
                                    }
                                }
                            }
                            if (NIL == foundP) {
                                if (NIL != traceP) {
                                    format(T, $str_alt175$__Postponing__S_because__S_is_not, this_term, superior);
                                }
                                postponeP = T;
                            }
                        }
                    }
                }
            }
            return postponeP;
        }
    }

    public static SubLObject postpone_adding_replacementP(final SubLObject renderer_node, final SubLObject tree, final SubLObject renderer_to_superiors) {
        assert NIL != gke_main.replacement_tree_p(renderer_node) : "! gke_main.replacement_tree_p(renderer_node) " + ("gke_main.replacement_tree_p(renderer_node) " + "CommonSymbols.NIL != gke_main.replacement_tree_p(renderer_node) ") + renderer_node;
        SubLObject postponeP = NIL;
        final SubLObject renderer = gke_main.replacement_tree_root(renderer_node);
        final SubLObject this_term = second(renderer);
        final SubLObject traceP = NIL;
        final SubLObject superiors = dictionary.dictionary_lookup_without_values(renderer_to_superiors, renderer, NIL);
        final SubLObject set_contents_var = set.do_set_internal(superiors);
        SubLObject basis_object;
        SubLObject state;
        SubLObject superior;
        SubLObject foundP;
        SubLObject csome_list_var;
        SubLObject tree_level;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == postponeP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
            superior = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, superior)) {
                foundP = NIL;
                if (NIL == foundP) {
                    for (csome_list_var = tree, tree_level = NIL, tree_level = csome_list_var.first(); (NIL == foundP) && (NIL != csome_list_var); foundP = set.set_memberP(superior, tree_level) , csome_list_var = csome_list_var.rest() , tree_level = csome_list_var.first()) {
                    }
                }
                if (NIL == foundP) {
                    if (NIL != traceP) {
                        format(T, gke_main.$str171$__Postponing__S_because__S_is_not, this_term, superior);
                    }
                    postponeP = T;
                }
            }
        }
        return postponeP;
    }

    public static final SubLObject replacement_renderer_tree_specifications_alt(SubLObject focal_term, SubLObject mt, SubLObject problem_store) {
        {
            SubLObject query_sentence = make_existential($sym176$_COL, simplifier.disjoin(list(listS($$suggestionGenlClassOrderedBy, focal_term, $list_alt178), simplifier.conjoin(list($list_alt179, listS($$isa, focal_term, $list_alt180)), UNPROVIDED)), UNPROVIDED));
            SubLObject template = $list_alt181;
            return ask_utilities.query_template(template, query_sentence, mt, list($PROBLEM_STORE, problem_store, $INFERENCE_MODE, $MINIMAL, $ANSWER_LANGUAGE, $HL));
        }
    }

    public static SubLObject replacement_renderer_tree_specifications(final SubLObject focal_term, final SubLObject mt, final SubLObject problem_store) {
        final SubLObject query_sentence = make_existential(gke_main.$sym172$_COL, simplifier.disjoin(list(listS(gke_main.$$suggestionGenlClassOrderedBy, focal_term, gke_main.$list174), simplifier.conjoin(list(gke_main.$list175, listS(gke_main.$$isa, focal_term, gke_main.$list176)), UNPROVIDED)), UNPROVIDED));
        final SubLObject template = gke_main.$list177;
        return ask_utilities.query_template(template, query_sentence, mt, list($PROBLEM_STORE, problem_store, $INFERENCE_MODE, $MINIMAL, $ANSWER_LANGUAGE, $HL));
    }

    /**
     *
     *
     * @return listp of el-set-p
     */
    @LispMethod(comment = "@return listp of el-set-p")
    public static final SubLObject replacement_renderer_tree_conflation_preds_alt(SubLObject focal_term, SubLObject mt, SubLObject problem_store) {
        {
            SubLObject query_sentence = make_existential($sym176$_COL, simplifier.disjoin(list(simplifier.conjoin(list($list_alt187, listS($$genls, focal_term, $list_alt180)), UNPROVIDED), simplifier.conjoin(list($list_alt189, listS($$isa, focal_term, $list_alt180)), UNPROVIDED)), UNPROVIDED));
            return ask_utilities.query_variable($sym190$_SET, query_sentence, mt, list($PROBLEM_STORE, problem_store, $INFERENCE_MODE, $MINIMAL, $ANSWER_LANGUAGE, $HL));
        }
    }

    /**
     *
     *
     * @return listp of el-set-p
     */
    @LispMethod(comment = "@return listp of el-set-p")
    public static SubLObject replacement_renderer_tree_conflation_preds(final SubLObject focal_term, final SubLObject mt, final SubLObject problem_store) {
        final SubLObject query_sentence = make_existential(gke_main.$sym172$_COL, simplifier.disjoin(list(simplifier.conjoin(list(gke_main.$list183, listS(gke_main.$$genls, focal_term, gke_main.$list176)), UNPROVIDED), simplifier.conjoin(list(gke_main.$list185, listS(gke_main.$$isa, focal_term, gke_main.$list176)), UNPROVIDED)), UNPROVIDED));
        return ask_utilities.query_variable(gke_main.$sym186$_SET, query_sentence, mt, list($PROBLEM_STORE, problem_store, $INFERENCE_MODE, $MINIMAL, $ANSWER_LANGUAGE, $HL));
    }

    /**
     *
     *
     * @return DICTIONARY-P mapping renderers to sets of renderer nodes.
     */
    @LispMethod(comment = "@return DICTIONARY-P mapping renderers to sets of renderer nodes.")
    public static final SubLObject renderer_to_superiors_table_alt(SubLObject renderer_nodes, SubLObject mt, SubLObject bin_pred, SubLObject argnum, SubLObject problem_store, SubLObject table) {
        if (table == UNPROVIDED) {
            table = NIL;
        }
        if (NIL == table) {
            table = dictionary.new_dictionary(symbol_function(EQL), length(renderer_nodes));
        }
        {
            SubLObject renderer_nodes_from_terms = dictionary.new_dictionary(symbol_function(EQL), length(renderer_nodes));
            {
                SubLObject cdolist_list_var = renderer_nodes;
                SubLObject renderer_node = NIL;
                for (renderer_node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , renderer_node = cdolist_list_var.first()) {
                    dictionary.dictionary_enter(renderer_nodes_from_terms, second(com.cyc.cycjava.cycl.gke_main.replacement_tree_root(renderer_node)), renderer_node);
                }
            }
            {
                SubLObject cdolist_list_var = renderer_nodes;
                SubLObject renderer_node = NIL;
                for (renderer_node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , renderer_node = cdolist_list_var.first()) {
                    {
                        SubLObject renderer = com.cyc.cycjava.cycl.gke_main.replacement_tree_root(renderer_node);
                        SubLObject this_term = second(renderer);
                        SubLObject traceP = NIL;
                        SubLObject superiors = com.cyc.cycjava.cycl.gke_main.superiors_for_renderer_term(this_term, mt, bin_pred, argnum, problem_store);
                        SubLObject filtered_renderers = dictionary.dictionary_lookup_without_values(table, renderer, UNPROVIDED);
                        if (NIL != traceP) {
                            format(T, $str_alt191$__Filtered_renderers___S__, filtered_renderers);
                        }
                        if (NIL == set.set_p(filtered_renderers)) {
                            filtered_renderers = set.new_set(symbol_function(EQL), UNPROVIDED);
                            dictionary.dictionary_enter(table, renderer, filtered_renderers);
                        }
                        {
                            SubLObject cdolist_list_var_97 = superiors;
                            SubLObject superior = NIL;
                            for (superior = cdolist_list_var_97.first(); NIL != cdolist_list_var_97; cdolist_list_var_97 = cdolist_list_var_97.rest() , superior = cdolist_list_var_97.first()) {
                                {
                                    SubLObject renderer_node_98 = dictionary.dictionary_lookup_without_values(renderer_nodes_from_terms, superior, UNPROVIDED);
                                    if (NIL != renderer_node_98) {
                                        set.set_add(renderer_node_98, filtered_renderers);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return table;
    }

    /**
     *
     *
     * @return DICTIONARY-P mapping renderers to sets of renderer nodes.
     */
    @LispMethod(comment = "@return DICTIONARY-P mapping renderers to sets of renderer nodes.")
    public static SubLObject renderer_to_superiors_table(final SubLObject renderer_nodes, final SubLObject mt, final SubLObject bin_pred, final SubLObject argnum, final SubLObject problem_store, SubLObject table) {
        if (table == UNPROVIDED) {
            table = NIL;
        }
        if (NIL == table) {
            table = dictionary.new_dictionary(symbol_function(EQL), length(renderer_nodes));
        }
        final SubLObject renderer_nodes_from_terms = dictionary.new_dictionary(symbol_function(EQL), length(renderer_nodes));
        SubLObject cdolist_list_var = renderer_nodes;
        SubLObject renderer_node = NIL;
        renderer_node = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            dictionary.dictionary_enter(renderer_nodes_from_terms, second(gke_main.replacement_tree_root(renderer_node)), renderer_node);
            cdolist_list_var = cdolist_list_var.rest();
            renderer_node = cdolist_list_var.first();
        } 
        cdolist_list_var = renderer_nodes;
        renderer_node = NIL;
        renderer_node = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject renderer = gke_main.replacement_tree_root(renderer_node);
            final SubLObject this_term = second(renderer);
            final SubLObject traceP = NIL;
            final SubLObject superiors = gke_main.superiors_for_renderer_term(this_term, mt, bin_pred, argnum, problem_store);
            SubLObject filtered_renderers = dictionary.dictionary_lookup_without_values(table, renderer, UNPROVIDED);
            if (NIL != traceP) {
                format(T, gke_main.$str187$__Filtered_renderers___S__, filtered_renderers);
            }
            if (NIL == set.set_p(filtered_renderers)) {
                filtered_renderers = set.new_set(symbol_function(EQL), UNPROVIDED);
                dictionary.dictionary_enter(table, renderer, filtered_renderers);
            }
            SubLObject cdolist_list_var_$59 = superiors;
            SubLObject superior = NIL;
            superior = cdolist_list_var_$59.first();
            while (NIL != cdolist_list_var_$59) {
                final SubLObject renderer_node_$60 = dictionary.dictionary_lookup_without_values(renderer_nodes_from_terms, superior, UNPROVIDED);
                if (NIL != renderer_node_$60) {
                    set.set_add(renderer_node_$60, filtered_renderers);
                }
                cdolist_list_var_$59 = cdolist_list_var_$59.rest();
                superior = cdolist_list_var_$59.first();
            } 
            cdolist_list_var = cdolist_list_var.rest();
            renderer_node = cdolist_list_var.first();
        } 
        return table;
    }

    public static final SubLObject superiors_for_renderer_term_alt(SubLObject this_term, SubLObject mt, SubLObject bin_pred, SubLObject argnum, SubLObject problem_store) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject superiors = NIL;
                if ((NIL != indexed_term_p(this_term)) && bin_pred.eql($$genls)) {
                    {
                        SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt_relevance_macros.determine_inference_mt_relevance_el_spec(mt));
                        {
                            SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                            SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                {
                                    SubLObject pcase_var = argnum;
                                    if (pcase_var.eql(ONE_INTEGER)) {
                                        superiors = genls.all_specs(this_term, UNPROVIDED, UNPROVIDED);
                                    } else {
                                        if (pcase_var.eql(TWO_INTEGER)) {
                                            superiors = genls.all_genls(this_term, UNPROVIDED, UNPROVIDED);
                                        }
                                    }
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                            }
                        }
                    }
                } else {
                    {
                        SubLObject this_argnum = subtract(THREE_INTEGER, argnum);
                        SubLObject variable = $X;
                        SubLObject query_sentence = replace_formula_arg(this_argnum, this_term, make_binary_formula(bin_pred, variable, variable));
                        SubLObject v_properties = list($PROBLEM_STORE, problem_store, $ANSWER_LANGUAGE, $HL, $INFERENCE_MODE, $MINIMAL);
                        if (NIL == $use_tva_for_suggestionsP$.getGlobalValue()) {
                            v_properties = putf(v_properties, $ALLOWED_MODULES, $list_alt195);
                        }
                        superiors = ask_utilities.query_variable(variable, query_sentence, mt, v_properties);
                    }
                }
                return delete(this_term, superiors, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
        }
    }

    public static SubLObject superiors_for_renderer_term(final SubLObject this_term, final SubLObject mt, final SubLObject bin_pred, final SubLObject argnum, final SubLObject problem_store) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject superiors = NIL;
        if ((NIL != indexed_term_p(this_term)) && bin_pred.eql(gke_main.$$genls)) {
            final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt_relevance_macros.determine_inference_mt_relevance_el_spec(mt));
            final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                if (argnum.eql(ONE_INTEGER)) {
                    superiors = genls.all_specs(this_term, UNPROVIDED, UNPROVIDED);
                } else
                    if (argnum.eql(TWO_INTEGER)) {
                        superiors = genls.all_genls(this_term, UNPROVIDED, UNPROVIDED);
                    }

            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
            }
        } else {
            final SubLObject this_argnum = subtract(THREE_INTEGER, argnum);
            final SubLObject variable = $X;
            final SubLObject query_sentence = replace_formula_arg(this_argnum, this_term, make_binary_formula(bin_pred, variable, variable));
            SubLObject v_properties = list($PROBLEM_STORE, problem_store, $ANSWER_LANGUAGE, $HL, $INFERENCE_MODE, $MINIMAL);
            if (NIL == gke_main.$use_tva_for_suggestionsP$.getGlobalValue()) {
                v_properties = putf(v_properties, $ALLOWED_MODULES, gke_main.$list191);
            }
            superiors = ask_utilities.query_variable(variable, query_sentence, mt, v_properties);
        }
        return delete(this_term, superiors, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    /**
     *
     *
     * @return LISTP of triples of the form
    - string-paraphrase of EL variable
    - javalist-paraphrase of the variable's value
    - CycL term to which the variable is bound
    one triple for each binding for BINDING-LIST
     */
    @LispMethod(comment = "@return LISTP of triples of the form\r\n- string-paraphrase of EL variable\r\n- javalist-paraphrase of the variable\'s value\r\n- CycL term to which the variable is bound\r\none triple for each binding for BINDING-LIST")
    public static final SubLObject gke_subst_nl_for_inference_answer_alt(SubLObject inference_answer) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject binding_list = inference_kernel.inference_answer_el_bindings(inference_answer);
                SubLObject result = NIL;
                thread.resetMultipleValues();
                {
                    SubLObject _prev_bind_0 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
                    try {
                        pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                        {
                            SubLObject reuseP = thread.secondMultipleValue();
                            thread.resetMultipleValues();
                            try {
                                thread.resetMultipleValues();
                                {
                                    SubLObject _prev_bind_0_99 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                                    try {
                                        pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                                        {
                                            SubLObject new_or_reused = thread.secondMultipleValue();
                                            thread.resetMultipleValues();
                                            {
                                                SubLObject _prev_bind_0_100 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                                                try {
                                                    pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                                                    {
                                                        SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                                                        {
                                                            SubLObject _prev_bind_0_101 = memoization_state.$memoization_state$.currentBinding(thread);
                                                            try {
                                                                memoization_state.$memoization_state$.bind(local_state, thread);
                                                                {
                                                                    SubLObject original_memoization_process = NIL;
                                                                    if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
                                                                        original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
                                                                        {
                                                                            SubLObject current_proc = current_process();
                                                                            if (NIL == original_memoization_process) {
                                                                                memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
                                                                            } else {
                                                                                if (original_memoization_process != current_proc) {
                                                                                    Errors.error($str_alt13$Invalid_attempt_to_reuse_memoizat);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    try {
                                                                        {
                                                                            SubLObject _prev_bind_0_102 = pph_vars.$pph_inference_answer$.currentBinding(thread);
                                                                            SubLObject _prev_bind_1 = pph_vars.$pph_hypothetical_vars$.currentBinding(thread);
                                                                            SubLObject _prev_bind_2 = pph_vars.$pph_handle_hypotheticalsP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_3 = pph_vars.$pph_use_bulleted_listsP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_4 = pph_vars.$pph_handle_hypotheticalsP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_5 = pph_vars.$pph_repositioned_proofs$.currentBinding(thread);
                                                                            SubLObject _prev_bind_6 = pph_vars.$pph_displayed_proofs$.currentBinding(thread);
                                                                            SubLObject _prev_bind_7 = pph_vars.$pph_justified_proofs$.currentBinding(thread);
                                                                            SubLObject _prev_bind_8 = pph_vars.$pph_proof_depth$.currentBinding(thread);
                                                                            SubLObject _prev_bind_9 = pph_vars.$pph_displayed_supports$.currentBinding(thread);
                                                                            try {
                                                                                pph_vars.$pph_inference_answer$.bind(inference_answer, thread);
                                                                                pph_vars.$pph_hypothetical_vars$.bind(inference_datastructures_inference.inference_hypothetical_bindings(inference_datastructures_inference.inference_answer_inference(inference_answer)), thread);
                                                                                pph_vars.$pph_handle_hypotheticalsP$.bind(T, thread);
                                                                                pph_vars.$pph_use_bulleted_listsP$.bind(T, thread);
                                                                                pph_vars.$pph_handle_hypotheticalsP$.bind(T, thread);
                                                                                pph_vars.$pph_repositioned_proofs$.bind(NIL, thread);
                                                                                pph_vars.$pph_displayed_proofs$.bind(pph_proof.find_or_create_pph_displayed_proof_stack(), thread);
                                                                                pph_vars.$pph_justified_proofs$.bind(pph_proof.find_or_create_pph_justified_proof_set(), thread);
                                                                                pph_vars.$pph_proof_depth$.bind(ZERO_INTEGER, thread);
                                                                                pph_vars.$pph_displayed_supports$.bind(NIL, thread);
                                                                                thread.resetMultipleValues();
                                                                                {
                                                                                    SubLObject link_function = pph_macros.pph_justification_html_function_and_target();
                                                                                    SubLObject html_target = thread.secondMultipleValue();
                                                                                    thread.resetMultipleValues();
                                                                                    {
                                                                                        SubLObject _prev_bind_0_103 = pph_vars.$constant_link_function$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_1_104 = pph_vars.$html_generation_target$.currentBinding(thread);
                                                                                        try {
                                                                                            pph_vars.$constant_link_function$.bind(NIL != link_function ? ((SubLObject) (link_function)) : pph_vars.$constant_link_function$.getDynamicValue(thread), thread);
                                                                                            pph_vars.$html_generation_target$.bind(NIL != html_target ? ((SubLObject) (html_target)) : pph_vars.$html_generation_target$.getDynamicValue(thread), thread);
                                                                                            {
                                                                                                SubLObject cdolist_list_var = binding_list;
                                                                                                SubLObject binding = NIL;
                                                                                                for (binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , binding = cdolist_list_var.first()) {
                                                                                                    result = cons(com.cyc.cycjava.cycl.gke_main.gke_subst_nl_for_binding(binding), result);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            pph_vars.$html_generation_target$.rebind(_prev_bind_1_104, thread);
                                                                                            pph_vars.$constant_link_function$.rebind(_prev_bind_0_103, thread);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                pph_vars.$pph_displayed_supports$.rebind(_prev_bind_9, thread);
                                                                                pph_vars.$pph_proof_depth$.rebind(_prev_bind_8, thread);
                                                                                pph_vars.$pph_justified_proofs$.rebind(_prev_bind_7, thread);
                                                                                pph_vars.$pph_displayed_proofs$.rebind(_prev_bind_6, thread);
                                                                                pph_vars.$pph_repositioned_proofs$.rebind(_prev_bind_5, thread);
                                                                                pph_vars.$pph_handle_hypotheticalsP$.rebind(_prev_bind_4, thread);
                                                                                pph_vars.$pph_use_bulleted_listsP$.rebind(_prev_bind_3, thread);
                                                                                pph_vars.$pph_handle_hypotheticalsP$.rebind(_prev_bind_2, thread);
                                                                                pph_vars.$pph_hypothetical_vars$.rebind(_prev_bind_1, thread);
                                                                                pph_vars.$pph_inference_answer$.rebind(_prev_bind_0_102, thread);
                                                                            }
                                                                        }
                                                                    } finally {
                                                                        {
                                                                            SubLObject _prev_bind_0_105 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                            try {
                                                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                                                if ((NIL != local_state) && (NIL == original_memoization_process)) {
                                                                                    memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
                                                                                }
                                                                            } finally {
                                                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_105, thread);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            } finally {
                                                                memoization_state.$memoization_state$.rebind(_prev_bind_0_101, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_100, thread);
                                                }
                                            }
                                            if ((new_or_reused == $NEW) && (NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread)))) {
                                                memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                                            }
                                        }
                                    } finally {
                                        pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_99, thread);
                                    }
                                }
                            } finally {
                                {
                                    SubLObject _prev_bind_0_106 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                        if (NIL == reuseP) {
                                            pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                                        }
                                    } finally {
                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_106, thread);
                                    }
                                }
                            }
                        }
                    } finally {
                        pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0, thread);
                    }
                }
                return nreverse(result);
            }
        }
    }

    /**
     *
     *
     * @return LISTP of triples of the form
    - string-paraphrase of EL variable
    - javalist-paraphrase of the variable's value
    - CycL term to which the variable is bound
    one triple for each binding for BINDING-LIST
     */
    @LispMethod(comment = "@return LISTP of triples of the form\r\n- string-paraphrase of EL variable\r\n- javalist-paraphrase of the variable\'s value\r\n- CycL term to which the variable is bound\r\none triple for each binding for BINDING-LIST")
    public static SubLObject gke_subst_nl_for_inference_answer(final SubLObject inference_answer) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject binding_list = inference_kernel.inference_answer_el_bindings(inference_answer);
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
        try {
            pph_macros.$free_pph_problem_store_pointers$.bind(NIL, thread);
            thread.resetMultipleValues();
            final SubLObject _prev_bind_0_$61 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
            try {
                pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                final SubLObject reuseP = thread.secondMultipleValue();
                thread.resetMultipleValues();
                try {
                    thread.resetMultipleValues();
                    final SubLObject _prev_bind_0_$62 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                    try {
                        pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                        final SubLObject new_or_reused = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$63 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                        try {
                            pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                            final SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                            final SubLObject _prev_bind_0_$64 = memoization_state.$memoization_state$.currentBinding(thread);
                            try {
                                memoization_state.$memoization_state$.bind(local_state, thread);
                                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                                try {
                                    final SubLObject _prev_bind_0_$65 = pph_vars.$pph_inference_answer$.currentBinding(thread);
                                    final SubLObject _prev_bind_2 = pph_vars.$pph_hypothetical_vars$.currentBinding(thread);
                                    final SubLObject _prev_bind_3 = pph_vars.$pph_handle_hypotheticalsP$.currentBinding(thread);
                                    final SubLObject _prev_bind_4 = pph_vars.$pph_domain_mt$.currentBinding(thread);
                                    final SubLObject _prev_bind_5 = pph_vars.$pph_use_bulleted_listsP$.currentBinding(thread);
                                    final SubLObject _prev_bind_6 = pph_vars.$pph_repositioned_proofs$.currentBinding(thread);
                                    final SubLObject _prev_bind_7 = pph_vars.$pph_displayed_proofs$.currentBinding(thread);
                                    final SubLObject _prev_bind_8 = pph_vars.$pph_justified_proofs$.currentBinding(thread);
                                    final SubLObject _prev_bind_9 = pph_vars.$pph_proof_depth$.currentBinding(thread);
                                    final SubLObject _prev_bind_10 = pph_vars.$pph_displayed_supports$.currentBinding(thread);
                                    try {
                                        pph_vars.$pph_inference_answer$.bind(inference_answer, thread);
                                        pph_vars.$pph_hypothetical_vars$.bind(inference_hypothetical_bindings(inference_answer_inference(inference_answer)), thread);
                                        pph_vars.$pph_handle_hypotheticalsP$.bind(T, thread);
                                        pph_vars.$pph_domain_mt$.bind(pph_methods.pph_enhanced_domain_mt(pph_proof.pph_get_inference_mt(inference_answer_inference(inference_answer)), UNPROVIDED), thread);
                                        pph_vars.$pph_use_bulleted_listsP$.bind(T, thread);
                                        pph_vars.$pph_repositioned_proofs$.bind(NIL, thread);
                                        pph_vars.$pph_displayed_proofs$.bind(pph_proof.find_or_create_pph_displayed_proof_stack(), thread);
                                        pph_vars.$pph_justified_proofs$.bind(pph_proof.find_or_create_pph_justified_proof_set(), thread);
                                        pph_vars.$pph_proof_depth$.bind(ZERO_INTEGER, thread);
                                        pph_vars.$pph_displayed_supports$.bind(NIL, thread);
                                        thread.resetMultipleValues();
                                        final SubLObject link_function = pph_macros.pph_justification_html_function_and_target();
                                        final SubLObject html_target = thread.secondMultipleValue();
                                        thread.resetMultipleValues();
                                        final SubLObject _prev_bind_0_$66 = pph_vars.$constant_link_function$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$67 = pph_vars.$html_generation_target$.currentBinding(thread);
                                        try {
                                            pph_vars.$constant_link_function$.bind(NIL != link_function ? link_function : pph_vars.$constant_link_function$.getDynamicValue(thread), thread);
                                            pph_vars.$html_generation_target$.bind(NIL != html_target ? html_target : pph_vars.$html_generation_target$.getDynamicValue(thread), thread);
                                            SubLObject cdolist_list_var = binding_list;
                                            SubLObject binding = NIL;
                                            binding = cdolist_list_var.first();
                                            while (NIL != cdolist_list_var) {
                                                result = cons(gke_main.gke_subst_nl_for_binding(binding), result);
                                                cdolist_list_var = cdolist_list_var.rest();
                                                binding = cdolist_list_var.first();
                                            } 
                                        } finally {
                                            pph_vars.$html_generation_target$.rebind(_prev_bind_1_$67, thread);
                                            pph_vars.$constant_link_function$.rebind(_prev_bind_0_$66, thread);
                                        }
                                    } finally {
                                        pph_vars.$pph_displayed_supports$.rebind(_prev_bind_10, thread);
                                        pph_vars.$pph_proof_depth$.rebind(_prev_bind_9, thread);
                                        pph_vars.$pph_justified_proofs$.rebind(_prev_bind_8, thread);
                                        pph_vars.$pph_displayed_proofs$.rebind(_prev_bind_7, thread);
                                        pph_vars.$pph_repositioned_proofs$.rebind(_prev_bind_6, thread);
                                        pph_vars.$pph_use_bulleted_listsP$.rebind(_prev_bind_5, thread);
                                        pph_vars.$pph_domain_mt$.rebind(_prev_bind_4, thread);
                                        pph_vars.$pph_handle_hypotheticalsP$.rebind(_prev_bind_3, thread);
                                        pph_vars.$pph_hypothetical_vars$.rebind(_prev_bind_2, thread);
                                        pph_vars.$pph_inference_answer$.rebind(_prev_bind_0_$65, thread);
                                    }
                                } finally {
                                    final SubLObject _prev_bind_0_$67 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                        final SubLObject _values = getValuesAsVector();
                                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                        restoreValuesFromVector(_values);
                                    } finally {
                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$67, thread);
                                    }
                                }
                            } finally {
                                memoization_state.$memoization_state$.rebind(_prev_bind_0_$64, thread);
                            }
                        } finally {
                            pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$63, thread);
                        }
                        if ((new_or_reused == $NEW) && (NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread)))) {
                            memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                        }
                    } finally {
                        pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$62, thread);
                    }
                } finally {
                    final SubLObject _prev_bind_0_$68 = $is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        $is_thread_performing_cleanupP$.bind(T, thread);
                        final SubLObject _values2 = getValuesAsVector();
                        if (NIL == reuseP) {
                            pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                        }
                        restoreValuesFromVector(_values2);
                    } finally {
                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$68, thread);
                    }
                }
            } finally {
                pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$61, thread);
            }
        } finally {
            pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_0, thread);
        }
        return nreverse(result);
    }

    public static final SubLObject gke_subst_nl_for_binding_alt(SubLObject binding) {
        {
            SubLObject datum = binding;
            SubLObject current = datum;
            SubLObject variable = NIL;
            SubLObject value = NIL;
            destructuring_bind_must_consp(current, datum, $list_alt196);
            variable = current.first();
            current = current.rest();
            value = current;
            {
                SubLObject java_phrase = list(pph_main.generate_phrase_for_java(value, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), value);
                SubLObject variable_string = com.cyc.cycjava.cycl.gke_main.variable_to_nl_string(variable);
                return cons(variable_string, java_phrase);
            }
        }
    }

    public static SubLObject gke_subst_nl_for_binding(final SubLObject binding) {
        SubLObject variable = NIL;
        SubLObject value = NIL;
        destructuring_bind_must_consp(binding, binding, gke_main.$list192);
        variable = binding.first();
        final SubLObject current = value = binding.rest();
        final SubLObject java_phrase = list(pph_main.generate_phrase_for_java(value, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), value);
        final SubLObject variable_string = gke_main.variable_to_nl_string(variable);
        return cons(variable_string, java_phrase);
    }

    /**
     * Modeled on @xref gke-subst-nl-for-binding-list
     */
    @LispMethod(comment = "Modeled on @xref gke-subst-nl-for-binding-list")
    public static final SubLObject el_binding_list_to_gke_binding_list_alt(SubLObject el_binding_list, SubLObject inference_answer) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL != list_utilities.empty_list_p(el_binding_list)) {
                el_binding_list = $list_alt197;
            }
            {
                SubLObject result = NIL;
                thread.resetMultipleValues();
                {
                    SubLObject _prev_bind_0 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
                    try {
                        pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                        {
                            SubLObject reuseP = thread.secondMultipleValue();
                            thread.resetMultipleValues();
                            try {
                                thread.resetMultipleValues();
                                {
                                    SubLObject _prev_bind_0_107 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                                    try {
                                        pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                                        {
                                            SubLObject new_or_reused = thread.secondMultipleValue();
                                            thread.resetMultipleValues();
                                            {
                                                SubLObject _prev_bind_0_108 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                                                try {
                                                    pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                                                    {
                                                        SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                                                        {
                                                            SubLObject _prev_bind_0_109 = memoization_state.$memoization_state$.currentBinding(thread);
                                                            try {
                                                                memoization_state.$memoization_state$.bind(local_state, thread);
                                                                {
                                                                    SubLObject original_memoization_process = NIL;
                                                                    if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
                                                                        original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
                                                                        {
                                                                            SubLObject current_proc = current_process();
                                                                            if (NIL == original_memoization_process) {
                                                                                memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
                                                                            } else {
                                                                                if (original_memoization_process != current_proc) {
                                                                                    Errors.error($str_alt13$Invalid_attempt_to_reuse_memoizat);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    try {
                                                                        {
                                                                            SubLObject _prev_bind_0_110 = pph_vars.$pph_inference_answer$.currentBinding(thread);
                                                                            SubLObject _prev_bind_1 = pph_vars.$pph_hypothetical_vars$.currentBinding(thread);
                                                                            SubLObject _prev_bind_2 = pph_vars.$pph_handle_hypotheticalsP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_3 = pph_vars.$pph_use_bulleted_listsP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_4 = pph_vars.$pph_handle_hypotheticalsP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_5 = pph_vars.$pph_repositioned_proofs$.currentBinding(thread);
                                                                            SubLObject _prev_bind_6 = pph_vars.$pph_displayed_proofs$.currentBinding(thread);
                                                                            SubLObject _prev_bind_7 = pph_vars.$pph_justified_proofs$.currentBinding(thread);
                                                                            SubLObject _prev_bind_8 = pph_vars.$pph_proof_depth$.currentBinding(thread);
                                                                            SubLObject _prev_bind_9 = pph_vars.$pph_displayed_supports$.currentBinding(thread);
                                                                            try {
                                                                                pph_vars.$pph_inference_answer$.bind(inference_answer, thread);
                                                                                pph_vars.$pph_hypothetical_vars$.bind(inference_datastructures_inference.inference_hypothetical_bindings(inference_datastructures_inference.inference_answer_inference(inference_answer)), thread);
                                                                                pph_vars.$pph_handle_hypotheticalsP$.bind(T, thread);
                                                                                pph_vars.$pph_use_bulleted_listsP$.bind(T, thread);
                                                                                pph_vars.$pph_handle_hypotheticalsP$.bind(T, thread);
                                                                                pph_vars.$pph_repositioned_proofs$.bind(NIL, thread);
                                                                                pph_vars.$pph_displayed_proofs$.bind(pph_proof.find_or_create_pph_displayed_proof_stack(), thread);
                                                                                pph_vars.$pph_justified_proofs$.bind(pph_proof.find_or_create_pph_justified_proof_set(), thread);
                                                                                pph_vars.$pph_proof_depth$.bind(ZERO_INTEGER, thread);
                                                                                pph_vars.$pph_displayed_supports$.bind(NIL, thread);
                                                                                thread.resetMultipleValues();
                                                                                {
                                                                                    SubLObject link_function = pph_macros.pph_justification_html_function_and_target();
                                                                                    SubLObject html_target = thread.secondMultipleValue();
                                                                                    thread.resetMultipleValues();
                                                                                    {
                                                                                        SubLObject _prev_bind_0_111 = pph_vars.$constant_link_function$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_1_112 = pph_vars.$html_generation_target$.currentBinding(thread);
                                                                                        try {
                                                                                            pph_vars.$constant_link_function$.bind(NIL != link_function ? ((SubLObject) (link_function)) : pph_vars.$constant_link_function$.getDynamicValue(thread), thread);
                                                                                            pph_vars.$html_generation_target$.bind(NIL != html_target ? ((SubLObject) (html_target)) : pph_vars.$html_generation_target$.getDynamicValue(thread), thread);
                                                                                            {
                                                                                                SubLObject cdolist_list_var = el_binding_list;
                                                                                                SubLObject el_binding = NIL;
                                                                                                for (el_binding = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , el_binding = cdolist_list_var.first()) {
                                                                                                    result = cons(com.cyc.cycjava.cycl.gke_main.el_binding_to_gke_binding(el_binding), result);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            pph_vars.$html_generation_target$.rebind(_prev_bind_1_112, thread);
                                                                                            pph_vars.$constant_link_function$.rebind(_prev_bind_0_111, thread);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                pph_vars.$pph_displayed_supports$.rebind(_prev_bind_9, thread);
                                                                                pph_vars.$pph_proof_depth$.rebind(_prev_bind_8, thread);
                                                                                pph_vars.$pph_justified_proofs$.rebind(_prev_bind_7, thread);
                                                                                pph_vars.$pph_displayed_proofs$.rebind(_prev_bind_6, thread);
                                                                                pph_vars.$pph_repositioned_proofs$.rebind(_prev_bind_5, thread);
                                                                                pph_vars.$pph_handle_hypotheticalsP$.rebind(_prev_bind_4, thread);
                                                                                pph_vars.$pph_use_bulleted_listsP$.rebind(_prev_bind_3, thread);
                                                                                pph_vars.$pph_handle_hypotheticalsP$.rebind(_prev_bind_2, thread);
                                                                                pph_vars.$pph_hypothetical_vars$.rebind(_prev_bind_1, thread);
                                                                                pph_vars.$pph_inference_answer$.rebind(_prev_bind_0_110, thread);
                                                                            }
                                                                        }
                                                                    } finally {
                                                                        {
                                                                            SubLObject _prev_bind_0_113 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                            try {
                                                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                                                if ((NIL != local_state) && (NIL == original_memoization_process)) {
                                                                                    memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
                                                                                }
                                                                            } finally {
                                                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_113, thread);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            } finally {
                                                                memoization_state.$memoization_state$.rebind(_prev_bind_0_109, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_108, thread);
                                                }
                                            }
                                            if ((new_or_reused == $NEW) && (NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread)))) {
                                                memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                                            }
                                        }
                                    } finally {
                                        pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_107, thread);
                                    }
                                }
                            } finally {
                                {
                                    SubLObject _prev_bind_0_114 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                        if (NIL == reuseP) {
                                            pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                                        }
                                    } finally {
                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_114, thread);
                                    }
                                }
                            }
                        }
                    } finally {
                        pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0, thread);
                    }
                }
                return nreverse(result);
            }
        }
    }

    @LispMethod(comment = "Modeled on @xref gke-subst-nl-for-binding-list")
    public static SubLObject el_binding_list_to_gke_binding_list(SubLObject el_binding_list, final SubLObject inference_answer) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != list_utilities.empty_list_p(el_binding_list)) {
            el_binding_list = gke_main.$list193;
        }
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
        try {
            pph_macros.$free_pph_problem_store_pointers$.bind(NIL, thread);
            thread.resetMultipleValues();
            final SubLObject _prev_bind_0_$70 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
            try {
                pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                final SubLObject reuseP = thread.secondMultipleValue();
                thread.resetMultipleValues();
                try {
                    thread.resetMultipleValues();
                    final SubLObject _prev_bind_0_$71 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                    try {
                        pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                        final SubLObject new_or_reused = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$72 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                        try {
                            pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                            final SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                            final SubLObject _prev_bind_0_$73 = memoization_state.$memoization_state$.currentBinding(thread);
                            try {
                                memoization_state.$memoization_state$.bind(local_state, thread);
                                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                                try {
                                    final SubLObject _prev_bind_0_$74 = pph_vars.$pph_inference_answer$.currentBinding(thread);
                                    final SubLObject _prev_bind_2 = pph_vars.$pph_hypothetical_vars$.currentBinding(thread);
                                    final SubLObject _prev_bind_3 = pph_vars.$pph_handle_hypotheticalsP$.currentBinding(thread);
                                    final SubLObject _prev_bind_4 = pph_vars.$pph_domain_mt$.currentBinding(thread);
                                    final SubLObject _prev_bind_5 = pph_vars.$pph_use_bulleted_listsP$.currentBinding(thread);
                                    final SubLObject _prev_bind_6 = pph_vars.$pph_repositioned_proofs$.currentBinding(thread);
                                    final SubLObject _prev_bind_7 = pph_vars.$pph_displayed_proofs$.currentBinding(thread);
                                    final SubLObject _prev_bind_8 = pph_vars.$pph_justified_proofs$.currentBinding(thread);
                                    final SubLObject _prev_bind_9 = pph_vars.$pph_proof_depth$.currentBinding(thread);
                                    final SubLObject _prev_bind_10 = pph_vars.$pph_displayed_supports$.currentBinding(thread);
                                    try {
                                        pph_vars.$pph_inference_answer$.bind(inference_answer, thread);
                                        pph_vars.$pph_hypothetical_vars$.bind(inference_hypothetical_bindings(inference_answer_inference(inference_answer)), thread);
                                        pph_vars.$pph_handle_hypotheticalsP$.bind(T, thread);
                                        pph_vars.$pph_domain_mt$.bind(pph_methods.pph_enhanced_domain_mt(pph_proof.pph_get_inference_mt(inference_answer_inference(inference_answer)), UNPROVIDED), thread);
                                        pph_vars.$pph_use_bulleted_listsP$.bind(T, thread);
                                        pph_vars.$pph_repositioned_proofs$.bind(NIL, thread);
                                        pph_vars.$pph_displayed_proofs$.bind(pph_proof.find_or_create_pph_displayed_proof_stack(), thread);
                                        pph_vars.$pph_justified_proofs$.bind(pph_proof.find_or_create_pph_justified_proof_set(), thread);
                                        pph_vars.$pph_proof_depth$.bind(ZERO_INTEGER, thread);
                                        pph_vars.$pph_displayed_supports$.bind(NIL, thread);
                                        thread.resetMultipleValues();
                                        final SubLObject link_function = pph_macros.pph_justification_html_function_and_target();
                                        final SubLObject html_target = thread.secondMultipleValue();
                                        thread.resetMultipleValues();
                                        final SubLObject _prev_bind_0_$75 = pph_vars.$constant_link_function$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$76 = pph_vars.$html_generation_target$.currentBinding(thread);
                                        try {
                                            pph_vars.$constant_link_function$.bind(NIL != link_function ? link_function : pph_vars.$constant_link_function$.getDynamicValue(thread), thread);
                                            pph_vars.$html_generation_target$.bind(NIL != html_target ? html_target : pph_vars.$html_generation_target$.getDynamicValue(thread), thread);
                                            SubLObject cdolist_list_var = el_binding_list;
                                            SubLObject el_binding = NIL;
                                            el_binding = cdolist_list_var.first();
                                            while (NIL != cdolist_list_var) {
                                                result = cons(gke_main.el_binding_to_gke_binding(el_binding), result);
                                                cdolist_list_var = cdolist_list_var.rest();
                                                el_binding = cdolist_list_var.first();
                                            } 
                                        } finally {
                                            pph_vars.$html_generation_target$.rebind(_prev_bind_1_$76, thread);
                                            pph_vars.$constant_link_function$.rebind(_prev_bind_0_$75, thread);
                                        }
                                    } finally {
                                        pph_vars.$pph_displayed_supports$.rebind(_prev_bind_10, thread);
                                        pph_vars.$pph_proof_depth$.rebind(_prev_bind_9, thread);
                                        pph_vars.$pph_justified_proofs$.rebind(_prev_bind_8, thread);
                                        pph_vars.$pph_displayed_proofs$.rebind(_prev_bind_7, thread);
                                        pph_vars.$pph_repositioned_proofs$.rebind(_prev_bind_6, thread);
                                        pph_vars.$pph_use_bulleted_listsP$.rebind(_prev_bind_5, thread);
                                        pph_vars.$pph_domain_mt$.rebind(_prev_bind_4, thread);
                                        pph_vars.$pph_handle_hypotheticalsP$.rebind(_prev_bind_3, thread);
                                        pph_vars.$pph_hypothetical_vars$.rebind(_prev_bind_2, thread);
                                        pph_vars.$pph_inference_answer$.rebind(_prev_bind_0_$74, thread);
                                    }
                                } finally {
                                    final SubLObject _prev_bind_0_$76 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                        final SubLObject _values = getValuesAsVector();
                                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                        restoreValuesFromVector(_values);
                                    } finally {
                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$76, thread);
                                    }
                                }
                            } finally {
                                memoization_state.$memoization_state$.rebind(_prev_bind_0_$73, thread);
                            }
                        } finally {
                            pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$72, thread);
                        }
                        if ((new_or_reused == $NEW) && (NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread)))) {
                            memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                        }
                    } finally {
                        pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$71, thread);
                    }
                } finally {
                    final SubLObject _prev_bind_0_$77 = $is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        $is_thread_performing_cleanupP$.bind(T, thread);
                        final SubLObject _values2 = getValuesAsVector();
                        if (NIL == reuseP) {
                            pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                        }
                        restoreValuesFromVector(_values2);
                    } finally {
                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$77, thread);
                    }
                }
            } finally {
                pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$70, thread);
            }
        } finally {
            pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_0, thread);
        }
        return nreverse(result);
    }/**
     * Modeled on @xref gke-subst-nl-for-binding-list
     */


    /**
     * Modeled on @xref gke-subst-nl-for-binding
     */
    @LispMethod(comment = "Modeled on @xref gke-subst-nl-for-binding")
    public static final SubLObject el_binding_to_gke_binding_alt(SubLObject el_binding) {
        {
            SubLObject datum = el_binding;
            SubLObject current = datum;
            SubLObject variable = NIL;
            SubLObject value = NIL;
            destructuring_bind_must_consp(current, datum, $list_alt196);
            variable = current.first();
            current = current.rest();
            value = current;
            {
                SubLObject variable_string = com.cyc.cycjava.cycl.gke_main.variable_to_nl_string(variable);
                SubLObject pph_result = pph_main.generate_phrase_for_java(value, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                SubLObject java_phrase = (NIL != pph_utilities.pph_javalist_p(pph_result)) ? ((SubLObject) (pph_utilities.possibly_optimize_pph_javalist_for_alphabetization(pph_result))) : NIL;
                SubLObject offer_fact_sheetP = fact_sheets.term_ok_for_fact_sheet_p(value, UNPROVIDED);
                return list(variable_string, java_phrase, value, offer_fact_sheetP);
            }
        }
    }

    @LispMethod(comment = "Modeled on @xref gke-subst-nl-for-binding")
    public static SubLObject el_binding_to_gke_binding(final SubLObject el_binding) {
        SubLObject variable = NIL;
        SubLObject value = NIL;
        destructuring_bind_must_consp(el_binding, el_binding, gke_main.$list192);
        variable = el_binding.first();
        final SubLObject current = value = el_binding.rest();
        final SubLObject variable_string = gke_main.variable_to_nl_string(variable);
        final SubLObject pph_result = pph_main.generate_phrase_for_java(value, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject java_phrase = (NIL != pph_utilities.pph_javalist_p(pph_result)) ? pph_utilities.possibly_optimize_pph_javalist_for_alphabetization(pph_result) : NIL;
        final SubLObject offer_fact_sheetP = fact_sheets.term_ok_for_fact_sheet_p(value, UNPROVIDED);
        return list(variable_string, java_phrase, value, offer_fact_sheetP);
    }/**
     * Modeled on @xref gke-subst-nl-for-binding
     */


    public static final SubLObject variable_to_nl_string_alt(SubLObject variable) {
        {
            SubLObject variable_string = string_utilities.substring(Strings.string_downcase(string_utilities.to_string(variable), UNPROVIDED, UNPROVIDED), ONE_INTEGER, UNPROVIDED);
            variable_string = string_utilities.string_substitute($str_alt198$_, $str_alt199$_, variable_string, UNPROVIDED);
            return pph_utilities.add_title_capitalization(variable_string);
        }
    }

    public static SubLObject variable_to_nl_string(final SubLObject variable) {
        SubLObject variable_string = string_utilities.substring(Strings.string_downcase(string_utilities.to_string(variable), UNPROVIDED, UNPROVIDED), ONE_INTEGER, UNPROVIDED);
        variable_string = string_utilities.string_substitute(gke_main.$$$_, gke_main.$str195$_, variable_string, UNPROVIDED);
        return pph_utilities.add_title_capitalization(variable_string);
    }

    /**
     * Setup a query, and immediately return the query identifiers.  A separate java
     * thread will start up the query and check up on it for new results.
     */
    @LispMethod(comment = "Setup a query, and immediately return the query identifiers.  A separate java\r\nthread will start up the query and check up on it for new results.\nSetup a query, and immediately return the query identifiers.  A separate java\nthread will start up the query and check up on it for new results.")
    public static final SubLObject gke_start_continuable_query_alt(SubLObject sentence, SubLObject mt, SubLObject v_properties) {
        if (v_properties == UNPROVIDED) {
            v_properties = NIL;
        }
        SubLTrampolineFile.checkType(sentence, EL_FORMULA_P);
        SubLTrampolineFile.checkType(mt, POSSIBLY_MT_P);
        SubLTrampolineFile.checkType(v_properties, QUERY_PROPERTIES_P);
        {
            SubLObject optimized_sentence = optimize_el_formula_variable_names(sentence, UNPROVIDED, UNPROVIDED);
            SubLObject conditionalP = inference_strategist.inference_conditional_sentence_p(optimized_sentence);
            SubLObject static_properties = list_utilities.nmerge_plist(inference_datastructures_enumerated_types.extract_query_static_or_meta_properties(v_properties), list($kw202$CONDITIONAL_SENTENCE_, conditionalP));
            SubLObject inference = inference_kernel.new_continuable_inference(optimized_sentence, mt, static_properties);
            SubLObject problem_store_id = inference_datastructures_problem_store.problem_store_suid(inference_datastructures_inference.inference_problem_store(inference));
            SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
            SubLObject special_state = special_variable_state.new_special_variable_state($list_alt203);
            return com.cyc.cycjava.cycl.gke_main.gke_continue_query(problem_store_id, inference_id, v_properties, special_state);
        }
    }

    @LispMethod(comment = "Setup a query, and immediately return the query identifiers.  A separate java\r\nthread will start up the query and check up on it for new results.\nSetup a query, and immediately return the query identifiers.  A separate java\nthread will start up the query and check up on it for new results.")
    public static SubLObject gke_start_continuable_query(final SubLObject sentence, final SubLObject mt, SubLObject v_properties) {
        if (v_properties == UNPROVIDED) {
            v_properties = NIL;
        }
        SubLTrampolineFile.enforceType(sentence, EL_FORMULA_P);
        SubLTrampolineFile.enforceType(mt, POSSIBLY_MT_P);
        SubLTrampolineFile.enforceType(v_properties, QUERY_PROPERTIES_P);
        final SubLObject optimized_sentence = optimize_el_formula_variable_names(sentence, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject conditionalP = inference_strategist.inference_conditional_sentence_p(optimized_sentence);
        final SubLObject static_properties = list_utilities.nmerge_plist(inference_datastructures_enumerated_types.extract_query_static_or_meta_properties(v_properties), list(gke_main.$kw198$CONDITIONAL_SENTENCE_, conditionalP));
        final SubLObject inference = inference_kernel.new_continuable_inference(optimized_sentence, mt, static_properties);
        final SubLObject problem_store_id = inference_datastructures_problem_store.problem_store_suid(inference_problem_store(inference));
        final SubLObject inference_id = inference_suid(inference);
        final SubLObject special_state = special_variable_state.new_special_variable_state(gke_main.$list199);
        return gke_main.gke_continue_query(problem_store_id, inference_id, v_properties, special_state);
    }/**
     * Setup a query, and immediately return the query identifiers.  A separate java
     * thread will start up the query and check up on it for new results.
     */


    /**
     * a handy function to trace for debugging background processes
     */
    @LispMethod(comment = "a handy function to trace for debugging background processes")
    public static final SubLObject gke_warn_alt(SubLObject message) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            return princ(message, StreamsLow.$standard_output$.getDynamicValue(thread));
        }
    }

    @LispMethod(comment = "a handy function to trace for debugging background processes")
    public static SubLObject gke_warn(final SubLObject message) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return princ(message, StreamsLow.$standard_output$.getDynamicValue(thread));
    }/**
     * a handy function to trace for debugging background processes
     */


    /**
     * Continue an existing query (identified by PROBLEM-STORE-ID and INFERENCE-ID),
     * using PROPERTIES and immediately return the query identifiers.  A separate thread
     * will be started to keep track of the results and provide them to any other tools
     * (e.g. the Query Library) that need them.
     */
    @LispMethod(comment = "Continue an existing query (identified by PROBLEM-STORE-ID and INFERENCE-ID),\r\nusing PROPERTIES and immediately return the query identifiers.  A separate thread\r\nwill be started to keep track of the results and provide them to any other tools\r\n(e.g. the Query Library) that need them.\nContinue an existing query (identified by PROBLEM-STORE-ID and INFERENCE-ID),\nusing PROPERTIES and immediately return the query identifiers.  A separate thread\nwill be started to keep track of the results and provide them to any other tools\n(e.g. the Query Library) that need them.")
    public static final SubLObject gke_continue_query_alt(SubLObject problem_store_id, SubLObject inference_id, SubLObject v_properties, SubLObject special_state) {
        if (special_state == UNPROVIDED) {
            special_state = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(problem_store_id, INTEGERP);
            SubLTrampolineFile.checkType(inference_id, INTEGERP);
            SubLTrampolineFile.checkType(v_properties, LISTP);
            {
                SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(problem_store_id, inference_id);
                SubLObject dynamic_properties = inference_datastructures_enumerated_types.extract_query_dynamic_properties(v_properties);
                if (NIL != inference_datastructures_inference.continuable_inference_p(inference)) {
                    {
                        SubLObject old_process_wrapper = gethash(string_utilities.to_string(list(problem_store_id, inference_id)), $gke_query_threads$.getDynamicValue(thread), UNPROVIDED);
                        SubLObject gke_process = com.cyc.cycjava.cycl.gke_main.new_gke_process(problem_store_id, inference_id, dynamic_properties, special_state);
                        SubLObject oldest_process_wrapper = (NIL != old_process_wrapper) ? ((SubLObject) (old_process_wrapper)) : gke_process;
                        SubLObject old_queue = process_utilities.process_wrapper_get_property(oldest_process_wrapper, $QUEUE, UNPROVIDED);
                        SubLObject results_queue = (NIL != old_queue) ? ((SubLObject) (old_queue)) : queues.create_queue();
                        SubLObject daemon = com.cyc.cycjava.cycl.gke_main.new_results_daemon(problem_store_id, inference_id, results_queue);
                        process_utilities.process_wrapper_set_property(gke_process, $QUEUE, results_queue);
                        process_utilities.process_wrapper_set_property(gke_process, $DAEMON, daemon);
                        sethash(string_utilities.to_string(list(problem_store_id, inference_id)), $gke_query_threads$.getDynamicValue(thread), gke_process);
                        return list(problem_store_id, inference_id);
                    }
                } else {
                    return list(format(NIL, $str_alt211$Error_with_query___A__, inference_datastructures_inference.inference_status(inference)));
                }
            }
        }
    }

    @LispMethod(comment = "Continue an existing query (identified by PROBLEM-STORE-ID and INFERENCE-ID),\r\nusing PROPERTIES and immediately return the query identifiers.  A separate thread\r\nwill be started to keep track of the results and provide them to any other tools\r\n(e.g. the Query Library) that need them.\nContinue an existing query (identified by PROBLEM-STORE-ID and INFERENCE-ID),\nusing PROPERTIES and immediately return the query identifiers.  A separate thread\nwill be started to keep track of the results and provide them to any other tools\n(e.g. the Query Library) that need them.")
    public static SubLObject gke_continue_query(final SubLObject problem_store_id, final SubLObject inference_id, final SubLObject v_properties, SubLObject special_state) {
        if (special_state == UNPROVIDED) {
            special_state = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLTrampolineFile.enforceType(problem_store_id, INTEGERP);
        SubLTrampolineFile.enforceType(inference_id, INTEGERP);
        SubLTrampolineFile.enforceType(v_properties, LISTP);
        final SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(problem_store_id, inference_id);
        final SubLObject dynamic_properties = inference_datastructures_enumerated_types.extract_query_dynamic_properties(v_properties);
        if (NIL != continuable_inference_p(inference)) {
            final SubLObject old_process_wrapper = gethash(string_utilities.to_string(list(problem_store_id, inference_id)), gke_main.$gke_query_threads$.getDynamicValue(thread), UNPROVIDED);
            final SubLObject gke_process = gke_main.new_gke_process(problem_store_id, inference_id, dynamic_properties, special_state);
            final SubLObject oldest_process_wrapper = (NIL != old_process_wrapper) ? old_process_wrapper : gke_process;
            final SubLObject old_queue = process_utilities.process_wrapper_get_property(oldest_process_wrapper, $QUEUE, UNPROVIDED);
            final SubLObject results_queue = (NIL != old_queue) ? old_queue : queues.create_queue(UNPROVIDED);
            final SubLObject daemon = gke_main.new_results_daemon(problem_store_id, inference_id, results_queue);
            process_utilities.process_wrapper_set_property(gke_process, $QUEUE, results_queue);
            process_utilities.process_wrapper_set_property(gke_process, $DAEMON, daemon);
            sethash(string_utilities.to_string(list(problem_store_id, inference_id)), gke_main.$gke_query_threads$.getDynamicValue(thread), gke_process);
            return list(problem_store_id, inference_id);
        }
        return list(format(NIL, gke_main.$str207$Error_with_query___A__, inference_status(inference)));
    }/**
     * Continue an existing query (identified by PROBLEM-STORE-ID and INFERENCE-ID),
     * using PROPERTIES and immediately return the query identifiers.  A separate thread
     * will be started to keep track of the results and provide them to any other tools
     * (e.g. the Query Library) that need them.
     */


    public static final SubLObject new_gke_process_alt(SubLObject problem_store_id, SubLObject inference_id, SubLObject dynamic_properties, SubLObject special_state) {
        if (special_state == UNPROVIDED) {
            special_state = NIL;
        }
        {
            SubLObject gke_process = process_utilities.new_process_wrapper(format(NIL, $str_alt216$gke_query_thread__A__A, problem_store_id, inference_id), GKE_RUN_INFERENCE, list(problem_store_id, inference_id, dynamic_properties, special_state));
            return gke_process;
        }
    }

    public static SubLObject new_gke_process(final SubLObject problem_store_id, final SubLObject inference_id, final SubLObject dynamic_properties, SubLObject special_state) {
        if (special_state == UNPROVIDED) {
            special_state = NIL;
        }
        final SubLObject gke_process = process_utilities.new_process_wrapper(format(NIL, gke_main.$str212$gke_query_thread__A__A, problem_store_id, inference_id), gke_main.GKE_RUN_INFERENCE, list(problem_store_id, inference_id, dynamic_properties, special_state));
        return gke_process;
    }

    public static final SubLObject new_results_daemon_alt(SubLObject problem_store_id, SubLObject inference_id, SubLObject queue) {
        {
            SubLObject daemon = process_utilities.new_process_wrapper(format(NIL, $str_alt218$results_daemon__A__A, problem_store_id, inference_id), RESULTS_DAEMON, list(problem_store_id, inference_id, queue));
            return daemon;
        }
    }

    public static SubLObject new_results_daemon(final SubLObject problem_store_id, final SubLObject inference_id, final SubLObject queue) {
        final SubLObject daemon = process_utilities.new_process_wrapper(format(NIL, gke_main.$str214$results_daemon__A__A, problem_store_id, inference_id), gke_main.RESULTS_DAEMON, list(problem_store_id, inference_id, queue));
        return daemon;
    }

    public static final SubLObject results_daemon_alt(SubLObject process_wrapper, SubLObject problem_store_id, SubLObject inference_id, SubLObject queue) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject problem_store = inference_datastructures_problem_store.find_problem_store_by_id(problem_store_id);
                SubLObject inference = inference_datastructures_problem_store.find_inference_by_id(problem_store, inference_id);
                SubLObject current_answer = ZERO_INTEGER;
                SubLObject ignore_errors_tag = NIL;
                try {
                    {
                        SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                        try {
                            Errors.$error_handler$.bind(symbol_function(IGNORE_ERRORS_HANDLER), thread);
                            try {
                                thread.resetMultipleValues();
                                {
                                    SubLObject _prev_bind_0_115 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
                                    try {
                                        pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                                        {
                                            SubLObject reuseP = thread.secondMultipleValue();
                                            thread.resetMultipleValues();
                                            try {
                                                thread.resetMultipleValues();
                                                {
                                                    SubLObject _prev_bind_0_116 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                                                    try {
                                                        pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                                                        {
                                                            SubLObject new_or_reused = thread.secondMultipleValue();
                                                            thread.resetMultipleValues();
                                                            {
                                                                SubLObject _prev_bind_0_117 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                                                                try {
                                                                    pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                                                                    {
                                                                        SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                                                                        {
                                                                            SubLObject _prev_bind_0_118 = memoization_state.$memoization_state$.currentBinding(thread);
                                                                            try {
                                                                                memoization_state.$memoization_state$.bind(local_state, thread);
                                                                                {
                                                                                    SubLObject original_memoization_process = NIL;
                                                                                    if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
                                                                                        original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
                                                                                        {
                                                                                            SubLObject current_proc = current_process();
                                                                                            if (NIL == original_memoization_process) {
                                                                                                memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
                                                                                            } else {
                                                                                                if (original_memoization_process != current_proc) {
                                                                                                    Errors.error($str_alt13$Invalid_attempt_to_reuse_memoizat);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    try {
                                                                                        if (NIL == com.cyc.cycjava.cycl.gke_main.daemon_should_run(inference, current_answer)) {
                                                                                            sleep(ONE_INTEGER);
                                                                                        }
                                                                                    } finally {
                                                                                        {
                                                                                            SubLObject _prev_bind_0_119 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                            try {
                                                                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                                                                while (NIL != com.cyc.cycjava.cycl.gke_main.daemon_should_run(inference, current_answer)) {
                                                                                                    {
                                                                                                        SubLObject inference_answer = inference_datastructures_inference.find_inference_answer_by_id(inference, current_answer);
                                                                                                        while (NIL != inference_answer) {
                                                                                                            current_answer = add(current_answer, ONE_INTEGER);
                                                                                                            {
                                                                                                                SubLObject _prev_bind_0_120 = pph_vars.$pph_domain_mt$.currentBinding(thread);
                                                                                                                try {
                                                                                                                    pph_vars.$pph_domain_mt$.bind(inference_datastructures_inference.inference_mt(inference), thread);
                                                                                                                    {
                                                                                                                        SubLObject el_bindings = inference_kernel.inference_answer_el_bindings(inference_answer);
                                                                                                                        SubLObject gke_bindings = com.cyc.cycjava.cycl.gke_main.el_binding_list_to_gke_binding_list(el_bindings, inference_answer);
                                                                                                                        SubLObject source_icon_data = proof_view.source_icon_paths_for_inference_answer(inference_answer);
                                                                                                                        SubLObject plist_to_enqueue = list($BINDINGS, gke_bindings, $SOURCE_ICONS, source_icon_data);
                                                                                                                        queues.enqueue(plist_to_enqueue, queue);
                                                                                                                    }
                                                                                                                } finally {
                                                                                                                    pph_vars.$pph_domain_mt$.rebind(_prev_bind_0_120, thread);
                                                                                                                }
                                                                                                            }
                                                                                                            inference_answer = inference_datastructures_inference.find_inference_answer_by_id(inference, current_answer);
                                                                                                        } 
                                                                                                        sleep(ONE_INTEGER);
                                                                                                    }
                                                                                                } 
                                                                                                if ((NIL != local_state) && (NIL == original_memoization_process)) {
                                                                                                    memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
                                                                                                }
                                                                                            } finally {
                                                                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_119, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                memoization_state.$memoization_state$.rebind(_prev_bind_0_118, thread);
                                                                            }
                                                                        }
                                                                    }
                                                                } finally {
                                                                    pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_117, thread);
                                                                }
                                                            }
                                                            if ((new_or_reused == $NEW) && (NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread)))) {
                                                                memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                                                            }
                                                        }
                                                    } finally {
                                                        pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_116, thread);
                                                    }
                                                }
                                            } finally {
                                                {
                                                    SubLObject _prev_bind_0_121 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                    try {
                                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                                        if (NIL == reuseP) {
                                                            pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                                                        }
                                                    } finally {
                                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_121, thread);
                                                    }
                                                }
                                            }
                                        }
                                    } finally {
                                        pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_115, thread);
                                    }
                                }
                            } catch (Throwable catch_var) {
                                Errors.handleThrowable(catch_var, NIL);
                            }
                        } finally {
                            Errors.$error_handler$.rebind(_prev_bind_0, thread);
                        }
                    }
                } catch (Throwable ccatch_env_var) {
                    ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, $IGNORE_ERRORS_TARGET);
                }
            }
            return NIL;
        }
    }

    public static SubLObject results_daemon(final SubLObject process_wrapper, final SubLObject problem_store_id, final SubLObject inference_id, final SubLObject queue) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject problem_store = inference_datastructures_problem_store.find_problem_store_by_id(problem_store_id);
        final SubLObject inference = inference_datastructures_problem_store.find_inference_by_id(problem_store, inference_id);
        SubLObject current_answer = ZERO_INTEGER;
        SubLObject ignore_errors_tag = NIL;
        try {
            thread.throwStack.push(gke_main.$IGNORE_ERRORS_TARGET);
            final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
            try {
                Errors.$error_handler$.bind(symbol_function(gke_main.IGNORE_ERRORS_HANDLER), thread);
                try {
                    final SubLObject _prev_bind_0_$79 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
                    try {
                        pph_macros.$free_pph_problem_store_pointers$.bind(NIL, thread);
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$80 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
                        try {
                            pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                            final SubLObject reuseP = thread.secondMultipleValue();
                            thread.resetMultipleValues();
                            try {
                                thread.resetMultipleValues();
                                final SubLObject _prev_bind_0_$81 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                                try {
                                    pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                                    final SubLObject new_or_reused = thread.secondMultipleValue();
                                    thread.resetMultipleValues();
                                    final SubLObject _prev_bind_0_$82 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                                    try {
                                        pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                                        final SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                                        final SubLObject _prev_bind_0_$83 = memoization_state.$memoization_state$.currentBinding(thread);
                                        try {
                                            memoization_state.$memoization_state$.bind(local_state, thread);
                                            final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                                            try {
                                                if (NIL == gke_main.daemon_should_run(inference, current_answer)) {
                                                    sleep(ONE_INTEGER);
                                                }
                                                while (NIL != gke_main.daemon_should_run(inference, current_answer)) {
                                                    for (SubLObject inference_answer = find_inference_answer_by_id(inference, current_answer); NIL != inference_answer; inference_answer = find_inference_answer_by_id(inference, current_answer)) {
                                                        current_answer = add(current_answer, ONE_INTEGER);
                                                        final SubLObject _prev_bind_0_$84 = pph_vars.$pph_domain_mt$.currentBinding(thread);
                                                        try {
                                                            pph_vars.$pph_domain_mt$.bind(inference_mt(inference), thread);
                                                            final SubLObject el_bindings = inference_kernel.inference_answer_el_bindings(inference_answer);
                                                            final SubLObject gke_bindings = gke_main.el_binding_list_to_gke_binding_list(el_bindings, inference_answer);
                                                            final SubLObject source_icon_data = sources.source_icon_paths_for_inference_answer(inference_answer);
                                                            final SubLObject plist_to_enqueue = list($BINDINGS, gke_bindings, $SOURCE_ICONS, source_icon_data);
                                                            queues.enqueue(plist_to_enqueue, queue);
                                                        } finally {
                                                            pph_vars.$pph_domain_mt$.rebind(_prev_bind_0_$84, thread);
                                                        }
                                                    }
                                                    sleep(ONE_INTEGER);
                                                } 
                                            } finally {
                                                final SubLObject _prev_bind_0_$85 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                                    final SubLObject _values = getValuesAsVector();
                                                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                                    restoreValuesFromVector(_values);
                                                } finally {
                                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$85, thread);
                                                }
                                            }
                                        } finally {
                                            memoization_state.$memoization_state$.rebind(_prev_bind_0_$83, thread);
                                        }
                                    } finally {
                                        pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$82, thread);
                                    }
                                    if ((new_or_reused == $NEW) && (NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread)))) {
                                        memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                                    }
                                } finally {
                                    pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$81, thread);
                                }
                            } finally {
                                final SubLObject _prev_bind_0_$86 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                    final SubLObject _values2 = getValuesAsVector();
                                    if (NIL == reuseP) {
                                        pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                                    }
                                    restoreValuesFromVector(_values2);
                                } finally {
                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$86, thread);
                                }
                            }
                        } finally {
                            pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$80, thread);
                        }
                    } finally {
                        pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_0_$79, thread);
                    }
                } catch (final Throwable catch_var) {
                    Errors.handleThrowable(catch_var, NIL);
                }
            } finally {
                Errors.$error_handler$.rebind(_prev_bind_0, thread);
            }
        } catch (final Throwable ccatch_env_var) {
            ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, gke_main.$IGNORE_ERRORS_TARGET);
        } finally {
            thread.throwStack.pop();
        }
        return NIL;
    }

    /**
     * Daemon should continue running as long as the inference is running or preparing to run, or
     * there are more inference answers than the daemon has processed.
     */
    @LispMethod(comment = "Daemon should continue running as long as the inference is running or preparing to run, or\r\nthere are more inference answers than the daemon has processed.\nDaemon should continue running as long as the inference is running or preparing to run, or\nthere are more inference answers than the daemon has processed.")
    public static final SubLObject daemon_should_run_alt(SubLObject inference, SubLObject current_answer) {
        {
            SubLObject status = inference_datastructures_inference.inference_status(inference);
            SubLObject current_count = id_index_count(inference_datastructures_inference.inference_answer_id_index(inference));
            return makeBoolean((NIL != subl_promotions.memberP(status, $daemon_should_run_inference_statuses$.getGlobalValue(), UNPROVIDED, UNPROVIDED)) || current_count.numG(current_answer));
        }
    }

    @LispMethod(comment = "Daemon should continue running as long as the inference is running or preparing to run, or\r\nthere are more inference answers than the daemon has processed.\nDaemon should continue running as long as the inference is running or preparing to run, or\nthere are more inference answers than the daemon has processed.")
    public static SubLObject daemon_should_run(final SubLObject inference, final SubLObject current_answer) {
        final SubLObject status = inference_status(inference);
        final SubLObject current_count = id_index_count(inference_answer_id_index(inference));
        return makeBoolean((NIL != subl_promotions.memberP(status, gke_main.$daemon_should_run_inference_statuses$.getGlobalValue(), UNPROVIDED, UNPROVIDED)) || current_count.numG(current_answer));
    }/**
     * Daemon should continue running as long as the inference is running or preparing to run, or
     * there are more inference answers than the daemon has processed.
     */


    public static final SubLObject gke_run_inference_alt(SubLObject process_wrapper, SubLObject problem_store_id, SubLObject inference_id, SubLObject dynamic_properties, SubLObject special_state) {
        if (special_state == UNPROVIDED) {
            special_state = NIL;
        }
        {
            SubLObject problem_store = inference_datastructures_problem_store.find_problem_store_by_id(problem_store_id);
            SubLObject inference = inference_datastructures_problem_store.find_inference_by_id(problem_store, inference_id);
            SubLObject adjusted_dynamic_properties = (NIL != $gke_run_inference_with_adjusted_dynamic_propertiesP$.getGlobalValue()) ? ((SubLObject) (list_utilities.nmerge_plist(list($MAX_TIME, NIL, $MAX_TRANSFORMATION_DEPTH, THREE_INTEGER), dynamic_properties))) : dynamic_properties;
            if (NIL != inference_datastructures_inference.continuable_inference_p(inference)) {
                if (NIL != special_state) {
                    {
                        SubLObject svs_var = special_state;
                        SubLTrampolineFile.checkType(svs_var, SPECIAL_VARIABLE_STATE_P);
                        {
                            SubLObject cprogv_var = special_variable_state.with_special_variable_state_variables(svs_var);
                            final ArrayList old_values = extract_dynamic_values(cprogv_var);
                            try {
                                bind_dynamic_vars(cprogv_var, special_variable_state.with_special_variable_state_values(svs_var));
                                inference_kernel.continue_inference(inference, adjusted_dynamic_properties);
                            } finally {
                                rebind_dynamic_vars(cprogv_var, old_values);
                            }
                        }
                    }
                } else {
                    inference_kernel.continue_inference(inference, adjusted_dynamic_properties);
                }
            }
        }
        return NIL;
    }

    public static SubLObject gke_run_inference(final SubLObject process_wrapper, final SubLObject problem_store_id, final SubLObject inference_id, final SubLObject dynamic_properties, SubLObject special_state) {
        if (special_state == UNPROVIDED) {
            special_state = NIL;
        }
        final SubLObject problem_store = inference_datastructures_problem_store.find_problem_store_by_id(problem_store_id);
        final SubLObject inference = inference_datastructures_problem_store.find_inference_by_id(problem_store, inference_id);
        final SubLObject adjusted_dynamic_properties = (NIL != gke_main.$gke_run_inference_with_adjusted_dynamic_propertiesP$.getGlobalValue()) ? list_utilities.nmerge_plist(list($MAX_TIME, NIL, gke_main.$MAX_TRANSFORMATION_DEPTH, THREE_INTEGER), dynamic_properties) : dynamic_properties;
        if (NIL != continuable_inference_p(inference)) {
            if (NIL != special_state) {
                final SubLObject cprogv_var = special_variable_state.with_special_variable_state_variables(special_state);
                final ArrayList old_values = extract_dynamic_values(cprogv_var);
                try {
                    bind_dynamic_vars(cprogv_var, special_variable_state.with_special_variable_state_values(special_state));
                    SubLTrampolineFile.enforceType(special_state, gke_main.SPECIAL_VARIABLE_STATE_P);
                    inference_kernel.continue_inference(inference, adjusted_dynamic_properties);
                } finally {
                    rebind_dynamic_vars(cprogv_var, old_values);
                }
            } else {
                inference_kernel.continue_inference(inference, adjusted_dynamic_properties);
            }
        }
        return NIL;
    }

    /**
     * Get one inference result
     */
    @LispMethod(comment = "Get one inference result")
    public static final SubLObject gke_get_one_inference_result_alt(SubLObject problem_store_id, SubLObject inference_id) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(problem_store_id, INTEGERP);
            SubLTrampolineFile.checkType(inference_id, INTEGERP);
            {
                SubLObject process_wrapper = gethash(string_utilities.to_string(list(problem_store_id, inference_id)), $gke_query_threads$.getDynamicValue(thread), UNPROVIDED);
                if (NIL != process_wrapper) {
                    {
                        SubLObject queue = process_utilities.process_wrapper_get_property(process_wrapper, $QUEUE, UNPROVIDED);
                        if (NIL != queue) {
                            return queues.dequeue(queue);
                        }
                    }
                }
            }
            return NIL;
        }
    }

    @LispMethod(comment = "Get one inference result")
    public static SubLObject gke_get_one_inference_result(final SubLObject problem_store_id, final SubLObject inference_id) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLTrampolineFile.enforceType(problem_store_id, INTEGERP);
        SubLTrampolineFile.enforceType(inference_id, INTEGERP);
        final SubLObject process_wrapper = gethash(string_utilities.to_string(list(problem_store_id, inference_id)), gke_main.$gke_query_threads$.getDynamicValue(thread), UNPROVIDED);
        if (NIL != process_wrapper) {
            final SubLObject queue = process_utilities.process_wrapper_get_property(process_wrapper, $QUEUE, UNPROVIDED);
            if (NIL != queue) {
                return queues.dequeue(queue);
            }
        }
        return NIL;
    }/**
     * Get one inference result
     */


    /**
     * get all the inference results so far.
     *
     * @return LISTP of LISTP of triples of the form
    - string-paraphrase of EL variable
    - javalist-paraphrase of the variable's value
    - CycL term to which the variable is bound
    one list of triples for each set of bindings for the specified inference.
     */
    @LispMethod(comment = "get all the inference results so far.\r\n\r\n@return LISTP of LISTP of triples of the form\r\n- string-paraphrase of EL variable\r\n- javalist-paraphrase of the variable\'s value\r\n- CycL term to which the variable is bound\r\none list of triples for each set of bindings for the specified inference.")
    public static final SubLObject gke_get_inference_results_alt(SubLObject problem_store_id, SubLObject inference_id) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(problem_store_id, ID_OF_VALID_PROBLEM_STORE_P);
            SubLTrampolineFile.checkType(inference_id, INTEGERP);
            {
                SubLObject problem_store = inference_datastructures_problem_store.find_problem_store_by_id(problem_store_id);
                SubLObject inference = inference_datastructures_problem_store.find_inference_by_id(problem_store, inference_id);
                SubLObject ans = NIL;
                thread.resetMultipleValues();
                {
                    SubLObject _prev_bind_0 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
                    try {
                        pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                        {
                            SubLObject reuseP = thread.secondMultipleValue();
                            thread.resetMultipleValues();
                            try {
                                thread.resetMultipleValues();
                                {
                                    SubLObject _prev_bind_0_122 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                                    try {
                                        pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                                        {
                                            SubLObject new_or_reused = thread.secondMultipleValue();
                                            thread.resetMultipleValues();
                                            {
                                                SubLObject _prev_bind_0_123 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                                                try {
                                                    pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                                                    {
                                                        SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                                                        {
                                                            SubLObject _prev_bind_0_124 = memoization_state.$memoization_state$.currentBinding(thread);
                                                            try {
                                                                memoization_state.$memoization_state$.bind(local_state, thread);
                                                                {
                                                                    SubLObject original_memoization_process = NIL;
                                                                    if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
                                                                        original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
                                                                        {
                                                                            SubLObject current_proc = current_process();
                                                                            if (NIL == original_memoization_process) {
                                                                                memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
                                                                            } else {
                                                                                if (original_memoization_process != current_proc) {
                                                                                    Errors.error($str_alt13$Invalid_attempt_to_reuse_memoizat);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    try {
                                                                        {
                                                                            SubLObject idx = inference_datastructures_inference.inference_answer_id_index(inference);
                                                                            if (NIL == do_id_index_empty_p(idx, $SKIP)) {
                                                                                {
                                                                                    SubLObject id = do_id_index_next_id(idx, NIL, NIL, NIL);
                                                                                    SubLObject state_var = do_id_index_next_state(idx, NIL, id, NIL);
                                                                                    SubLObject inference_answer = NIL;
                                                                                    while (NIL != id) {
                                                                                        inference_answer = do_id_index_state_object(idx, $SKIP, id, state_var);
                                                                                        if (NIL != do_id_index_id_and_object_validP(id, inference_answer, $SKIP)) {
                                                                                            ans = cons(com.cyc.cycjava.cycl.gke_main.gke_subst_nl_for_inference_answer(inference_answer), ans);
                                                                                        }
                                                                                        id = do_id_index_next_id(idx, NIL, id, state_var);
                                                                                        state_var = do_id_index_next_state(idx, NIL, id, state_var);
                                                                                    } 
                                                                                }
                                                                            }
                                                                        }
                                                                    } finally {
                                                                        {
                                                                            SubLObject _prev_bind_0_125 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                            try {
                                                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                                                if ((NIL != local_state) && (NIL == original_memoization_process)) {
                                                                                    memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
                                                                                }
                                                                            } finally {
                                                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_125, thread);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            } finally {
                                                                memoization_state.$memoization_state$.rebind(_prev_bind_0_124, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_123, thread);
                                                }
                                            }
                                            if ((new_or_reused == $NEW) && (NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread)))) {
                                                memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                                            }
                                        }
                                    } finally {
                                        pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_122, thread);
                                    }
                                }
                            } finally {
                                {
                                    SubLObject _prev_bind_0_126 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                        if (NIL == reuseP) {
                                            pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                                        }
                                    } finally {
                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_126, thread);
                                    }
                                }
                            }
                        }
                    } finally {
                        pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0, thread);
                    }
                }
                return ans;
            }
        }
    }

    @LispMethod(comment = "get all the inference results so far.\r\n\r\n@return LISTP of LISTP of triples of the form\r\n- string-paraphrase of EL variable\r\n- javalist-paraphrase of the variable\'s value\r\n- CycL term to which the variable is bound\r\none list of triples for each set of bindings for the specified inference.")
    public static SubLObject gke_get_inference_results(final SubLObject problem_store_id, final SubLObject inference_id) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLTrampolineFile.enforceType(problem_store_id, gke_main.ID_OF_VALID_PROBLEM_STORE_P);
        SubLTrampolineFile.enforceType(inference_id, INTEGERP);
        final SubLObject problem_store = inference_datastructures_problem_store.find_problem_store_by_id(problem_store_id);
        final SubLObject inference = inference_datastructures_problem_store.find_inference_by_id(problem_store, inference_id);
        SubLObject ans = NIL;
        final SubLObject _prev_bind_0 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
        try {
            pph_macros.$free_pph_problem_store_pointers$.bind(NIL, thread);
            thread.resetMultipleValues();
            final SubLObject _prev_bind_0_$87 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
            try {
                pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                final SubLObject reuseP = thread.secondMultipleValue();
                thread.resetMultipleValues();
                try {
                    thread.resetMultipleValues();
                    final SubLObject _prev_bind_0_$88 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                    try {
                        pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                        final SubLObject new_or_reused = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$89 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                        try {
                            pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                            final SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                            final SubLObject _prev_bind_0_$90 = memoization_state.$memoization_state$.currentBinding(thread);
                            try {
                                memoization_state.$memoization_state$.bind(local_state, thread);
                                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                                try {
                                    final SubLObject idx = inference_answer_id_index(inference);
                                    if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
                                        final SubLObject idx_$91 = idx;
                                        if (NIL == id_index_dense_objects_empty_p(idx_$91, $SKIP)) {
                                            final SubLObject vector_var = id_index_dense_objects(idx_$91);
                                            final SubLObject backwardP_var = NIL;
                                            SubLObject length;
                                            SubLObject v_iteration;
                                            SubLObject id;
                                            SubLObject inference_answer;
                                            for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
                                                id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
                                                inference_answer = aref(vector_var, id);
                                                if ((NIL == id_index_tombstone_p(inference_answer)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
                                                    if (NIL != id_index_tombstone_p(inference_answer)) {
                                                        inference_answer = $SKIP;
                                                    }
                                                    ans = cons(gke_main.gke_subst_nl_for_inference_answer(inference_answer), ans);
                                                }
                                            }
                                        }
                                        final SubLObject idx_$92 = idx;
                                        if (NIL == id_index_sparse_objects_empty_p(idx_$92)) {
                                            final SubLObject cdohash_table = id_index_sparse_objects(idx_$92);
                                            SubLObject id2 = NIL;
                                            SubLObject inference_answer2 = NIL;
                                            final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
                                            try {
                                                while (iteratorHasNext(cdohash_iterator)) {
                                                    final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
                                                    id2 = getEntryKey(cdohash_entry);
                                                    inference_answer2 = getEntryValue(cdohash_entry);
                                                    ans = cons(gke_main.gke_subst_nl_for_inference_answer(inference_answer2), ans);
                                                } 
                                            } finally {
                                                releaseEntrySetIterator(cdohash_iterator);
                                            }
                                        }
                                    }
                                } finally {
                                    final SubLObject _prev_bind_0_$91 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                        final SubLObject _values = getValuesAsVector();
                                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                        restoreValuesFromVector(_values);
                                    } finally {
                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$91, thread);
                                    }
                                }
                            } finally {
                                memoization_state.$memoization_state$.rebind(_prev_bind_0_$90, thread);
                            }
                        } finally {
                            pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$89, thread);
                        }
                        if ((new_or_reused == $NEW) && (NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread)))) {
                            memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                        }
                    } finally {
                        pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$88, thread);
                    }
                } finally {
                    final SubLObject _prev_bind_0_$92 = $is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        $is_thread_performing_cleanupP$.bind(T, thread);
                        final SubLObject _values2 = getValuesAsVector();
                        if (NIL == reuseP) {
                            pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                        }
                        restoreValuesFromVector(_values2);
                    } finally {
                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$92, thread);
                    }
                }
            } finally {
                pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$87, thread);
            }
        } finally {
            pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_0, thread);
        }
        return ans;
    }/**
     * get all the inference results so far.
     *
     * @return LISTP of LISTP of triples of the form
    - string-paraphrase of EL variable
    - javalist-paraphrase of the variable's value
    - CycL term to which the variable is bound
    one list of triples for each set of bindings for the specified inference.
     */


    /**
     * ret t iff inference is suspended || dead || tautology || contradiction
     * && queue is empty && daemon is :completed
     */
    @LispMethod(comment = "ret t iff inference is suspended || dead || tautology || contradiction\r\n&& queue is empty && daemon is :completed\nret t iff inference is suspended || dead || tautology || contradiction\n&& queue is empty && daemon is :completed")
    public static final SubLObject gke_inference_completeP_alt(SubLObject problem_store_id, SubLObject inference_id) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(problem_store_id, INTEGERP);
            SubLTrampolineFile.checkType(inference_id, INTEGERP);
            if (NIL == inference_datastructures_inference.inference_p(inference_datastructures_problem_store.find_inference_by_ids(problem_store_id, inference_id))) {
                return T;
            }
            {
                SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(problem_store_id, inference_id);
                SubLObject status = inference_datastructures_inference.inference_status(inference);
                SubLObject key = string_utilities.to_string(list(problem_store_id, inference_id));
                SubLObject gke_process = gethash(key, $gke_query_threads$.getDynamicValue(thread), UNPROVIDED);
                SubLObject queue = process_utilities.process_wrapper_get_property(gke_process, $QUEUE, UNPROVIDED);
                SubLObject daemon = process_utilities.process_wrapper_get_property(gke_process, $DAEMON, UNPROVIDED);
                return makeBoolean(((NIL != subl_promotions.memberP(status, $inference_done_statuses$.getGlobalValue(), UNPROVIDED, UNPROVIDED)) && (NIL != queues.queue_empty_p(queue))) && (NIL != process_utilities.process_wrapper_process_completedP(daemon)));
            }
        }
    }

    @LispMethod(comment = "ret t iff inference is suspended || dead || tautology || contradiction\r\n&& queue is empty && daemon is :completed\nret t iff inference is suspended || dead || tautology || contradiction\n&& queue is empty && daemon is :completed")
    public static SubLObject gke_inference_completeP(final SubLObject problem_store_id, final SubLObject inference_id) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLTrampolineFile.enforceType(problem_store_id, INTEGERP);
        SubLTrampolineFile.enforceType(inference_id, INTEGERP);
        if (NIL == inference_p(inference_datastructures_problem_store.find_inference_by_ids(problem_store_id, inference_id))) {
            return T;
        }
        final SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(problem_store_id, inference_id);
        final SubLObject status = inference_status(inference);
        final SubLObject key = string_utilities.to_string(list(problem_store_id, inference_id));
        final SubLObject gke_process = gethash(key, gke_main.$gke_query_threads$.getDynamicValue(thread), UNPROVIDED);
        final SubLObject queue = process_utilities.process_wrapper_get_property(gke_process, $QUEUE, UNPROVIDED);
        final SubLObject daemon = process_utilities.process_wrapper_get_property(gke_process, $DAEMON, UNPROVIDED);
        return makeBoolean(((NIL != subl_promotions.memberP(status, gke_main.$inference_done_statuses$.getGlobalValue(), UNPROVIDED, UNPROVIDED)) && (NIL != queues.queue_empty_p(queue))) && (NIL != process_utilities.process_wrapper_process_completedP(daemon)));
    }/**
     * ret t iff inference is suspended || dead || tautology || contradiction
     * && queue is empty && daemon is :completed
     */


    /**
     * get the status of the inference
     */
    @LispMethod(comment = "get the status of the inference")
    public static final SubLObject gke_get_inference_status_alt(SubLObject problem_store_id, SubLObject inference_id) {
        SubLTrampolineFile.checkType(problem_store_id, INTEGERP);
        SubLTrampolineFile.checkType(inference_id, INTEGERP);
        {
            SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(problem_store_id, inference_id);
            return inference_datastructures_inference.inference_status(inference);
        }
    }

    @LispMethod(comment = "get the status of the inference")
    public static SubLObject gke_get_inference_status(final SubLObject problem_store_id, final SubLObject inference_id) {
        SubLTrampolineFile.enforceType(problem_store_id, INTEGERP);
        SubLTrampolineFile.enforceType(inference_id, INTEGERP);
        final SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(problem_store_id, inference_id);
        return inference_status(inference);
    }/**
     * get the status of the inference
     */


    /**
     * get the suspend-status of the inference
     */
    @LispMethod(comment = "get the suspend-status of the inference")
    public static final SubLObject gke_get_inference_suspend_status_alt(SubLObject problem_store_id, SubLObject inference_id) {
        SubLTrampolineFile.checkType(problem_store_id, INTEGERP);
        SubLTrampolineFile.checkType(inference_id, INTEGERP);
        {
            SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(problem_store_id, inference_id);
            SubLObject suspend_status = inference_datastructures_inference.inference_suspend_status(inference);
            return suspend_status;
        }
    }

    @LispMethod(comment = "get the suspend-status of the inference")
    public static SubLObject gke_get_inference_suspend_status(final SubLObject problem_store_id, final SubLObject inference_id) {
        SubLTrampolineFile.enforceType(problem_store_id, INTEGERP);
        SubLTrampolineFile.enforceType(inference_id, INTEGERP);
        final SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(problem_store_id, inference_id);
        final SubLObject suspend_status = inference_suspend_status(inference);
        return suspend_status;
    }/**
     * get the suspend-status of the inference
     */


    /**
     * Find and stop the inference.
     */
    @LispMethod(comment = "Find and stop the inference.")
    public static final SubLObject gke_stop_continuable_query_alt(SubLObject problem_store_id, SubLObject inference_id, SubLObject patience) {
        if (patience == UNPROVIDED) {
            patience = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(problem_store_id, INTEGERP);
            SubLTrampolineFile.checkType(inference_id, INTEGERP);
            SubLTrampolineFile.checkType(patience, NULL_OR_INTEGERP);
            {
                SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(problem_store_id, inference_id);
                SubLObject time_out = (NIL != patience) ? ((SubLObject) (patience)) : $default_patience_wait_time$.getDynamicValue(thread);
                if (NIL != inference_datastructures_inference.running_inference_p(inference)) {
                    inference_strategist.inference_interrupt(inference, time_out);
                }
            }
            return NIL;
        }
    }

    @LispMethod(comment = "Find and stop the inference.")
    public static SubLObject gke_stop_continuable_query(final SubLObject problem_store_id, final SubLObject inference_id, SubLObject patience) {
        if (patience == UNPROVIDED) {
            patience = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLTrampolineFile.enforceType(problem_store_id, INTEGERP);
        SubLTrampolineFile.enforceType(inference_id, INTEGERP);
        SubLTrampolineFile.enforceType(patience, gke_main.NULL_OR_INTEGERP);
        final SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(problem_store_id, inference_id);
        final SubLObject time_out = (NIL != patience) ? patience : gke_main.$default_patience_wait_time$.getDynamicValue(thread);
        if (NIL != running_inference_p(inference)) {
            inference_strategist.inference_interrupt(inference, time_out);
        }
        return NIL;
    }/**
     * Find and stop the inference.
     */


    /**
     * Destroy problem store and inference
     */
    @LispMethod(comment = "Destroy problem store and inference")
    public static final SubLObject gke_release_inference_resources_alt(SubLObject problem_store_id, SubLObject inference_id) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(problem_store_id, INTEGERP);
            SubLTrampolineFile.checkType(inference_id, INTEGERP);
            {
                SubLObject problem_store = inference_datastructures_problem_store.find_problem_store_by_id(problem_store_id);
                SubLObject key = string_utilities.to_string(list(problem_store_id, inference_id));
                inference_datastructures_problem_store.destroy_problem_store(problem_store);
                remhash(key, $gke_query_threads$.getDynamicValue(thread));
            }
            return NIL;
        }
    }

    @LispMethod(comment = "Destroy problem store and inference")
    public static SubLObject gke_release_inference_resources(final SubLObject problem_store_id, final SubLObject inference_id) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLTrampolineFile.enforceType(problem_store_id, INTEGERP);
        SubLTrampolineFile.enforceType(inference_id, INTEGERP);
        final SubLObject problem_store = inference_datastructures_problem_store.find_problem_store_by_id(problem_store_id);
        final SubLObject key = string_utilities.to_string(list(problem_store_id, inference_id));
        inference_datastructures_problem_store.destroy_problem_store(problem_store);
        remhash(key, gke_main.$gke_query_threads$.getDynamicValue(thread));
        return NIL;
    }/**
     * Destroy problem store and inference
     */


    public static final SubLObject null_or_integerp_alt(SubLObject v_object) {
        return makeBoolean((NIL == v_object) || v_object.isInteger());
    }

    public static SubLObject null_or_integerp(final SubLObject v_object) {
        return makeBoolean((NIL == v_object) || v_object.isInteger());
    }

    public static final SubLObject clear_cached_gke_functions_alt() {
        com.cyc.cycjava.cycl.gke_main.clear_gke_predicate_filteredP();
        com.cyc.cycjava.cycl.gke_main.clear_gke_filtered_termP();
        com.cyc.cycjava.cycl.gke_main.clear_gke_isas_filtered_term();
        com.cyc.cycjava.cycl.gke_main.clear_gke_get_elements();
        com.cyc.cycjava.cycl.gke_main.clear_gke_memoization_state();
        com.cyc.cycjava.cycl.gke_main.clear_candidate_replacements_for_sentence_cached();
        return NIL;
    }

    public static SubLObject clear_cached_gke_functions() {
        gke_main.clear_gke_predicate_filteredP();
        gke_main.clear_gke_filtered_termP();
        gke_main.clear_gke_isas_filtered_term();
        gke_main.clear_gke_get_elements();
        gke_main.clear_gke_memoization_state();
        gke_main.clear_candidate_replacements_for_sentence_cached();
        return NIL;
    }

    /**
     * Returns all the CycL sentences that are used in specifying the queries that
     * are instances of the input collection.
     *
     * @param QUERY-COL
     * 		collection?; a collection of queries
     * @return QUERY-SENTENCES listp; list of query sentences
     */
    @LispMethod(comment = "Returns all the CycL sentences that are used in specifying the queries that\r\nare instances of the input collection.\r\n\r\n@param QUERY-COL\r\n\t\tcollection?; a collection of queries\r\n@return QUERY-SENTENCES listp; list of query sentences\nReturns all the CycL sentences that are used in specifying the queries that\nare instances of the input collection.")
    public static final SubLObject gke_test_queries_alt(SubLObject query_col) {
        return Mapping.mapcar(SECOND, ask_utilities.query_variable($sym252$_SENT, list($$thereExists, $sym253$_QUERY, listS($$and, list($$isa, $sym253$_QUERY, query_col), $list_alt254)), $$TestVocabularyMt, UNPROVIDED));
    }

    @LispMethod(comment = "Returns all the CycL sentences that are used in specifying the queries that\r\nare instances of the input collection.\r\n\r\n@param QUERY-COL\r\n\t\tcollection?; a collection of queries\r\n@return QUERY-SENTENCES listp; list of query sentences\nReturns all the CycL sentences that are used in specifying the queries that\nare instances of the input collection.")
    public static SubLObject gke_test_queries(final SubLObject query_col) {
        return Mapping.mapcar(SECOND, ask_utilities.query_variable(gke_main.$sym248$_SENT, list(gke_main.$$thereExists, gke_main.$sym249$_QUERY, listS(gke_main.$$and, list(gke_main.$$isa, gke_main.$sym249$_QUERY, query_col), gke_main.$list250)), gke_main.$$TestVocabularyMt, UNPROVIDED));
    }/**
     * Returns all the CycL sentences that are used in specifying the queries that
     * are instances of the input collection.
     *
     * @param QUERY-COL
     * 		collection?; a collection of queries
     * @return QUERY-SENTENCES listp; list of query sentences
     */


    public static final SubLObject candidate_replacements_equalP_alt(SubLObject expected, SubLObject actual) {
        {
            SubLObject badP = makeBoolean(NIL == list_utilities.same_length_p(expected, actual));
            if (NIL == badP) {
                {
                    SubLObject expected_one = NIL;
                    SubLObject expected_one_127 = NIL;
                    SubLObject actual_one = NIL;
                    SubLObject actual_one_128 = NIL;
                    for (expected_one = expected, expected_one_127 = expected_one.first(), actual_one = actual, actual_one_128 = actual_one.first(); !((NIL != badP) || ((NIL == actual_one) && (NIL == expected_one))); expected_one = expected_one.rest() , expected_one_127 = expected_one.first() , actual_one = actual_one.rest() , actual_one_128 = actual_one.first()) {
                        if (!(expected_one_127.first().equal(actual_one_128.first()) && (NIL != list_utilities.sets_equal_equalP(expected_one_127.rest(), actual_one_128.rest())))) {
                            badP = T;
                        }
                    }
                }
            }
            return makeBoolean(NIL == badP);
        }
    }

    public static SubLObject candidate_replacements_equalP(final SubLObject expected, final SubLObject actual) {
        SubLObject badP = makeBoolean(NIL == list_utilities.same_length_p(expected, actual));
        if (NIL == badP) {
            SubLObject expected_one = NIL;
            SubLObject expected_one_$95 = NIL;
            SubLObject actual_one = NIL;
            SubLObject actual_one_$96 = NIL;
            expected_one = expected;
            expected_one_$95 = expected_one.first();
            actual_one = actual;
            actual_one_$96 = actual_one.first();
            while ((NIL == badP) && ((NIL != actual_one) || (NIL != expected_one))) {
                if ((!expected_one_$95.first().equal(actual_one_$96.first())) || (NIL == list_utilities.sets_equal_equalP(expected_one_$95.rest(), actual_one_$96.rest()))) {
                    badP = T;
                }
                expected_one = expected_one.rest();
                expected_one_$95 = expected_one.first();
                actual_one = actual_one.rest();
                actual_one_$96 = actual_one.first();
            } 
        }
        return makeBoolean(NIL == badP);
    }

    public static final SubLObject test_candidate_replacements_alt(SubLObject sentence, SubLObject mt) {
        return cycl_utilities.expression_transform(com.cyc.cycjava.cycl.gke_main.candidate_replacements_for_sentence(sentence, mt), NART_P, NART_EL_FORMULA, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject test_candidate_replacements(final SubLObject sentence, final SubLObject mt) {
        return cycl_utilities.expression_transform(gke_main.candidate_replacements_for_sentence(sentence, mt), NART_P, gke_main.NART_EL_FORMULA, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject test_candidate_replacement_renderers(SubLObject sentence, SubLObject mt) {
        return cycl_utilities.expression_transform(Mapping.mapcar(SORT_RESULT, Mapping.mapcar(REMOVE_JAVALIST_DETAIL, com.cyc.cycjava.cycl.gke_main.candidate_replacement_renderers_for_sentence(sentence, mt, UNPROVIDED))), NART_P, NART_EL_FORMULA, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject test_candidate_replacement_renderers(final SubLObject sentence, final SubLObject mt, SubLObject task) {
        if (task == UNPROVIDED) {
            task = cae_query_search.current_cae_task();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != forts.fort_p(task) : "! forts.fort_p(task) " + ("forts.fort_p(task) " + "CommonSymbols.NIL != forts.fort_p(task) ") + task;
        final SubLObject _prev_bind_0 = cae_query_search.$current_cae_task$.currentBinding(thread);
        try {
            cae_query_search.$current_cae_task$.bind(task, thread);
            return cycl_utilities.expression_transform(Mapping.mapcar(gke_main.SORT_RESULT, Mapping.mapcar(gke_main.REMOVE_JAVALIST_DETAIL, gke_main.candidate_replacement_renderers_for_sentence(sentence, mt, UNPROVIDED))), NART_P, gke_main.NART_EL_FORMULA, UNPROVIDED, UNPROVIDED);
        } finally {
            cae_query_search.$current_cae_task$.rebind(_prev_bind_0, thread);
        }
    }

    public static final SubLObject remove_javalist_detail_alt(SubLObject result) {
        return com.cyc.cycjava.cycl.gke_main.delete_javalist_detail(copy_tree(result));
    }

    public static SubLObject remove_javalist_detail(final SubLObject result) {
        return gke_main.delete_javalist_detail(copy_tree(result));
    }

    public static final SubLObject sort_result_alt(SubLObject result) {
        {
            SubLObject datum = result;
            SubLObject current = datum;
            SubLObject arg_position = NIL;
            SubLObject groves = NIL;
            destructuring_bind_must_consp(current, datum, $list_alt294);
            arg_position = current.first();
            current = current.rest();
            groves = current;
            rplacd(result, com.cyc.cycjava.cycl.gke_main.sort_groves(groves));
        }
        return result;
    }

    public static SubLObject sort_result(final SubLObject result) {
        SubLObject arg_position = NIL;
        SubLObject groves = NIL;
        destructuring_bind_must_consp(result, result, gke_main.$list269);
        arg_position = result.first();
        final SubLObject current = groves = result.rest();
        rplacd(result, gke_main.sort_groves(groves));
        return result;
    }

    public static final SubLObject sort_groves_alt(SubLObject groves) {
        return Sort.sort(Mapping.mapcar(SORT_GROVE, groves), $sym296$TERM___WITH_CONSTANT_BY_NAME, CAR);
    }

    public static SubLObject sort_groves(final SubLObject groves) {
        return Sort.sort(Mapping.mapcar(gke_main.SORT_GROVE, groves), gke_main.$sym271$TERM___WITH_CONSTANT_BY_NAME, CAR);
    }

    public static final SubLObject sort_grove_alt(SubLObject grove) {
        return Sort.sort(Mapping.mapcar(SORT_TREE, grove), $sym296$TERM___WITH_CONSTANT_BY_NAME, CAR);
    }

    public static SubLObject sort_grove(final SubLObject grove) {
        return Sort.sort(Mapping.mapcar(gke_main.SORT_TREE, grove), gke_main.$sym271$TERM___WITH_CONSTANT_BY_NAME, CAR);
    }

    public static final SubLObject sort_tree_alt(SubLObject tree) {
        {
            SubLObject datum = tree;
            SubLObject current = datum;
            SubLObject root = NIL;
            SubLObject subtrees = NIL;
            destructuring_bind_must_consp(current, datum, $list_alt299);
            root = current.first();
            current = current.rest();
            subtrees = current;
            return cons(root, Sort.sort(Mapping.mapcar(SORT_TREE, subtrees), $sym296$TERM___WITH_CONSTANT_BY_NAME, CAR));
        }
    }

    public static SubLObject sort_tree(final SubLObject tree) {
        SubLObject root = NIL;
        SubLObject subtrees = NIL;
        destructuring_bind_must_consp(tree, tree, gke_main.$list274);
        root = tree.first();
        final SubLObject current = subtrees = tree.rest();
        return cons(root, Sort.sort(Mapping.mapcar(gke_main.SORT_TREE, subtrees), gke_main.$sym271$TERM___WITH_CONSTANT_BY_NAME, CAR));
    }

    public static final SubLObject delete_javalist_detail_alt(SubLObject result) {
        {
            SubLObject datum = result;
            SubLObject current = datum;
            SubLObject arg_position = NIL;
            SubLObject flat_list = NIL;
            SubLObject groves = NIL;
            destructuring_bind_must_consp(current, datum, $list_alt300);
            arg_position = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list_alt300);
            flat_list = current.first();
            current = current.rest();
            groves = current;
            {
                SubLObject cdolist_list_var = groves;
                SubLObject grove = NIL;
                for (grove = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , grove = cdolist_list_var.first()) {
                    {
                        SubLObject cdolist_list_var_129 = grove;
                        SubLObject tree = NIL;
                        for (tree = cdolist_list_var_129.first(); NIL != cdolist_list_var_129; cdolist_list_var_129 = cdolist_list_var_129.rest() , tree = cdolist_list_var_129.first()) {
                            com.cyc.cycjava.cycl.gke_main.delete_javalist_detail_from_tree(tree);
                        }
                    }
                }
            }
            rplacd(result, groves);
        }
        return result;
    }

    public static SubLObject delete_javalist_detail(final SubLObject result) {
        SubLObject arg_position = NIL;
        SubLObject flat_list = NIL;
        SubLObject groves = NIL;
        destructuring_bind_must_consp(result, result, gke_main.$list275);
        arg_position = result.first();
        SubLObject current = result.rest();
        destructuring_bind_must_consp(current, result, gke_main.$list275);
        flat_list = current.first();
        current = current.rest();
        SubLObject cdolist_list_var;
        groves = cdolist_list_var = current;
        SubLObject grove = NIL;
        grove = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject cdolist_list_var_$97 = grove;
            SubLObject tree = NIL;
            tree = cdolist_list_var_$97.first();
            while (NIL != cdolist_list_var_$97) {
                gke_main.delete_javalist_detail_from_tree(tree);
                cdolist_list_var_$97 = cdolist_list_var_$97.rest();
                tree = cdolist_list_var_$97.first();
            } 
            cdolist_list_var = cdolist_list_var.rest();
            grove = cdolist_list_var.first();
        } 
        rplacd(result, groves);
        return result;
    }

    public static final SubLObject delete_javalist_detail_from_tree_alt(SubLObject tree) {
        {
            SubLObject datum = tree;
            SubLObject current = datum;
            SubLObject root = NIL;
            SubLObject subtrees = NIL;
            destructuring_bind_must_consp(current, datum, $list_alt299);
            root = current.first();
            current = current.rest();
            subtrees = current;
            {
                SubLObject datum_130 = root;
                SubLObject current_131 = datum_130;
                SubLObject javalist = NIL;
                SubLObject v_term = NIL;
                destructuring_bind_must_consp(current_131, datum_130, $list_alt301);
                javalist = current_131.first();
                current_131 = current_131.rest();
                destructuring_bind_must_consp(current_131, datum_130, $list_alt301);
                v_term = current_131.first();
                current_131 = current_131.rest();
                if (NIL == current_131) {
                    rplaca(tree, v_term);
                } else {
                    cdestructuring_bind_error(datum_130, $list_alt301);
                }
            }
            {
                SubLObject cdolist_list_var = subtrees;
                SubLObject subtree = NIL;
                for (subtree = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , subtree = cdolist_list_var.first()) {
                    com.cyc.cycjava.cycl.gke_main.delete_javalist_detail_from_tree(subtree);
                }
            }
        }
        return tree;
    }

    public static SubLObject delete_javalist_detail_from_tree(final SubLObject tree) {
        SubLObject root = NIL;
        SubLObject subtrees = NIL;
        destructuring_bind_must_consp(tree, tree, gke_main.$list274);
        root = tree.first();
        final SubLObject current = subtrees = tree.rest();
        SubLObject current_$99;
        final SubLObject datum_$98 = current_$99 = root;
        SubLObject javalist = NIL;
        SubLObject v_term = NIL;
        destructuring_bind_must_consp(current_$99, datum_$98, gke_main.$list276);
        javalist = current_$99.first();
        current_$99 = current_$99.rest();
        destructuring_bind_must_consp(current_$99, datum_$98, gke_main.$list276);
        v_term = current_$99.first();
        current_$99 = current_$99.rest();
        if (NIL == current_$99) {
            rplaca(tree, v_term);
        } else {
            cdestructuring_bind_error(datum_$98, gke_main.$list276);
        }
        SubLObject cdolist_list_var = subtrees;
        SubLObject subtree = NIL;
        subtree = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            gke_main.delete_javalist_detail_from_tree(subtree);
            cdolist_list_var = cdolist_list_var.rest();
            subtree = cdolist_list_var.first();
        } 
        return tree;
    }

    public static final SubLObject test_candidate_replacement_renderers_for_vars_alt(SubLObject sentence1, SubLObject sentence2, SubLObject mt) {
        {
            SubLObject result1 = com.cyc.cycjava.cycl.gke_main.candidate_replacement_renderers_for_sentence(sentence1, narts_high.nart_substitute(mt), UNPROVIDED);
            SubLObject result2 = com.cyc.cycjava.cycl.gke_main.candidate_replacement_renderers_for_sentence(sentence2, narts_high.nart_substitute(mt), UNPROVIDED);
            return equal(result1, result2);
        }
    }

    public static SubLObject test_candidate_replacement_renderers_for_vars(final SubLObject sentence1, final SubLObject sentence2, final SubLObject mt) {
        final SubLObject result1 = gke_main.candidate_replacement_renderers_for_sentence(sentence1, narts_high.nart_substitute(mt), UNPROVIDED);
        final SubLObject result2 = gke_main.candidate_replacement_renderers_for_sentence(sentence2, narts_high.nart_substitute(mt), UNPROVIDED);
        return equal(result1, result2);
    }

    public static final SubLObject test_candidate_replacement_renderers_stumps_alt(SubLObject sentence, SubLObject mt) {
        {
            SubLObject old_value = $omit_suggestion_stumpsP$.getGlobalValue();
            SubLObject no_stumps = NIL;
            SubLObject stumps = NIL;
            $omit_suggestion_stumpsP$.setGlobalValue(T);
            no_stumps = com.cyc.cycjava.cycl.gke_main.test_candidate_replacement_renderers(sentence, mt);
            $omit_suggestion_stumpsP$.setGlobalValue(NIL);
            stumps = com.cyc.cycjava.cycl.gke_main.test_candidate_replacement_renderers(sentence, mt);
            $omit_suggestion_stumpsP$.setGlobalValue(old_value);
            return cycl_utilities.expression_transform(list(stumps, no_stumps), NART_P, NART_EL_FORMULA, UNPROVIDED, UNPROVIDED);
        }
    }

    public static SubLObject test_candidate_replacement_renderers_stumps(final SubLObject sentence, final SubLObject mt) {
        final SubLObject old_value = gke_main.$omit_suggestion_stumpsP$.getGlobalValue();
        SubLObject no_stumps = NIL;
        SubLObject stumps = NIL;
        gke_main.$omit_suggestion_stumpsP$.setGlobalValue(T);
        no_stumps = gke_main.test_candidate_replacement_renderers(sentence, mt, UNPROVIDED);
        gke_main.$omit_suggestion_stumpsP$.setGlobalValue(NIL);
        stumps = gke_main.test_candidate_replacement_renderers(sentence, mt, UNPROVIDED);
        gke_main.$omit_suggestion_stumpsP$.setGlobalValue(old_value);
        return cycl_utilities.expression_transform(list(stumps, no_stumps), NART_P, gke_main.NART_EL_FORMULA, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject nartify_and_substitute_term_into_sentence_alt(SubLObject v_term, SubLObject sentence, SubLObject arg_pos, SubLObject replace_all, SubLObject domain_mt, SubLObject try_coercionP, SubLObject allow_non_wffP, SubLObject optimize_var_namesP) {
        if (try_coercionP == UNPROVIDED) {
            try_coercionP = T;
        }
        if (allow_non_wffP == UNPROVIDED) {
            allow_non_wffP = NIL;
        }
        if (optimize_var_namesP == UNPROVIDED) {
            optimize_var_namesP = T;
        }
        return com.cyc.cycjava.cycl.gke_main.substitute_term_into_sentence(v_term, narts_high.nart_substitute(sentence), arg_pos, replace_all, domain_mt, try_coercionP, allow_non_wffP, optimize_var_namesP);
    }

    public static SubLObject nartify_and_substitute_term_into_sentence(final SubLObject v_term, final SubLObject sentence, final SubLObject arg_pos, final SubLObject replace_all, final SubLObject domain_mt, SubLObject try_coercionP, SubLObject allow_non_wffP, SubLObject optimize_var_namesP) {
        if (try_coercionP == UNPROVIDED) {
            try_coercionP = T;
        }
        if (allow_non_wffP == UNPROVIDED) {
            allow_non_wffP = NIL;
        }
        if (optimize_var_namesP == UNPROVIDED) {
            optimize_var_namesP = T;
        }
        return gke_main.substitute_term_into_sentence(v_term, narts_high.nart_substitute(sentence), arg_pos, replace_all, domain_mt, try_coercionP, allow_non_wffP, optimize_var_namesP);
    }

    public static final SubLObject declare_gke_main_file_alt() {
        declareFunction("get_gke_arg_options", "GET-GKE-ARG-OPTIONS", 7, 1, false);
        declareFunction("get_arg_option_isa_relation", "GET-ARG-OPTION-ISA-RELATION", 6, 0, false);
        declareFunction("get_arg_option_collection", "GET-ARG-OPTION-COLLECTION", 7, 0, false);
        declareFunction("get_arg_option_individual", "GET-ARG-OPTION-INDIVIDUAL", 6, 0, false);
        declareFunction("get_gke_expanded_items", "GET-GKE-EXPANDED-ITEMS", 3, 0, false);
        declareFunction("get_gke_combine_with_is_valid_substitution", "GET-GKE-COMBINE-WITH-IS-VALID-SUBSTITUTION", 3, 1, false);
        declareFunction("get_gke_cycl_formulas_for_nl_phrase", "GET-GKE-CYCL-FORMULAS-FOR-NL-PHRASE", 4, 0, false);
        declareFunction("get_gke_quantifiers", "GET-GKE-QUANTIFIERS", 0, 0, false);
        declareFunction("get_gke_quantifier_ranges", "GET-GKE-QUANTIFIER-RANGES", 0, 0, false);
        declareFunction("gke_list_item_comparator", "GKE-LIST-ITEM-COMPARATOR", 2, 0, false);
        declareFunction("gke_process_results", "GKE-PROCESS-RESULTS", 2, 2, false);
        declareFunction("get_gke_specs", "GET-GKE-SPECS", 5, 1, false);
        declareFunction("get_gke_genls", "GET-GKE-GENLS", 5, 0, false);
        declareFunction("get_gke_spec_preds", "GET-GKE-SPEC-PREDS", 5, 0, false);
        declareFunction("get_gke_genl_preds", "GET-GKE-GENL-PREDS", 5, 0, false);
        declareFunction("get_gke_collection_siblings", "GET-GKE-COLLECTION-SIBLINGS", 5, 0, false);
        declareFunction("get_gke_instance_siblings", "GET-GKE-INSTANCE-SIBLINGS", 5, 0, false);
        declareFunction("get_gke_siblings", "GET-GKE-SIBLINGS", 5, 0, false);
        declareFunction("add_self_to_quantify_over_isas", "ADD-SELF-TO-QUANTIFY-OVER-ISAS", 3, 0, false);
        declareFunction("get_gke_quantify_over_isas", "GET-GKE-QUANTIFY-OVER-ISAS", 4, 0, false);
        declareFunction("get_gke_isas", "GET-GKE-ISAS", 5, 0, false);
        declareFunction("clear_gke_isas_filtered_term", "CLEAR-GKE-ISAS-FILTERED-TERM", 0, 0, false);
        declareFunction("remove_gke_isas_filtered_term", "REMOVE-GKE-ISAS-FILTERED-TERM", 1, 1, false);
        declareFunction("gke_isas_filtered_term_internal", "GKE-ISAS-FILTERED-TERM-INTERNAL", 2, 0, false);
        declareFunction("gke_isas_filtered_term", "GKE-ISAS-FILTERED-TERM", 1, 1, false);
        declareFunction("clear_gke_filtered_termP", "CLEAR-GKE-FILTERED-TERM?", 0, 0, false);
        declareFunction("remove_gke_filtered_termP", "REMOVE-GKE-FILTERED-TERM?", 1, 1, false);
        declareFunction("gke_filtered_termP_internal", "GKE-FILTERED-TERM?-INTERNAL", 2, 0, false);
        declareFunction("gke_filtered_termP", "GKE-FILTERED-TERM?", 1, 1, false);
        declareFunction("clear_gke_predicate_filteredP", "CLEAR-GKE-PREDICATE-FILTERED?", 0, 0, false);
        declareFunction("remove_gke_predicate_filteredP", "REMOVE-GKE-PREDICATE-FILTERED?", 2, 0, false);
        declareFunction("gke_predicate_filteredP_internal", "GKE-PREDICATE-FILTERED?-INTERNAL", 2, 0, false);
        declareFunction("gke_predicate_filteredP", "GKE-PREDICATE-FILTERED?", 2, 0, false);
        declareFunction("terms_pass_constraints", "TERMS-PASS-CONSTRAINTS", 4, 0, false);
        declareFunction("operator_terms_pass_constraints", "OPERATOR-TERMS-PASS-CONSTRAINTS", 4, 0, false);
        declareFunction("argument_terms_pass_constraints", "ARGUMENT-TERMS-PASS-CONSTRAINTS", 4, 0, false);
        declareFunction("argument_terms_pass_isa_genls_constraints", "ARGUMENT-TERMS-PASS-ISA-GENLS-CONSTRAINTS", 4, 0, false);
        declareFunction("get_gke_naut_arg_position", "GET-GKE-NAUT-ARG-POSITION", 3, 0, false);
        declareFunction("get_gke_is_known", "GET-GKE-IS-KNOWN", 2, 0, false);
        declareFunction("simulate_gke_query_paraphrase", "SIMULATE-GKE-QUERY-PARAPHRASE", 1, 3, false);
        declareFunction("simulate_ccf_paraphrase", "SIMULATE-CCF-PARAPHRASE", 1, 2, false);
        declareFunction("simulate_ccf3_paraphrase", "SIMULATE-CCF3-PARAPHRASE", 1, 2, false);
        declareFunction("simulate_gke_query_paraphrase_terse", "SIMULATE-GKE-QUERY-PARAPHRASE-TERSE", 3, 0, false);
        declareFunction("simulate_gke_query_paraphrase_verbose", "SIMULATE-GKE-QUERY-PARAPHRASE-VERBOSE", 3, 0, false);
        declareFunction("simulate_gke3_query_paraphrase", "SIMULATE-GKE3-QUERY-PARAPHRASE", 1, 3, false);
        declareFunction("simulate_gke3_paraphrase_guts", "SIMULATE-GKE3-PARAPHRASE-GUTS", 2, 0, false);
        declareFunction("gke3_paraphrase_open_vars", "GKE3-PARAPHRASE-OPEN-VARS", 3, 0, false);
        declareFunction("gke3_paraphrase_guts_int", "GKE3-PARAPHRASE-GUTS-INT", 3, 1, false);
        declareFunction("starts_with_gke3_connectiveP", "STARTS-WITH-GKE3-CONNECTIVE?", 1, 0, false);
        declareFunction("gke3_string_for_conjunction", "GKE3-STRING-FOR-CONJUNCTION", 1, 0, false);
        declareFunction("simulate_gke_term_paraphrase", "SIMULATE-GKE-TERM-PARAPHRASE", 1, 2, false);
        declareFunction("gke_add_cloned_literal", "GKE-ADD-CLONED-LITERAL", 3, 1, false);
        declareFunction("gke_strengthen_query_sentence", "GKE-STRENGTHEN-QUERY-SENTENCE", 3, 0, false);
        declareFunction("gke_remove_literal", "GKE-REMOVE-LITERAL", 3, 0, false);
        declareFunction("gke_find_literal_to_clone", "GKE-FIND-LITERAL-TO-CLONE", 2, 0, false);
        declareFunction("gke_find_literal_to_remove", "GKE-FIND-LITERAL-TO-REMOVE", 2, 0, false);
        declareFunction("gke_find_literal_to_strengthen", "GKE-FIND-LITERAL-TO-STRENGTHEN", 2, 0, false);
        declareFunction("gke_find_literal_for_arg_position", "GKE-FIND-LITERAL-FOR-ARG-POSITION", 2, 0, false);
        declareFunction("gke_add_literal", "GKE-ADD-LITERAL", 4, 0, false);
        declareFunction("gke_get_siblings", "GKE-GET-SIBLINGS", 3, 0, false);
        declareFunction("gke_formula_arg_position", "GKE-FORMULA-ARG-POSITION", 2, 1, false);
        declareFunction("gke_formula_arg_position_subst", "GKE-FORMULA-ARG-POSITION-SUBST", 3, 0, false);
        declareFunction("loosen_gke_literal", "LOOSEN-GKE-LITERAL", 1, 1, false);
        declareFunction("strengthen_gke_literal", "STRENGTHEN-GKE-LITERAL", 1, 1, false);
        declareFunction("reformulator_settings_for_gke", "REFORMULATOR-SETTINGS-FOR-GKE", 1, 0, false);
        declareFunction("sentence_substitution_wffP", "SENTENCE-SUBSTITUTION-WFF?", 2, 0, false);
        declareFunction("free_variable", "FREE-VARIABLE", 2, 0, false);
        declareFunction("existentially_boundP", "EXISTENTIALLY-BOUND?", 2, 0, false);
        declareFunction("possible_sentence_substitutions", "POSSIBLE-SENTENCE-SUBSTITUTIONS", 5, 8, false);
        declareFunction("formula_arg_pos_isa_constraint", "FORMULA-ARG-POS-ISA-CONSTRAINT", 3, 0, false);
        declareFunction("substitute_term_into_sentence", "SUBSTITUTE-TERM-INTO-SENTENCE", 5, 3, false);
        declareFunction("substitute_terms_into_sentence", "SUBSTITUTE-TERMS-INTO-SENTENCE", 6, 0, false);
        declareFunction("substitute_term_into_sentence_int", "SUBSTITUTE-TERM-INTO-SENTENCE-INT", 6, 0, false);
        declareFunction("coerce_term_into_sentence", "COERCE-TERM-INTO-SENTENCE", 5, 1, false);
        declareFunction("test_cae_user_query_replacements", "TEST-CAE-USER-QUERY-REPLACEMENTS", 0, 0, false);
        declareFunction("clear_gke_memoization_state", "CLEAR-GKE-MEMOIZATION-STATE", 0, 0, false);
        declareFunction("remove_gke_memoization_state", "REMOVE-GKE-MEMOIZATION-STATE", 0, 0, false);
        declareFunction("gke_memoization_state_internal", "GKE-MEMOIZATION-STATE-INTERNAL", 0, 0, false);
        declareFunction("gke_memoization_state", "GKE-MEMOIZATION-STATE", 0, 0, false);
        declareFunction("gke_gloss_for_literal", "GKE-GLOSS-FOR-LITERAL", 1, 2, false);
        declareFunction("get_gke_gloss_from_kb", "GET-GKE-GLOSS-FROM-KB", 3, 0, false);
        declareFunction("clear_generate_gke_gloss_wrt_mt_cached", "CLEAR-GENERATE-GKE-GLOSS-WRT-MT-CACHED", 0, 0, false);
        declareFunction("remove_generate_gke_gloss_wrt_mt_cached", "REMOVE-GENERATE-GKE-GLOSS-WRT-MT-CACHED", 3, 0, false);
        declareFunction("generate_gke_gloss_wrt_mt_cached_internal", "GENERATE-GKE-GLOSS-WRT-MT-CACHED-INTERNAL", 3, 0, false);
        declareFunction("generate_gke_gloss_wrt_mt_cached", "GENERATE-GKE-GLOSS-WRT-MT-CACHED", 3, 0, false);
        declareFunction("candidate_replacement_renderers_for_sentence", "CANDIDATE-REPLACEMENT-RENDERERS-FOR-SENTENCE", 2, 1, false);
        declareFunction("candidate_replacements_for_variables", "CANDIDATE-REPLACEMENTS-FOR-VARIABLES", 2, 0, false);
        declareFunction("candidate_replacements_for_sentence", "CANDIDATE-REPLACEMENTS-FOR-SENTENCE", 2, 0, false);
        declareFunction("clear_candidate_replacements_for_sentence_cached", "CLEAR-CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED", 0, 0, false);
        declareFunction("remove_candidate_replacements_for_sentence_cached", "REMOVE-CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED", 2, 0, false);
        declareFunction("candidate_replacements_for_sentence_cached_internal", "CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED-INTERNAL", 2, 0, false);
        declareFunction("candidate_replacements_for_sentence_cached", "CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED", 2, 0, false);
        declareFunction("add_candidate_replacements", "ADD-CANDIDATE-REPLACEMENTS", 5, 0, false);
        declareFunction("clear_gke_get_elements", "CLEAR-GKE-GET-ELEMENTS", 0, 0, false);
        declareFunction("remove_gke_get_elements", "REMOVE-GKE-GET-ELEMENTS", 3, 0, false);
        declareFunction("gke_get_elements_internal", "GKE-GET-ELEMENTS-INTERNAL", 3, 0, false);
        declareFunction("gke_get_elements", "GKE-GET-ELEMENTS", 3, 0, false);
        declareFunction("replacement_renderer_groves", "REPLACEMENT-RENDERER-GROVES", 4, 0, false);
        declareFunction("find_table_to_conflate_to", "FIND-TABLE-TO-CONFLATE-TO", 3, 0, false);
        declareFunction("replacement_tree_print_function_trampoline", "REPLACEMENT-TREE-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        declareFunction("replacement_tree_p", "REPLACEMENT-TREE-P", 1, 0, false);
        new com.cyc.cycjava.cycl.gke_main.$replacement_tree_p$UnaryFunction();
        declareFunction("r_tree_root", "R-TREE-ROOT", 1, 0, false);
        declareFunction("r_tree_children", "R-TREE-CHILDREN", 1, 0, false);
        declareFunction("_csetf_r_tree_root", "_CSETF-R-TREE-ROOT", 2, 0, false);
        declareFunction("_csetf_r_tree_children", "_CSETF-R-TREE-CHILDREN", 2, 0, false);
        declareFunction("make_replacement_tree", "MAKE-REPLACEMENT-TREE", 0, 1, false);
        declareFunction("print_replacement_tree", "PRINT-REPLACEMENT-TREE", 3, 0, false);
        declareFunction("new_replacement_tree", "NEW-REPLACEMENT-TREE", 1, 1, false);
        declareFunction("replacement_tree_root", "REPLACEMENT-TREE-ROOT", 1, 0, false);
        declareFunction("replacement_tree_children", "REPLACEMENT-TREE-CHILDREN", 1, 0, false);
        declareFunction("replacement_tree_add_child", "REPLACEMENT-TREE-ADD-CHILD", 2, 0, false);
        declareFunction("replacement_renderer_grove", "REPLACEMENT-RENDERER-GROVE", 2, 0, false);
        declareFunction("replacement_renderer_grove_recursive", "REPLACEMENT-RENDERER-GROVE-RECURSIVE", 3, 0, false);
        declareFunction("add_one_renderer", "ADD-ONE-RENDERER", 4, 0, false);
        declareFunction("renderer_tree_contains_rendererP", "RENDERER-TREE-CONTAINS-RENDERER?", 4, 1, false);
        declareFunction("break_replacement_renderer_cycles", "BREAK-REPLACEMENT-RENDERER-CYCLES", 2, 0, false);
        declareFunction("listy_replacement_tree", "LISTY-REPLACEMENT-TREE", 2, 0, false);
        declareFunction("postpone_adding_replacementP", "POSTPONE-ADDING-REPLACEMENT?", 3, 0, false);
        declareFunction("replacement_renderer_tree_specifications", "REPLACEMENT-RENDERER-TREE-SPECIFICATIONS", 3, 0, false);
        declareFunction("replacement_renderer_tree_conflation_preds", "REPLACEMENT-RENDERER-TREE-CONFLATION-PREDS", 3, 0, false);
        declareFunction("renderer_to_superiors_table", "RENDERER-TO-SUPERIORS-TABLE", 5, 1, false);
        declareFunction("superiors_for_renderer_term", "SUPERIORS-FOR-RENDERER-TERM", 5, 0, false);
        declareFunction("gke_subst_nl_for_inference_answer", "GKE-SUBST-NL-FOR-INFERENCE-ANSWER", 1, 0, false);
        declareFunction("gke_subst_nl_for_binding", "GKE-SUBST-NL-FOR-BINDING", 1, 0, false);
        declareFunction("el_binding_list_to_gke_binding_list", "EL-BINDING-LIST-TO-GKE-BINDING-LIST", 2, 0, false);
        declareFunction("el_binding_to_gke_binding", "EL-BINDING-TO-GKE-BINDING", 1, 0, false);
        declareFunction("variable_to_nl_string", "VARIABLE-TO-NL-STRING", 1, 0, false);
        declareFunction("gke_start_continuable_query", "GKE-START-CONTINUABLE-QUERY", 2, 1, false);
        declareFunction("gke_warn", "GKE-WARN", 1, 0, false);
        declareFunction("gke_continue_query", "GKE-CONTINUE-QUERY", 3, 1, false);
        declareFunction("new_gke_process", "NEW-GKE-PROCESS", 3, 1, false);
        declareFunction("new_results_daemon", "NEW-RESULTS-DAEMON", 3, 0, false);
        declareFunction("results_daemon", "RESULTS-DAEMON", 4, 0, false);
        declareFunction("daemon_should_run", "DAEMON-SHOULD-RUN", 2, 0, false);
        declareFunction("gke_run_inference", "GKE-RUN-INFERENCE", 4, 1, false);
        declareFunction("gke_get_one_inference_result", "GKE-GET-ONE-INFERENCE-RESULT", 2, 0, false);
        declareFunction("gke_get_inference_results", "GKE-GET-INFERENCE-RESULTS", 2, 0, false);
        declareFunction("gke_inference_completeP", "GKE-INFERENCE-COMPLETE?", 2, 0, false);
        declareFunction("gke_get_inference_status", "GKE-GET-INFERENCE-STATUS", 2, 0, false);
        declareFunction("gke_get_inference_suspend_status", "GKE-GET-INFERENCE-SUSPEND-STATUS", 2, 0, false);
        declareFunction("gke_stop_continuable_query", "GKE-STOP-CONTINUABLE-QUERY", 2, 1, false);
        declareFunction("gke_release_inference_resources", "GKE-RELEASE-INFERENCE-RESOURCES", 2, 0, false);
        declareFunction("null_or_integerp", "NULL-OR-INTEGERP", 1, 0, false);
        declareFunction("clear_cached_gke_functions", "CLEAR-CACHED-GKE-FUNCTIONS", 0, 0, false);
        declareFunction("gke_test_queries", "GKE-TEST-QUERIES", 1, 0, false);
        declareFunction("subloop_reserved_initialize_gke_literal_manipulation_test_case_class", "SUBLOOP-RESERVED-INITIALIZE-GKE-LITERAL-MANIPULATION-TEST-CASE-CLASS", 1, 0, false);
        declareFunction("subloop_reserved_initialize_gke_literal_manipulation_test_case_instance", "SUBLOOP-RESERVED-INITIALIZE-GKE-LITERAL-MANIPULATION-TEST-CASE-INSTANCE", 1, 0, false);
        declareFunction("gke_literal_manipulation_test_case_p", "GKE-LITERAL-MANIPULATION-TEST-CASE-P", 1, 0, false);
        declareFunction("candidate_replacements_equalP", "CANDIDATE-REPLACEMENTS-EQUAL?", 2, 0, false);
        declareFunction("test_candidate_replacements", "TEST-CANDIDATE-REPLACEMENTS", 2, 0, false);
        declareFunction("test_candidate_replacement_renderers", "TEST-CANDIDATE-REPLACEMENT-RENDERERS", 2, 0, false);
        declareFunction("remove_javalist_detail", "REMOVE-JAVALIST-DETAIL", 1, 0, false);
        declareFunction("sort_result", "SORT-RESULT", 1, 0, false);
        declareFunction("sort_groves", "SORT-GROVES", 1, 0, false);
        declareFunction("sort_grove", "SORT-GROVE", 1, 0, false);
        declareFunction("sort_tree", "SORT-TREE", 1, 0, false);
        declareFunction("delete_javalist_detail", "DELETE-JAVALIST-DETAIL", 1, 0, false);
        declareFunction("delete_javalist_detail_from_tree", "DELETE-JAVALIST-DETAIL-FROM-TREE", 1, 0, false);
        declareFunction("test_candidate_replacement_renderers_for_vars", "TEST-CANDIDATE-REPLACEMENT-RENDERERS-FOR-VARS", 3, 0, false);
        declareFunction("test_candidate_replacement_renderers_stumps", "TEST-CANDIDATE-REPLACEMENT-RENDERERS-STUMPS", 2, 0, false);
        declareFunction("nartify_and_substitute_term_into_sentence", "NARTIFY-AND-SUBSTITUTE-TERM-INTO-SENTENCE", 5, 3, false);
        return NIL;
    }

    public static SubLObject declare_gke_main_file() {
        if (SubLFiles.USE_V1) {
            declareFunction("get_gke_arg_options", "GET-GKE-ARG-OPTIONS", 7, 1, false);
            declareFunction("get_arg_option_isa_relation", "GET-ARG-OPTION-ISA-RELATION", 6, 0, false);
            declareFunction("get_arg_option_collection", "GET-ARG-OPTION-COLLECTION", 7, 0, false);
            declareFunction("get_arg_option_individual", "GET-ARG-OPTION-INDIVIDUAL", 6, 0, false);
            declareFunction("get_gke_expanded_items", "GET-GKE-EXPANDED-ITEMS", 3, 0, false);
            declareFunction("get_gke_combine_with_is_valid_substitution", "GET-GKE-COMBINE-WITH-IS-VALID-SUBSTITUTION", 3, 1, false);
            declareFunction("get_gke_cycl_formulas_for_nl_phrase", "GET-GKE-CYCL-FORMULAS-FOR-NL-PHRASE", 4, 0, false);
            declareFunction("get_gke_quantifiers", "GET-GKE-QUANTIFIERS", 0, 0, false);
            declareFunction("get_gke_quantifier_ranges", "GET-GKE-QUANTIFIER-RANGES", 0, 0, false);
            declareFunction("gke_list_item_comparator", "GKE-LIST-ITEM-COMPARATOR", 2, 0, false);
            declareFunction("gke_process_results", "GKE-PROCESS-RESULTS", 2, 2, false);
            declareFunction("get_gke_specs", "GET-GKE-SPECS", 5, 1, false);
            declareFunction("get_gke_genls", "GET-GKE-GENLS", 5, 0, false);
            declareFunction("get_gke_spec_preds", "GET-GKE-SPEC-PREDS", 5, 0, false);
            declareFunction("get_gke_genl_preds", "GET-GKE-GENL-PREDS", 5, 0, false);
            declareFunction("get_gke_collection_siblings", "GET-GKE-COLLECTION-SIBLINGS", 5, 0, false);
            declareFunction("get_gke_instance_siblings", "GET-GKE-INSTANCE-SIBLINGS", 5, 0, false);
            declareFunction("get_gke_siblings", "GET-GKE-SIBLINGS", 5, 0, false);
            declareFunction("add_self_to_quantify_over_isas", "ADD-SELF-TO-QUANTIFY-OVER-ISAS", 3, 0, false);
            declareFunction("get_gke_quantify_over_isas", "GET-GKE-QUANTIFY-OVER-ISAS", 4, 0, false);
            declareFunction("get_gke_isas", "GET-GKE-ISAS", 5, 0, false);
            declareFunction("clear_gke_isas_filtered_term", "CLEAR-GKE-ISAS-FILTERED-TERM", 0, 0, false);
            declareFunction("remove_gke_isas_filtered_term", "REMOVE-GKE-ISAS-FILTERED-TERM", 1, 1, false);
            declareFunction("gke_isas_filtered_term_internal", "GKE-ISAS-FILTERED-TERM-INTERNAL", 2, 0, false);
            declareFunction("gke_isas_filtered_term", "GKE-ISAS-FILTERED-TERM", 1, 1, false);
            declareFunction("clear_gke_filtered_termP", "CLEAR-GKE-FILTERED-TERM?", 0, 0, false);
            declareFunction("remove_gke_filtered_termP", "REMOVE-GKE-FILTERED-TERM?", 1, 1, false);
            declareFunction("gke_filtered_termP_internal", "GKE-FILTERED-TERM?-INTERNAL", 2, 0, false);
            declareFunction("gke_filtered_termP", "GKE-FILTERED-TERM?", 1, 1, false);
            declareFunction("clear_gke_predicate_filteredP", "CLEAR-GKE-PREDICATE-FILTERED?", 0, 0, false);
            declareFunction("remove_gke_predicate_filteredP", "REMOVE-GKE-PREDICATE-FILTERED?", 2, 0, false);
            declareFunction("gke_predicate_filteredP_internal", "GKE-PREDICATE-FILTERED?-INTERNAL", 2, 0, false);
            declareFunction("gke_predicate_filteredP", "GKE-PREDICATE-FILTERED?", 2, 0, false);
            declareFunction("terms_pass_constraints", "TERMS-PASS-CONSTRAINTS", 4, 0, false);
            declareFunction("operator_terms_pass_constraints", "OPERATOR-TERMS-PASS-CONSTRAINTS", 4, 0, false);
            declareFunction("argument_terms_pass_constraints", "ARGUMENT-TERMS-PASS-CONSTRAINTS", 4, 0, false);
            declareFunction("argument_terms_pass_isa_genls_constraints", "ARGUMENT-TERMS-PASS-ISA-GENLS-CONSTRAINTS", 4, 0, false);
            declareFunction("get_gke_naut_arg_position", "GET-GKE-NAUT-ARG-POSITION", 3, 0, false);
            declareFunction("get_gke_is_known", "GET-GKE-IS-KNOWN", 2, 0, false);
            declareFunction("simulate_gke_query_paraphrase", "SIMULATE-GKE-QUERY-PARAPHRASE", 1, 3, false);
            declareFunction("simulate_ccf_paraphrase", "SIMULATE-CCF-PARAPHRASE", 1, 2, false);
            declareFunction("simulate_ccf3_paraphrase", "SIMULATE-CCF3-PARAPHRASE", 1, 2, false);
            declareFunction("simulate_gke_query_paraphrase_terse", "SIMULATE-GKE-QUERY-PARAPHRASE-TERSE", 3, 0, false);
            declareFunction("simulate_gke_query_paraphrase_verbose", "SIMULATE-GKE-QUERY-PARAPHRASE-VERBOSE", 3, 0, false);
            declareFunction("simulate_gke3_query_paraphrase", "SIMULATE-GKE3-QUERY-PARAPHRASE", 1, 3, false);
            declareFunction("simulate_gke3_paraphrase_guts", "SIMULATE-GKE3-PARAPHRASE-GUTS", 2, 0, false);
            declareFunction("gke3_paraphrase_open_vars", "GKE3-PARAPHRASE-OPEN-VARS", 3, 0, false);
            declareFunction("gke3_paraphrase_guts_int", "GKE3-PARAPHRASE-GUTS-INT", 3, 1, false);
            declareFunction("starts_with_gke3_connectiveP", "STARTS-WITH-GKE3-CONNECTIVE?", 1, 0, false);
            declareFunction("gke3_string_for_conjunction", "GKE3-STRING-FOR-CONJUNCTION", 1, 0, false);
            declareFunction("simulate_gke_term_paraphrase", "SIMULATE-GKE-TERM-PARAPHRASE", 1, 2, false);
            declareFunction("gke_add_cloned_literal", "GKE-ADD-CLONED-LITERAL", 3, 1, false);
            declareFunction("gke_strengthen_query_sentence", "GKE-STRENGTHEN-QUERY-SENTENCE", 3, 0, false);
            declareFunction("gke_remove_literal", "GKE-REMOVE-LITERAL", 3, 0, false);
            declareFunction("gke_find_literal_to_clone", "GKE-FIND-LITERAL-TO-CLONE", 2, 0, false);
            declareFunction("gke_find_literal_to_remove", "GKE-FIND-LITERAL-TO-REMOVE", 2, 0, false);
            declareFunction("gke_find_literal_to_strengthen", "GKE-FIND-LITERAL-TO-STRENGTHEN", 2, 0, false);
            declareFunction("gke_find_literal_for_arg_position", "GKE-FIND-LITERAL-FOR-ARG-POSITION", 2, 0, false);
            declareFunction("gke_add_literal", "GKE-ADD-LITERAL", 4, 0, false);
            declareFunction("gke_get_siblings", "GKE-GET-SIBLINGS", 3, 0, false);
            declareFunction("gke_formula_arg_position", "GKE-FORMULA-ARG-POSITION", 2, 1, false);
            declareFunction("gke_formula_arg_position_subst", "GKE-FORMULA-ARG-POSITION-SUBST", 3, 0, false);
            declareFunction("loosen_gke_literal", "LOOSEN-GKE-LITERAL", 1, 1, false);
            declareFunction("strengthen_gke_literal", "STRENGTHEN-GKE-LITERAL", 1, 1, false);
            declareFunction("reformulator_settings_for_gke", "REFORMULATOR-SETTINGS-FOR-GKE", 1, 0, false);
            declareFunction("sentence_substitution_wffP", "SENTENCE-SUBSTITUTION-WFF?", 2, 0, false);
            declareFunction("free_variable", "FREE-VARIABLE", 2, 0, false);
            declareFunction("existentially_boundP", "EXISTENTIALLY-BOUND?", 2, 0, false);
            declareFunction("possible_sentence_substitutions", "POSSIBLE-SENTENCE-SUBSTITUTIONS", 5, 8, false);
            declareFunction("formula_arg_pos_isa_constraint", "FORMULA-ARG-POS-ISA-CONSTRAINT", 3, 0, false);
            declareFunction("substitute_term_into_sentence", "SUBSTITUTE-TERM-INTO-SENTENCE", 5, 3, false);
            declareFunction("substitute_terms_into_sentence", "SUBSTITUTE-TERMS-INTO-SENTENCE", 6, 0, false);
            declareFunction("substitute_term_into_sentence_int", "SUBSTITUTE-TERM-INTO-SENTENCE-INT", 6, 0, false);
            declareFunction("coerce_term_into_sentence", "COERCE-TERM-INTO-SENTENCE", 5, 1, false);
            declareFunction("clear_gke_memoization_state", "CLEAR-GKE-MEMOIZATION-STATE", 0, 0, false);
            declareFunction("remove_gke_memoization_state", "REMOVE-GKE-MEMOIZATION-STATE", 0, 0, false);
            declareFunction("gke_memoization_state_internal", "GKE-MEMOIZATION-STATE-INTERNAL", 0, 0, false);
            declareFunction("gke_memoization_state", "GKE-MEMOIZATION-STATE", 0, 0, false);
            declareFunction("gke_gloss_for_literal", "GKE-GLOSS-FOR-LITERAL", 1, 2, false);
            declareFunction("get_gke_gloss_from_kb", "GET-GKE-GLOSS-FROM-KB", 3, 0, false);
            declareFunction("clear_generate_gke_gloss_wrt_mt_cached", "CLEAR-GENERATE-GKE-GLOSS-WRT-MT-CACHED", 0, 0, false);
            declareFunction("remove_generate_gke_gloss_wrt_mt_cached", "REMOVE-GENERATE-GKE-GLOSS-WRT-MT-CACHED", 3, 0, false);
            declareFunction("generate_gke_gloss_wrt_mt_cached_internal", "GENERATE-GKE-GLOSS-WRT-MT-CACHED-INTERNAL", 3, 0, false);
            declareFunction("generate_gke_gloss_wrt_mt_cached", "GENERATE-GKE-GLOSS-WRT-MT-CACHED", 3, 0, false);
            declareFunction("candidate_replacement_renderers_for_sentence", "CANDIDATE-REPLACEMENT-RENDERERS-FOR-SENTENCE", 2, 1, false);
            declareFunction("candidate_replacements_for_variables", "CANDIDATE-REPLACEMENTS-FOR-VARIABLES", 2, 0, false);
            declareFunction("candidate_replacements_for_arg", "CANDIDATE-REPLACEMENTS-FOR-ARG", 3, 0, false);
            declareFunction("candidate_replacements_for_sentence", "CANDIDATE-REPLACEMENTS-FOR-SENTENCE", 2, 0, false);
            declareFunction("clear_candidate_replacements_for_sentence_cached", "CLEAR-CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED", 0, 0, false);
            declareFunction("remove_candidate_replacements_for_sentence_cached", "REMOVE-CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED", 2, 0, false);
            declareFunction("candidate_replacements_for_sentence_cached_internal", "CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED-INTERNAL", 2, 0, false);
            declareFunction("candidate_replacements_for_sentence_cached", "CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED", 2, 0, false);
            declareFunction("add_candidate_replacements", "ADD-CANDIDATE-REPLACEMENTS", 5, 0, false);
            declareFunction("candidate_replacement_join_function", "CANDIDATE-REPLACEMENT-JOIN-FUNCTION", 1, 0, false);
            declareFunction("clear_gke_get_elements", "CLEAR-GKE-GET-ELEMENTS", 0, 0, false);
            declareFunction("remove_gke_get_elements", "REMOVE-GKE-GET-ELEMENTS", 3, 0, false);
            declareFunction("gke_get_elements_internal", "GKE-GET-ELEMENTS-INTERNAL", 3, 0, false);
            declareFunction("gke_get_elements", "GKE-GET-ELEMENTS", 3, 0, false);
            declareFunction("replacement_renderer_groves", "REPLACEMENT-RENDERER-GROVES", 4, 0, false);
            declareFunction("find_table_to_conflate_to", "FIND-TABLE-TO-CONFLATE-TO", 3, 0, false);
            declareFunction("replacement_tree_print_function_trampoline", "REPLACEMENT-TREE-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
            declareFunction("replacement_tree_p", "REPLACEMENT-TREE-P", 1, 0, false);
            new gke_main.$replacement_tree_p$UnaryFunction();
            declareFunction("r_tree_root", "R-TREE-ROOT", 1, 0, false);
            declareFunction("r_tree_children", "R-TREE-CHILDREN", 1, 0, false);
            declareFunction("_csetf_r_tree_root", "_CSETF-R-TREE-ROOT", 2, 0, false);
            declareFunction("_csetf_r_tree_children", "_CSETF-R-TREE-CHILDREN", 2, 0, false);
            declareFunction("make_replacement_tree", "MAKE-REPLACEMENT-TREE", 0, 1, false);
            declareFunction("visit_defstruct_replacement_tree", "VISIT-DEFSTRUCT-REPLACEMENT-TREE", 2, 0, false);
            declareFunction("visit_defstruct_object_replacement_tree_method", "VISIT-DEFSTRUCT-OBJECT-REPLACEMENT-TREE-METHOD", 2, 0, false);
            declareFunction("print_replacement_tree", "PRINT-REPLACEMENT-TREE", 3, 0, false);
            declareFunction("new_replacement_tree", "NEW-REPLACEMENT-TREE", 1, 1, false);
            declareFunction("replacement_tree_root", "REPLACEMENT-TREE-ROOT", 1, 0, false);
            declareFunction("replacement_tree_children", "REPLACEMENT-TREE-CHILDREN", 1, 0, false);
            declareFunction("replacement_tree_add_child", "REPLACEMENT-TREE-ADD-CHILD", 2, 0, false);
            declareFunction("replacement_renderer_grove", "REPLACEMENT-RENDERER-GROVE", 2, 0, false);
            declareFunction("replacement_renderer_grove_recursive", "REPLACEMENT-RENDERER-GROVE-RECURSIVE", 3, 0, false);
            declareFunction("add_one_renderer", "ADD-ONE-RENDERER", 4, 0, false);
            declareFunction("renderer_tree_contains_rendererP", "RENDERER-TREE-CONTAINS-RENDERER?", 4, 1, false);
            declareFunction("break_replacement_renderer_cycles", "BREAK-REPLACEMENT-RENDERER-CYCLES", 2, 0, false);
            declareFunction("listy_replacement_tree", "LISTY-REPLACEMENT-TREE", 2, 0, false);
            declareFunction("postpone_adding_replacementP", "POSTPONE-ADDING-REPLACEMENT?", 3, 0, false);
            declareFunction("replacement_renderer_tree_specifications", "REPLACEMENT-RENDERER-TREE-SPECIFICATIONS", 3, 0, false);
            declareFunction("replacement_renderer_tree_conflation_preds", "REPLACEMENT-RENDERER-TREE-CONFLATION-PREDS", 3, 0, false);
            declareFunction("renderer_to_superiors_table", "RENDERER-TO-SUPERIORS-TABLE", 5, 1, false);
            declareFunction("superiors_for_renderer_term", "SUPERIORS-FOR-RENDERER-TERM", 5, 0, false);
            declareFunction("gke_subst_nl_for_inference_answer", "GKE-SUBST-NL-FOR-INFERENCE-ANSWER", 1, 0, false);
            declareFunction("gke_subst_nl_for_binding", "GKE-SUBST-NL-FOR-BINDING", 1, 0, false);
            declareFunction("el_binding_list_to_gke_binding_list", "EL-BINDING-LIST-TO-GKE-BINDING-LIST", 2, 0, false);
            declareFunction("el_binding_to_gke_binding", "EL-BINDING-TO-GKE-BINDING", 1, 0, false);
            declareFunction("variable_to_nl_string", "VARIABLE-TO-NL-STRING", 1, 0, false);
            declareFunction("gke_start_continuable_query", "GKE-START-CONTINUABLE-QUERY", 2, 1, false);
            declareFunction("gke_warn", "GKE-WARN", 1, 0, false);
            declareFunction("gke_continue_query", "GKE-CONTINUE-QUERY", 3, 1, false);
            declareFunction("new_gke_process", "NEW-GKE-PROCESS", 3, 1, false);
            declareFunction("new_results_daemon", "NEW-RESULTS-DAEMON", 3, 0, false);
            declareFunction("results_daemon", "RESULTS-DAEMON", 4, 0, false);
            declareFunction("daemon_should_run", "DAEMON-SHOULD-RUN", 2, 0, false);
            declareFunction("gke_run_inference", "GKE-RUN-INFERENCE", 4, 1, false);
            declareFunction("gke_get_one_inference_result", "GKE-GET-ONE-INFERENCE-RESULT", 2, 0, false);
            declareFunction("gke_get_inference_results", "GKE-GET-INFERENCE-RESULTS", 2, 0, false);
            declareFunction("gke_inference_completeP", "GKE-INFERENCE-COMPLETE?", 2, 0, false);
            declareFunction("gke_get_inference_status", "GKE-GET-INFERENCE-STATUS", 2, 0, false);
            declareFunction("gke_get_inference_suspend_status", "GKE-GET-INFERENCE-SUSPEND-STATUS", 2, 0, false);
            declareFunction("gke_stop_continuable_query", "GKE-STOP-CONTINUABLE-QUERY", 2, 1, false);
            declareFunction("gke_release_inference_resources", "GKE-RELEASE-INFERENCE-RESOURCES", 2, 0, false);
            declareFunction("null_or_integerp", "NULL-OR-INTEGERP", 1, 0, false);
            declareFunction("clear_cached_gke_functions", "CLEAR-CACHED-GKE-FUNCTIONS", 0, 0, false);
            declareFunction("gke_test_queries", "GKE-TEST-QUERIES", 1, 0, false);
            declareFunction("candidate_replacements_equalP", "CANDIDATE-REPLACEMENTS-EQUAL?", 2, 0, false);
            declareFunction("test_candidate_replacements", "TEST-CANDIDATE-REPLACEMENTS", 2, 0, false);
            declareFunction("test_candidate_replacement_renderers", "TEST-CANDIDATE-REPLACEMENT-RENDERERS", 2, 1, false);
            declareFunction("remove_javalist_detail", "REMOVE-JAVALIST-DETAIL", 1, 0, false);
            declareFunction("sort_result", "SORT-RESULT", 1, 0, false);
            declareFunction("sort_groves", "SORT-GROVES", 1, 0, false);
            declareFunction("sort_grove", "SORT-GROVE", 1, 0, false);
            declareFunction("sort_tree", "SORT-TREE", 1, 0, false);
            declareFunction("delete_javalist_detail", "DELETE-JAVALIST-DETAIL", 1, 0, false);
            declareFunction("delete_javalist_detail_from_tree", "DELETE-JAVALIST-DETAIL-FROM-TREE", 1, 0, false);
            declareFunction("test_candidate_replacement_renderers_for_vars", "TEST-CANDIDATE-REPLACEMENT-RENDERERS-FOR-VARS", 3, 0, false);
            declareFunction("test_candidate_replacement_renderers_stumps", "TEST-CANDIDATE-REPLACEMENT-RENDERERS-STUMPS", 2, 0, false);
            declareFunction("nartify_and_substitute_term_into_sentence", "NARTIFY-AND-SUBSTITUTE-TERM-INTO-SENTENCE", 5, 3, false);
        }
        if (SubLFiles.USE_V2) {
            declareFunction("test_cae_user_query_replacements", "TEST-CAE-USER-QUERY-REPLACEMENTS", 0, 0, false);
            declareFunction("subloop_reserved_initialize_gke_literal_manipulation_test_case_class", "SUBLOOP-RESERVED-INITIALIZE-GKE-LITERAL-MANIPULATION-TEST-CASE-CLASS", 1, 0, false);
            declareFunction("subloop_reserved_initialize_gke_literal_manipulation_test_case_instance", "SUBLOOP-RESERVED-INITIALIZE-GKE-LITERAL-MANIPULATION-TEST-CASE-INSTANCE", 1, 0, false);
            declareFunction("gke_literal_manipulation_test_case_p", "GKE-LITERAL-MANIPULATION-TEST-CASE-P", 1, 0, false);
            declareFunction("test_candidate_replacement_renderers", "TEST-CANDIDATE-REPLACEMENT-RENDERERS", 2, 0, false);
        }
        return NIL;
    }

    public static SubLObject declare_gke_main_file_Previous() {
        declareFunction("get_gke_arg_options", "GET-GKE-ARG-OPTIONS", 7, 1, false);
        declareFunction("get_arg_option_isa_relation", "GET-ARG-OPTION-ISA-RELATION", 6, 0, false);
        declareFunction("get_arg_option_collection", "GET-ARG-OPTION-COLLECTION", 7, 0, false);
        declareFunction("get_arg_option_individual", "GET-ARG-OPTION-INDIVIDUAL", 6, 0, false);
        declareFunction("get_gke_expanded_items", "GET-GKE-EXPANDED-ITEMS", 3, 0, false);
        declareFunction("get_gke_combine_with_is_valid_substitution", "GET-GKE-COMBINE-WITH-IS-VALID-SUBSTITUTION", 3, 1, false);
        declareFunction("get_gke_cycl_formulas_for_nl_phrase", "GET-GKE-CYCL-FORMULAS-FOR-NL-PHRASE", 4, 0, false);
        declareFunction("get_gke_quantifiers", "GET-GKE-QUANTIFIERS", 0, 0, false);
        declareFunction("get_gke_quantifier_ranges", "GET-GKE-QUANTIFIER-RANGES", 0, 0, false);
        declareFunction("gke_list_item_comparator", "GKE-LIST-ITEM-COMPARATOR", 2, 0, false);
        declareFunction("gke_process_results", "GKE-PROCESS-RESULTS", 2, 2, false);
        declareFunction("get_gke_specs", "GET-GKE-SPECS", 5, 1, false);
        declareFunction("get_gke_genls", "GET-GKE-GENLS", 5, 0, false);
        declareFunction("get_gke_spec_preds", "GET-GKE-SPEC-PREDS", 5, 0, false);
        declareFunction("get_gke_genl_preds", "GET-GKE-GENL-PREDS", 5, 0, false);
        declareFunction("get_gke_collection_siblings", "GET-GKE-COLLECTION-SIBLINGS", 5, 0, false);
        declareFunction("get_gke_instance_siblings", "GET-GKE-INSTANCE-SIBLINGS", 5, 0, false);
        declareFunction("get_gke_siblings", "GET-GKE-SIBLINGS", 5, 0, false);
        declareFunction("add_self_to_quantify_over_isas", "ADD-SELF-TO-QUANTIFY-OVER-ISAS", 3, 0, false);
        declareFunction("get_gke_quantify_over_isas", "GET-GKE-QUANTIFY-OVER-ISAS", 4, 0, false);
        declareFunction("get_gke_isas", "GET-GKE-ISAS", 5, 0, false);
        declareFunction("clear_gke_isas_filtered_term", "CLEAR-GKE-ISAS-FILTERED-TERM", 0, 0, false);
        declareFunction("remove_gke_isas_filtered_term", "REMOVE-GKE-ISAS-FILTERED-TERM", 1, 1, false);
        declareFunction("gke_isas_filtered_term_internal", "GKE-ISAS-FILTERED-TERM-INTERNAL", 2, 0, false);
        declareFunction("gke_isas_filtered_term", "GKE-ISAS-FILTERED-TERM", 1, 1, false);
        declareFunction("clear_gke_filtered_termP", "CLEAR-GKE-FILTERED-TERM?", 0, 0, false);
        declareFunction("remove_gke_filtered_termP", "REMOVE-GKE-FILTERED-TERM?", 1, 1, false);
        declareFunction("gke_filtered_termP_internal", "GKE-FILTERED-TERM?-INTERNAL", 2, 0, false);
        declareFunction("gke_filtered_termP", "GKE-FILTERED-TERM?", 1, 1, false);
        declareFunction("clear_gke_predicate_filteredP", "CLEAR-GKE-PREDICATE-FILTERED?", 0, 0, false);
        declareFunction("remove_gke_predicate_filteredP", "REMOVE-GKE-PREDICATE-FILTERED?", 2, 0, false);
        declareFunction("gke_predicate_filteredP_internal", "GKE-PREDICATE-FILTERED?-INTERNAL", 2, 0, false);
        declareFunction("gke_predicate_filteredP", "GKE-PREDICATE-FILTERED?", 2, 0, false);
        declareFunction("terms_pass_constraints", "TERMS-PASS-CONSTRAINTS", 4, 0, false);
        declareFunction("operator_terms_pass_constraints", "OPERATOR-TERMS-PASS-CONSTRAINTS", 4, 0, false);
        declareFunction("argument_terms_pass_constraints", "ARGUMENT-TERMS-PASS-CONSTRAINTS", 4, 0, false);
        declareFunction("argument_terms_pass_isa_genls_constraints", "ARGUMENT-TERMS-PASS-ISA-GENLS-CONSTRAINTS", 4, 0, false);
        declareFunction("get_gke_naut_arg_position", "GET-GKE-NAUT-ARG-POSITION", 3, 0, false);
        declareFunction("get_gke_is_known", "GET-GKE-IS-KNOWN", 2, 0, false);
        declareFunction("simulate_gke_query_paraphrase", "SIMULATE-GKE-QUERY-PARAPHRASE", 1, 3, false);
        declareFunction("simulate_ccf_paraphrase", "SIMULATE-CCF-PARAPHRASE", 1, 2, false);
        declareFunction("simulate_ccf3_paraphrase", "SIMULATE-CCF3-PARAPHRASE", 1, 2, false);
        declareFunction("simulate_gke_query_paraphrase_terse", "SIMULATE-GKE-QUERY-PARAPHRASE-TERSE", 3, 0, false);
        declareFunction("simulate_gke_query_paraphrase_verbose", "SIMULATE-GKE-QUERY-PARAPHRASE-VERBOSE", 3, 0, false);
        declareFunction("simulate_gke3_query_paraphrase", "SIMULATE-GKE3-QUERY-PARAPHRASE", 1, 3, false);
        declareFunction("simulate_gke3_paraphrase_guts", "SIMULATE-GKE3-PARAPHRASE-GUTS", 2, 0, false);
        declareFunction("gke3_paraphrase_open_vars", "GKE3-PARAPHRASE-OPEN-VARS", 3, 0, false);
        declareFunction("gke3_paraphrase_guts_int", "GKE3-PARAPHRASE-GUTS-INT", 3, 1, false);
        declareFunction("starts_with_gke3_connectiveP", "STARTS-WITH-GKE3-CONNECTIVE?", 1, 0, false);
        declareFunction("gke3_string_for_conjunction", "GKE3-STRING-FOR-CONJUNCTION", 1, 0, false);
        declareFunction("simulate_gke_term_paraphrase", "SIMULATE-GKE-TERM-PARAPHRASE", 1, 2, false);
        declareFunction("gke_add_cloned_literal", "GKE-ADD-CLONED-LITERAL", 3, 1, false);
        declareFunction("gke_strengthen_query_sentence", "GKE-STRENGTHEN-QUERY-SENTENCE", 3, 0, false);
        declareFunction("gke_remove_literal", "GKE-REMOVE-LITERAL", 3, 0, false);
        declareFunction("gke_find_literal_to_clone", "GKE-FIND-LITERAL-TO-CLONE", 2, 0, false);
        declareFunction("gke_find_literal_to_remove", "GKE-FIND-LITERAL-TO-REMOVE", 2, 0, false);
        declareFunction("gke_find_literal_to_strengthen", "GKE-FIND-LITERAL-TO-STRENGTHEN", 2, 0, false);
        declareFunction("gke_find_literal_for_arg_position", "GKE-FIND-LITERAL-FOR-ARG-POSITION", 2, 0, false);
        declareFunction("gke_add_literal", "GKE-ADD-LITERAL", 4, 0, false);
        declareFunction("gke_get_siblings", "GKE-GET-SIBLINGS", 3, 0, false);
        declareFunction("gke_formula_arg_position", "GKE-FORMULA-ARG-POSITION", 2, 1, false);
        declareFunction("gke_formula_arg_position_subst", "GKE-FORMULA-ARG-POSITION-SUBST", 3, 0, false);
        declareFunction("loosen_gke_literal", "LOOSEN-GKE-LITERAL", 1, 1, false);
        declareFunction("strengthen_gke_literal", "STRENGTHEN-GKE-LITERAL", 1, 1, false);
        declareFunction("reformulator_settings_for_gke", "REFORMULATOR-SETTINGS-FOR-GKE", 1, 0, false);
        declareFunction("sentence_substitution_wffP", "SENTENCE-SUBSTITUTION-WFF?", 2, 0, false);
        declareFunction("free_variable", "FREE-VARIABLE", 2, 0, false);
        declareFunction("existentially_boundP", "EXISTENTIALLY-BOUND?", 2, 0, false);
        declareFunction("possible_sentence_substitutions", "POSSIBLE-SENTENCE-SUBSTITUTIONS", 5, 8, false);
        declareFunction("formula_arg_pos_isa_constraint", "FORMULA-ARG-POS-ISA-CONSTRAINT", 3, 0, false);
        declareFunction("substitute_term_into_sentence", "SUBSTITUTE-TERM-INTO-SENTENCE", 5, 3, false);
        declareFunction("substitute_terms_into_sentence", "SUBSTITUTE-TERMS-INTO-SENTENCE", 6, 0, false);
        declareFunction("substitute_term_into_sentence_int", "SUBSTITUTE-TERM-INTO-SENTENCE-INT", 6, 0, false);
        declareFunction("coerce_term_into_sentence", "COERCE-TERM-INTO-SENTENCE", 5, 1, false);
        declareFunction("clear_gke_memoization_state", "CLEAR-GKE-MEMOIZATION-STATE", 0, 0, false);
        declareFunction("remove_gke_memoization_state", "REMOVE-GKE-MEMOIZATION-STATE", 0, 0, false);
        declareFunction("gke_memoization_state_internal", "GKE-MEMOIZATION-STATE-INTERNAL", 0, 0, false);
        declareFunction("gke_memoization_state", "GKE-MEMOIZATION-STATE", 0, 0, false);
        declareFunction("gke_gloss_for_literal", "GKE-GLOSS-FOR-LITERAL", 1, 2, false);
        declareFunction("get_gke_gloss_from_kb", "GET-GKE-GLOSS-FROM-KB", 3, 0, false);
        declareFunction("clear_generate_gke_gloss_wrt_mt_cached", "CLEAR-GENERATE-GKE-GLOSS-WRT-MT-CACHED", 0, 0, false);
        declareFunction("remove_generate_gke_gloss_wrt_mt_cached", "REMOVE-GENERATE-GKE-GLOSS-WRT-MT-CACHED", 3, 0, false);
        declareFunction("generate_gke_gloss_wrt_mt_cached_internal", "GENERATE-GKE-GLOSS-WRT-MT-CACHED-INTERNAL", 3, 0, false);
        declareFunction("generate_gke_gloss_wrt_mt_cached", "GENERATE-GKE-GLOSS-WRT-MT-CACHED", 3, 0, false);
        declareFunction("candidate_replacement_renderers_for_sentence", "CANDIDATE-REPLACEMENT-RENDERERS-FOR-SENTENCE", 2, 1, false);
        declareFunction("candidate_replacements_for_variables", "CANDIDATE-REPLACEMENTS-FOR-VARIABLES", 2, 0, false);
        declareFunction("candidate_replacements_for_arg", "CANDIDATE-REPLACEMENTS-FOR-ARG", 3, 0, false);
        declareFunction("candidate_replacements_for_sentence", "CANDIDATE-REPLACEMENTS-FOR-SENTENCE", 2, 0, false);
        declareFunction("clear_candidate_replacements_for_sentence_cached", "CLEAR-CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED", 0, 0, false);
        declareFunction("remove_candidate_replacements_for_sentence_cached", "REMOVE-CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED", 2, 0, false);
        declareFunction("candidate_replacements_for_sentence_cached_internal", "CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED-INTERNAL", 2, 0, false);
        declareFunction("candidate_replacements_for_sentence_cached", "CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED", 2, 0, false);
        declareFunction("add_candidate_replacements", "ADD-CANDIDATE-REPLACEMENTS", 5, 0, false);
        declareFunction("candidate_replacement_join_function", "CANDIDATE-REPLACEMENT-JOIN-FUNCTION", 1, 0, false);
        declareFunction("clear_gke_get_elements", "CLEAR-GKE-GET-ELEMENTS", 0, 0, false);
        declareFunction("remove_gke_get_elements", "REMOVE-GKE-GET-ELEMENTS", 3, 0, false);
        declareFunction("gke_get_elements_internal", "GKE-GET-ELEMENTS-INTERNAL", 3, 0, false);
        declareFunction("gke_get_elements", "GKE-GET-ELEMENTS", 3, 0, false);
        declareFunction("replacement_renderer_groves", "REPLACEMENT-RENDERER-GROVES", 4, 0, false);
        declareFunction("find_table_to_conflate_to", "FIND-TABLE-TO-CONFLATE-TO", 3, 0, false);
        declareFunction("replacement_tree_print_function_trampoline", "REPLACEMENT-TREE-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        declareFunction("replacement_tree_p", "REPLACEMENT-TREE-P", 1, 0, false);
        new gke_main.$replacement_tree_p$UnaryFunction();
        declareFunction("r_tree_root", "R-TREE-ROOT", 1, 0, false);
        declareFunction("r_tree_children", "R-TREE-CHILDREN", 1, 0, false);
        declareFunction("_csetf_r_tree_root", "_CSETF-R-TREE-ROOT", 2, 0, false);
        declareFunction("_csetf_r_tree_children", "_CSETF-R-TREE-CHILDREN", 2, 0, false);
        declareFunction("make_replacement_tree", "MAKE-REPLACEMENT-TREE", 0, 1, false);
        declareFunction("visit_defstruct_replacement_tree", "VISIT-DEFSTRUCT-REPLACEMENT-TREE", 2, 0, false);
        declareFunction("visit_defstruct_object_replacement_tree_method", "VISIT-DEFSTRUCT-OBJECT-REPLACEMENT-TREE-METHOD", 2, 0, false);
        declareFunction("print_replacement_tree", "PRINT-REPLACEMENT-TREE", 3, 0, false);
        declareFunction("new_replacement_tree", "NEW-REPLACEMENT-TREE", 1, 1, false);
        declareFunction("replacement_tree_root", "REPLACEMENT-TREE-ROOT", 1, 0, false);
        declareFunction("replacement_tree_children", "REPLACEMENT-TREE-CHILDREN", 1, 0, false);
        declareFunction("replacement_tree_add_child", "REPLACEMENT-TREE-ADD-CHILD", 2, 0, false);
        declareFunction("replacement_renderer_grove", "REPLACEMENT-RENDERER-GROVE", 2, 0, false);
        declareFunction("replacement_renderer_grove_recursive", "REPLACEMENT-RENDERER-GROVE-RECURSIVE", 3, 0, false);
        declareFunction("add_one_renderer", "ADD-ONE-RENDERER", 4, 0, false);
        declareFunction("renderer_tree_contains_rendererP", "RENDERER-TREE-CONTAINS-RENDERER?", 4, 1, false);
        declareFunction("break_replacement_renderer_cycles", "BREAK-REPLACEMENT-RENDERER-CYCLES", 2, 0, false);
        declareFunction("listy_replacement_tree", "LISTY-REPLACEMENT-TREE", 2, 0, false);
        declareFunction("postpone_adding_replacementP", "POSTPONE-ADDING-REPLACEMENT?", 3, 0, false);
        declareFunction("replacement_renderer_tree_specifications", "REPLACEMENT-RENDERER-TREE-SPECIFICATIONS", 3, 0, false);
        declareFunction("replacement_renderer_tree_conflation_preds", "REPLACEMENT-RENDERER-TREE-CONFLATION-PREDS", 3, 0, false);
        declareFunction("renderer_to_superiors_table", "RENDERER-TO-SUPERIORS-TABLE", 5, 1, false);
        declareFunction("superiors_for_renderer_term", "SUPERIORS-FOR-RENDERER-TERM", 5, 0, false);
        declareFunction("gke_subst_nl_for_inference_answer", "GKE-SUBST-NL-FOR-INFERENCE-ANSWER", 1, 0, false);
        declareFunction("gke_subst_nl_for_binding", "GKE-SUBST-NL-FOR-BINDING", 1, 0, false);
        declareFunction("el_binding_list_to_gke_binding_list", "EL-BINDING-LIST-TO-GKE-BINDING-LIST", 2, 0, false);
        declareFunction("el_binding_to_gke_binding", "EL-BINDING-TO-GKE-BINDING", 1, 0, false);
        declareFunction("variable_to_nl_string", "VARIABLE-TO-NL-STRING", 1, 0, false);
        declareFunction("gke_start_continuable_query", "GKE-START-CONTINUABLE-QUERY", 2, 1, false);
        declareFunction("gke_warn", "GKE-WARN", 1, 0, false);
        declareFunction("gke_continue_query", "GKE-CONTINUE-QUERY", 3, 1, false);
        declareFunction("new_gke_process", "NEW-GKE-PROCESS", 3, 1, false);
        declareFunction("new_results_daemon", "NEW-RESULTS-DAEMON", 3, 0, false);
        declareFunction("results_daemon", "RESULTS-DAEMON", 4, 0, false);
        declareFunction("daemon_should_run", "DAEMON-SHOULD-RUN", 2, 0, false);
        declareFunction("gke_run_inference", "GKE-RUN-INFERENCE", 4, 1, false);
        declareFunction("gke_get_one_inference_result", "GKE-GET-ONE-INFERENCE-RESULT", 2, 0, false);
        declareFunction("gke_get_inference_results", "GKE-GET-INFERENCE-RESULTS", 2, 0, false);
        declareFunction("gke_inference_completeP", "GKE-INFERENCE-COMPLETE?", 2, 0, false);
        declareFunction("gke_get_inference_status", "GKE-GET-INFERENCE-STATUS", 2, 0, false);
        declareFunction("gke_get_inference_suspend_status", "GKE-GET-INFERENCE-SUSPEND-STATUS", 2, 0, false);
        declareFunction("gke_stop_continuable_query", "GKE-STOP-CONTINUABLE-QUERY", 2, 1, false);
        declareFunction("gke_release_inference_resources", "GKE-RELEASE-INFERENCE-RESOURCES", 2, 0, false);
        declareFunction("null_or_integerp", "NULL-OR-INTEGERP", 1, 0, false);
        declareFunction("clear_cached_gke_functions", "CLEAR-CACHED-GKE-FUNCTIONS", 0, 0, false);
        declareFunction("gke_test_queries", "GKE-TEST-QUERIES", 1, 0, false);
        declareFunction("candidate_replacements_equalP", "CANDIDATE-REPLACEMENTS-EQUAL?", 2, 0, false);
        declareFunction("test_candidate_replacements", "TEST-CANDIDATE-REPLACEMENTS", 2, 0, false);
        declareFunction("test_candidate_replacement_renderers", "TEST-CANDIDATE-REPLACEMENT-RENDERERS", 2, 1, false);
        declareFunction("remove_javalist_detail", "REMOVE-JAVALIST-DETAIL", 1, 0, false);
        declareFunction("sort_result", "SORT-RESULT", 1, 0, false);
        declareFunction("sort_groves", "SORT-GROVES", 1, 0, false);
        declareFunction("sort_grove", "SORT-GROVE", 1, 0, false);
        declareFunction("sort_tree", "SORT-TREE", 1, 0, false);
        declareFunction("delete_javalist_detail", "DELETE-JAVALIST-DETAIL", 1, 0, false);
        declareFunction("delete_javalist_detail_from_tree", "DELETE-JAVALIST-DETAIL-FROM-TREE", 1, 0, false);
        declareFunction("test_candidate_replacement_renderers_for_vars", "TEST-CANDIDATE-REPLACEMENT-RENDERERS-FOR-VARS", 3, 0, false);
        declareFunction("test_candidate_replacement_renderers_stumps", "TEST-CANDIDATE-REPLACEMENT-RENDERERS-STUMPS", 2, 0, false);
        declareFunction("nartify_and_substitute_term_into_sentence", "NARTIFY-AND-SUBSTITUTE-TERM-INTO-SENTENCE", 5, 3, false);
        return NIL;
    }

    public static final SubLObject init_gke_main_file_alt() {
        deflexical("*GKE-ISAS-FILTERED-TERM-CACHING-STATE*", NIL);
        deflexical("*GKE-OVERLY-GENERAL-NON-PREDICATE-TYPES*", $list_alt29);
        deflexical("*GKE-FILTERED-TERM?-CACHING-STATE*", NIL);
        deflexical("*GKE-OVERLY-GENERAL-PREDICATE-TYPES*", $list_alt31);
        deflexical("*GKE-PREDICATE-FILTERED?-CACHING-STATE*", NIL);
        defparameter("*USE-RBP-WFF-IN-GKE?*", T);
        deflexical("*GKE-MEMOIZATION-STATE-CACHING-STATE*", NIL);
        deflexical("*GENERATE-GKE-GLOSS-WRT-MT-CACHED-CACHING-STATE*", NIL);
        deflexical("*CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED-CACHING-STATE*", NIL);
        deflexical("*GKE-GET-ELEMENTS-CACHING-STATE*", NIL);
        deflexical("*OMIT-SUGGESTION-STUMPS?*", NIL != boundp($omit_suggestion_stumpsP$) ? ((SubLObject) ($omit_suggestion_stumpsP$.getGlobalValue())) : NIL);
        defconstant("*DTP-REPLACEMENT-TREE*", REPLACEMENT_TREE);
        deflexical("*USE-TVA-FOR-SUGGESTIONS?*", NIL != boundp($use_tva_for_suggestionsP$) ? ((SubLObject) ($use_tva_for_suggestionsP$.getGlobalValue())) : NIL);
        defparameter("*DEFAULT-PATIENCE-WAIT-TIME*", TWO_INTEGER);
        defparameter("*GKE-QUERY-THREADS*", make_hash_table(FIVE_INTEGER, symbol_function(EQUAL), UNPROVIDED));
        deflexical("*DAEMON-SHOULD-RUN-INFERENCE-STATUSES*", $list_alt224);
        deflexical("*GKE-RUN-INFERENCE-WITH-ADJUSTED-DYNAMIC-PROPERTIES?*", NIL);
        deflexical("*INFERENCE-DONE-STATUSES*", $list_alt237);
        return NIL;
    }

    public static SubLObject init_gke_main_file() {
        if (SubLFiles.USE_V1) {
            deflexical("*GKE-ISAS-FILTERED-TERM-CACHING-STATE*", NIL);
            deflexical("*GKE-OVERLY-GENERAL-NON-PREDICATE-TYPES*", gke_main.$list27);
            deflexical("*GKE-FILTERED-TERM?-CACHING-STATE*", NIL);
            deflexical("*GKE-OVERLY-GENERAL-PREDICATE-TYPES*", gke_main.$list29);
            deflexical("*GKE-PREDICATE-FILTERED?-CACHING-STATE*", NIL);
            defparameter("*USE-RBP-WFF-IN-GKE?*", T);
            deflexical("*GKE-MEMOIZATION-STATE-CACHING-STATE*", NIL);
            deflexical("*GENERATE-GKE-GLOSS-WRT-MT-CACHED-CACHING-STATE*", NIL);
            deflexical("*CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED-CACHING-STATE*", NIL);
            deflexical("*GKE-GET-ELEMENTS-CACHING-STATE*", NIL);
            deflexical("*OMIT-SUGGESTION-STUMPS?*", SubLTrampolineFile.maybeDefault(gke_main.$omit_suggestion_stumpsP$, gke_main.$omit_suggestion_stumpsP$, NIL));
            defconstant("*DTP-REPLACEMENT-TREE*", gke_main.REPLACEMENT_TREE);
            deflexical("*USE-TVA-FOR-SUGGESTIONS?*", SubLTrampolineFile.maybeDefault(gke_main.$use_tva_for_suggestionsP$, gke_main.$use_tva_for_suggestionsP$, NIL));
            defparameter("*DEFAULT-PATIENCE-WAIT-TIME*", TWO_INTEGER);
            defparameter("*GKE-QUERY-THREADS*", make_hash_table(FIVE_INTEGER, symbol_function(EQUAL), UNPROVIDED));
            deflexical("*DAEMON-SHOULD-RUN-INFERENCE-STATUSES*", gke_main.$list220);
            deflexical("*GKE-RUN-INFERENCE-WITH-ADJUSTED-DYNAMIC-PROPERTIES?*", NIL);
            deflexical("*INFERENCE-DONE-STATUSES*", gke_main.$list233);
        }
        if (SubLFiles.USE_V2) {
            deflexical("*GKE-OVERLY-GENERAL-NON-PREDICATE-TYPES*", $list_alt29);
            deflexical("*GKE-OVERLY-GENERAL-PREDICATE-TYPES*", $list_alt31);
            deflexical("*OMIT-SUGGESTION-STUMPS?*", NIL != boundp($omit_suggestion_stumpsP$) ? ((SubLObject) ($omit_suggestion_stumpsP$.getGlobalValue())) : NIL);
            deflexical("*USE-TVA-FOR-SUGGESTIONS?*", NIL != boundp($use_tva_for_suggestionsP$) ? ((SubLObject) ($use_tva_for_suggestionsP$.getGlobalValue())) : NIL);
            deflexical("*DAEMON-SHOULD-RUN-INFERENCE-STATUSES*", $list_alt224);
            deflexical("*INFERENCE-DONE-STATUSES*", $list_alt237);
        }
        return NIL;
    }

    public static SubLObject init_gke_main_file_Previous() {
        deflexical("*GKE-ISAS-FILTERED-TERM-CACHING-STATE*", NIL);
        deflexical("*GKE-OVERLY-GENERAL-NON-PREDICATE-TYPES*", gke_main.$list27);
        deflexical("*GKE-FILTERED-TERM?-CACHING-STATE*", NIL);
        deflexical("*GKE-OVERLY-GENERAL-PREDICATE-TYPES*", gke_main.$list29);
        deflexical("*GKE-PREDICATE-FILTERED?-CACHING-STATE*", NIL);
        defparameter("*USE-RBP-WFF-IN-GKE?*", T);
        deflexical("*GKE-MEMOIZATION-STATE-CACHING-STATE*", NIL);
        deflexical("*GENERATE-GKE-GLOSS-WRT-MT-CACHED-CACHING-STATE*", NIL);
        deflexical("*CANDIDATE-REPLACEMENTS-FOR-SENTENCE-CACHED-CACHING-STATE*", NIL);
        deflexical("*GKE-GET-ELEMENTS-CACHING-STATE*", NIL);
        deflexical("*OMIT-SUGGESTION-STUMPS?*", SubLTrampolineFile.maybeDefault(gke_main.$omit_suggestion_stumpsP$, gke_main.$omit_suggestion_stumpsP$, NIL));
        defconstant("*DTP-REPLACEMENT-TREE*", gke_main.REPLACEMENT_TREE);
        deflexical("*USE-TVA-FOR-SUGGESTIONS?*", SubLTrampolineFile.maybeDefault(gke_main.$use_tva_for_suggestionsP$, gke_main.$use_tva_for_suggestionsP$, NIL));
        defparameter("*DEFAULT-PATIENCE-WAIT-TIME*", TWO_INTEGER);
        defparameter("*GKE-QUERY-THREADS*", make_hash_table(FIVE_INTEGER, symbol_function(EQUAL), UNPROVIDED));
        deflexical("*DAEMON-SHOULD-RUN-INFERENCE-STATUSES*", gke_main.$list220);
        deflexical("*GKE-RUN-INFERENCE-WITH-ADJUSTED-DYNAMIC-PROPERTIES?*", NIL);
        deflexical("*INFERENCE-DONE-STATUSES*", gke_main.$list233);
        return NIL;
    }

    public static final SubLObject setup_gke_main_file_alt() {
        register_external_symbol(GET_GKE_ARG_OPTIONS);
        register_external_symbol(GET_GKE_EXPANDED_ITEMS);
        register_cyc_api_function(GET_GKE_QUANTIFIER_RANGES, NIL, $$$Get_the_quantifier_ranges, NIL, NIL);
        memoization_state.note_globally_cached_function(GKE_ISAS_FILTERED_TERM);
        memoization_state.note_globally_cached_function($sym20$GKE_FILTERED_TERM_);
        memoization_state.note_globally_cached_function($sym32$GKE_PREDICATE_FILTERED_);
        register_external_symbol(GET_GKE_NAUT_ARG_POSITION);
        register_external_symbol(GET_GKE_IS_KNOWN);
        register_external_symbol(GKE_ADD_CLONED_LITERAL);
        register_external_symbol(GKE_REMOVE_LITERAL);
        register_external_symbol(POSSIBLE_SENTENCE_SUBSTITUTIONS);
        register_external_symbol(SUBSTITUTE_TERM_INTO_SENTENCE);
        memoization_state.note_globally_cached_function(GKE_MEMOIZATION_STATE);
        register_external_symbol(GKE_GLOSS_FOR_LITERAL);
        memoization_state.note_globally_cached_function(GENERATE_GKE_GLOSS_WRT_MT_CACHED);
        register_external_symbol(CANDIDATE_REPLACEMENT_RENDERERS_FOR_SENTENCE);
        register_external_symbol(CANDIDATE_REPLACEMENTS_FOR_VARIABLES);
        memoization_state.note_globally_cached_function(CANDIDATE_REPLACEMENTS_FOR_SENTENCE_CACHED);
        memoization_state.note_globally_cached_function(GKE_GET_ELEMENTS);
        declare_defglobal($omit_suggestion_stumpsP$);
        register_method($print_object_method_table$.getGlobalValue(), $dtp_replacement_tree$.getGlobalValue(), symbol_function(REPLACEMENT_TREE_PRINT_FUNCTION_TRAMPOLINE));
        def_csetf(R_TREE_ROOT, _CSETF_R_TREE_ROOT);
        def_csetf(R_TREE_CHILDREN, _CSETF_R_TREE_CHILDREN);
        identity(REPLACEMENT_TREE);
        note_funcall_helper_function(PRINT_REPLACEMENT_TREE);
        declare_defglobal($use_tva_for_suggestionsP$);
        register_cyc_api_function(GKE_START_CONTINUABLE_QUERY, $list_alt205, $str_alt206$Setup_a_query__and_immediately_re, $list_alt207, NIL);
        register_cyc_api_function(GKE_CONTINUE_QUERY, $list_alt213, $str_alt214$Continue_an_existing_query__ident, $list_alt215, NIL);
        register_cyc_api_function(GKE_GET_ONE_INFERENCE_RESULT, $list_alt229, $$$Get_one_inference_result, $list_alt231, NIL);
        register_cyc_api_function(GKE_GET_INFERENCE_RESULTS, $list_alt229, $str_alt235$get_all_the_inference_results_so_, $list_alt236, NIL);
        register_cyc_api_function($sym238$GKE_INFERENCE_COMPLETE_, $list_alt229, $str_alt239$ret_t_iff_inference_is_suspended_, $list_alt231, NIL);
        register_cyc_api_function(GKE_GET_INFERENCE_STATUS, $list_alt229, $$$get_the_status_of_the_inference, $list_alt231, NIL);
        register_cyc_api_function(GKE_GET_INFERENCE_SUSPEND_STATUS, $list_alt229, $str_alt243$get_the_suspend_status_of_the_inf, $list_alt231, NIL);
        register_cyc_api_function(GKE_STOP_CONTINUABLE_QUERY, $list_alt246, $str_alt247$Find_and_stop_the_inference_, $list_alt248, NIL);
        register_cyc_api_function(GKE_RELEASE_INFERENCE_RESOURCES, $list_alt229, $str_alt250$Destroy_problem_store_and_inferen, $list_alt231, NIL);
        register_external_symbol(GKE_TEST_QUERIES);
        sunit_external.define_test_category($str_alt256$GKE_Query_Sentence_Literal_Manipu, UNPROVIDED);
        sunit_macros.$current_module_sunit_tests$.setDynamicValue(cons(GKE_LITERAL_MANIPULATION_TEST_CASE, sunit_macros.$current_module_sunit_tests$.getDynamicValue()));
        sunit_macros.define_test_case_preamble(GKE_LITERAL_MANIPULATION_TEST_CASE);
        classes.subloop_new_class(GKE_LITERAL_MANIPULATION_TEST_CASE, TEST_CASE, NIL, NIL, $list_alt259);
        classes.class_set_implements_slot_listeners(GKE_LITERAL_MANIPULATION_TEST_CASE, NIL);
        classes.subloop_note_class_initialization_function(GKE_LITERAL_MANIPULATION_TEST_CASE, $sym268$SUBLOOP_RESERVED_INITIALIZE_GKE_LITERAL_MANIPULATION_TEST_CASE_CL);
        classes.subloop_note_instance_initialization_function(GKE_LITERAL_MANIPULATION_TEST_CASE, $sym273$SUBLOOP_RESERVED_INITIALIZE_GKE_LITERAL_MANIPULATION_TEST_CASE_IN);
        com.cyc.cycjava.cycl.gke_main.subloop_reserved_initialize_gke_literal_manipulation_test_case_class(GKE_LITERAL_MANIPULATION_TEST_CASE);
        sunit_macros.define_test_case_postamble(GKE_LITERAL_MANIPULATION_TEST_CASE, $str_alt274$gke_main, $$$cycl, $list_alt276);
        sunit_macros.def_test_method_register(GKE_LITERAL_MANIPULATION_TEST_CASE, TEST_STRENGTHENING);
        sunit_macros.def_test_method_register(GKE_LITERAL_MANIPULATION_TEST_CASE, TEST_LITERAL_REMOVAL);
        sunit_macros.def_test_method_register(GKE_LITERAL_MANIPULATION_TEST_CASE, TEST_LITERAL_ADDITION);
        sunit_external.define_test_suite($$$GKE_Main_Test_Suite, $list_alt276, UNPROVIDED, UNPROVIDED);
        define_test_case_table_int(TEST_CANDIDATE_REPLACEMENTS, list(new SubLObject[]{ $TEST, $sym283$CANDIDATE_REPLACEMENTS_EQUAL_, $OWNER, $$$baxter, $CLASSES, $list_alt287, $KB, $FULL, $WORKING_, NIL }), $list_alt291);
        define_test_case_table_int(TEST_CANDIDATE_REPLACEMENT_RENDERERS_FOR_VARS, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, $$$daves, $CLASSES, $list_alt287, $KB, $FULL, $WORKING_, T }), $list_alt304);
        define_test_case_table_int(TEST_CANDIDATE_REPLACEMENT_RENDERERS_STUMPS, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, $$$baxter, $CLASSES, $list_alt287, $KB, $FULL, $WORKING_, NIL }), $list_alt306);
        define_test_case_table_int(TEST_CANDIDATE_REPLACEMENT_RENDERERS, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, $$$baxter, $CLASSES, $list_alt287, $KB, $FULL, $WORKING_, NIL }), $list_alt308);
        define_test_case_table_int(NARTIFY_AND_SUBSTITUTE_TERM_INTO_SENTENCE, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, $$$baxter, $CLASSES, $list_alt287, $KB, $FULL, $WORKING_, T }), $list_alt310);
        define_test_case_table_int(SUBSTITUTE_TERM_INTO_SENTENCE, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, $$$baxter, $CLASSES, $list_alt287, $KB, $FULL, $WORKING_, T }), $list_alt311);
        return NIL;
    }

    public static SubLObject setup_gke_main_file() {
        if (SubLFiles.USE_V1) {
            register_external_symbol(gke_main.GET_GKE_ARG_OPTIONS);
            register_external_symbol(gke_main.GET_GKE_EXPANDED_ITEMS);
            register_cyc_api_function(gke_main.GET_GKE_QUANTIFIER_RANGES, NIL, gke_main.$$$Get_the_quantifier_ranges, NIL, NIL);
            memoization_state.note_globally_cached_function(gke_main.GKE_ISAS_FILTERED_TERM);
            memoization_state.note_globally_cached_function(gke_main.$sym19$GKE_FILTERED_TERM_);
            memoization_state.note_globally_cached_function(gke_main.$sym30$GKE_PREDICATE_FILTERED_);
            register_external_symbol(gke_main.GET_GKE_NAUT_ARG_POSITION);
            register_external_symbol(gke_main.GET_GKE_IS_KNOWN);
            register_external_symbol(gke_main.GKE_ADD_CLONED_LITERAL);
            register_external_symbol(gke_main.GKE_REMOVE_LITERAL);
            register_external_symbol(gke_main.POSSIBLE_SENTENCE_SUBSTITUTIONS);
            register_external_symbol(gke_main.SUBSTITUTE_TERM_INTO_SENTENCE);
            memoization_state.note_globally_cached_function(gke_main.GKE_MEMOIZATION_STATE);
            register_external_symbol(gke_main.GKE_GLOSS_FOR_LITERAL);
            memoization_state.note_globally_cached_function(gke_main.GENERATE_GKE_GLOSS_WRT_MT_CACHED);
            register_external_symbol(gke_main.CANDIDATE_REPLACEMENT_RENDERERS_FOR_SENTENCE);
            register_external_symbol(gke_main.CANDIDATE_REPLACEMENTS_FOR_VARIABLES);
            register_external_symbol(gke_main.CANDIDATE_REPLACEMENTS_FOR_ARG);
            memoization_state.note_globally_cached_function(gke_main.CANDIDATE_REPLACEMENTS_FOR_SENTENCE_CACHED);
            memoization_state.note_globally_cached_function(gke_main.GKE_GET_ELEMENTS);
            declare_defglobal(gke_main.$omit_suggestion_stumpsP$);
            register_method($print_object_method_table$.getGlobalValue(), gke_main.$dtp_replacement_tree$.getGlobalValue(), symbol_function(gke_main.REPLACEMENT_TREE_PRINT_FUNCTION_TRAMPOLINE));
            SubLSpecialOperatorDeclarations.proclaim(gke_main.$list149);
            def_csetf(gke_main.R_TREE_ROOT, gke_main._CSETF_R_TREE_ROOT);
            def_csetf(gke_main.R_TREE_CHILDREN, gke_main._CSETF_R_TREE_CHILDREN);
            identity(gke_main.REPLACEMENT_TREE);
            register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), gke_main.$dtp_replacement_tree$.getGlobalValue(), symbol_function(gke_main.VISIT_DEFSTRUCT_OBJECT_REPLACEMENT_TREE_METHOD));
            note_funcall_helper_function(gke_main.PRINT_REPLACEMENT_TREE);
            declare_defglobal(gke_main.$use_tva_for_suggestionsP$);
            register_cyc_api_function(gke_main.GKE_START_CONTINUABLE_QUERY, gke_main.$list201, gke_main.$str202$Setup_a_query__and_immediately_re, gke_main.$list203, NIL);
            register_cyc_api_function(gke_main.GKE_CONTINUE_QUERY, gke_main.$list209, gke_main.$str210$Continue_an_existing_query__ident, gke_main.$list211, NIL);
            register_cyc_api_function(gke_main.GKE_GET_ONE_INFERENCE_RESULT, gke_main.$list225, gke_main.$$$Get_one_inference_result, gke_main.$list227, NIL);
            register_cyc_api_function(gke_main.GKE_GET_INFERENCE_RESULTS, gke_main.$list225, gke_main.$str231$get_all_the_inference_results_so_, gke_main.$list232, NIL);
            register_cyc_api_function(gke_main.$sym234$GKE_INFERENCE_COMPLETE_, gke_main.$list225, gke_main.$str235$ret_t_iff_inference_is_suspended_, gke_main.$list227, NIL);
            register_cyc_api_function(gke_main.GKE_GET_INFERENCE_STATUS, gke_main.$list225, gke_main.$$$get_the_status_of_the_inference, gke_main.$list227, NIL);
            register_cyc_api_function(gke_main.GKE_GET_INFERENCE_SUSPEND_STATUS, gke_main.$list225, gke_main.$str239$get_the_suspend_status_of_the_inf, gke_main.$list227, NIL);
            register_cyc_api_function(gke_main.GKE_STOP_CONTINUABLE_QUERY, gke_main.$list242, gke_main.$str243$Find_and_stop_the_inference_, gke_main.$list244, NIL);
            register_cyc_api_function(gke_main.GKE_RELEASE_INFERENCE_RESOURCES, gke_main.$list225, gke_main.$str246$Destroy_problem_store_and_inferen, gke_main.$list227, NIL);
            register_external_symbol(gke_main.GKE_TEST_QUERIES);
            sunit_external.define_test_category(gke_main.$str252$GKE_Query_Sentence_Literal_Manipu, UNPROVIDED);
            sunit_external.define_test_suite(gke_main.$$$GKE_Main_Test_Suite, gke_main.$list254, UNPROVIDED, UNPROVIDED);
            define_test_case_table_int(gke_main.TEST_CANDIDATE_REPLACEMENTS, list(new SubLObject[]{ $TEST, gke_main.$sym257$CANDIDATE_REPLACEMENTS_EQUAL_, $OWNER, NIL, $CLASSES, gke_main.$list260, $KB, $FULL, $WORKING_, T }), gke_main.$list264);
            define_test_case_table_int(gke_main.TEST_CANDIDATE_REPLACEMENT_RENDERERS_FOR_VARS, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, NIL, $CLASSES, gke_main.$list260, $KB, $FULL, $WORKING_, T }), gke_main.$list278);
            define_test_case_table_int(gke_main.TEST_CANDIDATE_REPLACEMENT_RENDERERS_STUMPS, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, NIL, $CLASSES, gke_main.$list260, $KB, $FULL, $WORKING_, T }), gke_main.$list280);
            define_test_case_table_int(gke_main.TEST_CANDIDATE_REPLACEMENT_RENDERERS, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, NIL, $CLASSES, gke_main.$list260, $KB, $FULL, $WORKING_, T }), gke_main.$list282);
            define_test_case_table_int(gke_main.NARTIFY_AND_SUBSTITUTE_TERM_INTO_SENTENCE, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, NIL, $CLASSES, gke_main.$list260, $KB, $FULL, $WORKING_, T }), gke_main.$list284);
            define_test_case_table_int(gke_main.SUBSTITUTE_TERM_INTO_SENTENCE, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, NIL, $CLASSES, gke_main.$list260, $KB, $FULL, $WORKING_, T }), gke_main.$list285);
        }
        if (SubLFiles.USE_V2) {
            memoization_state.note_globally_cached_function($sym20$GKE_FILTERED_TERM_);
            memoization_state.note_globally_cached_function($sym32$GKE_PREDICATE_FILTERED_);
            declare_defglobal($omit_suggestion_stumpsP$);
            declare_defglobal($use_tva_for_suggestionsP$);
            register_cyc_api_function(GKE_START_CONTINUABLE_QUERY, $list_alt205, $str_alt206$Setup_a_query__and_immediately_re, $list_alt207, NIL);
            register_cyc_api_function(GKE_CONTINUE_QUERY, $list_alt213, $str_alt214$Continue_an_existing_query__ident, $list_alt215, NIL);
            register_cyc_api_function(GKE_GET_ONE_INFERENCE_RESULT, $list_alt229, $$$Get_one_inference_result, $list_alt231, NIL);
            register_cyc_api_function(GKE_GET_INFERENCE_RESULTS, $list_alt229, $str_alt235$get_all_the_inference_results_so_, $list_alt236, NIL);
            register_cyc_api_function($sym238$GKE_INFERENCE_COMPLETE_, $list_alt229, $str_alt239$ret_t_iff_inference_is_suspended_, $list_alt231, NIL);
            register_cyc_api_function(GKE_GET_INFERENCE_STATUS, $list_alt229, $$$get_the_status_of_the_inference, $list_alt231, NIL);
            register_cyc_api_function(GKE_GET_INFERENCE_SUSPEND_STATUS, $list_alt229, $str_alt243$get_the_suspend_status_of_the_inf, $list_alt231, NIL);
            register_cyc_api_function(GKE_STOP_CONTINUABLE_QUERY, $list_alt246, $str_alt247$Find_and_stop_the_inference_, $list_alt248, NIL);
            register_cyc_api_function(GKE_RELEASE_INFERENCE_RESOURCES, $list_alt229, $str_alt250$Destroy_problem_store_and_inferen, $list_alt231, NIL);
            sunit_external.define_test_category($str_alt256$GKE_Query_Sentence_Literal_Manipu, UNPROVIDED);
            sunit_macros.$current_module_sunit_tests$.setDynamicValue(cons(GKE_LITERAL_MANIPULATION_TEST_CASE, sunit_macros.$current_module_sunit_tests$.getDynamicValue()));
            sunit_macros.define_test_case_preamble(GKE_LITERAL_MANIPULATION_TEST_CASE);
            classes.subloop_new_class(GKE_LITERAL_MANIPULATION_TEST_CASE, TEST_CASE, NIL, NIL, $list_alt259);
            classes.class_set_implements_slot_listeners(GKE_LITERAL_MANIPULATION_TEST_CASE, NIL);
            classes.subloop_note_class_initialization_function(GKE_LITERAL_MANIPULATION_TEST_CASE, $sym268$SUBLOOP_RESERVED_INITIALIZE_GKE_LITERAL_MANIPULATION_TEST_CASE_CL);
            classes.subloop_note_instance_initialization_function(GKE_LITERAL_MANIPULATION_TEST_CASE, $sym273$SUBLOOP_RESERVED_INITIALIZE_GKE_LITERAL_MANIPULATION_TEST_CASE_IN);
            com.cyc.cycjava.cycl.gke_main.subloop_reserved_initialize_gke_literal_manipulation_test_case_class(GKE_LITERAL_MANIPULATION_TEST_CASE);
            sunit_macros.define_test_case_postamble(GKE_LITERAL_MANIPULATION_TEST_CASE, $str_alt274$gke_main, $$$cycl, $list_alt276);
            sunit_macros.def_test_method_register(GKE_LITERAL_MANIPULATION_TEST_CASE, TEST_STRENGTHENING);
            sunit_macros.def_test_method_register(GKE_LITERAL_MANIPULATION_TEST_CASE, TEST_LITERAL_REMOVAL);
            sunit_macros.def_test_method_register(GKE_LITERAL_MANIPULATION_TEST_CASE, TEST_LITERAL_ADDITION);
            sunit_external.define_test_suite($$$GKE_Main_Test_Suite, $list_alt276, UNPROVIDED, UNPROVIDED);
            define_test_case_table_int(TEST_CANDIDATE_REPLACEMENTS, list(new SubLObject[]{ $TEST, $sym283$CANDIDATE_REPLACEMENTS_EQUAL_, $OWNER, $$$baxter, $CLASSES, $list_alt287, $KB, $FULL, $WORKING_, NIL }), $list_alt291);
            define_test_case_table_int(TEST_CANDIDATE_REPLACEMENT_RENDERERS_FOR_VARS, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, $$$daves, $CLASSES, $list_alt287, $KB, $FULL, $WORKING_, T }), $list_alt304);
            define_test_case_table_int(TEST_CANDIDATE_REPLACEMENT_RENDERERS_STUMPS, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, $$$baxter, $CLASSES, $list_alt287, $KB, $FULL, $WORKING_, NIL }), $list_alt306);
            define_test_case_table_int(TEST_CANDIDATE_REPLACEMENT_RENDERERS, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, $$$baxter, $CLASSES, $list_alt287, $KB, $FULL, $WORKING_, NIL }), $list_alt308);
            define_test_case_table_int(NARTIFY_AND_SUBSTITUTE_TERM_INTO_SENTENCE, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, $$$baxter, $CLASSES, $list_alt287, $KB, $FULL, $WORKING_, T }), $list_alt310);
            define_test_case_table_int(SUBSTITUTE_TERM_INTO_SENTENCE, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, $$$baxter, $CLASSES, $list_alt287, $KB, $FULL, $WORKING_, T }), $list_alt311);
        }
        return NIL;
    }

    public static SubLObject setup_gke_main_file_Previous() {
        register_external_symbol(gke_main.GET_GKE_ARG_OPTIONS);
        register_external_symbol(gke_main.GET_GKE_EXPANDED_ITEMS);
        register_cyc_api_function(gke_main.GET_GKE_QUANTIFIER_RANGES, NIL, gke_main.$$$Get_the_quantifier_ranges, NIL, NIL);
        memoization_state.note_globally_cached_function(gke_main.GKE_ISAS_FILTERED_TERM);
        memoization_state.note_globally_cached_function(gke_main.$sym19$GKE_FILTERED_TERM_);
        memoization_state.note_globally_cached_function(gke_main.$sym30$GKE_PREDICATE_FILTERED_);
        register_external_symbol(gke_main.GET_GKE_NAUT_ARG_POSITION);
        register_external_symbol(gke_main.GET_GKE_IS_KNOWN);
        register_external_symbol(gke_main.GKE_ADD_CLONED_LITERAL);
        register_external_symbol(gke_main.GKE_REMOVE_LITERAL);
        register_external_symbol(gke_main.POSSIBLE_SENTENCE_SUBSTITUTIONS);
        register_external_symbol(gke_main.SUBSTITUTE_TERM_INTO_SENTENCE);
        memoization_state.note_globally_cached_function(gke_main.GKE_MEMOIZATION_STATE);
        register_external_symbol(gke_main.GKE_GLOSS_FOR_LITERAL);
        memoization_state.note_globally_cached_function(gke_main.GENERATE_GKE_GLOSS_WRT_MT_CACHED);
        register_external_symbol(gke_main.CANDIDATE_REPLACEMENT_RENDERERS_FOR_SENTENCE);
        register_external_symbol(gke_main.CANDIDATE_REPLACEMENTS_FOR_VARIABLES);
        register_external_symbol(gke_main.CANDIDATE_REPLACEMENTS_FOR_ARG);
        memoization_state.note_globally_cached_function(gke_main.CANDIDATE_REPLACEMENTS_FOR_SENTENCE_CACHED);
        memoization_state.note_globally_cached_function(gke_main.GKE_GET_ELEMENTS);
        declare_defglobal(gke_main.$omit_suggestion_stumpsP$);
        register_method($print_object_method_table$.getGlobalValue(), gke_main.$dtp_replacement_tree$.getGlobalValue(), symbol_function(gke_main.REPLACEMENT_TREE_PRINT_FUNCTION_TRAMPOLINE));
        SubLSpecialOperatorDeclarations.proclaim(gke_main.$list149);
        def_csetf(gke_main.R_TREE_ROOT, gke_main._CSETF_R_TREE_ROOT);
        def_csetf(gke_main.R_TREE_CHILDREN, gke_main._CSETF_R_TREE_CHILDREN);
        identity(gke_main.REPLACEMENT_TREE);
        register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), gke_main.$dtp_replacement_tree$.getGlobalValue(), symbol_function(gke_main.VISIT_DEFSTRUCT_OBJECT_REPLACEMENT_TREE_METHOD));
        note_funcall_helper_function(gke_main.PRINT_REPLACEMENT_TREE);
        declare_defglobal(gke_main.$use_tva_for_suggestionsP$);
        register_cyc_api_function(gke_main.GKE_START_CONTINUABLE_QUERY, gke_main.$list201, gke_main.$str202$Setup_a_query__and_immediately_re, gke_main.$list203, NIL);
        register_cyc_api_function(gke_main.GKE_CONTINUE_QUERY, gke_main.$list209, gke_main.$str210$Continue_an_existing_query__ident, gke_main.$list211, NIL);
        register_cyc_api_function(gke_main.GKE_GET_ONE_INFERENCE_RESULT, gke_main.$list225, gke_main.$$$Get_one_inference_result, gke_main.$list227, NIL);
        register_cyc_api_function(gke_main.GKE_GET_INFERENCE_RESULTS, gke_main.$list225, gke_main.$str231$get_all_the_inference_results_so_, gke_main.$list232, NIL);
        register_cyc_api_function(gke_main.$sym234$GKE_INFERENCE_COMPLETE_, gke_main.$list225, gke_main.$str235$ret_t_iff_inference_is_suspended_, gke_main.$list227, NIL);
        register_cyc_api_function(gke_main.GKE_GET_INFERENCE_STATUS, gke_main.$list225, gke_main.$$$get_the_status_of_the_inference, gke_main.$list227, NIL);
        register_cyc_api_function(gke_main.GKE_GET_INFERENCE_SUSPEND_STATUS, gke_main.$list225, gke_main.$str239$get_the_suspend_status_of_the_inf, gke_main.$list227, NIL);
        register_cyc_api_function(gke_main.GKE_STOP_CONTINUABLE_QUERY, gke_main.$list242, gke_main.$str243$Find_and_stop_the_inference_, gke_main.$list244, NIL);
        register_cyc_api_function(gke_main.GKE_RELEASE_INFERENCE_RESOURCES, gke_main.$list225, gke_main.$str246$Destroy_problem_store_and_inferen, gke_main.$list227, NIL);
        register_external_symbol(gke_main.GKE_TEST_QUERIES);
        sunit_external.define_test_category(gke_main.$str252$GKE_Query_Sentence_Literal_Manipu, UNPROVIDED);
        sunit_external.define_test_suite(gke_main.$$$GKE_Main_Test_Suite, gke_main.$list254, UNPROVIDED, UNPROVIDED);
        define_test_case_table_int(gke_main.TEST_CANDIDATE_REPLACEMENTS, list(new SubLObject[]{ $TEST, gke_main.$sym257$CANDIDATE_REPLACEMENTS_EQUAL_, $OWNER, NIL, $CLASSES, gke_main.$list260, $KB, $FULL, $WORKING_, T }), gke_main.$list264);
        define_test_case_table_int(gke_main.TEST_CANDIDATE_REPLACEMENT_RENDERERS_FOR_VARS, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, NIL, $CLASSES, gke_main.$list260, $KB, $FULL, $WORKING_, T }), gke_main.$list278);
        define_test_case_table_int(gke_main.TEST_CANDIDATE_REPLACEMENT_RENDERERS_STUMPS, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, NIL, $CLASSES, gke_main.$list260, $KB, $FULL, $WORKING_, T }), gke_main.$list280);
        define_test_case_table_int(gke_main.TEST_CANDIDATE_REPLACEMENT_RENDERERS, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, NIL, $CLASSES, gke_main.$list260, $KB, $FULL, $WORKING_, T }), gke_main.$list282);
        define_test_case_table_int(gke_main.NARTIFY_AND_SUBSTITUTE_TERM_INTO_SENTENCE, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, NIL, $CLASSES, gke_main.$list260, $KB, $FULL, $WORKING_, T }), gke_main.$list284);
        define_test_case_table_int(gke_main.SUBSTITUTE_TERM_INTO_SENTENCE, list(new SubLObject[]{ $TEST, EQUAL, $OWNER, NIL, $CLASSES, gke_main.$list260, $KB, $FULL, $WORKING_, T }), gke_main.$list285);
        return NIL;
    }

    private static SubLObject _constant_282_initializer() {
        return list(list(list(list(reader_make_constant_shell("dataForValveOfEventRecordsStenosisSeverity"), makeSymbol("?CARDIAC-VALVE-DATA"), makeSymbol("?MEDICALLY-RELATED-EVENT"), list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), reader_make_constant_shell("MedicalResearchCAEGuidanceMt"), reader_make_constant_shell("CCFMedicalResearch-Allotment")), list(list(list(THREE_INTEGER), list(new SubLObject[]{ list(reader_make_constant_shell("CardiacValveStenosis_critical")), list(reader_make_constant_shell("CardiacValveStenosis_present")), list(reader_make_constant_shell("CardiacValveStenosis_trivial")), list(reader_make_constant_shell("CardiacValveStenosis_unknown")), list(reader_make_constant_shell("Moderate-SevereToSevereCardiacValveStenosis"), list(list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("SeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")))), list(reader_make_constant_shell("ModerateToModerate-SevereToSevereCardiacValveStenosis"), list(list(reader_make_constant_shell("ModeratePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("SeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")))), list(reader_make_constant_shell("None-CardiacValveStenosis")), list(list(reader_make_constant_shell("MildPhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("MildToModeratePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))) })))), list(list(list(reader_make_constant_shell("valveProsthesisTypeExplanted"), makeSymbol("?HEART-VALVE-REPLACEMENT"), reader_make_constant_shell("CardiacValveProsthesisModel3000"), makeSymbol("?VALVE-PROSTHESIS")), reader_make_constant_shell("MedicalResearchCAEGuidanceMt"), reader_make_constant_shell("CCFMedicalResearch-Allotment")), list(list(list(TWO_INTEGER), list(list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis"), list(reader_make_constant_shell("AorticAndMitralValveProsthesis"), list(reader_make_constant_shell("CardiacValveProsthesisModel52842007-D")), list(reader_make_constant_shell("CardiacValveProsthesisModelHALL"))), list(new SubLObject[]{ reader_make_constant_shell("AorticValveProsthesis"), list(new SubLObject[]{ reader_make_constant_shell("AorticValveMechanicalProsthesis"), list(reader_make_constant_shell("AorticSilasticBallValveProsthesis"), list(reader_make_constant_shell("CardiacValveProsthesisModel1260"))), list(reader_make_constant_shell("CardiacValveProsthesisModel1200")), list(reader_make_constant_shell("CardiacValveProsthesisModel2310")), list(reader_make_constant_shell("CardiacValveProsthesisModel2320")), list(reader_make_constant_shell("CardiacValveProsthesisModel3160")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842006-D")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842006-F")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842050-B")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGFN-756")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGFN-756-IDE")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_ONXAE")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXA")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXAC")) }), list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis-Aortic-Biological"), list(reader_make_constant_shell("CardiacValveProsthesis-3FAorticBioprosthesis"), list(reader_make_constant_shell("CardiacValveProsthesisModel1000"))), list(reader_make_constant_shell("CardiacValveProsthesisModel2625")), list(reader_make_constant_shell("CardiacValveProsthesisModel2700")), list(reader_make_constant_shell("CardiacValveProsthesisModel2700PM")), list(reader_make_constant_shell("CardiacValveProsthesisModel2800")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel9000IDE")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_3300TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_BSP100")), list(reader_make_constant_shell("CardiacValveProsthesisModelTF-IDE")) }), list(reader_make_constant_shell("CardiacValveProsthesis-AorticApex"), list(reader_make_constant_shell("CardiacValveProsthesisModel503DA"))), list(reader_make_constant_shell("CardiacValveProsthesis-AorticCompositeGraft"), list(reader_make_constant_shell("CardiacValveProsthesisModelXAGV"))), list(reader_make_constant_shell("CardiacValveProsthesis-AorticHighProfile"), list(reader_make_constant_shell("CardiacValveProsthesisModelAHP-105"))), list(reader_make_constant_shell("CardiacValveProsthesis-AorticSingleComponent"), list(reader_make_constant_shell("CardiacValveProsthesisModel320"))), list(reader_make_constant_shell("CardiacValveProsthesis-AorticStabilizedGlutaraldehydeProcess"), list(reader_make_constant_shell("CardiacValveProsthesisModel250"))), list(reader_make_constant_shell("CardiacValveProsthesis-CConvex-Concave"), list(reader_make_constant_shell("CardiacValveProsthesisModelAGVC"))), list(reader_make_constant_shell("CardiacValveProsthesis-FreestyleAorticRoot"), list(reader_make_constant_shell("CardiacValveProsthesisModel995"))), list(reader_make_constant_shell("CardiacValveProsthesis-MagnaAortic"), list(reader_make_constant_shell("CardiacValveProsthesisModel3000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_3300TFX"))), list(reader_make_constant_shell("CardiacValveProsthesis-MosaicUltraAortic"), list(reader_make_constant_shell("CardiacValveProsthesisModel305"))), list(reader_make_constant_shell("CardiacValveProsthesis-PremarketAortic"), list(reader_make_constant_shell("CardiacValveProsthesisModel2700PM"))), list(reader_make_constant_shell("CardiacValveProsthesis-PrimaPlusStentlessAortic"), list(reader_make_constant_shell("CardiacValveProsthesisModel2500P"))), list(reader_make_constant_shell("CardiacValveProsthesis-ReducedAortic"), list(reader_make_constant_shell("CardiacValveProsthesisModelR500"))), list(reader_make_constant_shell("CardiacValveProsthesisModel150")), list(reader_make_constant_shell("CardiacValveProsthesisModel242")), list(reader_make_constant_shell("CardiacValveProsthesisModel2650")), list(reader_make_constant_shell("CardiacValveProsthesisModel300")), list(reader_make_constant_shell("CardiacValveProsthesisModel350")), list(reader_make_constant_shell("CardiacValveProsthesisModel606366")), list(reader_make_constant_shell("CardiacValveProsthesisModelA-101")), list(reader_make_constant_shell("CardiacValveProsthesisModelABP")), list(reader_make_constant_shell("CardiacValveProsthesisModelAEC-102")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGN-751")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGVM")), list(reader_make_constant_shell("CardiacValveProsthesisModelAJ-501")), list(reader_make_constant_shell("CardiacValveProsthesisModelAP")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-201")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-301")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-CUS")), list(reader_make_constant_shell("CardiacValveProsthesisModelB10")), list(reader_make_constant_shell("CardiacValveProsthesisModelB10SP")), list(reader_make_constant_shell("CardiacValveProsthesisModelCAVG-404")), list(reader_make_constant_shell("CardiacValveProsthesisModelCAVGJ-514")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_BiocorAortic")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_C7700")), list(new SubLObject[]{ list(reader_make_constant_shell("CollectionIntersection2Fn"), reader_make_constant_shell("CardiacValveProsthesis-Biological-Pericardial"), reader_make_constant_shell("AorticValveProsthesis")), list(reader_make_constant_shell("CardiacValveProsthesis-3FAorticBioprosthesis"), list(reader_make_constant_shell("CardiacValveProsthesisModel1000"))), list(reader_make_constant_shell("CardiacValveProsthesisModel2700")), list(reader_make_constant_shell("CardiacValveProsthesisModel2700PM")), list(reader_make_constant_shell("CardiacValveProsthesisModel2800")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel9000IDE")), list(reader_make_constant_shell("CardiacValveProsthesisModelISA")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_3300TFX")) }) }), list(reader_make_constant_shell("CardiacValveProsthesis-3FAortic"), list(reader_make_constant_shell("CardiacValveProsthesisModel1000"))), list(reader_make_constant_shell("CardiacValveProsthesis-AorticConduit"), list(reader_make_constant_shell("CardiacValveProsthesisModel606366"))), list(reader_make_constant_shell("CardiacValveProsthesis-AorticDisc"), list(reader_make_constant_shell("CardiacValveProsthesisModelABP"))), list(reader_make_constant_shell("CardiacValveProsthesis-AorticRegent"), list(reader_make_constant_shell("CardiacValveProsthesisModelAGFN-756-IDE"))), list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis-AorticValvedConduit"), list(reader_make_constant_shell("CardiacValveProsthesis-CConvex-Concave"), list(reader_make_constant_shell("CardiacValveProsthesisModelAGVC"))), list(reader_make_constant_shell("CardiacValveProsthesis-NotLowPorosity"), list(reader_make_constant_shell("CardiacValveProsthesisModelAGVM"))), list(reader_make_constant_shell("CardiacValveProsthesisModel150")), list(reader_make_constant_shell("CardiacValveProsthesisModel350")), list(reader_make_constant_shell("CardiacValveProsthesisModelAP")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-201")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-301")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-CUS")), list(reader_make_constant_shell("CardiacValveProsthesisModelCAVG-404")), list(reader_make_constant_shell("CardiacValveProsthesisModelCAVGJ-514")) }), list(reader_make_constant_shell("CardiacValveProsthesis-Bicor"), list(reader_make_constant_shell("CardiacValveProsthesisModelB10")), list(reader_make_constant_shell("CardiacValveProsthesisModelB10SP")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_BiocorAortic")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_BiocorMitral"))), list(reader_make_constant_shell("CardiacValveProsthesis-Bileaflet"), list(reader_make_constant_shell("CardiacValveProsthesisModel3160")), list(reader_make_constant_shell("CardiacValveProsthesisModel9120")), list(reader_make_constant_shell("CardiacValveProsthesisModelHALL"))), list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis-Biological"), list(reader_make_constant_shell("CardiacValveProsthesis-Allograft"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("CryolifeAorticAllograft"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("CryolifePulmonaryAllograft"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("LifenetAorticAllograft"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("LifenetPulmonaryAllograft"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("UnknownManufacturer-Allograft")))), list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis-Aortic-Biological"), list(reader_make_constant_shell("CardiacValveProsthesis-3FAorticBioprosthesis"), list(reader_make_constant_shell("CardiacValveProsthesisModel1000"))), list(reader_make_constant_shell("CardiacValveProsthesisModel2625")), list(reader_make_constant_shell("CardiacValveProsthesisModel2700")), list(reader_make_constant_shell("CardiacValveProsthesisModel2700PM")), list(reader_make_constant_shell("CardiacValveProsthesisModel2800")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel9000IDE")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_3300TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_BSP100")), list(reader_make_constant_shell("CardiacValveProsthesisModelTF-IDE")) }), list(reader_make_constant_shell("CardiacValveProsthesis-Biological-BovineOrPorcine"), list(reader_make_constant_shell("CardiacValveProsthesis-Biological-Bovine"), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_3300TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_7000"))), list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis-Biological-Porcine"), list(reader_make_constant_shell("CardiacValveProsthesis-AorticStabilizedGlutaraldehydeProcess"), list(reader_make_constant_shell("CardiacValveProsthesisModel250"))), list(reader_make_constant_shell("CardiacValveProsthesis-PrimaPlusStentlessAortic"), list(reader_make_constant_shell("CardiacValveProsthesisModel2500P"))), list(reader_make_constant_shell("CardiacValveProsthesisModel109411-1")), list(reader_make_constant_shell("CardiacValveProsthesisModel150")), list(reader_make_constant_shell("CardiacValveProsthesisModel200")), list(reader_make_constant_shell("CardiacValveProsthesisModel242")), list(reader_make_constant_shell("CardiacValveProsthesisModel2625")), list(reader_make_constant_shell("CardiacValveProsthesisModel2650")), list(reader_make_constant_shell("CardiacValveProsthesisModel300")), list(reader_make_constant_shell("CardiacValveProsthesisModel305")), list(reader_make_constant_shell("CardiacValveProsthesisModel310")), list(reader_make_constant_shell("CardiacValveProsthesisModel320")), list(reader_make_constant_shell("CardiacValveProsthesisModel342A-V")), list(reader_make_constant_shell("CardiacValveProsthesisModel342R")), list(reader_make_constant_shell("CardiacValveProsthesisModel350")), list(reader_make_constant_shell("CardiacValveProsthesisModel606306")), list(reader_make_constant_shell("CardiacValveProsthesisModel606366")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625-ESR-LP")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625LP")), list(reader_make_constant_shell("CardiacValveProsthesisModel6650")), list(reader_make_constant_shell("CardiacValveProsthesisModel995")), list(reader_make_constant_shell("CardiacValveProsthesisModelISU")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_995")), list(reader_make_constant_shell("CardiacValveProsthesisModelXAGV")) }), list(reader_make_constant_shell("CardiacValveProsthesisModelB100-M")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_B100-A")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_B100-M")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_BSP100")), list(reader_make_constant_shell("CardiacValveProsthesisModelTF-IDE"))), list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis-Biological-Pericardial"), list(reader_make_constant_shell("CardiacValveProsthesisModel2900")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900P")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900PTFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel7000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModelISLM")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_12A")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_9000TFX")), list(new SubLObject[]{ list(reader_make_constant_shell("CollectionIntersection2Fn"), reader_make_constant_shell("CardiacValveProsthesis-Biological-Pericardial"), reader_make_constant_shell("AorticValveProsthesis")), list(reader_make_constant_shell("CardiacValveProsthesis-3FAorticBioprosthesis"), list(reader_make_constant_shell("CardiacValveProsthesisModel1000"))), list(reader_make_constant_shell("CardiacValveProsthesisModel2700")), list(reader_make_constant_shell("CardiacValveProsthesisModel2700PM")), list(reader_make_constant_shell("CardiacValveProsthesisModel2800")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel9000IDE")), list(reader_make_constant_shell("CardiacValveProsthesisModelISA")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_3300TFX")) }) }), list(reader_make_constant_shell("CardiacValveProsthesis-Heterograft"), list(reader_make_constant_shell("CardiacValveProsthesis-Biological-Equine"), list(reader_make_constant_shell("CardiacValveProsthesisModel9000IDE"))), list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis-Biological-Porcine"), list(reader_make_constant_shell("CardiacValveProsthesis-AorticStabilizedGlutaraldehydeProcess"), list(reader_make_constant_shell("CardiacValveProsthesisModel250"))), list(reader_make_constant_shell("CardiacValveProsthesis-PrimaPlusStentlessAortic"), list(reader_make_constant_shell("CardiacValveProsthesisModel2500P"))), list(reader_make_constant_shell("CardiacValveProsthesisModel109411-1")), list(reader_make_constant_shell("CardiacValveProsthesisModel150")), list(reader_make_constant_shell("CardiacValveProsthesisModel200")), list(reader_make_constant_shell("CardiacValveProsthesisModel242")), list(reader_make_constant_shell("CardiacValveProsthesisModel2625")), list(reader_make_constant_shell("CardiacValveProsthesisModel2650")), list(reader_make_constant_shell("CardiacValveProsthesisModel300")), list(reader_make_constant_shell("CardiacValveProsthesisModel305")), list(reader_make_constant_shell("CardiacValveProsthesisModel310")), list(reader_make_constant_shell("CardiacValveProsthesisModel320")), list(reader_make_constant_shell("CardiacValveProsthesisModel342A-V")), list(reader_make_constant_shell("CardiacValveProsthesisModel342R")), list(reader_make_constant_shell("CardiacValveProsthesisModel350")), list(reader_make_constant_shell("CardiacValveProsthesisModel606306")), list(reader_make_constant_shell("CardiacValveProsthesisModel606366")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625-ESR-LP")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625LP")), list(reader_make_constant_shell("CardiacValveProsthesisModel6650")), list(reader_make_constant_shell("CardiacValveProsthesisModel995")), list(reader_make_constant_shell("CardiacValveProsthesisModelISU")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_995")), list(reader_make_constant_shell("CardiacValveProsthesisModelXAGV")) })), list(reader_make_constant_shell("CardiacValveProsthesisModelB10")), list(reader_make_constant_shell("CardiacValveProsthesisModelB10SP")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_4300")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("UnknownManufacturer-BiologicValve"))) }), list(reader_make_constant_shell("CardiacValveProsthesis-CompositeGraft"), list(reader_make_constant_shell("CardiacValveProsthesisModelXAGV"))), list(reader_make_constant_shell("CardiacValveProsthesis-ExpandedCuff"), list(reader_make_constant_shell("CardiacValveProsthesisModelAEC-102")), list(reader_make_constant_shell("CardiacValveProsthesisModelMEC-102"))), list(reader_make_constant_shell("CardiacValveProsthesis-LowProfile"), list(reader_make_constant_shell("CardiacValveProsthesisModelISLM"))), list(new SubLObject[]{ reader_make_constant_shell("CardiacValveProsthesis-Mechanical"), list(new SubLObject[]{ reader_make_constant_shell("AorticValveMechanicalProsthesis"), list(reader_make_constant_shell("AorticSilasticBallValveProsthesis"), list(reader_make_constant_shell("CardiacValveProsthesisModel1260"))), list(reader_make_constant_shell("CardiacValveProsthesisModel1200")), list(reader_make_constant_shell("CardiacValveProsthesisModel2310")), list(reader_make_constant_shell("CardiacValveProsthesisModel2320")), list(reader_make_constant_shell("CardiacValveProsthesisModel3160")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842006-D")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842006-F")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842050-B")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGFN-756")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGFN-756-IDE")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_ONXAE")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXA")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXAC")) }), list(reader_make_constant_shell("CardiacValveProsthesis-Disk"), list(reader_make_constant_shell("CardiacValveProsthesisModel606366")), list(reader_make_constant_shell("CardiacValveProsthesisModel9120")), list(reader_make_constant_shell("CardiacValveProsthesisModelABP"))), list(reader_make_constant_shell("CardiacValveProsthesisModel503DA")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842007-D")), list(reader_make_constant_shell("CardiacValveProsthesisModel6120")), list(reader_make_constant_shell("CardiacValveProsthesisModel6320")), list(reader_make_constant_shell("CardiacValveProsthesisModel65")), list(reader_make_constant_shell("CardiacValveProsthesisModel70")), list(reader_make_constant_shell("CardiacValveProsthesisModel700")), list(reader_make_constant_shell("CardiacValveProsthesisModel750")), list(reader_make_constant_shell("CardiacValveProsthesisModel825")), list(reader_make_constant_shell("CardiacValveProsthesisModel900")), list(reader_make_constant_shell("CardiacValveProsthesisModelA-101")), list(reader_make_constant_shell("CardiacValveProsthesisModelAEC-102")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGN-751")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGVC")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGVM")), list(reader_make_constant_shell("CardiacValveProsthesisModelAHP-105")), list(reader_make_constant_shell("CardiacValveProsthesisModelAHPJ-505")), list(reader_make_constant_shell("CardiacValveProsthesisModelAJ-501")), list(reader_make_constant_shell("CardiacValveProsthesisModelAP")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-201")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-301")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-CUS")), list(reader_make_constant_shell("CardiacValveProsthesisModelCAVG-404")), list(reader_make_constant_shell("CardiacValveProsthesisModelCAVGJ-514")), list(reader_make_constant_shell("CardiacValveProsthesisModelF700")), list(reader_make_constant_shell("CardiacValveProsthesisModelHALL")), list(reader_make_constant_shell("CardiacValveProsthesisModelM-101")), list(reader_make_constant_shell("CardiacValveProsthesisModelMBP")), list(reader_make_constant_shell("CardiacValveProsthesisModelMBRP")), list(reader_make_constant_shell("CardiacValveProsthesisModelMEC-102")), list(reader_make_constant_shell("CardiacValveProsthesisModelMECJ-502")), list(reader_make_constant_shell("CardiacValveProsthesisModelMHP-105")), list(reader_make_constant_shell("CardiacValveProsthesisModelMJ-501")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_106")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_503DA")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_AEC-102")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_Bjork-Shiley-CC")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_C7700")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_ONCMC")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_ONXA")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_ONXMC")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXM")), list(reader_make_constant_shell("CardiacValveProsthesisModelR500")), list(reader_make_constant_shell("CardiacValveProsthesisModelS500")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("UnknownManufacturer-MechanicalValve"))) }), list(reader_make_constant_shell("CardiacValveProsthesis-On-X"), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_ONXAE")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXA")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXAC")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXM"))), list(reader_make_constant_shell("CardiacValveProsthesis-OptiformMitralValve"), list(reader_make_constant_shell("CardiacValveProsthesisModelF700"))), list(reader_make_constant_shell("CardiacValveProsthesis-Perimont"), list(reader_make_constant_shell("CardiacValveProsthesisModel2700")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900P")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_3300TFX"))), list(reader_make_constant_shell("CardiacValveProsthesis-Stented"), list(reader_make_constant_shell("CardiacValveProsthesisModel6650"))), list(reader_make_constant_shell("CardiacValveProsthesis-SubAnular"), list(reader_make_constant_shell("CardiacValveProsthesisModelMBP"))), list(reader_make_constant_shell("CardiacValveProsthesis-SupraAnular"), list(reader_make_constant_shell("CardiacValveProsthesisModel2650")), list(reader_make_constant_shell("CardiacValveProsthesisModelB10SP")), list(reader_make_constant_shell("CardiacValveProsthesisModelMBRP")), list(reader_make_constant_shell("CardiacValveProsthesisModelS500"))), list(reader_make_constant_shell("CardiacValveProsthesis-TwoComponent"), list(reader_make_constant_shell("CardiacValveProsthesisModel200")), list(reader_make_constant_shell("CardiacValveProsthesisModel300"))), list(reader_make_constant_shell("CardiacValveProsthesis-Universal"), list(reader_make_constant_shell("CardiacValveProsthesisModelISU"))), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_Photofix")), list(new SubLObject[]{ reader_make_constant_shell("MitralValveProsthesis"), list(reader_make_constant_shell("CardiacValveProsthesis-ClothCoveredMitral"), list(reader_make_constant_shell("CardiacValveProsthesisModel6320"))), list(reader_make_constant_shell("CardiacValveProsthesis-MitralUpsideDown"), list(reader_make_constant_shell("CardiacValveProsthesisModel2900"))), list(reader_make_constant_shell("CardiacValveProsthesis-SilasticMitral"), list(reader_make_constant_shell("CardiacValveProsthesisModel6120"))), list(reader_make_constant_shell("CardiacValveProsthesis-VascorMitralValveProstheis"), list(reader_make_constant_shell("CardiacValveProsthesisModel342R"))), list(reader_make_constant_shell("CardiacValveProsthesisModel109411-1")), list(reader_make_constant_shell("CardiacValveProsthesisModel200")), list(reader_make_constant_shell("CardiacValveProsthesisModel305")), list(reader_make_constant_shell("CardiacValveProsthesisModel310")), list(reader_make_constant_shell("CardiacValveProsthesisModel342A-V")), list(reader_make_constant_shell("CardiacValveProsthesisModel606306")), list(reader_make_constant_shell("CardiacValveProsthesisModel65")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625-ESR-LP")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625LP")), list(reader_make_constant_shell("CardiacValveProsthesisModel6650")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900P")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900PTFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel70")), list(reader_make_constant_shell("CardiacValveProsthesisModel700")), list(reader_make_constant_shell("CardiacValveProsthesisModel7000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel750")), list(reader_make_constant_shell("CardiacValveProsthesisModel825")), list(reader_make_constant_shell("CardiacValveProsthesisModel900")), list(reader_make_constant_shell("CardiacValveProsthesisModel9120")), list(reader_make_constant_shell("CardiacValveProsthesisModelAHPJ-505")), list(reader_make_constant_shell("CardiacValveProsthesisModelB100-M")), list(reader_make_constant_shell("CardiacValveProsthesisModelF700")), list(reader_make_constant_shell("CardiacValveProsthesisModelISLM")), list(reader_make_constant_shell("CardiacValveProsthesisModelISU")), list(reader_make_constant_shell("CardiacValveProsthesisModelM-101")), list(reader_make_constant_shell("CardiacValveProsthesisModelMBP")), list(reader_make_constant_shell("CardiacValveProsthesisModelMBRP")), list(reader_make_constant_shell("CardiacValveProsthesisModelMEC-102")), list(reader_make_constant_shell("CardiacValveProsthesisModelMECJ-502")), list(reader_make_constant_shell("CardiacValveProsthesisModelMHP-105")), list(reader_make_constant_shell("CardiacValveProsthesisModelMJ-501")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_7000")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_BiocorMitral")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_Bjork-Shiley-CC")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXM")), list(reader_make_constant_shell("CardiacValveProsthesisModelS500")) }), list(list(reader_make_constant_shell("CollectionUnionFn"), list(reader_make_constant_shell("TheSet"), reader_make_constant_shell("CCFCardiacValveExistingOrExplantProsthesis"), reader_make_constant_shell("CCFCardiacValveImplantProsthesis"))), list(reader_make_constant_shell("CCFCardiacValveExistingOrExplantProsthesis")), list(reader_make_constant_shell("CCFCardiacValveImplantProsthesis"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("BaxterHealthcareCorp")), list(reader_make_constant_shell("CardiacValveProsthesisModel2500P"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Beall"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("BeallSurgitool"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Bjork-shiley")), list(reader_make_constant_shell("CardiacValveProsthesisModelABP")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGVC")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGVM")), list(reader_make_constant_shell("CardiacValveProsthesisModelMBP")), list(reader_make_constant_shell("CardiacValveProsthesisModelMBRP")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_Bjork-Shiley-CC")), list(reader_make_constant_shell("CardiacValveProsthesisModelXAGV"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Braunwald-cutter"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Carbomedic")), list(reader_make_constant_shell("CardiacValveProsthesisModel700")), list(reader_make_constant_shell("CardiacValveProsthesisModelAP")), list(reader_make_constant_shell("CardiacValveProsthesisModelF700")), list(reader_make_constant_shell("CardiacValveProsthesisModelR500")), list(reader_make_constant_shell("CardiacValveProsthesisModelS500"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Caster-hall"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Cooley-bloodwell-cutter"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Cooley-cutter"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Cross-jones")), list(reader_make_constant_shell("CardiacValveProsthesisModel65")), list(reader_make_constant_shell("CardiacValveProsthesisModel70"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Cutter-TheOrganization"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("DebakeySurgitool"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("EdwardsDuromedic")), list(reader_make_constant_shell("CardiacValveProsthesisModel3160")), list(reader_make_constant_shell("CardiacValveProsthesisModel9120"))), list(new SubLObject[]{ list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("EdwardsLifesciences")), list(reader_make_constant_shell("CardiacValveProsthesisModel109411-1")), list(reader_make_constant_shell("CardiacValveProsthesisModel2625")), list(reader_make_constant_shell("CardiacValveProsthesisModel2650")), list(reader_make_constant_shell("CardiacValveProsthesisModel2700")), list(reader_make_constant_shell("CardiacValveProsthesisModel2700PM")), list(reader_make_constant_shell("CardiacValveProsthesisModel2800")), list(reader_make_constant_shell("CardiacValveProsthesisModel2900")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000")), list(reader_make_constant_shell("CardiacValveProsthesisModel3000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel606306")), list(reader_make_constant_shell("CardiacValveProsthesisModel606366")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625-ESR-LP")), list(reader_make_constant_shell("CardiacValveProsthesisModel6625LP")), list(reader_make_constant_shell("CardiacValveProsthesisModel6650")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900P")), list(reader_make_constant_shell("CardiacValveProsthesisModel6900PTFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel7000TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModel9000IDE")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_3300TFX")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_7000")) }), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("FasciaLata"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Gott-daggett"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Hancock")), list(reader_make_constant_shell("CardiacValveProsthesisModel150")), list(reader_make_constant_shell("CardiacValveProsthesisModel242")), list(reader_make_constant_shell("CardiacValveProsthesisModel250")), list(reader_make_constant_shell("CardiacValveProsthesisModel342A-V")), list(reader_make_constant_shell("CardiacValveProsthesisModel342R"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Harken"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Homograft"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Inescu-shiley")), list(reader_make_constant_shell("CardiacValveProsthesisModelISA")), list(reader_make_constant_shell("CardiacValveProsthesisModelISLM")), list(reader_make_constant_shell("CardiacValveProsthesisModelISU"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Kay-shiley"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Kay-suzuki"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Lillihei-kaster"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Magovern-cromie"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("MedicalCarbonResearchInstitute")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_ONXAE")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXA")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXAC")), list(reader_make_constant_shell("CardiacValveProsthesisModelONXM"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("MedtronicInc")), list(reader_make_constant_shell("CardiacValveProsthesisModel305")), list(reader_make_constant_shell("CardiacValveProsthesisModel310")), list(reader_make_constant_shell("CardiacValveProsthesisModel995")), list(reader_make_constant_shell("CardiacValveProsthesisModelHALL")), list(reader_make_constant_shell("CardiacValveProsthesisModelNumber_C7700"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Omni-science"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("PulmonaryAutograft"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Smeloff-cutter")), list(reader_make_constant_shell("CardiacValveProsthesisModel750")), list(reader_make_constant_shell("CardiacValveProsthesisModel825")), list(reader_make_constant_shell("CardiacValveProsthesisModel900"))), list(new SubLObject[]{ list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("StJudeMedical")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842006-D")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842006-F")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842007-D")), list(reader_make_constant_shell("CardiacValveProsthesisModel52842050-B")), list(reader_make_constant_shell("CardiacValveProsthesisModelA-101")), list(reader_make_constant_shell("CardiacValveProsthesisModelAEC-102")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGFN-756")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGFN-756-IDE")), list(reader_make_constant_shell("CardiacValveProsthesisModelAGN-751")), list(reader_make_constant_shell("CardiacValveProsthesisModelAHP-105")), list(reader_make_constant_shell("CardiacValveProsthesisModelAHPJ-505")), list(reader_make_constant_shell("CardiacValveProsthesisModelAJ-501")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-201")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-301")), list(reader_make_constant_shell("CardiacValveProsthesisModelAVG-CUS")), list(reader_make_constant_shell("CardiacValveProsthesisModelB10")), list(reader_make_constant_shell("CardiacValveProsthesisModelB100-M")), list(reader_make_constant_shell("CardiacValveProsthesisModelB10SP")), list(reader_make_constant_shell("CardiacValveProsthesisModelCAVG-404")), list(reader_make_constant_shell("CardiacValveProsthesisModelCAVGJ-514")), list(reader_make_constant_shell("CardiacValveProsthesisModelM-101")), list(reader_make_constant_shell("CardiacValveProsthesisModelMEC-102")), list(reader_make_constant_shell("CardiacValveProsthesisModelMECJ-502")), list(reader_make_constant_shell("CardiacValveProsthesisModelMHP-105")), list(reader_make_constant_shell("CardiacValveProsthesisModelMJ-501")), list(reader_make_constant_shell("CardiacValveProsthesisModelTF-IDE")) }), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Starr-edwards")), list(reader_make_constant_shell("CardiacValveProsthesisModel1200")), list(reader_make_constant_shell("CardiacValveProsthesisModel1260")), list(reader_make_constant_shell("CardiacValveProsthesisModel2310")), list(reader_make_constant_shell("CardiacValveProsthesisModel2320")), list(reader_make_constant_shell("CardiacValveProsthesisModel6320"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Tascon")), list(reader_make_constant_shell("CardiacValveProsthesisModel200")), list(reader_make_constant_shell("CardiacValveProsthesisModel300")), list(reader_make_constant_shell("CardiacValveProsthesisModel320")), list(reader_make_constant_shell("CardiacValveProsthesisModel350"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Therapeutic")), list(reader_make_constant_shell("CardiacValveProsthesis-3FAorticBioprosthesis"), list(reader_make_constant_shell("CardiacValveProsthesisModel1000")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToFn"), reader_make_constant_shell("CardiacValveProsthesis"), reader_make_constant_shell("cCFMadeBy"), reader_make_constant_shell("Wada-cutter"))) }))))), list(list(list(reader_make_constant_shell("hasDiagnosis"), makeSymbol("?DIAG"), reader_make_constant_shell("HeartRhythm")), reader_make_constant_shell("MedicalResearchCAEGuidanceMt"), reader_make_constant_shell("CCFMedicalResearch-Allotment")), list(list(list(TWO_INTEGER), list(new SubLObject[]{ list(reader_make_constant_shell("AbnormalAorticConduit"), list(reader_make_constant_shell("AortaArch-AbnormalConduit")), list(reader_make_constant_shell("AscendingAorta-AbnormalConduit")), list(reader_make_constant_shell("DescendingAorta-AbnormalConduit"), list(reader_make_constant_shell("DescendingThoracicAorta-AbnormalConduit")))), list(reader_make_constant_shell("AbnormalNumberOfCusps"), list(reader_make_constant_shell("AbnormalNumberOfCusps-AorticValve")), list(reader_make_constant_shell("AbnormalNumberOfCusps-MitralValve")), list(reader_make_constant_shell("AbnormalNumberOfCusps-PulmonaryValve")), list(reader_make_constant_shell("AbnormalNumberOfCusps-TricuspidValve"))), list(reader_make_constant_shell("Abscess"), list(reader_make_constant_shell("Abscess-AorticRoot"))), list(reader_make_constant_shell("Aneurysmal")), list(reader_make_constant_shell("AortaArch-NormalConduit")), list(reader_make_constant_shell("AortaAscendingRupture")), list(reader_make_constant_shell("AortaDescendingRupture")), list(reader_make_constant_shell("AorticArchAbnormalities")), list(reader_make_constant_shell("AorticArchRupture")), list(reader_make_constant_shell("Arteriosclerosis"), list(reader_make_constant_shell("Atherosclerosis"), list(reader_make_constant_shell("Atherosclerosis-AbdominalAorta")), list(reader_make_constant_shell("Atherosclerosis-Aorta")), list(reader_make_constant_shell("Atherosclerosis-AortaArch")), list(reader_make_constant_shell("Atherosclerosis-AscendingAorta")), list(reader_make_constant_shell("Atherosclerosis-DescendingAorta"), list(reader_make_constant_shell("Atherosclerosis-DescendingThoracicAorta"))))), list(reader_make_constant_shell("AtheromaOrAtherosclerosis"), list(reader_make_constant_shell("Atherosclerosis"), list(reader_make_constant_shell("Atherosclerosis-AbdominalAorta")), list(reader_make_constant_shell("Atherosclerosis-Aorta")), list(reader_make_constant_shell("Atherosclerosis-AortaArch")), list(reader_make_constant_shell("Atherosclerosis-AscendingAorta")), list(reader_make_constant_shell("Atherosclerosis-DescendingAorta"), list(reader_make_constant_shell("Atherosclerosis-DescendingThoracicAorta"))))), list(reader_make_constant_shell("Atresia"), list(reader_make_constant_shell("AorticArchAtresia")), list(reader_make_constant_shell("Atresia-AorticValve")), list(reader_make_constant_shell("Atresia-MitralValve")), list(reader_make_constant_shell("Atresia-PulmonaryValve"), list(reader_make_constant_shell("AtresiaWithIntactSeptum-PulmonaryValve")), list(reader_make_constant_shell("AtresiaWithVentricularSeptalDefect-PulmonaryValve"))), list(reader_make_constant_shell("Atresia-TricuspidValve"))), list(reader_make_constant_shell("AtrialDisorder"), list(reader_make_constant_shell("AtrialArrhythmia"), list(reader_make_constant_shell("AtrialFibrillationOrFlutter"), list(reader_make_constant_shell("AtrialFibrillation")), list(reader_make_constant_shell("AtrialFibrillationOrFlutterRequiringTreatment")), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal")))), list(reader_make_constant_shell("AtrialTachycardia")), list(reader_make_constant_shell("CardiacFlutter"), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal")))), list(reader_make_constant_shell("EctopicHeartbeat")), list(reader_make_constant_shell("PrematureAtrialComplex")), list(reader_make_constant_shell("PrematureEctopicBeats")), list(reader_make_constant_shell("WanderingPacemaker"))), list(reader_make_constant_shell("AtrialSeptalDefectPrimum")), list(reader_make_constant_shell("AtrialSeptalDefectSecundum")), list(reader_make_constant_shell("AtriallyPacedHeartRhythm"))), list(reader_make_constant_shell("AtrialVentricularFistulaToRightVentricle")), list(reader_make_constant_shell("BallooningOrProlapsedCardiacValve"), list(reader_make_constant_shell("BallooningOrProlapsedCardiacValve-MitralValve")), list(reader_make_constant_shell("BallooningOrProlapsedCardiacValve-TricuspidValve"))), list(new SubLObject[]{ reader_make_constant_shell("Calcification"), list(reader_make_constant_shell("AnnularCalcification"), list(reader_make_constant_shell("AnnularCalcification-AorticValve")), list(reader_make_constant_shell("AnnularCalcification-MitralValve")), list(reader_make_constant_shell("AnnularCalcification-PulmonaryValve")), list(reader_make_constant_shell("AnnularCalcification-TricuspidValve"))), list(reader_make_constant_shell("Calcification-AbdominalAorta")), list(reader_make_constant_shell("Calcification-Aorta")), list(reader_make_constant_shell("Calcification-AortaArch")), list(reader_make_constant_shell("Calcification-AorticRoot")), list(reader_make_constant_shell("Calcification-AorticValve")), list(reader_make_constant_shell("Calcification-AscendingAorta")), list(reader_make_constant_shell("Calcification-MitralValve")), list(reader_make_constant_shell("Calcification-PulmonaryValve")), list(reader_make_constant_shell("Calcification-ThoracicAorta")), list(reader_make_constant_shell("Calcification-TricuspidValve")) }), list(reader_make_constant_shell("ChronicCondition"), list(reader_make_constant_shell("Arthritis"), list(reader_make_constant_shell("RheumatoidArthritis"))), list(reader_make_constant_shell("ChronicArrhythmia")), list(reader_make_constant_shell("ChronicLungDisease"), list(reader_make_constant_shell("ChronicLungDisease-Mild")), list(reader_make_constant_shell("ChronicLungDisease-Moderate")), list(reader_make_constant_shell("ChronicLungDisease-Severe")), list(reader_make_constant_shell("ChronicObstructivePulmonaryDisease"), list(reader_make_constant_shell("ChronicObstructivePulmonaryDisease-Clinical")), list(reader_make_constant_shell("ChronicObstructivePulmonaryDisease-Pharmacologic")))), list(reader_make_constant_shell("DiabetesMellitus")), list(reader_make_constant_shell("GeneticCondition"), list(reader_make_constant_shell("GeneticDisorder"), list(reader_make_constant_shell("LoeysDietzSyndrome")), list(reader_make_constant_shell("MarfansSyndrome")))), list(reader_make_constant_shell("Hypertension"), list(reader_make_constant_shell("Hypertension-Systemic"))), list(reader_make_constant_shell("Lupus"))), list(reader_make_constant_shell("Coarctation"), list(reader_make_constant_shell("AorticCoarctation"), list(reader_make_constant_shell("AbdominalAortaCoarctation")), list(reader_make_constant_shell("AortaArchCoarctation")), list(reader_make_constant_shell("DescendingAortaCoarctation"), list(reader_make_constant_shell("DescendingThoracicAortaCoarctation"))))), list(reader_make_constant_shell("CongenitalCondition"), list(new SubLObject[]{ reader_make_constant_shell("CongenitalHeartDisease"), list(reader_make_constant_shell("AbsentPulmonaryArtery")), list(reader_make_constant_shell("Aneurysm-diverticulum-MembranousSeptum-SpontaneousClosureOfIVSD")), list(reader_make_constant_shell("AneurysmSinusValsalva")), list(reader_make_constant_shell("AnomalousPulmonaryVenousReturn-Partial")), list(reader_make_constant_shell("AnomalousPulmonaryVenousReturn-Total")), list(reader_make_constant_shell("AnomalyOfSystemicDrainage-PersistentLeftSVC")), list(reader_make_constant_shell("Aorta-rightVentricleCommunication")), list(reader_make_constant_shell("AortopulmonaryWindow")), list(reader_make_constant_shell("AspleniaSyndrome")), list(reader_make_constant_shell("Atrial-ventricularCanalDefectComplete")), list(reader_make_constant_shell("AtrialSeptalAnyeurysm-Congenital")), list(reader_make_constant_shell("AtrialSeptalDefectPrimum")), list(reader_make_constant_shell("AtrialSeptalDefectSecundum")), list(reader_make_constant_shell("AtrialVentricularFistula"), list(reader_make_constant_shell("AtrialVentricularFistulaToLeftAtrium")), list(reader_make_constant_shell("AtrialVentricularFistulaToLeftVentricle")), list(reader_make_constant_shell("AtrialVentricularFistulaToPulmonaryArtery")), list(reader_make_constant_shell("AtrialVentricularFistulaToRightAtrium")), list(reader_make_constant_shell("AtrialVentricularFistulaToUndeterminedLocation"))), list(reader_make_constant_shell("AtrioventricularMalformations")), list(reader_make_constant_shell("CommonVentricleTypeAOrTypeC")), list(reader_make_constant_shell("CongenitalCoronaryArteryAnomalyOtherOrMultipleCongenitalAnomalies")), list(reader_make_constant_shell("CongenitalDoubleOrificeLeftSinus")), list(reader_make_constant_shell("CongenitalDoubleOrificeRightSinus")), list(new SubLObject[]{ reader_make_constant_shell("CoronaryAnomaly"), list(reader_make_constant_shell("CoronaryAnomalyFistulaEctopicOrigin")), list(reader_make_constant_shell("CoronaryArteryAnomaly-CircumflexFromLeftAndRight")), list(reader_make_constant_shell("CoronaryArteryAnomaly-CircumflexFromRight")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftAnteriorDescendingAndCircumflexWithCommonOstium")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftAnteriorDescendingFromRight")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftCircumflexArteryAbsent")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftCoronaryArteryFromRight")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftFromPulmonaryArtery")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftMainTrunkAbsent")), list(reader_make_constant_shell("CoronaryArteryAnomaly-RightFromLeft")) }), list(reader_make_constant_shell("Criss-crossHeart")), list(reader_make_constant_shell("Dextroversion")), list(reader_make_constant_shell("DoubleChamberedRightVentricle")), list(reader_make_constant_shell("DoubleOutletLeftVentricle")), list(reader_make_constant_shell("DoubleOutletRightVentricle")), list(reader_make_constant_shell("DoubleRightVentricle")), list(reader_make_constant_shell("EbsteinAnomaly")), list(reader_make_constant_shell("EndocardialFibroelastosis")), list(reader_make_constant_shell("HypertrophicObstructiveCardiomyopathy-Congenital")), list(reader_make_constant_shell("HypoplasticLeftHeartSyndrome")), list(reader_make_constant_shell("HypoplasticRightHeartSyndrome")), list(reader_make_constant_shell("IsolatedDextrocardia")), list(reader_make_constant_shell("IsolatedLevocardiaNoSitusInversus")), list(reader_make_constant_shell("MalpositionOfGreatVessels")), list(reader_make_constant_shell("MalpositionOfTheHeart")), list(reader_make_constant_shell("Mapca")), list(reader_make_constant_shell("MultipleVentricularSeptalDefect")), list(reader_make_constant_shell("PatentDuctusArteriosus")), list(reader_make_constant_shell("PatentForamenOvale")), list(reader_make_constant_shell("PolyspleniaSyndrome")), list(reader_make_constant_shell("PulmonaryArteryStenosis")), list(reader_make_constant_shell("PulmonaryAtrial-ventricularFistulaPulmonaryArtery-PulmonaryVein")), list(reader_make_constant_shell("SeptalDefect-CommonAtrium")), list(reader_make_constant_shell("SimpleDextrocardiaWithSitusInversus")), list(reader_make_constant_shell("SinusVenosusAtrialSeptalDefect")), list(reader_make_constant_shell("StorageDiseaseOfTheHeart")), list(reader_make_constant_shell("SystemicVenousObstruction")), list(reader_make_constant_shell("TetralogyOfFallot")), list(reader_make_constant_shell("TetralogyOfFallotWithAbsentPulmonaryValve")), list(reader_make_constant_shell("TranspositionGreatVessels-Dextro-transpositionOrLevo-transposition")), list(reader_make_constant_shell("TranspositionGreatVesselsCorrected")), list(reader_make_constant_shell("TruncusArteriosus")), list(reader_make_constant_shell("VascularRing")), list(reader_make_constant_shell("VentricularInversion")), list(reader_make_constant_shell("VentricularSeptalDefect"), list(reader_make_constant_shell("VentricularSeptalDefect-Atrial-ventricularCanalType")), list(reader_make_constant_shell("VentricularSeptalDefect-Membranous")), list(reader_make_constant_shell("VentricularSeptalDefect-Muscular"))) }), list(reader_make_constant_shell("FistulaCondition-CoronaryArteriovenous")), list(reader_make_constant_shell("FistulaCondition-CoronaryArteriovenousToRightVentricle")), list(reader_make_constant_shell("GeneticCondition"), list(reader_make_constant_shell("GeneticDisorder"), list(reader_make_constant_shell("LoeysDietzSyndrome")), list(reader_make_constant_shell("MarfansSyndrome"))))), list(reader_make_constant_shell("CongenitalLeftCoronaryArteryFromRight")), list(new SubLObject[]{ reader_make_constant_shell("ConnectiveTissueDisorder"), list(reader_make_constant_shell("Arthritis"), list(reader_make_constant_shell("RheumatoidArthritis"))), list(reader_make_constant_shell("BeurgersDisease")), list(reader_make_constant_shell("EhlersDanlosSyndrome")), list(reader_make_constant_shell("GiantCellAortitis")), list(reader_make_constant_shell("KawasakiDisease")), list(reader_make_constant_shell("Lupus")), list(reader_make_constant_shell("PolymyalgiaRheumatica")), list(reader_make_constant_shell("RaynaudsDisease")), list(reader_make_constant_shell("SjogrensSyndrome")), list(reader_make_constant_shell("VasculiticSyndrome")), list(reader_make_constant_shell("WegenersGranulomatosis")) }), list(reader_make_constant_shell("CoronaryArteryDisease"), list(reader_make_constant_shell("CoronaryArteryAneurysm")), list(reader_make_constant_shell("CoronaryArteryDisease-Ischemic")), list(reader_make_constant_shell("OtherCoronaryArteryAbnormality"))), list(reader_make_constant_shell("CysticMedialNecrosis"), list(reader_make_constant_shell("CysticMedialNecrisis-Aorta")), list(reader_make_constant_shell("CysticMedialNecrosis-AbdominalAorta")), list(reader_make_constant_shell("CysticMedialNecrosis-AortaArch")), list(reader_make_constant_shell("CysticMedialNecrosis-AscendingAorta")), list(reader_make_constant_shell("CysticMedialNecrosis-DescendingAorta"), list(reader_make_constant_shell("CysticMedialNecrosis-DescendingThoracicAorta")))), list(reader_make_constant_shell("DigestiveDisorder"), list(reader_make_constant_shell("DigestiveHepaticFailure")), list(reader_make_constant_shell("HiatalHernia")), list(reader_make_constant_shell("RefluxDisease"))), list(reader_make_constant_shell("Dilatation-PhysiologicalCondition"), list(reader_make_constant_shell("Dilatation-AbdominalAorta")), list(reader_make_constant_shell("Dilatation-AortaArch")), list(reader_make_constant_shell("Dilatation-AorticRoot")), list(reader_make_constant_shell("Dilatation-AscendingAorta")), list(reader_make_constant_shell("Dilatation-AscendingAortaRoot")), list(reader_make_constant_shell("Dilatation-DescendingAorta"), list(reader_make_constant_shell("Dilatation-DescendingThoracicAorta")))), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheAorta"), list(reader_make_constant_shell("Aorta-rightVentricleCommunication")), list(reader_make_constant_shell("AortaAneurysmOrDissection"), list(reader_make_constant_shell("AortaDissection"), list(reader_make_constant_shell("AcuteAorticDissection"), list(reader_make_constant_shell("AcuteDissection-AbdominalAorta-Intraoperative")), list(reader_make_constant_shell("AcuteDissection-AortaArch"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AortaArch"))), list(reader_make_constant_shell("AcuteDissection-AorticRoot-Intraoperative")), list(reader_make_constant_shell("AcuteDissection-AscendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AscendingAorta"))), list(reader_make_constant_shell("AcuteDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingThoracicAorta")))), list(reader_make_constant_shell("ChronicAortaDissection"), list(reader_make_constant_shell("ChronicDissection-AbdominalAorta")), list(reader_make_constant_shell("ChronicDissection-AortaArch")), list(reader_make_constant_shell("ChronicDissection-AorticRoot")), list(reader_make_constant_shell("ChronicDissection-AscendingAorta")), list(reader_make_constant_shell("ChronicDissection-DescendingAorta"), list(reader_make_constant_shell("ChronicDissection-DescendingThoracicAorta")))), list(reader_make_constant_shell("Dissection-AortaArch"), list(reader_make_constant_shell("AcuteDissection-AortaArch"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AortaArch"))), list(reader_make_constant_shell("ChronicDissection-AortaArch"))), list(reader_make_constant_shell("Dissection-AorticRoot"), list(reader_make_constant_shell("AcuteDissection-AorticRoot"), list(reader_make_constant_shell("AcuteDissection-AorticRoot-Intraoperative")))), list(reader_make_constant_shell("Dissection-AscendingAorta"), list(reader_make_constant_shell("AcuteDissection-AscendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AscendingAorta"))), list(reader_make_constant_shell("ChronicDissection-AscendingAorta"))), list(reader_make_constant_shell("Dissection-DescendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingThoracicAorta"))), list(reader_make_constant_shell("Dissection-DescendingThoracicAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingThoracicAorta"))))), list(reader_make_constant_shell("AorticAneurysm"), list(reader_make_constant_shell("AortaUnspecifiedAneurysm")))), list(reader_make_constant_shell("AortaFistula"), list(reader_make_constant_shell("FistulaCondition-DescendingAorta-Bronchial"), list(reader_make_constant_shell("FistulaCondition-DescendingThoracicAorta-Bronchial"))), list(reader_make_constant_shell("FistulaCondition-DescendingAorta-Esophageal"), list(reader_make_constant_shell("FistulaCondition-DescendingThoracicAorta-Esophageal"))), list(reader_make_constant_shell("FistulaCondition-ThoracicAorta-Bronchial")), list(reader_make_constant_shell("FistulaCondition-ThoracicAorta-Esophageal"))), list(reader_make_constant_shell("AorticCoarctation"), list(reader_make_constant_shell("AbdominalAortaCoarctation")), list(reader_make_constant_shell("AortaArchCoarctation")), list(reader_make_constant_shell("DescendingAortaCoarctation"), list(reader_make_constant_shell("DescendingThoracicAortaCoarctation")))), list(reader_make_constant_shell("Aortitis"), list(reader_make_constant_shell("AbdominalAortaAortitis")), list(reader_make_constant_shell("AortaArchAortitis")), list(reader_make_constant_shell("AscendingAortaAortitis")), list(reader_make_constant_shell("DescendingAortaAortitis"), list(reader_make_constant_shell("DescendingThoracicAortaAortitis")))), list(reader_make_constant_shell("Atherosclerosis-Aorta")), list(reader_make_constant_shell("Calcification-Aorta")), list(reader_make_constant_shell("CysticMedialNecrisis-Aorta")), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheAbdominalAorta"), list(reader_make_constant_shell("AbdominalAortaAortitis")), list(reader_make_constant_shell("AbdominalAortaCoarctation")), list(reader_make_constant_shell("AcuteDissection-AbdominalAorta-Intraoperative")), list(reader_make_constant_shell("Aneurysm-AbdominalAorta"), list(reader_make_constant_shell("SaccularAneurysm-AbdominalAorta"))), list(reader_make_constant_shell("Atherosclerosis-AbdominalAorta")), list(reader_make_constant_shell("Calcification-AbdominalAorta")), list(reader_make_constant_shell("ChronicDissection-AbdominalAorta")), list(reader_make_constant_shell("CysticMedialNecrosis-AbdominalAorta")), list(reader_make_constant_shell("Dilatation-AbdominalAorta")), list(reader_make_constant_shell("DissectingAneurysm-AbdominalAorta")), list(reader_make_constant_shell("Fibrosis-AbdominalAorta")), list(reader_make_constant_shell("Pseudoaneurysm-AbdominalAorta")), list(reader_make_constant_shell("Thrombosis-AbdominalAorta")) }), list(reader_make_constant_shell("DiseaseOfTheAorta-NonAneurysmal")), list(reader_make_constant_shell("DiseaseOfTheAorta-Normal")), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheAorticArch"), list(reader_make_constant_shell("AortaArch-AbnormalConduit")), list(reader_make_constant_shell("AortaArchAortitis")), list(reader_make_constant_shell("AortaArchCoarctation")), list(reader_make_constant_shell("AorticArchAneurysmOrDissection"), list(reader_make_constant_shell("Aneurysm-AortaArch"), list(reader_make_constant_shell("DissectingAneurysm-AortaArch")), list(reader_make_constant_shell("SaccularAneurysm-AortaArch")))), list(reader_make_constant_shell("AorticArchAtresia")), list(reader_make_constant_shell("Atherosclerosis-AortaArch")), list(reader_make_constant_shell("Calcification-AortaArch")), list(reader_make_constant_shell("CysticMedialNecrosis-AortaArch")), list(reader_make_constant_shell("Dilatation-AortaArch")), list(reader_make_constant_shell("Dissection-AortaArch"), list(reader_make_constant_shell("AcuteDissection-AortaArch"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AortaArch"))), list(reader_make_constant_shell("ChronicDissection-AortaArch"))), list(reader_make_constant_shell("Fibrosis-AortaArch")), list(reader_make_constant_shell("InfectionOrMycotic-AortaArch")), list(reader_make_constant_shell("IntramuralHematoma-AortaArch")), list(reader_make_constant_shell("PenetratingUlcer-AortaArch")), list(reader_make_constant_shell("Pseudoaneurysm-AortaArch")), list(reader_make_constant_shell("Trauma-AortaArch")), list(reader_make_constant_shell("Trombosis-AortaArch")) }), list(reader_make_constant_shell("DiseaseOfTheAorticRoot"), list(reader_make_constant_shell("Abscess-AorticRoot")), list(reader_make_constant_shell("Aneurysm-AorticRoot"), list(reader_make_constant_shell("DissectingAneurysm-AorticRoot")), list(reader_make_constant_shell("SaccularAneurysm-AorticRoot"))), list(reader_make_constant_shell("Calcification-AorticRoot")), list(reader_make_constant_shell("ChronicDissection-AorticRoot")), list(reader_make_constant_shell("Dilatation-AorticRoot")), list(reader_make_constant_shell("Dissection-AorticRoot"), list(reader_make_constant_shell("AcuteDissection-AorticRoot"), list(reader_make_constant_shell("AcuteDissection-AorticRoot-Intraoperative")))), list(reader_make_constant_shell("Fibrosis-AorticRoot"))), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheAscendingAorta"), list(reader_make_constant_shell("AscendingAorta-AbnormalConduit")), list(reader_make_constant_shell("AscendingAorta-NormalConduit")), list(reader_make_constant_shell("AscendingAortaAneurysmOrDissection"), list(reader_make_constant_shell("Aneurysm-AscendingAorta"), list(reader_make_constant_shell("DissectingAneurysm-AscendingAorta")), list(reader_make_constant_shell("SaccularAneurysm-AscendingAorta")))), list(reader_make_constant_shell("AscendingAortaAortitis")), list(reader_make_constant_shell("Atherosclerosis-AscendingAorta")), list(reader_make_constant_shell("Calcification-AscendingAorta")), list(reader_make_constant_shell("CysticMedialNecrosis-AscendingAorta")), list(reader_make_constant_shell("Dilatation-AscendingAorta")), list(reader_make_constant_shell("Dilatation-AscendingAortaRoot")), list(reader_make_constant_shell("DiseaseOfTheAscendingAorta-Other")), list(reader_make_constant_shell("Dissection-AscendingAorta"), list(reader_make_constant_shell("AcuteDissection-AscendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AscendingAorta"))), list(reader_make_constant_shell("ChronicDissection-AscendingAorta"))), list(reader_make_constant_shell("Fibrosis-AscendingAorta")), list(reader_make_constant_shell("InfectionOrMycotic-AscendingAorta")), list(reader_make_constant_shell("IntramuralHematoma-AscendingAorta")), list(reader_make_constant_shell("LeakInEndograftStent-AscendingAorta")), list(reader_make_constant_shell("PenetratingUlcer-AscendingAorta")), list(reader_make_constant_shell("Pseudoaneurysm-AscendingAorta")), list(reader_make_constant_shell("Thrombosis-AscendingAorta")), list(reader_make_constant_shell("Trauma-AscendingAorta")) }), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheDescendingAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingThoracicAorta"))), list(reader_make_constant_shell("Aneurysm-DescendingAorta"), list(reader_make_constant_shell("Aneurysm-DescendingThoracicAorta")), list(reader_make_constant_shell("DissectingAneurysm-DescendingThoracicAorta")), list(reader_make_constant_shell("SaccularAneurysm-DescendingAorta"), list(reader_make_constant_shell("SaccularAneurysm-DescendingThoracicAorta")))), list(reader_make_constant_shell("Atherosclerosis-DescendingAorta"), list(reader_make_constant_shell("Atherosclerosis-DescendingThoracicAorta"))), list(reader_make_constant_shell("ChronicDissection-DescendingAorta"), list(reader_make_constant_shell("ChronicDissection-DescendingThoracicAorta"))), list(reader_make_constant_shell("CysticMedialNecrosis-DescendingAorta"), list(reader_make_constant_shell("CysticMedialNecrosis-DescendingThoracicAorta"))), list(reader_make_constant_shell("DescendingAorta-AbnormalConduit"), list(reader_make_constant_shell("DescendingThoracicAorta-AbnormalConduit"))), list(reader_make_constant_shell("DescendingAorta-NormalConduit"), list(reader_make_constant_shell("DescendingThoracicAorta-NormalConduit"))), list(reader_make_constant_shell("DescendingAortaAortitis"), list(reader_make_constant_shell("DescendingThoracicAortaAortitis"))), list(reader_make_constant_shell("DescendingAortaCoarctation"), list(reader_make_constant_shell("DescendingThoracicAortaCoarctation"))), list(reader_make_constant_shell("DescendingAortaThrombosis"), list(reader_make_constant_shell("DescendingThoracicAortaThrombosis"))), list(reader_make_constant_shell("Dilatation-DescendingAorta"), list(reader_make_constant_shell("Dilatation-DescendingThoracicAorta"))), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheDescendingThoracicAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingThoracicAorta")), list(reader_make_constant_shell("Aneurysm-DescendingThoracicAorta")), list(reader_make_constant_shell("Atherosclerosis-DescendingThoracicAorta")), list(reader_make_constant_shell("ChronicDissection-DescendingThoracicAorta")), list(reader_make_constant_shell("CysticMedialNecrosis-DescendingThoracicAorta")), list(reader_make_constant_shell("DescendingThoracicAorta-AbnormalConduit")), list(reader_make_constant_shell("DescendingThoracicAorta-NormalConduit")), list(reader_make_constant_shell("DescendingThoracicAortaAortitis")), list(reader_make_constant_shell("DescendingThoracicAortaCoarctation")), list(reader_make_constant_shell("DescendingThoracicAortaThrombosis")), list(reader_make_constant_shell("Dilatation-DescendingThoracicAorta")), list(reader_make_constant_shell("DissectingAneurysm-DescendingThoracicAorta")), list(reader_make_constant_shell("Dissection-DescendingThoracicAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingThoracicAorta"))), list(reader_make_constant_shell("FistulaCondition-DescendingThoracicAorta-Bronchial")), list(reader_make_constant_shell("FistulaCondition-DescendingThoracicAorta-Esophageal")), list(reader_make_constant_shell("InfectionOrMycotic-DescendingThoracicAorta")), list(reader_make_constant_shell("IntramuralHematoma-DescendingThoracicAorta")), list(reader_make_constant_shell("PenetratingUlcer-DescendingThoracicAorta")), list(reader_make_constant_shell("Pseudoaneurysm-ThoracicAorta")), list(reader_make_constant_shell("SaccularAneurysm-DescendingThoracicAorta")), list(reader_make_constant_shell("Trauma-DescendingThoracicAorta")) }), list(reader_make_constant_shell("Dissection-DescendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingThoracicAorta"))), list(reader_make_constant_shell("Dissection-DescendingThoracicAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingThoracicAorta")))), list(reader_make_constant_shell("FistulaCondition-DescendingAorta-Bronchial"), list(reader_make_constant_shell("FistulaCondition-DescendingThoracicAorta-Bronchial"))), list(reader_make_constant_shell("FistulaCondition-DescendingAorta-Esophageal"), list(reader_make_constant_shell("FistulaCondition-DescendingThoracicAorta-Esophageal"))), list(reader_make_constant_shell("InfectionOrMycotic-DescendingAorta"), list(reader_make_constant_shell("InfectionOrMycotic-DescendingThoracicAorta"))), list(reader_make_constant_shell("IntramuralHematoma-DescendingAorta"), list(reader_make_constant_shell("IntramuralHematoma-DescendingThoracicAorta"))), list(reader_make_constant_shell("PenetratingUlcer-DescendingAorta"), list(reader_make_constant_shell("PenetratingUlcer-DescendingThoracicAorta"))), list(reader_make_constant_shell("Trauma-DescendingAorta"), list(reader_make_constant_shell("Trauma-DescendingThoracicAorta"))) }), list(reader_make_constant_shell("DiseaseOfTheThoracicAbdominalAorta"), list(reader_make_constant_shell("Aneurysm-ThoracicAbdominalAorta"))), list(reader_make_constant_shell("DiseaseOfTheThoracicAorta"), list(reader_make_constant_shell("Aneurysm-ThoracicAorta"), list(reader_make_constant_shell("DissectingAneurysm-ThoracicAorta"), list(reader_make_constant_shell("DissectingAneurysm-DescendingThoracicAorta")))), list(reader_make_constant_shell("Calcification-ThoracicAorta")), list(reader_make_constant_shell("DiseaseOfTheThoracicAorta-NonAneurysmal")), list(reader_make_constant_shell("Fibrosis-ThoracicAorta")), list(reader_make_constant_shell("FistulaCondition-ThoracicAorta-Bronchial")), list(reader_make_constant_shell("FistulaCondition-ThoracicAorta-Esophageal")), list(reader_make_constant_shell("Pseudoaneurysm-ThoracicAorta"))), list(reader_make_constant_shell("Fibrosis-Aorta")), list(reader_make_constant_shell("Thrombosis-Aorta")) }), list(reader_make_constant_shell("EndocrineDisorder"), list(reader_make_constant_shell("DiabetesMellitus")), list(reader_make_constant_shell("HashimotosThyroiditis")), list(reader_make_constant_shell("Hyperthyroidism")), list(reader_make_constant_shell("Hypothyroidism"))), list(reader_make_constant_shell("Enlarged-HeartChamberCondition")), list(reader_make_constant_shell("Fibrosis-thickening"), list(reader_make_constant_shell("Fibrosis-AbdominalAorta")), list(reader_make_constant_shell("Fibrosis-Aorta")), list(reader_make_constant_shell("Fibrosis-AortaArch")), list(reader_make_constant_shell("Fibrosis-AorticRoot")), list(reader_make_constant_shell("Fibrosis-AscendingAorta")), list(reader_make_constant_shell("Fibrosis-CardiacValve"), list(reader_make_constant_shell("Fibrosis-AorticValve")), list(reader_make_constant_shell("Fibrosis-MitralValve")), list(reader_make_constant_shell("Fibrosis-PulmonaryValve")), list(reader_make_constant_shell("Fibrosis-TricuspidValve"))), list(reader_make_constant_shell("Fibrosis-ThoracicAorta"))), list(reader_make_constant_shell("FistulaCondition"), list(reader_make_constant_shell("AortaFistula"), list(reader_make_constant_shell("FistulaCondition-DescendingAorta-Bronchial"), list(reader_make_constant_shell("FistulaCondition-DescendingThoracicAorta-Bronchial"))), list(reader_make_constant_shell("FistulaCondition-DescendingAorta-Esophageal"), list(reader_make_constant_shell("FistulaCondition-DescendingThoracicAorta-Esophageal"))), list(reader_make_constant_shell("FistulaCondition-ThoracicAorta-Bronchial")), list(reader_make_constant_shell("FistulaCondition-ThoracicAorta-Esophageal"))), list(reader_make_constant_shell("AtrialVentricularFistula"), list(reader_make_constant_shell("AtrialVentricularFistulaToLeftAtrium")), list(reader_make_constant_shell("AtrialVentricularFistulaToLeftVentricle")), list(reader_make_constant_shell("AtrialVentricularFistulaToPulmonaryArtery")), list(reader_make_constant_shell("AtrialVentricularFistulaToRightAtrium")), list(reader_make_constant_shell("AtrialVentricularFistulaToUndeterminedLocation"))), list(reader_make_constant_shell("FistulaCondition-CoronaryArteriovenous")), list(reader_make_constant_shell("FistulaCondition-CoronaryArteriovenousToRightVentricle")), list(reader_make_constant_shell("PulmonaryAtrial-ventricularFistulaPulmonaryArtery-PulmonaryVein"))), list(reader_make_constant_shell("Giant-HeartChamberCondition")), list(reader_make_constant_shell("HeartChamberCondition_small")), list(new SubLObject[]{ reader_make_constant_shell("HeartCondition"), list(reader_make_constant_shell("AcquiredHeartDisease"), list(reader_make_constant_shell("AcquiredValvularHeartDisease"), list(reader_make_constant_shell("AcquiredNonRheumaticValvularHeartDisease")), list(reader_make_constant_shell("Endocarditis-Generic"), list(reader_make_constant_shell("Endocarditis-Morbidity"), list(reader_make_constant_shell("Endocarditis-CardiacValve"), list(reader_make_constant_shell("Endocarditis-AorticValve")), list(reader_make_constant_shell("Endocarditis-MitralValve")), list(reader_make_constant_shell("Endocarditis-PulmonaryValve")), list(reader_make_constant_shell("Endocarditis-TricuspidValve"))))), list(reader_make_constant_shell("Regurgitation-MitralValve"), list(reader_make_constant_shell("MitralValveRegurgitationFromPapillaryMuscleDysfunction"))), list(reader_make_constant_shell("RheumaticHeartDisease")))), list(reader_make_constant_shell("CardiacArrest")), list(new SubLObject[]{ reader_make_constant_shell("CongenitalHeartDisease"), list(reader_make_constant_shell("AbsentPulmonaryArtery")), list(reader_make_constant_shell("Aneurysm-diverticulum-MembranousSeptum-SpontaneousClosureOfIVSD")), list(reader_make_constant_shell("AneurysmSinusValsalva")), list(reader_make_constant_shell("AnomalousPulmonaryVenousReturn-Partial")), list(reader_make_constant_shell("AnomalousPulmonaryVenousReturn-Total")), list(reader_make_constant_shell("AnomalyOfSystemicDrainage-PersistentLeftSVC")), list(reader_make_constant_shell("Aorta-rightVentricleCommunication")), list(reader_make_constant_shell("AortopulmonaryWindow")), list(reader_make_constant_shell("AspleniaSyndrome")), list(reader_make_constant_shell("Atrial-ventricularCanalDefectComplete")), list(reader_make_constant_shell("AtrialSeptalAnyeurysm-Congenital")), list(reader_make_constant_shell("AtrialSeptalDefectPrimum")), list(reader_make_constant_shell("AtrialSeptalDefectSecundum")), list(reader_make_constant_shell("AtrialVentricularFistula"), list(reader_make_constant_shell("AtrialVentricularFistulaToLeftAtrium")), list(reader_make_constant_shell("AtrialVentricularFistulaToLeftVentricle")), list(reader_make_constant_shell("AtrialVentricularFistulaToPulmonaryArtery")), list(reader_make_constant_shell("AtrialVentricularFistulaToRightAtrium")), list(reader_make_constant_shell("AtrialVentricularFistulaToUndeterminedLocation"))), list(reader_make_constant_shell("AtrioventricularMalformations")), list(reader_make_constant_shell("CommonVentricleTypeAOrTypeC")), list(reader_make_constant_shell("CongenitalCoronaryArteryAnomalyOtherOrMultipleCongenitalAnomalies")), list(reader_make_constant_shell("CongenitalDoubleOrificeLeftSinus")), list(reader_make_constant_shell("CongenitalDoubleOrificeRightSinus")), list(new SubLObject[]{ reader_make_constant_shell("CoronaryAnomaly"), list(reader_make_constant_shell("CoronaryAnomalyFistulaEctopicOrigin")), list(reader_make_constant_shell("CoronaryArteryAnomaly-CircumflexFromLeftAndRight")), list(reader_make_constant_shell("CoronaryArteryAnomaly-CircumflexFromRight")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftAnteriorDescendingAndCircumflexWithCommonOstium")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftAnteriorDescendingFromRight")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftCircumflexArteryAbsent")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftCoronaryArteryFromRight")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftFromPulmonaryArtery")), list(reader_make_constant_shell("CoronaryArteryAnomaly-LeftMainTrunkAbsent")), list(reader_make_constant_shell("CoronaryArteryAnomaly-RightFromLeft")) }), list(reader_make_constant_shell("Criss-crossHeart")), list(reader_make_constant_shell("Dextroversion")), list(reader_make_constant_shell("DoubleChamberedRightVentricle")), list(reader_make_constant_shell("DoubleOutletLeftVentricle")), list(reader_make_constant_shell("DoubleOutletRightVentricle")), list(reader_make_constant_shell("DoubleRightVentricle")), list(reader_make_constant_shell("EbsteinAnomaly")), list(reader_make_constant_shell("EndocardialFibroelastosis")), list(reader_make_constant_shell("HypertrophicObstructiveCardiomyopathy-Congenital")), list(reader_make_constant_shell("HypoplasticLeftHeartSyndrome")), list(reader_make_constant_shell("HypoplasticRightHeartSyndrome")), list(reader_make_constant_shell("IsolatedDextrocardia")), list(reader_make_constant_shell("IsolatedLevocardiaNoSitusInversus")), list(reader_make_constant_shell("MalpositionOfGreatVessels")), list(reader_make_constant_shell("MalpositionOfTheHeart")), list(reader_make_constant_shell("Mapca")), list(reader_make_constant_shell("MultipleVentricularSeptalDefect")), list(reader_make_constant_shell("PatentDuctusArteriosus")), list(reader_make_constant_shell("PatentForamenOvale")), list(reader_make_constant_shell("PolyspleniaSyndrome")), list(reader_make_constant_shell("PulmonaryArteryStenosis")), list(reader_make_constant_shell("PulmonaryAtrial-ventricularFistulaPulmonaryArtery-PulmonaryVein")), list(reader_make_constant_shell("SeptalDefect-CommonAtrium")), list(reader_make_constant_shell("SimpleDextrocardiaWithSitusInversus")), list(reader_make_constant_shell("SinusVenosusAtrialSeptalDefect")), list(reader_make_constant_shell("StorageDiseaseOfTheHeart")), list(reader_make_constant_shell("SystemicVenousObstruction")), list(reader_make_constant_shell("TetralogyOfFallot")), list(reader_make_constant_shell("TetralogyOfFallotWithAbsentPulmonaryValve")), list(reader_make_constant_shell("TranspositionGreatVessels-Dextro-transpositionOrLevo-transposition")), list(reader_make_constant_shell("TranspositionGreatVesselsCorrected")), list(reader_make_constant_shell("TruncusArteriosus")), list(reader_make_constant_shell("VascularRing")), list(reader_make_constant_shell("VentricularInversion")), list(reader_make_constant_shell("VentricularSeptalDefect"), list(reader_make_constant_shell("VentricularSeptalDefect-Atrial-ventricularCanalType")), list(reader_make_constant_shell("VentricularSeptalDefect-Membranous")), list(reader_make_constant_shell("VentricularSeptalDefect-Muscular"))) }), list(new SubLObject[]{ reader_make_constant_shell("CoronaryAbnormality"), list(reader_make_constant_shell("CoronaryArteryAneurysm")), list(reader_make_constant_shell("CoronaryArteryDilation")), list(reader_make_constant_shell("CoronaryArteryEmbolus")), list(reader_make_constant_shell("CoronaryArteryThrombosis")), list(reader_make_constant_shell("Dissection-CoronaryArtery"), list(reader_make_constant_shell("AcuteDissection-CoronaryArtery"), list(reader_make_constant_shell("AcuteDissection-CoronaryArtery-Intraoperative"))), list(reader_make_constant_shell("ChronicDissection-CoronaryArtery"))), list(reader_make_constant_shell("MultipleCoronaryArteryAbnormalities")), list(reader_make_constant_shell("MyocardialBridging")), list(reader_make_constant_shell("OtherCoronaryArteryAbnormality")) }), list(reader_make_constant_shell("HeartDisease-NonValvular"), list(new SubLObject[]{ reader_make_constant_shell("CardiacArrhythmia"), list(reader_make_constant_shell("3rdDegreeAVBlock")), list(reader_make_constant_shell("AcuteArrhythmia")), list(reader_make_constant_shell("ArrhythmiaOrHeartBlockOrPacemakerInsertion")), list(reader_make_constant_shell("AtrialArrhythmia"), list(reader_make_constant_shell("AtrialFibrillationOrFlutter"), list(reader_make_constant_shell("AtrialFibrillation")), list(reader_make_constant_shell("AtrialFibrillationOrFlutterRequiringTreatment")), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal")))), list(reader_make_constant_shell("AtrialTachycardia")), list(reader_make_constant_shell("CardiacFlutter"), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal")))), list(reader_make_constant_shell("EctopicHeartbeat")), list(reader_make_constant_shell("PrematureAtrialComplex")), list(reader_make_constant_shell("PrematureEctopicBeats")), list(reader_make_constant_shell("WanderingPacemaker"))), list(reader_make_constant_shell("CardiacArrhythmia-Junctional"), list(reader_make_constant_shell("HeartRhythm_junctional_accelerated_junctional_rhythm")), list(reader_make_constant_shell("HeartRhythm_junctional_junctional_escape_rhythm"))), list(reader_make_constant_shell("CardiacFibrillation"), list(reader_make_constant_shell("AtrialFibrillation"))), list(reader_make_constant_shell("CardiacSinusRhythm"), list(reader_make_constant_shell("Bradycardia"), list(reader_make_constant_shell("HeartBlock"), list(reader_make_constant_shell("AVBlock"), list(reader_make_constant_shell("HeartBlock-CompleteWithJunctionalEscape")), list(reader_make_constant_shell("HeartBlock-CompleteWithVentricularEscape")), list(reader_make_constant_shell("HeartBlock-FirstDegree")), list(reader_make_constant_shell("HeartBlock-SecondDegree"), list(reader_make_constant_shell("HeartBlock-SecondDegree-Type1")), list(reader_make_constant_shell("HeartBlock-SecondDegree-Type2"))), list(reader_make_constant_shell("ThirdDegreeAvBlock"))), list(reader_make_constant_shell("CompleteHeartBlock"), list(reader_make_constant_shell("HeartBlock-CompleteWithJunctionalEscape")), list(reader_make_constant_shell("HeartBlock-CompleteWithVentricularEscape")), list(reader_make_constant_shell("HeartRhythm_ventricular_complete_heart_block")), list(reader_make_constant_shell("HeartRhythm_ventricular_complete_heart_block_with_junctional_escape")), list(reader_make_constant_shell("HeartRhythm_ventricular_complete_heart_block_with_ventricular_escape"))), list(reader_make_constant_shell("HeartRhythm_heart_block_complete_heart_block")))), list(reader_make_constant_shell("ParoxysmalTachycardia-Sinus")), list(reader_make_constant_shell("SickSinusSyndrome")), list(reader_make_constant_shell("SinusRhythm-Normal")), list(reader_make_constant_shell("SinusTachycardia"))), list(reader_make_constant_shell("ChronicArrhythmia")), list(reader_make_constant_shell("FibrillationFlutterTachycardiaOrHeartBlock"), list(reader_make_constant_shell("FibrillationOrFlutter"), list(reader_make_constant_shell("AtrialFibrillationOrFlutter"), list(reader_make_constant_shell("AtrialFibrillation")), list(reader_make_constant_shell("AtrialFibrillationOrFlutterRequiringTreatment")), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal"))))), list(reader_make_constant_shell("Tachycardia"), list(reader_make_constant_shell("ParoxysmalTachycardia-Sinus")), list(reader_make_constant_shell("SinusTachycardia")), list(reader_make_constant_shell("SupraventricularTachycardia"), list(reader_make_constant_shell("AtrialTachycardia"))), list(reader_make_constant_shell("VentricularTachycardia")))), list(reader_make_constant_shell("HeartBlock-NotComplete")), list(reader_make_constant_shell("Paced-HeartRhythm"), list(reader_make_constant_shell("Atrial-ventricular-PacedHeartRhythm")), list(reader_make_constant_shell("AtrialPacedRhythm")), list(reader_make_constant_shell("AtriallyPacedHeartRhythm")), list(reader_make_constant_shell("VentricularlyPacedHeartRhythm"))), list(reader_make_constant_shell("PermanentCardiacArrhythmia")), list(reader_make_constant_shell("PrematureVentricularContraction")), list(reader_make_constant_shell("VentricularArrhythmia"), list(reader_make_constant_shell("PrematureVentricularComplex")), list(reader_make_constant_shell("VentricularTachycardiaOrFibrillation"), list(reader_make_constant_shell("VentricularFibrillation")), list(reader_make_constant_shell("VentricularTachycardia")))) }), list(reader_make_constant_shell("Cardiomyopathy"), list(reader_make_constant_shell("HypertrophicCardiomyopathy"), list(reader_make_constant_shell("HypertrophicCardiomyopathy-Obstructiveness-NOS")), list(reader_make_constant_shell("HypertrophicObstructiveCardiomyopathy"), list(reader_make_constant_shell("HypertrophicObstructiveCardiomyopathy-Congenital"))), list(reader_make_constant_shell("Non-obstructiveHypertrophicCardiomyopathy"))), list(reader_make_constant_shell("IschemicCardiomyopathy")), list(reader_make_constant_shell("RestrictiveCardiomyopathyAmyloid"))), list(reader_make_constant_shell("Pericarditis"))), list(new SubLObject[]{ reader_make_constant_shell("HeartDisease-Other"), list(reader_make_constant_shell("CardiacEnlargement")), list(reader_make_constant_shell("CardiacEnlargement-Questionable")), list(reader_make_constant_shell("CardiogenicShock")), list(reader_make_constant_shell("Cardiomyopathy"), list(reader_make_constant_shell("HypertrophicCardiomyopathy"), list(reader_make_constant_shell("HypertrophicCardiomyopathy-Obstructiveness-NOS")), list(reader_make_constant_shell("HypertrophicObstructiveCardiomyopathy"), list(reader_make_constant_shell("HypertrophicObstructiveCardiomyopathy-Congenital"))), list(reader_make_constant_shell("Non-obstructiveHypertrophicCardiomyopathy"))), list(reader_make_constant_shell("IschemicCardiomyopathy")), list(reader_make_constant_shell("RestrictiveCardiomyopathyAmyloid"))), list(reader_make_constant_shell("CongestiveHeartFailure")), list(reader_make_constant_shell("DrugInducedToxicity")), list(reader_make_constant_shell("HeartCondition-TumorOrMass")), list(reader_make_constant_shell("HeartDisease-Other-NonTumorNonMyocarditis")), list(reader_make_constant_shell("HeartDisease-Other-OtherNonCardiacEnlargement")), list(reader_make_constant_shell("HeartDisease-OtherOther")), list(reader_make_constant_shell("HypertensiveHeartDisease")), list(reader_make_constant_shell("IatrogenicInjury")), list(reader_make_constant_shell("LeftVentricleAneurysm")), list(reader_make_constant_shell("Myocarditis")), list(reader_make_constant_shell("PericardialDisease"), list(reader_make_constant_shell("PericardialEffusion")), list(reader_make_constant_shell("Pericarditis"))), list(reader_make_constant_shell("PrimaryMyocardialDisease")), list(reader_make_constant_shell("RadiationInducedToxicity")), list(reader_make_constant_shell("RheumaticHeartDisease")), list(reader_make_constant_shell("RightVentricleAneurysm")), list(reader_make_constant_shell("SeptalHypertrophyNonHOCM")), list(reader_make_constant_shell("ToxicallyInducediatrogenic")), list(reader_make_constant_shell("TraumaticHeartDisease")), list(reader_make_constant_shell("VentricularSeptalAneurysm")) }), list(reader_make_constant_shell("HeartFailure"), list(reader_make_constant_shell("CongestiveHeartFailure"))), list(reader_make_constant_shell("HeartValveRelatedProblem"), list(reader_make_constant_shell("AcquiredValvularHeartDisease"), list(reader_make_constant_shell("AcquiredNonRheumaticValvularHeartDisease")), list(reader_make_constant_shell("Endocarditis-Generic"), list(reader_make_constant_shell("Endocarditis-Morbidity"), list(reader_make_constant_shell("Endocarditis-CardiacValve"), list(reader_make_constant_shell("Endocarditis-AorticValve")), list(reader_make_constant_shell("Endocarditis-MitralValve")), list(reader_make_constant_shell("Endocarditis-PulmonaryValve")), list(reader_make_constant_shell("Endocarditis-TricuspidValve"))))), list(reader_make_constant_shell("Regurgitation-MitralValve"), list(reader_make_constant_shell("MitralValveRegurgitationFromPapillaryMuscleDysfunction"))), list(reader_make_constant_shell("RheumaticHeartDisease"))), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheAorticValve"), list(reader_make_constant_shell("AbnormalNumberOfCusps-AorticValve")), list(reader_make_constant_shell("AnnularCalcification-AorticValve")), list(reader_make_constant_shell("AorticValveAbnormality-NotSpecified")), list(reader_make_constant_shell("Atresia-AorticValve")), list(reader_make_constant_shell("Calcification-AorticValve")), list(reader_make_constant_shell("Endocarditis-AorticValve")), list(reader_make_constant_shell("Fibrosis-AorticValve")), list(reader_make_constant_shell("ProstheticValveDysfunction-AorticValve")), list(reader_make_constant_shell("Regurgitation-AorticValve")), list(reader_make_constant_shell("RheumaticValveDisease-AorticValve")) }), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheMitralValve"), list(reader_make_constant_shell("AbnormalNumberOfCusps-MitralValve")), list(reader_make_constant_shell("AnnularCalcification-MitralValve")), list(reader_make_constant_shell("Atresia-MitralValve")), list(reader_make_constant_shell("BallooningOrProlapsedCardiacValve-MitralValve")), list(reader_make_constant_shell("Calcification-MitralValve")), list(reader_make_constant_shell("Endocarditis-MitralValve")), list(reader_make_constant_shell("Fibrosis-MitralValve")), list(reader_make_constant_shell("MitralValveAbnormality-NotSpecified")), list(reader_make_constant_shell("MyxomatousDegeneration-MitralValve")), list(reader_make_constant_shell("PapillaryMuscleDysfunction-MitralValve")), list(reader_make_constant_shell("ProstheticValveDysfunction-MitralValve")), list(reader_make_constant_shell("Regurgitation-MitralValve"), list(reader_make_constant_shell("MitralValveRegurgitationFromPapillaryMuscleDysfunction"))), list(reader_make_constant_shell("RheumaticValveDisease-MitralValve")) }), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfThePulmonaryValve"), list(reader_make_constant_shell("AbnormalNumberOfCusps-PulmonaryValve")), list(reader_make_constant_shell("AnnularCalcification-PulmonaryValve")), list(reader_make_constant_shell("Atresia-PulmonaryValve"), list(reader_make_constant_shell("AtresiaWithIntactSeptum-PulmonaryValve")), list(reader_make_constant_shell("AtresiaWithVentricularSeptalDefect-PulmonaryValve"))), list(reader_make_constant_shell("Calcification-PulmonaryValve")), list(reader_make_constant_shell("Endocarditis-PulmonaryValve")), list(reader_make_constant_shell("Fibrosis-PulmonaryValve")), list(reader_make_constant_shell("ProstheticValveDysfunction-PulmonaryValve")), list(reader_make_constant_shell("PulmonaryValveAbnormality-NotSpecified")), list(reader_make_constant_shell("Regurgitation-PulmonaryValve")), list(reader_make_constant_shell("RheumaticValveDisease-PulmonaryValve")), list(reader_make_constant_shell("Stenosis-PulmonaryValve")) }), list(new SubLObject[]{ reader_make_constant_shell("DiseaseOfTheTricuspidValve"), list(reader_make_constant_shell("AbnormalNumberOfCusps-TricuspidValve")), list(reader_make_constant_shell("AnnularCalcification-TricuspidValve")), list(reader_make_constant_shell("Atresia-TricuspidValve")), list(reader_make_constant_shell("BallooningOrProlapsedCardiacValve-TricuspidValve")), list(reader_make_constant_shell("Calcification-TricuspidValve")), list(reader_make_constant_shell("Endocarditis-TricuspidValve")), list(reader_make_constant_shell("Fibrosis-TricuspidValve")), list(reader_make_constant_shell("MyxomatousDegeneration-TricuspidValve")), list(reader_make_constant_shell("PapillaryMuscleDysfunction-TricuspidValve")), list(reader_make_constant_shell("ProstheticValveDysfunction-TricuspidValve")), list(reader_make_constant_shell("Regurgitation-TricuspidValve")), list(reader_make_constant_shell("RheumaticValveDisease-TricuspidValve")), list(reader_make_constant_shell("Stenosis-TricuspidValve")), list(reader_make_constant_shell("TricuspidValveAbnormality-NotSpecified")) }), list(reader_make_constant_shell("HeartValveDysfunction"), list(reader_make_constant_shell("CardiacValveStenosis"), list(reader_make_constant_shell("Stenosis-AorticValve")), list(reader_make_constant_shell("Stenosis-MitralValve")), list(reader_make_constant_shell("Stenosis-PulmonaryValve")), list(reader_make_constant_shell("Stenosis-TricuspidValve")))), list(reader_make_constant_shell("RheumaticValveDisease"), list(reader_make_constant_shell("RheumaticValveDisease-AorticValve")), list(reader_make_constant_shell("RheumaticValveDisease-MitralValve")), list(reader_make_constant_shell("RheumaticValveDisease-PulmonaryValve")), list(reader_make_constant_shell("RheumaticValveDisease-TricuspidValve")))), list(reader_make_constant_shell("IschemicHeartDisease"), list(reader_make_constant_shell("CoronaryArteryDisease-Ischemic")), list(reader_make_constant_shell("In-stentStenosis")), list(reader_make_constant_shell("PostInfarctVentricularSeptalDefect")), list(reader_make_constant_shell("RightVentricularInfarction"))), list(reader_make_constant_shell("VentricularDisorder"), list(reader_make_constant_shell("LeftVentricularDisorder"), list(reader_make_constant_shell("LeftVentricleAneurysm"))), list(reader_make_constant_shell("RightVentricularDisorder"), list(reader_make_constant_shell("RightVentricleAneurysm"))), list(reader_make_constant_shell("VentricularAneurysm"), list(reader_make_constant_shell("LeftVentricleAneurysm")), list(reader_make_constant_shell("RightVentricleAneurysm"))), list(reader_make_constant_shell("VentricularArrhythmia"), list(reader_make_constant_shell("PrematureVentricularComplex")), list(reader_make_constant_shell("VentricularTachycardiaOrFibrillation"), list(reader_make_constant_shell("VentricularFibrillation")), list(reader_make_constant_shell("VentricularTachycardia"))))) }), list(reader_make_constant_shell("HeartRhythm"), list(reader_make_constant_shell("HeartRhythm_atrial"), list(reader_make_constant_shell("AtrialArrhythmia"), list(reader_make_constant_shell("AtrialFibrillationOrFlutter"), list(reader_make_constant_shell("AtrialFibrillation")), list(reader_make_constant_shell("AtrialFibrillationOrFlutterRequiringTreatment")), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal")))), list(reader_make_constant_shell("AtrialTachycardia")), list(reader_make_constant_shell("CardiacFlutter"), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal")))), list(reader_make_constant_shell("EctopicHeartbeat")), list(reader_make_constant_shell("PrematureAtrialComplex")), list(reader_make_constant_shell("PrematureEctopicBeats")), list(reader_make_constant_shell("WanderingPacemaker"))), list(reader_make_constant_shell("HeartRhythm_atrial_other")), list(reader_make_constant_shell("HeartRhythm_atrial_supraventricular_tachycardia"))), list(reader_make_constant_shell("HeartRhythm_cardiac"), list(new SubLObject[]{ reader_make_constant_shell("CardiacArrhythmia"), list(reader_make_constant_shell("3rdDegreeAVBlock")), list(reader_make_constant_shell("AcuteArrhythmia")), list(reader_make_constant_shell("ArrhythmiaOrHeartBlockOrPacemakerInsertion")), list(reader_make_constant_shell("AtrialArrhythmia"), list(reader_make_constant_shell("AtrialFibrillationOrFlutter"), list(reader_make_constant_shell("AtrialFibrillation")), list(reader_make_constant_shell("AtrialFibrillationOrFlutterRequiringTreatment")), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal")))), list(reader_make_constant_shell("AtrialTachycardia")), list(reader_make_constant_shell("CardiacFlutter"), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal")))), list(reader_make_constant_shell("EctopicHeartbeat")), list(reader_make_constant_shell("PrematureAtrialComplex")), list(reader_make_constant_shell("PrematureEctopicBeats")), list(reader_make_constant_shell("WanderingPacemaker"))), list(reader_make_constant_shell("CardiacArrhythmia-Junctional"), list(reader_make_constant_shell("HeartRhythm_junctional_accelerated_junctional_rhythm")), list(reader_make_constant_shell("HeartRhythm_junctional_junctional_escape_rhythm"))), list(reader_make_constant_shell("CardiacFibrillation"), list(reader_make_constant_shell("AtrialFibrillation"))), list(reader_make_constant_shell("CardiacSinusRhythm"), list(reader_make_constant_shell("Bradycardia"), list(reader_make_constant_shell("HeartBlock"), list(reader_make_constant_shell("AVBlock"), list(reader_make_constant_shell("HeartBlock-CompleteWithJunctionalEscape")), list(reader_make_constant_shell("HeartBlock-CompleteWithVentricularEscape")), list(reader_make_constant_shell("HeartBlock-FirstDegree")), list(reader_make_constant_shell("HeartBlock-SecondDegree"), list(reader_make_constant_shell("HeartBlock-SecondDegree-Type1")), list(reader_make_constant_shell("HeartBlock-SecondDegree-Type2"))), list(reader_make_constant_shell("ThirdDegreeAvBlock"))), list(reader_make_constant_shell("CompleteHeartBlock"), list(reader_make_constant_shell("HeartBlock-CompleteWithJunctionalEscape")), list(reader_make_constant_shell("HeartBlock-CompleteWithVentricularEscape")), list(reader_make_constant_shell("HeartRhythm_ventricular_complete_heart_block")), list(reader_make_constant_shell("HeartRhythm_ventricular_complete_heart_block_with_junctional_escape")), list(reader_make_constant_shell("HeartRhythm_ventricular_complete_heart_block_with_ventricular_escape"))), list(reader_make_constant_shell("HeartRhythm_heart_block_complete_heart_block")))), list(reader_make_constant_shell("ParoxysmalTachycardia-Sinus")), list(reader_make_constant_shell("SickSinusSyndrome")), list(reader_make_constant_shell("SinusRhythm-Normal")), list(reader_make_constant_shell("SinusTachycardia"))), list(reader_make_constant_shell("ChronicArrhythmia")), list(reader_make_constant_shell("FibrillationFlutterTachycardiaOrHeartBlock"), list(reader_make_constant_shell("FibrillationOrFlutter"), list(reader_make_constant_shell("AtrialFibrillationOrFlutter"), list(reader_make_constant_shell("AtrialFibrillation")), list(reader_make_constant_shell("AtrialFibrillationOrFlutterRequiringTreatment")), list(reader_make_constant_shell("AtrialFlutter"), list(reader_make_constant_shell("AtrialFlutter-Paroxysmal"))))), list(reader_make_constant_shell("Tachycardia"), list(reader_make_constant_shell("ParoxysmalTachycardia-Sinus")), list(reader_make_constant_shell("SinusTachycardia")), list(reader_make_constant_shell("SupraventricularTachycardia"), list(reader_make_constant_shell("AtrialTachycardia"))), list(reader_make_constant_shell("VentricularTachycardia")))), list(reader_make_constant_shell("HeartBlock-NotComplete")), list(reader_make_constant_shell("Paced-HeartRhythm"), list(reader_make_constant_shell("Atrial-ventricular-PacedHeartRhythm")), list(reader_make_constant_shell("AtrialPacedRhythm")), list(reader_make_constant_shell("AtriallyPacedHeartRhythm")), list(reader_make_constant_shell("VentricularlyPacedHeartRhythm"))), list(reader_make_constant_shell("PermanentCardiacArrhythmia")), list(reader_make_constant_shell("PrematureVentricularContraction")), list(reader_make_constant_shell("VentricularArrhythmia"), list(reader_make_constant_shell("PrematureVentricularComplex")), list(reader_make_constant_shell("VentricularTachycardiaOrFibrillation"), list(reader_make_constant_shell("VentricularFibrillation")), list(reader_make_constant_shell("VentricularTachycardia")))) })), list(reader_make_constant_shell("HeartRhythm_other_pulseless_electrical_activity")), list(reader_make_constant_shell("HeartRhythm_ventricular"), list(reader_make_constant_shell("HeartRhythm_ventricular_accelerated_idioventricular")), list(reader_make_constant_shell("HeartRhythm_ventricular_ventricular_escape")), list(reader_make_constant_shell("VentricularArrhythmia"), list(reader_make_constant_shell("PrematureVentricularComplex")), list(reader_make_constant_shell("VentricularTachycardiaOrFibrillation"), list(reader_make_constant_shell("VentricularFibrillation")), list(reader_make_constant_shell("VentricularTachycardia"))))), list(reader_make_constant_shell("OtherHeartRhythmType"), list(reader_make_constant_shell("Asystole")), list(reader_make_constant_shell("IdioventricularHeartRhythm")))), list(reader_make_constant_shell("HematologicDisorder"), list(reader_make_constant_shell("Anemia"), list(reader_make_constant_shell("HemolyticAnemia")))), list(reader_make_constant_shell("Hernia"), list(reader_make_constant_shell("HiatalHernia"))), list(reader_make_constant_shell("InfectedEndocardialPacingLead")), list(reader_make_constant_shell("InfectedEpicardialPacingLead")), list(reader_make_constant_shell("Infection"), list(reader_make_constant_shell("InfectionOrMycotic"), list(reader_make_constant_shell("InfectionOrMycotic-AortaArch")), list(reader_make_constant_shell("InfectionOrMycotic-AscendingAorta")), list(reader_make_constant_shell("InfectionOrMycotic-DescendingAorta"), list(reader_make_constant_shell("InfectionOrMycotic-DescendingThoracicAorta"))))), list(reader_make_constant_shell("InflammationCondition"), list(reader_make_constant_shell("Myocarditis")), list(reader_make_constant_shell("Pericarditis"))), list(reader_make_constant_shell("IntramuralHematoma"), list(reader_make_constant_shell("IntramuralHematoma-AortaArch")), list(reader_make_constant_shell("IntramuralHematoma-AscendingAorta")), list(reader_make_constant_shell("IntramuralHematoma-DescendingAorta"), list(reader_make_constant_shell("IntramuralHematoma-DescendingThoracicAorta")))), list(reader_make_constant_shell("LeakInEndograftStent-AorticArch")), list(reader_make_constant_shell("LeakInEndograftStent-DescendingAorta")), list(reader_make_constant_shell("LifeThreateningCondition"), list(reader_make_constant_shell("Cancer")), list(reader_make_constant_shell("DiabetesMellitus")), list(reader_make_constant_shell("Hepatitis")), list(reader_make_constant_shell("ImmediatelyLifeThreateningCondition"), list(reader_make_constant_shell("CardiacArrest")), list(reader_make_constant_shell("Stroke-PhysiologicalCondition"), list(reader_make_constant_shell("StrokeDueToBleed")), list(reader_make_constant_shell("StrokeDueToEmbolus"))))), list(reader_make_constant_shell("MyxomatousDegeneration"), list(reader_make_constant_shell("MyxomatousDegeneration-MitralValve")), list(reader_make_constant_shell("MyxomatousDegeneration-TricuspidValve"))), list(reader_make_constant_shell("NeurologicalAilmentCondition"), list(reader_make_constant_shell("NeurologicalDisease"), list(reader_make_constant_shell("CerebrovascularNeurologicAttack"), list(reader_make_constant_shell("Stroke-PhysiologicalCondition"), list(reader_make_constant_shell("StrokeDueToBleed")), list(reader_make_constant_shell("StrokeDueToEmbolus"))), list(reader_make_constant_shell("TIAOrRIND"), list(reader_make_constant_shell("ReversibleIschemicNeurologicDeficit")), list(reader_make_constant_shell("TransientIschemicAttack")))), list(reader_make_constant_shell("DementiaOrAlzheimersDisease")), list(reader_make_constant_shell("OtherCentralNervousSystemDisease")))), list(reader_make_constant_shell("Normal-Condition")), list(reader_make_constant_shell("NormalAorticValve-Condition")), list(reader_make_constant_shell("NormalEndograftStent-AorticArch")), list(reader_make_constant_shell("NormalEndograftStent-AscendingAorta")), list(reader_make_constant_shell("NormalEndograftStent-DescendingAorta")), list(reader_make_constant_shell("NormalMitralValve-Condition")), list(reader_make_constant_shell("NormalPulmonaryValve-Condition")), list(reader_make_constant_shell("NormalTricuspidValve-Condition")), list(reader_make_constant_shell("OtherDiagnosis")), list(reader_make_constant_shell("OtherDisease"), list(reader_make_constant_shell("AcuteRheumaticFever")), list(reader_make_constant_shell("CollagenDisease")), list(reader_make_constant_shell("ConnectiveTissueDisease-Non-marfan")), list(reader_make_constant_shell("Dyslipidemia")), list(reader_make_constant_shell("Immunosupressed-Condition")), list(reader_make_constant_shell("MarfansSyndrome")), list(reader_make_constant_shell("Obesity"), list(reader_make_constant_shell("MorbidObesity")))), list(reader_make_constant_shell("PapillaryMuscleDysfunction"), list(reader_make_constant_shell("PapillaryMuscleDysfunction-MitralValve")), list(reader_make_constant_shell("PapillaryMuscleDysfunction-TricuspidValve"))), list(reader_make_constant_shell("ProstheticValveDysfunction"), list(reader_make_constant_shell("ProstheticValveDysfunction-AorticValve")), list(reader_make_constant_shell("ProstheticValveDysfunction-MitralValve")), list(reader_make_constant_shell("ProstheticValveDysfunction-PulmonaryValve")), list(reader_make_constant_shell("ProstheticValveDysfunction-TricuspidValve"))), list(reader_make_constant_shell("Pseudoaneurysm"), list(reader_make_constant_shell("AorticPseudoaneurysm"), list(reader_make_constant_shell("Pseudoaneurysm-AbdominalAorta")), list(reader_make_constant_shell("Pseudoaneurysm-AortaArch")), list(reader_make_constant_shell("Pseudoaneurysm-AscendingAorta")), list(reader_make_constant_shell("Pseudoaneurysm-ThoracicAorta")))), list(reader_make_constant_shell("Regurgitation-Circulatory"), list(reader_make_constant_shell("Regurgitation-CardiacValve"), list(reader_make_constant_shell("Regurgitation-AorticValve")), list(reader_make_constant_shell("Regurgitation-MitralValve"), list(reader_make_constant_shell("MitralValveRegurgitationFromPapillaryMuscleDysfunction"))), list(reader_make_constant_shell("Regurgitation-PulmonaryValve")), list(reader_make_constant_shell("Regurgitation-TricuspidValve")))), list(reader_make_constant_shell("RenalDisease"), list(reader_make_constant_shell("RenalFailure"), list(reader_make_constant_shell("RenalFailureRequiringDialysis")))), list(reader_make_constant_shell("RespiratoryAilment"), list(new SubLObject[]{ reader_make_constant_shell("LungDisease"), list(reader_make_constant_shell("ChronicLungDisease"), list(reader_make_constant_shell("ChronicLungDisease-Mild")), list(reader_make_constant_shell("ChronicLungDisease-Moderate")), list(reader_make_constant_shell("ChronicLungDisease-Severe")), list(reader_make_constant_shell("ChronicObstructivePulmonaryDisease"), list(reader_make_constant_shell("ChronicObstructivePulmonaryDisease-Clinical")), list(reader_make_constant_shell("ChronicObstructivePulmonaryDisease-Pharmacologic")))), list(reader_make_constant_shell("ChronicObstructivePulmonaryDisease-PulmonaryFunctionTest")), list(reader_make_constant_shell("PulmonaryEmbolism")), list(reader_make_constant_shell("PulmonaryHypertension")), list(reader_make_constant_shell("PulmonaryHypertension-Clinical")), list(reader_make_constant_shell("PulmonaryHypertension-Primary")), list(reader_make_constant_shell("PulmonaryHypertension-Secondary")), list(reader_make_constant_shell("PulmonaryHypertensionWithNoPaSystolicPressureReading")), list(reader_make_constant_shell("PulmonaryHypertensionWithPaSystolicPressureGt35")), list(reader_make_constant_shell("PulmonaryHypertensionWithRVSystolicPressureGt35")) })), list(reader_make_constant_shell("SkinAilment"), list(reader_make_constant_shell("Scleroderma"))), list(reader_make_constant_shell("Stenosis-Condition"), list(reader_make_constant_shell("CardiacValveStenosis"), list(reader_make_constant_shell("Stenosis-AorticValve")), list(reader_make_constant_shell("Stenosis-MitralValve")), list(reader_make_constant_shell("Stenosis-PulmonaryValve")), list(reader_make_constant_shell("Stenosis-TricuspidValve"))), list(reader_make_constant_shell("CarotidArteryStenosisGreaterThan20"), list(reader_make_constant_shell("CarotidArteryStenosisGreaterThan20LessThanOrEqualTo75")), list(reader_make_constant_shell("CarotidArteryStenosisGreaterThan75"), list(reader_make_constant_shell("CarotidArteryStenosisGreaterThan79")))), list(reader_make_constant_shell("PulmonaryArteryStenosis"))), list(reader_make_constant_shell("SuspectedDissectingAneurysm-AbdominalAorta")), list(reader_make_constant_shell("SuspectedDissectingAneurysm-AortaArch")), list(reader_make_constant_shell("SuspectedDissectingAneurysm-AorticRoot")), list(reader_make_constant_shell("SuspectedDissectingAneurysm-AscendingAorta")), list(reader_make_constant_shell("SuspectedDissectingAneurysm-ThoracicAorta")), list(reader_make_constant_shell("Thrombosis"), list(reader_make_constant_shell("CoronaryArteryThrombosis")), list(reader_make_constant_shell("DescendingAortaThrombosis"), list(reader_make_constant_shell("DescendingThoracicAortaThrombosis"))), list(reader_make_constant_shell("Thrombosis-AbdominalAorta")), list(reader_make_constant_shell("Thrombosis-Aorta")), list(reader_make_constant_shell("Thrombosis-AscendingAorta")), list(reader_make_constant_shell("Trombosis-AortaArch"))), list(reader_make_constant_shell("Trauma"), list(reader_make_constant_shell("Trauma-AortaArch")), list(reader_make_constant_shell("Trauma-AscendingAorta")), list(reader_make_constant_shell("Trauma-DescendingAorta"), list(reader_make_constant_shell("Trauma-DescendingThoracicAorta")))), list(reader_make_constant_shell("TumorCondition")), list(reader_make_constant_shell("UlcerDisease"), list(reader_make_constant_shell("AorticUlcer"), list(reader_make_constant_shell("PenetratingUlcer-AortaArch")), list(reader_make_constant_shell("PenetratingUlcer-AscendingAorta")), list(reader_make_constant_shell("PenetratingUlcer-DescendingAorta"), list(reader_make_constant_shell("PenetratingUlcer-DescendingThoracicAorta")))), list(reader_make_constant_shell("PenetratingUlcer"), list(reader_make_constant_shell("PenetratingUlcer-AortaArch")), list(reader_make_constant_shell("PenetratingUlcer-AscendingAorta")), list(reader_make_constant_shell("PenetratingUlcer-DescendingAorta"), list(reader_make_constant_shell("PenetratingUlcer-DescendingThoracicAorta"))))), list(reader_make_constant_shell("VascularDisorder"), list(reader_make_constant_shell("Aneurysm_Or_Dissection"), list(new SubLObject[]{ reader_make_constant_shell("Aneurysm"), list(reader_make_constant_shell("Aneurysm-AbdominalAorta"), list(reader_make_constant_shell("SaccularAneurysm-AbdominalAorta"))), list(reader_make_constant_shell("Aneurysm-AortaArch"), list(reader_make_constant_shell("DissectingAneurysm-AortaArch")), list(reader_make_constant_shell("SaccularAneurysm-AortaArch"))), list(reader_make_constant_shell("Aneurysm-AorticRoot"), list(reader_make_constant_shell("DissectingAneurysm-AorticRoot")), list(reader_make_constant_shell("SaccularAneurysm-AorticRoot"))), list(reader_make_constant_shell("Aneurysm-AscendingAorta"), list(reader_make_constant_shell("DissectingAneurysm-AscendingAorta")), list(reader_make_constant_shell("SaccularAneurysm-AscendingAorta"))), list(reader_make_constant_shell("Aneurysm-DescendingAorta"), list(reader_make_constant_shell("Aneurysm-DescendingThoracicAorta")), list(reader_make_constant_shell("DissectingAneurysm-DescendingThoracicAorta")), list(reader_make_constant_shell("SaccularAneurysm-DescendingAorta"), list(reader_make_constant_shell("SaccularAneurysm-DescendingThoracicAorta")))), list(reader_make_constant_shell("Aneurysm-ThoracicAbdominalAorta")), list(reader_make_constant_shell("Aneurysm-ThoracicAorta"), list(reader_make_constant_shell("DissectingAneurysm-ThoracicAorta"), list(reader_make_constant_shell("DissectingAneurysm-DescendingThoracicAorta")))), list(reader_make_constant_shell("AorticAneurysm"), list(reader_make_constant_shell("AortaUnspecifiedAneurysm"))), list(reader_make_constant_shell("AtrialSeptalAneurysm"), list(reader_make_constant_shell("AtrialSeptalAnyeurysm-Congenital"))), list(reader_make_constant_shell("CoronaryArteryAneurysm")), list(reader_make_constant_shell("DissectingAneurysm"), list(reader_make_constant_shell("DissectingAneurysm-AbdominalAorta")), list(reader_make_constant_shell("DissectingAneurysm-AortaArch")), list(reader_make_constant_shell("DissectingAneurysm-AorticRoot")), list(reader_make_constant_shell("DissectingAneurysm-AscendingAorta")), list(reader_make_constant_shell("DissectingAneurysm-ThoracicAorta"), list(reader_make_constant_shell("DissectingAneurysm-DescendingThoracicAorta")))), list(reader_make_constant_shell("SaccularAneurysm"), list(reader_make_constant_shell("SaccularAneurysm-AbdominalAorta")), list(reader_make_constant_shell("SaccularAneurysm-AortaArch")), list(reader_make_constant_shell("SaccularAneurysm-AorticRoot")), list(reader_make_constant_shell("SaccularAneurysm-AscendingAorta")), list(reader_make_constant_shell("SaccularAneurysm-DescendingAorta"), list(reader_make_constant_shell("SaccularAneurysm-DescendingThoracicAorta")))), list(reader_make_constant_shell("VentricularAneurysm"), list(reader_make_constant_shell("LeftVentricleAneurysm")), list(reader_make_constant_shell("RightVentricleAneurysm"))), list(reader_make_constant_shell("VentricularSeptalAneurysm")) }), list(reader_make_constant_shell("AortaAneurysmOrDissection"), list(reader_make_constant_shell("AortaDissection"), list(reader_make_constant_shell("AcuteAorticDissection"), list(reader_make_constant_shell("AcuteDissection-AbdominalAorta-Intraoperative")), list(reader_make_constant_shell("AcuteDissection-AortaArch"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AortaArch"))), list(reader_make_constant_shell("AcuteDissection-AorticRoot-Intraoperative")), list(reader_make_constant_shell("AcuteDissection-AscendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AscendingAorta"))), list(reader_make_constant_shell("AcuteDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingThoracicAorta")))), list(reader_make_constant_shell("ChronicAortaDissection"), list(reader_make_constant_shell("ChronicDissection-AbdominalAorta")), list(reader_make_constant_shell("ChronicDissection-AortaArch")), list(reader_make_constant_shell("ChronicDissection-AorticRoot")), list(reader_make_constant_shell("ChronicDissection-AscendingAorta")), list(reader_make_constant_shell("ChronicDissection-DescendingAorta"), list(reader_make_constant_shell("ChronicDissection-DescendingThoracicAorta")))), list(reader_make_constant_shell("Dissection-AortaArch"), list(reader_make_constant_shell("AcuteDissection-AortaArch"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AortaArch"))), list(reader_make_constant_shell("ChronicDissection-AortaArch"))), list(reader_make_constant_shell("Dissection-AorticRoot"), list(reader_make_constant_shell("AcuteDissection-AorticRoot"), list(reader_make_constant_shell("AcuteDissection-AorticRoot-Intraoperative")))), list(reader_make_constant_shell("Dissection-AscendingAorta"), list(reader_make_constant_shell("AcuteDissection-AscendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AscendingAorta"))), list(reader_make_constant_shell("ChronicDissection-AscendingAorta"))), list(reader_make_constant_shell("Dissection-DescendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingThoracicAorta"))), list(reader_make_constant_shell("Dissection-DescendingThoracicAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingThoracicAorta"))))), list(reader_make_constant_shell("AorticAneurysm"), list(reader_make_constant_shell("AortaUnspecifiedAneurysm")))), list(reader_make_constant_shell("Dissection"), list(reader_make_constant_shell("AcuteDissection"), list(reader_make_constant_shell("AcuteAorticDissection"), list(reader_make_constant_shell("AcuteDissection-AbdominalAorta-Intraoperative")), list(reader_make_constant_shell("AcuteDissection-AortaArch"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AortaArch"))), list(reader_make_constant_shell("AcuteDissection-AorticRoot-Intraoperative")), list(reader_make_constant_shell("AcuteDissection-AscendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AscendingAorta"))), list(reader_make_constant_shell("AcuteDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingThoracicAorta")))), list(reader_make_constant_shell("AcuteDissection-AorticRoot"), list(reader_make_constant_shell("AcuteDissection-AorticRoot-Intraoperative"))), list(reader_make_constant_shell("AcuteDissection-CoronaryArtery"), list(reader_make_constant_shell("AcuteDissection-CoronaryArtery-Intraoperative"))), list(reader_make_constant_shell("AcuteIntraoperativeDissection"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AortaArch")), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AscendingAorta")), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingThoracicAorta"))))), list(reader_make_constant_shell("AortaDissection"), list(reader_make_constant_shell("AcuteAorticDissection"), list(reader_make_constant_shell("AcuteDissection-AbdominalAorta-Intraoperative")), list(reader_make_constant_shell("AcuteDissection-AortaArch"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AortaArch"))), list(reader_make_constant_shell("AcuteDissection-AorticRoot-Intraoperative")), list(reader_make_constant_shell("AcuteDissection-AscendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AscendingAorta"))), list(reader_make_constant_shell("AcuteDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingThoracicAorta")))), list(reader_make_constant_shell("ChronicAortaDissection"), list(reader_make_constant_shell("ChronicDissection-AbdominalAorta")), list(reader_make_constant_shell("ChronicDissection-AortaArch")), list(reader_make_constant_shell("ChronicDissection-AorticRoot")), list(reader_make_constant_shell("ChronicDissection-AscendingAorta")), list(reader_make_constant_shell("ChronicDissection-DescendingAorta"), list(reader_make_constant_shell("ChronicDissection-DescendingThoracicAorta")))), list(reader_make_constant_shell("Dissection-AortaArch"), list(reader_make_constant_shell("AcuteDissection-AortaArch"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AortaArch"))), list(reader_make_constant_shell("ChronicDissection-AortaArch"))), list(reader_make_constant_shell("Dissection-AorticRoot"), list(reader_make_constant_shell("AcuteDissection-AorticRoot"), list(reader_make_constant_shell("AcuteDissection-AorticRoot-Intraoperative")))), list(reader_make_constant_shell("Dissection-AscendingAorta"), list(reader_make_constant_shell("AcuteDissection-AscendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-AscendingAorta"))), list(reader_make_constant_shell("ChronicDissection-AscendingAorta"))), list(reader_make_constant_shell("Dissection-DescendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingAorta"), list(reader_make_constant_shell("AcuteIntraoperativeDissection-DescendingThoracicAorta"))), list(reader_make_constant_shell("Dissection-DescendingThoracicAorta"), list(reader_make_constant_shell("AcuteDissection-DescendingThoracicAorta"))))), list(reader_make_constant_shell("ChronicDissection"), list(reader_make_constant_shell("ChronicAortaDissection"), list(reader_make_constant_shell("ChronicDissection-AbdominalAorta")), list(reader_make_constant_shell("ChronicDissection-AortaArch")), list(reader_make_constant_shell("ChronicDissection-AorticRoot")), list(reader_make_constant_shell("ChronicDissection-AscendingAorta")), list(reader_make_constant_shell("ChronicDissection-DescendingAorta"), list(reader_make_constant_shell("ChronicDissection-DescendingThoracicAorta")))), list(reader_make_constant_shell("ChronicDissection-CoronaryArtery"))))), list(reader_make_constant_shell("ArterioscleroticObliterans")), list(reader_make_constant_shell("CarotidArteryStenosisGreaterThan20"), list(reader_make_constant_shell("CarotidArteryStenosisGreaterThan20LessThanOrEqualTo75")), list(reader_make_constant_shell("CarotidArteryStenosisGreaterThan75"), list(reader_make_constant_shell("CarotidArteryStenosisGreaterThan79")))), list(reader_make_constant_shell("Embolus-Systemic"), list(reader_make_constant_shell("CoronaryArteryEmbolus")), list(reader_make_constant_shell("PulmonaryEmbolism"))), list(reader_make_constant_shell("PeripheralVascularDisease")), list(reader_make_constant_shell("PulmonaryArteryStenosis"))), list(list(reader_make_constant_shell("DiseaseAfflictingPartFn"), reader_make_constant_shell("Liver")), list(reader_make_constant_shell("HepaticFailure"), list(reader_make_constant_shell("DigestiveHepaticFailure"))), list(reader_make_constant_shell("Hepatitis"))) })))), list(list(list(reader_make_constant_shell("isa"), makeSymbol("?X"), reader_make_constant_shell("Debridement-VascularProcedure")), reader_make_constant_shell("MedicalResearchCAEGuidanceMt"), reader_make_constant_shell("CCFMedicalResearch-Allotment")), list(list(list(TWO_INTEGER), list(list(new SubLObject[]{ reader_make_constant_shell("SurgicalProcedure"), list(reader_make_constant_shell("Allograft-SurgicalProcedure")), list(reader_make_constant_shell("AnnulusEnlarging-ValvularProcedure")), list(reader_make_constant_shell("AnteriorToAnteriorCardiacValveChordaeTransfer")), list(reader_make_constant_shell("AnterolateralCommissuroplasty")), list(reader_make_constant_shell("AnteroseptalCommisuroplasty")), list(reader_make_constant_shell("AortaProcedureOrIABPProcedure-ExceptionSpecification"), list(reader_make_constant_shell("AortaProcedure-ExceptionSpecification")), list(reader_make_constant_shell("Intra-aorticBalloonPumpRemovalOrInsertion-ExceptionSpecification"))), list(reader_make_constant_shell("AorticAneurysmRepair-STS")), list(reader_make_constant_shell("Biopsy-SurgicalProcedure"), list(reader_make_constant_shell("Biopsy-Lung-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-LymphNode-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Myocardium-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Pericardium-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Pleura-SurgicalProcedure")), list(reader_make_constant_shell("ChestWallBiopsyOfBoneMarrow-SurgicalProcedure")), list(reader_make_constant_shell("VascularBiopsy-VascularProcedure"))), list(reader_make_constant_shell("BleedingControl-Chest-SurgicalProcedure"), list(reader_make_constant_shell("EvacuationOfHematoma-ChestCavity-SurgicalProcedure")), list(reader_make_constant_shell("PericardialWindow-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_pericardium_evacuation_of_hematoma_in_pericardium_or_mediastinum"))), list(reader_make_constant_shell("CardiacOrThoracicAortaProcedure"), list(reader_make_constant_shell("CardiacProcedure-Expanded")), list(reader_make_constant_shell("ThoracicAortaProcedure-STS"))), list(reader_make_constant_shell("CardiacOrThoracicAortaProcedure-NonExpanded"), list(new SubLObject[]{ reader_make_constant_shell("CardiacProcedure-CCF"), list(reader_make_constant_shell("AssistDeviceProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_assist_device_assist_device_revision")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_extracorporeal_membrane_oxygenation_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_extracorporeal_membrane_oxygenation_removal")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_intra-aortic_balloon_pump_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_intra-aortic_balloon_pump_removal")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_ventricular_assist_device_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_ventricular_assist_device_removal"))), list(new SubLObject[]{ reader_make_constant_shell("AtrialProcedure-Surgical"), list(reader_make_constant_shell("AtrialAppendageExclusion-SurgicalProcedure"), list(reader_make_constant_shell("LeftAtrialAppendageExclusion-SurgicalProcedure"), list(reader_make_constant_shell("LeftAtrialAppendageExclusionUsingStaples-SurgicalProcedure")), list(reader_make_constant_shell("LeftAtrialAppendageLigation-SurgicalProcedure")), list(reader_make_constant_shell("LeftAtrialAppendageSizeReduction-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_atrium_left_atrial_appendage_exclusion_using_clip")))), list(reader_make_constant_shell("AtrialEndarterectomy-SurgicalProcedure")), list(reader_make_constant_shell("AtrialExcisionOfTumor-SurgicalProcedure")), list(reader_make_constant_shell("AtrialExcisionProcedure-Surgical")), list(reader_make_constant_shell("AtrialFibrillationProcedure-Surgical"), list(reader_make_constant_shell("MazeProcedure-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryVeinIsolationProcedure-Surgical")), list(reader_make_constant_shell("RadioFrequencyAblationProcedure-Surgical"), list(reader_make_constant_shell("BipolarRadiofrequencyAblation")), list(reader_make_constant_shell("UnipolarRadiofrequencyAblation")))), list(reader_make_constant_shell("AtrialPlication-SurgicalProcedure")), list(reader_make_constant_shell("AtrialRepairProcedure-Surgical")), list(reader_make_constant_shell("AtrialSeptation-SurgicalProcedure")), list(reader_make_constant_shell("AtrialSeptectomy-SurgicalProcedure"), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_closed_atrial_septectomy_blalock-hanlon"))), list(reader_make_constant_shell("AtrialThrombectomy-SurgicalProcedure")), list(reader_make_constant_shell("AtrialWallDebridement-SurgicalProcedure")) }), list(new SubLObject[]{ reader_make_constant_shell("CardiacSeptumProcedure-Surgical"), list(reader_make_constant_shell("Debridement-AtrialOrVentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("Repair-AtrialSeptalAneurysm-SurgicalProcedure")), list(reader_make_constant_shell("Repair-PostInfarctIvsd-SurgicalProcedure")), list(reader_make_constant_shell("Repair-VentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrResection-VentricularSeptalAneurysm-SurgicalProcedure")), list(reader_make_constant_shell("SeptalMyectomy"), list(reader_make_constant_shell("Myectomy-VentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_septal_myectomy"))), list(reader_make_constant_shell("SurgicalProcedure_septum_debridement")), list(reader_make_constant_shell("SurgicalProcedure_septum_repair_of_atrial_septum")), list(reader_make_constant_shell("SurgicalProcedure_septum_repair_of_post_infarct_ventricular_septal_defect")) }), list(new SubLObject[]{ reader_make_constant_shell("CongenitalHeartProcedure-Surgical"), list(reader_make_constant_shell("AVCanalCompleteCorrectionIncludesASDPatchRepair-SurgicalProcedure")), list(reader_make_constant_shell("Aorta-aorticConduit-SurgicalProcedure")), list(reader_make_constant_shell("AorticAllograft-SurgicalProcedure")), list(reader_make_constant_shell("AorticValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("ArterialSwitch-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortaToDescendingAortaGraft-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortaToPulmonaryArteryShuntWaterson-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortoplasty-SurgicalProcedure")), list(reader_make_constant_shell("AtrialSeptation-SurgicalProcedure")), list(reader_make_constant_shell("CongenitalSeptalDefectRepairSurgery"), list(reader_make_constant_shell("AtrialSeptalDefectRepairProcedure-Congenital"), list(reader_make_constant_shell("AtrialSeptalDefectSutureClosure-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_atrial_septal_defect_patch_closure"))), list(reader_make_constant_shell("VentricularSeptalDefectRepairProcedure-Congenital"), list(reader_make_constant_shell("VsdPatchClosure-SurgicalProcedure")), list(reader_make_constant_shell("VsdSutureClosure-SurgicalProcedure")))), list(reader_make_constant_shell("CorrectionAnomalousVenousReturn-TotalOrPartial-SurgicalProcedure")), list(reader_make_constant_shell("CreationOfAorto-pulmonaryWindow-SurgicalProcedure")), list(reader_make_constant_shell("CreationPericardialMonocuspValve-SurgicalProcedure")), list(reader_make_constant_shell("DamusKayStanselProcedure-SurgicalProcedure")), list(reader_make_constant_shell("DescendingAortaToPulmonaryArteryShuntPotts-SurgicalProcedure")), list(reader_make_constant_shell("DivisionOfAorticArchOrRemoval-VascularRing-SurgicalProcedure")), list(reader_make_constant_shell("EnlargementIasd-SurgicalProcedure")), list(reader_make_constant_shell("ExcisionCardiacDiverticulum-SurgicalProcedure")), list(reader_make_constant_shell("InnominateArteryToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("LeftSubclavianToDescendingAortaGraft-SurgicalProcedure")), list(reader_make_constant_shell("LeftVentricleToAortaConduit-SurgicalProcedure")), list(reader_make_constant_shell("LigationAnomalousSystemicVeinsSuperiorVenaCava-SurgicalProcedure")), list(reader_make_constant_shell("LigationOfCoronaryArteryOrFistula-SurgicalProcedure")), list(reader_make_constant_shell("LigationSystemicFistula-SurgicalProcedure")), list(reader_make_constant_shell("MeeShuntMelbourne-SurgicalProcedure")), list(reader_make_constant_shell("NorwoodProcedure-SurgicalProcedure")), list(reader_make_constant_shell("ObliterationOfAortoPulmonaryArteryCommunication")), list(reader_make_constant_shell("PatchOrAngioplastyOfAortaForCoarctationOrInterrupt-SurgicalProcedure")), list(reader_make_constant_shell("ProstheticAorto-pulmonaryShunt-SurgicalProcedure")), list(reader_make_constant_shell("ProstheticGraft-AortaToPulmonaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArterioplastyOrReconstruction-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArteryAllograft-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArteryBanding-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("RadicalAtrialSeptectomy-SurgicalProcedure")), list(reader_make_constant_shell("RastelliProcedure-SurgicalProcedure")), list(reader_make_constant_shell("Re-implantationOfCoronaryArteryToAorta-SurgicalProcedure")), list(reader_make_constant_shell("ReconstructionOfCoronaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("RepairCleftMitralValveLeaflet-SurgicalProcedure")), list(reader_make_constant_shell("ResectionAnd1ReanastomosisForCoarctationOrInterruption-SurgicalProcedure")), list(reader_make_constant_shell("ResectionAneurysmSinusOfValsalva-SurgicalProcedure")), list(reader_make_constant_shell("ResectionDiscreteSubvalvularMuscle-SurgicalProcedure")), list(reader_make_constant_shell("ResectionLeftVentricularMuscle-SurgicalProcedure")), list(reader_make_constant_shell("ResectionOfLeftAtrialMembraneCortriatrium-SurgicalProcedure")), list(reader_make_constant_shell("ResectionRightVentricleMuscle-Infundibulectomy-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfBlalock-taussigShunt-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfPottsShunt-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfWatersonShunt-SurgicalProcedure")), list(reader_make_constant_shell("RightAtriumToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("RightVentriclePlication-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricleToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricularOutflowPatch-SurgicalProcedure")), list(reader_make_constant_shell("RoofingOfCoronarySinus-SurgicalProcedure")), list(reader_make_constant_shell("SubaorticStenosis-SurgicalProcedure")), list(reader_make_constant_shell("SuperiorVenaCavaToPulmonaryArterGlenn-SurgicalProcedure")), list(reader_make_constant_shell("Supra-aorticStenosis-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalBandingOfPulmonaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_Da_Silva_valve_repair")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_Danielson_technique")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_aorta-aortic_conduit")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_atrial_re-direction_of_venous_flow_senning_procedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_closed_atrial_septectomy_blalock-hanlon")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_complete_correction_of_atrioventricular_canal_defect")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_creation_of_aorto-pulmonary_window")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_creation_of_pulmonary_pericardial_monocusp_valve")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_enlargement_intra-atrial_septal_defect")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_intra-atrial_baffle_mustard_procedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_left_subclavian_or_aortic_arch_to_descending_aorta_graft")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_ligation_systemic_vessel_fistula")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_obliteration_or_ligation_of_patent_ductus_arteriosus")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_patch_or_angioplasty_for_coarctation_or_interruption_of_aorta")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_patent_foramen_ovale_closure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_prosthetic_aorto-pulmonary_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_re-implantation_of_native_coronary_artery_to_aorta")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_and_single_reanastomosis_for_aortic_coarctation_or_interruption")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_atrial_membrane_-_radical_atrial_septectomy")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_of_supra-aortic_stenosis")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_revision_of_blalock-taussig_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_septal_myectomy")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_subclavian_to_pulmonary_artery_shunt_blalock-taussig")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_ascending_aorta_to_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_descending_aorta_to_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_subclavian-pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_superior_vena_cava_-_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalShunting-SurgicalProcedure")), list(reader_make_constant_shell("Take-downAscendingAorta-pulmonaryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downDescendingAorta-pulmonaryArteryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downPulmonaryArteryBanding-SurgicalProcedure")), list(reader_make_constant_shell("Take-downSubclavian-pulmonaryArteryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downSuperiorVenaPulmonaryArteryShuntWaterson-SurgicalProcedure")), list(reader_make_constant_shell("TricuspidValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("UnifocalizationOfMapcas-SurgicalProcedure")), list(reader_make_constant_shell("UnroofingOfCoronaryOstium-SurgicalProcedure")), list(reader_make_constant_shell("VentricularSeptation-SurgicalProcedure")) }), list(reader_make_constant_shell("CoronaryArteryBypassGraft-SurgicalProcedure"), list(reader_make_constant_shell("CABGWithBilateralITAGraft")), list(reader_make_constant_shell("CABGWithMultipleGrafts")), list(reader_make_constant_shell("CabgWithSingleITAGraft")), list(reader_make_constant_shell("SingleGraftCAGB"))), list(reader_make_constant_shell("HeartTransplantProcedure-Surgical")), list(reader_make_constant_shell("HeartValveRepairOrReplacement"), list(reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))))), list(new SubLObject[]{ reader_make_constant_shell("HeartVentricleProcedure-Surgical"), list(reader_make_constant_shell("Aneurysmectomy-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Myocardium-SurgicalProcedure")), list(reader_make_constant_shell("Cardiomyoplasty-SurgicalProcedure")), list(reader_make_constant_shell("Cryoablation-VentricularTissue-SurgicalProcedure")), list(reader_make_constant_shell("Debridement-VentricularWall-SurgicalProcedure")), list(reader_make_constant_shell("LeftVentricleProcedure-Surgical"), list(reader_make_constant_shell("BatistaProcedure-LeftVentricle-SurgicalProcedure")), list(reader_make_constant_shell("DorProcedure-LeftVentricle-SurgicalProcedure")), list(reader_make_constant_shell("FistulaRepairWithPatch-LeftVentricle-rightAtrium-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_repair_of_left_ventricular_outflow_tract")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricle")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricular_outflow_tract"))), list(reader_make_constant_shell("MyocorSplint-SurgicalProcedure")), list(reader_make_constant_shell("OtherVentricularRemodelingProcedure-SurgicalProcedure")), list(reader_make_constant_shell("PlacementOfAcornDevice-SurgicalProcedure")), list(reader_make_constant_shell("Repair-FreeWallVentricularRupture-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Subendocardial-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricleProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_ventricle_batista_procedure_on_right_ventricle"))), list(reader_make_constant_shell("SkeletalMuscleCellDiacrinTransplant-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_debridement_of_ventricular_outflow_tract"), list(reader_make_constant_shell("SurgicalProcedure_ventricle_debridement_of_left_ventricular_outflow_tract"))), list(reader_make_constant_shell("SurgicalProcedure_ventricle_excision_of_tumor")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_repair_of_ventricular_wall")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_resection_of_subendocardium")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_stem_cell_injection")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_ventricular_outflow_tract"), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricular_outflow_tract"))), list(reader_make_constant_shell("TransmyocardialRevascularization-SurgicalProcedure")), list(reader_make_constant_shell("Tri-svr-SurgicalProcedure")), list(reader_make_constant_shell("VentricularPlication-SurgicalProcedure")), list(reader_make_constant_shell("VentricularRepair-SurgicalProcedure"), list(reader_make_constant_shell("Repair-VentricularOutflowTract-SurgicalProcedure"), list(reader_make_constant_shell("SurgicalProcedure_ventricle_repair_of_left_ventricular_outflow_tract")))), list(reader_make_constant_shell("Ventriculotomy-SurgicalProcedure")) }), list(new SubLObject[]{ reader_make_constant_shell("OtherCardiacProcedure-Surgical"), list(reader_make_constant_shell("AnnularReconstruction-SurgicalProcedure")), list(reader_make_constant_shell("CardiacExplorationOnly-SurgicalProcedure")), list(reader_make_constant_shell("CardiacPartialAutotransplantation-SurgicalProcedure")), list(reader_make_constant_shell("CardiopulmonaryBypass-SurgicalProcedure")), list(reader_make_constant_shell("EvacuationOfHematoma-PericardiumMediastinumDueToBleed-tamponade-SurgicalProcedure")), list(reader_make_constant_shell("NotCardiopulmonaryBypass-SurgicalProcedure")), list(reader_make_constant_shell("PericardialPatch-Non-congenital-SurgicalProcedure")), list(reader_make_constant_shell("Repair-AtrioventricularGroove-SurgicalProcedure")), list(reader_make_constant_shell("Repair-CoronarySinus-SurgicalProcedure")), list(reader_make_constant_shell("Repair-FibrousTrigone-SurgicalProcedure")), list(reader_make_constant_shell("Repair-SubvalvularApparatus-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfHeartWound-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfSubvalvularArea-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrDebridement-CoronaryOstium-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Subendocardial-SurgicalProcedure")), list(reader_make_constant_shell("Revision-PulmonaryArteryAnastomosis-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_cardiac-thoracic_procedure")), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_excision_of_tumor"), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_excision_of_tumor-mass_in_pulmonary_artery"))), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_other")), list(reader_make_constant_shell("ThrombectomyFromPacingLeads-wires-SurgicalProcedure")), list(reader_make_constant_shell("UnspecifiedCardiac-thoracicProcedure-SurgicalProcedure")) }), list(reader_make_constant_shell("OtherVascularCoronaryArteryProcedure-Surgical")), list(new SubLObject[]{ reader_make_constant_shell("PericardialProcedure-Surgical"), list(reader_make_constant_shell("BeckPoudrage-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Pericardium-SurgicalProcedure")), list(reader_make_constant_shell("Excision-PericardialCyst-SurgicalProcedure")), list(reader_make_constant_shell("PericardialWindow-SurgicalProcedure")), list(reader_make_constant_shell("Pericardiectomy-SurgicalProcedure")), list(reader_make_constant_shell("Pericardiocentesis-drainageOfPericardialEffusion-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrDebridement-Pericardium-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_pericardium_evacuation_of_hematoma")), list(reader_make_constant_shell("SurgicalProcedure_pericardium_evacuation_of_hematoma_in_pericardium_or_mediastinum")), list(reader_make_constant_shell("SurgicalProcedure_pericardium_pericardiocentesis")) }), list(new SubLObject[]{ reader_make_constant_shell("SurgicalProcedure_eps"), list(reader_make_constant_shell("DrainageOfPacemakerWound-SurgicalProcedure")), list(reader_make_constant_shell("Explant-BiventricularPacerCrtIcd-SurgicalProcedure")), list(reader_make_constant_shell("Explant-Icd-SurgicalProcedure")), list(reader_make_constant_shell("ExplantICDWithSingleChamberOrDualChamberPacing-SurgicalProcedure")), list(reader_make_constant_shell("ExplantOfEndocardialPacemakerLead")), list(reader_make_constant_shell("ExplantOfEpicardialPacemakerLead")), list(reader_make_constant_shell("ExplantOfImplantableCardioverterDefibrillatorPatch")), list(reader_make_constant_shell("Implant-BiventricularPacerCrtIcd-SurgicalProcedure")), list(reader_make_constant_shell("Implant-Icd-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOrExplant-Icd-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOrExplant-PermanentPacemaker-SurgicalProcedure"), list(reader_make_constant_shell("ExplantOfPermanentPacemakerSingleChamberOrDualChamber-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOfPermanentBiventricularPacemaker-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOfPermanentPacemakerSingleChamberOrDualChamber-SurgicalProcedure"))), list(reader_make_constant_shell("MappingAndAblationOfAccessoryPathways-SurgicalProcedure")), list(reader_make_constant_shell("PacemakerInsertion-SurgicalProcedure"), list(reader_make_constant_shell("ImplantOfPermanentBiventricularPacemaker-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOfPermanentPacemakerSingleChamberOrDualChamber-SurgicalProcedure"))), list(reader_make_constant_shell("Placement-PpmicdEndocardialLead-SurgicalProcedure")), list(reader_make_constant_shell("PlacementEpicardialLeadsNotIncludingLeftVentricular-SurgicalProcedure")), list(reader_make_constant_shell("PlacementOfRightAtrialEpicardialPacemakerLead")), list(reader_make_constant_shell("PlacementOfRightVentricularEpicardialPacemakerLead")), list(reader_make_constant_shell("RemovalOfEpicardialPacingWires-SurgicalProcedure")), list(reader_make_constant_shell("RemovalOfICDLeads-SurgicalProcedure")), list(reader_make_constant_shell("RemovalOfTemporaryEpicardialPacingWires-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfPpmicdLeads-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_endocardial_pacemaker_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_epicardial_pacemaker_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_implantable_cardioverter_defibrillator_generator")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_implantable_cardioverter_defibrillator_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_left_ventricular_epicardial_pacing_lead")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_permanent_pacemaker")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_temporary_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_epicardial_pacing_leads_not_including_left_ventricular")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_left_ventricular_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_permanent_endocardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_right_atrial_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_right_ventricular_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_revision_of_permanent_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_thrombectomy_from_pacing_leads")) }), list(reader_make_constant_shell("SurgicalProcedure_vascular_Vineberg-Sewell_implant")), list(reader_make_constant_shell("SurgicalProcedure_vascular_pulmonary")), list(reader_make_constant_shell("SurgicalProcedure_vascular_vena_cava")) }), list(reader_make_constant_shell("ThoracicAortaProcedure-CSQR")), list(reader_make_constant_shell("ThoracicAortaProcedure-Surgical"))), list(new SubLObject[]{ reader_make_constant_shell("CardiacProcedure-Surgical"), list(reader_make_constant_shell("AbortedCardiacProcedure-SurgicalProcedure")), list(reader_make_constant_shell("AssistDeviceProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_assist_device_assist_device_revision")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_extracorporeal_membrane_oxygenation_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_extracorporeal_membrane_oxygenation_removal")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_intra-aortic_balloon_pump_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_intra-aortic_balloon_pump_removal")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_ventricular_assist_device_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_ventricular_assist_device_removal"))), list(new SubLObject[]{ reader_make_constant_shell("AtrialProcedure-Surgical"), list(reader_make_constant_shell("AtrialAppendageExclusion-SurgicalProcedure"), list(reader_make_constant_shell("LeftAtrialAppendageExclusion-SurgicalProcedure"), list(reader_make_constant_shell("LeftAtrialAppendageExclusionUsingStaples-SurgicalProcedure")), list(reader_make_constant_shell("LeftAtrialAppendageLigation-SurgicalProcedure")), list(reader_make_constant_shell("LeftAtrialAppendageSizeReduction-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_atrium_left_atrial_appendage_exclusion_using_clip")))), list(reader_make_constant_shell("AtrialEndarterectomy-SurgicalProcedure")), list(reader_make_constant_shell("AtrialExcisionOfTumor-SurgicalProcedure")), list(reader_make_constant_shell("AtrialExcisionProcedure-Surgical")), list(reader_make_constant_shell("AtrialFibrillationProcedure-Surgical"), list(reader_make_constant_shell("MazeProcedure-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryVeinIsolationProcedure-Surgical")), list(reader_make_constant_shell("RadioFrequencyAblationProcedure-Surgical"), list(reader_make_constant_shell("BipolarRadiofrequencyAblation")), list(reader_make_constant_shell("UnipolarRadiofrequencyAblation")))), list(reader_make_constant_shell("AtrialPlication-SurgicalProcedure")), list(reader_make_constant_shell("AtrialRepairProcedure-Surgical")), list(reader_make_constant_shell("AtrialSeptation-SurgicalProcedure")), list(reader_make_constant_shell("AtrialSeptectomy-SurgicalProcedure"), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_closed_atrial_septectomy_blalock-hanlon"))), list(reader_make_constant_shell("AtrialThrombectomy-SurgicalProcedure")), list(reader_make_constant_shell("AtrialWallDebridement-SurgicalProcedure")) }), list(new SubLObject[]{ reader_make_constant_shell("CardiacSeptumProcedure-Surgical"), list(reader_make_constant_shell("Debridement-AtrialOrVentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("Repair-AtrialSeptalAneurysm-SurgicalProcedure")), list(reader_make_constant_shell("Repair-PostInfarctIvsd-SurgicalProcedure")), list(reader_make_constant_shell("Repair-VentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrResection-VentricularSeptalAneurysm-SurgicalProcedure")), list(reader_make_constant_shell("SeptalMyectomy"), list(reader_make_constant_shell("Myectomy-VentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_septal_myectomy"))), list(reader_make_constant_shell("SurgicalProcedure_septum_debridement")), list(reader_make_constant_shell("SurgicalProcedure_septum_repair_of_atrial_septum")), list(reader_make_constant_shell("SurgicalProcedure_septum_repair_of_post_infarct_ventricular_septal_defect")) }), list(new SubLObject[]{ reader_make_constant_shell("CongenitalHeartProcedure-Surgical"), list(reader_make_constant_shell("AVCanalCompleteCorrectionIncludesASDPatchRepair-SurgicalProcedure")), list(reader_make_constant_shell("Aorta-aorticConduit-SurgicalProcedure")), list(reader_make_constant_shell("AorticAllograft-SurgicalProcedure")), list(reader_make_constant_shell("AorticValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("ArterialSwitch-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortaToDescendingAortaGraft-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortaToPulmonaryArteryShuntWaterson-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortoplasty-SurgicalProcedure")), list(reader_make_constant_shell("AtrialSeptation-SurgicalProcedure")), list(reader_make_constant_shell("CongenitalSeptalDefectRepairSurgery"), list(reader_make_constant_shell("AtrialSeptalDefectRepairProcedure-Congenital"), list(reader_make_constant_shell("AtrialSeptalDefectSutureClosure-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_atrial_septal_defect_patch_closure"))), list(reader_make_constant_shell("VentricularSeptalDefectRepairProcedure-Congenital"), list(reader_make_constant_shell("VsdPatchClosure-SurgicalProcedure")), list(reader_make_constant_shell("VsdSutureClosure-SurgicalProcedure")))), list(reader_make_constant_shell("CorrectionAnomalousVenousReturn-TotalOrPartial-SurgicalProcedure")), list(reader_make_constant_shell("CreationOfAorto-pulmonaryWindow-SurgicalProcedure")), list(reader_make_constant_shell("CreationPericardialMonocuspValve-SurgicalProcedure")), list(reader_make_constant_shell("DamusKayStanselProcedure-SurgicalProcedure")), list(reader_make_constant_shell("DescendingAortaToPulmonaryArteryShuntPotts-SurgicalProcedure")), list(reader_make_constant_shell("DivisionOfAorticArchOrRemoval-VascularRing-SurgicalProcedure")), list(reader_make_constant_shell("EnlargementIasd-SurgicalProcedure")), list(reader_make_constant_shell("ExcisionCardiacDiverticulum-SurgicalProcedure")), list(reader_make_constant_shell("InnominateArteryToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("LeftSubclavianToDescendingAortaGraft-SurgicalProcedure")), list(reader_make_constant_shell("LeftVentricleToAortaConduit-SurgicalProcedure")), list(reader_make_constant_shell("LigationAnomalousSystemicVeinsSuperiorVenaCava-SurgicalProcedure")), list(reader_make_constant_shell("LigationOfCoronaryArteryOrFistula-SurgicalProcedure")), list(reader_make_constant_shell("LigationSystemicFistula-SurgicalProcedure")), list(reader_make_constant_shell("MeeShuntMelbourne-SurgicalProcedure")), list(reader_make_constant_shell("NorwoodProcedure-SurgicalProcedure")), list(reader_make_constant_shell("ObliterationOfAortoPulmonaryArteryCommunication")), list(reader_make_constant_shell("PatchOrAngioplastyOfAortaForCoarctationOrInterrupt-SurgicalProcedure")), list(reader_make_constant_shell("ProstheticAorto-pulmonaryShunt-SurgicalProcedure")), list(reader_make_constant_shell("ProstheticGraft-AortaToPulmonaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArterioplastyOrReconstruction-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArteryAllograft-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArteryBanding-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("RadicalAtrialSeptectomy-SurgicalProcedure")), list(reader_make_constant_shell("RastelliProcedure-SurgicalProcedure")), list(reader_make_constant_shell("Re-implantationOfCoronaryArteryToAorta-SurgicalProcedure")), list(reader_make_constant_shell("ReconstructionOfCoronaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("RepairCleftMitralValveLeaflet-SurgicalProcedure")), list(reader_make_constant_shell("ResectionAnd1ReanastomosisForCoarctationOrInterruption-SurgicalProcedure")), list(reader_make_constant_shell("ResectionAneurysmSinusOfValsalva-SurgicalProcedure")), list(reader_make_constant_shell("ResectionDiscreteSubvalvularMuscle-SurgicalProcedure")), list(reader_make_constant_shell("ResectionLeftVentricularMuscle-SurgicalProcedure")), list(reader_make_constant_shell("ResectionOfLeftAtrialMembraneCortriatrium-SurgicalProcedure")), list(reader_make_constant_shell("ResectionRightVentricleMuscle-Infundibulectomy-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfBlalock-taussigShunt-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfPottsShunt-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfWatersonShunt-SurgicalProcedure")), list(reader_make_constant_shell("RightAtriumToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("RightVentriclePlication-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricleToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricularOutflowPatch-SurgicalProcedure")), list(reader_make_constant_shell("RoofingOfCoronarySinus-SurgicalProcedure")), list(reader_make_constant_shell("SubaorticStenosis-SurgicalProcedure")), list(reader_make_constant_shell("SuperiorVenaCavaToPulmonaryArterGlenn-SurgicalProcedure")), list(reader_make_constant_shell("Supra-aorticStenosis-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalBandingOfPulmonaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_Da_Silva_valve_repair")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_Danielson_technique")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_aorta-aortic_conduit")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_atrial_re-direction_of_venous_flow_senning_procedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_closed_atrial_septectomy_blalock-hanlon")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_complete_correction_of_atrioventricular_canal_defect")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_creation_of_aorto-pulmonary_window")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_creation_of_pulmonary_pericardial_monocusp_valve")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_enlargement_intra-atrial_septal_defect")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_intra-atrial_baffle_mustard_procedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_left_subclavian_or_aortic_arch_to_descending_aorta_graft")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_ligation_systemic_vessel_fistula")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_obliteration_or_ligation_of_patent_ductus_arteriosus")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_patch_or_angioplasty_for_coarctation_or_interruption_of_aorta")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_patent_foramen_ovale_closure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_prosthetic_aorto-pulmonary_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_re-implantation_of_native_coronary_artery_to_aorta")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_and_single_reanastomosis_for_aortic_coarctation_or_interruption")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_atrial_membrane_-_radical_atrial_septectomy")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_of_supra-aortic_stenosis")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_revision_of_blalock-taussig_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_septal_myectomy")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_subclavian_to_pulmonary_artery_shunt_blalock-taussig")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_ascending_aorta_to_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_descending_aorta_to_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_subclavian-pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_superior_vena_cava_-_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalShunting-SurgicalProcedure")), list(reader_make_constant_shell("Take-downAscendingAorta-pulmonaryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downDescendingAorta-pulmonaryArteryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downPulmonaryArteryBanding-SurgicalProcedure")), list(reader_make_constant_shell("Take-downSubclavian-pulmonaryArteryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downSuperiorVenaPulmonaryArteryShuntWaterson-SurgicalProcedure")), list(reader_make_constant_shell("TricuspidValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("UnifocalizationOfMapcas-SurgicalProcedure")), list(reader_make_constant_shell("UnroofingOfCoronaryOstium-SurgicalProcedure")), list(reader_make_constant_shell("VentricularSeptation-SurgicalProcedure")) }), list(reader_make_constant_shell("Cryoablation"), list(reader_make_constant_shell("Cryoablation-VentricularTissue-SurgicalProcedure"))), list(reader_make_constant_shell("HeartTransplantProcedure-Surgical")), list(new SubLObject[]{ reader_make_constant_shell("HeartValveProcedure-Surgical"), list(reader_make_constant_shell("Anuloplasty"), list(reader_make_constant_shell("AnnuloplastyWithRing"), list(reader_make_constant_shell("CompleteAnnuloplastyWithRing"))), list(reader_make_constant_shell("Anuloplasty-WithoutRing-Complete")), list(reader_make_constant_shell("Anuloplasty-WithoutRing-Incomplete"))), list(reader_make_constant_shell("Commissuroplasty"), list(reader_make_constant_shell("Antero-posteriorCommissuroplasty")), list(reader_make_constant_shell("Commissuroplasty-AccordingToKay-bicuspidization")), list(reader_make_constant_shell("Commissuroplasty-Anteroposterior")), list(reader_make_constant_shell("Commissuroplasty-CongenitalBiscupsid")), list(reader_make_constant_shell("Commissuroplasty-Left-anterior")), list(reader_make_constant_shell("Commissuroplasty-Posteroseptal")), list(reader_make_constant_shell("Commissuroplasty-Right-anterior"))), list(reader_make_constant_shell("HeartValveRepairReplacementOrExploration"), list(reader_make_constant_shell("Exploration-AorticValve-SurgicalProcedure")), list(reader_make_constant_shell("Exploration-MitralValve-SurgicalProcedure")), list(reader_make_constant_shell("Exploration-PulmonaryValve-SurgicalProcedure")), list(reader_make_constant_shell("Exploration-TricuspidValve-SurgicalProcedure")), list(reader_make_constant_shell("HeartValveRepairOrReplacement"), list(reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))))), list(reader_make_constant_shell("Plication-ValvularProcedure"), list(reader_make_constant_shell("AtrialPlication-SurgicalProcedure")), list(reader_make_constant_shell("Plication-BicuspidLeaflet")), list(reader_make_constant_shell("RightVentriclePlication-SurgicalProcedure"))), list(reader_make_constant_shell("Reconstruction-CardiacValveRepair"), list(reader_make_constant_shell("AnnularReconstruction-SurgicalProcedure")), list(reader_make_constant_shell("RootReconstruction"))), list(reader_make_constant_shell("Reorientation-CardiacValveRepair")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_aortic_valve_aborted_repair_attempt")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_mitral_valve_aborted_repair_attempt")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_pulmonary_valve_aborted_repair_attempt")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_tricuspid_valve_aborted_repair_attempt")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveProcedure-Surgical"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveProcedure-Surgical"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveProcedure-Surgical"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveProcedure-Surgical"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_tricuspid_valvectomy")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))))) }), list(new SubLObject[]{ reader_make_constant_shell("HeartVentricleProcedure-Surgical"), list(reader_make_constant_shell("Aneurysmectomy-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Myocardium-SurgicalProcedure")), list(reader_make_constant_shell("Cardiomyoplasty-SurgicalProcedure")), list(reader_make_constant_shell("Cryoablation-VentricularTissue-SurgicalProcedure")), list(reader_make_constant_shell("Debridement-VentricularWall-SurgicalProcedure")), list(reader_make_constant_shell("LeftVentricleProcedure-Surgical"), list(reader_make_constant_shell("BatistaProcedure-LeftVentricle-SurgicalProcedure")), list(reader_make_constant_shell("DorProcedure-LeftVentricle-SurgicalProcedure")), list(reader_make_constant_shell("FistulaRepairWithPatch-LeftVentricle-rightAtrium-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_repair_of_left_ventricular_outflow_tract")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricle")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricular_outflow_tract"))), list(reader_make_constant_shell("MyocorSplint-SurgicalProcedure")), list(reader_make_constant_shell("OtherVentricularRemodelingProcedure-SurgicalProcedure")), list(reader_make_constant_shell("PlacementOfAcornDevice-SurgicalProcedure")), list(reader_make_constant_shell("Repair-FreeWallVentricularRupture-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Subendocardial-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricleProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_ventricle_batista_procedure_on_right_ventricle"))), list(reader_make_constant_shell("SkeletalMuscleCellDiacrinTransplant-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_debridement_of_ventricular_outflow_tract"), list(reader_make_constant_shell("SurgicalProcedure_ventricle_debridement_of_left_ventricular_outflow_tract"))), list(reader_make_constant_shell("SurgicalProcedure_ventricle_excision_of_tumor")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_repair_of_ventricular_wall")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_resection_of_subendocardium")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_stem_cell_injection")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_ventricular_outflow_tract"), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricular_outflow_tract"))), list(reader_make_constant_shell("TransmyocardialRevascularization-SurgicalProcedure")), list(reader_make_constant_shell("Tri-svr-SurgicalProcedure")), list(reader_make_constant_shell("VentricularPlication-SurgicalProcedure")), list(reader_make_constant_shell("VentricularRepair-SurgicalProcedure"), list(reader_make_constant_shell("Repair-VentricularOutflowTract-SurgicalProcedure"), list(reader_make_constant_shell("SurgicalProcedure_ventricle_repair_of_left_ventricular_outflow_tract")))), list(reader_make_constant_shell("Ventriculotomy-SurgicalProcedure")) }), list(new SubLObject[]{ reader_make_constant_shell("OtherCardiacProcedure-Surgical"), list(reader_make_constant_shell("AnnularReconstruction-SurgicalProcedure")), list(reader_make_constant_shell("CardiacExplorationOnly-SurgicalProcedure")), list(reader_make_constant_shell("CardiacPartialAutotransplantation-SurgicalProcedure")), list(reader_make_constant_shell("CardiopulmonaryBypass-SurgicalProcedure")), list(reader_make_constant_shell("EvacuationOfHematoma-PericardiumMediastinumDueToBleed-tamponade-SurgicalProcedure")), list(reader_make_constant_shell("NotCardiopulmonaryBypass-SurgicalProcedure")), list(reader_make_constant_shell("PericardialPatch-Non-congenital-SurgicalProcedure")), list(reader_make_constant_shell("Repair-AtrioventricularGroove-SurgicalProcedure")), list(reader_make_constant_shell("Repair-CoronarySinus-SurgicalProcedure")), list(reader_make_constant_shell("Repair-FibrousTrigone-SurgicalProcedure")), list(reader_make_constant_shell("Repair-SubvalvularApparatus-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfHeartWound-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfSubvalvularArea-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrDebridement-CoronaryOstium-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Subendocardial-SurgicalProcedure")), list(reader_make_constant_shell("Revision-PulmonaryArteryAnastomosis-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_cardiac-thoracic_procedure")), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_excision_of_tumor"), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_excision_of_tumor-mass_in_pulmonary_artery"))), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_other")), list(reader_make_constant_shell("ThrombectomyFromPacingLeads-wires-SurgicalProcedure")), list(reader_make_constant_shell("UnspecifiedCardiac-thoracicProcedure-SurgicalProcedure")) }), list(new SubLObject[]{ reader_make_constant_shell("PericardialProcedure-Surgical"), list(reader_make_constant_shell("BeckPoudrage-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Pericardium-SurgicalProcedure")), list(reader_make_constant_shell("Excision-PericardialCyst-SurgicalProcedure")), list(reader_make_constant_shell("PericardialWindow-SurgicalProcedure")), list(reader_make_constant_shell("Pericardiectomy-SurgicalProcedure")), list(reader_make_constant_shell("Pericardiocentesis-drainageOfPericardialEffusion-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrDebridement-Pericardium-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_pericardium_evacuation_of_hematoma")), list(reader_make_constant_shell("SurgicalProcedure_pericardium_evacuation_of_hematoma_in_pericardium_or_mediastinum")), list(reader_make_constant_shell("SurgicalProcedure_pericardium_pericardiocentesis")) }), list(reader_make_constant_shell("TBLOperativeValveProcedure")), list(reader_make_constant_shell("Valvuloplasty-MedicalProcedure"), list(reader_make_constant_shell("AorticValvuloplasty-SurgicalProcedure")), list(new SubLObject[]{ reader_make_constant_shell("Commissurotomy"), list(reader_make_constant_shell("Commissurotomy-Anterolateral")), list(reader_make_constant_shell("Commissurotomy-Anteroseptal")), list(reader_make_constant_shell("Commissurotomy-Left-anterior")), list(reader_make_constant_shell("Commissurotomy-Left-noncoronary")), list(reader_make_constant_shell("Commissurotomy-Posteromedial")), list(reader_make_constant_shell("Commissurotomy-Posteroseptal")), list(reader_make_constant_shell("Commissurotomy-Right-anterior")), list(reader_make_constant_shell("Commissurotomy-Right-noncoronary")), list(reader_make_constant_shell("Commissurotomy-right-left")) }), list(reader_make_constant_shell("CusaValvuloplasty")), list(reader_make_constant_shell("PulmonaryValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("TricuspidValvuloplasty-SurgicalProcedure"))), list(list(reader_make_constant_shell("CollectionIntersectionFn"), list(reader_make_constant_shell("TheSet"), reader_make_constant_shell("CardiacProcedure-Surgical"), reader_make_constant_shell("RoboticSurgery")))) }), list(reader_make_constant_shell("CardiacValveRepairProcedure_alfieir_leaflet_stitch_anterior-posterior")), list(reader_make_constant_shell("CardiacValveRepairProcedure_augmentation_with_pericardium")), list(reader_make_constant_shell("CardiacValveRepairProcedure_cone_repair")), list(reader_make_constant_shell("CardiacValveRepairProcedure_cut_of_leaflet_bridge")), list(reader_make_constant_shell("CardiacValveRepairProcedure_repair_with_homograft")), list(reader_make_constant_shell("CardiacValveRepairProcedure_replacement")), list(reader_make_constant_shell("CardiacValveRepairProcedure_separation_of_fused_structures")), list(reader_make_constant_shell("CardiacValveRepairProcedure_shorten")), list(reader_make_constant_shell("CardiacValveRepairProcedure_sling_repair")), list(reader_make_constant_shell("CleftRepair")), list(reader_make_constant_shell("ConduitRelated-SurgicalProcedure"), list(reader_make_constant_shell("Aorta-aorticConduit-SurgicalProcedure")), list(reader_make_constant_shell("BentallHemashieldValvedConduit-VascularProcedure")), list(reader_make_constant_shell("InnominateArteryToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("LeftVentricleToAortaConduit-SurgicalProcedure")), list(reader_make_constant_shell("ReplacementWithConduit-SurgicalProcedure")), list(reader_make_constant_shell("RightAtriumToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricleToPulmonaryArteryConduit-SurgicalProcedure"))), list(reader_make_constant_shell("Decalcification-ValvularProcedure")), list(reader_make_constant_shell("DevegaProcedure")), list(reader_make_constant_shell("EdgeToEdgeRepair")), list(reader_make_constant_shell("Exclusion-SurgicalProcedure"), list(reader_make_constant_shell("AtrialAppendageExclusion-SurgicalProcedure"), list(reader_make_constant_shell("LeftAtrialAppendageExclusion-SurgicalProcedure"), list(reader_make_constant_shell("LeftAtrialAppendageExclusionUsingStaples-SurgicalProcedure")), list(reader_make_constant_shell("LeftAtrialAppendageLigation-SurgicalProcedure")), list(reader_make_constant_shell("LeftAtrialAppendageSizeReduction-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_atrium_left_atrial_appendage_exclusion_using_clip"))))), list(reader_make_constant_shell("Fenestration")), list(reader_make_constant_shell("IsolatedCABGExclusion-NonExpandedGraph"), list(new SubLObject[]{ reader_make_constant_shell("CommonConcomitantExclusion-NonExpandedGraph"), list(reader_make_constant_shell("Aneurysmectomy-SurgicalProcedure")), list(reader_make_constant_shell("AorticAneurysmRepair-STSNonExpandedGraph")), list(reader_make_constant_shell("AtrialFibrillationProcedure-Surgical"), list(reader_make_constant_shell("MazeProcedure-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryVeinIsolationProcedure-Surgical")), list(reader_make_constant_shell("RadioFrequencyAblationProcedure-Surgical"), list(reader_make_constant_shell("BipolarRadiofrequencyAblation")), list(reader_make_constant_shell("UnipolarRadiofrequencyAblation")))), list(reader_make_constant_shell("BatistaProcedure-LeftVentricle-SurgicalProcedure")), list(new SubLObject[]{ reader_make_constant_shell("CongenitalHeartProcedure-Surgical"), list(reader_make_constant_shell("AVCanalCompleteCorrectionIncludesASDPatchRepair-SurgicalProcedure")), list(reader_make_constant_shell("Aorta-aorticConduit-SurgicalProcedure")), list(reader_make_constant_shell("AorticAllograft-SurgicalProcedure")), list(reader_make_constant_shell("AorticValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("ArterialSwitch-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortaToDescendingAortaGraft-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortaToPulmonaryArteryShuntWaterson-SurgicalProcedure")), list(reader_make_constant_shell("AscendingAortoplasty-SurgicalProcedure")), list(reader_make_constant_shell("AtrialSeptation-SurgicalProcedure")), list(reader_make_constant_shell("CongenitalSeptalDefectRepairSurgery"), list(reader_make_constant_shell("AtrialSeptalDefectRepairProcedure-Congenital"), list(reader_make_constant_shell("AtrialSeptalDefectSutureClosure-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_atrial_septal_defect_patch_closure"))), list(reader_make_constant_shell("VentricularSeptalDefectRepairProcedure-Congenital"), list(reader_make_constant_shell("VsdPatchClosure-SurgicalProcedure")), list(reader_make_constant_shell("VsdSutureClosure-SurgicalProcedure")))), list(reader_make_constant_shell("CorrectionAnomalousVenousReturn-TotalOrPartial-SurgicalProcedure")), list(reader_make_constant_shell("CreationOfAorto-pulmonaryWindow-SurgicalProcedure")), list(reader_make_constant_shell("CreationPericardialMonocuspValve-SurgicalProcedure")), list(reader_make_constant_shell("DamusKayStanselProcedure-SurgicalProcedure")), list(reader_make_constant_shell("DescendingAortaToPulmonaryArteryShuntPotts-SurgicalProcedure")), list(reader_make_constant_shell("DivisionOfAorticArchOrRemoval-VascularRing-SurgicalProcedure")), list(reader_make_constant_shell("EnlargementIasd-SurgicalProcedure")), list(reader_make_constant_shell("ExcisionCardiacDiverticulum-SurgicalProcedure")), list(reader_make_constant_shell("InnominateArteryToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("LeftSubclavianToDescendingAortaGraft-SurgicalProcedure")), list(reader_make_constant_shell("LeftVentricleToAortaConduit-SurgicalProcedure")), list(reader_make_constant_shell("LigationAnomalousSystemicVeinsSuperiorVenaCava-SurgicalProcedure")), list(reader_make_constant_shell("LigationOfCoronaryArteryOrFistula-SurgicalProcedure")), list(reader_make_constant_shell("LigationSystemicFistula-SurgicalProcedure")), list(reader_make_constant_shell("MeeShuntMelbourne-SurgicalProcedure")), list(reader_make_constant_shell("NorwoodProcedure-SurgicalProcedure")), list(reader_make_constant_shell("ObliterationOfAortoPulmonaryArteryCommunication")), list(reader_make_constant_shell("PatchOrAngioplastyOfAortaForCoarctationOrInterrupt-SurgicalProcedure")), list(reader_make_constant_shell("ProstheticAorto-pulmonaryShunt-SurgicalProcedure")), list(reader_make_constant_shell("ProstheticGraft-AortaToPulmonaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArterioplastyOrReconstruction-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArteryAllograft-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryArteryBanding-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("RadicalAtrialSeptectomy-SurgicalProcedure")), list(reader_make_constant_shell("RastelliProcedure-SurgicalProcedure")), list(reader_make_constant_shell("Re-implantationOfCoronaryArteryToAorta-SurgicalProcedure")), list(reader_make_constant_shell("ReconstructionOfCoronaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("RepairCleftMitralValveLeaflet-SurgicalProcedure")), list(reader_make_constant_shell("ResectionAnd1ReanastomosisForCoarctationOrInterruption-SurgicalProcedure")), list(reader_make_constant_shell("ResectionAneurysmSinusOfValsalva-SurgicalProcedure")), list(reader_make_constant_shell("ResectionDiscreteSubvalvularMuscle-SurgicalProcedure")), list(reader_make_constant_shell("ResectionLeftVentricularMuscle-SurgicalProcedure")), list(reader_make_constant_shell("ResectionOfLeftAtrialMembraneCortriatrium-SurgicalProcedure")), list(reader_make_constant_shell("ResectionRightVentricleMuscle-Infundibulectomy-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfBlalock-taussigShunt-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfPottsShunt-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfWatersonShunt-SurgicalProcedure")), list(reader_make_constant_shell("RightAtriumToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("RightVentriclePlication-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricleToPulmonaryArteryConduit-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricularOutflowPatch-SurgicalProcedure")), list(reader_make_constant_shell("RoofingOfCoronarySinus-SurgicalProcedure")), list(reader_make_constant_shell("SubaorticStenosis-SurgicalProcedure")), list(reader_make_constant_shell("SuperiorVenaCavaToPulmonaryArterGlenn-SurgicalProcedure")), list(reader_make_constant_shell("Supra-aorticStenosis-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalBandingOfPulmonaryArtery-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_Da_Silva_valve_repair")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_Danielson_technique")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_aorta-aortic_conduit")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_atrial_re-direction_of_venous_flow_senning_procedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_closed_atrial_septectomy_blalock-hanlon")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_complete_correction_of_atrioventricular_canal_defect")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_creation_of_aorto-pulmonary_window")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_creation_of_pulmonary_pericardial_monocusp_valve")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_enlargement_intra-atrial_septal_defect")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_intra-atrial_baffle_mustard_procedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_left_subclavian_or_aortic_arch_to_descending_aorta_graft")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_ligation_systemic_vessel_fistula")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_obliteration_or_ligation_of_patent_ductus_arteriosus")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_patch_or_angioplasty_for_coarctation_or_interruption_of_aorta")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_patent_foramen_ovale_closure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_prosthetic_aorto-pulmonary_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_re-implantation_of_native_coronary_artery_to_aorta")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_and_single_reanastomosis_for_aortic_coarctation_or_interruption")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_atrial_membrane_-_radical_atrial_septectomy")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_resection_of_supra-aortic_stenosis")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_revision_of_blalock-taussig_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_septal_myectomy")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_subclavian_to_pulmonary_artery_shunt_blalock-taussig")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_ascending_aorta_to_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_descending_aorta_to_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_subclavian-pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_take_down_superior_vena_cava_-_pulmonary_artery_shunt")), list(reader_make_constant_shell("SurgicalShunting-SurgicalProcedure")), list(reader_make_constant_shell("Take-downAscendingAorta-pulmonaryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downDescendingAorta-pulmonaryArteryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downPulmonaryArteryBanding-SurgicalProcedure")), list(reader_make_constant_shell("Take-downSubclavian-pulmonaryArteryShunt-SurgicalProcedure")), list(reader_make_constant_shell("Take-downSuperiorVenaPulmonaryArteryShuntWaterson-SurgicalProcedure")), list(reader_make_constant_shell("TricuspidValvuloplasty-SurgicalProcedure")), list(reader_make_constant_shell("UnifocalizationOfMapcas-SurgicalProcedure")), list(reader_make_constant_shell("UnroofingOfCoronaryOstium-SurgicalProcedure")), list(reader_make_constant_shell("VentricularSeptation-SurgicalProcedure")) }), list(reader_make_constant_shell("DorProcedure-LeftVentricle-SurgicalProcedure")), list(reader_make_constant_shell("HeartTransplantProcedure-Surgical")), list(reader_make_constant_shell("Myectomy-VentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("OtherNonCardiacProcedure-STSNonExpandedGraph"), list(reader_make_constant_shell("OtherNonCardiacOther-STSNonExpandedGraph"), list(reader_make_constant_shell("KidneyTransplantProcedure-Surgical")), list(reader_make_constant_shell("LiverTransplantProcedure-Surgical")), list(reader_make_constant_shell("OtherNoncardiothoracicProcedure-Surgical"), list(reader_make_constant_shell("Resection-KommerellsDiverticulum-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_other_noncardiothoracic_other")), list(reader_make_constant_shell("SurgicalProcedure_other_noncardiothoracic_repair_of_leg_wound"))), list(reader_make_constant_shell("PancreasTransplantProcedure-Surgical")), list(reader_make_constant_shell("SurgicalProcedure_abdominal_drainage_of_ascites"))), list(new SubLObject[]{ reader_make_constant_shell("OtherNonCardiacOtherThoracic-STSNonExpandedGraph"), list(reader_make_constant_shell("Decortication-SurgicalProcedure")), list(reader_make_constant_shell("DiaphragmProcedure-Surgical"), list(reader_make_constant_shell("Repair-DiaphragmaticHernia-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_diaphragm_excision_of_diaphragm"))), list(reader_make_constant_shell("LungTransplantProcedure-Surgical")), list(reader_make_constant_shell("MediastinumNeckThymectomy-SurgicalProcedure")), list(reader_make_constant_shell("Pleurodesis-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryProcedure-Surgical"), list(reader_make_constant_shell("Biopsy-Lung-SurgicalProcedure")), list(reader_make_constant_shell("Excision-LungBulla-SurgicalProcedure")), list(reader_make_constant_shell("PericardialPatchToLungs-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryEmbolectomy-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Lung-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_pulmonary_valvectomy"))), list(reader_make_constant_shell("SurgicalProcedure_thoracic_chest_open")), list(reader_make_constant_shell("SurgicalProcedure_thoracic_excision_of_tumor-mass_in_thoracic_cavity")) }), list(reader_make_constant_shell("OtherVascularProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_vascular_pulmonary")), list(reader_make_constant_shell("SurgicalProcedure_vascular_vena_cava")))), list(reader_make_constant_shell("OtherVentricularRemodelingProcedure-SurgicalProcedure")), list(reader_make_constant_shell("Pericardiectomy-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfHeartWound-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_septum_repair_of_post_infarct_ventricular_septal_defect")), list(reader_make_constant_shell("TransmyocardialRevascularization-SurgicalProcedure")), list(reader_make_constant_shell("Tri-svr-SurgicalProcedure")) }), list(reader_make_constant_shell("HeartValveRepairOrReplacement"), list(reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))))), list(reader_make_constant_shell("IsolatedCABGProcedure-NonExpandedGraph")), list(reader_make_constant_shell("LeafletPatching")), list(reader_make_constant_shell("Left-RightCommissuroplasty")), list(reader_make_constant_shell("MycorAnuloplastySystemPlacement")), list(reader_make_constant_shell("Myectomy"), list(reader_make_constant_shell("SeptalMyectomy"), list(reader_make_constant_shell("Myectomy-VentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_congenital_heart_procedure_septal_myectomy")))), list(reader_make_constant_shell("Non-coronary-LeftCommissuroplasty")), list(reader_make_constant_shell("NoncardiacProcedure-NonExpanded")), list(reader_make_constant_shell("PartialResection")), list(reader_make_constant_shell("PericardialPatch"), list(reader_make_constant_shell("PericardialPatch-Non-congenital-SurgicalProcedure"))), list(reader_make_constant_shell("PlacementOfArtificialChordae")), list(reader_make_constant_shell("PlacementOfSubannularSuturesInTheLvot")), list(reader_make_constant_shell("PosteromedialCommissuroplasty")), list(reader_make_constant_shell("PrimaryProcedure")), list(reader_make_constant_shell("ProcedurePerformedDuringReop")), list(reader_make_constant_shell("ProstheticValveRingRemoval")), list(reader_make_constant_shell("RedoProcedure")), list(reader_make_constant_shell("Reimplantation")), list(reader_make_constant_shell("Remodeling-5")), list(reader_make_constant_shell("RemovalOfPreviousAlfieriStitch")), list(reader_make_constant_shell("ResectionOfStenosis")), list(new SubLObject[]{ reader_make_constant_shell("ResectionProcedure-Surgical"), list(reader_make_constant_shell("CardiacValveRepairProcedure_resection_of_retained_leaflet")), list(reader_make_constant_shell("CompleteResection")), list(reader_make_constant_shell("Resection-CardiacValve")), list(reader_make_constant_shell("Resection-KommerellsDiverticulum-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Lung-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Subendocardial-SurgicalProcedure")), list(reader_make_constant_shell("ResectionAneurysmSinusOfValsalva-SurgicalProcedure")), list(reader_make_constant_shell("ResectionOfPannus")) }), list(reader_make_constant_shell("Resuspension")), list(reader_make_constant_shell("ResuturingPre-existingRing")), list(reader_make_constant_shell("Right-Non-coronaryCommissuroplasty")), list(reader_make_constant_shell("Shaving-ValvularProcedure")), list(reader_make_constant_shell("SlidingRepair")), list(reader_make_constant_shell("SurgicalCardiacAssistDeviceInsertion"), list(reader_make_constant_shell("SurgicalProcedure_assist_device_extracorporeal_membrane_oxygenation_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_intra-aortic_balloon_pump_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_ventricular_assist_device_insertion"))), list(reader_make_constant_shell("SurgicalCardiacAssistDeviceRemoval"), list(reader_make_constant_shell("SurgicalProcedure_assist_device_extracorporeal_membrane_oxygenation_removal")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_intra-aortic_balloon_pump_removal")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_ventricular_assist_device_removal"))), list(reader_make_constant_shell("SurgicalProcedure-Abdominal"), list(reader_make_constant_shell("Nephrectomy-SurgicalProcedure")), list(reader_make_constant_shell("Repair-Ventral-incisionalHernia-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfSpleen-SurgicalProcedure")), list(reader_make_constant_shell("Splenectomy-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_abdominal_drainage_of_ascites"))), list(new SubLObject[]{ reader_make_constant_shell("SurgicalProcedureNonCongenital"), list(reader_make_constant_shell("AirwayProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_airway_resection_of_bronchus")), list(reader_make_constant_shell("Tracheostomy-SurgicalProcedure"))), list(reader_make_constant_shell("AorticProcedure-Surgical"), list(reader_make_constant_shell("AbdominalAortaProcedure-Surgical")), list(reader_make_constant_shell("Aortoplasty-SurgicalProcedure")), list(reader_make_constant_shell("BentallHemashieldValvedConduit-VascularProcedure")), list(reader_make_constant_shell("ElephantTrunkAortaReplacementStage1-SurgicalProcedure")), list(reader_make_constant_shell("ThoracicAortaProcedure-Surgical"))), list(reader_make_constant_shell("ArterioscleroticPlaqueRemoval-Procedure"), list(reader_make_constant_shell("Endarterectomy-SurgicalProcedure"), list(reader_make_constant_shell("AtrialEndarterectomy-SurgicalProcedure")), list(reader_make_constant_shell("EndarterectomyLaser-SurgicalProcedure")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("Endarterectomy-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("CommonCarotidArtery"))))), list(reader_make_constant_shell("AssistDeviceProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_assist_device_assist_device_revision")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_extracorporeal_membrane_oxygenation_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_extracorporeal_membrane_oxygenation_removal")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_intra-aortic_balloon_pump_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_intra-aortic_balloon_pump_removal")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_ventricular_assist_device_insertion")), list(reader_make_constant_shell("SurgicalProcedure_assist_device_ventricular_assist_device_removal"))), list(reader_make_constant_shell("AtrialExcisionProcedure-Surgical")), list(reader_make_constant_shell("AtrialFibrillationProcedure-Surgical"), list(reader_make_constant_shell("MazeProcedure-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryVeinIsolationProcedure-Surgical")), list(reader_make_constant_shell("RadioFrequencyAblationProcedure-Surgical"), list(reader_make_constant_shell("BipolarRadiofrequencyAblation")), list(reader_make_constant_shell("UnipolarRadiofrequencyAblation")))), list(reader_make_constant_shell("AtrialWallDebridement-SurgicalProcedure")), list(reader_make_constant_shell("BalloonDilatation-SurgicalProcedure")), list(reader_make_constant_shell("BypassGraft-SurgicalProcedure"), list(reader_make_constant_shell("BypassGraftWithSaphenousVein-SurgicalProcedure")), list(reader_make_constant_shell("CoronaryArteryBypassGraft-SurgicalProcedure"), list(reader_make_constant_shell("CABGWithBilateralITAGraft")), list(reader_make_constant_shell("CABGWithMultipleGrafts")), list(reader_make_constant_shell("CabgWithSingleITAGraft")), list(reader_make_constant_shell("SingleGraftCAGB")))), list(reader_make_constant_shell("BypassGraftWithHemashield-SurgicalProcedure")), list(reader_make_constant_shell("CabrolFistula-SurgicalProcedure")), list(reader_make_constant_shell("ChestWallProcedure-Surgical"), list(reader_make_constant_shell("ChestWallBiopsyOfBoneMarrow-SurgicalProcedure")), list(reader_make_constant_shell("Debridement-RewireOfSternum-SurgicalProcedure")), list(reader_make_constant_shell("RepairLungOrChestWall-SurgicalProcedure")), list(reader_make_constant_shell("SternalFractureRepair-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_chest_wall_pectus_repair")), list(reader_make_constant_shell("SurgicalProcedure_chest_wall_repair_of_lung-chest_wall"))), list(reader_make_constant_shell("CongenitalIntervention-MedicalProcedure")), list(reader_make_constant_shell("CoronaryArteryProcedureNonCongenital-Surgical"), list(reader_make_constant_shell("CoronaryArteryBypassGraft-SurgicalProcedure"), list(reader_make_constant_shell("CABGWithBilateralITAGraft")), list(reader_make_constant_shell("CABGWithMultipleGrafts")), list(reader_make_constant_shell("CabgWithSingleITAGraft")), list(reader_make_constant_shell("SingleGraftCAGB"))), list(reader_make_constant_shell("OtherVascularCoronaryArteryProcedure-Surgical")), list(list(reader_make_constant_shell("CollectionDifferenceFn"), reader_make_constant_shell("CoronaryArteryProcedureNonCongenital-Surgical"), reader_make_constant_shell("CoronaryArteryBypassGraft-SurgicalProcedure")))), list(reader_make_constant_shell("CoronaryLaserProcedure-SurgicalProcedure")), list(reader_make_constant_shell("Cryoablation"), list(reader_make_constant_shell("Cryoablation-VentricularTissue-SurgicalProcedure"))), list(reader_make_constant_shell("Debridement-AtrialOrVentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("Debridement-VascularProcedure"), list(reader_make_constant_shell("ProstheticValveDebridement"))), list(reader_make_constant_shell("DiaphragmProcedure-Surgical"), list(reader_make_constant_shell("Repair-DiaphragmaticHernia-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_diaphragm_excision_of_diaphragm"))), list(reader_make_constant_shell("EndovascularProcedure-SurgicalProcedure"), list(reader_make_constant_shell("EndovascularStentProcedure-Surgical"), list(reader_make_constant_shell("EndovascularStentGraft-SurgicalProcedure"), list(reader_make_constant_shell("Debranching_with_endovascular_stent_graft")), list(reader_make_constant_shell("EndovascularStentGraftPlacementAfterLeak-SurgicalProcedure")), list(reader_make_constant_shell("VascularProcedureName_endovascular_stent_graft_antegrade")), list(reader_make_constant_shell("VascularProcedureName_endovascular_stent_graft_retrograde"))))), list(reader_make_constant_shell("EsophagogastricProcedure-Surgical"), list(reader_make_constant_shell("GiUnspecified-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_esophagogastric_control_bleeding"))), list(reader_make_constant_shell("Excision-Aneurysm-SurgicalProcedure")), list(reader_make_constant_shell("Exploration-SurgicalProcedure")), list(new SubLObject[]{ reader_make_constant_shell("HeartValveProcedure-Surgical"), list(reader_make_constant_shell("Anuloplasty"), list(reader_make_constant_shell("AnnuloplastyWithRing"), list(reader_make_constant_shell("CompleteAnnuloplastyWithRing"))), list(reader_make_constant_shell("Anuloplasty-WithoutRing-Complete")), list(reader_make_constant_shell("Anuloplasty-WithoutRing-Incomplete"))), list(reader_make_constant_shell("Commissuroplasty"), list(reader_make_constant_shell("Antero-posteriorCommissuroplasty")), list(reader_make_constant_shell("Commissuroplasty-AccordingToKay-bicuspidization")), list(reader_make_constant_shell("Commissuroplasty-Anteroposterior")), list(reader_make_constant_shell("Commissuroplasty-CongenitalBiscupsid")), list(reader_make_constant_shell("Commissuroplasty-Left-anterior")), list(reader_make_constant_shell("Commissuroplasty-Posteroseptal")), list(reader_make_constant_shell("Commissuroplasty-Right-anterior"))), list(reader_make_constant_shell("HeartValveRepairReplacementOrExploration"), list(reader_make_constant_shell("Exploration-AorticValve-SurgicalProcedure")), list(reader_make_constant_shell("Exploration-MitralValve-SurgicalProcedure")), list(reader_make_constant_shell("Exploration-PulmonaryValve-SurgicalProcedure")), list(reader_make_constant_shell("Exploration-TricuspidValve-SurgicalProcedure")), list(reader_make_constant_shell("HeartValveRepairOrReplacement"), list(reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))))), list(reader_make_constant_shell("Plication-ValvularProcedure"), list(reader_make_constant_shell("AtrialPlication-SurgicalProcedure")), list(reader_make_constant_shell("Plication-BicuspidLeaflet")), list(reader_make_constant_shell("RightVentriclePlication-SurgicalProcedure"))), list(reader_make_constant_shell("Reconstruction-CardiacValveRepair"), list(reader_make_constant_shell("AnnularReconstruction-SurgicalProcedure")), list(reader_make_constant_shell("RootReconstruction"))), list(reader_make_constant_shell("Reorientation-CardiacValveRepair")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_aortic_valve_aborted_repair_attempt")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_mitral_valve_aborted_repair_attempt")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_pulmonary_valve_aborted_repair_attempt")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_tricuspid_valve_aborted_repair_attempt")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveProcedure-Surgical"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveProcedure-Surgical"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveProcedure-Surgical"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveProcedure-Surgical"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_tricuspid_valvectomy")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepairOrReplacement"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve"))))) }), list(new SubLObject[]{ reader_make_constant_shell("HeartVentricleProcedure-Surgical"), list(reader_make_constant_shell("Aneurysmectomy-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Myocardium-SurgicalProcedure")), list(reader_make_constant_shell("Cardiomyoplasty-SurgicalProcedure")), list(reader_make_constant_shell("Cryoablation-VentricularTissue-SurgicalProcedure")), list(reader_make_constant_shell("Debridement-VentricularWall-SurgicalProcedure")), list(reader_make_constant_shell("LeftVentricleProcedure-Surgical"), list(reader_make_constant_shell("BatistaProcedure-LeftVentricle-SurgicalProcedure")), list(reader_make_constant_shell("DorProcedure-LeftVentricle-SurgicalProcedure")), list(reader_make_constant_shell("FistulaRepairWithPatch-LeftVentricle-rightAtrium-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_repair_of_left_ventricular_outflow_tract")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricle")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricular_outflow_tract"))), list(reader_make_constant_shell("MyocorSplint-SurgicalProcedure")), list(reader_make_constant_shell("OtherVentricularRemodelingProcedure-SurgicalProcedure")), list(reader_make_constant_shell("PlacementOfAcornDevice-SurgicalProcedure")), list(reader_make_constant_shell("Repair-FreeWallVentricularRupture-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Subendocardial-SurgicalProcedure")), list(reader_make_constant_shell("RightVentricleProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_ventricle_batista_procedure_on_right_ventricle"))), list(reader_make_constant_shell("SkeletalMuscleCellDiacrinTransplant-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_debridement_of_ventricular_outflow_tract"), list(reader_make_constant_shell("SurgicalProcedure_ventricle_debridement_of_left_ventricular_outflow_tract"))), list(reader_make_constant_shell("SurgicalProcedure_ventricle_excision_of_tumor")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_repair_of_ventricular_wall")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_resection_of_subendocardium")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_stem_cell_injection")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_ventricular_outflow_tract"), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricular_outflow_tract"))), list(reader_make_constant_shell("TransmyocardialRevascularization-SurgicalProcedure")), list(reader_make_constant_shell("Tri-svr-SurgicalProcedure")), list(reader_make_constant_shell("VentricularPlication-SurgicalProcedure")), list(reader_make_constant_shell("VentricularRepair-SurgicalProcedure"), list(reader_make_constant_shell("Repair-VentricularOutflowTract-SurgicalProcedure"), list(reader_make_constant_shell("SurgicalProcedure_ventricle_repair_of_left_ventricular_outflow_tract")))), list(reader_make_constant_shell("Ventriculotomy-SurgicalProcedure")) }), list(reader_make_constant_shell("LeftAtrialAppendageProcedure-Surgical"), list(reader_make_constant_shell("LeftAtrialAppendageExclusion-SurgicalProcedure"), list(reader_make_constant_shell("LeftAtrialAppendageExclusionUsingStaples-SurgicalProcedure")), list(reader_make_constant_shell("LeftAtrialAppendageLigation-SurgicalProcedure")), list(reader_make_constant_shell("LeftAtrialAppendageSizeReduction-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_atrium_left_atrial_appendage_exclusion_using_clip")))), list(reader_make_constant_shell("MediastinumOrNeckProcedure-Surgical"), list(reader_make_constant_shell("Biopsy-LymphNode-SurgicalProcedure")), list(reader_make_constant_shell("EvacuationOfHematoma-ChestCavity-SurgicalProcedure")), list(reader_make_constant_shell("EvacuationOfHematoma-Subclavicular-SurgicalProcedure")), list(reader_make_constant_shell("MediastinumNeckThymectomy-SurgicalProcedure")), list(reader_make_constant_shell("PatchPlacement-Mediastinum-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_mediastinum-neck_evacuation_of_hematoma_in_subclavicular"))), list(reader_make_constant_shell("Myectomy-VentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("Nephrectomy-SurgicalProcedure")), list(reader_make_constant_shell("Omentopexy-SurgicalProcedure")), list(reader_make_constant_shell("OtherNoncardiothoracicProcedure-Surgical"), list(reader_make_constant_shell("Resection-KommerellsDiverticulum-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_other_noncardiothoracic_other")), list(reader_make_constant_shell("SurgicalProcedure_other_noncardiothoracic_repair_of_leg_wound"))), list(reader_make_constant_shell("OtherSurgicalProcedure"), list(reader_make_constant_shell("ControlBleeding-SurgicalProcedure")), list(new SubLObject[]{ reader_make_constant_shell("OtherCardiacProcedure-Surgical"), list(reader_make_constant_shell("AnnularReconstruction-SurgicalProcedure")), list(reader_make_constant_shell("CardiacExplorationOnly-SurgicalProcedure")), list(reader_make_constant_shell("CardiacPartialAutotransplantation-SurgicalProcedure")), list(reader_make_constant_shell("CardiopulmonaryBypass-SurgicalProcedure")), list(reader_make_constant_shell("EvacuationOfHematoma-PericardiumMediastinumDueToBleed-tamponade-SurgicalProcedure")), list(reader_make_constant_shell("NotCardiopulmonaryBypass-SurgicalProcedure")), list(reader_make_constant_shell("PericardialPatch-Non-congenital-SurgicalProcedure")), list(reader_make_constant_shell("Repair-AtrioventricularGroove-SurgicalProcedure")), list(reader_make_constant_shell("Repair-CoronarySinus-SurgicalProcedure")), list(reader_make_constant_shell("Repair-FibrousTrigone-SurgicalProcedure")), list(reader_make_constant_shell("Repair-SubvalvularApparatus-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfHeartWound-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfSubvalvularArea-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrDebridement-CoronaryOstium-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Subendocardial-SurgicalProcedure")), list(reader_make_constant_shell("Revision-PulmonaryArteryAnastomosis-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_cardiac-thoracic_procedure")), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_excision_of_tumor"), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_excision_of_tumor-mass_in_pulmonary_artery"))), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_other")), list(reader_make_constant_shell("ThrombectomyFromPacingLeads-wires-SurgicalProcedure")), list(reader_make_constant_shell("UnspecifiedCardiac-thoracicProcedure-SurgicalProcedure")) })), list(reader_make_constant_shell("OtherVascularProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_vascular_pulmonary")), list(reader_make_constant_shell("SurgicalProcedure_vascular_vena_cava"))), list(reader_make_constant_shell("Oversewing")), list(reader_make_constant_shell("PatchGraft-SaphenousVein-SurgicalProcedure")), list(reader_make_constant_shell("PatchGraft-SurgicalProcedure")), list(new SubLObject[]{ reader_make_constant_shell("PericardialProcedure-Surgical"), list(reader_make_constant_shell("BeckPoudrage-SurgicalProcedure")), list(reader_make_constant_shell("Biopsy-Pericardium-SurgicalProcedure")), list(reader_make_constant_shell("Excision-PericardialCyst-SurgicalProcedure")), list(reader_make_constant_shell("PericardialWindow-SurgicalProcedure")), list(reader_make_constant_shell("Pericardiectomy-SurgicalProcedure")), list(reader_make_constant_shell("Pericardiocentesis-drainageOfPericardialEffusion-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrDebridement-Pericardium-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_pericardium_evacuation_of_hematoma")), list(reader_make_constant_shell("SurgicalProcedure_pericardium_evacuation_of_hematoma_in_pericardium_or_mediastinum")), list(reader_make_constant_shell("SurgicalProcedure_pericardium_pericardiocentesis")) }), list(reader_make_constant_shell("PleuraProcedure-Surgical"), list(reader_make_constant_shell("Biopsy-Pleura-SurgicalProcedure")), list(reader_make_constant_shell("Decortication-SurgicalProcedure")), list(reader_make_constant_shell("OtherPleuraProcedure-Surgical")), list(reader_make_constant_shell("Pleurodesis-SurgicalProcedure"))), list(reader_make_constant_shell("PulmonaryProcedure-Surgical"), list(reader_make_constant_shell("Biopsy-Lung-SurgicalProcedure")), list(reader_make_constant_shell("Excision-LungBulla-SurgicalProcedure")), list(reader_make_constant_shell("PericardialPatchToLungs-SurgicalProcedure")), list(reader_make_constant_shell("PulmonaryEmbolectomy-SurgicalProcedure")), list(reader_make_constant_shell("Resection-Lung-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_cardiac_valve_pulmonary_valvectomy"))), list(new SubLObject[]{ reader_make_constant_shell("RepairProcedure-Surgical"), list(reader_make_constant_shell("AtrialRepairProcedure-Surgical")), list(reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(reader_make_constant_shell("HerniaRepairProcedure-Surgical"), list(reader_make_constant_shell("Repair-DiaphragmaticHernia-SurgicalProcedure")), list(reader_make_constant_shell("Repair-Ventral-incisionalHernia-SurgicalProcedure")), list(reader_make_constant_shell("ThoracicHerniaRepair-SurgicalProcedure"))), list(reader_make_constant_shell("NonHerniaRepairThoracic-SurgicalProcedure")), list(reader_make_constant_shell("Repair-AtrioventricularGroove-SurgicalProcedure")), list(reader_make_constant_shell("Repair-CoronarySinus-SurgicalProcedure")), list(reader_make_constant_shell("Repair-FibrousTrigone-SurgicalProcedure")), list(reader_make_constant_shell("Repair-FreeWallVentricularRupture-SurgicalProcedure")), list(reader_make_constant_shell("Repair-PostInfarctIvsd-SurgicalProcedure")), list(reader_make_constant_shell("Repair-SubvalvularApparatus-SurgicalProcedure")), list(reader_make_constant_shell("Repair-VentricularSeptum-SurgicalProcedure")), list(reader_make_constant_shell("RepairLungOrChestWall-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfHeartWound-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfPerivalvularLeak")), list(reader_make_constant_shell("RepairOfSpleen-SurgicalProcedure")), list(reader_make_constant_shell("RepairOfSubvalvularArea-SurgicalProcedure")), list(reader_make_constant_shell("RepairWithRe-implantationOfAorticValve-SurgicalProcedure")), list(reader_make_constant_shell("VascularRepairProcedure-Surgical"), list(reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), list(reader_make_constant_shell("Repair-AtrialSeptalAneurysm-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrResection-VentricularSeptalAneurysm-SurgicalProcedure")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AbdominalAorta"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("ThoracicAorta")))), list(reader_make_constant_shell("Aortoplasty-SurgicalProcedure")), list(reader_make_constant_shell("RepairAfterPercutaneousValveReplacement-VascularProcedure")), list(reader_make_constant_shell("RepairByButton-SurgicalProcedure")), list(reader_make_constant_shell("RepairByPatchGraft-SurgicalProcedure")), list(reader_make_constant_shell("RepairByStitch-SurgicalProcedure"))), list(reader_make_constant_shell("VentricularRepair-SurgicalProcedure"), list(reader_make_constant_shell("Repair-VentricularOutflowTract-SurgicalProcedure"), list(reader_make_constant_shell("SurgicalProcedure_ventricle_repair_of_left_ventricular_outflow_tract")))) }), list(reader_make_constant_shell("Replacement-SurgicalProcedure"), list(reader_make_constant_shell("BentallHemashieldValvedConduit-VascularProcedure")), list(reader_make_constant_shell("ElephantTrunkAortaReplacementStage1-SurgicalProcedure")), list(reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))), list(reader_make_constant_shell("OrganTransplantProcedure-Surgical"), list(reader_make_constant_shell("HeartTransplantProcedure-Surgical")), list(reader_make_constant_shell("KidneyTransplantProcedure-Surgical")), list(reader_make_constant_shell("LiverTransplantProcedure-Surgical")), list(reader_make_constant_shell("LungTransplantProcedure-Surgical")), list(reader_make_constant_shell("PancreasTransplantProcedure-Surgical"))), list(reader_make_constant_shell("ReplacementWithConduit-SurgicalProcedure"))), list(reader_make_constant_shell("ReplacementSurgicalProcedure"), list(list(reader_make_constant_shell("ReplacingFn"), reader_make_constant_shell("HeartValve")), list(reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AorticValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve")), list(list(reader_make_constant_shell("IsolatedIndividualTypeOfTypeFn"), list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("MitralValve"))))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("PulmonaryValve"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("HeartValveReplacement-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("TricuspidValve")))))), list(reader_make_constant_shell("Resection-CardiacValve")), list(reader_make_constant_shell("ResectionOfPannus")), list(reader_make_constant_shell("Shunt-bypassGraft-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure-Noncardiac")), list(new SubLObject[]{ reader_make_constant_shell("SurgicalProcedure_eps"), list(reader_make_constant_shell("DrainageOfPacemakerWound-SurgicalProcedure")), list(reader_make_constant_shell("Explant-BiventricularPacerCrtIcd-SurgicalProcedure")), list(reader_make_constant_shell("Explant-Icd-SurgicalProcedure")), list(reader_make_constant_shell("ExplantICDWithSingleChamberOrDualChamberPacing-SurgicalProcedure")), list(reader_make_constant_shell("ExplantOfEndocardialPacemakerLead")), list(reader_make_constant_shell("ExplantOfEpicardialPacemakerLead")), list(reader_make_constant_shell("ExplantOfImplantableCardioverterDefibrillatorPatch")), list(reader_make_constant_shell("Implant-BiventricularPacerCrtIcd-SurgicalProcedure")), list(reader_make_constant_shell("Implant-Icd-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOrExplant-Icd-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOrExplant-PermanentPacemaker-SurgicalProcedure"), list(reader_make_constant_shell("ExplantOfPermanentPacemakerSingleChamberOrDualChamber-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOfPermanentBiventricularPacemaker-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOfPermanentPacemakerSingleChamberOrDualChamber-SurgicalProcedure"))), list(reader_make_constant_shell("MappingAndAblationOfAccessoryPathways-SurgicalProcedure")), list(reader_make_constant_shell("PacemakerInsertion-SurgicalProcedure"), list(reader_make_constant_shell("ImplantOfPermanentBiventricularPacemaker-SurgicalProcedure")), list(reader_make_constant_shell("ImplantOfPermanentPacemakerSingleChamberOrDualChamber-SurgicalProcedure"))), list(reader_make_constant_shell("Placement-PpmicdEndocardialLead-SurgicalProcedure")), list(reader_make_constant_shell("PlacementEpicardialLeadsNotIncludingLeftVentricular-SurgicalProcedure")), list(reader_make_constant_shell("PlacementOfRightAtrialEpicardialPacemakerLead")), list(reader_make_constant_shell("PlacementOfRightVentricularEpicardialPacemakerLead")), list(reader_make_constant_shell("RemovalOfEpicardialPacingWires-SurgicalProcedure")), list(reader_make_constant_shell("RemovalOfICDLeads-SurgicalProcedure")), list(reader_make_constant_shell("RemovalOfTemporaryEpicardialPacingWires-SurgicalProcedure")), list(reader_make_constant_shell("RevisionOfPpmicdLeads-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_endocardial_pacemaker_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_epicardial_pacemaker_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_implantable_cardioverter_defibrillator_generator")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_implantable_cardioverter_defibrillator_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_left_ventricular_epicardial_pacing_lead")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_permanent_pacemaker")), list(reader_make_constant_shell("SurgicalProcedure_eps_explant_of_temporary_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_epicardial_pacing_leads_not_including_left_ventricular")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_left_ventricular_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_permanent_endocardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_right_atrial_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_implant_of_right_ventricular_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_revision_of_permanent_epicardial_pacing_leads")), list(reader_make_constant_shell("SurgicalProcedure_eps_thrombectomy_from_pacing_leads")) }), list(new SubLObject[]{ reader_make_constant_shell("SurgicalWoundTreatment-SurgicalProcedure"), list(reader_make_constant_shell("ChestClosure-SurgicalProcedure")), list(reader_make_constant_shell("DebridementOfOperativeWoundNotSternal-SurgicalProcedure")), list(reader_make_constant_shell("HematomaRemovalFromGraftHarvestSite-SurgicalProcedure")), list(reader_make_constant_shell("RemovalOfSternalWires-SurgicalProcedure")), list(reader_make_constant_shell("SternalRe-wire-SurgicalProcedure")), list(reader_make_constant_shell("SternalResection-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_surgical_wound_treatment_debridement_or_rewire_of_sternum"), list(reader_make_constant_shell("SternalDebridement-SurgicalProcedure"))), list(reader_make_constant_shell("SurgicalProcedure_surgical_wound_treatment_sternal_fixation")) }), list(new SubLObject[]{ reader_make_constant_shell("ThoracicProcedure-Surgical"), list(reader_make_constant_shell("NonHerniaRepairThoracic-SurgicalProcedure")), list(reader_make_constant_shell("OtherThoracicProcedure-Surgical")), list(reader_make_constant_shell("RemovalOfForeignBodyMaterials-SurgicalProcedure")), list(reader_make_constant_shell("RepairThoracicWound-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_thoracic_chest_closure")), list(reader_make_constant_shell("SurgicalProcedure_thoracic_chest_open")), list(reader_make_constant_shell("SurgicalProcedure_thoracic_control_bleeding")), list(reader_make_constant_shell("SurgicalProcedure_thoracic_excision_of_tumor-mass_in_thoracic_cavity")), list(reader_make_constant_shell("SurgicalProcedure_thoracic_not_transplant")), list(reader_make_constant_shell("ThoracicHerniaRepair-SurgicalProcedure")) }), list(reader_make_constant_shell("ThrombectomyOrTumorExcision-SurgicalProcedure")), list(reader_make_constant_shell("TumorExcision"), list(reader_make_constant_shell("AtrialExcisionOfTumor-SurgicalProcedure")), list(reader_make_constant_shell("Excision-ValvularTumor")), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_excision_of_tumor"), list(reader_make_constant_shell("SurgicalProcedure_other_cardiac_excision_of_tumor-mass_in_pulmonary_artery"))), list(reader_make_constant_shell("SurgicalProcedure_thoracic_excision_of_tumor-mass_in_thoracic_cavity")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_excision_of_tumor"))), list(list(reader_make_constant_shell("RepairingFn"), reader_make_constant_shell("BloodVessel")), list(reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), list(reader_make_constant_shell("Repair-AtrialSeptalAneurysm-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrResection-VentricularSeptalAneurysm-SurgicalProcedure")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AbdominalAorta"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("ThoracicAorta"))))) }), list(reader_make_constant_shell("SuturingProcedure"), list(reader_make_constant_shell("SuturingProcedure-FigureOf8"))), list(reader_make_constant_shell("TestCollectionForMV")), list(reader_make_constant_shell("Thrombectomy"), list(reader_make_constant_shell("AtrialThrombectomy-SurgicalProcedure")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricle")), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_ventricular_outflow_tract"), list(reader_make_constant_shell("SurgicalProcedure_ventricle_thrombectomy_of_left_ventricular_outflow_tract")))), list(reader_make_constant_shell("Transfer")), list(reader_make_constant_shell("TransferPosteriorToAnterior")), list(reader_make_constant_shell("TransferPosteriorToPosterior")), list(reader_make_constant_shell("VascularProcedure-OtherOrAorta"), list(reader_make_constant_shell("AorticProcedure-Surgical"), list(reader_make_constant_shell("AbdominalAortaProcedure-Surgical")), list(reader_make_constant_shell("Aortoplasty-SurgicalProcedure")), list(reader_make_constant_shell("BentallHemashieldValvedConduit-VascularProcedure")), list(reader_make_constant_shell("ElephantTrunkAortaReplacementStage1-SurgicalProcedure")), list(reader_make_constant_shell("ThoracicAortaProcedure-Surgical"))), list(reader_make_constant_shell("OtherVascularProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_vascular_pulmonary")), list(reader_make_constant_shell("SurgicalProcedure_vascular_vena_cava"))), list(reader_make_constant_shell("ThoracicAortaProcedure-STS"))), list(new SubLObject[]{ reader_make_constant_shell("VascularProcedure-Surgical"), list(reader_make_constant_shell("AorticProcedure-Surgical"), list(reader_make_constant_shell("AbdominalAortaProcedure-Surgical")), list(reader_make_constant_shell("Aortoplasty-SurgicalProcedure")), list(reader_make_constant_shell("BentallHemashieldValvedConduit-VascularProcedure")), list(reader_make_constant_shell("ElephantTrunkAortaReplacementStage1-SurgicalProcedure")), list(reader_make_constant_shell("ThoracicAortaProcedure-Surgical"))), list(reader_make_constant_shell("ArterioscleroticPlaqueRemoval-Procedure"), list(reader_make_constant_shell("Endarterectomy-SurgicalProcedure"), list(reader_make_constant_shell("AtrialEndarterectomy-SurgicalProcedure")), list(reader_make_constant_shell("EndarterectomyLaser-SurgicalProcedure")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("Endarterectomy-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("CommonCarotidArtery"))))), list(reader_make_constant_shell("BalloonDilatation-SurgicalProcedure")), list(reader_make_constant_shell("BypassGraft-SurgicalProcedure"), list(reader_make_constant_shell("BypassGraftWithSaphenousVein-SurgicalProcedure")), list(reader_make_constant_shell("CoronaryArteryBypassGraft-SurgicalProcedure"), list(reader_make_constant_shell("CABGWithBilateralITAGraft")), list(reader_make_constant_shell("CABGWithMultipleGrafts")), list(reader_make_constant_shell("CabgWithSingleITAGraft")), list(reader_make_constant_shell("SingleGraftCAGB")))), list(reader_make_constant_shell("BypassGraftWithHemashield-SurgicalProcedure")), list(reader_make_constant_shell("CabrolFistula-SurgicalProcedure")), list(reader_make_constant_shell("CongenitalIntervention-MedicalProcedure")), list(reader_make_constant_shell("CoronaryArteryProcedureNonCongenital-Surgical"), list(reader_make_constant_shell("CoronaryArteryBypassGraft-SurgicalProcedure"), list(reader_make_constant_shell("CABGWithBilateralITAGraft")), list(reader_make_constant_shell("CABGWithMultipleGrafts")), list(reader_make_constant_shell("CabgWithSingleITAGraft")), list(reader_make_constant_shell("SingleGraftCAGB"))), list(reader_make_constant_shell("OtherVascularCoronaryArteryProcedure-Surgical")), list(list(reader_make_constant_shell("CollectionDifferenceFn"), reader_make_constant_shell("CoronaryArteryProcedureNonCongenital-Surgical"), reader_make_constant_shell("CoronaryArteryBypassGraft-SurgicalProcedure")))), list(reader_make_constant_shell("CoronaryLaserProcedure-SurgicalProcedure")), list(reader_make_constant_shell("Debridement-VascularProcedure"), list(reader_make_constant_shell("ProstheticValveDebridement"))), list(reader_make_constant_shell("EndovascularProcedure-SurgicalProcedure"), list(reader_make_constant_shell("EndovascularStentProcedure-Surgical"), list(reader_make_constant_shell("EndovascularStentGraft-SurgicalProcedure"), list(reader_make_constant_shell("Debranching_with_endovascular_stent_graft")), list(reader_make_constant_shell("EndovascularStentGraftPlacementAfterLeak-SurgicalProcedure")), list(reader_make_constant_shell("VascularProcedureName_endovascular_stent_graft_antegrade")), list(reader_make_constant_shell("VascularProcedureName_endovascular_stent_graft_retrograde"))))), list(reader_make_constant_shell("GraftInsertion"), list(reader_make_constant_shell("EndovascularStentGraft-SurgicalProcedure"), list(reader_make_constant_shell("Debranching_with_endovascular_stent_graft")), list(reader_make_constant_shell("EndovascularStentGraftPlacementAfterLeak-SurgicalProcedure")), list(reader_make_constant_shell("VascularProcedureName_endovascular_stent_graft_antegrade")), list(reader_make_constant_shell("VascularProcedureName_endovascular_stent_graft_retrograde")))), list(reader_make_constant_shell("Omentopexy-SurgicalProcedure")), list(reader_make_constant_shell("OtherVascularProcedure-Surgical"), list(reader_make_constant_shell("SurgicalProcedure_vascular_pulmonary")), list(reader_make_constant_shell("SurgicalProcedure_vascular_vena_cava"))), list(reader_make_constant_shell("Oversewing")), list(reader_make_constant_shell("PatchGraft-SaphenousVein-SurgicalProcedure")), list(reader_make_constant_shell("PatchGraft-SurgicalProcedure")), list(reader_make_constant_shell("ReplacementWithConduit-SurgicalProcedure")), list(reader_make_constant_shell("RoofingOfCoronarySinus-SurgicalProcedure")), list(reader_make_constant_shell("Shunt-bypassGraft-SurgicalProcedure")), list(reader_make_constant_shell("ThrombectomyOrTumorExcision-SurgicalProcedure")), list(reader_make_constant_shell("Unroofing-SurgicalProcedure")), list(reader_make_constant_shell("VascularBiopsy-VascularProcedure")), list(reader_make_constant_shell("VascularRepairProcedure-Surgical"), list(reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), list(reader_make_constant_shell("Repair-AtrialSeptalAneurysm-SurgicalProcedure")), list(reader_make_constant_shell("RepairOrResection-VentricularSeptalAneurysm-SurgicalProcedure")), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("AbdominalAorta"))), list(list(reader_make_constant_shell("SubcollectionOfWithRelationToTypeFn"), reader_make_constant_shell("AneurysmRepair-SurgicalProcedure"), reader_make_constant_shell("objectActedOn"), reader_make_constant_shell("ThoracicAorta")))), list(reader_make_constant_shell("Aortoplasty-SurgicalProcedure")), list(reader_make_constant_shell("RepairAfterPercutaneousValveReplacement-VascularProcedure")), list(reader_make_constant_shell("RepairByButton-SurgicalProcedure")), list(reader_make_constant_shell("RepairByPatchGraft-SurgicalProcedure")), list(reader_make_constant_shell("RepairByStitch-SurgicalProcedure"))) }) }))))));
    }

    static private final SubLString $str_alt1$Got_unknown_arg_type_for___A__ = makeString("Got unknown arg type for: ~A~%");

    static private final SubLString $str_alt3$Natural_language_processing_has_d = makeString("Natural language processing has deleted an entry.~%Wrong sizes ~A and ~A");

    static private final SubLList $list_alt8 = list(reader_make_constant_shell("forAll"), reader_make_constant_shell("thereExists"), reader_make_constant_shell("thereExistExactly"), reader_make_constant_shell("thereExistAtLeast"), reader_make_constant_shell("thereExistAtMost"), reader_make_constant_shell("thereExistRange"));

    static private final SubLList $list_alt9 = list(new SubLObject[]{ reader_make_constant_shell("AFew-Quant"), reader_make_constant_shell("Few-Quant"), reader_make_constant_shell("Many-Quant"), reader_make_constant_shell("Most-Quant"), reader_make_constant_shell("Tens-Quant"), reader_make_constant_shell("Dozens-Quant"), reader_make_constant_shell("Hundreds-Quant"), reader_make_constant_shell("Thousands-Quant"), reader_make_constant_shell("Millions-Quant"), reader_make_constant_shell("Billions-Quant") });

    static private final SubLString $str_alt13$Invalid_attempt_to_reuse_memoizat = makeString("Invalid attempt to reuse memoization state in multiple threads simultaneously.");

    static private final SubLSymbol $sym20$GKE_FILTERED_TERM_ = makeSymbol("GKE-FILTERED-TERM?");

    public static final SubLSymbol $kw28$_MEMOIZED_ITEM_NOT_FOUND_ = makeKeyword("&MEMOIZED-ITEM-NOT-FOUND&");

    static private final SubLList $list_alt29 = list(new SubLObject[]{ reader_make_constant_shell("Collection"), reader_make_constant_shell("ConventionalClassificationType"), reader_make_constant_shell("SiblingDisjointSetOrCollectionType"), reader_make_constant_shell("SetOrCollectionType"), reader_make_constant_shell("DisjointSetOrCollectionType"), reader_make_constant_shell("SecondOrderCollection"), list(reader_make_constant_shell("GroupFn"), reader_make_constant_shell("PartiallyTangible")), reader_make_constant_shell("ObjectType"), reader_make_constant_shell("Group"), reader_make_constant_shell("Entity"), reader_make_constant_shell("PublicConstant-DefinitionalGAFsOK"), reader_make_constant_shell("ExistingStuffType"), reader_make_constant_shell("StuffType"), reader_make_constant_shell("PublicConstant-CommentOK"), reader_make_constant_shell("ReformulatorIrrelevantFORT"), reader_make_constant_shell("ExistingObjectType"), reader_make_constant_shell("Individual") });

    static private final SubLSymbol $sym30$_GKE_FILTERED_TERM__CACHING_STATE_ = makeSymbol("*GKE-FILTERED-TERM?-CACHING-STATE*");

    static private final SubLList $list_alt31 = list(new SubLObject[]{ reader_make_constant_shell("SetOrCollectionPredicate"), reader_make_constant_shell("EvaluatablePredicate"), reader_make_constant_shell("AsymmetricBinaryPredicate"), reader_make_constant_shell("ReflexiveBinaryPredicate"), reader_make_constant_shell("TransitiveBinaryPredicate"), reader_make_constant_shell("RuleMacroPredicate"), reader_make_constant_shell("OpenCycDefinitionalPredicate"), reader_make_constant_shell("VocabularyDefiningPredicate"), reader_make_constant_shell("DefaultMonotonicPredicate") });

    static private final SubLSymbol $sym32$GKE_PREDICATE_FILTERED_ = makeSymbol("GKE-PREDICATE-FILTERED?");

    static private final SubLList $list_alt34 = list(reader_make_constant_shell("arg1Isa"), reader_make_constant_shell("arg1Genl"), reader_make_constant_shell("arg1NotIsa"), reader_make_constant_shell("arg1NotGenl"), reader_make_constant_shell("arg1Format"));

    static private final SubLSymbol $sym35$_GKE_PREDICATE_FILTERED__CACHING_STATE_ = makeSymbol("*GKE-PREDICATE-FILTERED?-CACHING-STATE*");

    static private final SubLSymbol $sym38$CYCL_FORMULA_ = makeSymbol("CYCL-FORMULA?");

    static private final SubLString $str_alt40$OPERATOR_TERMS_PASS_CONSTRAINTS_r = makeString("OPERATOR-TERMS-PASS-CONSTRAINTS requires an operator arg position. Got ~S");

    static private final SubLString $str_alt41$OPERATOR_TERMS_PASS_CONSTRAINTS_r = makeString("OPERATOR-TERMS-PASS-CONSTRAINTS requires an argument arg position. Got ~S");

    public static final SubLObject $const45$GenericIntelligenceAnalysis_CAE_A = reader_make_constant_shell("GenericIntelligenceAnalysis-CAE-Allotment");

    public static final SubLObject $const47$GenericMedicalResearchTask_Allotm = reader_make_constant_shell("GenericMedicalResearchTask-Allotment");

    static private final SubLString $str_alt52$Show_all_values_of_ = makeString("Show all values of ");

    static private final SubLString $str_alt53$_such_that__ = makeString(" such that~%");

    static private final SubLString $str_alt54$Is_it_true_that__ = makeString("Is it true that~%");

    static private final SubLList $list_alt58 = list(makeKeyword("NOR"), makeKeyword("NOT"));

    static private final SubLList $list_alt63 = list(reader_make_constant_shell("unknownSentence"), reader_make_constant_shell("not"));

    static private final SubLList $list_alt64 = list(ONE_INTEGER, ZERO_INTEGER);

    static private final SubLString $str_alt69$At_least_one_of_the_following_is_ = makeString("At least one of the following is true");

    static private final SubLList $list_alt72 = list(makeKeyword("AND"), makeKeyword("OR"));

    static private final SubLString $str_alt73$_S_must_be_one_of__S = makeString("~S must be one of ~S");

    static private final SubLString $str_alt80$useReformulationRuleForGuidedKnow = makeString("useReformulationRuleForGuidedKnowledgeEntry");

    static private final SubLList $list_alt82 = list(makeKeyword("ANYTHING"));

    static private final SubLList $list_alt83 = list(reader_make_constant_shell("thereExists"), makeKeyword("EL-VARIABLE"), makeKeyword("ANYTHING"));

    static private final SubLList $list_alt87 = list(makeKeyword("CASE-INSENSITIVE"), $TRUE, makeKeyword("REGULAR-EXPRESSIONS"), makeKeyword("FALSE"));

    static private final SubLSymbol $sym90$GENERALITY_ESTIMATE_ = makeSymbol("GENERALITY-ESTIMATE<");

    static private final SubLString $str_alt94$_S_does_not_have_arg_position__S = makeString("~S does not have arg-position ~S");

    static private final SubLList $list_alt97 = list(reader_make_constant_shell("and"));

    static private final SubLSymbol $sym98$EL_VAR_ = makeSymbol("EL-VAR?");





    static private final SubLList $list_alt107 = list(reader_make_constant_shell("UserKEInteractionFolderForTaskFn"), reader_make_constant_shell("CAEUser"), reader_make_constant_shell("GenericMedicalResearchTask-Allotment"));



    public static final SubLObject $const110$querySpecificationForFormulaTempl = reader_make_constant_shell("querySpecificationForFormulaTemplate");

    public static final SubLObject $const111$sentenceParameterValueInSpecifica = reader_make_constant_shell("sentenceParameterValueInSpecification");

    public static final SubLObject $const112$microtheoryParameterValueInSpecif = reader_make_constant_shell("microtheoryParameterValueInSpecification");

    static private final SubLString $str_alt113$Testing_replacements_for_saved_qu = makeString("Testing replacements for saved queries...");

    static private final SubLList $list_alt114 = cons(makeSymbol("LITERAL"), makeSymbol("MT"));

    static private final SubLString $str_alt115$___D_of__D_had_suggestions___ = makeString("~&~D of ~D had suggestions.~%");

    static private final SubLSymbol $sym121$ATOMIC_SENTENCE_ = makeSymbol("ATOMIC-SENTENCE?");

    static private final SubLList $list_alt128 = cons(makeSymbol("KEY"), makeSymbol("TERMS"));

    static private final SubLList $list_alt132 = list(makeKeyword("INFERENCE-MODE"), makeKeyword("MINIMAL"), makeKeyword("ANSWER-LANGUAGE"), makeKeyword("HL"));

    static private final SubLList $list_alt133 = cons(makeSymbol("KEY"), makeSymbol("REPLACEMENTS"));

    static private final SubLList $list_alt134 = list(makeSymbol("?REP-COLL"), makeSymbol("?REP-POS"), makeSymbol("?CON-COLL"), makeSymbol("?CON-POS"));

    public static final SubLObject $const135$suggestionsForPredRelativeToIsaIn = reader_make_constant_shell("suggestionsForPredRelativeToIsaInArg");

    static private final SubLList $list_alt136 = list(makeSymbol("REPLACEMENT-COLL"), makeSymbol("REPLACEMENT-POS"), makeSymbol("CONSTRAINT-COLL"), makeSymbol("CONSTRAINT-POS"));

    public static final SubLObject $const137$suggestionsForPredRelativeToGenls = reader_make_constant_shell("suggestionsForPredRelativeToGenlsInArg");

    static private final SubLSymbol $sym142$HL_PROTOTYPICAL_INSTANCE_ = makeSymbol("HL-PROTOTYPICAL-INSTANCE?");

    static private final SubLSymbol $sym143$_X = makeSymbol("?X");

    static private final SubLList $list_alt148 = cons(makeSymbol("BIN-PRED"), makeSymbol("ARGNUM"));

    static private final SubLString $str_alt149$__Conflating__S_to__S_____ = makeString("~&Conflating ~S to ~S...~%");

    static private final SubLList $list_alt153 = list(makeSymbol("ROOT"), makeSymbol("CHILDREN"));

    static private final SubLList $list_alt154 = list($ROOT, makeKeyword("CHILDREN"));

    static private final SubLList $list_alt155 = list(makeSymbol("R-TREE-ROOT"), makeSymbol("R-TREE-CHILDREN"));

    static private final SubLList $list_alt156 = list(makeSymbol("_CSETF-R-TREE-ROOT"), makeSymbol("_CSETF-R-TREE-CHILDREN"));

    static private final SubLString $str_alt164$Invalid_slot__S_for_construction_ = makeString("Invalid slot ~S for construction function");

    static private final SubLString $str_alt165$_REPLACEMENT_TREE__S_ = makeString("<REPLACEMENT-TREE ~S>");

    static private final SubLString $str_alt167$Unable_to_place__D_renderers = makeString("Unable to place ~D renderers");

    static private final SubLString $str_alt168$Hit_max_depth_of__D__Pruning__D_r = makeString("Hit max depth of ~D. Pruning ~D remaining renderers.");

    static private final SubLString $str_alt169$__Placing__S_under_superiors___S_ = makeString("~&Placing ~S under superiors: ~S~%");

    static private final SubLString $str_alt171$__Found__S_on_level__D___ = makeString("~&Found ~S on level ~D.~%");

    static private final SubLString $str_alt172$__Not_in_subtree__so_adding__S_un = makeString("~&Not in subtree, so adding ~S under ~S on level ~D.~%");

    static private final SubLString $str_alt173$___Tree_level__D_is_now__S___ = makeString("~& Tree level ~D is now ~S.~%");

    static private final SubLString $str_alt174$Found_it_ = makeString("Found it.");

    static private final SubLString $str_alt175$__Postponing__S_because__S_is_not = makeString("~&Postponing ~S because ~S is not yet in the tree.~%");

    static private final SubLSymbol $sym176$_COL = makeSymbol("?COL");

    static private final SubLList $list_alt178 = list(makeSymbol("?PRED"), makeSymbol("?N"));

    static private final SubLList $list_alt179 = list(reader_make_constant_shell("suggestionIsaClassOrderedBy"), makeSymbol("?COL"), makeSymbol("?PRED"), makeSymbol("?N"));

    static private final SubLList $list_alt180 = list(makeSymbol("?COL"));

    static private final SubLList $list_alt181 = cons(makeSymbol("?PRED"), makeSymbol("?N"));

    static private final SubLList $list_alt187 = list(reader_make_constant_shell("conflateMembersOfSetWhenGeneratingHierarchicalOrderingsForSpecs"), makeSymbol("?COL"), makeSymbol("?SET"));

    static private final SubLList $list_alt189 = list(reader_make_constant_shell("conflateMembersOfSetWhenGeneratingHierarchicalOrderingsForInstances"), makeSymbol("?COL"), makeSymbol("?SET"));

    static private final SubLSymbol $sym190$_SET = makeSymbol("?SET");

    static private final SubLString $str_alt191$__Filtered_renderers___S__ = makeString("~&Filtered renderers: ~S~%");

    static private final SubLList $list_alt195 = list(makeKeyword("NOT"), makeKeyword("REMOVAL-TVA-UNIFY"));

    static private final SubLList $list_alt196 = cons(makeSymbol("VARIABLE"), makeSymbol("VALUE"));

    static private final SubLList $list_alt197 = list(cons(makeSymbol("?TRUTH"), makeString("Yes")));

    static private final SubLString $str_alt198$_ = makeString(" ");

    static private final SubLString $str_alt199$_ = makeString("-");

    public static final SubLSymbol $kw202$CONDITIONAL_SENTENCE_ = makeKeyword("CONDITIONAL-SENTENCE?");

    static private final SubLList $list_alt203 = list(makeSymbol("*THE-CYCLIST*"));

    static private final SubLList $list_alt205 = list(makeSymbol("SENTENCE"), makeSymbol("MT"), makeSymbol("&OPTIONAL"), makeSymbol("PROPERTIES"));

    static private final SubLString $str_alt206$Setup_a_query__and_immediately_re = makeString("Setup a query, and immediately return the query identifiers.  A separate java\n   thread will start up the query and check up on it for new results.");

    static private final SubLList $list_alt207 = list(list(makeSymbol("SENTENCE"), makeSymbol("EL-FORMULA-P")), list(makeSymbol("MT"), makeSymbol("POSSIBLY-MT-P")), list(makeSymbol("PROPERTIES"), makeSymbol("QUERY-PROPERTIES-P")));

    static private final SubLString $str_alt211$Error_with_query___A__ = makeString("Error with query: ~A~%");

    static private final SubLList $list_alt213 = list(makeSymbol("PROBLEM-STORE-ID"), makeSymbol("INFERENCE-ID"), makeSymbol("PROPERTIES"), makeSymbol("&OPTIONAL"), makeSymbol("SPECIAL-STATE"));

    static private final SubLString $str_alt214$Continue_an_existing_query__ident = makeString("Continue an existing query (identified by PROBLEM-STORE-ID and INFERENCE-ID), \n   using PROPERTIES and immediately return the query identifiers.  A separate thread\n   will be started to keep track of the results and provide them to any other tools \n   (e.g. the Query Library) that need them.");

    static private final SubLList $list_alt215 = list(list(makeSymbol("PROBLEM-STORE-ID"), makeSymbol("INTEGERP")), list(makeSymbol("INFERENCE-ID"), makeSymbol("INTEGERP")), list(makeSymbol("PROPERTIES"), makeSymbol("LISTP")));

    static private final SubLString $str_alt216$gke_query_thread__A__A = makeString("gke query thread ~A ~A");

    static private final SubLString $str_alt218$results_daemon__A__A = makeString("results daemon ~A ~A");

    static private final SubLList $list_alt224 = list(makeKeyword("RUNNING"), makeKeyword("NEW"), makeKeyword("PREPARED"), makeKeyword("READY"));

    static private final SubLList $list_alt229 = list(makeSymbol("PROBLEM-STORE-ID"), makeSymbol("INFERENCE-ID"));

    static private final SubLList $list_alt231 = list(list(makeSymbol("PROBLEM-STORE-ID"), makeSymbol("INTEGERP")), list(makeSymbol("INFERENCE-ID"), makeSymbol("INTEGERP")));

    static private final SubLString $str_alt235$get_all_the_inference_results_so_ = makeString("get all the inference results so far.\n@return LISTP of LISTP of triples of the form\n  - string-paraphrase of EL variable\n  - javalist-paraphrase of the variable\'s value\n  - CycL term to which the variable is bound\none list of triples for each set of bindings for the specified inference.");

    static private final SubLList $list_alt236 = list(list(makeSymbol("PROBLEM-STORE-ID"), makeSymbol("ID-OF-VALID-PROBLEM-STORE-P")), list(makeSymbol("INFERENCE-ID"), makeSymbol("INTEGERP")));

    static private final SubLList $list_alt237 = list(makeKeyword("SUSPENDED"), $DEAD, makeKeyword("TAUTOLOGY"), makeKeyword("CONTRADICTION"));

    static private final SubLSymbol $sym238$GKE_INFERENCE_COMPLETE_ = makeSymbol("GKE-INFERENCE-COMPLETE?");

    static private final SubLString $str_alt239$ret_t_iff_inference_is_suspended_ = makeString("ret t iff inference is suspended || dead || tautology || contradiction\n&& queue is empty && daemon is :completed");

    static private final SubLString $str_alt243$get_the_suspend_status_of_the_inf = makeString("get the suspend-status of the inference");

    static private final SubLList $list_alt246 = list(makeSymbol("PROBLEM-STORE-ID"), makeSymbol("INFERENCE-ID"), makeSymbol("&OPTIONAL"), makeSymbol("PATIENCE"));

    static private final SubLString $str_alt247$Find_and_stop_the_inference_ = makeString("Find and stop the inference.");

    static private final SubLList $list_alt248 = list(list(makeSymbol("PROBLEM-STORE-ID"), makeSymbol("INTEGERP")), list(makeSymbol("INFERENCE-ID"), makeSymbol("INTEGERP")), list(makeSymbol("PATIENCE"), makeSymbol("NULL-OR-INTEGERP")));

    static private final SubLString $str_alt250$Destroy_problem_store_and_inferen = makeString("Destroy problem store and inference");

    static private final SubLSymbol $sym252$_SENT = makeSymbol("?SENT");

    static private final SubLSymbol $sym253$_QUERY = makeSymbol("?QUERY");

    static private final SubLList $list_alt254 = list(list(reader_make_constant_shell("sentenceParameterValueInSpecification"), makeSymbol("?SENT"), list(reader_make_constant_shell("TestQueryFn"), makeSymbol("?QUERY"))));

    static private final SubLString $str_alt256$GKE_Query_Sentence_Literal_Manipu = makeString("GKE Query Sentence Literal Manipulation");

    private static final SubLSymbol GKE_LITERAL_MANIPULATION_TEST_CASE = makeSymbol("GKE-LITERAL-MANIPULATION-TEST-CASE");

    static private final SubLList $list_alt259 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SETUP"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CLEANUP"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("TEST-STRENGTHENING"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("TEST-LITERAL-REMOVAL"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("TEST-LITERAL-ADDITION"), NIL, makeKeyword("PROTECTED")));

    static private final SubLSymbol $sym268$SUBLOOP_RESERVED_INITIALIZE_GKE_LITERAL_MANIPULATION_TEST_CASE_CL = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-GKE-LITERAL-MANIPULATION-TEST-CASE-CLASS");

    static private final SubLSymbol $sym273$SUBLOOP_RESERVED_INITIALIZE_GKE_LITERAL_MANIPULATION_TEST_CASE_IN = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-GKE-LITERAL-MANIPULATION-TEST-CASE-INSTANCE");

    static private final SubLString $str_alt274$gke_main = makeString("gke-main");

    static private final SubLString $$$cycl = makeString("cycl");

    static private final SubLList $list_alt276 = list(makeString("GKE Query Sentence Literal Manipulation"));

    private static final SubLSymbol TEST_STRENGTHENING = makeSymbol("TEST-STRENGTHENING");

    private static final SubLSymbol TEST_LITERAL_REMOVAL = makeSymbol("TEST-LITERAL-REMOVAL");

    private static final SubLSymbol TEST_LITERAL_ADDITION = makeSymbol("TEST-LITERAL-ADDITION");

    static private final SubLSymbol $sym283$CANDIDATE_REPLACEMENTS_EQUAL_ = makeSymbol("CANDIDATE-REPLACEMENTS-EQUAL?");

    static private final SubLString $$$baxter = makeString("baxter");

    static private final SubLList $list_alt287 = list(makeSymbol("GKE-TEST-CASE-TABLES"));

    static private final SubLList $list_alt291 = list(list(list(list(reader_make_constant_shell("dataForValveOfEventRecordsStenosisSeverity"), makeSymbol("?CARDIAC-VALVE-DATA"), makeSymbol("?MEDICALLY-RELATED-EVENT"), list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), reader_make_constant_shell("CCF-CAE-QueryMt")), list(list(new SubLObject[]{ list(THREE_INTEGER), reader_make_constant_shell("Moderate-SevereToSevereCardiacValveStenosis"), list(reader_make_constant_shell("ModeratePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")), list(reader_make_constant_shell("MildToModeratePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")), list(reader_make_constant_shell("MildPhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")), reader_make_constant_shell("ModerateToModerate-SevereToSevereCardiacValveStenosis"), list(reader_make_constant_shell("SeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")), list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")), reader_make_constant_shell("None-CardiacValveStenosis"), reader_make_constant_shell("CardiacValveStenosis_present"), reader_make_constant_shell("CardiacValveStenosis_trivial"), reader_make_constant_shell("CardiacValveStenosis_critical") }))));

    static private final SubLList $list_alt294 = cons(makeSymbol("ARG-POSITION"), makeSymbol("GROVES"));

    static private final SubLSymbol $sym296$TERM___WITH_CONSTANT_BY_NAME = makeSymbol("TERM-<-WITH-CONSTANT-BY-NAME");

    static private final SubLList $list_alt299 = cons(makeSymbol("ROOT"), makeSymbol("SUBTREES"));

    static private final SubLList $list_alt300 = listS(makeSymbol("ARG-POSITION"), makeSymbol("FLAT-LIST"), makeSymbol("GROVES"));

    static private final SubLList $list_alt301 = list(makeSymbol("JAVALIST"), makeSymbol("TERM"));

    static private final SubLString $$$daves = makeString("daves");

    static private final SubLList $list_alt304 = list(list(list(list(reader_make_constant_shell("medicalTestRelevantToPhysiologicalConditionType"), reader_make_constant_shell("DiastolicBloodPressureTest"), reader_make_constant_shell("RenalDisease")), list(reader_make_constant_shell("medicalTestRelevantToPhysiologicalConditionType"), makeSymbol("?X"), reader_make_constant_shell("RenalDisease")), list(reader_make_constant_shell("DocumentReaderFollowupsForTaskMtFn"), reader_make_constant_shell("GenericMedicalResearchTask-Allotment"))), T));

    static private final SubLList $list_alt306 = list(list(list(list(reader_make_constant_shell("dataForValveOfEventRecordsStenosisSeverity"), makeSymbol("?CARDIAC-VALVE-DATA"), makeSymbol("?MEDICALLY-RELATED-EVENT"), list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), reader_make_constant_shell("MedicalResearchCAEGuidanceMt")), list(list(list(list(THREE_INTEGER), list(list(reader_make_constant_shell("CardiacValveStenosis_critical")), list(reader_make_constant_shell("CardiacValveStenosis_present")), list(reader_make_constant_shell("CardiacValveStenosis_trivial")), list(reader_make_constant_shell("Moderate-SevereToSevereCardiacValveStenosis"), list(list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("SeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")))), list(reader_make_constant_shell("ModerateToModerate-SevereToSevereCardiacValveStenosis"), list(list(reader_make_constant_shell("ModeratePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("SeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")))), list(reader_make_constant_shell("None-CardiacValveStenosis")), list(list(reader_make_constant_shell("MildPhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("MildToModeratePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")))))), list(list(list(THREE_INTEGER), list(list(reader_make_constant_shell("Moderate-SevereToSevereCardiacValveStenosis"), list(list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("SeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis")))), list(reader_make_constant_shell("ModerateToModerate-SevereToSevereCardiacValveStenosis"), list(list(reader_make_constant_shell("ModeratePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("ModerateToSeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))), list(list(reader_make_constant_shell("SeverePhysiologicalConditionOfTypeFn"), reader_make_constant_shell("CardiacValveStenosis"))))))))));

    public static final SubLObject $list_alt308 = com.cyc.cycjava.cycl.gke_main._constant_308_initializer();

    static private final SubLList $list_alt310 = list(list(list(reader_make_constant_shell("Italy"), list(reader_make_constant_shell("performedBy"), makeSymbol("?ACT"), list(reader_make_constant_shell("GovernmentFn"), reader_make_constant_shell("France"))), list(TWO_INTEGER, ONE_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), NIL, NIL, NIL), list(reader_make_constant_shell("performedBy"), makeSymbol("?ACT"), list(reader_make_constant_shell("GovernmentFn"), reader_make_constant_shell("Italy")))));

    public static final SubLObject $list_alt311 = com.cyc.cycjava.cycl.gke_main._constant_311_initializer();

    private static SubLObject _constant_285_initializer() {
        return list(new SubLObject[]{ list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), makeSymbol("?PERSON")), list(TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), reader_make_constant_shell("OsamaBinLaden"))), list(list(reader_make_constant_shell("Person"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y")), list(TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("isa"), makeSymbol("?X"), reader_make_constant_shell("Person"))), list(list(reader_make_constant_shell("Android"), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), makeSymbol("?AGENT")), list(TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), NIL, NIL, NIL), NIL), list(list(reader_make_constant_shell("Android"), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), makeSymbol("?AGENT")), list(TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), makeSymbol("?ROBOT")), list(reader_make_constant_shell("isa"), makeSymbol("?ROBOT"), reader_make_constant_shell("Android")))), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y")), list(TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), NIL, NIL, NIL), NIL), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y")), list(TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("equals"), makeSymbol("?X"), reader_make_constant_shell("OsamaBinLaden"))), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y")), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), makeSymbol("?X"))), list(ONE_INTEGER, TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), reader_make_constant_shell("OsamaBinLaden"))), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y")), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), makeSymbol("?X")), list(reader_make_constant_shell("dateOfEvent"), makeSymbol("?EVENT"), makeSymbol("?DATE"))), list(ONE_INTEGER, TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), reader_make_constant_shell("OsamaBinLaden")), list(reader_make_constant_shell("dateOfEvent"), makeSymbol("?EVENT"), makeSymbol("?DATE")))), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("dateOfEvent"), makeSymbol("?EVENT"), makeSymbol("?DATE")), list(ONE_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), NIL), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("dateOfEvent"), makeSymbol("?EVENT"), makeSymbol("?DATE")), list(TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), NIL), list(list(reader_make_constant_shell("Person"), list(reader_make_constant_shell("dateOfEvent"), makeSymbol("?EVENT"), makeSymbol("?DATE")), list(ONE_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), NIL), list(list(reader_make_constant_shell("Person"), list(reader_make_constant_shell("dateOfEvent"), makeSymbol("?EVENT"), makeSymbol("?DATE")), list(TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), NIL), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), reader_make_constant_shell("Cat")), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y"))), list(TWO_INTEGER, TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), reader_make_constant_shell("Cat")), list(reader_make_constant_shell("equals"), makeSymbol("?X"), reader_make_constant_shell("OsamaBinLaden")))), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("isa"), makeSymbol("?WHO"), reader_make_constant_shell("Cat")), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("isa"), makeSymbol("?WHO"), makeSymbol("?Y")), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), makeSymbol("?WHO")))), list(TWO_INTEGER, ONE_INTEGER, TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("isa"), makeSymbol("?WHO"), reader_make_constant_shell("Cat")), list(reader_make_constant_shell("performedBy"), makeSymbol("?EVENT"), reader_make_constant_shell("OsamaBinLaden")))), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("thereExists"), makeSymbol("?X"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y"))), list(TWO_INTEGER, TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("thereExists"), makeSymbol("?X"), list(reader_make_constant_shell("equals"), makeSymbol("?X"), reader_make_constant_shell("OsamaBinLaden")))), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("thereExists"), makeSymbol("?Y"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y"))), list(TWO_INTEGER, TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("equals"), makeSymbol("?X"), reader_make_constant_shell("OsamaBinLaden"))), list(list(reader_make_constant_shell("OsamaBinLaden"), list(reader_make_constant_shell("thereExists"), makeSymbol("?Y"), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("isa"), makeSymbol("?X"), makeSymbol("?Y")), list(reader_make_constant_shell("isa"), makeSymbol("?Z"), makeSymbol("?Y")))), list(TWO_INTEGER, ONE_INTEGER, TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("thereExists"), makeSymbol("?Y"), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("equals"), makeSymbol("?X"), reader_make_constant_shell("OsamaBinLaden")), list(reader_make_constant_shell("isa"), makeSymbol("?Z"), makeSymbol("?Y"))))), list(list(reader_make_constant_shell("Person"), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("beneficiary"), makeSymbol("?EVENT"), makeSymbol("?WHO")), list(reader_make_constant_shell("maleficiary"), makeSymbol("?EVENT"), makeSymbol("?WHO"))), list(ONE_INTEGER, TWO_INTEGER), NIL, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("beneficiary"), makeSymbol("?EVENT"), makeSymbol("?BENEFICIARY")), list(reader_make_constant_shell("isa"), makeSymbol("?BENEFICIARY"), reader_make_constant_shell("Person"))), list(reader_make_constant_shell("maleficiary"), makeSymbol("?EVENT"), makeSymbol("?WHO")))), list(list(reader_make_constant_shell("Person"), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("beneficiary"), makeSymbol("?EVENT"), makeSymbol("?WHO")), list(reader_make_constant_shell("maleficiary"), makeSymbol("?EVENT"), makeSymbol("?WHO"))), list(ONE_INTEGER, TWO_INTEGER), T, reader_make_constant_shell("TKBSourceSpindleCollectorMt"), T, NIL, NIL), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("or"), list(reader_make_constant_shell("beneficiary"), makeSymbol("?EVENT"), makeSymbol("?MALEFICIARY")), list(reader_make_constant_shell("maleficiary"), makeSymbol("?EVENT"), makeSymbol("?MALEFICIARY"))), list(reader_make_constant_shell("isa"), makeSymbol("?MALEFICIARY"), reader_make_constant_shell("Person")))) });
    }

    @Override
    public void declareFunctions() {
        gke_main.declare_gke_main_file();
    }

    @Override
    public void initializeVariables() {
        gke_main.init_gke_main_file();
    }

    @Override
    public void runTopLevelForms() {
        gke_main.setup_gke_main_file();
    }

    static {
    }

    public static final class $replacement_tree_p$UnaryFunction extends UnaryFunction {
        public $replacement_tree_p$UnaryFunction() {
            super(extractFunctionNamed("REPLACEMENT-TREE-P"));
        }

        @Override
        public SubLObject processItem(final SubLObject arg1) {
            return gke_main.replacement_tree_p(arg1);
        }
    }
}

/**
 * Total time: 6984 ms
 */
