/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 */
package com.cyc.cycjava.cycl;

import static com.cyc.cycjava.cycl.access_macros.register_external_symbol;
import static com.cyc.cycjava.cycl.access_macros.register_macro_helper;
import static com.cyc.cycjava.cycl.cb_parameters.$cb_permit_robots_to_followP$;
import static com.cyc.cycjava.cycl.cb_parameters.$cb_permit_robots_to_indexP$;
import static com.cyc.cycjava.cycl.cb_parameters.$cb_show_enhanced_tables$;
import static com.cyc.cycjava.cycl.cb_parameters.cb_head_shortcut_icon;
import static com.cyc.cycjava.cycl.cb_utilities.cb_form;
import static com.cyc.cycjava.cycl.cb_utilities.cb_frame_name;
import static com.cyc.cycjava.cycl.cb_utilities.cb_guess_fort;
import static com.cyc.cycjava.cycl.cb_utilities.cb_term_identifier;
import static com.cyc.cycjava.cycl.cfasl.cfasl_encode_externalized;
import static com.cyc.cycjava.cycl.cfasl.cfasl_input;
import static com.cyc.cycjava.cycl.cfasl.cfasl_output;
import static com.cyc.cycjava.cycl.cfasl.cfasl_output_externalized;
import static com.cyc.cycjava.cycl.constant_handles.reader_make_constant_shell;
import static com.cyc.cycjava.cycl.constant_handles.valid_constantP;
import static com.cyc.cycjava.cycl.control_vars.$perform_equals_unification$;
import static com.cyc.cycjava.cycl.control_vars.cyc_image_id;
import static com.cyc.cycjava.cycl.control_vars.kb_loaded;
import static com.cyc.cycjava.cycl.cyc_testing.generic_testing.define_test_case_table_int;
import static com.cyc.cycjava.cycl.el_utilities.copy_expression;
import static com.cyc.cycjava.cycl.el_utilities.el_conjunction_p;
import static com.cyc.cycjava.cycl.el_utilities.el_formula_p;
import static com.cyc.cycjava.cycl.el_utilities.el_formula_with_operator_p;
import static com.cyc.cycjava.cycl.el_utilities.formula_arityE;
import static com.cyc.cycjava.cycl.el_utilities.ist_sentence_p;
import static com.cyc.cycjava.cycl.el_utilities.make_binary_formula;
import static com.cyc.cycjava.cycl.el_utilities.make_el_formula;
import static com.cyc.cycjava.cycl.el_utilities.replace_formula_arg;
import static com.cyc.cycjava.cycl.el_utilities.replace_formula_arg_position;
import static com.cyc.cycjava.cycl.el_utilities.same_formula_arity_p;
import static com.cyc.cycjava.cycl.fort_types_interface.relation_p;
import static com.cyc.cycjava.cycl.html_utilities.html_align;
import static com.cyc.cycjava.cycl.html_utilities.html_char;
import static com.cyc.cycjava.cycl.html_utilities.html_color;
import static com.cyc.cycjava.cycl.html_utilities.html_copyright_notice;
import static com.cyc.cycjava.cycl.html_utilities.html_extract_input;
import static com.cyc.cycjava.cycl.html_utilities.html_hidden_input;
import static com.cyc.cycjava.cycl.html_utilities.html_hr;
import static com.cyc.cycjava.cycl.html_utilities.html_markup;
import static com.cyc.cycjava.cycl.html_utilities.html_meta_robot_instructions;
import static com.cyc.cycjava.cycl.html_utilities.html_newline;
import static com.cyc.cycjava.cycl.html_utilities.html_princ;
import static com.cyc.cycjava.cycl.html_utilities.html_princ_strong;
import static com.cyc.cycjava.cycl.html_utilities.html_simple_attribute;
import static com.cyc.cycjava.cycl.html_utilities.html_source_readability_terpri;
import static com.cyc.cycjava.cycl.html_utilities.html_submit_input;
import static com.cyc.cycjava.cycl.html_utilities.html_terpri;
import static com.cyc.cycjava.cycl.html_utilities.html_text_input;
import static com.cyc.cycjava.cycl.id_index.do_id_index_empty_p;
import static com.cyc.cycjava.cycl.id_index.do_id_index_id_and_object_validP;
import static com.cyc.cycjava.cycl.id_index.do_id_index_next_id;
import static com.cyc.cycjava.cycl.id_index.do_id_index_next_state;
import static com.cyc.cycjava.cycl.id_index.do_id_index_state_object;
import static com.cyc.cycjava.cycl.id_index.id_index_dense_objects;
import static com.cyc.cycjava.cycl.id_index.id_index_dense_objects_empty_p;
import static com.cyc.cycjava.cycl.id_index.id_index_next_id;
import static com.cyc.cycjava.cycl.id_index.id_index_objects_empty_p;
import static com.cyc.cycjava.cycl.id_index.id_index_skip_tombstones_p;
import static com.cyc.cycjava.cycl.id_index.id_index_sparse_id_threshold;
import static com.cyc.cycjava.cycl.id_index.id_index_sparse_objects;
import static com.cyc.cycjava.cycl.id_index.id_index_sparse_objects_empty_p;
import static com.cyc.cycjava.cycl.id_index.id_index_tombstone_p;
import static com.cyc.cycjava.cycl.inference.browser.cb_query.default_new_inference_monad_mt;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types.extract_inference_dynamic_properties;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types.extract_inference_static_properties;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types.inference_error_suspend_status_p;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types.inference_properties_max_time;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types.inference_properties_problem_store;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types.merge_query_properties;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.destroy_inference;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_browsableP;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_suspend_status;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.valid_inference_p;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem_store.destroy_problem_store;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem_store.new_problem_store;
import static com.cyc.cycjava.cycl.inference.kb_query.kbq_mt;
import static com.cyc.cycjava.cycl.inference.kb_query.kbq_query_properties;
import static com.cyc.cycjava.cycl.inference.kb_query.kbq_sentence;
import static com.cyc.cycjava.cycl.inference.kb_query.new_cyc_query_from_kbq;
import static com.cyc.cycjava.cycl.inference.modules.removal.removal_modules_indexical_referent.cyc_indexical_referent;
import static com.cyc.cycjava.cycl.inference.modules.removal.removal_modules_indexical_referent.register_indexical_referent_expansion;
import static com.cyc.cycjava.cycl.kb_indexing_datastructures.do_intermediate_index_valid_index_p;
import static com.cyc.cycjava.cycl.kb_indexing_datastructures.do_simple_index_term_assertion_list;
import static com.cyc.cycjava.cycl.kb_indexing_datastructures.indexed_term_p;
import static com.cyc.cycjava.cycl.kb_indexing_datastructures.intermediate_index_dictionary;
import static com.cyc.cycjava.cycl.kb_indexing_datastructures.intermediate_index_lookup;
import static com.cyc.cycjava.cycl.kb_indexing_datastructures.intermediate_index_p;
import static com.cyc.cycjava.cycl.kb_indexing_datastructures.simple_index_p;
import static com.cyc.cycjava.cycl.kb_indexing_datastructures.term_index;
import static com.cyc.cycjava.cycl.owl.owl_cycl_to_xml.owl_opencyc_uri_for_fort;
import static com.cyc.cycjava.cycl.owl.owl_uris_and_prefixes.$owl_export_include_sameas_links_to_cyc_urisP$;
import static com.cyc.cycjava.cycl.owl.owl_uris_and_prefixes.$owl_export_limited_to_opencyc_contentP$;
import static com.cyc.cycjava.cycl.owl.owl_uris_and_prefixes.$owl_export_version_date$;
import static com.cyc.cycjava.cycl.owl.owlification.$owl_export_from_opencyc_kbP$;
import static com.cyc.cycjava.cycl.owl.owlification.$owl_use_entity_referencesP$;
import static com.cyc.cycjava.cycl.owl.owlification.$owl_use_external_ids_for_namesP$;
import static com.cyc.cycjava.cycl.owl.owlification.$owl_use_pretty_stringsP$;
import static com.cyc.cycjava.cycl.pph_html.new_pph_source_citation;
import static com.cyc.cycjava.cycl.pph_html.pph_html_citation_string;
import static com.cyc.cycjava.cycl.sbhl.sbhl_graphs.get_sbhl_graph_link;
import static com.cyc.cycjava.cycl.sbhl.sbhl_link_methods.non_fort_instance_table_lookup;
import static com.cyc.cycjava.cycl.sbhl.sbhl_link_vars.$sbhl_link_direction$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_link_vars.$sbhl_link_generator$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_link_vars.$sbhl_link_mt$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_link_vars.$sbhl_link_tv$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_link_vars.get_sbhl_link_direction;
import static com.cyc.cycjava.cycl.sbhl.sbhl_link_vars.sbhl_node_object_p;
import static com.cyc.cycjava.cycl.sbhl.sbhl_link_vars.sbhl_randomize_lists_p;
import static com.cyc.cycjava.cycl.sbhl.sbhl_links.get_sbhl_mt_links;
import static com.cyc.cycjava.cycl.sbhl.sbhl_macros.do_sbhl_non_fort_linksP;
import static com.cyc.cycjava.cycl.sbhl.sbhl_macros.get_sbhl_accessible_modules;
import static com.cyc.cycjava.cycl.sbhl.sbhl_marking_utilities.sbhl_mark_node_marked;
import static com.cyc.cycjava.cycl.sbhl.sbhl_marking_utilities.sbhl_search_path_termination_p;
import static com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars.$sbhl_gather_space$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars.$sbhl_space$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars.free_sbhl_marking_space;
import static com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars.get_sbhl_marking_space;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities.apply_sbhl_module_type_test;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities.get_sbhl_add_node_to_result_test;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities.get_sbhl_module_backward_direction;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities.get_sbhl_module_type;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities.get_sbhl_transfers_through_module;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities.get_sbhl_type_test;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities.sbhl_search_direction_to_link_direction;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_vars.$sbhl_module$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_module_vars.get_sbhl_module;
import static com.cyc.cycjava.cycl.sbhl.sbhl_paranoia.$sbhl_type_error_action$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_paranoia.sbhl_cerror;
import static com.cyc.cycjava.cycl.sbhl.sbhl_paranoia.sbhl_error;
import static com.cyc.cycjava.cycl.sbhl.sbhl_paranoia.sbhl_object_type_checking_p;
import static com.cyc.cycjava.cycl.sbhl.sbhl_paranoia.sbhl_warn;
import static com.cyc.cycjava.cycl.sbhl.sbhl_paranoia.suspend_sbhl_type_checkingP;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.$genl_inverse_mode_p$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.$relevant_sbhl_tv_function$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.$sbhl_add_node_to_result_test$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.$sbhl_search_direction$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.$sbhl_search_module$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.$sbhl_search_module_type$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.$sbhl_tv$;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.flip_genl_inverse_modeP;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.genl_inverse_mode_p;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.get_sbhl_backward_search_direction;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.get_sbhl_true_tv;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.relevant_sbhl_tvP;
import static com.cyc.cycjava.cycl.sbhl.sbhl_search_vars.sbhl_true_tv_p;
import static com.cyc.cycjava.cycl.sbhl.sbhl_time_modules.ends_after_ending_ofP;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_basis_object;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_doneP;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_element_validP;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_initial_state;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_next;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_update_state;
import static com.cyc.cycjava.cycl.subl_macro_promotions.$catch_error_message_target$;
import static com.cyc.cycjava.cycl.subl_macro_promotions.$with_timeout_nesting_depth$;
import static com.cyc.cycjava.cycl.subl_macro_promotions.$within_with_timeout$;
import static com.cyc.cycjava.cycl.subl_macro_promotions.declare_defglobal;
import static com.cyc.cycjava.cycl.subl_macro_promotions.with_timeout_make_tag;
import static com.cyc.cycjava.cycl.subl_macro_promotions.with_timeout_start_timer;
import static com.cyc.cycjava.cycl.subl_macro_promotions.with_timeout_stop_timer;
import static com.cyc.cycjava.cycl.thcl.$thcl_forts_by_fiat$;
import static com.cyc.cycjava.cycl.thcl.thcl_formulaP;
import static com.cyc.cycjava.cycl.thcl.thcl_fortP;
import static com.cyc.cycjava.cycl.utilities_macros.$last_percent_progress_index$;
import static com.cyc.cycjava.cycl.utilities_macros.$last_percent_progress_prediction$;
import static com.cyc.cycjava.cycl.utilities_macros.$percent_progress_start_time$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_note$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_sofar$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_start_time$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_total$;
import static com.cyc.cycjava.cycl.utilities_macros.$silent_progressP$;
import static com.cyc.cycjava.cycl.utilities_macros.$within_noting_percent_progress$;
import static com.cyc.cycjava.cycl.utilities_macros.note_funcall_helper_function;
import static com.cyc.cycjava.cycl.utilities_macros.note_percent_progress;
import static com.cyc.cycjava.cycl.utilities_macros.noting_percent_progress_postamble;
import static com.cyc.cycjava.cycl.utilities_macros.noting_percent_progress_preamble;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_caret;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_colon;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_equal;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_greater;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_hyphen;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_less;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_newline;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_period;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_quotation;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_slash;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_space;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_tab;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_underbar;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_vertical;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.alphanumericp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.char_downcase;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.char_upcase;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.upper_case_p;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.append;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.cons;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.listS;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.nconc;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.nth;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.rplaca;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.bind;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.currentBinding;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.rebind;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.sublisp_throw;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.eq;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.eql;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.equal;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.identity;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.apply;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.funcall;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.gethash_without_values;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Locks.make_lock;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Locks.release_lock;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Locks.seize_lock;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.add;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.divide;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.integerDivide;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.mod;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.multiply;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.numG;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.numGE;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.numL;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.subtract;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Packages.find_package;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Packages.find_symbol;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow.format;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow.write_to_string;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.cconcatenate;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.count;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.delete;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.delete_duplicates;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.find;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.find_if;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.length;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.nreverse;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.position;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.remove;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.remove_duplicates;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.remove_if;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.reverse;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.search;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.subseq;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.def_csetf;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.makeStructDeclNative;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.register_method;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.boundp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.fboundp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.make_keyword;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_function;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_value;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.$is_thread_performing_cleanupP$;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.all_processes;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.current_process;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.kill_process;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.process_name;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.process_whostate;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.sleep;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.valid_process_p;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Time.get_internal_real_time;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Time.get_universal_time;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Time.time_has_arrivedP;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.integerp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.stringp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.sublisp_null;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.vectorp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.arg2;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.getValuesAsVector;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.multiple_value_list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.nth_value_step_1;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.nth_value_step_2;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.resetMultipleValues;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.restoreValuesFromVector;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.values;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors.aref;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors.make_vector;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors.set_aref;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeBoolean;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeDouble;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeInteger;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeKeyword;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeString;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeSymbol;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeUninternedSymbol;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.cdestructuring_bind_error;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.destructuring_bind_must_consp;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.destructuring_bind_must_listp;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.property_list_member;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.assoc;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.butlast;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.cadr;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.cddr;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.copy_list;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.copy_tree;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.getf;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.intersection;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.last;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.member;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.putf;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.second;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.set_difference;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.third;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.union;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.$print_object_method_table$;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.prin1;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.princ;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.princ_to_string;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.print;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader.bq_cons;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader.read_from_string;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader.read_from_string_ignoring_errors;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.close;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.file_length;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.force_output;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.get_output_stream_string;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.make_private_string_output_stream;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.open_stream_p;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.output_stream_p;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.read_line;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.terpri;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.write_line;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.write_string;
import static com.cyc.tool.subl.util.SubLFiles.declareFunction;
import static com.cyc.tool.subl.util.SubLFiles.declareMacro;
import static com.cyc.tool.subl.util.SubLFiles.defconstant;
import static com.cyc.tool.subl.util.SubLFiles.deflexical;
import static com.cyc.tool.subl.util.SubLFiles.defparameter;
import static com.cyc.tool.subl.util.SubLFiles.defvar;

import org.armedbear.lisp.Lisp;

import com.cyc.cycjava.cycl.inference.ask_utilities;
import com.cyc.cycjava.cycl.inference.kb_query;
import com.cyc.cycjava.cycl.inference.browser.cb_query;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem_store;
import com.cyc.cycjava.cycl.inference.harness.inference_kernel;
import com.cyc.cycjava.cycl.inference.modules.removal.removal_modules_indexical_referent;
import com.cyc.cycjava.cycl.owl.owl_cycl_to_xml;
import com.cyc.cycjava.cycl.owl.owl_uris_and_prefixes;
import com.cyc.cycjava.cycl.owl.owlification;
import com.cyc.cycjava.cycl.sbhl.sbhl_graphs;
import com.cyc.cycjava.cycl.sbhl.sbhl_link_methods;
import com.cyc.cycjava.cycl.sbhl.sbhl_link_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_links;
import com.cyc.cycjava.cycl.sbhl.sbhl_macros;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_module_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_paranoia;
import com.cyc.cycjava.cycl.sbhl.sbhl_search_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_time_modules;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Environment;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Filesys;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Mapping;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Processes;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sort;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.StreamsLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Strings;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLSpecialOperatorDeclarations;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDecl;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDeclNative;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.UnaryFunction;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLStructNative;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLFloat;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLInteger;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.compatibility;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.random;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.stream_macros;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.time_high;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.visitation;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLFiles;
import com.cyc.tool.subl.util.SubLFiles.LispMethod;
import com.cyc.tool.subl.util.SubLTrampolineFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;

/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 * module:      FACT-SHEETS
 * source file: /cyc/top/cycl/fact-sheets.lisp
 * created:     2019/07/03 17:38:41
 */
public final class fact_sheets extends SubLTranslatedFile implements V12 {
    public static final SubLObject with_quiet_fact_sheet_logging(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    SubLObject body = current;
	    return listS(CLET, $list_alt35, append(body, NIL));
	}
    }

    public static final SubLObject with_fact_sheet_logging_and_hourly_reporting(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    SubLObject body = current;
	    return list(WITH_FACT_SHEET_LOGGING, listS(CLET, $list_alt77, $list_alt78, append(body, NIL)));
	}
    }

    public static final SubLObject with_fact_sheet_logging(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    SubLObject body = current;
	    SubLObject directory = $sym59$DIRECTORY;
	    SubLObject filename = $sym60$FILENAME;
	    SubLObject already_loggingP = $sym61$ALREADY_LOGGING_;
	    SubLObject use_new_setupP = $sym62$USE_NEW_SETUP_;
	    return list(CLET, list(bq_cons(already_loggingP, $list_alt63), directory, filename, use_new_setupP),
		    list(PUNLESS, already_loggingP, listS(CMULTIPLE_VALUE_SETQ, list(directory, filename), $list_alt65), list(CSETQ, use_new_setupP, list(CAND, list(DIRECTORY_P, directory), list(STRINGP, filename)))),
		    listS(PWHEN, use_new_setupP, list(FORMAT, $standard_output$, $str_alt69$__Logging_Fact_Sheet_generation_t, filename), $list_alt70),
		    listS(WITH_FACT_SHEET_LOG_FILE, list(listS(FIF, use_new_setupP, filename, $list_alt73)), append(body, list(listS(PWHEN, use_new_setupP, $list_alt74)))));
	}
    }

    public static final SubLObject with_fact_sheet_log_file(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt55);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject filename = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt55);
		    filename = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    return list(CLET, list(list($fact_sheet_log_file$, filename)), listS(WITH_PRIVATE_TEXT_FILE, $list_alt58, append(body, NIL)));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt55);
		    }
		}
	    }
	}
	return NIL;
    }

    public static final SubLObject update_current_datum_for_pph_stats(SubLObject current_datum, SubLObject line, SubLObject timestamp_length) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    thread.resetMultipleValues();
	    {
		SubLObject pph_paragraph_count = read_from_string(line, NIL, NIL, add(timestamp_length, length($str_alt162$NOTE__Generated_)), UNPROVIDED, UNPROVIDED);
		SubLObject i = thread.secondMultipleValue();
		thread.resetMultipleValues();
		if (pph_paragraph_count.isInteger()) {
		    current_datum = putf(current_datum, $PPH_PARAGRAPH_COUNT, pph_paragraph_count);
		    thread.resetMultipleValues();
		    {
			SubLObject pph_sentence_count = read_from_string(line, NIL, NIL, add(i, length($str_alt184$paragraphs_containing_)), UNPROVIDED, UNPROVIDED);
			SubLObject i_17 = thread.secondMultipleValue();
			thread.resetMultipleValues();
			if (pph_sentence_count.isInteger()) {
			    current_datum = putf(current_datum, $PPH_SENTENCE_COUNT, pph_sentence_count);
			    {
				SubLObject offset = add(i_17, length($str_alt185$sentences_for_));
				thread.resetMultipleValues();
				{
				    SubLObject v_term = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_string(line, offset, NIL, UNPROVIDED);
				    SubLObject term_end = thread.secondMultipleValue();
				    thread.resetMultipleValues();
				    if (NIL != cycl_grammar.cycl_denotational_term_p(v_term)) {
					if (!v_term.equal(list_utilities.plist_lookup(current_datum, $TERM, UNPROVIDED))) {
					    Errors.sublisp_break($str_alt186$Must_have_missed_the__Finished__l, new SubLObject[] { list_utilities.plist_lookup(current_datum, $TERM, UNPROVIDED) });
					}
					{
					    SubLObject time = read_from_string(line, NIL, NIL, add(term_end, length($str_alt187$_in_)), UNPROVIDED, UNPROVIDED);
					    if (time.isNumber()) {
						current_datum = putf(current_datum, $PPH_TIME, time);
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	    return current_datum;
	}
    }

    public static final SubLObject update_current_datum_for_pph_failure_stats(SubLObject current_datum, SubLObject line, SubLObject timestamp_length) {
	{
	    SubLObject start_char = add(timestamp_length, length($str_alt163$WARN__Failed_to_paraphrase_));
	    SubLObject sentence_count = read_from_string(line, NIL, NIL, start_char, UNPROVIDED, UNPROVIDED);
	    if (sentence_count.isInteger()) {
		current_datum = putf(current_datum, $PPH_FAILURE_COUNT, add(list_utilities.plist_lookup(current_datum, $PPH_FAILURE_COUNT, ZERO_INTEGER), sentence_count));
	    }
	}
	return current_datum;
    }

    public static final SubLObject update_current_datum_for_misc_sentence_stats(SubLObject current_datum, SubLObject line, SubLObject timestamp_length) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    thread.resetMultipleValues();
	    {
		SubLObject sentence_count = read_from_string(line, NIL, NIL, add(timestamp_length, length($str_alt158$NOTE__Added_)), UNPROVIDED, UNPROVIDED);
		SubLObject i = thread.secondMultipleValue();
		thread.resetMultipleValues();
		if (sentence_count.isInteger()) {
		    current_datum = putf(current_datum, $MISC_SENTENCE_COUNT, sentence_count);
		    {
			SubLObject time = read_from_string(line, NIL, NIL, add(i, length($$$THCL_sentences_in)), UNPROVIDED, UNPROVIDED);
			if (time.isNumber()) {
			    current_datum = putf(current_datum, $MISC_SENTENCE_TIME, time);
			}
		    }
		}
	    }
	    return current_datum;
	}
    }

    public static final SubLObject update_current_datum_for_info_gather_stats(SubLObject current_datum, SubLObject line, SubLObject timestamp_length) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    thread.resetMultipleValues();
	    {
		SubLObject category_count = read_from_string(line, NIL, NIL, add(timestamp_length, length($str_alt159$NOTE__Gathered_)), UNPROVIDED, UNPROVIDED);
		SubLObject i = thread.secondMultipleValue();
		thread.resetMultipleValues();
		if (category_count.isInteger()) {
		    current_datum = putf(current_datum, $CATEGORY_COUNT, category_count);
		    {
			SubLObject offset = add(i, length($str_alt190$groups_of_sentences_for_));
			thread.resetMultipleValues();
			{
			    SubLObject v_term = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_string(line, offset, NIL, UNPROVIDED);
			    SubLObject term_end = thread.secondMultipleValue();
			    thread.resetMultipleValues();
			    if (NIL != cycl_grammar.cycl_denotational_term_p(v_term)) {
				if (!v_term.equal(list_utilities.plist_lookup(current_datum, $TERM, UNPROVIDED))) {
				    Errors.sublisp_break($str_alt186$Must_have_missed_the__Finished__l, new SubLObject[] { list_utilities.plist_lookup(current_datum, $TERM, UNPROVIDED) });
				}
				{
				    SubLObject time = read_from_string(line, NIL, NIL, add(term_end, length($str_alt187$_in_)), UNPROVIDED, UNPROVIDED);
				    if (time.isNumber()) {
					current_datum = putf(current_datum, $INFO_GATHERING_TIME, time);
				    }
				}
			    }
			}
		    }
		}
	    }
	    return current_datum;
	}
    }

    public static final SubLObject uniquify_fact_sheet_log_filename(SubLObject parent_directory, SubLObject filename, SubLObject image_id_string) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject uniquifier = ZERO_INTEGER;
		SubLObject filename_base = NIL;
		while (NIL != file_utilities.file_existsP(filename)) {
		    uniquifier = add(uniquifier, ONE_INTEGER);
		    filename_base = cconcatenate(format_nil.format_nil_a_no_copy(image_id_string), new SubLObject[] { $str_alt197$_, format_nil.format_nil_d_no_copy(uniquifier) });
		    filename = cconcatenate(parent_directory, new SubLObject[] { filename_base, $str_alt129$_log });
		}
		{
		    SubLObject _prev_bind_0 = $fact_sheet_log_file$.currentBinding(thread);
		    try {
			$fact_sheet_log_file$.bind(filename, thread);
			{
			    SubLObject stream = NIL;
			    try {
				{
				    SubLObject _prev_bind_0_19 = stream_macros.$stream_requires_locking$.currentBinding(thread);
				    try {
					stream_macros.$stream_requires_locking$.bind(NIL, thread);
					stream = compatibility.open_text($fact_sheet_log_file$.getDynamicValue(thread), $APPEND, NIL);
				    } finally {
					stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_19, thread);
				    }
				}
				if (!stream.isStream()) {
				    Errors.error($str_alt137$Unable_to_open__S, $fact_sheet_log_file$.getDynamicValue(thread));
				}
				{
				    SubLObject _prev_bind_0_20 = $fact_sheet_log_stream$.currentBinding(thread);
				    try {
					$fact_sheet_log_stream$.bind(stream, thread);
					{
					    SubLObject stream_21 = $fact_sheet_log_stream$.getDynamicValue(thread);
					    if (((T == stream_21) && (current_process() == subl_promotions.initial_process())) || (stream_21.isStream() && (NIL != output_stream_p(stream_21)))) {
						com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_21);
						format(stream_21, $str_alt202$Opening_log_);
						force_output(stream_21);
					    }
					}
				    } finally {
					$fact_sheet_log_stream$.rebind(_prev_bind_0_20, thread);
				    }
				}
			    } finally {
				{
				    SubLObject _prev_bind_0_22 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					if (stream.isStream()) {
					    close(stream, UNPROVIDED);
					}
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0_22, thread);
				    }
				}
			    }
			}
		    } finally {
			$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
		    }
		}
		if (NIL != com.cyc.cycjava.cycl.fact_sheets.chmod_safe_to_useP()) {
		    file_utilities.chmod(filename, $$$755);
		}
		return filename;
	    }
	}
    }

    public static final SubLObject term_from_fact_sheet_log_finish_line(SubLObject line, SubLObject timestamp_length) {
	{
	    SubLObject offset = add(timestamp_length, length($str_alt166$NOTE__Finished_fact_sheet_for_));
	    return com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_string(line, offset, NIL, UNPROVIDED);
	}
    }

    public static final SubLObject subloop_reserved_initialize_fact_sheet_kitchen_sink_test_case_instance(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, ISOLATED_P, NIL);
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_NUMBER, NIL);
	classes.subloop_initialize_slot(new_instance, TEST_CASE, RESULT, NIL);
	classes.subloop_initialize_slot(new_instance, TEST_CASE, TEST_METHOD, NIL);
	return NIL;
    }

    public static final SubLObject subloop_reserved_initialize_fact_sheet_kitchen_sink_test_case_class(SubLObject new_instance) {
	classes.subloop_initialize_slot(new_instance, OBJECT, INSTANCE_COUNT, ZERO_INTEGER);
	classes.subloop_initialize_slot(new_instance, TEST_CASE, MODULE, NIL);
	classes.subloop_initialize_slot(new_instance, TEST_CASE, CATEGORIES, NIL);
	classes.subloop_initialize_slot(new_instance, TEST_CASE, SUITES, NIL);
	classes.subloop_initialize_slot(new_instance, TEST_CASE, TEST_METHODS, NIL);
	classes.subloop_initialize_slot(new_instance, TEST_CASE, ENABLED, NIL);
	classes.subloop_initialize_slot(new_instance, TEST_CASE, LOCK, NIL);
	return NIL;
    }

    public static final SubLObject reset_hourly_report_time(SubLObject time) {
	if (time == UNPROVIDED) {
	    time = numeric_date_utilities.universal_time_from_now(ZERO_INTEGER, ZERO_INTEGER, ONE_INTEGER);
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    $next_fact_sheet_hourly_report_time$.setDynamicValue(time, thread);
	    return $next_fact_sheet_hourly_report_time$.getDynamicValue(thread);
	}
    }

    public static final SubLObject remove_get_fact_sheet_log_directory_data_cached(SubLObject log_directory, SubLObject ensure_up_to_dateP) {
	return memoization_state.caching_state_remove_function_results_with_args($get_fact_sheet_log_directory_data_cached_caching_state$.getGlobalValue(), list(log_directory, ensure_up_to_dateP), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject remove_construct_fact_sheet_term_id(SubLObject v_term) {
	return memoization_state.caching_state_remove_function_results_with_args($construct_fact_sheet_term_id_caching_state$.getGlobalValue(), list(v_term), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject print_fact_sheet_log_header(SubLObject msg_type, SubLObject stream) {
	terpri(stream);
	princ(numeric_date_utilities.datestring(UNPROVIDED), stream);
	princ($str_alt50$_, stream);
	princ(numeric_date_utilities.secondstring(UNPROVIDED), stream);
	princ($str_alt50$_, stream);
	princ(msg_type, stream);
	princ($str_alt51$__, stream);
	return NIL;
    }

    public static final SubLObject plot_fact_sheet_log_directory_query_failure_rate_by_date(SubLObject log_directory, SubLObject top_n, SubLObject output_file, SubLObject ensure_up_to_dateP) {
	if (top_n == UNPROVIDED) {
	    top_n = FIVE_INTEGER;
	}
	if (output_file == UNPROVIDED) {
	    output_file = NIL;
	}
	if (ensure_up_to_dateP == UNPROVIDED) {
	    ensure_up_to_dateP = NIL;
	}
	{
	    SubLObject line_labels = NIL;
	    SubLObject all_data = NIL;
	    SubLObject line_data = NIL;
	    SubLObject top_n_queries = NIL;
	    {
		SubLObject cdolist_list_var = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_directory_query_failure_rate_by_date(log_directory, ensure_up_to_dateP);
		SubLObject cons = NIL;
		for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
		    {
			SubLObject datum = cons;
			SubLObject current = datum;
			SubLObject date_string = NIL;
			SubLObject failures = NIL;
			destructuring_bind_must_consp(current, datum, $list_alt107);
			date_string = current.first();
			current = current.rest();
			failures = current;
			all_data = cons(cons(date_string, failures), all_data);
		    }
		}
	    }
	    {
		SubLObject most_recent_failures = all_data.first().rest();
		SubLObject sorted = dictionary_utilities.sort_dictionary_by_values(most_recent_failures, symbol_function($sym108$_));
		top_n_queries = list_utilities.first_n(top_n, list_utilities.alist_keys(sorted));
	    }
	    {
		SubLObject cdolist_list_var = top_n_queries;
		SubLObject top_query = NIL;
		for (top_query = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), top_query = cdolist_list_var.first()) {
		    {
			SubLObject line_datum = NIL;
			SubLObject cdolist_list_var_8 = all_data;
			SubLObject datum = NIL;
			for (datum = cdolist_list_var_8.first(); NIL != cdolist_list_var_8; cdolist_list_var_8 = cdolist_list_var_8.rest(), datum = cdolist_list_var_8.first()) {
			    {
				SubLObject datum_9 = datum;
				SubLObject current = datum_9;
				SubLObject date_string = NIL;
				SubLObject failures = NIL;
				destructuring_bind_must_consp(current, datum_9, $list_alt109);
				date_string = current.first();
				current = current.rest();
				destructuring_bind_must_consp(current, datum_9, $list_alt109);
				failures = current.first();
				current = current.rest();
				if (NIL == current) {
				    {
					SubLObject failure_rate_for_query_on_date = dictionary.dictionary_lookup_without_values(failures, top_query, UNPROVIDED);
					line_datum = cons(list(date_string, failure_rate_for_query_on_date), line_datum);
				    }
				} else {
				    cdestructuring_bind_error(datum_9, $list_alt109);
				}
			    }
			}
			line_data = cons(line_datum, line_data);
			line_labels = cons(princ_to_string(top_query), line_labels);
		    }
		}
	    }
	    plot_generation.generate_lines_graph(line_data, list(new SubLObject[] { $XDATA, $$$time, $TIMEFMT, $str_alt88$__m__d__Y_, $XLABEL, $$$Date, $YLABEL, $$$Failure_Rate, $PLOT_TITLE,
		    cconcatenate($$$Query_Failure_Rates_by_Day, new SubLObject[] { format_nil.$format_nil_percent$.getGlobalValue(), format_nil.format_nil_s_no_copy(log_directory) }), $LINE_LABELS, line_labels, $OUTPUT_FILE, output_file }));
	}
	return output_file;
    }

    public static final SubLObject plot_fact_sheet_log_directory_generated_count_by_date(SubLObject log_directory, SubLObject output_file, SubLObject ensure_up_to_dateP) {
	if (output_file == UNPROVIDED) {
	    output_file = NIL;
	}
	if (ensure_up_to_dateP == UNPROVIDED) {
	    ensure_up_to_dateP = NIL;
	}
	{
	    SubLObject v_dictionary = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_directory_generated_count_by_date(log_directory, ensure_up_to_dateP);
	    SubLObject data = NIL;
	    SubLObject cdolist_list_var = dictionary_utilities.sort_dictionary_by_keys(v_dictionary, $sym84$DATESTRING_);
	    SubLObject cons = NIL;
	    for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
		{
		    SubLObject datum = cons;
		    SubLObject current = datum;
		    SubLObject date_string = NIL;
		    SubLObject count = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt83);
		    date_string = current.first();
		    current = current.rest();
		    count = current;
		    data = cons(list(date_string, count), data);
		}
	    }
	    plot_generation.generate_lines_graph(list(nreverse(data)), list(new SubLObject[] { $XDATA, $$$time, $TIMEFMT, $str_alt88$__m__d__Y_, $XLABEL, $$$Date, $YLABEL, $str_alt92$__of_Fact_Sheets, $PLOT_TITLE, log_directory, $LINE_LABELS, $list_alt95, $OUTPUT_FILE, output_file }));
	}
	return output_file;
    }

    public static final SubLObject physical_directory_from_path(SubLObject path) {
	SubLTrampolineFile.checkType(path, LIST_OF_STRING_P);
	return cconcatenate(string_utilities.bunge(path, CHAR_slash), $str_alt205$_);
    }

    public static final SubLObject parse_and_save_fact_sheet_log_file_data(SubLObject log_file, SubLObject cfasl_file, SubLObject directory_data) {
	if (cfasl_file == UNPROVIDED) {
	    cfasl_file = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_file_parsed_data_filename(log_file);
	}
	if (directory_data == UNPROVIDED) {
	    directory_data = (NIL != file_utilities.file_existsP(cfasl_file)) ? ((SubLObject) (cfasl_utilities.cfasl_load(cfasl_file))) : NIL;
	}
	SubLTrampolineFile.checkType(log_file, $sym132$FILE_EXISTS_);
	{
	    SubLObject local_filename = nth_value_step_2(nth_value_step_1(ONE_INTEGER), file_utilities.deconstruct_path(log_file));
	    SubLObject new_data = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_file_parse_data(log_file);
	    dictionary.dictionary_enter(directory_data, local_filename, new_data);
	    cfasl_utilities.cfasl_save_externalized(directory_data, cfasl_file);
	    return cfasl_file;
	}
    }

    public static final SubLObject parse_and_save_fact_sheet_log_directory_data(SubLObject log_directory) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
	    {
		SubLObject cfasl_file = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_directory_parsed_data_filename(log_directory);
		SubLObject directory_data = (NIL != file_utilities.file_existsP(cfasl_file)) ? ((SubLObject) (cfasl_utilities.cfasl_load(cfasl_file))) : NIL;
		SubLObject progress_message = cconcatenate($str_alt130$Parsing_data_from_, new SubLObject[] { format_nil.format_nil_a_no_copy(log_directory), $str_alt131$___ });
		if (NIL == dictionary.dictionary_p(directory_data)) {
		    directory_data = dictionary_utilities.new_dictionary_from_alist(directory_data, symbol_function(EQUAL));
		}
		SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
		{
		    SubLObject directory_contents_var = Filesys.directory(log_directory, T);
		    SubLObject progress_message_var = progress_message;
		    {
			SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
			try {
			    $silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
			    {
				SubLObject list_var = directory_contents_var;
				$progress_note$.setDynamicValue(progress_message_var, thread);
				$progress_start_time$.setDynamicValue(get_universal_time(), thread);
				$progress_total$.setDynamicValue(length(list_var), thread);
				$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
				{
				    SubLObject _prev_bind_0_16 = $last_percent_progress_index$.currentBinding(thread);
				    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
				    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
				    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
				    try {
					$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
					$last_percent_progress_prediction$.bind(NIL, thread);
					$within_noting_percent_progress$.bind(T, thread);
					$percent_progress_start_time$.bind(get_universal_time(), thread);
					noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
					{
					    SubLObject csome_list_var = list_var;
					    SubLObject log_file = NIL;
					    for (log_file = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), log_file = csome_list_var.first()) {
						note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
						$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
						if ((NIL != string_utilities.ends_with(log_file, $str_alt129$_log, UNPROVIDED)) && (NIL != file_utilities.file_existsP(log_file))) {
						    com.cyc.cycjava.cycl.fact_sheets.parse_and_save_fact_sheet_log_file_data(log_file, cfasl_file, directory_data);
						}
					    }
					}
					noting_percent_progress_postamble();
				    } finally {
					$percent_progress_start_time$.rebind(_prev_bind_3, thread);
					$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
					$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
					$last_percent_progress_index$.rebind(_prev_bind_0_16, thread);
				    }
				}
			    }
			} finally {
			    $silent_progressP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return cfasl_file;
	    }
	}
    }

    public static final SubLObject open_new_unique_fact_sheet_log_file() {
	{
	    SubLObject directory_list = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_directory_path_for_kb(kb_loaded());
	    SubLObject directory = com.cyc.cycjava.cycl.fact_sheets.physical_directory_from_path(directory_list);
	    SubLObject image_id_string = Strings.string_downcase(cyc_image_id(), UNPROVIDED, UNPROVIDED);
	    SubLObject uniquifier = ZERO_INTEGER;
	    SubLObject filename_base = cconcatenate(format_nil.format_nil_a_no_copy(image_id_string), new SubLObject[] { $str_alt197$_, format_nil.format_nil_d_no_copy(uniquifier) });
	    SubLObject filename = cconcatenate(directory, new SubLObject[] { filename_base, $str_alt129$_log });
	    if (NIL == Filesys.directory_p(directory)) {
		file_utilities.make_directory_recursive(directory, NIL, NIL != com.cyc.cycjava.cycl.fact_sheets.chmod_safe_to_useP() ? ((SubLObject) ($$$0775)) : NIL);
	    }
	    {
		SubLObject lock = $fact_sheet_log_file_uniquifier_lock$.getGlobalValue();
		SubLObject release = NIL;
		try {
		    release = seize_lock(lock);
		    filename = com.cyc.cycjava.cycl.fact_sheets.uniquify_fact_sheet_log_filename(directory, filename, image_id_string);
		} finally {
		    if (NIL != release) {
			release_lock(lock);
		    }
		}
	    }
	    return values(directory, filename);
	}
    }

    public static final SubLObject note_fact_sheet_query_timeout_in_hourly_stats() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_hourly_reporting_onP()) {
		set_aref($hourly_fact_sheet_stats$.getDynamicValue(thread), ONE_INTEGER, add(aref($hourly_fact_sheet_stats$.getDynamicValue(thread), ONE_INTEGER), ONE_INTEGER));
	    }
	    return NIL;
	}
    }

    public static final SubLObject note_fact_sheet_log_file_closed(SubLObject file) {
	if (file == UNPROVIDED) {
	    file = $fact_sheet_log_file$.getDynamicValue();
	}
	$closed_fact_sheet_log_files$.setGlobalValue(cons(file, $closed_fact_sheet_log_files$.getGlobalValue()));
	return $closed_fact_sheet_log_files$.getGlobalValue();
    }

    public static final SubLObject nart_end_from_string(SubLObject string, SubLObject term_start) {
	{
	    SubLObject term_end = NIL;
	    SubLObject bracket_count = ZERO_INTEGER;
	    SubLObject doneP = NIL;
	    SubLObject string_var = string;
	    SubLObject end_var = length(string_var);
	    if (NIL == doneP) {
		{
		    SubLObject end_var_18 = end_var;
		    SubLObject char_num = NIL;
		    for (char_num = term_start; !((NIL != doneP) || char_num.numGE(end_var_18)); char_num = number_utilities.f_1X(char_num)) {
			{
			    SubLObject v_char = Strings.sublisp_char(string_var, char_num);
			    SubLObject pcase_var = v_char;
			    if (pcase_var.eql(CHAR_less)) {
				bracket_count = add(bracket_count, ONE_INTEGER);
			    } else {
				if (pcase_var.eql(CHAR_greater)) {
				    bracket_count = subtract(bracket_count, ONE_INTEGER);
				    if (bracket_count.isZero()) {
					term_end = number_utilities.f_1X(char_num);
				    }
				}
			    }
			}
		    }
		}
	    }
	    return term_end;
	}
    }

    public static final SubLObject maybe_log_fact_sheet_hourly_report() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if ((NIL != numeric_date_utilities.universal_time_p($next_fact_sheet_hourly_report_time$.getDynamicValue(thread))) && get_universal_time().numG($next_fact_sheet_hourly_report_time$.getDynamicValue(thread))) {
		com.cyc.cycjava.cycl.fact_sheets.log_fact_sheet_hourly_report();
	    }
	    return NIL;
	}
    }

    /**
     * Log something bad.
     */
    @LispMethod(comment = "Log something bad.")
    public static final SubLObject log_fact_sheet_warning(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    SubLObject format_str = NIL;
	    destructuring_bind_must_consp(current, datum, $list_alt52);
	    format_str = current.first();
	    current = current.rest();
	    {
		SubLObject args = current;
		return listS(LOG_FACT_SHEET_MESSAGE, $$$WARN, format_str, append(args, NIL));
	    }
	}
    }

    /**
     * Log something not necessarily bad.
     */
    @LispMethod(comment = "Log something not necessarily bad.")
    public static final SubLObject log_fact_sheet_note(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    SubLObject format_str = NIL;
	    destructuring_bind_must_consp(current, datum, $list_alt52);
	    format_str = current.first();
	    current = current.rest();
	    {
		SubLObject args = current;
		return listS(LOG_FACT_SHEET_MESSAGE, $$$NOTE, format_str, append(args, NIL));
	    }
	}
    }

    public static final SubLObject log_fact_sheet_message(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    SubLObject msg_type = NIL;
	    SubLObject format_str = NIL;
	    destructuring_bind_must_consp(current, datum, $list_alt38);
	    msg_type = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt38);
	    format_str = current.first();
	    current = current.rest();
	    {
		SubLObject args = current;
		SubLObject stream = $sym39$STREAM;
		return list(CLET, list(bq_cons(stream, $list_alt40)),
			list(PWHEN, list(COR, listS(CAND, list(EQ, T, stream), $list_alt44), list(CAND, list(STREAMP, stream), list(OUTPUT_STREAM_P, stream))), list(PRINT_FACT_SHEET_LOG_HEADER, msg_type, stream), listS(FORMAT, stream, format_str, append(args, NIL)), list(FORCE_OUTPUT, stream)));
	    }
	}
    }

    public static final SubLObject log_fact_sheet_hourly_report() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject fact_sheet_count = com.cyc.cycjava.cycl.fact_sheets.get_hourly_fact_sheet_update_count();
		SubLObject timeout_count = com.cyc.cycjava.cycl.fact_sheets.get_hourly_fact_sheet_query_timeout_count();
		SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
		if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
		    format(stream, $str_alt79$Hourly_report__Generated__S_fact_, fact_sheet_count, timeout_count);
		    force_output(stream);
		}
	    }
	    com.cyc.cycjava.cycl.fact_sheets.clear_hourly_fact_sheet_stats();
	    com.cyc.cycjava.cycl.fact_sheets.reset_hourly_report_time(UNPROVIDED);
	    return NIL;
	}
    }

    public static final SubLObject index_fact_sheet_term_id(SubLObject v_term, SubLObject id) {
	file_backed_cache.file_backed_cache_enter(id, v_term, $fact_sheet_term_fbc$.getGlobalValue());
	return v_term;
    }

    public static final SubLObject get_hourly_fact_sheet_update_count() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    return aref($hourly_fact_sheet_stats$.getDynamicValue(thread), ZERO_INTEGER);
	}
    }

    public static final SubLObject get_hourly_fact_sheet_query_timeout_count() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    return aref($hourly_fact_sheet_stats$.getDynamicValue(thread), ONE_INTEGER);
	}
    }

    public static final SubLObject get_fact_sheet_term_fht_full_path() {
	if (!$fact_sheet_term_fht_full_path$.getGlobalValue().isString()) {
	    $fact_sheet_term_fht_full_path$.setGlobalValue(file_utilities.cyc_home_filename(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_path(), $fact_sheet_term_fht_filename$.getGlobalValue(), UNPROVIDED));
	}
	return $fact_sheet_term_fht_full_path$.getGlobalValue();
    }

    /**
     *
     *
     * @return listp of property lists describing each fact-sheet generation event logged in LOG-FILE,
    with keys in *FACT-SHEET-LOG-FILE-PROPERTIES*.
     */
    @LispMethod(comment = "@return listp of property lists describing each fact-sheet generation event logged in LOG-FILE,\r\nwith keys in *FACT-SHEET-LOG-FILE-PROPERTIES*.")
    public static final SubLObject get_fact_sheet_log_file_data(SubLObject log_file) {
	{
	    SubLObject cfasl_file = com.cyc.cycjava.cycl.fact_sheets.parse_and_save_fact_sheet_log_file_data(log_file, UNPROVIDED, UNPROVIDED);
	    SubLObject dictionary_or_alist = cfasl_utilities.cfasl_load(cfasl_file);
	    return NIL != dictionary.dictionary_p(dictionary_or_alist) ? ((SubLObject) (dictionary.dictionary_lookup(dictionary_or_alist, file_utilities.pathstring_filename(log_file), NIL)))
		    : list_utilities.alist_lookup(dictionary_or_alist, file_utilities.pathstring_filename(log_file), symbol_function(EQUAL), NIL);
	}
    }

    public static final SubLObject get_fact_sheet_log_directory_data_cached_internal(SubLObject log_directory, SubLObject ensure_up_to_dateP) {
	{
	    SubLObject cfasl_file = com.cyc.cycjava.cycl.fact_sheets.find_or_create_fact_sheet_log_directory_data_file(log_directory, ensure_up_to_dateP);
	    SubLObject data = cfasl_utilities.cfasl_load(cfasl_file);
	    SubLTrampolineFile.checkType(data, DICTIONARY_P);
	    return data;
	}
    }

    public static final SubLObject get_fact_sheet_log_directory_data_cached(SubLObject log_directory, SubLObject ensure_up_to_dateP) {
	{
	    SubLObject caching_state = $get_fact_sheet_log_directory_data_cached_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(GET_FACT_SHEET_LOG_DIRECTORY_DATA_CACHED, $get_fact_sheet_log_directory_data_cached_caching_state$, NIL, EQUALP, TWO_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject sxhash = memoization_state.sxhash_calc_2(log_directory, ensure_up_to_dateP);
		SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
		if (collisions != $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    {
			SubLObject cdolist_list_var = collisions;
			SubLObject collision = NIL;
			for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), collision = cdolist_list_var.first()) {
			    {
				SubLObject cached_args = collision.first();
				SubLObject results2 = second(collision);
				if (log_directory.equalp(cached_args.first())) {
				    cached_args = cached_args.rest();
				    if (((NIL != cached_args) && (NIL == cached_args.rest())) && ensure_up_to_dateP.equalp(cached_args.first())) {
					return memoization_state.caching_results(results2);
				    }
				}
			    }
			}
		    }
		}
		{
		    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_directory_data_cached_internal(log_directory, ensure_up_to_dateP)));
		    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(log_directory, ensure_up_to_dateP));
		    return memoization_state.caching_results(results);
		}
	    }
	}
    }

    /**
     *
     *
     * @return DICTIONARY-P mapping each fact-sheet log file in LOG-DIRECTORY
    to a list of property lists describing each fact-sheet generation event logged therein,
    with keys in *FACT-SHEET-LOG-FILE-PROPERTIES*.
     */
    @LispMethod(comment = "@return DICTIONARY-P mapping each fact-sheet log file in LOG-DIRECTORY\r\nto a list of property lists describing each fact-sheet generation event logged therein,\r\nwith keys in *FACT-SHEET-LOG-FILE-PROPERTIES*.")
    public static final SubLObject get_fact_sheet_log_directory_data(SubLObject log_directory, SubLObject ensure_up_to_dateP) {
	if (ensure_up_to_dateP == UNPROVIDED) {
	    ensure_up_to_dateP = NIL;
	}
	if (NIL != ensure_up_to_dateP) {
	    com.cyc.cycjava.cycl.fact_sheets.remove_get_fact_sheet_log_directory_data_cached(log_directory, T);
	}
	return com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_directory_data_cached(log_directory, ensure_up_to_dateP);
    }

    public static final SubLObject find_or_create_fact_sheet_log_directory_data_file(SubLObject log_directory, SubLObject ensure_up_to_dateP) {
	if (ensure_up_to_dateP == UNPROVIDED) {
	    ensure_up_to_dateP = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
	    {
		SubLObject cfasl_file = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_directory_parsed_data_filename(log_directory);
		if (NIL == file_utilities.file_existsP(cfasl_file)) {
		    return com.cyc.cycjava.cycl.fact_sheets.parse_and_save_fact_sheet_log_directory_data(log_directory);
		}
		{
		    SubLObject file_write_date = Filesys.file_write_date(cfasl_file);
		    SubLObject directory_data = (NIL != file_utilities.file_existsP(cfasl_file)) ? ((SubLObject) (cfasl_utilities.cfasl_load(cfasl_file))) : NIL;
		    SubLObject progress_message = $str_alt128$Ensuring_data_file_is_up_to_date_;
		    if (NIL == dictionary.dictionary_p(directory_data)) {
			directory_data = dictionary_utilities.new_dictionary_from_alist(directory_data, symbol_function(EQUAL));
			cfasl_utilities.cfasl_save_externalized(directory_data, cfasl_file);
		    }
		    if (NIL != ensure_up_to_dateP) {
			SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
			{
			    SubLObject directory_contents_var = Filesys.directory(log_directory, T);
			    SubLObject progress_message_var = progress_message;
			    {
				SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
				try {
				    $silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
				    {
					SubLObject list_var = directory_contents_var;
					$progress_note$.setDynamicValue(progress_message_var, thread);
					$progress_start_time$.setDynamicValue(get_universal_time(), thread);
					$progress_total$.setDynamicValue(length(list_var), thread);
					$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
					{
					    SubLObject _prev_bind_0_15 = $last_percent_progress_index$.currentBinding(thread);
					    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
					    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
					    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
					    try {
						$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
						$last_percent_progress_prediction$.bind(NIL, thread);
						$within_noting_percent_progress$.bind(T, thread);
						$percent_progress_start_time$.bind(get_universal_time(), thread);
						noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
						{
						    SubLObject csome_list_var = list_var;
						    SubLObject log_file = NIL;
						    for (log_file = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), log_file = csome_list_var.first()) {
							note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
							$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
							if ((NIL != string_utilities.ends_with(log_file, $str_alt129$_log, UNPROVIDED)) && file_write_date.numL(Filesys.file_write_date(log_file))) {
							    com.cyc.cycjava.cycl.fact_sheets.parse_and_save_fact_sheet_log_file_data(log_file, cfasl_file, directory_data);
							}
						    }
						}
						noting_percent_progress_postamble();
					    } finally {
						$percent_progress_start_time$.rebind(_prev_bind_3, thread);
						$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
						$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
						$last_percent_progress_index$.rebind(_prev_bind_0_15, thread);
					    }
					}
				    }
				} finally {
				    $silent_progressP$.rebind(_prev_bind_0, thread);
				}
			    }
			}
		    }
		}
		return cfasl_file;
	    }
	}
    }

    public static final SubLObject finalize_current_datum(SubLObject current_datum, SubLObject line, SubLObject timestamp_length) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    thread.resetMultipleValues();
	    {
		SubLObject v_term = com.cyc.cycjava.cycl.fact_sheets.term_from_fact_sheet_log_finish_line(line, timestamp_length);
		SubLObject term_end = thread.secondMultipleValue();
		thread.resetMultipleValues();
		com.cyc.cycjava.cycl.fact_sheets.add_end_date_and_time_to_datum(current_datum, line);
		if (NIL != cycl_grammar.cycl_denotational_term_p(v_term)) {
		    if (!v_term.equal(list_utilities.plist_lookup(current_datum, $TERM, UNPROVIDED))) {
			Errors.sublisp_break($str_alt186$Must_have_missed_the__Finished__l, new SubLObject[] { list_utilities.plist_lookup(current_datum, $TERM, UNPROVIDED) });
		    }
		}
		if (term_end.isInteger()) {
		    {
			SubLObject time = read_from_string(line, NIL, NIL, add(term_end, length($str_alt187$_in_)), UNPROVIDED, UNPROVIDED);
			com.cyc.cycjava.cycl.fact_sheets.add_total_time_to_datum(current_datum, time);
		    }
		}
	    }
	    return current_datum;
	}
    }

    public static final SubLObject fact_sheet_term_from_string(SubLObject string, SubLObject term_start, SubLObject term_end, SubLObject warn_on_failureP) {
	if (term_start == UNPROVIDED) {
	    term_start = ZERO_INTEGER;
	}
	if (term_end == UNPROVIDED) {
	    term_end = NIL;
	}
	if (warn_on_failureP == UNPROVIDED) {
	    warn_on_failureP = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject v_term = NIL;
		if (constant_reader.constant_reader_prefix().equal(string_utilities.substring(string, term_start, add(term_start, TWO_INTEGER)))) {
		    thread.resetMultipleValues();
		    {
			SubLObject value1 = read_from_string_ignoring_errors(string, NIL, NIL, term_start, term_end);
			SubLObject value2 = thread.secondMultipleValue();
			thread.resetMultipleValues();
			if (NIL != forts.fort_p(value1)) {
			    v_term = value1;
			    term_end = value2;
			}
		    }
		} else {
		    if ($str_alt193$___.equal(string_utilities.substring(string, term_start, add(term_start, THREE_INTEGER)))) {
			{
			    SubLObject unstripped = string_utilities.substring(string, term_start, term_end);
			    SubLObject stripped = string_utilities.remove_substring(remove(CHAR_greater, unstripped, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), $str_alt194$__);
			    SubLObject possibly_naut = read_from_string_ignoring_errors(stripped, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
			    v_term = (NIL != possibly_naut) ? ((SubLObject) (possibly_naut)) : NIL;
			    if (NIL != v_term) {
				term_end = com.cyc.cycjava.cycl.fact_sheets.nart_end_from_string(string, term_start);
			    }
			}
		    }
		}
		if ((NIL != warn_on_failureP) && (NIL == cycl_grammar.cycl_denotational_term_p(v_term))) {
		    Errors.warn($str_alt195$Couldn_t_determine_term_from__S, string_utilities.substring(string, term_start, term_end));
		}
		return values(v_term, term_end);
	    }
	}
    }

    public static final SubLObject fact_sheet_term_fbc_okP() {
	{
	    SubLObject error_message = NIL;
	    try {
		{
		    SubLObject _prev_bind_0 = currentBinding(Errors.$error_handler$);
		    try {
			bind(Errors.$error_handler$, CATCH_ERROR_MESSAGE_HANDLER);
			try {
			    com.cyc.cycjava.cycl.fact_sheets.ensure_fact_sheet_term_fbc_created(NIL);
			} catch (Throwable catch_var) {
			    Errors.handleThrowable(catch_var, NIL);
			}
		    } finally {
			rebind(Errors.$error_handler$, _prev_bind_0);
		    }
		}
	    } catch (Throwable ccatch_env_var) {
		error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
	    }
	    if (error_message.isString()) {
		Errors.warn(error_message);
	    }
	    return makeBoolean(NIL.eql(error_message) && (NIL != file_backed_cache.file_backed_cache_p($fact_sheet_term_fbc$.getGlobalValue())));
	}
    }

    public static final SubLObject fact_sheet_log_line_starts_withP(SubLObject line, SubLObject string, SubLObject timestamp_length) {
	{
	    SubLObject end_pos = add(timestamp_length, length(string));
	    return makeBoolean((NIL != list_utilities.lengthG(line, end_pos, UNPROVIDED)) && string_utilities.substring(line, timestamp_length, end_pos).equal(string));
	}
    }

    /**
     *
     *
     * @return DICTIONARY, which maps DATESTRING -> (TOTAL-COUNT . (QUERY -> FAILED-COUNT)).
     */
    @LispMethod(comment = "@return DICTIONARY, which maps DATESTRING -> (TOTAL-COUNT . (QUERY -> FAILED-COUNT)).")
    public static final SubLObject fact_sheet_log_file_query_failure_rate_by_date(SubLObject log_file, SubLObject v_dictionary, SubLObject data) {
	if (v_dictionary == UNPROVIDED) {
	    v_dictionary = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
	}
	if (data == UNPROVIDED) {
	    data = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_file_data(log_file);
	}
	{
	    SubLObject cdolist_list_var = data;
	    SubLObject datum = NIL;
	    for (datum = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), datum = cdolist_list_var.first()) {
		{
		    SubLObject date_string = list_utilities.plist_lookup(datum, $END_DATE, UNPROVIDED);
		    SubLObject date_string_entry = dictionary.dictionary_lookup_without_values(v_dictionary, date_string, $NOT_FOUND);
		    if ($NOT_FOUND == date_string_entry) {
			date_string_entry = cons(ZERO_INTEGER, dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED));
			dictionary.dictionary_enter(v_dictionary, date_string, date_string_entry);
		    }
		    if ($NORMAL == list_utilities.plist_lookup(datum, $VERBOSITY, UNPROVIDED)) {
			rplaca(date_string_entry, add(date_string_entry.first(), ONE_INTEGER));
			{
			    SubLObject cdolist_list_var_13 = list_utilities.plist_lookup(datum, $QUERY_TIMEOUT_INFO, NIL);
			    SubLObject query_info = NIL;
			    for (query_info = cdolist_list_var_13.first(); NIL != cdolist_list_var_13; cdolist_list_var_13 = cdolist_list_var_13.rest(), query_info = cdolist_list_var_13.first()) {
				{
				    SubLObject query = list_utilities.plist_lookup(query_info, $QUERY, UNPROVIDED);
				    dictionary_utilities.dictionary_increment(date_string_entry.rest(), query, UNPROVIDED);
				}
			    }
			}
		    }
		}
	    }
	}
	return v_dictionary;
    }

    public static final SubLObject fact_sheet_log_file_parsed_data_filename(SubLObject log_file) {
	{
	    SubLObject directory = file_utilities.reconstruct_path(file_utilities.deconstruct_path(log_file), $str_alt133$, UNPROVIDED);
	    return com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_directory_parsed_data_filename(directory);
	}
    }

    public static final SubLObject fact_sheet_log_file_parse_start_line_data(SubLObject line) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject current_datum = NIL;
		thread.resetMultipleValues();
		{
		    SubLObject verbosity = read_from_string(line, NIL, NIL, $int$35, UNPROVIDED, UNPROVIDED);
		    SubLObject i = thread.secondMultipleValue();
		    thread.resetMultipleValues();
		    {
			SubLObject term_start = add(i, length($str_alt170$update_on_));
			SubLObject term_end = search($str_alt171$__Status, line, symbol_function(EQUAL), symbol_function(IDENTITY), ZERO_INTEGER, NIL, term_start, UNPROVIDED);
			SubLObject v_term = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_string(line, term_start, term_end, UNPROVIDED);
			SubLObject status = read_from_string(line, NIL, NIL, add(term_end, length($str_alt172$__Status__)), UNPROVIDED, UNPROVIDED);
			current_datum = list(new SubLObject[] { $VERBOSITY, verbosity, $TERM, v_term, $STATUS, status, $START_DATE, string_utilities.substring(line, ZERO_INTEGER, TEN_INTEGER), $START_TIME, string_utilities.substring(line, ELEVEN_INTEGER, NINETEEN_INTEGER) });
		    }
		}
		return current_datum;
	    }
	}
    }

    public static final SubLObject fact_sheet_log_file_parse_stale_start_line_data(SubLObject line, SubLObject timestamp_length) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject current_datum = NIL;
		thread.resetMultipleValues();
		{
		    SubLObject v_term = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_string(line, add(timestamp_length, length($str_alt146$NOTE__Updating_stale_fact_sheet_f)), UNPROVIDED, UNPROVIDED);
		    SubLObject term_end = thread.secondMultipleValue();
		    thread.resetMultipleValues();
		    if (NIL != cycl_grammar.cycl_denotational_term_p(v_term)) {
			{
			    SubLObject verbosity = read_from_string(line, NIL, NIL, term_end, UNPROVIDED, UNPROVIDED);
			    SubLObject status = $STALE;
			    current_datum = list(new SubLObject[] { $VERBOSITY, verbosity, $TERM, v_term, $STATUS, status, $START_DATE, string_utilities.substring(line, ZERO_INTEGER, TEN_INTEGER), $START_TIME, string_utilities.substring(line, ELEVEN_INTEGER, NINETEEN_INTEGER) });
			}
		    }
		}
		return current_datum;
	    }
	}
    }

    public static final SubLObject fact_sheet_log_file_parse_new_query_timeout_line_data(SubLObject line) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject query_timeout_info = NIL;
		thread.resetMultipleValues();
		{
		    SubLObject timeout_time = read_from_string(line, NIL, NIL, $int$46, UNPROVIDED, UNPROVIDED);
		    SubLObject i = thread.secondMultipleValue();
		    thread.resetMultipleValues();
		    if (timeout_time.isInteger()) {
			query_timeout_info = putf(query_timeout_info, $TIMEOUT_TIME, timeout_time);
			{
			    SubLObject query_result_count = read_from_string(line, NIL, NIL, add(i, length($$$seconds_after_getting)), UNPROVIDED, UNPROVIDED);
			    query_timeout_info = putf(query_timeout_info, $RESULT_COUNT, query_result_count);
			}
		    }
		}
		return query_timeout_info;
	    }
	}
    }

    public static final SubLObject fact_sheet_log_file_parse_dequeue_line_data(SubLObject line, SubLObject timestamp_length) {
	{
	    SubLObject current_datum = NIL;
	    SubLObject term_start = add(timestamp_length, length($str_alt141$NOTE__Dequeuing_));
	    SubLObject term_end = (constant_reader.constant_reader_prefix().equal(string_utilities.substring(line, term_start, add(term_start, TWO_INTEGER)))) ? ((SubLObject) (position(CHAR_period, line, symbol_function(EQL), symbol_function(IDENTITY), term_start, UNPROVIDED)))
		    : com.cyc.cycjava.cycl.fact_sheets.nart_end_from_string(line, term_start);
	    SubLObject v_term = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_string(line, term_start, term_end, UNPROVIDED);
	    SubLObject status_start = add(term_end, length($str_alt172$__Status__));
	    SubLObject status_end = position(CHAR_period, line, symbol_function(EQL), symbol_function(IDENTITY), status_start, UNPROVIDED);
	    SubLObject status = make_keyword(Strings.string_upcase(string_utilities.substring(line, status_start, status_end), UNPROVIDED, UNPROVIDED));
	    current_datum = list($TERM, v_term, $STATUS, status, $START_DATE, string_utilities.substring(line, ZERO_INTEGER, TEN_INTEGER), $START_TIME, string_utilities.substring(line, ELEVEN_INTEGER, NINETEEN_INTEGER));
	    return current_datum;
	}
    }

    /**
     *
     *
     * @return PROPERTY-LIST-P of info for each fact sheet generated.
     */
    @LispMethod(comment = "@return PROPERTY-LIST-P of info for each fact sheet generated.")
    public static final SubLObject fact_sheet_log_file_parse_data(SubLObject log_file) {
	{
	    SubLObject data = NIL;
	    SubLObject current_datum = NIL;
	    SubLObject query_timeout_info = NIL;
	    SubLObject state = NIL;
	    SubLObject stale_fact_sheet_updater_logP = NIL;
	    SubLObject file_level_verbosity = NIL;
	    SubLObject timestamp_length = length($str_alt135$MM_DD_YYYY_HH_MM_SS_);
	    SubLObject stream = NIL;
	    try {
		stream = compatibility.open_text(log_file, $INPUT, NIL);
		if (!stream.isStream()) {
		    Errors.error($str_alt137$Unable_to_open__S, log_file);
		}
		{
		    SubLObject infile = stream;
		    if (infile.isStream()) {
			{
			    SubLObject line = NIL;
			    for (line = read_line(infile, NIL, NIL, UNPROVIDED); NIL != line; line = read_line(infile, NIL, NIL, UNPROVIDED)) {
				if ((NIL == state) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_line_starts_withP(line, $str_alt138$NOTE__Starting__, timestamp_length))) {
				    current_datum = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_file_parse_start_line_data(line);
				    if (!((NIL == file_level_verbosity) || (NIL != list_utilities.plist_lookup(current_datum, $VERBOSITY, NIL)))) {
					current_datum = putf(current_datum, $VERBOSITY, file_level_verbosity);
				    }
				    state = $PARSING_DATUM;
				} else {
				    if ((NIL == state) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_line_starts_withP(line, $str_alt140$_Verbosity__, ZERO_INTEGER))) {
					file_level_verbosity = read_from_string(line, NIL, NIL, length($str_alt140$_Verbosity__), UNPROVIDED, UNPROVIDED);
				    } else {
					if ((NIL == state) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_line_starts_withP(line, $str_alt141$NOTE__Dequeuing_, timestamp_length))) {
					    current_datum = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_file_parse_dequeue_line_data(line, timestamp_length);
					    state = $DEQUEUED_TERM;
					} else {
					    if ((state == $DEQUEUED_TERM) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_line_starts_withP(line, $str_alt143$NOTE__Skipping_, timestamp_length))) {
						state = NIL;
					    } else {
						if ((state == $DEQUEUED_TERM) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_line_starts_withP(line, $str_alt144$NOTE__Updating_, timestamp_length))) {
						    if (!((NIL == file_level_verbosity) || (NIL != list_utilities.plist_lookup(current_datum, $VERBOSITY, NIL)))) {
							current_datum = putf(current_datum, $VERBOSITY, file_level_verbosity);
						    }
						    state = $PARSING_DATUM;
						} else {
						    if ((NIL == state) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_line_starts_withP(line, $str_alt145$NOTE__Updating_all_stale_fact_she, timestamp_length))) {
							stale_fact_sheet_updater_logP = T;
						    } else {
							if ((NIL == state) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_line_starts_withP(line, $str_alt146$NOTE__Updating_stale_fact_sheet_f, timestamp_length))) {
							    current_datum = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_file_parse_stale_start_line_data(line, timestamp_length);
							    state = $PARSING_DATUM;
							} else {
							    if ((state == $PARSING_DATUM) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_line_starts_withP(line, $str_alt147$WARN__Hit_soft_timeout_of_, timestamp_length))) {
								current_datum = putf(current_datum, $QUERY_TIMEOUTS, add(list_utilities.plist_lookup(current_datum, $QUERY_TIMEOUTS, ZERO_INTEGER), ONE_INTEGER));
								query_timeout_info = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_file_parse_new_query_timeout_line_data(line);
								if (!$MINI.eql(list_utilities.plist_lookup(current_datum, $VERBOSITY, UNPROVIDED))) {
								    state = $HIT_QUERY_TIMEOUT;
								}
							    } else {
								if (state == $HIT_QUERY_TIMEOUT) {
								    {
									SubLObject offset = add(timestamp_length, length($str_alt151$NOTE__));
									SubLObject term_end = position(CHAR_colon, line, symbol_function(EQ), symbol_function(IDENTITY), offset, UNPROVIDED);
									SubLObject timed_out_query = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_string(line, offset, term_end, NIL);
									if (NIL != cycl_grammar.cycl_denotational_term_p(timed_out_query)) {
									    query_timeout_info = putf(query_timeout_info, $QUERY, timed_out_query);
									}
								    }
								    state = $LOOKING_FOR_TIMED_OUT_QUERY_YIELD;
								} else {
								    if (state == $LOOKING_FOR_TIMED_OUT_QUERY_YIELD) {
									{
									    SubLObject paragraph_count = read_from_string_ignoring_errors(line, NIL, NIL, length($str_alt153$_yielded_), UNPROVIDED);
									    if (paragraph_count.isInteger()) {
										query_timeout_info = putf(query_timeout_info, $PARAGRAPH_COUNT, paragraph_count);
									    }
									    current_datum = putf(current_datum, $QUERY_TIMEOUT_INFO, cons(query_timeout_info, list_utilities.plist_lookup(current_datum, $QUERY_TIMEOUT_INFO, NIL)));
									}
									state = $PARSING_DATUM;
								    } else {
									if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_line_starts_withP(line, $str_alt155$WARN__Launching_make_up_updater, timestamp_length)) {
									    Errors.warn($str_alt156$We_appear_to_have_aborted_the_fac, list_utilities.plist_lookup(current_datum, $TERM, UNPROVIDED), log_file);
									    state = NIL;
									} else {
									    if ((state == $PARSING_DATUM) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_line_starts_withP(line, $str_alt158$NOTE__Added_, timestamp_length))) {
										current_datum = com.cyc.cycjava.cycl.fact_sheets.update_current_datum_for_misc_sentence_stats(current_datum, line, timestamp_length);
									    } else {
										if ((state == $PARSING_DATUM) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_line_starts_withP(line, $str_alt159$NOTE__Gathered_, timestamp_length))) {
										    current_datum = com.cyc.cycjava.cycl.fact_sheets.update_current_datum_for_info_gather_stats(current_datum, line, timestamp_length);
										} else {
										    if ((state == $PARSING_DATUM) && (NIL != string_utilities.starts_with(line, $str_alt160$_implies_))) {
											current_datum = putf(current_datum, $FILTERED_REDUNDANT_FACT_COUNT, add(list_utilities.plist_lookup(current_datum, $FILTERED_REDUNDANT_FACT_COUNT, ZERO_INTEGER), ONE_INTEGER));
										    } else {
											if ((state == $PARSING_DATUM) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_line_starts_withP(line, $str_alt162$NOTE__Generated_, timestamp_length))) {
											    current_datum = com.cyc.cycjava.cycl.fact_sheets.update_current_datum_for_pph_stats(current_datum, line, timestamp_length);
											    if (NIL != stale_fact_sheet_updater_logP) {
												com.cyc.cycjava.cycl.fact_sheets.add_end_date_and_time_to_datum(current_datum, line);
												com.cyc.cycjava.cycl.fact_sheets.add_total_time_to_datum(current_datum, UNPROVIDED);
												data = cons(current_datum, data);
												state = NIL;
											    }
											} else {
											    if ((state == $PARSING_DATUM) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_line_starts_withP(line, $str_alt163$WARN__Failed_to_paraphrase_, timestamp_length))) {
												current_datum = com.cyc.cycjava.cycl.fact_sheets.update_current_datum_for_pph_failure_stats(current_datum, line, timestamp_length);
											    } else {
												if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_line_starts_withP(line, $str_alt164$WARN__Query_failed_to_get_mini_fa, timestamp_length)) {
												    state = NIL;
												} else {
												    if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_line_starts_withP(line, $str_alt165$NOTE__Query_got_mini_fact_sheet_o, timestamp_length)) {
													com.cyc.cycjava.cycl.fact_sheets.add_end_date_and_time_to_datum(current_datum, line);
													com.cyc.cycjava.cycl.fact_sheets.add_total_time_to_datum(current_datum, UNPROVIDED);
													data = cons(current_datum, data);
													state = NIL;
												    } else {
													if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_line_starts_withP(line, $str_alt166$NOTE__Finished_fact_sheet_for_, timestamp_length)) {
													    if (state == $PARSING_DATUM) {
														current_datum = com.cyc.cycjava.cycl.fact_sheets.finalize_current_datum(current_datum, line, timestamp_length);
														data = cons(current_datum, data);
													    } else {
														{
														    SubLObject finished_term = com.cyc.cycjava.cycl.fact_sheets.term_from_fact_sheet_log_finish_line(line, timestamp_length);
														    SubLObject current_term = getf(current_datum, $TERM, UNPROVIDED);
														    if (!finished_term.equal(current_term)) {
															Errors.sublisp_break($str_alt167$Found_finish_line__but_state_is__, new SubLObject[] { state, current_datum, line, log_file });
														    }
														}
														current_datum = NIL;
													    }
													    state = NIL;
													}
												    }
												}
											    }
											}
										    }
										}
									    }
									}
								    }
								}
							    }
							}
						    }
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    } finally {
		{
		    SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
		    try {
			bind($is_thread_performing_cleanupP$, T);
			if (stream.isStream()) {
			    close(stream, UNPROVIDED);
			}
		    } finally {
			rebind($is_thread_performing_cleanupP$, _prev_bind_0);
		    }
		}
	    }
	    if (NIL != state) {
		Errors.warn($str_alt168$We_appear_to_have_aborted_the_fac, list_utilities.plist_lookup(current_datum, $TERM, UNPROVIDED), log_file);
	    }
	    return nreverse(data);
	}
    }

    public static final SubLObject fact_sheet_log_file_generated_count_old(SubLObject log_file) {
	return length(regular_expression_utilities.file_grep($$$Finished_fact_sheet, log_file, UNPROVIDED, UNPROVIDED));
    }

    public static final SubLObject fact_sheet_log_file_generated_count_for_date_old(SubLObject log_file, SubLObject universal_date) {
	if (universal_date == UNPROVIDED) {
	    universal_date = numeric_date_utilities.get_universal_date(UNPROVIDED, UNPROVIDED);
	}
	return length(regular_expression_utilities.file_grep(cconcatenate(format_nil.format_nil_a_no_copy(numeric_date_utilities.datestring(universal_date)), $str_alt122$____Finished_fact_sheet), log_file, UNPROVIDED, UNPROVIDED));
    }

    public static final SubLObject fact_sheet_log_file_generated_count_for_date(SubLObject log_file, SubLObject universal_date, SubLObject data) {
	if (universal_date == UNPROVIDED) {
	    universal_date = numeric_date_utilities.get_universal_date(UNPROVIDED, UNPROVIDED);
	}
	if (data == UNPROVIDED) {
	    data = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_file_data(log_file);
	}
	{
	    SubLObject count = ZERO_INTEGER;
	    SubLObject datestring = numeric_date_utilities.datestring(universal_date);
	    SubLObject doneP = NIL;
	    if (NIL == doneP) {
		{
		    SubLObject csome_list_var = data;
		    SubLObject datum = NIL;
		    for (datum = csome_list_var.first(); !((NIL != doneP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), datum = csome_list_var.first()) {
			if (NIL != numeric_date_utilities.datestringL(list_utilities.plist_lookup(datum, $END_DATE, UNPROVIDED), datestring)) {
			} else {
			    if (list_utilities.plist_lookup(datum, $END_DATE, UNPROVIDED).equal(datestring)) {
				count = add(count, ONE_INTEGER);
			    } else {
				doneP = T;
			    }
			}
		    }
		}
	    }
	    return count;
	}
    }

    public static final SubLObject fact_sheet_log_file_generated_count_by_date(SubLObject log_file, SubLObject v_dictionary, SubLObject data) {
	if (v_dictionary == UNPROVIDED) {
	    v_dictionary = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
	}
	if (data == UNPROVIDED) {
	    data = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_file_data(log_file);
	}
	{
	    SubLObject cdolist_list_var = data;
	    SubLObject datum = NIL;
	    for (datum = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), datum = cdolist_list_var.first()) {
		{
		    SubLObject date_string = list_utilities.plist_lookup(datum, $END_DATE, UNPROVIDED);
		    dictionary_utilities.dictionary_increment(v_dictionary, date_string, UNPROVIDED);
		}
	    }
	}
	return v_dictionary;
    }

    public static final SubLObject fact_sheet_log_file_generated_count(SubLObject log_file, SubLObject data) {
	if (data == UNPROVIDED) {
	    data = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_file_data(log_file);
	}
	return length(data);
    }

    /**
     *
     *
     * @param DATA
     * 		listp of property lists describing each fact-sheet generation event logged in LOG-FILE
     */
    @LispMethod(comment = "@param DATA\r\n\t\tlistp of property lists describing each fact-sheet generation event logged in LOG-FILE")
    public static final SubLObject fact_sheet_log_file_count_and_total_time(SubLObject log_file, SubLObject data) {
	if (data == UNPROVIDED) {
	    data = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_file_data(log_file);
	}
	{
	    SubLObject count = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_file_generated_count(log_file, data);
	    SubLObject total_time = ZERO_INTEGER;
	    SubLObject cdolist_list_var = data;
	    SubLObject plist = NIL;
	    for (plist = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), plist = cdolist_list_var.first()) {
		{
		    SubLObject this_time = getf(plist, $TOTAL_TIME, NIL);
		    if (NIL != this_time) {
			total_time = add(total_time, this_time);
		    } else {
			count = subtract(count, ONE_INTEGER);
		    }
		}
	    }
	    return values(count, total_time);
	}
    }

    public static final SubLObject fact_sheet_log_file_closed_p(SubLObject file) {
	return subl_promotions.memberP(file, $closed_fact_sheet_log_files$.getGlobalValue(), symbol_function(EQUAL), UNPROVIDED);
    }

    /**
     *
     *
     * @param DICTIONARY
     * 		maps date-string -> (fact-sheet-count . uncategorized-sentence-count).
     */
    @LispMethod(comment = "@param DICTIONARY\r\n\t\tmaps date-string -> (fact-sheet-count . uncategorized-sentence-count).")
    public static final SubLObject fact_sheet_log_file_average_uncategorized_sentence_count_by_date(SubLObject log_file, SubLObject v_dictionary, SubLObject data) {
	if (v_dictionary == UNPROVIDED) {
	    v_dictionary = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
	}
	if (data == UNPROVIDED) {
	    data = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_file_data(log_file);
	}
	{
	    SubLObject cdolist_list_var = data;
	    SubLObject datum = NIL;
	    for (datum = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), datum = cdolist_list_var.first()) {
		{
		    SubLObject date_string = list_utilities.plist_lookup(datum, $END_DATE, UNPROVIDED);
		    SubLObject count = list_utilities.plist_lookup(datum, $MISC_SENTENCE_COUNT, ZERO_INTEGER);
		    SubLObject date_string_data = dictionary.dictionary_lookup_without_values(v_dictionary, date_string, NIL);
		    if (NIL == date_string_data) {
			date_string_data = cons(ZERO_INTEGER, ZERO_INTEGER);
			dictionary.dictionary_enter(v_dictionary, date_string, date_string_data);
		    }
		    {
			SubLObject new_data = cons(number_utilities.f_1X(date_string_data.first()), add(count, date_string_data.rest()));
			dictionary.dictionary_enter(v_dictionary, date_string, new_data);
		    }
		}
	    }
	}
	return v_dictionary;
    }

    /**
     *
     *
     * @param DICTIONARY
     * 		maps date-string -> (fact-sheet-count . total-time).
     */
    @LispMethod(comment = "@param DICTIONARY\r\n\t\tmaps date-string -> (fact-sheet-count . total-time).")
    public static final SubLObject fact_sheet_log_file_average_total_time_by_date(SubLObject log_file, SubLObject v_dictionary, SubLObject data) {
	if (v_dictionary == UNPROVIDED) {
	    v_dictionary = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
	}
	if (data == UNPROVIDED) {
	    data = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_file_data(log_file);
	}
	{
	    SubLObject cdolist_list_var = data;
	    SubLObject datum = NIL;
	    for (datum = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), datum = cdolist_list_var.first()) {
		{
		    SubLObject date_string = list_utilities.plist_lookup(datum, $END_DATE, UNPROVIDED);
		    SubLObject seconds = list_utilities.plist_lookup(datum, $TOTAL_TIME, ZERO_INTEGER);
		    SubLObject date_string_data = dictionary.dictionary_lookup_without_values(v_dictionary, date_string, NIL);
		    if (NIL == date_string_data) {
			date_string_data = cons(ZERO_INTEGER, ZERO_INTEGER);
			dictionary.dictionary_enter(v_dictionary, date_string, date_string_data);
		    }
		    {
			SubLObject new_data = cons(number_utilities.f_1X(date_string_data.first()), add(seconds, date_string_data.rest()));
			dictionary.dictionary_enter(v_dictionary, date_string, new_data);
		    }
		}
	    }
	}
	return v_dictionary;
    }

    /**
     *
     *
     * @param DICTIONARY
     * 		maps date-string -> (fact-sheet-count . sentence-count).
     */
    @LispMethod(comment = "@param DICTIONARY\r\n\t\tmaps date-string -> (fact-sheet-count . sentence-count).")
    public static final SubLObject fact_sheet_log_file_average_sentence_count_by_date(SubLObject log_file, SubLObject v_dictionary, SubLObject data) {
	if (v_dictionary == UNPROVIDED) {
	    v_dictionary = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
	}
	if (data == UNPROVIDED) {
	    data = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_file_data(log_file);
	}
	{
	    SubLObject cdolist_list_var = data;
	    SubLObject datum = NIL;
	    for (datum = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), datum = cdolist_list_var.first()) {
		{
		    SubLObject date_string = list_utilities.plist_lookup(datum, $END_DATE, UNPROVIDED);
		    SubLObject count = list_utilities.plist_lookup(datum, $PPH_SENTENCE_COUNT, ZERO_INTEGER);
		    SubLObject date_string_data = dictionary.dictionary_lookup_without_values(v_dictionary, date_string, NIL);
		    if (NIL == date_string_data) {
			date_string_data = cons(ZERO_INTEGER, ZERO_INTEGER);
			dictionary.dictionary_enter(v_dictionary, date_string, date_string_data);
		    }
		    {
			SubLObject new_data = cons(number_utilities.f_1X(date_string_data.first()), add(count, date_string_data.rest()));
			dictionary.dictionary_enter(v_dictionary, date_string, new_data);
		    }
		}
	    }
	}
	return v_dictionary;
    }

    /**
     *
     *
     * @param DICTIONARY
     * 		maps date-string -> (fact-sheet-count . category-count).
     */
    @LispMethod(comment = "@param DICTIONARY\r\n\t\tmaps date-string -> (fact-sheet-count . category-count).")
    public static final SubLObject fact_sheet_log_file_average_category_count_by_date(SubLObject log_file, SubLObject v_dictionary, SubLObject data) {
	if (v_dictionary == UNPROVIDED) {
	    v_dictionary = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
	}
	if (data == UNPROVIDED) {
	    data = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_file_data(log_file);
	}
	{
	    SubLObject cdolist_list_var = data;
	    SubLObject datum = NIL;
	    for (datum = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), datum = cdolist_list_var.first()) {
		{
		    SubLObject date_string = list_utilities.plist_lookup(datum, $END_DATE, UNPROVIDED);
		    SubLObject count = list_utilities.plist_lookup(datum, $CATEGORY_COUNT, ZERO_INTEGER);
		    SubLObject date_string_data = dictionary.dictionary_lookup_without_values(v_dictionary, date_string, NIL);
		    if (NIL == date_string_data) {
			date_string_data = cons(ZERO_INTEGER, ZERO_INTEGER);
			dictionary.dictionary_enter(v_dictionary, date_string, date_string_data);
		    }
		    {
			SubLObject new_data = cons(number_utilities.f_1X(date_string_data.first()), add(count, date_string_data.rest()));
			dictionary.dictionary_enter(v_dictionary, date_string, new_data);
		    }
		}
	    }
	}
	return v_dictionary;
    }

    /**
     *
     *
     * @return LISTP, of (DATESTRING . (QUERY -> FAILURE-RATE)) pairs, in chronological
    order by DATESTRING.
     */
    @LispMethod(comment = "@return LISTP, of (DATESTRING . (QUERY -> FAILURE-RATE)) pairs, in chronological\r\norder by DATESTRING.")
    public static final SubLObject fact_sheet_log_directory_query_failure_rate_by_date(SubLObject log_directory, SubLObject ensure_up_to_dateP) {
	if (ensure_up_to_dateP == UNPROVIDED) {
	    ensure_up_to_dateP = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
	    {
		SubLObject directory_data = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_directory_data(log_directory, ensure_up_to_dateP);
		SubLObject v_dictionary = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
		SubLObject progress_message = cconcatenate($str_alt112$Analyzing_query_failure_rates_in_, new SubLObject[] { format_nil.format_nil_s_no_copy(log_directory), $str_alt98$_by_date });
		SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
		{
		    SubLObject directory_contents_var = Filesys.directory(log_directory, T);
		    SubLObject progress_message_var = progress_message;
		    {
			SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
			try {
			    $silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
			    {
				SubLObject list_var = directory_contents_var;
				$progress_note$.setDynamicValue(progress_message_var, thread);
				$progress_start_time$.setDynamicValue(get_universal_time(), thread);
				$progress_total$.setDynamicValue(length(list_var), thread);
				$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
				{
				    SubLObject _prev_bind_0_10 = $last_percent_progress_index$.currentBinding(thread);
				    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
				    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
				    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
				    try {
					$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
					$last_percent_progress_prediction$.bind(NIL, thread);
					$within_noting_percent_progress$.bind(T, thread);
					$percent_progress_start_time$.bind(get_universal_time(), thread);
					noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
					{
					    SubLObject csome_list_var = list_var;
					    SubLObject file = NIL;
					    for (file = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), file = csome_list_var.first()) {
						note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
						$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
						{
						    SubLObject file_data = dictionary.dictionary_lookup(directory_data, file_utilities.pathstring_filename(file), NIL);
						    com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_file_query_failure_rate_by_date(file, v_dictionary, file_data);
						}
					    }
					}
					noting_percent_progress_postamble();
				    } finally {
					$percent_progress_start_time$.rebind(_prev_bind_3, thread);
					$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
					$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
					$last_percent_progress_index$.rebind(_prev_bind_0_10, thread);
				    }
				}
			    }
			} finally {
			    $silent_progressP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		{
		    SubLObject results = NIL;
		    SubLObject cdolist_list_var = dictionary_utilities.sort_dictionary_by_keys(v_dictionary, $sym84$DATESTRING_);
		    SubLObject cons = NIL;
		    for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
			{
			    SubLObject datum = cons;
			    SubLObject current = datum;
			    SubLObject date_string = NIL;
			    SubLObject info_cons = NIL;
			    destructuring_bind_must_consp(current, datum, $list_alt113);
			    date_string = current.first();
			    current = current.rest();
			    info_cons = current;
			    {
				SubLObject dictionary_for_date = dictionary.new_dictionary(UNPROVIDED, UNPROVIDED);
				SubLObject datum_11 = info_cons;
				SubLObject current_12 = datum_11;
				SubLObject total_count = NIL;
				SubLObject query_failure_dictionary = NIL;
				destructuring_bind_must_consp(current_12, datum_11, $list_alt114);
				total_count = current_12.first();
				current_12 = current_12.rest();
				query_failure_dictionary = current_12;
				if (total_count.isPositive()) {
				    {
					SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(query_failure_dictionary));
					while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
					    thread.resetMultipleValues();
					    {
						SubLObject query = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
						SubLObject failure_count = thread.secondMultipleValue();
						thread.resetMultipleValues();
						dictionary.dictionary_enter(dictionary_for_date, query, divide(failure_count, total_count));
						iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
					    }
					}
					dictionary_contents.do_dictionary_contents_finalize(iteration_state);
				    }
				    results = cons(cons(date_string, dictionary_for_date), results);
				}
			    }
			}
		    }
		    return nreverse(results);
		}
	    }
	}
    }

    public static final SubLObject fact_sheet_log_directory_path_for_kb(SubLObject kb) {
	if (kb == UNPROVIDED) {
	    kb = kb_loaded();
	}
	return append(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_path(), list($$$logs, format(NIL, $str_alt200$_5__0D, kb)));
    }

    public static final SubLObject fact_sheet_log_directory_parsed_data_filename(SubLObject directory) {
	return cconcatenate(directory, $str_alt134$parsed_data_cfasl);
    }

    public static final SubLObject fact_sheet_log_directory_generated_count_for_date(SubLObject log_directory, SubLObject universal_date) {
	if (universal_date == UNPROVIDED) {
	    universal_date = numeric_date_utilities.get_universal_date(UNPROVIDED, UNPROVIDED);
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject directory_data = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_directory_data(log_directory, UNPROVIDED);
		SubLObject total = ZERO_INTEGER;
		SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
		{
		    SubLObject directory_contents_var = Filesys.directory(log_directory, T);
		    SubLObject progress_message_var = cconcatenate($str_alt80$Counting_fact_sheets_in_, new SubLObject[] { format_nil.format_nil_s_no_copy(log_directory), $str_alt120$_generated_on_, format_nil.format_nil_s_no_copy(universal_date) });
		    {
			SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
			try {
			    $silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
			    {
				SubLObject list_var = directory_contents_var;
				$progress_note$.setDynamicValue(progress_message_var, thread);
				$progress_start_time$.setDynamicValue(get_universal_time(), thread);
				$progress_total$.setDynamicValue(length(list_var), thread);
				$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
				{
				    SubLObject _prev_bind_0_14 = $last_percent_progress_index$.currentBinding(thread);
				    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
				    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
				    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
				    try {
					$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
					$last_percent_progress_prediction$.bind(NIL, thread);
					$within_noting_percent_progress$.bind(T, thread);
					$percent_progress_start_time$.bind(get_universal_time(), thread);
					noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
					{
					    SubLObject csome_list_var = list_var;
					    SubLObject file = NIL;
					    for (file = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), file = csome_list_var.first()) {
						note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
						$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
						{
						    SubLObject file_data = dictionary.dictionary_lookup(directory_data, file_utilities.pathstring_filename(file), NIL);
						    total = add(total, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_file_generated_count_for_date(file, universal_date, file_data));
						}
					    }
					}
					noting_percent_progress_postamble();
				    } finally {
					$percent_progress_start_time$.rebind(_prev_bind_3, thread);
					$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
					$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
					$last_percent_progress_index$.rebind(_prev_bind_0_14, thread);
				    }
				}
			    }
			} finally {
			    $silent_progressP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return total;
	    }
	}
    }

    public static final SubLObject fact_sheet_log_directory_generated_count_by_date(SubLObject log_directory, SubLObject ensure_up_to_dateP) {
	if (ensure_up_to_dateP == UNPROVIDED) {
	    ensure_up_to_dateP = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
	    {
		SubLObject directory_data = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_directory_data(log_directory, ensure_up_to_dateP);
		SubLObject v_dictionary = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
		SubLObject progress_message = cconcatenate($str_alt97$Categorizing_fact_sheets_in_, new SubLObject[] { format_nil.format_nil_s_no_copy(log_directory), $str_alt98$_by_date });
		SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
		{
		    SubLObject directory_contents_var = Filesys.directory(log_directory, T);
		    SubLObject progress_message_var = progress_message;
		    {
			SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
			try {
			    $silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
			    {
				SubLObject list_var = directory_contents_var;
				$progress_note$.setDynamicValue(progress_message_var, thread);
				$progress_start_time$.setDynamicValue(get_universal_time(), thread);
				$progress_total$.setDynamicValue(length(list_var), thread);
				$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
				{
				    SubLObject _prev_bind_0_3 = $last_percent_progress_index$.currentBinding(thread);
				    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
				    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
				    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
				    try {
					$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
					$last_percent_progress_prediction$.bind(NIL, thread);
					$within_noting_percent_progress$.bind(T, thread);
					$percent_progress_start_time$.bind(get_universal_time(), thread);
					noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
					{
					    SubLObject csome_list_var = list_var;
					    SubLObject file = NIL;
					    for (file = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), file = csome_list_var.first()) {
						note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
						$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
						{
						    SubLObject file_data = dictionary.dictionary_lookup(directory_data, file_utilities.pathstring_filename(file), NIL);
						    com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_file_generated_count_by_date(file, v_dictionary, file_data);
						}
					    }
					}
					noting_percent_progress_postamble();
				    } finally {
					$percent_progress_start_time$.rebind(_prev_bind_3, thread);
					$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
					$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
					$last_percent_progress_index$.rebind(_prev_bind_0_3, thread);
				    }
				}
			    }
			} finally {
			    $silent_progressP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return v_dictionary;
	    }
	}
    }

    public static final SubLObject fact_sheet_log_directory_generated_count(SubLObject log_directory) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject total = ZERO_INTEGER;
		SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
		{
		    SubLObject directory_contents_var = Filesys.directory(log_directory, T);
		    SubLObject progress_message_var = cconcatenate($str_alt80$Counting_fact_sheets_in_, format_nil.format_nil_s_no_copy(log_directory));
		    {
			SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
			try {
			    $silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
			    {
				SubLObject list_var = directory_contents_var;
				$progress_note$.setDynamicValue(progress_message_var, thread);
				$progress_start_time$.setDynamicValue(get_universal_time(), thread);
				$progress_total$.setDynamicValue(length(list_var), thread);
				$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
				{
				    SubLObject _prev_bind_0_1 = $last_percent_progress_index$.currentBinding(thread);
				    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
				    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
				    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
				    try {
					$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
					$last_percent_progress_prediction$.bind(NIL, thread);
					$within_noting_percent_progress$.bind(T, thread);
					$percent_progress_start_time$.bind(get_universal_time(), thread);
					noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
					{
					    SubLObject csome_list_var = list_var;
					    SubLObject file = NIL;
					    for (file = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), file = csome_list_var.first()) {
						note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
						$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
						total = add(total, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_file_generated_count(file, UNPROVIDED));
					    }
					}
					noting_percent_progress_postamble();
				    } finally {
					$percent_progress_start_time$.rebind(_prev_bind_3, thread);
					$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
					$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
					$last_percent_progress_index$.rebind(_prev_bind_0_1, thread);
				    }
				}
			    }
			} finally {
			    $silent_progressP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return total;
	    }
	}
    }

    public static final SubLObject fact_sheet_log_directory_average_uncategorized_sentence_count_by_date(SubLObject log_directory, SubLObject ensure_up_to_dateP) {
	if (ensure_up_to_dateP == UNPROVIDED) {
	    ensure_up_to_dateP = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
	    {
		SubLObject directory_data = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_directory_data(log_directory, ensure_up_to_dateP);
		SubLObject v_dictionary = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
		SubLObject progress_message = cconcatenate($str_alt105$Analyzing_fact_sheet_uncategorize, new SubLObject[] { format_nil.format_nil_s_no_copy(log_directory), $str_alt98$_by_date });
		SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
		{
		    SubLObject directory_contents_var = Filesys.directory(log_directory, T);
		    SubLObject progress_message_var = progress_message;
		    {
			SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
			try {
			    $silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
			    {
				SubLObject list_var = directory_contents_var;
				$progress_note$.setDynamicValue(progress_message_var, thread);
				$progress_start_time$.setDynamicValue(get_universal_time(), thread);
				$progress_total$.setDynamicValue(length(list_var), thread);
				$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
				{
				    SubLObject _prev_bind_0_7 = $last_percent_progress_index$.currentBinding(thread);
				    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
				    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
				    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
				    try {
					$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
					$last_percent_progress_prediction$.bind(NIL, thread);
					$within_noting_percent_progress$.bind(T, thread);
					$percent_progress_start_time$.bind(get_universal_time(), thread);
					noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
					{
					    SubLObject csome_list_var = list_var;
					    SubLObject file = NIL;
					    for (file = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), file = csome_list_var.first()) {
						note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
						$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
						{
						    SubLObject file_data = dictionary.dictionary_lookup(directory_data, file_utilities.pathstring_filename(file), NIL);
						    com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_file_average_uncategorized_sentence_count_by_date(file, v_dictionary, file_data);
						}
					    }
					}
					noting_percent_progress_postamble();
				    } finally {
					$percent_progress_start_time$.rebind(_prev_bind_3, thread);
					$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
					$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
					$last_percent_progress_index$.rebind(_prev_bind_0_7, thread);
				    }
				}
			    }
			} finally {
			    $silent_progressP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return v_dictionary;
	    }
	}
    }

    public static final SubLObject fact_sheet_log_directory_average_total_time_by_date(SubLObject log_directory, SubLObject ensure_up_to_dateP) {
	if (ensure_up_to_dateP == UNPROVIDED) {
	    ensure_up_to_dateP = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
	    {
		SubLObject directory_data = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_directory_data(log_directory, ensure_up_to_dateP);
		SubLObject v_dictionary = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
		SubLObject progress_message = cconcatenate($str_alt100$Analyzing_fact_sheet_times_in_, new SubLObject[] { format_nil.format_nil_s_no_copy(log_directory), $str_alt98$_by_date });
		SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
		{
		    SubLObject directory_contents_var = Filesys.directory(log_directory, T);
		    SubLObject progress_message_var = progress_message;
		    {
			SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
			try {
			    $silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
			    {
				SubLObject list_var = directory_contents_var;
				$progress_note$.setDynamicValue(progress_message_var, thread);
				$progress_start_time$.setDynamicValue(get_universal_time(), thread);
				$progress_total$.setDynamicValue(length(list_var), thread);
				$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
				{
				    SubLObject _prev_bind_0_4 = $last_percent_progress_index$.currentBinding(thread);
				    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
				    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
				    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
				    try {
					$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
					$last_percent_progress_prediction$.bind(NIL, thread);
					$within_noting_percent_progress$.bind(T, thread);
					$percent_progress_start_time$.bind(get_universal_time(), thread);
					noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
					{
					    SubLObject csome_list_var = list_var;
					    SubLObject file = NIL;
					    for (file = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), file = csome_list_var.first()) {
						note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
						$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
						{
						    SubLObject file_data = dictionary.dictionary_lookup(directory_data, file_utilities.pathstring_filename(file), NIL);
						    com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_file_average_total_time_by_date(file, v_dictionary, file_data);
						}
					    }
					}
					noting_percent_progress_postamble();
				    } finally {
					$percent_progress_start_time$.rebind(_prev_bind_3, thread);
					$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
					$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
					$last_percent_progress_index$.rebind(_prev_bind_0_4, thread);
				    }
				}
			    }
			} finally {
			    $silent_progressP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return v_dictionary;
	    }
	}
    }

    public static final SubLObject fact_sheet_log_directory_average_total_time(SubLObject log_directory) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject count = ZERO_INTEGER;
		SubLObject time = ZERO_INTEGER;
		SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
		{
		    SubLObject directory_contents_var = Filesys.directory(log_directory, T);
		    SubLObject progress_message_var = cconcatenate($str_alt81$Gathering_time_info_for_fact_shee, format_nil.format_nil_s_no_copy(log_directory));
		    {
			SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
			try {
			    $silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
			    {
				SubLObject list_var = directory_contents_var;
				$progress_note$.setDynamicValue(progress_message_var, thread);
				$progress_start_time$.setDynamicValue(get_universal_time(), thread);
				$progress_total$.setDynamicValue(length(list_var), thread);
				$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
				{
				    SubLObject _prev_bind_0_2 = $last_percent_progress_index$.currentBinding(thread);
				    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
				    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
				    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
				    try {
					$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
					$last_percent_progress_prediction$.bind(NIL, thread);
					$within_noting_percent_progress$.bind(T, thread);
					$percent_progress_start_time$.bind(get_universal_time(), thread);
					noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
					{
					    SubLObject csome_list_var = list_var;
					    SubLObject file = NIL;
					    for (file = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), file = csome_list_var.first()) {
						note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
						$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
						thread.resetMultipleValues();
						{
						    SubLObject this_count = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_file_generated_count(file, UNPROVIDED);
						    SubLObject this_time = thread.secondMultipleValue();
						    thread.resetMultipleValues();
						    count = add(count, this_count);
						    time = add(time, this_time);
						}
					    }
					}
					noting_percent_progress_postamble();
				    } finally {
					$percent_progress_start_time$.rebind(_prev_bind_3, thread);
					$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
					$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
					$last_percent_progress_index$.rebind(_prev_bind_0_2, thread);
				    }
				}
			    }
			} finally {
			    $silent_progressP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return divide(time, count);
	    }
	}
    }

    public static final SubLObject fact_sheet_log_directory_average_sentence_count_by_date(SubLObject log_directory, SubLObject ensure_up_to_dateP) {
	if (ensure_up_to_dateP == UNPROVIDED) {
	    ensure_up_to_dateP = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
	    {
		SubLObject directory_data = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_directory_data(log_directory, ensure_up_to_dateP);
		SubLObject v_dictionary = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
		SubLObject progress_message = cconcatenate($str_alt103$Analyzing_fact_sheet_sentence_cou, new SubLObject[] { format_nil.format_nil_s_no_copy(log_directory), $str_alt98$_by_date });
		SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
		{
		    SubLObject directory_contents_var = Filesys.directory(log_directory, T);
		    SubLObject progress_message_var = progress_message;
		    {
			SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
			try {
			    $silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
			    {
				SubLObject list_var = directory_contents_var;
				$progress_note$.setDynamicValue(progress_message_var, thread);
				$progress_start_time$.setDynamicValue(get_universal_time(), thread);
				$progress_total$.setDynamicValue(length(list_var), thread);
				$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
				{
				    SubLObject _prev_bind_0_6 = $last_percent_progress_index$.currentBinding(thread);
				    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
				    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
				    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
				    try {
					$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
					$last_percent_progress_prediction$.bind(NIL, thread);
					$within_noting_percent_progress$.bind(T, thread);
					$percent_progress_start_time$.bind(get_universal_time(), thread);
					noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
					{
					    SubLObject csome_list_var = list_var;
					    SubLObject file = NIL;
					    for (file = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), file = csome_list_var.first()) {
						note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
						$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
						{
						    SubLObject file_data = dictionary.dictionary_lookup(directory_data, file_utilities.pathstring_filename(file), NIL);
						    com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_file_average_sentence_count_by_date(file, v_dictionary, file_data);
						}
					    }
					}
					noting_percent_progress_postamble();
				    } finally {
					$percent_progress_start_time$.rebind(_prev_bind_3, thread);
					$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
					$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
					$last_percent_progress_index$.rebind(_prev_bind_0_6, thread);
				    }
				}
			    }
			} finally {
			    $silent_progressP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return v_dictionary;
	    }
	}
    }

    public static final SubLObject fact_sheet_log_directory_average_category_count_by_date(SubLObject log_directory, SubLObject ensure_up_to_dateP) {
	if (ensure_up_to_dateP == UNPROVIDED) {
	    ensure_up_to_dateP = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
	    {
		SubLObject directory_data = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_log_directory_data(log_directory, ensure_up_to_dateP);
		SubLObject v_dictionary = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
		SubLObject progress_message = cconcatenate($str_alt101$Analyzing_fact_sheet_categorizati, new SubLObject[] { format_nil.format_nil_s_no_copy(log_directory), $str_alt98$_by_date });
		SubLTrampolineFile.checkType(log_directory, DIRECTORY_P);
		{
		    SubLObject directory_contents_var = Filesys.directory(log_directory, T);
		    SubLObject progress_message_var = progress_message;
		    {
			SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
			try {
			    $silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
			    {
				SubLObject list_var = directory_contents_var;
				$progress_note$.setDynamicValue(progress_message_var, thread);
				$progress_start_time$.setDynamicValue(get_universal_time(), thread);
				$progress_total$.setDynamicValue(length(list_var), thread);
				$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
				{
				    SubLObject _prev_bind_0_5 = $last_percent_progress_index$.currentBinding(thread);
				    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
				    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
				    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
				    try {
					$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
					$last_percent_progress_prediction$.bind(NIL, thread);
					$within_noting_percent_progress$.bind(T, thread);
					$percent_progress_start_time$.bind(get_universal_time(), thread);
					noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
					{
					    SubLObject csome_list_var = list_var;
					    SubLObject file = NIL;
					    for (file = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), file = csome_list_var.first()) {
						note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
						$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
						{
						    SubLObject file_data = dictionary.dictionary_lookup(directory_data, file_utilities.pathstring_filename(file), NIL);
						    com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_file_average_category_count_by_date(file, v_dictionary, file_data);
						}
					    }
					}
					noting_percent_progress_postamble();
				    } finally {
					$percent_progress_start_time$.rebind(_prev_bind_3, thread);
					$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
					$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
					$last_percent_progress_index$.rebind(_prev_bind_0_5, thread);
				    }
				}
			    }
			} finally {
			    $silent_progressP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return v_dictionary;
	    }
	}
    }

    public static final SubLObject fact_sheet_kitchen_sink_test_case_p(SubLObject fact_sheet_kitchen_sink_test_case) {
	return classes.subloop_instanceof_class(fact_sheet_kitchen_sink_test_case, FACT_SHEET_KITCHEN_SINK_TEST_CASE);
    }

    public static final SubLObject fact_sheet_hourly_reporting_onP() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    return vectorp($hourly_fact_sheet_stats$.getDynamicValue(thread));
	}
    }

    public static final SubLObject ensure_fact_sheet_term_id_indexed(SubLObject v_term, SubLObject id) {
	if (id == UNPROVIDED) {
	    id = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(v_term, NIL);
	}
	if (!v_term.equal(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_id(id, UNPROVIDED))) {
	    com.cyc.cycjava.cycl.fact_sheets.index_fact_sheet_term_id(v_term, id);
	}
	return id;
    }

    public static final SubLObject ensure_fact_sheet_term_fbc_created(SubLObject initializeP) {
	if (initializeP == UNPROVIDED) {
	    initializeP = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == file_utilities.file_existsP(com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_term_fht_full_path())) {
		com.cyc.cycjava.cycl.fact_sheets.build_fact_sheet_term_fht(com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_term_fht_full_path(), initializeP, UNPROVIDED);
	    }
	    if (NIL == file_backed_cache.file_backed_cache_p($fact_sheet_term_fbc$.getGlobalValue())) {
		$fact_sheet_term_fbc$.setGlobalValue(
			file_backed_cache.file_backed_cache_create(com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_term_fht_full_path(), NIL, NIL, file_hash_table.$fht_cache_percentage$.getDynamicValue(thread), symbol_function(EQUAL), $fact_sheet_term_fht_mode$.getGlobalValue()));
	    }
	    return $fact_sheet_term_fbc$.getGlobalValue();
	}
    }

    public static final SubLObject ensure_fact_sheet_log_directories_are_up_to_date() {
	{
	    SubLObject stopP = NIL;
	    SubLObject data_files = NIL;
	    if (NIL == stopP) {
		{
		    SubLObject kb = NIL;
		    for (kb = number_utilities.f_1_(kb_loaded()); NIL == stopP; kb = add(kb, MINUS_ONE_INTEGER)) {
			{
			    SubLObject directory_list = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_directory_path_for_kb(kb);
			    SubLObject directory = file_utilities.cyc_home_subdirectory(directory_list);
			    if (NIL != Filesys.directory_p(directory)) {
				data_files = cons(com.cyc.cycjava.cycl.fact_sheets.find_or_create_fact_sheet_log_directory_data_file(directory, T), data_files);
			    } else {
				stopP = T;
			    }
			}
		    }
		}
	    }
	    return data_files;
	}
    }

    public static final SubLObject construct_fact_sheet_term_id_internal(SubLObject v_term) {
	{
	    SubLObject first_id = (NIL != forts.fort_p(v_term)) ? ((SubLObject) (sxhash_external.sxhash_external(kb_utilities.hl_external_id_string(v_term)))) : ZERO_INTEGER;
	    SubLObject second_id = sxhash_external.sxhash_external(com.cyc.cycjava.cycl.fact_sheets.cfasl_externalized_checksum(v_term));
	    return cconcatenate(format_nil.format_nil_a_no_copy(first_id), new SubLObject[] { $str_alt197$_, format_nil.format_nil_a_no_copy(second_id) });
	}
    }

    public static final SubLObject construct_fact_sheet_term_id(SubLObject v_term) {
	{
	    SubLObject caching_state = $construct_fact_sheet_term_id_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(CONSTRUCT_FACT_SHEET_TERM_ID, $construct_fact_sheet_term_id_caching_state$, $int$1024, EQUAL, ONE_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject results = memoization_state.caching_state_lookup(caching_state, v_term, $kw127$_MEMOIZED_ITEM_NOT_FOUND_);
		if (results == $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.construct_fact_sheet_term_id_internal(v_term)));
		    memoization_state.caching_state_put(caching_state, v_term, results, UNPROVIDED);
		}
		return memoization_state.caching_results(results);
	    }
	}
    }

    public static final SubLObject compute_total_time_from_start_and_end(SubLObject current_datum) {
	{
	    SubLObject total_time = NIL;
	    SubLObject datum = current_datum;
	    SubLObject current = datum;
	    SubLObject start_time_tail = property_list_member($START_TIME, current);
	    SubLObject start_time = (NIL != start_time_tail) ? ((SubLObject) (cadr(start_time_tail))) : NIL;
	    SubLObject start_date_tail = property_list_member($START_DATE, current);
	    SubLObject start_date = (NIL != start_date_tail) ? ((SubLObject) (cadr(start_date_tail))) : NIL;
	    SubLObject end_time_tail = property_list_member($END_TIME, current);
	    SubLObject end_time = (NIL != end_time_tail) ? ((SubLObject) (cadr(end_time_tail))) : NIL;
	    SubLObject end_date_tail = property_list_member($END_DATE, current);
	    SubLObject end_date = (NIL != end_date_tail) ? ((SubLObject) (cadr(end_date_tail))) : NIL;
	    if (((start_time.isString() && start_date.isString()) && end_time.isString()) && end_date.isString()) {
		total_time = add(numeric_date_utilities.secondstring_(end_time, start_time), numeric_date_utilities.datestring_(end_date, start_date));
	    }
	    return total_time;
	}
    }

    public static final SubLObject clear_hourly_fact_sheet_update_count() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    set_aref($hourly_fact_sheet_stats$.getDynamicValue(thread), ZERO_INTEGER, ZERO_INTEGER);
	    return NIL;
	}
    }

    public static final SubLObject clear_hourly_fact_sheet_stats() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    com.cyc.cycjava.cycl.fact_sheets.clear_hourly_fact_sheet_update_count();
	    com.cyc.cycjava.cycl.fact_sheets.clear_hourly_fact_sheet_query_timeout_count();
	    return $hourly_fact_sheet_stats$.getDynamicValue(thread);
	}
    }

    public static final SubLObject clear_hourly_fact_sheet_query_timeout_count() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    set_aref($hourly_fact_sheet_stats$.getDynamicValue(thread), ONE_INTEGER, ZERO_INTEGER);
	    return NIL;
	}
    }

    public static final SubLObject clear_get_fact_sheet_log_directory_data_cached() {
	{
	    SubLObject cs = $get_fact_sheet_log_directory_data_cached_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static final SubLObject clear_construct_fact_sheet_term_id() {
	{
	    SubLObject cs = $construct_fact_sheet_term_id_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    /**
     *
     *
     * @return CONSP; checksum for OBJECT based on its externalized cfasl code.
     */
    @LispMethod(comment = "@return CONSP; checksum for OBJECT based on its externalized cfasl code.")
    public static final SubLObject cfasl_externalized_checksum(SubLObject v_object) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject checksum = NIL;
		{
		    SubLObject _prev_bind_0 = number_utilities.$checksum_sum$.currentBinding(thread);
		    SubLObject _prev_bind_1 = number_utilities.$checksum_length$.currentBinding(thread);
		    try {
			number_utilities.$checksum_sum$.bind(number_utilities.$checksum_initial_value_sum$.getGlobalValue(), thread);
			number_utilities.$checksum_length$.bind(number_utilities.$checksum_initial_value_length$.getGlobalValue(), thread);
			{
			    SubLObject vector_var = cfasl_encode_externalized(v_object);
			    SubLObject backwardP_var = NIL;
			    SubLObject length = length(vector_var);
			    SubLObject v_iteration = NIL;
			    for (v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
				{
				    SubLObject element_num = (NIL != backwardP_var) ? ((SubLObject) (subtract(length, v_iteration, ONE_INTEGER))) : v_iteration;
				    SubLObject v_byte = aref(vector_var, element_num);
				    number_utilities.checksum_update(v_byte);
				}
			    }
			    checksum = number_utilities.checksum_finalize();
			}
		    } finally {
			number_utilities.$checksum_length$.rebind(_prev_bind_1, thread);
			number_utilities.$checksum_sum$.rebind(_prev_bind_0, thread);
		    }
		}
		return checksum;
	    }
	}
    }

    /**
     *
     *
     * @unknown -- This has been known to take ~5 hours.
     */
    @LispMethod(comment = "@unknown -- This has been known to take ~5 hours.")
    public static final SubLObject build_fact_sheet_term_fht(SubLObject filename, SubLObject initializeP, SubLObject tmp_dir) {
	if (initializeP == UNPROVIDED) {
	    initializeP = T;
	}
	if (tmp_dir == UNPROVIDED) {
	    tmp_dir = $str_alt409$tmp_;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject mode = $fact_sheet_term_fht_mode$.getGlobalValue();
		SubLObject fht = file_hash_table.fast_create_file_hash_table(filename, tmp_dir, symbol_function(EQUAL), mode);
		if (NIL != initializeP) {
		    kb_cleanup.kill_duplicate_narts();
		    {
			SubLObject message = $str_alt410$Caching_FORTs_for_Fact_Sheet_term;
			SubLObject total = forts.fort_count();
			SubLObject sofar = ZERO_INTEGER;
			{
			    SubLObject _prev_bind_0 = $last_percent_progress_index$.currentBinding(thread);
			    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
			    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
			    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
			    try {
				$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
				$last_percent_progress_prediction$.bind(NIL, thread);
				$within_noting_percent_progress$.bind(T, thread);
				$percent_progress_start_time$.bind(get_universal_time(), thread);
				noting_percent_progress_preamble(message);
				{
				    SubLObject cdolist_list_var = forts.do_forts_tables();
				    SubLObject table_var = NIL;
				    for (table_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), table_var = cdolist_list_var.first()) {
					if (NIL == do_id_index_empty_p(table_var, $SKIP)) {
					    {
						SubLObject id = do_id_index_next_id(table_var, T, NIL, NIL);
						SubLObject state_var = do_id_index_next_state(table_var, T, id, NIL);
						SubLObject fort = NIL;
						while (NIL != id) {
						    fort = do_id_index_state_object(table_var, $SKIP, id, state_var);
						    if (NIL != do_id_index_id_and_object_validP(id, fort, $SKIP)) {
							sofar = add(sofar, ONE_INTEGER);
							note_percent_progress(sofar, total);
							{
							    SubLObject id_64 = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(fort, NIL);
							    file_hash_table.fast_put_file_hash_table(id_64, fht, fort);
							}
						    }
						    id = do_id_index_next_id(table_var, T, id, state_var);
						    state_var = do_id_index_next_state(table_var, T, id, state_var);
						}
					    }
					}
				    }
				}
				noting_percent_progress_postamble();
			    } finally {
				$percent_progress_start_time$.rebind(_prev_bind_3, thread);
				$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
				$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
				$last_percent_progress_index$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		    {
			SubLObject cdolist_list_var = list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt(), com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt());
			SubLObject mt = NIL;
			for (mt = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), mt = cdolist_list_var.first()) {
			    if (NIL == forts.fort_p(mt)) {
				{
				    SubLObject id = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(mt, NIL);
				    file_hash_table.fast_put_file_hash_table(id, fht, mt);
				}
			    }
			}
		    }
		}
		file_hash_table.finalize_fast_create_file_hash_table(fht, UNPROVIDED, UNPROVIDED);
		$fact_sheet_term_fht_full_path$.setGlobalValue(filename);
		$fact_sheet_term_fbc$.setGlobalValue(file_backed_cache.file_backed_cache_create(filename, NIL, NIL, file_hash_table.$fht_cache_percentage$.getDynamicValue(thread), symbol_function(EQUAL), mode));
	    }
	    return filename;
	}
    }

    public static final SubLObject add_total_time_to_datum(SubLObject current_datum, SubLObject time) {
	if (time == UNPROVIDED) {
	    time = NIL;
	}
	if (!time.isNumber()) {
	    time = com.cyc.cycjava.cycl.fact_sheets.compute_total_time_from_start_and_end(current_datum);
	}
	if (time.isNumber()) {
	    current_datum = putf(current_datum, $TOTAL_TIME, time);
	}
	return current_datum;
    }

    public static final SubLObject add_fact_sheet_info_to_hourly_stats(SubLObject v_term) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if ($hourly_fact_sheet_stats$.getDynamicValue(thread).isVector()) {
		set_aref($hourly_fact_sheet_stats$.getDynamicValue(thread), ZERO_INTEGER, add(aref($hourly_fact_sheet_stats$.getDynamicValue(thread), ZERO_INTEGER), ONE_INTEGER));
	    }
	    return v_term;
	}
    }

    public static final SubLObject add_end_date_and_time_to_datum(SubLObject current_datum, SubLObject line) {
	current_datum = putf(current_datum, $END_DATE, string_utilities.substring(line, ZERO_INTEGER, TEN_INTEGER));
	current_datum = putf(current_datum, $END_TIME, string_utilities.substring(line, ELEVEN_INTEGER, NINETEEN_INTEGER));
	return current_datum;
    }

    public static final SubLSymbol $construct_fact_sheet_term_id_caching_state$ = makeSymbol("*CONSTRUCT-FACT-SHEET-TERM-ID-CACHING-STATE*");

    static private final SubLString $str_alt133$ = makeString("");

    public static final SubLSymbol $get_fact_sheet_log_directory_data_cached_caching_state$ = makeSymbol("*GET-FACT-SHEET-LOG-DIRECTORY-DATA-CACHED-CACHING-STATE*");

    public static final SubLSymbol $closed_fact_sheet_log_files$ = makeSymbol("*CLOSED-FACT-SHEET-LOG-FILES*");

    public static final SubLSymbol $standard_output$ = makeSymbol("*STANDARD-OUTPUT*");

    public static final SubLSymbol $fact_sheet_log_file$ = makeSymbol("*FACT-SHEET-LOG-FILE*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_term_fht_mode$ = makeSymbol("*FACT-SHEET-TERM-FHT-MODE*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_term_fbc$ = makeSymbol("*FACT-SHEET-TERM-FBC*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_term_fht_full_path$ = makeSymbol("*FACT-SHEET-TERM-FHT-FULL-PATH*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_term_fht_filename$ = makeSymbol("*FACT-SHEET-TERM-FHT-FILENAME*");

    /**
     * Lock used while establishing a unique log file.
     */
    // deflexical
    @LispMethod(comment = "Lock used while establishing a unique log file.\ndeflexical")
    private static final SubLSymbol $fact_sheet_log_file_uniquifier_lock$ = makeSymbol("*FACT-SHEET-LOG-FILE-UNIQUIFIER-LOCK*");

    /**
     * List of properties of a fact-sheet generation event we can extract from a log file.
     */
    // deflexical
    @LispMethod(comment = "List of properties of a fact-sheet generation event we can extract from a log file.\ndeflexical")
    private static final SubLSymbol $fact_sheet_log_file_properties$ = makeSymbol("*FACT-SHEET-LOG-FILE-PROPERTIES*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $hourly_fact_sheet_stats$ = makeSymbol("*HOURLY-FACT-SHEET-STATS*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $next_fact_sheet_hourly_report_time$ = makeSymbol("*NEXT-FACT-SHEET-HOURLY-REPORT-TIME*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $fact_sheet_log_stream$ = makeSymbol("*FACT-SHEET-LOG-STREAM*");

    public static final SubLFile me = new fact_sheets();

 public static final String myName = "com.cyc.cycjava.cycl.fact_sheets";


    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $fact_sheet_query_mt$ = makeSymbol("*FACT-SHEET-QUERY-MT*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $fact_sheet_table_type$ = makeSymbol("*FACT-SHEET-TABLE-TYPE*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $fact_sheet_sentence$ = makeSymbol("*FACT-SHEET-SENTENCE*");

    // defparameter
    /**
     * A boolean value that records whether we are paraphrasing for a fact sheet, to
     * let the paraphrase code know whether to emit bogus hyperlinks that will be
     * handled by the java code.
     */
    @LispMethod(comment = "A boolean value that records whether we are paraphrasing for a fact sheet, to\r\nlet the paraphrase code know whether to emit bogus hyperlinks that will be\r\nhandled by the java code.\ndefparameter\nA boolean value that records whether we are paraphrasing for a fact sheet, to\nlet the paraphrase code know whether to emit bogus hyperlinks that will be\nhandled by the java code.")
    private static final SubLSymbol $within_fact_sheet_paraphraseP$ = makeSymbol("*WITHIN-FACT-SHEET-PARAPHRASE?*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $fact_sheet_sentence_sorter_pred_counts$ = makeSymbol("*FACT-SHEET-SENTENCE-SORTER-PRED-COUNTS*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $fact_sheet_verbosity$ = makeSymbol("*FACT-SHEET-VERBOSITY*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $suppress_fact_sheet_extra_images$ = makeSymbol("*SUPPRESS-FACT-SHEET-EXTRA-IMAGES*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $suppress_fact_sheet_extra_images_css$ = makeSymbol("*SUPPRESS-FACT-SHEET-EXTRA-IMAGES-CSS*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $catch_fact_sheet_errorsP$ = makeSymbol("*CATCH-FACT-SHEET-ERRORS?*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_default_language_monad_mt$ = makeSymbol("*FACT-SHEET-DEFAULT-LANGUAGE-MONAD-MT*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_default_language_mt_time_interval$ = makeSymbol("*FACT-SHEET-DEFAULT-LANGUAGE-MT-TIME-INTERVAL*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_default_language_mt_time_parameter$ = makeSymbol("*FACT-SHEET-DEFAULT-LANGUAGE-MT-TIME-PARAMETER*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_default_domain_monad_mt$ = makeSymbol("*FACT-SHEET-DEFAULT-DOMAIN-MONAD-MT*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_thcl_section_category$ = makeSymbol("*FACT-SHEET-THCL-SECTION-CATEGORY*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_table_border_width$ = makeSymbol("*FACT-SHEET-TABLE-BORDER-WIDTH*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_table_cellpadding$ = makeSymbol("*FACT-SHEET-TABLE-CELLPADDING*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_table_horizontal_alignment$ = makeSymbol("*FACT-SHEET-TABLE-HORIZONTAL-ALIGNMENT*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_table_width$ = makeSymbol("*FACT-SHEET-TABLE-WIDTH*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_table_title_bgcolor$ = makeSymbol("*FACT-SHEET-TABLE-TITLE-BGCOLOR*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_table_title_font_color$ = makeSymbol("*FACT-SHEET-TABLE-TITLE-FONT-COLOR*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_table_title_horizontal_alignment$ = makeSymbol("*FACT-SHEET-TABLE-TITLE-HORIZONTAL-ALIGNMENT*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_table_header_bgcolor$ = makeSymbol("*FACT-SHEET-TABLE-HEADER-BGCOLOR*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_table_header_horizontal_alignment$ = makeSymbol("*FACT-SHEET-TABLE-HEADER-HORIZONTAL-ALIGNMENT*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_table_header_font_color$ = makeSymbol("*FACT-SHEET-TABLE-HEADER-FONT-COLOR*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_table_data_bgcolor$ = makeSymbol("*FACT-SHEET-TABLE-DATA-BGCOLOR*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_table_data_first_column_horizontal_alignment$ = makeSymbol("*FACT-SHEET-TABLE-DATA-FIRST-COLUMN-HORIZONTAL-ALIGNMENT*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $fact_sheet_relevant_terms$ = makeSymbol("*FACT-SHEET-RELEVANT-TERMS*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $fact_sheet_term_paraphrase_for_titleP$ = makeSymbol("*FACT-SHEET-TERM-PARAPHRASE-FOR-TITLE?*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $fact_sheet_use_base_urlP$ = makeSymbol("*FACT-SHEET-USE-BASE-URL?*");

    // defparameter
    /**
     * The path to the followup-widget loader. The path should be relative to the
     * root directory of the server (i.e. start with a /
     */
    @LispMethod(comment = "The path to the followup-widget loader. The path should be relative to the\r\nroot directory of the server (i.e. start with a /\ndefparameter\nThe path to the followup-widget loader. The path should be relative to the\nroot directory of the server (i.e. start with a /")
    private static final SubLSymbol $fact_sheet_followup_loader_root_relative_path$ = makeSymbol("*FACT-SHEET-FOLLOWUP-LOADER-ROOT-RELATIVE-PATH*");

    // defconstant
    /**
     * A list of string pairs such that, if the Query Library user enters a search
     * string that begins with the first of one of the pairs and ends with the
     * second of the same pair, we should strip off the beginning and ending and see
     * if what remains denotes an entity for which we can show a fact sheet
     */
    @LispMethod(comment = "A list of string pairs such that, if the Query Library user enters a search\r\nstring that begins with the first of one of the pairs and ends with the\r\nsecond of the same pair, we should strip off the beginning and ending and see\r\nif what remains denotes an entity for which we can show a fact sheet\ndefconstant\nA list of string pairs such that, if the Query Library user enters a search\nstring that begins with the first of one of the pairs and ends with the\nsecond of the same pair, we should strip off the beginning and ending and see\nif what remains denotes an entity for which we can show a fact sheet")
    private static final SubLSymbol $fact_sheet_request_patterns$ = makeSymbol("*FACT-SHEET-REQUEST-PATTERNS*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $mini_fact_sheet_term_types$ = makeSymbol("*MINI-FACT-SHEET-TERM-TYPES*");

    // deflexical
    // the location of all fact sheet data, relative to the cyc home
    /**
     * the location of all fact sheet data, relative to the cyc home
     */
    @LispMethod(comment = "the location of all fact sheet data, relative to the cyc home\ndeflexical")
    private static final SubLSymbol $fact_sheet_data_path$ = makeSymbol("*FACT-SHEET-DATA-PATH*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_id_upper_case_escape_char$ = makeSymbol("*FACT-SHEET-ID-UPPER-CASE-ESCAPE-CHAR*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_id_legacy_upper_case_escape_char$ = makeSymbol("*FACT-SHEET-ID-LEGACY-UPPER-CASE-ESCAPE-CHAR*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $use_fact_sheet_legacy_idsP$ = makeSymbol("*USE-FACT-SHEET-LEGACY-IDS?*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_category_order$ = makeSymbol("*FACT-SHEET-CATEGORY-ORDER*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_bogus_url_prefix$ = makeSymbol("*FACT-SHEET-BOGUS-URL-PREFIX*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_outer_table_class$ = makeSymbol("*FACT-SHEET-OUTER-TABLE-CLASS*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_main_image$ = makeSymbol("*FACT-SHEET-MAIN-IMAGE*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_in_cyc_logo$ = makeSymbol("*FACT-SHEET-IN-CYC-LOGO*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_title$ = makeSymbol("*FACT-SHEET-TITLE*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_title_div$ = makeSymbol("*FACT-SHEET-TITLE-DIV*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_category_title$ = makeSymbol("*FACT-SHEET-CATEGORY-TITLE*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_fact_class1$ = makeSymbol("*FACT-SHEET-FACT-CLASS1*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_fact_class2$ = makeSymbol("*FACT-SHEET-FACT-CLASS2*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_footnote_class1$ = makeSymbol("*FACT-SHEET-FOOTNOTE-CLASS1*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_footnote_class2$ = makeSymbol("*FACT-SHEET-FOOTNOTE-CLASS2*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_kb_version_string_introducer$ = makeSymbol("*FACT-SHEET-KB-VERSION-STRING-INTRODUCER*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_revision_string_introducer$ = makeSymbol("*FACT-SHEET-REVISION-STRING-INTRODUCER*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_demerit_cutoff$ = makeSymbol("*FACT-SHEET-DEMERIT-CUTOFF*");

    // deflexical
    // Minimum number of sentences in a paragraph
    /**
     * Minimum number of sentences in a paragraph
     */
    @LispMethod(comment = "Minimum number of sentences in a paragraph\ndeflexical")
    private static final SubLSymbol $fact_sheet_min_paragraph_length$ = makeSymbol("*FACT-SHEET-MIN-PARAGRAPH-LENGTH*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_verbosities$ = makeSymbol("*FACT-SHEET-VERBOSITIES*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_image_max_width$ = makeSymbol("*FACT-SHEET-IMAGE-MAX-WIDTH*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_image_max_height$ = makeSymbol("*FACT-SHEET-IMAGE-MAX-HEIGHT*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_image_root_placeholder$ = makeSymbol("*FACT-SHEET-IMAGE-ROOT-PLACEHOLDER*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_base_url_placeholder$ = makeSymbol("*FACT-SHEET-BASE-URL-PLACEHOLDER*");

    // defparameter
    // a list of (original . replacement) colors for factsheets
    /**
     * a list of (original . replacement) colors for factsheets
     */
    @LispMethod(comment = "a list of (original . replacement) colors for factsheets\ndefparameter")
    private static final SubLSymbol $fact_sheet_replacement_color_spec$ = makeSymbol("*FACT-SHEET-REPLACEMENT-COLOR-SPEC*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_image_file_root_directory$ = makeSymbol("*FACT-SHEET-IMAGE-FILE-ROOT-DIRECTORY*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $use_fact_sheet_image_file_root_urlP$ = makeSymbol("*USE-FACT-SHEET-IMAGE-FILE-ROOT-URL?*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $use_relative_fact_sheet_image_urlsP$ = makeSymbol("*USE-RELATIVE-FACT-SHEET-IMAGE-URLS?*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $use_fact_sheet_builder_queriesP$ = makeSymbol("*USE-FACT-SHEET-BUILDER-QUERIES?*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $include_miscellaneous_on_fact_sheetsP$ = makeSymbol("*INCLUDE-MISCELLANEOUS-ON-FACT-SHEETS?*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $omitted_fact_sheet_sentences$ = makeSymbol("*OMITTED-FACT-SHEET-SENTENCES*");

    // deflexical
    /**
     * ALIST mapping PRED -> ARGNUMS, such that a PRED sentence always counts as
     * being about its ARGNUMth argument.
     */
    @LispMethod(comment = "ALIST mapping PRED -> ARGNUMS, such that a PRED sentence always counts as\r\nbeing about its ARGNUMth argument.\ndeflexical\nALIST mapping PRED -> ARGNUMS, such that a PRED sentence always counts as\nbeing about its ARGNUMth argument.")
    private static final SubLSymbol $fact_sheet_pred_aboutness_map$ = makeSymbol("*FACT-SHEET-PRED-ABOUTNESS-MAP*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_sentence_trivially_impliesP_caching_state$ = makeSymbol("*FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?-CACHING-STATE*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_highly_prevalent_among_instancesP_cached_caching_state$ = makeSymbol("*FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED-CACHING-STATE*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $fact_sheet_queries_browsableP$ = makeSymbol("*FACT-SHEET-QUERIES-BROWSABLE?*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_query_spec_pool$ = makeSymbol("*FACT-SHEET-QUERY-SPEC-POOL*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_query_polling_interval$ = makeSymbol("*FACT-SHEET-QUERY-POLLING-INTERVAL*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_under_construction_code$ = makeSymbol("*FACT-SHEET-UNDER-CONSTRUCTION-CODE*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $stop_fact_sheet_update_after_current_termP$ = makeSymbol("*STOP-FACT-SHEET-UPDATE-AFTER-CURRENT-TERM?*");

    // deflexical
    // If a fact-sheet has not been updated for 60 minutes, restart the image.
    /**
     * If a fact-sheet has not been updated for 60 minutes, restart the image.
     */
    @LispMethod(comment = "If a fact-sheet has not been updated for 60 minutes, restart the image.\ndeflexical")
    private static final SubLSymbol $fact_sheet_inactivity_image_restart_delay$ = makeSymbol("*FACT-SHEET-INACTIVITY-IMAGE-RESTART-DELAY*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $fact_sheet_generator_update_date_and_second$ = makeSymbol("*FACT-SHEET-GENERATOR-UPDATE-DATE-AND-SECOND*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_screensaver_users$ = makeSymbol("*FACT-SHEET-SCREENSAVER-USERS*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_screensavers_should_sleepP$ = makeSymbol("*FACT-SHEET-SCREENSAVERS-SHOULD-SLEEP?*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_screensavers_should_dieP$ = makeSymbol("*FACT-SHEET-SCREENSAVERS-SHOULD-DIE?*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $fact_sheet_query_soft_timeout_time$ = makeSymbol("*FACT-SHEET-QUERY-SOFT-TIMEOUT-TIME*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $fact_sheet_paraphrase_soft_timeout_time$ = makeSymbol("*FACT-SHEET-PARAPHRASE-SOFT-TIMEOUT-TIME*");

    // defconstant
    @LispMethod(comment = "defconstant")
    public static final SubLSymbol $dtp_fact_sheet_update_term_prioritizer$ = makeSymbol("*DTP-FACT-SHEET-UPDATE-TERM-PRIORITIZER*");

    // defparameter
    // Integer between -20 -- highest priority -- and 19 -- lowest.
    /**
     * Integer between -20 -- highest priority -- and 19 -- lowest.
     */
    @LispMethod(comment = "Integer between -20 -- highest priority -- and 19 -- lowest.\ndefparameter")
    private static final SubLSymbol $fsut_prioritizer_default_nice_level$ = makeSymbol("*FSUT-PRIORITIZER-DEFAULT-NICE-LEVEL*");

    // deflexical
    // Maximally nice
    /**
     * Maximally nice
     */
    @LispMethod(comment = "Maximally nice\ndeflexical")
    private static final SubLSymbol $fsut_prioritizer_max_nice_level$ = makeSymbol("*FSUT-PRIORITIZER-MAX-NICE-LEVEL*");

    // deflexical
    // Minimally nice
    /**
     * Minimally nice
     */
    @LispMethod(comment = "Minimally nice\ndeflexical")
    private static final SubLSymbol $fsut_prioritizer_min_nice_level$ = makeSymbol("*FSUT-PRIORITIZER-MIN-NICE-LEVEL*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $fsut_prioritizer_default_new_days$ = makeSymbol("*FSUT-PRIORITIZER-DEFAULT-NEW-DAYS*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fsut_prioritizer_divisor$ = makeSymbol("*FSUT-PRIORITIZER-DIVISOR*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $fact_sheet_statuses$ = makeSymbol("*FACT-SHEET-STATUSES*");

    // defvar
    @LispMethod(comment = "defvar")
    private static final SubLSymbol $fact_sheet_updating_process_dictionary$ = makeSymbol("*FACT-SHEET-UPDATING-PROCESS-DICTIONARY*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $fact_sheet_lookaside_cache$ = makeSymbol("*FACT-SHEET-LOOKASIDE-CACHE*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $public_fact_sheet_path$ = makeSymbol("*PUBLIC-FACT-SHEET-PATH*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $public_fact_sheet_ad_html$ = makeSymbol("*PUBLIC-FACT-SHEET-AD-HTML*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $incyc_factsheet_staging_directory$ = makeSymbol("*INCYC-FACTSHEET-STAGING-DIRECTORY*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $incyc_searchdata_staging_file$ = makeSymbol("*INCYC-SEARCHDATA-STAGING-FILE*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $incyc_searchdata_xml_file$ = makeSymbol("*INCYC-SEARCHDATA-XML-FILE*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $incyc_searchdata_htaccess_file$ = makeSymbol("*INCYC-SEARCHDATA-HTACCESS-FILE*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $incyc_searchdata_sql_file$ = makeSymbol("*INCYC-SEARCHDATA-SQL-FILE*");

    // deflexical
    /**
     * :collection-name will be used in file names, so as a convenience to users,
     * don't include spaces, upper-case letters or other special characters in the
     * name
     */
    @LispMethod(comment = ":collection-name will be used in file names, so as a convenience to users,\r\ndon\'t include spaces, upper-case letters or other special characters in the\r\nname\ndeflexical\n:collection-name will be used in file names, so as a convenience to users,\ndon\'t include spaces, upper-case letters or other special characters in the\nname")
    private static final SubLSymbol $public_fact_sheet_properties$ = makeSymbol("*PUBLIC-FACT-SHEET-PROPERTIES*");

    // defparameter
    // this should only be bound dynamically...
    /**
     * this should only be bound dynamically...
     */
    @LispMethod(comment = "this should only be bound dynamically...\ndefparameter")
    private static final SubLSymbol $fs_type$ = makeSymbol("*FS-TYPE*");

    // Internal Constants
    @LispMethod(comment = "Internal Constants")
    static private final SubLList $list0 = list(makeString("application.cae.allow-fact-sheet-evaluations?"));

    public static final SubLSymbol $allow_fact_sheet_evaluationsP$ = makeSymbol("*ALLOW-FACT-SHEET-EVALUATIONS?*");

    static private final SubLList $list4 = list(list(makeSymbol("*ALLOW-FACT-SHEET-EVALUATIONS?*"), ONE_INTEGER));

    static private final SubLList $list5 = list(list(makeSymbol("*ALLOW-FACT-SHEET-EVALUATIONS?*"), ZERO_INTEGER));

    private static final SubLSymbol ALLOW_FACT_SHEET_EVALUATIONS = makeSymbol("ALLOW-FACT-SHEET-EVALUATIONS");

    static private final SubLList $list7 = list(makeString("application.cae.fact-sheet-eval-log-file"));

    public static final SubLSymbol $fact_sheet_eval_log_file$ = makeSymbol("*FACT-SHEET-EVAL-LOG-FILE*");

    static private final SubLString $str9$_cyc_projects_aquaint_ginko_metri = makeString("/cyc/projects/aquaint/ginko/metrics/fact-sheets/factsheet-eval-log.txt");

    private static final SubLSymbol INDEXICAL_FACT_SHEET_QUERY_MT = makeSymbol("INDEXICAL-FACT-SHEET-QUERY-MT");

    private static final SubLSymbol INDEXICAL_FACT_SHEET_TABLE_TYPE = makeSymbol("INDEXICAL-FACT-SHEET-TABLE-TYPE");

    private static final SubLSymbol INDEXICAL_FACT_SHEET_SENTENCE = makeSymbol("INDEXICAL-FACT-SHEET-SENTENCE");

    private static final SubLList $list16 = list(list(makeSymbol("PROBLEM-STORE-VAR")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLList $list20 = list(list(makeSymbol("NEW-PROBLEM-STORE")));

    static private final SubLList $list22 = list(makeSymbol("FACT-SHEET-QUERIES-BROWSABLE?"));

    private static final SubLSymbol DESTROY_PROBLEM_STORE = makeSymbol("DESTROY-PROBLEM-STORE");

    static private final SubLList $list24 = list(makeSymbol("FOCAL-TERM"), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLList $list25 = list(list(makeSymbol("*WITHIN-FACT-SHEET-PARAPHRASE?*"), T));

    private static final SubLSymbol WITH_FACT_SHEET_FOCAL_TERM = makeSymbol("WITH-FACT-SHEET-FOCAL-TERM");

    private static final SubLSymbol WITH_PPH_HTML_FUNCTION_AND_TARGET = makeSymbol("WITH-PPH-HTML-FUNCTION-AND-TARGET");

    private static final SubLList $list28 = list(makeKeyword("FACT-SHEET"), NIL);

    private static final SubLSymbol WITH_PPH_HTML_TERM_ID_FN = makeSymbol("WITH-PPH-HTML-TERM-ID-FN");

    static private final SubLList $list30 = list(list(QUOTE, makeSymbol("FACT-SHEET-TERM-ID")));

    private static final SubLSymbol WITH_PPH_SPEAKER_AND_ADDRESSEE = makeSymbol("WITH-PPH-SPEAKER-AND-ADDRESSEE");

    static private final SubLList $list32 = list(makeKeyword("UNKNOWN"), makeKeyword("UNKNOWN"));

    private static final SubLSymbol INDEXICAL_FACT_SHEET_TOPIC = makeSymbol("INDEXICAL-FACT-SHEET-TOPIC");

    private static final SubLList $list36 = list(list(makeSymbol("TERM")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol $fact_sheet_focal_term$ = makeSymbol("*FACT-SHEET-FOCAL-TERM*");

    private static final SubLSymbol POSSIBLY_WITH_THCL_FORT = makeSymbol("POSSIBLY-WITH-THCL-FORT");

    private static final SubLString $str39$_cycdoc_css_cb_fact_sheets_suppre = makeString("/cycdoc/css/cb-fact-sheets-suppress-images.css");

    static private final SubLList $list40 = list(list(makeSymbol("FILENAME"), makeSymbol("STREAM"), makeSymbol("ERROR-MESSAGE-VAR")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol POSSIBLY_CATCH_ERROR_MESSAGE = makeSymbol("POSSIBLY-CATCH-ERROR-MESSAGE");

    private static final SubLList $list42 = list(makeSymbol("*CATCH-FACT-SHEET-ERRORS?*"));

    static private final SubLList $list44 = list(makeKeyword("OUTPUT"));

    private static final SubLSymbol $chmod_safe_to_useP$ = makeSymbol("*CHMOD-SAFE-TO-USE?*");

    private static final SubLSymbol CHMOD = makeSymbol("CHMOD");

    private static final SubLSymbol LOGICAL_PATHNAME_TO_PHYSICAL = makeSymbol("LOGICAL-PATHNAME-TO-PHYSICAL");

    private static final SubLList $list49 = list(makeString("664"));

    private static final SubLString $str53$Cannot_open__A = makeString("Cannot open ~A");

    private static final SubLList $list54 = list(makeKeyword("INPUT"));

    private static final SubLObject $$Null_TimeParameter = reader_make_constant_shell("Null-TimeParameter");

    private static final SubLSymbol FACT_SHEET_DEFAULT_LANGUAGE_MT = makeSymbol("FACT-SHEET-DEFAULT-LANGUAGE-MT");

    private static final SubLSymbol $fact_sheet_default_language_mt_caching_state$ = makeSymbol("*FACT-SHEET-DEFAULT-LANGUAGE-MT-CACHING-STATE*");

    private static final SubLSymbol BUILD_FACT_SHEET_DEFAULT_LANGUAGE_MT = makeSymbol("BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT");

    private static final SubLSymbol $build_fact_sheet_default_language_mt_caching_state$ = makeSymbol("*BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT-CACHING-STATE*");

    private static final SubLSymbol FACT_SHEET_DEFAULT_DOMAIN_MT = makeSymbol("FACT-SHEET-DEFAULT-DOMAIN-MT");

    private static final SubLSymbol $fact_sheet_default_domain_mt_caching_state$ = makeSymbol("*FACT-SHEET-DEFAULT-DOMAIN-MT-CACHING-STATE*");

    private static final SubLSymbol BUILD_FACT_SHEET_DEFAULT_DOMAIN_MT = makeSymbol("BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT");

    private static final SubLSymbol $build_fact_sheet_default_domain_mt_caching_state$ = makeSymbol("*BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT-CACHING-STATE*");

    private static final SubLSymbol CONVERT_FACT_SHEET_LINK_TO_SPAN = makeSymbol("CONVERT-FACT-SHEET-LINK-TO-SPAN");

    private static final SubLString $str72$fact_sheet_sentence = makeString("fact-sheet-sentence");

    private static final SubLString $str73$ = makeString("");

    private static final SubLString $str74$_span_id__ = makeString("<span id='");

    private static final SubLString $str75$__class__fact_sheet_sentence__ = makeString("' class='fact-sheet-sentence'>");

    private static final SubLString $str76$__span_ = makeString("</span>");

    private static final SubLSymbol FACT_SHEET_VERBOSITY_P = makeSymbol("FACT-SHEET-VERBOSITY-P");

    private static final SubLList $list80 = list(makeSymbol("DATA"), makeSymbol("STATS"), makeSymbol("FOOTNOTES"), makeSymbol("FORMATTING-GUIDELINES"));

    private static final SubLString $$$Miscellaneous = makeString("Miscellaneous");

    private static final SubLSymbol GET_FACT_SHEET_FOR_TERM_IN_XML_WITH_ONLY_KB_SPECIFIED_CONTENT = makeSymbol("GET-FACT-SHEET-FOR-TERM-IN-XML-WITH-ONLY-KB-SPECIFIED-CONTENT");

    private static final SubLSymbol GET_FACT_SHEET_FOR_TERM_IN_HTML = makeSymbol("GET-FACT-SHEET-FOR-TERM-IN-HTML");

    private static final SubLList $list89 = list(new SubLObject[] { makeKeyword("DISPLAY-TITLE?"), NIL, makeKeyword("PRINT-STATS?"), T, makeKeyword("SHOW-COPYRIGHT?"), NIL, makeKeyword("MAX-TIME"), NIL, makeKeyword("STYLESHEET"), NIL, makeKeyword("STYLESHEETS"), NIL, makeKeyword("MARKUP-TYPE"),
	    $HTML, makeKeyword("SKIP-SECTIONS"), NIL, makeKeyword("SHOW-URI?"), NIL, makeKeyword("INCLUDE-SECTIONS"), NIL });

    private static final SubLList $list91 = list(list(makeSymbol("SECTION-KEY")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol FACT_SHEET_OPTIONAL_SECTION_START_COMMENT = makeSymbol("FACT-SHEET-OPTIONAL-SECTION-START-COMMENT");

    private static final SubLList $list94 = list(makeSymbol("*HTML-STREAM*"));

    private static final SubLSymbol FACT_SHEET_OPTIONAL_SECTION_END_COMMENT = makeSymbol("FACT-SHEET-OPTIONAL-SECTION-END-COMMENT");

    private static final SubLString $$$NOTE = makeString("NOTE");

    private static final SubLString $str99$Gathered__D_group__P_of_sentences = makeString("Gathered ~D group~:P of sentences for ~S in ~A");

    private static final SubLList $list100 = list(new SubLObject[] { list($TEST, makeSymbol("POSSIBLY-FACT-SHEET-DOMAIN-MT?")), list($TEST, makeSymbol("FACT-SHEET-VERBOSITY-P")), list($TEST, makeSymbol("NON-NEGATIVE-INTEGER-P")),
	    list($TEST, makeSymbol("NON-NEGATIVE-INTEGER-P")), list($TEST, makeSymbol("NON-NEGATIVE-NUMBER-P")), list($TEST, makeSymbol("NON-NEGATIVE-NUMBER-P")), list($TEST, makeSymbol("STRINGP")),
	    list($TEST, makeSymbol("STRINGP")), list($TEST, makeSymbol("STRINGP")), list($TEST, makeSymbol("STRINGP")), list($TEST, makeSymbol("STRINGP")) });

    private static final SubLList $list101 = list(new SubLObject[] { list($TEST, makeSymbol("POSSIBLY-FACT-SHEET-DOMAIN-MT?")), list($TEST, makeSymbol("FACT-SHEET-VERBOSITY-P")), list($TEST, makeSymbol("NON-NEGATIVE-INTEGER-P")),
	    list($TEST, makeSymbol("NON-NEGATIVE-INTEGER-P")), list($TEST, makeSymbol("NON-NEGATIVE-NUMBER-P")), list($TEST, makeSymbol("NON-NEGATIVE-NUMBER-P")), list($TEST, makeSymbol("STRINGP")),
	    list($TEST, makeSymbol("STRINGP")), list($TEST, makeSymbol("STRINGP")), list($TEST, makeSymbol("STRINGP")), list($TEST, makeSymbol("STRINGP")), list($TEST, makeSymbol("CYCL-REPRESENTED-TERM-P")) });

    private static final SubLSymbol CYCL_REPRESENTED_TERM_P = makeSymbol("CYCL-REPRESENTED-TERM-P");

    private static final SubLSymbol $sym103$HLMT_ = makeSymbol("HLMT?");

    static private final SubLList $list107 = cons(makeSymbol("LABEL"), makeSymbol("PARAGRAPH-DATA"));

    private static final SubLString $str108$Prefering_slot_value_format_for__ = makeString("Prefering slot value format for ~S");

    private static final SubLString $str109$Disprefering_slot_value_format_fo = makeString("Disprefering slot value format for ~S");

    private static final SubLSymbol $SLOT_VALUE_PREFERENCE_PATTERN = makeKeyword("SLOT-VALUE-PREFERENCE-PATTERN");

    private static final SubLString $$$center = makeString("center");

    private static final SubLString $str112$50_ = makeString("50%");

    private static final SubLString $$$right = makeString("right");

    private static final SubLString $$$title = makeString("title");

    private static final SubLString $$$factGroup = makeString("factGroup");

    private static final SubLList $list117 = cons(makeSymbol("SENTENCE"), makeSymbol("SENTENCE-DATA"));

    private static final SubLString $$$id = makeString("id");

    private static final SubLString $$$cycl = makeString("cycl");

    private static final SubLString $$$fact = makeString("fact");

    private static final SubLList $list121 = cons(makeSymbol("COLUMN"), makeSymbol("VALUE"));

    private static final SubLString $$$header = makeString("header");

    private static final SubLString $$$arg = makeString("arg");

    private static final SubLString $str124$_A = makeString("~A");

    private static final SubLSymbol $sym125$_ = makeSymbol("<");

    private static final SubLSymbol $sym126$TERM__ = makeSymbol("TERM-<");

    private static final SubLSymbol $sym127$FACT_SHEET_PRED_COUNT__ = makeSymbol("FACT-SHEET-PRED-COUNT-<");

    private static final SubLSymbol FACT_SHEET_TABLE_SENTENCE_DATA_PREDICATE = makeSymbol("FACT-SHEET-TABLE-SENTENCE-DATA-PREDICATE");

    private static final SubLList $list133 = list(CHAR_colon);

    private static final SubLSymbol FACT_SHEET_TERM_ID = makeSymbol("FACT-SHEET-TERM-ID");

    private static final SubLObject $const138$FactSheetTableSectionAndHeaderQue = reader_make_constant_shell("FactSheetTableSectionAndHeaderQuery");

    private static final SubLList $list148 = list(list(makeKeyword("AND"), list($TEST, makeSymbol("CYC-VAR?")), list($BIND, makeSymbol("VAR"))));

    private static final SubLList $list150 = list(reader_make_constant_shell("FactSheetSentenceIndexical"), reader_make_constant_shell("FactSheetTableTypeIndexical"), reader_make_constant_shell("FactSheetQueryContextIndexical"), reader_make_constant_shell("FactSheetTopicIndexical"));

    private static final SubLList $list152 = cons(makeSymbol("CONJUNCT"), makeSymbol("CONJUNCT-DATA"));

    private static final SubLSymbol FACT_SHEET_TABLE_TYPE_WIDTH = makeSymbol("FACT-SHEET-TABLE-TYPE-WIDTH");

    private static final SubLSymbol $sym159$SUMMARY_SENTENCE_PLIST_ = makeSymbol("SUMMARY-SENTENCE-PLIST?");

    private static final SubLSymbol SUMMARY_SENTENCE_PLIST_CYCL = makeSymbol("SUMMARY-SENTENCE-PLIST-CYCL");

    private static final SubLSymbol $sym161$INVALID_ASSERTION_ = makeSymbol("INVALID-ASSERTION?");

    private static final SubLSymbol $ALLOWED_TERM_TYPE = makeKeyword("ALLOWED-TERM-TYPE");

    private static final SubLList $list165 = cons(makeSymbol("SUMMARY-SENTENCE"), makeSymbol("PARAPHRASE"));

    private static final SubLSymbol $sym166$INVALID_FORT_ = makeSymbol("INVALID-FORT?");

    private static final SubLSymbol FACT_SHEET_SLOT_VALUE_STRING = makeSymbol("FACT-SHEET-SLOT-VALUE-STRING");

    private static final SubLObject $const168$QuantificationalRuleMacroPredicat = reader_make_constant_shell("QuantificationalRuleMacroPredicate-Canonical");

    private static final SubLString $str169$Wrong_number_of_args_in__S = makeString("Wrong number of args in ~S");

    private static final SubLString $str170$Couldn_t_find__S_in__S = makeString("Couldn't find ~S in ~S");

    private static final SubLSymbol $sym172$UNLEXIFIED_ = makeSymbol("UNLEXIFIED?");

    private static final SubLList $list175 = list(reader_make_constant_shell("TheCoordinationSet"));

    private static final SubLSymbol NON_PUBLIC_CONSTANT = makeSymbol("NON-PUBLIC-CONSTANT");

    private static final SubLSymbol $sym178$NON_PUBLIC_CONSTANT_ = makeSymbol("NON-PUBLIC-CONSTANT?");

    private static final SubLString $str179$Filtering__S___due_to_non_public_ = makeString("Filtering ~S~% due to non-public constant: ~S");

    private static final SubLSymbol $sym181$PROPRIETARY_CONSTANT_ = makeSymbol("PROPRIETARY-CONSTANT?");

    private static final SubLString $str182$Filtering__S___due_to_proprietary = makeString("Filtering ~S~% due to proprietary constant: ~S");

    private static final SubLString $str183$Filtering__S___due_to_blacklisted = makeString("Filtering ~S~% due to blacklisted source: ~S");

    private static final SubLString $str184$Filtering____S = makeString("Filtering~% ~S");

    private static final SubLSymbol $sym186$_EXIT = makeSymbol("%EXIT");

    private static final SubLString $$$Fact_Sheet_for_ = makeString("Fact Sheet for ");

    private static final SubLSymbol FACT_SHEET_STATS_P = makeSymbol("FACT-SHEET-STATS-P");

    private static final SubLString $$$factSheet = makeString("factSheet");

    private static final SubLString $str190$_Enesta_resources_followupLoader_ = makeString("/Enesta/resources/followupLoader.js");

    private static final SubLSymbol $kw192$SHOW_AD_ = makeKeyword("SHOW-AD?");

    private static final SubLSymbol $SHOW_INFO_LINK_URL = makeKeyword("SHOW-INFO-LINK-URL");

    private static final SubLSymbol $kw194$SHOW_URI_ = makeKeyword("SHOW-URI?");

    private static final SubLSymbol $kw195$SHOW_FOLLOWUP_WIDGET_ = makeKeyword("SHOW-FOLLOWUP-WIDGET?");

    private static final SubLString $str196$__DOCTYPE_html_PUBLIC_____W3C__DT = makeString("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");

    private static final SubLString $str197$_meta_http_equiv__X_UA_Compatible = makeString("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" >");

    private static final SubLString $$$stylesheet = makeString("stylesheet");

    private static final SubLString $str199$text_css = makeString("text/css");

    private static final SubLString $str200$_div_class__cycFollowup__termId__ = makeString("<div class='cycFollowup' termId=~S termString=~S></div>");

    private static final SubLString $str204$_script_src___A__type__text_javas = makeString("<script src='~A' type='text/javascript'></script>");

    private static final SubLString $$$WARN = makeString("WARN");

    private static final SubLString $str206$Unable_to_print_fact_sheet_statis = makeString("Unable to print fact sheet statistics for ~S");

    private static final SubLList $list207 = list(reader_make_constant_shell("nonSingular-Generic"));

    private static final SubLString $str208$A_Semantic_Web_URI_is_a_stable_na = makeString("A Semantic Web URI is a stable name for a concept that is designed to be understood by semantically-aware applications.  You can rely on this URI to refer to ");

    private static final SubLString $str209$__and_you_should_use_it_in_web_pa = makeString(", and you should use it in web page annotations and in software code to maximize interoperability with other semantic applications.");

    private static final SubLString $$$Technical_Details = makeString("Technical Details");

    private static final SubLString $str211$This_page_was_automatically_creat = makeString("This page was automatically created by Cyc using ");

    private static final SubLString $str212$automated_reasoning_and_natural_l = makeString("automated reasoning and natural language processing");

    private static final SubLString $str213$__ = makeString(". ");

    private static final SubLString $str214$Cyc_first_learned_about__A_on__A_ = makeString("Cyc first learned about ~A on ~A. ");

    private static final SubLString $$$The_ = makeString("The ");

    private static final SubLString $str216$http___sw_opencyc_org_docs_swuri_ = makeString("http://sw.opencyc.org/docs/swuri.html");

    private static final SubLString $$$Semantic_Web_URI = makeString("Semantic Web URI");

    private static final SubLString $str218$_for__A_is__ = makeString(" for ~A is: ");

    private static final SubLSymbol GET_FACT_SHEET_FOR_TERM_ID_IN_HTML = makeSymbol("GET-FACT-SHEET-FOR-TERM-ID-IN-HTML");

    private static final SubLSymbol CLEAR_ALL_FACT_SHEET_CACHES = makeSymbol("CLEAR-ALL-FACT-SHEET-CACHES");

    private static final SubLString $$$what_do_you_know_about_ = makeString("what do you know about ");

    private static final SubLString $$$tell_me_about_ = makeString("tell me about ");

    private static final SubLString $$$facts_about_ = makeString("facts about ");

    private static final SubLString $$$explain_ = makeString("explain ");

    private static final SubLString $$$fact_sheet_for_ = makeString("fact sheet for ");

    private static final SubLString $$$fact_sheet_about_ = makeString("fact sheet about ");

    private static final SubLString $$$show_ = makeString("show ");

    private static final SubLString $$$_facts = makeString(" facts");

    private static final SubLString $$$_knowledge = makeString(" knowledge");

    private static final SubLString $$$_fact_sheet = makeString(" fact sheet");

    private static final SubLList $list232 = list(reader_make_constant_shell("MtUnionFn"), reader_make_constant_shell("CommonEnglishMisspellingsMt"), reader_make_constant_shell("AllEnglishValidatedLexicalMicrotheoryPSC"));

    private static final SubLList $list233 = cons(makeSymbol("PATTERN-START"), makeSymbol("PATTERN-END"));

    private static final SubLList $list234 = list(makeKeyword("ABBREVS"), makeKeyword("ACRONYMS"));

    private static final SubLSymbol GET_POSSIBLE_FACT_SHEET_TERMS_MENTIONED_IN_STRING = makeSymbol("GET-POSSIBLE-FACT-SHEET-TERMS-MENTIONED-IN-STRING");

    private static final SubLSymbol TERM_OK_FOR_CAE_QUERY_SEARCH_TERM_BOX_P = makeSymbol("TERM-OK-FOR-CAE-QUERY-SEARCH-TERM-BOX-P");

    private static final SubLList $list239 = cons(makeSymbol("STRIPPED-STRING-DENOTS"), makeSymbol("STRIPPED-STRING"));

    private static final SubLList $list240 = list(makeSymbol("PHRASE-STRING"), makeSymbol("DENOTS"));

    private static final SubLSymbol SCALAR_INTERVAL_LEARN = makeSymbol("SCALAR-INTERVAL-LEARN");

    private static final SubLSymbol RKF_STANDARD_STRING_WORDIFY = makeSymbol("RKF-STANDARD-STRING-WORDIFY");

    private static final SubLList $list246 = list($CYCL, makeKeyword("T"), makeKeyword("INFLECTIONS"), T);

    private static final SubLSymbol SCALAR_INTERVAL_P = makeSymbol("SCALAR-INTERVAL-P");

    private static final SubLSymbol $scalar_interval_p_caching_state$ = makeSymbol("*SCALAR-INTERVAL-P-CACHING-STATE*");

    private static final SubLSymbol TERM_OK_FOR_FACT_SHEET_P = makeSymbol("TERM-OK-FOR-FACT-SHEET-P");

    private static final SubLList $list254 = list(reader_make_constant_shell("Event"), reader_make_constant_shell("Terrorist"), reader_make_constant_shell("TerroristGroup"));

    private static final SubLString $$$data = makeString("data");

    private static final SubLString $str256$fact_sheets = makeString("fact-sheets");

    private static final SubLString $str257$_S_does_not_specify_an_existing_d = makeString("~S does not specify an existing directory relative to the cyc home.");

    private static final SubLSymbol FACT_SHEET_TERM_ID_LOW = makeSymbol("FACT-SHEET-TERM-ID-LOW");

    private static final SubLSymbol $fact_sheet_term_id_low_caching_state$ = makeSymbol("*FACT-SHEET-TERM-ID-LOW-CACHING-STATE*");

    private static final SubLInteger $int$1024 = makeInteger(1024);

    private static final SubLSymbol FACT_SHEET_TERM_FROM_ID = makeSymbol("FACT-SHEET-TERM-FROM-ID");

    private static final SubLSymbol POSSIBLE_FACT_SHEET_TERM_ID_P = makeSymbol("POSSIBLE-FACT-SHEET-TERM-ID-P");

    private static final SubLSymbol WARN_UNKNOWN_FACT_SHEET_TERM_ID = makeSymbol("WARN-UNKNOWN-FACT-SHEET-TERM-ID");

    private static final SubLString $str264$Couldn_t_identify_term_from_fact_ = makeString("Couldn't identify term from fact-sheet ID ~S");

    private static final SubLSymbol $warn_unknown_fact_sheet_term_id_caching_state$ = makeSymbol("*WARN-UNKNOWN-FACT-SHEET-TERM-ID-CACHING-STATE*");

    private static final SubLSymbol FACT_SHEET_TERM_FROM_SPAN_ID = makeSymbol("FACT-SHEET-TERM-FROM-SPAN-ID");

    private static final SubLString $str267$Error_getting_fact_sheet_term_fro = makeString("Error getting fact-sheet term from span ID ~S: ~A");

    static private final SubLList $list268 = cons(makeSymbol("PRED"), makeSymbol("SENTENCE-GROUPS"));

    private static final SubLString $str269$Using_PPH_timeout_of__S_seconds_ = makeString("Using PPH timeout of ~S seconds.");

    private static final SubLString $str270$___Top_level_CycL___S = makeString("~% Top-level CycL: ~S");

    private static final SubLString $str272$Error_generating_paraphrases___A = makeString("Error generating paraphrases: ~A");

    private static final SubLString $str273$Generated__D_paragraph__P_contain = makeString("Generated ~D paragraph~:P containing ~D sentence~:P for ~S in ~A.");

    private static final SubLSymbol $sym275$HIGHER_PRIORITY_FACT_SHEET_CATEGORY_ = makeSymbol("HIGHER-PRIORITY-FACT-SHEET-CATEGORY?");

    private static final SubLList $list276 = list(reader_make_constant_shell("placeBasicDataSentence"), reader_make_constant_shell("agentBioDataSentence"), reader_make_constant_shell("agentDocumentationDataSentence"), reader_make_constant_shell("collectionDefinitionalDataSentence"),
	    reader_make_constant_shell("collectionDocumentationDataSentence"));

    private static final SubLSymbol FACT_SHEET_SENTENCE_GROUP_SUMMARY = makeSymbol("FACT-SHEET-SENTENCE-GROUP-SUMMARY");

    private static final SubLString $str278$Failed_to_paraphrase__D_sentence_ = makeString("Failed to paraphrase ~D sentence~:P for ~S:~% ~S");

    private static final SubLSymbol $fact_sheet_sentence_group_summary_caching_state$ = makeSymbol("*FACT-SHEET-SENTENCE-GROUP-SUMMARY-CACHING-STATE*");

    private static final SubLString $str280$_a_href_ = makeString("<a href=");

    private static final SubLString $str281$_ = makeString(">");

    private static final SubLString $str282$http___fact_sheet = makeString("http://fact-sheet");

    private static final SubLString $str284$Unable_to_open__S = makeString("Unable to open ~S");

    private static final SubLString $$$664 = makeString("664");

    private static final SubLList $list286 = list(makeString("<a href=\"http://fact-sheet"), makeString("<a href=\"http://assertion-edit"), makeString("<span id=\""), makeString("<a href=\"cg?FACT-SHEET&"));

    private static final SubLList $list287 = list(makeSymbol("FACT-SHEET-TERM-FROM-ID"), makeSymbol("FIND-OBJECT-BY-HL-EXTERNAL-ID-STRING"), makeSymbol("FIND-OBJECT-BY-COMPACT-HL-INTERNAL-ID-STRING"), makeSymbol("FACT-SHEET-TERM-FROM-ID"));

    private static final SubLString $str288$_a = makeString("<a");

    private static final SubLString $str289$_span = makeString("<span");

    private static final SubLList $list290 = list(makeSymbol("TERM"), makeSymbol("CLOSE-TAG"));

    private static final SubLString $str291$__a = makeString("</a");

    private static final SubLString $str292$__span = makeString("</span");

    private static final SubLList $list293 = list(makeSymbol("START-TOKEN"), makeSymbol("START-TOKEN-INDEX"), makeSymbol("TERM"), makeSymbol("CLOSE-TAG"));

    private static final SubLString $str295$close_tag__S_and_current_tag__S_d = makeString("close tag ~S and current tag ~S don't match");

    private static final SubLString $str296$__ = makeString("</");

    private static final SubLSymbol GET_TERM_AND_CLOSE_TAG_FROM_TOKEN = makeSymbol("GET-TERM-AND-CLOSE-TAG-FROM-TOKEN");

    private static final SubLList $list304 = list(list(list(makeString("<a href=\"http://fact-sheet|mx4rw|q|b|s0|zwp|eb|gdrc|n5|y29yc|a")), list(reader_make_constant_shell("UnitedStatesPresident"), makeString("</a>"))),
	    list(list(makeString("<a href=\"http://fact-sheet^mx4rw^q^b^s0^zwp^eb^gdrc^n5^y29yc^a")), list(reader_make_constant_shell("UnitedStatesPresident"), makeString("</a>"))), list(list(makeString("<span class=\"fs-category\">")), list(makeKeyword("DONT-REPLACE"), makeString("</span>"))));

    private static final SubLString $$$sentence = makeString("sentence");

    private static final SubLSymbol REMOVE_LINK = makeSymbol("REMOVE-LINK");

    private static final SubLSymbol COMPACT_HL_EXTERNAL_ID_STRING = makeSymbol("COMPACT-HL-EXTERNAL-ID-STRING");

    private static final SubLSymbol COMPACT_HL_INTERNAL_ID_STRING = makeSymbol("COMPACT-HL-INTERNAL-ID-STRING");

    private static final SubLSymbol LAST_ONE = makeSymbol("LAST-ONE");

    private static final SubLString $str310$fact_sheet_term = makeString("fact-sheet-term");

    static private final SubLList $list311 = list(makeSymbol("START-POSITION"), makeSymbol("END-POSITION"), makeSymbol("TERM"), makeSymbol("LINK-TEXT"), makeSymbol("LINKED-TEXT"));

    private static final SubLList $list312 = list(makeSymbol("AMOUNT"), makeSymbol("OLD"), makeSymbol("NEW"));

    private static final SubLSymbol $sym313$_ = makeSymbol(">");

    private static final SubLList $list314 = list(makeSymbol("ORIGINAL-OPEN-TAG"), makeSymbol("OPEN-TAG-POSITION"), makeSymbol("ORIGINAL-LINK-TOKENS"), makeSymbol("ORIGINAL-CLOSE-TAG"), makeSymbol("CLOSE-TAG-POSITION"), makeSymbol("TERM"));

    static private final SubLList $list315 = list(makeSymbol("OPEN-TAG"), makeSymbol("LINK-TEXT"), makeSymbol("CLOSE-TAG"));

    private static final SubLString $$$image = makeString("image");

    private static final SubLList $list321 = cons(makeSymbol("CATEGORY"), makeSymbol("PARAGRAPH-TEXTS"));

    private static final SubLString $$$white = makeString("white");

    private static final SubLString $str323$fs_outer_table = makeString("fs-outer-table");

    private static final SubLString $str324$fs_main_image = makeString("fs-main-image");

    private static final SubLString $str325$fs_in_cyc_logo = makeString("fs-in-cyc-logo");

    private static final SubLString $str326$fs_title = makeString("fs-title");

    private static final SubLString $str327$fs_title_div = makeString("fs-title-div");

    private static final SubLString $str328$fs_category = makeString("fs-category");

    private static final SubLString $str329$fs_fact_1 = makeString("fs-fact-1");

    private static final SubLString $str330$fs_fact_2 = makeString("fs-fact-2");

    private static final SubLString $str331$fs_footnote_1 = makeString("fs-footnote-1");

    private static final SubLString $str332$fs_footnote_2 = makeString("fs-footnote-2");

    private static final SubLList $list333 = list(makeSymbol("URL"), makeSymbol("LOGO-URL"), makeSymbol("BRAND-CLASS"), makeSymbol("ALT-TEXT"));

    private static final SubLString $$$_ = makeString(" ");

    private static final SubLString $$$Header = makeString("Header");

    private static final SubLString $$$url = makeString("url");

    private static final SubLString $$$category = makeString("category");

    private static final SubLString $$$factSheetSection = makeString("factSheetSection");

    private static final SubLString $$$footnotes = makeString("footnotes");

    private static final SubLString $str340$KB__ = makeString("KB: ");

    private static final SubLString $str341$System__ = makeString("System: ");

    private static final SubLList $list342 = list(new SubLObject[] { makeSymbol("DOMAIN-MT"), makeSymbol("VERBOSITY"), makeSymbol("SENTENCE-COUNT"), makeSymbol("SECTION-COUNT"), makeSymbol("INFO-GATHERING-TIME"), makeSymbol("PPH-TIME"), makeSymbol("SECONDSTRING"), makeSymbol("DATESTRING"),
	    makeSymbol("IMAGE-ID"), makeSymbol("KB-VERSION"), makeSymbol("CYC-REVISION"), makeSymbol("&OPTIONAL"), makeSymbol("TERM") });

    private static final SubLString $str343$Domain_mt___A = makeString("Domain mt: ~A");

    private static final SubLString $str344$Verbosity___A = makeString("Verbosity: ~A");

    private static final SubLString $str345$Sentence_Count___S = makeString("Sentence Count: ~S");

    private static final SubLString $str346$Section_Count___S = makeString("Section Count: ~S");

    private static final SubLString $str347$Information_Gathering_Time___a = makeString("Information Gathering Time: ~a");

    private static final SubLString $str348$Paraphrase_Time___a = makeString("Paraphrase Time: ~a");

    private static final SubLString $str349$Customization_and_Display_Time___ = makeString("Customization and Display Time: ~a");

    private static final SubLString $str350$_A_at__A_on__A = makeString("~A at ~A on ~A");

    private static final SubLString $$$Started = makeString("Started");

    private static final SubLString $$$Created = makeString("Created");

    private static final SubLString $str353$Image_ID___A = makeString("Image ID: ~A");

    private static final SubLString $str354$_A_A__A_A_ = makeString("~A~A ~A~A ");

    private static final SubLList $list355 = list(makeKeyword("TERSE"), makeKeyword("NORMAL"), makeKeyword("VERBOSE"), $MINI, makeKeyword("PUBLIC"));

    private static final SubLInteger $int$500 = makeInteger(500);

    private static final SubLInteger $int$200 = makeInteger(200);

    private static final SubLString $str358$FACT_SHEET_IMAGE_ROOT_ = makeString("FACT-SHEET-IMAGE-ROOT/");

    private static final SubLString $str361$FACT_SHEET_BASE_URL_ = makeString("FACT-SHEET-BASE-URL/");

    private static final SubLList $list362 = cons(makeSymbol("ORIGINAL"), makeSymbol("REPLACEMENT"));

    private static final SubLSymbol FACT_SHEET_IMAGE_FILE_ROOT_URL = makeSymbol("FACT-SHEET-IMAGE-FILE-ROOT-URL");

    private static final SubLString $str364$file___ = makeString("file://");

    private static final SubLSymbol $fact_sheet_image_file_root_url_caching_state$ = makeSymbol("*FACT-SHEET-IMAGE-FILE-ROOT-URL-CACHING-STATE*");

    private static final SubLString $str366$___img_ = makeString("../img/");

    private static final SubLSymbol FACT_SHEET_IMAGE_URL_ROOT = makeSymbol("FACT-SHEET-IMAGE-URL-ROOT");

    private static final SubLSymbol $sym368$_URL = makeSymbol("?URL");

    private static final SubLList $list369 = list(reader_make_constant_shell("salientTermsImageRoot"), makeSymbol("?URL"));

    private static final SubLSymbol $fact_sheet_image_url_root_caching_state$ = makeSymbol("*FACT-SHEET-IMAGE-URL-ROOT-CACHING-STATE*");

    private static final SubLSymbol $sym373$_SENTENCE = makeSymbol("?SENTENCE");

    private static final SubLList $list376 = list(makeSymbol("HTML"), makeSymbol("FORMATTING-DIRECTIVES"));

    private static final SubLSymbol GET_MINI_FACT_SHEET_FOR_TERM_CACHED = makeSymbol("GET-MINI-FACT-SHEET-FOR-TERM-CACHED");

    private static final SubLString $str378$Query_got_mini_fact_sheet_of_leng = makeString("Query got mini fact sheet of length ~S for ~S");

    private static final SubLString $str379$Query_failed_to_get_mini_fact_she = makeString("Query failed to get mini fact sheet for ~S");

    private static final SubLSymbol $get_mini_fact_sheet_for_term_cached_caching_state$ = makeSymbol("*GET-MINI-FACT-SHEET-FOR-TERM-CACHED-CACHING-STATE*");

    private static final SubLString $str382$Using_soft_query_timeout_of__S_se = makeString("Using soft query timeout of ~S seconds.");

    private static final SubLSymbol $PROBABLY_APPROXIMATELY_DONE = makeKeyword("PROBABLY-APPROXIMATELY-DONE");

    private static final SubLFloat $float$0_99 = makeDouble(0.99);

    private static final SubLObject $const385$GetFactSheetBuilderQueriesForTopi = reader_make_constant_shell("GetFactSheetBuilderQueriesForTopic");

    private static final SubLList $list387 = list(makeKeyword("TEMPLATE"), makeSymbol("?KBQ"));

    private static final SubLString $$$FactSheetBuilderQuery = makeString("FactSheetBuilderQuery");

    private static final SubLSymbol FACT_SHEET_SENTENCES_FOR_TERM_FROM_KBQ = makeSymbol("FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ");

    private static final SubLString $str390$Caught_error_while_running__S_for = makeString("Caught error while running ~S for ~S:~% ~A");

    private static final SubLString $str391$_S____yielded__D_paragraph__P_in_ = makeString("~S:~% yielded ~D paragraph~:P in ~A for ~S");

    private static final SubLSymbol $fact_sheet_sentences_for_term_from_kbq_caching_state$ = makeSymbol("*FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ-CACHING-STATE*");

    private static final SubLInteger $int$128 = makeInteger(128);

    private static final SubLSymbol FACT_SHEET_SENTENCES_FOR_TERM_INTERNAL = makeSymbol("FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL");

    private static final SubLSymbol $FACT_SHEET_INFERENCE_ERROR = makeKeyword("FACT-SHEET-INFERENCE-ERROR");

    private static final SubLList $list396 = cons(makeSymbol("PRED"), makeSymbol("SUMMARY-SENTENCE"));

    private static final SubLList $list397 = cons(makeSymbol("PRED"), makeSymbol("SUMMARY-SENTENCES"));

    private static final SubLSymbol $sym398$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_ = makeSymbol("FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?");

    private static final SubLSymbol $fact_sheet_sentences_for_term_internal_caching_state$ = makeSymbol("*FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL-CACHING-STATE*");

    private static final SubLList $list400 = list(new SubLObject[] { list(reader_make_constant_shell("isa"), ONE_INTEGER), list(reader_make_constant_shell("internationalOrganizationMemberCountries"), TWO_INTEGER), list(reader_make_constant_shell("relationInstanceAll"), TWO_INTEGER, THREE_INTEGER),
	    list(reader_make_constant_shell("relationInstanceExistsAndOnly"), TWO_INTEGER), list(reader_make_constant_shell("relationInstanceExistsCount"), TWO_INTEGER), list(reader_make_constant_shell("relationInstanceExists"), TWO_INTEGER),
	    list(reader_make_constant_shell("relationInstanceExistsMany"), TWO_INTEGER), list(reader_make_constant_shell("relationInstanceExistsMax"), TWO_INTEGER), list(reader_make_constant_shell("relationInstanceExistsMin"), TWO_INTEGER),
	    list(reader_make_constant_shell("relationInstanceExistsRange"), TWO_INTEGER) });

    private static final SubLFloat $float$0_5 = makeDouble(0.5);

    private static final SubLList $list402 = cons(reader_make_constant_shell("relationInstanceExistsCount"), makeKeyword("ANYTHING"));

    private static final SubLString $str404$_S___implies__S = makeString("~S~% implies ~S");

    private static final SubLList $list405 = cons(reader_make_constant_shell("relationInstanceExists"), makeKeyword("ANYTHING"));

    private static final SubLString $str406$_S___is_a_trivial_meta_support_of = makeString("~S~% is a trivial meta support of ~S");

    private static final SubLString $str408$_S___is_highly_prevalent_among_in = makeString("~S~% is highly prevalent among instances of ~S");

    private static final SubLSymbol $sym409$_FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES__CACHING_STATE_ = makeSymbol("*FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?-CACHING-STATE*");

    private static final SubLSymbol $sym411$FACT_HIGHLY_PREVALENT_AMONG_INSTANCES__CACHED = makeSymbol("FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED");

    private static final SubLFloat $float$0_9 = makeDouble(0.9);

    private static final SubLSymbol $sym413$_FACT_HIGHLY_PREVALENT_AMONG_INSTANCES__CACHED_CACHING_STATE_ = makeSymbol("*FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED-CACHING-STATE*");

    private static final SubLSymbol $sym415$RULE_ASSERTION_ = makeSymbol("RULE-ASSERTION?");

    private static final SubLList $list416 = cons(reader_make_constant_shell("SomeTimeInIntervalFn"), makeKeyword("ANYTHING"));

    private static final SubLObject $$Always_TimeInterval = reader_make_constant_shell("Always-TimeInterval");

    private static final SubLString $str424$_A_is_not_a__A = makeString("~A is not a ~A");

    private static final SubLString $$$continue_anyway = makeString("continue anyway");

    private static final SubLString $str429$_A_is_not_a_valid__sbhl_type_erro = makeString("~A is not a valid *sbhl-type-error-action* value");

    private static final SubLString $str433$_A_is_neither_SET_P_nor_LISTP_ = makeString("~A is neither SET-P nor LISTP.");

    private static final SubLString $str434$attempting_to_bind_direction_link = makeString("attempting to bind direction link variable, to NIL. macro body not executed.");

    private static final SubLString $str435$Node__a_does_not_pass_sbhl_type_t = makeString("Node ~a does not pass sbhl-type-test ~a~%");

    private static final SubLSymbol FACT_SHEET_TRANSITIVITY_CHECK = makeSymbol("FACT-SHEET-TRANSITIVITY-CHECK");

    private static final SubLSymbol $fact_sheet_transitivity_check_caching_state$ = makeSymbol("*FACT-SHEET-TRANSITIVITY-CHECK-CACHING-STATE*");

    private static final SubLList $list438 = cons(makeUninternedSymbol("KEY"), makeSymbol("PRED-SENTENCES"));

    private static final SubLString $str439$Added__D_THCL_sentence__P_in__5F_ = makeString("Added ~D THCL sentence~:P in ~5F seconds.");

    private static final SubLList $list440 = cons(makeSymbol("PRED"), makeSymbol("ARGNUM"));

    private static final SubLString $$$Fact_Sheet_Query_Daemon = makeString("Fact Sheet Query Daemon");

    private static final SubLSymbol FACT_SHEET_QUERY_DAEMON_RUN = makeSymbol("FACT-SHEET-QUERY-DAEMON-RUN");

    private static final SubLString $str444$Fact_Sheet_Query_Daemon_caught_er = makeString("Fact Sheet Query Daemon caught error while working on~% (~S ~S ~S ~S):~% ~S");

    private static final SubLInteger $int$300 = makeInteger(300);

    private static final SubLString $str447$Hit_soft_timeout_of__S_seconds_af = makeString("Hit soft timeout of ~S seconds after getting ~S query results for ~S");

    private static final SubLString $str448$Hit_hard_timeout_of__S_seconds_af = makeString("Hit hard timeout of ~S seconds after getting ~S query-results for ~S");

    private static final SubLSymbol FACT_SHEET_LABEL_FOR_CATEGORY = makeSymbol("FACT-SHEET-LABEL-FOR-CATEGORY");

    private static final SubLSymbol $fact_sheet_label_for_category_caching_state$ = makeSymbol("*FACT-SHEET-LABEL-FOR-CATEGORY-CACHING-STATE*");

    static private final SubLList $list452 = cons(makeSymbol("CATEGORY"), makeSymbol("SENTENCES"));

    private static final SubLList $list453 = cons(makeUninternedSymbol("KEY"), makeSymbol("SENTENCES"));

    private static final SubLSymbol $sym454$FACT_SHEET_SENTENCE_MORE_RECENT_ = makeSymbol("FACT-SHEET-SENTENCE-MORE-RECENT?");

    private static final SubLSymbol FACT_SHEET_SENTENCE_TIME_INTERVAL_CACHED = makeSymbol("FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED");

    private static final SubLSymbol $fact_sheet_sentence_time_interval_cached_caching_state$ = makeSymbol("*FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED-CACHING-STATE*");

    private static final SubLSymbol FACT_SHEET_SENTENCE_PRECEDENCE_FOR_CATEGORY = makeSymbol("FACT-SHEET-SENTENCE-PRECEDENCE-FOR-CATEGORY");

    static private final SubLList $list464 = cons(makeSymbol("FIRST-SENTENCE"), makeSymbol("REMAINING"));

    private static final SubLSymbol $sym465$FACT_SHEET_SENTENCES_EQUAL_ = makeSymbol("FACT-SHEET-SENTENCES-EQUAL?");

    private static final SubLString $str466$_S___has_coherence__S_to____S = makeString("~S~% has coherence ~S to~% ~S");

    private static final SubLSymbol FACT_SHEET_SENTENCE_COHERENCE = makeSymbol("FACT-SHEET-SENTENCE-COHERENCE");

    private static final SubLList $list468 = cons(makeSymbol("PRED"), makeSymbol("SENTENCES"));

    private static final SubLSymbol FACT_SHEET_SENTENCE_PREDICATE = makeSymbol("FACT-SHEET-SENTENCE-PREDICATE");

    private static final SubLSymbol $sym470$FACT_SHEET_SENTENCE_REFERENCES_EARLIER_DATE_ = makeSymbol("FACT-SHEET-SENTENCE-REFERENCES-EARLIER-DATE?");

    private static final SubLString $str471$Earlierness_problem_____S____S = makeString("Earlierness problem:~% ~S~% ~S");

    private static final SubLSymbol $sym473$EXPRESSION_CONTAINS_ = makeSymbol("EXPRESSION-CONTAINS?");

    private static final SubLSymbol $sym474$DATE_ = makeSymbol("DATE<");

    private static final SubLSymbol $kw475$DISPLAY_TITLE_ = makeKeyword("DISPLAY-TITLE?");

    private static final SubLSymbol $kw476$PRINT_STATS_ = makeKeyword("PRINT-STATS?");

    private static final SubLSymbol $kw477$SHOW_COPYRIGHT_ = makeKeyword("SHOW-COPYRIGHT?");

    private static final SubLString $str478$KB____0123456789_____ = makeString("KB: ([0123456789.]*) ");

    private static final SubLString $str479$System____0123456789_____ = makeString("System: ([0123456789.]*) ");

    private static final SubLString $str480$_span_class__copyright__ = makeString("<span class=\"copyright\">");

    private static final SubLString $$$Copyright = makeString("Copyright");

    private static final SubLSymbol $fact_sheet_optional_section_start_comment_caching_state$ = makeSymbol("*FACT-SHEET-OPTIONAL-SECTION-START-COMMENT-CACHING-STATE*");

    private static final SubLSymbol $fact_sheet_optional_section_end_comment_caching_state$ = makeSymbol("*FACT-SHEET-OPTIONAL-SECTION-END-COMMENT-CACHING-STATE*");

    private static final SubLString $$$Start_Fact_Sheet_Section_ = makeString("Start Fact Sheet Section ");

    private static final SubLString $$$End_Fact_Sheet_Section_ = makeString("End Fact Sheet Section ");

    private static final SubLSymbol $sym486$TERM_HAS_PRECACHED_FACT_SHEET_ = makeSymbol("TERM-HAS-PRECACHED-FACT-SHEET?");

    private static final SubLList $list488 = cons(makeSymbol("DOMAIN-MT"), makeSymbol("LANGUAGE-MTS"));

    private static final SubLList $list489 = cons(makeSymbol("KNOWN-DOMAIN-MT"), makeSymbol("LANGUAGE-MTS"));

    private static final SubLList $list490 = list(makeString("cfasl"), makeString("html"));

    private static final SubLString $$$html = makeString("html");

    private static final SubLSymbol $IGNORE_ERRORS_TARGET = makeKeyword("IGNORE-ERRORS-TARGET");

    private static final SubLSymbol IGNORE_ERRORS_HANDLER = makeSymbol("IGNORE-ERRORS-HANDLER", "SUBLISP");

    private static final SubLSymbol $kw494$FELL_BACK_ON_DEFAULT_ = makeKeyword("FELL-BACK-ON-DEFAULT?");

    private static final SubLString $$$Recently_Added = makeString("Recently Added");

    private static final SubLList $list496 = list(new SubLObject[] { makeSymbol("DOMAIN-MT"), makeSymbol("VERBOSITY"), makeSymbol("SENTENCE-COUNT"), makeSymbol("SECTION-COUNT"), makeSymbol("INFO-GATHERING-TIME"), makeSymbol("PPH-TIME"), makeSymbol("SECOND-STRING"), makeSymbol("DATE-STRING"),
	    makeSymbol("CYC-IMAGE-ID"), makeSymbol("KB-VERSION-STRING"), makeSymbol("CYC-REVISION-STRING"), makeSymbol("&OPTIONAL"), makeSymbol("TERM") });

    private static final SubLSymbol MTS_WITH_PRECACHED_FACT_SHEET_DATA_FOR_TERM = makeSymbol("MTS-WITH-PRECACHED-FACT-SHEET-DATA-FOR-TERM");

    private static final SubLString $$$cdolist = makeString("cdolist");

    private static final SubLString $str500$_ = makeString("/");

    static private final SubLList $list501 = list(CHAR_slash);

    private static final SubLString $$$cfasl = makeString("cfasl");

    private static final SubLString $str506$Error_loading_data_for__S___A = makeString("Error loading data for ~S: ~A");

    private static final SubLString $$$This_fact_sheet_for_ = makeString("This fact sheet for ");

    private static final SubLString $str508$_is_under_construction__Come_back = makeString(" is under construction. Come back soon.");

    private static final SubLString $$$775 = makeString("775");

    private static final SubLString $str510$Couldn_t_create_directory_for_fac = makeString("Couldn't create directory for fact sheet for ~S~% directory: ~S");

    private static final SubLString $str511$_ = makeString(".");

    private static final SubLString $str512$_under_construction_ = makeString("-under-construction.");

    private static final SubLString $str513$_html = makeString(".html");

    private static final SubLString $str514$under_construction__Come_back_soo = makeString("under construction. Come back soon.");

    private static final SubLString $str515$Gathering_old_under_construction_ = makeString("Gathering old under-construction fact-sheets...");

    private static final SubLString $str516$_Directory__ = makeString(" Directory: ");

    private static final SubLString $str517$_under_construction_cfasl = makeString("-under-construction.cfasl");

    private static final SubLString $str519$_S_is_not_a_valid_extension__Must = makeString("~S is not a valid extension. Must be one of ~S");

    private static final SubLString $str520$Couldn_t_create_directory_for_fac = makeString("Couldn't create directory for fact sheet for ~S~% directory: ~A");

    private static final SubLString $str521$Couldn_t_write_fact_sheet_for__S_ = makeString("Couldn't write fact sheet for ~S on try ~A. Got error message: ~S");

    private static final SubLString $str522$Couldn_t_write_fact_sheet_for__S_ = makeString("Couldn't write fact sheet for ~S on final try. Got error message: ~S");

    private static final SubLString $str523$Couldn_t_write_fact_sheet_formatt = makeString("Couldn't write fact sheet formatting guidelines for ~S Got error message: ~S");

    private static final SubLString $str524$Couldn_t_create_directory_for_fac = makeString("Couldn't create directory for fact sheet data for ~S~% directory: ~A");

    private static final SubLString $str525$Couldn_t_write_fact_sheet_data_fo = makeString("Couldn't write fact sheet data for ~S Got error message: ~S");

    private static final SubLString $$$Fact_Sheet_Updater = makeString("Fact Sheet Updater");

    private static final SubLSymbol UPDATE_FACT_SHEETS = makeSymbol("UPDATE-FACT-SHEETS");

    private static final SubLString $$$Stale_Fact_Sheet_Updater = makeString("Stale Fact Sheet Updater");

    private static final SubLSymbol UPDATE_ALL_STALE_FACT_SHEETS = makeSymbol("UPDATE-ALL-STALE-FACT-SHEETS");

    private static final SubLList $list530 = list($MINI, makeKeyword("NORMAL"));

    private static final SubLList $list531 = list(makeKeyword("MISSING"), makeKeyword("STALE"));

    private static final SubLString $$$All_Fact_Sheet_Updater = makeString("All Fact Sheet Updater");

    private static final SubLSymbol UPDATE_ALL_FACT_SHEETS = makeSymbol("UPDATE-ALL-FACT-SHEETS");

    private static final SubLString $$$Fact_Sheet_Log_File_Watcher = makeString("Fact Sheet Log File Watcher");

    private static final SubLSymbol WATCH_FACT_SHEET_LOG_FILE = makeSymbol("WATCH-FACT-SHEET-LOG-FILE");

    private static final SubLInteger $int$60 = makeInteger(60);

    private static final SubLString $str537$No_progress_after_at_least__A_try = makeString("No progress after at least ~A trying to update~% ~S");

    private static final SubLString $str538$Halting_fact_sheet_updating___S = makeString("Halting fact-sheet updating: ~S");

    private static final SubLList $list539 = list(makeInteger(20120630), ZERO_INTEGER);

    private static final SubLString $str543$__Logging_Fact_Sheet_generation_t = makeString("~&Logging Fact-Sheet generation to file:~% ~S~%");

    private static final SubLString $str545$Updating_fact_sheets_for_all_fact = makeString("Updating fact sheets for all fact-sheetable instances of ~S that don't have fact sheets generated since ~S~%  verbosity: ~S~%  domain mt: ~S~%  language mt: ~S");

    private static final SubLList $list547 = list(makeUninternedSymbol("LINK-NODE"), makeUninternedSymbol("MT"), makeUninternedSymbol("TV"));

    private static final SubLString $str548$Closing_log_ = makeString("Closing log.");

    private static final SubLString $str549$Fact_Sheet_updater_for_Public_Fac = makeString("Fact Sheet updater for Public Fact Sheet Data");

    private static final SubLSymbol UPDATE_FACT_SHEETS_OF_FS_TYPE_NOT_UPDATED_SINCE = makeSymbol("UPDATE-FACT-SHEETS-OF-FS-TYPE-NOT-UPDATED-SINCE");

    private static final SubLString $$$Updating_ = makeString("Updating ");

    private static final SubLString $$$_fact_sheets = makeString(" fact sheets");

    private static final SubLString $str553$Updating_fact_sheets_for_public_t = makeString("Updating fact sheets for public-type ~S that haven't been generated since ~S~%  verbosity: ~S~%  domain mt: ~S~% language mt: ~S");

    private static final SubLString $str554$Updating_stale_fact_sheets___ = makeString("Updating stale fact sheets...");

    private static final SubLString $str555$Updating_all_stale_fact_sheets_fr = makeString("Updating all stale fact sheets from ~S");

    private static final SubLString $str556$Now_doing__S__S__S = makeString("Now doing ~S ~S ~S");

    private static final SubLString $str557$Stale_Fact_Sheet_Updater_error_on = makeString("Stale Fact-Sheet Updater error on ~S: ~A");

    private static final SubLString $str558$Abandoning_after__D_errors_ = makeString("Abandoning after ~D errors.");

    private static final SubLString $str559$Instructed_to_stop_updates_after_ = makeString("Instructed to stop updates after current term.");

    private static final SubLString $str560$Finished_stale_fact_sheet_update_ = makeString("Finished stale fact-sheet update sweep.");

    private static final SubLString $str561$Sleeping_until_8_00_tonight__Zzz_ = makeString("Sleeping until 8:00 tonight. Zzz...");

    private static final SubLString $str562$Checking_for_fact_sheets_that_hav = makeString("Checking for fact sheets that have become stale...");

    private static final SubLString $$$KEYWORD = makeString("KEYWORD");

    private static final SubLString $str566$under_construction = makeString("under-construction");

    private static final SubLString $str567$_cfasl = makeString(".cfasl");

    private static final SubLString $str568$Couldn_t_determine_focal_term_fro = makeString("Couldn't determine focal term from filename:~% ~S");

    private static final SubLString $str569$Can_t_update_fact_sheet_for__S___ = makeString("Can't update fact sheet for ~S -- not a CYCL-DENOTATIONAL-TERM-P.");

    private static final SubLString $str570$Can_t_update_fact_sheet_for__S___ = makeString("Can't update fact sheet for ~S -- couldn't determine verbosity from ~S");

    private static final SubLString $str571$Can_t_update_fact_sheet_for__S___ = makeString("Can't update fact sheet for ~S -- Domain mt ~S fails HLMT?");

    private static final SubLString $str572$Can_t_update_fact_sheet_for__S___ = makeString("Can't update fact sheet for ~S -- Language mt ~S fails HLMT?");

    private static final SubLString $str573$Updating_stale_fact_sheet_for__S_ = makeString("Updating stale fact sheet for ~S ~S ~S ~S");

    private static final SubLList $list575 = list(list(makeSymbol("FORT")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol DO_ALL_FORT_INSTANCES = makeSymbol("DO-ALL-FORT-INSTANCES");

    private static final SubLList $list578 = list(reader_make_constant_shell("TerroristAttack"));

    private static final SubLList $list579 = list(NIL);

    private static final SubLInteger $int$50 = makeInteger(50);

    private static final SubLString $str581$term_ids_to_update_ = makeString("term-ids-to-update/");

    private static final SubLString $str585$_term_ids_to_update_ = makeString("/term-ids-to-update/");

    private static final SubLSymbol FIND_NART_BY_ID = makeSymbol("FIND-NART-BY-ID");

    private static final SubLString $str590$Invalid_term_type_specification__ = makeString("Invalid term-type specification ~A.~%");

    private static final SubLString $$$a_specific_ID_set = makeString("a specific ID set");

    private static final SubLString $$$Updating_fact_sheets_from_ = makeString("Updating fact sheets from ");

    private static final SubLString $str593$Skipping__S__which_was_updated_on = makeString("Skipping ~S, which was updated on ~S");

    private static final SubLString $str594$Writing_fact_sheet_data_for__S_to = makeString("Writing fact-sheet-data for ~S to ~S");

    private static final SubLString $str595$Couldn_t_find_fact_sheet_file_for = makeString("Couldn't find fact-sheet file for ~S");

    private static final SubLString $str596$term_ids_ = makeString("term-ids-");

    private static final SubLString $str597$_3__0D = makeString("~3,'0D");

    private static final SubLString $str598$Updating_fact_sheets_file___D_of_ = makeString("Updating fact sheets file #~D of ~S");

    private static final SubLString $str599$Couldn_t_find_id_file__S = makeString("Couldn't find id-file ~S");

    private static final SubLSymbol FACT_SHEET_STATUS_P = makeSymbol("FACT-SHEET-STATUS-P");

    private static final SubLString $str602$Scanning_for_fact_sheets_requirin = makeString("Scanning for fact sheets requiring update ....");

    private static final SubLString $str604$Determining_for_all_fact_sheet_na = makeString("Determining for all fact sheet names for this KB ....");

    private static final SubLString $str606$THIS_WORKER_NUMBER___a__must_be_l = makeString("THIS-WORKER-NUMBER (~a) must be less than NUMBER-OF-WORKERS (~a)");

    private static final SubLString $str607$Starting_fact_sheet_update_sessio = makeString("Starting fact-sheet update session (worker #~S of ~S).~% Verbosities: ~S Target-Statuses: ~S Domain-mt: ~S Language-mt: ~S");

    private static final SubLString $str608$Iterating_over_all_FORTs_to_updat = makeString("Iterating over all FORTs to update fact sheets as necessary...");

    private static final SubLList $list609 = list(makeUninternedSymbol("START"), makeUninternedSymbol("END"), makeUninternedSymbol("DELTA"));

    private static final SubLString $str610$Starting__S_update_on__S__Status_ = makeString("Starting ~S update on ~S. Status: ~S");

    private static final SubLString $str611$Fact_Sheet_Updater_error_on__S___ = makeString("Fact-Sheet Updater error on ~S: ~A");

    private static final SubLString $str612$Halting_Fact_Sheet_Update_after__ = makeString("Halting Fact-Sheet Update after ~S errors");

    private static final SubLString $str613$Finished_fact_sheet_update_sessio = makeString("Finished fact-sheet update session.");

    private static final SubLString $str614$Starting_fact_sheet_update_sessio = makeString("Starting fact-sheet update session.~% Verbosity: ~S Domain-mt: ~S Language-mt: ~S Stop-after: ~S");

    private static final SubLString $str615$Fact_Sheet_Updater_error__ = makeString("Fact-Sheet Updater error: ");

    private static final SubLString $$$Background = makeString("Background");

    private static final SubLString $$$Run = makeString("Run");

    private static final SubLList $list618 = list(cons(makeString("daves"), makeKeyword("NORMAL")), cons(makeString("baxter"), makeKeyword("NORMAL")));

    private static final SubLSymbol $fact_sheet_screensavers$ = makeSymbol("*FACT-SHEET-SCREENSAVERS*");

    private static final SubLString $$$Fact_Sheet_Screensaver = makeString("Fact Sheet Screensaver");

    private static final SubLSymbol UPDATE_FACT_SHEET_SCREENSAVER = makeSymbol("UPDATE-FACT-SHEET-SCREENSAVER");

    private static final SubLString $str622$Starting_fact_sheet_update_screen = makeString("Starting fact-sheet update screensaver~% Verbosity: ~S Domain-mt: ~S Language-mt: ~S Start-hour: ~S:00 End-hour: ~A");

    private static final SubLString $str623$_00 = makeString(":00");

    private static final SubLString $$$midnight = makeString("midnight");

    private static final SubLString $str625$Start_time_hasn_t_arrived__Sleepi = makeString("Start time hasn't arrived. Sleeping until ~S:00.~%Zzzz.");

    private static final SubLString $str626$End_time_of__S_00_has_passed__Sle = makeString("End time of ~S:00 has passed. Sleeping until ~S:00.~%Zzzz.");

    private static final SubLString $str627$Been_told_to_sleep__Sleeping_for_ = makeString("Been told to sleep. Sleeping for ~S seconds.~%Zzzz.");

    private static final SubLString $str628$Image_appears_to_be_busy__Sleepin = makeString("Image appears to be busy. Sleeping for ~S seconds.~%Zzzz.");

    private static final SubLString $str629$Fact_Sheet_Screensavers_have_been = makeString("Fact Sheet Screensavers have been instructed to die.");

    private static final SubLString $str630$Updating__S = makeString("Updating ~S");

    private static final SubLString $str631$Finished_fact_sheet_for__S_in__5F = makeString("Finished fact sheet for ~S in ~5F seconds.");

    private static final SubLString $str632$Caught_error_while_updating__S_fa = makeString("Caught error while updating ~S fact sheet for ~S:~% ~A");

    static private final SubLList $list633 = list(makeSymbol("HTML"), makeSymbol("FORMATTING-GUIDELINES"));

    private static final SubLInteger $int$1800 = makeInteger(1800);

    private static final SubLString $str635$Encountered_inference_error_while = makeString("Encountered inference error while updating ~S:~% ~S");

    private static final SubLList $list636 = list(makeSymbol("OLD-DATA"), makeSymbol("OLD-STATS"), makeSymbol("OLD-FOOTNOTES"), makeSymbol("OLD-FORMATTING-GUIDELINES"));

    private static final SubLString $str637$Launching_make_up_updater_for__S_ = makeString("Launching make-up updater for ~S. ~A");

    private static final SubLString $str638$_Timed_out_after_ = makeString("(Timed out after ");

    private static final SubLString $str639$_seconds__ = makeString(" seconds.)");

    private static final SubLString $str640$_Didn_t_time_out__Probably_ran_in = makeString("(Didn't time out. Probably ran into an error.)");

    private static final SubLString $str641$Fact_Sheet_Post_Timeout_Updater = makeString("Fact Sheet Post-Timeout Updater");

    private static final SubLSymbol UPDATE_FACT_SHEET_FOR_TERM = makeSymbol("UPDATE-FACT-SHEET-FOR-TERM");

    static private final SubLList $list643 = list(makeSymbol("DATE"), makeSymbol("SECOND"));

    private static final SubLList $list644 = list(makeSymbol("MODIFIED-DATE"), makeSymbol("MODIFIED-SECOND"));

    private static final SubLList $list645 = list(makeKeyword("OR"), list($TEST, makeSymbol("ARG-ISA-BINARY-PRED?")), list($TEST, makeSymbol("ARG-GENL-BINARY-PRED?")));

    private static final SubLList $list647 = list(makeKeyword("OR"), list($TEST, makeSymbol("ARG-ISA-TERNARY-PRED?")), list($TEST, makeSymbol("ARG-GENL-TERNARY-PRED?")));

    private static final SubLList $list648 = list(makeKeyword("OR"), reader_make_constant_shell("resultIsa"), reader_make_constant_shell("resultGenl"));

    private static final SubLList $list649 = list(makeKeyword("OR"), reader_make_constant_shell("isa"), reader_make_constant_shell("genls"));

    private static final SubLString $str650$_S_was_modified_on__S____New_GAF_ = makeString("~S was modified on ~S.~% New GAF: ~S");

    private static final SubLString $str651$_formatting_guidelines_cfasl = makeString("-formatting-guidelines.cfasl");

    private static final SubLList $list652 = list(makeSymbol("VERBOSITY-STRING"), makeSymbol("DOMAIN-MT-ID"), makeSymbol("LANGUAGE-MT-ID"));

    private static final SubLSymbol FACT_SHEET_DIRECTORY_FROM_LIST = makeSymbol("FACT-SHEET-DIRECTORY-FROM-LIST");

    private static final SubLSymbol $fact_sheet_directory_from_list_caching_state$ = makeSymbol("*FACT-SHEET-DIRECTORY-FROM-LIST-CACHING-STATE*");

    private static final SubLSymbol FACT_SHEET_UPDATE_TERM_PRIORITIZER = makeSymbol("FACT-SHEET-UPDATE-TERM-PRIORITIZER");

    private static final SubLSymbol FACT_SHEET_UPDATE_TERM_PRIORITIZER_P = makeSymbol("FACT-SHEET-UPDATE-TERM-PRIORITIZER-P");

    private static final SubLList $list657 = list(
	    new SubLObject[] { makeSymbol("STALE-TERMS"), makeSymbol("MISSING-TERMS"), makeSymbol("UP-TO-DATE-TERMS"), makeSymbol("THREAD"), makeSymbol("SHOULD-SLEEP?"), makeSymbol("VERBOSITY"), makeSymbol("DOMAIN-MT"), makeSymbol("LANGUAGE-MT"), makeSymbol("NICE-LEVEL"), makeSymbol("NEW-DAYS") });

    private static final SubLList $list658 = list(new SubLObject[] { makeKeyword("STALE-TERMS"), makeKeyword("MISSING-TERMS"), makeKeyword("UP-TO-DATE-TERMS"), makeKeyword("THREAD"), makeKeyword("SHOULD-SLEEP?"), makeKeyword("VERBOSITY"), makeKeyword("DOMAIN-MT"), makeKeyword("LANGUAGE-MT"),
	    makeKeyword("NICE-LEVEL"), makeKeyword("NEW-DAYS") });

    private static final SubLList $list659 = list(new SubLObject[] { makeSymbol("FSUT-PRIORITIZER-STALE-TERMS"), makeSymbol("FSUT-PRIORITIZER-MISSING-TERMS"), makeSymbol("FSUT-PRIORITIZER-UP-TO-DATE-TERMS"), makeSymbol("FSUT-PRIORITIZER-THREAD"), makeSymbol("FSUT-PRIORITIZER-SHOULD-SLEEP?"),
	    makeSymbol("FSUT-PRIORITIZER-VERBOSITY"), makeSymbol("FSUT-PRIORITIZER-DOMAIN-MT"), makeSymbol("FSUT-PRIORITIZER-LANGUAGE-MT"), makeSymbol("FSUT-PRIORITIZER-NICE-LEVEL"), makeSymbol("FSUT-PRIORITIZER-NEW-DAYS") });

    private static final SubLList $list660 = list(
	    new SubLObject[] { makeSymbol("_CSETF-FSUT-PRIORITIZER-STALE-TERMS"), makeSymbol("_CSETF-FSUT-PRIORITIZER-MISSING-TERMS"), makeSymbol("_CSETF-FSUT-PRIORITIZER-UP-TO-DATE-TERMS"), makeSymbol("_CSETF-FSUT-PRIORITIZER-THREAD"), makeSymbol("_CSETF-FSUT-PRIORITIZER-SHOULD-SLEEP?"),
		    makeSymbol("_CSETF-FSUT-PRIORITIZER-VERBOSITY"), makeSymbol("_CSETF-FSUT-PRIORITIZER-DOMAIN-MT"), makeSymbol("_CSETF-FSUT-PRIORITIZER-LANGUAGE-MT"), makeSymbol("_CSETF-FSUT-PRIORITIZER-NICE-LEVEL"), makeSymbol("_CSETF-FSUT-PRIORITIZER-NEW-DAYS") });

    private static final SubLSymbol PPRINT_FSUT_PRIORITIZER = makeSymbol("PPRINT-FSUT-PRIORITIZER");

    private static final SubLSymbol FACT_SHEET_UPDATE_TERM_PRIORITIZER_PRINT_FUNCTION_TRAMPOLINE = makeSymbol("FACT-SHEET-UPDATE-TERM-PRIORITIZER-PRINT-FUNCTION-TRAMPOLINE");

    private static final SubLList $list663 = list(makeSymbol("OPTIMIZE-FUNCALL"), makeSymbol("FACT-SHEET-UPDATE-TERM-PRIORITIZER-P"));

    private static final SubLSymbol FSUT_PRIORITIZER_STALE_TERMS = makeSymbol("FSUT-PRIORITIZER-STALE-TERMS");

    private static final SubLSymbol _CSETF_FSUT_PRIORITIZER_STALE_TERMS = makeSymbol("_CSETF-FSUT-PRIORITIZER-STALE-TERMS");

    private static final SubLSymbol FSUT_PRIORITIZER_MISSING_TERMS = makeSymbol("FSUT-PRIORITIZER-MISSING-TERMS");

    private static final SubLSymbol _CSETF_FSUT_PRIORITIZER_MISSING_TERMS = makeSymbol("_CSETF-FSUT-PRIORITIZER-MISSING-TERMS");

    private static final SubLSymbol FSUT_PRIORITIZER_UP_TO_DATE_TERMS = makeSymbol("FSUT-PRIORITIZER-UP-TO-DATE-TERMS");

    private static final SubLSymbol _CSETF_FSUT_PRIORITIZER_UP_TO_DATE_TERMS = makeSymbol("_CSETF-FSUT-PRIORITIZER-UP-TO-DATE-TERMS");

    private static final SubLSymbol FSUT_PRIORITIZER_THREAD = makeSymbol("FSUT-PRIORITIZER-THREAD");

    private static final SubLSymbol _CSETF_FSUT_PRIORITIZER_THREAD = makeSymbol("_CSETF-FSUT-PRIORITIZER-THREAD");

    private static final SubLSymbol $sym672$FSUT_PRIORITIZER_SHOULD_SLEEP_ = makeSymbol("FSUT-PRIORITIZER-SHOULD-SLEEP?");

    private static final SubLSymbol $sym673$_CSETF_FSUT_PRIORITIZER_SHOULD_SLEEP_ = makeSymbol("_CSETF-FSUT-PRIORITIZER-SHOULD-SLEEP?");

    private static final SubLSymbol FSUT_PRIORITIZER_VERBOSITY = makeSymbol("FSUT-PRIORITIZER-VERBOSITY");

    private static final SubLSymbol _CSETF_FSUT_PRIORITIZER_VERBOSITY = makeSymbol("_CSETF-FSUT-PRIORITIZER-VERBOSITY");

    private static final SubLSymbol FSUT_PRIORITIZER_DOMAIN_MT = makeSymbol("FSUT-PRIORITIZER-DOMAIN-MT");

    private static final SubLSymbol _CSETF_FSUT_PRIORITIZER_DOMAIN_MT = makeSymbol("_CSETF-FSUT-PRIORITIZER-DOMAIN-MT");

    private static final SubLSymbol FSUT_PRIORITIZER_LANGUAGE_MT = makeSymbol("FSUT-PRIORITIZER-LANGUAGE-MT");

    private static final SubLSymbol _CSETF_FSUT_PRIORITIZER_LANGUAGE_MT = makeSymbol("_CSETF-FSUT-PRIORITIZER-LANGUAGE-MT");

    private static final SubLSymbol FSUT_PRIORITIZER_NICE_LEVEL = makeSymbol("FSUT-PRIORITIZER-NICE-LEVEL");

    private static final SubLSymbol _CSETF_FSUT_PRIORITIZER_NICE_LEVEL = makeSymbol("_CSETF-FSUT-PRIORITIZER-NICE-LEVEL");

    private static final SubLSymbol FSUT_PRIORITIZER_NEW_DAYS = makeSymbol("FSUT-PRIORITIZER-NEW-DAYS");

    private static final SubLSymbol _CSETF_FSUT_PRIORITIZER_NEW_DAYS = makeSymbol("_CSETF-FSUT-PRIORITIZER-NEW-DAYS");

    private static final SubLSymbol $UP_TO_DATE_TERMS = makeKeyword("UP-TO-DATE-TERMS");

    private static final SubLSymbol $kw688$SHOULD_SLEEP_ = makeKeyword("SHOULD-SLEEP?");

    private static final SubLString $str694$Invalid_slot__S_for_construction_ = makeString("Invalid slot ~S for construction function");

    private static final SubLSymbol MAKE_FACT_SHEET_UPDATE_TERM_PRIORITIZER = makeSymbol("MAKE-FACT-SHEET-UPDATE-TERM-PRIORITIZER");

    private static final SubLSymbol VISIT_DEFSTRUCT_OBJECT_FACT_SHEET_UPDATE_TERM_PRIORITIZER_METHOD = makeSymbol("VISIT-DEFSTRUCT-OBJECT-FACT-SHEET-UPDATE-TERM-PRIORITIZER-METHOD");

    private static final SubLString $str700$__PRIORITIZER_stale__S_missing__S = makeString("#<PRIORITIZER stale=~S missing=~S up-to-date=~S>");

    private static final SubLSymbol $fact_sheet_update_term_prioritizers$ = makeSymbol("*FACT-SHEET-UPDATE-TERM-PRIORITIZERS*");

    private static final SubLInteger $int$_20 = makeInteger(-20);

    private static final SubLSymbol FSUT_PRIORITIZER_QUEUE_RANK_FUNC = makeSymbol("FSUT-PRIORITIZER-QUEUE-RANK-FUNC");

    private static final SubLSymbol FSUT_PRIORITIZER_QUEUE_COMP_FUNC = makeSymbol("FSUT-PRIORITIZER-QUEUE-COMP-FUNC");

    private static final SubLString $str706$Non_cons_item_in_prioritizer_queu = makeString("Non-cons item in prioritizer queue: ~S");

    private static final SubLString $str707$Non_non_negative_integer_priority = makeString("Non-non-negative-integer priority in prioritizer queue: ~S");

    private static final SubLString $$$Fact_Sheet_Prioritizer = makeString("Fact Sheet Prioritizer");

    private static final SubLSymbol FSUT_PRIORITIZER_PLACE_TERMS = makeSymbol("FSUT-PRIORITIZER-PLACE-TERMS");

    private static final SubLString $str712$Had_trouble_getting_a_term_from__ = makeString("Had trouble getting a term from ~S");

    private static final SubLString $str713$Skipping__S__Update_already_under = makeString("Skipping ~S: Update already undertaken.");

    private static final SubLList $list714 = cons(makeSymbol("TERM"), makeSymbol("PRIORITY"));

    private static final SubLString $str716$Dequeuing__S__Status__stale__Prio = makeString("Dequeuing ~S. Status: stale. Priority: ~S");

    private static final SubLString $str718$Dequeuing__S__Status__missing__Pr = makeString("Dequeuing ~S. Status: missing. Priority: ~S");

    private static final SubLSymbol $UP_TO_DATE = makeKeyword("UP-TO-DATE");

    private static final SubLString $str720$Dequeuing__S__Status__up_to_date_ = makeString("Dequeuing ~S. Status: up-to-date. Priority: ~S");

    private static final SubLSymbol FSUT_PRIORITIZER_SLEEP_INTERVAL_FROM_NICE_LEVEL = makeSymbol("FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL");

    private static final SubLSymbol $fsut_prioritizer_sleep_interval_from_nice_level_caching_state$ = makeSymbol("*FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL-CACHING-STATE*");

    private static final SubLString $$$mapping_Cyc_FORTs = makeString("mapping Cyc FORTs");

    private static final SubLString $str725$Non_cons_in_fact_sheet_prioritize = makeString("Non-cons in fact sheet prioritizer queue: ~S");

    private static final SubLList $list727 = list(makeKeyword("MISSING"), makeKeyword("STALE"), makeKeyword("UP-TO-DATE"));

    private static final SubLString $str729$border_0 = makeString("border=0");

    private static final SubLSymbol PRED_ARGNUM_COMBOS_FOR_TERM = makeSymbol("PRED-ARGNUM-COMBOS-FOR-TERM");

    private static final SubLString $$$term = makeString("term");

    private static final SubLString $str733$creation_kb = makeString("creation-kb");

    private static final SubLString $str734$creation_system = makeString("creation-system");

    private static final SubLString $$$evaluator = makeString("evaluator");

    private static final SubLString $$$Fact_Sheet_Evaluation = makeString("Fact Sheet Evaluation");

    private static final SubLSymbol $SAM_AUTOCOMPLETE_CSS = makeKeyword("SAM-AUTOCOMPLETE-CSS");

    private static final SubLString $str740$yui_skin_sam = makeString("yui-skin-sam");

    private static final SubLString $$$reloadFrameButton = makeString("reloadFrameButton");

    private static final SubLString $$$button = makeString("button");

    private static final SubLString $$$reload = makeString("reload");

    private static final SubLString $$$Refresh_Frames = makeString("Refresh Frames");

    private static final SubLString $$$post = makeString("post");

    private static final SubLString $str746$cb_handle_fact_sheet_evaluation = makeString("cb-handle-fact-sheet-evaluation");

    private static final SubLList $list748 = list(cons(ZERO_INTEGER, makeString("0 -- No facts visible")), cons(FIVE_INTEGER, makeString("5 -- Half of the facts I'd expect to see are here")), cons(TEN_INTEGER, makeString("10 -- all relevant facts from KB are present in the Fact Sheet")));

    private static final SubLList $list750 = list(cons(ZERO_INTEGER, makeString("0 -- none of the facts on this fact sheet should be here")), cons(FIVE_INTEGER, makeString("5 -- Half of the facts are inappropriate for this fact sheet")),
	    cons(TEN_INTEGER, makeString("10 -- Nothing that should be removed")));

    private static final SubLList $list752 = list(cons(ZERO_INTEGER, makeString("0 -- Every fact I see involves redundancy")), cons(FIVE_INTEGER, makeString("5 -- Half of the facts on the sheet involve redundancy")), cons(TEN_INTEGER, makeString("10 -- There are no bothersome redundant facts")));

    private static final SubLList $list754 = list(cons(ZERO_INTEGER, makeString("0 -- I couldn't understand a single one of the facts")), cons(TWO_INTEGER, makeString("2 -- Some understandable, but much incomprehensible")),
	    cons(FIVE_INTEGER, makeString("5 -- It took me a while to figure what it was saying")), cons(EIGHT_INTEGER, makeString("8 -- Awkward, but fairly easy to understand")), cons(TEN_INTEGER, makeString("10 -- all facts were presented perfectly clearly")));

    private static final SubLList $list756 = list(cons(ZERO_INTEGER, makeString("0 -- I couldn't get to any other Fact Sheets from this one")), cons(TEN_INTEGER, makeString("10 -- All other relevant fact sheets reachable from here")));

    private static final SubLList $list758 = list(cons(ZERO_INTEGER, makeString("0 -- Not a single fact was in the right section")), cons(FIVE_INTEGER, makeString("5 -- Half the facts were in appropriate sections")), cons(TEN_INTEGER, makeString("10 -- All facts were in appropriate sections")));

    private static final SubLList $list760 = list(cons(ZERO_INTEGER, makeString("0 -- No useful pattern for how anything was ordered or presented")), cons(FIVE_INTEGER, makeString("5 -- Facts were mostly in the right order, but some jarring")),
	    cons(TEN_INTEGER, makeString("10 -- Looks like a good writer wrote each section")));

    private static final SubLList $list762 = list(cons(ZERO_INTEGER, makeString("0 -- I've never seen anything uglier")), cons(TEN_INTEGER, makeString("10 -- I can't imagine how these could ever look better")));

    private static final SubLString $$$Submit_Evaluation = makeString("Submit Evaluation");

    private static final SubLSymbol CB_FACT_SHEET_EVALUATION = makeSymbol("CB-FACT-SHEET-EVALUATION");

    private static final SubLString $str766$__ = makeString(": ");

    private static final SubLString $str767$_comments = makeString("-comments");

    private static final SubLString $str768$Score__ = makeString("Score: ");

    private static final SubLString $str769$Comments__ = makeString("Comments: ");

    private static final SubLInteger $int$80 = makeInteger(80);

    private static final SubLString $$$No_Value_Selected = makeString("No Value Selected");

    private static final SubLList $list772 = list(new SubLObject[] { makeString("filtering"), makeString("filtering-comments"), makeString("coverage"), makeString("coverage-comments"), makeString("linking"), makeString("linking-comments"), makeString("clarity"), makeString("clarity-comments"),
	    makeString("categorization"), makeString("categorization-comments"), makeString("esthetic-value"), makeString("esthetic-value-comments"), makeString("fluidity"), makeString("fluidity-comments"), makeString("creation-kb"), makeString("creation-system") });

    private static final SubLList $list775 = list(makeString("-1"), makeString(""));

    private static final SubLString $str778$_S__ = makeString("~S~%");

    private static final SubLSymbol CB_HANDLE_FACT_SHEET_EVALUATION = makeSymbol("CB-HANDLE-FACT-SHEET-EVALUATION");

    private static final SubLString $str780$cg_cb_fact_sheet_evaluation_term_ = makeString("cg?cb-fact-sheet-evaluation&term=");

    private static final SubLString $str781$_evaluator_ = makeString("&evaluator=");

    private static final SubLString $str782$_creation_kb_ = makeString("&creation-kb=");

    private static final SubLString $str783$_creation_system_ = makeString("&creation-system=");

    private static final SubLString $$$Evaluate_Fact_Sheet = makeString("Evaluate Fact Sheet");

    private static final SubLString $$$Evaluate_this_Fact_Sheet = makeString("Evaluate this Fact Sheet");

    private static final SubLSymbol $fact_sheet_updating_lock$ = makeSymbol("*FACT-SHEET-UPDATING-LOCK*");

    private static final SubLString $$$Fact_Sheet_Data_Update_Lock = makeString("Fact Sheet Data Update Lock");

    private static final SubLString $str788$The_process_that_is_marking_the_f = makeString("The process that is marking the factsheet as modifiable (~A) is not the process currently modifying the fact sheet (~A)");

    private static final SubLString $$$public = makeString("public");

    private static final SubLString $str790$_script_type__text_javascript____ = makeString(
	    "<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-0348708830263077\";\ngoogle_alternate_color = \"6728B2\";\ngoogle_ad_width = 728;\ngoogle_ad_height = 90;\ngoogle_ad_format = \"728x90_as\";\ngoogle_ad_type = \"text_image\";\ngoogle_ad_channel = \"\";\ngoogle_color_border = \"341473\";\ngoogle_color_bg = \"E6F0FF\";\ngoogle_color_link = \"0000FF\";\ngoogle_color_text = \"000000\";\ngoogle_color_url = \"008000\";\ngoogle_ui_features = \"rc:6\";\n//-->\n</script>\n<script type=\"text/javascript\"\n src=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>");

    private static final SubLString $str791$__ = makeString("..");

    private static final SubLSymbol GET_PUBLIC_FACT_SHEET_TERM_PARENT_DIRECTORY_STRING = makeSymbol("GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING");

    private static final SubLSymbol MIN_ISA_AMONG = makeSymbol("MIN-ISA-AMONG");

    private static final SubLSymbol MIN_GENLS_AMONG = makeSymbol("MIN-GENLS-AMONG");

    private static final SubLSymbol $sym795$FACT_SHEET_FILENAME_CHAR_ = makeSymbol("FACT-SHEET-FILENAME-CHAR?");

    private static final SubLString $str796$_ = makeString("_");

    private static final SubLSymbol $get_public_fact_sheet_term_parent_directory_string_caching_state$ = makeSymbol("*GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING-CACHING-STATE*");

    private static final SubLString $str798$_term_mapping_cfasl = makeString("-term-mapping.cfasl");

    private static final SubLString $str799$_term_mapping_txt = makeString("-term-mapping.txt");

    private static final SubLSymbol TERMS_FOR_PUBLIC_FACT_SHEETS = makeSymbol("TERMS-FOR-PUBLIC-FACT-SHEETS");

    private static final SubLSymbol $sym802$_X = makeSymbol("?X");

    private static final SubLList $list805 = list(makeKeyword("INFERENCE-MODE"), makeKeyword("MINIMAL"), makeKeyword("BROWSABLE?"), makeSymbol("*FACT-SHEET-QUERIES-BROWSABLE?*"));

    private static final SubLString $str806$_S__S___S = makeString("~S ~S: ~S");

    private static final SubLList $list807 = list(reader_make_constant_shell("isa"), reader_make_constant_shell("genls"));

    private static final SubLSymbol $terms_for_public_fact_sheets_caching_state$ = makeSymbol("*TERMS-FOR-PUBLIC-FACT-SHEETS-CACHING-STATE*");

    private static final SubLSymbol TYPES_FOR_PUBLIC_FACT_SHEETS = makeSymbol("TYPES-FOR-PUBLIC-FACT-SHEETS");

    private static final SubLSymbol $sym810$COLLECTION_IN_ANY_MT_ = makeSymbol("COLLECTION-IN-ANY-MT?");

    private static final SubLSymbol $types_for_public_fact_sheets_caching_state$ = makeSymbol("*TYPES-FOR-PUBLIC-FACT-SHEETS-CACHING-STATE*");

    private static final SubLSymbol FACT_SHEET_TERM_STRINGS = makeSymbol("FACT-SHEET-TERM-STRINGS");

    private static final SubLSymbol $fact_sheet_term_strings_caching_state$ = makeSymbol("*FACT-SHEET-TERM-STRINGS-CACHING-STATE*");

    private static final SubLString $$$Getting_English_for_terms = makeString("Getting English for terms");

    private static final SubLSymbol GET_PUBLIC_FACT_SHEET_STRING_URL_MAPPINGS = makeSymbol("GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS");

    private static final SubLString $$$getting_urls_for_terms = makeString("getting urls for terms");

    private static final SubLList $list817 = list(makeSymbol("TERM"), makeSymbol("STRINGS"));

    private static final SubLSymbol $get_public_fact_sheet_string_url_mappings_caching_state$ = makeSymbol("*GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS-CACHING-STATE*");

    private static final SubLString $$$resultSet = makeString("resultSet");

    private static final SubLString $$$Writing_out_paths = makeString("Writing out paths");

    private static final SubLList $list821 = list(makeSymbol("TERM"), makeSymbol("URL"));

    private static final SubLString $$$displayNl = makeString("displayNl");

    private static final SubLString $$$nl = makeString("nl");

    private static final SubLString $$$factSheetPath = makeString("factSheetPath");

    private static final SubLString $$$cyclId = makeString("cyclId");

    private static final SubLString $str826$_cyc_projects_inCyc_staging_area_ = makeString("/cyc/projects/inCyc/staging-area/inCyc/concepts/");

    private static final SubLString $str827$_cyc_projects_inCyc_staging_area_ = makeString("/cyc/projects/inCyc/staging-area/inCyc/js/searchdata.js");

    private static final SubLString $str828$_cyc_projects_inCyc_staging_area_ = makeString("/cyc/projects/inCyc/staging-area/inCyc/searchdata.xml");

    private static final SubLString $str829$_cyc_projects_inCyc_staging_area_ = makeString("/cyc/projects/inCyc/staging-area/inCyc/searchdata.htaccess");

    private static final SubLString $str830$_cyc_projects_inCyc_staging_area_ = makeString("/cyc/projects/inCyc/staging-area/inCyc/searchdata.sql");

    private static final SubLString $str831$factSheetPath__________cyclId____ = makeString("factSheetPath=\"(.*?)\".*cyclId=\"(.*?)\"");

    private static final SubLString $str832$RewriteCond________1___A___ = makeString("RewriteCond       $1 ^~A$~%");

    private static final SubLString $str833$RewriteRule________scratch_www_in = makeString("RewriteRule ^(.+) /scratch/www/incyc/concepts/~A  [L]~%~%");

    private static final SubLString $str834$_A__ = makeString("~A~%");

    private static final SubLString $str835$DROP_TABLE_HAS_INCYC_PAGE_ = makeString("DROP TABLE HAS_INCYC_PAGE;");

    private static final SubLString $str836$CREATE_TABLE_HAS_INCYC_PAGE__EXTE = makeString("CREATE TABLE HAS_INCYC_PAGE (EXTERNAL_ID varchar(2048) NOT NULL PRIMARY KEY);");

    private static final SubLString $str837$cyclId________ = makeString("cyclId=\"(.*?)\"");

    private static final SubLString $str838$__ = makeString(", ");

    private static final SubLString $str839$INSERT_INTO_InCyc_Pages__EXTERNAL = makeString("INSERT INTO InCyc_Pages (EXTERNAL_ID) VALUES ~A;~%");

    private static final SubLString $str840$__ = makeString("('");

    private static final SubLString $str841$__ = makeString("')");

    private static final SubLString $str842$Mapping_public_fact_sheet_files__ = makeString("Mapping public fact-sheet files...");

    private static final SubLString $str843$var_searchData____ = makeString("var searchData = {");

    private static final SubLString $$$writing_json = makeString("writing json");

    private static final SubLString $str845$_ = makeString(",");

    private static final SubLString $str846$_ = makeString("}");

    private static final SubLList $list847 = list(cons(makeString("'"), makeString("\\\'")), cons(makeString(","), makeString("\\,")));

    private static final SubLString $str848$__A_ = makeString("'~A'");

    private static final SubLString $str849$___ = makeString(": [");

    private static final SubLString $str850$_ = makeString("]");

    private static final SubLString $str851$checking_for_fact_sheets = makeString("checking for fact-sheets");

    private static final SubLSymbol $BLACKLIST_QUOTED_TYPES = makeKeyword("BLACKLIST-QUOTED-TYPES");

    private static final SubLSymbol $DEFAULT_STARTING_POINTS_FILENAME = makeKeyword("DEFAULT-STARTING-POINTS-FILENAME");

    private static final SubLList $list857 = list(reader_make_constant_shell("WorldGeographyDualistMt"));

    private static final SubLSymbol DEFAULT_FACT_SHEET_PARAGRAPH_RETRIEVAL_TIME_SORT_FN = makeSymbol("DEFAULT-FACT-SHEET-PARAGRAPH-RETRIEVAL-TIME-SORT-FN");

    private static final SubLList $list862 = list(reader_make_constant_shell("agentDocumentationDataSentence"), reader_make_constant_shell("collectionDocumentationDataSentence"));

    private static final SubLString $$$incyc = makeString("incyc");

    private static final SubLString $str864$______info_html = makeString("../../info.html");

    private static final SubLString $str865$______styles_css = makeString("../../styles.css");

    private static final SubLString $str866$______index_html = makeString("../../index.html");

    private static final SubLString $str867$______img_inCyc_beta_png = makeString("../../img/inCyc_beta.png");

    private static final SubLList $list868 = list(makeString("inCyc(beta)"));

    static private final SubLList $list869 = list(reader_make_constant_shell("FamousHuman"), reader_make_constant_shell("GeopoliticalEntity"), reader_make_constant_shell("EcologicalRegion"), reader_make_constant_shell("LandTopographicalFeature"), reader_make_constant_shell("TouristAttraction"),
	    reader_make_constant_shell("InternationalOrganizationOfCountries"), reader_make_constant_shell("ChemicalSubstanceType"), reader_make_constant_shell("PhysiologicalConditionType"));

    private static final SubLList $list870 = list(reader_make_constant_shell("Terrorist"), reader_make_constant_shell("PornStar"));

    static private final SubLList $list871 = list(reader_make_constant_shell("OpenCycExcludedTerm"), reader_make_constant_shell("CCFConstant"), reader_make_constant_shell("IndeterminateTerm"));

    private static final SubLList $list872 = list(reader_make_constant_shell("TOMES"), reader_make_constant_shell("BACWORTHsEncyclopedia"));

    private static final SubLList $list874 = list(makeKeyword("DEFAULT-STARTING-POINTS-FILENAME"), makeString("data/fact-sheets/public/incyc/starting-points.tsv"), makeKeyword("CATEGORY-LABELS"),
	    list(cons(reader_make_constant_shell("collectionDocumentationDataSentence"), makeString("Manually Written Notes")), cons(reader_make_constant_shell("agentDocumentationDataSentence"), makeString("Manually Written Notes"))), makeKeyword("SORT-FN"),
	    makeSymbol("INCYC-HIGHER-PRIORITY-CATEGORY?"));

    private static final SubLString $str876$analyst_knowledge_base = makeString("analyst-knowledge-base");

    private static final SubLString $str877$___styles_css = makeString("../styles.css");

    private static final SubLList $list878 = list(reader_make_constant_shell("Terrorist"), reader_make_constant_shell("TerroristGroup"), reader_make_constant_shell("TerroristAct"));

    private static final SubLList $list879 = list(reader_make_constant_shell("CCFConstant"));

    private static final SubLString $str880$data_fact_sheets_public_analyst_k = makeString("data/fact-sheets/public/analyst-knowledge-base/starting-points.tsv");

    private static final SubLString $$$Public_Fact_Sheet_Updater_for_ = makeString("Public Fact Sheet Updater for ");

    private static final SubLString $$$_Fact_Sheets = makeString(" Fact Sheets");

    private static final SubLSymbol ENSURE_ALL_PUBLIC_FACT_SHEETS = makeSymbol("ENSURE-ALL-PUBLIC-FACT-SHEETS");

    private static final SubLString $str885$Ensuring_public_fact_sheets_are_i = makeString("Ensuring public fact sheets are in place...");

    private static final SubLSymbol PUBLICIZE_FACT_SHEET_LINK = makeSymbol("PUBLICIZE-FACT-SHEET-LINK");

    private static final SubLString $str887$_a_href__ = makeString("<a href=\"");

    private static final SubLString $str888$__ = makeString("\">");

    private static final SubLString $str889$Updating__A_public_fact_sheets_fi = makeString("Updating ~A public fact sheets file #~D of ~S");

    private static final SubLString $$$_public_fact_sheets_from_ = makeString(" public fact sheets from ");

    private static final SubLString $str891$Couldn_t_find_term_for_id___S__ = makeString("Couldn't find term for id: ~S~%");

    private static final SubLString $str892$Couldn_t_find_datafile___S = makeString("Couldn't find datafile: ~S");

    private static final SubLString $str893$Writing_fact_sheet_starting_point = makeString("Writing fact-sheet starting-point data...");

    private static final SubLString $str894$___ = makeString("../");

    private static final SubLInteger $int$1500 = makeInteger(1500);

    private static final SubLSymbol CACHED_NUM_GAF_ARG_INDEX = makeSymbol("CACHED-NUM-GAF-ARG-INDEX");

    private static final SubLSymbol $cached_num_gaf_arg_index_caching_state$ = makeSymbol("*CACHED-NUM-GAF-ARG-INDEX-CACHING-STATE*");

    private static final SubLString $$$normal = makeString("normal");

    private static final SubLString $str899$Dumping_fact_sheet_sentences_to_ = makeString("Dumping fact-sheet sentences to ");

    private static final SubLString $str900$Data_for__S_has__D_categories_ = makeString("Data for ~S has ~D categories.");

    private static final SubLList $list901 = cons(makeSymbol("CATEGORY"), makeSymbol("CATEGORY-DATA"));

    private static final SubLString $str902$Doing__S___D_paragraphs___D_sente = makeString("Doing ~S: ~D paragraphs, ~D sentences");

    private static final SubLSymbol $sym903$_ = makeSymbol("+");

    private static final SubLString $str905$This_paragraph_has__D_sentences_ = makeString("This paragraph has ~D sentences.");

    private static final SubLList $list906 = cons(makeSymbol("CYCL-SENTENCE"), makeUninternedSymbol("VALUE"));

    private static final SubLString $str907$Non_sentence__S_in__S_for__S = makeString("Non-sentence ~S in ~S for ~S");

    private static final SubLString $str908$missing_from_parse_result___S__ = makeString("missing from parse result: ~S~%");

    private static final SubLList $list909 = list(makeSymbol("DESIRED-STRING"), makeSymbol("DESIRED-CYCL"));

    private static final SubLSymbol $sym910$FACT_SHEETS_TERM_FROM_STRING_CONTAINS_ = makeSymbol("FACT-SHEETS-TERM-FROM-STRING-CONTAINS?");

    private static final SubLList $list911 = list(
	    new SubLObject[] { list(list(makeString("Where is Osama bin Laden?"), list(list(makeString("Osama bin Laden"), list(reader_make_constant_shell("OsamaBinLaden"))))), T), list(list(makeString("Israel"), list(list(makeString("Israel"), list(reader_make_constant_shell("Israel"))))), T),
		    list(list(makeString("In which cities have Hezbollah and Hamas carried out attacks?"), list(list(makeString("Hezbollah"), list(reader_make_constant_shell("LebaneseHizballah"))), list(makeString("Hamas"), list(reader_make_constant_shell("TerroristOrganization-Hamas"))))), T),
		    list(list(makeString("When was George Bush elected in the United States?"),
			    list(list(makeString("George Bush"), list(reader_make_constant_shell("GeorgeHWBush"), reader_make_constant_shell("GeorgeWBush"))), list(makeString("the United States"), list(reader_make_constant_shell("UnitedStatesOfAmerica"))))), T),
		    list(list(makeString("22 mmhg"), list(list(makeString("22 mmhg"), list(list(reader_make_constant_shell("MM-Hg"), makeInteger(22)))))), T),
		    list(list(makeString("22 millimeters of mercury"), list(list(makeString("22 millimeters of mercury"), list(list(reader_make_constant_shell("MM-Hg"), makeInteger(22)))))), T),
		    list(list(makeString(".22 millimeters of mercury"), list(list(makeString(".22 millimeters of mercury"), list(list(reader_make_constant_shell("MM-Hg"), makeDouble(0.22)))))), T),
		    list(list(makeString(".3 cm"), list(list(makeString(".3 cm"), list(list(list(reader_make_constant_shell("Centi"), reader_make_constant_shell("Meter")), makeDouble(0.3)))))), T),
		    list(list(makeString("0.3 cm"), list(list(makeString("0.3 cm"), list(list(list(reader_make_constant_shell("Centi"), reader_make_constant_shell("Meter")), makeDouble(0.3)))))), T) });

    static final boolean assertionsDisabledSynth = true;

    public static final SubLObject allowing_fact_sheet_evalations_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    SubLObject body = current;
	    return listS(CLET, $list_alt4, append(body, NIL));
	}
    }

    public static SubLObject allowing_fact_sheet_evalations(final SubLObject macroform, final SubLObject environment) {
	final SubLObject datum = macroform.rest();
	final SubLObject body;
	final SubLObject current = body = datum;
	return listS(CLET, fact_sheets.$list4, append(body, NIL));
    }

    public static final SubLObject disallowing_fact_sheet_evalations_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    SubLObject body = current;
	    return listS(CLET, $list_alt5, append(body, NIL));
	}
    }

    public static SubLObject disallowing_fact_sheet_evalations(final SubLObject macroform, final SubLObject environment) {
	final SubLObject datum = macroform.rest();
	final SubLObject body;
	final SubLObject current = body = datum;
	return listS(CLET, fact_sheets.$list5, append(body, NIL));
    }

    public static final SubLObject allow_fact_sheet_evaluationsP_alt() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    return eql(ONE_INTEGER, $allow_fact_sheet_evaluationsP$.getDynamicValue(thread));
	}
    }

    public static SubLObject allow_fact_sheet_evaluationsP() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	return eql(ONE_INTEGER, fact_sheets.$allow_fact_sheet_evaluationsP$.getDynamicValue(thread));
    }

    public static final SubLObject allow_fact_sheet_evaluations_alt(SubLObject allowP) {
	if (allowP == UNPROVIDED) {
	    allowP = T;
	}
	$allow_fact_sheet_evaluationsP$.setDynamicValue(NIL != allowP ? ((SubLObject) (ONE_INTEGER)) : ZERO_INTEGER);
	return T;
    }

    public static SubLObject allow_fact_sheet_evaluations(SubLObject allowP) {
	if (allowP == UNPROVIDED) {
	    allowP = T;
	}
	fact_sheets.$allow_fact_sheet_evaluationsP$.setDynamicValue(NIL != allowP ? ONE_INTEGER : ZERO_INTEGER);
	return T;
    }

    public static final SubLObject indexical_fact_sheet_query_mt_alt() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject mt = $fact_sheet_query_mt$.getDynamicValue(thread);
		return NIL != mt ? ((SubLObject) (mt)) : $fact_sheet_default_domain_monad_mt$.getGlobalValue();
	    }
	}
    }

    public static SubLObject indexical_fact_sheet_query_mt() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject mt = fact_sheets.$fact_sheet_query_mt$.getDynamicValue(thread);
	return NIL != mt ? mt : fact_sheets.$fact_sheet_default_domain_monad_mt$.getGlobalValue();
    }

    public static final SubLObject indexical_fact_sheet_table_type_alt() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    return $fact_sheet_table_type$.getDynamicValue(thread);
	}
    }

    public static SubLObject indexical_fact_sheet_table_type() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	return fact_sheets.$fact_sheet_table_type$.getDynamicValue(thread);
    }

    public static final SubLObject indexical_fact_sheet_sentence_alt() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    return $fact_sheet_sentence$.getDynamicValue(thread);
	}
    }

    public static SubLObject indexical_fact_sheet_sentence() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	return fact_sheets.$fact_sheet_sentence$.getDynamicValue(thread);
    }

    public static final SubLObject with_new_fact_sheet_problem_store_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt18);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject problem_store_var = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt18);
		    problem_store_var = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    return list(CLET, list(problem_store_var), list(CUNWIND_PROTECT, listS(PROGN, listS(CSETQ, problem_store_var, $list_alt22), append(body, NIL)), list(PUNLESS, $list_alt24, list(DESTROY_PROBLEM_STORE, problem_store_var))));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt18);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject with_new_fact_sheet_problem_store(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list16);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject problem_store_var = NIL;
	destructuring_bind_must_consp(current, datum, fact_sheets.$list16);
	problem_store_var = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    return list(CLET, list(problem_store_var), list(CUNWIND_PROTECT, listS(PROGN, listS(CSETQ, problem_store_var, fact_sheets.$list20), append(body, NIL)), list(PUNLESS, fact_sheets.$list22, list(fact_sheets.DESTROY_PROBLEM_STORE, problem_store_var))));
	}
	cdestructuring_bind_error(datum, fact_sheets.$list16);
	return NIL;
    }

    /**
     * For HTML generation, emit bogus hyperlinks that will be handled by the 'fact sheet' java code.
     */
    @LispMethod(comment = "For HTML generation, emit bogus hyperlinks that will be handled by the \'fact sheet\' java code.")
    public static final SubLObject within_fact_sheet_paraphrase_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    SubLObject focal_term = NIL;
	    destructuring_bind_must_consp(current, datum, $list_alt26);
	    focal_term = current.first();
	    current = current.rest();
	    {
		SubLObject body = current;
		return list(CLET, $list_alt27, list(WITH_FACT_SHEET_FOCAL_TERM, list(focal_term), list(WITH_PPH_HTML_FUNCTION_AND_TARGET, $list_alt30, list(WITH_PPH_HTML_TERM_ID_FN, $list_alt32, listS(WITH_PPH_SPEAKER_AND_ADDRESSEE, $list_alt34, append(body, NIL))))));
	    }
	}
    }

    /**
     * For HTML generation, emit bogus hyperlinks that will be handled by the 'fact sheet' java code.
     */
    @LispMethod(comment = "For HTML generation, emit bogus hyperlinks that will be handled by the \'fact sheet\' java code.")
    public static SubLObject within_fact_sheet_paraphrase(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	SubLObject focal_term = NIL;
	destructuring_bind_must_consp(current, datum, fact_sheets.$list24);
	focal_term = current.first();
	final SubLObject body;
	current = body = current.rest();
	return list(CLET, fact_sheets.$list25, list(fact_sheets.WITH_FACT_SHEET_FOCAL_TERM, list(focal_term),
		list(fact_sheets.WITH_PPH_HTML_FUNCTION_AND_TARGET, fact_sheets.$list28, list(fact_sheets.WITH_PPH_HTML_TERM_ID_FN, fact_sheets.$list30, listS(fact_sheets.WITH_PPH_SPEAKER_AND_ADDRESSEE, fact_sheets.$list32, append(body, NIL))))));
    }

    /**
     * Check whether we are currently paraphrasing for a fact sheet.
     */
    @LispMethod(comment = "Check whether we are currently paraphrasing for a fact sheet.")
    public static final SubLObject within_fact_sheet_paraphraseP_alt() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    return $within_fact_sheet_paraphraseP$.getDynamicValue(thread);
	}
    }

    /**
     * Check whether we are currently paraphrasing for a fact sheet.
     */
    @LispMethod(comment = "Check whether we are currently paraphrasing for a fact sheet.")
    public static SubLObject within_fact_sheet_paraphraseP() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	return fact_sheets.$within_fact_sheet_paraphraseP$.getDynamicValue(thread);
    }

    public static final SubLObject indexical_fact_sheet_topic_alt() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    return $fact_sheet_focal_term$.getDynamicValue(thread);
	}
    }

    public static SubLObject indexical_fact_sheet_topic() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	return fact_sheets.$fact_sheet_focal_term$.getDynamicValue(thread);
    }

    public static final SubLObject with_fact_sheet_focal_term_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt206);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject v_term = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt206);
		    v_term = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    return list(CLET, list(list($fact_sheet_focal_term$, v_term)), listS(POSSIBLY_WITH_THCL_FORT, list(v_term), append(body, NIL)));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt206);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject with_fact_sheet_focal_term(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list36);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject v_term = NIL;
	destructuring_bind_must_consp(current, datum, fact_sheets.$list36);
	v_term = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    return list(CLET, list(list(fact_sheets.$fact_sheet_focal_term$, v_term)), listS(fact_sheets.POSSIBLY_WITH_THCL_FORT, list(v_term), append(body, NIL)));
	}
	cdestructuring_bind_error(datum, fact_sheets.$list36);
	return NIL;
    }

    public static final SubLObject chmod_safe_to_useP_alt() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    return $chmod_safe_to_useP$.getDynamicValue(thread);
	}
    }

    public static SubLObject chmod_safe_to_useP() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	return fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread);
    }

    public static final SubLObject writing_fact_sheet_file_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt209);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject filename = NIL;
		    SubLObject stream = NIL;
		    SubLObject error_message_var = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt209);
		    filename = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt209);
		    stream = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt209);
		    error_message_var = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    return list(POSSIBLY_CATCH_ERROR_MESSAGE, bq_cons(error_message_var, $list_alt211), listS(WITH_TEXT_FILE, listS(stream, filename, $list_alt213), append(body, NIL)),
				    list(PWHEN, $chmod_safe_to_useP$, listS(CHMOD, list(LOGICAL_PATHNAME_TO_PHYSICAL, filename), $list_alt217)));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt209);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject writing_fact_sheet_file(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list40);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject filename = NIL;
	SubLObject stream = NIL;
	SubLObject error_message_var = NIL;
	destructuring_bind_must_consp(current, datum, fact_sheets.$list40);
	filename = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list40);
	stream = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list40);
	error_message_var = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    return list(fact_sheets.POSSIBLY_CATCH_ERROR_MESSAGE, bq_cons(error_message_var, fact_sheets.$list42), listS(WITH_TEXT_FILE, listS(stream, filename, fact_sheets.$list44), append(body, NIL)),
		    list(PWHEN, fact_sheets.$chmod_safe_to_useP$, listS(fact_sheets.CHMOD, list(fact_sheets.LOGICAL_PATHNAME_TO_PHYSICAL, filename), fact_sheets.$list49)));
	}
	cdestructuring_bind_error(datum, fact_sheets.$list40);
	return NIL;
    }

    public static final SubLObject writing_fact_sheet_data_file_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt209);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject filename = NIL;
		    SubLObject stream = NIL;
		    SubLObject error_message_var = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt209);
		    filename = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt209);
		    stream = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt209);
		    error_message_var = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    return list(POSSIBLY_CATCH_ERROR_MESSAGE, bq_cons(error_message_var, $list_alt211), listS(WITH_PRIVATE_BINARY_FILE, listS(stream, filename, $list_alt213), list(MUST, list(STREAMP, stream), $str_alt220$Cannot_open__A, filename), append(body, NIL)),
				    list(PWHEN, $chmod_safe_to_useP$, listS(CHMOD, list(LOGICAL_PATHNAME_TO_PHYSICAL, filename), $list_alt217)));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt209);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject writing_fact_sheet_data_file(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list40);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject filename = NIL;
	SubLObject stream = NIL;
	SubLObject error_message_var = NIL;
	destructuring_bind_must_consp(current, datum, fact_sheets.$list40);
	filename = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list40);
	stream = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list40);
	error_message_var = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    return list(fact_sheets.POSSIBLY_CATCH_ERROR_MESSAGE, bq_cons(error_message_var, fact_sheets.$list42), listS(WITH_PRIVATE_BINARY_FILE, listS(stream, filename, fact_sheets.$list44), list(MUST, list(STREAMP, stream), fact_sheets.$str53$Cannot_open__A, filename), append(body, NIL)),
		    list(PWHEN, fact_sheets.$chmod_safe_to_useP$, listS(fact_sheets.CHMOD, list(fact_sheets.LOGICAL_PATHNAME_TO_PHYSICAL, filename), fact_sheets.$list49)));
	}
	cdestructuring_bind_error(datum, fact_sheets.$list40);
	return NIL;
    }

    public static final SubLObject reading_fact_sheet_data_file_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt209);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject filename = NIL;
		    SubLObject stream = NIL;
		    SubLObject error_message_var = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt209);
		    filename = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt209);
		    stream = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt209);
		    error_message_var = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    return list(POSSIBLY_CATCH_ERROR_MESSAGE, bq_cons(error_message_var, $list_alt211), listS(WITH_PRIVATE_BINARY_FILE, listS(stream, filename, $list_alt221), list(MUST, list(STREAMP, stream), $str_alt220$Cannot_open__A, filename), append(body, NIL)),
				    list(PWHEN, $chmod_safe_to_useP$, listS(CHMOD, list(LOGICAL_PATHNAME_TO_PHYSICAL, filename), $list_alt217)));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt209);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject reading_fact_sheet_data_file(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list40);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject filename = NIL;
	SubLObject stream = NIL;
	SubLObject error_message_var = NIL;
	destructuring_bind_must_consp(current, datum, fact_sheets.$list40);
	filename = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list40);
	stream = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list40);
	error_message_var = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    return list(fact_sheets.POSSIBLY_CATCH_ERROR_MESSAGE, bq_cons(error_message_var, fact_sheets.$list42), listS(WITH_PRIVATE_BINARY_FILE, listS(stream, filename, fact_sheets.$list54), list(MUST, list(STREAMP, stream), fact_sheets.$str53$Cannot_open__A, filename), append(body, NIL)),
		    list(PWHEN, fact_sheets.$chmod_safe_to_useP$, listS(fact_sheets.CHMOD, list(fact_sheets.LOGICAL_PATHNAME_TO_PHYSICAL, filename), fact_sheets.$list49)));
	}
	cdestructuring_bind_error(datum, fact_sheets.$list40);
	return NIL;
    }

    public static final SubLObject clear_fact_sheet_default_language_mt_alt() {
	{
	    SubLObject cs = $fact_sheet_default_language_mt_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_fact_sheet_default_language_mt() {
	final SubLObject cs = fact_sheets.$fact_sheet_default_language_mt_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_fact_sheet_default_language_mt_alt() {
	return memoization_state.caching_state_remove_function_results_with_args($fact_sheet_default_language_mt_caching_state$.getGlobalValue(), list(EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_fact_sheet_default_language_mt() {
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_default_language_mt_caching_state$.getGlobalValue(), list(EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_default_language_mt_internal_alt() {
	{
	    SubLObject mt = com.cyc.cycjava.cycl.fact_sheets.build_fact_sheet_default_language_mt();
	    com.cyc.cycjava.cycl.fact_sheets.ensure_fact_sheet_term_id_indexed(mt, UNPROVIDED);
	    return mt;
	}
    }

    public static SubLObject fact_sheet_default_language_mt_internal() {
	final SubLObject mt = fact_sheets.build_fact_sheet_default_language_mt();
	return mt;
    }

    public static final SubLObject fact_sheet_default_language_mt_alt() {
	{
	    SubLObject caching_state = $fact_sheet_default_language_mt_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(FACT_SHEET_DEFAULT_LANGUAGE_MT, $fact_sheet_default_language_mt_caching_state$, NIL, EQL, ZERO_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
		if (results == $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt_internal()));
		    memoization_state.caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
		}
		return memoization_state.caching_results(results);
	    }
	}
    }

    public static SubLObject fact_sheet_default_language_mt() {
	SubLObject caching_state = fact_sheets.$fact_sheet_default_language_mt_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.FACT_SHEET_DEFAULT_LANGUAGE_MT, fact_sheets.$fact_sheet_default_language_mt_caching_state$, NIL, EQL, ZERO_INTEGER, ZERO_INTEGER);
	}
	SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
	if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    results = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_default_language_mt_internal()));
	    memoization_state.caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
	}
	return memoization_state.caching_results(results);
    }

    public static final SubLObject clear_build_fact_sheet_default_language_mt_alt() {
	{
	    SubLObject cs = $build_fact_sheet_default_language_mt_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_build_fact_sheet_default_language_mt() {
	final SubLObject cs = fact_sheets.$build_fact_sheet_default_language_mt_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_build_fact_sheet_default_language_mt_alt() {
	return memoization_state.caching_state_remove_function_results_with_args($build_fact_sheet_default_language_mt_caching_state$.getGlobalValue(), list(EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_build_fact_sheet_default_language_mt() {
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$build_fact_sheet_default_language_mt_caching_state$.getGlobalValue(), list(EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject build_fact_sheet_default_language_mt_internal_alt() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject monad_mt = (NIL != valid_constantP($fact_sheet_default_language_monad_mt$.getGlobalValue(), UNPROVIDED)) ? ((SubLObject) ($fact_sheet_default_language_monad_mt$.getGlobalValue())) : hlmt.hlmt_monad_mt(pph_vars.$pph_language_mt$.getDynamicValue(thread));
		SubLObject mt = hlmt_czer.canonicalize_hlmt(hlmt.new_temporal_hlmt(monad_mt, $fact_sheet_default_language_mt_time_interval$.getGlobalValue(), $fact_sheet_default_language_mt_time_parameter$.getGlobalValue()));
		return mt;
	    }
	}
    }

    public static SubLObject build_fact_sheet_default_language_mt_internal() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject monad_mt = (NIL != valid_constantP(fact_sheets.$fact_sheet_default_language_monad_mt$.getGlobalValue(), UNPROVIDED)) ? fact_sheets.$fact_sheet_default_language_monad_mt$.getGlobalValue() : hlmt.hlmt_monad_mt(pph_vars.$pph_language_mt$.getDynamicValue(thread));
	final SubLObject mt = hlmt_czer.canonicalize_hlmt(hlmt.new_temporal_hlmt(monad_mt, fact_sheets.$fact_sheet_default_language_mt_time_interval$.getGlobalValue(), fact_sheets.$fact_sheet_default_language_mt_time_parameter$.getGlobalValue()));
	return mt;
    }

    public static final SubLObject build_fact_sheet_default_language_mt_alt() {
	{
	    SubLObject caching_state = $build_fact_sheet_default_language_mt_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(BUILD_FACT_SHEET_DEFAULT_LANGUAGE_MT, $build_fact_sheet_default_language_mt_caching_state$, NIL, EQL, ZERO_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
		if (results == $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.build_fact_sheet_default_language_mt_internal()));
		    memoization_state.caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
		}
		return memoization_state.caching_results(results);
	    }
	}
    }

    public static SubLObject build_fact_sheet_default_language_mt() {
	SubLObject caching_state = fact_sheets.$build_fact_sheet_default_language_mt_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.BUILD_FACT_SHEET_DEFAULT_LANGUAGE_MT, fact_sheets.$build_fact_sheet_default_language_mt_caching_state$, NIL, EQL, ZERO_INTEGER, ZERO_INTEGER);
	}
	SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
	if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    results = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.build_fact_sheet_default_language_mt_internal()));
	    memoization_state.caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
	}
	return memoization_state.caching_results(results);
    }

    public static final SubLObject fact_sheet_default_language_mt_for_term_alt(SubLObject v_term) {
	return com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt();
    }

    public static SubLObject fact_sheet_default_language_mt_for_term(final SubLObject v_term) {
	return fact_sheets.fact_sheet_default_language_mt();
    }

    public static final SubLObject clear_fact_sheet_default_domain_mt_alt() {
	{
	    SubLObject cs = $fact_sheet_default_domain_mt_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_fact_sheet_default_domain_mt() {
	final SubLObject cs = fact_sheets.$fact_sheet_default_domain_mt_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_fact_sheet_default_domain_mt_alt() {
	return memoization_state.caching_state_remove_function_results_with_args($fact_sheet_default_domain_mt_caching_state$.getGlobalValue(), list(EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_fact_sheet_default_domain_mt() {
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_default_domain_mt_caching_state$.getGlobalValue(), list(EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_default_domain_mt_internal_alt() {
	{
	    SubLObject mt = com.cyc.cycjava.cycl.fact_sheets.build_fact_sheet_default_domain_mt();
	    com.cyc.cycjava.cycl.fact_sheets.ensure_fact_sheet_term_id_indexed(mt, UNPROVIDED);
	    return mt;
	}
    }

    public static SubLObject fact_sheet_default_domain_mt_internal() {
	final SubLObject mt = fact_sheets.build_fact_sheet_default_domain_mt();
	return mt;
    }

    public static final SubLObject fact_sheet_default_domain_mt_alt() {
	{
	    SubLObject caching_state = $fact_sheet_default_domain_mt_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(FACT_SHEET_DEFAULT_DOMAIN_MT, $fact_sheet_default_domain_mt_caching_state$, NIL, EQL, ZERO_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
		if (results == $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_internal()));
		    memoization_state.caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
		}
		return memoization_state.caching_results(results);
	    }
	}
    }

    public static SubLObject fact_sheet_default_domain_mt() {
	SubLObject caching_state = fact_sheets.$fact_sheet_default_domain_mt_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.FACT_SHEET_DEFAULT_DOMAIN_MT, fact_sheets.$fact_sheet_default_domain_mt_caching_state$, NIL, EQL, ZERO_INTEGER, ZERO_INTEGER);
	}
	SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
	if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    results = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_default_domain_mt_internal()));
	    memoization_state.caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
	}
	return memoization_state.caching_results(results);
    }

    public static final SubLObject clear_build_fact_sheet_default_domain_mt_alt() {
	{
	    SubLObject cs = $build_fact_sheet_default_domain_mt_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_build_fact_sheet_default_domain_mt() {
	final SubLObject cs = fact_sheets.$build_fact_sheet_default_domain_mt_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_build_fact_sheet_default_domain_mt_alt() {
	return memoization_state.caching_state_remove_function_results_with_args($build_fact_sheet_default_domain_mt_caching_state$.getGlobalValue(), list(EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_build_fact_sheet_default_domain_mt() {
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$build_fact_sheet_default_domain_mt_caching_state$.getGlobalValue(), list(EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject build_fact_sheet_default_domain_mt_internal_alt() {
	{
	    SubLObject mt = (NIL != valid_constantP($fact_sheet_default_domain_monad_mt$.getGlobalValue(), UNPROVIDED)) ? ((SubLObject) ($fact_sheet_default_domain_monad_mt$.getGlobalValue())) : cb_query.default_new_inference_monad_mt();
	    return mt;
	}
    }

    public static SubLObject build_fact_sheet_default_domain_mt_internal() {
	final SubLObject mt = (NIL != valid_constantP(fact_sheets.$fact_sheet_default_domain_monad_mt$.getGlobalValue(), UNPROVIDED)) ? fact_sheets.$fact_sheet_default_domain_monad_mt$.getGlobalValue() : default_new_inference_monad_mt();
	return mt;
    }

    public static final SubLObject build_fact_sheet_default_domain_mt_alt() {
	{
	    SubLObject caching_state = $build_fact_sheet_default_domain_mt_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(BUILD_FACT_SHEET_DEFAULT_DOMAIN_MT, $build_fact_sheet_default_domain_mt_caching_state$, NIL, EQL, ZERO_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
		if (results == $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.build_fact_sheet_default_domain_mt_internal()));
		    memoization_state.caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
		}
		return memoization_state.caching_results(results);
	    }
	}
    }

    public static SubLObject build_fact_sheet_default_domain_mt() {
	SubLObject caching_state = fact_sheets.$build_fact_sheet_default_domain_mt_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.BUILD_FACT_SHEET_DEFAULT_DOMAIN_MT, fact_sheets.$build_fact_sheet_default_domain_mt_caching_state$, NIL, EQL, ZERO_INTEGER, ZERO_INTEGER);
	}
	SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
	if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    results = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.build_fact_sheet_default_domain_mt_internal()));
	    memoization_state.caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
	}
	return memoization_state.caching_results(results);
    }

    public static final SubLObject fact_sheet_default_domain_mt_for_term_alt(SubLObject v_term) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject default_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt();
		SubLObject term_specific_mt = NIL;
		if ($fact_sheet_verbosity$.getDynamicValue(thread).eql($PUBLIC)) {
		} else {
		    if (NIL != kb_accessors.cyclistP(v_term)) {
			term_specific_mt = $$CycorpOrganizationMt;
		    } else {
			if ((NIL != isa.isa_in_any_mtP(v_term, $$FictionalThing)) || (NIL != genls.genl_in_any_mtP(v_term, $$FictionalThing))) {
			    term_specific_mt = $$FactsInFictionalWorksMt;
			} else {
			    if ((NIL != isa.isa_in_any_mtP(v_term, $$TerroristAgent)) || (NIL != isa.isa_in_any_mtP(v_term, $$TerroristAct))) {
				term_specific_mt = $$TKBSourceSpindleCollectorMt;
			    }
			}
		    }
		}
		if (NIL == term_specific_mt) {
		    return default_mt;
		} else {
		    if (NIL != genl_mts.genl_mtP(default_mt, term_specific_mt, UNPROVIDED, UNPROVIDED)) {
			return default_mt;
		    } else {
			if (NIL != genl_mts.genl_mtP(term_specific_mt, default_mt, UNPROVIDED, UNPROVIDED)) {
			    return term_specific_mt;
			} else {
			    return hlmt_czer.canonicalize_hlmt(list($$MtUnionFn, term_specific_mt, default_mt));
			}
		    }
		}
	    }
	}
    }

    public static SubLObject fact_sheet_default_domain_mt_for_term(final SubLObject v_term) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject default_mt = fact_sheets.fact_sheet_default_domain_mt();
	SubLObject term_specific_mt = NIL;
	if (!fact_sheets.$fact_sheet_verbosity$.getDynamicValue(thread).eql($PUBLIC)) {
	    final SubLObject v_kb_query = fact_sheets.$$FactSheetDomainMtQuery;
	    if (NIL != forts.valid_fortP(v_kb_query)) {
		final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
		final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
		try {
		    fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
		    thcl.$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread), thread);
		    term_specific_mt = kb_query.new_cyc_query_from_kbq(v_kb_query, UNPROVIDED, UNPROVIDED).first();
		} finally {
		    thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
		    fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
		}
	    }
	}
	if (NIL == term_specific_mt) {
	    return default_mt;
	}
	if (NIL != genl_mts.genl_mtP(default_mt, term_specific_mt, UNPROVIDED, UNPROVIDED)) {
	    return default_mt;
	}
	if (NIL != genl_mts.genl_mtP(term_specific_mt, default_mt, UNPROVIDED, UNPROVIDED)) {
	    return term_specific_mt;
	}
	return hlmt_czer.canonicalize_hlmt(list(fact_sheets.$$MtUnionFn, term_specific_mt, default_mt));
    }

    /**
     * Return a fact sheet string that is free of anchor tags, but does still have spans for sentences.
     */
    @LispMethod(comment = "Return a fact sheet string that is free of anchor tags, but does still have spans for sentences.")
    public static final SubLObject get_linkless_fact_sheet_for_term_in_html_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	{
	    SubLObject raw_fact_sheet = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_for_term_in_html(v_term, verbosity, domain_mt, language_mt, v_properties).first();
	    SubLObject link_free = com.cyc.cycjava.cycl.fact_sheets.convert_fact_sheet_sentence_links_to_spans(raw_fact_sheet);
	    return link_free;
	}
    }

    @LispMethod(comment = "Return a fact sheet string that is free of anchor tags, but does still have spans for sentences.")
    public static SubLObject get_linkless_fact_sheet_for_term_in_html(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	final SubLObject raw_fact_sheet = fact_sheets.get_fact_sheet_for_term_in_html(v_term, verbosity, domain_mt, language_mt, v_properties).first();
	final SubLObject link_free = fact_sheets.convert_fact_sheet_sentence_links_to_spans(raw_fact_sheet);
	return link_free;
    }

    /**
    * Return a fact sheet string that is free of anchor tags, but does still have spans for sentences.
    */

    public static final SubLObject convert_fact_sheet_sentence_links_to_spans_alt(SubLObject raw_fact_sheet) {
	return com.cyc.cycjava.cycl.fact_sheets.replace_fact_sheet_markups_fast(raw_fact_sheet, CONVERT_FACT_SHEET_LINK_TO_SPAN, UNPROVIDED);
    }

    public static SubLObject convert_fact_sheet_sentence_links_to_spans(final SubLObject raw_fact_sheet) {
	return fact_sheets.replace_fact_sheet_markups_fast(raw_fact_sheet, fact_sheets.CONVERT_FACT_SHEET_LINK_TO_SPAN, UNPROVIDED);
    }

    public static final SubLObject convert_fact_sheet_link_to_span_alt(SubLObject v_term, SubLObject open_tag, SubLObject link_tokens, SubLObject close_tag) {
	if (NIL == search($str_alt244$fact_sheet_sentence, open_tag, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
	    return list($str_alt133$, link_tokens, $str_alt133$);
	}
	{
	    SubLObject concept_id = kb_utilities.compact_hl_internal_id_string(v_term);
	    return list(cconcatenate($str_alt245$_span_id__, new SubLObject[] { format_nil.format_nil_a_no_copy(concept_id), $str_alt246$__class__fact_sheet_sentence__ }), link_tokens, $str_alt247$__span_);
	}
    }

    public static SubLObject convert_fact_sheet_link_to_span(final SubLObject v_term, final SubLObject open_tag, final SubLObject link_tokens, final SubLObject close_tag) {
	if (NIL == search(fact_sheets.$str72$fact_sheet_sentence, open_tag, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
	    return list(fact_sheets.$str73$, link_tokens, fact_sheets.$str73$);
	}
	final SubLObject concept_id = kb_utilities.compact_hl_internal_id_string(v_term);
	return list(cconcatenate(fact_sheets.$str74$_span_id__, new SubLObject[] { format_nil.format_nil_a_no_copy(concept_id), fact_sheets.$str75$__class__fact_sheet_sentence__ }), link_tokens, fact_sheets.$str76$__span_);
    }

    public static final SubLObject get_updated_fact_sheet_for_term_and_sentence_in_html_alt(SubLObject v_term, SubLObject v_assert, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	SubLTrampolineFile.checkType(v_term, CYCL_DENOTATIONAL_TERM_P);
	SubLTrampolineFile.checkType(verbosity, FACT_SHEET_VERBOSITY_P);
	if (domain_mt == $DEFAULT) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == $DEFAULT) {
	    language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	SubLTrampolineFile.checkType(domain_mt, POSSIBLY_MT_P);
	SubLTrampolineFile.checkType(language_mt, POSSIBLY_MT_P);
	return com.cyc.cycjava.cycl.fact_sheets.get_updated_fact_sheet_for_term_and_sentence_in_markup_internal(v_term, v_assert, verbosity, domain_mt, language_mt, v_properties);
    }

    public static SubLObject get_updated_fact_sheet_for_term_and_sentence_in_html(final SubLObject v_term, final SubLObject v_assert, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	assert NIL != cycl_grammar.cycl_denotational_term_p(v_term) : "! cycl_grammar.cycl_denotational_term_p(v_term) " + ("cycl_grammar.cycl_denotational_term_p(v_term) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(v_term) ") + v_term;
	assert NIL != fact_sheets.fact_sheet_verbosity_p(verbosity) : "! fact_sheets.fact_sheet_verbosity_p(verbosity) " + ("fact_sheets.fact_sheet_verbosity_p(verbosity) " + "CommonSymbols.NIL != fact_sheets.fact_sheet_verbosity_p(verbosity) ") + verbosity;
	if (domain_mt == $DEFAULT) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == $DEFAULT) {
	    language_mt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	assert NIL != hlmt.possibly_mt_p(domain_mt) : "! hlmt.possibly_mt_p(domain_mt) " + ("hlmt.possibly_mt_p(domain_mt) " + "CommonSymbols.NIL != hlmt.possibly_mt_p(domain_mt) ") + domain_mt;
	assert NIL != hlmt.possibly_mt_p(language_mt) : "! hlmt.possibly_mt_p(language_mt) " + ("hlmt.possibly_mt_p(language_mt) " + "CommonSymbols.NIL != hlmt.possibly_mt_p(language_mt) ") + language_mt;
	return fact_sheets.get_updated_fact_sheet_for_term_and_sentence_in_markup_internal(v_term, v_assert, verbosity, domain_mt, language_mt, v_properties);
    }

    public static final SubLObject get_updated_fact_sheet_for_term_and_sentence_in_markup_internal_alt(SubLObject v_term, SubLObject v_assert, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
	{
	    SubLObject ans = list(string_utilities.$empty_string$.getGlobalValue(), NIL);
	    SubLObject fact_sheet_domain_mt = (NIL != hlmt.possibly_hlmt_p(domain_mt)) ? ((SubLObject) (hlmt.hlmt_monad_mt(domain_mt))) : com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	    SubLObject focal_term = czer_main.canonicalize_term(v_term, fact_sheet_domain_mt);
	    SubLObject updated_data = com.cyc.cycjava.cycl.fact_sheets.updated_fact_sheet_data_for_term_and_sentence(focal_term, v_assert, verbosity, fact_sheet_domain_mt, language_mt, UNPROVIDED);
	    SubLObject datum = updated_data;
	    SubLObject current = datum;
	    SubLObject data = NIL;
	    SubLObject stats = NIL;
	    SubLObject footnotes = NIL;
	    SubLObject formatting_guidelines = NIL;
	    destructuring_bind_must_consp(current, datum, $list_alt251);
	    data = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt251);
	    stats = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt251);
	    footnotes = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt251);
	    formatting_guidelines = current.first();
	    current = current.rest();
	    if (NIL == current) {
		{
		    SubLObject texts = NIL;
		    SubLObject display_time = NIL;
		    SubLObject time_var = get_internal_real_time();
		    texts = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_texts_from_data(language_mt, domain_mt, v_term, data, v_properties);
		    display_time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
		    {
			SubLObject markup = (NIL != com.cyc.cycjava.cycl.fact_sheets.xml_factsheetsP(v_properties)) ? ((SubLObject) (com.cyc.cycjava.cycl.fact_sheets.generate_fact_sheet_xml(v_term, domain_mt, texts, footnotes, stats, display_time, v_properties)))
				: com.cyc.cycjava.cycl.fact_sheets.generate_fact_sheet_html(v_term, domain_mt, texts, footnotes, stats, display_time, v_properties);
			return list(markup, formatting_guidelines);
		    }
		}
	    } else {
		cdestructuring_bind_error(datum, $list_alt251);
	    }
	    return ans;
	}
    }

    public static SubLObject get_updated_fact_sheet_for_term_and_sentence_in_markup_internal(final SubLObject v_term, final SubLObject v_assert, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject v_properties) {
	final SubLObject ans = list(string_utilities.$empty_string$.getGlobalValue(), NIL);
	final SubLObject fact_sheet_domain_mt = (NIL != hlmt.possibly_hlmt_p(domain_mt)) ? hlmt.hlmt_monad_mt(domain_mt) : fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	final SubLObject focal_term = czer_main.canonicalize_term(v_term, fact_sheet_domain_mt);
	final SubLObject updated_data = fact_sheets.updated_fact_sheet_data_for_term_and_sentence(focal_term, v_assert, verbosity, fact_sheet_domain_mt, language_mt, UNPROVIDED);
	SubLObject current;
	final SubLObject datum = current = updated_data;
	SubLObject data = NIL;
	SubLObject stats = NIL;
	SubLObject footnotes = NIL;
	SubLObject formatting_guidelines = NIL;
	destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
	data = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
	stats = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
	footnotes = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
	formatting_guidelines = current.first();
	current = current.rest();
	if (NIL == current) {
	    SubLObject texts = NIL;
	    SubLObject display_time = NIL;
	    final SubLObject time_var = get_internal_real_time();
	    texts = fact_sheets.fact_sheet_texts_from_data(language_mt, domain_mt, v_term, data, v_properties);
	    display_time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
	    final SubLObject markup = (NIL != fact_sheets.xml_factsheetsP(v_properties)) ? fact_sheets.generate_fact_sheet_xml(v_term, domain_mt, texts, footnotes, stats, display_time, v_properties)
		    : fact_sheets.generate_fact_sheet_html(v_term, domain_mt, texts, footnotes, stats, display_time, v_properties);
	    return list(markup, formatting_guidelines);
	}
	cdestructuring_bind_error(datum, fact_sheets.$list80);
	return ans;
    }

    /**
     * Get the fact sheet for TERM in XML and only include facts that were specifically included via KB content for this
     * concept (in other words, don't return any miscellaneous stuff, since that wasn't specifically marked in the KB
     * for inclusion).
     */
    @LispMethod(comment = "Get the fact sheet for TERM in XML and only include facts that were specifically included via KB content for this\r\nconcept (in other words, don\'t return any miscellaneous stuff, since that wasn\'t specifically marked in the KB\r\nfor inclusion).\nGet the fact sheet for TERM in XML and only include facts that were specifically included via KB content for this\nconcept (in other words, don\'t return any miscellaneous stuff, since that wasn\'t specifically marked in the KB\nfor inclusion).")
    public static final SubLObject get_fact_sheet_for_term_in_xml_with_only_kb_specified_content_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	v_properties = putf(v_properties, $MARKUP_TYPE, $XML);
	v_properties = putf(v_properties, $SKIP_SECTIONS, $list_alt256);
	return com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_for_term_in_markup_language(v_term, verbosity, domain_mt, language_mt, v_properties);
    }

    @LispMethod(comment = "Get the fact sheet for TERM in XML and only include facts that were specifically included via KB content for this\r\nconcept (in other words, don\'t return any miscellaneous stuff, since that wasn\'t specifically marked in the KB\r\nfor inclusion).\nGet the fact sheet for TERM in XML and only include facts that were specifically included via KB content for this\nconcept (in other words, don\'t return any miscellaneous stuff, since that wasn\'t specifically marked in the KB\nfor inclusion).")
    public static SubLObject get_fact_sheet_for_term_in_xml_with_only_kb_specified_content(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	v_properties = putf(v_properties, $MARKUP_TYPE, $XML);
	v_properties = putf(v_properties, $SKIP_SECTIONS, list(fact_sheets.$fact_sheet_thcl_section_category$.getGlobalValue()));
	return fact_sheets.get_fact_sheet_for_term_in_markup_language(v_term, verbosity, domain_mt, language_mt, v_properties);
    }

    /**
    * Get the fact sheet for TERM in XML and only include facts that were specifically included via KB content for this
    * concept (in other words, don't return any miscellaneous stuff, since that wasn't specifically marked in the KB
    * for inclusion).
    */

    public static final SubLObject get_fact_sheet_for_term_in_html_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	v_properties = putf(v_properties, $MARKUP_TYPE, $HTML);
	return com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_for_term_in_markup_language(v_term, verbosity, domain_mt, language_mt, v_properties);
    }

    public static SubLObject get_fact_sheet_for_term_in_html(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	v_properties = putf(v_properties, $MARKUP_TYPE, $HTML);
	return fact_sheets.get_fact_sheet_for_term_in_markup_language(v_term, verbosity, domain_mt, language_mt, v_properties);
    }

    /**
     *
     *
     * @return (STRINGP PROPERTY-LIST-P);
    html/xml document describing pertinent facts about TERM from DOMAIN-MT,
    plus property list with formatting guidelines for renderer.
     * @param PROPERTIES
     * 		- property-list-p with properties from among...
     * 		:DISPLAY-TITLE? (default NIL) - Should we print the title in the body of the page?
     * 		:SHOW-URI? (default NIL) - Should we print the openCyc uri for the concept in the Fact Sheet?
     * 		:PRINT-STATS? (default T) - Should we print fact-sheet stats at the bottom?
     * 		:SHOW-COPYRIGHT? (default NIL) - Should we include the standard Cycorp copyright at the bottom?
     * 		:MAX-TIME (default NIL) - If non-NIL, specifies a soft timeout in seconds.
     * 		:STYLESHEET (default nil) - STRINGP the location of the CSS file (absolute url or relative to wherever the page is being served up from)
     * 		if non-NIL, the system will use classes on elements, but no hard-coded style information.
     * 		:MARKUP-TYPE (default :HTML) - acceptable values: :HTML
     * 		:XML (return data as XML)
     * 		:SKIP-SECTIONS (default nil) - a list of sections that should not be included in the fact sheet.  Items in the list
     * 		should be the FORTS/concepts used to denote the section (or 'Miscellaneous' or
     * 		'Recently Added', which have no corresponding FORT).
     * 		:INCLUDE-SECTIONS (default nil) - a list of sections that should be included in the fact sheet.  Items in the list
     * 		should be the FORTS/concepts used to denote the section
     * 		(or 'Miscellaneous' or 'Recently Added', which have no
     * 		corresponding FORT). If no value or NIL, all sections will be included.
     */
    @LispMethod(comment = "@return (STRINGP PROPERTY-LIST-P);\r\nhtml/xml document describing pertinent facts about TERM from DOMAIN-MT,\r\nplus property list with formatting guidelines for renderer.\r\n@param PROPERTIES\r\n\t\t- property-list-p with properties from among...\r\n\t\t:DISPLAY-TITLE? (default NIL) - Should we print the title in the body of the page?\r\n\t\t:SHOW-URI? (default NIL) - Should we print the openCyc uri for the concept in the Fact Sheet?\r\n\t\t:PRINT-STATS? (default T) - Should we print fact-sheet stats at the bottom?\r\n\t\t:SHOW-COPYRIGHT? (default NIL) - Should we include the standard Cycorp copyright at the bottom?\r\n\t\t:MAX-TIME (default NIL) - If non-NIL, specifies a soft timeout in seconds.\r\n\t\t:STYLESHEET (default nil) - STRINGP the location of the CSS file (absolute url or relative to wherever the page is being served up from)\r\n\t\tif non-NIL, the system will use classes on elements, but no hard-coded style information.\r\n\t\t:MARKUP-TYPE (default :HTML) - acceptable values: :HTML\r\n\t\t:XML (return data as XML)\r\n\t\t:SKIP-SECTIONS (default nil) - a list of sections that should not be included in the fact sheet.  Items in the list\r\n\t\tshould be the FORTS/concepts used to denote the section (or \'Miscellaneous\' or\r\n\t\t\'Recently Added\', which have no corresponding FORT).\r\n\t\t:INCLUDE-SECTIONS (default nil) - a list of sections that should be included in the fact sheet.  Items in the list\r\n\t\tshould be the FORTS/concepts used to denote the section\r\n\t\t(or \'Miscellaneous\' or \'Recently Added\', which have no\r\n\t\tcorresponding FORT). If no value or NIL, all sections will be included.")
    public static final SubLObject get_fact_sheet_for_term_in_markup_language_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	SubLTrampolineFile.checkType(v_term, CYCL_DENOTATIONAL_TERM_P);
	SubLTrampolineFile.checkType(verbosity, FACT_SHEET_VERBOSITY_P);
	if (domain_mt == $DEFAULT) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == $DEFAULT) {
	    language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	SubLTrampolineFile.checkType(domain_mt, POSSIBLY_MT_P);
	SubLTrampolineFile.checkType(language_mt, POSSIBLY_MT_P);
	list_utilities.augment_plist_with_defaults(v_properties, $list_alt259);
	return com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_for_term_in_markup_internal(v_term, verbosity, domain_mt, language_mt, v_properties, UNPROVIDED);
    }

    /**
     *
     *
     * @return (STRINGP PROPERTY-LIST-P);
    html/xml document describing pertinent facts about TERM from DOMAIN-MT,
    plus property list with formatting guidelines for renderer.
     * @param PROPERTIES
     * 		- property-list-p with properties from among...
     * 		:DISPLAY-TITLE? (default NIL) - Should we print the title in the body of the page?
     * 		:SHOW-URI? (default NIL) - Should we print the openCyc uri for the concept in the Fact Sheet?
     * 		:PRINT-STATS? (default T) - Should we print fact-sheet stats at the bottom?
     * 		:SHOW-COPYRIGHT? (default NIL) - Should we include the standard Cycorp copyright at the bottom?
     * 		:MAX-TIME (default NIL) - If non-NIL, specifies a soft timeout in seconds.
     * 		:STYLESHEET (default nil) - STRINGP the location of the CSS file (absolute url or relative to wherever the page is being served up from)
     * 		if non-NIL, the system will use classes on elements, but no hard-coded style information.
     * 		:MARKUP-TYPE (default :HTML) - acceptable values: :HTML
     * 		:XML (return data as XML)
     * 		:SKIP-SECTIONS (default nil) - a list of sections that should not be included in the fact sheet.  Items in the list
     * 		should be the FORTS/concepts used to denote the section (or 'Miscellaneous' or
     * 		'Recently Added', which have no corresponding FORT).
     * 		:INCLUDE-SECTIONS (default nil) - a list of sections that should be included in the fact sheet.  Items in the list
     * 		should be the FORTS/concepts used to denote the section
     * 		(or 'Miscellaneous' or 'Recently Added', which have no
     * 		corresponding FORT). If no value or NIL, all sections will be included.
     */
    @LispMethod(comment = "@return (STRINGP PROPERTY-LIST-P);\r\nhtml/xml document describing pertinent facts about TERM from DOMAIN-MT,\r\nplus property list with formatting guidelines for renderer.\r\n@param PROPERTIES\r\n\t\t- property-list-p with properties from among...\r\n\t\t:DISPLAY-TITLE? (default NIL) - Should we print the title in the body of the page?\r\n\t\t:SHOW-URI? (default NIL) - Should we print the openCyc uri for the concept in the Fact Sheet?\r\n\t\t:PRINT-STATS? (default T) - Should we print fact-sheet stats at the bottom?\r\n\t\t:SHOW-COPYRIGHT? (default NIL) - Should we include the standard Cycorp copyright at the bottom?\r\n\t\t:MAX-TIME (default NIL) - If non-NIL, specifies a soft timeout in seconds.\r\n\t\t:STYLESHEET (default nil) - STRINGP the location of the CSS file (absolute url or relative to wherever the page is being served up from)\r\n\t\tif non-NIL, the system will use classes on elements, but no hard-coded style information.\r\n\t\t:MARKUP-TYPE (default :HTML) - acceptable values: :HTML\r\n\t\t:XML (return data as XML)\r\n\t\t:SKIP-SECTIONS (default nil) - a list of sections that should not be included in the fact sheet.  Items in the list\r\n\t\tshould be the FORTS/concepts used to denote the section (or \'Miscellaneous\' or\r\n\t\t\'Recently Added\', which have no corresponding FORT).\r\n\t\t:INCLUDE-SECTIONS (default nil) - a list of sections that should be included in the fact sheet.  Items in the list\r\n\t\tshould be the FORTS/concepts used to denote the section\r\n\t\t(or \'Miscellaneous\' or \'Recently Added\', which have no\r\n\t\tcorresponding FORT). If no value or NIL, all sections will be included.")
    public static SubLObject get_fact_sheet_for_term_in_markup_language(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	assert NIL != cycl_grammar.cycl_denotational_term_p(v_term) : "! cycl_grammar.cycl_denotational_term_p(v_term) " + ("cycl_grammar.cycl_denotational_term_p(v_term) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(v_term) ") + v_term;
	assert NIL != fact_sheets.fact_sheet_verbosity_p(verbosity) : "! fact_sheets.fact_sheet_verbosity_p(verbosity) " + ("fact_sheets.fact_sheet_verbosity_p(verbosity) " + "CommonSymbols.NIL != fact_sheets.fact_sheet_verbosity_p(verbosity) ") + verbosity;
	if (domain_mt == $DEFAULT) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == $DEFAULT) {
	    language_mt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	assert NIL != hlmt.possibly_mt_p(domain_mt) : "! hlmt.possibly_mt_p(domain_mt) " + ("hlmt.possibly_mt_p(domain_mt) " + "CommonSymbols.NIL != hlmt.possibly_mt_p(domain_mt) ") + domain_mt;
	assert NIL != hlmt.possibly_mt_p(language_mt) : "! hlmt.possibly_mt_p(language_mt) " + ("hlmt.possibly_mt_p(language_mt) " + "CommonSymbols.NIL != hlmt.possibly_mt_p(language_mt) ") + language_mt;
	if (NIL != fact_sheets.$suppress_fact_sheet_extra_images$.getDynamicValue(thread)) {
	    v_properties = putf(v_properties, $STYLESHEETS, cons(fact_sheets.$suppress_fact_sheet_extra_images_css$.getDynamicValue(thread), getf(v_properties, $STYLESHEETS, UNPROVIDED)));
	}
	list_utilities.augment_plist_with_defaults(v_properties, fact_sheets.$list89);
	return fact_sheets.get_fact_sheet_for_term_in_markup_internal(v_term, verbosity, domain_mt, language_mt, v_properties, UNPROVIDED);
    }

    public static final SubLObject get_fact_sheet_for_term_in_markup_internal_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties, SubLObject recursedP) {
	if (recursedP == UNPROVIDED) {
	    recursedP = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject ans = list(string_utilities.$empty_string$.getGlobalValue(), NIL);
		SubLObject max_time = getf(v_properties, $MAX_TIME, NIL);
		SubLObject fact_sheet_domain_mt = (NIL != hlmt.possibly_hlmt_p(domain_mt)) ? ((SubLObject) (hlmt.hlmt_monad_mt(domain_mt))) : com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
		SubLObject focal_term = czer_main.canonicalize_term(v_term, fact_sheet_domain_mt);
		SubLObject cached_data = com.cyc.cycjava.cycl.fact_sheets.cached_fact_sheet_data_for_term(focal_term, verbosity, fact_sheet_domain_mt, language_mt, UNPROVIDED);
		SubLObject precached_fact_sheet = (NIL != cached_data) ? ((SubLObject) (NIL)) : com.cyc.cycjava.cycl.fact_sheets.precached_fact_sheet_for_term_in_html(focal_term, verbosity, fact_sheet_domain_mt, language_mt, v_properties, UNPROVIDED);
		if (NIL != cached_data) {
		    {
			SubLObject datum = cached_data;
			SubLObject current = datum;
			SubLObject data = NIL;
			SubLObject stats = NIL;
			SubLObject footnotes = NIL;
			SubLObject formatting_guidelines = NIL;
			destructuring_bind_must_consp(current, datum, $list_alt251);
			data = current.first();
			current = current.rest();
			destructuring_bind_must_consp(current, datum, $list_alt251);
			stats = current.first();
			current = current.rest();
			destructuring_bind_must_consp(current, datum, $list_alt251);
			footnotes = current.first();
			current = current.rest();
			destructuring_bind_must_consp(current, datum, $list_alt251);
			formatting_guidelines = current.first();
			current = current.rest();
			if (NIL == current) {
			    {
				SubLObject texts = NIL;
				SubLObject sources = NIL;
				SubLObject display_time = NIL;
				SubLObject time_var = get_internal_real_time();
				thread.resetMultipleValues();
				{
				    SubLObject texts_23 = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_texts_from_data(language_mt, domain_mt, v_term, data, v_properties);
				    SubLObject sources_24 = thread.secondMultipleValue();
				    thread.resetMultipleValues();
				    texts = texts_23;
				    sources = sources_24;
				}
				display_time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
				{
				    SubLObject filtered_footnotes = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_filter_footnotes_for_sources(sources, footnotes);
				    SubLObject markup = com.cyc.cycjava.cycl.fact_sheets.generate_fact_sheet_markup(v_term, domain_mt, texts, filtered_footnotes, stats, display_time, v_properties);
				    return list(markup, formatting_guidelines);
				}
			    }
			} else {
			    cdestructuring_bind_error(datum, $list_alt251);
			}
		    }
		} else {
		    if (NIL != precached_fact_sheet) {
			ans = precached_fact_sheet;
		    } else {
			if (NIL == recursedP) {
			    com.cyc.cycjava.cycl.fact_sheets.update_fact_sheet_for_term(focal_term, verbosity, fact_sheet_domain_mt, language_mt, max_time, UNPROVIDED);
			    ans = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_for_term_in_markup_internal(v_term, verbosity, domain_mt, language_mt, v_properties, T);
			}
		    }
		}
		return ans;
	    }
	}
    }

    public static SubLObject get_fact_sheet_for_term_in_markup_internal(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject v_properties, SubLObject recursedP) {
	if (recursedP == UNPROVIDED) {
	    recursedP = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject ans = list(string_utilities.$empty_string$.getGlobalValue(), NIL);
	final SubLObject max_time = getf(v_properties, $MAX_TIME, NIL);
	final SubLObject fact_sheet_domain_mt = (NIL != hlmt.possibly_hlmt_p(domain_mt)) ? hlmt.hlmt_monad_mt(domain_mt) : fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	final SubLObject focal_term = czer_main.canonicalize_term(v_term, fact_sheet_domain_mt);
	final SubLObject cached_data = fact_sheets.cached_fact_sheet_data_for_term(focal_term, verbosity, fact_sheet_domain_mt, language_mt, UNPROVIDED);
	final SubLObject precached_fact_sheet = (NIL != cached_data) ? NIL : fact_sheets.precached_fact_sheet_for_term_in_html(focal_term, verbosity, fact_sheet_domain_mt, language_mt, v_properties, UNPROVIDED);
	if (NIL != cached_data) {
	    SubLObject current;
	    final SubLObject datum = current = cached_data;
	    SubLObject data = NIL;
	    SubLObject stats = NIL;
	    SubLObject footnotes = NIL;
	    SubLObject formatting_guidelines = NIL;
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
	    data = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
	    stats = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
	    footnotes = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
	    formatting_guidelines = current.first();
	    current = current.rest();
	    if (NIL == current) {
		SubLObject texts = NIL;
		SubLObject v_sources = NIL;
		SubLObject display_time = NIL;
		final SubLObject time_var = get_internal_real_time();
		thread.resetMultipleValues();
		final SubLObject texts_$1 = fact_sheets.fact_sheet_texts_from_data(language_mt, domain_mt, v_term, data, v_properties);
		final SubLObject v_sources_$2 = thread.secondMultipleValue();
		thread.resetMultipleValues();
		texts = texts_$1;
		v_sources = v_sources_$2;
		display_time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
		final SubLObject filtered_footnotes = fact_sheets.fact_sheet_filter_footnotes_for_sources(v_sources, footnotes);
		final SubLObject markup = fact_sheets.generate_fact_sheet_markup(v_term, domain_mt, texts, filtered_footnotes, stats, display_time, v_properties);
		return list(markup, formatting_guidelines);
	    }
	    cdestructuring_bind_error(datum, fact_sheets.$list80);
	} else if (NIL != precached_fact_sheet) {
	    ans = precached_fact_sheet;
	} else if (NIL == recursedP) {
	    fact_sheets.update_fact_sheet_for_term(focal_term, verbosity, fact_sheet_domain_mt, language_mt, max_time, UNPROVIDED);
	    ans = fact_sheets.get_fact_sheet_for_term_in_markup_internal(v_term, verbosity, domain_mt, language_mt, v_properties, T);
	}

	return ans;
    }

    public static final SubLObject fact_sheet_filter_footnotes_for_sources_alt(SubLObject sources, SubLObject footnotes) {
	{
	    SubLObject supported_footnotes = NIL;
	    SubLObject cdolist_list_var = footnotes;
	    SubLObject footnote = NIL;
	    for (footnote = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), footnote = cdolist_list_var.first()) {
		if (NIL != subl_promotions.memberP(com.cyc.cycjava.cycl.fact_sheets.footnote_source(footnote), sources, UNPROVIDED, UNPROVIDED)) {
		    {
			SubLObject item_var = footnote;
			if (NIL == member(item_var, supported_footnotes, symbol_function(EQL), symbol_function(IDENTITY))) {
			    supported_footnotes = cons(item_var, supported_footnotes);
			}
		    }
		}
	    }
	    return supported_footnotes;
	}
    }

    public static SubLObject fact_sheet_filter_footnotes_for_sources(final SubLObject v_sources, final SubLObject footnotes) {
	SubLObject supported_footnotes = NIL;
	SubLObject cdolist_list_var = footnotes;
	SubLObject footnote = NIL;
	footnote = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    if (NIL != subl_promotions.memberP(fact_sheets.footnote_source(footnote), v_sources, UNPROVIDED, UNPROVIDED)) {
		final SubLObject item_var = footnote;
		if (NIL == member(item_var, supported_footnotes, symbol_function(EQL), symbol_function(IDENTITY))) {
		    supported_footnotes = cons(item_var, supported_footnotes);
		}
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    footnote = cdolist_list_var.first();
	}
	return supported_footnotes;
    }

    public static final SubLObject html_fact_sheet_optional_section_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt261);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject section_key = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt261);
		    section_key = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    return listS(PROGN, listS(PRINC, list(FACT_SHEET_OPTIONAL_SECTION_START_COMMENT, section_key), $list_alt264), append(body, list(listS(PRINC, list(FACT_SHEET_OPTIONAL_SECTION_END_COMMENT, section_key), $list_alt264))));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt261);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject html_fact_sheet_optional_section(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list91);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject section_key = NIL;
	destructuring_bind_must_consp(current, datum, fact_sheets.$list91);
	section_key = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    return listS(PROGN, listS(PRINC, list(fact_sheets.FACT_SHEET_OPTIONAL_SECTION_START_COMMENT, section_key), fact_sheets.$list94), append(body, list(listS(PRINC, list(fact_sheets.FACT_SHEET_OPTIONAL_SECTION_END_COMMENT, section_key), fact_sheets.$list94))));
	}
	cdestructuring_bind_error(datum, fact_sheets.$list91);
	return NIL;
    }

    /**
     * Old format for footnotes: just the html-string
     * New format for footnotes: (html-string source-cycl)
     */
    @LispMethod(comment = "Old format for footnotes: just the html-string\r\nNew format for footnotes: (html-string source-cycl)\nOld format for footnotes: just the html-string\nNew format for footnotes: (html-string source-cycl)")
    public static final SubLObject footnote_text_alt(SubLObject footnote) {
	if (footnote.isString()) {
	    return footnote;
	} else {
	    return footnote.first();
	}
    }

    @LispMethod(comment = "Old format for footnotes: just the html-string\r\nNew format for footnotes: (html-string source-cycl)\nOld format for footnotes: just the html-string\nNew format for footnotes: (html-string source-cycl)")
    public static SubLObject footnote_text(final SubLObject footnote) {
	if (footnote.isString()) {
	    return footnote;
	}
	return footnote.first();
    }

    /**
    * Old format for footnotes: just the html-string
    * New format for footnotes: (html-string source-cycl)
    */

    /**
     * Old format for footnotes: just the html-string
     * New format for footnotes: (html-string source-cycl)
     */
    @LispMethod(comment = "Old format for footnotes: just the html-string\r\nNew format for footnotes: (html-string source-cycl)\nOld format for footnotes: just the html-string\nNew format for footnotes: (html-string source-cycl)")
    public static final SubLObject footnote_source_alt(SubLObject footnote) {
	if (footnote.isString()) {
	    return NIL;
	} else {
	    return second(footnote);
	}
    }

    @LispMethod(comment = "Old format for footnotes: just the html-string\r\nNew format for footnotes: (html-string source-cycl)\nOld format for footnotes: just the html-string\nNew format for footnotes: (html-string source-cycl)")
    public static SubLObject footnote_source(final SubLObject footnote) {
	if (footnote.isString()) {
	    return NIL;
	}
	return second(footnote);
    }

    /**
    * Old format for footnotes: just the html-string
    * New format for footnotes: (html-string source-cycl)
    */

    public static final SubLObject generate_fact_sheet_data_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject info_gathering_time = NIL;
		SubLObject grouped_sentences = NIL;
		SubLObject fact_sheet_data = NIL;
		SubLObject stats = NIL;
		SubLObject footnotes = NIL;
		SubLObject rendering_instructions = NIL;
		{
		    SubLObject _prev_bind_0 = $fact_sheet_focal_term$.currentBinding(thread);
		    SubLObject _prev_bind_1 = $thcl_forts_by_fiat$.currentBinding(thread);
		    SubLObject _prev_bind_2 = proof_view.$tkb_image_root_placeholder$.currentBinding(thread);
		    try {
			$fact_sheet_focal_term$.bind(v_term, thread);
			$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? ((SubLObject) (cons(v_term, $thcl_forts_by_fiat$.getDynamicValue(thread)))) : $thcl_forts_by_fiat$.getDynamicValue(thread), thread);
			proof_view.$tkb_image_root_placeholder$.bind(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_image_root_placeholder(), thread);
			if (NIL != proof_view.$tkb_image_root_placeholder$.getDynamicValue(thread)) {
			    SubLTrampolineFile.checkType(proof_view.$tkb_image_root_placeholder$.getDynamicValue(thread), STRINGP);
			}
			{
			    SubLObject pcase_var = verbosity;
			    if (pcase_var.eql($MINI)) {
				{
				    SubLObject datum_evaluated_var = com.cyc.cycjava.cycl.fact_sheets.get_mini_fact_sheet_for_term_in_html(v_term, domain_mt, language_mt);
				    fact_sheet_data = datum_evaluated_var.first();
				    rendering_instructions = cadr(datum_evaluated_var);
				}
			    } else {
				{
				    SubLObject time_var = get_internal_real_time();
				    grouped_sentences = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentences_for_term(v_term, domain_mt);
				    info_gathering_time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
				}
				{
				    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
				    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
					com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
					format(stream, $str_alt266$Gathered__S_groups_of_sentences_f, new SubLObject[] { length(grouped_sentences), v_term, numeric_date_utilities.readable_elapsed_time_string(info_gathering_time, UNPROVIDED) });
					force_output(stream);
				    }
				}
				thread.resetMultipleValues();
				{
				    SubLObject paragraph_data = com.cyc.cycjava.cycl.fact_sheets.paraphrase_fact_sheet_sentences(v_term, grouped_sentences, verbosity, language_mt, domain_mt);
				    SubLObject sentence_count = thread.secondMultipleValue();
				    SubLObject pph_time = thread.thirdMultipleValue();
				    SubLObject generated_footnotes = thread.fourthMultipleValue();
				    thread.resetMultipleValues();
				    fact_sheet_data = paragraph_data;
				    stats = com.cyc.cycjava.cycl.fact_sheets.new_fact_sheet_stats(v_term, domain_mt, verbosity, sentence_count, length(grouped_sentences), info_gathering_time, pph_time);
				    footnotes = generated_footnotes;
				}
			    }
			}
		    } finally {
			proof_view.$tkb_image_root_placeholder$.rebind(_prev_bind_2, thread);
			$thcl_forts_by_fiat$.rebind(_prev_bind_1, thread);
			$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
		    }
		}
		return list(fact_sheet_data, stats, footnotes, rendering_instructions);
	    }
	}
    }

    public static SubLObject generate_fact_sheet_data(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject info_gathering_time = NIL;
	SubLObject grouped_sentences = NIL;
	SubLObject fact_sheet_data = NIL;
	SubLObject stats = NIL;
	SubLObject footnotes = NIL;
	SubLObject rendering_instructions = NIL;
	final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
	final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
	final SubLObject _prev_bind_3 = sources.$tkb_image_root_placeholder$.currentBinding(thread);
	try {
	    fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
	    thcl.$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread), thread);
	    sources.$tkb_image_root_placeholder$.bind(fact_sheets.fact_sheet_image_root_placeholder(), thread);
	    if (((NIL != sources.$tkb_image_root_placeholder$.getDynamicValue(thread)) && (!fact_sheets.assertionsDisabledSynth)) && (NIL == stringp(sources.$tkb_image_root_placeholder$.getDynamicValue(thread)))) {
		throw new AssertionError(sources.$tkb_image_root_placeholder$.getDynamicValue(thread));
	    }
	    if (verbosity.eql($MINI)) {
		final SubLObject datum_evaluated_var = fact_sheets.get_mini_fact_sheet_for_term_in_html(v_term, domain_mt, language_mt);
		fact_sheet_data = datum_evaluated_var.first();
		rendering_instructions = cadr(datum_evaluated_var);
	    } else {
		final SubLObject time_var = get_internal_real_time();
		grouped_sentences = fact_sheets.fact_sheet_sentences_for_term(v_term, domain_mt);
		info_gathering_time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
		final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
		    format(stream, fact_sheets.$str99$Gathered__D_group__P_of_sentences, new SubLObject[] { length(grouped_sentences), v_term, numeric_date_utilities.readable_elapsed_time_string(info_gathering_time, UNPROVIDED) });
		    force_output(stream);
		}
		thread.resetMultipleValues();
		final SubLObject paragraph_data = fact_sheets.paraphrase_fact_sheet_sentences(v_term, grouped_sentences, verbosity, language_mt, domain_mt);
		final SubLObject sentence_count = thread.secondMultipleValue();
		final SubLObject pph_time = thread.thirdMultipleValue();
		final SubLObject generated_footnotes = thread.fourthMultipleValue();
		thread.resetMultipleValues();
		fact_sheet_data = paragraph_data;
		stats = fact_sheets.new_fact_sheet_stats(v_term, domain_mt, verbosity, sentence_count, length(grouped_sentences), info_gathering_time, pph_time);
		footnotes = generated_footnotes;
	    }
	} finally {
	    sources.$tkb_image_root_placeholder$.rebind(_prev_bind_3, thread);
	    thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
	    fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
	}
	return list(fact_sheet_data, stats, footnotes, rendering_instructions);
    }

    public static final SubLObject fact_sheet_stats_p_alt(SubLObject v_object) {
	return makeBoolean((NIL != list_utilities.proper_list_p(v_object)) && (((NIL != list_utilities.lengthE(v_object, ELEVEN_INTEGER, UNPROVIDED)) && (NIL != pattern_match.tree_matches_pattern(v_object, $list_alt267)))
		|| ((NIL != list_utilities.lengthE(v_object, TWELVE_INTEGER, UNPROVIDED)) && (NIL != pattern_match.tree_matches_pattern(v_object, $list_alt268)))));
    }

    public static SubLObject fact_sheet_stats_p(final SubLObject v_object) {
	return makeBoolean((NIL != list_utilities.proper_list_p(v_object)) && (((NIL != list_utilities.lengthE(v_object, ELEVEN_INTEGER, UNPROVIDED)) && (NIL != pattern_match.tree_matches_pattern(v_object, fact_sheets.$list100)))
		|| ((NIL != list_utilities.lengthE(v_object, TWELVE_INTEGER, UNPROVIDED)) && (NIL != pattern_match.tree_matches_pattern(v_object, fact_sheets.$list101)))));
    }

    public static final SubLObject possibly_fact_sheet_domain_mtP_alt(SubLObject v_object) {
	return hlmt.hlmtP(v_object);
    }

    public static SubLObject possibly_fact_sheet_domain_mtP(final SubLObject v_object) {
	return hlmt.hlmtP(v_object);
    }

    /**
     *
     *
     * @return FACT-SHEET-STATS-P.
     */
    @LispMethod(comment = "@return FACT-SHEET-STATS-P.")
    public static final SubLObject new_fact_sheet_stats_alt(SubLObject v_term, SubLObject domain_mt, SubLObject verbosity, SubLObject sentence_count, SubLObject section_count, SubLObject info_gathering_time, SubLObject pph_time) {
	SubLTrampolineFile.checkType(v_term, CYCL_REPRESENTED_TERM_P);
	SubLTrampolineFile.checkType(domain_mt, $sym270$HLMT_);
	SubLTrampolineFile.checkType(verbosity, FACT_SHEET_VERBOSITY_P);
	SubLTrampolineFile.checkType(sentence_count, NON_NEGATIVE_INTEGER_P);
	SubLTrampolineFile.checkType(section_count, NON_NEGATIVE_INTEGER_P);
	SubLTrampolineFile.checkType(info_gathering_time, NON_NEGATIVE_NUMBER_P);
	SubLTrampolineFile.checkType(pph_time, NON_NEGATIVE_NUMBER_P);
	return list(new SubLObject[] { domain_mt, verbosity, sentence_count, section_count, info_gathering_time, pph_time, numeric_date_utilities.secondstring(UNPROVIDED), numeric_date_utilities.datestring(UNPROVIDED), cyc_image_id(), operation_communication.kb_version_string(),
		system_info.cyc_revision_string(), v_term });
    }

    /**
     *
     *
     * @return FACT-SHEET-STATS-P.
     */
    @LispMethod(comment = "@return FACT-SHEET-STATS-P.")
    public static SubLObject new_fact_sheet_stats(final SubLObject v_term, final SubLObject domain_mt, final SubLObject verbosity, final SubLObject sentence_count, final SubLObject section_count, final SubLObject info_gathering_time, final SubLObject pph_time) {
	assert NIL != cycl_grammar.cycl_represented_term_p(v_term) : "! cycl_grammar.cycl_represented_term_p(v_term) " + ("cycl_grammar.cycl_represented_term_p(v_term) " + "CommonSymbols.NIL != cycl_grammar.cycl_represented_term_p(v_term) ") + v_term;
	assert NIL != hlmt.hlmtP(domain_mt) : "! hlmt.hlmtP(domain_mt) " + ("hlmt.hlmtP(domain_mt) " + "CommonSymbols.NIL != hlmt.hlmtP(domain_mt) ") + domain_mt;
	assert NIL != fact_sheets.fact_sheet_verbosity_p(verbosity) : "! fact_sheets.fact_sheet_verbosity_p(verbosity) " + ("fact_sheets.fact_sheet_verbosity_p(verbosity) " + "CommonSymbols.NIL != fact_sheets.fact_sheet_verbosity_p(verbosity) ") + verbosity;
	assert NIL != subl_promotions.non_negative_integer_p(sentence_count) : "! subl_promotions.non_negative_integer_p(sentence_count) " + ("subl_promotions.non_negative_integer_p(sentence_count) " + "CommonSymbols.NIL != subl_promotions.non_negative_integer_p(sentence_count) ") + sentence_count;
	assert NIL != subl_promotions.non_negative_integer_p(section_count) : "! subl_promotions.non_negative_integer_p(section_count) " + ("subl_promotions.non_negative_integer_p(section_count) " + "CommonSymbols.NIL != subl_promotions.non_negative_integer_p(section_count) ") + section_count;
	assert NIL != number_utilities.non_negative_number_p(info_gathering_time) : "! number_utilities.non_negative_number_p(info_gathering_time) "
		+ ("number_utilities.non_negative_number_p(info_gathering_time) " + "CommonSymbols.NIL != number_utilities.non_negative_number_p(info_gathering_time) ") + info_gathering_time;
	assert NIL != number_utilities.non_negative_number_p(pph_time) : "! number_utilities.non_negative_number_p(pph_time) " + ("number_utilities.non_negative_number_p(pph_time) " + "CommonSymbols.NIL != number_utilities.non_negative_number_p(pph_time) ") + pph_time;
	return list(new SubLObject[] { domain_mt, verbosity, sentence_count, section_count, info_gathering_time, pph_time, numeric_date_utilities.secondstring(UNPROVIDED), numeric_date_utilities.datestring(UNPROVIDED), cyc_image_id(), operation_communication.kb_version_string(),
		system_info.cyc_revision_string(), v_term });
    }

    /**
     *
     *
     * @return ALIST-P; CATEGORY -> HTML-TEXT*
     */
    @LispMethod(comment = "@return ALIST-P; CATEGORY -> HTML-TEXT*")
    public static final SubLObject fact_sheet_texts_from_data_alt(SubLObject language_mt, SubLObject domain_mt, SubLObject focal_term, SubLObject paragraph_data, SubLObject v_properties) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject texts = NIL;
		SubLObject sources = NIL;
		SubLObject skip_sections = getf(v_properties, $SKIP_SECTIONS, UNPROVIDED);
		SubLObject include_sections = getf(v_properties, $INCLUDE_SECTIONS, UNPROVIDED);
		if (paragraph_data.eql(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_under_construction_code())) {
		    texts = list(paragraph_data);
		} else {
		    {
			SubLObject sorted_paragraph_data = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sort_paragraphs_at_retrieval_time(paragraph_data, v_properties);
			SubLObject table_specs = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_table_specs(focal_term, domain_mt);
			SubLObject cdolist_list_var = com.cyc.cycjava.cycl.fact_sheets.substitute_fact_sheet_labels_for_categories(sorted_paragraph_data, language_mt, v_properties);
			SubLObject category_data = NIL;
			for (category_data = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), category_data = cdolist_list_var.first()) {
			    {
				SubLObject datum = category_data;
				SubLObject current = datum;
				SubLObject label = NIL;
				SubLObject paragraph_data_25 = NIL;
				destructuring_bind_must_consp(current, datum, $list_alt274);
				label = current.first();
				current = current.rest();
				paragraph_data_25 = current;
				if (!(((NIL != include_sections) && (NIL == subl_promotions.memberP(com.cyc.cycjava.cycl.fact_sheets.category_label_pred(label), include_sections, EQUAL, UNPROVIDED)))
					|| (NIL != subl_promotions.memberP(com.cyc.cycjava.cycl.fact_sheets.category_label_pred(label), skip_sections, EQUAL, UNPROVIDED)))) {
				    {
					SubLObject paragraph_texts = NIL;
					SubLObject section_table_specs = com.cyc.cycjava.cycl.fact_sheets.section_table_specs(label, table_specs);
					SubLObject table_types = com.cyc.cycjava.cycl.fact_sheets.table_types_from_section_table_specs(section_table_specs);
					SubLObject table_data = (NIL != table_types) ? ((SubLObject) (dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED))) : NIL;
					SubLObject cdolist_list_var_26 = paragraph_data_25;
					SubLObject sentence_paraphrases = NIL;
					for (sentence_paraphrases = cdolist_list_var_26.first(); NIL != cdolist_list_var_26; cdolist_list_var_26 = cdolist_list_var_26.rest(), sentence_paraphrases = cdolist_list_var_26.first()) {
					    thread.resetMultipleValues();
					    {
						SubLObject paragraph_text = com.cyc.cycjava.cycl.fact_sheets.construct_fact_sheet_paragraph(sentence_paraphrases, focal_term, domain_mt, v_properties, table_types, table_data);
						SubLObject paragraph_sources = thread.secondMultipleValue();
						thread.resetMultipleValues();
						{
						    SubLObject var = paragraph_text;
						    if (NIL != var) {
							paragraph_texts = cons(var, paragraph_texts);
						    }
						}
						sources = cconcatenate(paragraph_sources, sources);
					    }
					}
					{
					    SubLObject markup_tables = (NIL != table_data) ? ((SubLObject) (com.cyc.cycjava.cycl.fact_sheets.fact_sheet_markup_tables_from_data(section_table_specs, table_data, language_mt, domain_mt, v_properties, focal_term))) : NIL;
					    texts = list_utilities.alist_enter(texts, label, nconc(markup_tables, nreverse(paragraph_texts)), UNPROVIDED);
					}
				    }
				}
			    }
			}
		    }
		}
		return values(nreverse(texts), sources);
	    }
	}
    }

    /**
     *
     *
     * @return ALIST-P; CATEGORY -> HTML-TEXT*
     */
    @LispMethod(comment = "@return ALIST-P; CATEGORY -> HTML-TEXT*")
    public static SubLObject fact_sheet_texts_from_data(final SubLObject language_mt, final SubLObject domain_mt, final SubLObject focal_term, final SubLObject paragraph_data, final SubLObject v_properties) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject texts = NIL;
	SubLObject v_sources = NIL;
	final SubLObject skip_sections = getf(v_properties, $SKIP_SECTIONS, UNPROVIDED);
	final SubLObject include_sections = getf(v_properties, $INCLUDE_SECTIONS, UNPROVIDED);
	if (paragraph_data.eql(fact_sheets.fact_sheet_under_construction_code())) {
	    texts = list(paragraph_data);
	} else {
	    final SubLObject sorted_paragraph_data = fact_sheets.fact_sheet_sort_paragraphs_at_retrieval_time(paragraph_data, v_properties);
	    final SubLObject table_specs = fact_sheets.fact_sheet_table_specs(focal_term, domain_mt);
	    SubLObject cdolist_list_var = fact_sheets.substitute_fact_sheet_labels_for_categories(sorted_paragraph_data, language_mt, v_properties);
	    SubLObject category_data = NIL;
	    category_data = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject current;
		final SubLObject datum = current = category_data;
		SubLObject label = NIL;
		SubLObject paragraph_data_$3 = NIL;
		destructuring_bind_must_consp(current, datum, fact_sheets.$list107);
		label = current.first();
		current = paragraph_data_$3 = current.rest();
		final SubLObject category_pred = fact_sheets.category_label_pred(label);
		if (((NIL == include_sections) || (NIL != subl_promotions.memberP(category_pred, include_sections, EQUAL, UNPROVIDED))) && (NIL == subl_promotions.memberP(category_pred, skip_sections, EQUAL, UNPROVIDED))) {
		    SubLObject paragraph_texts = NIL;
		    final SubLObject force_bulletsP = fact_sheets.fact_sheet_force_bullets_for_categoryP(category_pred);
		    final SubLObject slot_values_onlyP = fact_sheets.fact_sheet_prefer_slot_values_for_categoryP(category_pred, v_properties);
		    final SubLObject section_table_specs = fact_sheets.section_table_specs(label, table_specs);
		    final SubLObject table_types = fact_sheets.table_types_from_section_table_specs(section_table_specs);
		    final SubLObject table_data = (NIL != table_types) ? dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED) : NIL;
		    if (NIL != slot_values_onlyP) {
			Errors.warn(fact_sheets.$str108$Prefering_slot_value_format_for__, category_pred);
		    } else {
			Errors.warn(fact_sheets.$str109$Disprefering_slot_value_format_fo, category_pred);
		    }
		    SubLObject cdolist_list_var_$4 = paragraph_data_$3;
		    SubLObject sentence_paraphrases = NIL;
		    sentence_paraphrases = cdolist_list_var_$4.first();
		    while (NIL != cdolist_list_var_$4) {
			thread.resetMultipleValues();
			final SubLObject paragraph_text = fact_sheets.construct_fact_sheet_paragraph(sentence_paraphrases, focal_term, domain_mt, v_properties, table_types, table_data, force_bulletsP, slot_values_onlyP);
			final SubLObject paragraph_sources = thread.secondMultipleValue();
			thread.resetMultipleValues();
			final SubLObject var = paragraph_text;
			if (NIL != var) {
			    paragraph_texts = cons(var, paragraph_texts);
			}
			v_sources = cconcatenate(paragraph_sources, v_sources);
			cdolist_list_var_$4 = cdolist_list_var_$4.rest();
			sentence_paraphrases = cdolist_list_var_$4.first();
		    }
		    final SubLObject markup_tables = (NIL != table_data) ? fact_sheets.fact_sheet_markup_tables_from_data(section_table_specs, table_data, language_mt, domain_mt, v_properties, focal_term) : NIL;
		    texts = list_utilities.alist_enter(texts, label, nconc(markup_tables, nreverse(paragraph_texts)), UNPROVIDED);
		}
		cdolist_list_var = cdolist_list_var.rest();
		category_data = cdolist_list_var.first();
	    }
	}
	return values(nreverse(texts), v_sources);
    }

    public static SubLObject fact_sheet_prefer_slot_values_for_categoryP(final SubLObject category_pred, final SubLObject v_properties) {
	final SubLObject pattern = getf(v_properties, fact_sheets.$SLOT_VALUE_PREFERENCE_PATTERN, NIL);
	return makeBoolean((NIL != fort_types_interface.isa_predicateP(category_pred, UNPROVIDED)) && (NIL != pattern_match.tree_matches_pattern(category_pred, pattern)));
    }

    public static final SubLObject fact_sheet_markup_tables_from_data_alt(SubLObject section_table_specs, SubLObject table_data, SubLObject language_mt, SubLObject domain_mt, SubLObject v_properties, SubLObject focal_term) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject markup_tables = NIL;
		SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(table_data));
		while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
		    thread.resetMultipleValues();
		    {
			SubLObject table_type = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
			SubLObject table_type_data = thread.secondMultipleValue();
			thread.resetMultipleValues();
			{
			    SubLObject markup_table = (NIL != com.cyc.cycjava.cycl.fact_sheets.xml_factsheetsP(v_properties))
				    ? ((SubLObject) (com.cyc.cycjava.cycl.fact_sheets.fact_sheet_xml_table_from_data(section_table_specs, table_type, table_type_data, v_properties, language_mt, domain_mt, focal_term)))
				    : com.cyc.cycjava.cycl.fact_sheets.fact_sheet_html_table_from_data(section_table_specs, table_type, table_type_data, v_properties, language_mt, domain_mt, focal_term);
			    markup_tables = cons(markup_table, markup_tables);
			}
			iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
		    }
		}
		dictionary_contents.do_dictionary_contents_finalize(iteration_state);
		return markup_tables;
	    }
	}
    }

    public static SubLObject fact_sheet_markup_tables_from_data(final SubLObject section_table_specs, final SubLObject table_data, final SubLObject language_mt, final SubLObject domain_mt, final SubLObject v_properties, final SubLObject focal_term) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject markup_tables = NIL;
	SubLObject iteration_state;
	for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(table_data)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
	    thread.resetMultipleValues();
	    final SubLObject table_type = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
	    final SubLObject table_type_data = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    final SubLObject markup_table = (NIL != fact_sheets.xml_factsheetsP(v_properties)) ? fact_sheets.fact_sheet_xml_table_from_data(section_table_specs, table_type, table_type_data, v_properties, language_mt, domain_mt, focal_term)
		    : fact_sheets.fact_sheet_html_table_from_data(section_table_specs, table_type, table_type_data, v_properties, language_mt, domain_mt, focal_term);
	    markup_tables = cons(markup_table, markup_tables);
	}
	dictionary_contents.do_dictionary_contents_finalize(iteration_state);
	return markup_tables;
    }

    public static final SubLObject fact_sheet_xml_table_from_data_alt(SubLObject section_table_specs, SubLObject table_type, SubLObject table_type_data, SubLObject v_properties, SubLObject language_mt, SubLObject domain_mt, SubLObject focal_term) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject table_title = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_table_title(table_type, language_mt);
		SubLObject xml_table = NIL;
		SubLObject table_title_attrs = (NIL != table_title) ? ((SubLObject) (list($$$title, table_title))) : NIL;
		SubLObject fact_headers = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_table_header_values(section_table_specs, table_type);
		SubLObject stream = NIL;
		try {
		    stream = make_private_string_output_stream();
		    {
			SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
			try {
			    xml_vars.$xml_stream$.bind(stream, thread);
			    {
				SubLObject _prev_bind_0_27 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
				SubLObject _prev_bind_1 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
				try {
				    xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
				    xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
				    xml_utilities.xml_start_tag_internal($$$factGroup, table_title_attrs, NIL);
				    {
					SubLObject cdolist_list_var = com.cyc.cycjava.cycl.fact_sheets.sort_fact_sheet_table_data(table_type_data);
					SubLObject cons = NIL;
					for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
					    {
						SubLObject datum = cons;
						SubLObject current = datum;
						SubLObject sentence = NIL;
						SubLObject sentence_data = NIL;
						destructuring_bind_must_consp(current, datum, $list_alt280);
						sentence = current.first();
						current = current.rest();
						sentence_data = current;
						{
						    SubLObject assertion = com.cyc.cycjava.cycl.fact_sheets.find_assertion_for_fact_sheet_sentence(sentence, domain_mt);
						    SubLObject assertion_formula = (NIL != assertion) ? ((SubLObject) (uncanonicalizer.assertion_el_ist_formula(assertion))) : NIL;
						    SubLObject fact_sentence = (NIL != assertion_formula) ? ((SubLObject) (assertion_formula)) : sentence;
						    SubLObject fact_attrs = list($$$id, kb_utilities.compact_hl_external_id_string(fact_sentence), $$$cycl, fact_sentence);
						    {
							SubLObject _prev_bind_0_28 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
							SubLObject _prev_bind_1_29 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
							try {
							    xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
							    xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
							    xml_utilities.xml_start_tag_internal($$$fact, fact_attrs, NIL);
							    {
								SubLObject cdolist_list_var_30 = list_utilities.sort_alist_by_keys(sentence_data, symbol_function($sym288$_));
								SubLObject cons_31 = NIL;
								for (cons_31 = cdolist_list_var_30.first(); NIL != cdolist_list_var_30; cdolist_list_var_30 = cdolist_list_var_30.rest(), cons_31 = cdolist_list_var_30.first()) {
								    {
									SubLObject datum_32 = cons_31;
									SubLObject current_33 = datum_32;
									SubLObject column = NIL;
									SubLObject value = NIL;
									destructuring_bind_must_consp(current_33, datum_32, $list_alt284);
									column = current_33.first();
									current_33 = current_33.rest();
									value = current_33;
									{
									    SubLObject arg_headers = list($$$header, nth(subtract(column, ONE_INTEGER), fact_headers), $$$id, kb_utilities.compact_hl_external_id_string(value), $$$cycl, value);
									    {
										SubLObject _prev_bind_0_34 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
										SubLObject _prev_bind_1_35 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
										try {
										    xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
										    xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
										    xml_utilities.xml_start_tag_internal($$$arg, arg_headers, NIL);
										    format(xml_vars.$xml_stream$.getDynamicValue(thread), $str_alt287$_A, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_table_data_for_value(column, value, v_properties, language_mt, domain_mt, focal_term));
										} finally {
										    xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_35, thread);
										    xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_34, thread);
										}
									    }
									    xml_utilities.xml_terpri();
									    xml_utilities.xml_end_tag_internal($$$arg);
									}
								    }
								}
							    }
							} finally {
							    xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_29, thread);
							    xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_28, thread);
							}
						    }
						    xml_utilities.xml_terpri();
						    xml_utilities.xml_end_tag_internal($$$fact);
						}
					    }
					}
				    }
				} finally {
				    xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1, thread);
				    xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_27, thread);
				}
			    }
			    xml_utilities.xml_terpri();
			    xml_utilities.xml_end_tag_internal($$$factGroup);
			} finally {
			    xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
			}
		    }
		    xml_table = get_output_stream_string(stream);
		} finally {
		    {
			SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    close(stream, UNPROVIDED);
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return xml_table;
	    }
	}
    }

    public static SubLObject fact_sheet_xml_table_from_data(final SubLObject section_table_specs, final SubLObject table_type, final SubLObject table_type_data, final SubLObject v_properties, final SubLObject language_mt, final SubLObject domain_mt, final SubLObject focal_term) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject table_title = fact_sheets.fact_sheet_table_title(table_type, language_mt);
	SubLObject xml_table = NIL;
	final SubLObject table_title_attrs = (NIL != table_title) ? list(fact_sheets.$$$title, table_title) : NIL;
	final SubLObject fact_headers = fact_sheets.fact_sheet_table_header_values(section_table_specs, table_type);
	SubLObject stream = NIL;
	try {
	    stream = make_private_string_output_stream();
	    final SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
	    try {
		xml_vars.$xml_stream$.bind(stream, thread);
		try {
		    final SubLObject _prev_bind_0_$5 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
		    final SubLObject _prev_bind_2 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
		    try {
			xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
			xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
			xml_utilities.xml_start_tag_internal(fact_sheets.$$$factGroup, table_title_attrs, NIL, NIL, $UNINITIALIZED);
			final SubLObject _prev_bind_0_$6 = xml_vars.$xml_default_namespace$.currentBinding(thread);
			try {
			    xml_vars.$xml_default_namespace$.bind($UNINITIALIZED, thread);
			    SubLObject cdolist_list_var = fact_sheets.sort_fact_sheet_table_data(table_type_data);
			    SubLObject cons = NIL;
			    cons = cdolist_list_var.first();
			    while (NIL != cdolist_list_var) {
				SubLObject current;
				final SubLObject datum = current = cons;
				SubLObject sentence = NIL;
				SubLObject sentence_data = NIL;
				destructuring_bind_must_consp(current, datum, fact_sheets.$list117);
				sentence = current.first();
				current = sentence_data = current.rest();
				final SubLObject assertion = fact_sheets.find_assertion_for_fact_sheet_sentence(sentence, domain_mt);
				final SubLObject assertion_formula = (NIL != assertion) ? uncanonicalizer.assertion_el_ist_formula(assertion) : NIL;
				final SubLObject fact_sentence = (NIL != assertion_formula) ? assertion_formula : sentence;
				final SubLObject fact_attrs = list(fact_sheets.$$$id, kb_utilities.compact_hl_external_id_string(fact_sentence), fact_sheets.$$$cycl, fact_sentence);
				try {
				    final SubLObject _prev_bind_0_$7 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
				    final SubLObject _prev_bind_1_$8 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
				    try {
					xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
					xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
					xml_utilities.xml_start_tag_internal(fact_sheets.$$$fact, fact_attrs, NIL, NIL, $UNINITIALIZED);
					final SubLObject _prev_bind_0_$8 = xml_vars.$xml_default_namespace$.currentBinding(thread);
					try {
					    xml_vars.$xml_default_namespace$.bind($UNINITIALIZED, thread);
					    SubLObject cdolist_list_var_$10 = list_utilities.sort_alist_by_keys(sentence_data, symbol_function(fact_sheets.$sym125$_));
					    SubLObject cons_$11 = NIL;
					    cons_$11 = cdolist_list_var_$10.first();
					    while (NIL != cdolist_list_var_$10) {
						SubLObject current_$13;
						final SubLObject datum_$12 = current_$13 = cons_$11;
						SubLObject column = NIL;
						SubLObject value = NIL;
						destructuring_bind_must_consp(current_$13, datum_$12, fact_sheets.$list121);
						column = current_$13.first();
						current_$13 = value = current_$13.rest();
						final SubLObject arg_headers = list(fact_sheets.$$$header, nth(subtract(column, ONE_INTEGER), fact_headers), fact_sheets.$$$id, kb_utilities.compact_hl_external_id_string(value), fact_sheets.$$$cycl, value);
						try {
						    final SubLObject _prev_bind_0_$9 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
						    final SubLObject _prev_bind_1_$9 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
						    try {
							xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
							xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
							xml_utilities.xml_start_tag_internal(fact_sheets.$$$arg, arg_headers, NIL, NIL, $UNINITIALIZED);
							final SubLObject _prev_bind_0_$10 = xml_vars.$xml_default_namespace$.currentBinding(thread);
							try {
							    xml_vars.$xml_default_namespace$.bind($UNINITIALIZED, thread);
							    format(xml_vars.$xml_stream$.getDynamicValue(thread), fact_sheets.$str124$_A, fact_sheets.fact_sheet_table_data_for_value(column, value, v_properties, language_mt, domain_mt, focal_term));
							} finally {
							    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$10, thread);
							}
						    } finally {
							xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$9, thread);
							xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$9, thread);
						    }
						} finally {
						    final SubLObject _prev_bind_0_$11 = $is_thread_performing_cleanupP$.currentBinding(thread);
						    try {
							$is_thread_performing_cleanupP$.bind(T, thread);
							final SubLObject _values = getValuesAsVector();
							xml_utilities.xml_terpri();
							xml_utilities.xml_end_tag_internal(fact_sheets.$$$arg);
							restoreValuesFromVector(_values);
						    } finally {
							$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$11, thread);
						    }
						}
						cdolist_list_var_$10 = cdolist_list_var_$10.rest();
						cons_$11 = cdolist_list_var_$10.first();
					    }
					} finally {
					    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$8, thread);
					}
				    } finally {
					xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$8, thread);
					xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$7, thread);
				    }
				} finally {
				    final SubLObject _prev_bind_0_$12 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					final SubLObject _values2 = getValuesAsVector();
					xml_utilities.xml_terpri();
					xml_utilities.xml_end_tag_internal(fact_sheets.$$$fact);
					restoreValuesFromVector(_values2);
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$12, thread);
				    }
				}
				cdolist_list_var = cdolist_list_var.rest();
				cons = cdolist_list_var.first();
			    }
			} finally {
			    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$6, thread);
			}
		    } finally {
			xml_utilities.$cycml_indent_level$.rebind(_prev_bind_2, thread);
			xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$5, thread);
		    }
		} finally {
		    final SubLObject _prev_bind_0_$13 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values3 = getValuesAsVector();
			xml_utilities.xml_terpri();
			xml_utilities.xml_end_tag_internal(fact_sheets.$$$factGroup);
			restoreValuesFromVector(_values3);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$13, thread);
		    }
		}
	    } finally {
		xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
	    }
	    xml_table = get_output_stream_string(stream);
	} finally {
	    final SubLObject _prev_bind_3 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values4 = getValuesAsVector();
		close(stream, UNPROVIDED);
		restoreValuesFromVector(_values4);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
	    }
	}
	return xml_table;
    }

    public static final SubLObject fact_sheet_html_table_from_data_alt(SubLObject section_table_specs, SubLObject table_type, SubLObject table_type_data, SubLObject v_properties, SubLObject language_mt, SubLObject domain_mt, SubLObject focal_term) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject table_title = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_table_title(table_type, language_mt);
		SubLObject html_table = NIL;
		SubLObject stream = NIL;
		try {
		    stream = make_private_string_output_stream();
		    {
			SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
			try {
			    html_macros.$html_stream$.bind(stream, thread);
			    html_markup(html_macros.$html_table_head$.getGlobalValue());
			    if (NIL != $fact_sheet_table_horizontal_alignment$.getGlobalValue()) {
				html_markup(html_macros.$html_table_align$.getGlobalValue());
				html_char(CHAR_quotation, UNPROVIDED);
				html_markup(html_align($fact_sheet_table_horizontal_alignment$.getGlobalValue()));
				html_char(CHAR_quotation, UNPROVIDED);
			    }
			    if (NIL != $fact_sheet_table_border_width$.getGlobalValue()) {
				html_markup(html_macros.$html_table_border$.getGlobalValue());
				html_char(CHAR_quotation, UNPROVIDED);
				html_markup($fact_sheet_table_border_width$.getGlobalValue());
				html_char(CHAR_quotation, UNPROVIDED);
			    }
			    if (NIL != $fact_sheet_table_cellpadding$.getGlobalValue()) {
				html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
				html_char(CHAR_quotation, UNPROVIDED);
				html_markup($fact_sheet_table_cellpadding$.getGlobalValue());
				html_char(CHAR_quotation, UNPROVIDED);
			    }
			    if (NIL != $fact_sheet_table_width$.getGlobalValue()) {
				html_markup(html_macros.$html_table_width$.getGlobalValue());
				html_char(CHAR_quotation, UNPROVIDED);
				html_markup($fact_sheet_table_width$.getGlobalValue());
				html_char(CHAR_quotation, UNPROVIDED);
			    }
			    html_char(CHAR_greater, UNPROVIDED);
			    {
				SubLObject _prev_bind_0_36 = html_macros.$html_safe_print$.currentBinding(thread);
				try {
				    html_macros.$html_safe_print$.bind(T, thread);
				    if (NIL != table_title) {
					com.cyc.cycjava.cycl.fact_sheets.output_fact_sheet_table_title_row(table_title, table_type);
				    }
				    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
				    if (NIL != $fact_sheet_table_header_horizontal_alignment$.getGlobalValue()) {
					html_markup(html_macros.$html_table_data_align$.getGlobalValue());
					html_char(CHAR_quotation, UNPROVIDED);
					html_markup(html_align($fact_sheet_table_header_horizontal_alignment$.getGlobalValue()));
					html_char(CHAR_quotation, UNPROVIDED);
				    }
				    if (NIL != $fact_sheet_table_header_bgcolor$.getGlobalValue()) {
					html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
					html_char(CHAR_quotation, UNPROVIDED);
					html_markup($fact_sheet_table_header_bgcolor$.getGlobalValue());
					html_char(CHAR_quotation, UNPROVIDED);
				    }
				    html_char(CHAR_greater, UNPROVIDED);
				    {
					SubLObject _prev_bind_0_37 = html_macros.$html_safe_print$.currentBinding(thread);
					try {
					    html_macros.$html_safe_print$.bind(T, thread);
					    com.cyc.cycjava.cycl.fact_sheets.output_fact_sheet_table_sentence_link(NIL);
					    {
						SubLObject cdolist_list_var = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_table_header_values(section_table_specs, table_type);
						SubLObject header_value = NIL;
						for (header_value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), header_value = cdolist_list_var.first()) {
						    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
						    html_char(CHAR_greater, UNPROVIDED);
						    {
							SubLObject _prev_bind_0_38 = html_macros.$html_safe_print$.currentBinding(thread);
							try {
							    html_macros.$html_safe_print$.bind(T, thread);
							    {
								SubLObject color_val = $fact_sheet_table_header_font_color$.getGlobalValue();
								html_markup(html_macros.$html_font_head$.getGlobalValue());
								if (NIL != color_val) {
								    html_markup(html_macros.$html_font_color$.getGlobalValue());
								    html_char(CHAR_quotation, UNPROVIDED);
								    html_markup(html_color(color_val));
								    html_char(CHAR_quotation, UNPROVIDED);
								}
								html_char(CHAR_greater, UNPROVIDED);
								{
								    SubLObject _prev_bind_0_39 = html_macros.$html_safe_print$.currentBinding(thread);
								    try {
									html_macros.$html_safe_print$.bind(T, thread);
									html_markup(header_value);
								    } finally {
									html_macros.$html_safe_print$.rebind(_prev_bind_0_39, thread);
								    }
								}
								html_markup(html_macros.$html_font_tail$.getGlobalValue());
							    }
							} finally {
							    html_macros.$html_safe_print$.rebind(_prev_bind_0_38, thread);
							}
						    }
						    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
						}
					    }
					} finally {
					    html_macros.$html_safe_print$.rebind(_prev_bind_0_37, thread);
					}
				    }
				    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
				    html_source_readability_terpri(UNPROVIDED);
				    {
					SubLObject cdolist_list_var = com.cyc.cycjava.cycl.fact_sheets.sort_fact_sheet_table_data(table_type_data);
					SubLObject cons = NIL;
					for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
					    {
						SubLObject datum = cons;
						SubLObject current = datum;
						SubLObject sentence = NIL;
						SubLObject sentence_data = NIL;
						destructuring_bind_must_consp(current, datum, $list_alt280);
						sentence = current.first();
						current = current.rest();
						sentence_data = current;
						html_markup(html_macros.$html_table_row_head$.getGlobalValue());
						if (NIL != $fact_sheet_table_data_bgcolor$.getGlobalValue()) {
						    html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
						    html_char(CHAR_quotation, UNPROVIDED);
						    html_markup($fact_sheet_table_data_bgcolor$.getGlobalValue());
						    html_char(CHAR_quotation, UNPROVIDED);
						}
						html_char(CHAR_greater, UNPROVIDED);
						{
						    SubLObject _prev_bind_0_40 = html_macros.$html_safe_print$.currentBinding(thread);
						    try {
							html_macros.$html_safe_print$.bind(T, thread);
							{
							    SubLObject assertion = com.cyc.cycjava.cycl.fact_sheets.find_assertion_for_fact_sheet_sentence(sentence, domain_mt);
							    com.cyc.cycjava.cycl.fact_sheets.output_fact_sheet_table_sentence_link(NIL != assertion ? ((SubLObject) (assertion)) : sentence);
							    {
								SubLObject cdolist_list_var_41 = list_utilities.sort_alist_by_keys(sentence_data, symbol_function($sym288$_));
								SubLObject cons_42 = NIL;
								for (cons_42 = cdolist_list_var_41.first(); NIL != cdolist_list_var_41; cdolist_list_var_41 = cdolist_list_var_41.rest(), cons_42 = cdolist_list_var_41.first()) {
								    {
									SubLObject datum_43 = cons_42;
									SubLObject current_44 = datum_43;
									SubLObject column = NIL;
									SubLObject value = NIL;
									destructuring_bind_must_consp(current_44, datum_43, $list_alt284);
									column = current_44.first();
									current_44 = current_44.rest();
									value = current_44;
									{
									    SubLObject align = (column.eql(ONE_INTEGER)) ? ((SubLObject) ($fact_sheet_table_data_first_column_horizontal_alignment$.getGlobalValue())) : NIL;
									    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
									    if (NIL != align) {
										html_markup(html_macros.$html_table_data_align$.getGlobalValue());
										html_char(CHAR_quotation, UNPROVIDED);
										html_markup(html_align(align));
										html_char(CHAR_quotation, UNPROVIDED);
									    }
									    html_char(CHAR_greater, UNPROVIDED);
									    {
										SubLObject _prev_bind_0_45 = html_macros.$html_safe_print$.currentBinding(thread);
										try {
										    html_macros.$html_safe_print$.bind(T, thread);
										    html_markup(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_table_data_for_value(column, value, v_properties, language_mt, domain_mt, focal_term));
										} finally {
										    html_macros.$html_safe_print$.rebind(_prev_bind_0_45, thread);
										}
									    }
									    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
									}
								    }
								}
							    }
							}
						    } finally {
							html_macros.$html_safe_print$.rebind(_prev_bind_0_40, thread);
						    }
						}
						html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
						html_source_readability_terpri(UNPROVIDED);
					    }
					}
				    }
				} finally {
				    html_macros.$html_safe_print$.rebind(_prev_bind_0_36, thread);
				}
			    }
			    html_markup(html_macros.$html_table_tail$.getGlobalValue());
			} finally {
			    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
			}
		    }
		    html_table = get_output_stream_string(stream);
		} finally {
		    {
			SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    close(stream, UNPROVIDED);
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return html_table;
	    }
	}
    }

    public static SubLObject fact_sheet_html_table_from_data(final SubLObject section_table_specs, final SubLObject table_type, final SubLObject table_type_data, final SubLObject v_properties, final SubLObject language_mt, final SubLObject domain_mt, final SubLObject focal_term) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject table_title = fact_sheets.fact_sheet_table_title(table_type, language_mt);
	SubLObject html_table = NIL;
	SubLObject stream = NIL;
	try {
	    stream = make_private_string_output_stream();
	    final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
	    try {
		html_macros.$html_stream$.bind(stream, thread);
		html_markup(html_macros.$html_table_head$.getGlobalValue());
		if (NIL != fact_sheets.$fact_sheet_table_horizontal_alignment$.getGlobalValue()) {
		    html_markup(html_macros.$html_table_align$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup(html_align(fact_sheets.$fact_sheet_table_horizontal_alignment$.getGlobalValue()));
		    html_char(CHAR_quotation, UNPROVIDED);
		}
		if (NIL != fact_sheets.$fact_sheet_table_border_width$.getGlobalValue()) {
		    html_markup(html_macros.$html_table_border$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup(fact_sheets.$fact_sheet_table_border_width$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		}
		if (NIL != fact_sheets.$fact_sheet_table_cellpadding$.getGlobalValue()) {
		    html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup(fact_sheets.$fact_sheet_table_cellpadding$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		}
		if (NIL != fact_sheets.$fact_sheet_table_width$.getGlobalValue()) {
		    html_markup(html_macros.$html_table_width$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup(fact_sheets.$fact_sheet_table_width$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		}
		html_char(CHAR_greater, UNPROVIDED);
		final SubLObject _prev_bind_0_$20 = html_macros.$html_safe_print$.currentBinding(thread);
		try {
		    html_macros.$html_safe_print$.bind(T, thread);
		    if (NIL != table_title) {
			fact_sheets.output_fact_sheet_table_title_row(table_title, table_type);
		    }
		    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
		    if (NIL != fact_sheets.$fact_sheet_table_header_horizontal_alignment$.getGlobalValue()) {
			html_markup(html_macros.$html_table_data_align$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(fact_sheets.$fact_sheet_table_header_horizontal_alignment$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
		    }
		    if (NIL != fact_sheets.$fact_sheet_table_header_bgcolor$.getGlobalValue()) {
			html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(fact_sheets.$fact_sheet_table_header_bgcolor$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
		    }
		    html_char(CHAR_greater, UNPROVIDED);
		    final SubLObject _prev_bind_0_$21 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			fact_sheets.output_fact_sheet_table_sentence_link(NIL);
			SubLObject cdolist_list_var = fact_sheets.fact_sheet_table_header_values(section_table_specs, table_type);
			SubLObject header_value = NIL;
			header_value = cdolist_list_var.first();
			while (NIL != cdolist_list_var) {
			    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
			    html_char(CHAR_greater, UNPROVIDED);
			    final SubLObject _prev_bind_0_$22 = html_macros.$html_safe_print$.currentBinding(thread);
			    try {
				html_macros.$html_safe_print$.bind(T, thread);
				final SubLObject color_val = fact_sheets.$fact_sheet_table_header_font_color$.getGlobalValue();
				html_markup(html_macros.$html_font_head$.getGlobalValue());
				if (NIL != color_val) {
				    html_markup(html_macros.$html_font_color$.getGlobalValue());
				    html_char(CHAR_quotation, UNPROVIDED);
				    html_markup(html_color(color_val));
				    html_char(CHAR_quotation, UNPROVIDED);
				}
				html_char(CHAR_greater, UNPROVIDED);
				final SubLObject _prev_bind_0_$23 = html_macros.$html_safe_print$.currentBinding(thread);
				try {
				    html_macros.$html_safe_print$.bind(T, thread);
				    html_markup(header_value);
				} finally {
				    html_macros.$html_safe_print$.rebind(_prev_bind_0_$23, thread);
				}
				html_markup(html_macros.$html_font_tail$.getGlobalValue());
			    } finally {
				html_macros.$html_safe_print$.rebind(_prev_bind_0_$22, thread);
			    }
			    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
			    cdolist_list_var = cdolist_list_var.rest();
			    header_value = cdolist_list_var.first();
			}
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_0_$21, thread);
		    }
		    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
		    html_source_readability_terpri(UNPROVIDED);
		    SubLObject cdolist_list_var2 = fact_sheets.sort_fact_sheet_table_data(table_type_data);
		    SubLObject cons = NIL;
		    cons = cdolist_list_var2.first();
		    while (NIL != cdolist_list_var2) {
			SubLObject current;
			final SubLObject datum = current = cons;
			SubLObject sentence = NIL;
			SubLObject sentence_data = NIL;
			destructuring_bind_must_consp(current, datum, fact_sheets.$list117);
			sentence = current.first();
			current = sentence_data = current.rest();
			html_markup(html_macros.$html_table_row_head$.getGlobalValue());
			if (NIL != fact_sheets.$fact_sheet_table_data_bgcolor$.getGlobalValue()) {
			    html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup(fact_sheets.$fact_sheet_table_data_bgcolor$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			}
			html_char(CHAR_greater, UNPROVIDED);
			final SubLObject _prev_bind_0_$24 = html_macros.$html_safe_print$.currentBinding(thread);
			try {
			    html_macros.$html_safe_print$.bind(T, thread);
			    final SubLObject assertion = fact_sheets.find_assertion_for_fact_sheet_sentence(sentence, domain_mt);
			    fact_sheets.output_fact_sheet_table_sentence_link(NIL != assertion ? assertion : sentence);
			    SubLObject cdolist_list_var_$25 = list_utilities.sort_alist_by_keys(sentence_data, symbol_function(fact_sheets.$sym125$_));
			    SubLObject cons_$26 = NIL;
			    cons_$26 = cdolist_list_var_$25.first();
			    while (NIL != cdolist_list_var_$25) {
				SubLObject current_$28;
				final SubLObject datum_$27 = current_$28 = cons_$26;
				SubLObject column = NIL;
				SubLObject value = NIL;
				destructuring_bind_must_consp(current_$28, datum_$27, fact_sheets.$list121);
				column = current_$28.first();
				current_$28 = value = current_$28.rest();
				final SubLObject align = (column.eql(ONE_INTEGER)) ? fact_sheets.$fact_sheet_table_data_first_column_horizontal_alignment$.getGlobalValue() : NIL;
				html_markup(html_macros.$html_table_data_head$.getGlobalValue());
				if (NIL != align) {
				    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
				    html_char(CHAR_quotation, UNPROVIDED);
				    html_markup(html_align(align));
				    html_char(CHAR_quotation, UNPROVIDED);
				}
				html_char(CHAR_greater, UNPROVIDED);
				final SubLObject _prev_bind_0_$25 = html_macros.$html_safe_print$.currentBinding(thread);
				try {
				    html_macros.$html_safe_print$.bind(T, thread);
				    html_markup(fact_sheets.fact_sheet_table_data_for_value(column, value, v_properties, language_mt, domain_mt, focal_term));
				} finally {
				    html_macros.$html_safe_print$.rebind(_prev_bind_0_$25, thread);
				}
				html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
				cdolist_list_var_$25 = cdolist_list_var_$25.rest();
				cons_$26 = cdolist_list_var_$25.first();
			    }
			} finally {
			    html_macros.$html_safe_print$.rebind(_prev_bind_0_$24, thread);
			}
			html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
			html_source_readability_terpri(UNPROVIDED);
			cdolist_list_var2 = cdolist_list_var2.rest();
			cons = cdolist_list_var2.first();
		    }
		} finally {
		    html_macros.$html_safe_print$.rebind(_prev_bind_0_$20, thread);
		}
		html_markup(html_macros.$html_table_tail$.getGlobalValue());
	    } finally {
		html_macros.$html_stream$.rebind(_prev_bind_0, thread);
	    }
	    html_table = get_output_stream_string(stream);
	} finally {
	    final SubLObject _prev_bind_2 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values = getValuesAsVector();
		close(stream, UNPROVIDED);
		restoreValuesFromVector(_values);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
	    }
	}
	return html_table;
    }

    /**
     *
     *
     * @param TABLE-TYPE-DATA
     * 		dictionary-p mapping SENTENCE -> SENTENCE-DATA.
     * @return ALIST-P of the same mappings, in a nice order.
     */
    @LispMethod(comment = "@param TABLE-TYPE-DATA\r\n\t\tdictionary-p mapping SENTENCE -> SENTENCE-DATA.\r\n@return ALIST-P of the same mappings, in a nice order.")
    public static final SubLObject sort_fact_sheet_table_data_alt(SubLObject table_type_data) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject sorted = NIL;
		{
		    SubLObject _prev_bind_0 = $fact_sheet_sentence_sorter_pred_counts$.currentBinding(thread);
		    try {
			$fact_sheet_sentence_sorter_pred_counts$.bind(com.cyc.cycjava.cycl.fact_sheets.pred_counts_for_sentences(dictionary.dictionary_keys(table_type_data)), thread);
			sorted = Sort.stable_sort(dictionary_utilities.sort_dictionary_by_keys(table_type_data, symbol_function($sym289$TERM__)), $sym290$FACT_SHEET_PRED_COUNT__, FACT_SHEET_TABLE_SENTENCE_DATA_PREDICATE);
		    } finally {
			$fact_sheet_sentence_sorter_pred_counts$.rebind(_prev_bind_0, thread);
		    }
		}
		return sorted;
	    }
	}
    }

    /**
     *
     *
     * @param TABLE-TYPE-DATA
     * 		dictionary-p mapping SENTENCE -> SENTENCE-DATA.
     * @return ALIST-P of the same mappings, in a nice order.
     */
    @LispMethod(comment = "@param TABLE-TYPE-DATA\r\n\t\tdictionary-p mapping SENTENCE -> SENTENCE-DATA.\r\n@return ALIST-P of the same mappings, in a nice order.")
    public static SubLObject sort_fact_sheet_table_data(final SubLObject table_type_data) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject sorted = NIL;
	final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.currentBinding(thread);
	try {
	    fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.bind(fact_sheets.pred_counts_for_sentences(dictionary.dictionary_keys(table_type_data)), thread);
	    sorted = Sort.stable_sort(dictionary_utilities.sort_dictionary_by_keys(table_type_data, symbol_function(fact_sheets.$sym126$TERM__)), fact_sheets.$sym127$FACT_SHEET_PRED_COUNT__, fact_sheets.FACT_SHEET_TABLE_SENTENCE_DATA_PREDICATE);
	} finally {
	    fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.rebind(_prev_bind_0, thread);
	}
	return sorted;
    }

    public static final SubLObject fact_sheet_table_sentence_data_predicate_alt(SubLObject sentence_data) {
	return cycl_utilities.formula_arg0(sentence_data.first());
    }

    public static SubLObject fact_sheet_table_sentence_data_predicate(final SubLObject sentence_data) {
	return cycl_utilities.formula_arg0(sentence_data.first());
    }

    public static final SubLObject find_assertion_for_fact_sheet_sentence_alt(SubLObject sentence, SubLObject domain_mt) {
	return NIL != assertion_handles.assertion_p(sentence) ? ((SubLObject) (sentence)) : czer_meta.find_visible_assertions_cycl(sentence, domain_mt).first();
    }

    public static SubLObject find_assertion_for_fact_sheet_sentence(final SubLObject sentence, final SubLObject domain_mt) {
	return NIL != assertion_handles.assertion_p(sentence) ? sentence : czer_meta.find_visible_assertions_cycl(sentence, domain_mt).first();
    }

    public static final SubLObject fact_sheet_table_title_alt(SubLObject table_type, SubLObject language_mt) {
	return kb_mapping_utilities.fpred_value_in_relevant_mts(table_type, $$titleForTablesOfType, language_mt, ONE_INTEGER, TWO_INTEGER, UNPROVIDED);
    }

    public static SubLObject fact_sheet_table_title(final SubLObject table_type, final SubLObject language_mt) {
	return kb_mapping_utilities.fpred_value_in_relevant_mts(table_type, fact_sheets.$$titleForTablesOfType, language_mt, ONE_INTEGER, TWO_INTEGER, UNPROVIDED);
    }

    public static final SubLObject output_fact_sheet_table_title_row_alt(SubLObject table_title, SubLObject table_type) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
	    if (NIL != $fact_sheet_table_title_horizontal_alignment$.getGlobalValue()) {
		html_markup(html_macros.$html_table_data_align$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(html_align($fact_sheet_table_title_horizontal_alignment$.getGlobalValue()));
		html_char(CHAR_quotation, UNPROVIDED);
	    }
	    if (NIL != $fact_sheet_table_title_bgcolor$.getGlobalValue()) {
		html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup($fact_sheet_table_title_bgcolor$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
	    }
	    html_char(CHAR_greater, UNPROVIDED);
	    {
		SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
		try {
		    html_macros.$html_safe_print$.bind(T, thread);
		    {
			SubLObject colspan = number_utilities.f_1X(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_table_type_width(table_type));
			html_markup(html_macros.$html_table_data_head$.getGlobalValue());
			if (NIL != colspan) {
			    html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup(colspan);
			    html_char(CHAR_quotation, UNPROVIDED);
			}
			html_char(CHAR_greater, UNPROVIDED);
			{
			    SubLObject _prev_bind_0_46 = html_macros.$html_safe_print$.currentBinding(thread);
			    try {
				html_macros.$html_safe_print$.bind(T, thread);
				{
				    SubLObject color_val = $fact_sheet_table_title_font_color$.getGlobalValue();
				    html_markup(html_macros.$html_font_head$.getGlobalValue());
				    if (NIL != color_val) {
					html_markup(html_macros.$html_font_color$.getGlobalValue());
					html_char(CHAR_quotation, UNPROVIDED);
					html_markup(html_color(color_val));
					html_char(CHAR_quotation, UNPROVIDED);
				    }
				    html_char(CHAR_greater, UNPROVIDED);
				    {
					SubLObject _prev_bind_0_47 = html_macros.$html_safe_print$.currentBinding(thread);
					try {
					    html_macros.$html_safe_print$.bind(T, thread);
					    html_princ_strong(table_title);
					} finally {
					    html_macros.$html_safe_print$.rebind(_prev_bind_0_47, thread);
					}
				    }
				    html_markup(html_macros.$html_font_tail$.getGlobalValue());
				}
			    } finally {
				html_macros.$html_safe_print$.rebind(_prev_bind_0_46, thread);
			    }
			}
			html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
		    }
		} finally {
		    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
		}
	    }
	    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
	    html_source_readability_terpri(UNPROVIDED);
	    return table_title;
	}
    }

    public static SubLObject output_fact_sheet_table_title_row(final SubLObject table_title, final SubLObject table_type) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	html_markup(html_macros.$html_table_row_head$.getGlobalValue());
	if (NIL != fact_sheets.$fact_sheet_table_title_horizontal_alignment$.getGlobalValue()) {
	    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
	    html_char(CHAR_quotation, UNPROVIDED);
	    html_markup(fact_sheets.$fact_sheet_table_title_horizontal_alignment$.getGlobalValue());
	    html_char(CHAR_quotation, UNPROVIDED);
	}
	if (NIL != fact_sheets.$fact_sheet_table_title_bgcolor$.getGlobalValue()) {
	    html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
	    html_char(CHAR_quotation, UNPROVIDED);
	    html_markup(fact_sheets.$fact_sheet_table_title_bgcolor$.getGlobalValue());
	    html_char(CHAR_quotation, UNPROVIDED);
	}
	html_char(CHAR_greater, UNPROVIDED);
	final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
	try {
	    html_macros.$html_safe_print$.bind(T, thread);
	    final SubLObject colspan = number_utilities.f_1X(fact_sheets.fact_sheet_table_type_width(table_type));
	    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
	    if (NIL != colspan) {
		html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(colspan);
		html_char(CHAR_quotation, UNPROVIDED);
	    }
	    html_char(CHAR_greater, UNPROVIDED);
	    final SubLObject _prev_bind_0_$30 = html_macros.$html_safe_print$.currentBinding(thread);
	    try {
		html_macros.$html_safe_print$.bind(T, thread);
		final SubLObject color_val = fact_sheets.$fact_sheet_table_title_font_color$.getGlobalValue();
		html_markup(html_macros.$html_font_head$.getGlobalValue());
		if (NIL != color_val) {
		    html_markup(html_macros.$html_font_color$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup(html_color(color_val));
		    html_char(CHAR_quotation, UNPROVIDED);
		}
		html_char(CHAR_greater, UNPROVIDED);
		final SubLObject _prev_bind_0_$31 = html_macros.$html_safe_print$.currentBinding(thread);
		try {
		    html_macros.$html_safe_print$.bind(T, thread);
		    html_princ_strong(table_title);
		} finally {
		    html_macros.$html_safe_print$.rebind(_prev_bind_0_$31, thread);
		}
		html_markup(html_macros.$html_font_tail$.getGlobalValue());
	    } finally {
		html_macros.$html_safe_print$.rebind(_prev_bind_0_$30, thread);
	    }
	    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
	} finally {
	    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
	}
	html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
	html_source_readability_terpri(UNPROVIDED);
	return table_title;
    }

    public static final SubLObject output_fact_sheet_table_sentence_link_alt(SubLObject sentence) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
	    html_char(CHAR_greater, UNPROVIDED);
	    {
		SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
		try {
		    html_macros.$html_safe_print$.bind(T, thread);
		    if (NIL != sentence) {
			{
			    SubLObject v_properties = NIL;
			    html_markup(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_possibly_mark_up_sentence_paraphrase(sentence, $str_alt133$, v_properties));
			}
		    }
		} finally {
		    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
		}
	    }
	    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
	    return sentence;
	}
    }

    public static SubLObject output_fact_sheet_table_sentence_link(final SubLObject sentence) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	html_markup(html_macros.$html_table_data_head$.getGlobalValue());
	html_char(CHAR_greater, UNPROVIDED);
	final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
	try {
	    html_macros.$html_safe_print$.bind(T, thread);
	    if (NIL != sentence) {
		final SubLObject v_properties = NIL;
		html_markup(fact_sheets.fact_sheet_possibly_mark_up_sentence_paraphrase(sentence, fact_sheets.$str73$, v_properties));
	    }
	} finally {
	    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
	}
	html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
	return sentence;
    }

    /**
     *
     *
     * @return LISTP of html strings
     */
    @LispMethod(comment = "@return LISTP of html strings")
    public static final SubLObject fact_sheet_table_header_values_alt(SubLObject section_table_specs, SubLObject table_type) {
	{
	    SubLObject relevant_specs = list_utilities.find_all(table_type, section_table_specs, symbol_function(EQUAL), symbol_function(SECOND));
	    SubLObject sorted = Sort.sort(relevant_specs, symbol_function($sym288$_), symbol_function(THIRD));
	    return Mapping.mapcar(symbol_function(FOURTH), sorted);
	}
    }

    /**
     *
     *
     * @return LISTP of html strings
     */
    @LispMethod(comment = "@return LISTP of html strings")
    public static SubLObject fact_sheet_table_header_values(final SubLObject section_table_specs, final SubLObject table_type) {
	final SubLObject relevant_specs = list_utilities.find_all(table_type, section_table_specs, symbol_function(EQUAL), symbol_function(SECOND));
	final SubLObject sorted = Sort.sort(relevant_specs, symbol_function(fact_sheets.$sym125$_), symbol_function(THIRD));
	return Mapping.mapcar(symbol_function(FOURTH), sorted);
    }

    public static final SubLObject fact_sheet_table_data_for_value_alt(SubLObject column, SubLObject value, SubLObject v_properties, SubLObject language_mt, SubLObject domain_mt, SubLObject focal_term) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject table_data = (column.eql(ONE_INTEGER) && (NIL != kb_accessors.binary_predicateP(value))) ? ((SubLObject) (formula_template_utilities.make_fet_gloss_for_arg2_of_binary_pred(value, UNPROVIDED))) : NIL;
		SubLObject xmlP = com.cyc.cycjava.cycl.fact_sheets.xml_factsheetsP(v_properties);
		if (table_data.isString()) {
		    table_data = Strings.string_right_trim($list_alt296, table_data);
		} else {
		    if (NIL != xmlP) {
			table_data = pph_main.generate_text_wXsentential_force(value, $DEFAULT, $DEFAULT, language_mt, domain_mt, $TEXT, UNPROVIDED);
		    } else {
			{
			    SubLObject _prev_bind_0 = $within_fact_sheet_paraphraseP$.currentBinding(thread);
			    SubLObject _prev_bind_1 = $fact_sheet_focal_term$.currentBinding(thread);
			    SubLObject _prev_bind_2 = $thcl_forts_by_fiat$.currentBinding(thread);
			    SubLObject _prev_bind_3 = pph_vars.$constant_link_function$.currentBinding(thread);
			    SubLObject _prev_bind_4 = pph_vars.$html_generation_target$.currentBinding(thread);
			    SubLObject _prev_bind_5 = pph_vars.$html_generation_term_id_function$.currentBinding(thread);
			    SubLObject _prev_bind_6 = pph_vars.$pph_speaker$.currentBinding(thread);
			    SubLObject _prev_bind_7 = pph_vars.$pph_addressee$.currentBinding(thread);
			    try {
				$within_fact_sheet_paraphraseP$.bind(T, thread);
				$fact_sheet_focal_term$.bind(focal_term, thread);
				$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(focal_term) ? ((SubLObject) (cons(focal_term, $thcl_forts_by_fiat$.getDynamicValue(thread)))) : $thcl_forts_by_fiat$.getDynamicValue(thread), thread);
				pph_vars.$constant_link_function$.bind(true ? ((SubLObject) ($FACT_SHEET)) : pph_vars.$constant_link_function$.getDynamicValue(thread), thread);
				pph_vars.$html_generation_target$.bind(pph_vars.$html_generation_target$.getDynamicValue(thread), thread);
				pph_vars.$html_generation_term_id_function$.bind(FACT_SHEET_TERM_ID, thread);
				pph_vars.$pph_speaker$.bind($UNKNOWN, thread);
				pph_vars.$pph_addressee$.bind($UNKNOWN, thread);
				table_data = pph_main.generate_text_wXsentential_force(value, $DEFAULT, $DEFAULT, language_mt, domain_mt, $HTML, UNPROVIDED);
			    } finally {
				pph_vars.$pph_addressee$.rebind(_prev_bind_7, thread);
				pph_vars.$pph_speaker$.rebind(_prev_bind_6, thread);
				pph_vars.$html_generation_term_id_function$.rebind(_prev_bind_5, thread);
				pph_vars.$html_generation_target$.rebind(_prev_bind_4, thread);
				pph_vars.$constant_link_function$.rebind(_prev_bind_3, thread);
				$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
				$fact_sheet_focal_term$.rebind(_prev_bind_1, thread);
				$within_fact_sheet_paraphraseP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		}
		return table_data;
	    }
	}
    }

    public static SubLObject fact_sheet_table_data_for_value(final SubLObject column, final SubLObject value, final SubLObject v_properties, final SubLObject language_mt, final SubLObject domain_mt, final SubLObject focal_term) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject table_data = (column.eql(ONE_INTEGER) && (NIL != kb_accessors.binary_predicateP(value))) ? formula_template_utilities.make_fet_gloss_for_arg2_of_binary_pred(value, UNPROVIDED) : NIL;
	final SubLObject xmlP = fact_sheets.xml_factsheetsP(v_properties);
	if (table_data.isString()) {
	    table_data = Strings.string_right_trim(fact_sheets.$list133, table_data);
	} else if (NIL != xmlP) {
	    table_data = pph_main.generate_text_wXsentential_force(value, $DEFAULT, $DEFAULT, language_mt, domain_mt, $TEXT, UNPROVIDED);
	} else {
	    final SubLObject _prev_bind_0 = fact_sheets.$within_fact_sheet_paraphraseP$.currentBinding(thread);
	    final SubLObject _prev_bind_2 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
	    final SubLObject _prev_bind_3 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
	    final SubLObject _prev_bind_4 = pph_vars.$constant_link_function$.currentBinding(thread);
	    final SubLObject _prev_bind_5 = pph_vars.$html_generation_target$.currentBinding(thread);
	    final SubLObject _prev_bind_6 = pph_vars.$html_generation_term_id_function$.currentBinding(thread);
	    final SubLObject _prev_bind_7 = pph_vars.$pph_speaker$.currentBinding(thread);
	    final SubLObject _prev_bind_8 = pph_vars.$pph_addressee$.currentBinding(thread);
	    try {
		fact_sheets.$within_fact_sheet_paraphraseP$.bind(T, thread);
		fact_sheets.$fact_sheet_focal_term$.bind(focal_term, thread);
		thcl.$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(focal_term) ? cons(focal_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread), thread);
		pph_vars.$constant_link_function$.bind($FACT_SHEET, thread);
		pph_vars.$html_generation_target$.bind(pph_vars.$html_generation_target$.getDynamicValue(thread), thread);
		pph_vars.$html_generation_term_id_function$.bind(fact_sheets.FACT_SHEET_TERM_ID, thread);
		pph_vars.$pph_speaker$.bind($UNKNOWN, thread);
		pph_vars.$pph_addressee$.bind($UNKNOWN, thread);
		table_data = pph_main.generate_text_wXsentential_force(value, $DEFAULT, $DEFAULT, language_mt, domain_mt, $HTML, UNPROVIDED);
	    } finally {
		pph_vars.$pph_addressee$.rebind(_prev_bind_8, thread);
		pph_vars.$pph_speaker$.rebind(_prev_bind_7, thread);
		pph_vars.$html_generation_term_id_function$.rebind(_prev_bind_6, thread);
		pph_vars.$html_generation_target$.rebind(_prev_bind_5, thread);
		pph_vars.$constant_link_function$.rebind(_prev_bind_4, thread);
		thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_3, thread);
		fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_2, thread);
		fact_sheets.$within_fact_sheet_paraphraseP$.rebind(_prev_bind_0, thread);
	    }
	}

	return table_data;
    }

    public static final SubLObject fact_sheet_table_specs_alt(SubLObject focal_term, SubLObject domain_mt) {
	if (focal_term == UNPROVIDED) {
	    focal_term = $fact_sheet_focal_term$.getDynamicValue();
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(focal_term);
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject specs = NIL;
		{
		    SubLObject _prev_bind_0 = $fact_sheet_focal_term$.currentBinding(thread);
		    SubLObject _prev_bind_1 = $fact_sheet_query_mt$.currentBinding(thread);
		    try {
			$fact_sheet_focal_term$.bind(focal_term, thread);
			$fact_sheet_query_mt$.bind(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_anytime_mt(domain_mt), thread);
			specs = new_cyc_query_from_kbq($const301$FactSheetTableSectionAndHeaderQue, list($BROWSABLE_, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_queries_browsableP()));
		    } finally {
			$fact_sheet_query_mt$.rebind(_prev_bind_1, thread);
			$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
		    }
		}
		return specs;
	    }
	}
    }

    public static SubLObject fact_sheet_table_specs(SubLObject focal_term, SubLObject domain_mt) {
	if (focal_term == UNPROVIDED) {
	    focal_term = fact_sheets.$fact_sheet_focal_term$.getDynamicValue();
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(focal_term);
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject specs = NIL;
	final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
	final SubLObject _prev_bind_2 = fact_sheets.$fact_sheet_query_mt$.currentBinding(thread);
	try {
	    fact_sheets.$fact_sheet_focal_term$.bind(focal_term, thread);
	    fact_sheets.$fact_sheet_query_mt$.bind(fact_sheets.fact_sheet_anytime_mt(domain_mt), thread);
	    specs = kb_query.new_cyc_query_from_kbq(fact_sheets.$const138$FactSheetTableSectionAndHeaderQue, list($BROWSABLE_, fact_sheets.fact_sheet_queries_browsableP()), UNPROVIDED);
	} finally {
	    fact_sheets.$fact_sheet_query_mt$.rebind(_prev_bind_2, thread);
	    fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
	}
	return specs;
    }

    public static final SubLObject section_table_specs_alt(SubLObject label, SubLObject table_specs) {
	{
	    SubLObject category = com.cyc.cycjava.cycl.fact_sheets.category_label_pred(label);
	    return list_utilities.find_all(category, table_specs, symbol_function(EQUAL), symbol_function(FIRST));
	}
    }

    public static SubLObject section_table_specs(final SubLObject label, final SubLObject table_specs) {
	final SubLObject category = fact_sheets.category_label_pred(label);
	return list_utilities.find_all(category, table_specs, symbol_function(EQUAL), symbol_function(FIRST));
    }

    public static final SubLObject table_types_from_section_table_specs_alt(SubLObject section_table_specs) {
	return delete_duplicates(Mapping.mapcar(SECOND, section_table_specs), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject table_types_from_section_table_specs(final SubLObject section_table_specs) {
	return delete_duplicates(Mapping.mapcar(SECOND, section_table_specs), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject table_data_for_sentence_alt(SubLObject table_type, SubLObject sentence, SubLObject focal_term, SubLObject domain_mt, SubLObject problem_store) {
	if (focal_term == UNPROVIDED) {
	    focal_term = $fact_sheet_focal_term$.getDynamicValue();
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(focal_term);
	}
	if (problem_store == UNPROVIDED) {
	    problem_store = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject data = NIL;
		{
		    SubLObject _prev_bind_0 = $fact_sheet_focal_term$.currentBinding(thread);
		    SubLObject _prev_bind_1 = $fact_sheet_query_mt$.currentBinding(thread);
		    SubLObject _prev_bind_2 = $fact_sheet_sentence$.currentBinding(thread);
		    SubLObject _prev_bind_3 = $fact_sheet_table_type$.currentBinding(thread);
		    try {
			$fact_sheet_focal_term$.bind(focal_term, thread);
			$fact_sheet_query_mt$.bind(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_anytime_mt(domain_mt), thread);
			$fact_sheet_sentence$.bind(sentence, thread);
			$fact_sheet_table_type$.bind(table_type, thread);
			{
			    SubLObject kbq = $$FactSheetTableCellValuesQuery;
			    SubLObject raw_sentence = kbq_sentence(kbq);
			    SubLObject query_sentence = com.cyc.cycjava.cycl.fact_sheets.dereference_fact_sheet_indexicals(raw_sentence);
			    SubLObject mt = kbq_mt(kbq);
			    SubLObject table_width = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_table_type_width(table_type);
			    SubLObject v_properties = inference_datastructures_enumerated_types.merge_query_properties(kbq_query_properties(kbq),
				    list($BROWSABLE_, $fact_sheet_queries_browsableP$.getDynamicValue(thread), $INFERENCE_MODE, $SHALLOW, $MAX_NUMBER, table_width, $PROBLEM_STORE, problem_store));
			    SubLObject result = inference_kernel.new_cyc_query(query_sentence, mt, v_properties);
			    data = (NIL != list_utilities.lengthE(result, table_width, UNPROVIDED)) ? ((SubLObject) (result)) : NIL;
			}
		    } finally {
			$fact_sheet_table_type$.rebind(_prev_bind_3, thread);
			$fact_sheet_sentence$.rebind(_prev_bind_2, thread);
			$fact_sheet_query_mt$.rebind(_prev_bind_1, thread);
			$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
		    }
		}
		return data;
	    }
	}
    }

    public static SubLObject table_data_for_sentence(final SubLObject table_type, final SubLObject sentence, SubLObject focal_term, SubLObject domain_mt, SubLObject problem_store) {
	if (focal_term == UNPROVIDED) {
	    focal_term = fact_sheets.$fact_sheet_focal_term$.getDynamicValue();
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(focal_term);
	}
	if (problem_store == UNPROVIDED) {
	    problem_store = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject data = NIL;
	final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
	final SubLObject _prev_bind_2 = fact_sheets.$fact_sheet_query_mt$.currentBinding(thread);
	final SubLObject _prev_bind_3 = fact_sheets.$fact_sheet_sentence$.currentBinding(thread);
	final SubLObject _prev_bind_4 = fact_sheets.$fact_sheet_table_type$.currentBinding(thread);
	try {
	    fact_sheets.$fact_sheet_focal_term$.bind(focal_term, thread);
	    fact_sheets.$fact_sheet_query_mt$.bind(fact_sheets.fact_sheet_anytime_mt(domain_mt), thread);
	    fact_sheets.$fact_sheet_sentence$.bind(sentence, thread);
	    fact_sheets.$fact_sheet_table_type$.bind(table_type, thread);
	    final SubLObject kbq = fact_sheets.$$FactSheetTableCellValuesQuery;
	    final SubLObject raw_sentence = kb_query.kbq_sentence(kbq);
	    final SubLObject query_sentence = fact_sheets.dereference_fact_sheet_indexicals(raw_sentence);
	    final SubLObject mt = kb_query.kbq_mt(kbq);
	    final SubLObject table_width = fact_sheets.fact_sheet_table_type_width(table_type);
	    final SubLObject v_properties = merge_query_properties(kb_query.kbq_query_properties(kbq), list($BROWSABLE_, fact_sheets.$fact_sheet_queries_browsableP$.getDynamicValue(thread), $INFERENCE_MODE, $SHALLOW, $MAX_NUMBER, table_width, $PROBLEM_STORE, problem_store));
	    final SubLObject result = inference_kernel.new_cyc_query(query_sentence, mt, v_properties);
	    data = (NIL != list_utilities.lengthE(result, table_width, UNPROVIDED)) ? result : NIL;
	} finally {
	    fact_sheets.$fact_sheet_table_type$.rebind(_prev_bind_4, thread);
	    fact_sheets.$fact_sheet_sentence$.rebind(_prev_bind_3, thread);
	    fact_sheets.$fact_sheet_query_mt$.rebind(_prev_bind_2, thread);
	    fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
	}
	return data;
    }

    public static final SubLObject dereference_fact_sheet_indexicals_alt(SubLObject query_sentence) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == el_conjunction_p(query_sentence)) {
		return query_sentence;
	    }
	    {
		SubLObject new_conjuncts = NIL;
		SubLObject v_bindings = NIL;
		SubLObject args = cycl_utilities.formula_args(query_sentence, $IGNORE);
		SubLObject cdolist_list_var = args;
		SubLObject old_conjunct = NIL;
		for (old_conjunct = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), old_conjunct = cdolist_list_var.first()) {
		    {
			SubLObject substitutedP = NIL;
			if (NIL == substitutedP) {
			    {
				SubLObject csome_list_var = $list_alt313;
				SubLObject indexical = NIL;
				for (indexical = csome_list_var.first(); !((NIL != substitutedP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), indexical = csome_list_var.first()) {
				    thread.resetMultipleValues();
				    {
					SubLObject success = formula_pattern_match.formula_matches_pattern(old_conjunct, listS($$indexicalReferent, indexical, $list_alt311));
					SubLObject v_bindings_48 = thread.secondMultipleValue();
					thread.resetMultipleValues();
					if (NIL != success) {
					    {
						SubLObject var = list_utilities.alist_lookup_without_values(v_bindings_48, VAR, UNPROVIDED, UNPROVIDED);
						SubLObject referent = removal_modules_indexical_referent.cyc_indexical_referent(indexical);
						v_bindings = list_utilities.alist_enter(v_bindings, var, referent, UNPROVIDED);
						substitutedP = T;
					    }
					}
				    }
				}
			    }
			}
			if (NIL == substitutedP) {
			    new_conjuncts = cons(old_conjunct, new_conjuncts);
			}
		    }
		}
		new_conjuncts = bindings.apply_bindings(v_bindings, new_conjuncts);
		return NIL != list_utilities.singletonP(new_conjuncts) ? ((SubLObject) (list_utilities.only_one(new_conjuncts))) : simplifier.conjoin(nreverse(new_conjuncts), NIL);
	    }
	}
    }

    public static SubLObject dereference_fact_sheet_indexicals(final SubLObject query_sentence) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	if (NIL == el_conjunction_p(query_sentence)) {
	    return query_sentence;
	}
	SubLObject new_conjuncts = NIL;
	SubLObject v_bindings = NIL;
	SubLObject cdolist_list_var;
	final SubLObject args = cdolist_list_var = cycl_utilities.formula_args(query_sentence, $IGNORE);
	SubLObject old_conjunct = NIL;
	old_conjunct = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    SubLObject substitutedP = NIL;
	    if (NIL == substitutedP) {
		SubLObject csome_list_var = fact_sheets.$list150;
		SubLObject indexical = NIL;
		indexical = csome_list_var.first();
		while ((NIL == substitutedP) && (NIL != csome_list_var)) {
		    thread.resetMultipleValues();
		    final SubLObject success = formula_pattern_match.formula_matches_pattern(old_conjunct, listS(fact_sheets.$$indexicalReferent, indexical, fact_sheets.$list148));
		    final SubLObject v_bindings_$32 = thread.secondMultipleValue();
		    thread.resetMultipleValues();
		    if (NIL != success) {
			final SubLObject var = list_utilities.alist_lookup_without_values(v_bindings_$32, VAR, UNPROVIDED, UNPROVIDED);
			final SubLObject referent = cyc_indexical_referent(indexical);
			v_bindings = list_utilities.alist_enter(v_bindings, var, referent, UNPROVIDED);
			substitutedP = T;
		    }
		    csome_list_var = csome_list_var.rest();
		    indexical = csome_list_var.first();
		}
	    }
	    if (NIL == substitutedP) {
		new_conjuncts = cons(old_conjunct, new_conjuncts);
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    old_conjunct = cdolist_list_var.first();
	}
	new_conjuncts = bindings.apply_bindings(v_bindings, new_conjuncts);
	return NIL != list_utilities.singletonP(new_conjuncts) ? list_utilities.only_one(new_conjuncts) : simplifier.conjoin(nreverse(new_conjuncts), NIL);
    }

    public static final SubLObject fact_sheet_anytime_mt_alt(SubLObject domain_mt) {
	return hlmt_czer.canonicalize_hlmt(hlmt.new_hlmt(list(hlmt.hlmt_monad_mt(domain_mt), $$AnytimePSC)));
    }

    public static SubLObject fact_sheet_anytime_mt(final SubLObject domain_mt) {
	return hlmt_czer.canonicalize_hlmt(hlmt.new_hlmt(list(hlmt.hlmt_monad_mt(domain_mt), fact_sheets.$$AnytimePSC)));
    }

    public static final SubLObject possibly_reserve_sentence_for_tables_alt(SubLObject summary_sentence, SubLObject table_types, SubLObject table_data, SubLObject focal_term, SubLObject domain_mt, SubLObject problem_store) {
	if (focal_term == UNPROVIDED) {
	    focal_term = $fact_sheet_focal_term$.getDynamicValue();
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(focal_term);
	}
	if (problem_store == UNPROVIDED) {
	    problem_store = NIL;
	}
	{
	    SubLObject reservedP = NIL;
	    if (((NIL != summary_sentence) && (NIL != table_types)) && (NIL != table_data)) {
		{
		    SubLObject conjuncts = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_conjuncts(summary_sentence);
		    SubLObject cdolist_list_var = table_types;
		    SubLObject table_type = NIL;
		    for (table_type = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), table_type = cdolist_list_var.first()) {
			{
			    SubLObject failP = NIL;
			    SubLObject conjuncts_data = NIL;
			    if (NIL == failP) {
				{
				    SubLObject csome_list_var = conjuncts;
				    SubLObject conjunct = NIL;
				    for (conjunct = csome_list_var.first(); !((NIL != failP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), conjunct = csome_list_var.first()) {
					{
					    SubLObject conjunct_data = com.cyc.cycjava.cycl.fact_sheets.table_data_for_sentence(table_type, conjunct, focal_term, domain_mt, problem_store);
					    if (NIL != com.cyc.cycjava.cycl.fact_sheets.valid_sentence_data_for_table_typeP(table_type, conjunct_data)) {
						conjuncts_data = list_utilities.alist_enter(conjuncts_data, conjunct, conjunct_data, UNPROVIDED);
					    } else {
						failP = T;
					    }
					}
				    }
				}
			    }
			    if (!((NIL != failP) || (NIL != list_utilities.empty_list_p(conjuncts_data)))) {
				{
				    SubLObject table_type_data = dictionary.dictionary_lookup_without_values(table_data, table_type, UNPROVIDED);
				    if (NIL == dictionary.dictionary_p(table_type_data)) {
					table_type_data = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
					dictionary.dictionary_enter(table_data, table_type, table_type_data);
				    }
				    {
					SubLObject cdolist_list_var_49 = conjuncts_data;
					SubLObject cons = NIL;
					for (cons = cdolist_list_var_49.first(); NIL != cdolist_list_var_49; cdolist_list_var_49 = cdolist_list_var_49.rest(), cons = cdolist_list_var_49.first()) {
					    {
						SubLObject datum = cons;
						SubLObject current = datum;
						SubLObject conjunct = NIL;
						SubLObject conjunct_data = NIL;
						destructuring_bind_must_consp(current, datum, $list_alt315);
						conjunct = current.first();
						current = current.rest();
						conjunct_data = current;
						dictionary.dictionary_enter(table_type_data, conjunct, conjunct_data);
					    }
					}
				    }
				}
				reservedP = T;
			    }
			}
		    }
		}
	    }
	    return reservedP;
	}
    }

    public static SubLObject possibly_reserve_sentence_for_tables(final SubLObject summary_sentence, final SubLObject table_types, final SubLObject table_data, SubLObject focal_term, SubLObject domain_mt, SubLObject problem_store) {
	if (focal_term == UNPROVIDED) {
	    focal_term = fact_sheets.$fact_sheet_focal_term$.getDynamicValue();
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(focal_term);
	}
	if (problem_store == UNPROVIDED) {
	    problem_store = NIL;
	}
	SubLObject reservedP = NIL;
	if (((NIL != summary_sentence) && (NIL != table_types)) && (NIL != table_data)) {
	    final SubLObject conjuncts = fact_sheets.fact_sheet_sentence_conjuncts(summary_sentence);
	    SubLObject cdolist_list_var = table_types;
	    SubLObject table_type = NIL;
	    table_type = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject failP = NIL;
		SubLObject conjuncts_data = NIL;
		if (NIL == failP) {
		    SubLObject csome_list_var = conjuncts;
		    SubLObject conjunct = NIL;
		    conjunct = csome_list_var.first();
		    while ((NIL == failP) && (NIL != csome_list_var)) {
			final SubLObject conjunct_data = fact_sheets.table_data_for_sentence(table_type, conjunct, focal_term, domain_mt, problem_store);
			if (NIL != fact_sheets.valid_sentence_data_for_table_typeP(table_type, conjunct_data)) {
			    conjuncts_data = list_utilities.alist_enter(conjuncts_data, conjunct, conjunct_data, UNPROVIDED);
			} else {
			    failP = T;
			}
			csome_list_var = csome_list_var.rest();
			conjunct = csome_list_var.first();
		    }
		}
		if ((NIL == failP) && (NIL == list_utilities.empty_list_p(conjuncts_data))) {
		    SubLObject table_type_data = dictionary.dictionary_lookup_without_values(table_data, table_type, UNPROVIDED);
		    if (NIL == dictionary.dictionary_p(table_type_data)) {
			table_type_data = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
			dictionary.dictionary_enter(table_data, table_type, table_type_data);
		    }
		    SubLObject cdolist_list_var_$33 = conjuncts_data;
		    SubLObject cons = NIL;
		    cons = cdolist_list_var_$33.first();
		    while (NIL != cdolist_list_var_$33) {
			SubLObject current;
			final SubLObject datum = current = cons;
			SubLObject conjunct2 = NIL;
			SubLObject conjunct_data2 = NIL;
			destructuring_bind_must_consp(current, datum, fact_sheets.$list152);
			conjunct2 = current.first();
			current = conjunct_data2 = current.rest();
			dictionary.dictionary_enter(table_type_data, conjunct2, conjunct_data2);
			cdolist_list_var_$33 = cdolist_list_var_$33.rest();
			cons = cdolist_list_var_$33.first();
		    }
		    reservedP = T;
		}
		cdolist_list_var = cdolist_list_var.rest();
		table_type = cdolist_list_var.first();
	    }
	}
	return reservedP;
    }

    public static final SubLObject fact_sheet_sentence_conjuncts_alt(SubLObject sentence) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    thread.resetMultipleValues();
	    {
		SubLObject conjunction = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_expand_coordination_sets(sentence);
		SubLObject expandedP = thread.secondMultipleValue();
		thread.resetMultipleValues();
		return (NIL != expandedP) && (NIL != el_conjunction_p(conjunction)) ? ((SubLObject) (cycl_utilities.el_formula_args(conjunction, UNPROVIDED))) : list(sentence);
	    }
	}
    }

    public static SubLObject fact_sheet_sentence_conjuncts(final SubLObject sentence) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	thread.resetMultipleValues();
	final SubLObject conjunction = fact_sheets.fact_sheet_sentence_expand_coordination_sets(sentence);
	final SubLObject expandedP = thread.secondMultipleValue();
	thread.resetMultipleValues();
	return (NIL != expandedP) && (NIL != el_conjunction_p(conjunction)) ? cycl_utilities.el_formula_args(conjunction, UNPROVIDED) : list(sentence);
    }

    public static final SubLObject valid_sentence_data_for_table_typeP_alt(SubLObject table_type, SubLObject sentence_data) {
	return makeBoolean(((NIL != sentence_data) && (NIL == list_utilities.duplicatesP(sentence_data, symbol_function(EQL), symbol_function(CAR)))) && length(sentence_data).eql(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_table_type_width(table_type)));
    }

    public static SubLObject valid_sentence_data_for_table_typeP(final SubLObject table_type, final SubLObject sentence_data) {
	return makeBoolean(((NIL != sentence_data) && (NIL == list_utilities.duplicatesP(sentence_data, symbol_function(EQL), symbol_function(CAR)))) && length(sentence_data).eql(fact_sheets.fact_sheet_table_type_width(table_type)));
    }

    public static final SubLObject fact_sheet_table_type_width_internal_alt(SubLObject table_type) {
	return kb_mapping_utilities.fpred_value_in_any_mt(table_type, $$tableTypeWidth, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject fact_sheet_table_type_width_internal(final SubLObject table_type) {
	return kb_mapping_utilities.fpred_value_in_any_mt(table_type, fact_sheets.$$tableTypeWidth, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_table_type_width_alt(SubLObject table_type) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
		SubLObject caching_state = NIL;
		if (NIL == v_memoization_state) {
		    return com.cyc.cycjava.cycl.fact_sheets.fact_sheet_table_type_width_internal(table_type);
		}
		caching_state = memoization_state.memoization_state_lookup(v_memoization_state, FACT_SHEET_TABLE_TYPE_WIDTH, UNPROVIDED);
		if (NIL == caching_state) {
		    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), FACT_SHEET_TABLE_TYPE_WIDTH, ONE_INTEGER, NIL, EQUAL, UNPROVIDED);
		    memoization_state.memoization_state_put(v_memoization_state, FACT_SHEET_TABLE_TYPE_WIDTH, caching_state);
		}
		{
		    SubLObject results = memoization_state.caching_state_lookup(caching_state, table_type, $kw127$_MEMOIZED_ITEM_NOT_FOUND_);
		    if (results == $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
			results = arg2(thread.resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_table_type_width_internal(table_type)));
			memoization_state.caching_state_put(caching_state, table_type, results, UNPROVIDED);
		    }
		    return memoization_state.caching_results(results);
		}
	    }
	}
    }

    public static SubLObject fact_sheet_table_type_width(final SubLObject table_type) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
	SubLObject caching_state = NIL;
	if (NIL == v_memoization_state) {
	    return fact_sheets.fact_sheet_table_type_width_internal(table_type);
	}
	caching_state = memoization_state.memoization_state_lookup(v_memoization_state, fact_sheets.FACT_SHEET_TABLE_TYPE_WIDTH, UNPROVIDED);
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), fact_sheets.FACT_SHEET_TABLE_TYPE_WIDTH, ONE_INTEGER, NIL, EQUAL, UNPROVIDED);
	    memoization_state.memoization_state_put(v_memoization_state, fact_sheets.FACT_SHEET_TABLE_TYPE_WIDTH, caching_state);
	}
	SubLObject results = memoization_state.caching_state_lookup(caching_state, table_type, memoization_state.$memoized_item_not_found$.getGlobalValue());
	if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    results = arg2(thread.resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_table_type_width_internal(table_type)));
	    memoization_state.caching_state_put(caching_state, table_type, results, UNPROVIDED);
	}
	return memoization_state.caching_results(results);
    }

    public static final SubLObject fact_sheet_sort_paragraphs_at_retrieval_time_alt(SubLObject fs_data, SubLObject v_properties) {
	{
	    SubLObject sort_fn = com.cyc.cycjava.cycl.fact_sheets.get_sort_fn_from_properties(v_properties);
	    SubLObject sorted_data = (NIL != fboundp(sort_fn)) ? ((SubLObject) (Sort.stable_sort(fs_data, sort_fn, UNPROVIDED))) : copy_list(fs_data);
	    return sorted_data;
	}
    }

    public static SubLObject fact_sheet_sort_paragraphs_at_retrieval_time(final SubLObject fs_data, final SubLObject v_properties) {
	final SubLObject sort_fn = fact_sheets.get_sort_fn_from_properties(v_properties);
	final SubLObject sorted_data = (NIL != fboundp(sort_fn)) ? Sort.stable_sort(fs_data, sort_fn, UNPROVIDED) : copy_list(fs_data);
	return sorted_data;
    }

    public static final SubLObject possibly_convert_summary_sentence_to_cycl_alt(SubLObject obj) {
	if (NIL != com.cyc.cycjava.cycl.fact_sheets.summary_sentence_plistP(obj)) {
	    return com.cyc.cycjava.cycl.fact_sheets.summary_sentence_cycl(obj);
	} else {
	    return obj;
	}
    }

    public static SubLObject possibly_convert_summary_sentence_to_cycl(final SubLObject obj) {
	if (NIL != fact_sheets.summary_sentence_plistP(obj)) {
	    return fact_sheets.summary_sentence_cycl(obj);
	}
	return obj;
    }

    public static final SubLObject new_summary_sentence_alt(SubLObject cycl, SubLObject cycl_or_assert_list) {
	return list($SENTENCE, cycl, $ASSERTIONS, list_utilities.remove_if_not(ASSERTION_P, cycl_or_assert_list, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
    }

    public static SubLObject new_summary_sentence(final SubLObject cycl, final SubLObject cycl_or_assert_list) {
	return list($SENTENCE, cycl, $ASSERTIONS, list_utilities.remove_if_not(ASSERTION_P, cycl_or_assert_list, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
    }

    public static final SubLObject summary_sentence_cycl_alt(SubLObject summ_sent) {
	if (NIL != com.cyc.cycjava.cycl.fact_sheets.summary_sentence_plistP(summ_sent)) {
	    return getf(summ_sent, $SENTENCE, UNPROVIDED);
	} else {
	    if (NIL != assertion_handles.assertion_p(summ_sent)) {
		return summ_sent;
	    } else {
		return summ_sent;
	    }
	}
    }

    public static SubLObject summary_sentence_cycl(final SubLObject summ_sent) {
	return cycl_utilities.expression_transform(summ_sent, fact_sheets.$sym159$SUMMARY_SENTENCE_PLIST_, fact_sheets.SUMMARY_SENTENCE_PLIST_CYCL, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject summary_sentence_plist_cycl(final SubLObject summ_sent) {
	return getf(summ_sent, $SENTENCE, UNPROVIDED);
    }

    public static final SubLObject summary_sentence_assertions_alt(SubLObject summ_sent) {
	if (NIL != assertion_handles.assertion_p(summ_sent)) {
	    return list(summ_sent);
	} else {
	    if (NIL != com.cyc.cycjava.cycl.fact_sheets.summary_sentence_plistP(summ_sent)) {
		return getf(summ_sent, $ASSERTIONS, UNPROVIDED);
	    } else {
		return NIL;
	    }
	}
    }

    public static SubLObject summary_sentence_assertions(final SubLObject summ_sent) {
	if (NIL != assertion_handles.assertion_p(summ_sent)) {
	    return list(summ_sent);
	}
	if (NIL != fact_sheets.summary_sentence_plistP(summ_sent)) {
	    return getf(summ_sent, $ASSERTIONS, UNPROVIDED);
	}
	return NIL;
    }

    public static final SubLObject summary_sentence_sources_alt(SubLObject summ_sent) {
	{
	    SubLObject sources = NIL;
	    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.fact_sheets.summary_sentence_assertions(summ_sent);
	    SubLObject v_assert = NIL;
	    for (v_assert = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), v_assert = cdolist_list_var.first()) {
		sources = cconcatenate(sources, pph_proof.pph_assertion_sources(v_assert));
	    }
	    return remove_duplicates(sources, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	}
    }

    public static SubLObject summary_sentence_sources(final SubLObject summ_sent) {
	SubLObject v_sources = NIL;
	SubLObject cdolist_list_var = fact_sheets.summary_sentence_assertions(summ_sent);
	SubLObject v_assert = NIL;
	v_assert = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    v_sources = cconcatenate(v_sources, sources.assertion_sources(v_assert));
	    cdolist_list_var = cdolist_list_var.rest();
	    v_assert = cdolist_list_var.first();
	}
	return remove_duplicates(v_sources, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject summary_sentence_plistP_alt(SubLObject obj) {
	return makeBoolean((NIL != list_utilities.property_list_p(obj)) && (NIL != getf(obj, $SENTENCE, UNPROVIDED)));
    }

    public static SubLObject summary_sentence_plistP(final SubLObject obj) {
	return makeBoolean((NIL != list_utilities.property_list_p(obj)) && (NIL != getf(obj, $SENTENCE, UNPROVIDED)));
    }

    /**
     *
     *
     * @return STRINGP or NIL; html paragraph about FOCAL-TERM containing SENTENCE-PARAPHRASES.
     */
    @LispMethod(comment = "@return STRINGP or NIL; html paragraph about FOCAL-TERM containing SENTENCE-PARAPHRASES.")
    public static final SubLObject construct_fact_sheet_paragraph(SubLObject sentence_paraphrases, SubLObject focal_term, SubLObject domain_mt, SubLObject v_properties, SubLObject table_types, SubLObject table_data) {
	{
	    SubLObject new_sentence_paraphrases = NIL;
	    SubLObject use_bulletsP = makeBoolean(((NIL == com.cyc.cycjava.cycl.fact_sheets.xml_factsheetsP(v_properties)) && (NIL != list_utilities.lengthG(sentence_paraphrases, ONE_INTEGER, UNPROVIDED)))
		    && (NIL != pph_document.pph_summary_sentences_share_predP(remove_if($sym322$INVALID_ASSERTION_, remove(NIL, list_utilities.alist_keys(sentence_paraphrases), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED))));
	    SubLObject paragraph_text = NIL;
	    SubLObject allowed_term_type = getf(v_properties, $ALLOWED_TERM_TYPE, $ALL);
	    SubLObject blacklist_sources = getf(v_properties, $BLACKLIST_SOURCES, UNPROVIDED);
	    SubLObject sources = NIL;
	    SubLObject problem_store = NIL;
	    try {
		problem_store = inference_datastructures_problem_store.new_problem_store(UNPROVIDED);
		{
		    SubLObject cdolist_list_var = sentence_paraphrases;
		    SubLObject cons = NIL;
		    for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
			{
			    SubLObject datum = cons;
			    SubLObject current = datum;
			    SubLObject summary_sentence = NIL;
			    SubLObject paraphrase = NIL;
			    destructuring_bind_must_consp(current, datum, $list_alt326);
			    summary_sentence = current.first();
			    current = current.rest();
			    paraphrase = current;
			    if (NIL != cycl_utilities.expression_find_if($sym322$INVALID_ASSERTION_, summary_sentence, UNPROVIDED, UNPROVIDED)) {
			    } else {
				if (NIL != cycl_utilities.expression_find_if($sym327$INVALID_FORT_, summary_sentence, UNPROVIDED, UNPROVIDED)) {
				} else {
				    if (NIL != com.cyc.cycjava.cycl.fact_sheets.possibly_reserve_sentence_for_tables(summary_sentence, table_types, table_data, focal_term, domain_mt, problem_store)) {
				    } else {
					if (NIL != (NIL != summary_sentence ? ((SubLObject) (com.cyc.cycjava.cycl.fact_sheets.fact_sheet_summary_sentence_passes_retrieval_time_filterP(focal_term, summary_sentence, domain_mt, allowed_term_type, blacklist_sources)))
						: list_utilities.non_empty_list_p(new_sentence_paraphrases))) {
					    new_sentence_paraphrases = cons(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_possibly_mark_up_sentence_paraphrase(com.cyc.cycjava.cycl.fact_sheets.summary_sentence_cycl(summary_sentence), paraphrase, v_properties), new_sentence_paraphrases);
					    sources = cconcatenate(sources, com.cyc.cycjava.cycl.fact_sheets.summary_sentence_sources(summary_sentence));
					}
				    }
				}
			    }
			}
		    }
		}
	    } finally {
		{
		    SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
		    try {
			bind($is_thread_performing_cleanupP$, T);
			if (NIL == com.cyc.cycjava.cycl.fact_sheets.fact_sheet_queries_browsableP()) {
			    inference_datastructures_problem_store.destroy_problem_store(problem_store);
			}
		    } finally {
			rebind($is_thread_performing_cleanupP$, _prev_bind_0);
		    }
		}
	    }
	    if (NIL == new_sentence_paraphrases) {
	    } else {
		if ((NIL != use_bulletsP) && (NIL != list_utilities.lengthG(new_sentence_paraphrases, ONE_INTEGER, UNPROVIDED))) {
		    paragraph_text = pph_document.pph_make_bulleted_list(nreverse(new_sentence_paraphrases));
		} else {
		    paragraph_text = pph_utilities.clean_bunge_nreverse(new_sentence_paraphrases, UNPROVIDED);
		}
	    }
	    return values(paragraph_text, sources);
	}
    }

    public static SubLObject construct_fact_sheet_paragraph(final SubLObject sentence_paraphrases, final SubLObject focal_term, final SubLObject domain_mt, final SubLObject v_properties, final SubLObject table_types, final SubLObject table_data, final SubLObject force_bulletsP,
	    SubLObject slot_values_onlyP) {
	if (slot_values_onlyP == UNPROVIDED) {
	    slot_values_onlyP = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject new_sentence_paraphrases = NIL;
	final SubLObject use_bulletsP = makeBoolean((NIL == fact_sheets.xml_factsheetsP(v_properties)) && ((NIL != force_bulletsP)
		|| (NIL != pph_document.pph_summary_sentences_share_predP(remove_if(fact_sheets.$sym161$INVALID_ASSERTION_, remove(NIL, list_utilities.alist_keys(sentence_paraphrases), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED)))));
	SubLObject paragraph_text = NIL;
	final SubLObject allowed_term_type = getf(v_properties, fact_sheets.$ALLOWED_TERM_TYPE, $ALL);
	final SubLObject blacklist_sources = getf(v_properties, $BLACKLIST_SOURCES, UNPROVIDED);
	SubLObject slot_values = NIL;
	SubLObject v_sources = NIL;
	SubLObject problem_store = NIL;
	try {
	    problem_store = new_problem_store(UNPROVIDED);
	    SubLObject cdolist_list_var = sentence_paraphrases;
	    SubLObject cons = NIL;
	    cons = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject current;
		final SubLObject datum = current = cons;
		SubLObject summary_sentence = NIL;
		SubLObject paraphrase = NIL;
		destructuring_bind_must_consp(current, datum, fact_sheets.$list165);
		summary_sentence = current.first();
		current = paraphrase = current.rest();
		if (NIL == cycl_utilities.expression_find_if(fact_sheets.$sym161$INVALID_ASSERTION_, summary_sentence, UNPROVIDED, UNPROVIDED)) {
		    if (NIL == cycl_utilities.expression_find_if(fact_sheets.$sym166$INVALID_FORT_, summary_sentence, UNPROVIDED, UNPROVIDED)) {
			if (NIL == fact_sheets.possibly_reserve_sentence_for_tables(summary_sentence, table_types, table_data, focal_term, domain_mt, problem_store)) {
			    if (NIL != (NIL != summary_sentence ? fact_sheets.fact_sheet_summary_sentence_passes_retrieval_time_filterP(focal_term, summary_sentence, domain_mt, allowed_term_type, blacklist_sources) : list_utilities.non_empty_list_p(new_sentence_paraphrases))) {
				new_sentence_paraphrases = cons(fact_sheets.fact_sheet_possibly_mark_up_sentence_paraphrase(fact_sheets.summary_sentence_cycl(summary_sentence), paraphrase, v_properties), new_sentence_paraphrases);
				v_sources = cconcatenate(v_sources, fact_sheets.summary_sentence_sources(summary_sentence));
				if (NIL != slot_values_onlyP) {
				    final SubLObject new_slot_values = fact_sheets.fact_sheet_slot_values(fact_sheets.summary_sentence_cycl(summary_sentence), focal_term);
				    if (NIL != new_slot_values) {
					final SubLObject items_var = new_slot_values;
					if (items_var.isVector()) {
					    final SubLObject vector_var = items_var;
					    final SubLObject backwardP_var = NIL;
					    SubLObject length;
					    SubLObject v_iteration;
					    SubLObject element_num;
					    SubLObject item_var;
					    SubLObject item;
					    for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
						element_num = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
						item = item_var = aref(vector_var, element_num);
						if (NIL == member(item_var, slot_values, symbol_function(EQUAL), symbol_function(IDENTITY))) {
						    slot_values = cons(item_var, slot_values);
						}
					    }
					} else {
					    SubLObject cdolist_list_var_$34 = items_var;
					    SubLObject item2 = NIL;
					    item2 = cdolist_list_var_$34.first();
					    while (NIL != cdolist_list_var_$34) {
						final SubLObject item_var2 = item2;
						if (NIL == member(item_var2, slot_values, symbol_function(EQUAL), symbol_function(IDENTITY))) {
						    slot_values = cons(item_var2, slot_values);
						}
						cdolist_list_var_$34 = cdolist_list_var_$34.rest();
						item2 = cdolist_list_var_$34.first();
					    }
					}
				    } else {
					slot_values_onlyP = NIL;
				    }
				}
			    }
			}
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		cons = cdolist_list_var.first();
	    }
	} finally {
	    final SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values = getValuesAsVector();
		if (NIL == fact_sheets.fact_sheet_queries_browsableP()) {
		    destroy_problem_store(problem_store);
		}
		restoreValuesFromVector(_values);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
	    }
	}
	if (NIL != new_sentence_paraphrases) {
	    if ((NIL != use_bulletsP) && (NIL != slot_values_onlyP)) {
		final SubLObject _prev_bind_2 = fact_sheets.$within_fact_sheet_paraphraseP$.currentBinding(thread);
		final SubLObject _prev_bind_3 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
		final SubLObject _prev_bind_4 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
		final SubLObject _prev_bind_5 = pph_vars.$constant_link_function$.currentBinding(thread);
		final SubLObject _prev_bind_6 = pph_vars.$html_generation_target$.currentBinding(thread);
		final SubLObject _prev_bind_7 = pph_vars.$html_generation_term_id_function$.currentBinding(thread);
		final SubLObject _prev_bind_8 = pph_vars.$pph_speaker$.currentBinding(thread);
		final SubLObject _prev_bind_9 = pph_vars.$pph_addressee$.currentBinding(thread);
		try {
		    fact_sheets.$within_fact_sheet_paraphraseP$.bind(T, thread);
		    fact_sheets.$fact_sheet_focal_term$.bind(focal_term, thread);
		    thcl.$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(focal_term) ? cons(focal_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread), thread);
		    pph_vars.$constant_link_function$.bind($FACT_SHEET, thread);
		    pph_vars.$html_generation_target$.bind(pph_vars.$html_generation_target$.getDynamicValue(thread), thread);
		    pph_vars.$html_generation_term_id_function$.bind(fact_sheets.FACT_SHEET_TERM_ID, thread);
		    pph_vars.$pph_speaker$.bind($UNKNOWN, thread);
		    pph_vars.$pph_addressee$.bind($UNKNOWN, thread);
		    paragraph_text = pph_document.pph_make_bulleted_list(Mapping.mapcar(fact_sheets.FACT_SHEET_SLOT_VALUE_STRING, nreverse(slot_values)));
		} finally {
		    pph_vars.$pph_addressee$.rebind(_prev_bind_9, thread);
		    pph_vars.$pph_speaker$.rebind(_prev_bind_8, thread);
		    pph_vars.$html_generation_term_id_function$.rebind(_prev_bind_7, thread);
		    pph_vars.$html_generation_target$.rebind(_prev_bind_6, thread);
		    pph_vars.$constant_link_function$.rebind(_prev_bind_5, thread);
		    thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_4, thread);
		    fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_3, thread);
		    fact_sheets.$within_fact_sheet_paraphraseP$.rebind(_prev_bind_2, thread);
		}
	    } else if ((NIL != use_bulletsP) && (NIL != list_utilities.lengthG(new_sentence_paraphrases, ONE_INTEGER, UNPROVIDED))) {
		paragraph_text = pph_document.pph_make_bulleted_list(nreverse(new_sentence_paraphrases));
	    } else {
		paragraph_text = pph_utilities.clean_bunge_nreverse(new_sentence_paraphrases, UNPROVIDED);
	    }

	}
	return values(paragraph_text, v_sources);
    }

    public static SubLObject fact_sheet_slot_values(SubLObject summary_sentence_cycl, final SubLObject focal_term) {
	if (NIL != isa.isa_in_any_mtP(cycl_utilities.formula_arg0(summary_sentence_cycl), fact_sheets.$const168$QuantificationalRuleMacroPredicat)) {
	    summary_sentence_cycl = make_el_formula(cycl_utilities.formula_arg1(summary_sentence_cycl, UNPROVIDED), subseq(cycl_utilities.formula_args(summary_sentence_cycl, UNPROVIDED), ONE_INTEGER, THREE_INTEGER), UNPROVIDED);
	}
	SubLObject raw_value = NIL;
	if (NIL == formula_arityE(summary_sentence_cycl, TWO_INTEGER, UNPROVIDED)) {
	    Errors.warn(fact_sheets.$str169$Wrong_number_of_args_in__S, summary_sentence_cycl);
	} else if (NIL != czer_utilities.equals_elP(focal_term, cycl_utilities.formula_arg1(summary_sentence_cycl, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
	    raw_value = cycl_utilities.formula_arg2(summary_sentence_cycl, UNPROVIDED);
	} else if (NIL != czer_utilities.equals_elP(focal_term, cycl_utilities.formula_arg2(summary_sentence_cycl, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
	    raw_value = cycl_utilities.formula_arg1(summary_sentence_cycl, UNPROVIDED);
	} else {
	    Errors.warn(fact_sheets.$str170$Couldn_t_find__S_in__S, focal_term, summary_sentence_cycl);
	}

	return NIL != el_formula_with_operator_p(raw_value, fact_sheets.$$TheCoordinationSet) ? cycl_utilities.formula_args(raw_value, UNPROVIDED) : NIL == raw_value ? NIL : list(raw_value);
    }

    public static SubLObject fact_sheet_slot_value_string(final SubLObject value) {
	return pph_html.html_generate_phrase(value, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_summary_sentence_passes_data_gathering_time_filterP_alt(SubLObject summary_sentence, SubLObject topic, SubLObject query_mt) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject asent = (NIL != ist_sentence_p(summary_sentence)) ? ((SubLObject) (cycl_utilities.formula_arg2(summary_sentence, UNPROVIDED))) : summary_sentence;
		SubLObject passes_filterP = NIL;
		{
		    SubLObject _prev_bind_0 = $thcl_forts_by_fiat$.currentBinding(thread);
		    try {
			$thcl_forts_by_fiat$.bind(cons(cycl_utilities.atomic_sentence_predicate(asent), $thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
			passes_filterP = makeBoolean((((((NIL != cycl_grammar.cycl_sentence_p(summary_sentence)) && (NIL != thcl_formulaP(asent, UNPROVIDED)))
				&& (NIL == find_if($sym328$UNLEXIFIED_, cycl_utilities.expression_gather(cycl_utilities.formula_terms(asent, UNPROVIDED), CONSTANT_P, NIL, UNPROVIDED, UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED)))
				&& (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_about_topicP(asent, topic, query_mt, UNPROVIDED, UNPROVIDED))) && (NIL == pph_proof.pph_irrelevant_formulaP(summary_sentence, list(topic), $$BaseKB)))
				&& (NIL == pph_proof.pph_trivial_sentenceP(summary_sentence, $$BaseKB)));
		    } finally {
			$thcl_forts_by_fiat$.rebind(_prev_bind_0, thread);
		    }
		}
		return values(passes_filterP, cycl_utilities.atomic_sentence_predicate(asent));
	    }
	}
    }

    public static SubLObject fact_sheet_summary_sentence_passes_data_gathering_time_filterP(final SubLObject summary_sentence, final SubLObject topic, final SubLObject query_mt) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject asent = (NIL != ist_sentence_p(summary_sentence, UNPROVIDED)) ? cycl_utilities.formula_arg2(summary_sentence, UNPROVIDED) : summary_sentence;
	SubLObject passes_filterP = NIL;
	final SubLObject _prev_bind_0 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
	try {
	    thcl.$thcl_forts_by_fiat$.bind(cons(cycl_utilities.atomic_sentence_predicate(asent), thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
	    passes_filterP = makeBoolean((((((NIL != cycl_grammar.cycl_sentence_p(summary_sentence)) && (NIL != thcl.thcl_formulaP(asent, UNPROVIDED)))
		    && (NIL == find_if(fact_sheets.$sym172$UNLEXIFIED_, cycl_utilities.expression_gather(cycl_utilities.formula_terms(asent, UNPROVIDED), CONSTANT_P, NIL, UNPROVIDED, UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED)))
		    && (NIL != fact_sheets.fact_sheet_sentence_about_topicP(asent, topic, query_mt, UNPROVIDED, UNPROVIDED))) && (NIL == pph_proof.pph_irrelevant_formulaP(summary_sentence, list(topic), fact_sheets.$$BaseKB)))
		    && (NIL == pph_proof.pph_trivial_sentenceP(summary_sentence, fact_sheets.$$BaseKB)));
	} finally {
	    thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_0, thread);
	}
	return values(passes_filterP, cycl_utilities.atomic_sentence_predicate(asent));
    }

    /**
     *
     *
     * @param ALLOWED-TERM-TYPE;
     * 		:all, :non-proprietary, or :public-only
     */
    @LispMethod(comment = "@param ALLOWED-TERM-TYPE;\r\n\t\t:all, :non-proprietary, or :public-only")
    public static final SubLObject fact_sheet_summary_sentence_passes_retrieval_time_filterP_alt(SubLObject focal_term, SubLObject summary_sentence, SubLObject domain_mt, SubLObject allowed_term_type, SubLObject blacklist_sources) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(focal_term);
	}
	if (allowed_term_type == UNPROVIDED) {
	    allowed_term_type = $ALL;
	}
	if (blacklist_sources == UNPROVIDED) {
	    blacklist_sources = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject cycl = com.cyc.cycjava.cycl.fact_sheets.summary_sentence_cycl(summary_sentence);
		SubLObject asserts = com.cyc.cycjava.cycl.fact_sheets.summary_sentence_assertions(summary_sentence);
		SubLObject asent = (NIL != ist_sentence_p(cycl)) ? ((SubLObject) (cycl_utilities.formula_arg2(cycl, UNPROVIDED))) : cycl;
		SubLObject passes_filterP = T;
		{
		    SubLObject _prev_bind_0 = pph_vars.$pph_domain_mt$.currentBinding(thread);
		    SubLObject _prev_bind_1 = pph_vars.$pph_irrelevant_warnP$.currentBinding(thread);
		    try {
			pph_vars.$pph_domain_mt$.bind(domain_mt, thread);
			pph_vars.$pph_irrelevant_warnP$.bind(T, thread);
			if (NIL != list_utilities.any_in_list($sym322$INVALID_ASSERTION_, asserts, UNPROVIDED)) {
			    passes_filterP = NIL;
			} else {
			    if (NIL != pph_proof.pph_trivial_sentenceP(cycl, UNPROVIDED)) {
				passes_filterP = NIL;
			    } else {
				if ((allowed_term_type == $PUBLIC_ONLY)
					&& (((NIL != asserts) && (NIL != com.cyc.cycjava.cycl.fact_sheets.any_term_in_assertion_list_passes_test(NON_PUBLIC_CONSTANT, asserts, T))) || (NIL != cycl_utilities.expression_find_if($sym333$NON_PUBLIC_CONSTANT_, asent, T, UNPROVIDED)))) {
				    {
					SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
					if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
					    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
					    format(stream, $str_alt334$Filtering__S___due_to_non_public_, summary_sentence, cycl_utilities.expression_find_if($sym333$NON_PUBLIC_CONSTANT_, asent, T, UNPROVIDED));
					    force_output(stream);
					}
				    }
				    passes_filterP = NIL;
				} else {
				    if ((allowed_term_type == $NON_PROPRIETARY)
					    && (((NIL != asserts) && (NIL != com.cyc.cycjava.cycl.fact_sheets.any_term_in_assertion_list_passes_test($sym336$PROPRIETARY_CONSTANT_, asserts, T))) || (NIL != cycl_utilities.expression_find_if($sym336$PROPRIETARY_CONSTANT_, asent, T, UNPROVIDED)))) {
					{
					    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
					    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
						com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
						format(stream, $str_alt337$Filtering__S___due_to_proprietary, summary_sentence, cycl_utilities.expression_find_if($sym336$PROPRIETARY_CONSTANT_, asent, T, UNPROVIDED));
						force_output(stream);
					    }
					}
					passes_filterP = NIL;
				    } else {
					if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_blacklisted_sources(summary_sentence, blacklist_sources)) {
					    {
						SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
						if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
						    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
						    format(stream, $str_alt338$Filtering__S___due_to_blacklisted, summary_sentence, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_blacklisted_sources(summary_sentence, blacklist_sources));
						    force_output(stream);
						}
					    }
					    passes_filterP = NIL;
					} else {
					    if (NIL != pph_proof.pph_irrelevant_formulaP(asent, list(focal_term), UNPROVIDED)) {
						passes_filterP = NIL;
					    }
					}
				    }
				}
			    }
			}
		    } finally {
			pph_vars.$pph_irrelevant_warnP$.rebind(_prev_bind_1, thread);
			pph_vars.$pph_domain_mt$.rebind(_prev_bind_0, thread);
		    }
		}
		if (NIL == passes_filterP) {
		    Errors.warn($str_alt339$Filtering____S, asent);
		}
		return values(passes_filterP, NIL != passes_filterP ? ((SubLObject) (cycl_utilities.atomic_sentence_predicate(asent))) : NIL);
	    }
	}
    }

    /**
     *
     *
     * @param ALLOWED-TERM-TYPE;
     * 		:all, :non-proprietary, or :public-only
     */
    @LispMethod(comment = "@param ALLOWED-TERM-TYPE;\r\n\t\t:all, :non-proprietary, or :public-only")
    public static SubLObject fact_sheet_summary_sentence_passes_retrieval_time_filterP(final SubLObject focal_term, final SubLObject summary_sentence, SubLObject domain_mt, SubLObject allowed_term_type, SubLObject blacklist_sources) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(focal_term);
	}
	if (allowed_term_type == UNPROVIDED) {
	    allowed_term_type = $ALL;
	}
	if (blacklist_sources == UNPROVIDED) {
	    blacklist_sources = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject cycl = fact_sheets.summary_sentence_cycl(summary_sentence);
	final SubLObject asserts = fact_sheets.summary_sentence_assertions(summary_sentence);
	final SubLObject asent = (NIL != ist_sentence_p(cycl, UNPROVIDED)) ? cycl_utilities.formula_arg2(cycl, UNPROVIDED) : cycl;
	SubLObject passes_filterP = T;
	final SubLObject _prev_bind_0 = pph_vars.$pph_domain_mt$.currentBinding(thread);
	final SubLObject _prev_bind_2 = pph_vars.$pph_irrelevant_warnP$.currentBinding(thread);
	try {
	    pph_vars.$pph_domain_mt$.bind(domain_mt, thread);
	    pph_vars.$pph_irrelevant_warnP$.bind(T, thread);
	    if (NIL != list_utilities.any_in_list(fact_sheets.$sym161$INVALID_ASSERTION_, asserts, UNPROVIDED)) {
		passes_filterP = NIL;
	    } else if (NIL != pph_proof.pph_trivial_sentenceP(cycl, UNPROVIDED)) {
		passes_filterP = NIL;
	    } else if ((allowed_term_type == $PUBLIC_ONLY)
		    && (((NIL != asserts) && (NIL != fact_sheets.any_term_in_assertion_list_passes_test(fact_sheets.NON_PUBLIC_CONSTANT, asserts, T))) || (NIL != cycl_utilities.expression_find_if(fact_sheets.$sym178$NON_PUBLIC_CONSTANT_, asent, T, UNPROVIDED)))) {
		final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
		    format(stream, fact_sheets.$str179$Filtering__S___due_to_non_public_, summary_sentence, cycl_utilities.expression_find_if(fact_sheets.$sym178$NON_PUBLIC_CONSTANT_, asent, T, UNPROVIDED));
		    force_output(stream);
		}
		passes_filterP = NIL;
	    } else if ((allowed_term_type == $NON_PROPRIETARY)
		    && (((NIL != asserts) && (NIL != fact_sheets.any_term_in_assertion_list_passes_test(fact_sheets.$sym181$PROPRIETARY_CONSTANT_, asserts, T))) || (NIL != cycl_utilities.expression_find_if(fact_sheets.$sym181$PROPRIETARY_CONSTANT_, asent, T, UNPROVIDED)))) {
		final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
		    format(stream, fact_sheets.$str182$Filtering__S___due_to_proprietary, summary_sentence, cycl_utilities.expression_find_if(fact_sheets.$sym181$PROPRIETARY_CONSTANT_, asent, T, UNPROVIDED));
		    force_output(stream);
		}
		passes_filterP = NIL;
	    } else if (NIL != fact_sheets.fact_sheet_blacklisted_sources(summary_sentence, blacklist_sources)) {
		final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
		    format(stream, fact_sheets.$str183$Filtering__S___due_to_blacklisted, summary_sentence, fact_sheets.fact_sheet_blacklisted_sources(summary_sentence, blacklist_sources));
		    force_output(stream);
		}
		passes_filterP = NIL;
	    } else if (NIL != pph_proof.pph_irrelevant_formulaP(asent, cons(focal_term, fact_sheets.$fact_sheet_relevant_terms$.getDynamicValue(thread)), UNPROVIDED)) {
		passes_filterP = NIL;
	    }

	} finally {
	    pph_vars.$pph_irrelevant_warnP$.rebind(_prev_bind_2, thread);
	    pph_vars.$pph_domain_mt$.rebind(_prev_bind_0, thread);
	}
	if (NIL == passes_filterP) {
	    Errors.warn(fact_sheets.$str184$Filtering____S, asent);
	}
	return values(passes_filterP, NIL != passes_filterP ? cycl_utilities.atomic_sentence_predicate(asent) : NIL);
    }

    public static final SubLObject fact_sheet_blacklisted_sources_alt(SubLObject summary_sentence, SubLObject blacklisted_sources) {
	{
	    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.fact_sheets.summary_sentence_assertions(summary_sentence);
	    SubLObject v_assert = NIL;
	    for (v_assert = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), v_assert = cdolist_list_var.first()) {
		{
		    SubLObject sources = pph_proof.pph_assertion_sources(v_assert);
		    SubLObject blacklisted = intersection(sources, blacklisted_sources, UNPROVIDED, UNPROVIDED);
		    if (NIL != blacklisted) {
			return blacklisted;
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject fact_sheet_blacklisted_sources(final SubLObject summary_sentence, final SubLObject blacklisted_sources) {
	SubLObject cdolist_list_var = fact_sheets.summary_sentence_assertions(summary_sentence);
	SubLObject v_assert = NIL;
	v_assert = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    final SubLObject v_sources = sources.assertion_sources(v_assert);
	    final SubLObject blacklisted = intersection(v_sources, blacklisted_sources, UNPROVIDED, UNPROVIDED);
	    if (NIL != blacklisted) {
		return blacklisted;
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    v_assert = cdolist_list_var.first();
	}
	return NIL;
    }

    public static final SubLObject any_term_in_assertion_list_passes_test_alt(SubLObject test, SubLObject asserts, SubLObject penetrate_hl_structuresP) {
	{
	    SubLObject passP = NIL;
	    if (NIL == passP) {
		{
		    SubLObject csome_list_var = asserts;
		    SubLObject v_assert = NIL;
		    for (v_assert = csome_list_var.first(); !((NIL != passP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), v_assert = csome_list_var.first()) {
			passP = cycl_utilities.assertion_find_if(test, v_assert, penetrate_hl_structuresP, UNPROVIDED);
		    }
		}
	    }
	    return passP;
	}
    }

    public static SubLObject any_term_in_assertion_list_passes_test(final SubLObject test, final SubLObject asserts, final SubLObject penetrate_hl_structuresP) {
	SubLObject passP = NIL;
	if (NIL == passP) {
	    SubLObject csome_list_var;
	    SubLObject v_assert;
	    for (csome_list_var = asserts, v_assert = NIL, v_assert = csome_list_var.first(); (NIL == passP)
		    && (NIL != csome_list_var); passP = cycl_utilities.assertion_find_if(test, v_assert, penetrate_hl_structuresP, UNPROVIDED), csome_list_var = csome_list_var.rest(), v_assert = csome_list_var.first()) {
	    }
	}
	return passP;
    }

    public static final SubLObject fact_sheet_title_alt(SubLObject v_term) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject term_paraphrase = pph_main.generate_phrase(v_term, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		term_paraphrase = pph_utilities.add_title_capitalization(term_paraphrase);
		return NIL != $fact_sheet_term_paraphrase_for_titleP$.getDynamicValue(thread) ? ((SubLObject) (term_paraphrase)) : cconcatenate($str_alt340$Fact_Sheet_for_, format_nil.format_nil_a_no_copy(term_paraphrase));
	    }
	}
    }

    public static SubLObject fact_sheet_title(final SubLObject v_term) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject _prev_bind_0 = pph_vars.$constant_link_function$.currentBinding(thread);
	try {
	    pph_vars.$constant_link_function$.bind($NONE, thread);
	    SubLObject term_paraphrase = pph_html.html_generate_phrase(v_term, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	    term_paraphrase = pph_utilities.add_title_capitalization(term_paraphrase);
	    return NIL != fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.getDynamicValue(thread) ? term_paraphrase : cconcatenate(fact_sheets.$$$Fact_Sheet_for_, format_nil.format_nil_a_no_copy(term_paraphrase));
	} finally {
	    pph_vars.$constant_link_function$.rebind(_prev_bind_0, thread);
	}
    }

    public static final SubLObject generate_fact_sheet_markup_alt(SubLObject v_term, SubLObject domain_mt, SubLObject paragraph_texts, SubLObject footnotes, SubLObject stats, SubLObject display_time, SubLObject v_properties) {
	if (NIL != com.cyc.cycjava.cycl.fact_sheets.xml_factsheetsP(v_properties)) {
	    return com.cyc.cycjava.cycl.fact_sheets.generate_fact_sheet_xml(v_term, domain_mt, paragraph_texts, footnotes, stats, display_time, v_properties);
	} else {
	    return com.cyc.cycjava.cycl.fact_sheets.generate_fact_sheet_html(v_term, domain_mt, paragraph_texts, footnotes, stats, display_time, v_properties);
	}
    }

    public static SubLObject generate_fact_sheet_markup(final SubLObject v_term, final SubLObject domain_mt, final SubLObject paragraph_texts, final SubLObject footnotes, final SubLObject stats, final SubLObject display_time, final SubLObject v_properties) {
	if (NIL != fact_sheets.xml_factsheetsP(v_properties)) {
	    return fact_sheets.generate_fact_sheet_xml(v_term, domain_mt, paragraph_texts, footnotes, stats, display_time, v_properties);
	}
	return fact_sheets.generate_fact_sheet_html(v_term, domain_mt, paragraph_texts, footnotes, stats, display_time, v_properties);
    }

    public static final SubLObject generate_fact_sheet_xml_alt(SubLObject v_term, SubLObject domain_mt, SubLObject paragraph_texts, SubLObject footnotes, SubLObject stats, SubLObject display_time, SubLObject v_properties) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(stats, FACT_SHEET_STATS_P);
	    if (paragraph_texts.equal(list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_under_construction_code()))) {
		return com.cyc.cycjava.cycl.fact_sheets.fact_sheet_under_construction_xml(v_term, stats);
	    }
	    {
		SubLObject image_url = (NIL != forts.fort_p(v_term)) ? ((SubLObject) (com.cyc.cycjava.cycl.fact_sheets.fact_sheet_image_url_for_term(v_term, domain_mt))) : NIL;
		SubLObject title = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_title(v_term);
		SubLObject fact_sheet_xml = NIL;
		SubLObject fact_sheet_attrs = list($$$id, kb_utilities.compact_hl_external_id_string(v_term), $$$cycl, v_term);
		SubLObject stream = NIL;
		try {
		    stream = make_private_string_output_stream();
		    {
			SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
			try {
			    xml_vars.$xml_stream$.bind(stream, thread);
			    {
				SubLObject _prev_bind_0_50 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
				SubLObject _prev_bind_1 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
				try {
				    xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
				    xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
				    xml_utilities.xml_start_tag_internal($$$factSheet, fact_sheet_attrs, NIL);
				    format(xml_vars.$xml_stream$.getDynamicValue(thread), $str_alt287$_A, title);
				    com.cyc.cycjava.cycl.fact_sheets.display_fact_sheet(title, image_url, paragraph_texts, footnotes, v_properties);
				} finally {
				    xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1, thread);
				    xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_50, thread);
				}
			    }
			    xml_utilities.xml_terpri();
			    xml_utilities.xml_end_tag_internal($$$factSheet);
			} finally {
			    xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
			}
		    }
		    fact_sheet_xml = get_output_stream_string(stream);
		} finally {
		    {
			SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    close(stream, UNPROVIDED);
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return fact_sheet_xml;
	    }
	}
    }

    public static SubLObject generate_fact_sheet_xml(final SubLObject v_term, final SubLObject domain_mt, final SubLObject paragraph_texts, final SubLObject footnotes, final SubLObject stats, final SubLObject display_time, final SubLObject v_properties) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	assert NIL != fact_sheets.fact_sheet_stats_p(stats) : "! fact_sheets.fact_sheet_stats_p(stats) " + ("fact_sheets.fact_sheet_stats_p(stats) " + "CommonSymbols.NIL != fact_sheets.fact_sheet_stats_p(stats) ") + stats;
	if (paragraph_texts.equal(list(fact_sheets.fact_sheet_under_construction_code()))) {
	    return fact_sheets.fact_sheet_under_construction_xml(v_term, stats);
	}
	final SubLObject image_url = (NIL != forts.fort_p(v_term)) ? fact_sheets.fact_sheet_image_url_for_term(v_term, domain_mt) : NIL;
	final SubLObject title = fact_sheets.fact_sheet_title(v_term);
	SubLObject fact_sheet_xml = NIL;
	final SubLObject fact_sheet_attrs = list(fact_sheets.$$$id, kb_utilities.compact_hl_external_id_string(v_term), fact_sheets.$$$cycl, v_term);
	SubLObject stream = NIL;
	try {
	    stream = make_private_string_output_stream();
	    final SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
	    try {
		xml_vars.$xml_stream$.bind(stream, thread);
		try {
		    final SubLObject _prev_bind_0_$35 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
		    final SubLObject _prev_bind_2 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
		    try {
			xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
			xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
			xml_utilities.xml_start_tag_internal(fact_sheets.$$$factSheet, fact_sheet_attrs, NIL, NIL, $UNINITIALIZED);
			final SubLObject _prev_bind_0_$36 = xml_vars.$xml_default_namespace$.currentBinding(thread);
			try {
			    xml_vars.$xml_default_namespace$.bind($UNINITIALIZED, thread);
			    format(xml_vars.$xml_stream$.getDynamicValue(thread), fact_sheets.$str124$_A, title);
			    fact_sheets.display_fact_sheet(title, image_url, paragraph_texts, footnotes, v_properties);
			} finally {
			    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$36, thread);
			}
		    } finally {
			xml_utilities.$cycml_indent_level$.rebind(_prev_bind_2, thread);
			xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$35, thread);
		    }
		} finally {
		    final SubLObject _prev_bind_0_$37 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values = getValuesAsVector();
			xml_utilities.xml_terpri();
			xml_utilities.xml_end_tag_internal(fact_sheets.$$$factSheet);
			restoreValuesFromVector(_values);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$37, thread);
		    }
		}
	    } finally {
		xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
	    }
	    fact_sheet_xml = get_output_stream_string(stream);
	} finally {
	    final SubLObject _prev_bind_3 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values2 = getValuesAsVector();
		close(stream, UNPROVIDED);
		restoreValuesFromVector(_values2);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
	    }
	}
	return fact_sheet_xml;
    }

    public static final SubLObject generate_fact_sheet_html_alt(SubLObject v_term, SubLObject domain_mt, SubLObject paragraph_texts, SubLObject footnotes, SubLObject stats, SubLObject display_time, SubLObject v_properties) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (paragraph_texts.equal(list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_under_construction_code()))) {
		return com.cyc.cycjava.cycl.fact_sheets.fact_sheet_under_construction_html(v_term, stats);
	    }
	    {
		SubLObject image_url = (NIL != forts.fort_p(v_term)) ? ((SubLObject) (com.cyc.cycjava.cycl.fact_sheets.fact_sheet_image_url_for_term(v_term, domain_mt))) : NIL;
		SubLObject title = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_title(v_term);
		SubLObject stylesheet = getf(v_properties, $STYLESHEET, NIL);
		SubLObject show_adP = getf(v_properties, $kw345$SHOW_AD_, NIL);
		SubLObject show_info_link_url = getf(v_properties, $SHOW_INFO_LINK_URL, NIL);
		SubLObject show_opencyc_uriP = getf(v_properties, $kw347$SHOW_URI_, NIL);
		SubLObject show_followup_widgetP = getf(v_properties, $kw348$SHOW_FOLLOWUP_WIDGET_, NIL);
		SubLObject fact_sheet_html = NIL;
		SubLObject stream = NIL;
		try {
		    stream = make_private_string_output_stream();
		    {
			SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
			try {
			    html_macros.$html_stream$.bind(stream, thread);
			    html_markup(html_macros.$html_html_head$.getGlobalValue());
			    html_markup(html_macros.$html_head_head$.getGlobalValue());
			    html_macros.html_head_content_type();
			    if (stylesheet.isString()) {
				html_source_readability_terpri(UNPROVIDED);
				html_markup(html_macros.$html_link_head$.getGlobalValue());
				if (true) {
				    html_markup(html_macros.$html_link_rel$.getGlobalValue());
				    html_char(CHAR_quotation, UNPROVIDED);
				    html_markup($$$stylesheet);
				    html_char(CHAR_quotation, UNPROVIDED);
				}
				if (NIL != stylesheet) {
				    html_markup(html_macros.$html_link_href$.getGlobalValue());
				    html_char(CHAR_quotation, UNPROVIDED);
				    html_markup(stylesheet);
				    html_char(CHAR_quotation, UNPROVIDED);
				}
				if (true) {
				    html_markup(html_macros.$html_link_type$.getGlobalValue());
				    html_char(CHAR_quotation, UNPROVIDED);
				    html_markup($str_alt350$text_css);
				    html_char(CHAR_quotation, UNPROVIDED);
				}
				html_char(CHAR_greater, UNPROVIDED);
			    }
			    if (NIL != $fact_sheet_use_base_urlP$.getDynamicValue(thread)) {
				{
				    SubLObject base_url = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_base_url_placeholder();
				    html_source_readability_terpri(UNPROVIDED);
				    html_markup(html_macros.$html_base_head$.getGlobalValue());
				    if (NIL != base_url) {
					html_markup(html_macros.$html_base_href$.getGlobalValue());
					html_char(CHAR_quotation, UNPROVIDED);
					html_markup(base_url);
					html_char(CHAR_quotation, UNPROVIDED);
				    }
				    html_char(CHAR_greater, UNPROVIDED);
				}
			    }
			    html_source_readability_terpri(UNPROVIDED);
			    html_markup(html_macros.$html_title_head$.getGlobalValue());
			    html_princ(title);
			    html_markup(html_macros.$html_title_tail$.getGlobalValue());
			    html_markup(html_macros.$html_head_tail$.getGlobalValue());
			    html_source_readability_terpri(UNPROVIDED);
			    {
				SubLObject _prev_bind_0_51 = html_macros.$html_inside_bodyP$.currentBinding(thread);
				try {
				    html_macros.$html_inside_bodyP$.bind(T, thread);
				    html_markup(html_macros.$html_body_head$.getGlobalValue());
				    html_char(CHAR_greater, UNPROVIDED);
				    {
					SubLObject _prev_bind_0_52 = html_macros.$html_safe_print$.currentBinding(thread);
					try {
					    html_macros.$html_safe_print$.bind(T, thread);
					    if (NIL != show_adP) {
						{
						    SubLObject _prev_bind_0_53 = html_macros.$html_safe_print$.currentBinding(thread);
						    try {
							html_macros.$html_safe_print$.bind(NIL, thread);
							html_markup(html_macros.$html_center_head$.getGlobalValue());
							html_princ(com.cyc.cycjava.cycl.fact_sheets.public_fact_sheet_ad_html());
							html_markup(html_macros.$html_center_tail$.getGlobalValue());
						    } finally {
							html_macros.$html_safe_print$.rebind(_prev_bind_0_53, thread);
						    }
						}
						html_newline(UNPROVIDED);
					    }
					    if (NIL != show_followup_widgetP) {
						format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt351$_div_class__cycFollowup__termId__, kb_utilities.compact_hl_external_id_string(v_term),
							pph_main.generate_phrase(v_term, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
					    }
					    html_terpri(UNPROVIDED);
					    {
						SubLObject more_display_time = NIL;
						SubLObject error_message = NIL;
						SubLObject time_var = get_internal_real_time();
						com.cyc.cycjava.cycl.fact_sheets.display_fact_sheet(title, image_url, paragraph_texts, footnotes, v_properties);
						more_display_time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
						if (NIL != $catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
						    try {
							{
							    SubLObject _prev_bind_0_54 = Errors.$error_handler$.currentBinding(thread);
							    try {
								Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
								try {
								    princ(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_optional_section_start_comment($STATS, UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
								    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_stats(stats, add(display_time, more_display_time), UNPROVIDED);
								    princ(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_optional_section_end_comment($STATS), html_macros.$html_stream$.getDynamicValue(thread));
								} catch (Throwable catch_var) {
								    Errors.handleThrowable(catch_var, NIL);
								}
							    } finally {
								Errors.$error_handler$.rebind(_prev_bind_0_54, thread);
							    }
							}
						    } catch (Throwable ccatch_env_var) {
							error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
						    }
						} else {
						    princ(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_optional_section_start_comment($STATS, UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
						    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_stats(stats, add(display_time, more_display_time), UNPROVIDED);
						    princ(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_optional_section_end_comment($STATS), html_macros.$html_stream$.getDynamicValue(thread));
						}
						if (NIL != show_followup_widgetP) {
						    format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt354$_script_src___A__type__text_javas, $fact_sheet_followup_loader_root_relative_path$.getDynamicValue(thread));
						    html_terpri(UNPROVIDED);
						}
						if (NIL != error_message) {
						    {
							SubLObject stream_55 = $fact_sheet_log_stream$.getDynamicValue(thread);
							if (((T == stream_55) && (current_process() == subl_promotions.initial_process())) || (stream_55.isStream() && (NIL != output_stream_p(stream_55)))) {
							    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream_55);
							    format(stream_55, $str_alt355$Unable_to_print_fact_sheet_statis, v_term);
							    force_output(stream_55);
							}
						    }
						}
					    }
					    if ((NIL != show_opencyc_uriP) || (NIL != show_info_link_url)) {
						com.cyc.cycjava.cycl.fact_sheets.emit_fact_sheet_opencyc_uri(v_term, show_opencyc_uriP, show_info_link_url);
					    }
					    html_source_readability_terpri(UNPROVIDED);
					    html_copyright_notice();
					} finally {
					    html_macros.$html_safe_print$.rebind(_prev_bind_0_52, thread);
					}
				    }
				    html_markup(html_macros.$html_body_tail$.getGlobalValue());
				    html_source_readability_terpri(UNPROVIDED);
				} finally {
				    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_51, thread);
				}
			    }
			    html_markup(html_macros.$html_html_tail$.getGlobalValue());
			    html_source_readability_terpri(UNPROVIDED);
			} finally {
			    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
			}
		    }
		    fact_sheet_html = get_output_stream_string(stream);
		} finally {
		    {
			SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    close(stream, UNPROVIDED);
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return com.cyc.cycjava.cycl.fact_sheets.possibly_remove_fact_sheet_sections(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_html_replace_placeholders(fact_sheet_html, domain_mt), v_properties, v_term);
	    }
	}
    }

    public static SubLObject generate_fact_sheet_html(final SubLObject v_term, final SubLObject domain_mt, final SubLObject paragraph_texts, final SubLObject footnotes, final SubLObject stats, final SubLObject display_time, final SubLObject v_properties) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	if (paragraph_texts.equal(list(fact_sheets.fact_sheet_under_construction_code()))) {
	    return fact_sheets.fact_sheet_under_construction_html(v_term, stats);
	}
	final SubLObject image_url = (NIL != forts.fort_p(v_term)) ? fact_sheets.fact_sheet_image_url_for_term(v_term, domain_mt) : NIL;
	final SubLObject title = fact_sheets.fact_sheet_title(v_term);
	final SubLObject stylesheet = getf(v_properties, $STYLESHEET, NIL);
	final SubLObject stylesheets = getf(v_properties, $STYLESHEETS, NIL);
	final SubLObject show_adP = getf(v_properties, fact_sheets.$kw192$SHOW_AD_, NIL);
	final SubLObject show_info_link_url = getf(v_properties, fact_sheets.$SHOW_INFO_LINK_URL, NIL);
	final SubLObject show_opencyc_uriP = getf(v_properties, fact_sheets.$kw194$SHOW_URI_, NIL);
	final SubLObject show_followup_widgetP = getf(v_properties, fact_sheets.$kw195$SHOW_FOLLOWUP_WIDGET_, NIL);
	SubLObject fact_sheet_html = NIL;
	SubLObject stream = NIL;
	try {
	    stream = make_private_string_output_stream();
	    final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
	    try {
		html_macros.$html_stream$.bind(stream, thread);
		html_markup(fact_sheets.$str196$__DOCTYPE_html_PUBLIC_____W3C__DT);
		if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
		    html_source_readability_terpri(UNPROVIDED);
		    html_markup(fact_sheets.$str197$_meta_http_equiv__X_UA_Compatible);
		}
		html_source_readability_terpri(UNPROVIDED);
		final SubLObject _prev_bind_0_$38 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
		try {
		    cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
		    html_markup(html_macros.$html_html_head$.getGlobalValue());
		    html_markup(html_macros.$html_head_head$.getGlobalValue());
		    html_macros.html_head_content_type();
		    if (stylesheet.isString()) {
			html_source_readability_terpri(UNPROVIDED);
			html_markup(html_macros.$html_link_head$.getGlobalValue());
			html_markup(html_macros.$html_link_rel$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(fact_sheets.$$$stylesheet);
			html_char(CHAR_quotation, UNPROVIDED);
			if (NIL != stylesheet) {
			    html_markup(html_macros.$html_link_href$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup(stylesheet);
			    html_char(CHAR_quotation, UNPROVIDED);
			}
			html_markup(html_macros.$html_link_type$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(fact_sheets.$str199$text_css);
			html_char(CHAR_quotation, UNPROVIDED);
			html_char(CHAR_greater, UNPROVIDED);
		    }
		    SubLObject cdolist_list_var = stylesheets;
		    SubLObject cs = NIL;
		    cs = cdolist_list_var.first();
		    while (NIL != cdolist_list_var) {
			html_source_readability_terpri(UNPROVIDED);
			html_markup(html_macros.$html_link_head$.getGlobalValue());
			html_markup(html_macros.$html_link_rel$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(fact_sheets.$$$stylesheet);
			html_char(CHAR_quotation, UNPROVIDED);
			if (NIL != cs) {
			    html_markup(html_macros.$html_link_href$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup(cs);
			    html_char(CHAR_quotation, UNPROVIDED);
			}
			html_markup(html_macros.$html_link_type$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(fact_sheets.$str199$text_css);
			html_char(CHAR_quotation, UNPROVIDED);
			html_char(CHAR_greater, UNPROVIDED);
			cdolist_list_var = cdolist_list_var.rest();
			cs = cdolist_list_var.first();
		    }
		    if (NIL != fact_sheets.$fact_sheet_use_base_urlP$.getDynamicValue(thread)) {
			final SubLObject base_url = fact_sheets.fact_sheet_base_url_placeholder();
			html_source_readability_terpri(UNPROVIDED);
			html_markup(html_macros.$html_base_head$.getGlobalValue());
			if (NIL != base_url) {
			    html_markup(html_macros.$html_base_href$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup(base_url);
			    html_char(CHAR_quotation, UNPROVIDED);
			}
			html_char(CHAR_greater, UNPROVIDED);
		    }
		    html_source_readability_terpri(UNPROVIDED);
		    html_markup(html_macros.$html_title_head$.getGlobalValue());
		    html_princ(title);
		    html_markup(html_macros.$html_title_tail$.getGlobalValue());
		    html_markup(html_macros.$html_head_tail$.getGlobalValue());
		    html_source_readability_terpri(UNPROVIDED);
		    final SubLObject _prev_bind_0_$39 = html_macros.$html_inside_bodyP$.currentBinding(thread);
		    try {
			html_macros.$html_inside_bodyP$.bind(T, thread);
			html_markup(html_macros.$html_body_head$.getGlobalValue());
			html_char(CHAR_greater, UNPROVIDED);
			final SubLObject _prev_bind_0_$40 = html_macros.$html_safe_print$.currentBinding(thread);
			try {
			    html_macros.$html_safe_print$.bind(T, thread);
			    if (NIL != show_adP) {
				final SubLObject _prev_bind_0_$41 = html_macros.$html_safe_print$.currentBinding(thread);
				try {
				    html_macros.$html_safe_print$.bind(NIL, thread);
				    html_markup(html_macros.$html_center_head$.getGlobalValue());
				    html_princ(fact_sheets.public_fact_sheet_ad_html());
				    html_markup(html_macros.$html_center_tail$.getGlobalValue());
				} finally {
				    html_macros.$html_safe_print$.rebind(_prev_bind_0_$41, thread);
				}
				html_newline(UNPROVIDED);
			    }
			    if (NIL != show_followup_widgetP) {
				format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$str200$_div_class__cycFollowup__termId__, kb_utilities.compact_hl_external_id_string(v_term),
					pph_main.generate_phrase(v_term, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
			    }
			    html_terpri(UNPROVIDED);
			    SubLObject more_display_time = NIL;
			    SubLObject error_message = NIL;
			    final SubLObject time_var = get_internal_real_time();
			    fact_sheets.display_fact_sheet(title, image_url, paragraph_texts, footnotes, v_properties);
			    more_display_time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
			    if (NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
				try {
				    thread.throwStack.push($catch_error_message_target$.getGlobalValue());
				    final SubLObject _prev_bind_0_$42 = Errors.$error_handler$.currentBinding(thread);
				    try {
					Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
					try {
					    princ(fact_sheets.fact_sheet_optional_section_start_comment($STATS, UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
					    fact_sheets.print_fact_sheet_stats(stats, add(display_time, more_display_time), UNPROVIDED);
					    princ(fact_sheets.fact_sheet_optional_section_end_comment($STATS), html_macros.$html_stream$.getDynamicValue(thread));
					} catch (final Throwable catch_var) {
					    Errors.handleThrowable(catch_var, NIL);
					}
				    } finally {
					Errors.$error_handler$.rebind(_prev_bind_0_$42, thread);
				    }
				} catch (final Throwable ccatch_env_var) {
				    error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
				} finally {
				    thread.throwStack.pop();
				}
			    } else {
				princ(fact_sheets.fact_sheet_optional_section_start_comment($STATS, UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
				fact_sheets.print_fact_sheet_stats(stats, add(display_time, more_display_time), UNPROVIDED);
				princ(fact_sheets.fact_sheet_optional_section_end_comment($STATS), html_macros.$html_stream$.getDynamicValue(thread));
			    }
			    if (NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
				try {
				    thread.throwStack.push($catch_error_message_target$.getGlobalValue());
				    final SubLObject _prev_bind_0_$43 = Errors.$error_handler$.currentBinding(thread);
				    try {
					Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
					try {
					    princ(fact_sheets.fact_sheet_optional_section_start_comment($COPYRIGHT, UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
					    html_copyright_notice();
					    princ(fact_sheets.fact_sheet_optional_section_end_comment($COPYRIGHT), html_macros.$html_stream$.getDynamicValue(thread));
					} catch (final Throwable catch_var) {
					    Errors.handleThrowable(catch_var, NIL);
					}
				    } finally {
					Errors.$error_handler$.rebind(_prev_bind_0_$43, thread);
				    }
				} catch (final Throwable ccatch_env_var) {
				    error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
				} finally {
				    thread.throwStack.pop();
				}
			    } else {
				princ(fact_sheets.fact_sheet_optional_section_start_comment($COPYRIGHT, UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
				html_copyright_notice();
				princ(fact_sheets.fact_sheet_optional_section_end_comment($COPYRIGHT), html_macros.$html_stream$.getDynamicValue(thread));
			    }
			    if (NIL != show_followup_widgetP) {
				format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$str204$_script_src___A__type__text_javas, fact_sheets.$fact_sheet_followup_loader_root_relative_path$.getDynamicValue(thread));
				html_terpri(UNPROVIDED);
			    }
			    if (NIL != error_message) {
				final SubLObject stream_$44 = fact_sheet_logs.fact_sheet_log_stream();
				if (((T == stream_$44) && current_process().eql(subl_promotions.initial_process())) || (stream_$44.isStream() && (NIL != output_stream_p(stream_$44)))) {
				    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream_$44);
				    format(stream_$44, fact_sheets.$str206$Unable_to_print_fact_sheet_statis, v_term);
				    force_output(stream_$44);
				}
			    }
			    if ((NIL != show_opencyc_uriP) || (NIL != show_info_link_url)) {
				fact_sheets.emit_fact_sheet_opencyc_uri(v_term, show_opencyc_uriP, show_info_link_url);
			    }
			    html_source_readability_terpri(UNPROVIDED);
			} finally {
			    html_macros.$html_safe_print$.rebind(_prev_bind_0_$40, thread);
			}
			html_markup(html_macros.$html_body_tail$.getGlobalValue());
			html_source_readability_terpri(UNPROVIDED);
		    } finally {
			html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$39, thread);
		    }
		    html_markup(html_macros.$html_html_tail$.getGlobalValue());
		} finally {
		    cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$38, thread);
		}
		html_source_readability_terpri(UNPROVIDED);
	    } finally {
		html_macros.$html_stream$.rebind(_prev_bind_0, thread);
	    }
	    fact_sheet_html = get_output_stream_string(stream);
	} finally {
	    final SubLObject _prev_bind_2 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values = getValuesAsVector();
		close(stream, UNPROVIDED);
		restoreValuesFromVector(_values);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
	    }
	}
	return fact_sheets.possibly_remove_fact_sheet_sections(fact_sheets.fact_sheet_html_replace_placeholders(fact_sheet_html, domain_mt), v_properties, v_term);
    }

    public static final SubLObject emit_fact_sheet_opencyc_uri_alt(SubLObject v_term, SubLObject show_uri, SubLObject info_link_url) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject uri = NIL;
		SubLObject term_phrase = pph_main.generate_phrase(v_term, $list_alt356, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		SubLObject title = cconcatenate($str_alt357$A_Semantic_Web_URI_is_a_stable_na, new SubLObject[] { format_nil.format_nil_a_no_copy(term_phrase), $str_alt358$__and_you_should_use_it_in_web_pa });
		SubLObject date = (NIL != bookkeeping_store.creation_date_cycl(v_term)) ? ((SubLObject) (pph_main.generate_phrase(bookkeeping_store.creation_date_cycl(v_term), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED))) : NIL;
		{
		    SubLObject _prev_bind_0 = owlification.$owl_use_pretty_stringsP$.currentBinding(thread);
		    SubLObject _prev_bind_1 = owlification.$owl_use_external_ids_for_namesP$.currentBinding(thread);
		    SubLObject _prev_bind_2 = owl_uris_and_prefixes.$owl_export_version_date$.currentBinding(thread);
		    SubLObject _prev_bind_3 = owlification.$owl_use_entity_referencesP$.currentBinding(thread);
		    SubLObject _prev_bind_4 = owl_uris_and_prefixes.$owl_export_limited_to_opencyc_contentP$.currentBinding(thread);
		    SubLObject _prev_bind_5 = owl_uris_and_prefixes.$owl_export_include_sameas_links_to_cyc_urisP$.currentBinding(thread);
		    SubLObject _prev_bind_6 = owlification.$owl_export_from_opencyc_kbP$.currentBinding(thread);
		    try {
			owlification.$owl_use_pretty_stringsP$.bind(T, thread);
			owlification.$owl_use_external_ids_for_namesP$.bind(T, thread);
			owl_uris_and_prefixes.$owl_export_version_date$.bind(NIL, thread);
			owlification.$owl_use_entity_referencesP$.bind(NIL, thread);
			owl_uris_and_prefixes.$owl_export_limited_to_opencyc_contentP$.bind(T, thread);
			owl_uris_and_prefixes.$owl_export_include_sameas_links_to_cyc_urisP$.bind(T, thread);
			owlification.$owl_export_from_opencyc_kbP$.bind(T, thread);
			uri = owl_cycl_to_xml.owl_opencyc_uri_for_fort(v_term, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		    } finally {
			owlification.$owl_export_from_opencyc_kbP$.rebind(_prev_bind_6, thread);
			owl_uris_and_prefixes.$owl_export_include_sameas_links_to_cyc_urisP$.rebind(_prev_bind_5, thread);
			owl_uris_and_prefixes.$owl_export_limited_to_opencyc_contentP$.rebind(_prev_bind_4, thread);
			owlification.$owl_use_entity_referencesP$.rebind(_prev_bind_3, thread);
			owl_uris_and_prefixes.$owl_export_version_date$.rebind(_prev_bind_2, thread);
			owlification.$owl_use_external_ids_for_namesP$.rebind(_prev_bind_1, thread);
			owlification.$owl_use_pretty_stringsP$.rebind(_prev_bind_0, thread);
		    }
		}
		html_markup(html_macros.$html_div_head$.getGlobalValue());
		if (NIL != $fact_sheet_category_title$.getGlobalValue()) {
		    html_markup(html_macros.$html_attribute_class$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup($fact_sheet_category_title$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		}
		html_char(CHAR_greater, UNPROVIDED);
		{
		    SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			html_markup(html_macros.$html_span_head$.getGlobalValue());
			html_char(CHAR_greater, UNPROVIDED);
			{
			    SubLObject _prev_bind_0_56 = html_macros.$html_safe_print$.currentBinding(thread);
			    try {
				html_macros.$html_safe_print$.bind(T, thread);
				format(html_macros.$html_stream$.getDynamicValue(thread), $$$Technical_Details);
			    } finally {
				html_macros.$html_safe_print$.rebind(_prev_bind_0_56, thread);
			    }
			}
			html_markup(html_macros.$html_span_tail$.getGlobalValue());
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
		    }
		}
		html_markup(html_macros.$html_div_tail$.getGlobalValue());
		html_markup(html_macros.$html_div_head$.getGlobalValue());
		html_char(CHAR_greater, UNPROVIDED);
		{
		    SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			if (NIL != info_link_url) {
			    html_princ($str_alt360$This_page_was_automatically_creat);
			    html_markup(html_macros.$html_anchor_head$.getGlobalValue());
			    html_markup(html_macros.$html_anchor_href$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup(info_link_url);
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_char(CHAR_greater, UNPROVIDED);
			    {
				SubLObject _prev_bind_0_57 = html_macros.$html_safe_print$.currentBinding(thread);
				try {
				    html_macros.$html_safe_print$.bind(T, thread);
				    html_markup(html_macros.$html_span_head$.getGlobalValue());
				    html_char(CHAR_greater, UNPROVIDED);
				    {
					SubLObject _prev_bind_0_58 = html_macros.$html_safe_print$.currentBinding(thread);
					try {
					    html_macros.$html_safe_print$.bind(T, thread);
					    html_princ($str_alt361$automated_reasoning_and_natural_l);
					} finally {
					    html_macros.$html_safe_print$.rebind(_prev_bind_0_58, thread);
					}
				    }
				    html_markup(html_macros.$html_span_tail$.getGlobalValue());
				} finally {
				    html_macros.$html_safe_print$.rebind(_prev_bind_0_57, thread);
				}
			    }
			    html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
			    html_princ($str_alt362$__);
			}
			if (NIL != date) {
			    format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt363$Cyc_first_learned_about__A_on__A_, term_phrase, date);
			}
			if (NIL != show_uri) {
			    html_markup(html_macros.$html_span_head$.getGlobalValue());
			    html_char(CHAR_greater, UNPROVIDED);
			    {
				SubLObject _prev_bind_0_59 = html_macros.$html_safe_print$.currentBinding(thread);
				try {
				    html_macros.$html_safe_print$.bind(T, thread);
				    format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt364$The_);
				    html_markup(html_macros.$html_anchor_head$.getGlobalValue());
				    html_markup(html_macros.$html_anchor_href$.getGlobalValue());
				    html_char(CHAR_quotation, UNPROVIDED);
				    html_markup($str_alt365$http___sw_opencyc_org_docs_swuri_);
				    html_char(CHAR_quotation, UNPROVIDED);
				    if (NIL != title) {
					html_markup(html_macros.$html_anchor_title$.getGlobalValue());
					html_char(CHAR_quotation, UNPROVIDED);
					html_markup(title);
					html_char(CHAR_quotation, UNPROVIDED);
				    }
				    html_char(CHAR_greater, UNPROVIDED);
				    {
					SubLObject _prev_bind_0_60 = html_macros.$html_safe_print$.currentBinding(thread);
					try {
					    html_macros.$html_safe_print$.bind(T, thread);
					    format(html_macros.$html_stream$.getDynamicValue(thread), $$$Semantic_Web_URI);
					} finally {
					    html_macros.$html_safe_print$.rebind(_prev_bind_0_60, thread);
					}
				    }
				    html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
				    format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt367$_for__A_is__, term_phrase);
				    html_markup(html_macros.$html_anchor_head$.getGlobalValue());
				    html_markup(html_macros.$html_anchor_href$.getGlobalValue());
				    html_char(CHAR_quotation, UNPROVIDED);
				    html_markup(uri);
				    html_char(CHAR_quotation, UNPROVIDED);
				    html_char(CHAR_greater, UNPROVIDED);
				    {
					SubLObject _prev_bind_0_61 = html_macros.$html_safe_print$.currentBinding(thread);
					try {
					    html_macros.$html_safe_print$.bind(T, thread);
					    html_princ(uri);
					} finally {
					    html_macros.$html_safe_print$.rebind(_prev_bind_0_61, thread);
					}
				    }
				    html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
				} finally {
				    html_macros.$html_safe_print$.rebind(_prev_bind_0_59, thread);
				}
			    }
			    html_markup(html_macros.$html_span_tail$.getGlobalValue());
			}
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
		    }
		}
		html_markup(html_macros.$html_div_tail$.getGlobalValue());
	    }
	    return NIL;
	}
    }

    public static SubLObject emit_fact_sheet_opencyc_uri(final SubLObject v_term, final SubLObject show_uri, final SubLObject info_link_url) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject uri = NIL;
	final SubLObject term_phrase = pph_main.generate_phrase(v_term, fact_sheets.$list207, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	final SubLObject title = cconcatenate(fact_sheets.$str208$A_Semantic_Web_URI_is_a_stable_na, new SubLObject[] { format_nil.format_nil_a_no_copy(term_phrase), fact_sheets.$str209$__and_you_should_use_it_in_web_pa });
	final SubLObject date = (NIL != bookkeeping_store.creation_date_cycl(v_term)) ? pph_main.generate_phrase(bookkeeping_store.creation_date_cycl(v_term), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED) : NIL;
	SubLObject _prev_bind_0 = $owl_use_pretty_stringsP$.currentBinding(thread);
	final SubLObject _prev_bind_2 = $owl_use_external_ids_for_namesP$.currentBinding(thread);
	final SubLObject _prev_bind_3 = $owl_export_version_date$.currentBinding(thread);
	final SubLObject _prev_bind_4 = $owl_use_entity_referencesP$.currentBinding(thread);
	final SubLObject _prev_bind_5 = $owl_export_limited_to_opencyc_contentP$.currentBinding(thread);
	final SubLObject _prev_bind_6 = $owl_export_include_sameas_links_to_cyc_urisP$.currentBinding(thread);
	final SubLObject _prev_bind_7 = $owl_export_from_opencyc_kbP$.currentBinding(thread);
	try {
	    $owl_use_pretty_stringsP$.bind(T, thread);
	    $owl_use_external_ids_for_namesP$.bind(T, thread);
	    $owl_export_version_date$.bind(NIL, thread);
	    $owl_use_entity_referencesP$.bind(NIL, thread);
	    $owl_export_limited_to_opencyc_contentP$.bind(T, thread);
	    $owl_export_include_sameas_links_to_cyc_urisP$.bind(T, thread);
	    $owl_export_from_opencyc_kbP$.bind(T, thread);
	    uri = owl_opencyc_uri_for_fort(v_term, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	} finally {
	    $owl_export_from_opencyc_kbP$.rebind(_prev_bind_7, thread);
	    $owl_export_include_sameas_links_to_cyc_urisP$.rebind(_prev_bind_6, thread);
	    $owl_export_limited_to_opencyc_contentP$.rebind(_prev_bind_5, thread);
	    $owl_use_entity_referencesP$.rebind(_prev_bind_4, thread);
	    $owl_export_version_date$.rebind(_prev_bind_3, thread);
	    $owl_use_external_ids_for_namesP$.rebind(_prev_bind_2, thread);
	    $owl_use_pretty_stringsP$.rebind(_prev_bind_0, thread);
	}
	html_markup(html_macros.$html_div_head$.getGlobalValue());
	if (NIL != fact_sheets.$fact_sheet_category_title$.getGlobalValue()) {
	    html_markup(html_macros.$html_attribute_class$.getGlobalValue());
	    html_char(CHAR_quotation, UNPROVIDED);
	    html_markup(fact_sheets.$fact_sheet_category_title$.getGlobalValue());
	    html_char(CHAR_quotation, UNPROVIDED);
	}
	html_char(CHAR_greater, UNPROVIDED);
	_prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
	try {
	    html_macros.$html_safe_print$.bind(T, thread);
	    html_markup(html_macros.$html_span_head$.getGlobalValue());
	    html_char(CHAR_greater, UNPROVIDED);
	    final SubLObject _prev_bind_0_$45 = html_macros.$html_safe_print$.currentBinding(thread);
	    try {
		html_macros.$html_safe_print$.bind(T, thread);
		format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$$$Technical_Details);
	    } finally {
		html_macros.$html_safe_print$.rebind(_prev_bind_0_$45, thread);
	    }
	    html_markup(html_macros.$html_span_tail$.getGlobalValue());
	} finally {
	    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
	}
	html_markup(html_macros.$html_div_tail$.getGlobalValue());
	html_markup(html_macros.$html_div_head$.getGlobalValue());
	html_char(CHAR_greater, UNPROVIDED);
	_prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
	try {
	    html_macros.$html_safe_print$.bind(T, thread);
	    if (NIL != info_link_url) {
		html_princ(fact_sheets.$str211$This_page_was_automatically_creat);
		html_markup(html_macros.$html_anchor_head$.getGlobalValue());
		html_markup(html_macros.$html_anchor_href$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(info_link_url);
		html_char(CHAR_quotation, UNPROVIDED);
		html_char(CHAR_greater, UNPROVIDED);
		final SubLObject _prev_bind_0_$46 = html_macros.$html_safe_print$.currentBinding(thread);
		try {
		    html_macros.$html_safe_print$.bind(T, thread);
		    html_markup(html_macros.$html_span_head$.getGlobalValue());
		    html_char(CHAR_greater, UNPROVIDED);
		    final SubLObject _prev_bind_0_$47 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			html_princ(fact_sheets.$str212$automated_reasoning_and_natural_l);
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_0_$47, thread);
		    }
		    html_markup(html_macros.$html_span_tail$.getGlobalValue());
		} finally {
		    html_macros.$html_safe_print$.rebind(_prev_bind_0_$46, thread);
		}
		html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
		html_princ(fact_sheets.$str213$__);
	    }
	    if (NIL != date) {
		format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$str214$Cyc_first_learned_about__A_on__A_, term_phrase, date);
	    }
	    if (NIL != show_uri) {
		html_markup(html_macros.$html_span_head$.getGlobalValue());
		html_char(CHAR_greater, UNPROVIDED);
		final SubLObject _prev_bind_0_$48 = html_macros.$html_safe_print$.currentBinding(thread);
		try {
		    html_macros.$html_safe_print$.bind(T, thread);
		    format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$$$The_);
		    html_markup(html_macros.$html_anchor_head$.getGlobalValue());
		    html_markup(html_macros.$html_anchor_href$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup(fact_sheets.$str216$http___sw_opencyc_org_docs_swuri_);
		    html_char(CHAR_quotation, UNPROVIDED);
		    if (NIL != title) {
			html_markup(html_macros.$html_anchor_title$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(title);
			html_char(CHAR_quotation, UNPROVIDED);
		    }
		    html_char(CHAR_greater, UNPROVIDED);
		    final SubLObject _prev_bind_0_$49 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$$$Semantic_Web_URI);
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_0_$49, thread);
		    }
		    html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
		    format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$str218$_for__A_is__, term_phrase);
		    html_markup(html_macros.$html_anchor_head$.getGlobalValue());
		    html_markup(html_macros.$html_anchor_href$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup(uri);
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_char(CHAR_greater, UNPROVIDED);
		    final SubLObject _prev_bind_0_$50 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			html_princ(uri);
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_0_$50, thread);
		    }
		    html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
		} finally {
		    html_macros.$html_safe_print$.rebind(_prev_bind_0_$48, thread);
		}
		html_markup(html_macros.$html_span_tail$.getGlobalValue());
	    }
	} finally {
	    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
	}
	html_markup(html_macros.$html_div_tail$.getGlobalValue());
	return NIL;
    }

    /**
     *
     *
     * @return (STRINGP PROPERTY-LIST-P FOCAL-TERM);
    html document describing pertinent facts about the term with TERM-ID from DOMAIN-MT,
    plus property list with formatting guidelines for renderer.
     * @param PROPERTIES
     * 		- property-list-p; see @xref GET-FACT-SHEET-FOR-TERM-IN-MARKUP-LANGUAGE for list of properties
     */
    @LispMethod(comment = "@return (STRINGP PROPERTY-LIST-P FOCAL-TERM);\r\nhtml document describing pertinent facts about the term with TERM-ID from DOMAIN-MT,\r\nplus property list with formatting guidelines for renderer.\r\n@param PROPERTIES\r\n\t\t- property-list-p; see @xref GET-FACT-SHEET-FOR-TERM-IN-MARKUP-LANGUAGE for list of properties")
    public static final SubLObject get_fact_sheet_for_term_id_in_html_alt(SubLObject term_id, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	{
	    SubLObject v_term = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_id(term_id, UNPROVIDED);
	    SubLObject fact_sheet_domain_mt = (NIL != hlmt.possibly_hlmt_p(domain_mt)) ? ((SubLObject) (hlmt.hlmt_monad_mt(domain_mt))) : com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	    SubLObject precached_fact_sheet = com.cyc.cycjava.cycl.fact_sheets.precached_fact_sheet_for_term_id_in_html(term_id, verbosity, fact_sheet_domain_mt, language_mt, v_properties, UNPROVIDED);
	    if (NIL != precached_fact_sheet) {
		return list_utilities.add_to_end(v_term, precached_fact_sheet);
	    }
	    {
		SubLObject result_list = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_for_term_in_html(v_term, verbosity, fact_sheet_domain_mt, language_mt, v_properties);
		return list_utilities.add_to_end(v_term, result_list);
	    }
	}
    }

    /**
     *
     *
     * @return (STRINGP PROPERTY-LIST-P FOCAL-TERM);
    html document describing pertinent facts about the term with TERM-ID from DOMAIN-MT,
    plus property list with formatting guidelines for renderer.
     * @param PROPERTIES
     * 		- property-list-p; see @xref GET-FACT-SHEET-FOR-TERM-IN-MARKUP-LANGUAGE for list of properties
     */
    @LispMethod(comment = "@return (STRINGP PROPERTY-LIST-P FOCAL-TERM);\r\nhtml document describing pertinent facts about the term with TERM-ID from DOMAIN-MT,\r\nplus property list with formatting guidelines for renderer.\r\n@param PROPERTIES\r\n\t\t- property-list-p; see @xref GET-FACT-SHEET-FOR-TERM-IN-MARKUP-LANGUAGE for list of properties")
    public static SubLObject get_fact_sheet_for_term_id_in_html(final SubLObject term_id, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	final SubLObject v_term = fact_sheets.fact_sheet_term_from_id(term_id, UNPROVIDED);
	final SubLObject fact_sheet_domain_mt = (NIL != hlmt.possibly_hlmt_p(domain_mt)) ? hlmt.hlmt_monad_mt(domain_mt) : fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	final SubLObject precached_fact_sheet = fact_sheets.precached_fact_sheet_for_term_id_in_html(term_id, verbosity, fact_sheet_domain_mt, language_mt, v_properties, UNPROVIDED);
	if (NIL != precached_fact_sheet) {
	    return list_utilities.add_to_end(v_term, precached_fact_sheet);
	}
	final SubLObject result_list = fact_sheets.get_fact_sheet_for_term_in_html(v_term, verbosity, fact_sheet_domain_mt, language_mt, v_properties);
	return list_utilities.add_to_end(v_term, result_list);
    }

    public static final SubLObject clear_all_fact_sheet_caches_alt() {
	com.cyc.cycjava.cycl.fact_sheets.clear_fact_sheet_sentence_group_summary();
	com.cyc.cycjava.cycl.fact_sheets.clear_fact_sheet_sentences_for_term_internal();
	com.cyc.cycjava.cycl.fact_sheets.clear_fact_sheet_image_url_root();
	com.cyc.cycjava.cycl.fact_sheets.clear_get_mini_fact_sheet_for_term_cached();
	com.cyc.cycjava.cycl.fact_sheets.clear_fact_sheet_sentence_trivially_impliesP();
	com.cyc.cycjava.cycl.fact_sheets.clear_fact_sheet_transitivity_check();
	com.cyc.cycjava.cycl.fact_sheets.clear_fact_sheet_label_for_category();
	lexicon_utilities.clear_cached_lexifications_for_term();
	return $CLEARED;
    }

    public static SubLObject clear_all_fact_sheet_caches() {
	fact_sheets.clear_fact_sheet_sentence_group_summary();
	fact_sheets.clear_fact_sheet_sentences_for_term_internal();
	fact_sheets.clear_fact_sheet_image_url_root();
	fact_sheets.clear_get_mini_fact_sheet_for_term_cached();
	fact_sheets.clear_fact_sheet_sentence_trivially_impliesP();
	fact_sheets.clear_fact_sheet_transitivity_check();
	fact_sheets.clear_fact_sheet_label_for_category();
	lexicon_utilities.clear_cached_lexifications_for_term();
	return $CLEARED;
    }

    /**
     * Assuming that STRING starts/ends with one of the prefix/suffix pairs in *fact-sheet-request-patterns*, this returns the denotations
     * of the substring that remains once we strip off the prefix and suffix, consed to that substring.
     */
    @LispMethod(comment = "Assuming that STRING starts/ends with one of the prefix/suffix pairs in *fact-sheet-request-patterns*, this returns the denotations\r\nof the substring that remains once we strip off the prefix and suffix, consed to that substring.\nAssuming that STRING starts/ends with one of the prefix/suffix pairs in *fact-sheet-request-patterns*, this returns the denotations\nof the substring that remains once we strip off the prefix and suffix, consed to that substring.")
    public static final SubLObject fact_sheet_request_denots_alt(SubLObject string) {
	string = string_utilities.trim_whitespace(string);
	string = string_utilities.strip_punctuation(string);
	string = string_utilities.trim_whitespace(string);
	{
	    SubLObject mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_anytime_mt($list_alt381);
	    SubLObject stripped_string = NIL;
	    SubLObject denots = NIL;
	    SubLObject rest = NIL;
	    for (rest = $fact_sheet_request_patterns$.getGlobalValue(); !((NIL != denots) || (NIL == rest)); rest = rest.rest()) {
		{
		    SubLObject pattern = rest.first();
		    stripped_string = string;
		    {
			SubLObject datum = pattern;
			SubLObject current = datum;
			SubLObject pattern_start = NIL;
			SubLObject pattern_end = NIL;
			destructuring_bind_must_consp(current, datum, $list_alt382);
			pattern_start = current.first();
			current = current.rest();
			pattern_end = current;
			if ((NIL != string_utilities.starts_with_by_test(string, pattern_start, symbol_function(EQUALP))) && (NIL != string_utilities.ends_with(string, pattern_end, symbol_function(EQUALP)))) {
			    stripped_string = string_utilities.strip_first_n(stripped_string, length(pattern_start));
			    stripped_string = string_utilities.strip_final_n(stripped_string, length(pattern_end));
			    stripped_string = string_utilities.trim_whitespace(stripped_string);
			    denots = lexicon_accessors.denots_of_string(stripped_string, $list_alt383, $DENOT, T, NIL, mt, $NEVER, UNPROVIDED, UNPROVIDED);
			}
		    }
		}
	    }
	    return cons(denots, stripped_string);
	}
    }

    @LispMethod(comment = "Assuming that STRING starts/ends with one of the prefix/suffix pairs in *fact-sheet-request-patterns*, this returns the denotations\r\nof the substring that remains once we strip off the prefix and suffix, consed to that substring.\nAssuming that STRING starts/ends with one of the prefix/suffix pairs in *fact-sheet-request-patterns*, this returns the denotations\nof the substring that remains once we strip off the prefix and suffix, consed to that substring.")
    public static SubLObject fact_sheet_request_denots(SubLObject string) {
	string = string_utilities.trim_whitespace(string);
	string = string_utilities.strip_punctuation(string);
	string = string_utilities.trim_whitespace(string);
	final SubLObject mt = fact_sheets.fact_sheet_anytime_mt(fact_sheets.$list232);
	SubLObject stripped_string = NIL;
	SubLObject denots;
	SubLObject rest;
	SubLObject pattern;
	SubLObject current;
	SubLObject datum;
	SubLObject pattern_start;
	SubLObject pattern_end;
	for (denots = NIL, rest = NIL, rest = fact_sheets.$fact_sheet_request_patterns$.getGlobalValue(); (NIL == denots) && (NIL != rest); rest = rest.rest()) {
	    pattern = rest.first();
	    stripped_string = string;
	    datum = current = pattern;
	    pattern_start = NIL;
	    pattern_end = NIL;
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list233);
	    pattern_start = current.first();
	    current = pattern_end = current.rest();
	    if ((NIL != string_utilities.starts_with_by_test(string, pattern_start, symbol_function(EQUALP))) && (NIL != string_utilities.ends_with(string, pattern_end, symbol_function(EQUALP)))) {
		stripped_string = string_utilities.strip_first_n(stripped_string, length(pattern_start));
		stripped_string = string_utilities.strip_final_n(stripped_string, length(pattern_end));
		stripped_string = string_utilities.trim_whitespace(stripped_string);
		denots = lexicon_accessors.denots_of_string(stripped_string, fact_sheets.$list234, $DENOT, T, NIL, mt, $NEVER, UNPROVIDED, UNPROVIDED);
	    }
	}
	return cons(denots, stripped_string);
    }

    /**
    * Assuming that STRING starts/ends with one of the prefix/suffix pairs in *fact-sheet-request-patterns*, this returns the denotations
    * of the substring that remains once we strip off the prefix and suffix, consed to that substring.
    */

    /**
     * Find all terms mentioned in STRING for which we can provide fact sheets.
     */
    @LispMethod(comment = "Find all terms mentioned in STRING for which we can provide fact sheets.")
    public static final SubLObject get_possible_fact_sheet_terms_mentioned_in_string_alt(SubLObject string, SubLObject domain_mt, SubLObject filter_fn) {
	if (filter_fn == UNPROVIDED) {
	    filter_fn = symbol_function(TERM_OK_FOR_CAE_QUERY_SEARCH_TERM_BOX_P);
	}
	{
	    SubLObject datum = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_request_denots(string);
	    SubLObject current = datum;
	    SubLObject stripped_string_denots = NIL;
	    SubLObject stripped_string = NIL;
	    destructuring_bind_must_consp(current, datum, $list_alt388);
	    stripped_string_denots = current.first();
	    current = current.rest();
	    stripped_string = current;
	    {
		SubLObject substring_renderings_alist = NIL;
		SubLObject single_termP = list_utilities.non_empty_list_p(stripped_string_denots);
		SubLObject word_by_word_results = (NIL != single_termP) ? ((SubLObject) (list(list(stripped_string, stripped_string_denots)))) : com.cyc.cycjava.cycl.fact_sheets.get_word_denots_for_fact_sheets(string);
		SubLObject cdolist_list_var = word_by_word_results;
		SubLObject phrase_result = NIL;
		for (phrase_result = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), phrase_result = cdolist_list_var.first()) {
		    {
			SubLObject datum_62 = phrase_result;
			SubLObject current_63 = datum_62;
			SubLObject phrase_string = NIL;
			SubLObject denots = NIL;
			destructuring_bind_must_consp(current_63, datum_62, $list_alt389);
			phrase_string = current_63.first();
			current_63 = current_63.rest();
			destructuring_bind_must_consp(current_63, datum_62, $list_alt389);
			denots = current_63.first();
			current_63 = current_63.rest();
			if (NIL == current_63) {
			    {
				SubLObject terms = list_utilities.delete_if_not(filter_fn, denots, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
				SubLObject renderings = api_widgets.convert_term_list_to_renderings_for_java(terms, domain_mt, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
				if (NIL != list_utilities.non_empty_list_p(renderings)) {
				    substring_renderings_alist = cons(cons(phrase_string, renderings), substring_renderings_alist);
				}
			    }
			} else {
			    cdestructuring_bind_error(datum_62, $list_alt389);
			}
		    }
		}
		return cons(substring_renderings_alist, misc_utilities.boolean_to_keyword(single_termP));
	    }
	}
    }

    @LispMethod(comment = "Find all terms mentioned in STRING for which we can provide fact sheets.")
    public static SubLObject get_possible_fact_sheet_terms_mentioned_in_string(final SubLObject string, final SubLObject domain_mt, SubLObject filter_fn) {
	if (filter_fn == UNPROVIDED) {
	    filter_fn = symbol_function(fact_sheets.TERM_OK_FOR_CAE_QUERY_SEARCH_TERM_BOX_P);
	}
	SubLObject current;
	final SubLObject datum = current = fact_sheets.fact_sheet_request_denots(string);
	SubLObject stripped_string_denots = NIL;
	SubLObject stripped_string = NIL;
	destructuring_bind_must_consp(current, datum, fact_sheets.$list239);
	stripped_string_denots = current.first();
	current = stripped_string = current.rest();
	SubLObject substring_renderings_alist = NIL;
	final SubLObject single_termP = list_utilities.non_empty_list_p(stripped_string_denots);
	SubLObject cdolist_list_var;
	final SubLObject word_by_word_results = cdolist_list_var = (NIL != single_termP) ? list(list(stripped_string, stripped_string_denots)) : fact_sheets.get_word_denots_for_fact_sheets(string);
	SubLObject phrase_result = NIL;
	phrase_result = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    SubLObject current_$52;
	    final SubLObject datum_$51 = current_$52 = phrase_result;
	    SubLObject phrase_string = NIL;
	    SubLObject denots = NIL;
	    destructuring_bind_must_consp(current_$52, datum_$51, fact_sheets.$list240);
	    phrase_string = current_$52.first();
	    current_$52 = current_$52.rest();
	    destructuring_bind_must_consp(current_$52, datum_$51, fact_sheets.$list240);
	    denots = current_$52.first();
	    current_$52 = current_$52.rest();
	    if (NIL == current_$52) {
		final SubLObject terms = list_utilities.delete_if_not(filter_fn, denots, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		final SubLObject renderings = api_widgets.convert_term_list_to_renderings_for_java(terms, domain_mt, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		if (NIL != list_utilities.non_empty_list_p(renderings)) {
		    substring_renderings_alist = cons(cons(phrase_string, renderings), substring_renderings_alist);
		}
	    } else {
		cdestructuring_bind_error(datum_$51, fact_sheets.$list240);
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    phrase_result = cdolist_list_var.first();
	}
	return cons(substring_renderings_alist, misc_utilities.boolean_to_keyword(single_termP));
    }

    /**
    * Find all terms mentioned in STRING for which we can provide fact sheets.
    */

    public static final SubLObject get_word_denots_for_fact_sheets_alt(SubLObject string) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject lexicon = term_lexicon.new_term_lexicon();
		methods.funcall_instance_method_with_1_args(lexicon, ADD_LEARNER, SCALAR_INTERVAL_LEARN);
		{
		    SubLObject sentence_iterator = concept_tagger.tag_concepts(document.new_document(string, RKF_STANDARD_STRING_WORDIFY), list($LEXICON, lexicon, $OUTPUT_SPEC, nl_api_datastructures.new_nl_interpretation_spec($list_alt395)));
		    SubLObject result_word_cycls_pairs = NIL;
		    SubLObject done_var = NIL;
		    while (NIL == done_var) {
			thread.resetMultipleValues();
			{
			    SubLObject sentence_result = iteration.iteration_next(sentence_iterator);
			    SubLObject valid = thread.secondMultipleValue();
			    thread.resetMultipleValues();
			    if (NIL != valid) {
				{
				    SubLObject vector_var = document.sentence_yield(sentence_result);
				    SubLObject backwardP_var = NIL;
				    SubLObject length = length(vector_var);
				    SubLObject v_iteration = NIL;
				    for (v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
					{
					    SubLObject element_num = (NIL != backwardP_var) ? ((SubLObject) (subtract(length, v_iteration, ONE_INTEGER))) : v_iteration;
					    SubLObject word = aref(vector_var, element_num);
					    SubLObject cycls = document.word_cycls(word);
					    SubLObject word_string = document.word_string(word);
					    result_word_cycls_pairs = cons(list(word_string, cycls), result_word_cycls_pairs);
					}
				    }
				}
			    }
			    done_var = makeBoolean(NIL == valid);
			}
		    }
		    return result_word_cycls_pairs;
		}
	    }
	}
    }

    public static SubLObject get_word_denots_for_fact_sheets(final SubLObject string) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject lexicon = term_lexicon.new_term_lexicon();
	methods.funcall_instance_method_with_1_args(lexicon, ADD_LEARNER, fact_sheets.SCALAR_INTERVAL_LEARN);
	final SubLObject sentence_iterator = concept_tagger.tag_concepts(document.new_document(string, NIL, fact_sheets.RKF_STANDARD_STRING_WORDIFY), list($LEXICON, lexicon, $OUTPUT_SPEC, nl_api_datastructures.new_nl_interpretation_spec(fact_sheets.$list246)));
	SubLObject result_word_cycls_pairs = NIL;
	SubLObject valid;
	for (SubLObject done_var = NIL; NIL == done_var; done_var = makeBoolean(NIL == valid)) {
	    thread.resetMultipleValues();
	    final SubLObject sentence_result = iteration.iteration_next(sentence_iterator);
	    valid = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    if (NIL != valid) {
		SubLObject cdolist_list_var = document.sentence_yield_exhaustive(sentence_result);
		SubLObject word = NIL;
		word = cdolist_list_var.first();
		while (NIL != cdolist_list_var) {
		    final SubLObject cycls = document.word_cycls(word);
		    final SubLObject word_string = document.word_string(word);
		    result_word_cycls_pairs = cons(list(word_string, cycls), result_word_cycls_pairs);
		    cdolist_list_var = cdolist_list_var.rest();
		    word = cdolist_list_var.first();
		}
	    }
	}
	return result_word_cycls_pairs;
    }

    public static final SubLObject term_ok_for_cae_query_search_term_box_p_alt(SubLObject v_term) {
	return makeBoolean((v_term.isNumber() || (NIL != com.cyc.cycjava.cycl.fact_sheets.term_ok_for_fact_sheet_p(v_term, UNPROVIDED))) || (NIL != com.cyc.cycjava.cycl.fact_sheets.scalar_interval_p(v_term, UNPROVIDED)));
    }

    public static SubLObject term_ok_for_cae_query_search_term_box_p(final SubLObject v_term) {
	return makeBoolean((v_term.isNumber() || (NIL != fact_sheets.term_ok_for_fact_sheet_p(v_term, UNPROVIDED))) || (NIL != fact_sheets.scalar_interval_p(v_term, UNPROVIDED)));
    }

    public static final SubLObject clear_scalar_interval_p_alt() {
	{
	    SubLObject cs = $scalar_interval_p_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_scalar_interval_p() {
	final SubLObject cs = fact_sheets.$scalar_interval_p_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_scalar_interval_p_alt(SubLObject v_term, SubLObject mt) {
	if (mt == UNPROVIDED) {
	    mt = mt_relevance_macros.$mt$.getDynamicValue();
	}
	return memoization_state.caching_state_remove_function_results_with_args($scalar_interval_p_caching_state$.getGlobalValue(), list(v_term, mt), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_scalar_interval_p(final SubLObject v_term, SubLObject mt) {
	if (mt == UNPROVIDED) {
	    mt = mt_relevance_macros.$mt$.getDynamicValue();
	}
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$scalar_interval_p_caching_state$.getGlobalValue(), list(v_term, mt), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject scalar_interval_p_internal_alt(SubLObject v_term, SubLObject mt) {
	return isa.isaP(v_term, $$ScalarInterval, mt, UNPROVIDED);
    }

    public static SubLObject scalar_interval_p_internal(final SubLObject v_term, final SubLObject mt) {
	return isa.isaP(v_term, fact_sheets.$$ScalarInterval, mt, UNPROVIDED);
    }

    public static final SubLObject scalar_interval_p_alt(SubLObject v_term, SubLObject mt) {
	if (mt == UNPROVIDED) {
	    mt = mt_relevance_macros.$mt$.getDynamicValue();
	}
	{
	    SubLObject caching_state = $scalar_interval_p_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(SCALAR_INTERVAL_P, $scalar_interval_p_caching_state$, $int$4096, EQUAL, TWO_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject sxhash = memoization_state.sxhash_calc_2(v_term, mt);
		SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
		if (collisions != $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    {
			SubLObject cdolist_list_var = collisions;
			SubLObject collision = NIL;
			for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), collision = cdolist_list_var.first()) {
			    {
				SubLObject cached_args = collision.first();
				SubLObject results2 = second(collision);
				if (v_term.equal(cached_args.first())) {
				    cached_args = cached_args.rest();
				    if (((NIL != cached_args) && (NIL == cached_args.rest())) && mt.equal(cached_args.first())) {
					return memoization_state.caching_results(results2);
				    }
				}
			    }
			}
		    }
		}
		{
		    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.scalar_interval_p_internal(v_term, mt)));
		    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(v_term, mt));
		    return memoization_state.caching_results(results);
		}
	    }
	}
    }

    public static SubLObject scalar_interval_p(final SubLObject v_term, SubLObject mt) {
	if (mt == UNPROVIDED) {
	    mt = mt_relevance_macros.$mt$.getDynamicValue();
	}
	SubLObject caching_state = fact_sheets.$scalar_interval_p_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.SCALAR_INTERVAL_P, fact_sheets.$scalar_interval_p_caching_state$, $int$4096, EQUAL, TWO_INTEGER, ZERO_INTEGER);
	}
	final SubLObject sxhash = memoization_state.sxhash_calc_2(v_term, mt);
	final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
	if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    SubLObject cdolist_list_var = collisions;
	    SubLObject collision = NIL;
	    collision = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cached_args = collision.first();
		final SubLObject results2 = second(collision);
		if (v_term.equal(cached_args.first())) {
		    cached_args = cached_args.rest();
		    if (((NIL != cached_args) && (NIL == cached_args.rest())) && mt.equal(cached_args.first())) {
			return memoization_state.caching_results(results2);
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		collision = cdolist_list_var.first();
	    }
	}
	final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.scalar_interval_p_internal(v_term, mt)));
	memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(v_term, mt));
	return memoization_state.caching_results(results3);
    }

    public static final SubLObject term_ok_for_fact_sheet_p_alt(SubLObject v_term, SubLObject miniP) {
	if (miniP == UNPROVIDED) {
	    miniP = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    return makeBoolean(v_term.equal($fact_sheet_focal_term$.getDynamicValue(thread))
		    || ((((((NIL != cycl_grammar.cycl_denotational_term_p(v_term)) && (NIL != cycl_utilities.expression_find_if(FORT_P, v_term, T, UNPROVIDED))) && (NIL == relation_p(v_term))) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(v_term, NIL)))
			    && ((NIL == forts.fort_p(v_term)) || ((NIL != thcl_fortP(v_term, UNPROVIDED)) && (NIL != lexification_utilities.lexifiedP(v_term, NIL)))))
			    && ((NIL == miniP) || (NIL != isa.isa_anyP(v_term, com.cyc.cycjava.cycl.fact_sheets.mini_fact_sheet_term_types(), $$InferencePSC, UNPROVIDED)))));
	}
    }

    public static SubLObject term_ok_for_fact_sheet_p(final SubLObject v_term, SubLObject miniP) {
	if (miniP == UNPROVIDED) {
	    miniP = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	return makeBoolean(v_term.equal(fact_sheets.$fact_sheet_focal_term$.getDynamicValue(thread))
		|| ((((((NIL != cycl_grammar.cycl_denotational_term_p(v_term)) && (NIL != cycl_utilities.expression_find_if(FORT_P, v_term, T, UNPROVIDED))) && (NIL == fort_types_interface.relation_p(v_term))) && (NIL != fact_sheets.fact_sheet_term_id(v_term, NIL)))
			&& ((NIL == forts.fort_p(v_term)) || ((NIL != thcl.thcl_fortP(v_term, UNPROVIDED)) && (NIL != lexification_utilities.lexifiedP(v_term, NIL)))))
			&& ((NIL == miniP) || (NIL != isa.isa_anyP(v_term, fact_sheets.mini_fact_sheet_term_types(), fact_sheets.$$InferencePSC, UNPROVIDED)))));
    }

    public static final SubLObject mini_fact_sheet_term_types_alt() {
	return $mini_fact_sheet_term_types$.getGlobalValue();
    }

    public static SubLObject mini_fact_sheet_term_types() {
	return fact_sheets.$mini_fact_sheet_term_types$.getGlobalValue();
    }

    public static final SubLObject fact_sheet_data_path_alt() {
	return $fact_sheet_data_path$.getGlobalValue();
    }

    public static SubLObject fact_sheet_data_path() {
	return fact_sheets.$fact_sheet_data_path$.getGlobalValue();
    }

    /**
     * Set the location of all fact sheet data, relative to the cyc home
     */
    @LispMethod(comment = "Set the location of all fact sheet data, relative to the cyc home")
    public static final SubLObject set_fact_sheet_data_path_alt(SubLObject directory_list) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject fact_sheet_directory = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_directory_from_list(directory_list);
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == Filesys.directory_p(fact_sheet_directory)) {
			Errors.error($str_alt406$_S_does_not_specify_an_existing_d, fact_sheet_directory);
		    }
		}
	    }
	    $fact_sheet_data_path$.setGlobalValue(directory_list);
	    return $fact_sheet_data_path$.getGlobalValue();
	}
    }

    @LispMethod(comment = "Set the location of all fact sheet data, relative to the cyc home")
    public static SubLObject set_fact_sheet_data_path(final SubLObject directory_list) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject fact_sheet_directory = fact_sheets.fact_sheet_directory_from_list(directory_list);
	if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == Filesys.directory_p(fact_sheet_directory))) {
	    Errors.error(fact_sheets.$str257$_S_does_not_specify_an_existing_d, fact_sheet_directory);
	}
	fact_sheets.$fact_sheet_data_path$.setGlobalValue(directory_list);
	return fact_sheets.$fact_sheet_data_path$.getGlobalValue();
    }

    /**
    * Set the location of all fact sheet data, relative to the cyc home
    */

    public static final SubLObject fact_sheet_term_id_alt(SubLObject v_term, SubLObject enable_reverse_lookupP) {
	if (enable_reverse_lookupP == UNPROVIDED) {
	    enable_reverse_lookupP = T;
	}
	{
	    SubLObject id = com.cyc.cycjava.cycl.fact_sheets.construct_fact_sheet_term_id(v_term);
	    if (NIL != enable_reverse_lookupP) {
		com.cyc.cycjava.cycl.fact_sheets.ensure_fact_sheet_term_id_indexed(v_term, id);
	    }
	    return id;
	}
    }

    public static SubLObject fact_sheet_term_id(final SubLObject v_term, SubLObject ignore_me) {
	if (ignore_me == UNPROVIDED) {
	    ignore_me = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	return fact_sheets.fact_sheet_term_id_low(v_term, fact_sheets.$use_fact_sheet_legacy_idsP$.getDynamicValue(thread));
    }

    public static SubLObject fact_sheet_term_legacy_id(final SubLObject v_term) {
	return fact_sheets.fact_sheet_term_id_low(v_term, T);
    }

    public static SubLObject clear_fact_sheet_term_id_low() {
	final SubLObject cs = fact_sheets.$fact_sheet_term_id_low_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static SubLObject remove_fact_sheet_term_id_low(final SubLObject v_term, SubLObject legacyP) {
	if (legacyP == UNPROVIDED) {
	    legacyP = NIL;
	}
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_term_id_low_caching_state$.getGlobalValue(), list(v_term, legacyP), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject fact_sheet_term_id_low_internal(final SubLObject v_term, final SubLObject legacyP) {
	final SubLObject chleid = kb_utilities.compact_hl_external_id_string(v_term);
	SubLObject id = NIL;
	SubLObject stream = NIL;
	try {
	    stream = make_private_string_output_stream();
	    final SubLObject string_var = chleid;
	    SubLObject end_var_$53;
	    SubLObject end_var;
	    SubLObject char_num;
	    SubLObject v_char;
	    for (end_var = end_var_$53 = length(string_var), char_num = NIL, char_num = ZERO_INTEGER; !char_num.numGE(end_var_$53); char_num = number_utilities.f_1X(char_num)) {
		v_char = Strings.sublisp_char(string_var, char_num);
		if (NIL != upper_case_p(v_char)) {
		    princ(NIL != legacyP ? fact_sheets.$fact_sheet_id_legacy_upper_case_escape_char$.getGlobalValue() : fact_sheets.$fact_sheet_id_upper_case_escape_char$.getGlobalValue(), stream);
		    princ(char_downcase(v_char), stream);
		} else {
		    princ(v_char, stream);
		}
	    }
	    id = get_output_stream_string(stream);
	} finally {
	    final SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
	    try {
		bind($is_thread_performing_cleanupP$, T);
		final SubLObject _values = getValuesAsVector();
		close(stream, UNPROVIDED);
		restoreValuesFromVector(_values);
	    } finally {
		rebind($is_thread_performing_cleanupP$, _prev_bind_0);
	    }
	}
	return id;
    }

    public static SubLObject fact_sheet_term_id_low(final SubLObject v_term, SubLObject legacyP) {
	if (legacyP == UNPROVIDED) {
	    legacyP = NIL;
	}
	SubLObject caching_state = fact_sheets.$fact_sheet_term_id_low_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.FACT_SHEET_TERM_ID_LOW, fact_sheets.$fact_sheet_term_id_low_caching_state$, fact_sheets.$int$1024, EQUAL, TWO_INTEGER, ZERO_INTEGER);
	}
	final SubLObject sxhash = memoization_state.sxhash_calc_2(v_term, legacyP);
	final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
	if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    SubLObject cdolist_list_var = collisions;
	    SubLObject collision = NIL;
	    collision = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cached_args = collision.first();
		final SubLObject results2 = second(collision);
		if (v_term.equal(cached_args.first())) {
		    cached_args = cached_args.rest();
		    if (((NIL != cached_args) && (NIL == cached_args.rest())) && legacyP.equal(cached_args.first())) {
			return memoization_state.caching_results(results2);
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		collision = cdolist_list_var.first();
	    }
	}
	final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_term_id_low_internal(v_term, legacyP)));
	memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(v_term, legacyP));
	return memoization_state.caching_results(results3);
    }

    public static final SubLObject possible_fact_sheet_term_id_p_alt(SubLObject v_object) {
	return makeBoolean((v_object.isString() && ONE_INTEGER.eql(count(CHAR_hyphen, v_object, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED))) && ONE_INTEGER.eql(list_utilities.count_if_not(DIGIT_CHAR_P, v_object, UNPROVIDED, UNPROVIDED, UNPROVIDED)));
    }

    public static SubLObject possible_fact_sheet_term_id_p(final SubLObject v_object) {
	if (v_object.isString() && (NIL != list_utilities.lengthG(v_object, THREE_INTEGER, UNPROVIDED))) {
	    SubLObject end_var_$54;
	    SubLObject end_var;
	    SubLObject char_num;
	    SubLObject v_char;
	    for (end_var = end_var_$54 = length(v_object), char_num = NIL, char_num = ZERO_INTEGER; !char_num.numGE(end_var_$54); char_num = number_utilities.f_1X(char_num)) {
		v_char = Strings.sublisp_char(v_object, char_num);
		if ((((NIL == string_utilities.f_64_bit_char_p(v_char)) && (!CHAR_equal.eql(v_char))) && (!fact_sheets.$fact_sheet_id_legacy_upper_case_escape_char$.getGlobalValue().eql(v_char))) && (!fact_sheets.$fact_sheet_id_upper_case_escape_char$.getGlobalValue().eql(v_char))) {
		    return NIL;
		}
	    }
	    return T;
	}
	return NIL;
    }

    public static SubLObject fact_sheet_term_idP(final SubLObject v_object) {
	return makeBoolean((NIL != fact_sheets.possible_fact_sheet_term_id_p(v_object)) && v_object.equal(fact_sheets.fact_sheet_term_id(fact_sheets.fact_sheet_term_from_id(v_object, UNPROVIDED), UNPROVIDED)));
    }

    public static final SubLObject fact_sheet_term_from_id_alt(SubLObject term_id, SubLObject not_found_value) {
	if (not_found_value == UNPROVIDED) {
	    not_found_value = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject v_term = NIL;
		SubLObject error = NIL;
		SubLTrampolineFile.checkType(term_id, POSSIBLE_FACT_SHEET_TERM_ID_P);
		if (NIL == file_backed_cache.file_backed_cache_p($fact_sheet_term_fbc$.getGlobalValue())) {
		    com.cyc.cycjava.cycl.fact_sheets.ensure_fact_sheet_term_fbc_created(NIL);
		}
		if (NIL != $catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
		    try {
			{
			    SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
			    try {
				Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
				try {
				    v_term = file_backed_cache.file_backed_cache_lookup(term_id, $fact_sheet_term_fbc$.getGlobalValue(), not_found_value, UNPROVIDED);
				} catch (Throwable catch_var) {
				    Errors.handleThrowable(catch_var, NIL);
				}
			    } finally {
				Errors.$error_handler$.rebind(_prev_bind_0, thread);
			    }
			}
		    } catch (Throwable ccatch_env_var) {
			error = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
		    }
		} else {
		    v_term = file_backed_cache.file_backed_cache_lookup(term_id, $fact_sheet_term_fbc$.getGlobalValue(), not_found_value, UNPROVIDED);
		}
		if (NIL != error) {
		    Errors.warn($str_alt418$Error_getting_fact_sheet_term_fro, term_id, error);
		    com.cyc.cycjava.cycl.fact_sheets.ensure_fact_sheet_term_fbc_created(NIL);
		    if (NIL == v_term) {
			v_term = file_backed_cache.file_backed_cache_lookup(term_id, $fact_sheet_term_fbc$.getGlobalValue(), not_found_value, UNPROVIDED);
		    }
		}
		if (!((NIL != v_term) || (NIL == string_utilities.starts_with(term_id, $str_alt419$0_)))) {
		    if (NIL == v_term) {
			{
			    SubLObject csome_list_var = list(com.cyc.cycjava.cycl.fact_sheets.build_fact_sheet_default_language_mt(), com.cyc.cycjava.cycl.fact_sheets.build_fact_sheet_default_domain_mt());
			    SubLObject mt = NIL;
			    for (mt = csome_list_var.first(); !((NIL != v_term) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), mt = csome_list_var.first()) {
				if (term_id.equal(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(mt, NIL))) {
				    com.cyc.cycjava.cycl.fact_sheets.index_fact_sheet_term_id(mt, term_id);
				    v_term = mt;
				}
			    }
			}
		    }
		}
		if (NIL == v_term) {
		    {
			SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
			if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
			    format(stream, $str_alt420$Couldn_t_identify_term_from_fact_, term_id);
			    force_output(stream);
			}
		    }
		}
		{
		    SubLObject invalid_fort = cycl_utilities.expression_find_if($sym327$INVALID_FORT_, v_term, UNPROVIDED, UNPROVIDED);
		    if (NIL != invalid_fort) {
			{
			    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
			    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
				com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
				format(stream, $str_alt421$Term__S_from_ID__S_contains_inval, new SubLObject[] { v_term, term_id, invalid_fort });
				force_output(stream);
			    }
			}
			v_term = NIL;
		    }
		}
		return v_term;
	    }
	}
    }

    public static SubLObject fact_sheet_term_from_id(final SubLObject term_id, SubLObject not_found_value) {
	if (not_found_value == UNPROVIDED) {
	    not_found_value = NIL;
	}
	assert NIL != fact_sheets.possible_fact_sheet_term_id_p(term_id) : "! fact_sheets.possible_fact_sheet_term_id_p(term_id) " + ("fact_sheets.possible_fact_sheet_term_id_p(term_id) " + "CommonSymbols.NIL != fact_sheets.possible_fact_sheet_term_id_p(term_id) ") + term_id;
	SubLObject upcase_nextP = NIL;
	SubLObject chleid = NIL;
	SubLObject v_term = NIL;
	SubLObject stream = NIL;
	try {
	    stream = make_private_string_output_stream();
	    SubLObject end_var_$55;
	    SubLObject end_var;
	    SubLObject char_num;
	    SubLObject v_char;
	    for (end_var = end_var_$55 = length(term_id), char_num = NIL, char_num = ZERO_INTEGER; !char_num.numGE(end_var_$55); char_num = number_utilities.f_1X(char_num)) {
		v_char = Strings.sublisp_char(term_id, char_num);
		if (fact_sheets.$fact_sheet_id_upper_case_escape_char$.getGlobalValue().eql(v_char) || fact_sheets.$fact_sheet_id_legacy_upper_case_escape_char$.getGlobalValue().eql(v_char)) {
		    upcase_nextP = T;
		} else if (NIL != upcase_nextP) {
		    princ(char_upcase(v_char), stream);
		    upcase_nextP = NIL;
		} else {
		    princ(v_char, stream);
		    upcase_nextP = NIL;
		}

	    }
	    chleid = get_output_stream_string(stream);
	} finally {
	    final SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
	    try {
		bind($is_thread_performing_cleanupP$, T);
		final SubLObject _values = getValuesAsVector();
		close(stream, UNPROVIDED);
		restoreValuesFromVector(_values);
	    } finally {
		rebind($is_thread_performing_cleanupP$, _prev_bind_0);
	    }
	}
	v_term = kb_utilities.maybe_find_object_by_compact_hl_external_id_string(chleid);
	if ((NIL == v_term) || ((!term_id.equal(fact_sheets.fact_sheet_term_id(v_term, UNPROVIDED))) && (!term_id.equal(fact_sheets.fact_sheet_term_legacy_id(v_term))))) {
	    fact_sheets.warn_unknown_fact_sheet_term_id(term_id);
	    return not_found_value;
	}
	return v_term;
    }

    public static SubLObject clear_warn_unknown_fact_sheet_term_id() {
	final SubLObject cs = fact_sheets.$warn_unknown_fact_sheet_term_id_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static SubLObject remove_warn_unknown_fact_sheet_term_id(final SubLObject term_id) {
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$warn_unknown_fact_sheet_term_id_caching_state$.getGlobalValue(), list(term_id), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject warn_unknown_fact_sheet_term_id_internal(final SubLObject term_id) {
	final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
	if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
	    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
	    format(stream, fact_sheets.$str264$Couldn_t_identify_term_from_fact_, term_id);
	    force_output(stream);
	}
	return term_id;
    }

    public static SubLObject warn_unknown_fact_sheet_term_id(final SubLObject term_id) {
	SubLObject caching_state = fact_sheets.$warn_unknown_fact_sheet_term_id_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.WARN_UNKNOWN_FACT_SHEET_TERM_ID, fact_sheets.$warn_unknown_fact_sheet_term_id_caching_state$, NIL, EQUAL, ONE_INTEGER, fact_sheets.$int$1024);
	}
	SubLObject results = memoization_state.caching_state_lookup(caching_state, term_id, memoization_state.$memoized_item_not_found$.getGlobalValue());
	if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    results = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.warn_unknown_fact_sheet_term_id_internal(term_id)));
	    memoization_state.caching_state_put(caching_state, term_id, results, UNPROVIDED);
	}
	return memoization_state.caching_results(results);
    }

    public static final SubLObject fact_sheet_term_from_span_id_alt(SubLObject span_id, SubLObject not_found_value) {
	if (not_found_value == UNPROVIDED) {
	    not_found_value = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject v_term = not_found_value;
		SubLObject error = NIL;
		if (NIL != $catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
		    try {
			{
			    SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
			    try {
				Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
				try {
				    {
					SubLObject found_value = kb_utilities.find_object_by_hl_external_id_string(span_id);
					if (NIL != found_value) {
					    v_term = found_value;
					}
				    }
				} catch (Throwable catch_var) {
				    Errors.handleThrowable(catch_var, NIL);
				}
			    } finally {
				Errors.$error_handler$.rebind(_prev_bind_0, thread);
			    }
			}
		    } catch (Throwable ccatch_env_var) {
			error = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
		    }
		} else {
		    {
			SubLObject found_value = kb_utilities.find_object_by_hl_external_id_string(span_id);
			if (NIL != found_value) {
			    v_term = found_value;
			}
		    }
		}
		if (NIL != error) {
		    Errors.warn($str_alt423$Error_getting_fact_sheet_term_fro, span_id, error);
		}
		if ((!v_term.equal(not_found_value)) && (NIL != cycl_utilities.expression_find_if($sym327$INVALID_FORT_, v_term, UNPROVIDED, UNPROVIDED))) {
		    v_term = not_found_value;
		}
		if (NIL != assertion_handles.assertion_p(v_term)) {
		    v_term = uncanonicalizer.assertion_el_formula(v_term);
		}
		return v_term;
	    }
	}
    }

    public static SubLObject fact_sheet_term_from_span_id(final SubLObject span_id, SubLObject not_found_value) {
	if (not_found_value == UNPROVIDED) {
	    not_found_value = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject v_term = not_found_value;
	SubLObject error = NIL;
	if (NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
	    try {
		thread.throwStack.push($catch_error_message_target$.getGlobalValue());
		final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
		try {
		    Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
		    try {
			final SubLObject found_value = kb_utilities.find_object_by_hl_external_id_string(span_id);
			if (NIL != found_value) {
			    v_term = found_value;
			}
		    } catch (final Throwable catch_var) {
			Errors.handleThrowable(catch_var, NIL);
		    }
		} finally {
		    Errors.$error_handler$.rebind(_prev_bind_0, thread);
		}
	    } catch (final Throwable ccatch_env_var) {
		error = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
	    } finally {
		thread.throwStack.pop();
	    }
	} else {
	    final SubLObject found_value2 = kb_utilities.find_object_by_hl_external_id_string(span_id);
	    if (NIL != found_value2) {
		v_term = found_value2;
	    }
	}
	if (NIL != error) {
	    Errors.warn(fact_sheets.$str267$Error_getting_fact_sheet_term_fro, span_id, error);
	}
	if ((!v_term.equal(not_found_value)) && (NIL != cycl_utilities.expression_find_if(fact_sheets.$sym166$INVALID_FORT_, v_term, UNPROVIDED, UNPROVIDED))) {
	    v_term = not_found_value;
	}
	if (NIL != assertion_handles.assertion_p(v_term)) {
	    v_term = uncanonicalizer.assertion_el_formula(v_term);
	}
	return v_term;
    }

    public static final SubLObject paraphrase_fact_sheet_sentences_alt(SubLObject v_term, SubLObject grouped_sentences, SubLObject verbosity, SubLObject language_mt, SubLObject domain_mt) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject categorized_paragraph_data = NIL;
		SubLObject sentence_count = ZERO_INTEGER;
		SubLObject pph_time = ZERO_INTEGER;
		SubLObject sources = NIL;
		SubLObject error_message = NIL;
		SubLObject footnotes = NIL;
		SubLObject time_var = get_internal_real_time();
		thread.resetMultipleValues();
		{
		    SubLObject _prev_bind_0 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
		    try {
			pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
			{
			    SubLObject reuseP = thread.secondMultipleValue();
			    thread.resetMultipleValues();
			    try {
				thread.resetMultipleValues();
				{
				    SubLObject _prev_bind_0_65 = pph_macros.$pph_memoization_state$.currentBinding(thread);
				    try {
					pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
					{
					    SubLObject new_or_reused = thread.secondMultipleValue();
					    thread.resetMultipleValues();
					    {
						SubLObject _prev_bind_0_66 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
						try {
						    pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
						    {
							SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
							{
							    SubLObject _prev_bind_0_67 = memoization_state.$memoization_state$.currentBinding(thread);
							    try {
								memoization_state.$memoization_state$.bind(local_state, thread);
								{
								    SubLObject original_memoization_process = NIL;
								    if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
									original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
									{
									    SubLObject current_proc = current_process();
									    if (NIL == original_memoization_process) {
										memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
									    } else {
										if (original_memoization_process != current_proc) {
										    Errors.error($str_alt424$Invalid_attempt_to_reuse_memoizat);
										}
									    }
									}
								    }
								    try {
									{
									    SubLObject _prev_bind_0_68 = Errors.$continue_cerrorP$.currentBinding(thread);
									    SubLObject _prev_bind_1 = pph_error.$pph_error_handling_onP$.currentBinding(thread);
									    try {
										Errors.$continue_cerrorP$.bind(NIL, thread);
										pph_error.$pph_error_handling_onP$.bind(T, thread);
										if (NIL != pph_error.pph_break_on_errorP()) {
										    {
											SubLObject cdolist_list_var = com.cyc.cycjava.cycl.fact_sheets.sort_fact_sheet_texts_by_category(copy_list(grouped_sentences));
											SubLObject cons = NIL;
											for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
											    {
												SubLObject datum = cons;
												SubLObject current = datum;
												SubLObject pred = NIL;
												SubLObject sentence_groups = NIL;
												destructuring_bind_must_consp(current, datum, $list_alt425);
												pred = current.first();
												current = current.rest();
												sentence_groups = current;
												{
												    SubLObject paragraph_data = NIL;
												    SubLObject pph_timeout = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_paraphrase_soft_timeout_time_left();
												    SubLObject timed_outP = NIL;
												    if ((NIL == pph_timeout) || pph_timeout.isPositive()) {
													if (NIL != pph_timeout) {
													    {
														SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
														if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
														    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
														    format(stream, $str_alt426$Using_PPH_timeout_of__S_seconds_, pph_timeout);
														    force_output(stream);
														}
													    }
													}
													{
													    SubLObject _prev_bind_0_69 = pph_macros.$pph_timeout_time_check_count$.currentBinding(thread);
													    SubLObject _prev_bind_1_70 = pph_macros.$pph_timeout_time$.currentBinding(thread);
													    SubLObject _prev_bind_2 = pph_macros.$pph_timeout_reachedP$.currentBinding(thread);
													    try {
														pph_macros.$pph_timeout_time_check_count$.bind(ZERO_INTEGER, thread);
														pph_macros.$pph_timeout_time$.bind(pph_macros.pph_compute_timeout_time(pph_timeout), thread);
														pph_macros.$pph_timeout_reachedP$.bind(pph_macros.$pph_timeout_reachedP$.getDynamicValue(thread), thread);
														pph_macros.$pph_timeout_reachedP$.setDynamicValue(pph_macros.pph_timeout_time_reachedP(), thread);
														if (NIL == pph_macros.$pph_timeout_reachedP$.getDynamicValue(thread)) {
														    if (NIL == timed_outP) {
															{
															    SubLObject csome_list_var = sentence_groups;
															    SubLObject sentence_group = NIL;
															    for (sentence_group = csome_list_var.first(); !((NIL != timed_outP)
																    || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), sentence_group = csome_list_var.first()) {
																sentence_count = add(sentence_count, length(sentence_group));
																thread.resetMultipleValues();
																{
																    SubLObject summary = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_group_summary(v_term, sentence_group, verbosity, language_mt, domain_mt, sources, UNPROVIDED);
																    SubLObject group_new_sources = thread.secondMultipleValue();
																    SubLObject paraphrased_sentences_to_output_lists = thread.thirdMultipleValue();
																    thread.resetMultipleValues();
																    if (NIL != string_utilities.non_empty_string_p(summary)) {
																	paragraph_data = cons(paraphrased_sentences_to_output_lists, paragraph_data);
																	sources = append(sources, group_new_sources);
																    }
																}
																if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_paraphrase_soft_timeout_time_reachedP()) {
																    timed_outP = T;
																}
															    }
															}
														    }
														}
														timed_outP = pph_macros.pph_timeout_time_reachedP();
													    } finally {
														pph_macros.$pph_timeout_reachedP$.rebind(_prev_bind_2, thread);
														pph_macros.$pph_timeout_time$.rebind(_prev_bind_1_70, thread);
														pph_macros.$pph_timeout_time_check_count$.rebind(_prev_bind_0_69, thread);
													    }
													}
												    }
												    if (NIL != list_utilities.non_empty_list_p(paragraph_data)) {
													categorized_paragraph_data = cons(cons(pred, nreverse(paragraph_data)), categorized_paragraph_data);
												    }
												}
											    }
											}
										    }
										} else {
										    try {
											{
											    SubLObject _prev_bind_0_71 = Errors.$error_handler$.currentBinding(thread);
											    try {
												Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
												try {
												    {
													SubLObject cdolist_list_var = com.cyc.cycjava.cycl.fact_sheets.sort_fact_sheet_texts_by_category(copy_list(grouped_sentences));
													SubLObject cons = NIL;
													for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
													    {
														SubLObject datum = cons;
														SubLObject current = datum;
														SubLObject pred = NIL;
														SubLObject sentence_groups = NIL;
														destructuring_bind_must_consp(current, datum, $list_alt425);
														pred = current.first();
														current = current.rest();
														sentence_groups = current;
														{
														    SubLObject paragraph_data = NIL;
														    SubLObject pph_timeout = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_paraphrase_soft_timeout_time_left();
														    SubLObject timed_outP = NIL;
														    if ((NIL == pph_timeout) || pph_timeout.isPositive()) {
															if (NIL != pph_timeout) {
															    {
																SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
																if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
																    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
																    format(stream, $str_alt426$Using_PPH_timeout_of__S_seconds_, pph_timeout);
																    force_output(stream);
																}
															    }
															}
															{
															    SubLObject _prev_bind_0_72 = pph_macros.$pph_timeout_time_check_count$.currentBinding(thread);
															    SubLObject _prev_bind_1_73 = pph_macros.$pph_timeout_time$.currentBinding(thread);
															    SubLObject _prev_bind_2 = pph_macros.$pph_timeout_reachedP$.currentBinding(thread);
															    try {
																pph_macros.$pph_timeout_time_check_count$.bind(ZERO_INTEGER, thread);
																pph_macros.$pph_timeout_time$.bind(pph_macros.pph_compute_timeout_time(pph_timeout), thread);
																pph_macros.$pph_timeout_reachedP$.bind(pph_macros.$pph_timeout_reachedP$.getDynamicValue(thread), thread);
																pph_macros.$pph_timeout_reachedP$.setDynamicValue(pph_macros.pph_timeout_time_reachedP(), thread);
																if (NIL == pph_macros.$pph_timeout_reachedP$.getDynamicValue(thread)) {
																    if (NIL == timed_outP) {
																	{
																	    SubLObject csome_list_var = sentence_groups;
																	    SubLObject sentence_group = NIL;
																	    for (sentence_group = csome_list_var.first(); !((NIL != timed_outP)
																		    || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), sentence_group = csome_list_var.first()) {
																		sentence_count = add(sentence_count, length(sentence_group));
																		thread.resetMultipleValues();
																		{
																		    SubLObject summary = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_group_summary(v_term, sentence_group, verbosity, language_mt, domain_mt,
																			    sources, UNPROVIDED);
																		    SubLObject group_new_sources = thread.secondMultipleValue();
																		    SubLObject paraphrased_sentences_to_output_lists = thread.thirdMultipleValue();
																		    thread.resetMultipleValues();
																		    if (NIL != string_utilities.non_empty_string_p(summary)) {
																			paragraph_data = cons(paraphrased_sentences_to_output_lists, paragraph_data);
																			sources = append(sources, group_new_sources);
																		    }
																		}
																		if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_paraphrase_soft_timeout_time_reachedP()) {
																		    timed_outP = T;
																		}
																	    }
																	}
																    }
																}
																timed_outP = pph_macros.pph_timeout_time_reachedP();
															    } finally {
																pph_macros.$pph_timeout_reachedP$.rebind(_prev_bind_2, thread);
																pph_macros.$pph_timeout_time$.rebind(_prev_bind_1_73, thread);
																pph_macros.$pph_timeout_time_check_count$.rebind(_prev_bind_0_72, thread);
															    }
															}
														    }
														    if (NIL != list_utilities.non_empty_list_p(paragraph_data)) {
															categorized_paragraph_data = cons(cons(pred, nreverse(paragraph_data)), categorized_paragraph_data);
														    }
														}
													    }
													}
												    }
												} catch (Throwable catch_var) {
												    Errors.handleThrowable(catch_var, NIL);
												}
											    } finally {
												Errors.$error_handler$.rebind(_prev_bind_0_71, thread);
											    }
											}
										    } catch (Throwable ccatch_env_var) {
											error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
										    }
										    if (error_message.isString()) {
											Errors.warn(error_message);
										    }
										}
									    } finally {
										pph_error.$pph_error_handling_onP$.rebind(_prev_bind_1, thread);
										Errors.$continue_cerrorP$.rebind(_prev_bind_0_68, thread);
									    }
									}
								    } finally {
									{
									    SubLObject _prev_bind_0_74 = $is_thread_performing_cleanupP$.currentBinding(thread);
									    try {
										$is_thread_performing_cleanupP$.bind(T, thread);
										if ((NIL != local_state) && (NIL == original_memoization_process)) {
										    memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
										}
									    } finally {
										$is_thread_performing_cleanupP$.rebind(_prev_bind_0_74, thread);
									    }
									}
								    }
								}
							    } finally {
								memoization_state.$memoization_state$.rebind(_prev_bind_0_67, thread);
							    }
							}
						    }
						} finally {
						    pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_66, thread);
						}
					    }
					    if ((new_or_reused == $NEW) && (NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread)))) {
						memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
					    }
					}
				    } finally {
					pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_65, thread);
				    }
				}
			    } finally {
				{
				    SubLObject _prev_bind_0_75 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					if (NIL == reuseP) {
					    pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
					}
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0_75, thread);
				    }
				}
			    }
			}
		    } finally {
			pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0, thread);
		    }
		}
		if (NIL != error_message) {
		    {
			SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
			if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
			    format(stream, $str_alt428$Error_generating_paraphrases___A, error_message);
			    force_output(stream);
			}
		    }
		}
		categorized_paragraph_data = nreverse(categorized_paragraph_data);
		{
		    SubLObject _prev_bind_0 = $within_fact_sheet_paraphraseP$.currentBinding(thread);
		    SubLObject _prev_bind_1 = $fact_sheet_focal_term$.currentBinding(thread);
		    SubLObject _prev_bind_2 = $thcl_forts_by_fiat$.currentBinding(thread);
		    SubLObject _prev_bind_3 = pph_vars.$constant_link_function$.currentBinding(thread);
		    SubLObject _prev_bind_4 = pph_vars.$html_generation_target$.currentBinding(thread);
		    SubLObject _prev_bind_5 = pph_vars.$html_generation_term_id_function$.currentBinding(thread);
		    SubLObject _prev_bind_6 = pph_vars.$pph_speaker$.currentBinding(thread);
		    SubLObject _prev_bind_7 = pph_vars.$pph_addressee$.currentBinding(thread);
		    try {
			$within_fact_sheet_paraphraseP$.bind(T, thread);
			$fact_sheet_focal_term$.bind(v_term, thread);
			$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? ((SubLObject) (cons(v_term, $thcl_forts_by_fiat$.getDynamicValue(thread)))) : $thcl_forts_by_fiat$.getDynamicValue(thread), thread);
			pph_vars.$constant_link_function$.bind(true ? ((SubLObject) ($FACT_SHEET)) : pph_vars.$constant_link_function$.getDynamicValue(thread), thread);
			pph_vars.$html_generation_target$.bind(pph_vars.$html_generation_target$.getDynamicValue(thread), thread);
			pph_vars.$html_generation_term_id_function$.bind(FACT_SHEET_TERM_ID, thread);
			pph_vars.$pph_speaker$.bind($UNKNOWN, thread);
			pph_vars.$pph_addressee$.bind($UNKNOWN, thread);
			footnotes = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_footnotes_for_sources(sources, UNPROVIDED);
		    } finally {
			pph_vars.$pph_addressee$.rebind(_prev_bind_7, thread);
			pph_vars.$pph_speaker$.rebind(_prev_bind_6, thread);
			pph_vars.$html_generation_term_id_function$.rebind(_prev_bind_5, thread);
			pph_vars.$html_generation_target$.rebind(_prev_bind_4, thread);
			pph_vars.$constant_link_function$.rebind(_prev_bind_3, thread);
			$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
			$fact_sheet_focal_term$.rebind(_prev_bind_1, thread);
			$within_fact_sheet_paraphraseP$.rebind(_prev_bind_0, thread);
		    }
		}
		pph_time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
		{
		    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
		    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
			format(stream, $str_alt429$Generated__S_paragraphs_containin, new SubLObject[] { length(categorized_paragraph_data), sentence_count, v_term, numeric_date_utilities.readable_elapsed_time_string(pph_time, UNPROVIDED) });
			force_output(stream);
		    }
		}
		return values(categorized_paragraph_data, sentence_count, pph_time, footnotes);
	    }
	}
    }

    public static SubLObject paraphrase_fact_sheet_sentences(final SubLObject v_term, final SubLObject grouped_sentences, final SubLObject verbosity, final SubLObject language_mt, final SubLObject domain_mt) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject categorized_paragraph_data = NIL;
	SubLObject sentence_count = ZERO_INTEGER;
	SubLObject pph_time = ZERO_INTEGER;
	SubLObject v_sources = NIL;
	SubLObject error_message = NIL;
	SubLObject footnotes = NIL;
	final SubLObject time_var = get_internal_real_time();
	SubLObject _prev_bind_0 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
	try {
	    pph_macros.$free_pph_problem_store_pointers$.bind(NIL, thread);
	    thread.resetMultipleValues();
	    final SubLObject _prev_bind_0_$56 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
	    try {
		pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
		final SubLObject reuseP = thread.secondMultipleValue();
		thread.resetMultipleValues();
		try {
		    thread.resetMultipleValues();
		    final SubLObject _prev_bind_0_$57 = pph_macros.$pph_memoization_state$.currentBinding(thread);
		    try {
			pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
			final SubLObject new_or_reused = thread.secondMultipleValue();
			thread.resetMultipleValues();
			final SubLObject _prev_bind_0_$58 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
			try {
			    pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
			    final SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
			    final SubLObject _prev_bind_0_$59 = memoization_state.$memoization_state$.currentBinding(thread);
			    try {
				memoization_state.$memoization_state$.bind(local_state, thread);
				final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
				try {
				    final SubLObject _prev_bind_0_$60 = Errors.$continue_cerrorP$.currentBinding(thread);
				    final SubLObject _prev_bind_2 = pph_error.$pph_error_handling_onP$.currentBinding(thread);
				    try {
					Errors.$continue_cerrorP$.bind(NIL, thread);
					pph_error.$pph_error_handling_onP$.bind(T, thread);
					if (NIL != pph_error.pph_break_on_errorP()) {
					    SubLObject cdolist_list_var = fact_sheets.sort_fact_sheet_texts_by_category(copy_list(grouped_sentences));
					    SubLObject cons = NIL;
					    cons = cdolist_list_var.first();
					    while (NIL != cdolist_list_var) {
						SubLObject current;
						final SubLObject datum = current = cons;
						SubLObject pred = NIL;
						SubLObject sentence_groups = NIL;
						destructuring_bind_must_consp(current, datum, fact_sheets.$list268);
						pred = current.first();
						current = sentence_groups = current.rest();
						SubLObject paragraph_data = NIL;
						final SubLObject pph_timeout = fact_sheets.fact_sheet_paraphrase_soft_timeout_time_left();
						SubLObject timed_outP = NIL;
						if ((NIL == pph_timeout) || pph_timeout.isPositive()) {
						    if (NIL != pph_timeout) {
							final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
							if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
							    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
							    format(stream, fact_sheets.$str269$Using_PPH_timeout_of__S_seconds_, pph_timeout);
							    force_output(stream);
							}
						    }
						    final SubLObject _prev_bind_0_$61 = pph_macros.$pph_timeout_time_check_count$.currentBinding(thread);
						    final SubLObject _prev_bind_1_$62 = pph_macros.$pph_timeout_time$.currentBinding(thread);
						    final SubLObject _prev_bind_3 = pph_macros.$pph_timeout_reachedP$.currentBinding(thread);
						    try {
							pph_macros.$pph_timeout_time_check_count$.bind(ZERO_INTEGER, thread);
							pph_macros.$pph_timeout_time$.bind(pph_macros.pph_compute_timeout_time(pph_timeout), thread);
							pph_macros.$pph_timeout_reachedP$.bind(pph_macros.$pph_timeout_reachedP$.getDynamicValue(thread), thread);
							pph_macros.$pph_timeout_reachedP$.setDynamicValue(pph_macros.pph_timeout_time_reachedP(), thread);
							if ((NIL == pph_macros.$pph_timeout_reachedP$.getDynamicValue(thread)) && (NIL == timed_outP)) {
							    SubLObject csome_list_var = sentence_groups;
							    SubLObject sentence_group = NIL;
							    sentence_group = csome_list_var.first();
							    while ((NIL == timed_outP) && (NIL != csome_list_var)) {
								sentence_count = add(sentence_count, length(sentence_group));
								thread.resetMultipleValues();
								final SubLObject summary = fact_sheets.fact_sheet_sentence_group_summary(v_term, sentence_group, verbosity, language_mt, domain_mt, v_sources, UNPROVIDED);
								final SubLObject group_new_sources = thread.secondMultipleValue();
								final SubLObject paraphrased_sentences_to_output_lists = thread.thirdMultipleValue();
								thread.resetMultipleValues();
								if (NIL != string_utilities.non_empty_string_p(summary)) {
								    paragraph_data = cons(paraphrased_sentences_to_output_lists, paragraph_data);
								    v_sources = append(v_sources, group_new_sources);
								}
								if (NIL != fact_sheets.fact_sheet_paraphrase_soft_timeout_time_reachedP()) {
								    timed_outP = T;
								}
								csome_list_var = csome_list_var.rest();
								sentence_group = csome_list_var.first();
							    }
							}
							timed_outP = pph_macros.pph_timeout_time_reachedP();
						    } finally {
							pph_macros.$pph_timeout_reachedP$.rebind(_prev_bind_3, thread);
							pph_macros.$pph_timeout_time$.rebind(_prev_bind_1_$62, thread);
							pph_macros.$pph_timeout_time_check_count$.rebind(_prev_bind_0_$61, thread);
						    }
						}
						if (NIL != list_utilities.non_empty_list_p(paragraph_data)) {
						    categorized_paragraph_data = cons(cons(pred, nreverse(paragraph_data)), categorized_paragraph_data);
						}
						cdolist_list_var = cdolist_list_var.rest();
						cons = cdolist_list_var.first();
					    }
					} else {
					    try {
						thread.throwStack.push($catch_error_message_target$.getGlobalValue());
						final SubLObject _prev_bind_0_$62 = Errors.$error_handler$.currentBinding(thread);
						try {
						    Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
						    try {
							SubLObject cdolist_list_var2 = fact_sheets.sort_fact_sheet_texts_by_category(copy_list(grouped_sentences));
							SubLObject cons2 = NIL;
							cons2 = cdolist_list_var2.first();
							while (NIL != cdolist_list_var2) {
							    SubLObject current2;
							    final SubLObject datum2 = current2 = cons2;
							    SubLObject pred2 = NIL;
							    SubLObject sentence_groups2 = NIL;
							    destructuring_bind_must_consp(current2, datum2, fact_sheets.$list268);
							    pred2 = current2.first();
							    current2 = sentence_groups2 = current2.rest();
							    SubLObject paragraph_data2 = NIL;
							    final SubLObject pph_timeout2 = fact_sheets.fact_sheet_paraphrase_soft_timeout_time_left();
							    SubLObject timed_outP2 = NIL;
							    if ((NIL == pph_timeout2) || pph_timeout2.isPositive()) {
								if (NIL != pph_timeout2) {
								    final SubLObject stream2 = fact_sheet_logs.fact_sheet_log_stream();
								    if (((T == stream2) && current_process().eql(subl_promotions.initial_process())) || (stream2.isStream() && (NIL != output_stream_p(stream2)))) {
									fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream2);
									format(stream2, fact_sheets.$str269$Using_PPH_timeout_of__S_seconds_, pph_timeout2);
									force_output(stream2);
								    }
								}
								final SubLObject _prev_bind_0_$63 = pph_macros.$pph_timeout_time_check_count$.currentBinding(thread);
								final SubLObject _prev_bind_1_$63 = pph_macros.$pph_timeout_time$.currentBinding(thread);
								final SubLObject _prev_bind_4 = pph_macros.$pph_timeout_reachedP$.currentBinding(thread);
								try {
								    pph_macros.$pph_timeout_time_check_count$.bind(ZERO_INTEGER, thread);
								    pph_macros.$pph_timeout_time$.bind(pph_macros.pph_compute_timeout_time(pph_timeout2), thread);
								    pph_macros.$pph_timeout_reachedP$.bind(pph_macros.$pph_timeout_reachedP$.getDynamicValue(thread), thread);
								    pph_macros.$pph_timeout_reachedP$.setDynamicValue(pph_macros.pph_timeout_time_reachedP(), thread);
								    if ((NIL == pph_macros.$pph_timeout_reachedP$.getDynamicValue(thread)) && (NIL == timed_outP2)) {
									SubLObject csome_list_var2 = sentence_groups2;
									SubLObject sentence_group2 = NIL;
									sentence_group2 = csome_list_var2.first();
									while ((NIL == timed_outP2) && (NIL != csome_list_var2)) {
									    sentence_count = add(sentence_count, length(sentence_group2));
									    thread.resetMultipleValues();
									    final SubLObject summary2 = fact_sheets.fact_sheet_sentence_group_summary(v_term, sentence_group2, verbosity, language_mt, domain_mt, v_sources, UNPROVIDED);
									    final SubLObject group_new_sources2 = thread.secondMultipleValue();
									    final SubLObject paraphrased_sentences_to_output_lists2 = thread.thirdMultipleValue();
									    thread.resetMultipleValues();
									    if (NIL != string_utilities.non_empty_string_p(summary2)) {
										paragraph_data2 = cons(paraphrased_sentences_to_output_lists2, paragraph_data2);
										v_sources = append(v_sources, group_new_sources2);
									    }
									    if (NIL != fact_sheets.fact_sheet_paraphrase_soft_timeout_time_reachedP()) {
										timed_outP2 = T;
									    }
									    csome_list_var2 = csome_list_var2.rest();
									    sentence_group2 = csome_list_var2.first();
									}
								    }
								    timed_outP2 = pph_macros.pph_timeout_time_reachedP();
								} finally {
								    pph_macros.$pph_timeout_reachedP$.rebind(_prev_bind_4, thread);
								    pph_macros.$pph_timeout_time$.rebind(_prev_bind_1_$63, thread);
								    pph_macros.$pph_timeout_time_check_count$.rebind(_prev_bind_0_$63, thread);
								}
							    }
							    if (NIL != list_utilities.non_empty_list_p(paragraph_data2)) {
								categorized_paragraph_data = cons(cons(pred2, nreverse(paragraph_data2)), categorized_paragraph_data);
							    }
							    cdolist_list_var2 = cdolist_list_var2.rest();
							    cons2 = cdolist_list_var2.first();
							}
						    } catch (final Throwable catch_var) {
							Errors.handleThrowable(catch_var, NIL);
						    }
						} finally {
						    Errors.$error_handler$.rebind(_prev_bind_0_$62, thread);
						}
					    } catch (final Throwable ccatch_env_var) {
						error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
					    } finally {
						thread.throwStack.pop();
					    }
					    if (error_message.isString() && (NIL == pph_error.suppress_pph_warningsP())) {
						Errors.warn(cconcatenate(pph_error_message_truncator.truncate_pph_error_message(error_message), fact_sheets.$str270$___Top_level_CycL___S), pph_vars.pph_top_level_cycl());
					    }
					}
				    } finally {
					pph_error.$pph_error_handling_onP$.rebind(_prev_bind_2, thread);
					Errors.$continue_cerrorP$.rebind(_prev_bind_0_$60, thread);
				    }
				} finally {
				    final SubLObject _prev_bind_0_$64 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					final SubLObject _values = getValuesAsVector();
					memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
					restoreValuesFromVector(_values);
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$64, thread);
				    }
				}
			    } finally {
				memoization_state.$memoization_state$.rebind(_prev_bind_0_$59, thread);
			    }
			} finally {
			    pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$58, thread);
			}
			if ((new_or_reused == $NEW) && (NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread)))) {
			    memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
			}
		    } finally {
			pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$57, thread);
		    }
		} finally {
		    final SubLObject _prev_bind_0_$65 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values2 = getValuesAsVector();
			if (NIL == reuseP) {
			    pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
			}
			restoreValuesFromVector(_values2);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$65, thread);
		    }
		}
	    } finally {
		pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$56, thread);
	    }
	} finally {
	    pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_0, thread);
	}
	if (NIL != error_message) {
	    final SubLObject stream3 = fact_sheet_logs.fact_sheet_log_stream();
	    if (((T == stream3) && current_process().eql(subl_promotions.initial_process())) || (stream3.isStream() && (NIL != output_stream_p(stream3)))) {
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream3);
		format(stream3, fact_sheets.$str272$Error_generating_paraphrases___A, error_message);
		force_output(stream3);
	    }
	}
	categorized_paragraph_data = nreverse(categorized_paragraph_data);
	_prev_bind_0 = fact_sheets.$within_fact_sheet_paraphraseP$.currentBinding(thread);
	final SubLObject _prev_bind_5 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
	final SubLObject _prev_bind_6 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
	final SubLObject _prev_bind_7 = pph_vars.$constant_link_function$.currentBinding(thread);
	final SubLObject _prev_bind_8 = pph_vars.$html_generation_target$.currentBinding(thread);
	final SubLObject _prev_bind_9 = pph_vars.$html_generation_term_id_function$.currentBinding(thread);
	final SubLObject _prev_bind_10 = pph_vars.$pph_speaker$.currentBinding(thread);
	final SubLObject _prev_bind_11 = pph_vars.$pph_addressee$.currentBinding(thread);
	try {
	    fact_sheets.$within_fact_sheet_paraphraseP$.bind(T, thread);
	    fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
	    thcl.$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread), thread);
	    pph_vars.$constant_link_function$.bind($FACT_SHEET, thread);
	    pph_vars.$html_generation_target$.bind(pph_vars.$html_generation_target$.getDynamicValue(thread), thread);
	    pph_vars.$html_generation_term_id_function$.bind(fact_sheets.FACT_SHEET_TERM_ID, thread);
	    pph_vars.$pph_speaker$.bind($UNKNOWN, thread);
	    pph_vars.$pph_addressee$.bind($UNKNOWN, thread);
	    footnotes = fact_sheets.fact_sheet_footnotes_for_sources(v_sources, UNPROVIDED);
	} finally {
	    pph_vars.$pph_addressee$.rebind(_prev_bind_11, thread);
	    pph_vars.$pph_speaker$.rebind(_prev_bind_10, thread);
	    pph_vars.$html_generation_term_id_function$.rebind(_prev_bind_9, thread);
	    pph_vars.$html_generation_target$.rebind(_prev_bind_8, thread);
	    pph_vars.$constant_link_function$.rebind(_prev_bind_7, thread);
	    thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_6, thread);
	    fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_5, thread);
	    fact_sheets.$within_fact_sheet_paraphraseP$.rebind(_prev_bind_0, thread);
	}
	pph_time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
	final SubLObject stream3 = fact_sheet_logs.fact_sheet_log_stream();
	if (((T == stream3) && current_process().eql(subl_promotions.initial_process())) || (stream3.isStream() && (NIL != output_stream_p(stream3)))) {
	    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream3);
	    format(stream3, fact_sheets.$str273$Generated__D_paragraph__P_contain, new SubLObject[] { length(categorized_paragraph_data), sentence_count, v_term, numeric_date_utilities.readable_elapsed_time_string(pph_time, UNPROVIDED) });
	    force_output(stream3);
	}
	return values(categorized_paragraph_data, sentence_count, pph_time, footnotes);
    }

    public static SubLObject fact_sheet_force_bullets_for_categoryP(final SubLObject pred) {
	if (fact_sheets.$fact_sheet_thcl_section_category$.getGlobalValue().equal(pred)) {
	    return T;
	}
	return NIL;
    }

    public static final SubLObject fact_sheet_footnotes_for_sources_alt(SubLObject sources, SubLObject type) {
	if (type == UNPROVIDED) {
	    type = $SUPERSCRIPTS;
	}
	{
	    SubLObject footnotes = NIL;
	    SubLObject list_var = NIL;
	    SubLObject source = NIL;
	    SubLObject zero_index = NIL;
	    for (list_var = sources, source = list_var.first(), zero_index = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), source = list_var.first(), zero_index = add(ONE_INTEGER, zero_index)) {
		footnotes = cons(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_footnote_for_source(source, number_utilities.f_1X(zero_index), type), footnotes);
	    }
	    return nreverse(footnotes);
	}
    }

    public static SubLObject fact_sheet_footnotes_for_sources(final SubLObject v_sources, SubLObject type) {
	if (type == UNPROVIDED) {
	    type = $SUPERSCRIPTS;
	}
	SubLObject footnotes = NIL;
	SubLObject list_var = NIL;
	SubLObject source = NIL;
	SubLObject zero_index = NIL;
	list_var = v_sources;
	source = list_var.first();
	for (zero_index = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), source = list_var.first(), zero_index = add(ONE_INTEGER, zero_index)) {
	    footnotes = cons(fact_sheets.fact_sheet_footnote_for_source(source, number_utilities.f_1X(zero_index), type), footnotes);
	}
	return nreverse(footnotes);
    }

    public static final SubLObject fact_sheet_footnote_for_source_alt(SubLObject source, SubLObject index, SubLObject type) {
	{
	    SubLObject citation = new_pph_source_citation(source, index, NIL);
	    return list(pph_html_citation_string(citation, type, UNPROVIDED), source);
	}
    }

    public static SubLObject fact_sheet_footnote_for_source(SubLObject source, final SubLObject index, final SubLObject type) {
	final SubLObject citation = pph_html.new_pph_source_citation(source, index, NIL);
	return list(pph_html.pph_html_citation_string(citation, type, UNPROVIDED), source);
    }

    public static final SubLObject sort_fact_sheet_texts_by_category_alt(SubLObject categorized_paragraph_texts) {
	return Sort.stable_sort(categorized_paragraph_texts, $sym431$HIGHER_PRIORITY_FACT_SHEET_CATEGORY_, symbol_function(CAR));
    }

    public static SubLObject sort_fact_sheet_texts_by_category(final SubLObject categorized_paragraph_texts) {
	return Sort.stable_sort(categorized_paragraph_texts, fact_sheets.$sym275$HIGHER_PRIORITY_FACT_SHEET_CATEGORY_, symbol_function(CAR));
    }

    public static final SubLObject higher_priority_fact_sheet_categoryP_alt(SubLObject cat1, SubLObject cat2) {
	{
	    SubLObject cat1_priority = position(cat1, $fact_sheet_category_order$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	    SubLObject cat2_priority = position(cat2, $fact_sheet_category_order$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	    if ((NIL != cat1_priority) && ((NIL == cat2_priority) || cat1_priority.numL(cat2_priority))) {
		return T;
	    } else {
		if (cat2.isString()) {
		    return T;
		} else {
		    return NIL;
		}
	    }
	}
    }

    public static SubLObject higher_priority_fact_sheet_categoryP(final SubLObject cat1, final SubLObject cat2) {
	final SubLObject cat1_priority = position(cat1, fact_sheets.$fact_sheet_category_order$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	final SubLObject cat2_priority = position(cat2, fact_sheets.$fact_sheet_category_order$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	if ((NIL != cat1_priority) && ((NIL == cat2_priority) || cat1_priority.numL(cat2_priority))) {
	    return T;
	}
	if (cat2.isString()) {
	    return T;
	}
	return NIL;
    }

    public static final SubLObject substitute_fact_sheet_labels_for_categories_alt(SubLObject categorized_paragraph_texts, SubLObject language_mt, SubLObject v_properties) {
	{
	    SubLObject cdolist_list_var = categorized_paragraph_texts;
	    SubLObject text = NIL;
	    for (text = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), text = cdolist_list_var.first()) {
		com.cyc.cycjava.cycl.fact_sheets.substitute_fact_sheet_label_for_category(text, language_mt, v_properties);
	    }
	}
	return categorized_paragraph_texts;
    }

    public static SubLObject substitute_fact_sheet_labels_for_categories(final SubLObject categorized_paragraph_texts, final SubLObject language_mt, final SubLObject v_properties) {
	SubLObject cdolist_list_var = categorized_paragraph_texts;
	SubLObject text = NIL;
	text = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    fact_sheets.substitute_fact_sheet_label_for_category(text, language_mt, v_properties);
	    cdolist_list_var = cdolist_list_var.rest();
	    text = cdolist_list_var.first();
	}
	return categorized_paragraph_texts;
    }

    public static final SubLObject substitute_fact_sheet_label_for_category_alt(SubLObject categorized_paragraph_text, SubLObject language_mt, SubLObject v_properties) {
	{
	    SubLObject category = categorized_paragraph_text.first();
	    rplaca(categorized_paragraph_text, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_label_for_category(category, language_mt, v_properties));
	}
	return categorized_paragraph_text;
    }

    public static SubLObject substitute_fact_sheet_label_for_category(final SubLObject categorized_paragraph_text, final SubLObject language_mt, final SubLObject v_properties) {
	final SubLObject category = categorized_paragraph_text.first();
	rplaca(categorized_paragraph_text, fact_sheets.fact_sheet_label_for_category(category, language_mt, v_properties));
	return categorized_paragraph_text;
    }

    public static final SubLObject clear_fact_sheet_sentence_group_summary_alt() {
	{
	    SubLObject cs = $fact_sheet_sentence_group_summary_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_fact_sheet_sentence_group_summary() {
	final SubLObject cs = fact_sheets.$fact_sheet_sentence_group_summary_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_fact_sheet_sentence_group_summary_alt(SubLObject v_term, SubLObject sentence_group, SubLObject verbosity, SubLObject language_mt, SubLObject domain_mt, SubLObject sources, SubLObject demerit_cutoff) {
	if (demerit_cutoff == UNPROVIDED) {
	    demerit_cutoff = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_pph_demerit_cutoff();
	}
	return memoization_state.caching_state_remove_function_results_with_args($fact_sheet_sentence_group_summary_caching_state$.getGlobalValue(), list(v_term, sentence_group, verbosity, language_mt, domain_mt, sources, demerit_cutoff), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_fact_sheet_sentence_group_summary(final SubLObject v_term, final SubLObject sentence_group, final SubLObject verbosity, final SubLObject language_mt, final SubLObject domain_mt, final SubLObject v_sources, SubLObject demerit_cutoff) {
	if (demerit_cutoff == UNPROVIDED) {
	    demerit_cutoff = fact_sheets.fact_sheet_pph_demerit_cutoff();
	}
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_sentence_group_summary_caching_state$.getGlobalValue(), list(v_term, sentence_group, verbosity, language_mt, domain_mt, v_sources, demerit_cutoff), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_sentence_group_summary_internal_alt(SubLObject v_term, SubLObject sentence_group, SubLObject verbosity, SubLObject language_mt, SubLObject domain_mt, SubLObject sources, SubLObject demerit_cutoff) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject summary = NIL;
		SubLObject group_new_sources = NIL;
		SubLObject sentences_to_olists = NIL;
		{
		    SubLObject _prev_bind_0 = $within_fact_sheet_paraphraseP$.currentBinding(thread);
		    SubLObject _prev_bind_1 = $fact_sheet_focal_term$.currentBinding(thread);
		    SubLObject _prev_bind_2 = $thcl_forts_by_fiat$.currentBinding(thread);
		    SubLObject _prev_bind_3 = pph_vars.$constant_link_function$.currentBinding(thread);
		    SubLObject _prev_bind_4 = pph_vars.$html_generation_target$.currentBinding(thread);
		    SubLObject _prev_bind_5 = pph_vars.$html_generation_term_id_function$.currentBinding(thread);
		    SubLObject _prev_bind_6 = pph_vars.$pph_speaker$.currentBinding(thread);
		    SubLObject _prev_bind_7 = pph_vars.$pph_addressee$.currentBinding(thread);
		    try {
			$within_fact_sheet_paraphraseP$.bind(T, thread);
			$fact_sheet_focal_term$.bind(v_term, thread);
			$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? ((SubLObject) (cons(v_term, $thcl_forts_by_fiat$.getDynamicValue(thread)))) : $thcl_forts_by_fiat$.getDynamicValue(thread), thread);
			pph_vars.$constant_link_function$.bind(true ? ((SubLObject) ($FACT_SHEET)) : pph_vars.$constant_link_function$.getDynamicValue(thread), thread);
			pph_vars.$html_generation_target$.bind(pph_vars.$html_generation_target$.getDynamicValue(thread), thread);
			pph_vars.$html_generation_term_id_function$.bind(FACT_SHEET_TERM_ID, thread);
			pph_vars.$pph_speaker$.bind($UNKNOWN, thread);
			pph_vars.$pph_addressee$.bind($UNKNOWN, thread);
			if (!((NIL != pph_error.$suspend_pph_type_checkingP$.getDynamicValue(thread)) || (NIL != pph_macros.valid_pph_demerit_cutoff_p(demerit_cutoff)))) {
			    {
				SubLObject new_format_string = cconcatenate($str_alt434$_PPH_error_level_, new SubLObject[] { format_nil.format_nil_s_no_copy(ONE_INTEGER), $str_alt435$__,
					format_nil.format_nil_a_no_copy(cconcatenate(format_nil.format_nil_s_no_copy(demerit_cutoff), new SubLObject[] { $str_alt436$_is_not_a_, format_nil.format_nil_s_no_copy(VALID_PPH_DEMERIT_CUTOFF_P) })) });
				pph_error.pph_handle_error(new_format_string, list(EMPTY_SUBL_OBJECT_ARRAY));
			    }
			}
			{
			    SubLObject _prev_bind_0_76 = pph_vars.$pph_demerit_cutoff$.currentBinding(thread);
			    SubLObject _prev_bind_1_77 = pph_vars.$pph_use_bulleted_lists_min_level$.currentBinding(thread);
			    SubLObject _prev_bind_2_78 = pph_vars.$pph_use_bulleted_listsP$.currentBinding(thread);
			    SubLObject _prev_bind_3_79 = pph_document.$pph_summary_max_sentences_for_same_pred$.currentBinding(thread);
			    SubLObject _prev_bind_4_80 = pph_document.$pph_track_summary_sourcesP$.currentBinding(thread);
			    SubLObject _prev_bind_5_81 = pph_document.$pph_summary_sources$.currentBinding(thread);
			    try {
				pph_vars.$pph_demerit_cutoff$.bind(demerit_cutoff, thread);
				pph_vars.$pph_use_bulleted_lists_min_level$.bind(TWO_INTEGER, thread);
				pph_vars.$pph_use_bulleted_listsP$.bind(T, thread);
				pph_document.$pph_summary_max_sentences_for_same_pred$.bind(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_max_sentences_per_pred(verbosity), thread);
				pph_document.$pph_track_summary_sourcesP$.bind(T, thread);
				pph_document.$pph_summary_sources$.bind(sources, thread);
				{
				    SubLObject failed_sentences = NIL;
				    thread.resetMultipleValues();
				    {
					SubLObject summary_82 = pph_document.pph_summarize_term(v_term, sentence_group, language_mt, domain_mt, $HTML, NIL);
					SubLObject failed_sentences_83 = thread.secondMultipleValue();
					SubLObject sentences_to_olists_84 = thread.thirdMultipleValue();
					thread.resetMultipleValues();
					summary = summary_82;
					failed_sentences = failed_sentences_83;
					sentences_to_olists = sentences_to_olists_84;
				    }
				    if (NIL != failed_sentences) {
					{
					    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
					    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
						com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
						format(stream, $str_alt438$Failed_to_paraphrase__D_sentence_, new SubLObject[] { length(failed_sentences), v_term, failed_sentences });
						force_output(stream);
					    }
					}
				    }
				    group_new_sources = last(pph_document.$pph_summary_sources$.getDynamicValue(thread), subtract(length(pph_document.$pph_summary_sources$.getDynamicValue(thread)), length(sources)));
				}
			    } finally {
				pph_document.$pph_summary_sources$.rebind(_prev_bind_5_81, thread);
				pph_document.$pph_track_summary_sourcesP$.rebind(_prev_bind_4_80, thread);
				pph_document.$pph_summary_max_sentences_for_same_pred$.rebind(_prev_bind_3_79, thread);
				pph_vars.$pph_use_bulleted_listsP$.rebind(_prev_bind_2_78, thread);
				pph_vars.$pph_use_bulleted_lists_min_level$.rebind(_prev_bind_1_77, thread);
				pph_vars.$pph_demerit_cutoff$.rebind(_prev_bind_0_76, thread);
			    }
			}
		    } finally {
			pph_vars.$pph_addressee$.rebind(_prev_bind_7, thread);
			pph_vars.$pph_speaker$.rebind(_prev_bind_6, thread);
			pph_vars.$html_generation_term_id_function$.rebind(_prev_bind_5, thread);
			pph_vars.$html_generation_target$.rebind(_prev_bind_4, thread);
			pph_vars.$constant_link_function$.rebind(_prev_bind_3, thread);
			$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
			$fact_sheet_focal_term$.rebind(_prev_bind_1, thread);
			$within_fact_sheet_paraphraseP$.rebind(_prev_bind_0, thread);
		    }
		}
		return values(summary, group_new_sources, sentences_to_olists);
	    }
	}
    }

    public static SubLObject fact_sheet_sentence_group_summary_internal(final SubLObject v_term, final SubLObject sentence_group, final SubLObject verbosity, final SubLObject language_mt, final SubLObject domain_mt, final SubLObject v_sources, final SubLObject demerit_cutoff) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject summary = NIL;
	SubLObject group_new_sources = NIL;
	SubLObject sentences_to_olists = NIL;
	final SubLObject _prev_bind_0 = fact_sheets.$within_fact_sheet_paraphraseP$.currentBinding(thread);
	final SubLObject _prev_bind_2 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
	final SubLObject _prev_bind_3 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
	final SubLObject _prev_bind_4 = pph_vars.$constant_link_function$.currentBinding(thread);
	final SubLObject _prev_bind_5 = pph_vars.$html_generation_target$.currentBinding(thread);
	final SubLObject _prev_bind_6 = pph_vars.$html_generation_term_id_function$.currentBinding(thread);
	final SubLObject _prev_bind_7 = pph_vars.$pph_speaker$.currentBinding(thread);
	final SubLObject _prev_bind_8 = pph_vars.$pph_addressee$.currentBinding(thread);
	final SubLObject _prev_bind_9 = pph_vars.$pph_demerit_cutoff$.currentBinding(thread);
	final SubLObject _prev_bind_10 = pph_vars.$pph_use_bulleted_lists_min_level$.currentBinding(thread);
	final SubLObject _prev_bind_11 = pph_vars.$pph_use_bulleted_listsP$.currentBinding(thread);
	final SubLObject _prev_bind_12 = pph_document.$pph_summary_max_sentences_for_same_pred$.currentBinding(thread);
	final SubLObject _prev_bind_13 = pph_document.$pph_track_summary_sourcesP$.currentBinding(thread);
	final SubLObject _prev_bind_14 = pph_document.$pph_summary_sources$.currentBinding(thread);
	try {
	    fact_sheets.$within_fact_sheet_paraphraseP$.bind(T, thread);
	    fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
	    thcl.$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread), thread);
	    pph_vars.$constant_link_function$.bind($FACT_SHEET, thread);
	    pph_vars.$html_generation_target$.bind(pph_vars.$html_generation_target$.getDynamicValue(thread), thread);
	    pph_vars.$html_generation_term_id_function$.bind(fact_sheets.FACT_SHEET_TERM_ID, thread);
	    pph_vars.$pph_speaker$.bind($UNKNOWN, thread);
	    pph_vars.$pph_addressee$.bind($UNKNOWN, thread);
	    pph_vars.$pph_demerit_cutoff$.bind(demerit_cutoff, thread);
	    pph_vars.$pph_use_bulleted_lists_min_level$.bind(TWO_INTEGER, thread);
	    pph_vars.$pph_use_bulleted_listsP$.bind(T, thread);
	    pph_document.$pph_summary_max_sentences_for_same_pred$.bind(fact_sheets.fact_sheet_max_sentences_per_pred(verbosity), thread);
	    pph_document.$pph_track_summary_sourcesP$.bind(T, thread);
	    pph_document.$pph_summary_sources$.bind(v_sources, thread);
	    SubLObject failed_sentences = NIL;
	    thread.resetMultipleValues();
	    final SubLObject summary_$68 = pph_document.pph_summarize_term(v_term, sentence_group, language_mt, domain_mt, $HTML, NIL);
	    final SubLObject failed_sentences_$69 = thread.secondMultipleValue();
	    final SubLObject sentences_to_olists_$70 = thread.thirdMultipleValue();
	    thread.resetMultipleValues();
	    summary = summary_$68;
	    failed_sentences = failed_sentences_$69;
	    sentences_to_olists = sentences_to_olists_$70;
	    if (NIL != failed_sentences) {
		final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
		    format(stream, fact_sheets.$str278$Failed_to_paraphrase__D_sentence_, new SubLObject[] { length(failed_sentences), v_term, failed_sentences });
		    force_output(stream);
		}
	    }
	    group_new_sources = last(pph_document.$pph_summary_sources$.getDynamicValue(thread), subtract(length(pph_document.$pph_summary_sources$.getDynamicValue(thread)), length(v_sources)));
	} finally {
	    pph_document.$pph_summary_sources$.rebind(_prev_bind_14, thread);
	    pph_document.$pph_track_summary_sourcesP$.rebind(_prev_bind_13, thread);
	    pph_document.$pph_summary_max_sentences_for_same_pred$.rebind(_prev_bind_12, thread);
	    pph_vars.$pph_use_bulleted_listsP$.rebind(_prev_bind_11, thread);
	    pph_vars.$pph_use_bulleted_lists_min_level$.rebind(_prev_bind_10, thread);
	    pph_vars.$pph_demerit_cutoff$.rebind(_prev_bind_9, thread);
	    pph_vars.$pph_addressee$.rebind(_prev_bind_8, thread);
	    pph_vars.$pph_speaker$.rebind(_prev_bind_7, thread);
	    pph_vars.$html_generation_term_id_function$.rebind(_prev_bind_6, thread);
	    pph_vars.$html_generation_target$.rebind(_prev_bind_5, thread);
	    pph_vars.$constant_link_function$.rebind(_prev_bind_4, thread);
	    thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_3, thread);
	    fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_2, thread);
	    fact_sheets.$within_fact_sheet_paraphraseP$.rebind(_prev_bind_0, thread);
	}
	return values(summary, group_new_sources, sentences_to_olists);
    }

    public static final SubLObject fact_sheet_sentence_group_summary_alt(SubLObject v_term, SubLObject sentence_group, SubLObject verbosity, SubLObject language_mt, SubLObject domain_mt, SubLObject sources, SubLObject demerit_cutoff) {
	if (demerit_cutoff == UNPROVIDED) {
	    demerit_cutoff = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_pph_demerit_cutoff();
	}
	{
	    SubLObject caching_state = $fact_sheet_sentence_group_summary_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(FACT_SHEET_SENTENCE_GROUP_SUMMARY, $fact_sheet_sentence_group_summary_caching_state$, NIL, EQUAL, SEVEN_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject sxhash = memoization_state.sxhash_calc_7(v_term, sentence_group, verbosity, language_mt, domain_mt, sources, demerit_cutoff);
		SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
		if (collisions != $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    {
			SubLObject cdolist_list_var = collisions;
			SubLObject collision = NIL;
			for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), collision = cdolist_list_var.first()) {
			    {
				SubLObject cached_args = collision.first();
				SubLObject results2 = second(collision);
				if (v_term.equal(cached_args.first())) {
				    cached_args = cached_args.rest();
				    if (sentence_group.equal(cached_args.first())) {
					cached_args = cached_args.rest();
					if (verbosity.equal(cached_args.first())) {
					    cached_args = cached_args.rest();
					    if (language_mt.equal(cached_args.first())) {
						cached_args = cached_args.rest();
						if (domain_mt.equal(cached_args.first())) {
						    cached_args = cached_args.rest();
						    if (sources.equal(cached_args.first())) {
							cached_args = cached_args.rest();
							if (((NIL != cached_args) && (NIL == cached_args.rest())) && demerit_cutoff.equal(cached_args.first())) {
							    return memoization_state.caching_results(results2);
							}
						    }
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
		{
		    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_group_summary_internal(v_term, sentence_group, verbosity, language_mt, domain_mt, sources, demerit_cutoff)));
		    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(v_term, sentence_group, verbosity, language_mt, domain_mt, sources, demerit_cutoff));
		    return memoization_state.caching_results(results);
		}
	    }
	}
    }

    public static SubLObject fact_sheet_sentence_group_summary(final SubLObject v_term, final SubLObject sentence_group, final SubLObject verbosity, final SubLObject language_mt, final SubLObject domain_mt, final SubLObject v_sources, SubLObject demerit_cutoff) {
	if (demerit_cutoff == UNPROVIDED) {
	    demerit_cutoff = fact_sheets.fact_sheet_pph_demerit_cutoff();
	}
	SubLObject caching_state = fact_sheets.$fact_sheet_sentence_group_summary_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.FACT_SHEET_SENTENCE_GROUP_SUMMARY, fact_sheets.$fact_sheet_sentence_group_summary_caching_state$, NIL, EQUAL, SEVEN_INTEGER, ZERO_INTEGER);
	}
	final SubLObject sxhash = memoization_state.sxhash_calc_7(v_term, sentence_group, verbosity, language_mt, domain_mt, v_sources, demerit_cutoff);
	final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
	if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    SubLObject cdolist_list_var = collisions;
	    SubLObject collision = NIL;
	    collision = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cached_args = collision.first();
		final SubLObject results2 = second(collision);
		if (v_term.equal(cached_args.first())) {
		    cached_args = cached_args.rest();
		    if (sentence_group.equal(cached_args.first())) {
			cached_args = cached_args.rest();
			if (verbosity.equal(cached_args.first())) {
			    cached_args = cached_args.rest();
			    if (language_mt.equal(cached_args.first())) {
				cached_args = cached_args.rest();
				if (domain_mt.equal(cached_args.first())) {
				    cached_args = cached_args.rest();
				    if (v_sources.equal(cached_args.first())) {
					cached_args = cached_args.rest();
					if (((NIL != cached_args) && (NIL == cached_args.rest())) && demerit_cutoff.equal(cached_args.first())) {
					    return memoization_state.caching_results(results2);
					}
				    }
				}
			    }
			}
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		collision = cdolist_list_var.first();
	    }
	}
	final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_sentence_group_summary_internal(v_term, sentence_group, verbosity, language_mt, domain_mt, v_sources, demerit_cutoff)));
	memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(v_term, sentence_group, verbosity, language_mt, domain_mt, v_sources, demerit_cutoff));
	return memoization_state.caching_results(results3);
    }

    public static final SubLObject simulate_fact_sheet_sentence_paraphrase_alt(SubLObject v_term, SubLObject sentence, SubLObject language_mt, SubLObject domain_mt) {
	if (language_mt == UNPROVIDED) {
	    language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject paraphrase = NIL;
		if (!((NIL != pph_error.$suspend_pph_type_checkingP$.getDynamicValue(thread)) || (NIL != pph_macros.valid_pph_demerit_cutoff_p(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_pph_demerit_cutoff())))) {
		    {
			SubLObject new_format_string = cconcatenate($str_alt434$_PPH_error_level_, new SubLObject[] { format_nil.format_nil_s_no_copy(ONE_INTEGER), $str_alt435$__,
				format_nil.format_nil_a_no_copy(cconcatenate(format_nil.format_nil_s_no_copy(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_pph_demerit_cutoff()), new SubLObject[] { $str_alt436$_is_not_a_, format_nil.format_nil_s_no_copy(VALID_PPH_DEMERIT_CUTOFF_P) })) });
			pph_error.pph_handle_error(new_format_string, list(EMPTY_SUBL_OBJECT_ARRAY));
		    }
		}
		{
		    SubLObject _prev_bind_0 = pph_vars.$pph_demerit_cutoff$.currentBinding(thread);
		    try {
			pph_vars.$pph_demerit_cutoff$.bind(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_pph_demerit_cutoff(), thread);
			paraphrase = pph_document.pph_summarize_term(v_term, list(sentence), language_mt, domain_mt, $HTML, NIL);
		    } finally {
			pph_vars.$pph_demerit_cutoff$.rebind(_prev_bind_0, thread);
		    }
		}
		return paraphrase;
	    }
	}
    }

    public static SubLObject simulate_fact_sheet_sentence_paraphrase(final SubLObject v_term, final SubLObject sentence, SubLObject language_mt, SubLObject domain_mt) {
	if (language_mt == UNPROVIDED) {
	    language_mt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	return fact_sheets.simulate_fact_sheet_sentences_paraphrase(v_term, list(sentence, language_mt, domain_mt), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject simulate_fact_sheet_sentences_paraphrase(final SubLObject v_term, final SubLObject sentences, SubLObject language_mt, SubLObject domain_mt) {
	if (language_mt == UNPROVIDED) {
	    language_mt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject _prev_bind_0 = pph_vars.$pph_demerit_cutoff$.currentBinding(thread);
	try {
	    pph_vars.$pph_demerit_cutoff$.bind(fact_sheets.fact_sheet_pph_demerit_cutoff(), thread);
	    return pph_document.pph_summarize_term(v_term, sentences, language_mt, domain_mt, $TEXT, NIL);
	} finally {
	    pph_vars.$pph_demerit_cutoff$.rebind(_prev_bind_0, thread);
	}
    }

    public static final SubLObject fact_sheet_bogus_hyperlink_open_tag_for_term_alt(SubLObject v_term, SubLObject term_id) {
	return NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_inappropriate_for_hyperlinkP(v_term) ? ((SubLObject) (NIL)) : com.cyc.cycjava.cycl.fact_sheets.fact_sheet_bogus_hyperlink_open_tag_for_term_id(term_id);
    }

    public static SubLObject fact_sheet_bogus_hyperlink_open_tag_for_term(final SubLObject v_term, final SubLObject term_id) {
	return NIL != fact_sheets.fact_sheet_term_inappropriate_for_hyperlinkP(v_term) ? NIL : fact_sheets.fact_sheet_bogus_hyperlink_open_tag_for_term_id(term_id);
    }

    public static final SubLObject fact_sheet_bogus_hyperlink_open_tag_for_term_id_alt(SubLObject term_id) {
	return cconcatenate($str_alt440$_a_href_, new SubLObject[] { format_nil.format_nil_s_no_copy(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_bogus_url_for_term_id(term_id)), $str_alt441$_ });
    }

    public static SubLObject fact_sheet_bogus_hyperlink_open_tag_for_term_id(final SubLObject term_id) {
	return cconcatenate(fact_sheets.$str280$_a_href_, new SubLObject[] { format_nil.format_nil_s_no_copy(fact_sheets.fact_sheet_bogus_url_for_term_id(term_id)), fact_sheets.$str281$_ });
    }

    public static final SubLObject fact_sheet_bogus_url_for_term_alt(SubLObject v_term) {
	return com.cyc.cycjava.cycl.fact_sheets.fact_sheet_bogus_url_for_term_id(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(v_term, UNPROVIDED));
    }

    public static SubLObject fact_sheet_bogus_url_for_term(final SubLObject v_term) {
	return fact_sheets.fact_sheet_bogus_url_for_term_id(fact_sheets.fact_sheet_term_id(v_term, UNPROVIDED));
    }

    public static final SubLObject fact_sheet_bogus_url_for_term_id_alt(SubLObject term_id) {
	return cconcatenate($fact_sheet_bogus_url_prefix$.getGlobalValue(), term_id);
    }

    public static SubLObject fact_sheet_bogus_url_for_term_id(final SubLObject term_id) {
	return cconcatenate(fact_sheets.$fact_sheet_bogus_url_prefix$.getGlobalValue(), term_id);
    }

    public static final SubLObject strip_bogus_hyperlinks_for_term_id_alt(SubLObject term_id, SubLObject filename) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject html = string_utilities.read_string_from_file(filename, UNPROVIDED, UNPROVIDED);
		SubLObject open_tag = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_bogus_hyperlink_open_tag_for_term_id(term_id);
		SubLObject open_tag_length = length(open_tag);
		SubLObject close_tag = html_macros.$html_anchor_tail$.getGlobalValue();
		SubLObject close_tag_length = length(close_tag);
		SubLObject open_tag_start = search(open_tag, html, symbol_function(EQUALP), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		SubLObject close_tag_start = (NIL != open_tag_start) ? ((SubLObject) (search(close_tag, html, symbol_function(EQUALP), symbol_function(IDENTITY), ZERO_INTEGER, NIL, add(open_tag_length, open_tag_start), UNPROVIDED))) : NIL;
		SubLObject modifiedP = NIL;
		while (NIL != close_tag_start) {
		    html = cconcatenate(string_utilities.substring(html, ZERO_INTEGER, open_tag_start), new SubLObject[] { string_utilities.substring(html, add(open_tag_start, open_tag_length), close_tag_start), string_utilities.substring(html, add(close_tag_start, close_tag_length), UNPROVIDED) });
		    open_tag_start = search(open_tag, html, symbol_function(EQUALP), symbol_function(IDENTITY), ZERO_INTEGER, NIL, add(close_tag_start, close_tag_length), UNPROVIDED);
		    close_tag_start = (NIL != open_tag_start) ? ((SubLObject) (search(close_tag, html, symbol_function(EQUALP), symbol_function(IDENTITY), ZERO_INTEGER, NIL, add(open_tag_length, open_tag_start), UNPROVIDED))) : NIL;
		    modifiedP = T;
		}
		if (NIL != modifiedP) {
		    {
			SubLObject error_message = NIL;
			if (NIL != $catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
			    try {
				{
				    SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
				    try {
					Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
					try {
					    {
						SubLObject stream = NIL;
						try {
						    stream = compatibility.open_text(filename, $OUTPUT, NIL);
						    if (!stream.isStream()) {
							Errors.error($str_alt137$Unable_to_open__S, filename);
						    }
						    {
							SubLObject stream_85 = stream;
							princ(html, stream_85);
						    }
						} finally {
						    {
							SubLObject _prev_bind_0_86 = $is_thread_performing_cleanupP$.currentBinding(thread);
							try {
							    $is_thread_performing_cleanupP$.bind(T, thread);
							    if (stream.isStream()) {
								close(stream, UNPROVIDED);
							    }
							} finally {
							    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_86, thread);
							}
						    }
						}
					    }
					    if (NIL != $chmod_safe_to_useP$.getDynamicValue(thread)) {
						file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), $$$664);
					    }
					} catch (Throwable catch_var) {
					    Errors.handleThrowable(catch_var, NIL);
					}
				    } finally {
					Errors.$error_handler$.rebind(_prev_bind_0, thread);
				    }
				}
			    } catch (Throwable ccatch_env_var) {
				error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
			    }
			} else {
			    {
				SubLObject stream = NIL;
				try {
				    stream = compatibility.open_text(filename, $OUTPUT, NIL);
				    if (!stream.isStream()) {
					Errors.error($str_alt137$Unable_to_open__S, filename);
				    }
				    {
					SubLObject stream_87 = stream;
					princ(html, stream_87);
				    }
				} finally {
				    {
					SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
					try {
					    $is_thread_performing_cleanupP$.bind(T, thread);
					    if (stream.isStream()) {
						close(stream, UNPROVIDED);
					    }
					} finally {
					    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
					}
				    }
				}
				if (NIL != $chmod_safe_to_useP$.getDynamicValue(thread)) {
				    file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), $$$664);
				}
			    }
			}
		    }
		}
		return modifiedP;
	    }
	}
    }

    public static SubLObject strip_bogus_hyperlinks_for_term_id(final SubLObject term_id, final SubLObject filename) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject html = string_utilities.read_string_from_file(filename, UNPROVIDED, UNPROVIDED);
	final SubLObject open_tag = fact_sheets.fact_sheet_bogus_hyperlink_open_tag_for_term_id(term_id);
	final SubLObject open_tag_length = length(open_tag);
	final SubLObject close_tag = html_macros.$html_anchor_tail$.getGlobalValue();
	final SubLObject close_tag_length = length(close_tag);
	SubLObject open_tag_start = search(open_tag, html, symbol_function(EQUALP), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	SubLObject close_tag_start = (NIL != open_tag_start) ? search(close_tag, html, symbol_function(EQUALP), symbol_function(IDENTITY), ZERO_INTEGER, NIL, add(open_tag_length, open_tag_start), UNPROVIDED) : NIL;
	SubLObject modifiedP = NIL;
	while (NIL != close_tag_start) {
	    html = cconcatenate(string_utilities.substring(html, ZERO_INTEGER, open_tag_start), new SubLObject[] { string_utilities.substring(html, add(open_tag_start, open_tag_length), close_tag_start), string_utilities.substring(html, add(close_tag_start, close_tag_length), UNPROVIDED) });
	    open_tag_start = search(open_tag, html, symbol_function(EQUALP), symbol_function(IDENTITY), ZERO_INTEGER, NIL, add(close_tag_start, close_tag_length), UNPROVIDED);
	    close_tag_start = (NIL != open_tag_start) ? search(close_tag, html, symbol_function(EQUALP), symbol_function(IDENTITY), ZERO_INTEGER, NIL, add(open_tag_length, open_tag_start), UNPROVIDED) : NIL;
	    modifiedP = T;
	}
	if (NIL != modifiedP) {
	    SubLObject error_message = NIL;
	    if (NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
		try {
		    thread.throwStack.push($catch_error_message_target$.getGlobalValue());
		    final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
		    try {
			Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
			try {
			    SubLObject stream = NIL;
			    try {
				stream = compatibility.open_text(filename, $OUTPUT);
				if (!stream.isStream()) {
				    Errors.error(fact_sheets.$str284$Unable_to_open__S, filename);
				}
				final SubLObject stream_$71 = stream;
				princ(html, stream_$71);
			    } finally {
				final SubLObject _prev_bind_0_$72 = $is_thread_performing_cleanupP$.currentBinding(thread);
				try {
				    $is_thread_performing_cleanupP$.bind(T, thread);
				    final SubLObject _values = getValuesAsVector();
				    if (stream.isStream()) {
					close(stream, UNPROVIDED);
				    }
				    restoreValuesFromVector(_values);
				} finally {
				    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$72, thread);
				}
			    }
			    if (NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
				file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), fact_sheets.$$$664);
			    }
			} catch (final Throwable catch_var) {
			    Errors.handleThrowable(catch_var, NIL);
			}
		    } finally {
			Errors.$error_handler$.rebind(_prev_bind_0, thread);
		    }
		} catch (final Throwable ccatch_env_var) {
		    error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
		} finally {
		    thread.throwStack.pop();
		}
	    } else {
		SubLObject stream2 = NIL;
		try {
		    stream2 = compatibility.open_text(filename, $OUTPUT);
		    if (!stream2.isStream()) {
			Errors.error(fact_sheets.$str284$Unable_to_open__S, filename);
		    }
		    final SubLObject stream_$72 = stream2;
		    princ(html, stream_$72);
		} finally {
		    final SubLObject _prev_bind_2 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values2 = getValuesAsVector();
			if (stream2.isStream()) {
			    close(stream2, UNPROVIDED);
			}
			restoreValuesFromVector(_values2);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
		    }
		}
		if (NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
		    file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), fact_sheets.$$$664);
		}
	    }
	}
	return modifiedP;
    }

    public static final SubLObject fact_sheet_html_find_marked_up_terms_alt(SubLObject html, SubLObject include_sentencesP) {
	if (include_sentencesP == UNPROVIDED) {
	    include_sentencesP = T;
	}
	{
	    SubLObject ans = NIL;
	    SubLObject prefix = NIL;
	    SubLObject prefix_88 = NIL;
	    SubLObject close_tag = NIL;
	    SubLObject close_tag_89 = NIL;
	    SubLObject term_lookup_fn = NIL;
	    SubLObject term_lookup_fn_90 = NIL;
	    for (prefix = $list_alt445, prefix_88 = prefix.first(), close_tag = list(html_macros.$html_anchor_tail$.getGlobalValue(), html_macros.$html_anchor_tail$.getGlobalValue(), html_macros.$html_span_tail$.getGlobalValue(),
		    html_macros.$html_anchor_tail$.getGlobalValue()), close_tag_89 = close_tag.first(), term_lookup_fn = $list_alt446, term_lookup_fn_90 = term_lookup_fn.first(); !(((NIL == term_lookup_fn) && (NIL == close_tag))
			    && (NIL == prefix)); prefix = prefix.rest(), prefix_88 = prefix.first(), close_tag = close_tag.rest(), close_tag_89 = close_tag.first(), term_lookup_fn = term_lookup_fn.rest(), term_lookup_fn_90 = term_lookup_fn.first()) {
		{
		    SubLObject prefix_length = length(prefix_88);
		    SubLObject close_tag_length = length(close_tag_89);
		    SubLObject start_positions = string_utilities.search_all(prefix_88, html, UNPROVIDED, UNPROVIDED);
		    SubLObject cdolist_list_var = start_positions;
		    SubLObject start_position = NIL;
		    for (start_position = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), start_position = cdolist_list_var.first()) {
			{
			    SubLObject term_id_start = add(prefix_length, start_position);
			    SubLObject term_id_end = position(CHAR_quotation, html, symbol_function(EQL), symbol_function(IDENTITY), term_id_start, UNPROVIDED);
			    SubLObject term_id = string_utilities.substring(html, term_id_start, term_id_end);
			    SubLObject term_from_id = funcall(term_lookup_fn_90, term_id);
			    SubLObject v_term = (NIL != term_from_id) ? ((SubLObject) (term_from_id)) : $UNKNOWN;
			    SubLObject close_tag_start = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_html_find_matching_close_tag_start(html, close_tag_89, term_id_end, start_positions);
			    SubLObject end_position = add(close_tag_start, close_tag_length);
			    SubLObject link_text = string_utilities.substring(html, start_position, end_position);
			    SubLObject open_tag_end = position(CHAR_greater, html, symbol_function(EQL), symbol_function(IDENTITY), term_id_end, UNPROVIDED);
			    SubLObject linked_text_start = number_utilities.f_1X(open_tag_end);
			    SubLObject linked_text = string_utilities.substring(html, linked_text_start, close_tag_start);
			    if ((NIL == cycl_grammar.cycl_sentence_p(v_term)) || (NIL != include_sentencesP)) {
				if ($UNKNOWN.eql(v_term) && (NIL != cycl_grammar.cycl_denotational_term_p(v_term))) {
				    {
					SubLObject denots = lexicon_accessors.denots_of_string(linked_text, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
					SubLObject found_itP = NIL;
					if (NIL == found_itP) {
					    {
						SubLObject csome_list_var = denots;
						SubLObject denot = NIL;
						for (denot = csome_list_var.first(); !((NIL != found_itP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), denot = csome_list_var.first()) {
						    if (term_id.equal(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(denot, UNPROVIDED))) {
							com.cyc.cycjava.cycl.fact_sheets.ensure_fact_sheet_term_id_indexed(denot, term_id);
							v_term = denot;
							found_itP = T;
						    }
						}
					    }
					}
				    }
				}
				ans = cons(list(start_position, end_position, v_term, link_text, linked_text), ans);
			    }
			}
		    }
		}
	    }
	    return ans;
	}
    }

    public static SubLObject fact_sheet_html_find_marked_up_terms(final SubLObject html, SubLObject include_sentencesP) {
	if (include_sentencesP == UNPROVIDED) {
	    include_sentencesP = T;
	}
	SubLObject ans = NIL;
	SubLObject prefix = NIL;
	SubLObject prefix_$74 = NIL;
	SubLObject close_tag = NIL;
	SubLObject close_tag_$75 = NIL;
	SubLObject term_lookup_fn = NIL;
	SubLObject term_lookup_fn_$76 = NIL;
	prefix = fact_sheets.$list286;
	prefix_$74 = prefix.first();
	close_tag = list(html_macros.$html_anchor_tail$.getGlobalValue(), html_macros.$html_anchor_tail$.getGlobalValue(), html_macros.$html_span_tail$.getGlobalValue(), html_macros.$html_anchor_tail$.getGlobalValue());
	close_tag_$75 = close_tag.first();
	term_lookup_fn = fact_sheets.$list287;
	term_lookup_fn_$76 = term_lookup_fn.first();
	while (((NIL != term_lookup_fn) || (NIL != close_tag)) || (NIL != prefix)) {
	    final SubLObject prefix_length = length(prefix_$74);
	    final SubLObject close_tag_length = length(close_tag_$75);
	    SubLObject cdolist_list_var;
	    final SubLObject start_positions = cdolist_list_var = string_utilities.search_all(prefix_$74, html, UNPROVIDED, UNPROVIDED);
	    SubLObject start_position = NIL;
	    start_position = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		final SubLObject term_id_start = add(prefix_length, start_position);
		final SubLObject term_id_end = position(CHAR_quotation, html, symbol_function(EQL), symbol_function(IDENTITY), term_id_start, UNPROVIDED);
		final SubLObject term_id = string_utilities.substring(html, term_id_start, term_id_end);
		final SubLObject term_from_id = funcall(term_lookup_fn_$76, term_id);
		SubLObject v_term = (NIL != term_from_id) ? term_from_id : $UNKNOWN;
		final SubLObject close_tag_start = fact_sheets.fact_sheet_html_find_matching_close_tag_start(html, close_tag_$75, term_id_end, start_positions);
		final SubLObject end_position = add(close_tag_start, close_tag_length);
		final SubLObject link_text = string_utilities.substring(html, start_position, end_position);
		final SubLObject open_tag_end = position(CHAR_greater, html, symbol_function(EQL), symbol_function(IDENTITY), term_id_end, UNPROVIDED);
		final SubLObject linked_text_start = number_utilities.f_1X(open_tag_end);
		final SubLObject linked_text = string_utilities.substring(html, linked_text_start, close_tag_start);
		if ((NIL == cycl_grammar.cycl_sentence_p(v_term)) || (NIL != include_sentencesP)) {
		    if ($UNKNOWN.eql(v_term) && (NIL != cycl_grammar.cycl_denotational_term_p(v_term))) {
			final SubLObject denots = lexicon_accessors.denots_of_string(linked_text, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
			SubLObject found_itP = NIL;
			if (NIL == found_itP) {
			    SubLObject csome_list_var = denots;
			    SubLObject denot = NIL;
			    denot = csome_list_var.first();
			    while ((NIL == found_itP) && (NIL != csome_list_var)) {
				if (term_id.equal(fact_sheets.fact_sheet_term_id(denot, UNPROVIDED))) {
				    v_term = denot;
				    found_itP = T;
				}
				csome_list_var = csome_list_var.rest();
				denot = csome_list_var.first();
			    }
			}
		    }
		    ans = cons(list(start_position, end_position, v_term, link_text, linked_text), ans);
		}
		cdolist_list_var = cdolist_list_var.rest();
		start_position = cdolist_list_var.first();
	    }
	    prefix = prefix.rest();
	    prefix_$74 = prefix.first();
	    close_tag = close_tag.rest();
	    close_tag_$75 = close_tag.first();
	    term_lookup_fn = term_lookup_fn.rest();
	    term_lookup_fn_$76 = term_lookup_fn.first();
	}
	return ans;
    }

    /**
     * returns its output in a form appropriate for REPLACE-FACT-SHEET-MARKUPS-FAST, and should be faster than
     * FACT-SHEET-HTML-FIND-MARKED-UP-TERMS
     */
    @LispMethod(comment = "returns its output in a form appropriate for REPLACE-FACT-SHEET-MARKUPS-FAST, and should be faster than\r\nFACT-SHEET-HTML-FIND-MARKED-UP-TERMS\nreturns its output in a form appropriate for REPLACE-FACT-SHEET-MARKUPS-FAST, and should be faster than\nFACT-SHEET-HTML-FIND-MARKED-UP-TERMS")
    public static final SubLObject fact_sheet_html_find_marked_up_terms_fast_alt(SubLObject tokenized_html, SubLObject include_sentencesP) {
	if (include_sentencesP == UNPROVIDED) {
	    include_sentencesP = T;
	}
	{
	    SubLObject ans = NIL;
	    SubLObject unclosed_tags = NIL;
	    SubLObject list_var = NIL;
	    SubLObject token = NIL;
	    SubLObject token_index = NIL;
	    for (list_var = tokenized_html, token = list_var.first(), token_index = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), token = list_var.first(), token_index = add(ONE_INTEGER, token_index)) {
		if ((NIL != string_utilities.starts_with(token, $str_alt447$_a)) || (NIL != string_utilities.starts_with(token, $str_alt448$_span))) {
		    {
			SubLObject datum = com.cyc.cycjava.cycl.fact_sheets.get_term_and_close_tag_from_token(token);
			SubLObject current = datum;
			SubLObject v_term = NIL;
			SubLObject close_tag = NIL;
			destructuring_bind_must_consp(current, datum, $list_alt449);
			v_term = current.first();
			current = current.rest();
			destructuring_bind_must_consp(current, datum, $list_alt449);
			close_tag = current.first();
			current = current.rest();
			if (NIL == current) {
			    unclosed_tags = cons(list(token, token_index, v_term, close_tag), unclosed_tags);
			} else {
			    cdestructuring_bind_error(datum, $list_alt449);
			}
		    }
		}
		if ((NIL != unclosed_tags) && ((NIL != string_utilities.starts_with(token, $str_alt450$__a)) || (NIL != string_utilities.starts_with(token, $str_alt451$__span)))) {
		    {
			SubLObject start_token_data = unclosed_tags.first();
			unclosed_tags = unclosed_tags.rest();
			{
			    SubLObject datum = start_token_data;
			    SubLObject current = datum;
			    SubLObject start_token = NIL;
			    SubLObject start_token_index = NIL;
			    SubLObject v_term = NIL;
			    SubLObject close_tag = NIL;
			    destructuring_bind_must_consp(current, datum, $list_alt452);
			    start_token = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt452);
			    start_token_index = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt452);
			    v_term = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt452);
			    close_tag = current.first();
			    current = current.rest();
			    if (NIL == current) {
				if (close_tag.equal(token)) {
				    {
					SubLObject linked_text_tokens = subseq(tokenized_html, add(ONE_INTEGER, start_token_index), token_index);
					if ((v_term != $DONT_REPLACE) && ((NIL == cycl_grammar.cycl_sentence_p(v_term)) || (NIL != include_sentencesP))) {
					    ans = cons(list(start_token, start_token_index, linked_text_tokens, token, token_index, v_term), ans);
					}
				    }
				} else {
				    Errors.warn($str_alt454$close_tag__S_and_current_tag__S_d, close_tag, token);
				}
			    } else {
				cdestructuring_bind_error(datum, $list_alt452);
			    }
			}
		    }
		}
	    }
	    return ans;
	}
    }

    @LispMethod(comment = "returns its output in a form appropriate for REPLACE-FACT-SHEET-MARKUPS-FAST, and should be faster than\r\nFACT-SHEET-HTML-FIND-MARKED-UP-TERMS\nreturns its output in a form appropriate for REPLACE-FACT-SHEET-MARKUPS-FAST, and should be faster than\nFACT-SHEET-HTML-FIND-MARKED-UP-TERMS")
    public static SubLObject fact_sheet_html_find_marked_up_terms_fast(final SubLObject tokenized_html, SubLObject include_sentencesP) {
	if (include_sentencesP == UNPROVIDED) {
	    include_sentencesP = T;
	}
	SubLObject ans = NIL;
	SubLObject unclosed_tags = NIL;
	SubLObject list_var = NIL;
	SubLObject token = NIL;
	SubLObject token_index = NIL;
	list_var = tokenized_html;
	token = list_var.first();
	for (token_index = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), token = list_var.first(), token_index = add(ONE_INTEGER, token_index)) {
	    if ((NIL != string_utilities.starts_with(token, fact_sheets.$str288$_a)) || (NIL != string_utilities.starts_with(token, fact_sheets.$str289$_span))) {
		SubLObject current;
		final SubLObject datum = current = fact_sheets.get_term_and_close_tag_from_token(token);
		SubLObject v_term = NIL;
		SubLObject close_tag = NIL;
		destructuring_bind_must_consp(current, datum, fact_sheets.$list290);
		v_term = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, fact_sheets.$list290);
		close_tag = current.first();
		current = current.rest();
		if (NIL == current) {
		    unclosed_tags = cons(list(token, token_index, v_term, close_tag), unclosed_tags);
		} else {
		    cdestructuring_bind_error(datum, fact_sheets.$list290);
		}
	    }
	    if ((NIL != unclosed_tags) && ((NIL != string_utilities.starts_with(token, fact_sheets.$str291$__a)) || (NIL != string_utilities.starts_with(token, fact_sheets.$str292$__span)))) {
		final SubLObject start_token_data = unclosed_tags.first();
		unclosed_tags = unclosed_tags.rest();
		SubLObject current2;
		final SubLObject datum2 = current2 = start_token_data;
		SubLObject start_token = NIL;
		SubLObject start_token_index = NIL;
		SubLObject v_term2 = NIL;
		SubLObject close_tag2 = NIL;
		destructuring_bind_must_consp(current2, datum2, fact_sheets.$list293);
		start_token = current2.first();
		current2 = current2.rest();
		destructuring_bind_must_consp(current2, datum2, fact_sheets.$list293);
		start_token_index = current2.first();
		current2 = current2.rest();
		destructuring_bind_must_consp(current2, datum2, fact_sheets.$list293);
		v_term2 = current2.first();
		current2 = current2.rest();
		destructuring_bind_must_consp(current2, datum2, fact_sheets.$list293);
		close_tag2 = current2.first();
		current2 = current2.rest();
		if (NIL == current2) {
		    if (close_tag2.equal(token)) {
			final SubLObject linked_text_tokens = subseq(tokenized_html, add(ONE_INTEGER, start_token_index), token_index);
			if ((v_term2 != $DONT_REPLACE) && ((NIL == cycl_grammar.cycl_sentence_p(v_term2)) || (NIL != include_sentencesP))) {
			    ans = cons(list(start_token, start_token_index, linked_text_tokens, token, token_index, v_term2), ans);
			}
		    } else {
			Errors.warn(fact_sheets.$str295$close_tag__S_and_current_tag__S_d, close_tag2, token);
		    }
		} else {
		    cdestructuring_bind_error(datum2, fact_sheets.$list293);
		}
	    }
	}
	return ans;
    }

    /**
    * returns its output in a form appropriate for REPLACE-FACT-SHEET-MARKUPS-FAST, and should be faster than
    * FACT-SHEET-HTML-FIND-MARKED-UP-TERMS
    */

    public static final SubLObject get_term_and_close_tag_from_token_alt(SubLObject html_token) {
	{
	    SubLObject prefix = NIL;
	    SubLObject prefix_91 = NIL;
	    SubLObject close_tag = NIL;
	    SubLObject close_tag_92 = NIL;
	    SubLObject term_lookup_fn = NIL;
	    SubLObject term_lookup_fn_93 = NIL;
	    for (prefix = $list_alt445, prefix_91 = prefix.first(), close_tag = list(html_macros.$html_anchor_tail$.getGlobalValue(), html_macros.$html_anchor_tail$.getGlobalValue(), html_macros.$html_span_tail$.getGlobalValue(),
		    html_macros.$html_anchor_tail$.getGlobalValue()), close_tag_92 = close_tag.first(), term_lookup_fn = $list_alt446, term_lookup_fn_93 = term_lookup_fn.first(); !(((NIL == term_lookup_fn) && (NIL == close_tag))
			    && (NIL == prefix)); prefix = prefix.rest(), prefix_91 = prefix.first(), close_tag = close_tag.rest(), close_tag_92 = close_tag.first(), term_lookup_fn = term_lookup_fn.rest(), term_lookup_fn_93 = term_lookup_fn.first()) {
		if (NIL != string_utilities.starts_with(html_token, prefix_91)) {
		    {
			SubLObject term_id_end = position(CHAR_quotation, html_token, symbol_function(EQL), symbol_function(IDENTITY), length(prefix_91), UNPROVIDED);
			SubLObject term_id = string_utilities.substring(html_token, length(prefix_91), term_id_end);
			SubLObject term_from_id = funcall(term_lookup_fn_93, term_id);
			SubLObject v_term = (NIL != term_from_id) ? ((SubLObject) (term_from_id)) : $UNKNOWN;
			return list(v_term, close_tag_92);
		    }
		}
	    }
	}
	{
	    SubLObject space_pos = position(CHAR_space, html_token, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	    SubLObject name_end = (NIL != space_pos) ? ((SubLObject) (space_pos)) : subtract(length(html_token), ONE_INTEGER);
	    SubLObject name = subseq(html_token, ONE_INTEGER, name_end);
	    SubLObject close_tag = cconcatenate($str_alt455$__, new SubLObject[] { format_nil.format_nil_a_no_copy(name), $str_alt441$_ });
	    return list($DONT_REPLACE, close_tag);
	}
    }

    public static SubLObject get_term_and_close_tag_from_token(final SubLObject html_token) {
	SubLObject prefix = NIL;
	SubLObject prefix_$77 = NIL;
	SubLObject close_tag = NIL;
	SubLObject close_tag_$78 = NIL;
	SubLObject term_lookup_fn = NIL;
	SubLObject term_lookup_fn_$79 = NIL;
	prefix = fact_sheets.$list286;
	prefix_$77 = prefix.first();
	close_tag = list(html_macros.$html_anchor_tail$.getGlobalValue(), html_macros.$html_anchor_tail$.getGlobalValue(), html_macros.$html_span_tail$.getGlobalValue(), html_macros.$html_anchor_tail$.getGlobalValue());
	close_tag_$78 = close_tag.first();
	term_lookup_fn = fact_sheets.$list287;
	term_lookup_fn_$79 = term_lookup_fn.first();
	while (((NIL != term_lookup_fn) || (NIL != close_tag)) || (NIL != prefix)) {
	    if (NIL != string_utilities.starts_with(html_token, prefix_$77)) {
		final SubLObject term_id_end = position(CHAR_quotation, html_token, symbol_function(EQL), symbol_function(IDENTITY), length(prefix_$77), UNPROVIDED);
		final SubLObject term_id = string_utilities.substring(html_token, length(prefix_$77), term_id_end);
		final SubLObject term_from_id = funcall(term_lookup_fn_$79, term_id);
		final SubLObject v_term = (NIL != term_from_id) ? term_from_id : $UNKNOWN;
		return list(v_term, close_tag_$78);
	    }
	    prefix = prefix.rest();
	    prefix_$77 = prefix.first();
	    close_tag = close_tag.rest();
	    close_tag_$78 = close_tag.first();
	    term_lookup_fn = term_lookup_fn.rest();
	    term_lookup_fn_$79 = term_lookup_fn.first();
	}
	final SubLObject space_pos = position(CHAR_space, html_token, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	final SubLObject name_end = (NIL != space_pos) ? space_pos : subtract(length(html_token), ONE_INTEGER);
	final SubLObject name = subseq(html_token, ONE_INTEGER, name_end);
	final SubLObject close_tag2 = cconcatenate(fact_sheets.$str296$__, new SubLObject[] { format_nil.format_nil_a_no_copy(name), fact_sheets.$str281$_ });
	return list($DONT_REPLACE, close_tag2);
    }

    public static final SubLObject fact_sheet_html_find_matching_close_tag_start_alt(SubLObject html, SubLObject close_tag, SubLObject term_id_end, SubLObject start_positions) {
	{
	    SubLObject next_close_tag_start = search(close_tag, html, symbol_function(EQUALP), symbol_function(IDENTITY), ZERO_INTEGER, NIL, term_id_end, NIL);
	    SubLObject intervening_count = ZERO_INTEGER;
	    SubLObject matching_close_tag_start = NIL;
	    if (NIL == matching_close_tag_start) {
		{
		    SubLObject csome_list_var = start_positions;
		    SubLObject start_position = NIL;
		    for (start_position = csome_list_var.first(); !((NIL != matching_close_tag_start) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), start_position = csome_list_var.first()) {
			if (start_position.numL(term_id_end)) {
			} else {
			    if (start_position.numL(next_close_tag_start)) {
				intervening_count = add(intervening_count, ONE_INTEGER);
			    } else {
				if (intervening_count.isZero()) {
				    matching_close_tag_start = next_close_tag_start;
				} else {
				    next_close_tag_start = search(close_tag, html, symbol_function(EQUALP), symbol_function(IDENTITY), ZERO_INTEGER, NIL, add(next_close_tag_start, length(close_tag)), NIL);
				    intervening_count = subtract(intervening_count, ONE_INTEGER);
				}
			    }
			}
		    }
		}
	    }
	    if (NIL != matching_close_tag_start) {
	    } else {
		if (intervening_count.isZero()) {
		    matching_close_tag_start = next_close_tag_start;
		} else {
		    if (intervening_count.eql(ONE_INTEGER)) {
			next_close_tag_start = search(close_tag, html, symbol_function(EQUALP), symbol_function(IDENTITY), ZERO_INTEGER, NIL, add(next_close_tag_start, length(close_tag)), NIL);
			matching_close_tag_start = next_close_tag_start;
		    }
		}
	    }
	    return matching_close_tag_start;
	}
    }

    public static SubLObject fact_sheet_html_find_matching_close_tag_start(final SubLObject html, final SubLObject close_tag, final SubLObject term_id_end, final SubLObject start_positions) {
	SubLObject next_close_tag_start = search(close_tag, html, symbol_function(EQUALP), symbol_function(IDENTITY), ZERO_INTEGER, NIL, term_id_end, NIL);
	SubLObject intervening_count = ZERO_INTEGER;
	SubLObject matching_close_tag_start = NIL;
	if (NIL == matching_close_tag_start) {
	    SubLObject csome_list_var = start_positions;
	    SubLObject start_position = NIL;
	    start_position = csome_list_var.first();
	    while ((NIL == matching_close_tag_start) && (NIL != csome_list_var)) {
		if (!start_position.numL(term_id_end)) {
		    if (start_position.numL(next_close_tag_start)) {
			intervening_count = add(intervening_count, ONE_INTEGER);
		    } else if (intervening_count.isZero()) {
			matching_close_tag_start = next_close_tag_start;
		    } else {
			next_close_tag_start = search(close_tag, html, symbol_function(EQUALP), symbol_function(IDENTITY), ZERO_INTEGER, NIL, add(next_close_tag_start, length(close_tag)), NIL);
			intervening_count = subtract(intervening_count, ONE_INTEGER);
		    }

		}
		csome_list_var = csome_list_var.rest();
		start_position = csome_list_var.first();
	    }
	}
	if (NIL == matching_close_tag_start) {
	    if (intervening_count.isZero()) {
		matching_close_tag_start = next_close_tag_start;
	    } else if (intervening_count.eql(ONE_INTEGER)) {
		next_close_tag_start = matching_close_tag_start = search(close_tag, html, symbol_function(EQUALP), symbol_function(IDENTITY), ZERO_INTEGER, NIL, add(next_close_tag_start, length(close_tag)), NIL);
	    }

	}
	return matching_close_tag_start;
    }

    public static final SubLObject fact_sheet_term_inappropriate_for_hyperlinkP_alt(SubLObject v_term) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    return makeBoolean((v_term == $fact_sheet_focal_term$.getDynamicValue(thread)) || (NIL == com.cyc.cycjava.cycl.fact_sheets.term_ok_for_fact_sheet_p(v_term, UNPROVIDED)));
	}
    }

    public static SubLObject fact_sheet_term_inappropriate_for_hyperlinkP(final SubLObject v_term) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	return makeBoolean(v_term.eql(fact_sheets.$fact_sheet_focal_term$.getDynamicValue(thread)) || (NIL == fact_sheets.term_ok_for_fact_sheet_p(v_term, UNPROVIDED)));
    }

    public static final SubLObject mark_up_fact_sheet_sentenceP_alt(SubLObject sentence, SubLObject v_properties) {
	if (NIL != getf(v_properties, $STYLESHEET, NIL)) {
	    return T;
	}
	return T;
    }

    public static SubLObject mark_up_fact_sheet_sentenceP(final SubLObject sentence, final SubLObject v_properties) {
	if (NIL != getf(v_properties, $STYLESHEET, NIL)) {
	    return T;
	}
	return T;
    }

    /**
     *
     *
     * @unknown called from PPH-SUMMARIZE-TERM.
     */
    @LispMethod(comment = "@unknown called from PPH-SUMMARIZE-TERM.")
    public static final SubLObject fact_sheet_possibly_mark_up_sentence_paraphrase_alt(SubLObject sentence, SubLObject paraphrase, SubLObject v_properties) {
	if (NIL != com.cyc.cycjava.cycl.fact_sheets.mark_up_fact_sheet_sentenceP(sentence, v_properties)) {
	    return com.cyc.cycjava.cycl.fact_sheets.fact_sheet_mark_up_sentence_paraphrase(sentence, paraphrase, v_properties);
	} else {
	    return paraphrase;
	}
    }

    /**
     *
     *
     * @unknown called from PPH-SUMMARIZE-TERM.
     */
    @LispMethod(comment = "@unknown called from PPH-SUMMARIZE-TERM.")
    public static SubLObject fact_sheet_possibly_mark_up_sentence_paraphrase(final SubLObject sentence, final SubLObject paraphrase, final SubLObject v_properties) {
	if (NIL != fact_sheets.mark_up_fact_sheet_sentenceP(sentence, v_properties)) {
	    return fact_sheets.fact_sheet_mark_up_sentence_paraphrase(sentence, paraphrase, v_properties);
	}
	return paraphrase;
    }

    public static final SubLObject fact_sheet_mark_up_sentence_paraphrase_alt(SubLObject sentence, SubLObject paraphrase, SubLObject v_properties) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject new_string = NIL;
		SubLObject id_function = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_id_function(v_properties);
		SubLObject expanded_sentence = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_expand_coordination_sets(sentence);
		SubLObject id_string = funcall(id_function, expanded_sentence);
		if (NIL != assertion_handles.assertion_p(expanded_sentence)) {
		    expanded_sentence = uncanonicalizer.assertion_el_ist_formula(expanded_sentence);
		}
		if (NIL != com.cyc.cycjava.cycl.fact_sheets.xml_factsheetsP(v_properties)) {
		    {
			SubLObject stream = NIL;
			try {
			    stream = make_private_string_output_stream();
			    {
				SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
				try {
				    xml_vars.$xml_stream$.bind(stream, thread);
				    {
					SubLObject name_var = $$$sentence;
					xml_utilities.xml_start_tag_internal(name_var, list($$$id, id_string, $$$cycl, expanded_sentence), NIL);
					xml_utilities.xml_write_wXescaped_special_chars(com.cyc.cycjava.cycl.fact_sheets.replace_fact_sheet_markups(paraphrase, REMOVE_LINK, UNPROVIDED));
					xml_utilities.xml_end_tag_internal(name_var);
				    }
				} finally {
				    xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
				}
			    }
			    new_string = get_output_stream_string(stream);
			} finally {
			    {
				SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
				try {
				    $is_thread_performing_cleanupP$.bind(T, thread);
				    close(stream, UNPROVIDED);
				} finally {
				    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
				}
			    }
			}
		    }
		} else {
		    {
			SubLObject stream = NIL;
			try {
			    stream = make_private_string_output_stream();
			    {
				SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
				try {
				    html_macros.$html_stream$.bind(stream, thread);
				    html_markup(html_macros.$html_span_head$.getGlobalValue());
				    if (NIL != id_string) {
					html_markup(html_macros.$html_attribute_id$.getGlobalValue());
					html_char(CHAR_quotation, UNPROVIDED);
					html_markup(id_string);
					html_char(CHAR_quotation, UNPROVIDED);
				    }
				    if (true) {
					html_markup(html_macros.$html_attribute_class$.getGlobalValue());
					html_char(CHAR_quotation, UNPROVIDED);
					html_markup($str_alt244$fact_sheet_sentence);
					html_char(CHAR_quotation, UNPROVIDED);
				    }
				    html_char(CHAR_greater, UNPROVIDED);
				    {
					SubLObject _prev_bind_0_94 = html_macros.$html_safe_print$.currentBinding(thread);
					SubLObject _prev_bind_1 = html_macros.$html_safe_print$.currentBinding(thread);
					try {
					    html_macros.$html_safe_print$.bind(T, thread);
					    html_macros.$html_safe_print$.bind(NIL, thread);
					    html_princ(paraphrase);
					} finally {
					    html_macros.$html_safe_print$.rebind(_prev_bind_1, thread);
					    html_macros.$html_safe_print$.rebind(_prev_bind_0_94, thread);
					}
				    }
				    html_markup(html_macros.$html_span_tail$.getGlobalValue());
				} finally {
				    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
				}
			    }
			    new_string = get_output_stream_string(stream);
			} finally {
			    {
				SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
				try {
				    $is_thread_performing_cleanupP$.bind(T, thread);
				    close(stream, UNPROVIDED);
				} finally {
				    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
				}
			    }
			}
		    }
		}
		return new_string;
	    }
	}
    }

    public static SubLObject fact_sheet_mark_up_sentence_paraphrase(final SubLObject sentence, final SubLObject paraphrase, final SubLObject v_properties) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject new_string = NIL;
	final SubLObject id_function = fact_sheets.fact_sheet_sentence_id_function(v_properties);
	SubLObject expanded_sentence = fact_sheets.fact_sheet_sentence_expand_coordination_sets(sentence);
	final SubLObject id_string = funcall(id_function, expanded_sentence);
	if (NIL != assertion_handles.assertion_p(expanded_sentence)) {
	    expanded_sentence = uncanonicalizer.assertion_el_ist_formula(expanded_sentence);
	}
	if (NIL != fact_sheets.xml_factsheetsP(v_properties)) {
	    SubLObject stream = NIL;
	    try {
		stream = make_private_string_output_stream();
		final SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
		try {
		    xml_vars.$xml_stream$.bind(stream, thread);
		    final SubLObject name_var = fact_sheets.$$$sentence;
		    xml_utilities.xml_start_tag_internal(name_var, list(fact_sheets.$$$id, id_string, fact_sheets.$$$cycl, expanded_sentence), NIL, UNPROVIDED, UNPROVIDED);
		    xml_utilities.xml_write_wXescaped_special_chars(fact_sheets.replace_fact_sheet_markups(paraphrase, fact_sheets.REMOVE_LINK, UNPROVIDED));
		    xml_utilities.xml_end_tag_internal(name_var);
		} finally {
		    xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
		}
		new_string = get_output_stream_string(stream);
	    } finally {
		final SubLObject _prev_bind_2 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values = getValuesAsVector();
		    close(stream, UNPROVIDED);
		    restoreValuesFromVector(_values);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
		}
	    }
	} else {
	    SubLObject stream = NIL;
	    try {
		stream = make_private_string_output_stream();
		final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
		try {
		    html_macros.$html_stream$.bind(stream, thread);
		    html_markup(html_macros.$html_span_head$.getGlobalValue());
		    if (NIL != id_string) {
			html_markup(html_macros.$html_attribute_id$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(id_string);
			html_char(CHAR_quotation, UNPROVIDED);
		    }
		    html_markup(html_macros.$html_attribute_class$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup(fact_sheets.$str72$fact_sheet_sentence);
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_char(CHAR_greater, UNPROVIDED);
		    final SubLObject _prev_bind_0_$80 = html_macros.$html_safe_print$.currentBinding(thread);
		    final SubLObject _prev_bind_3 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			html_macros.$html_safe_print$.bind(NIL, thread);
			html_princ(paraphrase);
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_3, thread);
			html_macros.$html_safe_print$.rebind(_prev_bind_0_$80, thread);
		    }
		    html_markup(html_macros.$html_span_tail$.getGlobalValue());
		} finally {
		    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
		}
		new_string = get_output_stream_string(stream);
	    } finally {
		final SubLObject _prev_bind_4 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values2 = getValuesAsVector();
		    close(stream, UNPROVIDED);
		    restoreValuesFromVector(_values2);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
		}
	    }
	}
	return new_string;
    }

    public static final SubLObject remove_link_alt(SubLObject v_term, SubLObject linked_text, SubLObject link_text) {
	return linked_text;
    }

    public static SubLObject remove_link(final SubLObject v_term, final SubLObject linked_text, final SubLObject link_text) {
	return linked_text;
    }

    public static final SubLObject fact_sheet_sentence_id_function_alt(SubLObject v_properties) {
	return NIL != com.cyc.cycjava.cycl.fact_sheets.xml_factsheetsP(v_properties) ? ((SubLObject) (COMPACT_HL_EXTERNAL_ID_STRING)) : COMPACT_HL_INTERNAL_ID_STRING;
    }

    public static SubLObject fact_sheet_sentence_id_function(final SubLObject v_properties) {
	return NIL != fact_sheets.xml_factsheetsP(v_properties) ? fact_sheets.COMPACT_HL_EXTERNAL_ID_STRING : fact_sheets.COMPACT_HL_INTERNAL_ID_STRING;
    }

    public static final SubLObject xml_factsheetsP_alt(SubLObject v_properties) {
	return equal(getf(v_properties, $MARKUP_TYPE, UNPROVIDED), $XML);
    }

    public static SubLObject xml_factsheetsP(final SubLObject v_properties) {
	return equal(getf(v_properties, $MARKUP_TYPE, UNPROVIDED), $XML);
    }

    public static final SubLObject fact_sheet_sentence_expand_coordination_sets_alt(SubLObject sentence) {
	if (NIL == el_formula_p(sentence)) {
	    return values(sentence, NIL);
	}
	{
	    SubLObject arg_position = find(ZERO_INTEGER, cycl_utilities.arg_positions_bfs($$TheCoordinationSet, sentence, UNPROVIDED), symbol_function(EQL), symbol_function(LAST_ONE), UNPROVIDED, UNPROVIDED);
	    SubLObject new_sentence = (NIL != list_utilities.lengthG(arg_position, ONE_INTEGER, UNPROVIDED)) ? ((SubLObject) (copy_expression(sentence))) : sentence;
	    SubLObject expandedP = NIL;
	    while (NIL != arg_position) {
		{
		    SubLObject coordination_argpos = butlast(arg_position, UNPROVIDED);
		    SubLObject enclosing_sentence_argpos = butlast(coordination_argpos, UNPROVIDED);
		    SubLObject enclosing_sentence = cycl_utilities.formula_arg_position(new_sentence, enclosing_sentence_argpos, UNPROVIDED);
		    SubLObject found_sentenceP = cycl_grammar.cycl_sentence_p(enclosing_sentence);
		    while ((NIL != enclosing_sentence_argpos) && (NIL == found_sentenceP)) {
			enclosing_sentence_argpos = butlast(enclosing_sentence_argpos, UNPROVIDED);
			enclosing_sentence = cycl_utilities.formula_arg_position(new_sentence, enclosing_sentence_argpos, UNPROVIDED);
			found_sentenceP = cycl_grammar.cycl_sentence_p(enclosing_sentence);
		    }
		    if (NIL != found_sentenceP) {
			{
			    SubLObject conjuncts = NIL;
			    SubLObject coordination = cycl_utilities.formula_arg_position(new_sentence, coordination_argpos, UNPROVIDED);
			    SubLObject coordination_argpos_in_enclosing_sentence = subseq(coordination_argpos, length(enclosing_sentence_argpos), UNPROVIDED);
			    eval_in_api.trace_me(coordination_argpos_in_enclosing_sentence, UNPROVIDED, UNPROVIDED, UNPROVIDED);
			    {
				SubLObject args = cycl_utilities.formula_args(coordination, $IGNORE);
				SubLObject cdolist_list_var = args;
				SubLObject coordinated_term = NIL;
				for (coordinated_term = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), coordinated_term = cdolist_list_var.first()) {
				    {
					SubLObject conjunct = replace_formula_arg_position(coordination_argpos_in_enclosing_sentence, coordinated_term, enclosing_sentence);
					conjuncts = cons(conjunct, conjuncts);
				    }
				}
			    }
			    {
				SubLObject conjunction = simplifier.nconjoin(nreverse(conjuncts), T);
				SubLObject new_new_sentence = (NIL != enclosing_sentence_argpos) ? ((SubLObject) (replace_formula_arg_position(enclosing_sentence_argpos, conjunction, new_sentence))) : conjunction;
				if (new_sentence.equal(new_new_sentence)) {
				    return values(new_sentence, expandedP);
				} else {
				    new_sentence = new_new_sentence;
				    expandedP = T;
				}
			    }
			}
		    }
		    arg_position = (NIL != found_sentenceP) ? ((SubLObject) (find(ZERO_INTEGER, cycl_utilities.arg_positions_bfs($$TheCoordinationSet, new_sentence, UNPROVIDED), symbol_function(EQL), symbol_function(LAST_ONE), UNPROVIDED, UNPROVIDED))) : NIL;
		}
	    }
	    return values(new_sentence, expandedP);
	}
    }

    public static SubLObject fact_sheet_sentence_expand_coordination_sets(final SubLObject sentence) {
	if (NIL == el_formula_p(sentence)) {
	    return values(sentence, NIL);
	}
	SubLObject arg_position = find(ZERO_INTEGER, cycl_utilities.arg_positions_bfs(fact_sheets.$$TheCoordinationSet, sentence, UNPROVIDED), symbol_function(EQL), symbol_function(fact_sheets.LAST_ONE), UNPROVIDED, UNPROVIDED);
	SubLObject new_sentence = (NIL != list_utilities.lengthG(arg_position, ONE_INTEGER, UNPROVIDED)) ? copy_expression(sentence) : sentence;
	SubLObject expandedP = NIL;
	while (NIL != arg_position) {
	    final SubLObject coordination_argpos = butlast(arg_position, UNPROVIDED);
	    SubLObject enclosing_sentence_argpos;
	    SubLObject enclosing_sentence;
	    SubLObject found_sentenceP;
	    for (enclosing_sentence_argpos = butlast(coordination_argpos, UNPROVIDED), enclosing_sentence = cycl_utilities.formula_arg_position(new_sentence, enclosing_sentence_argpos, UNPROVIDED), found_sentenceP = cycl_grammar.cycl_sentence_p(enclosing_sentence); (NIL != enclosing_sentence_argpos)
		    && (NIL == found_sentenceP); enclosing_sentence_argpos = butlast(enclosing_sentence_argpos, UNPROVIDED), enclosing_sentence = cycl_utilities.formula_arg_position(new_sentence, enclosing_sentence_argpos,
			    UNPROVIDED), found_sentenceP = cycl_grammar.cycl_sentence_p(enclosing_sentence)) {
	    }
	    if (NIL != found_sentenceP) {
		SubLObject conjuncts = NIL;
		final SubLObject coordination = cycl_utilities.formula_arg_position(new_sentence, coordination_argpos, UNPROVIDED);
		final SubLObject coordination_argpos_in_enclosing_sentence = subseq(coordination_argpos, length(enclosing_sentence_argpos), UNPROVIDED);
		eval_in_api.trace_me(coordination_argpos_in_enclosing_sentence, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		SubLObject cdolist_list_var;
		final SubLObject args = cdolist_list_var = cycl_utilities.formula_args(coordination, $IGNORE);
		SubLObject coordinated_term = NIL;
		coordinated_term = cdolist_list_var.first();
		while (NIL != cdolist_list_var) {
		    final SubLObject conjunct = replace_formula_arg_position(coordination_argpos_in_enclosing_sentence, coordinated_term, enclosing_sentence);
		    conjuncts = cons(conjunct, conjuncts);
		    cdolist_list_var = cdolist_list_var.rest();
		    coordinated_term = cdolist_list_var.first();
		}
		final SubLObject conjunction = simplifier.nconjoin(nreverse(conjuncts), T);
		final SubLObject new_new_sentence = (NIL != enclosing_sentence_argpos) ? replace_formula_arg_position(enclosing_sentence_argpos, conjunction, new_sentence) : conjunction;
		if (new_sentence.equal(new_new_sentence)) {
		    return values(new_sentence, expandedP);
		}
		new_sentence = new_new_sentence;
		expandedP = T;
	    }
	    arg_position = (NIL != found_sentenceP) ? find(ZERO_INTEGER, cycl_utilities.arg_positions_bfs(fact_sheets.$$TheCoordinationSet, new_sentence, UNPROVIDED), symbol_function(EQL), symbol_function(fact_sheets.LAST_ONE), UNPROVIDED, UNPROVIDED) : NIL;
	}
	return values(new_sentence, expandedP);
    }

    public static final SubLObject fact_sheet_span_for_term_alt(SubLObject v_term, SubLObject linked_text) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject new_string = NIL;
		SubLObject id_string = kb_utilities.hl_external_id_string(v_term);
		SubLObject stream = NIL;
		try {
		    stream = make_private_string_output_stream();
		    {
			SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
			try {
			    html_macros.$html_stream$.bind(stream, thread);
			    html_markup(html_macros.$html_span_head$.getGlobalValue());
			    if (NIL != id_string) {
				html_markup(html_macros.$html_attribute_id$.getGlobalValue());
				html_char(CHAR_quotation, UNPROVIDED);
				html_markup(id_string);
				html_char(CHAR_quotation, UNPROVIDED);
			    }
			    if (true) {
				html_markup(html_macros.$html_attribute_class$.getGlobalValue());
				html_char(CHAR_quotation, UNPROVIDED);
				html_markup($str_alt471$fact_sheet_term);
				html_char(CHAR_quotation, UNPROVIDED);
			    }
			    html_char(CHAR_greater, UNPROVIDED);
			    {
				SubLObject _prev_bind_0_95 = html_macros.$html_safe_print$.currentBinding(thread);
				SubLObject _prev_bind_1 = html_macros.$html_safe_print$.currentBinding(thread);
				try {
				    html_macros.$html_safe_print$.bind(T, thread);
				    html_macros.$html_safe_print$.bind(NIL, thread);
				    html_princ(linked_text);
				} finally {
				    html_macros.$html_safe_print$.rebind(_prev_bind_1, thread);
				    html_macros.$html_safe_print$.rebind(_prev_bind_0_95, thread);
				}
			    }
			    html_markup(html_macros.$html_span_tail$.getGlobalValue());
			} finally {
			    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
			}
		    }
		    new_string = get_output_stream_string(stream);
		} finally {
		    {
			SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    close(stream, UNPROVIDED);
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return new_string;
	    }
	}
    }

    public static SubLObject fact_sheet_span_for_term(final SubLObject v_term, final SubLObject linked_text) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject new_string = NIL;
	final SubLObject id_string = kb_utilities.hl_external_id_string(v_term);
	SubLObject stream = NIL;
	try {
	    stream = make_private_string_output_stream();
	    final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
	    try {
		html_macros.$html_stream$.bind(stream, thread);
		html_markup(html_macros.$html_span_head$.getGlobalValue());
		if (NIL != id_string) {
		    html_markup(html_macros.$html_attribute_id$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup(id_string);
		    html_char(CHAR_quotation, UNPROVIDED);
		}
		html_markup(html_macros.$html_attribute_class$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(fact_sheets.$str310$fact_sheet_term);
		html_char(CHAR_quotation, UNPROVIDED);
		html_char(CHAR_greater, UNPROVIDED);
		final SubLObject _prev_bind_0_$81 = html_macros.$html_safe_print$.currentBinding(thread);
		final SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
		try {
		    html_macros.$html_safe_print$.bind(T, thread);
		    html_macros.$html_safe_print$.bind(NIL, thread);
		    html_princ(linked_text);
		} finally {
		    html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
		    html_macros.$html_safe_print$.rebind(_prev_bind_0_$81, thread);
		}
		html_markup(html_macros.$html_span_tail$.getGlobalValue());
	    } finally {
		html_macros.$html_stream$.rebind(_prev_bind_0, thread);
	    }
	    new_string = get_output_stream_string(stream);
	} finally {
	    final SubLObject _prev_bind_3 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values = getValuesAsVector();
		close(stream, UNPROVIDED);
		restoreValuesFromVector(_values);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
	    }
	}
	return new_string;
    }

    /**
     * Use CALLBACK-FN to find replacements for all markups in HTML.
     *
     * @param CALLBACK-FN;
     * 		takes a CycL term and the existing linked text for the term from HTML.
     */
    @LispMethod(comment = "Use CALLBACK-FN to find replacements for all markups in HTML.\r\n\r\n@param CALLBACK-FN;\r\n\t\ttakes a CycL term and the existing linked text for the term from HTML.")
    public static final SubLObject replace_fact_sheet_markups_alt(SubLObject html, SubLObject callback_fn, SubLObject include_sentencesP) {
	if (include_sentencesP == UNPROVIDED) {
	    include_sentencesP = T;
	}
	{
	    SubLObject new_html = html;
	    SubLObject adjustments = NIL;
	    SubLObject cdolist_list_var = Sort.sort(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_html_find_marked_up_terms(html, include_sentencesP), symbol_function($sym108$_), symbol_function(FIRST));
	    SubLObject data = NIL;
	    for (data = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), data = cdolist_list_var.first()) {
		{
		    SubLObject datum = data;
		    SubLObject current = datum;
		    SubLObject start_position = NIL;
		    SubLObject end_position = NIL;
		    SubLObject v_term = NIL;
		    SubLObject link_text = NIL;
		    SubLObject linked_text = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt472);
		    start_position = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt472);
		    end_position = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt472);
		    v_term = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt472);
		    link_text = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt472);
		    linked_text = current.first();
		    current = current.rest();
		    if (NIL == current) {
			{
			    SubLObject adjust_amount = ZERO_INTEGER;
			    SubLObject cdolist_list_var_96 = adjustments;
			    SubLObject adjustment = NIL;
			    for (adjustment = cdolist_list_var_96.first(); NIL != cdolist_list_var_96; cdolist_list_var_96 = cdolist_list_var_96.rest(), adjustment = cdolist_list_var_96.first()) {
				if (end_position.numG(adjustment.first())) {
				    {
					SubLObject datum_97 = adjustment.rest();
					SubLObject current_98 = datum_97;
					SubLObject amount = NIL;
					SubLObject old = NIL;
					SubLObject v_new = NIL;
					destructuring_bind_must_consp(current_98, datum_97, $list_alt473);
					amount = current_98.first();
					current_98 = current_98.rest();
					destructuring_bind_must_consp(current_98, datum_97, $list_alt473);
					old = current_98.first();
					current_98 = current_98.rest();
					destructuring_bind_must_consp(current_98, datum_97, $list_alt473);
					v_new = current_98.first();
					current_98 = current_98.rest();
					if (NIL == current_98) {
					    adjust_amount = add(adjust_amount, amount);
					    linked_text = string_utilities.replace_substring(linked_text, old, v_new);
					} else {
					    cdestructuring_bind_error(datum_97, $list_alt473);
					}
				    }
				}
			    }
			    if (!adjust_amount.isZero()) {
				end_position = subtract(end_position, adjust_amount);
			    }
			    {
				SubLObject replacement_text = ($UNKNOWN == v_term) ? ((SubLObject) (linked_text)) : funcall(callback_fn, v_term, linked_text, link_text);
				SubLObject old_length = length(link_text);
				SubLObject new_length = length(replacement_text);
				SubLObject net_shrinkage = subtract(old_length, new_length, adjust_amount);
				if (!net_shrinkage.isZero()) {
				    adjustments = cons(list(start_position, net_shrinkage, link_text, replacement_text), adjustments);
				}
				new_html = cconcatenate(string_utilities.substring(new_html, ZERO_INTEGER, start_position), new SubLObject[] { replacement_text, string_utilities.substring(new_html, end_position, NIL) });
			    }
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt472);
		    }
		}
	    }
	    return new_html;
	}
    }

    @LispMethod(comment = "Use CALLBACK-FN to find replacements for all markups in HTML.\r\n\r\n@param CALLBACK-FN;\r\n\t\ttakes a CycL term and the existing linked text for the term from HTML.")
    public static SubLObject replace_fact_sheet_markups(final SubLObject html, final SubLObject callback_fn, SubLObject include_sentencesP) {
	if (include_sentencesP == UNPROVIDED) {
	    include_sentencesP = T;
	}
	SubLObject new_html = html;
	SubLObject adjustments = NIL;
	SubLObject cdolist_list_var = Sort.sort(fact_sheets.fact_sheet_html_find_marked_up_terms(html, include_sentencesP), symbol_function(fact_sheets.$sym313$_), symbol_function(FIRST));
	SubLObject data = NIL;
	data = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    SubLObject current;
	    final SubLObject datum = current = data;
	    SubLObject start_position = NIL;
	    SubLObject end_position = NIL;
	    SubLObject v_term = NIL;
	    SubLObject link_text = NIL;
	    SubLObject linked_text = NIL;
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list311);
	    start_position = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list311);
	    end_position = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list311);
	    v_term = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list311);
	    link_text = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list311);
	    linked_text = current.first();
	    current = current.rest();
	    if (NIL == current) {
		SubLObject adjust_amount = ZERO_INTEGER;
		SubLObject cdolist_list_var_$82 = adjustments;
		SubLObject adjustment = NIL;
		adjustment = cdolist_list_var_$82.first();
		while (NIL != cdolist_list_var_$82) {
		    if (end_position.numG(adjustment.first())) {
			SubLObject current_$84;
			final SubLObject datum_$83 = current_$84 = adjustment.rest();
			SubLObject amount = NIL;
			SubLObject old = NIL;
			SubLObject v_new = NIL;
			destructuring_bind_must_consp(current_$84, datum_$83, fact_sheets.$list312);
			amount = current_$84.first();
			current_$84 = current_$84.rest();
			destructuring_bind_must_consp(current_$84, datum_$83, fact_sheets.$list312);
			old = current_$84.first();
			current_$84 = current_$84.rest();
			destructuring_bind_must_consp(current_$84, datum_$83, fact_sheets.$list312);
			v_new = current_$84.first();
			current_$84 = current_$84.rest();
			if (NIL == current_$84) {
			    adjust_amount = add(adjust_amount, amount);
			    linked_text = string_utilities.replace_substring(linked_text, old, v_new);
			} else {
			    cdestructuring_bind_error(datum_$83, fact_sheets.$list312);
			}
		    }
		    cdolist_list_var_$82 = cdolist_list_var_$82.rest();
		    adjustment = cdolist_list_var_$82.first();
		}
		if (!adjust_amount.isZero()) {
		    end_position = subtract(end_position, adjust_amount);
		}
		final SubLObject replacement_text = ($UNKNOWN == v_term) ? linked_text : funcall(callback_fn, v_term, linked_text, link_text);
		final SubLObject old_length = length(link_text);
		final SubLObject new_length = length(replacement_text);
		final SubLObject net_shrinkage = subtract(old_length, new_length, adjust_amount);
		if (!net_shrinkage.isZero()) {
		    adjustments = cons(list(start_position, net_shrinkage, link_text, replacement_text), adjustments);
		}
		new_html = cconcatenate(string_utilities.substring(new_html, ZERO_INTEGER, start_position), new SubLObject[] { replacement_text, string_utilities.substring(new_html, end_position, NIL) });
	    } else {
		cdestructuring_bind_error(datum, fact_sheets.$list311);
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    data = cdolist_list_var.first();
	}
	return new_html;
    }

    /**
    * Use CALLBACK-FN to find replacements for all markups in HTML.
    *
    * @param CALLBACK-FN;
    * 		takes a CycL term and the existing linked text for the term from HTML.
    */

    /**
     * This can used when the CALLBACK-FN only replaces one tag with another, or removes tags.  Might or might
     * not work correctly if one tag in the HTML is replaced with multiple tags.  That would probably work, but
     * has not been tested.
     */
    @LispMethod(comment = "This can used when the CALLBACK-FN only replaces one tag with another, or removes tags.  Might or might\r\nnot work correctly if one tag in the HTML is replaced with multiple tags.  That would probably work, but\r\nhas not been tested.\nThis can used when the CALLBACK-FN only replaces one tag with another, or removes tags.  Might or might\nnot work correctly if one tag in the HTML is replaced with multiple tags.  That would probably work, but\nhas not been tested.")
    public static final SubLObject replace_fact_sheet_markups_fast_alt(SubLObject html, SubLObject callback_fn, SubLObject include_sentencesP) {
	if (include_sentencesP == UNPROVIDED) {
	    include_sentencesP = T;
	}
	{
	    SubLObject new_html = NIL;
	    SubLObject tokenized_html = web_utilities.xml_string_tokenize(html, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	    SubLObject replacements = NIL;
	    SubLObject stream = NIL;
	    try {
		stream = make_private_string_output_stream();
		{
		    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_html_find_marked_up_terms_fast(tokenized_html, include_sentencesP);
		    SubLObject data = NIL;
		    for (data = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), data = cdolist_list_var.first()) {
			{
			    SubLObject datum = data;
			    SubLObject current = datum;
			    SubLObject original_open_tag = NIL;
			    SubLObject open_tag_position = NIL;
			    SubLObject original_link_tokens = NIL;
			    SubLObject original_close_tag = NIL;
			    SubLObject close_tag_position = NIL;
			    SubLObject v_term = NIL;
			    destructuring_bind_must_consp(current, datum, $list_alt474);
			    original_open_tag = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt474);
			    open_tag_position = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt474);
			    original_link_tokens = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt474);
			    original_close_tag = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt474);
			    close_tag_position = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt474);
			    v_term = current.first();
			    current = current.rest();
			    if (NIL == current) {
				{
				    SubLObject datum_99 = funcall(callback_fn, v_term, original_open_tag, original_link_tokens, original_close_tag);
				    SubLObject current_100 = datum_99;
				    SubLObject open_tag = NIL;
				    SubLObject link_text = NIL;
				    SubLObject close_tag = NIL;
				    destructuring_bind_must_consp(current_100, datum_99, $list_alt475);
				    open_tag = current_100.first();
				    current_100 = current_100.rest();
				    destructuring_bind_must_consp(current_100, datum_99, $list_alt475);
				    link_text = current_100.first();
				    current_100 = current_100.rest();
				    destructuring_bind_must_consp(current_100, datum_99, $list_alt475);
				    close_tag = current_100.first();
				    current_100 = current_100.rest();
				    if (NIL == current_100) {
					if (!original_open_tag.equal(open_tag)) {
					    replacements = cons(bq_cons(open_tag_position, open_tag), replacements);
					}
					if (!original_link_tokens.equal(link_text)) {
					    replacements = cons(bq_cons(number_utilities.f_1X(open_tag_position), link_text), replacements);
					}
					if (!original_close_tag.equal(close_tag)) {
					    replacements = cons(bq_cons(close_tag_position, close_tag), replacements);
					}
				    } else {
					cdestructuring_bind_error(datum_99, $list_alt475);
				    }
				}
			    } else {
				cdestructuring_bind_error(datum, $list_alt474);
			    }
			}
		    }
		}
		{
		    SubLObject list_var = NIL;
		    SubLObject token = NIL;
		    SubLObject token_index = NIL;
		    for (list_var = tokenized_html, token = list_var.first(), token_index = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), token = list_var.first(), token_index = add(ONE_INTEGER, token_index)) {
			if (NIL != assoc(token_index, replacements, UNPROVIDED, UNPROVIDED)) {
			    princ(assoc(token_index, replacements, UNPROVIDED, UNPROVIDED).rest(), stream);
			} else {
			    princ(token, stream);
			}
		    }
		}
		new_html = get_output_stream_string(stream);
	    } finally {
		{
		    SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
		    try {
			bind($is_thread_performing_cleanupP$, T);
			close(stream, UNPROVIDED);
		    } finally {
			rebind($is_thread_performing_cleanupP$, _prev_bind_0);
		    }
		}
	    }
	    return new_html;
	}
    }

    @LispMethod(comment = "This can used when the CALLBACK-FN only replaces one tag with another, or removes tags.  Might or might\r\nnot work correctly if one tag in the HTML is replaced with multiple tags.  That would probably work, but\r\nhas not been tested.\nThis can used when the CALLBACK-FN only replaces one tag with another, or removes tags.  Might or might\nnot work correctly if one tag in the HTML is replaced with multiple tags.  That would probably work, but\nhas not been tested.")
    public static SubLObject replace_fact_sheet_markups_fast(final SubLObject html, final SubLObject callback_fn, SubLObject include_sentencesP) {
	if (include_sentencesP == UNPROVIDED) {
	    include_sentencesP = T;
	}
	SubLObject new_html = NIL;
	final SubLObject tokenized_html = xml_parsing_utilities.xml_string_tokenize(html, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	SubLObject replacements = NIL;
	SubLObject stream = NIL;
	try {
	    stream = make_private_string_output_stream();
	    SubLObject cdolist_list_var = fact_sheets.fact_sheet_html_find_marked_up_terms_fast(tokenized_html, include_sentencesP);
	    SubLObject data = NIL;
	    data = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject current;
		final SubLObject datum = current = data;
		SubLObject original_open_tag = NIL;
		SubLObject open_tag_position = NIL;
		SubLObject original_link_tokens = NIL;
		SubLObject original_close_tag = NIL;
		SubLObject close_tag_position = NIL;
		SubLObject v_term = NIL;
		destructuring_bind_must_consp(current, datum, fact_sheets.$list314);
		original_open_tag = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, fact_sheets.$list314);
		open_tag_position = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, fact_sheets.$list314);
		original_link_tokens = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, fact_sheets.$list314);
		original_close_tag = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, fact_sheets.$list314);
		close_tag_position = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, fact_sheets.$list314);
		v_term = current.first();
		current = current.rest();
		if (NIL == current) {
		    SubLObject current_$86;
		    final SubLObject datum_$85 = current_$86 = funcall(callback_fn, v_term, original_open_tag, original_link_tokens, original_close_tag);
		    SubLObject open_tag = NIL;
		    SubLObject link_text = NIL;
		    SubLObject close_tag = NIL;
		    destructuring_bind_must_consp(current_$86, datum_$85, fact_sheets.$list315);
		    open_tag = current_$86.first();
		    current_$86 = current_$86.rest();
		    destructuring_bind_must_consp(current_$86, datum_$85, fact_sheets.$list315);
		    link_text = current_$86.first();
		    current_$86 = current_$86.rest();
		    destructuring_bind_must_consp(current_$86, datum_$85, fact_sheets.$list315);
		    close_tag = current_$86.first();
		    current_$86 = current_$86.rest();
		    if (NIL == current_$86) {
			if (!original_open_tag.equal(open_tag)) {
			    replacements = cons(bq_cons(open_tag_position, open_tag), replacements);
			}
			if (!original_link_tokens.equal(link_text)) {
			    replacements = cons(bq_cons(number_utilities.f_1X(open_tag_position), link_text), replacements);
			}
			if (!original_close_tag.equal(close_tag)) {
			    replacements = cons(bq_cons(close_tag_position, close_tag), replacements);
			}
		    } else {
			cdestructuring_bind_error(datum_$85, fact_sheets.$list315);
		    }
		} else {
		    cdestructuring_bind_error(datum, fact_sheets.$list314);
		}
		cdolist_list_var = cdolist_list_var.rest();
		data = cdolist_list_var.first();
	    }
	    SubLObject list_var = NIL;
	    SubLObject token = NIL;
	    SubLObject token_index = NIL;
	    list_var = tokenized_html;
	    token = list_var.first();
	    for (token_index = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), token = list_var.first(), token_index = add(ONE_INTEGER, token_index)) {
		if (NIL != assoc(token_index, replacements, UNPROVIDED, UNPROVIDED)) {
		    princ(assoc(token_index, replacements, UNPROVIDED, UNPROVIDED).rest(), stream);
		} else {
		    princ(token, stream);
		}
	    }
	    new_html = get_output_stream_string(stream);
	} finally {
	    final SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
	    try {
		bind($is_thread_performing_cleanupP$, T);
		final SubLObject _values = getValuesAsVector();
		close(stream, UNPROVIDED);
		restoreValuesFromVector(_values);
	    } finally {
		rebind($is_thread_performing_cleanupP$, _prev_bind_0);
	    }
	}
	return new_html;
    }

    /**
    * This can used when the CALLBACK-FN only replaces one tag with another, or removes tags.  Might or might
    * not work correctly if one tag in the HTML is replaced with multiple tags.  That would probably work, but
    * has not been tested.
    */

    public static final SubLObject fact_sheet_max_sentences_per_pred_alt(SubLObject verbosity) {
	{
	    SubLObject pcase_var = verbosity;
	    if (pcase_var.eql($TERSE)) {
		return ONE_INTEGER;
	    } else {
		if (pcase_var.eql($NORMAL)) {
		    return THREE_INTEGER;
		} else {
		    return NIL;
		}
	    }
	}
    }

    public static SubLObject fact_sheet_max_sentences_per_pred(final SubLObject verbosity) {
	if (verbosity.eql($TERSE)) {
	    return ONE_INTEGER;
	}
	if (verbosity.eql($NORMAL)) {
	    return THREE_INTEGER;
	}
	return NIL;
    }

    public static final SubLObject display_fact_sheet_alt(SubLObject title, SubLObject image_url, SubLObject categorized_paragraph_texts, SubLObject footnotes, SubLObject v_properties) {
	{
	    SubLObject branding_info = getf(v_properties, $BRANDING_INFO, NIL);
	    if (NIL != com.cyc.cycjava.cycl.fact_sheets.xml_factsheetsP(v_properties)) {
		com.cyc.cycjava.cycl.fact_sheets.display_fact_sheet_xml(title, image_url, categorized_paragraph_texts, footnotes, branding_info);
	    } else {
		if (NIL != getf(v_properties, $STYLESHEET, UNPROVIDED)) {
		    com.cyc.cycjava.cycl.fact_sheets.display_fact_sheet_for_external_styles(title, image_url, categorized_paragraph_texts, footnotes, branding_info);
		} else {
		    com.cyc.cycjava.cycl.fact_sheets.display_fact_sheet_with_internal_styles(title, image_url, categorized_paragraph_texts, footnotes);
		}
	    }
	}
	return NIL;
    }

    public static SubLObject display_fact_sheet(final SubLObject title, final SubLObject image_url, final SubLObject categorized_paragraph_texts, final SubLObject footnotes, final SubLObject v_properties) {
	final SubLObject branding_info = getf(v_properties, $BRANDING_INFO, NIL);
	if (NIL != fact_sheets.xml_factsheetsP(v_properties)) {
	    fact_sheets.display_fact_sheet_xml(title, image_url, categorized_paragraph_texts, footnotes, branding_info);
	} else if (NIL != getf(v_properties, $STYLESHEET, UNPROVIDED)) {
	    fact_sheets.display_fact_sheet_for_external_styles(title, image_url, categorized_paragraph_texts, footnotes, branding_info);
	} else {
	    fact_sheets.display_fact_sheet_with_internal_styles(title, image_url, categorized_paragraph_texts, footnotes);
	}

	return NIL;
    }

    public static final SubLObject display_fact_sheet_with_internal_styles_alt(SubLObject title, SubLObject image_url, SubLObject categorized_paragraph_texts, SubLObject footnotes) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    html_markup(html_macros.$html_table_head$.getGlobalValue());
	    if (true) {
		html_markup(html_macros.$html_table_align$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(html_align($CENTER));
		html_char(CHAR_quotation, UNPROVIDED);
	    }
	    if (true) {
		html_markup(html_macros.$html_table_border$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(ZERO_INTEGER);
		html_char(CHAR_quotation, UNPROVIDED);
	    }
	    html_char(CHAR_greater, UNPROVIDED);
	    {
		SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
		try {
		    html_macros.$html_safe_print$.bind(T, thread);
		    princ(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_optional_section_start_comment($TITLE, UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
		    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
		    html_char(CHAR_greater, UNPROVIDED);
		    {
			SubLObject _prev_bind_0_101 = html_macros.$html_safe_print$.currentBinding(thread);
			try {
			    html_macros.$html_safe_print$.bind(T, thread);
			    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
			    if (true) {
				html_markup(html_macros.$html_table_data_align$.getGlobalValue());
				html_char(CHAR_quotation, UNPROVIDED);
				html_markup(html_align($CENTER));
				html_char(CHAR_quotation, UNPROVIDED);
			    }
			    html_char(CHAR_greater, UNPROVIDED);
			    {
				SubLObject _prev_bind_0_102 = html_macros.$html_safe_print$.currentBinding(thread);
				try {
				    html_macros.$html_safe_print$.bind(T, thread);
				    html_markup(html_macros.$html_heading_head$.getGlobalValue());
				    html_markup(ONE_INTEGER);
				    html_char(CHAR_greater, UNPROVIDED);
				    html_princ(title);
				    html_markup(html_macros.$html_heading_tail$.getGlobalValue());
				    html_markup(ONE_INTEGER);
				    html_char(CHAR_greater, UNPROVIDED);
				} finally {
				    html_macros.$html_safe_print$.rebind(_prev_bind_0_102, thread);
				}
			    }
			    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
			} finally {
			    html_macros.$html_safe_print$.rebind(_prev_bind_0_101, thread);
			}
		    }
		    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
		    html_source_readability_terpri(UNPROVIDED);
		    princ(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_optional_section_end_comment($TITLE), html_macros.$html_stream$.getDynamicValue(thread));
		    if (image_url.isString()) {
			html_markup(html_macros.$html_table_row_head$.getGlobalValue());
			html_char(CHAR_greater, UNPROVIDED);
			{
			    SubLObject _prev_bind_0_103 = html_macros.$html_safe_print$.currentBinding(thread);
			    try {
				html_macros.$html_safe_print$.bind(T, thread);
				html_markup(html_macros.$html_table_data_head$.getGlobalValue());
				if (true) {
				    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
				    html_char(CHAR_quotation, UNPROVIDED);
				    html_markup(html_align($CENTER));
				    html_char(CHAR_quotation, UNPROVIDED);
				}
				html_char(CHAR_greater, UNPROVIDED);
				{
				    SubLObject _prev_bind_0_104 = html_macros.$html_safe_print$.currentBinding(thread);
				    try {
					html_macros.$html_safe_print$.bind(T, thread);
					html_markup(html_macros.$html_image_head$.getGlobalValue());
					html_markup(html_macros.$html_image_src$.getGlobalValue());
					html_char(CHAR_quotation, UNPROVIDED);
					html_markup(image_url);
					html_char(CHAR_quotation, UNPROVIDED);
					if (true) {
					    html_markup(html_macros.$html_image_name$.getGlobalValue());
					    html_char(CHAR_quotation, UNPROVIDED);
					    html_markup($$$image);
					    html_char(CHAR_quotation, UNPROVIDED);
					}
					if (true) {
					    html_markup(html_macros.$html_image_alt$.getGlobalValue());
					    html_char(CHAR_quotation, UNPROVIDED);
					    html_markup($$$image);
					    html_char(CHAR_quotation, UNPROVIDED);
					}
					if (true) {
					    html_markup(html_macros.$html_image_border$.getGlobalValue());
					    html_char(CHAR_quotation, UNPROVIDED);
					    html_markup(ONE_INTEGER);
					    html_char(CHAR_quotation, UNPROVIDED);
					}
					html_char(CHAR_greater, UNPROVIDED);
					{
					    SubLObject _prev_bind_0_105 = html_macros.$html_safe_print$.currentBinding(thread);
					    try {
						html_macros.$html_safe_print$.bind(T, thread);
					    } finally {
						html_macros.$html_safe_print$.rebind(_prev_bind_0_105, thread);
					    }
					}
					html_markup(html_macros.$html_image_tail$.getGlobalValue());
				    } finally {
					html_macros.$html_safe_print$.rebind(_prev_bind_0_104, thread);
				    }
				}
				html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
			    } finally {
				html_macros.$html_safe_print$.rebind(_prev_bind_0_103, thread);
			    }
			}
			html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
			html_source_readability_terpri(UNPROVIDED);
		    }
		    {
			SubLObject bgcolor = NIL;
			SubLObject cdolist_list_var = categorized_paragraph_texts;
			SubLObject cons = NIL;
			for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
			    {
				SubLObject datum = cons;
				SubLObject current = datum;
				SubLObject category = NIL;
				SubLObject paragraph_texts = NIL;
				destructuring_bind_must_consp(current, datum, $list_alt481);
				category = current.first();
				current = current.rest();
				paragraph_texts = current;
				if (NIL != paragraph_texts) {
				    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
				    if (true) {
					html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
					html_char(CHAR_quotation, UNPROVIDED);
					html_markup($$$white);
					html_char(CHAR_quotation, UNPROVIDED);
				    }
				    html_char(CHAR_greater, UNPROVIDED);
				    {
					SubLObject _prev_bind_0_106 = html_macros.$html_safe_print$.currentBinding(thread);
					try {
					    html_macros.$html_safe_print$.bind(T, thread);
					    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
					    html_char(CHAR_greater, UNPROVIDED);
					    {
						SubLObject _prev_bind_0_107 = html_macros.$html_safe_print$.currentBinding(thread);
						try {
						    html_macros.$html_safe_print$.bind(T, thread);
						    html_markup(html_macros.$html_bold_head$.getGlobalValue());
						    html_markup(com.cyc.cycjava.cycl.fact_sheets.category_label_string(category));
						    html_markup(html_macros.$html_bold_tail$.getGlobalValue());
						} finally {
						    html_macros.$html_safe_print$.rebind(_prev_bind_0_107, thread);
						}
					    }
					    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
					} finally {
					    html_macros.$html_safe_print$.rebind(_prev_bind_0_106, thread);
					}
				    }
				    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
				    html_source_readability_terpri(UNPROVIDED);
				    if (NIL == $cb_show_enhanced_tables$.getDynamicValue(thread)) {
					bgcolor = html_macros.$html_color_cyc_logo_light_blue$.getDynamicValue(thread);
				    }
				    {
					SubLObject color_toggle = NIL;
					SubLObject list_var = NIL;
					SubLObject paragraph_text = NIL;
					SubLObject ignore_me = NIL;
					for (list_var = paragraph_texts, paragraph_text = list_var.first(), ignore_me = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), paragraph_text = list_var.first(), ignore_me = add(ONE_INTEGER, ignore_me)) {
					    if (NIL != $cb_show_enhanced_tables$.getDynamicValue(thread)) {
						if (NIL != color_toggle) {
						    color_toggle = NIL;
						} else {
						    color_toggle = T;
						}
						bgcolor = (NIL != color_toggle) ? ((SubLObject) (html_macros.$html_color_cyc_logo_lighter_blue$.getDynamicValue(thread))) : html_macros.$html_color_cyc_logo_light_blue$.getDynamicValue(thread);
					    }
					    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
					    if (NIL != bgcolor) {
						html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
						html_char(CHAR_quotation, UNPROVIDED);
						html_markup(bgcolor);
						html_char(CHAR_quotation, UNPROVIDED);
					    }
					    html_char(CHAR_greater, UNPROVIDED);
					    {
						SubLObject _prev_bind_0_108 = html_macros.$html_safe_print$.currentBinding(thread);
						try {
						    html_macros.$html_safe_print$.bind(T, thread);
						    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
						    html_char(CHAR_greater, UNPROVIDED);
						    {
							SubLObject _prev_bind_0_109 = html_macros.$html_safe_print$.currentBinding(thread);
							try {
							    html_macros.$html_safe_print$.bind(T, thread);
							    html_markup(paragraph_text);
							} finally {
							    html_macros.$html_safe_print$.rebind(_prev_bind_0_109, thread);
							}
						    }
						    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
						} finally {
						    html_macros.$html_safe_print$.rebind(_prev_bind_0_108, thread);
						}
					    }
					    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
					    html_source_readability_terpri(UNPROVIDED);
					}
				    }
				}
			    }
			}
		    }
		    {
			SubLObject bgcolor = NIL;
			if (NIL == $cb_show_enhanced_tables$.getDynamicValue(thread)) {
			    bgcolor = html_macros.$html_color_cyc_logo_light_blue$.getDynamicValue(thread);
			}
			{
			    SubLObject color_toggle = NIL;
			    SubLObject list_var = NIL;
			    SubLObject footnote = NIL;
			    SubLObject ignore_me = NIL;
			    for (list_var = footnotes, footnote = list_var.first(), ignore_me = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), footnote = list_var.first(), ignore_me = add(ONE_INTEGER, ignore_me)) {
				if (NIL != $cb_show_enhanced_tables$.getDynamicValue(thread)) {
				    if (NIL != color_toggle) {
					color_toggle = NIL;
				    } else {
					color_toggle = T;
				    }
				    bgcolor = (NIL != color_toggle) ? ((SubLObject) (html_macros.$html_color_cyc_logo_lighter_blue$.getDynamicValue(thread))) : html_macros.$html_color_cyc_logo_light_blue$.getDynamicValue(thread);
				}
				html_markup(html_macros.$html_table_row_head$.getGlobalValue());
				if (NIL != bgcolor) {
				    html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
				    html_char(CHAR_quotation, UNPROVIDED);
				    html_markup(bgcolor);
				    html_char(CHAR_quotation, UNPROVIDED);
				}
				html_char(CHAR_greater, UNPROVIDED);
				{
				    SubLObject _prev_bind_0_110 = html_macros.$html_safe_print$.currentBinding(thread);
				    try {
					html_macros.$html_safe_print$.bind(T, thread);
					html_markup(html_macros.$html_table_data_head$.getGlobalValue());
					html_char(CHAR_greater, UNPROVIDED);
					{
					    SubLObject _prev_bind_0_111 = html_macros.$html_safe_print$.currentBinding(thread);
					    try {
						html_macros.$html_safe_print$.bind(T, thread);
						html_markup(com.cyc.cycjava.cycl.fact_sheets.footnote_text(footnote));
					    } finally {
						html_macros.$html_safe_print$.rebind(_prev_bind_0_111, thread);
					    }
					}
					html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
				    } finally {
					html_macros.$html_safe_print$.rebind(_prev_bind_0_110, thread);
				    }
				}
				html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
				html_source_readability_terpri(UNPROVIDED);
			    }
			}
		    }
		} finally {
		    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
		}
	    }
	    html_markup(html_macros.$html_table_tail$.getGlobalValue());
	    return NIL;
	}
    }

    public static SubLObject display_fact_sheet_with_internal_styles(final SubLObject title, final SubLObject image_url, final SubLObject categorized_paragraph_texts, final SubLObject footnotes) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	html_markup(html_macros.$html_table_head$.getGlobalValue());
	html_markup(html_macros.$html_table_align$.getGlobalValue());
	html_char(CHAR_quotation, UNPROVIDED);
	html_markup(html_align($CENTER));
	html_char(CHAR_quotation, UNPROVIDED);
	html_markup(html_macros.$html_table_border$.getGlobalValue());
	html_char(CHAR_quotation, UNPROVIDED);
	html_markup(ZERO_INTEGER);
	html_char(CHAR_quotation, UNPROVIDED);
	html_char(CHAR_greater, UNPROVIDED);
	final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
	try {
	    html_macros.$html_safe_print$.bind(T, thread);
	    princ(fact_sheets.fact_sheet_optional_section_start_comment($TITLE, UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
	    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
	    html_char(CHAR_greater, UNPROVIDED);
	    final SubLObject _prev_bind_0_$87 = html_macros.$html_safe_print$.currentBinding(thread);
	    try {
		html_macros.$html_safe_print$.bind(T, thread);
		html_markup(html_macros.$html_table_data_head$.getGlobalValue());
		html_markup(html_macros.$html_table_data_align$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(html_align($CENTER));
		html_char(CHAR_quotation, UNPROVIDED);
		html_char(CHAR_greater, UNPROVIDED);
		final SubLObject _prev_bind_0_$88 = html_macros.$html_safe_print$.currentBinding(thread);
		try {
		    html_macros.$html_safe_print$.bind(T, thread);
		    html_markup(html_macros.$html_heading_head$.getGlobalValue());
		    html_markup(ONE_INTEGER);
		    html_char(CHAR_greater, UNPROVIDED);
		    html_princ(title);
		    html_markup(html_macros.$html_heading_tail$.getGlobalValue());
		    html_markup(ONE_INTEGER);
		    html_char(CHAR_greater, UNPROVIDED);
		} finally {
		    html_macros.$html_safe_print$.rebind(_prev_bind_0_$88, thread);
		}
		html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
	    } finally {
		html_macros.$html_safe_print$.rebind(_prev_bind_0_$87, thread);
	    }
	    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
	    html_source_readability_terpri(UNPROVIDED);
	    princ(fact_sheets.fact_sheet_optional_section_end_comment($TITLE), html_macros.$html_stream$.getDynamicValue(thread));
	    if (image_url.isString()) {
		html_markup(html_macros.$html_table_row_head$.getGlobalValue());
		html_char(CHAR_greater, UNPROVIDED);
		final SubLObject _prev_bind_0_$89 = html_macros.$html_safe_print$.currentBinding(thread);
		try {
		    html_macros.$html_safe_print$.bind(T, thread);
		    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
		    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup(html_align($CENTER));
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_char(CHAR_greater, UNPROVIDED);
		    final SubLObject _prev_bind_0_$90 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			html_markup(html_macros.$html_image_head$.getGlobalValue());
			html_markup(html_macros.$html_image_src$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(image_url);
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(html_macros.$html_image_name$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(fact_sheets.$$$image);
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(html_macros.$html_image_alt$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(fact_sheets.$$$image);
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(html_macros.$html_image_border$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(ONE_INTEGER);
			html_char(CHAR_quotation, UNPROVIDED);
			html_char(CHAR_greater, UNPROVIDED);
			final SubLObject _prev_bind_0_$91 = html_macros.$html_safe_print$.currentBinding(thread);
			try {
			    html_macros.$html_safe_print$.bind(T, thread);
			} finally {
			    html_macros.$html_safe_print$.rebind(_prev_bind_0_$91, thread);
			}
			html_markup(html_macros.$html_image_tail$.getGlobalValue());
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_0_$90, thread);
		    }
		    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
		} finally {
		    html_macros.$html_safe_print$.rebind(_prev_bind_0_$89, thread);
		}
		html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
		html_source_readability_terpri(UNPROVIDED);
	    }
	    SubLObject bgcolor = NIL;
	    SubLObject cdolist_list_var = categorized_paragraph_texts;
	    SubLObject cons = NIL;
	    cons = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject current;
		final SubLObject datum = current = cons;
		SubLObject category = NIL;
		SubLObject paragraph_texts = NIL;
		destructuring_bind_must_consp(current, datum, fact_sheets.$list321);
		category = current.first();
		current = paragraph_texts = current.rest();
		if (NIL != paragraph_texts) {
		    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
		    html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup(fact_sheets.$$$white);
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_char(CHAR_greater, UNPROVIDED);
		    final SubLObject _prev_bind_0_$92 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			html_markup(html_macros.$html_table_data_head$.getGlobalValue());
			html_char(CHAR_greater, UNPROVIDED);
			final SubLObject _prev_bind_0_$93 = html_macros.$html_safe_print$.currentBinding(thread);
			try {
			    html_macros.$html_safe_print$.bind(T, thread);
			    html_markup(html_macros.$html_bold_head$.getGlobalValue());
			    html_markup(fact_sheets.category_label_string(category));
			    html_markup(html_macros.$html_bold_tail$.getGlobalValue());
			} finally {
			    html_macros.$html_safe_print$.rebind(_prev_bind_0_$93, thread);
			}
			html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_0_$92, thread);
		    }
		    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
		    html_source_readability_terpri(UNPROVIDED);
		    SubLObject color_toggle = NIL;
		    SubLObject list_var = NIL;
		    SubLObject paragraph_text = NIL;
		    SubLObject ignore_me = NIL;
		    list_var = paragraph_texts;
		    paragraph_text = list_var.first();
		    for (ignore_me = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), paragraph_text = list_var.first(), ignore_me = add(ONE_INTEGER, ignore_me)) {
			if (NIL != color_toggle) {
			    color_toggle = NIL;
			} else {
			    color_toggle = T;
			}
			bgcolor = (NIL != color_toggle) ? html_macros.$html_color_cyc_logo_lighter_blue$.getGlobalValue() : html_macros.$html_color_cyc_logo_light_blue$.getGlobalValue();
			html_markup(html_macros.$html_table_row_head$.getGlobalValue());
			if (NIL != bgcolor) {
			    html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup(bgcolor);
			    html_char(CHAR_quotation, UNPROVIDED);
			}
			html_char(CHAR_greater, UNPROVIDED);
			final SubLObject _prev_bind_0_$94 = html_macros.$html_safe_print$.currentBinding(thread);
			try {
			    html_macros.$html_safe_print$.bind(T, thread);
			    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
			    html_char(CHAR_greater, UNPROVIDED);
			    final SubLObject _prev_bind_0_$95 = html_macros.$html_safe_print$.currentBinding(thread);
			    try {
				html_macros.$html_safe_print$.bind(T, thread);
				html_markup(paragraph_text);
			    } finally {
				html_macros.$html_safe_print$.rebind(_prev_bind_0_$95, thread);
			    }
			    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
			} finally {
			    html_macros.$html_safe_print$.rebind(_prev_bind_0_$94, thread);
			}
			html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
			html_source_readability_terpri(UNPROVIDED);
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		cons = cdolist_list_var.first();
	    }
	    bgcolor = NIL;
	    SubLObject color_toggle2 = NIL;
	    SubLObject list_var2 = NIL;
	    SubLObject footnote = NIL;
	    SubLObject ignore_me2 = NIL;
	    list_var2 = footnotes;
	    footnote = list_var2.first();
	    for (ignore_me2 = ZERO_INTEGER; NIL != list_var2; list_var2 = list_var2.rest(), footnote = list_var2.first(), ignore_me2 = add(ONE_INTEGER, ignore_me2)) {
		if (NIL != color_toggle2) {
		    color_toggle2 = NIL;
		} else {
		    color_toggle2 = T;
		}
		bgcolor = (NIL != color_toggle2) ? html_macros.$html_color_cyc_logo_lighter_blue$.getGlobalValue() : html_macros.$html_color_cyc_logo_light_blue$.getGlobalValue();
		html_markup(html_macros.$html_table_row_head$.getGlobalValue());
		if (NIL != bgcolor) {
		    html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup(bgcolor);
		    html_char(CHAR_quotation, UNPROVIDED);
		}
		html_char(CHAR_greater, UNPROVIDED);
		final SubLObject _prev_bind_0_$96 = html_macros.$html_safe_print$.currentBinding(thread);
		try {
		    html_macros.$html_safe_print$.bind(T, thread);
		    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
		    html_char(CHAR_greater, UNPROVIDED);
		    final SubLObject _prev_bind_0_$97 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			html_markup(fact_sheets.footnote_text(footnote));
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_0_$97, thread);
		    }
		    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
		} finally {
		    html_macros.$html_safe_print$.rebind(_prev_bind_0_$96, thread);
		}
		html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
		html_source_readability_terpri(UNPROVIDED);
	    }
	} finally {
	    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
	}
	html_markup(html_macros.$html_table_tail$.getGlobalValue());
	return NIL;
    }

    public static final SubLObject display_fact_sheet_for_external_styles_alt(SubLObject title, SubLObject image_url, SubLObject categorized_paragraph_texts, SubLObject footnotes, SubLObject branding_info) {
	if (branding_info == UNPROVIDED) {
	    branding_info = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    princ(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_optional_section_start_comment($TITLE, UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
	    html_markup(html_macros.$html_div_head$.getGlobalValue());
	    if (NIL != $fact_sheet_title_div$.getGlobalValue()) {
		html_markup(html_macros.$html_attribute_class$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup($fact_sheet_title_div$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
	    }
	    html_char(CHAR_greater, UNPROVIDED);
	    {
		SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
		try {
		    html_macros.$html_safe_print$.bind(T, thread);
		    if (NIL != branding_info) {
			{
			    SubLObject datum = branding_info;
			    SubLObject current = datum;
			    SubLObject url = NIL;
			    SubLObject logo_url = NIL;
			    SubLObject brand_class = NIL;
			    SubLObject alt_text = NIL;
			    destructuring_bind_must_consp(current, datum, $list_alt493);
			    url = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt493);
			    logo_url = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt493);
			    brand_class = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt493);
			    alt_text = current.first();
			    current = current.rest();
			    if (NIL == current) {
				html_markup(html_macros.$html_anchor_head$.getGlobalValue());
				html_markup(html_macros.$html_anchor_href$.getGlobalValue());
				html_char(CHAR_quotation, UNPROVIDED);
				html_markup(url);
				html_char(CHAR_quotation, UNPROVIDED);
				html_char(CHAR_greater, UNPROVIDED);
				{
				    SubLObject _prev_bind_0_112 = html_macros.$html_safe_print$.currentBinding(thread);
				    try {
					html_macros.$html_safe_print$.bind(T, thread);
					html_markup(html_macros.$html_image_head$.getGlobalValue());
					html_markup(html_macros.$html_image_src$.getGlobalValue());
					html_char(CHAR_quotation, UNPROVIDED);
					html_markup(logo_url);
					html_char(CHAR_quotation, UNPROVIDED);
					if (NIL != brand_class) {
					    html_markup(html_macros.$html_attribute_class$.getGlobalValue());
					    html_char(CHAR_quotation, UNPROVIDED);
					    html_markup(brand_class);
					    html_char(CHAR_quotation, UNPROVIDED);
					}
					if (NIL != alt_text) {
					    html_markup(html_macros.$html_image_alt$.getGlobalValue());
					    html_char(CHAR_quotation, UNPROVIDED);
					    html_markup(alt_text);
					    html_char(CHAR_quotation, UNPROVIDED);
					}
					html_char(CHAR_greater, UNPROVIDED);
					{
					    SubLObject _prev_bind_0_113 = html_macros.$html_safe_print$.currentBinding(thread);
					    try {
						html_macros.$html_safe_print$.bind(T, thread);
					    } finally {
						html_macros.$html_safe_print$.rebind(_prev_bind_0_113, thread);
					    }
					}
					html_markup(html_macros.$html_image_tail$.getGlobalValue());
				    } finally {
					html_macros.$html_safe_print$.rebind(_prev_bind_0_112, thread);
				    }
				}
				html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
				html_newline(UNPROVIDED);
			    } else {
				cdestructuring_bind_error(datum, $list_alt493);
			    }
			}
		    }
		    html_markup(html_macros.$html_span_head$.getGlobalValue());
		    if (NIL != $fact_sheet_title$.getGlobalValue()) {
			html_markup(html_macros.$html_attribute_class$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup($fact_sheet_title$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
		    }
		    html_char(CHAR_greater, UNPROVIDED);
		    {
			SubLObject _prev_bind_0_114 = html_macros.$html_safe_print$.currentBinding(thread);
			try {
			    html_macros.$html_safe_print$.bind(T, thread);
			    html_princ(title);
			} finally {
			    html_macros.$html_safe_print$.rebind(_prev_bind_0_114, thread);
			}
		    }
		    html_markup(html_macros.$html_span_tail$.getGlobalValue());
		    if (image_url.isString()) {
			html_newline(UNPROVIDED);
			html_markup(html_macros.$html_image_head$.getGlobalValue());
			html_markup(html_macros.$html_image_src$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(image_url);
			html_char(CHAR_quotation, UNPROVIDED);
			if (true) {
			    html_markup(html_macros.$html_image_name$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup($$$image);
			    html_char(CHAR_quotation, UNPROVIDED);
			}
			if (NIL != $fact_sheet_main_image$.getGlobalValue()) {
			    html_markup(html_macros.$html_attribute_class$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup($fact_sheet_main_image$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			}
			if (true) {
			    html_markup(html_macros.$html_image_alt$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup($$$image);
			    html_char(CHAR_quotation, UNPROVIDED);
			}
			html_char(CHAR_greater, UNPROVIDED);
			{
			    SubLObject _prev_bind_0_115 = html_macros.$html_safe_print$.currentBinding(thread);
			    try {
				html_macros.$html_safe_print$.bind(T, thread);
			    } finally {
				html_macros.$html_safe_print$.rebind(_prev_bind_0_115, thread);
			    }
			}
			html_markup(html_macros.$html_image_tail$.getGlobalValue());
		    }
		} finally {
		    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
		}
	    }
	    html_markup(html_macros.$html_div_tail$.getGlobalValue());
	    princ(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_optional_section_end_comment($TITLE), html_macros.$html_stream$.getDynamicValue(thread));
	    {
		SubLObject v_class = NIL;
		SubLObject cdolist_list_var = categorized_paragraph_texts;
		SubLObject cons = NIL;
		for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
		    {
			SubLObject datum = cons;
			SubLObject current = datum;
			SubLObject category = NIL;
			SubLObject paragraph_texts = NIL;
			destructuring_bind_must_consp(current, datum, $list_alt481);
			category = current.first();
			current = current.rest();
			paragraph_texts = current;
			if (NIL != paragraph_texts) {
			    {
				SubLObject category_class = com.cyc.cycjava.cycl.fact_sheets.category_label_style(category);
				SubLObject style = cconcatenate(format_nil.format_nil_a_no_copy($fact_sheet_category_title$.getGlobalValue()), new SubLObject[] { $str_alt50$_, format_nil.format_nil_a_no_copy(category_class), $$$Header });
				html_markup(html_macros.$html_div_head$.getGlobalValue());
				if (NIL != style) {
				    html_markup(html_macros.$html_attribute_class$.getGlobalValue());
				    html_char(CHAR_quotation, UNPROVIDED);
				    html_markup(style);
				    html_char(CHAR_quotation, UNPROVIDED);
				}
				html_char(CHAR_greater, UNPROVIDED);
				{
				    SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
				    try {
					html_macros.$html_safe_print$.bind(T, thread);
					html_markup(com.cyc.cycjava.cycl.fact_sheets.category_label_string(category));
				    } finally {
					html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
				    }
				}
				html_markup(html_macros.$html_div_tail$.getGlobalValue());
				{
				    SubLObject alternator_toggle = NIL;
				    SubLObject list_var = NIL;
				    SubLObject paragraph_text = NIL;
				    SubLObject ignore_me = NIL;
				    for (list_var = paragraph_texts, paragraph_text = list_var.first(), ignore_me = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), paragraph_text = list_var.first(), ignore_me = add(ONE_INTEGER, ignore_me)) {
					if (NIL != alternator_toggle) {
					    alternator_toggle = NIL;
					} else {
					    alternator_toggle = T;
					}
					v_class = (NIL != alternator_toggle) ? ((SubLObject) ($fact_sheet_fact_class2$.getGlobalValue())) : $fact_sheet_fact_class1$.getGlobalValue();
					{
					    SubLObject sentence_class = cconcatenate(format_nil.format_nil_a_no_copy(category_class), new SubLObject[] { $str_alt50$_, format_nil.format_nil_a_no_copy(v_class) });
					    html_markup(html_macros.$html_div_head$.getGlobalValue());
					    if (NIL != sentence_class) {
						html_markup(html_macros.$html_attribute_class$.getGlobalValue());
						html_char(CHAR_quotation, UNPROVIDED);
						html_markup(sentence_class);
						html_char(CHAR_quotation, UNPROVIDED);
					    }
					    html_char(CHAR_greater, UNPROVIDED);
					    {
						SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
						try {
						    html_macros.$html_safe_print$.bind(T, thread);
						    html_markup(paragraph_text);
						} finally {
						    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
						}
					    }
					    html_markup(html_macros.$html_div_tail$.getGlobalValue());
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	    {
		SubLObject v_class = NIL;
		SubLObject alternator_toggle = NIL;
		SubLObject list_var = NIL;
		SubLObject footnote = NIL;
		SubLObject ignore_me = NIL;
		for (list_var = footnotes, footnote = list_var.first(), ignore_me = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), footnote = list_var.first(), ignore_me = add(ONE_INTEGER, ignore_me)) {
		    if (NIL != alternator_toggle) {
			alternator_toggle = NIL;
		    } else {
			alternator_toggle = T;
		    }
		    v_class = (NIL != alternator_toggle) ? ((SubLObject) ($fact_sheet_footnote_class2$.getGlobalValue())) : $fact_sheet_footnote_class1$.getGlobalValue();
		    html_markup(html_macros.$html_div_head$.getGlobalValue());
		    if (NIL != v_class) {
			html_markup(html_macros.$html_attribute_class$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(v_class);
			html_char(CHAR_quotation, UNPROVIDED);
		    }
		    html_char(CHAR_greater, UNPROVIDED);
		    {
			SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
			try {
			    html_macros.$html_safe_print$.bind(T, thread);
			    html_markup(com.cyc.cycjava.cycl.fact_sheets.footnote_text(footnote));
			} finally {
			    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
			}
		    }
		    html_markup(html_macros.$html_div_tail$.getGlobalValue());
		}
	    }
	    return NIL;
	}
    }

    public static SubLObject display_fact_sheet_for_external_styles(final SubLObject title, final SubLObject image_url, final SubLObject categorized_paragraph_texts, final SubLObject footnotes, SubLObject branding_info) {
	if (branding_info == UNPROVIDED) {
	    branding_info = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	princ(fact_sheets.fact_sheet_optional_section_start_comment($TITLE, UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
	html_markup(html_macros.$html_div_head$.getGlobalValue());
	if (NIL != fact_sheets.$fact_sheet_title_div$.getGlobalValue()) {
	    html_markup(html_macros.$html_attribute_class$.getGlobalValue());
	    html_char(CHAR_quotation, UNPROVIDED);
	    html_markup(fact_sheets.$fact_sheet_title_div$.getGlobalValue());
	    html_char(CHAR_quotation, UNPROVIDED);
	}
	html_char(CHAR_greater, UNPROVIDED);
	final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
	try {
	    html_macros.$html_safe_print$.bind(T, thread);
	    if (NIL != branding_info) {
		SubLObject current;
		final SubLObject datum = current = branding_info;
		SubLObject url = NIL;
		SubLObject logo_url = NIL;
		SubLObject brand_class = NIL;
		SubLObject alt_text = NIL;
		destructuring_bind_must_consp(current, datum, fact_sheets.$list333);
		url = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, fact_sheets.$list333);
		logo_url = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, fact_sheets.$list333);
		brand_class = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, fact_sheets.$list333);
		alt_text = current.first();
		current = current.rest();
		if (NIL == current) {
		    html_markup(html_macros.$html_anchor_head$.getGlobalValue());
		    html_markup(html_macros.$html_anchor_href$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup(url);
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_char(CHAR_greater, UNPROVIDED);
		    final SubLObject _prev_bind_0_$98 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			html_markup(html_macros.$html_image_head$.getGlobalValue());
			html_markup(html_macros.$html_image_src$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(logo_url);
			html_char(CHAR_quotation, UNPROVIDED);
			if (NIL != brand_class) {
			    html_markup(html_macros.$html_attribute_class$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup(brand_class);
			    html_char(CHAR_quotation, UNPROVIDED);
			}
			if (NIL != alt_text) {
			    html_markup(html_macros.$html_image_alt$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup(alt_text);
			    html_char(CHAR_quotation, UNPROVIDED);
			}
			html_char(CHAR_greater, UNPROVIDED);
			final SubLObject _prev_bind_0_$99 = html_macros.$html_safe_print$.currentBinding(thread);
			try {
			    html_macros.$html_safe_print$.bind(T, thread);
			} finally {
			    html_macros.$html_safe_print$.rebind(_prev_bind_0_$99, thread);
			}
			html_markup(html_macros.$html_image_tail$.getGlobalValue());
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_0_$98, thread);
		    }
		    html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
		    html_newline(UNPROVIDED);
		} else {
		    cdestructuring_bind_error(datum, fact_sheets.$list333);
		}
	    }
	    html_markup(html_macros.$html_span_head$.getGlobalValue());
	    if (NIL != fact_sheets.$fact_sheet_title$.getGlobalValue()) {
		html_markup(html_macros.$html_attribute_class$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(fact_sheets.$fact_sheet_title$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
	    }
	    html_char(CHAR_greater, UNPROVIDED);
	    final SubLObject _prev_bind_0_$100 = html_macros.$html_safe_print$.currentBinding(thread);
	    try {
		html_macros.$html_safe_print$.bind(T, thread);
		html_princ(title);
	    } finally {
		html_macros.$html_safe_print$.rebind(_prev_bind_0_$100, thread);
	    }
	    html_markup(html_macros.$html_span_tail$.getGlobalValue());
	    if (image_url.isString()) {
		html_newline(UNPROVIDED);
		html_markup(html_macros.$html_image_head$.getGlobalValue());
		html_markup(html_macros.$html_image_src$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(image_url);
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(html_macros.$html_image_name$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(fact_sheets.$$$image);
		html_char(CHAR_quotation, UNPROVIDED);
		if (NIL != fact_sheets.$fact_sheet_main_image$.getGlobalValue()) {
		    html_markup(html_macros.$html_attribute_class$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup(fact_sheets.$fact_sheet_main_image$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		}
		html_markup(html_macros.$html_image_alt$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(fact_sheets.$$$image);
		html_char(CHAR_quotation, UNPROVIDED);
		html_char(CHAR_greater, UNPROVIDED);
		final SubLObject _prev_bind_0_$101 = html_macros.$html_safe_print$.currentBinding(thread);
		try {
		    html_macros.$html_safe_print$.bind(T, thread);
		} finally {
		    html_macros.$html_safe_print$.rebind(_prev_bind_0_$101, thread);
		}
		html_markup(html_macros.$html_image_tail$.getGlobalValue());
	    }
	} finally {
	    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
	}
	html_markup(html_macros.$html_div_tail$.getGlobalValue());
	princ(fact_sheets.fact_sheet_optional_section_end_comment($TITLE), html_macros.$html_stream$.getDynamicValue(thread));
	SubLObject v_class = NIL;
	SubLObject cdolist_list_var = categorized_paragraph_texts;
	SubLObject cons = NIL;
	cons = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    SubLObject current2;
	    final SubLObject datum2 = current2 = cons;
	    SubLObject category = NIL;
	    SubLObject paragraph_texts = NIL;
	    destructuring_bind_must_consp(current2, datum2, fact_sheets.$list321);
	    category = current2.first();
	    current2 = paragraph_texts = current2.rest();
	    if (NIL != paragraph_texts) {
		final SubLObject category_class = fact_sheets.category_label_style(category);
		final SubLObject style = cconcatenate(format_nil.format_nil_a_no_copy(fact_sheets.$fact_sheet_category_title$.getGlobalValue()), new SubLObject[] { fact_sheets.$$$_, format_nil.format_nil_a_no_copy(category_class), fact_sheets.$$$Header });
		html_markup(html_macros.$html_div_head$.getGlobalValue());
		if (NIL != style) {
		    html_markup(html_macros.$html_attribute_class$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup(style);
		    html_char(CHAR_quotation, UNPROVIDED);
		}
		html_char(CHAR_greater, UNPROVIDED);
		final SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
		try {
		    html_macros.$html_safe_print$.bind(T, thread);
		    html_markup(fact_sheets.category_label_string(category));
		} finally {
		    html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
		}
		html_markup(html_macros.$html_div_tail$.getGlobalValue());
		SubLObject alternator_toggle = NIL;
		SubLObject list_var = NIL;
		SubLObject paragraph_text = NIL;
		SubLObject ignore_me = NIL;
		list_var = paragraph_texts;
		paragraph_text = list_var.first();
		for (ignore_me = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), paragraph_text = list_var.first(), ignore_me = add(ONE_INTEGER, ignore_me)) {
		    if (NIL != alternator_toggle) {
			alternator_toggle = NIL;
		    } else {
			alternator_toggle = T;
		    }
		    v_class = (NIL != alternator_toggle) ? fact_sheets.$fact_sheet_fact_class2$.getGlobalValue() : fact_sheets.$fact_sheet_fact_class1$.getGlobalValue();
		    final SubLObject sentence_class = cconcatenate(format_nil.format_nil_a_no_copy(category_class), new SubLObject[] { fact_sheets.$$$_, format_nil.format_nil_a_no_copy(v_class) });
		    html_markup(html_macros.$html_div_head$.getGlobalValue());
		    if (NIL != sentence_class) {
			html_markup(html_macros.$html_attribute_class$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(sentence_class);
			html_char(CHAR_quotation, UNPROVIDED);
		    }
		    html_char(CHAR_greater, UNPROVIDED);
		    final SubLObject _prev_bind_3 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			html_markup(paragraph_text);
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_3, thread);
		    }
		    html_markup(html_macros.$html_div_tail$.getGlobalValue());
		}
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    cons = cdolist_list_var.first();
	}
	v_class = NIL;
	SubLObject alternator_toggle2 = NIL;
	SubLObject list_var2 = NIL;
	SubLObject footnote = NIL;
	SubLObject ignore_me2 = NIL;
	list_var2 = footnotes;
	footnote = list_var2.first();
	for (ignore_me2 = ZERO_INTEGER; NIL != list_var2; list_var2 = list_var2.rest(), footnote = list_var2.first(), ignore_me2 = add(ONE_INTEGER, ignore_me2)) {
	    if (NIL != alternator_toggle2) {
		alternator_toggle2 = NIL;
	    } else {
		alternator_toggle2 = T;
	    }
	    v_class = (NIL != alternator_toggle2) ? fact_sheets.$fact_sheet_footnote_class2$.getGlobalValue() : fact_sheets.$fact_sheet_footnote_class1$.getGlobalValue();
	    html_markup(html_macros.$html_div_head$.getGlobalValue());
	    if (NIL != v_class) {
		html_markup(html_macros.$html_attribute_class$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(v_class);
		html_char(CHAR_quotation, UNPROVIDED);
	    }
	    html_char(CHAR_greater, UNPROVIDED);
	    final SubLObject _prev_bind_4 = html_macros.$html_safe_print$.currentBinding(thread);
	    try {
		html_macros.$html_safe_print$.bind(T, thread);
		html_markup(fact_sheets.footnote_text(footnote));
	    } finally {
		html_macros.$html_safe_print$.rebind(_prev_bind_4, thread);
	    }
	    html_markup(html_macros.$html_div_tail$.getGlobalValue());
	}
	return NIL;
    }

    public static final SubLObject display_fact_sheet_xml_alt(SubLObject title, SubLObject image_url, SubLObject categorized_paragraph_texts, SubLObject footnotes, SubLObject branding_info) {
	if (branding_info == UNPROVIDED) {
	    branding_info = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL != image_url) {
		{
		    SubLObject _prev_bind_0 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
		    SubLObject _prev_bind_1 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
		    try {
			xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
			xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
			xml_utilities.xml_start_tag_internal($$$image, list($$$url, image_url), T);
		    } finally {
			xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1, thread);
			xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0, thread);
		    }
		}
	    }
	    {
		SubLObject cdolist_list_var = categorized_paragraph_texts;
		SubLObject cons = NIL;
		for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
		    {
			SubLObject datum = cons;
			SubLObject current = datum;
			SubLObject category = NIL;
			SubLObject paragraph_texts = NIL;
			destructuring_bind_must_consp(current, datum, $list_alt481);
			category = current.first();
			current = current.rest();
			paragraph_texts = current;
			if (NIL != paragraph_texts) {
			    {
				SubLObject attrs = list($$$category, com.cyc.cycjava.cycl.fact_sheets.category_label_pred(category), $$$title, com.cyc.cycjava.cycl.fact_sheets.category_label_string(category));
				{
				    SubLObject _prev_bind_0 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
				    SubLObject _prev_bind_1 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
				    try {
					xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
					xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
					xml_utilities.xml_start_tag_internal($$$factSheetSection, attrs, NIL);
					{
					    SubLObject cdolist_list_var_116 = paragraph_texts;
					    SubLObject paragraph_text = NIL;
					    for (paragraph_text = cdolist_list_var_116.first(); NIL != cdolist_list_var_116; cdolist_list_var_116 = cdolist_list_var_116.rest(), paragraph_text = cdolist_list_var_116.first()) {
						xml_utilities.xml_markup(paragraph_text);
					    }
					}
				    } finally {
					xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1, thread);
					xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0, thread);
				    }
				}
				xml_utilities.xml_terpri();
				xml_utilities.xml_end_tag_internal($$$factSheetSection);
			    }
			}
		    }
		}
	    }
	    {
		SubLObject _prev_bind_0 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
		SubLObject _prev_bind_1 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
		try {
		    xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
		    xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
		    xml_utilities.xml_start_tag_internal($$$footnotes, NIL, NIL);
		    {
			SubLObject cdolist_list_var = footnotes;
			SubLObject footnote = NIL;
			for (footnote = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), footnote = cdolist_list_var.first()) {
			    xml_utilities.xml_markup(com.cyc.cycjava.cycl.fact_sheets.footnote_text(footnote));
			}
		    }
		} finally {
		    xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1, thread);
		    xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0, thread);
		}
	    }
	    xml_utilities.xml_terpri();
	    xml_utilities.xml_end_tag_internal($$$footnotes);
	    return NIL;
	}
    }

    public static SubLObject display_fact_sheet_xml(final SubLObject title, final SubLObject image_url, final SubLObject categorized_paragraph_texts, final SubLObject footnotes, SubLObject branding_info) {
	if (branding_info == UNPROVIDED) {
	    branding_info = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	if (NIL != image_url) {
	    final SubLObject _prev_bind_0 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
	    final SubLObject _prev_bind_2 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
	    try {
		xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
		xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
		xml_utilities.xml_start_tag_internal(fact_sheets.$$$image, list(fact_sheets.$$$url, image_url), T, NIL, $UNINITIALIZED);
		final SubLObject _prev_bind_0_$102 = xml_vars.$xml_default_namespace$.currentBinding(thread);
		try {
		    xml_vars.$xml_default_namespace$.bind($UNINITIALIZED, thread);
		} finally {
		    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$102, thread);
		}
	    } finally {
		xml_utilities.$cycml_indent_level$.rebind(_prev_bind_2, thread);
		xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0, thread);
	    }
	}
	SubLObject cdolist_list_var = categorized_paragraph_texts;
	SubLObject cons = NIL;
	cons = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    SubLObject current;
	    final SubLObject datum = current = cons;
	    SubLObject category = NIL;
	    SubLObject paragraph_texts = NIL;
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list321);
	    category = current.first();
	    current = paragraph_texts = current.rest();
	    if (NIL != paragraph_texts) {
		final SubLObject attrs = list(fact_sheets.$$$category, fact_sheets.category_label_pred(category), fact_sheets.$$$title, fact_sheets.category_label_string(category));
		try {
		    final SubLObject _prev_bind_3 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
		    final SubLObject _prev_bind_4 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
		    try {
			xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
			xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
			xml_utilities.xml_start_tag_internal(fact_sheets.$$$factSheetSection, attrs, NIL, NIL, $UNINITIALIZED);
			final SubLObject _prev_bind_0_$103 = xml_vars.$xml_default_namespace$.currentBinding(thread);
			try {
			    xml_vars.$xml_default_namespace$.bind($UNINITIALIZED, thread);
			    SubLObject cdolist_list_var_$104 = paragraph_texts;
			    SubLObject paragraph_text = NIL;
			    paragraph_text = cdolist_list_var_$104.first();
			    while (NIL != cdolist_list_var_$104) {
				xml_utilities.xml_markup(paragraph_text);
				cdolist_list_var_$104 = cdolist_list_var_$104.rest();
				paragraph_text = cdolist_list_var_$104.first();
			    }
			} finally {
			    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$103, thread);
			}
		    } finally {
			xml_utilities.$cycml_indent_level$.rebind(_prev_bind_4, thread);
			xml_utilities.$xml_indentation_level$.rebind(_prev_bind_3, thread);
		    }
		} finally {
		    final SubLObject _prev_bind_5 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values = getValuesAsVector();
			xml_utilities.xml_terpri();
			xml_utilities.xml_end_tag_internal(fact_sheets.$$$factSheetSection);
			restoreValuesFromVector(_values);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
		    }
		}
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    cons = cdolist_list_var.first();
	}
	try {
	    final SubLObject _prev_bind_0 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
	    final SubLObject _prev_bind_2 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
	    try {
		xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
		xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
		xml_utilities.xml_start_tag_internal(fact_sheets.$$$footnotes, NIL, NIL, NIL, $UNINITIALIZED);
		final SubLObject _prev_bind_0_$104 = xml_vars.$xml_default_namespace$.currentBinding(thread);
		try {
		    xml_vars.$xml_default_namespace$.bind($UNINITIALIZED, thread);
		    SubLObject cdolist_list_var2 = footnotes;
		    SubLObject footnote = NIL;
		    footnote = cdolist_list_var2.first();
		    while (NIL != cdolist_list_var2) {
			xml_utilities.xml_markup(fact_sheets.footnote_text(footnote));
			cdolist_list_var2 = cdolist_list_var2.rest();
			footnote = cdolist_list_var2.first();
		    }
		} finally {
		    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$104, thread);
		}
	    } finally {
		xml_utilities.$cycml_indent_level$.rebind(_prev_bind_2, thread);
		xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0, thread);
	    }
	} finally {
	    final SubLObject _prev_bind_6 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values2 = getValuesAsVector();
		xml_utilities.xml_terpri();
		xml_utilities.xml_end_tag_internal(fact_sheets.$$$footnotes);
		restoreValuesFromVector(_values2);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
	    }
	}
	return NIL;
    }

    public static final SubLObject print_fact_sheet_stats_alt(SubLObject stats, SubLObject display_time, SubLObject under_constructionP) {
	if (under_constructionP == UNPROVIDED) {
	    under_constructionP = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(stats, FACT_SHEET_STATS_P);
	    {
		SubLObject datum = stats;
		SubLObject current = datum;
		SubLObject domain_mt = NIL;
		SubLObject verbosity = NIL;
		SubLObject sentence_count = NIL;
		SubLObject section_count = NIL;
		SubLObject info_gathering_time = NIL;
		SubLObject pph_time = NIL;
		SubLObject secondstring = NIL;
		SubLObject datestring = NIL;
		SubLObject image_id = NIL;
		SubLObject kb_version = NIL;
		SubLObject cyc_revision = NIL;
		destructuring_bind_must_consp(current, datum, $list_alt501);
		domain_mt = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, $list_alt501);
		verbosity = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, $list_alt501);
		sentence_count = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, $list_alt501);
		section_count = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, $list_alt501);
		info_gathering_time = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, $list_alt501);
		pph_time = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, $list_alt501);
		secondstring = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, $list_alt501);
		datestring = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, $list_alt501);
		image_id = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, $list_alt501);
		kb_version = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, $list_alt501);
		cyc_revision = current.first();
		current = current.rest();
		{
		    SubLObject v_term = (current.isCons()) ? ((SubLObject) (current.first())) : NIL;
		    destructuring_bind_must_listp(current, datum, $list_alt501);
		    current = current.rest();
		    if (NIL == current) {
			html_markup(html_macros.$html_span_head$.getGlobalValue());
			html_markup(html_macros.$html_span_style$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(html_macros.$html_style_font_size_smaller$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_char(CHAR_greater, UNPROVIDED);
			{
			    SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
			    try {
				html_macros.$html_safe_print$.bind(T, thread);
				html_hr(UNPROVIDED, UNPROVIDED);
				format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt502$Domain_mt___A, pph_main.generate_phrase(domain_mt, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
				html_newline(UNPROVIDED);
				format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt503$Verbosity___A, verbosity);
				if (NIL == under_constructionP) {
				    html_newline(UNPROVIDED);
				    format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt504$Sentence_Count___S, sentence_count);
				    html_newline(UNPROVIDED);
				    format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt505$Section_Count___S, section_count);
				    html_newline(UNPROVIDED);
				    format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt506$Information_Gathering_Time___a, numeric_date_utilities.readable_elapsed_time_string(info_gathering_time, UNPROVIDED));
				    html_newline(UNPROVIDED);
				    format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt507$Paraphrase_Time___a, numeric_date_utilities.readable_elapsed_time_string(pph_time, UNPROVIDED));
				    html_newline(UNPROVIDED);
				    format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt508$Customization_and_Display_Time___, numeric_date_utilities.readable_elapsed_time_string(display_time, UNPROVIDED));
				}
				html_newline(UNPROVIDED);
				format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt509$_A_at__A_on__A, new SubLObject[] { NIL != under_constructionP ? ((SubLObject) ($$$Started)) : $$$Created, secondstring, datestring });
				html_newline(UNPROVIDED);
				format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt512$Image_ID___A, image_id);
				html_newline(UNPROVIDED);
				format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt513$_A_A__A_A_, new SubLObject[] { $fact_sheet_kb_version_string_introducer$.getGlobalValue(), kb_version, $fact_sheet_revision_string_introducer$.getGlobalValue(), cyc_revision });
			    } finally {
				html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
			    }
			}
			html_markup(html_macros.$html_span_tail$.getGlobalValue());
		    } else {
			cdestructuring_bind_error(datum, $list_alt501);
		    }
		}
	    }
	    return NIL;
	}
    }

    public static SubLObject print_fact_sheet_stats(final SubLObject stats, final SubLObject display_time, SubLObject under_constructionP) {
	if (under_constructionP == UNPROVIDED) {
	    under_constructionP = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	assert NIL != fact_sheets.fact_sheet_stats_p(stats) : "! fact_sheets.fact_sheet_stats_p(stats) " + ("fact_sheets.fact_sheet_stats_p(stats) " + "CommonSymbols.NIL != fact_sheets.fact_sheet_stats_p(stats) ") + stats;
	SubLObject domain_mt = NIL;
	SubLObject verbosity = NIL;
	SubLObject sentence_count = NIL;
	SubLObject section_count = NIL;
	SubLObject info_gathering_time = NIL;
	SubLObject pph_time = NIL;
	SubLObject secondstring = NIL;
	SubLObject datestring = NIL;
	SubLObject image_id = NIL;
	SubLObject kb_version = NIL;
	SubLObject cyc_revision = NIL;
	destructuring_bind_must_consp(stats, stats, fact_sheets.$list342);
	domain_mt = stats.first();
	SubLObject current = stats.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list342);
	verbosity = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list342);
	sentence_count = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list342);
	section_count = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list342);
	info_gathering_time = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list342);
	pph_time = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list342);
	secondstring = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list342);
	datestring = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list342);
	image_id = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list342);
	kb_version = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list342);
	cyc_revision = current.first();
	current = current.rest();
	final SubLObject v_term = (current.isCons()) ? current.first() : NIL;
	destructuring_bind_must_listp(current, stats, fact_sheets.$list342);
	current = current.rest();
	if (NIL == current) {
	    html_markup(html_macros.$html_span_head$.getGlobalValue());
	    html_markup(html_macros.$html_span_style$.getGlobalValue());
	    html_char(CHAR_quotation, UNPROVIDED);
	    html_markup(html_macros.$html_style_font_size_smaller$.getGlobalValue());
	    html_char(CHAR_quotation, UNPROVIDED);
	    html_char(CHAR_greater, UNPROVIDED);
	    final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
	    try {
		html_macros.$html_safe_print$.bind(T, thread);
		html_hr(UNPROVIDED, UNPROVIDED);
		format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$str343$Domain_mt___A, pph_main.generate_phrase(domain_mt, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
		html_newline(UNPROVIDED);
		format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$str344$Verbosity___A, verbosity);
		if (NIL == under_constructionP) {
		    html_newline(UNPROVIDED);
		    format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$str345$Sentence_Count___S, sentence_count);
		    html_newline(UNPROVIDED);
		    format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$str346$Section_Count___S, section_count);
		    html_newline(UNPROVIDED);
		    format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$str347$Information_Gathering_Time___a, numeric_date_utilities.readable_elapsed_time_string(info_gathering_time, UNPROVIDED));
		    html_newline(UNPROVIDED);
		    format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$str348$Paraphrase_Time___a, numeric_date_utilities.readable_elapsed_time_string(pph_time, UNPROVIDED));
		    html_newline(UNPROVIDED);
		    format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$str349$Customization_and_Display_Time___, numeric_date_utilities.readable_elapsed_time_string(display_time, UNPROVIDED));
		}
		html_newline(UNPROVIDED);
		format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$str350$_A_at__A_on__A, new SubLObject[] { NIL != under_constructionP ? fact_sheets.$$$Started : fact_sheets.$$$Created, secondstring, datestring });
		html_newline(UNPROVIDED);
		format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$str353$Image_ID___A, image_id);
		html_newline(UNPROVIDED);
		format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$str354$_A_A__A_A_, new SubLObject[] { fact_sheets.$fact_sheet_kb_version_string_introducer$.getGlobalValue(), kb_version, fact_sheets.$fact_sheet_revision_string_introducer$.getGlobalValue(), cyc_revision });
	    } finally {
		html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
	    }
	    html_markup(html_macros.$html_span_tail$.getGlobalValue());
	} else {
	    cdestructuring_bind_error(stats, fact_sheets.$list342);
	}
	return NIL;
    }

    public static final SubLObject fact_sheet_kb_version_string_alt(SubLObject html) {
	{
	    SubLObject introducer = $fact_sheet_kb_version_string_introducer$.getGlobalValue();
	    return com.cyc.cycjava.cycl.fact_sheets.fact_sheet_info_string(html, introducer);
	}
    }

    public static SubLObject fact_sheet_kb_version_string(final SubLObject html) {
	final SubLObject introducer = fact_sheets.$fact_sheet_kb_version_string_introducer$.getGlobalValue();
	return fact_sheets.fact_sheet_info_string(html, introducer);
    }

    public static final SubLObject fact_sheet_cyc_revision_string_alt(SubLObject html) {
	{
	    SubLObject introducer = $fact_sheet_revision_string_introducer$.getGlobalValue();
	    return com.cyc.cycjava.cycl.fact_sheets.fact_sheet_info_string(html, introducer);
	}
    }

    public static SubLObject fact_sheet_cyc_revision_string(final SubLObject html) {
	final SubLObject introducer = fact_sheets.$fact_sheet_revision_string_introducer$.getGlobalValue();
	return fact_sheets.fact_sheet_info_string(html, introducer);
    }

    public static final SubLObject fact_sheet_info_string_alt(SubLObject html, SubLObject introducer) {
	{
	    SubLObject section_start = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_section_start_position(html, $STATS, UNPROVIDED);
	    SubLObject section_end = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_section_end_position(html, $STATS, section_start);
	    SubLObject introducer_position = (NIL != section_end) ? ((SubLObject) (search(introducer, html, symbol_function(EQUAL), symbol_function(IDENTITY), ZERO_INTEGER, NIL, section_start, section_end))) : NIL;
	    SubLObject start_position = (NIL != introducer_position) ? ((SubLObject) (add(introducer_position, length(introducer)))) : NIL;
	    SubLObject end_position = (NIL != start_position) ? ((SubLObject) (position(CHAR_space, html, symbol_function(EQ), symbol_function(IDENTITY), start_position, UNPROVIDED))) : NIL;
	    return NIL != end_position ? ((SubLObject) (string_utilities.substring(html, start_position, end_position))) : NIL;
	}
    }

    public static SubLObject fact_sheet_info_string(final SubLObject html, final SubLObject introducer) {
	final SubLObject section_start = fact_sheets.fact_sheet_section_start_position(html, $STATS, UNPROVIDED);
	final SubLObject section_end = fact_sheets.fact_sheet_section_end_position(html, $STATS, section_start);
	final SubLObject introducer_position = (NIL != section_end) ? search(introducer, html, symbol_function(EQUAL), symbol_function(IDENTITY), ZERO_INTEGER, NIL, section_start, section_end) : NIL;
	final SubLObject start_position = (NIL != introducer_position) ? add(introducer_position, length(introducer)) : NIL;
	final SubLObject end_position = (NIL != start_position) ? position(CHAR_space, html, symbol_function(EQ), symbol_function(IDENTITY), start_position, UNPROVIDED) : NIL;
	return NIL != end_position ? string_utilities.substring(html, start_position, end_position) : NIL;
    }

    public static final SubLObject fact_sheet_pph_demerit_cutoff_alt() {
	return $fact_sheet_demerit_cutoff$.getGlobalValue();
    }

    public static SubLObject fact_sheet_pph_demerit_cutoff() {
	return fact_sheets.$fact_sheet_demerit_cutoff$.getGlobalValue();
    }

    public static final SubLObject fact_sheet_min_paragraph_length_alt() {
	return $fact_sheet_min_paragraph_length$.getGlobalValue();
    }

    public static SubLObject fact_sheet_min_paragraph_length() {
	return fact_sheets.$fact_sheet_min_paragraph_length$.getGlobalValue();
    }

    public static final SubLObject fact_sheet_verbosity_p_alt(SubLObject v_object) {
	return subl_promotions.memberP(v_object, $fact_sheet_verbosities$.getGlobalValue(), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject fact_sheet_verbosity_p(final SubLObject v_object) {
	return subl_promotions.memberP(v_object, fact_sheets.$fact_sheet_verbosities$.getGlobalValue(), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_image_root_placeholder_alt() {
	return $fact_sheet_image_root_placeholder$.getGlobalValue();
    }

    public static SubLObject fact_sheet_image_root_placeholder() {
	return fact_sheets.$fact_sheet_image_root_placeholder$.getGlobalValue();
    }

    public static final SubLObject fact_sheet_image_url_for_term_alt(SubLObject v_term, SubLObject domain_mt) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == forts.fort_p(v_term)) {
		return NIL;
	    }
	    {
		SubLObject root = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_image_root_placeholder();
		SubLObject url = NIL;
		if (root.isString() && (NIL != somewhere_cache.some_pred_assertion_somewhereP($$salientTermImagePathname, v_term, ONE_INTEGER, T))) {
		    {
			SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(domain_mt);
			{
			    SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
			    SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
			    SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
			    try {
				mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
				mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
				mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
				if (NIL == url) {
				    {
					SubLObject csome_list_var = kb_mapping_utilities.pred_values(v_term, $$salientTermImagePathname, ONE_INTEGER, TWO_INTEGER, $TRUE);
					SubLObject path = NIL;
					for (path = csome_list_var.first(); !((NIL != url) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), path = csome_list_var.first()) {
					    if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_image_path_okP(path)) {
						url = cconcatenate(root, path);
					    }
					}
				    }
				}
			    } finally {
				mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
				mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
				mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		}
		return url;
	    }
	}
    }

    public static SubLObject fact_sheet_image_url_for_term(final SubLObject v_term, SubLObject domain_mt) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	if (NIL == forts.fort_p(v_term)) {
	    return NIL;
	}
	final SubLObject root = fact_sheets.fact_sheet_image_root_placeholder();
	SubLObject url = NIL;
	if (root.isString() && (NIL != somewhere_cache.some_pred_assertion_somewhereP(fact_sheets.$$salientTermImagePathname, v_term, ONE_INTEGER, T))) {
	    final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(domain_mt);
	    final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
	    final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
	    final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
	    try {
		mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
		mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
		mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
		if (NIL == url) {
		    SubLObject csome_list_var = kb_mapping_utilities.pred_values(v_term, fact_sheets.$$salientTermImagePathname, ONE_INTEGER, TWO_INTEGER, $TRUE);
		    SubLObject path = NIL;
		    path = csome_list_var.first();
		    while ((NIL == url) && (NIL != csome_list_var)) {
			if (NIL != fact_sheets.fact_sheet_image_path_okP(path)) {
			    url = cconcatenate(root, path);
			}
			csome_list_var = csome_list_var.rest();
			path = csome_list_var.first();
		    }
		}
	    } finally {
		mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
		mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
		mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
	    }
	}
	return url;
    }

    public static final SubLObject fact_sheet_base_url_placeholder_alt() {
	return $fact_sheet_base_url_placeholder$.getGlobalValue();
    }

    public static SubLObject fact_sheet_base_url_placeholder() {
	return fact_sheets.$fact_sheet_base_url_placeholder$.getGlobalValue();
    }

    public static final SubLObject fact_sheet_html_replace_placeholders_alt(SubLObject html, SubLObject domain_mt) {
	if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_html_contains_image_root_placeholderP(html)) {
	    html = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_html_replace_image_root_placeholder(html, domain_mt);
	}
	if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_html_contains_base_url_placeholderP(html)) {
	    html = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_html_replace_base_url_placeholder(html);
	}
	if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_html_contains_replaceable_colorsP(html)) {
	    html = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_html_replace_colors(html);
	}
	return html;
    }

    public static SubLObject fact_sheet_html_replace_placeholders(SubLObject html, final SubLObject domain_mt) {
	if (NIL != fact_sheets.fact_sheet_html_contains_image_root_placeholderP(html)) {
	    html = fact_sheets.fact_sheet_html_replace_image_root_placeholder(html, domain_mt);
	}
	if (NIL != fact_sheets.fact_sheet_html_contains_base_url_placeholderP(html)) {
	    html = fact_sheets.fact_sheet_html_replace_base_url_placeholder(html);
	}
	if (NIL != fact_sheets.fact_sheet_html_contains_replaceable_colorsP(html)) {
	    html = fact_sheets.fact_sheet_html_replace_colors(html);
	}
	return html;
    }

    public static final SubLObject fact_sheet_html_contains_replaceable_colorsP_alt(SubLObject html) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject result = NIL;
		if (NIL == result) {
		    {
			SubLObject csome_list_var = $fact_sheet_replacement_color_spec$.getDynamicValue(thread);
			SubLObject color_pair = NIL;
			for (color_pair = csome_list_var.first(); !((NIL != result) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), color_pair = csome_list_var.first()) {
			    {
				SubLObject datum = color_pair;
				SubLObject current = datum;
				SubLObject original = NIL;
				SubLObject replacement = NIL;
				destructuring_bind_must_consp(current, datum, $list_alt521);
				original = current.first();
				current = current.rest();
				replacement = current;
				result = string_utilities.substringP(original, html, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED);
			    }
			}
		    }
		}
		return result;
	    }
	}
    }

    public static SubLObject fact_sheet_html_contains_replaceable_colorsP(final SubLObject html) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject result = NIL;
	if (NIL == result) {
	    SubLObject csome_list_var = fact_sheets.$fact_sheet_replacement_color_spec$.getDynamicValue(thread);
	    SubLObject color_pair = NIL;
	    color_pair = csome_list_var.first();
	    while ((NIL == result) && (NIL != csome_list_var)) {
		SubLObject current;
		final SubLObject datum = current = color_pair;
		SubLObject original = NIL;
		SubLObject replacement = NIL;
		destructuring_bind_must_consp(current, datum, fact_sheets.$list362);
		original = current.first();
		current = replacement = current.rest();
		result = string_utilities.substringP(original, html, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED);
		csome_list_var = csome_list_var.rest();
		color_pair = csome_list_var.first();
	    }
	}
	return result;
    }

    public static final SubLObject fact_sheet_html_replace_colors_alt(SubLObject html) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject cdolist_list_var = $fact_sheet_replacement_color_spec$.getDynamicValue(thread);
		SubLObject color_pair = NIL;
		for (color_pair = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), color_pair = cdolist_list_var.first()) {
		    {
			SubLObject datum = color_pair;
			SubLObject current = datum;
			SubLObject original = NIL;
			SubLObject replacement = NIL;
			destructuring_bind_must_consp(current, datum, $list_alt521);
			original = current.first();
			current = current.rest();
			replacement = current;
			html = string_utilities.string_substitute(replacement, original, html, UNPROVIDED);
		    }
		}
	    }
	    return html;
	}
    }

    public static SubLObject fact_sheet_html_replace_colors(SubLObject html) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject cdolist_list_var = fact_sheets.$fact_sheet_replacement_color_spec$.getDynamicValue(thread);
	SubLObject color_pair = NIL;
	color_pair = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    SubLObject current;
	    final SubLObject datum = current = color_pair;
	    SubLObject original = NIL;
	    SubLObject replacement = NIL;
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list362);
	    original = current.first();
	    current = replacement = current.rest();
	    html = string_utilities.string_substitute(replacement, original, html, UNPROVIDED);
	    cdolist_list_var = cdolist_list_var.rest();
	    color_pair = cdolist_list_var.first();
	}
	return html;
    }

    public static final SubLObject fact_sheet_html_contains_base_url_placeholderP_alt(SubLObject html) {
	return string_utilities.substringP($fact_sheet_base_url_placeholder$.getGlobalValue(), html, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject fact_sheet_html_contains_base_url_placeholderP(final SubLObject html) {
	return string_utilities.substringP(fact_sheets.$fact_sheet_base_url_placeholder$.getGlobalValue(), html, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_html_replace_base_url_placeholder_alt(SubLObject html) {
	{
	    SubLObject base_url = http_kernel.http_server_base_url(T);
	    return string_utilities.string_substitute(base_url, $fact_sheet_base_url_placeholder$.getGlobalValue(), html, UNPROVIDED);
	}
    }

    public static SubLObject fact_sheet_html_replace_base_url_placeholder(final SubLObject html) {
	final SubLObject base_url = http_kernel.http_server_base_url(T);
	return string_utilities.string_substitute(base_url, fact_sheets.$fact_sheet_base_url_placeholder$.getGlobalValue(), html, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_html_contains_image_root_placeholderP_alt(SubLObject html) {
	return string_utilities.substringP($fact_sheet_image_root_placeholder$.getGlobalValue(), html, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject fact_sheet_html_contains_image_root_placeholderP(final SubLObject html) {
	return string_utilities.substringP(fact_sheets.$fact_sheet_image_root_placeholder$.getGlobalValue(), html, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject clear_fact_sheet_image_file_root_url_alt() {
	{
	    SubLObject cs = $fact_sheet_image_file_root_url_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_fact_sheet_image_file_root_url() {
	final SubLObject cs = fact_sheets.$fact_sheet_image_file_root_url_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_fact_sheet_image_file_root_url_alt() {
	return memoization_state.caching_state_remove_function_results_with_args($fact_sheet_image_file_root_url_caching_state$.getGlobalValue(), list(EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_fact_sheet_image_file_root_url() {
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_image_file_root_url_caching_state$.getGlobalValue(), list(EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_image_file_root_url_internal_alt() {
	return $fact_sheet_image_file_root_directory$.getGlobalValue().isString() ? ((SubLObject) (cconcatenate($str_alt524$file___, $fact_sheet_image_file_root_directory$.getGlobalValue()))) : NIL;
    }

    public static SubLObject fact_sheet_image_file_root_url_internal() {
	return fact_sheets.$fact_sheet_image_file_root_directory$.getGlobalValue().isString() ? cconcatenate(fact_sheets.$str364$file___, fact_sheets.$fact_sheet_image_file_root_directory$.getGlobalValue()) : NIL;
    }

    public static final SubLObject fact_sheet_image_file_root_url_alt() {
	{
	    SubLObject caching_state = $fact_sheet_image_file_root_url_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(FACT_SHEET_IMAGE_FILE_ROOT_URL, $fact_sheet_image_file_root_url_caching_state$, NIL, EQL, ZERO_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
		if (results == $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_image_file_root_url_internal()));
		    memoization_state.caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
		}
		return memoization_state.caching_results(results);
	    }
	}
    }

    public static SubLObject fact_sheet_image_file_root_url() {
	SubLObject caching_state = fact_sheets.$fact_sheet_image_file_root_url_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.FACT_SHEET_IMAGE_FILE_ROOT_URL, fact_sheets.$fact_sheet_image_file_root_url_caching_state$, NIL, EQL, ZERO_INTEGER, ZERO_INTEGER);
	}
	SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, UNPROVIDED);
	if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    results = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_image_file_root_url_internal()));
	    memoization_state.caching_state_set_zero_arg_results(caching_state, results, UNPROVIDED);
	}
	return memoization_state.caching_results(results);
    }

    public static final SubLObject use_fact_sheet_image_file_root_urlP_alt() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    return list_utilities.sublisp_boolean($use_fact_sheet_image_file_root_urlP$.getDynamicValue(thread));
	}
    }

    public static SubLObject use_fact_sheet_image_file_root_urlP() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	return list_utilities.sublisp_boolean(fact_sheets.$use_fact_sheet_image_file_root_urlP$.getDynamicValue(thread));
    }

    public static final SubLObject relative_fact_sheet_image_url_alt(SubLObject local_root) {
	if (local_root == UNPROVIDED) {
	    local_root = NIL;
	}
	return $str_alt526$___img_;
    }

    public static SubLObject relative_fact_sheet_image_url(SubLObject local_root) {
	if (local_root == UNPROVIDED) {
	    local_root = NIL;
	}
	return fact_sheets.$str366$___img_;
    }

    public static final SubLObject fact_sheet_html_replace_image_root_placeholder_alt(SubLObject html, SubLObject domain_mt) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if ($DEFAULT == domain_mt) {
		domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt();
	    }
	    {
		SubLObject local_root = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_image_url_root(domain_mt);
		if (NIL == string_utilities.non_empty_string_p(local_root)) {
		    return html;
		} else {
		    {
			SubLObject root = (com.cyc.cycjava.cycl.fact_sheets.fact_sheet_image_file_root_url().isString() && (NIL != com.cyc.cycjava.cycl.fact_sheets.use_fact_sheet_image_file_root_urlP())) ? ((SubLObject) (com.cyc.cycjava.cycl.fact_sheets.fact_sheet_image_file_root_url()))
				: NIL != $use_relative_fact_sheet_image_urlsP$.getDynamicValue(thread) ? ((SubLObject) (com.cyc.cycjava.cycl.fact_sheets.relative_fact_sheet_image_url(local_root))) : http_kernel.get_absolute_url(local_root, T);
			SubLObject replaced = string_utilities.string_substitute(root, $fact_sheet_image_root_placeholder$.getGlobalValue(), html, UNPROVIDED);
			return replaced;
		    }
		}
	    }
	}
    }

    public static SubLObject fact_sheet_html_replace_image_root_placeholder(final SubLObject html, SubLObject domain_mt) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	if ($DEFAULT == domain_mt) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt();
	}
	final SubLObject local_root = fact_sheets.fact_sheet_image_url_root(domain_mt);
	if (NIL == string_utilities.non_empty_string_p(local_root)) {
	    return html;
	}
	final SubLObject root = (fact_sheets.fact_sheet_image_file_root_url().isString() && (NIL != fact_sheets.use_fact_sheet_image_file_root_urlP())) ? fact_sheets.fact_sheet_image_file_root_url()
		: NIL != fact_sheets.$use_relative_fact_sheet_image_urlsP$.getDynamicValue(thread) ? fact_sheets.relative_fact_sheet_image_url(local_root) : http_kernel.get_absolute_url(local_root, T);
	final SubLObject replaced = string_utilities.string_substitute(root, fact_sheets.$fact_sheet_image_root_placeholder$.getGlobalValue(), html, UNPROVIDED);
	return replaced;
    }

    public static final SubLObject clear_fact_sheet_image_url_root_alt() {
	{
	    SubLObject cs = $fact_sheet_image_url_root_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_fact_sheet_image_url_root() {
	final SubLObject cs = fact_sheets.$fact_sheet_image_url_root_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_fact_sheet_image_url_root_alt(SubLObject domain_mt) {
	return memoization_state.caching_state_remove_function_results_with_args($fact_sheet_image_url_root_caching_state$.getGlobalValue(), list(domain_mt), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_fact_sheet_image_url_root(final SubLObject domain_mt) {
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_image_url_root_caching_state$.getGlobalValue(), list(domain_mt), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_image_url_root_internal_alt(SubLObject domain_mt) {
	return ask_utilities.query_variable($sym528$_URL, $list_alt529, domain_mt, UNPROVIDED).first();
    }

    public static SubLObject fact_sheet_image_url_root_internal(final SubLObject domain_mt) {
	return ask_utilities.query_variable(fact_sheets.$sym368$_URL, fact_sheets.$list369, domain_mt, UNPROVIDED).first();
    }

    public static final SubLObject fact_sheet_image_url_root_alt(SubLObject domain_mt) {
	{
	    SubLObject caching_state = $fact_sheet_image_url_root_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(FACT_SHEET_IMAGE_URL_ROOT, $fact_sheet_image_url_root_caching_state$, NIL, EQUAL, ONE_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject results = memoization_state.caching_state_lookup(caching_state, domain_mt, $kw127$_MEMOIZED_ITEM_NOT_FOUND_);
		if (results == $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_image_url_root_internal(domain_mt)));
		    memoization_state.caching_state_put(caching_state, domain_mt, results, UNPROVIDED);
		}
		return memoization_state.caching_results(results);
	    }
	}
    }

    public static SubLObject fact_sheet_image_url_root(final SubLObject domain_mt) {
	SubLObject caching_state = fact_sheets.$fact_sheet_image_url_root_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.FACT_SHEET_IMAGE_URL_ROOT, fact_sheets.$fact_sheet_image_url_root_caching_state$, NIL, EQUAL, ONE_INTEGER, ZERO_INTEGER);
	}
	SubLObject results = memoization_state.caching_state_lookup(caching_state, domain_mt, memoization_state.$memoized_item_not_found$.getGlobalValue());
	if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    results = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_image_url_root_internal(domain_mt)));
	    memoization_state.caching_state_put(caching_state, domain_mt, results, UNPROVIDED);
	}
	return memoization_state.caching_results(results);
    }

    public static final SubLObject fact_sheet_image_path_okP_alt(SubLObject path) {
	return makeBoolean(path.isString() && (NIL != file_utilities.file_existsP(cconcatenate($fact_sheet_image_file_root_directory$.getGlobalValue(), path))));
    }

    public static SubLObject fact_sheet_image_path_okP(final SubLObject path) {
	return makeBoolean(path.isString() && (NIL != file_utilities.file_existsP(cconcatenate(fact_sheets.$fact_sheet_image_file_root_directory$.getGlobalValue(), path))));
    }

    public static final SubLObject fact_sheet_query_sentence_alt(SubLObject kbq, SubLObject assertion_to_test) {
	if (kbq == UNPROVIDED) {
	    kbq = $$FactSheetSentenceQuery;
	}
	if (assertion_to_test == UNPROVIDED) {
	    assertion_to_test = NIL;
	}
	{
	    SubLObject kbq_sentence = kbq_sentence(kbq);
	    if (NIL != assertion_to_test) {
		kbq_sentence = simplifier.conjoin(list(kbq_sentence, list($$equalSymbols, $sym533$_SENTENCE, assertions_high.assertion_ist_formula(assertion_to_test))), UNPROVIDED);
	    }
	    return kbq_sentence;
	}
    }

    public static SubLObject fact_sheet_query_sentence(SubLObject kbq, SubLObject assertion_to_test) {
	if (kbq == UNPROVIDED) {
	    kbq = fact_sheets.$$FactSheetSentenceQuery;
	}
	if (assertion_to_test == UNPROVIDED) {
	    assertion_to_test = NIL;
	}
	SubLObject kbq_sentence = kb_query.kbq_sentence(kbq);
	if (NIL != assertion_to_test) {
	    kbq_sentence = simplifier.conjoin(list(kbq_sentence, list(fact_sheets.$$equalSymbols, fact_sheets.$sym373$_SENTENCE, assertions_high.assertion_ist_formula(assertion_to_test))), UNPROVIDED);
	}
	return kbq_sentence;
    }

    /**
     *
     *
     * @return LISTP; (<HTML> <FORMATTING-DIRECTIVES>).
     */
    @LispMethod(comment = "@return LISTP; (<HTML> <FORMATTING-DIRECTIVES>).")
    public static final SubLObject get_mini_fact_sheet_for_term_in_html_alt(SubLObject v_term, SubLObject domain_mt, SubLObject language_mt) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject query_sentence = NIL;
		SubLObject v_properties = NIL;
		if (domain_mt == $DEFAULT) {
		    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
		}
		if (language_mt == $DEFAULT) {
		    language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
		}
		{
		    SubLObject _prev_bind_0 = $fact_sheet_focal_term$.currentBinding(thread);
		    SubLObject _prev_bind_1 = $thcl_forts_by_fiat$.currentBinding(thread);
		    try {
			$fact_sheet_focal_term$.bind(v_term, thread);
			$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? ((SubLObject) (cons(v_term, $thcl_forts_by_fiat$.getDynamicValue(thread)))) : $thcl_forts_by_fiat$.getDynamicValue(thread), thread);
			{
			    SubLObject query_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_anytime_mt(domain_mt);
			    SubLObject kbq = $$MiniFactSheetSentenceQuery;
			    {
				SubLObject _prev_bind_0_117 = $fact_sheet_query_mt$.currentBinding(thread);
				try {
				    $fact_sheet_query_mt$.bind(query_mt, thread);
				    query_sentence = cycl_utilities.expression_subst(language_mt, $$TerrorismParaphraseMt, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_query_sentence(kbq, UNPROVIDED), UNPROVIDED, UNPROVIDED);
				    v_properties = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_query_properties(kbq, UNPROVIDED);
				} finally {
				    $fact_sheet_query_mt$.rebind(_prev_bind_0_117, thread);
				}
			    }
			}
		    } finally {
			$thcl_forts_by_fiat$.rebind(_prev_bind_1, thread);
			$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
		    }
		}
		{
		    SubLObject datum = com.cyc.cycjava.cycl.fact_sheets.get_mini_fact_sheet_for_term_cached(v_term, domain_mt, query_sentence, v_properties);
		    SubLObject current = datum;
		    SubLObject html = NIL;
		    SubLObject formatting_directives = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt536);
		    html = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt536);
		    formatting_directives = current.first();
		    current = current.rest();
		    if (NIL == current) {
			if (NIL == html) {
			    html = com.cyc.cycjava.cycl.fact_sheets.fallback_mini_fact_sheet_for_term_in_html(v_term, domain_mt, language_mt);
			}
			if (NIL == string_utilities.substringP(api_widgets.$mini_fact_sheet_to_fact_sheet_link_text$.getGlobalValue(), html, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED)) {
			    if (NIL != com.cyc.cycjava.cycl.fact_sheets.term_ok_for_fact_sheet_p(v_term, UNPROVIDED)) {
				{
				    SubLObject normal_fact_sheet_link = NIL;
				    SubLObject bogus_url = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_bogus_url_for_term(v_term);
				    SubLObject stream = NIL;
				    try {
					stream = make_private_string_output_stream();
					{
					    SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
					    try {
						html_macros.$html_stream$.bind(stream, thread);
						html_markup(html_macros.$html_table_head$.getGlobalValue());
						html_char(CHAR_greater, UNPROVIDED);
						{
						    SubLObject _prev_bind_0_118 = html_macros.$html_safe_print$.currentBinding(thread);
						    try {
							html_macros.$html_safe_print$.bind(T, thread);
							html_markup(html_macros.$html_table_row_head$.getGlobalValue());
							html_char(CHAR_greater, UNPROVIDED);
							{
							    SubLObject _prev_bind_0_119 = html_macros.$html_safe_print$.currentBinding(thread);
							    try {
								html_macros.$html_safe_print$.bind(T, thread);
								html_markup(html_macros.$html_table_data_head$.getGlobalValue());
								html_char(CHAR_greater, UNPROVIDED);
								{
								    SubLObject _prev_bind_0_120 = html_macros.$html_safe_print$.currentBinding(thread);
								    try {
									html_macros.$html_safe_print$.bind(T, thread);
								    } finally {
									html_macros.$html_safe_print$.rebind(_prev_bind_0_120, thread);
								    }
								}
								html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
								html_markup(html_macros.$html_table_data_head$.getGlobalValue());
								html_char(CHAR_greater, UNPROVIDED);
								{
								    SubLObject _prev_bind_0_121 = html_macros.$html_safe_print$.currentBinding(thread);
								    try {
									html_macros.$html_safe_print$.bind(T, thread);
									html_markup(html_macros.$html_anchor_head$.getGlobalValue());
									html_markup(html_macros.$html_anchor_href$.getGlobalValue());
									html_char(CHAR_quotation, UNPROVIDED);
									html_markup(bogus_url);
									html_char(CHAR_quotation, UNPROVIDED);
									html_char(CHAR_greater, UNPROVIDED);
									{
									    SubLObject _prev_bind_0_122 = html_macros.$html_safe_print$.currentBinding(thread);
									    try {
										html_macros.$html_safe_print$.bind(T, thread);
										html_princ(api_widgets.$mini_fact_sheet_to_fact_sheet_link_text$.getGlobalValue());
									    } finally {
										html_macros.$html_safe_print$.rebind(_prev_bind_0_122, thread);
									    }
									}
									html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
								    } finally {
									html_macros.$html_safe_print$.rebind(_prev_bind_0_121, thread);
								    }
								}
								html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
							    } finally {
								html_macros.$html_safe_print$.rebind(_prev_bind_0_119, thread);
							    }
							}
							html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
							html_source_readability_terpri(UNPROVIDED);
						    } finally {
							html_macros.$html_safe_print$.rebind(_prev_bind_0_118, thread);
						    }
						}
						html_markup(html_macros.$html_table_tail$.getGlobalValue());
					    } finally {
						html_macros.$html_stream$.rebind(_prev_bind_0, thread);
					    }
					}
					normal_fact_sheet_link = get_output_stream_string(stream);
				    } finally {
					{
					    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
					    try {
						$is_thread_performing_cleanupP$.bind(T, thread);
						close(stream, UNPROVIDED);
					    } finally {
						$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
					    }
					}
				    }
				    html = cconcatenate(html, normal_fact_sheet_link);
				}
			    }
			}
			return list(html, formatting_directives);
		    } else {
			cdestructuring_bind_error(datum, $list_alt536);
		    }
		}
	    }
	    return NIL;
	}
    }

    /**
     *
     *
     * @return LISTP; (<HTML> <FORMATTING-DIRECTIVES>).
     */
    @LispMethod(comment = "@return LISTP; (<HTML> <FORMATTING-DIRECTIVES>).")
    public static SubLObject get_mini_fact_sheet_for_term_in_html(final SubLObject v_term, SubLObject domain_mt, SubLObject language_mt) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject query_sentence = NIL;
	SubLObject v_properties = NIL;
	if (domain_mt == $DEFAULT) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == $DEFAULT) {
	    language_mt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
	final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
	try {
	    fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
	    thcl.$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread), thread);
	    final SubLObject query_mt = fact_sheets.fact_sheet_anytime_mt(domain_mt);
	    final SubLObject kbq = fact_sheets.$$MiniFactSheetSentenceQuery;
	    final SubLObject _prev_bind_0_$106 = fact_sheets.$fact_sheet_query_mt$.currentBinding(thread);
	    try {
		fact_sheets.$fact_sheet_query_mt$.bind(query_mt, thread);
		query_sentence = cycl_utilities.expression_subst(language_mt, fact_sheets.$$TerrorismParaphraseMt, fact_sheets.fact_sheet_query_sentence(kbq, UNPROVIDED), UNPROVIDED, UNPROVIDED);
		v_properties = fact_sheets.fact_sheet_query_properties(kbq, UNPROVIDED);
	    } finally {
		fact_sheets.$fact_sheet_query_mt$.rebind(_prev_bind_0_$106, thread);
	    }
	} finally {
	    thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
	    fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
	}
	SubLObject current;
	final SubLObject datum = current = fact_sheets.get_mini_fact_sheet_for_term_cached(v_term, domain_mt, query_sentence, v_properties);
	SubLObject html = NIL;
	SubLObject formatting_directives = NIL;
	destructuring_bind_must_consp(current, datum, fact_sheets.$list376);
	html = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list376);
	formatting_directives = current.first();
	current = current.rest();
	if (NIL == current) {
	    if (NIL == html) {
		html = fact_sheets.fallback_mini_fact_sheet_for_term_in_html(v_term, domain_mt, language_mt);
	    }
	    if ((NIL == string_utilities.substringP(api_widgets.$mini_fact_sheet_to_fact_sheet_link_text$.getGlobalValue(), html, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED)) && (NIL != fact_sheets.term_ok_for_fact_sheet_p(v_term, UNPROVIDED))) {
		SubLObject normal_fact_sheet_link = NIL;
		final SubLObject bogus_url = fact_sheets.fact_sheet_bogus_url_for_term(v_term);
		SubLObject stream = NIL;
		try {
		    stream = make_private_string_output_stream();
		    final SubLObject _prev_bind_3 = html_macros.$html_stream$.currentBinding(thread);
		    try {
			html_macros.$html_stream$.bind(stream, thread);
			html_markup(html_macros.$html_table_head$.getGlobalValue());
			html_char(CHAR_greater, UNPROVIDED);
			final SubLObject _prev_bind_0_$107 = html_macros.$html_safe_print$.currentBinding(thread);
			try {
			    html_macros.$html_safe_print$.bind(T, thread);
			    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
			    html_char(CHAR_greater, UNPROVIDED);
			    final SubLObject _prev_bind_0_$108 = html_macros.$html_safe_print$.currentBinding(thread);
			    try {
				html_macros.$html_safe_print$.bind(T, thread);
				html_markup(html_macros.$html_table_data_head$.getGlobalValue());
				html_char(CHAR_greater, UNPROVIDED);
				final SubLObject _prev_bind_0_$109 = html_macros.$html_safe_print$.currentBinding(thread);
				try {
				    html_macros.$html_safe_print$.bind(T, thread);
				} finally {
				    html_macros.$html_safe_print$.rebind(_prev_bind_0_$109, thread);
				}
				html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
				html_markup(html_macros.$html_table_data_head$.getGlobalValue());
				html_char(CHAR_greater, UNPROVIDED);
				final SubLObject _prev_bind_0_$110 = html_macros.$html_safe_print$.currentBinding(thread);
				try {
				    html_macros.$html_safe_print$.bind(T, thread);
				    html_markup(html_macros.$html_anchor_head$.getGlobalValue());
				    html_markup(html_macros.$html_anchor_href$.getGlobalValue());
				    html_char(CHAR_quotation, UNPROVIDED);
				    html_markup(bogus_url);
				    html_char(CHAR_quotation, UNPROVIDED);
				    html_char(CHAR_greater, UNPROVIDED);
				    final SubLObject _prev_bind_0_$111 = html_macros.$html_safe_print$.currentBinding(thread);
				    try {
					html_macros.$html_safe_print$.bind(T, thread);
					html_princ(api_widgets.$mini_fact_sheet_to_fact_sheet_link_text$.getGlobalValue());
				    } finally {
					html_macros.$html_safe_print$.rebind(_prev_bind_0_$111, thread);
				    }
				    html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
				} finally {
				    html_macros.$html_safe_print$.rebind(_prev_bind_0_$110, thread);
				}
				html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
			    } finally {
				html_macros.$html_safe_print$.rebind(_prev_bind_0_$108, thread);
			    }
			    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
			    html_source_readability_terpri(UNPROVIDED);
			} finally {
			    html_macros.$html_safe_print$.rebind(_prev_bind_0_$107, thread);
			}
			html_markup(html_macros.$html_table_tail$.getGlobalValue());
		    } finally {
			html_macros.$html_stream$.rebind(_prev_bind_3, thread);
		    }
		    normal_fact_sheet_link = get_output_stream_string(stream);
		} finally {
		    final SubLObject _prev_bind_4 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values = getValuesAsVector();
			close(stream, UNPROVIDED);
			restoreValuesFromVector(_values);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
		    }
		}
		html = cconcatenate(html, normal_fact_sheet_link);
	    }
	    return list(html, formatting_directives);
	}
	cdestructuring_bind_error(datum, fact_sheets.$list376);
	return NIL;
    }

    public static final SubLObject clear_get_mini_fact_sheet_for_term_cached_alt() {
	{
	    SubLObject cs = $get_mini_fact_sheet_for_term_cached_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_get_mini_fact_sheet_for_term_cached() {
	final SubLObject cs = fact_sheets.$get_mini_fact_sheet_for_term_cached_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_get_mini_fact_sheet_for_term_cached_alt(SubLObject v_term, SubLObject domain_mt, SubLObject query_sentence, SubLObject v_properties) {
	return memoization_state.caching_state_remove_function_results_with_args($get_mini_fact_sheet_for_term_cached_caching_state$.getGlobalValue(), list(v_term, domain_mt, query_sentence, v_properties), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_get_mini_fact_sheet_for_term_cached(final SubLObject v_term, final SubLObject domain_mt, final SubLObject query_sentence, final SubLObject v_properties) {
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$get_mini_fact_sheet_for_term_cached_caching_state$.getGlobalValue(), list(v_term, domain_mt, query_sentence, v_properties), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject get_mini_fact_sheet_for_term_cached_internal_alt(SubLObject v_term, SubLObject domain_mt, SubLObject query_sentence, SubLObject v_properties) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject html = NIL;
		SubLObject formatting_directives = NIL;
		SubLObject query_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_anytime_mt(domain_mt);
		{
		    SubLObject _prev_bind_0 = $fact_sheet_focal_term$.currentBinding(thread);
		    SubLObject _prev_bind_1 = $thcl_forts_by_fiat$.currentBinding(thread);
		    SubLObject _prev_bind_2 = $fact_sheet_query_mt$.currentBinding(thread);
		    try {
			$fact_sheet_focal_term$.bind(v_term, thread);
			$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? ((SubLObject) (cons(v_term, $thcl_forts_by_fiat$.getDynamicValue(thread)))) : $thcl_forts_by_fiat$.getDynamicValue(thread), thread);
			$fact_sheet_query_mt$.bind(query_mt, thread);
			{
			    SubLObject query_results = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_query(query_sentence, query_mt, v_properties);
			    html = query_results.first();
			    if (html.isString()) {
				{
				    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
				    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
					com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
					format(stream, $str_alt538$Query_got_mini_fact_sheet_of_leng, length(html), v_term);
					force_output(stream);
				    }
				}
			    } else {
				{
				    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
				    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
					com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
					format(stream, $str_alt539$Query_failed_to_get_mini_fact_she, v_term);
					force_output(stream);
				    }
				}
			    }
			}
		    } finally {
			$fact_sheet_query_mt$.rebind(_prev_bind_2, thread);
			$thcl_forts_by_fiat$.rebind(_prev_bind_1, thread);
			$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
		    }
		}
		return list(html, formatting_directives);
	    }
	}
    }

    public static SubLObject get_mini_fact_sheet_for_term_cached_internal(final SubLObject v_term, final SubLObject domain_mt, final SubLObject query_sentence, final SubLObject v_properties) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject html = NIL;
	final SubLObject formatting_directives = NIL;
	final SubLObject query_mt = fact_sheets.fact_sheet_anytime_mt(domain_mt);
	final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
	final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
	final SubLObject _prev_bind_3 = fact_sheets.$fact_sheet_query_mt$.currentBinding(thread);
	try {
	    fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
	    thcl.$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread), thread);
	    fact_sheets.$fact_sheet_query_mt$.bind(query_mt, thread);
	    final SubLObject query_results = fact_sheets.fact_sheet_sentence_query(query_sentence, query_mt, v_properties);
	    html = query_results.first();
	    if (html.isString()) {
		final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
		    format(stream, fact_sheets.$str378$Query_got_mini_fact_sheet_of_leng, length(html), v_term);
		    force_output(stream);
		}
	    } else {
		final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
		    format(stream, fact_sheets.$str379$Query_failed_to_get_mini_fact_she, v_term);
		    force_output(stream);
		}
	    }
	} finally {
	    fact_sheets.$fact_sheet_query_mt$.rebind(_prev_bind_3, thread);
	    thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
	    fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
	}
	return list(html, formatting_directives);
    }

    public static final SubLObject get_mini_fact_sheet_for_term_cached_alt(SubLObject v_term, SubLObject domain_mt, SubLObject query_sentence, SubLObject v_properties) {
	{
	    SubLObject caching_state = $get_mini_fact_sheet_for_term_cached_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(GET_MINI_FACT_SHEET_FOR_TERM_CACHED, $get_mini_fact_sheet_for_term_cached_caching_state$, NIL, EQUAL, FOUR_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject sxhash = memoization_state.sxhash_calc_4(v_term, domain_mt, query_sentence, v_properties);
		SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
		if (collisions != $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    {
			SubLObject cdolist_list_var = collisions;
			SubLObject collision = NIL;
			for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), collision = cdolist_list_var.first()) {
			    {
				SubLObject cached_args = collision.first();
				SubLObject results2 = second(collision);
				if (v_term.equal(cached_args.first())) {
				    cached_args = cached_args.rest();
				    if (domain_mt.equal(cached_args.first())) {
					cached_args = cached_args.rest();
					if (query_sentence.equal(cached_args.first())) {
					    cached_args = cached_args.rest();
					    if (((NIL != cached_args) && (NIL == cached_args.rest())) && v_properties.equal(cached_args.first())) {
						return memoization_state.caching_results(results2);
					    }
					}
				    }
				}
			    }
			}
		    }
		}
		{
		    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.get_mini_fact_sheet_for_term_cached_internal(v_term, domain_mt, query_sentence, v_properties)));
		    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(v_term, domain_mt, query_sentence, v_properties));
		    return memoization_state.caching_results(results);
		}
	    }
	}
    }

    public static SubLObject get_mini_fact_sheet_for_term_cached(final SubLObject v_term, final SubLObject domain_mt, final SubLObject query_sentence, final SubLObject v_properties) {
	SubLObject caching_state = fact_sheets.$get_mini_fact_sheet_for_term_cached_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.GET_MINI_FACT_SHEET_FOR_TERM_CACHED, fact_sheets.$get_mini_fact_sheet_for_term_cached_caching_state$, NIL, EQUAL, FOUR_INTEGER, ZERO_INTEGER);
	}
	final SubLObject sxhash = memoization_state.sxhash_calc_4(v_term, domain_mt, query_sentence, v_properties);
	final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
	if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    SubLObject cdolist_list_var = collisions;
	    SubLObject collision = NIL;
	    collision = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cached_args = collision.first();
		final SubLObject results2 = second(collision);
		if (v_term.equal(cached_args.first())) {
		    cached_args = cached_args.rest();
		    if (domain_mt.equal(cached_args.first())) {
			cached_args = cached_args.rest();
			if (query_sentence.equal(cached_args.first())) {
			    cached_args = cached_args.rest();
			    if (((NIL != cached_args) && (NIL == cached_args.rest())) && v_properties.equal(cached_args.first())) {
				return memoization_state.caching_results(results2);
			    }
			}
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		collision = cdolist_list_var.first();
	    }
	}
	final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.get_mini_fact_sheet_for_term_cached_internal(v_term, domain_mt, query_sentence, v_properties)));
	memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(v_term, domain_mt, query_sentence, v_properties));
	return memoization_state.caching_results(results3);
    }

    public static final SubLObject fallback_mini_fact_sheet_for_term_in_html_alt(SubLObject v_term, SubLObject domain_mt, SubLObject language_mt) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject html = NIL;
		SubLObject stream = NIL;
		try {
		    stream = make_private_string_output_stream();
		    {
			SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
			try {
			    html_macros.$html_stream$.bind(stream, thread);
			    html_markup(html_macros.$html_table_head$.getGlobalValue());
			    if (true) {
				html_markup(html_macros.$html_table_border$.getGlobalValue());
				html_char(CHAR_quotation, UNPROVIDED);
				html_markup(ZERO_INTEGER);
				html_char(CHAR_quotation, UNPROVIDED);
			    }
			    html_char(CHAR_greater, UNPROVIDED);
			    {
				SubLObject _prev_bind_0_123 = html_macros.$html_safe_print$.currentBinding(thread);
				try {
				    html_macros.$html_safe_print$.bind(T, thread);
				    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
				    html_char(CHAR_greater, UNPROVIDED);
				    {
					SubLObject _prev_bind_0_124 = html_macros.$html_safe_print$.currentBinding(thread);
					try {
					    html_macros.$html_safe_print$.bind(T, thread);
					    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
					    html_char(CHAR_greater, UNPROVIDED);
					    {
						SubLObject _prev_bind_0_125 = html_macros.$html_safe_print$.currentBinding(thread);
						try {
						    html_macros.$html_safe_print$.bind(T, thread);
						} finally {
						    html_macros.$html_safe_print$.rebind(_prev_bind_0_125, thread);
						}
					    }
					    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
					    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
					    html_char(CHAR_greater, UNPROVIDED);
					    {
						SubLObject _prev_bind_0_126 = html_macros.$html_safe_print$.currentBinding(thread);
						try {
						    html_macros.$html_safe_print$.bind(T, thread);
						    html_princ(pph_main.generate_phrase(v_term, $DEFAULT, NIL, language_mt, domain_mt, UNPROVIDED, UNPROVIDED, UNPROVIDED));
						} finally {
						    html_macros.$html_safe_print$.rebind(_prev_bind_0_126, thread);
						}
					    }
					    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
					} finally {
					    html_macros.$html_safe_print$.rebind(_prev_bind_0_124, thread);
					}
				    }
				    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
				    html_source_readability_terpri(UNPROVIDED);
				} finally {
				    html_macros.$html_safe_print$.rebind(_prev_bind_0_123, thread);
				}
			    }
			    html_markup(html_macros.$html_table_tail$.getGlobalValue());
			} finally {
			    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
			}
		    }
		    html = get_output_stream_string(stream);
		} finally {
		    {
			SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    close(stream, UNPROVIDED);
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return html;
	    }
	}
    }

    public static SubLObject fallback_mini_fact_sheet_for_term_in_html(final SubLObject v_term, final SubLObject domain_mt, final SubLObject language_mt) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject html = NIL;
	SubLObject stream = NIL;
	try {
	    stream = make_private_string_output_stream();
	    final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
	    try {
		html_macros.$html_stream$.bind(stream, thread);
		html_markup(html_macros.$html_table_head$.getGlobalValue());
		html_markup(html_macros.$html_table_border$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(ZERO_INTEGER);
		html_char(CHAR_quotation, UNPROVIDED);
		html_char(CHAR_greater, UNPROVIDED);
		final SubLObject _prev_bind_0_$112 = html_macros.$html_safe_print$.currentBinding(thread);
		try {
		    html_macros.$html_safe_print$.bind(T, thread);
		    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
		    html_char(CHAR_greater, UNPROVIDED);
		    final SubLObject _prev_bind_0_$113 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			html_markup(html_macros.$html_table_data_head$.getGlobalValue());
			html_char(CHAR_greater, UNPROVIDED);
			final SubLObject _prev_bind_0_$114 = html_macros.$html_safe_print$.currentBinding(thread);
			try {
			    html_macros.$html_safe_print$.bind(T, thread);
			} finally {
			    html_macros.$html_safe_print$.rebind(_prev_bind_0_$114, thread);
			}
			html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
			html_markup(html_macros.$html_table_data_head$.getGlobalValue());
			html_char(CHAR_greater, UNPROVIDED);
			final SubLObject _prev_bind_0_$115 = html_macros.$html_safe_print$.currentBinding(thread);
			try {
			    html_macros.$html_safe_print$.bind(T, thread);
			    html_princ(pph_main.generate_phrase(v_term, $DEFAULT, NIL, language_mt, domain_mt, UNPROVIDED, UNPROVIDED, UNPROVIDED));
			} finally {
			    html_macros.$html_safe_print$.rebind(_prev_bind_0_$115, thread);
			}
			html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_0_$113, thread);
		    }
		    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
		    html_source_readability_terpri(UNPROVIDED);
		} finally {
		    html_macros.$html_safe_print$.rebind(_prev_bind_0_$112, thread);
		}
		html_markup(html_macros.$html_table_tail$.getGlobalValue());
	    } finally {
		html_macros.$html_stream$.rebind(_prev_bind_0, thread);
	    }
	    html = get_output_stream_string(stream);
	} finally {
	    final SubLObject _prev_bind_2 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values = getValuesAsVector();
		close(stream, UNPROVIDED);
		restoreValuesFromVector(_values);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
	    }
	}
	return html;
    }

    public static final SubLObject fact_sheet_query_properties_alt(SubLObject kbq, SubLObject verbosity) {
	if (kbq == UNPROVIDED) {
	    kbq = $$FactSheetSentenceQuery;
	}
	if (verbosity == UNPROVIDED) {
	    verbosity = $VERBOSE;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject v_properties = kbq_query_properties(kbq);
		SubLObject inference_max_time = inference_datastructures_enumerated_types.inference_properties_max_time(v_properties);
		SubLObject fact_sheet_max_time = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_query_soft_timeout_time_left();
		if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_queries_browsableP()) {
		    v_properties = putf(v_properties, $BROWSABLE_, T);
		}
		if (NIL != fact_sheet_max_time) {
		    {
			SubLObject min_max = ((NIL != inference_max_time) && inference_max_time.numL(fact_sheet_max_time)) ? ((SubLObject) (inference_max_time)) : fact_sheet_max_time;
			SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
			if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
			    format(stream, $str_alt542$Using_soft_query_timeout_of__S_se, min_max);
			    force_output(stream);
			}
			v_properties = putf(v_properties, $MAX_TIME, min_max);
		    }
		} else {
		    if (((NIL != inference_max_time) && (NIL != forts.fort_p($fact_sheet_focal_term$.getDynamicValue(thread)))) && com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_gaf_priority($fact_sheet_focal_term$.getDynamicValue(thread)).numG(TWENTY_INTEGER)) {
			v_properties = putf(v_properties, $MAX_TIME, NIL);
			v_properties = putf(v_properties, $PROBABLY_APPROXIMATELY_DONE, $float$0_99);
		    }
		}
		return v_properties;
	    }
	}
    }

    public static SubLObject fact_sheet_query_properties(SubLObject kbq, SubLObject verbosity) {
	if (kbq == UNPROVIDED) {
	    kbq = fact_sheets.$$FactSheetSentenceQuery;
	}
	if (verbosity == UNPROVIDED) {
	    verbosity = $VERBOSE;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject v_properties = kb_query.kbq_query_properties(kbq);
	final SubLObject inference_max_time = inference_properties_max_time(v_properties);
	final SubLObject fact_sheet_max_time = fact_sheets.fact_sheet_query_soft_timeout_time_left();
	if (NIL != fact_sheets.fact_sheet_queries_browsableP()) {
	    v_properties = putf(v_properties, $BROWSABLE_, T);
	}
	if (NIL != fact_sheet_max_time) {
	    final SubLObject min_max = ((NIL != inference_max_time) && inference_max_time.numL(fact_sheet_max_time)) ? inference_max_time : fact_sheet_max_time;
	    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
	    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
		format(stream, fact_sheets.$str382$Using_soft_query_timeout_of__S_se, min_max);
		force_output(stream);
	    }
	    v_properties = putf(v_properties, $MAX_TIME, min_max);
	} else if (((NIL != inference_max_time) && (NIL != forts.fort_p(fact_sheets.$fact_sheet_focal_term$.getDynamicValue(thread)))) && fact_sheets.fact_sheet_term_gaf_priority(fact_sheets.$fact_sheet_focal_term$.getDynamicValue(thread)).numG(TWENTY_INTEGER)) {
	    v_properties = putf(v_properties, $MAX_TIME, NIL);
	    v_properties = putf(v_properties, fact_sheets.$PROBABLY_APPROXIMATELY_DONE, fact_sheets.$float$0_99);
	}

	return v_properties;
    }

    public static final SubLObject omitted_fact_sheet_sentences_alt() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    return $omitted_fact_sheet_sentences$.getDynamicValue(thread);
	}
    }

    public static SubLObject omitted_fact_sheet_sentences() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	return fact_sheets.$omitted_fact_sheet_sentences$.getDynamicValue(thread);
    }

    /**
     *
     *
     * @return ALIST-P; of SUMMARY-PREDICATE -> (SENTENCE)? mappings, where ASSERTION is the only sentence that can be returned
     */
    @LispMethod(comment = "@return ALIST-P; of SUMMARY-PREDICATE -> (SENTENCE)? mappings, where ASSERTION is the only sentence that can be returned")
    public static final SubLObject fact_sheet_sentences_for_assertion_and_term_alt(SubLObject v_term, SubLObject assertion, SubLObject domain_mt) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject ans = NIL;
		{
		    SubLObject _prev_bind_0 = $fact_sheet_focal_term$.currentBinding(thread);
		    SubLObject _prev_bind_1 = $thcl_forts_by_fiat$.currentBinding(thread);
		    try {
			$fact_sheet_focal_term$.bind(v_term, thread);
			$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? ((SubLObject) (cons(v_term, $thcl_forts_by_fiat$.getDynamicValue(thread)))) : $thcl_forts_by_fiat$.getDynamicValue(thread), thread);
			{
			    SubLObject query_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_anytime_mt(domain_mt);
			    {
				SubLObject _prev_bind_0_127 = $fact_sheet_query_mt$.currentBinding(thread);
				SubLObject _prev_bind_1_128 = $omitted_fact_sheet_sentences$.currentBinding(thread);
				try {
				    $fact_sheet_query_mt$.bind(query_mt, thread);
				    $omitted_fact_sheet_sentences$.bind(set.new_set(symbol_function(EQUAL), UNPROVIDED), thread);
				    {
					SubLObject timed_outP = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_query_soft_timeout_time_reachedP();
					SubLObject store = NIL;
					try {
					    store = inference_datastructures_problem_store.new_problem_store(UNPROVIDED);
					    {
						SubLObject node_var = $$FactSheetBuilderQuery;
						{
						    SubLObject _prev_bind_0_129 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
						    SubLObject _prev_bind_1_130 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
						    try {
							sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
							sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
							if (NIL == timed_outP) {
							    {
								SubLObject node_var_131 = node_var;
								SubLObject deck_type = (false) ? ((SubLObject) ($QUEUE)) : $STACK;
								SubLObject recur_deck = deck.create_deck(deck_type);
								{
								    SubLObject _prev_bind_0_132 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
								    try {
									sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
									{
									    SubLObject mt_var = domain_mt;
									    {
										SubLObject _prev_bind_0_133 = mt_relevance_macros.$mt$.currentBinding(thread);
										SubLObject _prev_bind_1_134 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
										SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
										try {
										    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
										    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
										    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
										    {
											SubLObject tv_var = $$True_JustificationTruth;
											{
											    SubLObject _prev_bind_0_135 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
											    SubLObject _prev_bind_1_136 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
											    try {
												sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
												sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
												if (NIL != tv_var) {
												    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
													if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
													    {
														SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
														if (pcase_var.eql($ERROR)) {
														    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
														} else {
														    if (pcase_var.eql($CERROR)) {
															sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
														    } else {
															if (pcase_var.eql($WARN)) {
															    Errors.warn($str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
															} else {
															    Errors.warn($str_alt558$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
															    Errors.cerror($$$continue_anyway, $str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
															}
														    }
														}
													    }
													}
												    }
												}
												{
												    SubLObject _prev_bind_0_137 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
												    SubLObject _prev_bind_1_138 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
												    SubLObject _prev_bind_2_139 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
												    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
												    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
												    try {
													sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
													sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))),
														thread);
													sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(
														sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
													sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
													sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
													if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
													    {
														SubLObject _prev_bind_0_140 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
														SubLObject _prev_bind_1_141 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
														SubLObject _prev_bind_2_142 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
														try {
														    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
														    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(),
															    sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
														    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
														    sbhl_marking_utilities.sbhl_mark_node_marked(node_var_131, UNPROVIDED);
														    while ((NIL != node_var_131) && (NIL == timed_outP)) {
															{
															    SubLObject tt_node_var = node_var_131;
															    SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$isa));
															    SubLObject rest = NIL;
															    for (rest = accessible_modules; !((NIL != timed_outP) || (NIL == rest)); rest = rest.rest()) {
																{
																    SubLObject module_var = rest.first();
																    {
																	SubLObject _prev_bind_0_143 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
																	SubLObject _prev_bind_1_144 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
																	try {
																	    sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
																	    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED)
																		    ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread))))
																		    : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
																	    {
																		SubLObject node = function_terms.naut_to_nart(tt_node_var);
																		if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
																		    {
																			SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																			if (NIL != d_link) {
																			    {
																				SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link,
																					sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)),
																					sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																				if (NIL != mt_links) {
																				    {
																					SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
																					while (!((NIL != timed_outP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
																					    thread.resetMultipleValues();
																					    {
																						SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
																						SubLObject tv_links = thread.secondMultipleValue();
																						thread.resetMultipleValues();
																						if (NIL != mt_relevance_macros.relevant_mtP(mt)) {
																						    {
																							SubLObject _prev_bind_0_145 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
																							try {
																							    sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
																							    {
																								SubLObject iteration_state_146 = dictionary_contents.do_dictionary_contents_state(
																									dictionary.dictionary_contents(tv_links));
																								while (!((NIL != timed_outP)
																									|| (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_146)))) {
																								    thread.resetMultipleValues();
																								    {
																									SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_146);
																									SubLObject link_nodes = thread.secondMultipleValue();
																									thread.resetMultipleValues();
																									if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
																									    {
																										SubLObject _prev_bind_0_147 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
																										try {
																										    sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
																										    {
																											SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																												? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																												: link_nodes;
																											SubLObject rest_148 = NIL;
																											for (rest_148 = new_list; !((NIL != timed_outP)
																												|| (NIL == rest_148)); rest_148 = rest_148.rest()) {
																											    {
																												SubLObject kbq = rest_148.first();
																												if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(kbq,
																													sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
																												    sbhl_marking_utilities.sbhl_mark_node_marked(kbq,
																													    sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
																												    if (NIL != indexed_term_p(kbq)) {
																													ans = append(ans,
																														com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentences_for_term_from_kbq(
																															v_term, kbq, domain_mt, store, assertion));
																													timed_outP = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_query_soft_timeout_time_reachedP();
																												    }
																												}
																											    }
																											}
																										    }
																										} finally {
																										    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_147, thread);
																										}
																									    }
																									}
																									iteration_state_146 = dictionary_contents.do_dictionary_contents_next(iteration_state_146);
																								    }
																								}
																								dictionary_contents.do_dictionary_contents_finalize(iteration_state_146);
																							    }
																							} finally {
																							    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_145, thread);
																							}
																						    }
																						}
																						iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
																					    }
																					}
																					dictionary_contents.do_dictionary_contents_finalize(iteration_state);
																				    }
																				}
																			    }
																			} else {
																			    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt559$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED,
																				    UNPROVIDED);
																			}
																		    }
																		    if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
																			if (NIL == timed_outP) {
																			    {
																				SubLObject csome_list_var = sbhl_link_methods.non_fort_instance_table_lookup(node);
																				SubLObject instance_tuple = NIL;
																				for (instance_tuple = csome_list_var.first(); !((NIL != timed_outP)
																					|| (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), instance_tuple = csome_list_var.first()) {
																				    {
																					SubLObject datum = instance_tuple;
																					SubLObject current = datum;
																					SubLObject link_node = NIL;
																					SubLObject mt = NIL;
																					SubLObject tv = NIL;
																					destructuring_bind_must_consp(current, datum, $list_alt560);
																					link_node = current.first();
																					current = current.rest();
																					destructuring_bind_must_consp(current, datum, $list_alt560);
																					mt = current.first();
																					current = current.rest();
																					destructuring_bind_must_consp(current, datum, $list_alt560);
																					tv = current.first();
																					current = current.rest();
																					if (NIL == current) {
																					    if (NIL != mt_relevance_macros.relevant_mtP(mt)) {
																						{
																						    SubLObject _prev_bind_0_149 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
																						    try {
																							sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
																							if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
																							    {
																								SubLObject _prev_bind_0_150 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
																								try {
																								    sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
																								    {
																									SubLObject link_nodes = list(link_node);
																									SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																										? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																										: link_nodes;
																									SubLObject rest_151 = NIL;
																									for (rest_151 = new_list; !((NIL != timed_outP) || (NIL == rest_151)); rest_151 = rest_151.rest()) {
																									    {
																										SubLObject kbq = rest_151.first();
																										if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(kbq,
																											sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
																										    sbhl_marking_utilities.sbhl_mark_node_marked(kbq,
																											    sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
																										    if (NIL != indexed_term_p(kbq)) {
																											ans = append(ans,
																												com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentences_for_term_from_kbq(
																													v_term, kbq, domain_mt, store, assertion));
																											timed_outP = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_query_soft_timeout_time_reachedP();
																										    }
																										}
																									    }
																									}
																								    }
																								} finally {
																								    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_150, thread);
																								}
																							    }
																							}
																						    } finally {
																							sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_149, thread);
																						    }
																						}
																					    }
																					} else {
																					    cdestructuring_bind_error(datum, $list_alt560);
																					}
																				    }
																				}
																			    }
																			}
																		    }
																		} else {
																		    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
																			{
																			    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																				    ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(
																					    sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)),
																					    sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED)))))
																				    : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(
																					    sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)),
																					    sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																			    SubLObject rest_152 = NIL;
																			    for (rest_152 = new_list; !((NIL != timed_outP) || (NIL == rest_152)); rest_152 = rest_152.rest()) {
																				{
																				    SubLObject generating_fn = rest_152.first();
																				    {
																					SubLObject _prev_bind_0_153 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
																					try {
																					    sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
																					    {
																						SubLObject link_nodes = funcall(generating_fn, node);
																						SubLObject new_list_154 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																							? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																							: link_nodes;
																						SubLObject rest_155 = NIL;
																						for (rest_155 = new_list_154; !((NIL != timed_outP) || (NIL == rest_155)); rest_155 = rest_155.rest()) {
																						    {
																							SubLObject kbq = rest_155.first();
																							if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(kbq,
																								sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
																							    sbhl_marking_utilities.sbhl_mark_node_marked(kbq,
																								    sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
																							    if (NIL != indexed_term_p(kbq)) {
																								ans = append(ans, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentences_for_term_from_kbq(v_term, kbq,
																									domain_mt, store, assertion));
																								timed_outP = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_query_soft_timeout_time_reachedP();
																							    }
																							}
																						    }
																						}
																					    }
																					} finally {
																					    sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_153, thread);
																					}
																				    }
																				}
																			    }
																			}
																		    }
																		}
																	    }
																	} finally {
																	    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_144, thread);
																	    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_143, thread);
																	}
																    }
																}
															    }
															}
															{
															    SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)));
															    SubLObject rest = NIL;
															    for (rest = accessible_modules; !((NIL != timed_outP) || (NIL == rest)); rest = rest.rest()) {
																{
																    SubLObject module_var = rest.first();
																    {
																	SubLObject _prev_bind_0_156 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
																	SubLObject _prev_bind_1_157 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
																	try {
																	    sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
																	    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED)
																		    ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread))))
																		    : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
																	    {
																		SubLObject node = function_terms.naut_to_nart(node_var_131);
																		if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
																		    {
																			SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																			if (NIL != d_link) {
																			    {
																				SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(),
																					sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																				if (NIL != mt_links) {
																				    {
																					SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
																					while (!((NIL != timed_outP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
																					    thread.resetMultipleValues();
																					    {
																						SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
																						SubLObject tv_links = thread.secondMultipleValue();
																						thread.resetMultipleValues();
																						if (NIL != mt_relevance_macros.relevant_mtP(mt)) {
																						    {
																							SubLObject _prev_bind_0_158 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
																							try {
																							    sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
																							    {
																								SubLObject iteration_state_159 = dictionary_contents.do_dictionary_contents_state(
																									dictionary.dictionary_contents(tv_links));
																								while (!((NIL != timed_outP)
																									|| (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_159)))) {
																								    thread.resetMultipleValues();
																								    {
																									SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_159);
																									SubLObject link_nodes = thread.secondMultipleValue();
																									thread.resetMultipleValues();
																									if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
																									    {
																										SubLObject _prev_bind_0_160 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
																										try {
																										    sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
																										    {
																											SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																												? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																												: link_nodes;
																											SubLObject rest_161 = NIL;
																											for (rest_161 = new_list; !((NIL != timed_outP)
																												|| (NIL == rest_161)); rest_161 = rest_161.rest()) {
																											    {
																												SubLObject node_vars_link_node = rest_161.first();
																												if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(
																													node_vars_link_node, UNPROVIDED)) {
																												    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node,
																													    UNPROVIDED);
																												    deck.deck_push(node_vars_link_node, recur_deck);
																												}
																											    }
																											}
																										    }
																										} finally {
																										    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_160, thread);
																										}
																									    }
																									}
																									iteration_state_159 = dictionary_contents.do_dictionary_contents_next(iteration_state_159);
																								    }
																								}
																								dictionary_contents.do_dictionary_contents_finalize(iteration_state_159);
																							    }
																							} finally {
																							    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_158, thread);
																							}
																						    }
																						}
																						iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
																					    }
																					}
																					dictionary_contents.do_dictionary_contents_finalize(iteration_state);
																				    }
																				}
																			    }
																			} else {
																			    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt559$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED,
																				    UNPROVIDED);
																			}
																		    }
																		} else {
																		    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
																			{
																			    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																				    ? ((SubLObject) (list_utilities.randomize_list(
																					    sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(),
																						    sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED)))))
																				    : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(),
																					    sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																			    SubLObject rest_162 = NIL;
																			    for (rest_162 = new_list; !((NIL != timed_outP) || (NIL == rest_162)); rest_162 = rest_162.rest()) {
																				{
																				    SubLObject generating_fn = rest_162.first();
																				    {
																					SubLObject _prev_bind_0_163 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
																					try {
																					    sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
																					    {
																						SubLObject link_nodes = funcall(generating_fn, node);
																						SubLObject new_list_164 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																							? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																							: link_nodes;
																						SubLObject rest_165 = NIL;
																						for (rest_165 = new_list_164; !((NIL != timed_outP) || (NIL == rest_165)); rest_165 = rest_165.rest()) {
																						    {
																							SubLObject node_vars_link_node = rest_165.first();
																							if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
																							    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
																							    deck.deck_push(node_vars_link_node, recur_deck);
																							}
																						    }
																						}
																					    }
																					} finally {
																					    sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_163, thread);
																					}
																				    }
																				}
																			    }
																			}
																		    }
																		}
																	    }
																	} finally {
																	    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_157, thread);
																	    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_156, thread);
																	}
																    }
																}
															    }
															}
															node_var_131 = deck.deck_pop(recur_deck);
														    }
														} finally {
														    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_142, thread);
														    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_141, thread);
														    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_140, thread);
														}
													    }
													} else {
													    sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt561$Node__a_does_not_pass_sbhl_type_t, node_var, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)),
														    UNPROVIDED, UNPROVIDED, UNPROVIDED);
													}
												    } finally {
													sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
													sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
													sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_139, thread);
													sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_138, thread);
													sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_137, thread);
												    }
												}
											    } finally {
												sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_136, thread);
												sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_135, thread);
											    }
											}
										    }
										} finally {
										    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
										    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_134, thread);
										    mt_relevance_macros.$mt$.rebind(_prev_bind_0_133, thread);
										}
									    }
									    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
									}
								    } finally {
									sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_132, thread);
								    }
								}
							    }
							}
							sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
						    } finally {
							sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1_130, thread);
							sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_129, thread);
						    }
						}
					    }
					} finally {
					    {
						SubLObject _prev_bind_0_166 = $is_thread_performing_cleanupP$.currentBinding(thread);
						try {
						    $is_thread_performing_cleanupP$.bind(T, thread);
						    if (NIL == com.cyc.cycjava.cycl.fact_sheets.fact_sheet_queries_browsableP()) {
							inference_datastructures_problem_store.destroy_problem_store(store);
						    }
						} finally {
						    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_166, thread);
						}
					    }
					}
				    }
				} finally {
				    $omitted_fact_sheet_sentences$.rebind(_prev_bind_1_128, thread);
				    $fact_sheet_query_mt$.rebind(_prev_bind_0_127, thread);
				}
			    }
			}
		    } finally {
			$thcl_forts_by_fiat$.rebind(_prev_bind_1, thread);
			$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
		    }
		}
		return com.cyc.cycjava.cycl.fact_sheets.group_fact_sheet_sentences_alist(com.cyc.cycjava.cycl.fact_sheets.stable_sort_fact_sheet_sentences(ans));
	    }
	}
    }

    /**
     *
     *
     * @return ALIST-P; of SUMMARY-PREDICATE -> (SENTENCE)? mappings, where ASSERTION is the only sentence that can be returned
     */
    @LispMethod(comment = "@return ALIST-P; of SUMMARY-PREDICATE -> (SENTENCE)? mappings, where ASSERTION is the only sentence that can be returned")
    public static SubLObject fact_sheet_sentences_for_assertion_and_term(final SubLObject v_term, final SubLObject assertion, SubLObject domain_mt) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject ans = NIL;
	final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
	final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
	try {
	    fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
	    thcl.$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread), thread);
	    final SubLObject query_mt = fact_sheets.fact_sheet_anytime_mt(domain_mt);
	    final SubLObject _prev_bind_0_$116 = fact_sheets.$fact_sheet_query_mt$.currentBinding(thread);
	    final SubLObject _prev_bind_1_$117 = fact_sheets.$omitted_fact_sheet_sentences$.currentBinding(thread);
	    try {
		fact_sheets.$fact_sheet_query_mt$.bind(query_mt, thread);
		fact_sheets.$omitted_fact_sheet_sentences$.bind(set.new_set(symbol_function(EQUAL), UNPROVIDED), thread);
		SubLObject timed_outP = fact_sheets.fact_sheet_query_soft_timeout_time_reachedP();
		SubLObject store = NIL;
		try {
		    store = new_problem_store(UNPROVIDED);
		    if (NIL == timed_outP) {
			SubLObject csome_list_var = kb_query.new_cyc_query_from_kbq(fact_sheets.$const385$GetFactSheetBuilderQueriesForTopi, list($RETURN, fact_sheets.$list387, $PROBLEM_STORE, store), UNPROVIDED);
			SubLObject kbq = NIL;
			kbq = csome_list_var.first();
			while ((NIL == timed_outP) && (NIL != csome_list_var)) {
			    if (NIL != indexed_term_p(kbq)) {
				ans = append(ans, fact_sheets.fact_sheet_sentences_for_term_from_kbq(v_term, kbq, domain_mt, store, assertion));
				timed_outP = fact_sheets.fact_sheet_query_soft_timeout_time_reachedP();
			    }
			    csome_list_var = csome_list_var.rest();
			    kbq = csome_list_var.first();
			}
		    }
		} finally {
		    final SubLObject _prev_bind_0_$117 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values = getValuesAsVector();
			if (NIL == fact_sheets.fact_sheet_queries_browsableP()) {
			    destroy_problem_store(store);
			}
			restoreValuesFromVector(_values);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$117, thread);
		    }
		}
	    } finally {
		fact_sheets.$omitted_fact_sheet_sentences$.rebind(_prev_bind_1_$117, thread);
		fact_sheets.$fact_sheet_query_mt$.rebind(_prev_bind_0_$116, thread);
	    }
	} finally {
	    thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
	    fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
	}
	return fact_sheets.group_fact_sheet_sentences_alist(fact_sheets.stable_sort_fact_sheet_sentences(ans));
    }

    /**
     *
     *
     * @return ALIST-P; of SUMMARY-PREDICATE -> (SENTENCE+)* mappings.
     */
    @LispMethod(comment = "@return ALIST-P; of SUMMARY-PREDICATE -> (SENTENCE+)* mappings.")
    public static final SubLObject fact_sheet_sentences_for_term_alt(SubLObject v_term, SubLObject domain_mt) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject ans = NIL;
		{
		    SubLObject _prev_bind_0 = $fact_sheet_focal_term$.currentBinding(thread);
		    SubLObject _prev_bind_1 = $thcl_forts_by_fiat$.currentBinding(thread);
		    try {
			$fact_sheet_focal_term$.bind(v_term, thread);
			$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? ((SubLObject) (cons(v_term, $thcl_forts_by_fiat$.getDynamicValue(thread)))) : $thcl_forts_by_fiat$.getDynamicValue(thread), thread);
			{
			    SubLObject query_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_anytime_mt(domain_mt);
			    {
				SubLObject _prev_bind_0_167 = $fact_sheet_query_mt$.currentBinding(thread);
				SubLObject _prev_bind_1_168 = $omitted_fact_sheet_sentences$.currentBinding(thread);
				try {
				    $fact_sheet_query_mt$.bind(query_mt, thread);
				    $omitted_fact_sheet_sentences$.bind(set.new_set(symbol_function(EQUAL), UNPROVIDED), thread);
				    if ((NIL != $use_fact_sheet_builder_queriesP$.getDynamicValue(thread)) && (NIL != constants_high.find_constant($$$FactSheetBuilderQuery))) {
					{
					    SubLObject timed_outP = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_query_soft_timeout_time_reachedP();
					    if (NIL == timed_outP) {
						{
						    SubLObject store = NIL;
						    try {
							store = inference_datastructures_problem_store.new_problem_store(UNPROVIDED);
							{
							    SubLObject node_var = $$FactSheetBuilderQuery;
							    {
								SubLObject _prev_bind_0_169 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
								SubLObject _prev_bind_1_170 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
								try {
								    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
								    sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
								    if (NIL == timed_outP) {
									{
									    SubLObject node_var_171 = node_var;
									    SubLObject deck_type = (false) ? ((SubLObject) ($QUEUE)) : $STACK;
									    SubLObject recur_deck = deck.create_deck(deck_type);
									    {
										SubLObject _prev_bind_0_172 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
										try {
										    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
										    {
											SubLObject mt_var = domain_mt;
											{
											    SubLObject _prev_bind_0_173 = mt_relevance_macros.$mt$.currentBinding(thread);
											    SubLObject _prev_bind_1_174 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
											    SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
											    try {
												mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
												mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
												mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
												{
												    SubLObject tv_var = $$True_JustificationTruth;
												    {
													SubLObject _prev_bind_0_175 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
													SubLObject _prev_bind_1_176 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
													try {
													    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
													    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread),
														    thread);
													    if (NIL != tv_var) {
														if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
														    if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
															{
															    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
															    if (pcase_var.eql($ERROR)) {
																sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
															    } else {
																if (pcase_var.eql($CERROR)) {
																    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
																} else {
																    if (pcase_var.eql($WARN)) {
																	Errors.warn($str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
																    } else {
																	Errors.warn($str_alt558$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
																	Errors.cerror($$$continue_anyway, $str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
																    }
																}
															    }
															}
														    }
														}
													    }
													    {
														SubLObject _prev_bind_0_177 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
														SubLObject _prev_bind_1_178 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
														SubLObject _prev_bind_2_179 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
														SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
														SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
														try {
														    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
														    sbhl_search_vars.$sbhl_search_module_type$.bind(
															    sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
														    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(
															    sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
														    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
														    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
														    if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
															{
															    SubLObject _prev_bind_0_180 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
															    SubLObject _prev_bind_1_181 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
															    SubLObject _prev_bind_2_182 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
															    try {
																sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
																sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(),
																	sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
																sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
																sbhl_marking_utilities.sbhl_mark_node_marked(node_var_171, UNPROVIDED);
																while ((NIL != node_var_171) && (NIL == timed_outP)) {
																    {
																	SubLObject tt_node_var = node_var_171;
																	SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$isa));
																	SubLObject rest = NIL;
																	for (rest = accessible_modules; !((NIL != timed_outP) || (NIL == rest)); rest = rest.rest()) {
																	    {
																		SubLObject module_var = rest.first();
																		{
																		    SubLObject _prev_bind_0_183 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
																		    SubLObject _prev_bind_1_184 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
																		    try {
																			sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
																			sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED)
																				? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread))))
																				: sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
																			{
																			    SubLObject node = function_terms.naut_to_nart(tt_node_var);
																			    if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
																				{
																				    SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																				    if (NIL != d_link) {
																					{
																					    SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link,
																						    sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)),
																						    sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																					    if (NIL != mt_links) {
																						{
																						    SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
																						    while (!((NIL != timed_outP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
																							thread.resetMultipleValues();
																							{
																							    SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
																							    SubLObject tv_links = thread.secondMultipleValue();
																							    thread.resetMultipleValues();
																							    if (NIL != mt_relevance_macros.relevant_mtP(mt)) {
																								{
																								    SubLObject _prev_bind_0_185 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
																								    try {
																									sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
																									{
																									    SubLObject iteration_state_186 = dictionary_contents.do_dictionary_contents_state(
																										    dictionary.dictionary_contents(tv_links));
																									    while (!((NIL != timed_outP)
																										    || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_186)))) {
																										thread.resetMultipleValues();
																										{
																										    SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(
																											    iteration_state_186);
																										    SubLObject link_nodes = thread.secondMultipleValue();
																										    thread.resetMultipleValues();
																										    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
																											{
																											    SubLObject _prev_bind_0_187 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(
																												    thread);
																											    try {
																												sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
																												{
																												    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																													    ? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																													    : link_nodes;
																												    SubLObject rest_188 = NIL;
																												    for (rest_188 = new_list; !((NIL != timed_outP)
																													    || (NIL == rest_188)); rest_188 = rest_188.rest()) {
																													{
																													    SubLObject kbq = rest_188.first();
																													    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(
																														    kbq,
																														    sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(
																															    thread))) {
																														sbhl_marking_utilities.sbhl_mark_node_marked(kbq,
																															sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(
																																thread));
																														if (NIL != indexed_term_p(kbq)) {
																														    ans = append(ans,
																															    com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentences_for_term_from_kbq(
																																    v_term, kbq, domain_mt, store,
																																    UNPROVIDED));
																														    timed_outP = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_query_soft_timeout_time_reachedP();
																														}
																													    }
																													}
																												    }
																												}
																											    } finally {
																												sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_187, thread);
																											    }
																											}
																										    }
																										    iteration_state_186 = dictionary_contents.do_dictionary_contents_next(
																											    iteration_state_186);
																										}
																									    }
																									    dictionary_contents.do_dictionary_contents_finalize(iteration_state_186);
																									}
																								    } finally {
																									sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_185, thread);
																								    }
																								}
																							    }
																							    iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
																							}
																						    }
																						    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
																						}
																					    }
																					}
																				    } else {
																					sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt559$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED,
																						UNPROVIDED, UNPROVIDED);
																				    }
																				}
																				if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
																				    if (NIL == timed_outP) {
																					{
																					    SubLObject csome_list_var = sbhl_link_methods.non_fort_instance_table_lookup(node);
																					    SubLObject instance_tuple = NIL;
																					    for (instance_tuple = csome_list_var.first(); !((NIL != timed_outP)
																						    || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), instance_tuple = csome_list_var.first()) {
																						{
																						    SubLObject datum = instance_tuple;
																						    SubLObject current = datum;
																						    SubLObject link_node = NIL;
																						    SubLObject mt = NIL;
																						    SubLObject tv = NIL;
																						    destructuring_bind_must_consp(current, datum, $list_alt560);
																						    link_node = current.first();
																						    current = current.rest();
																						    destructuring_bind_must_consp(current, datum, $list_alt560);
																						    mt = current.first();
																						    current = current.rest();
																						    destructuring_bind_must_consp(current, datum, $list_alt560);
																						    tv = current.first();
																						    current = current.rest();
																						    if (NIL == current) {
																							if (NIL != mt_relevance_macros.relevant_mtP(mt)) {
																							    {
																								SubLObject _prev_bind_0_189 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
																								try {
																								    sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
																								    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
																									{
																									    SubLObject _prev_bind_0_190 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
																									    try {
																										sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
																										{
																										    SubLObject link_nodes = list(link_node);
																										    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																											    ? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																											    : link_nodes;
																										    SubLObject rest_191 = NIL;
																										    for (rest_191 = new_list; !((NIL != timed_outP)
																											    || (NIL == rest_191)); rest_191 = rest_191.rest()) {
																											{
																											    SubLObject kbq = rest_191.first();
																											    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(kbq,
																												    sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
																												sbhl_marking_utilities.sbhl_mark_node_marked(kbq,
																													sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
																												if (NIL != indexed_term_p(kbq)) {
																												    ans = append(ans,
																													    com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentences_for_term_from_kbq(
																														    v_term, kbq, domain_mt, store, UNPROVIDED));
																												    timed_outP = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_query_soft_timeout_time_reachedP();
																												}
																											    }
																											}
																										    }
																										}
																									    } finally {
																										sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_190, thread);
																									    }
																									}
																								    }
																								} finally {
																								    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_189, thread);
																								}
																							    }
																							}
																						    } else {
																							cdestructuring_bind_error(datum, $list_alt560);
																						    }
																						}
																					    }
																					}
																				    }
																				}
																			    } else {
																				if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
																				    {
																					SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																						? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(
																							sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)),
																							sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED)))))
																						: sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(
																							sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)),
																							sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																					SubLObject rest_192 = NIL;
																					for (rest_192 = new_list; !((NIL != timed_outP) || (NIL == rest_192)); rest_192 = rest_192.rest()) {
																					    {
																						SubLObject generating_fn = rest_192.first();
																						{
																						    SubLObject _prev_bind_0_193 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
																						    try {
																							sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
																							{
																							    SubLObject link_nodes = funcall(generating_fn, node);
																							    SubLObject new_list_194 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																								    ? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																								    : link_nodes;
																							    SubLObject rest_195 = NIL;
																							    for (rest_195 = new_list_194; !((NIL != timed_outP) || (NIL == rest_195)); rest_195 = rest_195.rest()) {
																								{
																								    SubLObject kbq = rest_195.first();
																								    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(kbq,
																									    sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
																									sbhl_marking_utilities.sbhl_mark_node_marked(kbq,
																										sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
																									if (NIL != indexed_term_p(kbq)) {
																									    ans = append(ans, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentences_for_term_from_kbq(
																										    v_term, kbq, domain_mt, store, UNPROVIDED));
																									    timed_outP = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_query_soft_timeout_time_reachedP();
																									}
																								    }
																								}
																							    }
																							}
																						    } finally {
																							sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_193, thread);
																						    }
																						}
																					    }
																					}
																				    }
																				}
																			    }
																			}
																		    } finally {
																			sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_184, thread);
																			sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_183, thread);
																		    }
																		}
																	    }
																	}
																    }
																    {
																	SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(
																		sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)));
																	SubLObject rest = NIL;
																	for (rest = accessible_modules; !((NIL != timed_outP) || (NIL == rest)); rest = rest.rest()) {
																	    {
																		SubLObject module_var = rest.first();
																		{
																		    SubLObject _prev_bind_0_196 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
																		    SubLObject _prev_bind_1_197 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
																		    try {
																			sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
																			sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED)
																				? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread))))
																				: sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
																			{
																			    SubLObject node = function_terms.naut_to_nart(node_var_171);
																			    if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
																				{
																				    SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																				    if (NIL != d_link) {
																					{
																					    SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(),
																						    sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																					    if (NIL != mt_links) {
																						{
																						    SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
																						    while (!((NIL != timed_outP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
																							thread.resetMultipleValues();
																							{
																							    SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
																							    SubLObject tv_links = thread.secondMultipleValue();
																							    thread.resetMultipleValues();
																							    if (NIL != mt_relevance_macros.relevant_mtP(mt)) {
																								{
																								    SubLObject _prev_bind_0_198 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
																								    try {
																									sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
																									{
																									    SubLObject iteration_state_199 = dictionary_contents.do_dictionary_contents_state(
																										    dictionary.dictionary_contents(tv_links));
																									    while (!((NIL != timed_outP)
																										    || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_199)))) {
																										thread.resetMultipleValues();
																										{
																										    SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(
																											    iteration_state_199);
																										    SubLObject link_nodes = thread.secondMultipleValue();
																										    thread.resetMultipleValues();
																										    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
																											{
																											    SubLObject _prev_bind_0_200 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(
																												    thread);
																											    try {
																												sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
																												{
																												    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																													    ? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																													    : link_nodes;
																												    SubLObject rest_201 = NIL;
																												    for (rest_201 = new_list; !((NIL != timed_outP)
																													    || (NIL == rest_201)); rest_201 = rest_201.rest()) {
																													{
																													    SubLObject node_vars_link_node = rest_201.first();
																													    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(
																														    node_vars_link_node, UNPROVIDED)) {
																														sbhl_marking_utilities.sbhl_mark_node_marked(
																															node_vars_link_node, UNPROVIDED);
																														deck.deck_push(node_vars_link_node, recur_deck);
																													    }
																													}
																												    }
																												}
																											    } finally {
																												sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_200, thread);
																											    }
																											}
																										    }
																										    iteration_state_199 = dictionary_contents.do_dictionary_contents_next(
																											    iteration_state_199);
																										}
																									    }
																									    dictionary_contents.do_dictionary_contents_finalize(iteration_state_199);
																									}
																								    } finally {
																									sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_198, thread);
																								    }
																								}
																							    }
																							    iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
																							}
																						    }
																						    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
																						}
																					    }
																					}
																				    } else {
																					sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt559$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED,
																						UNPROVIDED, UNPROVIDED);
																				    }
																				}
																			    } else {
																				if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
																				    {
																					SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																						? ((SubLObject) (list_utilities.randomize_list(
																							sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(),
																								sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED)))))
																						: sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(),
																							sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																					SubLObject rest_202 = NIL;
																					for (rest_202 = new_list; !((NIL != timed_outP) || (NIL == rest_202)); rest_202 = rest_202.rest()) {
																					    {
																						SubLObject generating_fn = rest_202.first();
																						{
																						    SubLObject _prev_bind_0_203 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
																						    try {
																							sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
																							{
																							    SubLObject link_nodes = funcall(generating_fn, node);
																							    SubLObject new_list_204 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																								    ? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																								    : link_nodes;
																							    SubLObject rest_205 = NIL;
																							    for (rest_205 = new_list_204; !((NIL != timed_outP) || (NIL == rest_205)); rest_205 = rest_205.rest()) {
																								{
																								    SubLObject node_vars_link_node = rest_205.first();
																								    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
																									sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
																									deck.deck_push(node_vars_link_node, recur_deck);
																								    }
																								}
																							    }
																							}
																						    } finally {
																							sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_203, thread);
																						    }
																						}
																					    }
																					}
																				    }
																				}
																			    }
																			}
																		    } finally {
																			sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_197, thread);
																			sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_196, thread);
																		    }
																		}
																	    }
																	}
																    }
																    node_var_171 = deck.deck_pop(recur_deck);
																}
															    } finally {
																sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_182, thread);
																sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_181, thread);
																sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_180, thread);
															    }
															}
														    } else {
															sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt561$Node__a_does_not_pass_sbhl_type_t, node_var,
																sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
														    }
														} finally {
														    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
														    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
														    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_179, thread);
														    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_178, thread);
														    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_177, thread);
														}
													    }
													} finally {
													    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_176, thread);
													    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_175, thread);
													}
												    }
												}
											    } finally {
												mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
												mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_174, thread);
												mt_relevance_macros.$mt$.rebind(_prev_bind_0_173, thread);
											    }
											}
											sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
										    }
										} finally {
										    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_172, thread);
										}
									    }
									}
								    }
								    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
								} finally {
								    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1_170, thread);
								    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_169, thread);
								}
							    }
							}
						    } finally {
							{
							    SubLObject _prev_bind_0_206 = $is_thread_performing_cleanupP$.currentBinding(thread);
							    try {
								$is_thread_performing_cleanupP$.bind(T, thread);
								if (NIL == com.cyc.cycjava.cycl.fact_sheets.fact_sheet_queries_browsableP()) {
								    inference_datastructures_problem_store.destroy_problem_store(store);
								}
							    } finally {
								$is_thread_performing_cleanupP$.rebind(_prev_bind_0_206, thread);
							    }
							}
						    }
						}
					    }
					}
				    } else {
					{
					    SubLObject query_sentence = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_query_sentence(UNPROVIDED, UNPROVIDED);
					    SubLObject v_properties = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_query_properties(UNPROVIDED, UNPROVIDED);
					    ans = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentences_for_term_internal(v_term, domain_mt, query_sentence, v_properties);
					}
				    }
				    if (NIL != $include_miscellaneous_on_fact_sheetsP$.getDynamicValue(thread)) {
					ans = com.cyc.cycjava.cycl.fact_sheets.add_thcl_fact_sheet_sentences(v_term, query_mt, ans);
				    }
				} finally {
				    $omitted_fact_sheet_sentences$.rebind(_prev_bind_1_168, thread);
				    $fact_sheet_query_mt$.rebind(_prev_bind_0_167, thread);
				}
			    }
			}
		    } finally {
			$thcl_forts_by_fiat$.rebind(_prev_bind_1, thread);
			$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
		    }
		}
		return com.cyc.cycjava.cycl.fact_sheets.group_fact_sheet_sentences_alist(com.cyc.cycjava.cycl.fact_sheets.stable_sort_fact_sheet_sentences(ans));
	    }
	}
    }

    /**
     *
     *
     * @return ALIST-P; of SUMMARY-PREDICATE -> (SENTENCE+)* mappings.
     */
    @LispMethod(comment = "@return ALIST-P; of SUMMARY-PREDICATE -> (SENTENCE+)* mappings.")
    public static SubLObject fact_sheet_sentences_for_term(final SubLObject v_term, SubLObject domain_mt) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject ans = NIL;
	final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
	final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
	try {
	    fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
	    thcl.$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread), thread);
	    final SubLObject query_mt = fact_sheets.fact_sheet_anytime_mt(domain_mt);
	    final SubLObject _prev_bind_0_$119 = fact_sheets.$fact_sheet_query_mt$.currentBinding(thread);
	    final SubLObject _prev_bind_1_$120 = fact_sheets.$omitted_fact_sheet_sentences$.currentBinding(thread);
	    try {
		fact_sheets.$fact_sheet_query_mt$.bind(query_mt, thread);
		fact_sheets.$omitted_fact_sheet_sentences$.bind(set.new_set(symbol_function(EQUAL), UNPROVIDED), thread);
		if (((NIL != fact_sheets.$use_fact_sheet_builder_queriesP$.getDynamicValue(thread)) && (NIL != constants_high.find_constant(fact_sheets.$$$FactSheetBuilderQuery))) && fact_sheets.fact_sheet_term_gaf_priority(v_term).numG(TEN_INTEGER)) {
		    SubLObject timed_outP = fact_sheets.fact_sheet_query_soft_timeout_time_reachedP();
		    if (NIL == timed_outP) {
			SubLObject store = NIL;
			try {
			    store = new_problem_store(UNPROVIDED);
			    if (NIL == timed_outP) {
				SubLObject csome_list_var = kb_query.new_cyc_query_from_kbq(fact_sheets.$const385$GetFactSheetBuilderQueriesForTopi, list($RETURN, fact_sheets.$list387, $PROBLEM_STORE, store), UNPROVIDED);
				SubLObject kbq = NIL;
				kbq = csome_list_var.first();
				while ((NIL == timed_outP) && (NIL != csome_list_var)) {
				    if ((NIL != indexed_term_p(kbq)) && (NIL != list_utilities.non_empty_list_p(kb_query.kbq_sentences(kbq)))) {
					ans = append(ans, fact_sheets.fact_sheet_sentences_for_term_from_kbq(v_term, kbq, domain_mt, store, UNPROVIDED));
					timed_outP = fact_sheets.fact_sheet_query_soft_timeout_time_reachedP();
				    }
				    csome_list_var = csome_list_var.rest();
				    kbq = csome_list_var.first();
				}
			    }
			} finally {
			    final SubLObject _prev_bind_0_$120 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				final SubLObject _values = getValuesAsVector();
				if (NIL == fact_sheets.fact_sheet_queries_browsableP()) {
				    destroy_problem_store(store);
				}
				restoreValuesFromVector(_values);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$120, thread);
			    }
			}
		    }
		} else {
		    final SubLObject query_sentence = fact_sheets.fact_sheet_query_sentence(UNPROVIDED, UNPROVIDED);
		    final SubLObject v_properties = fact_sheets.fact_sheet_query_properties(UNPROVIDED, UNPROVIDED);
		    ans = fact_sheets.fact_sheet_sentences_for_term_internal(v_term, domain_mt, query_sentence, v_properties);
		}
		if (NIL != fact_sheets.$include_miscellaneous_on_fact_sheetsP$.getDynamicValue(thread)) {
		    ans = fact_sheets.add_thcl_fact_sheet_sentences(v_term, query_mt, ans);
		}
	    } finally {
		fact_sheets.$omitted_fact_sheet_sentences$.rebind(_prev_bind_1_$120, thread);
		fact_sheets.$fact_sheet_query_mt$.rebind(_prev_bind_0_$119, thread);
	    }
	} finally {
	    thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
	    fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
	}
	return fact_sheets.group_fact_sheet_sentences_alist(fact_sheets.stable_sort_fact_sheet_sentences(ans));
    }

    public static SubLObject clear_fact_sheet_sentences_for_term_from_kbq() {
	final SubLObject cs = fact_sheets.$fact_sheet_sentences_for_term_from_kbq_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static SubLObject remove_fact_sheet_sentences_for_term_from_kbq(final SubLObject v_term, final SubLObject kbq, SubLObject domain_mt, SubLObject store, SubLObject limit_to_assertion) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (store == UNPROVIDED) {
	    store = NIL;
	}
	if (limit_to_assertion == UNPROVIDED) {
	    limit_to_assertion = NIL;
	}
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_sentences_for_term_from_kbq_caching_state$.getGlobalValue(), list(v_term, kbq, domain_mt, store, limit_to_assertion), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject fact_sheet_sentences_for_term_from_kbq_internal(final SubLObject v_term, final SubLObject kbq, final SubLObject domain_mt, final SubLObject store, final SubLObject limit_to_assertion) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject sentences = NIL;
	final SubLObject query_mt = fact_sheets.fact_sheet_anytime_mt(domain_mt);
	final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_query_mt$.currentBinding(thread);
	try {
	    fact_sheets.$fact_sheet_query_mt$.bind(query_mt, thread);
	    final SubLObject query_sentence = fact_sheets.fact_sheet_query_sentence(kbq, limit_to_assertion);
	    final SubLObject v_properties = putf(fact_sheets.fact_sheet_query_properties(kbq, $NORMAL), $PROBLEM_STORE, store);
	    SubLObject p_time = NIL;
	    SubLObject error_message = NIL;
	    final SubLObject time_var = get_internal_real_time();
	    try {
		thread.throwStack.push($catch_error_message_target$.getGlobalValue());
		final SubLObject _prev_bind_0_$122 = Errors.$error_handler$.currentBinding(thread);
		try {
		    Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
		    try {
			sentences = fact_sheets.fact_sheet_sentences_for_term_internal(v_term, domain_mt, query_sentence, v_properties);
		    } catch (final Throwable catch_var) {
			Errors.handleThrowable(catch_var, NIL);
		    }
		} finally {
		    Errors.$error_handler$.rebind(_prev_bind_0_$122, thread);
		}
	    } catch (final Throwable ccatch_env_var) {
		error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
	    } finally {
		thread.throwStack.pop();
	    }
	    p_time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
	    if (error_message.isString()) {
		final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
		    format(stream, fact_sheets.$str390$Caught_error_while_running__S_for, new SubLObject[] { kbq, v_term, error_message });
		    force_output(stream);
		}
	    }
	    if (NIL == list_utilities.empty_list_p(sentences)) {
		final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
		    format(stream, fact_sheets.$str391$_S____yielded__D_paragraph__P_in_, new SubLObject[] { kbq, length(sentences), numeric_date_utilities.readable_elapsed_time_string(p_time, UNPROVIDED), v_term });
		    force_output(stream);
		}
	    }
	    return sentences;
	} finally {
	    fact_sheets.$fact_sheet_query_mt$.rebind(_prev_bind_0, thread);
	}
    }

    public static final SubLObject fact_sheet_sentences_for_term_from_kbq_alt(SubLObject v_term, SubLObject kbq, SubLObject domain_mt, SubLObject store, SubLObject limit_to_assertion) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (store == UNPROVIDED) {
	    store = NIL;
	}
	if (limit_to_assertion == UNPROVIDED) {
	    limit_to_assertion = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject sentences = NIL;
		SubLObject query_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_anytime_mt(domain_mt);
		{
		    SubLObject _prev_bind_0 = $fact_sheet_query_mt$.currentBinding(thread);
		    try {
			$fact_sheet_query_mt$.bind(query_mt, thread);
			{
			    SubLObject query_sentence = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_query_sentence(kbq, limit_to_assertion);
			    SubLObject v_properties = putf(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_query_properties(kbq, $NORMAL), $PROBLEM_STORE, store);
			    SubLObject p_time = NIL;
			    SubLObject time_var = get_internal_real_time();
			    sentences = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentences_for_term_internal(v_term, domain_mt, query_sentence, v_properties);
			    p_time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
			    {
				SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
				if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
				    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
				    format(stream, $str_alt563$_S____yielded__S_paragraphs_in__A, new SubLObject[] { kbq, length(sentences), numeric_date_utilities.readable_elapsed_time_string(p_time, UNPROVIDED), v_term });
				    force_output(stream);
				}
			    }
			}
		    } finally {
			$fact_sheet_query_mt$.rebind(_prev_bind_0, thread);
		    }
		}
		return sentences;
	    }
	}
    }

    public static SubLObject fact_sheet_sentences_for_term_from_kbq(final SubLObject v_term, final SubLObject kbq, SubLObject domain_mt, SubLObject store, SubLObject limit_to_assertion) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (store == UNPROVIDED) {
	    store = NIL;
	}
	if (limit_to_assertion == UNPROVIDED) {
	    limit_to_assertion = NIL;
	}
	SubLObject caching_state = fact_sheets.$fact_sheet_sentences_for_term_from_kbq_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.FACT_SHEET_SENTENCES_FOR_TERM_FROM_KBQ, fact_sheets.$fact_sheet_sentences_for_term_from_kbq_caching_state$, fact_sheets.$int$128, EQL, FIVE_INTEGER, ZERO_INTEGER);
	}
	final SubLObject sxhash = memoization_state.sxhash_calc_5(v_term, kbq, domain_mt, store, limit_to_assertion);
	final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
	if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    SubLObject cdolist_list_var = collisions;
	    SubLObject collision = NIL;
	    collision = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cached_args = collision.first();
		final SubLObject results2 = second(collision);
		if (v_term.eql(cached_args.first())) {
		    cached_args = cached_args.rest();
		    if (kbq.eql(cached_args.first())) {
			cached_args = cached_args.rest();
			if (domain_mt.eql(cached_args.first())) {
			    cached_args = cached_args.rest();
			    if (store.eql(cached_args.first())) {
				cached_args = cached_args.rest();
				if (((NIL != cached_args) && (NIL == cached_args.rest())) && limit_to_assertion.eql(cached_args.first())) {
				    return memoization_state.caching_results(results2);
				}
			    }
			}
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		collision = cdolist_list_var.first();
	    }
	}
	final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_sentences_for_term_from_kbq_internal(v_term, kbq, domain_mt, store, limit_to_assertion)));
	memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(v_term, kbq, domain_mt, store, limit_to_assertion));
	return memoization_state.caching_results(results3);
    }

    public static final SubLObject clear_fact_sheet_sentences_for_term_internal_alt() {
	{
	    SubLObject cs = $fact_sheet_sentences_for_term_internal_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_fact_sheet_sentences_for_term_internal() {
	final SubLObject cs = fact_sheets.$fact_sheet_sentences_for_term_internal_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_fact_sheet_sentences_for_term_internal_alt(SubLObject v_term, SubLObject domain_mt, SubLObject query_sentence, SubLObject v_properties) {
	return memoization_state.caching_state_remove_function_results_with_args($fact_sheet_sentences_for_term_internal_caching_state$.getGlobalValue(), list(v_term, domain_mt, query_sentence, v_properties), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_fact_sheet_sentences_for_term_internal(final SubLObject v_term, final SubLObject domain_mt, final SubLObject query_sentence, final SubLObject v_properties) {
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_sentences_for_term_internal_caching_state$.getGlobalValue(), list(v_term, domain_mt, query_sentence, v_properties), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_sentences_for_term_internal_internal_alt(SubLObject v_term, SubLObject domain_mt, SubLObject query_sentence, SubLObject v_properties) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject sentences = NIL;
		SubLObject cleaned_up_sentences = NIL;
		SubLObject query_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_anytime_mt(domain_mt);
		{
		    SubLObject _prev_bind_0 = $fact_sheet_focal_term$.currentBinding(thread);
		    SubLObject _prev_bind_1 = $thcl_forts_by_fiat$.currentBinding(thread);
		    SubLObject _prev_bind_2 = $fact_sheet_query_mt$.currentBinding(thread);
		    try {
			$fact_sheet_focal_term$.bind(v_term, thread);
			$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? ((SubLObject) (cons(v_term, $thcl_forts_by_fiat$.getDynamicValue(thread)))) : $thcl_forts_by_fiat$.getDynamicValue(thread), thread);
			$fact_sheet_query_mt$.bind(query_mt, thread);
			thread.resetMultipleValues();
			{
			    SubLObject query_results = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_query(query_sentence, query_mt, v_properties);
			    SubLObject query_halt_reason = thread.secondMultipleValue();
			    thread.resetMultipleValues();
			    if (NIL != inference_datastructures_enumerated_types.inference_error_suspend_status_p(query_halt_reason)) {
				sublisp_throw($FACT_SHEET_INFERENCE_ERROR, query_halt_reason);
			    }
			    {
				SubLObject cdolist_list_var = query_results;
				SubLObject cons = NIL;
				for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
				    {
					SubLObject datum = cons;
					SubLObject current = datum;
					SubLObject pred = NIL;
					SubLObject summary_sentence = NIL;
					destructuring_bind_must_consp(current, datum, $list_alt566);
					pred = current.first();
					current = current.rest();
					summary_sentence = current;
					if (NIL != ist_sentence_p(summary_sentence)) {
					    {
						SubLObject as = czer_meta.find_assertion_cycl(summary_sentence, UNPROVIDED);
						if (NIL != as) {
						    summary_sentence = as;
						}
					    }
					}
					if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_summary_sentence_passes_data_gathering_time_filterP(summary_sentence, v_term, query_mt)) {
					    sentences = list_utilities.alist_pushnew(sentences, pred, summary_sentence, symbol_function(EQL), symbol_function(EQUAL));
					}
				    }
				}
			    }
			}
			{
			    SubLObject cdolist_list_var = sentences;
			    SubLObject cons = NIL;
			    for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
				{
				    SubLObject datum = cons;
				    SubLObject current = datum;
				    SubLObject pred = NIL;
				    SubLObject summary_sentences = NIL;
				    destructuring_bind_must_consp(current, datum, $list_alt567);
				    pred = current.first();
				    current = current.rest();
				    summary_sentences = current;
				    {
					SubLObject unsubsumed = list_utilities.remove_subsumed_items(summary_sentences, $sym568$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_, UNPROVIDED);
					SubLObject subsumed = set_difference(summary_sentences, unsubsumed, symbol_function(EQUAL), UNPROVIDED);
					cleaned_up_sentences = list_utilities.alist_enter(cleaned_up_sentences, pred, unsubsumed, UNPROVIDED);
					if (NIL != set.set_p(com.cyc.cycjava.cycl.fact_sheets.omitted_fact_sheet_sentences())) {
					    {
						SubLObject cdolist_list_var_207 = subsumed;
						SubLObject subsumed_sentence = NIL;
						for (subsumed_sentence = cdolist_list_var_207.first(); NIL != cdolist_list_var_207; cdolist_list_var_207 = cdolist_list_var_207.rest(), subsumed_sentence = cdolist_list_var_207.first()) {
						    set.set_add(subsumed_sentence, com.cyc.cycjava.cycl.fact_sheets.omitted_fact_sheet_sentences());
						}
					    }
					}
				    }
				}
			    }
			}
		    } finally {
			$fact_sheet_query_mt$.rebind(_prev_bind_2, thread);
			$thcl_forts_by_fiat$.rebind(_prev_bind_1, thread);
			$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
		    }
		}
		return cleaned_up_sentences;
	    }
	}
    }

    public static SubLObject fact_sheet_sentences_for_term_internal_internal(final SubLObject v_term, final SubLObject domain_mt, final SubLObject query_sentence, final SubLObject v_properties) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject sentences = NIL;
	SubLObject cleaned_up_sentences = NIL;
	final SubLObject query_mt = fact_sheets.fact_sheet_anytime_mt(domain_mt);
	final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
	final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
	final SubLObject _prev_bind_3 = fact_sheets.$fact_sheet_query_mt$.currentBinding(thread);
	try {
	    fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
	    thcl.$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread), thread);
	    fact_sheets.$fact_sheet_query_mt$.bind(query_mt, thread);
	    thread.resetMultipleValues();
	    final SubLObject query_results = fact_sheets.fact_sheet_sentence_query(query_sentence, query_mt, v_properties);
	    final SubLObject query_halt_reason = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    if (NIL != inference_error_suspend_status_p(query_halt_reason)) {
		sublisp_throw(fact_sheets.$FACT_SHEET_INFERENCE_ERROR, query_halt_reason);
	    }
	    SubLObject cdolist_list_var = query_results;
	    SubLObject cons = NIL;
	    cons = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject current;
		final SubLObject datum = current = cons;
		SubLObject pred = NIL;
		SubLObject summary_sentence = NIL;
		destructuring_bind_must_consp(current, datum, fact_sheets.$list396);
		pred = current.first();
		current = summary_sentence = current.rest();
		if (NIL != ist_sentence_p(summary_sentence, UNPROVIDED)) {
		    final SubLObject as = czer_meta.find_assertion_cycl(summary_sentence, UNPROVIDED);
		    if (NIL != as) {
			summary_sentence = as;
		    }
		}
		if (NIL != fact_sheets.fact_sheet_summary_sentence_passes_data_gathering_time_filterP(summary_sentence, v_term, query_mt)) {
		    sentences = list_utilities.alist_pushnew(sentences, pred, summary_sentence, symbol_function(EQL), symbol_function(EQUAL));
		}
		cdolist_list_var = cdolist_list_var.rest();
		cons = cdolist_list_var.first();
	    }
	    SubLObject cdolist_list_var2 = sentences;
	    SubLObject cons2 = NIL;
	    cons2 = cdolist_list_var2.first();
	    while (NIL != cdolist_list_var2) {
		SubLObject current2;
		final SubLObject datum2 = current2 = cons2;
		SubLObject pred2 = NIL;
		SubLObject summary_sentences = NIL;
		destructuring_bind_must_consp(current2, datum2, fact_sheets.$list397);
		pred2 = current2.first();
		current2 = summary_sentences = current2.rest();
		final SubLObject unsubsumed = list_utilities.remove_subsumed_items(summary_sentences, fact_sheets.$sym398$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_, UNPROVIDED);
		final SubLObject subsumed = set_difference(summary_sentences, unsubsumed, symbol_function(EQUAL), UNPROVIDED);
		cleaned_up_sentences = list_utilities.alist_enter(cleaned_up_sentences, pred2, unsubsumed, UNPROVIDED);
		if (NIL != set.set_p(fact_sheets.omitted_fact_sheet_sentences())) {
		    SubLObject cdolist_list_var_$123 = subsumed;
		    SubLObject subsumed_sentence = NIL;
		    subsumed_sentence = cdolist_list_var_$123.first();
		    while (NIL != cdolist_list_var_$123) {
			set.set_add(subsumed_sentence, fact_sheets.omitted_fact_sheet_sentences());
			cdolist_list_var_$123 = cdolist_list_var_$123.rest();
			subsumed_sentence = cdolist_list_var_$123.first();
		    }
		}
		cdolist_list_var2 = cdolist_list_var2.rest();
		cons2 = cdolist_list_var2.first();
	    }
	} finally {
	    fact_sheets.$fact_sheet_query_mt$.rebind(_prev_bind_3, thread);
	    thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
	    fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
	}
	return cleaned_up_sentences;
    }

    public static final SubLObject fact_sheet_sentences_for_term_internal_alt(SubLObject v_term, SubLObject domain_mt, SubLObject query_sentence, SubLObject v_properties) {
	{
	    SubLObject caching_state = $fact_sheet_sentences_for_term_internal_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(FACT_SHEET_SENTENCES_FOR_TERM_INTERNAL, $fact_sheet_sentences_for_term_internal_caching_state$, NIL, EQUAL, FOUR_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject sxhash = memoization_state.sxhash_calc_4(v_term, domain_mt, query_sentence, v_properties);
		SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
		if (collisions != $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    {
			SubLObject cdolist_list_var = collisions;
			SubLObject collision = NIL;
			for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), collision = cdolist_list_var.first()) {
			    {
				SubLObject cached_args = collision.first();
				SubLObject results2 = second(collision);
				if (v_term.equal(cached_args.first())) {
				    cached_args = cached_args.rest();
				    if (domain_mt.equal(cached_args.first())) {
					cached_args = cached_args.rest();
					if (query_sentence.equal(cached_args.first())) {
					    cached_args = cached_args.rest();
					    if (((NIL != cached_args) && (NIL == cached_args.rest())) && v_properties.equal(cached_args.first())) {
						return memoization_state.caching_results(results2);
					    }
					}
				    }
				}
			    }
			}
		    }
		}
		{
		    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentences_for_term_internal_internal(v_term, domain_mt, query_sentence, v_properties)));
		    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(v_term, domain_mt, query_sentence, v_properties));
		    return memoization_state.caching_results(results);
		}
	    }
	}
    }

    public static SubLObject fact_sheet_sentences_for_term_internal(final SubLObject v_term, final SubLObject domain_mt, final SubLObject query_sentence, final SubLObject v_properties) {
	SubLObject caching_state = fact_sheets.$fact_sheet_sentences_for_term_internal_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.FACT_SHEET_SENTENCES_FOR_TERM_INTERNAL, fact_sheets.$fact_sheet_sentences_for_term_internal_caching_state$, NIL, EQUAL, FOUR_INTEGER, ZERO_INTEGER);
	}
	final SubLObject sxhash = memoization_state.sxhash_calc_4(v_term, domain_mt, query_sentence, v_properties);
	final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
	if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    SubLObject cdolist_list_var = collisions;
	    SubLObject collision = NIL;
	    collision = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cached_args = collision.first();
		final SubLObject results2 = second(collision);
		if (v_term.equal(cached_args.first())) {
		    cached_args = cached_args.rest();
		    if (domain_mt.equal(cached_args.first())) {
			cached_args = cached_args.rest();
			if (query_sentence.equal(cached_args.first())) {
			    cached_args = cached_args.rest();
			    if (((NIL != cached_args) && (NIL == cached_args.rest())) && v_properties.equal(cached_args.first())) {
				return memoization_state.caching_results(results2);
			    }
			}
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		collision = cdolist_list_var.first();
	    }
	}
	final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_sentences_for_term_internal_internal(v_term, domain_mt, query_sentence, v_properties)));
	memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(v_term, domain_mt, query_sentence, v_properties));
	return memoization_state.caching_results(results3);
    }

    public static final SubLObject fact_sheet_sentence_about_topicP_alt(SubLObject sentence, SubLObject topic, SubLObject mt, SubLObject strictness, SubLObject threshold) {
	if (mt == UNPROVIDED) {
	    mt = mt_relevance_macros.inference_relevant_mt();
	}
	if (strictness == UNPROVIDED) {
	    strictness = $float$0_5;
	}
	if (threshold == UNPROVIDED) {
	    threshold = TEN_INTEGER;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(strictness, NON_NEGATIVE_NUMBER_P);
	    SubLTrampolineFile.checkType(threshold, NON_NEGATIVE_INTEGER_P);
	    {
		SubLObject pred = cycl_utilities.formula_arg0(sentence);
		SubLObject min_count = NIL;
		SubLObject min_topic_count = NIL;
		SubLObject okP = NIL;
		SubLObject doneP = NIL;
		if (NIL == okP) {
		    {
			SubLObject csome_list_var = list_utilities.alist_lookup($fact_sheet_pred_aboutness_map$.getGlobalValue(), pred, symbol_function(EQL), NIL);
			SubLObject argnum = NIL;
			for (argnum = csome_list_var.first(); !((NIL != okP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), argnum = csome_list_var.first()) {
			    okP = eql(topic, cycl_utilities.formula_arg(sentence, argnum, UNPROVIDED));
			}
		    }
		}
		{
		    SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
		    {
			SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
			SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
			SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
			try {
			    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
			    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
			    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
			    {
				SubLObject argnum = ZERO_INTEGER;
				SubLObject args = cycl_utilities.formula_args(sentence, $IGNORE);
				SubLObject rest = NIL;
				for (rest = args; !((NIL != doneP) || (NIL == rest)); rest = rest.rest()) {
				    {
					SubLObject arg = rest.first();
					argnum = add(argnum, ONE_INTEGER);
					if (NIL != forts.fort_p(arg)) {
					    {
						SubLObject count = number_utilities.f_1_(kb_indexing.relevant_num_gaf_arg_index(arg, argnum, pred));
						if (arg.eql(topic) && ((NIL == min_topic_count) || count.numL(min_topic_count))) {
						    min_topic_count = count;
						    if (count.numLE(threshold)) {
							okP = T;
							doneP = T;
						    }
						} else {
						    if ((NIL == min_count) || count.numL(min_count)) {
							min_count = count;
						    }
						}
					    }
					}
				    }
				}
			    }
			} finally {
			    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
			    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
			    mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		if ((NIL != min_topic_count) && ((NIL == min_count) || multiply(strictness, min_topic_count).numLE(min_count))) {
		    okP = T;
		}
		return okP;
	    }
	}
    }

    public static SubLObject fact_sheet_sentence_about_topicP(final SubLObject sentence, final SubLObject topic, SubLObject mt, SubLObject strictness, SubLObject threshold) {
	if (mt == UNPROVIDED) {
	    mt = mt_relevance_macros.inference_relevant_mt();
	}
	if (strictness == UNPROVIDED) {
	    strictness = fact_sheets.$float$0_5;
	}
	if (threshold == UNPROVIDED) {
	    threshold = TEN_INTEGER;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	assert NIL != number_utilities.non_negative_number_p(strictness) : "! number_utilities.non_negative_number_p(strictness) " + ("number_utilities.non_negative_number_p(strictness) " + "CommonSymbols.NIL != number_utilities.non_negative_number_p(strictness) ") + strictness;
	assert NIL != subl_promotions.non_negative_integer_p(threshold) : "! subl_promotions.non_negative_integer_p(threshold) " + ("subl_promotions.non_negative_integer_p(threshold) " + "CommonSymbols.NIL != subl_promotions.non_negative_integer_p(threshold) ") + threshold;
	final SubLObject pred = cycl_utilities.formula_arg0(sentence);
	SubLObject min_count = NIL;
	SubLObject min_topic_count = NIL;
	SubLObject okP = NIL;
	SubLObject doneP = NIL;
	if (NIL == okP) {
	    SubLObject csome_list_var;
	    SubLObject argnum;
	    for (csome_list_var = list_utilities.alist_lookup(fact_sheets.$fact_sheet_pred_aboutness_map$.getGlobalValue(), pred, symbol_function(EQL), NIL), argnum = NIL, argnum = csome_list_var.first(); (NIL == okP)
		    && (NIL != csome_list_var); okP = eql(topic, cycl_utilities.formula_arg(sentence, argnum, UNPROVIDED)), csome_list_var = csome_list_var.rest(), argnum = csome_list_var.first()) {
	    }
	}
	final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
	final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
	final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
	final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
	try {
	    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
	    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
	    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
	    SubLObject argnum2 = ZERO_INTEGER;
	    final SubLObject args = cycl_utilities.formula_args(sentence, $IGNORE);
	    SubLObject rest;
	    SubLObject arg;
	    SubLObject count;
	    for (rest = NIL, rest = args; (NIL == doneP) && (NIL != rest); rest = rest.rest()) {
		arg = rest.first();
		argnum2 = add(argnum2, ONE_INTEGER);
		if (NIL != forts.fort_p(arg)) {
		    count = number_utilities.f_1_(kb_indexing.relevant_num_gaf_arg_index(arg, argnum2, pred));
		    if (arg.eql(topic) && ((NIL == min_topic_count) || count.numL(min_topic_count))) {
			min_topic_count = count;
			if (count.numLE(threshold)) {
			    okP = T;
			    doneP = T;
			}
		    } else if ((NIL == min_count) || count.numL(min_count)) {
			min_count = count;
		    }

		}
	    }
	} finally {
	    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
	    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
	    mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
	}
	if ((NIL != min_topic_count) && ((NIL == min_count) || multiply(strictness, min_topic_count).numLE(min_count))) {
	    okP = T;
	}
	return okP;
    }

    public static final SubLObject clear_fact_sheet_sentence_trivially_impliesP_alt() {
	{
	    SubLObject cs = $fact_sheet_sentence_trivially_impliesP_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_fact_sheet_sentence_trivially_impliesP() {
	final SubLObject cs = fact_sheets.$fact_sheet_sentence_trivially_impliesP_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_fact_sheet_sentence_trivially_impliesP(SubLObject sentence1, SubLObject sentence2, SubLObject mt) {
	if (mt == UNPROVIDED) {
	    mt = (NIL != $fact_sheet_query_mt$.getDynamicValue()) ? ((SubLObject) ($fact_sheet_query_mt$.getDynamicValue())) : $$BaseKB;
	}
	return memoization_state.caching_state_remove_function_results_with_args($fact_sheet_sentence_trivially_impliesP_caching_state$.getGlobalValue(), list(sentence1, sentence2, mt), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_fact_sheet_sentence_trivially_impliesP(final SubLObject sentence1, final SubLObject sentence2, SubLObject mt, SubLObject really_trivialP, SubLObject allow_inductionP) {
	if (mt == UNPROVIDED) {
	    mt = (NIL != fact_sheets.$fact_sheet_query_mt$.getDynamicValue()) ? fact_sheets.$fact_sheet_query_mt$.getDynamicValue() : fact_sheets.$$BaseKB;
	}
	if (really_trivialP == UNPROVIDED) {
	    really_trivialP = NIL;
	}
	if (allow_inductionP == UNPROVIDED) {
	    allow_inductionP = T;
	}
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_sentence_trivially_impliesP_caching_state$.getGlobalValue(), list(sentence1, sentence2, mt, really_trivialP, allow_inductionP), UNPROVIDED, UNPROVIDED);
    }

    /**
     *
     *
     * @return BOOLEANP; Can we easily conclude that SENTENCE1 implies SENTENCE2?
     */
    @LispMethod(comment = "@return BOOLEANP; Can we easily conclude that SENTENCE1 implies SENTENCE2?")
    public static final SubLObject fact_sheet_sentence_trivially_impliesP_internal(SubLObject sentence1, SubLObject sentence2, SubLObject mt) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if ((NIL != formula_pattern_match.formula_matches_pattern(sentence1, $list_alt572)) && cycl_utilities.formula_terms(sentence2, UNPROVIDED).equal(bq_cons($$relationInstanceExists, subseq(cycl_utilities.formula_terms(sentence1, UNPROVIDED), ONE_INTEGER, FOUR_INTEGER)))) {
		return T;
	    } else {
		if (((NIL != formula_pattern_match.formula_matches_pattern(sentence2, $list_alt574)) && list_utilities.first_n(TWO_INTEGER, cycl_utilities.formula_terms(sentence1, UNPROVIDED)).equal(list_utilities.first_n(TWO_INTEGER, cycl_utilities.formula_args(sentence2, UNPROVIDED))))
			&& (NIL != isa.isaP(cycl_utilities.formula_arg2(sentence1, UNPROVIDED), cycl_utilities.formula_arg3(sentence2, UNPROVIDED), mt, UNPROVIDED))) {
		    return T;
		} else {
		    if (((NIL != assertion_handles.assertion_p(sentence1)) && (NIL != assertion_handles.assertion_p(sentence2))) && (NIL != member(sentence1, pph_proof.pph_meta_supports(sentence2), UNPROVIDED, UNPROVIDED))) {
			return T;
		    } else {
			if (NIL == same_formula_arity_p(sentence1, sentence2, UNPROVIDED)) {
			    return NIL;
			} else {
			    if (((NIL != assertion_handles.assertion_p(sentence1)) && (NIL != assertion_handles.assertion_p(sentence2))) && (NIL == com.cyc.cycjava.cycl.fact_sheets.assertion_mt_times_visibleP(sentence2, sentence1))) {
				return NIL;
			    } else {
				if ((NIL != genl_predicates.genl_predicate_in_any_mtP(cycl_utilities.formula_arg0(sentence1), cycl_utilities.formula_arg0(sentence2)))
					&& (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_args_imply_args_for_pred(cycl_utilities.formula_args(sentence1, UNPROVIDED), cycl_utilities.formula_args(sentence2, UNPROVIDED), cycl_utilities.formula_arg0(sentence1), mt))) {
				    {
					SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
					if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
					    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
					    format(stream, $str_alt575$_S___implies__S, sentence1, sentence2);
					    force_output(stream);
					}
				    }
				    return T;
				} else {
				    if (((NIL != formula_arityE(sentence1, TWO_INTEGER, UNPROVIDED)) && (NIL != genl_predicates.genl_inverseP(cycl_utilities.formula_arg0(sentence1), cycl_utilities.formula_arg0(sentence2), $$InferencePSC, UNPROVIDED)))
					    && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_args_imply_args_for_pred(cycl_utilities.formula_args(sentence1, UNPROVIDED), reverse(cycl_utilities.formula_args(sentence2, UNPROVIDED)), cycl_utilities.formula_arg0(sentence1), mt))) {
					{
					    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
					    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
						com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
						format(stream, $str_alt575$_S___implies__S, sentence1, sentence2);
						force_output(stream);
					    }
					}
					return T;
				    } else {
					return NIL;
				    }
				}
			    }
			}
		    }
		}
	    }
	}
    }

    public static SubLObject fact_sheet_sentence_trivially_impliesP_internal(final SubLObject sentence1, final SubLObject sentence2, final SubLObject mt, final SubLObject really_trivialP, final SubLObject allow_inductionP) {
	final SubLObject formula1 = fact_sheets.fact_sheet_sentence_formula(sentence1);
	final SubLObject formula2 = fact_sheets.fact_sheet_sentence_formula(sentence2);
	if ((NIL != formula_pattern_match.formula_matches_pattern(formula1, fact_sheets.$list402)) && cycl_utilities.formula_terms(sentence2, UNPROVIDED).equal(bq_cons(fact_sheets.$$relationInstanceExists, subseq(cycl_utilities.formula_terms(sentence1, UNPROVIDED), ONE_INTEGER, FOUR_INTEGER)))) {
	    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
	    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
		format(stream, fact_sheets.$str404$_S___implies__S, sentence1, sentence2);
		force_output(stream);
	    }
	    return T;
	}
	if (((NIL != formula_pattern_match.formula_matches_pattern(formula2, fact_sheets.$list405)) && list_utilities.first_n(TWO_INTEGER, cycl_utilities.formula_terms(sentence1, UNPROVIDED)).equal(list_utilities.first_n(TWO_INTEGER, cycl_utilities.formula_args(sentence2, UNPROVIDED))))
		&& (NIL != isa.isaP(cycl_utilities.formula_arg2(sentence1, UNPROVIDED), cycl_utilities.formula_arg3(sentence2, UNPROVIDED), mt, UNPROVIDED))) {
	    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
	    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
		format(stream, fact_sheets.$str404$_S___implies__S, sentence1, sentence2);
		force_output(stream);
	    }
	    return T;
	}
	if (((NIL != assertion_handles.assertion_p(sentence1)) && (NIL != assertion_handles.assertion_p(sentence2))) && (NIL != fact_sheets.fact_sheet_trivial_meta_supportP(sentence2, sentence1))) {
	    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
	    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
		format(stream, fact_sheets.$str406$_S___is_a_trivial_meta_support_of, sentence1, sentence2);
		force_output(stream);
	    }
	    return T;
	}
	if (NIL == same_formula_arity_p(sentence1, sentence2, UNPROVIDED)) {
	    return NIL;
	}
	if (((NIL != assertion_handles.assertion_p(sentence1)) && (NIL != assertion_handles.assertion_p(sentence2))) && (NIL == fact_sheets.assertion_mt_times_visibleP(sentence2, sentence1))) {
	    return NIL;
	}
	if ((NIL != genl_predicates.genl_predicate_in_any_mtP(cycl_utilities.formula_arg0(sentence1), cycl_utilities.formula_arg0(sentence2)))
		&& (NIL != fact_sheets.fact_sheet_args_imply_args_for_pred(cycl_utilities.formula_args(sentence1, UNPROVIDED), cycl_utilities.formula_args(sentence2, UNPROVIDED), cycl_utilities.formula_arg0(sentence1), mt, really_trivialP))) {
	    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
	    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
		format(stream, fact_sheets.$str404$_S___implies__S, sentence1, sentence2);
		force_output(stream);
	    }
	    return T;
	}
	if (((NIL != formula_arityE(sentence1, TWO_INTEGER, UNPROVIDED)) && (NIL != genl_predicates.genl_inverseP(cycl_utilities.formula_arg0(sentence1), cycl_utilities.formula_arg0(sentence2), fact_sheets.$$InferencePSC, UNPROVIDED)))
		&& (NIL != fact_sheets.fact_sheet_args_imply_args_for_pred(cycl_utilities.formula_args(sentence1, UNPROVIDED), reverse(cycl_utilities.formula_args(sentence2, UNPROVIDED)), cycl_utilities.formula_arg0(sentence1), mt, really_trivialP))) {
	    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
	    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
		format(stream, fact_sheets.$str404$_S___implies__S, sentence1, sentence2);
		force_output(stream);
	    }
	    return T;
	}
	if (NIL == allow_inductionP) {
	    return NIL;
	}
	if ((fact_sheets.$$isa.eql(cycl_utilities.formula_arg0(sentence1)) && (NIL != find(cycl_utilities.formula_arg1(sentence1, UNPROVIDED), cycl_utilities.formula_args(sentence2, UNPROVIDED), symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED)))
		&& (NIL != fact_sheets.fact_highly_prevalent_among_instancesP(cycl_utilities.formula_arg2(sentence1, UNPROVIDED), sentence2, cycl_utilities.formula_arg_positions(sentence2, cycl_utilities.formula_arg1(sentence1, UNPROVIDED), symbol_function(EQUAL)).first(), mt))) {
	    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
	    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
		format(stream, fact_sheets.$str408$_S___is_highly_prevalent_among_in, sentence2, cycl_utilities.formula_arg2(sentence1, UNPROVIDED));
		force_output(stream);
	    }
	    return T;
	}
	return NIL;
    }

    public static final SubLObject fact_sheet_sentence_trivially_impliesP(SubLObject sentence1, SubLObject sentence2, SubLObject mt) {
	if (mt == UNPROVIDED) {
	    mt = (NIL != $fact_sheet_query_mt$.getDynamicValue()) ? ((SubLObject) ($fact_sheet_query_mt$.getDynamicValue())) : $$BaseKB;
	}
	{
	    SubLObject caching_state = $fact_sheet_sentence_trivially_impliesP_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name($sym568$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_, $sym576$_FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES__CACHING_STATE_, NIL, EQUAL, THREE_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject sxhash = memoization_state.sxhash_calc_3(sentence1, sentence2, mt);
		SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
		if (collisions != $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    {
			SubLObject cdolist_list_var = collisions;
			SubLObject collision = NIL;
			for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), collision = cdolist_list_var.first()) {
			    {
				SubLObject cached_args = collision.first();
				SubLObject results2 = second(collision);
				if (sentence1.equal(cached_args.first())) {
				    cached_args = cached_args.rest();
				    if (sentence2.equal(cached_args.first())) {
					cached_args = cached_args.rest();
					if (((NIL != cached_args) && (NIL == cached_args.rest())) && mt.equal(cached_args.first())) {
					    return memoization_state.caching_results(results2);
					}
				    }
				}
			    }
			}
		    }
		}
		{
		    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_trivially_impliesP_internal(sentence1, sentence2, mt)));
		    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(sentence1, sentence2, mt));
		    return memoization_state.caching_results(results);
		}
	    }
	}
    }

    public static SubLObject fact_sheet_sentence_trivially_impliesP(final SubLObject sentence1, final SubLObject sentence2, SubLObject mt, SubLObject really_trivialP, SubLObject allow_inductionP) {
	if (mt == UNPROVIDED) {
	    mt = (NIL != fact_sheets.$fact_sheet_query_mt$.getDynamicValue()) ? fact_sheets.$fact_sheet_query_mt$.getDynamicValue() : fact_sheets.$$BaseKB;
	}
	if (really_trivialP == UNPROVIDED) {
	    really_trivialP = NIL;
	}
	if (allow_inductionP == UNPROVIDED) {
	    allow_inductionP = T;
	}
	SubLObject caching_state = fact_sheets.$fact_sheet_sentence_trivially_impliesP_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.$sym398$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_, fact_sheets.$sym409$_FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES__CACHING_STATE_, fact_sheets.$int$128, EQUAL, FIVE_INTEGER, ZERO_INTEGER);
	}
	final SubLObject sxhash = memoization_state.sxhash_calc_5(sentence1, sentence2, mt, really_trivialP, allow_inductionP);
	final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
	if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    SubLObject cdolist_list_var = collisions;
	    SubLObject collision = NIL;
	    collision = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cached_args = collision.first();
		final SubLObject results2 = second(collision);
		if (sentence1.equal(cached_args.first())) {
		    cached_args = cached_args.rest();
		    if (sentence2.equal(cached_args.first())) {
			cached_args = cached_args.rest();
			if (mt.equal(cached_args.first())) {
			    cached_args = cached_args.rest();
			    if (really_trivialP.equal(cached_args.first())) {
				cached_args = cached_args.rest();
				if (((NIL != cached_args) && (NIL == cached_args.rest())) && allow_inductionP.equal(cached_args.first())) {
				    return memoization_state.caching_results(results2);
				}
			    }
			}
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		collision = cdolist_list_var.first();
	    }
	}
	final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_sentence_trivially_impliesP_internal(sentence1, sentence2, mt, really_trivialP, allow_inductionP)));
	memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(sentence1, sentence2, mt, really_trivialP, allow_inductionP));
	return memoization_state.caching_results(results3);
    }

    public static SubLObject fact_highly_prevalent_among_instancesP(final SubLObject collection, final SubLObject sentence, final SubLObject argnum, final SubLObject mt) {
	final SubLObject dummified = replace_formula_arg(argnum, $REPLACEME, sentence);
	return fact_sheets.fact_highly_prevalent_among_instancesP_cached(collection, dummified, mt);
    }

    public static SubLObject clear_fact_highly_prevalent_among_instancesP_cached() {
	final SubLObject cs = fact_sheets.$fact_highly_prevalent_among_instancesP_cached_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static SubLObject remove_fact_highly_prevalent_among_instancesP_cached(final SubLObject collection, final SubLObject sentence, final SubLObject mt) {
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_highly_prevalent_among_instancesP_cached_caching_state$.getGlobalValue(), list(collection, sentence, mt), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject fact_highly_prevalent_among_instancesP_cached_internal(final SubLObject collection, final SubLObject sentence, final SubLObject mt) {
	SubLObject checked = ZERO_INTEGER;
	SubLObject holds = ZERO_INTEGER;
	SubLObject cdolist_list_var = isa.sample_leaf_instances(collection, TEN_INTEGER, mt, UNPROVIDED);
	SubLObject instance = NIL;
	instance = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    if (NIL != czer_meta.find_visible_assertions_cycl(cycl_utilities.formula_subst(instance, $REPLACEME, sentence, UNPROVIDED, UNPROVIDED), mt)) {
		holds = add(holds, ONE_INTEGER);
	    }
	    checked = add(checked, ONE_INTEGER);
	    cdolist_list_var = cdolist_list_var.rest();
	    instance = cdolist_list_var.first();
	}
	return makeBoolean(checked.numG(ONE_INTEGER) && divide(holds, checked).numG(fact_sheets.$float$0_9));
    }

    public static SubLObject fact_highly_prevalent_among_instancesP_cached(final SubLObject collection, final SubLObject sentence, final SubLObject mt) {
	SubLObject caching_state = fact_sheets.$fact_highly_prevalent_among_instancesP_cached_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.$sym411$FACT_HIGHLY_PREVALENT_AMONG_INSTANCES__CACHED, fact_sheets.$sym413$_FACT_HIGHLY_PREVALENT_AMONG_INSTANCES__CACHED_CACHING_STATE_, $int$256, EQUAL, THREE_INTEGER, ZERO_INTEGER);
	}
	final SubLObject sxhash = memoization_state.sxhash_calc_3(collection, sentence, mt);
	final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
	if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    SubLObject cdolist_list_var = collisions;
	    SubLObject collision = NIL;
	    collision = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cached_args = collision.first();
		final SubLObject results2 = second(collision);
		if (collection.equal(cached_args.first())) {
		    cached_args = cached_args.rest();
		    if (sentence.equal(cached_args.first())) {
			cached_args = cached_args.rest();
			if (((NIL != cached_args) && (NIL == cached_args.rest())) && mt.equal(cached_args.first())) {
			    return memoization_state.caching_results(results2);
			}
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		collision = cdolist_list_var.first();
	    }
	}
	final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fact_highly_prevalent_among_instancesP_cached_internal(collection, sentence, mt)));
	memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(collection, sentence, mt));
	return memoization_state.caching_results(results3);
    }

    public static SubLObject fact_sheet_sentence_formula(final SubLObject sentence) {
	if (NIL != assertion_handles.assertion_p(sentence)) {
	    return fi.assertion_hl_formula(sentence, UNPROVIDED);
	}
	return sentence;
    }

    public static SubLObject fact_sheet_trivial_meta_supportP(final SubLObject assertion, final SubLObject support) {
	SubLObject ans = NIL;
	final SubLObject support_sentence = arguments.support_sentence(support);
	SubLObject rest;
	SubLObject argument;
	SubLObject supports;
	for (rest = NIL, rest = assertions_high.assertion_arguments(assertion); (NIL == ans) && (NIL != rest); rest = rest.rest()) {
	    argument = rest.first();
	    if (NIL != deduction_handles.deduction_p(argument)) {
		supports = remove_if(fact_sheets.$sym415$RULE_ASSERTION_, deductions_high.deduction_supports(argument), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		if ((NIL != list_utilities.singletonP(supports)) && arguments.support_sentence(supports.first()).equal(support_sentence)) {
		    ans = T;
		}
	    }
	}
	return ans;
    }

    /**
     * A weaker form of genl-mt? on the mts of ASSERTION1 and ASSERTION2 that only looks
     * at time indices.
     */
    @LispMethod(comment = "A weaker form of genl-mt? on the mts of ASSERTION1 and ASSERTION2 that only looks\r\nat time indices.\nA weaker form of genl-mt? on the mts of ASSERTION1 and ASSERTION2 that only looks\nat time indices.")
    public static final SubLObject assertion_mt_times_visibleP_alt(SubLObject assertion1, SubLObject assertion2) {
	{
	    SubLObject interval1 = hlmt.explode_hlmt_temporal_facets_with_defaults(assertions_high.assertion_mt(assertion1));
	    SubLObject interval2 = hlmt.explode_hlmt_temporal_facets_with_defaults(assertions_high.assertion_mt(assertion2));
	    if (NIL != hlmt_relevance.subsumed_time_intervalP(interval1, interval2)) {
		return T;
	    } else {
		if (((NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_skolem_time_intervalP(interval1)) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_skolem_time_intervalP(interval2)))
			&& (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_skolem_time_interval_more_constrainedP(interval2, interval1))) {
		    return T;
		} else {
		    return NIL;
		}
	    }
	}
    }

    @LispMethod(comment = "A weaker form of genl-mt? on the mts of ASSERTION1 and ASSERTION2 that only looks\r\nat time indices.\nA weaker form of genl-mt? on the mts of ASSERTION1 and ASSERTION2 that only looks\nat time indices.")
    public static SubLObject assertion_mt_times_visibleP(final SubLObject assertion1, final SubLObject assertion2) {
	final SubLObject interval1 = hlmt.explode_hlmt_temporal_facets_with_defaults(assertions_high.assertion_mt(assertion1));
	final SubLObject interval2 = hlmt.explode_hlmt_temporal_facets_with_defaults(assertions_high.assertion_mt(assertion2));
	if (NIL != hlmt_relevance.subsumed_time_intervalP(interval1, interval2)) {
	    return T;
	}
	if (((NIL != fact_sheets.fact_sheet_skolem_time_intervalP(interval1)) && (NIL != fact_sheets.fact_sheet_skolem_time_intervalP(interval2))) && (NIL != fact_sheets.fact_sheet_skolem_time_interval_more_constrainedP(interval2, interval1))) {
	    return T;
	}
	return NIL;
    }

    /**
    * A weaker form of genl-mt? on the mts of ASSERTION1 and ASSERTION2 that only looks
    * at time indices.
    */

    public static final SubLObject fact_sheet_skolem_time_intervalP_alt(SubLObject interval) {
	if (NIL != formula_pattern_match.formula_matches_pattern(interval, $list_alt577)) {
	    return T;
	} else {
	    if ((NIL != term.skolem_nartP(interval)) && (NIL != kb_mapping_utilities.some_pred_value_in_any_mt(interval, $$temporallySubsumes, TWO_INTEGER, UNPROVIDED))) {
		return T;
	    } else {
		return NIL;
	    }
	}
    }

    public static SubLObject fact_sheet_skolem_time_intervalP(final SubLObject interval) {
	if (NIL != formula_pattern_match.formula_matches_pattern(interval, fact_sheets.$list416)) {
	    return T;
	}
	if ((NIL != term.skolem_nartP(interval)) && (NIL != kb_mapping_utilities.some_pred_value_in_any_mt(interval, fact_sheets.$$temporallySubsumes, TWO_INTEGER, UNPROVIDED))) {
	    return T;
	}
	return NIL;
    }

    public static final SubLObject fact_sheet_skolem_time_interval_more_constrainedP_alt(SubLObject specific, SubLObject general) {
	return hlmt_relevance.subsumed_time_intervalP(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_skolem_time_interval_subsuming_interval(specific), com.cyc.cycjava.cycl.fact_sheets.fact_sheet_skolem_time_interval_subsuming_interval(general));
    }

    public static SubLObject fact_sheet_skolem_time_interval_more_constrainedP(final SubLObject specific, final SubLObject general) {
	return hlmt_relevance.subsumed_time_intervalP(fact_sheets.fact_sheet_skolem_time_interval_subsuming_interval(specific), fact_sheets.fact_sheet_skolem_time_interval_subsuming_interval(general));
    }

    public static final SubLObject fact_sheet_skolem_time_interval_subsuming_interval_alt(SubLObject interval) {
	{
	    SubLObject ans = NIL;
	    if (NIL != formula_pattern_match.formula_matches_pattern(interval, $list_alt577)) {
		ans = cycl_utilities.nat_arg1(interval, UNPROVIDED);
	    } else {
		if (NIL != term.skolem_nartP(interval)) {
		    ans = kb_mapping_utilities.fpred_value_in_any_mt(interval, $$temporallySubsumes, TWO_INTEGER, ONE_INTEGER, UNPROVIDED);
		}
	    }
	    return NIL != ans ? ((SubLObject) (ans)) : $$Always_TimeInterval;
	}
    }

    public static SubLObject fact_sheet_skolem_time_interval_subsuming_interval(final SubLObject interval) {
	SubLObject ans = NIL;
	if (NIL != formula_pattern_match.formula_matches_pattern(interval, fact_sheets.$list416)) {
	    ans = cycl_utilities.nat_arg1(interval, UNPROVIDED);
	} else if (NIL != term.skolem_nartP(interval)) {
	    ans = kb_mapping_utilities.fpred_value_in_any_mt(interval, fact_sheets.$$temporallySubsumes, TWO_INTEGER, ONE_INTEGER, UNPROVIDED);
	}

	return NIL != ans ? ans : fact_sheets.$$Always_TimeInterval;
    }

    /**
     *
     *
     * @return BOOLEANP; Does (PRED . ARGS1) imply (PRED . ARGS2)?
     */
    @LispMethod(comment = "@return BOOLEANP; Does (PRED . ARGS1) imply (PRED . ARGS2)?")
    public static final SubLObject fact_sheet_args_imply_args_for_pred(SubLObject args1, SubLObject args2, SubLObject pred, SubLObject mt) {
	if (mt == UNPROVIDED) {
	    mt = (NIL != $fact_sheet_query_mt$.getDynamicValue()) ? ((SubLObject) ($fact_sheet_query_mt$.getDynamicValue())) : $$BaseKB;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (args1.equal(args2)) {
		return T;
	    } else {
		if (NIL != tva_utilities.some_tva_for_predicate(pred)) {
		    {
			SubLObject badP = NIL;
			if (NIL == badP) {
			    {
				SubLObject end_var = number_utilities.f_1X(length(args1));
				SubLObject argnum = NIL;
				for (argnum = ONE_INTEGER; !((NIL != badP) || argnum.numGE(end_var)); argnum = number_utilities.f_1X(argnum)) {
				    {
					SubLObject arg1 = nth(number_utilities.f_1_(argnum), args1);
					SubLObject arg2 = nth(number_utilities.f_1_(argnum), args2);
					SubLObject goodP = equal(arg1, arg2);
					if (NIL == goodP) {
					    {
						SubLObject node_var = pred;
						SubLObject deck_type = (false) ? ((SubLObject) ($STACK)) : $QUEUE;
						SubLObject recur_deck = deck.create_deck(deck_type);
						SubLObject node_and_predicate_mode = NIL;
						{
						    SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
						    try {
							sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
							{
							    SubLObject tv_var = NIL;
							    {
								SubLObject _prev_bind_0_208 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
								SubLObject _prev_bind_1 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
								try {
								    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
								    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
								    if (NIL != tv_var) {
									if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
									    if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
										{
										    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
										    if (pcase_var.eql($ERROR)) {
											sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
										    } else {
											if (pcase_var.eql($CERROR)) {
											    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
											} else {
											    if (pcase_var.eql($WARN)) {
												Errors.warn($str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
											    } else {
												Errors.warn($str_alt558$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
												Errors.cerror($$$continue_anyway, $str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
											    }
											}
										    }
										}
									    }
									}
								    }
								    {
									SubLObject _prev_bind_0_209 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
									SubLObject _prev_bind_1_210 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
									SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
									SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
									SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
									try {
									    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_vars.get_sbhl_module($$genlPreds), thread);
									    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_vars.get_sbhl_module($$genlPreds)), thread);
									    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_vars.get_sbhl_module($$genlPreds)), thread);
									    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
									    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$genlPreds), thread);
									    if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(pred, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
										{
										    SubLObject _prev_bind_0_211 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
										    SubLObject _prev_bind_1_212 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
										    SubLObject _prev_bind_2_213 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
										    try {
											sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
											sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_vars.get_sbhl_module($$genlPreds)),
												thread);
											sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
											sbhl_marking_utilities.sbhl_mark_node_marked(node_var, UNPROVIDED);
											node_and_predicate_mode = list(pred, sbhl_search_vars.genl_inverse_mode_p());
											while ((NIL != node_and_predicate_mode) && (NIL == goodP)) {
											    {
												SubLObject node_var_214 = node_and_predicate_mode.first();
												SubLObject predicate_mode = second(node_and_predicate_mode);
												SubLObject spec_pred = node_var_214;
												{
												    SubLObject _prev_bind_0_215 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
												    try {
													sbhl_search_vars.$genl_inverse_mode_p$.bind(predicate_mode, thread);
													{
													    SubLObject inverse_modeP = predicate_mode;
													    if (NIL == goodP) {
														{
														    SubLObject csome_list_var = tva_utilities.get_tva_predicates();
														    SubLObject tva_pred = NIL;
														    for (tva_pred = csome_list_var.first(); !((NIL != goodP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), tva_pred = csome_list_var.first()) {
															if (NIL == badP) {
															    {
																SubLObject csome_list_var_216 = tva_utilities.tva_gather_transitive_predicates_for_arg(tva_pred, spec_pred, argnum, inverse_modeP);
																SubLObject transitive_predicate = NIL;
																for (transitive_predicate = csome_list_var_216.first(); !((NIL != badP)
																	|| (NIL == csome_list_var_216)); csome_list_var_216 = csome_list_var_216.rest(), transitive_predicate = csome_list_var_216.first()) {
																    {
																	SubLObject pcase_var = tva_pred;
																	if (pcase_var.eql($$transitiveViaArgInverse)) {
																	    goodP = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_transitivity_check(make_binary_formula(transitive_predicate, arg2, arg1), mt);
																	} else {
																	    if (pcase_var.eql($$transitiveViaArg)) {
																		goodP = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_transitivity_check(make_binary_formula(transitive_predicate, arg1, arg2), mt);
																	    }
																	}
																    }
																}
															    }
															}
														    }
														}
													    }
													    {
														SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$genlPreds));
														SubLObject rest = NIL;
														for (rest = accessible_modules; !((NIL != goodP) || (NIL == rest)); rest = rest.rest()) {
														    {
															SubLObject module_var = rest.first();
															{
															    SubLObject _prev_bind_0_217 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
															    SubLObject _prev_bind_1_218 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
															    try {
																sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
																sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED)
																	? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread))))
																	: sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
																{
																    SubLObject node = function_terms.naut_to_nart(node_var_214);
																    if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
																	{
																	    SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																	    if (NIL != d_link) {
																		{
																		    SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																		    if (NIL != mt_links) {
																			{
																			    SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
																			    while (!((NIL != goodP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state)))) {
																				thread.resetMultipleValues();
																				{
																				    SubLObject mt_219 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
																				    SubLObject tv_links = thread.secondMultipleValue();
																				    thread.resetMultipleValues();
																				    if (NIL != mt_relevance_macros.relevant_mtP(mt_219)) {
																					{
																					    SubLObject _prev_bind_0_220 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
																					    try {
																						sbhl_link_vars.$sbhl_link_mt$.bind(mt_219, thread);
																						{
																						    SubLObject iteration_state_221 = dictionary_contents.do_dictionary_contents_state(
																							    dictionary.dictionary_contents(tv_links));
																						    while (!((NIL != goodP) || (NIL != dictionary_contents.do_dictionary_contents_doneP(iteration_state_221)))) {
																							thread.resetMultipleValues();
																							{
																							    SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_221);
																							    SubLObject link_nodes = thread.secondMultipleValue();
																							    thread.resetMultipleValues();
																							    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
																								{
																								    SubLObject _prev_bind_0_222 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
																								    try {
																									sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
																									{
																									    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																										    ? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																										    : link_nodes;
																									    SubLObject rest_223 = NIL;
																									    for (rest_223 = new_list; !((NIL != goodP) || (NIL == rest_223)); rest_223 = rest_223.rest()) {
																										{
																										    SubLObject node_vars_link_node = rest_223.first();
																										    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node,
																											    UNPROVIDED)) {
																											sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
																											deck.deck_push(list(node_vars_link_node, sbhl_search_vars.genl_inverse_mode_p()),
																												recur_deck);
																										    }
																										}
																									    }
																									}
																								    } finally {
																									sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_222, thread);
																								    }
																								}
																							    }
																							    iteration_state_221 = dictionary_contents.do_dictionary_contents_next(iteration_state_221);
																							}
																						    }
																						    dictionary_contents.do_dictionary_contents_finalize(iteration_state_221);
																						}
																					    } finally {
																						sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_220, thread);
																					    }
																					}
																				    }
																				    iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
																				}
																			    }
																			    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
																			}
																		    }
																		}
																	    } else {
																		sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt559$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
																	    }
																	}
																    } else {
																	if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
																	    {
																		SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																			? ((SubLObject) (list_utilities.randomize_list(
																				sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(),
																					sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED)))))
																			: sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(),
																				sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																		SubLObject rest_224 = NIL;
																		for (rest_224 = new_list; !((NIL != goodP) || (NIL == rest_224)); rest_224 = rest_224.rest()) {
																		    {
																			SubLObject generating_fn = rest_224.first();
																			{
																			    SubLObject _prev_bind_0_225 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
																			    try {
																				sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
																				{
																				    SubLObject link_nodes = funcall(generating_fn, node);
																				    SubLObject new_list_226 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																					    : link_nodes;
																				    SubLObject rest_227 = NIL;
																				    for (rest_227 = new_list_226; !((NIL != goodP) || (NIL == rest_227)); rest_227 = rest_227.rest()) {
																					{
																					    SubLObject node_vars_link_node = rest_227.first();
																					    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
																						sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
																						deck.deck_push(list(node_vars_link_node, sbhl_search_vars.genl_inverse_mode_p()), recur_deck);
																					    }
																					}
																				    }
																				}
																			    } finally {
																				sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_225, thread);
																			    }
																			}
																		    }
																		}
																	    }
																	}
																    }
																}
															    } finally {
																sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_218, thread);
																sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_217, thread);
															    }
															}
														    }
														}
													    }
													}
												    } finally {
													sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_215, thread);
												    }
												}
											    }
											    node_and_predicate_mode = deck.deck_pop(recur_deck);
											}
										    } finally {
											sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_213, thread);
											sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_212, thread);
											sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_211, thread);
										    }
										}
									    } else {
										sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt561$Node__a_does_not_pass_sbhl_type_t, pred, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
									    }
									} finally {
									    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
									    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
									    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
									    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_210, thread);
									    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_209, thread);
									}
								    }
								} finally {
								    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1, thread);
								    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_208, thread);
								}
							    }
							    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
							}
						    } finally {
							sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0, thread);
						    }
						}
					    }
					}
					badP = makeBoolean(NIL == goodP);
				    }
				}
			    }
			}
			return makeBoolean(NIL == badP);
		    }
		} else {
		    return NIL;
		}
	    }
	}
    }

    public static SubLObject fact_sheet_args_imply_args_for_pred(final SubLObject args1, final SubLObject args2, final SubLObject pred, SubLObject mt, SubLObject really_trivialP) {
	if (mt == UNPROVIDED) {
	    mt = (NIL != fact_sheets.$fact_sheet_query_mt$.getDynamicValue()) ? fact_sheets.$fact_sheet_query_mt$.getDynamicValue() : fact_sheets.$$BaseKB;
	}
	if (really_trivialP == UNPROVIDED) {
	    really_trivialP = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	if (args1.equal(args2)) {
	    return T;
	}
	if (NIL != really_trivialP) {
	    return NIL;
	}
	if (NIL != tva_utilities.some_tva_for_predicate(pred)) {
	    SubLObject badP = NIL;
	    if (NIL == badP) {
		SubLObject end_var;
		SubLObject argnum;
		SubLObject arg1;
		SubLObject arg2;
		SubLObject goodP;
		SubLObject deck_type;
		SubLObject recur_deck;
		SubLObject node_and_predicate_mode;
		SubLObject _prev_bind_0;
		SubLObject tv_var;
		SubLObject _prev_bind_0_$124;
		SubLObject _prev_bind_2;
		SubLObject pcase_var;
		SubLObject _prev_bind_0_$125;
		SubLObject _prev_bind_1_$126;
		SubLObject _prev_bind_3;
		SubLObject _prev_bind_4;
		SubLObject _prev_bind_5;
		SubLObject _prev_bind_0_$126;
		SubLObject _prev_bind_1_$127;
		SubLObject _prev_bind_2_$129;
		SubLObject node_var_$130;
		SubLObject predicate_mode;
		SubLObject spec_pred;
		SubLObject _prev_bind_0_$127;
		SubLObject inverse_modeP;
		SubLObject csome_list_var;
		SubLObject tva_pred;
		SubLObject csome_list_var_$132;
		SubLObject transitive_predicate;
		SubLObject pcase_var2;
		SubLObject accessible_modules;
		SubLObject rest;
		SubLObject module_var;
		SubLObject _prev_bind_0_$128;
		SubLObject _prev_bind_1_$128;
		SubLObject node;
		SubLObject d_link;
		SubLObject mt_links;
		SubLObject iteration_state;
		SubLObject mt_$135;
		SubLObject tv_links;
		SubLObject _prev_bind_0_$129;
		SubLObject iteration_state_$137;
		SubLObject tv;
		SubLObject link_nodes;
		SubLObject _prev_bind_0_$130;
		SubLObject sol;
		SubLObject set_contents_var;
		SubLObject basis_object;
		SubLObject state;
		SubLObject node_vars_link_node;
		SubLObject csome_list_var2;
		SubLObject node_vars_link_node2;
		SubLObject new_list;
		SubLObject rest_$139;
		SubLObject generating_fn;
		SubLObject _prev_bind_0_$131;
		SubLObject sol2;
		SubLObject link_nodes2;
		SubLObject set_contents_var2;
		SubLObject basis_object2;
		SubLObject state2;
		SubLObject node_vars_link_node3;
		SubLObject csome_list_var3;
		SubLObject node_vars_link_node4;
		SubLObject _prev_bind_0_$132;
		SubLObject _values;
		for (end_var = number_utilities.f_1X(length(args1)), argnum = NIL, argnum = ONE_INTEGER; (NIL == badP) && (!argnum.numGE(end_var)); badP = makeBoolean(NIL == goodP), argnum = number_utilities.f_1X(argnum)) {
		    arg1 = nth(number_utilities.f_1_(argnum), args1);
		    arg2 = nth(number_utilities.f_1_(argnum), args2);
		    goodP = equal(arg1, arg2);
		    if (NIL == goodP) {
			deck_type = $QUEUE;
			recur_deck = deck.create_deck(deck_type);
			node_and_predicate_mode = NIL;
			_prev_bind_0 = $sbhl_space$.currentBinding(thread);
			try {
			    $sbhl_space$.bind(get_sbhl_marking_space(), thread);
			    try {
				tv_var = NIL;
				_prev_bind_0_$124 = $sbhl_tv$.currentBinding(thread);
				_prev_bind_2 = $relevant_sbhl_tv_function$.currentBinding(thread);
				try {
				    $sbhl_tv$.bind(NIL != tv_var ? tv_var : get_sbhl_true_tv(), thread);
				    $relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : $relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
				    if (((NIL != tv_var) && (NIL != sbhl_object_type_checking_p())) && (NIL == sbhl_true_tv_p(tv_var))) {
					pcase_var = $sbhl_type_error_action$.getDynamicValue(thread);
					if (pcase_var.eql($ERROR)) {
					    sbhl_error(ONE_INTEGER, fact_sheets.$str424$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
					} else if (pcase_var.eql($CERROR)) {
					    sbhl_cerror(ONE_INTEGER, fact_sheets.$$$continue_anyway, fact_sheets.$str424$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
					} else if (pcase_var.eql($WARN)) {
					    Errors.warn(fact_sheets.$str424$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
					} else {
					    Errors.warn(fact_sheets.$str429$_A_is_not_a_valid__sbhl_type_erro, $sbhl_type_error_action$.getDynamicValue(thread));
					    Errors.cerror(fact_sheets.$$$continue_anyway, fact_sheets.$str424$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
					}

				    }
				    _prev_bind_0_$125 = $sbhl_search_module$.currentBinding(thread);
				    _prev_bind_1_$126 = $sbhl_search_module_type$.currentBinding(thread);
				    _prev_bind_3 = $sbhl_add_node_to_result_test$.currentBinding(thread);
				    _prev_bind_4 = $genl_inverse_mode_p$.currentBinding(thread);
				    _prev_bind_5 = $sbhl_module$.currentBinding(thread);
				    try {
					$sbhl_search_module$.bind(get_sbhl_module(fact_sheets.$$genlPreds), thread);
					$sbhl_search_module_type$.bind(get_sbhl_module_type(get_sbhl_module(fact_sheets.$$genlPreds)), thread);
					$sbhl_add_node_to_result_test$.bind(get_sbhl_add_node_to_result_test(get_sbhl_module(fact_sheets.$$genlPreds)), thread);
					$genl_inverse_mode_p$.bind(NIL, thread);
					$sbhl_module$.bind(get_sbhl_module(fact_sheets.$$genlPreds), thread);
					if ((NIL != suspend_sbhl_type_checkingP()) || (NIL != apply_sbhl_module_type_test(pred, get_sbhl_module(UNPROVIDED)))) {
					    _prev_bind_0_$126 = $sbhl_search_direction$.currentBinding(thread);
					    _prev_bind_1_$127 = $sbhl_link_direction$.currentBinding(thread);
					    _prev_bind_2_$129 = $genl_inverse_mode_p$.currentBinding(thread);
					    try {
						$sbhl_search_direction$.bind(get_sbhl_backward_search_direction(), thread);
						$sbhl_link_direction$.bind(sbhl_search_direction_to_link_direction(get_sbhl_backward_search_direction(), get_sbhl_module(fact_sheets.$$genlPreds)), thread);
						$genl_inverse_mode_p$.bind(NIL, thread);
						sbhl_mark_node_marked(pred, UNPROVIDED);
						for (node_and_predicate_mode = list(pred, genl_inverse_mode_p()); (NIL != node_and_predicate_mode) && (NIL == goodP); node_and_predicate_mode = deck.deck_pop(recur_deck)) {
						    node_var_$130 = node_and_predicate_mode.first();
						    predicate_mode = second(node_and_predicate_mode);
						    spec_pred = node_var_$130;
						    _prev_bind_0_$127 = $genl_inverse_mode_p$.currentBinding(thread);
						    try {
							$genl_inverse_mode_p$.bind(predicate_mode, thread);
							inverse_modeP = predicate_mode;
							if (NIL == goodP) {
							    csome_list_var = tva_utilities.get_tva_predicates();
							    tva_pred = NIL;
							    tva_pred = csome_list_var.first();
							    while ((NIL == goodP) && (NIL != csome_list_var)) {
								if (NIL == badP) {
								    csome_list_var_$132 = tva_utilities.tva_gather_transitive_predicates_for_arg(tva_pred, spec_pred, argnum, inverse_modeP, UNPROVIDED);
								    transitive_predicate = NIL;
								    transitive_predicate = csome_list_var_$132.first();
								    while ((NIL == badP) && (NIL != csome_list_var_$132)) {
									pcase_var2 = tva_pred;
									if (pcase_var2.eql(fact_sheets.$$transitiveViaArgInverse)) {
									    goodP = fact_sheets.fact_sheet_transitivity_check(make_binary_formula(transitive_predicate, arg2, arg1), mt);
									} else if (pcase_var2.eql(fact_sheets.$$transitiveViaArg)) {
									    goodP = fact_sheets.fact_sheet_transitivity_check(make_binary_formula(transitive_predicate, arg1, arg2), mt);
									}

									csome_list_var_$132 = csome_list_var_$132.rest();
									transitive_predicate = csome_list_var_$132.first();
								    }
								}
								csome_list_var = csome_list_var.rest();
								tva_pred = csome_list_var.first();
							    }
							}
							accessible_modules = get_sbhl_accessible_modules(get_sbhl_module(fact_sheets.$$genlPreds));
							for (rest = NIL, rest = accessible_modules; (NIL == goodP) && (NIL != rest); rest = rest.rest()) {
							    module_var = rest.first();
							    _prev_bind_0_$128 = $sbhl_module$.currentBinding(thread);
							    _prev_bind_1_$128 = $genl_inverse_mode_p$.currentBinding(thread);
							    try {
								$sbhl_module$.bind(module_var, thread);
								$genl_inverse_mode_p$.bind(NIL != flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == $genl_inverse_mode_p$.getDynamicValue(thread)) : $genl_inverse_mode_p$.getDynamicValue(thread), thread);
								node = function_terms.naut_to_nart(node_var_$130);
								if (NIL != sbhl_node_object_p(node)) {
								    d_link = get_sbhl_graph_link(node, get_sbhl_module(UNPROVIDED));
								    if (NIL != d_link) {
									mt_links = get_sbhl_mt_links(d_link, get_sbhl_link_direction(), get_sbhl_module(UNPROVIDED));
									if (NIL != mt_links) {
									    for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); (NIL == goodP)
										    && (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
										thread.resetMultipleValues();
										mt_$135 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
										tv_links = thread.secondMultipleValue();
										thread.resetMultipleValues();
										if (NIL != mt_relevance_macros.relevant_mtP(mt_$135)) {
										    _prev_bind_0_$129 = $sbhl_link_mt$.currentBinding(thread);
										    try {
											$sbhl_link_mt$.bind(mt_$135, thread);
											for (iteration_state_$137 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); (NIL == goodP)
												&& (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$137)); iteration_state_$137 = dictionary_contents.do_dictionary_contents_next(iteration_state_$137)) {
											    thread.resetMultipleValues();
											    tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$137);
											    link_nodes = thread.secondMultipleValue();
											    thread.resetMultipleValues();
											    if (NIL != relevant_sbhl_tvP(tv)) {
												_prev_bind_0_$130 = $sbhl_link_tv$.currentBinding(thread);
												try {
												    $sbhl_link_tv$.bind(tv, thread);
												    sol = link_nodes;
												    if (NIL != set.set_p(sol)) {
													set_contents_var = set.do_set_internal(sol);
													for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == goodP)
														&& (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
													    node_vars_link_node = set_contents.do_set_contents_next(basis_object, state);
													    if ((NIL != set_contents.do_set_contents_element_validP(state, node_vars_link_node)) && (NIL == sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED))) {
														sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
														deck.deck_push(list(node_vars_link_node, genl_inverse_mode_p()), recur_deck);
													    }
													}
												    } else if (sol.isList()) {
													if (NIL == goodP) {
													    csome_list_var2 = sol;
													    node_vars_link_node2 = NIL;
													    node_vars_link_node2 = csome_list_var2.first();
													    while ((NIL == goodP) && (NIL != csome_list_var2)) {
														if (NIL == sbhl_search_path_termination_p(node_vars_link_node2, UNPROVIDED)) {
														    sbhl_mark_node_marked(node_vars_link_node2, UNPROVIDED);
														    deck.deck_push(list(node_vars_link_node2, genl_inverse_mode_p()), recur_deck);
														}
														csome_list_var2 = csome_list_var2.rest();
														node_vars_link_node2 = csome_list_var2.first();
													    }
													}
												    } else {
													Errors.error(fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol);
												    }

												} finally {
												    $sbhl_link_tv$.rebind(_prev_bind_0_$130, thread);
												}
											    }
											}
											dictionary_contents.do_dictionary_contents_finalize(iteration_state_$137);
										    } finally {
											$sbhl_link_mt$.rebind(_prev_bind_0_$129, thread);
										    }
										}
									    }
									    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
									}
								    } else {
									sbhl_error(FIVE_INTEGER, fact_sheets.$str434$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
								    }
								} else if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
								    new_list = (NIL != sbhl_randomize_lists_p()) ? list_utilities.randomize_list(get_sbhl_module_relevant_naut_link_generators(get_sbhl_link_direction(), $sbhl_tv$.getDynamicValue(thread), get_sbhl_module(UNPROVIDED)))
									    : get_sbhl_module_relevant_naut_link_generators(get_sbhl_link_direction(), $sbhl_tv$.getDynamicValue(thread), get_sbhl_module(UNPROVIDED));
								    for (rest_$139 = NIL, rest_$139 = new_list; (NIL == goodP) && (NIL != rest_$139); rest_$139 = rest_$139.rest()) {
									generating_fn = rest_$139.first();
									_prev_bind_0_$131 = $sbhl_link_generator$.currentBinding(thread);
									try {
									    $sbhl_link_generator$.bind(generating_fn, thread);
									    link_nodes2 = sol2 = funcall(generating_fn, node);
									    if (NIL != set.set_p(sol2)) {
										set_contents_var2 = set.do_set_internal(sol2);
										for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); (NIL == goodP)
											&& (NIL == set_contents.do_set_contents_doneP(basis_object2, state2)); state2 = set_contents.do_set_contents_update_state(state2)) {
										    node_vars_link_node3 = set_contents.do_set_contents_next(basis_object2, state2);
										    if ((NIL != set_contents.do_set_contents_element_validP(state2, node_vars_link_node3)) && (NIL == sbhl_search_path_termination_p(node_vars_link_node3, UNPROVIDED))) {
											sbhl_mark_node_marked(node_vars_link_node3, UNPROVIDED);
											deck.deck_push(list(node_vars_link_node3, genl_inverse_mode_p()), recur_deck);
										    }
										}
									    } else if (sol2.isList()) {
										if (NIL == goodP) {
										    csome_list_var3 = sol2;
										    node_vars_link_node4 = NIL;
										    node_vars_link_node4 = csome_list_var3.first();
										    while ((NIL == goodP) && (NIL != csome_list_var3)) {
											if (NIL == sbhl_search_path_termination_p(node_vars_link_node4, UNPROVIDED)) {
											    sbhl_mark_node_marked(node_vars_link_node4, UNPROVIDED);
											    deck.deck_push(list(node_vars_link_node4, genl_inverse_mode_p()), recur_deck);
											}
											csome_list_var3 = csome_list_var3.rest();
											node_vars_link_node4 = csome_list_var3.first();
										    }
										}
									    } else {
										Errors.error(fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol2);
									    }

									} finally {
									    $sbhl_link_generator$.rebind(_prev_bind_0_$131, thread);
									}
								    }
								}

							    } finally {
								$genl_inverse_mode_p$.rebind(_prev_bind_1_$128, thread);
								$sbhl_module$.rebind(_prev_bind_0_$128, thread);
							    }
							}
						    } finally {
							$genl_inverse_mode_p$.rebind(_prev_bind_0_$127, thread);
						    }
						}
					    } finally {
						$genl_inverse_mode_p$.rebind(_prev_bind_2_$129, thread);
						$sbhl_link_direction$.rebind(_prev_bind_1_$127, thread);
						$sbhl_search_direction$.rebind(_prev_bind_0_$126, thread);
					    }
					} else {
					    sbhl_warn(TWO_INTEGER, fact_sheets.$str435$Node__a_does_not_pass_sbhl_type_t, pred, get_sbhl_type_test(get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
					}
				    } finally {
					$sbhl_module$.rebind(_prev_bind_5, thread);
					$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
					$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
					$sbhl_search_module_type$.rebind(_prev_bind_1_$126, thread);
					$sbhl_search_module$.rebind(_prev_bind_0_$125, thread);
				    }
				} finally {
				    $relevant_sbhl_tv_function$.rebind(_prev_bind_2, thread);
				    $sbhl_tv$.rebind(_prev_bind_0_$124, thread);
				}
			    } finally {
				_prev_bind_0_$132 = $is_thread_performing_cleanupP$.currentBinding(thread);
				try {
				    $is_thread_performing_cleanupP$.bind(T, thread);
				    _values = getValuesAsVector();
				    free_sbhl_marking_space($sbhl_space$.getDynamicValue(thread));
				    restoreValuesFromVector(_values);
				} finally {
				    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$132, thread);
				}
			    }
			} finally {
			    $sbhl_space$.rebind(_prev_bind_0, thread);
			}
		    }
		}
	    }
	    return makeBoolean(NIL == badP);
	}
	return NIL;
    }

    public static final SubLObject clear_fact_sheet_transitivity_check_alt() {
	{
	    SubLObject cs = $fact_sheet_transitivity_check_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_fact_sheet_transitivity_check() {
	final SubLObject cs = fact_sheets.$fact_sheet_transitivity_check_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_fact_sheet_transitivity_check_alt(SubLObject sentence, SubLObject mt) {
	return memoization_state.caching_state_remove_function_results_with_args($fact_sheet_transitivity_check_caching_state$.getGlobalValue(), list(sentence, mt), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_fact_sheet_transitivity_check(final SubLObject sentence, final SubLObject mt) {
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_transitivity_check_caching_state$.getGlobalValue(), list(sentence, mt), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_transitivity_check_internal_alt(SubLObject sentence, SubLObject mt) {
	if (NIL != tva_inference.tva_unify_from_cache(sentence, mt, UNPROVIDED, UNPROVIDED)) {
	    return T;
	} else {
	    if (((NIL != sbhl_module_utilities.sbhl_predicate_p(cycl_utilities.formula_arg0(sentence))) && (NIL != cycl_grammar.cycl_atomic_sentence_p(sentence))) && (NIL != backward.removal_ask(sentence, mt, UNPROVIDED, UNPROVIDED))) {
		return T;
	    } else {
		return NIL;
	    }
	}
    }

    public static SubLObject fact_sheet_transitivity_check_internal(final SubLObject sentence, final SubLObject mt) {
	if (NIL != tva_inference.tva_unify_from_cache(sentence, mt, UNPROVIDED, UNPROVIDED)) {
	    return T;
	}
	if ((NIL != cycl_grammar.cycl_atomic_sentence_p(sentence)) && (NIL != backward.removal_ask(sentence, mt, UNPROVIDED, UNPROVIDED))) {
	    return T;
	}
	return NIL;
    }

    public static final SubLObject fact_sheet_transitivity_check_alt(SubLObject sentence, SubLObject mt) {
	{
	    SubLObject caching_state = $fact_sheet_transitivity_check_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(FACT_SHEET_TRANSITIVITY_CHECK, $fact_sheet_transitivity_check_caching_state$, NIL, EQUAL, TWO_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject sxhash = memoization_state.sxhash_calc_2(sentence, mt);
		SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
		if (collisions != $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    {
			SubLObject cdolist_list_var = collisions;
			SubLObject collision = NIL;
			for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), collision = cdolist_list_var.first()) {
			    {
				SubLObject cached_args = collision.first();
				SubLObject results2 = second(collision);
				if (sentence.equal(cached_args.first())) {
				    cached_args = cached_args.rest();
				    if (((NIL != cached_args) && (NIL == cached_args.rest())) && mt.equal(cached_args.first())) {
					return memoization_state.caching_results(results2);
				    }
				}
			    }
			}
		    }
		}
		{
		    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_transitivity_check_internal(sentence, mt)));
		    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(sentence, mt));
		    return memoization_state.caching_results(results);
		}
	    }
	}
    }

    public static SubLObject fact_sheet_transitivity_check(final SubLObject sentence, final SubLObject mt) {
	SubLObject caching_state = fact_sheets.$fact_sheet_transitivity_check_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.FACT_SHEET_TRANSITIVITY_CHECK, fact_sheets.$fact_sheet_transitivity_check_caching_state$, fact_sheets.$int$1024, EQUAL, TWO_INTEGER, ZERO_INTEGER);
	}
	final SubLObject sxhash = memoization_state.sxhash_calc_2(sentence, mt);
	final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
	if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    SubLObject cdolist_list_var = collisions;
	    SubLObject collision = NIL;
	    collision = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cached_args = collision.first();
		final SubLObject results2 = second(collision);
		if (sentence.equal(cached_args.first())) {
		    cached_args = cached_args.rest();
		    if (((NIL != cached_args) && (NIL == cached_args.rest())) && mt.equal(cached_args.first())) {
			return memoization_state.caching_results(results2);
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		collision = cdolist_list_var.first();
	    }
	}
	final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_transitivity_check_internal(sentence, mt)));
	memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(sentence, mt));
	return memoization_state.caching_results(results3);
    }

    /**
     *
     *
     * @param SENTENCES;
     * 		association list PRED -> LISTP of sentences.
     */
    @LispMethod(comment = "@param SENTENCES;\r\n\t\tassociation list PRED -> LISTP of sentences.")
    public static final SubLObject add_thcl_fact_sheet_sentences_alt(SubLObject v_term, SubLObject query_mt, SubLObject sentences) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject misc_sentences = NIL;
		SubLObject time = NIL;
		SubLObject time_var = get_internal_real_time();
		{
		    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.fact_sheets.thcl_sentences_for_term_fact_sheet(v_term, query_mt);
		    SubLObject gaf = NIL;
		    for (gaf = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), gaf = cdolist_list_var.first()) {
			{
			    SubLObject gaf_formula = assertions_high.gaf_formula(gaf);
			    SubLObject skip_sentenceP = makeBoolean((NIL != set.set_p(com.cyc.cycjava.cycl.fact_sheets.omitted_fact_sheet_sentences()))
				    && ((NIL != set.set_memberP(gaf, com.cyc.cycjava.cycl.fact_sheets.omitted_fact_sheet_sentences())) || (NIL != set.set_memberP(gaf_formula, com.cyc.cycjava.cycl.fact_sheets.omitted_fact_sheet_sentences()))));
			    SubLObject rest = NIL;
			    for (rest = sentences; !((NIL != skip_sentenceP) || (NIL == rest)); rest = rest.rest()) {
				{
				    SubLObject cons = rest.first();
				    SubLObject datum = cons;
				    SubLObject current = datum;
				    SubLObject key = NIL;
				    SubLObject pred_sentences = NIL;
				    destructuring_bind_must_consp(current, datum, $list_alt586);
				    key = current.first();
				    current = current.rest();
				    pred_sentences = current;
				    if ((NIL != subl_promotions.memberP(gaf, pred_sentences, UNPROVIDED, UNPROVIDED)) || (NIL != subl_promotions.memberP(gaf_formula, pred_sentences, symbol_function(EQUAL), UNPROVIDED))) {
					skip_sentenceP = T;
				    }
				}
			    }
			    if (NIL == skip_sentenceP) {
				misc_sentences = cons(gaf, misc_sentences);
			    }
			}
		    }
		}
		if (NIL != misc_sentences) {
		    sentences = list_utilities.alist_enter(sentences, $$$Miscellaneous, list_utilities.delete_subsumed_items(misc_sentences, $sym568$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_, UNPROVIDED), symbol_function(EQUAL));
		}
		time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
		{
		    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
		    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
			format(stream, $str_alt588$Added__S_THCL_sentences_in__5F_se, length(misc_sentences), time);
			force_output(stream);
		    }
		}
	    }
	    return sentences;
	}
    }

    /**
     *
     *
     * @param SENTENCES;
     * 		association list PRED -> LISTP of sentences.
     */
    @LispMethod(comment = "@param SENTENCES;\r\n\t\tassociation list PRED -> LISTP of sentences.")
    public static SubLObject add_thcl_fact_sheet_sentences(final SubLObject v_term, final SubLObject query_mt, SubLObject sentences) {
	SubLObject misc_sentences = NIL;
	SubLObject time = NIL;
	final SubLObject time_var = get_internal_real_time();
	SubLObject cdolist_list_var = fact_sheets.thcl_sentences_for_term_fact_sheet(v_term, query_mt);
	SubLObject gaf = NIL;
	gaf = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    final SubLObject gaf_formula = assertions_high.gaf_formula(gaf);
	    SubLObject skip_sentenceP;
	    SubLObject rest;
	    SubLObject cons;
	    SubLObject current;
	    SubLObject datum;
	    SubLObject key;
	    SubLObject pred_sentences;
	    for (skip_sentenceP = makeBoolean((NIL != set.set_p(fact_sheets.omitted_fact_sheet_sentences()))
		    && ((NIL != set.set_memberP(gaf, fact_sheets.omitted_fact_sheet_sentences())) || (NIL != set.set_memberP(gaf_formula, fact_sheets.omitted_fact_sheet_sentences())))), rest = NIL, rest = sentences; (NIL == skip_sentenceP) && (NIL != rest); rest = rest.rest()) {
		cons = rest.first();
		datum = current = cons;
		key = NIL;
		pred_sentences = NIL;
		destructuring_bind_must_consp(current, datum, fact_sheets.$list438);
		key = current.first();
		current = pred_sentences = current.rest();
		if ((NIL != subl_promotions.memberP(gaf, pred_sentences, UNPROVIDED, UNPROVIDED)) || (NIL != subl_promotions.memberP(gaf_formula, pred_sentences, symbol_function(EQUAL), UNPROVIDED))) {
		    skip_sentenceP = T;
		}
	    }
	    if (NIL == skip_sentenceP) {
		misc_sentences = cons(gaf, misc_sentences);
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    gaf = cdolist_list_var.first();
	}
	if (NIL != misc_sentences) {
	    misc_sentences = list_utilities.delete_subsumed_items(misc_sentences, fact_sheets.$sym398$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_, UNPROVIDED);
	    sentences = list_utilities.alist_enter(sentences, fact_sheets.$fact_sheet_thcl_section_category$.getGlobalValue(), misc_sentences, symbol_function(EQUAL));
	}
	time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
	final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
	if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
	    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
	    format(stream, fact_sheets.$str439$Added__D_THCL_sentence__P_in__5F_, length(misc_sentences), time);
	    force_output(stream);
	}
	return sentences;
    }

    public static final SubLObject thcl_sentences_for_term_fact_sheet_alt(SubLObject v_term, SubLObject domain_mt) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject misc_sentences = NIL;
		SubLObject query_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_anytime_mt(domain_mt);
		SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(domain_mt);
		{
		    SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
		    SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
		    SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
		    SubLObject _prev_bind_3 = $thcl_forts_by_fiat$.currentBinding(thread);
		    try {
			mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
			mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
			mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
			$thcl_forts_by_fiat$.bind(cons(v_term, $thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
			{
			    SubLObject state = memoization_state.possibly_new_memoization_state();
			    SubLObject local_state = state;
			    {
				SubLObject _prev_bind_0_228 = memoization_state.$memoization_state$.currentBinding(thread);
				try {
				    memoization_state.$memoization_state$.bind(local_state, thread);
				    {
					SubLObject original_memoization_process = NIL;
					if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
					    original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
					    {
						SubLObject current_proc = current_process();
						if (NIL == original_memoization_process) {
						    memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
						} else {
						    if (original_memoization_process != current_proc) {
							Errors.error($str_alt424$Invalid_attempt_to_reuse_memoizat);
						    }
						}
					    }
					}
					try {
					    {
						SubLObject cdolist_list_var = com.cyc.cycjava.cycl.fact_sheets.thcl_preds_for_term_fact_sheet(v_term, UNPROVIDED);
						SubLObject item = NIL;
						for (item = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), item = cdolist_list_var.first()) {
						    {
							SubLObject datum = item;
							SubLObject current = datum;
							SubLObject pred = NIL;
							SubLObject argnum = NIL;
							destructuring_bind_must_consp(current, datum, $list_alt589);
							pred = current.first();
							current = current.rest();
							destructuring_bind_must_consp(current, datum, $list_alt589);
							argnum = current.first();
							current = current.rest();
							if (NIL == current) {
							    {
								SubLObject pred_var = pred;
								if (NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(v_term, argnum, pred_var)) {
								    {
									SubLObject iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(v_term, argnum, pred_var);
									SubLObject done_var = NIL;
									SubLObject token_var = NIL;
									while (NIL == done_var) {
									    {
										SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
										SubLObject valid = makeBoolean(token_var != final_index_spec);
										if (NIL != valid) {
										    {
											SubLObject final_index_iterator = NIL;
											try {
											    final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, $GAF, $TRUE, NIL);
											    {
												SubLObject done_var_229 = NIL;
												SubLObject token_var_230 = NIL;
												while (NIL == done_var_229) {
												    {
													SubLObject gaf = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_230);
													SubLObject valid_231 = makeBoolean(token_var_230 != gaf);
													if (NIL != valid_231) {
													    if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_summary_sentence_passes_data_gathering_time_filterP(gaf, v_term, query_mt)) {
														misc_sentences = cons(gaf, misc_sentences);
													    }
													}
													done_var_229 = makeBoolean(NIL == valid_231);
												    }
												}
											    }
											} finally {
											    {
												SubLObject _prev_bind_0_232 = $is_thread_performing_cleanupP$.currentBinding(thread);
												try {
												    $is_thread_performing_cleanupP$.bind(T, thread);
												    if (NIL != final_index_iterator) {
													kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
												    }
												} finally {
												    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_232, thread);
												}
											    }
											}
										    }
										}
										done_var = makeBoolean(NIL == valid);
									    }
									}
								    }
								}
							    }
							} else {
							    cdestructuring_bind_error(datum, $list_alt589);
							}
						    }
						}
					    }
					} finally {
					    {
						SubLObject _prev_bind_0_233 = $is_thread_performing_cleanupP$.currentBinding(thread);
						try {
						    $is_thread_performing_cleanupP$.bind(T, thread);
						    if ((NIL != local_state) && (NIL == original_memoization_process)) {
							memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
						    }
						} finally {
						    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_233, thread);
						}
					    }
					}
				    }
				} finally {
				    memoization_state.$memoization_state$.rebind(_prev_bind_0_228, thread);
				}
			    }
			}
		    } finally {
			$thcl_forts_by_fiat$.rebind(_prev_bind_3, thread);
			mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
			mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
			mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
		    }
		}
		return misc_sentences;
	    }
	}
    }

    public static SubLObject thcl_sentences_for_term_fact_sheet(final SubLObject v_term, SubLObject domain_mt) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject misc_sentences = NIL;
	final SubLObject query_mt = fact_sheets.fact_sheet_anytime_mt(domain_mt);
	final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(domain_mt);
	final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
	final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
	final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
	final SubLObject _prev_bind_4 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
	try {
	    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
	    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
	    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
	    thcl.$thcl_forts_by_fiat$.bind(cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
	    final SubLObject local_state;
	    final SubLObject state = local_state = memoization_state.possibly_new_memoization_state();
	    final SubLObject _prev_bind_0_$142 = memoization_state.$memoization_state$.currentBinding(thread);
	    try {
		memoization_state.$memoization_state$.bind(local_state, thread);
		final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
		try {
		    SubLObject cdolist_list_var = fact_sheets.thcl_preds_for_term_fact_sheet(v_term, UNPROVIDED);
		    SubLObject item = NIL;
		    item = cdolist_list_var.first();
		    while (NIL != cdolist_list_var) {
			SubLObject current;
			final SubLObject datum = current = item;
			SubLObject pred = NIL;
			SubLObject argnum = NIL;
			destructuring_bind_must_consp(current, datum, fact_sheets.$list440);
			pred = current.first();
			current = argnum = current.rest();
			final SubLObject pred_var = pred;
			if (NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(v_term, argnum, pred_var)) {
			    final SubLObject iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(v_term, argnum, pred_var);
			    SubLObject done_var = NIL;
			    final SubLObject token_var = NIL;
			    while (NIL == done_var) {
				final SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
				final SubLObject valid = makeBoolean(!token_var.eql(final_index_spec));
				if (NIL != valid) {
				    SubLObject final_index_iterator = NIL;
				    try {
					final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, $GAF, $TRUE, NIL);
					SubLObject done_var_$143 = NIL;
					final SubLObject token_var_$144 = NIL;
					while (NIL == done_var_$143) {
					    final SubLObject gaf = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_$144);
					    final SubLObject valid_$145 = makeBoolean(!token_var_$144.eql(gaf));
					    if ((NIL != valid_$145) && (NIL != fact_sheets.fact_sheet_summary_sentence_passes_data_gathering_time_filterP(gaf, v_term, query_mt))) {
						misc_sentences = cons(gaf, misc_sentences);
					    }
					    done_var_$143 = makeBoolean(NIL == valid_$145);
					}
				    } finally {
					final SubLObject _prev_bind_0_$143 = $is_thread_performing_cleanupP$.currentBinding(thread);
					try {
					    $is_thread_performing_cleanupP$.bind(T, thread);
					    final SubLObject _values = getValuesAsVector();
					    if (NIL != final_index_iterator) {
						kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
					    }
					    restoreValuesFromVector(_values);
					} finally {
					    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$143, thread);
					}
				    }
				}
				done_var = makeBoolean(NIL == valid);
			    }
			}
			cdolist_list_var = cdolist_list_var.rest();
			item = cdolist_list_var.first();
		    }
		} finally {
		    final SubLObject _prev_bind_0_$144 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values2 = getValuesAsVector();
			memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
			restoreValuesFromVector(_values2);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$144, thread);
		    }
		}
	    } finally {
		memoization_state.$memoization_state$.rebind(_prev_bind_0_$142, thread);
	    }
	} finally {
	    thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_4, thread);
	    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
	    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
	    mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
	}
	return misc_sentences;
    }

    public static final SubLObject thcl_preds_for_term_fact_sheet_alt(SubLObject v_term, SubLObject cutoff) {
	if (cutoff == UNPROVIDED) {
	    cutoff = SIX_INTEGER;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject all_preds = NIL;
		SubLObject index = term_index(v_term);
		SubLObject gaf_arg_index = (NIL != intermediate_index_p(index)) ? ((SubLObject) (intermediate_index_lookup(index, $GAF_ARG))) : NIL;
		if (NIL != intermediate_index_p(gaf_arg_index)) {
		    {
			SubLObject index_234 = gaf_arg_index;
			if (NIL != do_intermediate_index_valid_index_p(index_234)) {
			    {
				SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(intermediate_index_dictionary(index_234)));
				while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
				    thread.resetMultipleValues();
				    {
					SubLObject argnum = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
					SubLObject pred_index = thread.secondMultipleValue();
					thread.resetMultipleValues();
					if (NIL != intermediate_index_p(pred_index)) {
					    {
						SubLObject index_235 = pred_index;
						if (NIL != do_intermediate_index_valid_index_p(index_235)) {
						    {
							SubLObject iteration_state_236 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(intermediate_index_dictionary(index_235)));
							while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_236)) {
							    thread.resetMultipleValues();
							    {
								SubLObject pred = dictionary_contents.do_dictionary_contents_key_value(iteration_state_236);
								SubLObject mt_index = thread.secondMultipleValue();
								thread.resetMultipleValues();
								{
								    SubLObject item_var = list(pred, argnum);
								    if (NIL == member(item_var, all_preds, symbol_function(EQL), symbol_function(IDENTITY))) {
									all_preds = cons(item_var, all_preds);
								    }
								}
								iteration_state_236 = dictionary_contents.do_dictionary_contents_next(iteration_state_236);
							    }
							}
							dictionary_contents.do_dictionary_contents_finalize(iteration_state_236);
						    }
						}
					    }
					}
					iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
				    }
				}
				dictionary_contents.do_dictionary_contents_finalize(iteration_state);
			    }
			}
		    }
		} else {
		    if (NIL != simple_index_p(index)) {
			{
			    SubLObject seen = set.new_set(symbol_function(EQUAL), UNPROVIDED);
			    SubLObject cdolist_list_var = do_simple_index_term_assertion_list(v_term);
			    SubLObject as = NIL;
			    for (as = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), as = cdolist_list_var.first()) {
				if (NIL != assertions_high.gaf_assertionP(as)) {
				    {
					SubLObject terms = cycl_utilities.formula_terms(as, UNPROVIDED);
					SubLObject argnum = position(v_term, terms, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
					SubLObject pred = terms.first();
					SubLObject key = list(pred, argnum);
					if (NIL == set.set_memberP(key, seen)) {
					    set.set_add(key, seen);
					    {
						SubLObject item_var = key;
						if (NIL == member(item_var, all_preds, symbol_function(EQL), symbol_function(IDENTITY))) {
						    all_preds = cons(item_var, all_preds);
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
		{
		    SubLObject thcl_preds = NIL;
		    SubLObject cdolist_list_var = all_preds;
		    SubLObject item = NIL;
		    for (item = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), item = cdolist_list_var.first()) {
			{
			    SubLObject datum = item;
			    SubLObject current = datum;
			    SubLObject pred = NIL;
			    SubLObject argnum = NIL;
			    destructuring_bind_must_consp(current, datum, $list_alt589);
			    pred = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt589);
			    argnum = current.first();
			    current = current.rest();
			    if (NIL == current) {
				if (kb_indexing.num_gaf_arg_index(v_term, argnum, pred, UNPROVIDED).numL(cutoff)) {
				    thcl_preds = cons(item, thcl_preds);
				}
			    } else {
				cdestructuring_bind_error(datum, $list_alt589);
			    }
			}
		    }
		    return thcl_preds;
		}
	    }
	}
    }

    public static SubLObject thcl_preds_for_term_fact_sheet(final SubLObject v_term, SubLObject cutoff) {
	if (cutoff == UNPROVIDED) {
	    cutoff = SIX_INTEGER;
	}
	SubLObject thcl_preds = NIL;
	final SubLObject set_var = fact_sheets.pred_argnum_combos_for_term(v_term);
	final SubLObject set_contents_var = set.do_set_internal(set_var);
	SubLObject basis_object;
	SubLObject state;
	SubLObject item;
	SubLObject current;
	SubLObject datum;
	SubLObject pred;
	SubLObject argnum;
	for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
		state); state = set_contents.do_set_contents_update_state(state)) {
	    item = set_contents.do_set_contents_next(basis_object, state);
	    if (NIL != set_contents.do_set_contents_element_validP(state, item)) {
		datum = current = item;
		pred = NIL;
		argnum = NIL;
		destructuring_bind_must_consp(current, datum, fact_sheets.$list440);
		pred = current.first();
		current = argnum = current.rest();
		if (kb_indexing.num_gaf_arg_index(v_term, argnum, pred, UNPROVIDED).numL(cutoff)) {
		    thcl_preds = cons(item, thcl_preds);
		}
	    }
	}
	return thcl_preds;
    }

    public static final SubLObject fact_sheet_queries_browsableP_alt() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    return $fact_sheet_queries_browsableP$.getDynamicValue(thread);
	}
    }

    public static SubLObject fact_sheet_queries_browsableP() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	return fact_sheets.$fact_sheet_queries_browsableP$.getDynamicValue(thread);
    }

    public static final SubLObject new_fact_sheet_query_daemon_alt() {
	{
	    SubLObject spec = make_vector(TWO_INTEGER, NIL);
	    SubLObject daemon = process_utilities.make_cyc_server_process_with_args($$$Fact_Sheet_Query_Daemon, FACT_SHEET_QUERY_DAEMON_RUN, list(spec));
	    set_aref(spec, ONE_INTEGER, daemon);
	    stacks.stack_push(spec, $fact_sheet_query_spec_pool$.getGlobalValue());
	    return daemon;
	}
    }

    public static SubLObject new_fact_sheet_query_daemon() {
	final SubLObject spec = make_vector(TWO_INTEGER, NIL);
	final SubLObject daemon = process_utilities.make_cyc_server_process_with_args(fact_sheets.$$$Fact_Sheet_Query_Daemon, fact_sheets.FACT_SHEET_QUERY_DAEMON_RUN, list(spec));
	set_aref(spec, ONE_INTEGER, daemon);
	stacks.stack_push(spec, fact_sheets.$fact_sheet_query_spec_pool$.getGlobalValue());
	return daemon;
    }

    public static final SubLObject fact_sheet_query_daemon_run_alt(SubLObject spec) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    while (true) {
		if (NIL == aref(spec, ZERO_INTEGER)) {
		    sleep($fact_sheet_query_polling_interval$.getGlobalValue());
		} else {
		    {
			SubLObject error_message = NIL;
			SubLObject sentence = NIL;
			SubLObject mt = NIL;
			SubLObject v_properties = NIL;
			SubLObject focal_term = NIL;
			try {
			    {
				SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
				try {
				    Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
				    try {
					{
					    SubLObject datum_evaluated_var = aref(spec, ZERO_INTEGER);
					    sentence = datum_evaluated_var.first();
					    mt = cadr(datum_evaluated_var);
					    v_properties = cddr(datum_evaluated_var).first();
					    focal_term = cadr(cddr(datum_evaluated_var));
					}
					{
					    SubLObject _prev_bind_0_237 = $fact_sheet_focal_term$.currentBinding(thread);
					    SubLObject _prev_bind_1 = $thcl_forts_by_fiat$.currentBinding(thread);
					    try {
						$fact_sheet_focal_term$.bind(focal_term, thread);
						$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(focal_term) ? ((SubLObject) (cons(focal_term, $thcl_forts_by_fiat$.getDynamicValue(thread)))) : $thcl_forts_by_fiat$.getDynamicValue(thread), thread);
						{
						    SubLObject static_properties = inference_datastructures_enumerated_types.extract_inference_static_properties(v_properties);
						    SubLObject problem_store_privateP = sublisp_null(inference_datastructures_enumerated_types.inference_properties_problem_store(static_properties));
						    SubLObject dynamic_properties = inference_datastructures_enumerated_types.extract_inference_dynamic_properties(v_properties);
						    SubLObject inference = inference_kernel.new_continuable_inference(sentence, mt, static_properties);
						    {
							SubLObject _prev_bind_0_238 = $perform_equals_unification$.currentBinding(thread);
							try {
							    $perform_equals_unification$.bind(NIL, thread);
							    set_aref(spec, ZERO_INTEGER, inference);
							    inference_kernel.continue_inference(inference, dynamic_properties);
							    while (NIL != aref(spec, ZERO_INTEGER)) {
								sleep($fact_sheet_query_polling_interval$.getGlobalValue());
							    }
							    if ((NIL != inference_datastructures_inference.valid_inference_p(inference)) && (NIL == inference_datastructures_inference.inference_browsableP(inference))) {
								if (NIL != problem_store_privateP) {
								    inference_datastructures_problem_store.destroy_problem_store(inference_datastructures_inference.inference_problem_store(inference));
								} else {
								    inference_datastructures_inference.destroy_inference(inference);
								}
							    }
							    stacks.stack_push(spec, $fact_sheet_query_spec_pool$.getGlobalValue());
							} finally {
							    $perform_equals_unification$.rebind(_prev_bind_0_238, thread);
							}
						    }
						}
					    } finally {
						$thcl_forts_by_fiat$.rebind(_prev_bind_1, thread);
						$fact_sheet_focal_term$.rebind(_prev_bind_0_237, thread);
					    }
					}
				    } catch (Throwable catch_var) {
					Errors.handleThrowable(catch_var, NIL);
				    }
				} finally {
				    Errors.$error_handler$.rebind(_prev_bind_0, thread);
				}
			    }
			} catch (Throwable ccatch_env_var) {
			    error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
			}
			if (error_message.isString()) {
			    {
				SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
				if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
				    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
				    format(stream, $str_alt594$Fact_Sheet_Query_Daemon_caught_er, new SubLObject[] { sentence, mt, v_properties, focal_term, error_message });
				    force_output(stream);
				}
			    }
			}
		    }
		}
	    }
	}
    }

    public static SubLObject fact_sheet_query_daemon_run(final SubLObject spec) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	while (true) {
	    if (NIL == aref(spec, ZERO_INTEGER)) {
		sleep(fact_sheets.$fact_sheet_query_polling_interval$.getGlobalValue());
	    } else {
		SubLObject error_message = NIL;
		SubLObject sentence = NIL;
		SubLObject mt = NIL;
		SubLObject v_properties = NIL;
		SubLObject focal_term = NIL;
		try {
		    thread.throwStack.push($catch_error_message_target$.getGlobalValue());
		    final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
		    try {
			Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
			try {
			    final SubLObject datum_evaluated_var = aref(spec, ZERO_INTEGER);
			    sentence = datum_evaluated_var.first();
			    mt = cadr(datum_evaluated_var);
			    v_properties = cddr(datum_evaluated_var).first();
			    focal_term = cadr(cddr(datum_evaluated_var));
			    final SubLObject _prev_bind_0_$148 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
			    final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
			    try {
				fact_sheets.$fact_sheet_focal_term$.bind(focal_term, thread);
				thcl.$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(focal_term) ? cons(focal_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread), thread);
				final SubLObject static_properties = extract_inference_static_properties(v_properties);
				final SubLObject problem_store_privateP = sublisp_null(inference_properties_problem_store(static_properties));
				final SubLObject dynamic_properties = extract_inference_dynamic_properties(v_properties);
				final SubLObject inference = inference_kernel.new_continuable_inference(sentence, mt, static_properties);
				final SubLObject _prev_bind_0_$149 = $perform_equals_unification$.currentBinding(thread);
				try {
				    $perform_equals_unification$.bind(NIL, thread);
				    set_aref(spec, ZERO_INTEGER, inference);
				    inference_kernel.continue_inference(inference, dynamic_properties);
				    while (NIL != aref(spec, ZERO_INTEGER)) {
					sleep(fact_sheets.$fact_sheet_query_polling_interval$.getGlobalValue());
				    }
				    if ((NIL != valid_inference_p(inference)) && (NIL == inference_browsableP(inference))) {
					if (NIL != problem_store_privateP) {
					    destroy_problem_store(inference_problem_store(inference));
					} else {
					    destroy_inference(inference);
					}
				    }
				    stacks.stack_push(spec, fact_sheets.$fact_sheet_query_spec_pool$.getGlobalValue());
				} finally {
				    $perform_equals_unification$.rebind(_prev_bind_0_$149, thread);
				}
			    } finally {
				thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
				fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0_$148, thread);
			    }
			} catch (final Throwable catch_var) {
			    Errors.handleThrowable(catch_var, NIL);
			}
		    } finally {
			Errors.$error_handler$.rebind(_prev_bind_0, thread);
		    }
		} catch (final Throwable ccatch_env_var) {
		    error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
		} finally {
		    thread.throwStack.pop();
		}
		if (!error_message.isString()) {
		    continue;
		}
		final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		if (((T != stream) || (!current_process().eql(subl_promotions.initial_process()))) && ((!stream.isStream()) || (NIL == output_stream_p(stream)))) {
		    continue;
		}
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
		format(stream, fact_sheets.$str444$Fact_Sheet_Query_Daemon_caught_er, new SubLObject[] { sentence, mt, v_properties, focal_term, error_message });
		force_output(stream);
	    }
	}
    }

    /**
     * Signals the daemon that the client is finished with SPEC.
     */
    @LispMethod(comment = "Signals the daemon that the client is finished with SPEC.")
    public static final SubLObject free_fact_sheet_query_spec_alt(SubLObject spec) {
	set_aref(spec, ZERO_INTEGER, NIL);
	return spec;
    }

    @LispMethod(comment = "Signals the daemon that the client is finished with SPEC.")
    public static SubLObject free_fact_sheet_query_spec(final SubLObject spec) {
	set_aref(spec, ZERO_INTEGER, NIL);
	return spec;
    }

    /**
    * Signals the daemon that the client is finished with SPEC.
    */

    public static final SubLObject valid_fact_sheet_query_spec_p_alt(SubLObject spec) {
	return makeBoolean((spec.isVector() && (NIL != list_utilities.lengthE(spec, TWO_INTEGER, UNPROVIDED))) && (NIL != valid_process_p(aref(spec, ONE_INTEGER))));
    }

    public static SubLObject valid_fact_sheet_query_spec_p(final SubLObject spec) {
	return makeBoolean((spec.isVector() && (NIL != list_utilities.lengthE(spec, TWO_INTEGER, UNPROVIDED))) && (NIL != valid_process_p(aref(spec, ONE_INTEGER))));
    }

    public static final SubLObject new_fact_sheet_query_alt(SubLObject sentence, SubLObject mt, SubLObject v_properties, SubLObject hard_timeout) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject spec = stacks.stack_pop($fact_sheet_query_spec_pool$.getGlobalValue());
		SubLObject inference = NIL;
		SubLObject query_time = ZERO_INTEGER;
		SubLObject query_results = NIL;
		SubLObject halt_reason = NIL;
		while (NIL == com.cyc.cycjava.cycl.fact_sheets.valid_fact_sheet_query_spec_p(spec)) {
		    com.cyc.cycjava.cycl.fact_sheets.new_fact_sheet_query_daemon();
		    spec = stacks.stack_pop($fact_sheet_query_spec_pool$.getGlobalValue());
		}
		try {
		    set_aref(spec, ZERO_INTEGER, list(sentence, mt, v_properties, $fact_sheet_focal_term$.getDynamicValue(thread)));
		    while (NIL == inference_datastructures_inference.inference_p(inference)) {
			inference = aref(spec, ZERO_INTEGER);
			if (NIL == inference_datastructures_inference.inference_p(inference)) {
			    sleep($fact_sheet_query_polling_interval$.getGlobalValue());
			}
		    }
		    while (NIL == halt_reason) {
			halt_reason = inference_datastructures_inference.inference_suspend_status(inference);
			if ((NIL == halt_reason) && query_time.numG(hard_timeout)) {
			    halt_reason = $TIMED_OUT;
			}
			if (NIL != halt_reason) {
			    query_results = inference_kernel.inference_result_from_all_answers(inference);
			} else {
			    query_time = add(query_time, $fact_sheet_query_polling_interval$.getGlobalValue());
			    sleep($fact_sheet_query_polling_interval$.getGlobalValue());
			}
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    com.cyc.cycjava.cycl.fact_sheets.free_fact_sheet_query_spec(spec);
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return values(query_results, halt_reason);
	    }
	}
    }

    public static SubLObject new_fact_sheet_query(final SubLObject sentence, final SubLObject mt, final SubLObject v_properties, final SubLObject hard_timeout) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject spec = stacks.stack_pop(fact_sheets.$fact_sheet_query_spec_pool$.getGlobalValue());
	SubLObject inference = NIL;
	SubLObject query_time = ZERO_INTEGER;
	SubLObject query_results = NIL;
	SubLObject halt_reason = NIL;
	while (NIL == fact_sheets.valid_fact_sheet_query_spec_p(spec)) {
	    fact_sheets.new_fact_sheet_query_daemon();
	    spec = stacks.stack_pop(fact_sheets.$fact_sheet_query_spec_pool$.getGlobalValue());
	}
	try {
	    set_aref(spec, ZERO_INTEGER, list(sentence, mt, v_properties, fact_sheets.$fact_sheet_focal_term$.getDynamicValue(thread)));
	    while (NIL == inference_p(inference)) {
		inference = aref(spec, ZERO_INTEGER);
		if (NIL == inference_p(inference)) {
		    sleep(fact_sheets.$fact_sheet_query_polling_interval$.getGlobalValue());
		}
	    }
	    while (NIL == halt_reason) {
		halt_reason = inference_suspend_status(inference);
		if ((NIL == halt_reason) && query_time.numG(hard_timeout)) {
		    halt_reason = $TIMED_OUT;
		}
		if (NIL != halt_reason) {
		    query_results = inference_kernel.inference_result_from_all_answers(inference);
		} else {
		    query_time = add(query_time, fact_sheets.$fact_sheet_query_polling_interval$.getGlobalValue());
		    sleep(fact_sheets.$fact_sheet_query_polling_interval$.getGlobalValue());
		}
	    }
	} finally {
	    final SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values = getValuesAsVector();
		fact_sheets.free_fact_sheet_query_spec(spec);
		restoreValuesFromVector(_values);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
	    }
	}
	return values(query_results, halt_reason);
    }

    public static final SubLObject fact_sheet_sentence_query_alt(SubLObject query_sentence, SubLObject query_mt, SubLObject v_properties) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject soft_timeout = inference_datastructures_enumerated_types.inference_properties_max_time(v_properties);
		SubLObject hard_timeout = (NIL != soft_timeout) ? ((SubLObject) (multiply(TWO_INTEGER, soft_timeout))) : $int$300;
		SubLObject query_results = NIL;
		SubLObject halt_reason = NIL;
		if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_query_soft_timeout_time_reachedP()) {
		    halt_reason = $MAX_TIME;
		} else {
		    thread.resetMultipleValues();
		    {
			SubLObject query_results_239 = com.cyc.cycjava.cycl.fact_sheets.new_fact_sheet_query(query_sentence, query_mt, v_properties, hard_timeout);
			SubLObject halt_reason_240 = thread.secondMultipleValue();
			thread.resetMultipleValues();
			query_results = query_results_239;
			halt_reason = halt_reason_240;
		    }
		}
		if (halt_reason == $MAX_TIME) {
		    {
			SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
			if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
			    format(stream, $str_alt597$Hit_soft_timeout_of__S_seconds_af, new SubLObject[] { soft_timeout, length(query_results), $fact_sheet_focal_term$.getDynamicValue(thread) });
			    force_output(stream);
			}
		    }
		    com.cyc.cycjava.cycl.fact_sheets.note_fact_sheet_query_timeout_in_hourly_stats();
		} else {
		    if (halt_reason == $TIMED_OUT) {
			{
			    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
			    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
				com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
				format(stream, $str_alt598$Hit_hard_timeout_of__S_seconds_af, new SubLObject[] { hard_timeout, length(query_results), $fact_sheet_focal_term$.getDynamicValue(thread) });
				force_output(stream);
			    }
			}
			com.cyc.cycjava.cycl.fact_sheets.note_fact_sheet_query_timeout_in_hourly_stats();
		    }
		}
		return values(query_results, halt_reason);
	    }
	}
    }

    public static SubLObject fact_sheet_sentence_query(final SubLObject query_sentence, final SubLObject query_mt, final SubLObject v_properties) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject soft_timeout = inference_properties_max_time(v_properties);
	final SubLObject hard_timeout = (NIL != soft_timeout) ? multiply(TWO_INTEGER, soft_timeout) : fact_sheets.$int$300;
	SubLObject query_results = NIL;
	SubLObject halt_reason = NIL;
	if (NIL != fact_sheets.fact_sheet_query_soft_timeout_time_reachedP()) {
	    halt_reason = $MAX_TIME;
	} else {
	    thread.resetMultipleValues();
	    final SubLObject query_results_$150 = fact_sheets.new_fact_sheet_query(query_sentence, query_mt, v_properties, hard_timeout);
	    final SubLObject halt_reason_$151 = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    query_results = query_results_$150;
	    halt_reason = halt_reason_$151;
	}
	if (halt_reason == $MAX_TIME) {
	    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
	    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
		format(stream, fact_sheets.$str447$Hit_soft_timeout_of__S_seconds_af, new SubLObject[] { soft_timeout, length(query_results), fact_sheets.$fact_sheet_focal_term$.getDynamicValue(thread) });
		force_output(stream);
	    }
	    fact_sheet_logs.note_fact_sheet_query_timeout_in_hourly_stats();
	} else if (halt_reason == $TIMED_OUT) {
	    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
	    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
		format(stream, fact_sheets.$str448$Hit_hard_timeout_of__S_seconds_af, new SubLObject[] { hard_timeout, length(query_results), fact_sheets.$fact_sheet_focal_term$.getDynamicValue(thread) });
		force_output(stream);
	    }
	    fact_sheet_logs.note_fact_sheet_query_timeout_in_hourly_stats();
	}

	return values(query_results, halt_reason);
    }

    public static final SubLObject clear_fact_sheet_label_for_category_alt() {
	{
	    SubLObject cs = $fact_sheet_label_for_category_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_fact_sheet_label_for_category() {
	final SubLObject cs = fact_sheets.$fact_sheet_label_for_category_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_fact_sheet_label_for_category_alt(SubLObject category, SubLObject language_mt, SubLObject v_properties) {
	return memoization_state.caching_state_remove_function_results_with_args($fact_sheet_label_for_category_caching_state$.getGlobalValue(), list(category, language_mt, v_properties), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_fact_sheet_label_for_category(final SubLObject category, final SubLObject language_mt, final SubLObject v_properties) {
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_label_for_category_caching_state$.getGlobalValue(), list(category, language_mt, v_properties), UNPROVIDED, UNPROVIDED);
    }

    /**
     *
     *
     * @param CATEGORY
     * 		predicate-p or stringp
     * @return NEW-CATEGORY-LABEL
     */
    @LispMethod(comment = "@param CATEGORY\r\n\t\tpredicate-p or stringp\r\n@return NEW-CATEGORY-LABEL")
    public static final SubLObject fact_sheet_label_for_category_internal_alt(SubLObject category, SubLObject language_mt, SubLObject v_properties) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject label_pred = $$termSummaryPredicateLabel;
		SubLObject label = NIL;
		if (NIL != com.cyc.cycjava.cycl.fact_sheets.category_label_from_properties(category, v_properties)) {
		    label = com.cyc.cycjava.cycl.fact_sheets.new_category_label(category, com.cyc.cycjava.cycl.fact_sheets.category_label_from_properties(category, v_properties));
		} else {
		    if (((NIL != indexed_term_p(category)) && (NIL != valid_constantP(label_pred, UNPROVIDED))) && (NIL != kb_mapping_utilities.fpred_value_in_relevant_mts(category, label_pred, language_mt, UNPROVIDED, UNPROVIDED, UNPROVIDED))) {
			label = com.cyc.cycjava.cycl.fact_sheets.new_category_label(category, kb_mapping_utilities.fpred_value_in_relevant_mts(category, label_pred, language_mt, UNPROVIDED, UNPROVIDED, UNPROVIDED));
		    } else {
			if (!((NIL != pph_error.$suspend_pph_type_checkingP$.getDynamicValue(thread)) || (NIL != pph_macros.valid_pph_demerit_cutoff_p(number_utilities.positive_infinity())))) {
			    {
				SubLObject new_format_string = cconcatenate($str_alt434$_PPH_error_level_, new SubLObject[] { format_nil.format_nil_s_no_copy(ONE_INTEGER), $str_alt435$__,
					format_nil.format_nil_a_no_copy(cconcatenate(format_nil.format_nil_s_no_copy(number_utilities.positive_infinity()), new SubLObject[] { $str_alt436$_is_not_a_, format_nil.format_nil_s_no_copy(VALID_PPH_DEMERIT_CUTOFF_P) })) });
				pph_error.pph_handle_error(new_format_string, list(EMPTY_SUBL_OBJECT_ARRAY));
			    }
			}
			{
			    SubLObject _prev_bind_0 = pph_vars.$pph_demerit_cutoff$.currentBinding(thread);
			    try {
				pph_vars.$pph_demerit_cutoff$.bind(number_utilities.positive_infinity(), thread);
				label = pph_main.generate_phrase(category, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
			    } finally {
				pph_vars.$pph_demerit_cutoff$.rebind(_prev_bind_0, thread);
			    }
			}
			if (label.isString()) {
			    label = com.cyc.cycjava.cycl.fact_sheets.new_category_label(category, label);
			}
		    }
		}
		return label;
	    }
	}
    }

    /**
     *
     *
     * @param CATEGORY
     * 		predicate-p or stringp
     * @return NEW-CATEGORY-LABEL
     */
    @LispMethod(comment = "@param CATEGORY\r\n\t\tpredicate-p or stringp\r\n@return NEW-CATEGORY-LABEL")
    public static SubLObject fact_sheet_label_for_category_internal(final SubLObject category, final SubLObject language_mt, final SubLObject v_properties) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject label_pred = fact_sheets.$$termSummaryPredicateLabel;
	SubLObject label = NIL;
	if (NIL != fact_sheets.category_label_from_properties(category, v_properties)) {
	    label = fact_sheets.new_category_label(category, fact_sheets.category_label_from_properties(category, v_properties));
	} else if (((NIL != indexed_term_p(category)) && (NIL != valid_constantP(label_pred, UNPROVIDED))) && (NIL != kb_mapping_utilities.fpred_value_in_relevant_mts(category, label_pred, language_mt, UNPROVIDED, UNPROVIDED, UNPROVIDED))) {
	    label = fact_sheets.new_category_label(category, kb_mapping_utilities.fpred_value_in_relevant_mts(category, label_pred, language_mt, UNPROVIDED, UNPROVIDED, UNPROVIDED));
	} else {
	    final SubLObject _prev_bind_0 = pph_vars.$pph_demerit_cutoff$.currentBinding(thread);
	    try {
		pph_vars.$pph_demerit_cutoff$.bind(number_utilities.positive_infinity(), thread);
		label = pph_main.generate_phrase(category, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	    } finally {
		pph_vars.$pph_demerit_cutoff$.rebind(_prev_bind_0, thread);
	    }
	    if (label.isString()) {
		label = fact_sheets.new_category_label(category, label);
	    }
	}

	return label;
    }

    public static final SubLObject fact_sheet_label_for_category_alt(SubLObject category, SubLObject language_mt, SubLObject v_properties) {
	{
	    SubLObject caching_state = $fact_sheet_label_for_category_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(FACT_SHEET_LABEL_FOR_CATEGORY, $fact_sheet_label_for_category_caching_state$, NIL, EQL, THREE_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject sxhash = memoization_state.sxhash_calc_3(category, language_mt, v_properties);
		SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
		if (collisions != $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    {
			SubLObject cdolist_list_var = collisions;
			SubLObject collision = NIL;
			for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), collision = cdolist_list_var.first()) {
			    {
				SubLObject cached_args = collision.first();
				SubLObject results2 = second(collision);
				if (category.eql(cached_args.first())) {
				    cached_args = cached_args.rest();
				    if (language_mt.eql(cached_args.first())) {
					cached_args = cached_args.rest();
					if (((NIL != cached_args) && (NIL == cached_args.rest())) && v_properties.eql(cached_args.first())) {
					    return memoization_state.caching_results(results2);
					}
				    }
				}
			    }
			}
		    }
		}
		{
		    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_label_for_category_internal(category, language_mt, v_properties)));
		    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(category, language_mt, v_properties));
		    return memoization_state.caching_results(results);
		}
	    }
	}
    }

    public static SubLObject fact_sheet_label_for_category(final SubLObject category, final SubLObject language_mt, final SubLObject v_properties) {
	SubLObject caching_state = fact_sheets.$fact_sheet_label_for_category_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.FACT_SHEET_LABEL_FOR_CATEGORY, fact_sheets.$fact_sheet_label_for_category_caching_state$, NIL, EQL, THREE_INTEGER, ZERO_INTEGER);
	}
	final SubLObject sxhash = memoization_state.sxhash_calc_3(category, language_mt, v_properties);
	final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
	if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    SubLObject cdolist_list_var = collisions;
	    SubLObject collision = NIL;
	    collision = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cached_args = collision.first();
		final SubLObject results2 = second(collision);
		if (category.eql(cached_args.first())) {
		    cached_args = cached_args.rest();
		    if (language_mt.eql(cached_args.first())) {
			cached_args = cached_args.rest();
			if (((NIL != cached_args) && (NIL == cached_args.rest())) && v_properties.eql(cached_args.first())) {
			    return memoization_state.caching_results(results2);
			}
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		collision = cdolist_list_var.first();
	    }
	}
	final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_label_for_category_internal(category, language_mt, v_properties)));
	memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(category, language_mt, v_properties));
	return memoization_state.caching_results(results3);
    }

    public static final SubLObject group_fact_sheet_sentences_alist_alt(SubLObject alist) {
	{
	    SubLObject result = NIL;
	    SubLObject cdolist_list_var = alist;
	    SubLObject cons = NIL;
	    for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
		{
		    SubLObject datum = cons;
		    SubLObject current = datum;
		    SubLObject category = NIL;
		    SubLObject sentences = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt602);
		    category = current.first();
		    current = current.rest();
		    sentences = current;
		    {
			SubLObject groups = com.cyc.cycjava.cycl.fact_sheets.group_fact_sheet_sentences_for_category(category, sentences);
			result = list_utilities.alist_enter(result, category, groups, UNPROVIDED);
		    }
		}
	    }
	    return Sort.stable_sort(result, symbol_function($sym289$TERM__), symbol_function(CAR));
	}
    }

    public static SubLObject group_fact_sheet_sentences_alist(final SubLObject alist) {
	SubLObject result = NIL;
	SubLObject cdolist_list_var = alist;
	SubLObject cons = NIL;
	cons = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    SubLObject current;
	    final SubLObject datum = current = cons;
	    SubLObject category = NIL;
	    SubLObject sentences = NIL;
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list452);
	    category = current.first();
	    current = sentences = current.rest();
	    final SubLObject groups = fact_sheets.group_fact_sheet_sentences_for_category(category, sentences);
	    result = list_utilities.alist_enter(result, category, groups, UNPROVIDED);
	    cdolist_list_var = cdolist_list_var.rest();
	    cons = cdolist_list_var.first();
	}
	return Sort.stable_sort(result, symbol_function(fact_sheets.$sym126$TERM__), symbol_function(CAR));
    }

    /**
     *
     *
     * @return LISTP of lists of sentences (one such list for each paragraph) from SENTENCES.
     */
    @LispMethod(comment = "@return LISTP of lists of sentences (one such list for each paragraph) from SENTENCES.")
    public static final SubLObject group_fact_sheet_sentences_for_category_alt(SubLObject category, SubLObject sentences) {
	{
	    SubLObject groups = NIL;
	    SubLObject min_group_size = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_min_paragraph_length();
	    SubLObject current_group = NIL;
	    SubLObject current_group_precedence = ZERO_INTEGER;
	    SubLObject in_same_groupP = NIL;
	    SubLObject previous_sentence = NIL;
	    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.fact_sheets.sort_fact_sheet_sentences_for_category(category, sentences);
	    SubLObject sentence = NIL;
	    for (sentence = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), sentence = cdolist_list_var.first()) {
		{
		    SubLObject this_precedence = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_precedence_for_category(sentence, category);
		    SubLObject group_with_previousP = makeBoolean((NIL != previous_sentence) && com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_coherence(previous_sentence, sentence, UNPROVIDED).numG(ONE_INTEGER));
		    if (NIL == previous_sentence) {
			current_group = cons(sentence, current_group);
			current_group_precedence = this_precedence;
		    } else {
			if (NIL != group_with_previousP) {
			    if (!((NIL != in_same_groupP) || (NIL != list_utilities.lengthL(current_group, TWO_INTEGER, UNPROVIDED)))) {
				groups = cons(com.cyc.cycjava.cycl.fact_sheets.delete_duplicate_fact_sheet_sentences(nreverse(current_group.rest())), groups);
				current_group = list(current_group.first());
			    }
			    current_group = cons(sentence, current_group);
			} else {
			    if (((NIL == in_same_groupP) && (NIL != list_utilities.lengthL(current_group, min_group_size, UNPROVIDED))) && current_group_precedence.eql(this_precedence)) {
				current_group = cons(sentence, current_group);
			    } else {
				groups = cons(com.cyc.cycjava.cycl.fact_sheets.delete_duplicate_fact_sheet_sentences(nreverse(current_group)), groups);
				current_group = list(sentence);
				current_group_precedence = this_precedence;
			    }
			}
		    }
		    previous_sentence = sentence;
		    in_same_groupP = group_with_previousP;
		}
	    }
	    if (NIL != current_group) {
		groups = cons(com.cyc.cycjava.cycl.fact_sheets.delete_duplicate_fact_sheet_sentences(nreverse(current_group)), groups);
	    }
	    return nreverse(groups);
	}
    }

    /**
     *
     *
     * @return LISTP of lists of sentences (one such list for each paragraph) from SENTENCES.
     */
    @LispMethod(comment = "@return LISTP of lists of sentences (one such list for each paragraph) from SENTENCES.")
    public static SubLObject group_fact_sheet_sentences_for_category(final SubLObject category, final SubLObject sentences) {
	SubLObject groups = NIL;
	final SubLObject min_group_size = fact_sheets.fact_sheet_min_paragraph_length();
	SubLObject current_group = NIL;
	SubLObject in_same_groupP = NIL;
	SubLObject previous_sentence = NIL;
	SubLObject cdolist_list_var = fact_sheets.sort_fact_sheet_sentences_for_category(category, sentences);
	SubLObject sentence = NIL;
	sentence = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    final SubLObject group_with_previousP = makeBoolean((NIL != previous_sentence) && fact_sheets.fact_sheet_sentence_coherence_to_group(sentence, current_group).numG(ONE_INTEGER));
	    if (NIL == previous_sentence) {
		current_group = cons(sentence, current_group);
	    } else if (NIL != group_with_previousP) {
		if ((NIL == in_same_groupP) && (NIL == list_utilities.lengthL(current_group, TWO_INTEGER, UNPROVIDED))) {
		    groups = cons(fact_sheets.delete_duplicate_fact_sheet_sentences(nreverse(current_group.rest())), groups);
		    current_group = list(current_group.first());
		}
		current_group = cons(sentence, current_group);
	    } else if ((NIL == in_same_groupP) && (NIL != list_utilities.lengthL(current_group, min_group_size, UNPROVIDED))) {
		current_group = cons(sentence, current_group);
	    } else {
		groups = cons(fact_sheets.delete_duplicate_fact_sheet_sentences(nreverse(current_group)), groups);
		current_group = list(sentence);
	    }

	    previous_sentence = sentence;
	    in_same_groupP = group_with_previousP;
	    cdolist_list_var = cdolist_list_var.rest();
	    sentence = cdolist_list_var.first();
	}
	if (NIL != current_group) {
	    groups = cons(fact_sheets.delete_duplicate_fact_sheet_sentences(nreverse(current_group)), groups);
	}
	return nreverse(groups);
    }

    public static final SubLObject sort_fact_sheet_sentences_for_category_alt(SubLObject category, SubLObject sentences) {
	{
	    SubLObject alist = NIL;
	    SubLObject sorted_sentences = NIL;
	    {
		SubLObject cdolist_list_var = sentences;
		SubLObject sentence = NIL;
		for (sentence = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), sentence = cdolist_list_var.first()) {
		    {
			SubLObject key = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_precedence_for_category(sentence, category);
			alist = list_utilities.alist_push(alist, key, sentence, UNPROVIDED);
		    }
		}
	    }
	    {
		SubLObject cdolist_list_var = list_utilities.sort_alist_by_keys(alist, symbol_function($sym108$_));
		SubLObject cons = NIL;
		for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
		    {
			SubLObject datum = cons;
			SubLObject current = datum;
			SubLObject key = NIL;
			SubLObject sentences_241 = NIL;
			destructuring_bind_must_consp(current, datum, $list_alt603);
			key = current.first();
			current = current.rest();
			sentences_241 = current;
			{
			    SubLObject cdolist_list_var_242 = com.cyc.cycjava.cycl.fact_sheets.maximize_fact_sheet_sentence_coherence(Sort.sort(sentences_241, $sym604$FACT_SHEET_SENTENCE_MORE_RECENT_, UNPROVIDED));
			    SubLObject sentence = NIL;
			    for (sentence = cdolist_list_var_242.first(); NIL != cdolist_list_var_242; cdolist_list_var_242 = cdolist_list_var_242.rest(), sentence = cdolist_list_var_242.first()) {
				sorted_sentences = cons(sentence, sorted_sentences);
			    }
			}
		    }
		}
	    }
	    return nreverse(sorted_sentences);
	}
    }

    public static SubLObject sort_fact_sheet_sentences_for_category(final SubLObject category, final SubLObject sentences) {
	SubLObject alist = NIL;
	SubLObject sorted_sentences = NIL;
	SubLObject cdolist_list_var = sentences;
	SubLObject sentence = NIL;
	sentence = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    final SubLObject key = fact_sheets.fact_sheet_sentence_precedence_for_category(sentence, category);
	    alist = list_utilities.alist_push(alist, key, sentence, UNPROVIDED);
	    cdolist_list_var = cdolist_list_var.rest();
	    sentence = cdolist_list_var.first();
	}
	cdolist_list_var = list_utilities.sort_alist_by_keys(alist, symbol_function(fact_sheets.$sym125$_));
	SubLObject cons = NIL;
	cons = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    SubLObject current;
	    final SubLObject datum = current = cons;
	    SubLObject key2 = NIL;
	    SubLObject sentences_$152 = NIL;
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list453);
	    key2 = current.first();
	    current = sentences_$152 = current.rest();
	    SubLObject cdolist_list_var_$153 = fact_sheets.maximize_fact_sheet_sentence_coherence(Sort.sort(sentences_$152, fact_sheets.$sym454$FACT_SHEET_SENTENCE_MORE_RECENT_, UNPROVIDED));
	    SubLObject sentence2 = NIL;
	    sentence2 = cdolist_list_var_$153.first();
	    while (NIL != cdolist_list_var_$153) {
		sorted_sentences = cons(sentence2, sorted_sentences);
		cdolist_list_var_$153 = cdolist_list_var_$153.rest();
		sentence2 = cdolist_list_var_$153.first();
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    cons = cdolist_list_var.first();
	}
	return nreverse(sorted_sentences);
    }

    public static final SubLObject fact_sheet_sentence_more_recentP_alt(SubLObject sentence1, SubLObject sentence2) {
	return sbhl_time_modules.ends_after_ending_ofP(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_time_interval(sentence1), com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_time_interval(sentence2), UNPROVIDED);
    }

    public static SubLObject fact_sheet_sentence_more_recentP(final SubLObject sentence1, final SubLObject sentence2) {
	return ends_after_ending_ofP(fact_sheets.fact_sheet_sentence_time_interval(sentence1), fact_sheets.fact_sheet_sentence_time_interval(sentence2), UNPROVIDED);
    }

    public static final SubLObject fact_sheet_sentence_time_interval_alt(SubLObject sentence) {
	{
	    SubLObject interval = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_time_interval_cached(sentence);
	    SubLObject now = date_utilities.indexical_now();
	    return cycl_utilities.expression_subst(now, $$Now, interval, UNPROVIDED, UNPROVIDED);
	}
    }

    public static SubLObject fact_sheet_sentence_time_interval(final SubLObject sentence) {
	final SubLObject interval = fact_sheets.fact_sheet_sentence_time_interval_cached(sentence);
	final SubLObject now = date_utilities.indexical_now();
	return cycl_utilities.expression_subst(now, fact_sheets.$$Now, interval, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject clear_fact_sheet_sentence_time_interval_cached_alt() {
	{
	    SubLObject cs = $fact_sheet_sentence_time_interval_cached_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_fact_sheet_sentence_time_interval_cached() {
	final SubLObject cs = fact_sheets.$fact_sheet_sentence_time_interval_cached_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_fact_sheet_sentence_time_interval_cached_alt(SubLObject sentence) {
	return memoization_state.caching_state_remove_function_results_with_args($fact_sheet_sentence_time_interval_cached_caching_state$.getGlobalValue(), list(sentence), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_fact_sheet_sentence_time_interval_cached(final SubLObject sentence) {
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_sentence_time_interval_cached_caching_state$.getGlobalValue(), list(sentence), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_sentence_time_interval_cached_internal_alt(SubLObject sentence) {
	{
	    SubLObject v_default = $$Always_TimeInterval;
	    SubLObject interval = (NIL != assertion_handles.assertion_p(sentence)) ? ((SubLObject) (hlmt.explode_hlmt_temporal_facets_with_defaults(assertions_high.assertion_mt(sentence)))) : v_default;
	    SubLObject doneP = makeBoolean(interval != v_default);
	    SubLObject args = cycl_utilities.formula_args(sentence, $IGNORE);
	    SubLObject rest = NIL;
	    for (rest = args; !((NIL != doneP) || (NIL == rest)); rest = rest.rest()) {
		{
		    SubLObject time_interval_arg = rest.first();
		    if (NIL != hlmt.time_intervalP(time_interval_arg)) {
			interval = time_interval_arg;
			doneP = T;
		    }
		}
	    }
	    return interval;
	}
    }

    public static SubLObject fact_sheet_sentence_time_interval_cached_internal(final SubLObject sentence) {
	final SubLObject v_default = fact_sheets.$$Always_TimeInterval;
	SubLObject interval = (NIL != assertion_handles.assertion_p(sentence)) ? hlmt.explode_hlmt_temporal_facets_with_defaults(assertions_high.assertion_mt(sentence)) : v_default;
	SubLObject doneP = makeBoolean(!interval.eql(v_default));
	final SubLObject args = cycl_utilities.formula_args(sentence, $IGNORE);
	SubLObject rest;
	SubLObject time_interval_arg;
	for (rest = NIL, rest = args; (NIL == doneP) && (NIL != rest); rest = rest.rest()) {
	    time_interval_arg = rest.first();
	    if (NIL != hlmt.time_intervalP(time_interval_arg)) {
		interval = time_interval_arg;
		doneP = T;
	    }
	}
	return interval;
    }

    public static final SubLObject fact_sheet_sentence_time_interval_cached_alt(SubLObject sentence) {
	{
	    SubLObject caching_state = $fact_sheet_sentence_time_interval_cached_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(FACT_SHEET_SENTENCE_TIME_INTERVAL_CACHED, $fact_sheet_sentence_time_interval_cached_caching_state$, $int$200, EQUAL, ONE_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject results = memoization_state.caching_state_lookup(caching_state, sentence, $kw127$_MEMOIZED_ITEM_NOT_FOUND_);
		if (results == $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_time_interval_cached_internal(sentence)));
		    memoization_state.caching_state_put(caching_state, sentence, results, UNPROVIDED);
		}
		return memoization_state.caching_results(results);
	    }
	}
    }

    public static SubLObject fact_sheet_sentence_time_interval_cached(final SubLObject sentence) {
	SubLObject caching_state = fact_sheets.$fact_sheet_sentence_time_interval_cached_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.FACT_SHEET_SENTENCE_TIME_INTERVAL_CACHED, fact_sheets.$fact_sheet_sentence_time_interval_cached_caching_state$, fact_sheets.$int$200, EQUAL, ONE_INTEGER, ZERO_INTEGER);
	}
	SubLObject results = memoization_state.caching_state_lookup(caching_state, sentence, memoization_state.$memoized_item_not_found$.getGlobalValue());
	if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    results = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_sentence_time_interval_cached_internal(sentence)));
	    memoization_state.caching_state_put(caching_state, sentence, results, UNPROVIDED);
	}
	return memoization_state.caching_results(results);
    }

    public static final SubLObject fact_sheet_sentence_precedence_for_category_internal_alt(SubLObject sentence, SubLObject category) {
	{
	    SubLObject pcase_var = category;
	    if (pcase_var.eql($$agentBioDataSentence)) {
		{
		    SubLObject pcase_var_243 = cycl_utilities.formula_arg0(sentence);
		    if (pcase_var_243.eql($$isa) || pcase_var_243.eql($$ethnicity)) {
			return ZERO_INTEGER;
		    } else {
			if (pcase_var_243.eql($$birthPlace) || pcase_var_243.eql($$birthDate)) {
			    return ONE_INTEGER;
			} else {
			    if (pcase_var_243.eql($$placeOfDeath) || pcase_var_243.eql($$dateOfDeath)) {
				return FOUR_INTEGER;
			    } else {
				return THREE_INTEGER;
			    }
			}
		    }
		}
	    } else {
		return ZERO_INTEGER;
	    }
	}
    }

    public static SubLObject fact_sheet_sentence_precedence_for_category_internal(final SubLObject sentence, final SubLObject category) {
	if (!category.eql(fact_sheets.$$agentBioDataSentence)) {
	    return ZERO_INTEGER;
	}
	final SubLObject pcase_var_$154 = cycl_utilities.formula_arg0(sentence);
	if (pcase_var_$154.eql(fact_sheets.$$isa) || pcase_var_$154.eql(fact_sheets.$$ethnicity)) {
	    return ZERO_INTEGER;
	}
	if (pcase_var_$154.eql(fact_sheets.$$birthPlace) || pcase_var_$154.eql(fact_sheets.$$birthDate)) {
	    return ONE_INTEGER;
	}
	if (pcase_var_$154.eql(fact_sheets.$$placeOfDeath) || pcase_var_$154.eql(fact_sheets.$$dateOfDeath)) {
	    return FOUR_INTEGER;
	}
	return THREE_INTEGER;
    }

    public static final SubLObject fact_sheet_sentence_precedence_for_category_alt(SubLObject sentence, SubLObject category) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
		SubLObject caching_state = NIL;
		if (NIL == v_memoization_state) {
		    return com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_precedence_for_category_internal(sentence, category);
		}
		caching_state = memoization_state.memoization_state_lookup(v_memoization_state, FACT_SHEET_SENTENCE_PRECEDENCE_FOR_CATEGORY, UNPROVIDED);
		if (NIL == caching_state) {
		    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), FACT_SHEET_SENTENCE_PRECEDENCE_FOR_CATEGORY, TWO_INTEGER, NIL, EQUAL, UNPROVIDED);
		    memoization_state.memoization_state_put(v_memoization_state, FACT_SHEET_SENTENCE_PRECEDENCE_FOR_CATEGORY, caching_state);
		}
		{
		    SubLObject sxhash = memoization_state.sxhash_calc_2(sentence, category);
		    SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
		    if (collisions != $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
			{
			    SubLObject cdolist_list_var = collisions;
			    SubLObject collision = NIL;
			    for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), collision = cdolist_list_var.first()) {
				{
				    SubLObject cached_args = collision.first();
				    SubLObject results2 = second(collision);
				    if (sentence.equal(cached_args.first())) {
					cached_args = cached_args.rest();
					if (((NIL != cached_args) && (NIL == cached_args.rest())) && category.equal(cached_args.first())) {
					    return memoization_state.caching_results(results2);
					}
				    }
				}
			    }
			}
		    }
		    {
			SubLObject results = arg2(thread.resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_precedence_for_category_internal(sentence, category)));
			memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(sentence, category));
			return memoization_state.caching_results(results);
		    }
		}
	    }
	}
    }

    public static SubLObject fact_sheet_sentence_precedence_for_category(final SubLObject sentence, final SubLObject category) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
	SubLObject caching_state = NIL;
	if (NIL == v_memoization_state) {
	    return fact_sheets.fact_sheet_sentence_precedence_for_category_internal(sentence, category);
	}
	caching_state = memoization_state.memoization_state_lookup(v_memoization_state, fact_sheets.FACT_SHEET_SENTENCE_PRECEDENCE_FOR_CATEGORY, UNPROVIDED);
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), fact_sheets.FACT_SHEET_SENTENCE_PRECEDENCE_FOR_CATEGORY, TWO_INTEGER, NIL, EQUAL, UNPROVIDED);
	    memoization_state.memoization_state_put(v_memoization_state, fact_sheets.FACT_SHEET_SENTENCE_PRECEDENCE_FOR_CATEGORY, caching_state);
	}
	final SubLObject sxhash = memoization_state.sxhash_calc_2(sentence, category);
	final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
	if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    SubLObject cdolist_list_var = collisions;
	    SubLObject collision = NIL;
	    collision = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cached_args = collision.first();
		final SubLObject results2 = second(collision);
		if (sentence.equal(cached_args.first())) {
		    cached_args = cached_args.rest();
		    if (((NIL != cached_args) && (NIL == cached_args.rest())) && category.equal(cached_args.first())) {
			return memoization_state.caching_results(results2);
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		collision = cdolist_list_var.first();
	    }
	}
	final SubLObject results3 = arg2(thread.resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_sentence_precedence_for_category_internal(sentence, category)));
	memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(sentence, category));
	return memoization_state.caching_results(results3);
    }

    public static final SubLObject maximize_fact_sheet_sentence_coherence_alt(SubLObject sentences) {
	{
	    SubLObject maximized = NIL;
	    SubLObject datum = sentences;
	    SubLObject current = datum;
	    SubLObject first_sentence = NIL;
	    SubLObject remaining = NIL;
	    destructuring_bind_must_consp(current, datum, $list_alt614);
	    first_sentence = current.first();
	    current = current.rest();
	    remaining = current;
	    maximized = cons(first_sentence, maximized);
	    while (NIL == list_utilities.empty_list_p(remaining)) {
		{
		    SubLObject best_match = com.cyc.cycjava.cycl.fact_sheets.most_coherent_fact_sheet_sentence(maximized.first(), remaining);
		    maximized = cons(best_match, maximized);
		    remaining = delete(best_match, remaining, symbol_function($sym615$FACT_SHEET_SENTENCES_EQUAL_), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		}
	    }
	    return nreverse(maximized);
	}
    }

    public static SubLObject maximize_fact_sheet_sentence_coherence(final SubLObject sentences) {
	SubLObject maximized = NIL;
	SubLObject first_sentence = NIL;
	SubLObject remaining = NIL;
	destructuring_bind_must_consp(sentences, sentences, fact_sheets.$list464);
	first_sentence = sentences.first();
	final SubLObject current = remaining = sentences.rest();
	maximized = cons(first_sentence, maximized);
	while (NIL == list_utilities.empty_list_p(remaining)) {
	    final SubLObject best_match = fact_sheets.most_coherent_fact_sheet_sentence(maximized.first(), remaining);
	    maximized = cons(best_match, maximized);
	    remaining = delete(best_match, remaining, symbol_function(fact_sheets.$sym465$FACT_SHEET_SENTENCES_EQUAL_), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	}
	return nreverse(maximized);
    }

    public static final SubLObject most_coherent_fact_sheet_sentence_alt(SubLObject sentence, SubLObject remaining) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject terms = cycl_utilities.expression_gather(sentence, CONSTANT_P, T, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		SubLObject best_match = NIL;
		SubLObject best_coherence = ZERO_INTEGER;
		SubLObject cdolist_list_var = remaining;
		SubLObject v_this = NIL;
		for (v_this = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), v_this = cdolist_list_var.first()) {
		    {
			SubLObject this_coherence = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_coherence(sentence, v_this, terms);
			if ((NIL == best_match) || this_coherence.numG(best_coherence)) {
			    if (NIL != best_match) {
				{
				    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
				    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
					com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
					format(stream, $str_alt616$_S_has_coherence__S_to__S, new SubLObject[] { v_this, this_coherence, sentence });
					force_output(stream);
				    }
				}
			    }
			    best_match = v_this;
			    best_coherence = this_coherence;
			}
		    }
		}
		return best_match;
	    }
	}
    }

    public static SubLObject most_coherent_fact_sheet_sentence(final SubLObject sentence, final SubLObject remaining) {
	final SubLObject terms = cycl_utilities.expression_gather(sentence, CONSTANT_P, T, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	SubLObject best_match = NIL;
	SubLObject best_coherence = ZERO_INTEGER;
	SubLObject cdolist_list_var = remaining;
	SubLObject v_this = NIL;
	v_this = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    final SubLObject this_coherence = fact_sheets.fact_sheet_sentence_coherence(sentence, v_this, terms);
	    if ((NIL == best_match) || this_coherence.numG(best_coherence)) {
		if (NIL != best_match) {
		    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
			format(stream, fact_sheets.$str466$_S___has_coherence__S_to____S, new SubLObject[] { v_this, this_coherence, sentence });
			force_output(stream);
		    }
		}
		best_match = v_this;
		best_coherence = this_coherence;
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    v_this = cdolist_list_var.first();
	}
	return best_match;
    }

    public static SubLObject fact_sheet_sentence_coherence_to_group(final SubLObject sentence, final SubLObject group) {
	SubLObject max = ZERO_INTEGER;
	SubLObject cdolist_list_var = group;
	SubLObject other = NIL;
	other = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    final SubLObject other_coherence = fact_sheets.fact_sheet_sentence_coherence(other, sentence, UNPROVIDED);
	    if (other_coherence.numG(max)) {
		max = other_coherence;
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    other = cdolist_list_var.first();
	}
	return max;
    }

    public static SubLObject fact_sheet_sentence_coherence_internal(final SubLObject target, final SubLObject candidate, SubLObject target_terms) {
	if (target_terms == UNPROVIDED) {
	    target_terms = cycl_utilities.expression_gather(target, CONSTANT_P, T, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	}
	SubLObject coherence = ZERO_INTEGER;
	SubLObject cdolist_list_var = target_terms;
	SubLObject v_term = NIL;
	v_term = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    if (NIL != cycl_utilities.expression_find(v_term, candidate, T, symbol_function(EQL), UNPROVIDED)) {
		coherence = add(coherence, ONE_INTEGER);
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    v_term = cdolist_list_var.first();
	}
	return coherence;
    }

    public static final SubLObject fact_sheet_sentence_coherence_alt(SubLObject target, SubLObject candidate, SubLObject target_terms) {
	if (target_terms == UNPROVIDED) {
	    target_terms = cycl_utilities.expression_gather(target, CONSTANT_P, T, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	}
	{
	    SubLObject coherence = ZERO_INTEGER;
	    SubLObject cdolist_list_var = target_terms;
	    SubLObject v_term = NIL;
	    for (v_term = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), v_term = cdolist_list_var.first()) {
		if (NIL != cycl_utilities.expression_find(v_term, candidate, T, symbol_function(EQL), UNPROVIDED)) {
		    coherence = add(coherence, ONE_INTEGER);
		}
	    }
	    return coherence;
	}
    }

    public static SubLObject fact_sheet_sentence_coherence(final SubLObject target, final SubLObject candidate, SubLObject target_terms) {
	if (target_terms == UNPROVIDED) {
	    target_terms = cycl_utilities.expression_gather(target, CONSTANT_P, T, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
	SubLObject caching_state = NIL;
	if (NIL == v_memoization_state) {
	    return fact_sheets.fact_sheet_sentence_coherence_internal(target, candidate, target_terms);
	}
	caching_state = memoization_state.memoization_state_lookup(v_memoization_state, fact_sheets.FACT_SHEET_SENTENCE_COHERENCE, UNPROVIDED);
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), fact_sheets.FACT_SHEET_SENTENCE_COHERENCE, THREE_INTEGER, NIL, EQUAL, UNPROVIDED);
	    memoization_state.memoization_state_put(v_memoization_state, fact_sheets.FACT_SHEET_SENTENCE_COHERENCE, caching_state);
	}
	final SubLObject sxhash = memoization_state.sxhash_calc_3(target, candidate, target_terms);
	final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
	if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    SubLObject cdolist_list_var = collisions;
	    SubLObject collision = NIL;
	    collision = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cached_args = collision.first();
		final SubLObject results2 = second(collision);
		if (target.equal(cached_args.first())) {
		    cached_args = cached_args.rest();
		    if (candidate.equal(cached_args.first())) {
			cached_args = cached_args.rest();
			if (((NIL != cached_args) && (NIL == cached_args.rest())) && target_terms.equal(cached_args.first())) {
			    return memoization_state.caching_results(results2);
			}
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		collision = cdolist_list_var.first();
	    }
	}
	final SubLObject results3 = arg2(thread.resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_sentence_coherence_internal(target, candidate, target_terms)));
	memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(target, candidate, target_terms));
	return memoization_state.caching_results(results3);
    }

    public static final SubLObject delete_duplicate_fact_sheet_sentences_alt(SubLObject sentences) {
	return delete_duplicates(sentences, symbol_function($sym615$FACT_SHEET_SENTENCES_EQUAL_), UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject delete_duplicate_fact_sheet_sentences(final SubLObject sentences) {
	return delete_duplicates(sentences, symbol_function(fact_sheets.$sym465$FACT_SHEET_SENTENCES_EQUAL_), UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_sentences_equalP_alt(SubLObject sentence1, SubLObject sentence2) {
	{
	    SubLObject ans = makeBoolean(cycl_utilities.formula_terms(sentence1, UNPROVIDED).equal(cycl_utilities.formula_terms(sentence2, UNPROVIDED))
		    && ((!((NIL != assertion_handles.assertion_p(sentence1)) && (NIL != assertion_handles.assertion_p(sentence2)))) || (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_assertion_time_indices_equalP(sentence1, sentence2))));
	    return ans;
	}
    }

    public static SubLObject fact_sheet_sentences_equalP(final SubLObject sentence1, final SubLObject sentence2) {
	final SubLObject ans = makeBoolean(cycl_utilities.formula_terms(sentence1, UNPROVIDED).equal(cycl_utilities.formula_terms(sentence2, UNPROVIDED))
		&& (((NIL == assertion_handles.assertion_p(sentence1)) || (NIL == assertion_handles.assertion_p(sentence2))) || (NIL != fact_sheets.fact_sheet_assertion_time_indices_equalP(sentence1, sentence2))));
	return ans;
    }

    public static final SubLObject fact_sheet_assertion_time_indices_equalP_alt(SubLObject as1, SubLObject as2) {
	return equal(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_time_interval_cached(as1), com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_time_interval_cached(as2));
    }

    public static SubLObject fact_sheet_assertion_time_indices_equalP(final SubLObject as1, final SubLObject as2) {
	return equal(fact_sheets.fact_sheet_sentence_time_interval_cached(as1), fact_sheets.fact_sheet_sentence_time_interval_cached(as2));
    }

    public static final SubLObject fact_sheet_sentence_predicate_alt(SubLObject sentence) {
	return NIL != ist_sentence_p(sentence) ? ((SubLObject) (cycl_utilities.formula_arg0(cycl_utilities.formula_arg2(sentence, UNPROVIDED)))) : cycl_utilities.formula_arg0(sentence);
    }

    public static SubLObject fact_sheet_sentence_predicate(final SubLObject sentence) {
	return NIL != ist_sentence_p(sentence, UNPROVIDED) ? cycl_utilities.formula_arg0(cycl_utilities.formula_arg2(sentence, UNPROVIDED)) : cycl_utilities.formula_arg0(sentence);
    }

    public static final SubLObject fact_sheet_sentence_mt_alt(SubLObject sentence) {
	return NIL != ist_sentence_p(sentence) ? ((SubLObject) (cycl_utilities.formula_arg1(sentence, UNPROVIDED))) : NIL != assertion_handles.assertion_p(sentence) ? ((SubLObject) (assertions_high.assertion_mt(sentence))) : NIL;
    }

    public static SubLObject fact_sheet_sentence_mt(final SubLObject sentence) {
	return NIL != ist_sentence_p(sentence, UNPROVIDED) ? cycl_utilities.formula_arg1(sentence, UNPROVIDED) : NIL != assertion_handles.assertion_p(sentence) ? assertions_high.assertion_mt(sentence) : NIL;
    }

    public static final SubLObject pred_counts_for_sentences_alt(SubLObject sentences) {
	{
	    SubLObject counts = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
	    SubLObject cdolist_list_var = sentences;
	    SubLObject sentence = NIL;
	    for (sentence = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), sentence = cdolist_list_var.first()) {
		dictionary_utilities.dictionary_increment(counts, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_predicate(sentence), UNPROVIDED);
	    }
	    return counts;
	}
    }

    public static SubLObject pred_counts_for_sentences(final SubLObject sentences) {
	final SubLObject counts = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
	SubLObject cdolist_list_var = sentences;
	SubLObject sentence = NIL;
	sentence = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    dictionary_utilities.dictionary_increment(counts, fact_sheets.fact_sheet_sentence_predicate(sentence), UNPROVIDED);
	    cdolist_list_var = cdolist_list_var.rest();
	    sentence = cdolist_list_var.first();
	}
	return counts;
    }

    public static final SubLObject fact_sheet_pred_count_L_alt(SubLObject pred1, SubLObject pred2) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    return makeBoolean((NIL != dictionary.dictionary_p($fact_sheet_sentence_sorter_pred_counts$.getDynamicValue(thread)))
		    && dictionary.dictionary_lookup($fact_sheet_sentence_sorter_pred_counts$.getDynamicValue(thread), pred1, ZERO_INTEGER).numL(dictionary.dictionary_lookup($fact_sheet_sentence_sorter_pred_counts$.getDynamicValue(thread), pred2, ZERO_INTEGER)));
	}
    }

    public static SubLObject fact_sheet_pred_count_L(final SubLObject pred1, final SubLObject pred2) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	return makeBoolean((NIL != dictionary.dictionary_p(fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.getDynamicValue(thread)))
		&& dictionary.dictionary_lookup(fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.getDynamicValue(thread), pred1, ZERO_INTEGER).numL(dictionary.dictionary_lookup(fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.getDynamicValue(thread), pred2, ZERO_INTEGER)));
    }

    public static final SubLObject stable_sort_fact_sheet_sentences_alt(SubLObject alist) {
	{
	    SubLObject result = NIL;
	    SubLObject cdolist_list_var = alist;
	    SubLObject cons = NIL;
	    for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
		{
		    SubLObject datum = cons;
		    SubLObject current = datum;
		    SubLObject pred = NIL;
		    SubLObject sentences = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt617);
		    pred = current.first();
		    current = current.rest();
		    sentences = current;
		    {
			SubLObject sorted = com.cyc.cycjava.cycl.fact_sheets.stable_sort_fact_sheet_sentences_for_category(sentences);
			result = list_utilities.alist_enter(result, pred, sorted, UNPROVIDED);
		    }
		}
	    }
	    return result;
	}
    }

    public static SubLObject stable_sort_fact_sheet_sentences(final SubLObject alist) {
	SubLObject result = NIL;
	SubLObject cdolist_list_var = alist;
	SubLObject cons = NIL;
	cons = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    SubLObject current;
	    final SubLObject datum = current = cons;
	    SubLObject pred = NIL;
	    SubLObject sentences = NIL;
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list468);
	    pred = current.first();
	    current = sentences = current.rest();
	    final SubLObject sorted = fact_sheets.stable_sort_fact_sheet_sentences_for_category(sentences);
	    result = list_utilities.alist_enter(result, pred, sorted, UNPROVIDED);
	    cdolist_list_var = cdolist_list_var.rest();
	    cons = cdolist_list_var.first();
	}
	return result;
    }

    public static final SubLObject stable_sort_fact_sheet_sentences_for_category_alt(SubLObject sentences) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject sorted = NIL;
		{
		    SubLObject _prev_bind_0 = $fact_sheet_sentence_sorter_pred_counts$.currentBinding(thread);
		    try {
			$fact_sheet_sentence_sorter_pred_counts$.bind(com.cyc.cycjava.cycl.fact_sheets.pred_counts_for_sentences(sentences), thread);
			sorted = Sort.stable_sort(Sort.stable_sort(sentences, symbol_function($sym289$TERM__), UNPROVIDED), $sym290$FACT_SHEET_PRED_COUNT__, FACT_SHEET_SENTENCE_PREDICATE);
		    } finally {
			$fact_sheet_sentence_sorter_pred_counts$.rebind(_prev_bind_0, thread);
		    }
		}
		return sorted;
	    }
	}
    }

    public static SubLObject stable_sort_fact_sheet_sentences_for_category(final SubLObject sentences) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.currentBinding(thread);
	try {
	    fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.bind(fact_sheets.pred_counts_for_sentences(sentences), thread);
	    return Sort.stable_sort(Sort.stable_sort(Sort.stable_sort(sentences, symbol_function(fact_sheets.$sym126$TERM__), UNPROVIDED), fact_sheets.$sym127$FACT_SHEET_PRED_COUNT__, fact_sheets.FACT_SHEET_SENTENCE_PREDICATE), fact_sheets.$sym470$FACT_SHEET_SENTENCE_REFERENCES_EARLIER_DATE_,
		    UNPROVIDED);
	} finally {
	    fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.rebind(_prev_bind_0, thread);
	}
    }

    public static final SubLObject fact_sheet_predicate_L_alt(SubLObject predicate1, SubLObject predicate2) {
	return kb_utilities.term_L(predicate1, predicate2, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject fact_sheet_predicate_L(final SubLObject predicate1, final SubLObject predicate2) {
	return kb_utilities.term_L(predicate1, predicate2, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject fact_sheet_sentence_references_earlier_dateP(final SubLObject sentence1, final SubLObject sentence2) {
	final SubLObject ans = fact_sheets.fact_sheet_sentence_references_earlier_dateP_internal(sentence1, sentence2);
	if ((NIL != ans) && (NIL != fact_sheets.fact_sheet_sentence_references_earlier_dateP_internal(sentence2, sentence1))) {
	    Errors.sublisp_break(fact_sheets.$str471$Earlierness_problem_____S____S, new SubLObject[] { sentence1, sentence2 });
	}
	return ans;
    }

    public static SubLObject fact_sheet_sentence_references_earlier_dateP_internal(final SubLObject sentence1, final SubLObject sentence2) {
	SubLObject dates1 = cycl_utilities.expression_gather(sentence1, DATE_P, T, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	SubLObject dates2 = cycl_utilities.expression_gather(sentence2, DATE_P, T, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	if (NIL != assertion_handles.assertion_p(sentence1)) {
	    final SubLObject items_var = cycl_utilities.expression_gather(assertions_high.assertion_mt(sentence1), DATE_P, T, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	    if (items_var.isVector()) {
		final SubLObject vector_var = items_var;
		final SubLObject backwardP_var = NIL;
		SubLObject length;
		SubLObject v_iteration;
		SubLObject element_num;
		SubLObject item;
		for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
		    element_num = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
		    item = aref(vector_var, element_num);
		    dates1 = cons(item, dates1);
		}
	    } else {
		SubLObject cdolist_list_var = items_var;
		SubLObject item2 = NIL;
		item2 = cdolist_list_var.first();
		while (NIL != cdolist_list_var) {
		    dates1 = cons(item2, dates1);
		    cdolist_list_var = cdolist_list_var.rest();
		    item2 = cdolist_list_var.first();
		}
	    }
	}
	if (NIL != assertion_handles.assertion_p(sentence2)) {
	    final SubLObject items_var = cycl_utilities.expression_gather(assertions_high.assertion_mt(sentence2), DATE_P, T, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	    if (items_var.isVector()) {
		final SubLObject vector_var = items_var;
		final SubLObject backwardP_var = NIL;
		SubLObject length;
		SubLObject v_iteration;
		SubLObject element_num;
		SubLObject item;
		for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
		    element_num = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
		    item = aref(vector_var, element_num);
		    dates2 = cons(item, dates2);
		}
	    } else {
		SubLObject cdolist_list_var = items_var;
		SubLObject item2 = NIL;
		item2 = cdolist_list_var.first();
		while (NIL != cdolist_list_var) {
		    dates2 = cons(item2, dates2);
		    cdolist_list_var = cdolist_list_var.rest();
		    item2 = cdolist_list_var.first();
		}
	    }
	}
	if (NIL == dates1) {
	    return NIL;
	}
	if (NIL == dates2) {
	    return T;
	}
	return date_utilities.dateL(list_utilities.extremal(list_utilities.remove_subsumed_items(dates1, fact_sheets.$sym473$EXPRESSION_CONTAINS_, UNPROVIDED), fact_sheets.$sym474$DATE_, UNPROVIDED),
		list_utilities.extremal(list_utilities.remove_subsumed_items(dates2, fact_sheets.$sym473$EXPRESSION_CONTAINS_, UNPROVIDED), fact_sheets.$sym474$DATE_, UNPROVIDED));
    }

    public static SubLObject expression_containsP(final SubLObject expression, final SubLObject v_object, SubLObject penetrate_hl_structuresP, SubLObject test, SubLObject key) {
	if (penetrate_hl_structuresP == UNPROVIDED) {
	    penetrate_hl_structuresP = NIL;
	}
	if (test == UNPROVIDED) {
	    test = symbol_function(EQL);
	}
	if (key == UNPROVIDED) {
	    key = symbol_function(IDENTITY);
	}
	return cycl_utilities.expression_find(v_object, expression, penetrate_hl_structuresP, test, key);
    }

    public static final SubLObject possibly_remove_fact_sheet_sections_alt(SubLObject html, SubLObject v_properties, SubLObject v_term) {
	if (v_term == UNPROVIDED) {
	    v_term = NIL;
	}
	{
	    SubLObject datum = v_properties;
	    SubLObject current = datum;
	    SubLObject display_titleP_tail = property_list_member($kw619$DISPLAY_TITLE_, current);
	    SubLObject display_titleP = (NIL != display_titleP_tail) ? ((SubLObject) (cadr(display_titleP_tail))) : NIL;
	    SubLObject print_statsP_tail = property_list_member($kw620$PRINT_STATS_, current);
	    SubLObject print_statsP = (NIL != print_statsP_tail) ? ((SubLObject) (cadr(print_statsP_tail))) : T;
	    SubLObject show_copyrightP_tail = property_list_member($kw621$SHOW_COPYRIGHT_, current);
	    SubLObject show_copyrightP = (NIL != show_copyrightP_tail) ? ((SubLObject) (cadr(show_copyrightP_tail))) : NIL;
	    if (NIL == display_titleP) {
		html = com.cyc.cycjava.cycl.fact_sheets.remove_fact_sheet_section(html, $TITLE, UNPROVIDED);
	    }
	    if (NIL != com.cyc.cycjava.cycl.fact_sheets.allow_fact_sheet_evaluationsP()) {
		{
		    SubLObject kb = com.cyc.cycjava.cycl.fact_sheets.get_factsheet_kb_from_html(html);
		    SubLObject system = com.cyc.cycjava.cycl.fact_sheets.get_factsheet_system_from_html(html);
		    if ((NIL != kb) && (NIL != system)) {
			html = com.cyc.cycjava.cycl.fact_sheets.add_evaluation_link(html, v_term, operation_communication.the_cyclist(), kb, system);
		    }
		}
	    }
	    if (NIL == print_statsP) {
		html = com.cyc.cycjava.cycl.fact_sheets.remove_fact_sheet_section(html, $STATS, UNPROVIDED);
	    }
	    if (NIL == show_copyrightP) {
		html = com.cyc.cycjava.cycl.fact_sheets.remove_fact_sheet_section(html, $COPYRIGHT, v_properties);
	    }
	}
	return html;
    }

    public static SubLObject possibly_remove_fact_sheet_sections(SubLObject html, final SubLObject v_properties, SubLObject v_term) {
	if (v_term == UNPROVIDED) {
	    v_term = NIL;
	}
	final SubLObject display_titleP_tail = property_list_member(fact_sheets.$kw475$DISPLAY_TITLE_, v_properties);
	final SubLObject display_titleP = (NIL != display_titleP_tail) ? cadr(display_titleP_tail) : NIL;
	final SubLObject print_statsP_tail = property_list_member(fact_sheets.$kw476$PRINT_STATS_, v_properties);
	final SubLObject print_statsP = (NIL != print_statsP_tail) ? cadr(print_statsP_tail) : T;
	final SubLObject show_copyrightP_tail = property_list_member(fact_sheets.$kw477$SHOW_COPYRIGHT_, v_properties);
	final SubLObject show_copyrightP = (NIL != show_copyrightP_tail) ? cadr(show_copyrightP_tail) : NIL;
	if (NIL == display_titleP) {
	    html = fact_sheets.remove_fact_sheet_section(html, $TITLE, UNPROVIDED);
	}
	if (NIL != fact_sheets.allow_fact_sheet_evaluationsP()) {
	    final SubLObject kb = fact_sheets.get_factsheet_kb_from_html(html);
	    final SubLObject system = fact_sheets.get_factsheet_system_from_html(html);
	    if ((NIL != kb) && (NIL != system)) {
		html = fact_sheets.add_evaluation_link(html, v_term, operation_communication.the_cyclist(), kb, system);
	    }
	}
	if (NIL == print_statsP) {
	    html = fact_sheets.remove_fact_sheet_section(html, $STATS, UNPROVIDED);
	}
	if (NIL == show_copyrightP) {
	    html = fact_sheets.remove_fact_sheet_section(html, $COPYRIGHT, v_properties);
	}
	return html;
    }

    public static final SubLObject get_factsheet_kb_from_html_alt(SubLObject html) {
	{
	    SubLObject match = regular_expression_utilities.regexp_capturing_match($str_alt623$KB____0123456789_____, html, UNPROVIDED, UNPROVIDED);
	    if (NIL != match) {
		return second(match);
	    }
	}
	return NIL;
    }

    public static SubLObject get_factsheet_kb_from_html(final SubLObject html) {
	final SubLObject match = regular_expression_utilities.regexp_capturing_match(fact_sheets.$str478$KB____0123456789_____, html, UNPROVIDED, UNPROVIDED);
	if (NIL != match) {
	    return second(match);
	}
	return NIL;
    }

    public static final SubLObject get_factsheet_system_from_html_alt(SubLObject html) {
	{
	    SubLObject match = regular_expression_utilities.regexp_capturing_match($str_alt624$System____0123456789_____, html, UNPROVIDED, UNPROVIDED);
	    if (NIL != match) {
		return second(match);
	    }
	}
	return NIL;
    }

    public static SubLObject get_factsheet_system_from_html(final SubLObject html) {
	final SubLObject match = regular_expression_utilities.regexp_capturing_match(fact_sheets.$str479$System____0123456789_____, html, UNPROVIDED, UNPROVIDED);
	if (NIL != match) {
	    return second(match);
	}
	return NIL;
    }

    public static final SubLObject fact_sheet_section_start_position_alt(SubLObject html, SubLObject section_key, SubLObject v_properties) {
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	{
	    SubLObject start_comment = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_optional_section_start_comment(section_key, v_properties);
	    SubLObject start_position = (NIL != start_comment) ? ((SubLObject) (search(start_comment, html, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED))) : NIL;
	    return start_position;
	}
    }

    public static SubLObject fact_sheet_section_start_position(final SubLObject html, final SubLObject section_key, SubLObject v_properties) {
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	final SubLObject start_comment = fact_sheets.fact_sheet_optional_section_start_comment(section_key, v_properties);
	final SubLObject start_position = (NIL != start_comment) ? search(start_comment, html, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED) : NIL;
	return start_position;
    }

    public static final SubLObject fact_sheet_section_end_position_alt(SubLObject html, SubLObject section_key, SubLObject start_position) {
	{
	    SubLObject end_comment = (NIL != start_position) ? ((SubLObject) (com.cyc.cycjava.cycl.fact_sheets.fact_sheet_optional_section_end_comment(section_key))) : NIL;
	    SubLObject end_comment_start = (NIL != end_comment) ? ((SubLObject) (search(end_comment, html, symbol_function(EQUAL), symbol_function(IDENTITY), ZERO_INTEGER, NIL, start_position, UNPROVIDED))) : NIL;
	    SubLObject end_position = (NIL != end_comment_start) ? ((SubLObject) (add(length(end_comment), end_comment_start))) : NIL;
	    return end_position;
	}
    }

    public static SubLObject fact_sheet_section_end_position(final SubLObject html, final SubLObject section_key, final SubLObject start_position) {
	final SubLObject end_comment = (NIL != start_position) ? fact_sheets.fact_sheet_optional_section_end_comment(section_key) : NIL;
	final SubLObject end_comment_start = (NIL != end_comment) ? search(end_comment, html, symbol_function(EQUAL), symbol_function(IDENTITY), ZERO_INTEGER, NIL, start_position, UNPROVIDED) : NIL;
	final SubLObject end_position = (NIL != end_comment_start) ? add(length(end_comment), end_comment_start) : NIL;
	return end_position;
    }

    public static final SubLObject remove_fact_sheet_section_alt(SubLObject html, SubLObject section_key, SubLObject v_properties) {
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	{
	    SubLObject start_position = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_section_start_position(html, section_key, v_properties);
	    SubLObject end_position = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_section_end_position(html, section_key, start_position);
	    SubLObject new_html = (NIL != end_position) ? ((SubLObject) (cconcatenate(string_utilities.substring(html, ZERO_INTEGER, start_position), string_utilities.substring(html, end_position, UNPROVIDED)))) : html;
	    return new_html;
	}
    }

    public static SubLObject remove_fact_sheet_section(final SubLObject html, final SubLObject section_key, SubLObject v_properties) {
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	final SubLObject start_position = fact_sheets.fact_sheet_section_start_position(html, section_key, v_properties);
	final SubLObject end_position = fact_sheets.fact_sheet_section_end_position(html, section_key, start_position);
	final SubLObject new_html = (NIL != end_position) ? cconcatenate(string_utilities.substring(html, ZERO_INTEGER, start_position), string_utilities.substring(html, end_position, UNPROVIDED)) : html;
	return new_html;
    }

    public static final SubLObject add_evaluation_link_alt(SubLObject html, SubLObject v_term, SubLObject evaluator, SubLObject creation_kb, SubLObject creation_system) {
	if (evaluator == UNPROVIDED) {
	    evaluator = operation_communication.the_cyclist();
	}
	if (creation_kb == UNPROVIDED) {
	    creation_kb = NIL;
	}
	if (creation_system == UNPROVIDED) {
	    creation_system = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject link_string = NIL;
		SubLObject new_html = NIL;
		{
		    SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
		    try {
			html_macros.$html_stream$.bind(NIL, thread);
			try {
			    html_macros.$html_stream$.setDynamicValue(make_private_string_output_stream(), thread);
			    com.cyc.cycjava.cycl.fact_sheets.html_emit_fact_sheet_evaluation_link(v_term, evaluator, creation_kb, creation_system);
			    link_string = get_output_stream_string(html_macros.$html_stream$.getDynamicValue(thread));
			} finally {
			    {
				SubLObject _prev_bind_0_244 = $is_thread_performing_cleanupP$.currentBinding(thread);
				try {
				    $is_thread_performing_cleanupP$.bind(T, thread);
				    close(html_macros.$html_stream$.getDynamicValue(thread), UNPROVIDED);
				} finally {
				    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_244, thread);
				}
			    }
			}
		    } finally {
			html_macros.$html_stream$.rebind(_prev_bind_0, thread);
		    }
		}
		new_html = com.cyc.cycjava.cycl.fact_sheets.add_before_fact_sheet_section(html, $STATS, link_string);
		return new_html;
	    }
	}
    }

    public static SubLObject add_evaluation_link(final SubLObject html, final SubLObject v_term, SubLObject evaluator, SubLObject creation_kb, SubLObject creation_system) {
	if (evaluator == UNPROVIDED) {
	    evaluator = operation_communication.the_cyclist();
	}
	if (creation_kb == UNPROVIDED) {
	    creation_kb = NIL;
	}
	if (creation_system == UNPROVIDED) {
	    creation_system = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject link_string = NIL;
	SubLObject new_html = NIL;
	final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
	try {
	    html_macros.$html_stream$.bind(NIL, thread);
	    try {
		html_macros.$html_stream$.setDynamicValue(make_private_string_output_stream(), thread);
		fact_sheets.html_emit_fact_sheet_evaluation_link(v_term, evaluator, creation_kb, creation_system);
		link_string = get_output_stream_string(html_macros.$html_stream$.getDynamicValue(thread));
	    } finally {
		final SubLObject _prev_bind_0_$155 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values = getValuesAsVector();
		    close(html_macros.$html_stream$.getDynamicValue(thread), UNPROVIDED);
		    restoreValuesFromVector(_values);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$155, thread);
		}
	    }
	} finally {
	    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
	}
	new_html = fact_sheets.add_before_fact_sheet_section(html, $STATS, link_string);
	return new_html;
    }

    public static final SubLObject add_before_fact_sheet_section_alt(SubLObject html, SubLObject section_key, SubLObject html_to_add) {
	{
	    SubLObject start_position = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_section_start_position(html, section_key, UNPROVIDED);
	    SubLObject new_html = (NIL != start_position) ? ((SubLObject) (cconcatenate(string_utilities.substring(html, ZERO_INTEGER, start_position), new SubLObject[] { html_to_add, string_utilities.substring(html, start_position, UNPROVIDED) }))) : cconcatenate(html, html_to_add);
	    return new_html;
	}
    }

    public static SubLObject add_before_fact_sheet_section(final SubLObject html, final SubLObject section_key, final SubLObject html_to_add) {
	final SubLObject start_position = fact_sheets.fact_sheet_section_start_position(html, section_key, UNPROVIDED);
	final SubLObject new_html = (NIL != start_position) ? cconcatenate(string_utilities.substring(html, ZERO_INTEGER, start_position), new SubLObject[] { html_to_add, string_utilities.substring(html, start_position, UNPROVIDED) }) : cconcatenate(html, html_to_add);
	return new_html;
    }

    public static final SubLObject clear_fact_sheet_optional_section_start_comment_alt() {
	{
	    SubLObject cs = $fact_sheet_optional_section_start_comment_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_fact_sheet_optional_section_start_comment() {
	final SubLObject cs = fact_sheets.$fact_sheet_optional_section_start_comment_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_fact_sheet_optional_section_start_comment_alt(SubLObject section_key, SubLObject v_properties) {
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	return memoization_state.caching_state_remove_function_results_with_args($fact_sheet_optional_section_start_comment_caching_state$.getGlobalValue(), list(section_key, v_properties), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_fact_sheet_optional_section_start_comment(final SubLObject section_key, SubLObject v_properties) {
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_optional_section_start_comment_caching_state$.getGlobalValue(), list(section_key, v_properties), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_optional_section_start_comment_internal_alt(SubLObject section_key, SubLObject v_properties) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject comment = NIL;
		if ((section_key == $COPYRIGHT) && (NIL != getf(v_properties, $STYLESHEET, UNPROVIDED))) {
		    comment = cconcatenate(html_macros.$html_hr_head$.getGlobalValue(), new SubLObject[] { $str_alt441$_, $str_alt625$_span_class__copyright__, html_macros.$html_italic_head$.getGlobalValue(), $$$Copyright });
		} else {
		    if (section_key == $COPYRIGHT) {
			comment = cconcatenate(html_macros.$html_hr_head$.getGlobalValue(), new SubLObject[] { $str_alt441$_, html_macros.$html_italic_head$.getGlobalValue(), $$$Copyright });
		    } else {
			{
			    SubLObject stream = NIL;
			    try {
				stream = make_private_string_output_stream();
				{
				    SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
				    try {
					html_macros.$html_stream$.bind(stream, thread);
					html_terpri(UNPROVIDED);
					html_markup(html_macros.$html_comment_head$.getGlobalValue());
					{
					    SubLObject _prev_bind_0_245 = html_macros.$html_safe_print$.currentBinding(thread);
					    try {
						html_macros.$html_safe_print$.bind(T, thread);
						html_princ(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_optional_section_start_string(section_key));
					    } finally {
						html_macros.$html_safe_print$.rebind(_prev_bind_0_245, thread);
					    }
					}
					html_markup(html_macros.$html_comment_tail$.getGlobalValue());
					html_terpri(UNPROVIDED);
				    } finally {
					html_macros.$html_stream$.rebind(_prev_bind_0, thread);
				    }
				}
				comment = get_output_stream_string(stream);
			    } finally {
				{
				    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					close(stream, UNPROVIDED);
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
				    }
				}
			    }
			}
		    }
		}
		return comment;
	    }
	}
    }

    public static SubLObject fact_sheet_optional_section_start_comment_internal(final SubLObject section_key, final SubLObject v_properties) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject comment = NIL;
	if ((section_key == $COPYRIGHT) && (NIL != getf(v_properties, $STYLESHEET, UNPROVIDED))) {
	    comment = cconcatenate(html_macros.$html_hr_head$.getGlobalValue(), new SubLObject[] { fact_sheets.$str281$_, fact_sheets.$str480$_span_class__copyright__, html_macros.$html_italic_head$.getGlobalValue(), fact_sheets.$$$Copyright });
	} else {
	    SubLObject stream = NIL;
	    try {
		stream = make_private_string_output_stream();
		final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
		try {
		    html_macros.$html_stream$.bind(stream, thread);
		    html_terpri(UNPROVIDED);
		    html_markup(html_macros.$html_comment_head$.getGlobalValue());
		    final SubLObject _prev_bind_0_$156 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			html_princ(fact_sheets.fact_sheet_optional_section_start_string(section_key));
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_0_$156, thread);
		    }
		    html_markup(html_macros.$html_comment_tail$.getGlobalValue());
		    html_terpri(UNPROVIDED);
		} finally {
		    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
		}
		comment = get_output_stream_string(stream);
	    } finally {
		final SubLObject _prev_bind_2 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values = getValuesAsVector();
		    close(stream, UNPROVIDED);
		    restoreValuesFromVector(_values);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
		}
	    }
	}
	return comment;
    }

    public static final SubLObject fact_sheet_optional_section_start_comment_alt(SubLObject section_key, SubLObject v_properties) {
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	{
	    SubLObject caching_state = $fact_sheet_optional_section_start_comment_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(FACT_SHEET_OPTIONAL_SECTION_START_COMMENT, $fact_sheet_optional_section_start_comment_caching_state$, NIL, EQL, TWO_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject sxhash = memoization_state.sxhash_calc_2(section_key, v_properties);
		SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
		if (collisions != $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    {
			SubLObject cdolist_list_var = collisions;
			SubLObject collision = NIL;
			for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), collision = cdolist_list_var.first()) {
			    {
				SubLObject cached_args = collision.first();
				SubLObject results2 = second(collision);
				if (section_key.eql(cached_args.first())) {
				    cached_args = cached_args.rest();
				    if (((NIL != cached_args) && (NIL == cached_args.rest())) && v_properties.eql(cached_args.first())) {
					return memoization_state.caching_results(results2);
				    }
				}
			    }
			}
		    }
		}
		{
		    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_optional_section_start_comment_internal(section_key, v_properties)));
		    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(section_key, v_properties));
		    return memoization_state.caching_results(results);
		}
	    }
	}
    }

    public static SubLObject fact_sheet_optional_section_start_comment(final SubLObject section_key, SubLObject v_properties) {
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	SubLObject caching_state = fact_sheets.$fact_sheet_optional_section_start_comment_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.FACT_SHEET_OPTIONAL_SECTION_START_COMMENT, fact_sheets.$fact_sheet_optional_section_start_comment_caching_state$, NIL, EQL, TWO_INTEGER, ZERO_INTEGER);
	}
	final SubLObject sxhash = memoization_state.sxhash_calc_2(section_key, v_properties);
	final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
	if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    SubLObject cdolist_list_var = collisions;
	    SubLObject collision = NIL;
	    collision = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cached_args = collision.first();
		final SubLObject results2 = second(collision);
		if (section_key.eql(cached_args.first())) {
		    cached_args = cached_args.rest();
		    if (((NIL != cached_args) && (NIL == cached_args.rest())) && v_properties.eql(cached_args.first())) {
			return memoization_state.caching_results(results2);
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		collision = cdolist_list_var.first();
	    }
	}
	final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_optional_section_start_comment_internal(section_key, v_properties)));
	memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(section_key, v_properties));
	return memoization_state.caching_results(results3);
    }

    public static final SubLObject clear_fact_sheet_optional_section_end_comment_alt() {
	{
	    SubLObject cs = $fact_sheet_optional_section_end_comment_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_fact_sheet_optional_section_end_comment() {
	final SubLObject cs = fact_sheets.$fact_sheet_optional_section_end_comment_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_fact_sheet_optional_section_end_comment_alt(SubLObject section_key) {
	return memoization_state.caching_state_remove_function_results_with_args($fact_sheet_optional_section_end_comment_caching_state$.getGlobalValue(), list(section_key), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_fact_sheet_optional_section_end_comment(final SubLObject section_key) {
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_optional_section_end_comment_caching_state$.getGlobalValue(), list(section_key), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_optional_section_end_comment_internal_alt(SubLObject section_key) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject comment = NIL;
		SubLObject pcase_var = section_key;
		if (pcase_var.eql($COPYRIGHT)) {
		    comment = html_macros.$html_italic_tail$.getGlobalValue();
		} else {
		    {
			SubLObject stream = NIL;
			try {
			    stream = make_private_string_output_stream();
			    {
				SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
				try {
				    html_macros.$html_stream$.bind(stream, thread);
				    html_terpri(UNPROVIDED);
				    html_markup(html_macros.$html_comment_head$.getGlobalValue());
				    {
					SubLObject _prev_bind_0_246 = html_macros.$html_safe_print$.currentBinding(thread);
					try {
					    html_macros.$html_safe_print$.bind(T, thread);
					    html_princ(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_optional_section_end_string(section_key));
					} finally {
					    html_macros.$html_safe_print$.rebind(_prev_bind_0_246, thread);
					}
				    }
				    html_markup(html_macros.$html_comment_tail$.getGlobalValue());
				    html_terpri(UNPROVIDED);
				} finally {
				    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
				}
			    }
			    comment = get_output_stream_string(stream);
			} finally {
			    {
				SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
				try {
				    $is_thread_performing_cleanupP$.bind(T, thread);
				    close(stream, UNPROVIDED);
				} finally {
				    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
				}
			    }
			}
		    }
		}
		return comment;
	    }
	}
    }

    public static SubLObject fact_sheet_optional_section_end_comment_internal(final SubLObject section_key) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject comment = NIL;
	if (section_key.eql($COPYRIGHT)) {
	    comment = html_macros.$html_italic_tail$.getGlobalValue();
	} else {
	    SubLObject stream = NIL;
	    try {
		stream = make_private_string_output_stream();
		final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
		try {
		    html_macros.$html_stream$.bind(stream, thread);
		    html_terpri(UNPROVIDED);
		    html_markup(html_macros.$html_comment_head$.getGlobalValue());
		    final SubLObject _prev_bind_0_$157 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			html_princ(fact_sheets.fact_sheet_optional_section_end_string(section_key));
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_0_$157, thread);
		    }
		    html_markup(html_macros.$html_comment_tail$.getGlobalValue());
		    html_terpri(UNPROVIDED);
		} finally {
		    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
		}
		comment = get_output_stream_string(stream);
	    } finally {
		final SubLObject _prev_bind_2 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values = getValuesAsVector();
		    close(stream, UNPROVIDED);
		    restoreValuesFromVector(_values);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
		}
	    }
	}
	return comment;
    }

    public static final SubLObject fact_sheet_optional_section_end_comment_alt(SubLObject section_key) {
	{
	    SubLObject caching_state = $fact_sheet_optional_section_end_comment_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(FACT_SHEET_OPTIONAL_SECTION_END_COMMENT, $fact_sheet_optional_section_end_comment_caching_state$, NIL, EQL, ONE_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject results = memoization_state.caching_state_lookup(caching_state, section_key, $kw127$_MEMOIZED_ITEM_NOT_FOUND_);
		if (results == $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_optional_section_end_comment_internal(section_key)));
		    memoization_state.caching_state_put(caching_state, section_key, results, UNPROVIDED);
		}
		return memoization_state.caching_results(results);
	    }
	}
    }

    public static SubLObject fact_sheet_optional_section_end_comment(final SubLObject section_key) {
	SubLObject caching_state = fact_sheets.$fact_sheet_optional_section_end_comment_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.FACT_SHEET_OPTIONAL_SECTION_END_COMMENT, fact_sheets.$fact_sheet_optional_section_end_comment_caching_state$, NIL, EQL, ONE_INTEGER, ZERO_INTEGER);
	}
	SubLObject results = memoization_state.caching_state_lookup(caching_state, section_key, memoization_state.$memoized_item_not_found$.getGlobalValue());
	if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    results = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_optional_section_end_comment_internal(section_key)));
	    memoization_state.caching_state_put(caching_state, section_key, results, UNPROVIDED);
	}
	return memoization_state.caching_results(results);
    }

    public static final SubLObject fact_sheet_optional_section_start_string_alt(SubLObject section_key) {
	return cconcatenate($str_alt629$Start_Fact_Sheet_Section_, format_nil.format_nil_s_no_copy(section_key));
    }

    public static SubLObject fact_sheet_optional_section_start_string(final SubLObject section_key) {
	return cconcatenate(fact_sheets.$$$Start_Fact_Sheet_Section_, format_nil.format_nil_s_no_copy(section_key));
    }

    public static final SubLObject fact_sheet_optional_section_end_string_alt(SubLObject section_key) {
	return cconcatenate($str_alt630$End_Fact_Sheet_Section_, format_nil.format_nil_s_no_copy(section_key));
    }

    public static SubLObject fact_sheet_optional_section_end_string(final SubLObject section_key) {
	return cconcatenate(fact_sheets.$$$End_Fact_Sheet_Section_, format_nil.format_nil_s_no_copy(section_key));
    }

    public static final SubLObject term_has_precached_fact_sheetP_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject term_id = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(v_term, NIL);
		SubLObject filename = NIL;
		SubLObject fell_back_on_defaultP = NIL;
		if ((domain_mt == $ANY) || (language_mt == $ANY)) {
		    {
			SubLObject mt_alist = com.cyc.cycjava.cycl.fact_sheets.mts_with_precached_fact_sheet_data_for_term(v_term, verbosity);
			if (((NIL != mt_alist) && (domain_mt == $ANY)) && (language_mt == $ANY)) {
			    return values(T, NIL);
			} else {
			    if (domain_mt == $ANY) {
				{
				    SubLObject cdolist_list_var = mt_alist;
				    SubLObject cons = NIL;
				    for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
					{
					    SubLObject datum = cons;
					    SubLObject current = datum;
					    SubLObject domain_mt_247 = NIL;
					    SubLObject language_mts = NIL;
					    destructuring_bind_must_consp(current, datum, $list_alt633);
					    domain_mt_247 = current.first();
					    current = current.rest();
					    language_mts = current;
					    if (NIL != subl_promotions.memberP(language_mt, language_mts, EQUAL, UNPROVIDED)) {
						return values(T, NIL);
					    }
					}
				    }
				}
			    } else {
				if (language_mt == $ANY) {
				    {
					SubLObject cdolist_list_var = mt_alist;
					SubLObject cons = NIL;
					for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
					    {
						SubLObject datum = cons;
						SubLObject current = datum;
						SubLObject known_domain_mt = NIL;
						SubLObject language_mts = NIL;
						destructuring_bind_must_consp(current, datum, $list_alt634);
						known_domain_mt = current.first();
						current = current.rest();
						language_mts = current;
						if (known_domain_mt.equal(domain_mt)) {
						    return values(T, NIL);
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		} else {
		    thread.resetMultipleValues();
		    {
			SubLObject filename_248 = com.cyc.cycjava.cycl.fact_sheets.precached_fact_sheet_file_for_term_id(term_id, verbosity, domain_mt, language_mt, T, v_term);
			SubLObject fell_back_on_defaultP_249 = thread.secondMultipleValue();
			thread.resetMultipleValues();
			filename = filename_248;
			fell_back_on_defaultP = fell_back_on_defaultP_249;
		    }
		}
		return values(list_utilities.sublisp_boolean(filename), fell_back_on_defaultP);
	    }
	}
    }

    public static SubLObject term_has_precached_fact_sheetP(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject term_id = fact_sheets.fact_sheet_term_id(v_term, NIL);
	SubLObject filename = NIL;
	SubLObject fell_back_on_defaultP = NIL;
	if ((domain_mt == $ANY) || (language_mt == $ANY)) {
	    final SubLObject mt_alist = fact_sheets.mts_with_precached_fact_sheet_data_for_term(v_term, verbosity);
	    if (((NIL != mt_alist) && (domain_mt == $ANY)) && (language_mt == $ANY)) {
		return values(T, NIL);
	    }
	    if (domain_mt == $ANY) {
		SubLObject cdolist_list_var = mt_alist;
		SubLObject cons = NIL;
		cons = cdolist_list_var.first();
		while (NIL != cdolist_list_var) {
		    SubLObject current;
		    final SubLObject datum = current = cons;
		    SubLObject domain_mt_$158 = NIL;
		    SubLObject language_mts = NIL;
		    destructuring_bind_must_consp(current, datum, fact_sheets.$list488);
		    domain_mt_$158 = current.first();
		    current = language_mts = current.rest();
		    if (NIL != subl_promotions.memberP(language_mt, language_mts, EQUAL, UNPROVIDED)) {
			return values(T, NIL);
		    }
		    cdolist_list_var = cdolist_list_var.rest();
		    cons = cdolist_list_var.first();
		}
	    } else if (language_mt == $ANY) {
		SubLObject cdolist_list_var = mt_alist;
		SubLObject cons = NIL;
		cons = cdolist_list_var.first();
		while (NIL != cdolist_list_var) {
		    SubLObject current;
		    final SubLObject datum = current = cons;
		    SubLObject known_domain_mt = NIL;
		    SubLObject language_mts = NIL;
		    destructuring_bind_must_consp(current, datum, fact_sheets.$list489);
		    known_domain_mt = current.first();
		    current = language_mts = current.rest();
		    if (known_domain_mt.equal(domain_mt)) {
			return values(T, NIL);
		    }
		    cdolist_list_var = cdolist_list_var.rest();
		    cons = cdolist_list_var.first();
		}
	    }

	} else {
	    thread.resetMultipleValues();
	    final SubLObject filename_$159 = fact_sheets.precached_fact_sheet_file_for_term_id(term_id, verbosity, domain_mt, language_mt, T, v_term);
	    final SubLObject fell_back_on_defaultP_$160 = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    filename = filename_$159;
	    fell_back_on_defaultP = fell_back_on_defaultP_$160;
	}
	return values(list_utilities.sublisp_boolean(filename), fell_back_on_defaultP);
    }

    public static final SubLObject precached_fact_sheet_file_for_term_id_alt(SubLObject term_id, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject allow_fallbackP, SubLObject v_term) {
	if (allow_fallbackP == UNPROVIDED) {
	    allow_fallbackP = T;
	}
	if (v_term == UNPROVIDED) {
	    v_term = NIL;
	}
	{
	    SubLObject filename = NIL;
	    SubLObject fell_back_on_defaultP = NIL;
	    if (NIL == filename) {
		{
		    SubLObject csome_list_var = $list_alt635;
		    SubLObject extension = NIL;
		    for (extension = csome_list_var.first(); !((NIL != filename) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), extension = csome_list_var.first()) {
			filename = nth_value_step_2(nth_value_step_1(ONE_INTEGER), com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_fact_sheet_from_id(term_id, verbosity, domain_mt, language_mt, v_term, extension));
			fell_back_on_defaultP = NIL;
			if (!((NIL == allow_fallbackP) || (NIL != file_utilities.file_existsP(filename)))) {
			    filename = nth_value_step_2(nth_value_step_1(ONE_INTEGER), com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_fact_sheet_from_id(term_id, verbosity, $DEFAULT, $DEFAULT, v_term, extension));
			    if (NIL != file_utilities.file_existsP(filename)) {
				fell_back_on_defaultP = T;
			    } else {
				filename = NIL;
			    }
			}
		    }
		}
	    }
	    return values(filename, fell_back_on_defaultP);
	}
    }

    public static SubLObject precached_fact_sheet_file_for_term_id(final SubLObject term_id, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, SubLObject allow_fallbackP, SubLObject v_term) {
	if (allow_fallbackP == UNPROVIDED) {
	    allow_fallbackP = T;
	}
	if (v_term == UNPROVIDED) {
	    v_term = NIL;
	}
	SubLObject filename = NIL;
	SubLObject fell_back_on_defaultP = NIL;
	if (NIL == filename) {
	    SubLObject csome_list_var = fact_sheets.$list490;
	    SubLObject extension = NIL;
	    extension = csome_list_var.first();
	    while ((NIL == filename) && (NIL != csome_list_var)) {
		filename = nth_value_step_2(nth_value_step_1(ONE_INTEGER), fact_sheets.directory_and_filename_for_fact_sheet_from_id(term_id, verbosity, domain_mt, language_mt, v_term, extension));
		fell_back_on_defaultP = NIL;
		if ((NIL != allow_fallbackP) && (NIL == file_utilities.file_existsP(filename))) {
		    filename = nth_value_step_2(nth_value_step_1(ONE_INTEGER), fact_sheets.directory_and_filename_for_fact_sheet_from_id(term_id, verbosity, $DEFAULT, $DEFAULT, v_term, extension));
		    if (NIL != file_utilities.file_existsP(filename)) {
			fell_back_on_defaultP = T;
		    } else {
			filename = NIL;
		    }
		}
		csome_list_var = csome_list_var.rest();
		extension = csome_list_var.first();
	    }
	}
	return values(filename, fell_back_on_defaultP);
    }

    /**
     * Check to see if we have an appropriate fact sheet precached, and return it if we do.
     */
    @LispMethod(comment = "Check to see if we have an appropriate fact sheet precached, and return it if we do.")
    public static final SubLObject precached_fact_sheet_for_term_in_html_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties, SubLObject allow_fallbackP) {
	if (allow_fallbackP == UNPROVIDED) {
	    allow_fallbackP = T;
	}
	{
	    SubLObject term_id = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(v_term, NIL);
	    return com.cyc.cycjava.cycl.fact_sheets.precached_fact_sheet_for_term_id_in_html(term_id, verbosity, domain_mt, language_mt, v_properties, allow_fallbackP);
	}
    }

    @LispMethod(comment = "Check to see if we have an appropriate fact sheet precached, and return it if we do.")
    public static SubLObject precached_fact_sheet_for_term_in_html(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject v_properties, SubLObject allow_fallbackP) {
	if (allow_fallbackP == UNPROVIDED) {
	    allow_fallbackP = T;
	}
	final SubLObject term_id = fact_sheets.fact_sheet_term_id(v_term, NIL);
	return fact_sheets.precached_fact_sheet_for_term_id_in_html(term_id, verbosity, domain_mt, language_mt, v_properties, allow_fallbackP);
    }

    /**
    * Check to see if we have an appropriate fact sheet precached, and return it if we do.
    */

    /**
     * Check to see if we have an appropriate fact sheet precached, and return it if we do.
     */
    @LispMethod(comment = "Check to see if we have an appropriate fact sheet precached, and return it if we do.")
    public static final SubLObject precached_fact_sheet_for_term_id_in_html_alt(SubLObject term_id, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties, SubLObject allow_fallbackP) {
	if (allow_fallbackP == UNPROVIDED) {
	    allow_fallbackP = T;
	}
	{
	    SubLObject filename = nth_value_step_2(nth_value_step_1(ONE_INTEGER), com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_fact_sheet_from_id(term_id, verbosity, domain_mt, language_mt, NIL, $$$html));
	    SubLObject v_term = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_id(term_id, UNPROVIDED);
	    SubLObject fell_back_on_defaultP = NIL;
	    if (NIL != filename) {
		{
		    SubLObject formatting_guidelines_file = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_formatting_guidelines_file(filename, UNPROVIDED);
		    SubLObject html = NIL;
		    SubLObject formatting_guidelines = NIL;
		    SubLObject ignore_errors_tag = NIL;
		    try {
			{
			    SubLObject _prev_bind_0 = currentBinding(Errors.$error_handler$);
			    try {
				bind(Errors.$error_handler$, symbol_function(IGNORE_ERRORS_HANDLER));
				try {
				    html = string_utilities.read_string_from_file(filename, UNPROVIDED, UNPROVIDED);
				    formatting_guidelines = com.cyc.cycjava.cycl.fact_sheets.load_fact_sheet_formatting_guidelines(formatting_guidelines_file);
				} catch (Throwable catch_var) {
				    Errors.handleThrowable(catch_var, NIL);
				}
			    } finally {
				rebind(Errors.$error_handler$, _prev_bind_0);
			    }
			}
		    } catch (Throwable ccatch_env_var) {
			ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, $IGNORE_ERRORS_TARGET);
		    }
		    if (html.isString()) {
			html = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_html_replace_placeholders(com.cyc.cycjava.cycl.fact_sheets.possibly_remove_fact_sheet_sections(html, v_properties, v_term), domain_mt);
			if (NIL != fell_back_on_defaultP) {
			    formatting_guidelines = putf(formatting_guidelines, $kw639$FELL_BACK_ON_DEFAULT_, $TRUE);
			}
			return list(html, formatting_guidelines);
		    } else {
			if ((NIL != allow_fallbackP) && ((language_mt != $DEFAULT) || (domain_mt != $DEFAULT))) {
			    return com.cyc.cycjava.cycl.fact_sheets.precached_fact_sheet_for_term_id_in_html(term_id, verbosity, $DEFAULT, $DEFAULT, v_properties, NIL);
			}
		    }
		}
	    }
	}
	return NIL;
    }

    @LispMethod(comment = "Check to see if we have an appropriate fact sheet precached, and return it if we do.")
    public static SubLObject precached_fact_sheet_for_term_id_in_html(final SubLObject term_id, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject v_properties, SubLObject allow_fallbackP) {
	if (allow_fallbackP == UNPROVIDED) {
	    allow_fallbackP = T;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject filename = nth_value_step_2(nth_value_step_1(ONE_INTEGER), fact_sheets.directory_and_filename_for_fact_sheet_from_id(term_id, verbosity, domain_mt, language_mt, NIL, fact_sheets.$$$html));
	final SubLObject v_term = fact_sheets.fact_sheet_term_from_id(term_id, UNPROVIDED);
	final SubLObject fell_back_on_defaultP = NIL;
	if (NIL != filename) {
	    final SubLObject formatting_guidelines_file = fact_sheets.fact_sheet_formatting_guidelines_file(filename, UNPROVIDED);
	    SubLObject html = NIL;
	    SubLObject formatting_guidelines = NIL;
	    SubLObject ignore_errors_tag = NIL;
	    try {
		thread.throwStack.push(fact_sheets.$IGNORE_ERRORS_TARGET);
		final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
		try {
		    Errors.$error_handler$.bind(symbol_function(fact_sheets.IGNORE_ERRORS_HANDLER), thread);
		    try {
			html = string_utilities.read_string_from_file(filename, UNPROVIDED, UNPROVIDED);
			formatting_guidelines = fact_sheets.load_fact_sheet_formatting_guidelines(formatting_guidelines_file);
		    } catch (final Throwable catch_var) {
			Errors.handleThrowable(catch_var, NIL);
		    }
		} finally {
		    Errors.$error_handler$.rebind(_prev_bind_0, thread);
		}
	    } catch (final Throwable ccatch_env_var) {
		ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, fact_sheets.$IGNORE_ERRORS_TARGET);
	    } finally {
		thread.throwStack.pop();
	    }
	    if (html.isString()) {
		html = fact_sheets.fact_sheet_html_replace_placeholders(fact_sheets.possibly_remove_fact_sheet_sections(html, v_properties, v_term), domain_mt);
		if (NIL != fell_back_on_defaultP) {
		    formatting_guidelines = putf(formatting_guidelines, fact_sheets.$kw494$FELL_BACK_ON_DEFAULT_, $TRUE);
		}
		return list(html, formatting_guidelines);
	    }
	    if ((NIL != allow_fallbackP) && ((language_mt != $DEFAULT) || (domain_mt != $DEFAULT))) {
		return fact_sheets.precached_fact_sheet_for_term_id_in_html(term_id, verbosity, $DEFAULT, $DEFAULT, v_properties, NIL);
	    }
	}
	return NIL;
    }

    /**
    * Check to see if we have an appropriate fact sheet precached, and return it if we do.
    */

    public static final SubLObject updated_fact_sheet_data_for_term_and_sentence_alt(SubLObject v_term, SubLObject assertion, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject allow_fallbackP) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	if (allow_fallbackP == UNPROVIDED) {
	    allow_fallbackP = T;
	}
	while (NIL == com.cyc.cycjava.cycl.fact_sheets.allowed_to_update_fact_sheet_with_sentenceP(v_term, verbosity, domain_mt, language_mt, assertion)) {
	    sleep(ONE_INTEGER);
	}
	{
	    SubLObject datum = com.cyc.cycjava.cycl.fact_sheets.cached_fact_sheet_data_for_term(v_term, verbosity, domain_mt, language_mt, allow_fallbackP);
	    SubLObject current = datum;
	    SubLObject data = NIL;
	    SubLObject stats = NIL;
	    SubLObject footnotes = NIL;
	    SubLObject formatting_guidelines = NIL;
	    destructuring_bind_must_consp(current, datum, $list_alt251);
	    data = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt251);
	    stats = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt251);
	    footnotes = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt251);
	    formatting_guidelines = current.first();
	    current = current.rest();
	    if (NIL == current) {
		{
		    SubLObject sentence_data = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentences_for_assertion_and_term(v_term, assertion, domain_mt);
		    SubLObject complete_data = NIL;
		    SubLObject updated_stats = com.cyc.cycjava.cycl.fact_sheets.updated_fact_sheet_stats(stats);
		    SubLObject cdolist_list_var = sentence_data;
		    SubLObject cons = NIL;
		    for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
			{
			    SubLObject datum_250 = cons;
			    SubLObject current_251 = datum_250;
			    SubLObject pred = NIL;
			    SubLObject sentences = NIL;
			    destructuring_bind_must_consp(current_251, datum_250, $list_alt617);
			    pred = current_251.first();
			    current_251 = current_251.rest();
			    sentences = current_251;
			    {
				SubLObject cdolist_list_var_252 = sentences;
				SubLObject sentence = NIL;
				for (sentence = cdolist_list_var_252.first(); NIL != cdolist_list_var_252; cdolist_list_var_252 = cdolist_list_var_252.rest(), sentence = cdolist_list_var_252.first()) {
				    data = list_utilities.alist_push(data, pred, list(cons(sentence, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_group_summary(v_term, list(sentence), verbosity, language_mt, domain_mt, NIL, UNPROVIDED))), UNPROVIDED);
				}
			    }
			}
		    }
		    complete_data = list(data, stats, footnotes, formatting_guidelines);
		    com.cyc.cycjava.cycl.fact_sheets.cache_local_fact_sheet_data(complete_data, v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
		    com.cyc.cycjava.cycl.fact_sheets.mark_fact_sheet_term_modifiable(v_term, verbosity, domain_mt, language_mt);
		    return list(data, updated_stats, footnotes, formatting_guidelines);
		}
	    } else {
		cdestructuring_bind_error(datum, $list_alt251);
	    }
	}
	return NIL;
    }

    public static SubLObject updated_fact_sheet_data_for_term_and_sentence(final SubLObject v_term, final SubLObject assertion, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject allow_fallbackP) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	if (allow_fallbackP == UNPROVIDED) {
	    allow_fallbackP = T;
	}
	while (NIL == fact_sheets.allowed_to_update_fact_sheet_with_sentenceP(v_term, verbosity, domain_mt, language_mt, assertion)) {
	    sleep(ONE_INTEGER);
	}
	SubLObject current;
	final SubLObject datum = current = fact_sheets.cached_fact_sheet_data_for_term(v_term, verbosity, domain_mt, language_mt, allow_fallbackP);
	SubLObject data = NIL;
	SubLObject stats = NIL;
	SubLObject footnotes = NIL;
	SubLObject formatting_guidelines = NIL;
	destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
	data = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
	stats = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
	footnotes = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
	formatting_guidelines = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject sentence_data = fact_sheets.fact_sheet_sentences_for_assertion_and_term(v_term, assertion, domain_mt);
	    SubLObject complete_data = NIL;
	    final SubLObject updated_stats = fact_sheets.updated_fact_sheet_stats(stats);
	    SubLObject cdolist_list_var = sentence_data;
	    SubLObject cons = NIL;
	    cons = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject current_$162;
		final SubLObject datum_$161 = current_$162 = cons;
		SubLObject pred = NIL;
		SubLObject sentences = NIL;
		destructuring_bind_must_consp(current_$162, datum_$161, fact_sheets.$list468);
		pred = current_$162.first();
		current_$162 = current_$162.rest();
		SubLObject cdolist_list_var_$163;
		sentences = cdolist_list_var_$163 = current_$162;
		SubLObject sentence = NIL;
		sentence = cdolist_list_var_$163.first();
		while (NIL != cdolist_list_var_$163) {
		    data = list_utilities.alist_push(data, pred, list(cons(sentence, fact_sheets.fact_sheet_sentence_group_summary(v_term, list(sentence), verbosity, language_mt, domain_mt, NIL, UNPROVIDED))), UNPROVIDED);
		    cdolist_list_var_$163 = cdolist_list_var_$163.rest();
		    sentence = cdolist_list_var_$163.first();
		}
		cdolist_list_var = cdolist_list_var.rest();
		cons = cdolist_list_var.first();
	    }
	    complete_data = list(data, stats, footnotes, formatting_guidelines);
	    fact_sheets.cache_local_fact_sheet_data(complete_data, v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
	    fact_sheets.mark_fact_sheet_term_modifiable(v_term, verbosity, domain_mt, language_mt);
	    return list(data, updated_stats, footnotes, formatting_guidelines);
	}
	cdestructuring_bind_error(datum, fact_sheets.$list80);
	return NIL;
    }

    /**
     * Add SENTENCE to the memory-cached fact sheet for TERM, in a new section called 'Recently Added'
     *
     * @unknown this does not add the assertions, since we want these facts to show up in the Fact Sheet, regardless of
    whether they are visible from the fact sheet mt.
     */
    @LispMethod(comment = "Add SENTENCE to the memory-cached fact sheet for TERM, in a new section called \'Recently Added\'\r\n\r\n@unknown this does not add the assertions, since we want these facts to show up in the Fact Sheet, regardless of\r\nwhether they are visible from the fact sheet mt.")
    public static final SubLObject update_fact_sheet_data_for_term_and_user_added_sentence_alt(SubLObject v_term, SubLObject sentence, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject allow_fallbackP) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	if (allow_fallbackP == UNPROVIDED) {
	    allow_fallbackP = T;
	}
	{
	    SubLObject data = NIL;
	    SubLObject updated_stats = NIL;
	    SubLObject footnotes = NIL;
	    SubLObject formatting_guidelines = NIL;
	    try {
		while (NIL == com.cyc.cycjava.cycl.fact_sheets.allowed_to_update_fact_sheet_with_sentenceP(v_term, verbosity, domain_mt, language_mt, sentence)) {
		    sleep(ONE_INTEGER);
		}
		{
		    SubLObject fact_sheet_data = com.cyc.cycjava.cycl.fact_sheets.cached_fact_sheet_data_for_term(v_term, verbosity, domain_mt, language_mt, allow_fallbackP);
		    if (NIL == fact_sheet_data) {
			fact_sheet_data = list(NIL, com.cyc.cycjava.cycl.fact_sheets.new_fact_sheet_stats(v_term, domain_mt, $NORMAL, ZERO_INTEGER, ZERO_INTEGER, ZERO_INTEGER, ZERO_INTEGER), NIL, NIL);
		    }
		    {
			SubLObject datum = fact_sheet_data;
			SubLObject current = datum;
			SubLObject data_253 = NIL;
			SubLObject stats = NIL;
			SubLObject footnotes_254 = NIL;
			SubLObject formatting_guidelines_255 = NIL;
			destructuring_bind_must_consp(current, datum, $list_alt251);
			data_253 = current.first();
			current = current.rest();
			destructuring_bind_must_consp(current, datum, $list_alt251);
			stats = current.first();
			current = current.rest();
			destructuring_bind_must_consp(current, datum, $list_alt251);
			footnotes_254 = current.first();
			current = current.rest();
			destructuring_bind_must_consp(current, datum, $list_alt251);
			formatting_guidelines_255 = current.first();
			current = current.rest();
			if (NIL == current) {
			    {
				SubLObject sentence_data = list(cons($$$Recently_Added, list(sentence)));
				SubLObject complete_data = NIL;
				updated_stats = com.cyc.cycjava.cycl.fact_sheets.updated_fact_sheet_stats(stats);
				{
				    SubLObject cdolist_list_var = sentence_data;
				    SubLObject cons = NIL;
				    for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
					{
					    SubLObject datum_256 = cons;
					    SubLObject current_257 = datum_256;
					    SubLObject pred = NIL;
					    SubLObject sentences = NIL;
					    destructuring_bind_must_consp(current_257, datum_256, $list_alt617);
					    pred = current_257.first();
					    current_257 = current_257.rest();
					    sentences = current_257;
					    {
						SubLObject cdolist_list_var_258 = sentences;
						SubLObject sentence_259 = NIL;
						for (sentence_259 = cdolist_list_var_258.first(); NIL != cdolist_list_var_258; cdolist_list_var_258 = cdolist_list_var_258.rest(), sentence_259 = cdolist_list_var_258.first()) {
						    data_253 = list_utilities.alist_pushnew(data_253, pred, list(cons(sentence_259, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_group_summary(v_term, list(sentence_259), verbosity, language_mt, domain_mt, NIL, UNPROVIDED))), EQUALP, EQUALP);
						}
					    }
					}
				    }
				}
				complete_data = list(data_253, stats, footnotes_254, formatting_guidelines_255);
				com.cyc.cycjava.cycl.fact_sheets.cache_local_fact_sheet_data(complete_data, v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
			    }
			} else {
			    cdestructuring_bind_error(datum, $list_alt251);
			}
		    }
		}
	    } finally {
		{
		    SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
		    try {
			bind($is_thread_performing_cleanupP$, T);
			com.cyc.cycjava.cycl.fact_sheets.mark_fact_sheet_term_modifiable(v_term, verbosity, domain_mt, language_mt);
		    } finally {
			rebind($is_thread_performing_cleanupP$, _prev_bind_0);
		    }
		}
	    }
	    return list(data, updated_stats, footnotes, formatting_guidelines);
	}
    }

    @LispMethod(comment = "Add SENTENCE to the memory-cached fact sheet for TERM, in a new section called \'Recently Added\'\r\n\r\n@unknown this does not add the assertions, since we want these facts to show up in the Fact Sheet, regardless of\r\nwhether they are visible from the fact sheet mt.")
    public static SubLObject update_fact_sheet_data_for_term_and_user_added_sentence(final SubLObject v_term, final SubLObject sentence, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject allow_fallbackP) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	if (allow_fallbackP == UNPROVIDED) {
	    allow_fallbackP = T;
	}
	final SubLObject data = NIL;
	SubLObject updated_stats = NIL;
	final SubLObject footnotes = NIL;
	final SubLObject formatting_guidelines = NIL;
	try {
	    while (NIL == fact_sheets.allowed_to_update_fact_sheet_with_sentenceP(v_term, verbosity, domain_mt, language_mt, sentence)) {
		sleep(ONE_INTEGER);
	    }
	    SubLObject fact_sheet_data = fact_sheets.cached_fact_sheet_data_for_term(v_term, verbosity, domain_mt, language_mt, allow_fallbackP);
	    if (NIL == fact_sheet_data) {
		fact_sheet_data = list(NIL, fact_sheets.new_fact_sheet_stats(v_term, domain_mt, $NORMAL, ZERO_INTEGER, ZERO_INTEGER, ZERO_INTEGER, ZERO_INTEGER), NIL, NIL);
	    }
	    SubLObject current;
	    final SubLObject datum = current = fact_sheet_data;
	    SubLObject data_$164 = NIL;
	    SubLObject stats = NIL;
	    SubLObject footnotes_$165 = NIL;
	    SubLObject formatting_guidelines_$166 = NIL;
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
	    data_$164 = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
	    stats = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
	    footnotes_$165 = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
	    formatting_guidelines_$166 = current.first();
	    current = current.rest();
	    if (NIL == current) {
		final SubLObject sentence_data = list(cons(fact_sheets.$$$Recently_Added, list(sentence)));
		SubLObject complete_data = NIL;
		updated_stats = fact_sheets.updated_fact_sheet_stats(stats);
		SubLObject cdolist_list_var = sentence_data;
		SubLObject cons = NIL;
		cons = cdolist_list_var.first();
		while (NIL != cdolist_list_var) {
		    SubLObject current_$168;
		    final SubLObject datum_$167 = current_$168 = cons;
		    SubLObject pred = NIL;
		    SubLObject sentences = NIL;
		    destructuring_bind_must_consp(current_$168, datum_$167, fact_sheets.$list468);
		    pred = current_$168.first();
		    current_$168 = current_$168.rest();
		    SubLObject cdolist_list_var_$169;
		    sentences = cdolist_list_var_$169 = current_$168;
		    SubLObject sentence_$170 = NIL;
		    sentence_$170 = cdolist_list_var_$169.first();
		    while (NIL != cdolist_list_var_$169) {
			data_$164 = list_utilities.alist_pushnew(data_$164, pred, list(cons(sentence_$170, fact_sheets.fact_sheet_sentence_group_summary(v_term, list(sentence_$170), verbosity, language_mt, domain_mt, NIL, UNPROVIDED))), EQUALP, EQUALP);
			cdolist_list_var_$169 = cdolist_list_var_$169.rest();
			sentence_$170 = cdolist_list_var_$169.first();
		    }
		    cdolist_list_var = cdolist_list_var.rest();
		    cons = cdolist_list_var.first();
		}
		complete_data = list(data_$164, stats, footnotes_$165, formatting_guidelines_$166);
		fact_sheets.cache_local_fact_sheet_data(complete_data, v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
	    } else {
		cdestructuring_bind_error(datum, fact_sheets.$list80);
	    }
	} finally {
	    final SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
	    try {
		bind($is_thread_performing_cleanupP$, T);
		final SubLObject _values = getValuesAsVector();
		fact_sheets.mark_fact_sheet_term_modifiable(v_term, verbosity, domain_mt, language_mt);
		restoreValuesFromVector(_values);
	    } finally {
		rebind($is_thread_performing_cleanupP$, _prev_bind_0);
	    }
	}
	return list(data, updated_stats, footnotes, formatting_guidelines);
    }

    /**
    * Add SENTENCE to the memory-cached fact sheet for TERM, in a new section called 'Recently Added'
    *
    * @unknown this does not add the assertions, since we want these facts to show up in the Fact Sheet, regardless of
    whether they are visible from the fact sheet mt.
    */

    /**
     * The dual of UPDATE-FACT-SHEET-DATA-FOR-TERM-AND-USER-ADDED-SENTENCE, this removes SENTENCE from the
     * 'Recently Added' section of the factsheet for TERM.  It does not check the rest of the fact sheet, as
     * the mechanism that removes invalid assertions should take care of that
     */
    @LispMethod(comment = "The dual of UPDATE-FACT-SHEET-DATA-FOR-TERM-AND-USER-ADDED-SENTENCE, this removes SENTENCE from the\r\n\'Recently Added\' section of the factsheet for TERM.  It does not check the rest of the fact sheet, as\r\nthe mechanism that removes invalid assertions should take care of that\nThe dual of UPDATE-FACT-SHEET-DATA-FOR-TERM-AND-USER-ADDED-SENTENCE, this removes SENTENCE from the\n\'Recently Added\' section of the factsheet for TERM.  It does not check the rest of the fact sheet, as\nthe mechanism that removes invalid assertions should take care of that")
    public static final SubLObject update_fact_sheet_data_for_term_and_removed_sentence_alt(SubLObject v_term, SubLObject sentence, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject allow_fallbackP) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	if (allow_fallbackP == UNPROVIDED) {
	    allow_fallbackP = T;
	}
	{
	    SubLObject data = NIL;
	    SubLObject updated_stats = NIL;
	    SubLObject footnotes = NIL;
	    SubLObject formatting_guidelines = NIL;
	    try {
		while (NIL == com.cyc.cycjava.cycl.fact_sheets.allowed_to_update_fact_sheet_with_sentenceP(v_term, verbosity, domain_mt, language_mt, sentence)) {
		    sleep(ONE_INTEGER);
		}
		{
		    SubLObject cached_data = com.cyc.cycjava.cycl.fact_sheets.cached_fact_sheet_data_for_term(v_term, verbosity, domain_mt, language_mt, allow_fallbackP);
		    if (NIL != cached_data) {
			{
			    SubLObject datum = cached_data;
			    SubLObject current = datum;
			    SubLObject data_260 = NIL;
			    SubLObject stats = NIL;
			    SubLObject footnotes_261 = NIL;
			    SubLObject formatting_guidelines_262 = NIL;
			    destructuring_bind_must_consp(current, datum, $list_alt251);
			    data_260 = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt251);
			    stats = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt251);
			    footnotes_261 = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt251);
			    formatting_guidelines_262 = current.first();
			    current = current.rest();
			    if (NIL == current) {
				{
				    SubLObject sentence_data = list(cons($$$Recently_Added, list(sentence)));
				    SubLObject complete_data = NIL;
				    updated_stats = com.cyc.cycjava.cycl.fact_sheets.updated_fact_sheet_stats(stats);
				    {
					SubLObject cdolist_list_var = sentence_data;
					SubLObject cons = NIL;
					for (cons = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), cons = cdolist_list_var.first()) {
					    {
						SubLObject datum_263 = cons;
						SubLObject current_264 = datum_263;
						SubLObject pred = NIL;
						SubLObject sentences = NIL;
						destructuring_bind_must_consp(current_264, datum_263, $list_alt617);
						pred = current_264.first();
						current_264 = current_264.rest();
						sentences = current_264;
						{
						    SubLObject cdolist_list_var_265 = sentences;
						    SubLObject sentence_266 = NIL;
						    for (sentence_266 = cdolist_list_var_265.first(); NIL != cdolist_list_var_265; cdolist_list_var_265 = cdolist_list_var_265.rest(), sentence_266 = cdolist_list_var_265.first()) {
							data_260 = list_utilities.alist_remove_from_value(data_260, pred, list(cons(sentence_266, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_sentence_group_summary(v_term, list(sentence_266), verbosity, language_mt, domain_mt, NIL, UNPROVIDED))),
								EQUALP, EQUALP);
						    }
						}
					    }
					}
				    }
				    complete_data = list(data_260, stats, footnotes_261, formatting_guidelines_262);
				    com.cyc.cycjava.cycl.fact_sheets.cache_local_fact_sheet_data(complete_data, v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
				}
			    } else {
				cdestructuring_bind_error(datum, $list_alt251);
			    }
			}
		    }
		}
	    } finally {
		{
		    SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
		    try {
			bind($is_thread_performing_cleanupP$, T);
			com.cyc.cycjava.cycl.fact_sheets.mark_fact_sheet_term_modifiable(v_term, verbosity, domain_mt, language_mt);
		    } finally {
			rebind($is_thread_performing_cleanupP$, _prev_bind_0);
		    }
		}
	    }
	    return list(data, updated_stats, footnotes, formatting_guidelines);
	}
    }

    @LispMethod(comment = "The dual of UPDATE-FACT-SHEET-DATA-FOR-TERM-AND-USER-ADDED-SENTENCE, this removes SENTENCE from the\r\n\'Recently Added\' section of the factsheet for TERM.  It does not check the rest of the fact sheet, as\r\nthe mechanism that removes invalid assertions should take care of that\nThe dual of UPDATE-FACT-SHEET-DATA-FOR-TERM-AND-USER-ADDED-SENTENCE, this removes SENTENCE from the\n\'Recently Added\' section of the factsheet for TERM.  It does not check the rest of the fact sheet, as\nthe mechanism that removes invalid assertions should take care of that")
    public static SubLObject update_fact_sheet_data_for_term_and_removed_sentence(final SubLObject v_term, final SubLObject sentence, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject allow_fallbackP) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	if (allow_fallbackP == UNPROVIDED) {
	    allow_fallbackP = T;
	}
	final SubLObject data = NIL;
	SubLObject updated_stats = NIL;
	final SubLObject footnotes = NIL;
	final SubLObject formatting_guidelines = NIL;
	try {
	    while (NIL == fact_sheets.allowed_to_update_fact_sheet_with_sentenceP(v_term, verbosity, domain_mt, language_mt, sentence)) {
		sleep(ONE_INTEGER);
	    }
	    final SubLObject cached_data = fact_sheets.cached_fact_sheet_data_for_term(v_term, verbosity, domain_mt, language_mt, allow_fallbackP);
	    if (NIL != cached_data) {
		SubLObject current;
		final SubLObject datum = current = cached_data;
		SubLObject data_$171 = NIL;
		SubLObject stats = NIL;
		SubLObject footnotes_$172 = NIL;
		SubLObject formatting_guidelines_$173 = NIL;
		destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
		data_$171 = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
		stats = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
		footnotes_$172 = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, fact_sheets.$list80);
		formatting_guidelines_$173 = current.first();
		current = current.rest();
		if (NIL == current) {
		    final SubLObject sentence_data = list(cons(fact_sheets.$$$Recently_Added, list(sentence)));
		    SubLObject complete_data = NIL;
		    updated_stats = fact_sheets.updated_fact_sheet_stats(stats);
		    SubLObject cdolist_list_var = sentence_data;
		    SubLObject cons = NIL;
		    cons = cdolist_list_var.first();
		    while (NIL != cdolist_list_var) {
			SubLObject current_$175;
			final SubLObject datum_$174 = current_$175 = cons;
			SubLObject pred = NIL;
			SubLObject sentences = NIL;
			destructuring_bind_must_consp(current_$175, datum_$174, fact_sheets.$list468);
			pred = current_$175.first();
			current_$175 = current_$175.rest();
			SubLObject cdolist_list_var_$176;
			sentences = cdolist_list_var_$176 = current_$175;
			SubLObject sentence_$177 = NIL;
			sentence_$177 = cdolist_list_var_$176.first();
			while (NIL != cdolist_list_var_$176) {
			    data_$171 = list_utilities.alist_remove_from_value(data_$171, pred, list(cons(sentence_$177, fact_sheets.fact_sheet_sentence_group_summary(v_term, list(sentence_$177), verbosity, language_mt, domain_mt, NIL, UNPROVIDED))), EQUALP, EQUALP);
			    cdolist_list_var_$176 = cdolist_list_var_$176.rest();
			    sentence_$177 = cdolist_list_var_$176.first();
			}
			cdolist_list_var = cdolist_list_var.rest();
			cons = cdolist_list_var.first();
		    }
		    complete_data = list(data_$171, stats, footnotes_$172, formatting_guidelines_$173);
		    fact_sheets.cache_local_fact_sheet_data(complete_data, v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
		} else {
		    cdestructuring_bind_error(datum, fact_sheets.$list80);
		}
	    }
	} finally {
	    final SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
	    try {
		bind($is_thread_performing_cleanupP$, T);
		final SubLObject _values = getValuesAsVector();
		fact_sheets.mark_fact_sheet_term_modifiable(v_term, verbosity, domain_mt, language_mt);
		restoreValuesFromVector(_values);
	    } finally {
		rebind($is_thread_performing_cleanupP$, _prev_bind_0);
	    }
	}
	return list(data, updated_stats, footnotes, formatting_guidelines);
    }

    /**
    * The dual of UPDATE-FACT-SHEET-DATA-FOR-TERM-AND-USER-ADDED-SENTENCE, this removes SENTENCE from the
    * 'Recently Added' section of the factsheet for TERM.  It does not check the rest of the fact sheet, as
    * the mechanism that removes invalid assertions should take care of that
    */

    public static final SubLObject updated_fact_sheet_stats_alt(SubLObject stats) {
	{
	    SubLObject datum = stats;
	    SubLObject current = datum;
	    SubLObject domain_mt = NIL;
	    SubLObject verbosity = NIL;
	    SubLObject sentence_count = NIL;
	    SubLObject section_count = NIL;
	    SubLObject info_gathering_time = NIL;
	    SubLObject pph_time = NIL;
	    SubLObject second_string = NIL;
	    SubLObject date_string = NIL;
	    SubLObject cyc_image_id = NIL;
	    SubLObject kb_version_string = NIL;
	    SubLObject cyc_revision_string = NIL;
	    destructuring_bind_must_consp(current, datum, $list_alt641);
	    domain_mt = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt641);
	    verbosity = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt641);
	    sentence_count = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt641);
	    section_count = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt641);
	    info_gathering_time = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt641);
	    pph_time = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt641);
	    second_string = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt641);
	    date_string = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt641);
	    cyc_image_id = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt641);
	    kb_version_string = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt641);
	    cyc_revision_string = current.first();
	    current = current.rest();
	    {
		SubLObject v_term = (current.isCons()) ? ((SubLObject) (current.first())) : NIL;
		destructuring_bind_must_listp(current, datum, $list_alt641);
		current = current.rest();
		if (NIL == current) {
		    return com.cyc.cycjava.cycl.fact_sheets.new_fact_sheet_stats(v_term, domain_mt, verbosity, sentence_count, section_count, info_gathering_time, pph_time);
		} else {
		    cdestructuring_bind_error(datum, $list_alt641);
		}
	    }
	}
	return NIL;
    }

    public static SubLObject updated_fact_sheet_stats(final SubLObject stats) {
	SubLObject domain_mt = NIL;
	SubLObject verbosity = NIL;
	SubLObject sentence_count = NIL;
	SubLObject section_count = NIL;
	SubLObject info_gathering_time = NIL;
	SubLObject pph_time = NIL;
	SubLObject second_string = NIL;
	SubLObject date_string = NIL;
	SubLObject cyc_image_id = NIL;
	SubLObject kb_version_string = NIL;
	SubLObject cyc_revision_string = NIL;
	destructuring_bind_must_consp(stats, stats, fact_sheets.$list496);
	domain_mt = stats.first();
	SubLObject current = stats.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list496);
	verbosity = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list496);
	sentence_count = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list496);
	section_count = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list496);
	info_gathering_time = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list496);
	pph_time = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list496);
	second_string = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list496);
	date_string = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list496);
	cyc_image_id = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list496);
	kb_version_string = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, stats, fact_sheets.$list496);
	cyc_revision_string = current.first();
	current = current.rest();
	final SubLObject v_term = (current.isCons()) ? current.first() : NIL;
	destructuring_bind_must_listp(current, stats, fact_sheets.$list496);
	current = current.rest();
	if (NIL == current) {
	    return fact_sheets.new_fact_sheet_stats(v_term, domain_mt, verbosity, sentence_count, section_count, info_gathering_time, pph_time);
	}
	cdestructuring_bind_error(stats, fact_sheets.$list496);
	return NIL;
    }

    /**
     * Check to see if we have an appropriate fact sheet precached, and return it if we do.
     */
    @LispMethod(comment = "Check to see if we have an appropriate fact sheet precached, and return it if we do.")
    public static final SubLObject cached_fact_sheet_data_for_term_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject allow_fallbackP) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	if (allow_fallbackP == UNPROVIDED) {
	    allow_fallbackP = T;
	}
	{
	    SubLObject cached_verbosity = (verbosity.eql($PUBLIC)) ? ((SubLObject) ($NORMAL)) : verbosity;
	    SubLObject term_id = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(v_term, NIL);
	    SubLObject locally_cached_data = com.cyc.cycjava.cycl.fact_sheets.get_cached_local_fact_sheet_data(v_term, cached_verbosity, domain_mt, language_mt);
	    if (NIL != locally_cached_data) {
		return copy_tree(locally_cached_data);
	    }
	    return com.cyc.cycjava.cycl.fact_sheets.precached_fact_sheet_data_for_term_id(term_id, cached_verbosity, domain_mt, language_mt, allow_fallbackP);
	}
    }

    @LispMethod(comment = "Check to see if we have an appropriate fact sheet precached, and return it if we do.")
    public static SubLObject cached_fact_sheet_data_for_term(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject allow_fallbackP) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	if (allow_fallbackP == UNPROVIDED) {
	    allow_fallbackP = T;
	}
	final SubLObject cached_verbosity = (verbosity.eql($PUBLIC)) ? $NORMAL : verbosity;
	final SubLObject term_id = fact_sheets.fact_sheet_term_id(v_term, NIL);
	final SubLObject locally_cached_data = fact_sheets.get_cached_local_fact_sheet_data(v_term, cached_verbosity, domain_mt, language_mt);
	if (NIL != locally_cached_data) {
	    return copy_tree(locally_cached_data);
	}
	final SubLObject data = fact_sheets.precached_fact_sheet_data_for_term_id(term_id, cached_verbosity, domain_mt, language_mt, allow_fallbackP);
	return NIL != data ? data : fact_sheets.precached_fact_sheet_data_for_term_id(fact_sheets.fact_sheet_term_legacy_id(v_term), cached_verbosity, domain_mt, language_mt, allow_fallbackP);
    }

    /**
    * Check to see if we have an appropriate fact sheet precached, and return it if we do.
    */

    public static final SubLObject mts_with_precached_fact_sheet_data_for_term_internal_alt(SubLObject v_term, SubLObject verbosity) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject mts = NIL;
		SubLObject pair_count = ZERO_INTEGER;
		SubLObject term_id = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(v_term, UNPROVIDED);
		SubLObject directory_list = list_utilities.snoc(Strings.string_downcase(princ_to_string(verbosity), UNPROVIDED, UNPROVIDED), com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_path());
		SubLTrampolineFile.checkType(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_directory_from_list(directory_list), DIRECTORY_P);
		{
		    SubLObject directory_contents_var = Filesys.directory(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_directory_from_list(directory_list), NIL);
		    SubLObject progress_message_var = NIL;
		    {
			SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
			try {
			    $silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
			    {
				SubLObject list_var = directory_contents_var;
				$progress_note$.setDynamicValue(progress_message_var, thread);
				$progress_start_time$.setDynamicValue(get_universal_time(), thread);
				$progress_total$.setDynamicValue(length(list_var), thread);
				$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
				{
				    SubLObject _prev_bind_0_267 = $last_percent_progress_index$.currentBinding(thread);
				    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
				    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
				    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
				    try {
					$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
					$last_percent_progress_prediction$.bind(NIL, thread);
					$within_noting_percent_progress$.bind(T, thread);
					$percent_progress_start_time$.bind(get_universal_time(), thread);
					noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
					{
					    SubLObject csome_list_var = list_var;
					    SubLObject subdir = NIL;
					    for (subdir = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), subdir = csome_list_var.first()) {
						note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
						$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
						if (NIL != Filesys.directory_p(NIL != string_utilities.ends_with(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_directory_from_list(directory_list), $str_alt205$_, UNPROVIDED)
							? ((SubLObject) (cconcatenate(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_directory_from_list(directory_list), subdir)))
							: cconcatenate(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_directory_from_list(directory_list), new SubLObject[] { $str_alt205$_, subdir }))) {
						    if (!string_utilities.last_char(subdir).eql(CHAR_slash)) {
							subdir = cconcatenate(subdir, $str_alt205$_);
						    }
						    {
							SubLObject domain_mt_id = Strings.string_right_trim($list_alt643, subdir);
							SubLObject domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_id(domain_mt_id, UNPROVIDED);
							if (NIL == cycl_grammar.cycl_denotational_term_p(domain_mt)) {
							    {
								SubLObject default_domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
								if (domain_mt_id.equal(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(default_domain_mt, T))) {
								    domain_mt = default_domain_mt;
								}
							    }
							}
							if (NIL != cycl_grammar.cycl_denotational_term_p(domain_mt)) {
							    SubLTrampolineFile.checkType(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list)), DIRECTORY_P);
							    {
								SubLObject directory_contents_var_268 = Filesys.directory(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list)), NIL);
								SubLObject progress_message_var_269 = NIL;
								{
								    SubLObject _prev_bind_0_270 = $silent_progressP$.currentBinding(thread);
								    try {
									$silent_progressP$.bind(makeBoolean(!progress_message_var_269.isString()), thread);
									{
									    SubLObject list_var_271 = directory_contents_var_268;
									    $progress_note$.setDynamicValue(progress_message_var_269, thread);
									    $progress_start_time$.setDynamicValue(get_universal_time(), thread);
									    $progress_total$.setDynamicValue(length(list_var_271), thread);
									    $progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
									    {
										SubLObject _prev_bind_0_272 = $last_percent_progress_index$.currentBinding(thread);
										SubLObject _prev_bind_1_273 = $last_percent_progress_prediction$.currentBinding(thread);
										SubLObject _prev_bind_2_274 = $within_noting_percent_progress$.currentBinding(thread);
										SubLObject _prev_bind_3_275 = $percent_progress_start_time$.currentBinding(thread);
										try {
										    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
										    $last_percent_progress_prediction$.bind(NIL, thread);
										    $within_noting_percent_progress$.bind(T, thread);
										    $percent_progress_start_time$.bind(get_universal_time(), thread);
										    noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
										    {
											SubLObject csome_list_var_276 = list_var_271;
											SubLObject language_subdir = NIL;
											for (language_subdir = csome_list_var_276.first(); NIL != csome_list_var_276; csome_list_var_276 = csome_list_var_276.rest(), language_subdir = csome_list_var_276.first()) {
											    note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
											    $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
											    if (NIL != Filesys.directory_p(NIL != string_utilities.ends_with(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list)), $str_alt205$_, UNPROVIDED)
												    ? ((SubLObject) (cconcatenate(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list)), language_subdir)))
												    : cconcatenate(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list)), new SubLObject[] { $str_alt205$_, language_subdir }))) {
												if (!string_utilities.last_char(language_subdir).eql(CHAR_slash)) {
												    language_subdir = cconcatenate(language_subdir, $str_alt205$_);
												}
												{
												    SubLObject language_mt_id = Strings.string_right_trim($list_alt643, language_subdir);
												    SubLObject language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_id(language_mt_id, UNPROVIDED);
												    SubLObject path = (NIL != cycl_grammar.cycl_denotational_term_p(language_mt))
													    ? ((SubLObject) (nth_value_step_2(nth_value_step_1(ONE_INTEGER),
														    com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_fact_sheet_from_id(term_id, verbosity, domain_mt, language_mt, UNPROVIDED, UNPROVIDED))))
													    : NIL;
												    if (NIL == cycl_grammar.cycl_denotational_term_p(language_mt)) {
													{
													    SubLObject default_language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
													    if (language_mt_id.equal(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(default_language_mt, T))) {
														language_mt = default_language_mt;
													    }
													}
												    }
												    if (NIL != file_utilities.file_existsP(path)) {
													mts = list_utilities.alist_push(mts, domain_mt, language_mt, UNPROVIDED);
													pair_count = add(pair_count, ONE_INTEGER);
												    }
												}
											    }
											}
										    }
										    noting_percent_progress_postamble();
										} finally {
										    $percent_progress_start_time$.rebind(_prev_bind_3_275, thread);
										    $within_noting_percent_progress$.rebind(_prev_bind_2_274, thread);
										    $last_percent_progress_prediction$.rebind(_prev_bind_1_273, thread);
										    $last_percent_progress_index$.rebind(_prev_bind_0_272, thread);
										}
									    }
									}
								    } finally {
									$silent_progressP$.rebind(_prev_bind_0_270, thread);
								    }
								}
							    }
							}
						    }
						}
					    }
					}
					noting_percent_progress_postamble();
				    } finally {
					$percent_progress_start_time$.rebind(_prev_bind_3, thread);
					$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
					$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
					$last_percent_progress_index$.rebind(_prev_bind_0_267, thread);
				    }
				}
			    }
			} finally {
			    $silent_progressP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return values(mts, pair_count);
	    }
	}
    }

    public static SubLObject mts_with_precached_fact_sheet_data_for_term_internal(final SubLObject v_term, SubLObject verbosity) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject mts = NIL;
	SubLObject pair_count = ZERO_INTEGER;
	final SubLObject directory_list = list_utilities.snoc(Strings.string_downcase(princ_to_string(verbosity), UNPROVIDED, UNPROVIDED), fact_sheets.fact_sheet_data_path());
	SubLObject cdolist_list_var = list(T, NIL);
	SubLObject legacyP = NIL;
	legacyP = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    final SubLObject _prev_bind_0 = fact_sheets.$use_fact_sheet_legacy_idsP$.currentBinding(thread);
	    try {
		fact_sheets.$use_fact_sheet_legacy_idsP$.bind(legacyP, thread);
		final SubLObject term_id = fact_sheets.fact_sheet_term_id(v_term, UNPROVIDED);
		assert NIL != Filesys.directory_p(fact_sheets.fact_sheet_directory_from_list(directory_list)) : "! Filesys.directory_p(fact_sheets.fact_sheet_directory_from_list(directory_list)) "
			+ ("Filesys.directory_p(fact_sheets.fact_sheet_directory_from_list(directory_list)) " + "CommonSymbols.NIL != Filesys.directory_p(fact_sheets.fact_sheet_directory_from_list(directory_list)) ") + fact_sheets.fact_sheet_directory_from_list(directory_list);
		SubLObject directory_contents_var = Filesys.directory(fact_sheets.fact_sheet_directory_from_list(directory_list), NIL);
		final SubLObject progress_message_var = NIL;
		final SubLObject _prev_bind_0_$178 = $silent_progressP$.currentBinding(thread);
		try {
		    $silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
		    if (NIL.isFunctionSpec()) {
			directory_contents_var = Sort.sort(directory_contents_var, NIL, UNPROVIDED);
		    }
		    final SubLObject list_var = directory_contents_var;
		    final SubLObject _prev_bind_0_$179 = $progress_note$.currentBinding(thread);
		    final SubLObject _prev_bind_2 = $progress_start_time$.currentBinding(thread);
		    final SubLObject _prev_bind_3 = $progress_total$.currentBinding(thread);
		    final SubLObject _prev_bind_4 = $progress_sofar$.currentBinding(thread);
		    final SubLObject _prev_bind_5 = $last_percent_progress_index$.currentBinding(thread);
		    final SubLObject _prev_bind_6 = $last_percent_progress_prediction$.currentBinding(thread);
		    final SubLObject _prev_bind_7 = $within_noting_percent_progress$.currentBinding(thread);
		    final SubLObject _prev_bind_8 = $percent_progress_start_time$.currentBinding(thread);
		    try {
			$progress_note$.bind(NIL != progress_message_var ? progress_message_var : fact_sheets.$$$cdolist, thread);
			$progress_start_time$.bind(get_universal_time(), thread);
			$progress_total$.bind(length(list_var), thread);
			$progress_sofar$.bind(ZERO_INTEGER, thread);
			$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
			$last_percent_progress_prediction$.bind(NIL, thread);
			$within_noting_percent_progress$.bind(T, thread);
			$percent_progress_start_time$.bind(get_universal_time(), thread);
			try {
			    noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
			    SubLObject csome_list_var = list_var;
			    SubLObject subdir = NIL;
			    subdir = csome_list_var.first();
			    while (NIL != csome_list_var) {
				if (NIL != Filesys.directory_p(NIL != string_utilities.ends_with(fact_sheets.fact_sheet_directory_from_list(directory_list), fact_sheets.$str500$_, UNPROVIDED) ? cconcatenate(fact_sheets.fact_sheet_directory_from_list(directory_list), subdir)
					: cconcatenate(fact_sheets.fact_sheet_directory_from_list(directory_list), new SubLObject[] { fact_sheets.$str500$_, subdir }))) {
				    if (!string_utilities.last_char(subdir).eql(CHAR_slash)) {
					subdir = cconcatenate(subdir, fact_sheets.$str500$_);
				    }
				    final SubLObject domain_mt_id = Strings.string_right_trim(fact_sheets.$list501, subdir);
				    if (NIL != fact_sheets.fact_sheet_term_idP(domain_mt_id)) {
					SubLObject domain_mt = fact_sheets.fact_sheet_term_from_id(domain_mt_id, UNPROVIDED);
					if (NIL == cycl_grammar.cycl_denotational_term_p(domain_mt)) {
					    final SubLObject default_domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
					    if (domain_mt_id.equal(fact_sheets.fact_sheet_term_id(default_domain_mt, T))) {
						domain_mt = default_domain_mt;
					    }
					}
					if (NIL != cycl_grammar.cycl_denotational_term_p(domain_mt)) {
					    assert NIL != Filesys.directory_p(fact_sheets.fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list))) : "! Filesys.directory_p(fact_sheets.fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list))) "
						    + ("Filesys.directory_p(fact_sheets.fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list))) "
							    + "CommonSymbols.NIL != Filesys.directory_p(fact_sheets.fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list))) ")
						    + fact_sheets.fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list));
					    SubLObject directory_contents_var_$180 = Filesys.directory(fact_sheets.fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list)), NIL);
					    final SubLObject progress_message_var_$181 = NIL;
					    final SubLObject _prev_bind_0_$180 = $silent_progressP$.currentBinding(thread);
					    try {
						$silent_progressP$.bind(makeBoolean(!progress_message_var_$181.isString()), thread);
						if (NIL.isFunctionSpec()) {
						    directory_contents_var_$180 = Sort.sort(directory_contents_var_$180, NIL, UNPROVIDED);
						}
						final SubLObject list_var_$183 = directory_contents_var_$180;
						final SubLObject _prev_bind_0_$181 = $progress_note$.currentBinding(thread);
						final SubLObject _prev_bind_1_$185 = $progress_start_time$.currentBinding(thread);
						final SubLObject _prev_bind_2_$186 = $progress_total$.currentBinding(thread);
						final SubLObject _prev_bind_3_$187 = $progress_sofar$.currentBinding(thread);
						final SubLObject _prev_bind_4_$188 = $last_percent_progress_index$.currentBinding(thread);
						final SubLObject _prev_bind_5_$189 = $last_percent_progress_prediction$.currentBinding(thread);
						final SubLObject _prev_bind_6_$190 = $within_noting_percent_progress$.currentBinding(thread);
						final SubLObject _prev_bind_7_$191 = $percent_progress_start_time$.currentBinding(thread);
						try {
						    $progress_note$.bind(NIL != progress_message_var_$181 ? progress_message_var_$181 : fact_sheets.$$$cdolist, thread);
						    $progress_start_time$.bind(get_universal_time(), thread);
						    $progress_total$.bind(length(list_var_$183), thread);
						    $progress_sofar$.bind(ZERO_INTEGER, thread);
						    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
						    $last_percent_progress_prediction$.bind(NIL, thread);
						    $within_noting_percent_progress$.bind(T, thread);
						    $percent_progress_start_time$.bind(get_universal_time(), thread);
						    try {
							noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
							SubLObject csome_list_var_$192 = list_var_$183;
							SubLObject language_subdir = NIL;
							language_subdir = csome_list_var_$192.first();
							while (NIL != csome_list_var_$192) {
							    if (NIL != Filesys.directory_p(NIL != string_utilities.ends_with(fact_sheets.fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list)), fact_sheets.$str500$_, UNPROVIDED)
								    ? cconcatenate(fact_sheets.fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list)), language_subdir)
								    : cconcatenate(fact_sheets.fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list)), new SubLObject[] { fact_sheets.$str500$_, language_subdir }))) {
								if (!string_utilities.last_char(language_subdir).eql(CHAR_slash)) {
								    language_subdir = cconcatenate(language_subdir, fact_sheets.$str500$_);
								}
								final SubLObject language_mt_id = Strings.string_right_trim(fact_sheets.$list501, language_subdir);
								SubLObject language_mt = fact_sheets.fact_sheet_term_from_id(language_mt_id, UNPROVIDED);
								final SubLObject path = (NIL != cycl_grammar.cycl_denotational_term_p(language_mt))
									? nth_value_step_2(nth_value_step_1(ONE_INTEGER), fact_sheets.directory_and_filename_for_fact_sheet_from_id(term_id, verbosity, domain_mt, language_mt, UNPROVIDED, UNPROVIDED))
									: NIL;
								if (NIL == cycl_grammar.cycl_denotational_term_p(language_mt)) {
								    final SubLObject default_language_mt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
								    if (language_mt_id.equal(fact_sheets.fact_sheet_term_id(default_language_mt, T))) {
									language_mt = default_language_mt;
								    }
								}
								if (NIL != file_utilities.file_existsP(path)) {
								    mts = list_utilities.alist_push(mts, domain_mt, language_mt, UNPROVIDED);
								    pair_count = add(pair_count, ONE_INTEGER);
								}
							    }
							    $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
							    note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
							    csome_list_var_$192 = csome_list_var_$192.rest();
							    language_subdir = csome_list_var_$192.first();
							}
						    } finally {
							final SubLObject _prev_bind_0_$182 = $is_thread_performing_cleanupP$.currentBinding(thread);
							try {
							    $is_thread_performing_cleanupP$.bind(T, thread);
							    final SubLObject _values = getValuesAsVector();
							    noting_percent_progress_postamble();
							    restoreValuesFromVector(_values);
							} finally {
							    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$182, thread);
							}
						    }
						} finally {
						    $percent_progress_start_time$.rebind(_prev_bind_7_$191, thread);
						    $within_noting_percent_progress$.rebind(_prev_bind_6_$190, thread);
						    $last_percent_progress_prediction$.rebind(_prev_bind_5_$189, thread);
						    $last_percent_progress_index$.rebind(_prev_bind_4_$188, thread);
						    $progress_sofar$.rebind(_prev_bind_3_$187, thread);
						    $progress_total$.rebind(_prev_bind_2_$186, thread);
						    $progress_start_time$.rebind(_prev_bind_1_$185, thread);
						    $progress_note$.rebind(_prev_bind_0_$181, thread);
						}
					    } finally {
						$silent_progressP$.rebind(_prev_bind_0_$180, thread);
					    }
					}
				    }
				}
				$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
				note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
				csome_list_var = csome_list_var.rest();
				subdir = csome_list_var.first();
			    }
			} finally {
			    final SubLObject _prev_bind_0_$183 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				final SubLObject _values2 = getValuesAsVector();
				noting_percent_progress_postamble();
				restoreValuesFromVector(_values2);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$183, thread);
			    }
			}
		    } finally {
			$percent_progress_start_time$.rebind(_prev_bind_8, thread);
			$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
			$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
			$last_percent_progress_index$.rebind(_prev_bind_5, thread);
			$progress_sofar$.rebind(_prev_bind_4, thread);
			$progress_total$.rebind(_prev_bind_3, thread);
			$progress_start_time$.rebind(_prev_bind_2, thread);
			$progress_note$.rebind(_prev_bind_0_$179, thread);
		    }
		} finally {
		    $silent_progressP$.rebind(_prev_bind_0_$178, thread);
		}
		if (ZERO_INTEGER.eql(pair_count)) {
		    final SubLObject ddmt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
		    final SubLObject dlmt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
		    final SubLObject path2 = nth_value_step_2(nth_value_step_1(ONE_INTEGER), fact_sheets.directory_and_filename_for_fact_sheet_from_id(term_id, verbosity, ddmt, dlmt, UNPROVIDED, UNPROVIDED));
		    if (NIL != file_utilities.file_existsP(path2)) {
			mts = list_utilities.alist_push(mts, ddmt, dlmt, UNPROVIDED);
			pair_count = add(pair_count, ONE_INTEGER);
		    }
		}
	    } finally {
		fact_sheets.$use_fact_sheet_legacy_idsP$.rebind(_prev_bind_0, thread);
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    legacyP = cdolist_list_var.first();
	}
	return values(mts, pair_count);
    }

    public static final SubLObject mts_with_precached_fact_sheet_data_for_term_alt(SubLObject v_term, SubLObject verbosity) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
		SubLObject caching_state = NIL;
		if (NIL == v_memoization_state) {
		    return com.cyc.cycjava.cycl.fact_sheets.mts_with_precached_fact_sheet_data_for_term_internal(v_term, verbosity);
		}
		caching_state = memoization_state.memoization_state_lookup(v_memoization_state, MTS_WITH_PRECACHED_FACT_SHEET_DATA_FOR_TERM, UNPROVIDED);
		if (NIL == caching_state) {
		    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), MTS_WITH_PRECACHED_FACT_SHEET_DATA_FOR_TERM, TWO_INTEGER, NIL, EQUAL, UNPROVIDED);
		    memoization_state.memoization_state_put(v_memoization_state, MTS_WITH_PRECACHED_FACT_SHEET_DATA_FOR_TERM, caching_state);
		}
		{
		    SubLObject sxhash = memoization_state.sxhash_calc_2(v_term, verbosity);
		    SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
		    if (collisions != $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
			{
			    SubLObject cdolist_list_var = collisions;
			    SubLObject collision = NIL;
			    for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), collision = cdolist_list_var.first()) {
				{
				    SubLObject cached_args = collision.first();
				    SubLObject results2 = second(collision);
				    if (v_term.equal(cached_args.first())) {
					cached_args = cached_args.rest();
					if (((NIL != cached_args) && (NIL == cached_args.rest())) && verbosity.equal(cached_args.first())) {
					    return memoization_state.caching_results(results2);
					}
				    }
				}
			    }
			}
		    }
		    {
			SubLObject results = arg2(thread.resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.mts_with_precached_fact_sheet_data_for_term_internal(v_term, verbosity)));
			memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(v_term, verbosity));
			return memoization_state.caching_results(results);
		    }
		}
	    }
	}
    }

    public static SubLObject mts_with_precached_fact_sheet_data_for_term(final SubLObject v_term, SubLObject verbosity) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
	SubLObject caching_state = NIL;
	if (NIL == v_memoization_state) {
	    return fact_sheets.mts_with_precached_fact_sheet_data_for_term_internal(v_term, verbosity);
	}
	caching_state = memoization_state.memoization_state_lookup(v_memoization_state, fact_sheets.MTS_WITH_PRECACHED_FACT_SHEET_DATA_FOR_TERM, UNPROVIDED);
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), fact_sheets.MTS_WITH_PRECACHED_FACT_SHEET_DATA_FOR_TERM, TWO_INTEGER, NIL, EQUAL, UNPROVIDED);
	    memoization_state.memoization_state_put(v_memoization_state, fact_sheets.MTS_WITH_PRECACHED_FACT_SHEET_DATA_FOR_TERM, caching_state);
	}
	final SubLObject sxhash = memoization_state.sxhash_calc_2(v_term, verbosity);
	final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
	if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    SubLObject cdolist_list_var = collisions;
	    SubLObject collision = NIL;
	    collision = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cached_args = collision.first();
		final SubLObject results2 = second(collision);
		if (v_term.equal(cached_args.first())) {
		    cached_args = cached_args.rest();
		    if (((NIL != cached_args) && (NIL == cached_args.rest())) && verbosity.equal(cached_args.first())) {
			return memoization_state.caching_results(results2);
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		collision = cdolist_list_var.first();
	    }
	}
	final SubLObject results3 = arg2(thread.resetMultipleValues(), multiple_value_list(fact_sheets.mts_with_precached_fact_sheet_data_for_term_internal(v_term, verbosity)));
	memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(v_term, verbosity));
	return memoization_state.caching_results(results3);
    }

    /**
     * Check to see if we have an appropriate fact sheet precached, and return it if we do.
     */
    @LispMethod(comment = "Check to see if we have an appropriate fact sheet precached, and return it if we do.")
    public static final SubLObject precached_fact_sheet_data_for_term_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject allow_fallbackP) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	if (allow_fallbackP == UNPROVIDED) {
	    allow_fallbackP = T;
	}
	{
	    SubLObject term_id = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(v_term, NIL);
	    return com.cyc.cycjava.cycl.fact_sheets.precached_fact_sheet_data_for_term_id(term_id, verbosity, domain_mt, language_mt, allow_fallbackP);
	}
    }

    @LispMethod(comment = "Check to see if we have an appropriate fact sheet precached, and return it if we do.")
    public static SubLObject precached_fact_sheet_data_for_term(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject allow_fallbackP) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	if (allow_fallbackP == UNPROVIDED) {
	    allow_fallbackP = T;
	}
	final SubLObject term_id = fact_sheets.fact_sheet_term_id(v_term, NIL);
	return fact_sheets.precached_fact_sheet_data_for_term_id(term_id, verbosity, domain_mt, language_mt, allow_fallbackP);
    }

    /**
    * Check to see if we have an appropriate fact sheet precached, and return it if we do.
    */

    /**
     * Check to see if we have appropriate fact sheet data precached, and return it if we do.
     *
     * @param FALLBACK
     * 		keywordp; :ALLOWED, :CURRENT, or :FORBIDDEN.
     * @return LISTP; (data stats footnotes formatting-guidelines)
     */
    @LispMethod(comment = "Check to see if we have appropriate fact sheet data precached, and return it if we do.\r\n\r\n@param FALLBACK\r\n\t\tkeywordp; :ALLOWED, :CURRENT, or :FORBIDDEN.\r\n@return LISTP; (data stats footnotes formatting-guidelines)")
    public static final SubLObject precached_fact_sheet_data_for_term_id_alt(SubLObject term_id, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject fallback) {
	if (fallback == UNPROVIDED) {
	    fallback = $ALLOWED;
	}
	if (verbosity.eql($MINI)) {
	    return NIL;
	}
	{
	    SubLObject v_term = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_id(term_id, UNPROVIDED);
	    SubLObject extension = $$$cfasl;
	    SubLObject filename = nth_value_step_2(nth_value_step_1(ONE_INTEGER), com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_fact_sheet_from_id(term_id, verbosity, domain_mt, language_mt, v_term, extension));
	    return com.cyc.cycjava.cycl.fact_sheets.precached_fact_sheet_data_from_file(filename, fallback, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	}
    }

    @LispMethod(comment = "Check to see if we have appropriate fact sheet data precached, and return it if we do.\r\n\r\n@param FALLBACK\r\n\t\tkeywordp; :ALLOWED, :CURRENT, or :FORBIDDEN.\r\n@return LISTP; (data stats footnotes formatting-guidelines)")
    public static SubLObject precached_fact_sheet_data_for_term_id(final SubLObject term_id, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, SubLObject fallback) {
	if (fallback == UNPROVIDED) {
	    fallback = $ALLOWED;
	}
	if (verbosity.eql($MINI)) {
	    return NIL;
	}
	final SubLObject v_term = fact_sheets.fact_sheet_term_from_id(term_id, UNPROVIDED);
	final SubLObject extension = fact_sheets.$$$cfasl;
	final SubLObject filename = nth_value_step_2(nth_value_step_1(ONE_INTEGER), fact_sheets.directory_and_filename_for_fact_sheet_from_id(term_id, verbosity, domain_mt, language_mt, v_term, extension));
	return fact_sheets.precached_fact_sheet_data_from_file(filename, fallback, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    /**
    * Check to see if we have appropriate fact sheet data precached, and return it if we do.
    *
    * @param FALLBACK
    * 		keywordp; :ALLOWED, :CURRENT, or :FORBIDDEN.
    * @return LISTP; (data stats footnotes formatting-guidelines)
    */

    public static final SubLObject precached_fact_sheet_data_from_file_alt(SubLObject filename, SubLObject fallback, SubLObject extension, SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject term_id) {
	if (fallback == UNPROVIDED) {
	    fallback = $ALLOWED;
	}
	if (extension == UNPROVIDED) {
	    extension = $$$cfasl;
	}
	if (v_term == UNPROVIDED) {
	    v_term = NIL;
	}
	if (verbosity == UNPROVIDED) {
	    verbosity = NIL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = NIL;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = NIL;
	}
	if (term_id == UNPROVIDED) {
	    term_id = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL != file_utilities.file_existsP(filename)) {
		if (NIL == v_term) {
		    thread.resetMultipleValues();
		    {
			SubLObject v_term_277 = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_from_filename(filename);
			SubLObject verbosity_278 = thread.secondMultipleValue();
			SubLObject domain_mt_279 = thread.thirdMultipleValue();
			SubLObject language_mt_280 = thread.fourthMultipleValue();
			thread.resetMultipleValues();
			v_term = v_term_277;
			verbosity = verbosity_278;
			domain_mt = domain_mt_279;
			language_mt = language_mt_280;
		    }
		}
		if (NIL == term_id) {
		    term_id = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(v_term, UNPROVIDED);
		}
		{
		    SubLObject formatting_guidelines_file = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_formatting_guidelines_file(filename, extension);
		    SubLObject formatting_guidelines = NIL;
		    SubLObject error_message = NIL;
		    SubLObject fell_back_on_defaultP = eql(fallback, $CURRENT);
		    SubLObject data = NIL;
		    SubLObject stats = NIL;
		    SubLObject footnotes = NIL;
		    if (NIL != $catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
			try {
			    {
				SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
				try {
				    Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
				    try {
					{
					    SubLObject stream = NIL;
					    try {
						{
						    SubLObject _prev_bind_0_281 = stream_macros.$stream_requires_locking$.currentBinding(thread);
						    try {
							stream_macros.$stream_requires_locking$.bind(NIL, thread);
							stream = compatibility.open_binary(filename, $INPUT, NIL);
						    } finally {
							stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_281, thread);
						    }
						}
						if (!stream.isStream()) {
						    Errors.error($str_alt137$Unable_to_open__S, filename);
						}
						{
						    SubLObject stream_282 = stream;
						    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
							if (!stream_282.isStream()) {
							    Errors.error($str_alt220$Cannot_open__A, filename);
							}
						    }
						    data = cfasl_input(stream_282, UNPROVIDED, UNPROVIDED);
						    stats = cfasl_input(stream_282, UNPROVIDED, UNPROVIDED);
						    if (!data.eql(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_under_construction_code())) {
							footnotes = cfasl_input(stream_282, UNPROVIDED, UNPROVIDED);
						    }
						}
					    } finally {
						{
						    SubLObject _prev_bind_0_283 = $is_thread_performing_cleanupP$.currentBinding(thread);
						    try {
							$is_thread_performing_cleanupP$.bind(T, thread);
							if (stream.isStream()) {
							    close(stream, UNPROVIDED);
							}
						    } finally {
							$is_thread_performing_cleanupP$.rebind(_prev_bind_0_283, thread);
						    }
						}
					    }
					}
					if (NIL != $chmod_safe_to_useP$.getDynamicValue(thread)) {
					    file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), $$$664);
					}
				    } catch (Throwable catch_var) {
					Errors.handleThrowable(catch_var, NIL);
				    }
				} finally {
				    Errors.$error_handler$.rebind(_prev_bind_0, thread);
				}
			    }
			} catch (Throwable ccatch_env_var) {
			    error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
			}
		    } else {
			{
			    SubLObject stream = NIL;
			    try {
				{
				    SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
				    try {
					stream_macros.$stream_requires_locking$.bind(NIL, thread);
					stream = compatibility.open_binary(filename, $INPUT, NIL);
				    } finally {
					stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
				    }
				}
				if (!stream.isStream()) {
				    Errors.error($str_alt137$Unable_to_open__S, filename);
				}
				{
				    SubLObject stream_284 = stream;
				    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
					if (!stream_284.isStream()) {
					    Errors.error($str_alt220$Cannot_open__A, filename);
					}
				    }
				    data = cfasl_input(stream_284, UNPROVIDED, UNPROVIDED);
				    stats = cfasl_input(stream_284, UNPROVIDED, UNPROVIDED);
				    if (!data.eql(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_under_construction_code())) {
					footnotes = cfasl_input(stream_284, UNPROVIDED, UNPROVIDED);
				    }
				}
			    } finally {
				{
				    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					if (stream.isStream()) {
					    close(stream, UNPROVIDED);
					}
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
				    }
				}
			    }
			    if (NIL != $chmod_safe_to_useP$.getDynamicValue(thread)) {
				file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), $$$664);
			    }
			}
		    }
		    if (NIL != stats) {
			{
			    SubLObject stats_domain_mt = stats.first();
			    if (!stats_domain_mt.equal(domain_mt)) {
				stats = cons(domain_mt, stats.rest());
			    }
			}
		    }
		    if ((NIL == error_message) && (NIL != file_utilities.file_existsP(formatting_guidelines_file))) {
			{
			    SubLObject ignore_errors_tag = NIL;
			    try {
				{
				    SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
				    try {
					Errors.$error_handler$.bind(symbol_function(IGNORE_ERRORS_HANDLER), thread);
					try {
					    formatting_guidelines = com.cyc.cycjava.cycl.fact_sheets.load_fact_sheet_formatting_guidelines(formatting_guidelines_file);
					} catch (Throwable catch_var) {
					    Errors.handleThrowable(catch_var, NIL);
					}
				    } finally {
					Errors.$error_handler$.rebind(_prev_bind_0, thread);
				    }
				}
			    } catch (Throwable ccatch_env_var) {
				ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, $IGNORE_ERRORS_TARGET);
			    }
			}
		    } else {
			{
			    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
			    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
				com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
				format(stream, $str_alt647$Unable_to_load_formatting_guideli, v_term, formatting_guidelines_file);
				force_output(stream);
			    }
			}
		    }
		    if (NIL != error_message) {
			{
			    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
			    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
				com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
				format(stream, $str_alt648$Error_loading_data_for__S___A, v_term, error_message);
				force_output(stream);
			    }
			}
		    }
		    if (NIL != stats) {
			if (NIL != fell_back_on_defaultP) {
			    formatting_guidelines = putf(formatting_guidelines, $kw639$FELL_BACK_ON_DEFAULT_, $TRUE);
			}
			return list(data, stats, footnotes, formatting_guidelines);
		    } else {
			if (((NIL == stats) && fallback.eql($ALLOWED)) && ((language_mt != $DEFAULT) || (domain_mt != $DEFAULT))) {
			    return com.cyc.cycjava.cycl.fact_sheets.precached_fact_sheet_data_for_term_id(term_id, verbosity, $DEFAULT, $DEFAULT, $CURRENT);
			}
		    }
		}
	    }
	    return NIL;
	}
    }

    public static SubLObject precached_fact_sheet_data_from_file(final SubLObject filename, SubLObject fallback, SubLObject extension, SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject term_id) {
	if (fallback == UNPROVIDED) {
	    fallback = $ALLOWED;
	}
	if (extension == UNPROVIDED) {
	    extension = fact_sheets.$$$cfasl;
	}
	if (v_term == UNPROVIDED) {
	    v_term = NIL;
	}
	if (verbosity == UNPROVIDED) {
	    verbosity = NIL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = NIL;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = NIL;
	}
	if (term_id == UNPROVIDED) {
	    term_id = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	if (NIL != file_utilities.file_existsP(filename)) {
	    if (NIL == v_term) {
		thread.resetMultipleValues();
		final SubLObject v_term_$195 = fact_sheets.fact_sheet_data_from_filename(filename);
		final SubLObject verbosity_$196 = thread.secondMultipleValue();
		final SubLObject domain_mt_$197 = thread.thirdMultipleValue();
		final SubLObject language_mt_$198 = thread.fourthMultipleValue();
		thread.resetMultipleValues();
		v_term = v_term_$195;
		verbosity = verbosity_$196;
		domain_mt = domain_mt_$197;
		language_mt = language_mt_$198;
	    }
	    if (NIL == term_id) {
		term_id = fact_sheets.fact_sheet_term_id(v_term, UNPROVIDED);
	    }
	    final SubLObject formatting_guidelines_file = fact_sheets.fact_sheet_formatting_guidelines_file(filename, extension);
	    SubLObject formatting_guidelines = NIL;
	    SubLObject error_message = NIL;
	    final SubLObject fell_back_on_defaultP = eql(fallback, $CURRENT);
	    SubLObject data = NIL;
	    SubLObject stats = NIL;
	    SubLObject footnotes = NIL;
	    if (NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
		try {
		    thread.throwStack.push($catch_error_message_target$.getGlobalValue());
		    final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
		    try {
			Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
			try {
			    SubLObject stream = NIL;
			    try {
				final SubLObject _prev_bind_0_$199 = stream_macros.$stream_requires_locking$.currentBinding(thread);
				try {
				    stream_macros.$stream_requires_locking$.bind(NIL, thread);
				    stream = compatibility.open_binary(filename, $INPUT);
				} finally {
				    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$199, thread);
				}
				if (!stream.isStream()) {
				    Errors.error(fact_sheets.$str284$Unable_to_open__S, filename);
				}
				final SubLObject stream_$200 = stream;
				if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (!stream_$200.isStream())) {
				    Errors.error(fact_sheets.$str53$Cannot_open__A, filename);
				}
				data = cfasl_input(stream_$200, NIL, NIL);
				stats = cfasl_input(stream_$200, NIL, NIL);
				if (!data.eql(fact_sheets.fact_sheet_under_construction_code())) {
				    footnotes = cfasl_input(stream_$200, NIL, NIL);
				}
			    } finally {
				final SubLObject _prev_bind_0_$200 = $is_thread_performing_cleanupP$.currentBinding(thread);
				try {
				    $is_thread_performing_cleanupP$.bind(T, thread);
				    final SubLObject _values = getValuesAsVector();
				    if (stream.isStream()) {
					close(stream, UNPROVIDED);
				    }
				    restoreValuesFromVector(_values);
				} finally {
				    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$200, thread);
				}
			    }
			    if (NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
				file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), fact_sheets.$$$664);
			    }
			} catch (final Throwable catch_var) {
			    Errors.handleThrowable(catch_var, NIL);
			}
		    } finally {
			Errors.$error_handler$.rebind(_prev_bind_0, thread);
		    }
		} catch (final Throwable ccatch_env_var) {
		    error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
		} finally {
		    thread.throwStack.pop();
		}
	    } else {
		SubLObject stream2 = NIL;
		try {
		    final SubLObject _prev_bind_2 = stream_macros.$stream_requires_locking$.currentBinding(thread);
		    try {
			stream_macros.$stream_requires_locking$.bind(NIL, thread);
			stream2 = compatibility.open_binary(filename, $INPUT);
		    } finally {
			stream_macros.$stream_requires_locking$.rebind(_prev_bind_2, thread);
		    }
		    if (!stream2.isStream()) {
			Errors.error(fact_sheets.$str284$Unable_to_open__S, filename);
		    }
		    final SubLObject stream_$201 = stream2;
		    if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (!stream_$201.isStream())) {
			Errors.error(fact_sheets.$str53$Cannot_open__A, filename);
		    }
		    data = cfasl_input(stream_$201, NIL, NIL);
		    stats = cfasl_input(stream_$201, NIL, NIL);
		    if (!data.eql(fact_sheets.fact_sheet_under_construction_code())) {
			footnotes = cfasl_input(stream_$201, NIL, NIL);
		    }
		} finally {
		    final SubLObject _prev_bind_3 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values2 = getValuesAsVector();
			if (stream2.isStream()) {
			    close(stream2, UNPROVIDED);
			}
			restoreValuesFromVector(_values2);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
		    }
		}
		if (NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
		    file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), fact_sheets.$$$664);
		}
	    }
	    if (NIL != stats) {
		final SubLObject stats_domain_mt = stats.first();
		if (!stats_domain_mt.equal(domain_mt)) {
		    stats = cons(domain_mt, stats.rest());
		}
	    }
	    if ((NIL == error_message) && (NIL != file_utilities.file_existsP(formatting_guidelines_file))) {
		SubLObject ignore_errors_tag = NIL;
		try {
		    thread.throwStack.push(fact_sheets.$IGNORE_ERRORS_TARGET);
		    final SubLObject _prev_bind_2 = Errors.$error_handler$.currentBinding(thread);
		    try {
			Errors.$error_handler$.bind(symbol_function(fact_sheets.IGNORE_ERRORS_HANDLER), thread);
			try {
			    formatting_guidelines = fact_sheets.load_fact_sheet_formatting_guidelines(formatting_guidelines_file);
			} catch (final Throwable catch_var2) {
			    Errors.handleThrowable(catch_var2, NIL);
			}
		    } finally {
			Errors.$error_handler$.rebind(_prev_bind_2, thread);
		    }
		} catch (final Throwable ccatch_env_var2) {
		    ignore_errors_tag = Errors.handleThrowable(ccatch_env_var2, fact_sheets.$IGNORE_ERRORS_TARGET);
		} finally {
		    thread.throwStack.pop();
		}
	    }
	    if (NIL != error_message) {
		final SubLObject stream2 = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream2) && current_process().eql(subl_promotions.initial_process())) || (stream2.isStream() && (NIL != output_stream_p(stream2)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream2);
		    format(stream2, fact_sheets.$str506$Error_loading_data_for__S___A, v_term, error_message);
		    force_output(stream2);
		}
	    }
	    if (NIL != stats) {
		if (NIL != fell_back_on_defaultP) {
		    formatting_guidelines = putf(formatting_guidelines, fact_sheets.$kw494$FELL_BACK_ON_DEFAULT_, $TRUE);
		}
		return list(data, stats, footnotes, formatting_guidelines);
	    }
	    if (((NIL == stats) && fallback.eql($ALLOWED)) && ((language_mt != $DEFAULT) || (domain_mt != $DEFAULT))) {
		return fact_sheets.precached_fact_sheet_data_for_term_id(term_id, verbosity, $DEFAULT, $DEFAULT, $CURRENT);
	    }
	}
	return NIL;
    }

    public static final SubLObject load_fact_sheet_formatting_guidelines_alt(SubLObject formatting_guidelines_file) {
	return cfasl_utilities.cfasl_load(formatting_guidelines_file);
    }

    public static SubLObject load_fact_sheet_formatting_guidelines(final SubLObject formatting_guidelines_file) {
	return cfasl_utilities.cfasl_load(formatting_guidelines_file);
    }

    public static final SubLObject fact_sheet_under_construction_message_alt(SubLObject v_term) {
	return cconcatenate($str_alt649$This_fact_sheet_for_, new SubLObject[] { format_nil.format_nil_s_no_copy(v_term), $str_alt650$_is_under_construction__Come_back });
    }

    public static SubLObject fact_sheet_under_construction_message(final SubLObject v_term) {
	return cconcatenate(fact_sheets.$$$This_fact_sheet_for_, new SubLObject[] { format_nil.format_nil_s_no_copy(v_term), fact_sheets.$str508$_is_under_construction__Come_back });
    }

    public static final SubLObject fact_sheet_under_construction_code_alt() {
	return $fact_sheet_under_construction_code$.getGlobalValue();
    }

    public static SubLObject fact_sheet_under_construction_code() {
	return fact_sheets.$fact_sheet_under_construction_code$.getGlobalValue();
    }

    /**
     *
     *
     * @unknown 
     */
    @LispMethod(comment = "@unknown")
    public static final SubLObject fact_sheet_under_construction_xml_alt(SubLObject v_term, SubLObject stats) {
	return $str_alt133$;
    }

    /**
     *
     *
     * @unknown 
     */
    @LispMethod(comment = "@unknown")
    public static SubLObject fact_sheet_under_construction_xml(final SubLObject v_term, final SubLObject stats) {
	return fact_sheets.$str73$;
    }

    public static final SubLObject fact_sheet_under_construction_html_alt(SubLObject v_term, SubLObject stats) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(stats, FACT_SHEET_STATS_P);
	    {
		SubLObject ans = NIL;
		SubLObject stream = NIL;
		try {
		    stream = make_private_string_output_stream();
		    {
			SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
			try {
			    html_macros.$html_stream$.bind(stream, thread);
			    html_markup(html_macros.$html_html_head$.getGlobalValue());
			    html_markup(html_macros.$html_head_head$.getGlobalValue());
			    html_macros.html_head_content_type();
			    html_markup(html_macros.$html_head_tail$.getGlobalValue());
			    html_source_readability_terpri(UNPROVIDED);
			    {
				SubLObject _prev_bind_0_285 = html_macros.$html_inside_bodyP$.currentBinding(thread);
				try {
				    html_macros.$html_inside_bodyP$.bind(T, thread);
				    html_markup(html_macros.$html_body_head$.getGlobalValue());
				    html_char(CHAR_greater, UNPROVIDED);
				    {
					SubLObject _prev_bind_0_286 = html_macros.$html_safe_print$.currentBinding(thread);
					try {
					    html_macros.$html_safe_print$.bind(T, thread);
					    html_princ(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_under_construction_message(v_term));
					    princ(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_optional_section_start_comment($STATS, UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
					    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_stats(stats, NIL, T);
					    princ(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_optional_section_end_comment($STATS), html_macros.$html_stream$.getDynamicValue(thread));
					    html_source_readability_terpri(UNPROVIDED);
					    html_copyright_notice();
					} finally {
					    html_macros.$html_safe_print$.rebind(_prev_bind_0_286, thread);
					}
				    }
				    html_markup(html_macros.$html_body_tail$.getGlobalValue());
				    html_source_readability_terpri(UNPROVIDED);
				} finally {
				    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_285, thread);
				}
			    }
			    html_markup(html_macros.$html_html_tail$.getGlobalValue());
			    html_source_readability_terpri(UNPROVIDED);
			} finally {
			    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
			}
		    }
		    ans = get_output_stream_string(stream);
		} finally {
		    {
			SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    close(stream, UNPROVIDED);
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return ans;
	    }
	}
    }

    public static SubLObject fact_sheet_under_construction_html(final SubLObject v_term, final SubLObject stats) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	assert NIL != fact_sheets.fact_sheet_stats_p(stats) : "! fact_sheets.fact_sheet_stats_p(stats) " + ("fact_sheets.fact_sheet_stats_p(stats) " + "CommonSymbols.NIL != fact_sheets.fact_sheet_stats_p(stats) ") + stats;
	SubLObject ans = NIL;
	SubLObject stream = NIL;
	try {
	    stream = make_private_string_output_stream();
	    final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
	    try {
		html_macros.$html_stream$.bind(stream, thread);
		html_markup(fact_sheets.$str196$__DOCTYPE_html_PUBLIC_____W3C__DT);
		if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
		    html_source_readability_terpri(UNPROVIDED);
		    html_markup(fact_sheets.$str197$_meta_http_equiv__X_UA_Compatible);
		}
		html_source_readability_terpri(UNPROVIDED);
		final SubLObject _prev_bind_0_$203 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
		try {
		    cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
		    html_markup(html_macros.$html_html_head$.getGlobalValue());
		    html_markup(html_macros.$html_head_head$.getGlobalValue());
		    html_macros.html_head_content_type();
		    html_markup(html_macros.$html_head_tail$.getGlobalValue());
		    html_source_readability_terpri(UNPROVIDED);
		    final SubLObject _prev_bind_0_$204 = html_macros.$html_inside_bodyP$.currentBinding(thread);
		    try {
			html_macros.$html_inside_bodyP$.bind(T, thread);
			html_markup(html_macros.$html_body_head$.getGlobalValue());
			html_char(CHAR_greater, UNPROVIDED);
			final SubLObject _prev_bind_0_$205 = html_macros.$html_safe_print$.currentBinding(thread);
			try {
			    html_macros.$html_safe_print$.bind(T, thread);
			    html_princ(fact_sheets.fact_sheet_under_construction_message(v_term));
			    princ(fact_sheets.fact_sheet_optional_section_start_comment($STATS, UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
			    fact_sheets.print_fact_sheet_stats(stats, NIL, T);
			    princ(fact_sheets.fact_sheet_optional_section_end_comment($STATS), html_macros.$html_stream$.getDynamicValue(thread));
			    html_source_readability_terpri(UNPROVIDED);
			    html_copyright_notice();
			} finally {
			    html_macros.$html_safe_print$.rebind(_prev_bind_0_$205, thread);
			}
			html_markup(html_macros.$html_body_tail$.getGlobalValue());
			html_source_readability_terpri(UNPROVIDED);
		    } finally {
			html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$204, thread);
		    }
		    html_markup(html_macros.$html_html_tail$.getGlobalValue());
		} finally {
		    cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$203, thread);
		}
		html_source_readability_terpri(UNPROVIDED);
	    } finally {
		html_macros.$html_stream$.rebind(_prev_bind_0, thread);
	    }
	    ans = get_output_stream_string(stream);
	} finally {
	    final SubLObject _prev_bind_2 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values = getValuesAsVector();
		close(stream, UNPROVIDED);
		restoreValuesFromVector(_values);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
	    }
	}
	return ans;
    }

    public static final SubLObject note_fact_sheet_under_construction_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	SubLTrampolineFile.checkType(v_term, CYCL_DENOTATIONAL_TERM_P);
	if (domain_mt == $DEFAULT) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == $DEFAULT) {
	    language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	{
	    SubLObject filename = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_under_construction_filename(v_term, verbosity, domain_mt, language_mt);
	    SubLObject stats = com.cyc.cycjava.cycl.fact_sheets.new_fact_sheet_stats(v_term, domain_mt, verbosity, ZERO_INTEGER, ZERO_INTEGER, ZERO_INTEGER, ZERO_INTEGER);
	    cfasl_utilities.cfasl_save(stats, filename);
	    if (NIL != com.cyc.cycjava.cycl.fact_sheets.chmod_safe_to_useP()) {
		file_utilities.chmod(filename, $$$664);
	    }
	    return filename;
	}
    }

    public static SubLObject note_fact_sheet_under_construction(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	assert NIL != cycl_grammar.cycl_denotational_term_p(v_term) : "! cycl_grammar.cycl_denotational_term_p(v_term) " + ("cycl_grammar.cycl_denotational_term_p(v_term) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(v_term) ") + v_term;
	if (domain_mt == $DEFAULT) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == $DEFAULT) {
	    language_mt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	final SubLObject filename = fact_sheets.fact_sheet_under_construction_filename(v_term, verbosity, domain_mt, language_mt);
	final SubLObject stats = fact_sheets.new_fact_sheet_stats(v_term, domain_mt, verbosity, ZERO_INTEGER, ZERO_INTEGER, ZERO_INTEGER, ZERO_INTEGER);
	cfasl_utilities.cfasl_save(stats, filename);
	if (NIL != fact_sheets.chmod_safe_to_useP()) {
	    file_utilities.chmod(filename, fact_sheets.$$$664);
	}
	return filename;
    }

    public static final SubLObject note_fact_sheet_construction_done_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	SubLTrampolineFile.checkType(v_term, CYCL_DENOTATIONAL_TERM_P);
	{
	    SubLObject filename = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_under_construction_filename(v_term, verbosity, domain_mt, language_mt);
	    if (NIL != file_utilities.file_existsP(filename)) {
		Filesys.delete_file(filename);
	    }
	    return filename;
	}
    }

    public static SubLObject note_fact_sheet_construction_done(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	assert NIL != cycl_grammar.cycl_denotational_term_p(v_term) : "! cycl_grammar.cycl_denotational_term_p(v_term) " + ("cycl_grammar.cycl_denotational_term_p(v_term) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(v_term) ") + v_term;
	final SubLObject filename = fact_sheets.fact_sheet_under_construction_filename(v_term, verbosity, domain_mt, language_mt);
	if (NIL != file_utilities.file_existsP(filename)) {
	    Filesys.delete_file(filename);
	}
	return filename;
    }

    public static final SubLObject fact_sheet_under_construction_filename_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject extension = $$$cfasl;
		thread.resetMultipleValues();
		{
		    SubLObject directory = com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, extension);
		    SubLObject regular_filename = thread.secondMultipleValue();
		    thread.resetMultipleValues();
		    if (NIL == Filesys.directory_p(directory)) {
			file_utilities.make_directory_recursive(directory, NIL, NIL != com.cyc.cycjava.cycl.fact_sheets.chmod_safe_to_useP() ? ((SubLObject) ($$$775)) : NIL);
		    }
		    if (NIL == Filesys.directory_p(directory)) {
			Errors.warn($str_alt652$Couldn_t_create_directory_for_fac, v_term, directory);
			return NIL;
		    }
		    return cconcatenate(string_utilities.post_remove(string_utilities.post_remove(regular_filename, extension, UNPROVIDED), $str_alt653$_, UNPROVIDED), new SubLObject[] { $str_alt654$_under_construction_, extension });
		}
	    }
	}
    }

    public static SubLObject fact_sheet_under_construction_filename(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject extension = fact_sheets.$$$cfasl;
	thread.resetMultipleValues();
	final SubLObject directory = fact_sheets.directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, extension);
	final SubLObject regular_filename = thread.secondMultipleValue();
	thread.resetMultipleValues();
	if (NIL == Filesys.directory_p(directory)) {
	    file_utilities.make_directory_recursive(directory, NIL, NIL != fact_sheets.chmod_safe_to_useP() ? fact_sheets.$$$775 : NIL);
	}
	if (NIL == Filesys.directory_p(directory)) {
	    Errors.warn(fact_sheets.$str510$Couldn_t_create_directory_for_fac, v_term, directory);
	    return NIL;
	}
	return cconcatenate(string_utilities.post_remove(string_utilities.post_remove(regular_filename, extension, UNPROVIDED), fact_sheets.$str511$_, UNPROVIDED), new SubLObject[] { fact_sheets.$str512$_under_construction_, extension });
    }

    public static final SubLObject fact_sheet_term_under_constructionP_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject exclude_abandonedP) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (exclude_abandonedP == UNPROVIDED) {
	    exclude_abandonedP = T;
	}
	if (domain_mt == $DEFAULT) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == $DEFAULT) {
	    language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	SubLTrampolineFile.checkType(v_term, CYCL_DENOTATIONAL_TERM_P);
	SubLTrampolineFile.checkType(domain_mt, CYCL_DENOTATIONAL_TERM_P);
	SubLTrampolineFile.checkType(language_mt, CYCL_DENOTATIONAL_TERM_P);
	{
	    SubLObject filename = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_under_construction_filename(v_term, verbosity, domain_mt, language_mt);
	    return com.cyc.cycjava.cycl.fact_sheets.fact_sheet_file_under_constructionP(filename, exclude_abandonedP);
	}
    }

    public static SubLObject fact_sheet_term_under_constructionP(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject exclude_abandonedP) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (exclude_abandonedP == UNPROVIDED) {
	    exclude_abandonedP = T;
	}
	if (domain_mt == $DEFAULT) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == $DEFAULT) {
	    language_mt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	assert NIL != cycl_grammar.cycl_denotational_term_p(v_term) : "! cycl_grammar.cycl_denotational_term_p(v_term) " + ("cycl_grammar.cycl_denotational_term_p(v_term) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(v_term) ") + v_term;
	assert NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) : "! cycl_grammar.cycl_denotational_term_p(domain_mt) " + ("cycl_grammar.cycl_denotational_term_p(domain_mt) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) ") + domain_mt;
	assert NIL != cycl_grammar.cycl_denotational_term_p(language_mt) : "! cycl_grammar.cycl_denotational_term_p(language_mt) " + ("cycl_grammar.cycl_denotational_term_p(language_mt) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(language_mt) ") + language_mt;
	final SubLObject filename = fact_sheets.fact_sheet_under_construction_filename(v_term, verbosity, domain_mt, language_mt);
	return fact_sheets.fact_sheet_file_under_constructionP(filename, exclude_abandonedP);
    }

    public static final SubLObject fact_sheet_file_under_constructionP_alt(SubLObject filename, SubLObject exclude_abandonedP) {
	{
	    SubLObject ans = NIL;
	    if (NIL != file_utilities.file_existsP(filename)) {
		if (NIL != string_utilities.ends_with(filename, $str_alt655$_html, UNPROVIDED)) {
		    return com.cyc.cycjava.cycl.fact_sheets.html_fact_sheet_file_under_constructionP(filename, exclude_abandonedP);
		} else {
		    if (NIL != exclude_abandonedP) {
			{
			    SubLObject file_write_date = Filesys.file_write_date(filename);
			    SubLObject abandonedP = makeBoolean((NIL == file_write_date) || subl_promotions.elapsed_universal_time(file_write_date, UNPROVIDED).numGE(numeric_date_utilities.$seconds_in_a_day$.getGlobalValue()));
			    if (NIL == abandonedP) {
				ans = T;
			    }
			}
		    } else {
			ans = T;
		    }
		}
	    }
	    return ans;
	}
    }

    public static SubLObject fact_sheet_file_under_constructionP(final SubLObject filename, final SubLObject exclude_abandonedP) {
	SubLObject ans = NIL;
	if (NIL != file_utilities.file_existsP(filename)) {
	    if (NIL != string_utilities.ends_with(filename, fact_sheets.$str513$_html, UNPROVIDED)) {
		return fact_sheets.html_fact_sheet_file_under_constructionP(filename, exclude_abandonedP);
	    }
	    if (NIL != exclude_abandonedP) {
		final SubLObject file_write_date = Filesys.file_write_date(filename);
		final SubLObject abandonedP = makeBoolean((NIL == file_write_date) || subl_promotions.elapsed_universal_time(file_write_date, UNPROVIDED).numGE(numeric_date_utilities.$seconds_in_a_day$.getGlobalValue()));
		if (NIL == abandonedP) {
		    ans = T;
		}
	    } else {
		ans = T;
	    }
	}
	return ans;
    }

    public static final SubLObject html_fact_sheet_file_under_constructionP_alt(SubLObject filename, SubLObject exclude_abandonedP) {
	if (exclude_abandonedP == UNPROVIDED) {
	    exclude_abandonedP = NIL;
	}
	{
	    SubLObject file_length = file_utilities.get_file_length(filename);
	    SubLObject file_write_date = Filesys.file_write_date(filename);
	    return makeBoolean((((NIL == file_length) || file_length.numL($int$1024)) && ((!((NIL != exclude_abandonedP) && (NIL != file_write_date))) || subtract(get_universal_time(), file_write_date).numL(numeric_date_utilities.$seconds_in_a_day$.getGlobalValue())))
		    && (NIL != search($str_alt656$under_construction__Come_back_soo, string_utilities.read_string_from_file(filename, UNPROVIDED, UNPROVIDED), symbol_function(EQUALP), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED)));
	}
    }

    public static SubLObject html_fact_sheet_file_under_constructionP(final SubLObject filename, SubLObject exclude_abandonedP) {
	if (exclude_abandonedP == UNPROVIDED) {
	    exclude_abandonedP = NIL;
	}
	final SubLObject file_length = file_utilities.get_file_length(filename);
	final SubLObject file_write_date = Filesys.file_write_date(filename);
	return makeBoolean((((NIL == file_length) || file_length.numL(fact_sheets.$int$1024)) && (((NIL == exclude_abandonedP) || (NIL == file_write_date)) || subtract(get_universal_time(), file_write_date).numL(numeric_date_utilities.$seconds_in_a_day$.getGlobalValue())))
		&& (NIL != search(fact_sheets.$str514$under_construction__Come_back_soo, string_utilities.read_string_from_file(filename, UNPROVIDED, UNPROVIDED), symbol_function(EQUALP), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED)));
    }

    public static final SubLObject fact_sheet_term_update_already_undertakenP_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_under_constructionP(v_term, verbosity, domain_mt, language_mt, T)) || (NIL != com.cyc.cycjava.cycl.fact_sheets.term_fact_sheet_current_on_kb_and_systemP(v_term, verbosity, domain_mt, language_mt)));
    }

    public static SubLObject fact_sheet_term_update_already_undertakenP(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
	return makeBoolean((NIL != fact_sheets.fact_sheet_term_under_constructionP(v_term, verbosity, domain_mt, language_mt, T)) || (NIL != fact_sheets.term_fact_sheet_current_on_kb_and_systemP(v_term, verbosity, domain_mt, language_mt)));
    }

    public static final SubLObject term_fact_sheet_current_on_kb_and_systemP_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (domain_mt == $DEFAULT) {
		domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	    }
	    if (language_mt == $DEFAULT) {
		language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	    }
	    SubLTrampolineFile.checkType(v_term, CYCL_DENOTATIONAL_TERM_P);
	    SubLTrampolineFile.checkType(domain_mt, CYCL_DENOTATIONAL_TERM_P);
	    SubLTrampolineFile.checkType(language_mt, CYCL_DENOTATIONAL_TERM_P);
	    thread.resetMultipleValues();
	    {
		SubLObject directory = com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
		SubLObject filename = thread.secondMultipleValue();
		thread.resetMultipleValues();
		if ((NIL != Filesys.directory_p(directory)) && (NIL != file_utilities.file_existsP(filename))) {
		    {
			SubLObject html = string_utilities.read_string_from_file(filename, UNPROVIDED, UNPROVIDED);
			return makeBoolean(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_kb_version_string(html).equal(operation_communication.kb_version_string()) && com.cyc.cycjava.cycl.fact_sheets.fact_sheet_cyc_revision_string(html).equal(system_info.cyc_revision_string()));
		    }
		}
		return NIL;
	    }
	}
    }

    public static SubLObject term_fact_sheet_current_on_kb_and_systemP(final SubLObject v_term, final SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	if (domain_mt == $DEFAULT) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == $DEFAULT) {
	    language_mt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	assert NIL != cycl_grammar.cycl_denotational_term_p(v_term) : "! cycl_grammar.cycl_denotational_term_p(v_term) " + ("cycl_grammar.cycl_denotational_term_p(v_term) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(v_term) ") + v_term;
	assert NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) : "! cycl_grammar.cycl_denotational_term_p(domain_mt) " + ("cycl_grammar.cycl_denotational_term_p(domain_mt) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) ") + domain_mt;
	assert NIL != cycl_grammar.cycl_denotational_term_p(language_mt) : "! cycl_grammar.cycl_denotational_term_p(language_mt) " + ("cycl_grammar.cycl_denotational_term_p(language_mt) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(language_mt) ") + language_mt;
	thread.resetMultipleValues();
	final SubLObject directory = fact_sheets.directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
	final SubLObject filename = thread.secondMultipleValue();
	thread.resetMultipleValues();
	if ((NIL != Filesys.directory_p(directory)) && (NIL != file_utilities.file_existsP(filename))) {
	    final SubLObject html = string_utilities.read_string_from_file(filename, UNPROVIDED, UNPROVIDED);
	    return makeBoolean(fact_sheets.fact_sheet_kb_version_string(html).equal(operation_communication.kb_version_string()) && fact_sheets.fact_sheet_cyc_revision_string(html).equal(system_info.cyc_revision_string()));
	}
	return NIL;
    }

    public static final SubLObject gather_old_under_construction_fact_sheet_files_alt(SubLObject root) {
	if (root == UNPROVIDED) {
	    root = file_utilities.cyc_home_subdirectory(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_path());
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject now = get_universal_time();
		SubLObject current_directory = NIL;
		SubLObject current_directory_okP = NIL;
		SubLObject files = NIL;
		SubLTrampolineFile.checkType(root, DIRECTORY_P);
		{
		    SubLObject directory_list_var = list(root);
		    SubLObject current_directory_var = NIL;
		    for (current_directory_var = directory_list_var.first(); NIL != directory_list_var; current_directory_var = directory_list_var.first()) {
			directory_list_var = directory_list_var.rest();
			SubLTrampolineFile.checkType(current_directory_var, DIRECTORY_P);
			{
			    SubLObject directory_contents_var = Filesys.directory(current_directory_var, T);
			    SubLObject progress_message_var = ($str_alt657$Gathering_old_under_construction_.isString())
				    ? ((SubLObject) (cconcatenate($str_alt657$Gathering_old_under_construction_, cconcatenate(format_nil.$format_nil_percent$.getGlobalValue(), new SubLObject[] { $str_alt658$_Directory__, format_nil.format_nil_s_no_copy(current_directory_var) }))))
				    : NIL;
			    {
				SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
				try {
				    $silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
				    {
					SubLObject list_var = directory_contents_var;
					$progress_note$.setDynamicValue(progress_message_var, thread);
					$progress_start_time$.setDynamicValue(get_universal_time(), thread);
					$progress_total$.setDynamicValue(length(list_var), thread);
					$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
					{
					    SubLObject _prev_bind_0_287 = $last_percent_progress_index$.currentBinding(thread);
					    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
					    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
					    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
					    try {
						$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
						$last_percent_progress_prediction$.bind(NIL, thread);
						$within_noting_percent_progress$.bind(T, thread);
						$percent_progress_start_time$.bind(get_universal_time(), thread);
						noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
						{
						    SubLObject csome_list_var = list_var;
						    SubLObject file = NIL;
						    for (file = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), file = csome_list_var.first()) {
							note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
							$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
							if (NIL != Filesys.directory_p(file)) {
							    directory_list_var = cons(file, directory_list_var);
							} else {
							    {
								SubLObject this_directory = file_utilities.deconstruct_path(file);
								if (!this_directory.equal(current_directory)) {
								    current_directory = this_directory;
								    current_directory_okP = com.cyc.cycjava.cycl.fact_sheets.possible_fact_sheet_directory_p(current_directory);
								}
								if (((NIL != current_directory_okP) && (NIL != file_utilities.file_existsP(file)))
									&& ((NIL != string_utilities.ends_with(file, $str_alt655$_html, UNPROVIDED)) || (NIL != string_utilities.ends_with(file, $str_alt659$_under_construction_cfasl, UNPROVIDED)))) {
								    {
									SubLObject file_write_date = Filesys.file_write_date(file);
									if (((NIL != file_write_date) && subl_promotions.elapsed_universal_time(file_write_date, now).numG(numeric_date_utilities.$seconds_in_a_day$.getGlobalValue()))
										&& (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_file_under_constructionP(file, NIL))) {
									    print(file, UNPROVIDED);
									    files = cons(file, files);
									}
								    }
								}
							    }
							}
						    }
						}
						noting_percent_progress_postamble();
					    } finally {
						$percent_progress_start_time$.rebind(_prev_bind_3, thread);
						$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
						$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
						$last_percent_progress_index$.rebind(_prev_bind_0_287, thread);
					    }
					}
				    }
				} finally {
				    $silent_progressP$.rebind(_prev_bind_0, thread);
				}
			    }
			}
		    }
		}
		return files;
	    }
	}
    }

    public static SubLObject gather_old_under_construction_fact_sheet_files(SubLObject root) {
	if (root == UNPROVIDED) {
	    root = file_utilities.cyc_home_subdirectory(fact_sheets.fact_sheet_data_path());
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject now = get_universal_time();
	SubLObject current_directory = NIL;
	SubLObject current_directory_okP = NIL;
	SubLObject files = NIL;
	assert NIL != Filesys.directory_p(root) : "! Filesys.directory_p(root) " + ("Filesys.directory_p(root) " + "CommonSymbols.NIL != Filesys.directory_p(root) ") + root;
	SubLObject directory_list_var = list(root);
	SubLObject current_directory_var = NIL;
	current_directory_var = directory_list_var.first();
	while (NIL != directory_list_var) {
	    directory_list_var = directory_list_var.rest();
	    assert NIL != Filesys.directory_p(current_directory_var) : "! Filesys.directory_p(current_directory_var) " + ("Filesys.directory_p(current_directory_var) " + "CommonSymbols.NIL != Filesys.directory_p(current_directory_var) ") + current_directory_var;
	    SubLObject directory_contents_var = Filesys.directory(current_directory_var, T);
	    final SubLObject progress_message_var = (fact_sheets.$str515$Gathering_old_under_construction_.isString())
		    ? cconcatenate(fact_sheets.$str515$Gathering_old_under_construction_, cconcatenate(format_nil.$format_nil_percent$.getGlobalValue(), new SubLObject[] { fact_sheets.$str516$_Directory__, format_nil.format_nil_s_no_copy(current_directory_var) }))
		    : NIL;
	    final SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
	    try {
		$silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
		if (NIL.isFunctionSpec()) {
		    directory_contents_var = Sort.sort(directory_contents_var, NIL, UNPROVIDED);
		}
		final SubLObject list_var = directory_contents_var;
		final SubLObject _prev_bind_0_$206 = $progress_note$.currentBinding(thread);
		final SubLObject _prev_bind_2 = $progress_start_time$.currentBinding(thread);
		final SubLObject _prev_bind_3 = $progress_total$.currentBinding(thread);
		final SubLObject _prev_bind_4 = $progress_sofar$.currentBinding(thread);
		final SubLObject _prev_bind_5 = $last_percent_progress_index$.currentBinding(thread);
		final SubLObject _prev_bind_6 = $last_percent_progress_prediction$.currentBinding(thread);
		final SubLObject _prev_bind_7 = $within_noting_percent_progress$.currentBinding(thread);
		final SubLObject _prev_bind_8 = $percent_progress_start_time$.currentBinding(thread);
		try {
		    $progress_note$.bind(NIL != progress_message_var ? progress_message_var : fact_sheets.$$$cdolist, thread);
		    $progress_start_time$.bind(get_universal_time(), thread);
		    $progress_total$.bind(length(list_var), thread);
		    $progress_sofar$.bind(ZERO_INTEGER, thread);
		    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
		    $last_percent_progress_prediction$.bind(NIL, thread);
		    $within_noting_percent_progress$.bind(T, thread);
		    $percent_progress_start_time$.bind(get_universal_time(), thread);
		    try {
			noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
			SubLObject csome_list_var = list_var;
			SubLObject file = NIL;
			file = csome_list_var.first();
			while (NIL != csome_list_var) {
			    if (NIL != Filesys.directory_p(file)) {
				directory_list_var = cons(file, directory_list_var);
			    } else {
				final SubLObject this_directory = file_utilities.deconstruct_path(file);
				if (!this_directory.equal(current_directory)) {
				    current_directory = this_directory;
				    current_directory_okP = fact_sheets.possible_fact_sheet_directory_p(current_directory);
				}
				if (((NIL != current_directory_okP) && (NIL != file_utilities.file_existsP(file)))
					&& ((NIL != string_utilities.ends_with(file, fact_sheets.$str513$_html, UNPROVIDED)) || (NIL != string_utilities.ends_with(file, fact_sheets.$str517$_under_construction_cfasl, UNPROVIDED)))) {
				    final SubLObject file_write_date = Filesys.file_write_date(file);
				    if (((NIL != file_write_date) && subl_promotions.elapsed_universal_time(file_write_date, now).numG(numeric_date_utilities.$seconds_in_a_day$.getGlobalValue())) && (NIL != fact_sheets.fact_sheet_file_under_constructionP(file, NIL))) {
					print(file, UNPROVIDED);
					files = cons(file, files);
				    }
				}
			    }
			    $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
			    note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
			    csome_list_var = csome_list_var.rest();
			    file = csome_list_var.first();
			}
		    } finally {
			final SubLObject _prev_bind_0_$207 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    final SubLObject _values = getValuesAsVector();
			    noting_percent_progress_postamble();
			    restoreValuesFromVector(_values);
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$207, thread);
			}
		    }
		} finally {
		    $percent_progress_start_time$.rebind(_prev_bind_8, thread);
		    $within_noting_percent_progress$.rebind(_prev_bind_7, thread);
		    $last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
		    $last_percent_progress_index$.rebind(_prev_bind_5, thread);
		    $progress_sofar$.rebind(_prev_bind_4, thread);
		    $progress_total$.rebind(_prev_bind_3, thread);
		    $progress_start_time$.rebind(_prev_bind_2, thread);
		    $progress_note$.rebind(_prev_bind_0_$206, thread);
		}
	    } finally {
		$silent_progressP$.rebind(_prev_bind_0, thread);
	    }
	    current_directory_var = directory_list_var.first();
	}
	return files;
    }

    /**
     *
     *
     * @param EXTENSION;
     * 		cfasl, html, or :ALL
     */
    @LispMethod(comment = "@param EXTENSION;\r\n\t\tcfasl, html, or :ALL")
    public static final SubLObject remove_any_cached_fact_sheet_data_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject extension) {
	if (extension == UNPROVIDED) {
	    extension = $$$cfasl;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(v_term, CYCL_DENOTATIONAL_TERM_P);
	    SubLTrampolineFile.checkType(domain_mt, CYCL_DENOTATIONAL_TERM_P);
	    SubLTrampolineFile.checkType(language_mt, CYCL_DENOTATIONAL_TERM_P);
	    {
		SubLObject valid_extensions = $list_alt635;
		com.cyc.cycjava.cycl.fact_sheets.remove_cached_local_fact_sheet_data(v_term, verbosity, domain_mt, language_mt);
		if (extension.eql($ALL)) {
		    {
			SubLObject cdolist_list_var = valid_extensions;
			SubLObject this_extension = NIL;
			for (this_extension = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), this_extension = cdolist_list_var.first()) {
			    com.cyc.cycjava.cycl.fact_sheets.remove_any_cached_fact_sheet_data(v_term, verbosity, domain_mt, language_mt, this_extension);
			}
		    }
		    return $DELETED;
		} else {
		    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			if (NIL == member(extension, valid_extensions, symbol_function(EQUALP), UNPROVIDED)) {
			    Errors.error($str_alt661$_S_is_not_a_valid_extension__Must, valid_extensions);
			}
		    }
		    thread.resetMultipleValues();
		    {
			SubLObject directory = com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, extension);
			SubLObject filename = thread.secondMultipleValue();
			thread.resetMultipleValues();
			if (NIL != Filesys.directory_p(directory)) {
			    file_utilities.delete_file_if_exists(filename);
			}
			{
			    SubLObject formatting_guidelines_file = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_formatting_guidelines_file(filename, UNPROVIDED);
			    file_utilities.delete_file_if_exists(formatting_guidelines_file);
			}
			return $DELETED;
		    }
		}
	    }
	}
    }

    /**
     *
     *
     * @param EXTENSION;
     * 		cfasl, html, or :ALL
     */
    @LispMethod(comment = "@param EXTENSION;\r\n\t\tcfasl, html, or :ALL")
    public static SubLObject remove_any_cached_fact_sheet_data(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, SubLObject extension) {
	if (extension == UNPROVIDED) {
	    extension = fact_sheets.$$$cfasl;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	assert NIL != cycl_grammar.cycl_denotational_term_p(v_term) : "! cycl_grammar.cycl_denotational_term_p(v_term) " + ("cycl_grammar.cycl_denotational_term_p(v_term) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(v_term) ") + v_term;
	assert NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) : "! cycl_grammar.cycl_denotational_term_p(domain_mt) " + ("cycl_grammar.cycl_denotational_term_p(domain_mt) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) ") + domain_mt;
	assert NIL != cycl_grammar.cycl_denotational_term_p(language_mt) : "! cycl_grammar.cycl_denotational_term_p(language_mt) " + ("cycl_grammar.cycl_denotational_term_p(language_mt) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(language_mt) ") + language_mt;
	final SubLObject valid_extensions = fact_sheets.$list490;
	fact_sheets.remove_cached_local_fact_sheet_data(v_term, verbosity, domain_mt, language_mt);
	if (extension.eql($ALL)) {
	    SubLObject cdolist_list_var = valid_extensions;
	    SubLObject this_extension = NIL;
	    this_extension = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		fact_sheets.remove_any_cached_fact_sheet_data(v_term, verbosity, domain_mt, language_mt, this_extension);
		cdolist_list_var = cdolist_list_var.rest();
		this_extension = cdolist_list_var.first();
	    }
	    return $DELETED;
	}
	if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == member(extension, valid_extensions, symbol_function(EQUALP), UNPROVIDED))) {
	    Errors.error(fact_sheets.$str519$_S_is_not_a_valid_extension__Must, valid_extensions);
	}
	thread.resetMultipleValues();
	final SubLObject directory = fact_sheets.directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, extension);
	final SubLObject filename = thread.secondMultipleValue();
	thread.resetMultipleValues();
	if (NIL != Filesys.directory_p(directory)) {
	    file_utilities.delete_file_if_exists(filename);
	}
	final SubLObject formatting_guidelines_file = fact_sheets.fact_sheet_formatting_guidelines_file(filename, UNPROVIDED);
	file_utilities.delete_file_if_exists(formatting_guidelines_file);
	return $DELETED;
    }

    public static final SubLObject write_fact_sheet_html_and_formatting_guidelines_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject html, SubLObject formatting_guidelines) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(v_term, CYCL_DENOTATIONAL_TERM_P);
	    SubLTrampolineFile.checkType(verbosity, FACT_SHEET_VERBOSITY_P);
	    SubLTrampolineFile.checkType(domain_mt, CYCL_DENOTATIONAL_TERM_P);
	    SubLTrampolineFile.checkType(language_mt, CYCL_DENOTATIONAL_TERM_P);
	    thread.resetMultipleValues();
	    {
		SubLObject directory = com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, $$$html);
		SubLObject filename = thread.secondMultipleValue();
		thread.resetMultipleValues();
		if (NIL == Filesys.directory_p(directory)) {
		    file_utilities.make_directory_recursive(directory, NIL, NIL != com.cyc.cycjava.cycl.fact_sheets.chmod_safe_to_useP() ? ((SubLObject) ($$$775)) : NIL);
		}
		if (NIL == Filesys.directory_p(directory)) {
		    Errors.warn($str_alt662$Couldn_t_create_directory_for_fac, v_term, directory);
		    return NIL;
		}
		{
		    SubLObject error_message = NIL;
		    SubLObject success = NIL;
		    SubLObject count = ZERO_INTEGER;
		    SubLObject max_tries = THREE_INTEGER;
		    while (!((NIL != success) || count.numG(max_tries))) {
			error_message = NIL;
			if (NIL != $catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
			    try {
				{
				    SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
				    try {
					Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
					try {
					    {
						SubLObject stream = NIL;
						try {
						    stream = compatibility.open_text(filename, $OUTPUT, NIL);
						    if (!stream.isStream()) {
							Errors.error($str_alt137$Unable_to_open__S, filename);
						    }
						    {
							SubLObject stream_288 = stream;
							princ(html, stream_288);
							success = T;
						    }
						} finally {
						    {
							SubLObject _prev_bind_0_289 = $is_thread_performing_cleanupP$.currentBinding(thread);
							try {
							    $is_thread_performing_cleanupP$.bind(T, thread);
							    if (stream.isStream()) {
								close(stream, UNPROVIDED);
							    }
							} finally {
							    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_289, thread);
							}
						    }
						}
					    }
					    if (NIL != $chmod_safe_to_useP$.getDynamicValue(thread)) {
						file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), $$$664);
					    }
					} catch (Throwable catch_var) {
					    Errors.handleThrowable(catch_var, NIL);
					}
				    } finally {
					Errors.$error_handler$.rebind(_prev_bind_0, thread);
				    }
				}
			    } catch (Throwable ccatch_env_var) {
				error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
			    }
			} else {
			    {
				SubLObject stream = NIL;
				try {
				    stream = compatibility.open_text(filename, $OUTPUT, NIL);
				    if (!stream.isStream()) {
					Errors.error($str_alt137$Unable_to_open__S, filename);
				    }
				    {
					SubLObject stream_290 = stream;
					princ(html, stream_290);
					success = T;
				    }
				} finally {
				    {
					SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
					try {
					    $is_thread_performing_cleanupP$.bind(T, thread);
					    if (stream.isStream()) {
						close(stream, UNPROVIDED);
					    }
					} finally {
					    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
					}
				    }
				}
				if (NIL != $chmod_safe_to_useP$.getDynamicValue(thread)) {
				    file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), $$$664);
				}
			    }
			}
			if (NIL != error_message) {
			    {
				SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
				if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
				    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
				    format(stream, $str_alt663$Couldn_t_write_fact_sheet_for__S_, new SubLObject[] { v_term, count, error_message });
				    force_output(stream);
				}
			    }
			}
		    }
		    if (NIL != error_message) {
			{
			    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
			    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
				com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
				format(stream, $str_alt664$Couldn_t_write_fact_sheet_for__S_, v_term, error_message);
				force_output(stream);
			    }
			}
			Errors.error(error_message);
		    }
		}
		if (NIL != formatting_guidelines) {
		    {
			SubLObject formatting_guidelines_file = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_formatting_guidelines_file(filename, UNPROVIDED);
			SubLObject error_message = NIL;
			if (NIL != $catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
			    try {
				{
				    SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
				    try {
					Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
					try {
					    {
						SubLObject stream = NIL;
						try {
						    {
							SubLObject _prev_bind_0_291 = stream_macros.$stream_requires_locking$.currentBinding(thread);
							try {
							    stream_macros.$stream_requires_locking$.bind(NIL, thread);
							    stream = compatibility.open_binary(formatting_guidelines_file, $OUTPUT, NIL);
							} finally {
							    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_291, thread);
							}
						    }
						    if (!stream.isStream()) {
							Errors.error($str_alt137$Unable_to_open__S, formatting_guidelines_file);
						    }
						    {
							SubLObject stream_292 = stream;
							if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
							    if (!stream_292.isStream()) {
								Errors.error($str_alt220$Cannot_open__A, formatting_guidelines_file);
							    }
							}
							cfasl_output_externalized(formatting_guidelines, stream_292);
						    }
						} finally {
						    {
							SubLObject _prev_bind_0_293 = $is_thread_performing_cleanupP$.currentBinding(thread);
							try {
							    $is_thread_performing_cleanupP$.bind(T, thread);
							    if (stream.isStream()) {
								close(stream, UNPROVIDED);
							    }
							} finally {
							    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_293, thread);
							}
						    }
						}
					    }
					    if (NIL != $chmod_safe_to_useP$.getDynamicValue(thread)) {
						file_utilities.chmod(file_utilities.logical_pathname_to_physical(formatting_guidelines_file), $$$664);
					    }
					} catch (Throwable catch_var) {
					    Errors.handleThrowable(catch_var, NIL);
					}
				    } finally {
					Errors.$error_handler$.rebind(_prev_bind_0, thread);
				    }
				}
			    } catch (Throwable ccatch_env_var) {
				error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
			    }
			} else {
			    {
				SubLObject stream = NIL;
				try {
				    {
					SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
					try {
					    stream_macros.$stream_requires_locking$.bind(NIL, thread);
					    stream = compatibility.open_binary(formatting_guidelines_file, $OUTPUT, NIL);
					} finally {
					    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
					}
				    }
				    if (!stream.isStream()) {
					Errors.error($str_alt137$Unable_to_open__S, formatting_guidelines_file);
				    }
				    {
					SubLObject stream_294 = stream;
					if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
					    if (!stream_294.isStream()) {
						Errors.error($str_alt220$Cannot_open__A, formatting_guidelines_file);
					    }
					}
					cfasl_output_externalized(formatting_guidelines, stream_294);
				    }
				} finally {
				    {
					SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
					try {
					    $is_thread_performing_cleanupP$.bind(T, thread);
					    if (stream.isStream()) {
						close(stream, UNPROVIDED);
					    }
					} finally {
					    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
					}
				    }
				}
				if (NIL != $chmod_safe_to_useP$.getDynamicValue(thread)) {
				    file_utilities.chmod(file_utilities.logical_pathname_to_physical(formatting_guidelines_file), $$$664);
				}
			    }
			}
			if (NIL != error_message) {
			    {
				SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
				if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
				    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
				    format(stream, $str_alt665$Couldn_t_write_fact_sheet_formatt, v_term, error_message);
				    force_output(stream);
				}
			    }
			    Errors.error(error_message);
			}
		    }
		}
		return filename;
	    }
	}
    }

    public static SubLObject write_fact_sheet_html_and_formatting_guidelines(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject html, final SubLObject formatting_guidelines) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	assert NIL != cycl_grammar.cycl_denotational_term_p(v_term) : "! cycl_grammar.cycl_denotational_term_p(v_term) " + ("cycl_grammar.cycl_denotational_term_p(v_term) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(v_term) ") + v_term;
	assert NIL != fact_sheets.fact_sheet_verbosity_p(verbosity) : "! fact_sheets.fact_sheet_verbosity_p(verbosity) " + ("fact_sheets.fact_sheet_verbosity_p(verbosity) " + "CommonSymbols.NIL != fact_sheets.fact_sheet_verbosity_p(verbosity) ") + verbosity;
	assert NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) : "! cycl_grammar.cycl_denotational_term_p(domain_mt) " + ("cycl_grammar.cycl_denotational_term_p(domain_mt) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) ") + domain_mt;
	assert NIL != cycl_grammar.cycl_denotational_term_p(language_mt) : "! cycl_grammar.cycl_denotational_term_p(language_mt) " + ("cycl_grammar.cycl_denotational_term_p(language_mt) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(language_mt) ") + language_mt;
	thread.resetMultipleValues();
	final SubLObject directory = fact_sheets.directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, fact_sheets.$$$html);
	final SubLObject filename = thread.secondMultipleValue();
	thread.resetMultipleValues();
	if (NIL == Filesys.directory_p(directory)) {
	    file_utilities.make_directory_recursive(directory, NIL, NIL != fact_sheets.chmod_safe_to_useP() ? fact_sheets.$$$775 : NIL);
	}
	if (NIL == Filesys.directory_p(directory)) {
	    Errors.warn(fact_sheets.$str520$Couldn_t_create_directory_for_fac, v_term, directory);
	    return NIL;
	}
	SubLObject error_message = NIL;
	SubLObject success = NIL;
	final SubLObject count = ZERO_INTEGER;
	final SubLObject max_tries = THREE_INTEGER;
	while ((NIL == success) && (!count.numG(max_tries))) {
	    error_message = NIL;
	    if (NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
		try {
		    thread.throwStack.push($catch_error_message_target$.getGlobalValue());
		    final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
		    try {
			Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
			try {
			    SubLObject stream = NIL;
			    try {
				stream = compatibility.open_text(filename, $OUTPUT);
				if (!stream.isStream()) {
				    Errors.error(fact_sheets.$str284$Unable_to_open__S, filename);
				}
				final SubLObject stream_$208 = stream;
				princ(html, stream_$208);
				success = T;
			    } finally {
				final SubLObject _prev_bind_0_$209 = $is_thread_performing_cleanupP$.currentBinding(thread);
				try {
				    $is_thread_performing_cleanupP$.bind(T, thread);
				    final SubLObject _values = getValuesAsVector();
				    if (stream.isStream()) {
					close(stream, UNPROVIDED);
				    }
				    restoreValuesFromVector(_values);
				} finally {
				    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$209, thread);
				}
			    }
			    if (NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
				file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), fact_sheets.$$$664);
			    }
			} catch (final Throwable catch_var) {
			    Errors.handleThrowable(catch_var, NIL);
			}
		    } finally {
			Errors.$error_handler$.rebind(_prev_bind_0, thread);
		    }
		} catch (final Throwable ccatch_env_var) {
		    error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
		} finally {
		    thread.throwStack.pop();
		}
	    } else {
		SubLObject stream2 = NIL;
		try {
		    stream2 = compatibility.open_text(filename, $OUTPUT);
		    if (!stream2.isStream()) {
			Errors.error(fact_sheets.$str284$Unable_to_open__S, filename);
		    }
		    final SubLObject stream_$209 = stream2;
		    princ(html, stream_$209);
		    success = T;
		} finally {
		    final SubLObject _prev_bind_2 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values2 = getValuesAsVector();
			if (stream2.isStream()) {
			    close(stream2, UNPROVIDED);
			}
			restoreValuesFromVector(_values2);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
		    }
		}
		if (NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
		    file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), fact_sheets.$$$664);
		}
	    }
	    if (NIL != error_message) {
		final SubLObject stream2 = fact_sheet_logs.fact_sheet_log_stream();
		if (((T != stream2) || (!current_process().eql(subl_promotions.initial_process()))) && ((!stream2.isStream()) || (NIL == output_stream_p(stream2)))) {
		    continue;
		}
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream2);
		format(stream2, fact_sheets.$str521$Couldn_t_write_fact_sheet_for__S_, new SubLObject[] { v_term, count, error_message });
		force_output(stream2);
	    }
	}
	if (NIL != error_message) {
	    final SubLObject stream2 = fact_sheet_logs.fact_sheet_log_stream();
	    if (((T == stream2) && current_process().eql(subl_promotions.initial_process())) || (stream2.isStream() && (NIL != output_stream_p(stream2)))) {
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream2);
		format(stream2, fact_sheets.$str522$Couldn_t_write_fact_sheet_for__S_, v_term, error_message);
		force_output(stream2);
	    }
	    Errors.error(error_message);
	}
	if (NIL != formatting_guidelines) {
	    final SubLObject formatting_guidelines_file = fact_sheets.fact_sheet_formatting_guidelines_file(filename, UNPROVIDED);
	    SubLObject error_message2 = NIL;
	    if (NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
		try {
		    thread.throwStack.push($catch_error_message_target$.getGlobalValue());
		    final SubLObject _prev_bind_3 = Errors.$error_handler$.currentBinding(thread);
		    try {
			Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
			try {
			    SubLObject stream3 = NIL;
			    try {
				final SubLObject _prev_bind_0_$210 = stream_macros.$stream_requires_locking$.currentBinding(thread);
				try {
				    stream_macros.$stream_requires_locking$.bind(NIL, thread);
				    stream3 = compatibility.open_binary(formatting_guidelines_file, $OUTPUT);
				} finally {
				    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$210, thread);
				}
				if (!stream3.isStream()) {
				    Errors.error(fact_sheets.$str284$Unable_to_open__S, formatting_guidelines_file);
				}
				final SubLObject stream_$210 = stream3;
				if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (!stream_$210.isStream())) {
				    Errors.error(fact_sheets.$str53$Cannot_open__A, formatting_guidelines_file);
				}
				cfasl_output_externalized(formatting_guidelines, stream_$210);
			    } finally {
				final SubLObject _prev_bind_0_$211 = $is_thread_performing_cleanupP$.currentBinding(thread);
				try {
				    $is_thread_performing_cleanupP$.bind(T, thread);
				    final SubLObject _values3 = getValuesAsVector();
				    if (stream3.isStream()) {
					close(stream3, UNPROVIDED);
				    }
				    restoreValuesFromVector(_values3);
				} finally {
				    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$211, thread);
				}
			    }
			    if (NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
				file_utilities.chmod(file_utilities.logical_pathname_to_physical(formatting_guidelines_file), fact_sheets.$$$664);
			    }
			} catch (final Throwable catch_var2) {
			    Errors.handleThrowable(catch_var2, NIL);
			}
		    } finally {
			Errors.$error_handler$.rebind(_prev_bind_3, thread);
		    }
		} catch (final Throwable ccatch_env_var2) {
		    error_message2 = Errors.handleThrowable(ccatch_env_var2, $catch_error_message_target$.getGlobalValue());
		} finally {
		    thread.throwStack.pop();
		}
	    } else {
		SubLObject stream4 = NIL;
		try {
		    final SubLObject _prev_bind_4 = stream_macros.$stream_requires_locking$.currentBinding(thread);
		    try {
			stream_macros.$stream_requires_locking$.bind(NIL, thread);
			stream4 = compatibility.open_binary(formatting_guidelines_file, $OUTPUT);
		    } finally {
			stream_macros.$stream_requires_locking$.rebind(_prev_bind_4, thread);
		    }
		    if (!stream4.isStream()) {
			Errors.error(fact_sheets.$str284$Unable_to_open__S, formatting_guidelines_file);
		    }
		    final SubLObject stream_$211 = stream4;
		    if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (!stream_$211.isStream())) {
			Errors.error(fact_sheets.$str53$Cannot_open__A, formatting_guidelines_file);
		    }
		    cfasl_output_externalized(formatting_guidelines, stream_$211);
		} finally {
		    final SubLObject _prev_bind_5 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values4 = getValuesAsVector();
			if (stream4.isStream()) {
			    close(stream4, UNPROVIDED);
			}
			restoreValuesFromVector(_values4);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
		    }
		}
		if (NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
		    file_utilities.chmod(file_utilities.logical_pathname_to_physical(formatting_guidelines_file), fact_sheets.$$$664);
		}
	    }
	    if (NIL != error_message2) {
		final SubLObject stream4 = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream4) && current_process().eql(subl_promotions.initial_process())) || (stream4.isStream() && (NIL != output_stream_p(stream4)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream4);
		    format(stream4, fact_sheets.$str523$Couldn_t_write_fact_sheet_formatt, v_term, error_message2);
		    force_output(stream4);
		}
		Errors.error(error_message2);
	    }
	}
	return filename;
    }

    public static final SubLObject write_fact_sheet_data_and_formatting_guidelines_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject data, SubLObject stats, SubLObject footnotes, SubLObject formatting_guidelines) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(v_term, CYCL_DENOTATIONAL_TERM_P);
	    SubLTrampolineFile.checkType(verbosity, FACT_SHEET_VERBOSITY_P);
	    SubLTrampolineFile.checkType(domain_mt, CYCL_DENOTATIONAL_TERM_P);
	    SubLTrampolineFile.checkType(language_mt, CYCL_DENOTATIONAL_TERM_P);
	    thread.resetMultipleValues();
	    {
		SubLObject directory = com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, $$$cfasl);
		SubLObject filename = thread.secondMultipleValue();
		thread.resetMultipleValues();
		if (NIL == Filesys.directory_p(directory)) {
		    file_utilities.make_directory_recursive(directory, NIL, NIL != com.cyc.cycjava.cycl.fact_sheets.chmod_safe_to_useP() ? ((SubLObject) ($$$775)) : NIL);
		}
		if (NIL == Filesys.directory_p(directory)) {
		    Errors.warn($str_alt666$Couldn_t_create_directory_for_fac, v_term, directory);
		    return NIL;
		}
		{
		    SubLObject error_message = NIL;
		    if (NIL != $catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
			try {
			    {
				SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
				try {
				    Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
				    try {
					{
					    SubLObject stream = NIL;
					    try {
						{
						    SubLObject _prev_bind_0_295 = stream_macros.$stream_requires_locking$.currentBinding(thread);
						    try {
							stream_macros.$stream_requires_locking$.bind(NIL, thread);
							stream = compatibility.open_binary(filename, $OUTPUT, NIL);
						    } finally {
							stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_295, thread);
						    }
						}
						if (!stream.isStream()) {
						    Errors.error($str_alt137$Unable_to_open__S, filename);
						}
						{
						    SubLObject stream_296 = stream;
						    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
							if (!stream_296.isStream()) {
							    Errors.error($str_alt220$Cannot_open__A, filename);
							}
						    }
						    cfasl_output_externalized(data, stream_296);
						    cfasl_output_externalized(stats, stream_296);
						    cfasl_output_externalized(footnotes, stream_296);
						}
					    } finally {
						{
						    SubLObject _prev_bind_0_297 = $is_thread_performing_cleanupP$.currentBinding(thread);
						    try {
							$is_thread_performing_cleanupP$.bind(T, thread);
							if (stream.isStream()) {
							    close(stream, UNPROVIDED);
							}
						    } finally {
							$is_thread_performing_cleanupP$.rebind(_prev_bind_0_297, thread);
						    }
						}
					    }
					}
					if (NIL != $chmod_safe_to_useP$.getDynamicValue(thread)) {
					    file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), $$$664);
					}
				    } catch (Throwable catch_var) {
					Errors.handleThrowable(catch_var, NIL);
				    }
				} finally {
				    Errors.$error_handler$.rebind(_prev_bind_0, thread);
				}
			    }
			} catch (Throwable ccatch_env_var) {
			    error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
			}
		    } else {
			{
			    SubLObject stream = NIL;
			    try {
				{
				    SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
				    try {
					stream_macros.$stream_requires_locking$.bind(NIL, thread);
					stream = compatibility.open_binary(filename, $OUTPUT, NIL);
				    } finally {
					stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
				    }
				}
				if (!stream.isStream()) {
				    Errors.error($str_alt137$Unable_to_open__S, filename);
				}
				{
				    SubLObject stream_298 = stream;
				    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
					if (!stream_298.isStream()) {
					    Errors.error($str_alt220$Cannot_open__A, filename);
					}
				    }
				    cfasl_output_externalized(data, stream_298);
				    cfasl_output_externalized(stats, stream_298);
				    cfasl_output_externalized(footnotes, stream_298);
				}
			    } finally {
				{
				    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					if (stream.isStream()) {
					    close(stream, UNPROVIDED);
					}
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
				    }
				}
			    }
			    if (NIL != $chmod_safe_to_useP$.getDynamicValue(thread)) {
				file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), $$$664);
			    }
			}
		    }
		    if (NIL != error_message) {
			{
			    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
			    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
				com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
				format(stream, $str_alt667$Couldn_t_write_fact_sheet_data_fo, v_term, error_message);
				force_output(stream);
			    }
			}
			Errors.error(error_message);
		    }
		}
		if (NIL != formatting_guidelines) {
		    {
			SubLObject formatting_guidelines_file = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_formatting_guidelines_file(filename, UNPROVIDED);
			SubLObject error_message = NIL;
			if (NIL != $catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
			    try {
				{
				    SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
				    try {
					Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
					try {
					    {
						SubLObject stream = NIL;
						try {
						    {
							SubLObject _prev_bind_0_299 = stream_macros.$stream_requires_locking$.currentBinding(thread);
							try {
							    stream_macros.$stream_requires_locking$.bind(NIL, thread);
							    stream = compatibility.open_binary(formatting_guidelines_file, $OUTPUT, NIL);
							} finally {
							    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_299, thread);
							}
						    }
						    if (!stream.isStream()) {
							Errors.error($str_alt137$Unable_to_open__S, formatting_guidelines_file);
						    }
						    {
							SubLObject stream_300 = stream;
							if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
							    if (!stream_300.isStream()) {
								Errors.error($str_alt220$Cannot_open__A, formatting_guidelines_file);
							    }
							}
							cfasl_output_externalized(formatting_guidelines, stream_300);
						    }
						} finally {
						    {
							SubLObject _prev_bind_0_301 = $is_thread_performing_cleanupP$.currentBinding(thread);
							try {
							    $is_thread_performing_cleanupP$.bind(T, thread);
							    if (stream.isStream()) {
								close(stream, UNPROVIDED);
							    }
							} finally {
							    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_301, thread);
							}
						    }
						}
					    }
					    if (NIL != $chmod_safe_to_useP$.getDynamicValue(thread)) {
						file_utilities.chmod(file_utilities.logical_pathname_to_physical(formatting_guidelines_file), $$$664);
					    }
					} catch (Throwable catch_var) {
					    Errors.handleThrowable(catch_var, NIL);
					}
				    } finally {
					Errors.$error_handler$.rebind(_prev_bind_0, thread);
				    }
				}
			    } catch (Throwable ccatch_env_var) {
				error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
			    }
			} else {
			    {
				SubLObject stream = NIL;
				try {
				    {
					SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
					try {
					    stream_macros.$stream_requires_locking$.bind(NIL, thread);
					    stream = compatibility.open_binary(formatting_guidelines_file, $OUTPUT, NIL);
					} finally {
					    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
					}
				    }
				    if (!stream.isStream()) {
					Errors.error($str_alt137$Unable_to_open__S, formatting_guidelines_file);
				    }
				    {
					SubLObject stream_302 = stream;
					if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
					    if (!stream_302.isStream()) {
						Errors.error($str_alt220$Cannot_open__A, formatting_guidelines_file);
					    }
					}
					cfasl_output_externalized(formatting_guidelines, stream_302);
				    }
				} finally {
				    {
					SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
					try {
					    $is_thread_performing_cleanupP$.bind(T, thread);
					    if (stream.isStream()) {
						close(stream, UNPROVIDED);
					    }
					} finally {
					    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
					}
				    }
				}
				if (NIL != $chmod_safe_to_useP$.getDynamicValue(thread)) {
				    file_utilities.chmod(file_utilities.logical_pathname_to_physical(formatting_guidelines_file), $$$664);
				}
			    }
			}
			if (NIL != error_message) {
			    {
				SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
				if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
				    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
				    format(stream, $str_alt665$Couldn_t_write_fact_sheet_formatt, v_term, error_message);
				    force_output(stream);
				}
			    }
			    Errors.error(error_message);
			}
		    }
		}
		return filename;
	    }
	}
    }

    public static SubLObject write_fact_sheet_data_and_formatting_guidelines(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject data, final SubLObject stats, final SubLObject footnotes,
	    final SubLObject formatting_guidelines) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	assert NIL != cycl_grammar.cycl_denotational_term_p(v_term) : "! cycl_grammar.cycl_denotational_term_p(v_term) " + ("cycl_grammar.cycl_denotational_term_p(v_term) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(v_term) ") + v_term;
	assert NIL != fact_sheets.fact_sheet_verbosity_p(verbosity) : "! fact_sheets.fact_sheet_verbosity_p(verbosity) " + ("fact_sheets.fact_sheet_verbosity_p(verbosity) " + "CommonSymbols.NIL != fact_sheets.fact_sheet_verbosity_p(verbosity) ") + verbosity;
	assert NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) : "! cycl_grammar.cycl_denotational_term_p(domain_mt) " + ("cycl_grammar.cycl_denotational_term_p(domain_mt) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) ") + domain_mt;
	assert NIL != cycl_grammar.cycl_denotational_term_p(language_mt) : "! cycl_grammar.cycl_denotational_term_p(language_mt) " + ("cycl_grammar.cycl_denotational_term_p(language_mt) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(language_mt) ") + language_mt;
	thread.resetMultipleValues();
	final SubLObject directory = fact_sheets.directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, fact_sheets.$$$cfasl);
	final SubLObject filename = thread.secondMultipleValue();
	thread.resetMultipleValues();
	if (NIL == Filesys.directory_p(directory)) {
	    file_utilities.make_directory_recursive(directory, NIL, NIL != fact_sheets.chmod_safe_to_useP() ? fact_sheets.$$$775 : NIL);
	}
	if (NIL == Filesys.directory_p(directory)) {
	    Errors.warn(fact_sheets.$str524$Couldn_t_create_directory_for_fac, v_term, directory);
	    return NIL;
	}
	SubLObject error_message = NIL;
	if (NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
	    try {
		thread.throwStack.push($catch_error_message_target$.getGlobalValue());
		final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
		try {
		    Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
		    try {
			SubLObject stream = NIL;
			try {
			    final SubLObject _prev_bind_0_$215 = stream_macros.$stream_requires_locking$.currentBinding(thread);
			    try {
				stream_macros.$stream_requires_locking$.bind(NIL, thread);
				stream = compatibility.open_binary(filename, $OUTPUT);
			    } finally {
				stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$215, thread);
			    }
			    if (!stream.isStream()) {
				Errors.error(fact_sheets.$str284$Unable_to_open__S, filename);
			    }
			    final SubLObject stream_$216 = stream;
			    if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (!stream_$216.isStream())) {
				Errors.error(fact_sheets.$str53$Cannot_open__A, filename);
			    }
			    cfasl_output_externalized(data, stream_$216);
			    cfasl_output_externalized(stats, stream_$216);
			    cfasl_output_externalized(footnotes, stream_$216);
			} finally {
			    final SubLObject _prev_bind_0_$216 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				final SubLObject _values = getValuesAsVector();
				if (stream.isStream()) {
				    close(stream, UNPROVIDED);
				}
				restoreValuesFromVector(_values);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$216, thread);
			    }
			}
			if (NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
			    file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), fact_sheets.$$$664);
			}
		    } catch (final Throwable catch_var) {
			Errors.handleThrowable(catch_var, NIL);
		    }
		} finally {
		    Errors.$error_handler$.rebind(_prev_bind_0, thread);
		}
	    } catch (final Throwable ccatch_env_var) {
		error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
	    } finally {
		thread.throwStack.pop();
	    }
	} else {
	    SubLObject stream2 = NIL;
	    try {
		final SubLObject _prev_bind_2 = stream_macros.$stream_requires_locking$.currentBinding(thread);
		try {
		    stream_macros.$stream_requires_locking$.bind(NIL, thread);
		    stream2 = compatibility.open_binary(filename, $OUTPUT);
		} finally {
		    stream_macros.$stream_requires_locking$.rebind(_prev_bind_2, thread);
		}
		if (!stream2.isStream()) {
		    Errors.error(fact_sheets.$str284$Unable_to_open__S, filename);
		}
		final SubLObject stream_$217 = stream2;
		if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (!stream_$217.isStream())) {
		    Errors.error(fact_sheets.$str53$Cannot_open__A, filename);
		}
		cfasl_output_externalized(data, stream_$217);
		cfasl_output_externalized(stats, stream_$217);
		cfasl_output_externalized(footnotes, stream_$217);
	    } finally {
		final SubLObject _prev_bind_3 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values2 = getValuesAsVector();
		    if (stream2.isStream()) {
			close(stream2, UNPROVIDED);
		    }
		    restoreValuesFromVector(_values2);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
		}
	    }
	    if (NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
		file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), fact_sheets.$$$664);
	    }
	}
	if (NIL != error_message) {
	    final SubLObject stream2 = fact_sheet_logs.fact_sheet_log_stream();
	    if (((T == stream2) && current_process().eql(subl_promotions.initial_process())) || (stream2.isStream() && (NIL != output_stream_p(stream2)))) {
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream2);
		format(stream2, fact_sheets.$str525$Couldn_t_write_fact_sheet_data_fo, v_term, error_message);
		force_output(stream2);
	    }
	    Errors.error(error_message);
	}
	if (NIL != formatting_guidelines) {
	    final SubLObject formatting_guidelines_file = fact_sheets.fact_sheet_formatting_guidelines_file(filename, UNPROVIDED);
	    SubLObject error_message2 = NIL;
	    if (NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
		try {
		    thread.throwStack.push($catch_error_message_target$.getGlobalValue());
		    final SubLObject _prev_bind_2 = Errors.$error_handler$.currentBinding(thread);
		    try {
			Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
			try {
			    SubLObject stream3 = NIL;
			    try {
				final SubLObject _prev_bind_0_$217 = stream_macros.$stream_requires_locking$.currentBinding(thread);
				try {
				    stream_macros.$stream_requires_locking$.bind(NIL, thread);
				    stream3 = compatibility.open_binary(formatting_guidelines_file, $OUTPUT);
				} finally {
				    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$217, thread);
				}
				if (!stream3.isStream()) {
				    Errors.error(fact_sheets.$str284$Unable_to_open__S, formatting_guidelines_file);
				}
				final SubLObject stream_$218 = stream3;
				if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (!stream_$218.isStream())) {
				    Errors.error(fact_sheets.$str53$Cannot_open__A, formatting_guidelines_file);
				}
				cfasl_output_externalized(formatting_guidelines, stream_$218);
			    } finally {
				final SubLObject _prev_bind_0_$218 = $is_thread_performing_cleanupP$.currentBinding(thread);
				try {
				    $is_thread_performing_cleanupP$.bind(T, thread);
				    final SubLObject _values3 = getValuesAsVector();
				    if (stream3.isStream()) {
					close(stream3, UNPROVIDED);
				    }
				    restoreValuesFromVector(_values3);
				} finally {
				    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$218, thread);
				}
			    }
			    if (NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
				file_utilities.chmod(file_utilities.logical_pathname_to_physical(formatting_guidelines_file), fact_sheets.$$$664);
			    }
			} catch (final Throwable catch_var2) {
			    Errors.handleThrowable(catch_var2, NIL);
			}
		    } finally {
			Errors.$error_handler$.rebind(_prev_bind_2, thread);
		    }
		} catch (final Throwable ccatch_env_var2) {
		    error_message2 = Errors.handleThrowable(ccatch_env_var2, $catch_error_message_target$.getGlobalValue());
		} finally {
		    thread.throwStack.pop();
		}
	    } else {
		SubLObject stream = NIL;
		try {
		    final SubLObject _prev_bind_4 = stream_macros.$stream_requires_locking$.currentBinding(thread);
		    try {
			stream_macros.$stream_requires_locking$.bind(NIL, thread);
			stream = compatibility.open_binary(formatting_guidelines_file, $OUTPUT);
		    } finally {
			stream_macros.$stream_requires_locking$.rebind(_prev_bind_4, thread);
		    }
		    if (!stream.isStream()) {
			Errors.error(fact_sheets.$str284$Unable_to_open__S, formatting_guidelines_file);
		    }
		    final SubLObject stream_$219 = stream;
		    if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (!stream_$219.isStream())) {
			Errors.error(fact_sheets.$str53$Cannot_open__A, formatting_guidelines_file);
		    }
		    cfasl_output_externalized(formatting_guidelines, stream_$219);
		} finally {
		    final SubLObject _prev_bind_5 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values4 = getValuesAsVector();
			if (stream.isStream()) {
			    close(stream, UNPROVIDED);
			}
			restoreValuesFromVector(_values4);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
		    }
		}
		if (NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
		    file_utilities.chmod(file_utilities.logical_pathname_to_physical(formatting_guidelines_file), fact_sheets.$$$664);
		}
	    }
	    if (NIL != error_message2) {
		final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
		    format(stream, fact_sheets.$str523$Couldn_t_write_fact_sheet_formatt, v_term, error_message2);
		    force_output(stream);
		}
		Errors.error(error_message2);
	    }
	}
	return filename;
    }

    public static final SubLObject stop_fact_sheet_updates_after_current_term_alt() {
	$stop_fact_sheet_update_after_current_termP$.setGlobalValue(T);
	return $stop_fact_sheet_update_after_current_termP$.getGlobalValue();
    }

    public static SubLObject stop_fact_sheet_updates_after_current_term() {
	fact_sheets.$stop_fact_sheet_update_after_current_termP$.setGlobalValue(T);
	return fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue();
    }

    public static final SubLObject start_new_fact_sheet_updater_alt(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject stop_after, SubLObject new_days) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (stop_after == UNPROVIDED) {
	    stop_after = NIL;
	}
	if (new_days == UNPROVIDED) {
	    new_days = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_default_new_days();
	}
	$stop_fact_sheet_update_after_current_termP$.setGlobalValue(NIL);
	return process_utilities.make_cyc_server_process_with_args($$$Fact_Sheet_Updater, UPDATE_FACT_SHEETS, list(verbosity, domain_mt, language_mt, stop_after, new_days));
    }

    public static SubLObject start_new_fact_sheet_updater(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject stop_after, SubLObject new_days) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (stop_after == UNPROVIDED) {
	    stop_after = NIL;
	}
	if (new_days == UNPROVIDED) {
	    new_days = fact_sheets.fsut_prioritizer_default_new_days();
	}
	fact_sheets.$stop_fact_sheet_update_after_current_termP$.setGlobalValue(NIL);
	return process_utilities.make_cyc_server_process_with_args(fact_sheets.$$$Fact_Sheet_Updater, fact_sheets.UPDATE_FACT_SHEETS, list(verbosity, domain_mt, language_mt, stop_after, new_days));
    }

    public static final SubLObject start_new_stale_fact_sheet_updater_alt(SubLObject root) {
	if (root == UNPROVIDED) {
	    root = file_utilities.cyc_home_subdirectory(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_path());
	}
	$stop_fact_sheet_update_after_current_termP$.setGlobalValue(NIL);
	return process_utilities.make_cyc_server_process_with_args($$$Stale_Fact_Sheet_Updater, UPDATE_ALL_STALE_FACT_SHEETS, list(root));
    }

    public static SubLObject start_new_stale_fact_sheet_updater(SubLObject root) {
	if (root == UNPROVIDED) {
	    root = file_utilities.cyc_home_subdirectory(fact_sheets.fact_sheet_data_path());
	}
	fact_sheets.$stop_fact_sheet_update_after_current_termP$.setGlobalValue(NIL);
	return process_utilities.make_cyc_server_process_with_args(fact_sheets.$$$Stale_Fact_Sheet_Updater, fact_sheets.UPDATE_ALL_STALE_FACT_SHEETS, list(root));
    }

    /**
     * Run @xref UPDATE-ALL-FACT-SHEETS in its own thread.
     */
    @LispMethod(comment = "Run @xref UPDATE-ALL-FACT-SHEETS in its own thread.")
    public static final SubLObject start_new_all_fact_sheet_updater_alt(SubLObject number_of_workers, SubLObject this_worker_number, SubLObject verbosities, SubLObject target_statuses, SubLObject domain_mt, SubLObject language_mt) {
	if (number_of_workers == UNPROVIDED) {
	    number_of_workers = ONE_INTEGER;
	}
	if (this_worker_number == UNPROVIDED) {
	    this_worker_number = ZERO_INTEGER;
	}
	if (verbosities == UNPROVIDED) {
	    verbosities = $list_alt672;
	}
	if (target_statuses == UNPROVIDED) {
	    target_statuses = $list_alt673;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	$stop_fact_sheet_update_after_current_termP$.setGlobalValue(NIL);
	return process_utilities.make_cyc_server_process_with_args($$$All_Fact_Sheet_Updater, UPDATE_ALL_FACT_SHEETS, list(number_of_workers, this_worker_number, verbosities, target_statuses, domain_mt, language_mt));
    }

    @LispMethod(comment = "Run @xref UPDATE-ALL-FACT-SHEETS in its own thread.")
    public static SubLObject start_new_all_fact_sheet_updater(SubLObject number_of_workers, SubLObject this_worker_number, SubLObject verbosities, SubLObject target_statuses, SubLObject domain_mt, SubLObject language_mt) {
	if (number_of_workers == UNPROVIDED) {
	    number_of_workers = ONE_INTEGER;
	}
	if (this_worker_number == UNPROVIDED) {
	    this_worker_number = ZERO_INTEGER;
	}
	if (verbosities == UNPROVIDED) {
	    verbosities = fact_sheets.$list530;
	}
	if (target_statuses == UNPROVIDED) {
	    target_statuses = fact_sheets.$list531;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	fact_sheets.$stop_fact_sheet_update_after_current_termP$.setGlobalValue(NIL);
	return process_utilities.make_cyc_server_process_with_args(fact_sheets.$$$All_Fact_Sheet_Updater, fact_sheets.UPDATE_ALL_FACT_SHEETS, list(number_of_workers, this_worker_number, verbosities, target_statuses, domain_mt, language_mt));
    }

    /**
    * Run @xref UPDATE-ALL-FACT-SHEETS in its own thread.
    */

    public static final SubLObject start_new_fact_sheet_log_file_watcher_alt(SubLObject file_stream) {
	if (file_stream == UNPROVIDED) {
	    file_stream = $fact_sheet_log_stream$.getDynamicValue();
	}
	return process_utilities.make_cyc_server_process_with_args($$$Fact_Sheet_Log_File_Watcher, WATCH_FACT_SHEET_LOG_FILE, list(file_stream));
    }

    public static SubLObject start_new_fact_sheet_log_file_watcher(SubLObject file_stream) {
	if (file_stream == UNPROVIDED) {
	    file_stream = fact_sheet_logs.fact_sheet_log_stream();
	}
	return process_utilities.make_cyc_server_process_with_args(fact_sheets.$$$Fact_Sheet_Log_File_Watcher, fact_sheets.WATCH_FACT_SHEET_LOG_FILE, list(file_stream));
    }

    public static final SubLObject watch_fact_sheet_log_file_alt(SubLObject file_stream) {
	while (NIL == com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_stream_active_p(file_stream)) {
	    sleep($int$60);
	}
	{
	    SubLObject last_file_length = file_length(file_stream);
	    sleep($fact_sheet_inactivity_image_restart_delay$.getGlobalValue());
	    while (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_log_stream_active_p(file_stream)) {
		{
		    SubLObject this_file_length = file_length(file_stream);
		    if (this_file_length.eql(last_file_length)) {
			{
			    SubLObject reason = NIL;
			    SubLObject stream = NIL;
			    try {
				stream = make_private_string_output_stream();
				com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($WARN, stream);
				format(stream, $str_alt679$No_progress_after_at_least__A_try, numeric_date_utilities.readable_elapsed_time_string($fact_sheet_inactivity_image_restart_delay$.getGlobalValue(), ZERO_INTEGER), file_stream);
				reason = get_output_stream_string(stream);
			    } finally {
				{
				    SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
				    try {
					bind($is_thread_performing_cleanupP$, T);
					close(stream, UNPROVIDED);
				    } finally {
					rebind($is_thread_performing_cleanupP$, _prev_bind_0);
				    }
				}
			    }
			    com.cyc.cycjava.cycl.fact_sheets.halt_fact_sheet_updater_image(reason);
			}
		    }
		    sleep($fact_sheet_inactivity_image_restart_delay$.getGlobalValue());
		    last_file_length = this_file_length;
		}
	    }
	}
	return file_stream;
    }

    public static SubLObject watch_fact_sheet_log_file(final SubLObject file_stream) {
	while (NIL == fact_sheets.fact_sheet_log_stream_active_p(file_stream)) {
	    sleep(fact_sheets.$int$60);
	}
	SubLObject last_file_length = file_length(file_stream);
	sleep(fact_sheets.$fact_sheet_inactivity_image_restart_delay$.getGlobalValue());
	while (NIL != fact_sheets.fact_sheet_log_stream_active_p(file_stream)) {
	    final SubLObject this_file_length = file_length(file_stream);
	    if (this_file_length.eql(last_file_length)) {
		SubLObject reason = NIL;
		SubLObject stream = NIL;
		try {
		    stream = make_private_string_output_stream();
		    fact_sheet_logs.print_fact_sheet_log_header($WARN, stream);
		    format(stream, fact_sheets.$str537$No_progress_after_at_least__A_try, numeric_date_utilities.readable_elapsed_time_string(fact_sheets.$fact_sheet_inactivity_image_restart_delay$.getGlobalValue(), ZERO_INTEGER), file_stream);
		    reason = get_output_stream_string(stream);
		} finally {
		    final SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
		    try {
			bind($is_thread_performing_cleanupP$, T);
			final SubLObject _values = getValuesAsVector();
			close(stream, UNPROVIDED);
			restoreValuesFromVector(_values);
		    } finally {
			rebind($is_thread_performing_cleanupP$, _prev_bind_0);
		    }
		}
		final SubLObject stream_$223 = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream_$223) && current_process().eql(subl_promotions.initial_process())) || (stream_$223.isStream() && (NIL != output_stream_p(stream_$223)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream_$223);
		    format(stream_$223, fact_sheets.$str538$Halting_fact_sheet_updating___S, reason);
		    force_output(stream_$223);
		}
		fact_sheets.$stop_fact_sheet_update_after_current_termP$.setGlobalValue(T);
	    }
	    sleep(fact_sheets.$fact_sheet_inactivity_image_restart_delay$.getGlobalValue());
	    last_file_length = this_file_length;
	}
	return file_stream;
    }

    public static final SubLObject fact_sheet_log_stream_active_p_alt(SubLObject file_stream) {
	return makeBoolean((file_stream.isStream() && (NIL != output_stream_p(file_stream))) && (NIL != open_stream_p(file_stream)));
    }

    public static SubLObject fact_sheet_log_stream_active_p(final SubLObject file_stream) {
	return makeBoolean((file_stream.isStream() && (NIL != output_stream_p(file_stream))) && (NIL != open_stream_p(file_stream)));
    }

    public static final SubLObject halt_fact_sheet_updater_image_alt(SubLObject reason) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject timed_outP = NIL;
		SubLObject tag = with_timeout_make_tag();
		try {
		    {
			SubLObject _prev_bind_0 = $within_with_timeout$.currentBinding(thread);
			try {
			    $within_with_timeout$.bind(T, thread);
			    {
				SubLObject timer = NIL;
				try {
				    {
					SubLObject _prev_bind_0_303 = $with_timeout_nesting_depth$.currentBinding(thread);
					try {
					    $with_timeout_nesting_depth$.bind(add(ONE_INTEGER, $with_timeout_nesting_depth$.getDynamicValue(thread)), thread);
					    timer = with_timeout_start_timer($int$60, tag);
					    operation_communication.halt_cyc_image(reason);
					} finally {
					    $with_timeout_nesting_depth$.rebind(_prev_bind_0_303, thread);
					}
				    }
				} finally {
				    {
					SubLObject _prev_bind_0_304 = $is_thread_performing_cleanupP$.currentBinding(thread);
					try {
					    $is_thread_performing_cleanupP$.bind(T, thread);
					    with_timeout_stop_timer(timer);
					} finally {
					    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_304, thread);
					}
				    }
				}
			    }
			} finally {
			    $within_with_timeout$.rebind(_prev_bind_0, thread);
			}
		    }
		} catch (Throwable ccatch_env_var) {
		    timed_outP = Errors.handleThrowable(ccatch_env_var, tag);
		}
		return Processes.exit(ZERO_INTEGER);
	    }
	}
    }

    public static SubLObject halt_fact_sheet_updater_image(final SubLObject reason) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject timed_outP = NIL;
	final SubLObject tag = with_timeout_make_tag();
	try {
	    thread.throwStack.push(tag);
	    final SubLObject _prev_bind_0 = $within_with_timeout$.currentBinding(thread);
	    try {
		$within_with_timeout$.bind(T, thread);
		SubLObject timer = NIL;
		try {
		    final SubLObject _prev_bind_0_$224 = $with_timeout_nesting_depth$.currentBinding(thread);
		    try {
			$with_timeout_nesting_depth$.bind(add(ONE_INTEGER, $with_timeout_nesting_depth$.getDynamicValue(thread)), thread);
			timer = with_timeout_start_timer(fact_sheets.$int$60, tag);
			operation_communication.halt_cyc_image(reason);
		    } finally {
			$with_timeout_nesting_depth$.rebind(_prev_bind_0_$224, thread);
		    }
		} finally {
		    final SubLObject _prev_bind_0_$225 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values = getValuesAsVector();
			with_timeout_stop_timer(timer);
			restoreValuesFromVector(_values);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$225, thread);
		    }
		}
	    } finally {
		$within_with_timeout$.rebind(_prev_bind_0, thread);
	    }
	} catch (final Throwable ccatch_env_var) {
	    timed_outP = Errors.handleThrowable(ccatch_env_var, tag);
	} finally {
	    thread.throwStack.pop();
	}
	return Processes.exit(ZERO_INTEGER);
    }

    /**
     * Regenerate fact sheets for all fact-sheetable instances of COLL whose current fact sheets were generated
     * prior to the date DATE or are stubs.
     *
     * @param DATE
     * 		integerp; a date in the format YYYYMMDD
     */
    @LispMethod(comment = "Regenerate fact sheets for all fact-sheetable instances of COLL whose current fact sheets were generated\r\nprior to the date DATE or are stubs.\r\n\r\n@param DATE\r\n\t\tintegerp; a date in the format YYYYMMDD\nRegenerate fact sheets for all fact-sheetable instances of COLL whose current fact sheets were generated\nprior to the date DATE or are stubs.")
    public static final SubLObject update_fact_sheets_for_all_fact_sheetable_instances_of_without_good_fact_sheets_generated_since_alt(SubLObject coll, SubLObject date, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	if (coll == UNPROVIDED) {
	    coll = $$Individual;
	}
	if (date == UNPROVIDED) {
	    date = $fact_sheet_generator_update_date_and_second$.getDynamicValue().first();
	}
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt();
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(coll, COLLECTION_P);
	    SubLTrampolineFile.checkType(date, INTEGERP);
	    {
		SubLObject old_generator_update_date = $fact_sheet_generator_update_date_and_second$.getDynamicValue(thread);
		$fact_sheet_generator_update_date_and_second$.setDynamicValue(list(date, ZERO_INTEGER), thread);
		{
		    SubLObject already_loggingP = stringp($fact_sheet_log_file$.getDynamicValue(thread));
		    SubLObject directory = NIL;
		    SubLObject filename = NIL;
		    SubLObject use_new_setupP = NIL;
		    if (NIL == already_loggingP) {
			thread.resetMultipleValues();
			{
			    SubLObject directory_305 = com.cyc.cycjava.cycl.fact_sheets.open_new_unique_fact_sheet_log_file();
			    SubLObject filename_306 = thread.secondMultipleValue();
			    thread.resetMultipleValues();
			    directory = directory_305;
			    filename = filename_306;
			}
			use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
		    }
		    if (NIL != use_new_setupP) {
			format(StreamsLow.$standard_output$.getDynamicValue(thread), $str_alt69$__Logging_Fact_Sheet_generation_t, filename);
			force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
		    }
		    {
			SubLObject _prev_bind_0 = $fact_sheet_log_file$.currentBinding(thread);
			try {
			    $fact_sheet_log_file$.bind(NIL != use_new_setupP ? ((SubLObject) (filename)) : $fact_sheet_log_file$.getDynamicValue(thread), thread);
			    {
				SubLObject stream = NIL;
				try {
				    {
					SubLObject _prev_bind_0_307 = stream_macros.$stream_requires_locking$.currentBinding(thread);
					try {
					    stream_macros.$stream_requires_locking$.bind(NIL, thread);
					    stream = compatibility.open_text($fact_sheet_log_file$.getDynamicValue(thread), $APPEND, NIL);
					} finally {
					    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_307, thread);
					}
				    }
				    if (!stream.isStream()) {
					Errors.error($str_alt137$Unable_to_open__S, $fact_sheet_log_file$.getDynamicValue(thread));
				    }
				    {
					SubLObject _prev_bind_0_308 = $fact_sheet_log_stream$.currentBinding(thread);
					try {
					    $fact_sheet_log_stream$.bind(stream, thread);
					    {
						SubLObject _prev_bind_0_309 = $next_fact_sheet_hourly_report_time$.currentBinding(thread);
						SubLObject _prev_bind_1 = $hourly_fact_sheet_stats$.currentBinding(thread);
						try {
						    $next_fact_sheet_hourly_report_time$.bind(NIL, thread);
						    $hourly_fact_sheet_stats$.bind(make_vector(TWO_INTEGER, ZERO_INTEGER), thread);
						    com.cyc.cycjava.cycl.fact_sheets.reset_hourly_report_time(UNPROVIDED);
						    {
							SubLObject stream_310 = $fact_sheet_log_stream$.getDynamicValue(thread);
							if (((T == stream_310) && (current_process() == subl_promotions.initial_process())) || (stream_310.isStream() && (NIL != output_stream_p(stream_310)))) {
							    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_310);
							    format(stream_310, $str_alt684$Updating_fact_sheets_for_all_fact, new SubLObject[] { coll, date, verbosity, domain_mt, language_mt });
							    force_output(stream_310);
							}
						    }
						    {
							SubLObject node_var = coll;
							{
							    SubLObject _prev_bind_0_311 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
							    SubLObject _prev_bind_1_312 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
							    try {
								sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
								sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
								{
								    SubLObject node_var_313 = node_var;
								    SubLObject deck_type = (false) ? ((SubLObject) ($QUEUE)) : $STACK;
								    SubLObject recur_deck = deck.create_deck(deck_type);
								    {
									SubLObject _prev_bind_0_314 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
									try {
									    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
									    {
										SubLObject mt_var = domain_mt;
										{
										    SubLObject _prev_bind_0_315 = mt_relevance_macros.$mt$.currentBinding(thread);
										    SubLObject _prev_bind_1_316 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
										    SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
										    try {
											mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
											mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
											mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
											{
											    SubLObject tv_var = NIL;
											    {
												SubLObject _prev_bind_0_317 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
												SubLObject _prev_bind_1_318 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
												try {
												    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
												    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
												    if (NIL != tv_var) {
													if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
													    if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
														{
														    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
														    if (pcase_var.eql($ERROR)) {
															sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
														    } else {
															if (pcase_var.eql($CERROR)) {
															    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
															} else {
															    if (pcase_var.eql($WARN)) {
																Errors.warn($str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
															    } else {
																Errors.warn($str_alt558$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
																Errors.cerror($$$continue_anyway, $str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
															    }
															}
														    }
														}
													    }
													}
												    }
												    {
													SubLObject _prev_bind_0_319 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
													SubLObject _prev_bind_1_320 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
													SubLObject _prev_bind_2_321 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
													SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
													SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
													try {
													    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
													    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))),
														    thread);
													    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(
														    sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
													    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
													    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
													    if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
														{
														    SubLObject _prev_bind_0_322 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
														    SubLObject _prev_bind_1_323 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
														    SubLObject _prev_bind_2_324 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
														    try {
															sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
															sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(),
																sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
															sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
															sbhl_marking_utilities.sbhl_mark_node_marked(node_var_313, UNPROVIDED);
															while (NIL != node_var_313) {
															    {
																SubLObject tt_node_var = node_var_313;
																SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$isa));
																SubLObject cdolist_list_var = accessible_modules;
																SubLObject module_var = NIL;
																for (module_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), module_var = cdolist_list_var.first()) {
																    {
																	SubLObject _prev_bind_0_325 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
																	SubLObject _prev_bind_1_326 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
																	try {
																	    sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
																	    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED)
																		    ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread))))
																		    : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
																	    {
																		SubLObject node = function_terms.naut_to_nart(tt_node_var);
																		if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
																		    {
																			SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																			if (NIL != d_link) {
																			    {
																				SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link,
																					sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)),
																					sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																				if (NIL != mt_links) {
																				    {
																					SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
																					while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
																					    thread.resetMultipleValues();
																					    {
																						SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
																						SubLObject tv_links = thread.secondMultipleValue();
																						thread.resetMultipleValues();
																						if (NIL != mt_relevance_macros.relevant_mtP(mt)) {
																						    {
																							SubLObject _prev_bind_0_327 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
																							try {
																							    sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
																							    {
																								SubLObject iteration_state_328 = dictionary_contents.do_dictionary_contents_state(
																									dictionary.dictionary_contents(tv_links));
																								while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_328)) {
																								    thread.resetMultipleValues();
																								    {
																									SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_328);
																									SubLObject link_nodes = thread.secondMultipleValue();
																									thread.resetMultipleValues();
																									if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
																									    {
																										SubLObject _prev_bind_0_329 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
																										try {
																										    sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
																										    {
																											SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																												? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																												: link_nodes;
																											SubLObject cdolist_list_var_330 = new_list;
																											SubLObject ind = NIL;
																											for (ind = cdolist_list_var_330.first(); NIL != cdolist_list_var_330; cdolist_list_var_330 = cdolist_list_var_330.rest(), ind = cdolist_list_var_330.first()) {
																											    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ind,
																												    sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
																												sbhl_marking_utilities.sbhl_mark_node_marked(ind,
																													sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
																												if (NIL == $stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
																												    com.cyc.cycjava.cycl.fact_sheets.maybe_update_fact_sheet_and_record_stats(
																													    ind, verbosity, domain_mt, language_mt);
																												}
																											    }
																											}
																										    }
																										} finally {
																										    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_329, thread);
																										}
																									    }
																									}
																									iteration_state_328 = dictionary_contents.do_dictionary_contents_next(iteration_state_328);
																								    }
																								}
																								dictionary_contents.do_dictionary_contents_finalize(iteration_state_328);
																							    }
																							} finally {
																							    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_327, thread);
																							}
																						    }
																						}
																						iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
																					    }
																					}
																					dictionary_contents.do_dictionary_contents_finalize(iteration_state);
																				    }
																				}
																			    }
																			} else {
																			    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt559$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED,
																				    UNPROVIDED);
																			}
																		    }
																		    if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
																			{
																			    SubLObject csome_list_var = sbhl_link_methods.non_fort_instance_table_lookup(node);
																			    SubLObject instance_tuple = NIL;
																			    for (instance_tuple = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), instance_tuple = csome_list_var.first()) {
																				{
																				    SubLObject datum = instance_tuple;
																				    SubLObject current = datum;
																				    SubLObject link_node = NIL;
																				    SubLObject mt = NIL;
																				    SubLObject tv = NIL;
																				    destructuring_bind_must_consp(current, datum, $list_alt560);
																				    link_node = current.first();
																				    current = current.rest();
																				    destructuring_bind_must_consp(current, datum, $list_alt560);
																				    mt = current.first();
																				    current = current.rest();
																				    destructuring_bind_must_consp(current, datum, $list_alt560);
																				    tv = current.first();
																				    current = current.rest();
																				    if (NIL == current) {
																					if (NIL != mt_relevance_macros.relevant_mtP(mt)) {
																					    {
																						SubLObject _prev_bind_0_331 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
																						try {
																						    sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
																						    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
																							{
																							    SubLObject _prev_bind_0_332 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
																							    try {
																								sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
																								{
																								    SubLObject link_nodes = list(link_node);
																								    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																									    ? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																									    : link_nodes;
																								    SubLObject cdolist_list_var_333 = new_list;
																								    SubLObject ind = NIL;
																								    for (ind = cdolist_list_var_333.first(); NIL != cdolist_list_var_333; cdolist_list_var_333 = cdolist_list_var_333.rest(), ind = cdolist_list_var_333.first()) {
																									if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ind,
																										sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
																									    sbhl_marking_utilities.sbhl_mark_node_marked(ind,
																										    sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
																									    if (NIL == $stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
																										com.cyc.cycjava.cycl.fact_sheets.maybe_update_fact_sheet_and_record_stats(ind, verbosity,
																											domain_mt, language_mt);
																									    }
																									}
																								    }
																								}
																							    } finally {
																								sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_332, thread);
																							    }
																							}
																						    }
																						} finally {
																						    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_331, thread);
																						}
																					    }
																					}
																				    } else {
																					cdestructuring_bind_error(datum, $list_alt560);
																				    }
																				}
																			    }
																			}
																		    }
																		} else {
																		    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
																			{
																			    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																				    ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(
																					    sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)),
																					    sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED)))))
																				    : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(
																					    sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)),
																					    sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																			    SubLObject cdolist_list_var_334 = new_list;
																			    SubLObject generating_fn = NIL;
																			    for (generating_fn = cdolist_list_var_334.first(); NIL != cdolist_list_var_334; cdolist_list_var_334 = cdolist_list_var_334.rest(), generating_fn = cdolist_list_var_334.first()) {
																				{
																				    SubLObject _prev_bind_0_335 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
																				    try {
																					sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
																					{
																					    SubLObject link_nodes = funcall(generating_fn, node);
																					    SubLObject new_list_336 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																						    ? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																						    : link_nodes;
																					    SubLObject cdolist_list_var_337 = new_list_336;
																					    SubLObject ind = NIL;
																					    for (ind = cdolist_list_var_337.first(); NIL != cdolist_list_var_337; cdolist_list_var_337 = cdolist_list_var_337.rest(), ind = cdolist_list_var_337.first()) {
																						if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ind,
																							sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
																						    sbhl_marking_utilities.sbhl_mark_node_marked(ind, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
																						    if (NIL == $stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
																							com.cyc.cycjava.cycl.fact_sheets.maybe_update_fact_sheet_and_record_stats(ind, verbosity, domain_mt, language_mt);
																						    }
																						}
																					    }
																					}
																				    } finally {
																					sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_335, thread);
																				    }
																				}
																			    }
																			}
																		    }
																		}
																	    }
																	} finally {
																	    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_326, thread);
																	    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_325, thread);
																	}
																    }
																}
															    }
															    {
																SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)));
																SubLObject cdolist_list_var = accessible_modules;
																SubLObject module_var = NIL;
																for (module_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), module_var = cdolist_list_var.first()) {
																    {
																	SubLObject _prev_bind_0_338 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
																	SubLObject _prev_bind_1_339 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
																	try {
																	    sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
																	    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED)
																		    ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread))))
																		    : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
																	    {
																		SubLObject node = function_terms.naut_to_nart(node_var_313);
																		if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
																		    {
																			SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																			if (NIL != d_link) {
																			    {
																				SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(),
																					sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																				if (NIL != mt_links) {
																				    {
																					SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
																					while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
																					    thread.resetMultipleValues();
																					    {
																						SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
																						SubLObject tv_links = thread.secondMultipleValue();
																						thread.resetMultipleValues();
																						if (NIL != mt_relevance_macros.relevant_mtP(mt)) {
																						    {
																							SubLObject _prev_bind_0_340 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
																							try {
																							    sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
																							    {
																								SubLObject iteration_state_341 = dictionary_contents.do_dictionary_contents_state(
																									dictionary.dictionary_contents(tv_links));
																								while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_341)) {
																								    thread.resetMultipleValues();
																								    {
																									SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_341);
																									SubLObject link_nodes = thread.secondMultipleValue();
																									thread.resetMultipleValues();
																									if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
																									    {
																										SubLObject _prev_bind_0_342 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
																										try {
																										    sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
																										    {
																											SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																												? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																												: link_nodes;
																											SubLObject cdolist_list_var_343 = new_list;
																											SubLObject node_vars_link_node = NIL;
																											for (node_vars_link_node = cdolist_list_var_343.first(); NIL != cdolist_list_var_343; cdolist_list_var_343 = cdolist_list_var_343.rest(), node_vars_link_node = cdolist_list_var_343.first()) {
																											    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(
																												    node_vars_link_node, UNPROVIDED)) {
																												sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node,
																													UNPROVIDED);
																												deck.deck_push(node_vars_link_node, recur_deck);
																											    }
																											}
																										    }
																										} finally {
																										    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_342, thread);
																										}
																									    }
																									}
																									iteration_state_341 = dictionary_contents.do_dictionary_contents_next(iteration_state_341);
																								    }
																								}
																								dictionary_contents.do_dictionary_contents_finalize(iteration_state_341);
																							    }
																							} finally {
																							    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_340, thread);
																							}
																						    }
																						}
																						iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
																					    }
																					}
																					dictionary_contents.do_dictionary_contents_finalize(iteration_state);
																				    }
																				}
																			    }
																			} else {
																			    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt559$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED,
																				    UNPROVIDED);
																			}
																		    }
																		} else {
																		    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
																			{
																			    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																				    ? ((SubLObject) (list_utilities.randomize_list(
																					    sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(),
																						    sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED)))))
																				    : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(),
																					    sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
																			    SubLObject cdolist_list_var_344 = new_list;
																			    SubLObject generating_fn = NIL;
																			    for (generating_fn = cdolist_list_var_344.first(); NIL != cdolist_list_var_344; cdolist_list_var_344 = cdolist_list_var_344.rest(), generating_fn = cdolist_list_var_344.first()) {
																				{
																				    SubLObject _prev_bind_0_345 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
																				    try {
																					sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
																					{
																					    SubLObject link_nodes = funcall(generating_fn, node);
																					    SubLObject new_list_346 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																						    ? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																						    : link_nodes;
																					    SubLObject cdolist_list_var_347 = new_list_346;
																					    SubLObject node_vars_link_node = NIL;
																					    for (node_vars_link_node = cdolist_list_var_347.first(); NIL != cdolist_list_var_347; cdolist_list_var_347 = cdolist_list_var_347.rest(), node_vars_link_node = cdolist_list_var_347.first()) {
																						if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
																						    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
																						    deck.deck_push(node_vars_link_node, recur_deck);
																						}
																					    }
																					}
																				    } finally {
																					sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_345, thread);
																				    }
																				}
																			    }
																			}
																		    }
																		}
																	    }
																	} finally {
																	    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_339, thread);
																	    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_338, thread);
																	}
																    }
																}
															    }
															    node_var_313 = deck.deck_pop(recur_deck);
															}
														    } finally {
															sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_324, thread);
															sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_323, thread);
															sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_322, thread);
														    }
														}
													    } else {
														sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt561$Node__a_does_not_pass_sbhl_type_t, node_var, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)),
															UNPROVIDED, UNPROVIDED, UNPROVIDED);
													    }
													} finally {
													    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
													    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
													    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_321, thread);
													    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_320, thread);
													    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_319, thread);
													}
												    }
												} finally {
												    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_318, thread);
												    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_317, thread);
												}
											    }
											}
										    } finally {
											mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
											mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_316, thread);
											mt_relevance_macros.$mt$.rebind(_prev_bind_0_315, thread);
										    }
										}
										sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
									    }
									} finally {
									    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_314, thread);
									}
								    }
								    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
								}
							    } finally {
								sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1_312, thread);
								sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_311, thread);
							    }
							}
						    }
						} finally {
						    $hourly_fact_sheet_stats$.rebind(_prev_bind_1, thread);
						    $next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_309, thread);
						}
					    }
					    if (NIL != use_new_setupP) {
						{
						    SubLObject stream_348 = $fact_sheet_log_stream$.getDynamicValue(thread);
						    if (((T == stream_348) && (current_process() == subl_promotions.initial_process())) || (stream_348.isStream() && (NIL != output_stream_p(stream_348)))) {
							com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_348);
							format(stream_348, $str_alt685$Closing_log_);
							force_output(stream_348);
						    }
						}
						com.cyc.cycjava.cycl.fact_sheets.note_fact_sheet_log_file_closed(UNPROVIDED);
					    }
					} finally {
					    $fact_sheet_log_stream$.rebind(_prev_bind_0_308, thread);
					}
				    }
				} finally {
				    {
					SubLObject _prev_bind_0_349 = $is_thread_performing_cleanupP$.currentBinding(thread);
					try {
					    $is_thread_performing_cleanupP$.bind(T, thread);
					    if (stream.isStream()) {
						close(stream, UNPROVIDED);
					    }
					} finally {
					    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_349, thread);
					}
				    }
				}
			    }
			} finally {
			    $fact_sheet_log_file$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		$fact_sheet_generator_update_date_and_second$.setDynamicValue(old_generator_update_date, thread);
	    }
	    return NIL;
	}
    }

    @LispMethod(comment = "Regenerate fact sheets for all fact-sheetable instances of COLL whose current fact sheets were generated\r\nprior to the date DATE or are stubs.\r\n\r\n@param DATE\r\n\t\tintegerp; a date in the format YYYYMMDD\nRegenerate fact sheets for all fact-sheetable instances of COLL whose current fact sheets were generated\nprior to the date DATE or are stubs.")
    public static SubLObject update_fact_sheets_for_all_fact_sheetable_instances_of_without_good_fact_sheets_generated_since(SubLObject coll, SubLObject date, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	if (coll == UNPROVIDED) {
	    coll = fact_sheets.$$Individual;
	}
	if (date == UNPROVIDED) {
	    date = fact_sheets.$fact_sheet_generator_update_date_and_second$.getDynamicValue().first();
	}
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt();
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	assert NIL != fort_types_interface.collection_p(coll) : "! fort_types_interface.collection_p(coll) " + ("fort_types_interface.collection_p(coll) " + "CommonSymbols.NIL != fort_types_interface.collection_p(coll) ") + coll;
	assert NIL != integerp(date) : "! integerp(date) " + ("Types.integerp(date) " + "CommonSymbols.NIL != Types.integerp(date) ") + date;
	final SubLObject old_generator_update_date = fact_sheets.$fact_sheet_generator_update_date_and_second$.getDynamicValue(thread);
	fact_sheets.$fact_sheet_generator_update_date_and_second$.setDynamicValue(list(date, ZERO_INTEGER), thread);
	final SubLObject already_loggingP = stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
	SubLObject directory = NIL;
	SubLObject filename = NIL;
	SubLObject use_new_setupP = NIL;
	if (NIL == already_loggingP) {
	    thread.resetMultipleValues();
	    final SubLObject directory_$226 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
	    final SubLObject filename_$227 = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    directory = directory_$226;
	    filename = filename_$227;
	    use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
	}
	if (NIL != use_new_setupP) {
	    format(StreamsLow.$standard_output$.getDynamicValue(thread), fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
	    force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
	}
	final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
	try {
	    fact_sheet_logs.$fact_sheet_log_file$.bind(NIL != use_new_setupP ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
	    SubLObject stream = NIL;
	    try {
		final SubLObject _prev_bind_0_$228 = stream_macros.$stream_requires_locking$.currentBinding(thread);
		try {
		    stream_macros.$stream_requires_locking$.bind(NIL, thread);
		    stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), $APPEND);
		} finally {
		    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$228, thread);
		}
		if (!stream.isStream()) {
		    Errors.error(fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
		}
		final SubLObject _prev_bind_0_$229 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
		try {
		    fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
		    final SubLObject _prev_bind_0_$230 = fact_sheet_logs.$next_fact_sheet_hourly_report_time$.currentBinding(thread);
		    final SubLObject _prev_bind_2 = fact_sheet_logs.$hourly_fact_sheet_stats$.currentBinding(thread);
		    try {
			fact_sheet_logs.$next_fact_sheet_hourly_report_time$.bind(NIL, thread);
			fact_sheet_logs.$hourly_fact_sheet_stats$.bind(make_vector(TWO_INTEGER, ZERO_INTEGER), thread);
			fact_sheet_logs.reset_hourly_report_time(UNPROVIDED);
			final SubLObject stream_$231 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream_$231) && current_process().eql(subl_promotions.initial_process())) || (stream_$231.isStream() && (NIL != output_stream_p(stream_$231)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$231);
			    format(stream_$231, fact_sheets.$str545$Updating_fact_sheets_for_all_fact, new SubLObject[] { coll, date, verbosity, domain_mt, language_mt });
			    force_output(stream_$231);
			}
			final SubLObject node_var = coll;
			final SubLObject _prev_bind_0_$231 = $sbhl_module$.currentBinding(thread);
			final SubLObject _prev_bind_1_$233 = $sbhl_gather_space$.currentBinding(thread);
			try {
			    $sbhl_module$.bind(get_sbhl_module(fact_sheets.$$isa), thread);
			    $sbhl_gather_space$.bind(get_sbhl_marking_space(), thread);
			    try {
				SubLObject node_var_$234 = node_var;
				final SubLObject deck_type = $STACK;
				final SubLObject recur_deck = deck.create_deck(deck_type);
				final SubLObject _prev_bind_0_$232 = $sbhl_space$.currentBinding(thread);
				try {
				    $sbhl_space$.bind(get_sbhl_marking_space(), thread);
				    try {
					final SubLObject mt_var = domain_mt;
					final SubLObject _prev_bind_0_$233 = mt_relevance_macros.$mt$.currentBinding(thread);
					final SubLObject _prev_bind_1_$234 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
					final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
					try {
					    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
					    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
					    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
					    final SubLObject tv_var = NIL;
					    final SubLObject _prev_bind_0_$234 = $sbhl_tv$.currentBinding(thread);
					    final SubLObject _prev_bind_1_$235 = $relevant_sbhl_tv_function$.currentBinding(thread);
					    try {
						$sbhl_tv$.bind(NIL != tv_var ? tv_var : get_sbhl_true_tv(), thread);
						$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : $relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
						if (((NIL != tv_var) && (NIL != sbhl_object_type_checking_p())) && (NIL == sbhl_true_tv_p(tv_var))) {
						    final SubLObject pcase_var = $sbhl_type_error_action$.getDynamicValue(thread);
						    if (pcase_var.eql($ERROR)) {
							sbhl_error(ONE_INTEGER, fact_sheets.$str424$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
						    } else if (pcase_var.eql($CERROR)) {
							sbhl_cerror(ONE_INTEGER, fact_sheets.$$$continue_anyway, fact_sheets.$str424$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
						    } else if (pcase_var.eql($WARN)) {
							Errors.warn(fact_sheets.$str424$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
						    } else {
							Errors.warn(fact_sheets.$str429$_A_is_not_a_valid__sbhl_type_erro, $sbhl_type_error_action$.getDynamicValue(thread));
							Errors.cerror(fact_sheets.$$$continue_anyway, fact_sheets.$str424$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
						    }

						}
						final SubLObject _prev_bind_0_$235 = $sbhl_search_module$.currentBinding(thread);
						final SubLObject _prev_bind_1_$236 = $sbhl_search_module_type$.currentBinding(thread);
						final SubLObject _prev_bind_2_$242 = $sbhl_add_node_to_result_test$.currentBinding(thread);
						final SubLObject _prev_bind_4 = $genl_inverse_mode_p$.currentBinding(thread);
						final SubLObject _prev_bind_5 = $sbhl_module$.currentBinding(thread);
						try {
						    $sbhl_search_module$.bind(get_sbhl_transfers_through_module(get_sbhl_module(fact_sheets.$$isa)), thread);
						    $sbhl_search_module_type$.bind(get_sbhl_module_type(get_sbhl_transfers_through_module(get_sbhl_module(fact_sheets.$$isa))), thread);
						    $sbhl_add_node_to_result_test$.bind(get_sbhl_add_node_to_result_test(get_sbhl_transfers_through_module(get_sbhl_module(fact_sheets.$$isa))), thread);
						    $genl_inverse_mode_p$.bind(NIL, thread);
						    $sbhl_module$.bind(get_sbhl_transfers_through_module(get_sbhl_module(fact_sheets.$$isa)), thread);
						    if ((NIL != suspend_sbhl_type_checkingP()) || (NIL != apply_sbhl_module_type_test(node_var, get_sbhl_module(UNPROVIDED)))) {
							final SubLObject _prev_bind_0_$236 = $sbhl_search_direction$.currentBinding(thread);
							final SubLObject _prev_bind_1_$237 = $sbhl_link_direction$.currentBinding(thread);
							final SubLObject _prev_bind_2_$243 = $genl_inverse_mode_p$.currentBinding(thread);
							try {
							    $sbhl_search_direction$.bind(get_sbhl_backward_search_direction(), thread);
							    $sbhl_link_direction$.bind(sbhl_search_direction_to_link_direction(get_sbhl_backward_search_direction(), get_sbhl_transfers_through_module(get_sbhl_module(fact_sheets.$$isa))), thread);
							    $genl_inverse_mode_p$.bind(NIL, thread);
							    sbhl_mark_node_marked(node_var_$234, UNPROVIDED);
							    while (NIL != node_var_$234) {
								final SubLObject tt_node_var = node_var_$234;
								SubLObject cdolist_list_var;
								final SubLObject accessible_modules = cdolist_list_var = get_sbhl_accessible_modules(get_sbhl_module(fact_sheets.$$isa));
								SubLObject module_var = NIL;
								module_var = cdolist_list_var.first();
								while (NIL != cdolist_list_var) {
								    final SubLObject _prev_bind_0_$237 = $sbhl_module$.currentBinding(thread);
								    final SubLObject _prev_bind_1_$238 = $genl_inverse_mode_p$.currentBinding(thread);
								    try {
									$sbhl_module$.bind(module_var, thread);
									$genl_inverse_mode_p$.bind(NIL != flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == $genl_inverse_mode_p$.getDynamicValue(thread)) : $genl_inverse_mode_p$.getDynamicValue(thread), thread);
									final SubLObject node = function_terms.naut_to_nart(tt_node_var);
									if (NIL != sbhl_node_object_p(node)) {
									    final SubLObject d_link = get_sbhl_graph_link(node, get_sbhl_module(UNPROVIDED));
									    if (NIL != d_link) {
										final SubLObject mt_links = get_sbhl_mt_links(d_link, get_sbhl_module_backward_direction(get_sbhl_module(fact_sheets.$$isa)), get_sbhl_module(UNPROVIDED));
										if (NIL != mt_links) {
										    SubLObject iteration_state;
										    for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); NIL == dictionary_contents.do_dictionary_contents_doneP(
											    iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
											thread.resetMultipleValues();
											final SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
											final SubLObject tv_links = thread.secondMultipleValue();
											thread.resetMultipleValues();
											if (NIL != mt_relevance_macros.relevant_mtP(mt)) {
											    final SubLObject _prev_bind_0_$238 = $sbhl_link_mt$.currentBinding(thread);
											    try {
												$sbhl_link_mt$.bind(mt, thread);
												SubLObject iteration_state_$249;
												for (iteration_state_$249 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); NIL == dictionary_contents.do_dictionary_contents_doneP(
													iteration_state_$249); iteration_state_$249 = dictionary_contents.do_dictionary_contents_next(iteration_state_$249)) {
												    thread.resetMultipleValues();
												    final SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$249);
												    final SubLObject link_nodes = thread.secondMultipleValue();
												    thread.resetMultipleValues();
												    if (NIL != relevant_sbhl_tvP(tv)) {
													final SubLObject _prev_bind_0_$239 = $sbhl_link_tv$.currentBinding(thread);
													try {
													    $sbhl_link_tv$.bind(tv, thread);
													    final SubLObject sol = link_nodes;
													    if (NIL != set.set_p(sol)) {
														final SubLObject set_contents_var = set.do_set_internal(sol);
														SubLObject basis_object;
														SubLObject state;
														SubLObject ind;
														for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object,
															set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
														    ind = set_contents.do_set_contents_next(basis_object, state);
														    if ((NIL != set_contents.do_set_contents_element_validP(state, ind)) && (NIL == sbhl_search_path_termination_p(ind, $sbhl_gather_space$.getDynamicValue(thread)))) {
															sbhl_mark_node_marked(ind, $sbhl_gather_space$.getDynamicValue(thread));
															if (NIL == fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
															    fact_sheets.maybe_update_fact_sheet_and_record_stats(ind, verbosity, domain_mt, language_mt);
															}
														    }
														}
													    } else if (sol.isList()) {
														SubLObject csome_list_var = sol;
														SubLObject ind2 = NIL;
														ind2 = csome_list_var.first();
														while (NIL != csome_list_var) {
														    if (NIL == sbhl_search_path_termination_p(ind2, $sbhl_gather_space$.getDynamicValue(thread))) {
															sbhl_mark_node_marked(ind2, $sbhl_gather_space$.getDynamicValue(thread));
															if (NIL == fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
															    fact_sheets.maybe_update_fact_sheet_and_record_stats(ind2, verbosity, domain_mt, language_mt);
															}
														    }
														    csome_list_var = csome_list_var.rest();
														    ind2 = csome_list_var.first();
														}
													    } else {
														Errors.error(fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol);
													    }

													} finally {
													    $sbhl_link_tv$.rebind(_prev_bind_0_$239, thread);
													}
												    }
												}
												dictionary_contents.do_dictionary_contents_finalize(iteration_state_$249);
											    } finally {
												$sbhl_link_mt$.rebind(_prev_bind_0_$238, thread);
											    }
											}
										    }
										    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
										}
									    } else {
										sbhl_error(FIVE_INTEGER, fact_sheets.$str434$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
									    }
									    if (NIL != do_sbhl_non_fort_linksP(node, get_sbhl_module(UNPROVIDED))) {
										SubLObject csome_list_var2 = non_fort_instance_table_lookup(node);
										SubLObject instance_tuple = NIL;
										instance_tuple = csome_list_var2.first();
										while (NIL != csome_list_var2) {
										    SubLObject current;
										    final SubLObject datum = current = instance_tuple;
										    SubLObject link_node = NIL;
										    SubLObject mt2 = NIL;
										    SubLObject tv2 = NIL;
										    destructuring_bind_must_consp(current, datum, fact_sheets.$list547);
										    link_node = current.first();
										    current = current.rest();
										    destructuring_bind_must_consp(current, datum, fact_sheets.$list547);
										    mt2 = current.first();
										    current = current.rest();
										    destructuring_bind_must_consp(current, datum, fact_sheets.$list547);
										    tv2 = current.first();
										    current = current.rest();
										    if (NIL == current) {
											if (NIL != mt_relevance_macros.relevant_mtP(mt2)) {
											    final SubLObject _prev_bind_0_$240 = $sbhl_link_mt$.currentBinding(thread);
											    try {
												$sbhl_link_mt$.bind(mt2, thread);
												if (NIL != relevant_sbhl_tvP(tv2)) {
												    final SubLObject _prev_bind_0_$241 = $sbhl_link_tv$.currentBinding(thread);
												    try {
													$sbhl_link_tv$.bind(tv2, thread);
													final SubLObject sol;
													final SubLObject link_nodes2 = sol = list(link_node);
													if (NIL != set.set_p(sol)) {
													    final SubLObject set_contents_var = set.do_set_internal(sol);
													    SubLObject basis_object;
													    SubLObject state;
													    SubLObject ind;
													    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object,
														    set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
														ind = set_contents.do_set_contents_next(basis_object, state);
														if ((NIL != set_contents.do_set_contents_element_validP(state, ind)) && (NIL == sbhl_search_path_termination_p(ind, $sbhl_gather_space$.getDynamicValue(thread)))) {
														    sbhl_mark_node_marked(ind, $sbhl_gather_space$.getDynamicValue(thread));
														    if (NIL == fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
															fact_sheets.maybe_update_fact_sheet_and_record_stats(ind, verbosity, domain_mt, language_mt);
														    }
														}
													    }
													} else if (sol.isList()) {
													    SubLObject csome_list_var_$253 = sol;
													    SubLObject ind2 = NIL;
													    ind2 = csome_list_var_$253.first();
													    while (NIL != csome_list_var_$253) {
														if (NIL == sbhl_search_path_termination_p(ind2, $sbhl_gather_space$.getDynamicValue(thread))) {
														    sbhl_mark_node_marked(ind2, $sbhl_gather_space$.getDynamicValue(thread));
														    if (NIL == fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
															fact_sheets.maybe_update_fact_sheet_and_record_stats(ind2, verbosity, domain_mt, language_mt);
														    }
														}
														csome_list_var_$253 = csome_list_var_$253.rest();
														ind2 = csome_list_var_$253.first();
													    }
													} else {
													    Errors.error(fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol);
													}

												    } finally {
													$sbhl_link_tv$.rebind(_prev_bind_0_$241, thread);
												    }
												}
											    } finally {
												$sbhl_link_mt$.rebind(_prev_bind_0_$240, thread);
											    }
											}
										    } else {
											cdestructuring_bind_error(datum, fact_sheets.$list547);
										    }
										    csome_list_var2 = csome_list_var2.rest();
										    instance_tuple = csome_list_var2.first();
										}
									    }
									} else if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
									    SubLObject cdolist_list_var_$254;
									    final SubLObject new_list = cdolist_list_var_$254 = (NIL != sbhl_randomize_lists_p())
										    ? list_utilities.randomize_list(get_sbhl_module_relevant_naut_link_generators(get_sbhl_module_backward_direction(get_sbhl_module(fact_sheets.$$isa)), $sbhl_tv$.getDynamicValue(thread), get_sbhl_module(UNPROVIDED)))
										    : get_sbhl_module_relevant_naut_link_generators(get_sbhl_module_backward_direction(get_sbhl_module(fact_sheets.$$isa)), $sbhl_tv$.getDynamicValue(thread), get_sbhl_module(UNPROVIDED));
									    SubLObject generating_fn = NIL;
									    generating_fn = cdolist_list_var_$254.first();
									    while (NIL != cdolist_list_var_$254) {
										final SubLObject _prev_bind_0_$242 = $sbhl_link_generator$.currentBinding(thread);
										try {
										    $sbhl_link_generator$.bind(generating_fn, thread);
										    final SubLObject sol2;
										    final SubLObject link_nodes3 = sol2 = funcall(generating_fn, node);
										    if (NIL != set.set_p(sol2)) {
											final SubLObject set_contents_var2 = set.do_set_internal(sol2);
											SubLObject basis_object2;
											SubLObject state2;
											SubLObject ind3;
											for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2,
												set_contents_var2); NIL == set_contents.do_set_contents_doneP(basis_object2, state2); state2 = set_contents.do_set_contents_update_state(state2)) {
											    ind3 = set_contents.do_set_contents_next(basis_object2, state2);
											    if ((NIL != set_contents.do_set_contents_element_validP(state2, ind3)) && (NIL == sbhl_search_path_termination_p(ind3, $sbhl_gather_space$.getDynamicValue(thread)))) {
												sbhl_mark_node_marked(ind3, $sbhl_gather_space$.getDynamicValue(thread));
												if (NIL == fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
												    fact_sheets.maybe_update_fact_sheet_and_record_stats(ind3, verbosity, domain_mt, language_mt);
												}
											    }
											}
										    } else if (sol2.isList()) {
											SubLObject csome_list_var3 = sol2;
											SubLObject ind4 = NIL;
											ind4 = csome_list_var3.first();
											while (NIL != csome_list_var3) {
											    if (NIL == sbhl_search_path_termination_p(ind4, $sbhl_gather_space$.getDynamicValue(thread))) {
												sbhl_mark_node_marked(ind4, $sbhl_gather_space$.getDynamicValue(thread));
												if (NIL == fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
												    fact_sheets.maybe_update_fact_sheet_and_record_stats(ind4, verbosity, domain_mt, language_mt);
												}
											    }
											    csome_list_var3 = csome_list_var3.rest();
											    ind4 = csome_list_var3.first();
											}
										    } else {
											Errors.error(fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol2);
										    }

										} finally {
										    $sbhl_link_generator$.rebind(_prev_bind_0_$242, thread);
										}
										cdolist_list_var_$254 = cdolist_list_var_$254.rest();
										generating_fn = cdolist_list_var_$254.first();
									    }
									}

								    } finally {
									$genl_inverse_mode_p$.rebind(_prev_bind_1_$238, thread);
									$sbhl_module$.rebind(_prev_bind_0_$237, thread);
								    }
								    cdolist_list_var = cdolist_list_var.rest();
								    module_var = cdolist_list_var.first();
								}
								SubLObject cdolist_list_var2;
								final SubLObject accessible_modules2 = cdolist_list_var2 = get_sbhl_accessible_modules(get_sbhl_transfers_through_module(get_sbhl_module(fact_sheets.$$isa)));
								SubLObject module_var2 = NIL;
								module_var2 = cdolist_list_var2.first();
								while (NIL != cdolist_list_var2) {
								    final SubLObject _prev_bind_0_$243 = $sbhl_module$.currentBinding(thread);
								    final SubLObject _prev_bind_1_$239 = $genl_inverse_mode_p$.currentBinding(thread);
								    try {
									$sbhl_module$.bind(module_var2, thread);
									$genl_inverse_mode_p$.bind(NIL != flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == $genl_inverse_mode_p$.getDynamicValue(thread)) : $genl_inverse_mode_p$.getDynamicValue(thread), thread);
									final SubLObject node2 = function_terms.naut_to_nart(node_var_$234);
									if (NIL != sbhl_node_object_p(node2)) {
									    final SubLObject d_link2 = get_sbhl_graph_link(node2, get_sbhl_module(UNPROVIDED));
									    if (NIL != d_link2) {
										final SubLObject mt_links2 = get_sbhl_mt_links(d_link2, get_sbhl_link_direction(), get_sbhl_module(UNPROVIDED));
										if (NIL != mt_links2) {
										    SubLObject iteration_state2;
										    for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links2)); NIL == dictionary_contents.do_dictionary_contents_doneP(
											    iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
											thread.resetMultipleValues();
											final SubLObject mt3 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
											final SubLObject tv_links2 = thread.secondMultipleValue();
											thread.resetMultipleValues();
											if (NIL != mt_relevance_macros.relevant_mtP(mt3)) {
											    final SubLObject _prev_bind_0_$244 = $sbhl_link_mt$.currentBinding(thread);
											    try {
												$sbhl_link_mt$.bind(mt3, thread);
												SubLObject iteration_state_$250;
												for (iteration_state_$250 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links2)); NIL == dictionary_contents.do_dictionary_contents_doneP(
													iteration_state_$250); iteration_state_$250 = dictionary_contents.do_dictionary_contents_next(iteration_state_$250)) {
												    thread.resetMultipleValues();
												    final SubLObject tv2 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$250);
												    final SubLObject link_nodes4 = thread.secondMultipleValue();
												    thread.resetMultipleValues();
												    if (NIL != relevant_sbhl_tvP(tv2)) {
													final SubLObject _prev_bind_0_$245 = $sbhl_link_tv$.currentBinding(thread);
													try {
													    $sbhl_link_tv$.bind(tv2, thread);
													    final SubLObject sol3 = link_nodes4;
													    if (NIL != set.set_p(sol3)) {
														final SubLObject set_contents_var3 = set.do_set_internal(sol3);
														SubLObject basis_object3;
														SubLObject state3;
														SubLObject node_vars_link_node;
														for (basis_object3 = set_contents.do_set_contents_basis_object(set_contents_var3), state3 = NIL, state3 = set_contents.do_set_contents_initial_state(basis_object3,
															set_contents_var3); NIL == set_contents.do_set_contents_doneP(basis_object3, state3); state3 = set_contents.do_set_contents_update_state(state3)) {
														    node_vars_link_node = set_contents.do_set_contents_next(basis_object3, state3);
														    if ((NIL != set_contents.do_set_contents_element_validP(state3, node_vars_link_node)) && (NIL == sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED))) {
															sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
															deck.deck_push(node_vars_link_node, recur_deck);
														    }
														}
													    } else if (sol3.isList()) {
														SubLObject csome_list_var4 = sol3;
														SubLObject node_vars_link_node2 = NIL;
														node_vars_link_node2 = csome_list_var4.first();
														while (NIL != csome_list_var4) {
														    if (NIL == sbhl_search_path_termination_p(node_vars_link_node2, UNPROVIDED)) {
															sbhl_mark_node_marked(node_vars_link_node2, UNPROVIDED);
															deck.deck_push(node_vars_link_node2, recur_deck);
														    }
														    csome_list_var4 = csome_list_var4.rest();
														    node_vars_link_node2 = csome_list_var4.first();
														}
													    } else {
														Errors.error(fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol3);
													    }

													} finally {
													    $sbhl_link_tv$.rebind(_prev_bind_0_$245, thread);
													}
												    }
												}
												dictionary_contents.do_dictionary_contents_finalize(iteration_state_$250);
											    } finally {
												$sbhl_link_mt$.rebind(_prev_bind_0_$244, thread);
											    }
											}
										    }
										    dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
										}
									    } else {
										sbhl_error(FIVE_INTEGER, fact_sheets.$str434$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
									    }
									} else if (NIL != obsolete.cnat_p(node2, UNPROVIDED)) {
									    SubLObject cdolist_list_var_$255;
									    final SubLObject new_list2 = cdolist_list_var_$255 = (NIL != sbhl_randomize_lists_p())
										    ? list_utilities.randomize_list(get_sbhl_module_relevant_naut_link_generators(get_sbhl_link_direction(), $sbhl_tv$.getDynamicValue(thread), get_sbhl_module(UNPROVIDED)))
										    : get_sbhl_module_relevant_naut_link_generators(get_sbhl_link_direction(), $sbhl_tv$.getDynamicValue(thread), get_sbhl_module(UNPROVIDED));
									    SubLObject generating_fn2 = NIL;
									    generating_fn2 = cdolist_list_var_$255.first();
									    while (NIL != cdolist_list_var_$255) {
										final SubLObject _prev_bind_0_$246 = $sbhl_link_generator$.currentBinding(thread);
										try {
										    $sbhl_link_generator$.bind(generating_fn2, thread);
										    final SubLObject sol4;
										    final SubLObject link_nodes5 = sol4 = funcall(generating_fn2, node2);
										    if (NIL != set.set_p(sol4)) {
											final SubLObject set_contents_var4 = set.do_set_internal(sol4);
											SubLObject basis_object4;
											SubLObject state4;
											SubLObject node_vars_link_node3;
											for (basis_object4 = set_contents.do_set_contents_basis_object(set_contents_var4), state4 = NIL, state4 = set_contents.do_set_contents_initial_state(basis_object4,
												set_contents_var4); NIL == set_contents.do_set_contents_doneP(basis_object4, state4); state4 = set_contents.do_set_contents_update_state(state4)) {
											    node_vars_link_node3 = set_contents.do_set_contents_next(basis_object4, state4);
											    if ((NIL != set_contents.do_set_contents_element_validP(state4, node_vars_link_node3)) && (NIL == sbhl_search_path_termination_p(node_vars_link_node3, UNPROVIDED))) {
												sbhl_mark_node_marked(node_vars_link_node3, UNPROVIDED);
												deck.deck_push(node_vars_link_node3, recur_deck);
											    }
											}
										    } else if (sol4.isList()) {
											SubLObject csome_list_var5 = sol4;
											SubLObject node_vars_link_node4 = NIL;
											node_vars_link_node4 = csome_list_var5.first();
											while (NIL != csome_list_var5) {
											    if (NIL == sbhl_search_path_termination_p(node_vars_link_node4, UNPROVIDED)) {
												sbhl_mark_node_marked(node_vars_link_node4, UNPROVIDED);
												deck.deck_push(node_vars_link_node4, recur_deck);
											    }
											    csome_list_var5 = csome_list_var5.rest();
											    node_vars_link_node4 = csome_list_var5.first();
											}
										    } else {
											Errors.error(fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol4);
										    }

										} finally {
										    $sbhl_link_generator$.rebind(_prev_bind_0_$246, thread);
										}
										cdolist_list_var_$255 = cdolist_list_var_$255.rest();
										generating_fn2 = cdolist_list_var_$255.first();
									    }
									}

								    } finally {
									$genl_inverse_mode_p$.rebind(_prev_bind_1_$239, thread);
									$sbhl_module$.rebind(_prev_bind_0_$243, thread);
								    }
								    cdolist_list_var2 = cdolist_list_var2.rest();
								    module_var2 = cdolist_list_var2.first();
								}
								node_var_$234 = deck.deck_pop(recur_deck);
							    }
							} finally {
							    $genl_inverse_mode_p$.rebind(_prev_bind_2_$243, thread);
							    $sbhl_link_direction$.rebind(_prev_bind_1_$237, thread);
							    $sbhl_search_direction$.rebind(_prev_bind_0_$236, thread);
							}
						    } else {
							sbhl_warn(TWO_INTEGER, fact_sheets.$str435$Node__a_does_not_pass_sbhl_type_t, node_var, get_sbhl_type_test(get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
						    }
						} finally {
						    $sbhl_module$.rebind(_prev_bind_5, thread);
						    $genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
						    $sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$242, thread);
						    $sbhl_search_module_type$.rebind(_prev_bind_1_$236, thread);
						    $sbhl_search_module$.rebind(_prev_bind_0_$235, thread);
						}
					    } finally {
						$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$235, thread);
						$sbhl_tv$.rebind(_prev_bind_0_$234, thread);
					    }
					} finally {
					    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
					    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$234, thread);
					    mt_relevance_macros.$mt$.rebind(_prev_bind_0_$233, thread);
					}
				    } finally {
					final SubLObject _prev_bind_0_$247 = $is_thread_performing_cleanupP$.currentBinding(thread);
					try {
					    $is_thread_performing_cleanupP$.bind(T, thread);
					    final SubLObject _values = getValuesAsVector();
					    free_sbhl_marking_space($sbhl_space$.getDynamicValue(thread));
					    restoreValuesFromVector(_values);
					} finally {
					    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$247, thread);
					}
				    }
				} finally {
				    $sbhl_space$.rebind(_prev_bind_0_$232, thread);
				}
			    } finally {
				final SubLObject _prev_bind_0_$248 = $is_thread_performing_cleanupP$.currentBinding(thread);
				try {
				    $is_thread_performing_cleanupP$.bind(T, thread);
				    final SubLObject _values2 = getValuesAsVector();
				    free_sbhl_marking_space($sbhl_gather_space$.getDynamicValue(thread));
				    restoreValuesFromVector(_values2);
				} finally {
				    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$248, thread);
				}
			    }
			} finally {
			    $sbhl_gather_space$.rebind(_prev_bind_1_$233, thread);
			    $sbhl_module$.rebind(_prev_bind_0_$231, thread);
			}
		    } finally {
			fact_sheet_logs.$hourly_fact_sheet_stats$.rebind(_prev_bind_2, thread);
			fact_sheet_logs.$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_$230, thread);
		    }
		    if (NIL != use_new_setupP) {
			final SubLObject stream_$232 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream_$232) && current_process().eql(subl_promotions.initial_process())) || (stream_$232.isStream() && (NIL != output_stream_p(stream_$232)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$232);
			    format(stream_$232, fact_sheets.$str548$Closing_log_);
			    force_output(stream_$232);
			}
			fact_sheet_logs.note_fact_sheet_log_file_closed(UNPROVIDED);
		    }
		} finally {
		    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$229, thread);
		}
	    } finally {
		final SubLObject _prev_bind_0_$249 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values3 = getValuesAsVector();
		    if (stream.isStream()) {
			close(stream, UNPROVIDED);
		    }
		    restoreValuesFromVector(_values3);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$249, thread);
		}
	    }
	} finally {
	    fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
	}
	fact_sheets.$fact_sheet_generator_update_date_and_second$.setDynamicValue(old_generator_update_date, thread);
	return NIL;
    }

    /**
    * Regenerate fact sheets for all fact-sheetable instances of COLL whose current fact sheets were generated
    * prior to the date DATE or are stubs.
    *
    * @param DATE
    * 		integerp; a date in the format YYYYMMDD
    */

    public static final SubLObject launch_fact_sheet_updater_of_fs_type_not_updated_since_alt(SubLObject fs_type, SubLObject date, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	if (date == UNPROVIDED) {
	    date = $fact_sheet_generator_update_date_and_second$.getDynamicValue().first();
	}
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt();
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	return process_utilities.make_cyc_server_process_with_args($str_alt686$Fact_Sheet_updater_for_Public_Fac, UPDATE_FACT_SHEETS_OF_FS_TYPE_NOT_UPDATED_SINCE, list(fs_type, date, verbosity, domain_mt, language_mt));
    }

    public static SubLObject launch_fact_sheet_updater_of_fs_type_not_updated_since(final SubLObject fs_type, SubLObject date, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	if (date == UNPROVIDED) {
	    date = fact_sheets.$fact_sheet_generator_update_date_and_second$.getDynamicValue().first();
	}
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt();
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	return process_utilities.make_cyc_server_process_with_args(fact_sheets.$str549$Fact_Sheet_updater_for_Public_Fac, fact_sheets.UPDATE_FACT_SHEETS_OF_FS_TYPE_NOT_UPDATED_SINCE, list(fs_type, date, verbosity, domain_mt, language_mt));
    }

    /**
     * updates data public fact sheets that have not been updated since DATE
     */
    @LispMethod(comment = "updates data public fact sheets that have not been updated since DATE")
    public static final SubLObject update_fact_sheets_of_fs_type_not_updated_since_alt(SubLObject fs_type, SubLObject date, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	if (date == UNPROVIDED) {
	    date = $fact_sheet_generator_update_date_and_second$.getDynamicValue().first();
	}
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt();
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(date, INTEGERP);
	    {
		SubLObject _prev_bind_0 = $fact_sheet_generator_update_date_and_second$.currentBinding(thread);
		try {
		    $fact_sheet_generator_update_date_and_second$.bind(list(date, ZERO_INTEGER), thread);
		    {
			SubLObject terms = com.cyc.cycjava.cycl.fact_sheets.terms_for_public_fact_sheets(fs_type);
			SubLObject message = cconcatenate($str_alt688$Updating_, new SubLObject[] { format_nil.format_nil_a_no_copy(fs_type), $str_alt689$_fact_sheets });
			SubLObject already_loggingP = stringp($fact_sheet_log_file$.getDynamicValue(thread));
			SubLObject directory = NIL;
			SubLObject filename = NIL;
			SubLObject use_new_setupP = NIL;
			if (NIL == already_loggingP) {
			    thread.resetMultipleValues();
			    {
				SubLObject directory_350 = com.cyc.cycjava.cycl.fact_sheets.open_new_unique_fact_sheet_log_file();
				SubLObject filename_351 = thread.secondMultipleValue();
				thread.resetMultipleValues();
				directory = directory_350;
				filename = filename_351;
			    }
			    use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
			}
			if (NIL != use_new_setupP) {
			    format(StreamsLow.$standard_output$.getDynamicValue(thread), $str_alt69$__Logging_Fact_Sheet_generation_t, filename);
			    force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
			}
			{
			    SubLObject _prev_bind_0_352 = $fact_sheet_log_file$.currentBinding(thread);
			    try {
				$fact_sheet_log_file$.bind(NIL != use_new_setupP ? ((SubLObject) (filename)) : $fact_sheet_log_file$.getDynamicValue(thread), thread);
				{
				    SubLObject stream = NIL;
				    try {
					{
					    SubLObject _prev_bind_0_353 = stream_macros.$stream_requires_locking$.currentBinding(thread);
					    try {
						stream_macros.$stream_requires_locking$.bind(NIL, thread);
						stream = compatibility.open_text($fact_sheet_log_file$.getDynamicValue(thread), $APPEND, NIL);
					    } finally {
						stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_353, thread);
					    }
					}
					if (!stream.isStream()) {
					    Errors.error($str_alt137$Unable_to_open__S, $fact_sheet_log_file$.getDynamicValue(thread));
					}
					{
					    SubLObject _prev_bind_0_354 = $fact_sheet_log_stream$.currentBinding(thread);
					    try {
						$fact_sheet_log_stream$.bind(stream, thread);
						{
						    SubLObject _prev_bind_0_355 = $next_fact_sheet_hourly_report_time$.currentBinding(thread);
						    SubLObject _prev_bind_1 = $hourly_fact_sheet_stats$.currentBinding(thread);
						    try {
							$next_fact_sheet_hourly_report_time$.bind(NIL, thread);
							$hourly_fact_sheet_stats$.bind(make_vector(TWO_INTEGER, ZERO_INTEGER), thread);
							com.cyc.cycjava.cycl.fact_sheets.reset_hourly_report_time(UNPROVIDED);
							{
							    SubLObject stream_356 = $fact_sheet_log_stream$.getDynamicValue(thread);
							    if (((T == stream_356) && (current_process() == subl_promotions.initial_process())) || (stream_356.isStream() && (NIL != output_stream_p(stream_356)))) {
								com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_356);
								format(stream_356, $str_alt690$Updating_fact_sheets_for_public_t, new SubLObject[] { fs_type, date, verbosity, domain_mt, language_mt });
								force_output(stream_356);
							    }
							}
							{
							    SubLObject set_var = terms;
							    $progress_note$.setDynamicValue(message, thread);
							    $progress_start_time$.setDynamicValue(get_universal_time(), thread);
							    $progress_total$.setDynamicValue(set.set_size(set_var), thread);
							    $progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
							    {
								SubLObject _prev_bind_0_357 = $last_percent_progress_index$.currentBinding(thread);
								SubLObject _prev_bind_1_358 = $last_percent_progress_prediction$.currentBinding(thread);
								SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
								SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
								try {
								    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
								    $last_percent_progress_prediction$.bind(NIL, thread);
								    $within_noting_percent_progress$.bind(T, thread);
								    $percent_progress_start_time$.bind(get_universal_time(), thread);
								    noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
								    {
									SubLObject set_contents_var = set.do_set_internal(set_var);
									SubLObject basis_object = do_set_contents_basis_object(set_contents_var);
									SubLObject state = NIL;
									for (state = do_set_contents_initial_state(basis_object, set_contents_var); NIL == do_set_contents_doneP(basis_object, state); state = do_set_contents_update_state(state)) {
									    {
										SubLObject v_term = do_set_contents_next(basis_object, state);
										if (NIL != do_set_contents_element_validP(state, v_term)) {
										    note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
										    $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
										    if (NIL == $stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
											com.cyc.cycjava.cycl.fact_sheets.maybe_update_fact_sheet_and_record_stats(v_term, verbosity, domain_mt, language_mt);
										    }
										}
									    }
									}
								    }
								    noting_percent_progress_postamble();
								} finally {
								    $percent_progress_start_time$.rebind(_prev_bind_3, thread);
								    $within_noting_percent_progress$.rebind(_prev_bind_2, thread);
								    $last_percent_progress_prediction$.rebind(_prev_bind_1_358, thread);
								    $last_percent_progress_index$.rebind(_prev_bind_0_357, thread);
								}
							    }
							}
						    } finally {
							$hourly_fact_sheet_stats$.rebind(_prev_bind_1, thread);
							$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_355, thread);
						    }
						}
						if (NIL != use_new_setupP) {
						    {
							SubLObject stream_359 = $fact_sheet_log_stream$.getDynamicValue(thread);
							if (((T == stream_359) && (current_process() == subl_promotions.initial_process())) || (stream_359.isStream() && (NIL != output_stream_p(stream_359)))) {
							    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_359);
							    format(stream_359, $str_alt685$Closing_log_);
							    force_output(stream_359);
							}
						    }
						    com.cyc.cycjava.cycl.fact_sheets.note_fact_sheet_log_file_closed(UNPROVIDED);
						}
					    } finally {
						$fact_sheet_log_stream$.rebind(_prev_bind_0_354, thread);
					    }
					}
				    } finally {
					{
					    SubLObject _prev_bind_0_360 = $is_thread_performing_cleanupP$.currentBinding(thread);
					    try {
						$is_thread_performing_cleanupP$.bind(T, thread);
						if (stream.isStream()) {
						    close(stream, UNPROVIDED);
						}
					    } finally {
						$is_thread_performing_cleanupP$.rebind(_prev_bind_0_360, thread);
					    }
					}
				    }
				}
			    } finally {
				$fact_sheet_log_file$.rebind(_prev_bind_0_352, thread);
			    }
			}
		    }
		} finally {
		    $fact_sheet_generator_update_date_and_second$.rebind(_prev_bind_0, thread);
		}
	    }
	    return NIL;
	}
    }

    @LispMethod(comment = "updates data public fact sheets that have not been updated since DATE")
    public static SubLObject update_fact_sheets_of_fs_type_not_updated_since(final SubLObject fs_type, SubLObject date, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	if (date == UNPROVIDED) {
	    date = fact_sheets.$fact_sheet_generator_update_date_and_second$.getDynamicValue().first();
	}
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt();
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	assert NIL != integerp(date) : "! integerp(date) " + ("Types.integerp(date) " + "CommonSymbols.NIL != Types.integerp(date) ") + date;
	final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_generator_update_date_and_second$.currentBinding(thread);
	try {
	    fact_sheets.$fact_sheet_generator_update_date_and_second$.bind(list(date, ZERO_INTEGER), thread);
	    final SubLObject terms = fact_sheets.terms_for_public_fact_sheets(fs_type);
	    final SubLObject message = cconcatenate(fact_sheets.$$$Updating_, new SubLObject[] { format_nil.format_nil_a_no_copy(fs_type), fact_sheets.$$$_fact_sheets });
	    final SubLObject already_loggingP = stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
	    SubLObject directory = NIL;
	    SubLObject filename = NIL;
	    SubLObject use_new_setupP = NIL;
	    if (NIL == already_loggingP) {
		thread.resetMultipleValues();
		final SubLObject directory_$267 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
		final SubLObject filename_$268 = thread.secondMultipleValue();
		thread.resetMultipleValues();
		directory = directory_$267;
		filename = filename_$268;
		use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
	    }
	    if (NIL != use_new_setupP) {
		format(StreamsLow.$standard_output$.getDynamicValue(thread), fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
		force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
	    }
	    final SubLObject _prev_bind_0_$269 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
	    try {
		fact_sheet_logs.$fact_sheet_log_file$.bind(NIL != use_new_setupP ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
		SubLObject stream = NIL;
		try {
		    final SubLObject _prev_bind_0_$270 = stream_macros.$stream_requires_locking$.currentBinding(thread);
		    try {
			stream_macros.$stream_requires_locking$.bind(NIL, thread);
			stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), $APPEND);
		    } finally {
			stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$270, thread);
		    }
		    if (!stream.isStream()) {
			Errors.error(fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
		    }
		    final SubLObject _prev_bind_0_$271 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
		    try {
			fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
			final SubLObject _prev_bind_0_$272 = fact_sheet_logs.$next_fact_sheet_hourly_report_time$.currentBinding(thread);
			final SubLObject _prev_bind_2 = fact_sheet_logs.$hourly_fact_sheet_stats$.currentBinding(thread);
			try {
			    fact_sheet_logs.$next_fact_sheet_hourly_report_time$.bind(NIL, thread);
			    fact_sheet_logs.$hourly_fact_sheet_stats$.bind(make_vector(TWO_INTEGER, ZERO_INTEGER), thread);
			    fact_sheet_logs.reset_hourly_report_time(UNPROVIDED);
			    final SubLObject stream_$273 = fact_sheet_logs.fact_sheet_log_stream();
			    if (((T == stream_$273) && current_process().eql(subl_promotions.initial_process())) || (stream_$273.isStream() && (NIL != output_stream_p(stream_$273)))) {
				fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$273);
				format(stream_$273, fact_sheets.$str553$Updating_fact_sheets_for_public_t, new SubLObject[] { fs_type, date, verbosity, domain_mt, language_mt });
				force_output(stream_$273);
			    }
			    final SubLObject set_var = terms;
			    final SubLObject _prev_bind_0_$273 = $progress_note$.currentBinding(thread);
			    final SubLObject _prev_bind_1_$275 = $progress_start_time$.currentBinding(thread);
			    final SubLObject _prev_bind_3 = $progress_total$.currentBinding(thread);
			    final SubLObject _prev_bind_4 = $progress_sofar$.currentBinding(thread);
			    final SubLObject _prev_bind_5 = $last_percent_progress_index$.currentBinding(thread);
			    final SubLObject _prev_bind_6 = $last_percent_progress_prediction$.currentBinding(thread);
			    final SubLObject _prev_bind_7 = $within_noting_percent_progress$.currentBinding(thread);
			    final SubLObject _prev_bind_8 = $percent_progress_start_time$.currentBinding(thread);
			    try {
				$progress_note$.bind(message, thread);
				$progress_start_time$.bind(get_universal_time(), thread);
				$progress_total$.bind(set.set_size(set_var), thread);
				$progress_sofar$.bind(ZERO_INTEGER, thread);
				$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
				$last_percent_progress_prediction$.bind(NIL, thread);
				$within_noting_percent_progress$.bind(T, thread);
				$percent_progress_start_time$.bind(get_universal_time(), thread);
				try {
				    noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
				    final SubLObject set_contents_var = set.do_set_internal(set_var);
				    SubLObject basis_object;
				    SubLObject state;
				    SubLObject v_term;
				    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
					    state); state = set_contents.do_set_contents_update_state(state)) {
					v_term = set_contents.do_set_contents_next(basis_object, state);
					if (NIL != set_contents.do_set_contents_element_validP(state, v_term)) {
					    if (NIL == fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
						fact_sheets.maybe_update_fact_sheet_and_record_stats(v_term, verbosity, domain_mt, language_mt);
					    }
					    $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
					    note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
					}
				    }
				} finally {
				    final SubLObject _prev_bind_0_$274 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					final SubLObject _values = getValuesAsVector();
					noting_percent_progress_postamble();
					restoreValuesFromVector(_values);
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$274, thread);
				    }
				}
			    } finally {
				$percent_progress_start_time$.rebind(_prev_bind_8, thread);
				$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
				$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
				$last_percent_progress_index$.rebind(_prev_bind_5, thread);
				$progress_sofar$.rebind(_prev_bind_4, thread);
				$progress_total$.rebind(_prev_bind_3, thread);
				$progress_start_time$.rebind(_prev_bind_1_$275, thread);
				$progress_note$.rebind(_prev_bind_0_$273, thread);
			    }
			} finally {
			    fact_sheet_logs.$hourly_fact_sheet_stats$.rebind(_prev_bind_2, thread);
			    fact_sheet_logs.$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_$272, thread);
			}
			if (NIL != use_new_setupP) {
			    final SubLObject stream_$274 = fact_sheet_logs.fact_sheet_log_stream();
			    if (((T == stream_$274) && current_process().eql(subl_promotions.initial_process())) || (stream_$274.isStream() && (NIL != output_stream_p(stream_$274)))) {
				fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$274);
				format(stream_$274, fact_sheets.$str548$Closing_log_);
				force_output(stream_$274);
			    }
			    fact_sheet_logs.note_fact_sheet_log_file_closed(UNPROVIDED);
			}
		    } finally {
			fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$271, thread);
		    }
		} finally {
		    final SubLObject _prev_bind_0_$275 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values2 = getValuesAsVector();
			if (stream.isStream()) {
			    close(stream, UNPROVIDED);
			}
			restoreValuesFromVector(_values2);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$275, thread);
		    }
		}
	    } finally {
		fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0_$269, thread);
	    }
	} finally {
	    fact_sheets.$fact_sheet_generator_update_date_and_second$.rebind(_prev_bind_0, thread);
	}
	return NIL;
    }

    /**
    * updates data public fact sheets that have not been updated since DATE
    */

    public static final SubLObject maybe_update_fact_sheet_and_record_stats_alt(SubLObject ind, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	if (NIL != com.cyc.cycjava.cycl.fact_sheets.possibly_update_fact_sheet_for_term(ind, verbosity, domain_mt, language_mt)) {
	    com.cyc.cycjava.cycl.fact_sheets.add_fact_sheet_info_to_hourly_stats(ind);
	    com.cyc.cycjava.cycl.fact_sheets.maybe_log_fact_sheet_hourly_report();
	}
	return ind;
    }

    public static SubLObject maybe_update_fact_sheet_and_record_stats(final SubLObject ind, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
	if (NIL != fact_sheets.possibly_update_fact_sheet_for_term(ind, verbosity, domain_mt, language_mt)) {
	    fact_sheet_logs.add_fact_sheet_info_to_hourly_stats(ind);
	    fact_sheet_logs.maybe_log_fact_sheet_hourly_report();
	}
	return ind;
    }

    public static final SubLObject update_all_stale_fact_sheets_alt(SubLObject root) {
	if (root == UNPROVIDED) {
	    root = file_utilities.cyc_home_subdirectory(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_path());
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject _prev_bind_0 = $fact_sheet_log_file$.currentBinding(thread);
		SubLObject _prev_bind_1 = $silent_progressP$.currentBinding(thread);
		try {
		    $fact_sheet_log_file$.bind(NIL, thread);
		    $silent_progressP$.bind(T, thread);
		    {
			SubLObject progress_message = (NIL != $silent_progressP$.getDynamicValue(thread)) ? ((SubLObject) (NIL)) : $str_alt691$Updating_stale_fact_sheets___;
			SubLObject error_count = ZERO_INTEGER;
			SubLObject stopP = NIL;
			SubLObject current_directory = NIL;
			SubLObject current_directory_okP = NIL;
			SubLObject verbosity = NIL;
			SubLObject domain_mt = NIL;
			SubLObject language_mt = NIL;
			SubLObject already_loggingP = stringp($fact_sheet_log_file$.getDynamicValue(thread));
			SubLObject directory = NIL;
			SubLObject filename = NIL;
			SubLObject use_new_setupP = NIL;
			if (NIL == already_loggingP) {
			    thread.resetMultipleValues();
			    {
				SubLObject directory_361 = com.cyc.cycjava.cycl.fact_sheets.open_new_unique_fact_sheet_log_file();
				SubLObject filename_362 = thread.secondMultipleValue();
				thread.resetMultipleValues();
				directory = directory_361;
				filename = filename_362;
			    }
			    use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
			}
			if (NIL != use_new_setupP) {
			    format(StreamsLow.$standard_output$.getDynamicValue(thread), $str_alt69$__Logging_Fact_Sheet_generation_t, filename);
			    force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
			}
			{
			    SubLObject _prev_bind_0_363 = $fact_sheet_log_file$.currentBinding(thread);
			    try {
				$fact_sheet_log_file$.bind(NIL != use_new_setupP ? ((SubLObject) (filename)) : $fact_sheet_log_file$.getDynamicValue(thread), thread);
				{
				    SubLObject stream = NIL;
				    try {
					{
					    SubLObject _prev_bind_0_364 = stream_macros.$stream_requires_locking$.currentBinding(thread);
					    try {
						stream_macros.$stream_requires_locking$.bind(NIL, thread);
						stream = compatibility.open_text($fact_sheet_log_file$.getDynamicValue(thread), $APPEND, NIL);
					    } finally {
						stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_364, thread);
					    }
					}
					if (!stream.isStream()) {
					    Errors.error($str_alt137$Unable_to_open__S, $fact_sheet_log_file$.getDynamicValue(thread));
					}
					{
					    SubLObject _prev_bind_0_365 = $fact_sheet_log_stream$.currentBinding(thread);
					    try {
						$fact_sheet_log_stream$.bind(stream, thread);
						{
						    SubLObject _prev_bind_0_366 = $next_fact_sheet_hourly_report_time$.currentBinding(thread);
						    SubLObject _prev_bind_1_367 = $hourly_fact_sheet_stats$.currentBinding(thread);
						    try {
							$next_fact_sheet_hourly_report_time$.bind(NIL, thread);
							$hourly_fact_sheet_stats$.bind(make_vector(TWO_INTEGER, ZERO_INTEGER), thread);
							com.cyc.cycjava.cycl.fact_sheets.reset_hourly_report_time(UNPROVIDED);
							{
							    SubLObject stream_368 = $fact_sheet_log_stream$.getDynamicValue(thread);
							    if (((T == stream_368) && (current_process() == subl_promotions.initial_process())) || (stream_368.isStream() && (NIL != output_stream_p(stream_368)))) {
								com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_368);
								format(stream_368, $str_alt692$Updating_all_stale_fact_sheets_fr, root);
								force_output(stream_368);
							    }
							}
							while (NIL == stopP) {
							    SubLTrampolineFile.checkType(root, DIRECTORY_P);
							    {
								SubLObject directory_list_var = list(root);
								SubLObject current_directory_var = NIL;
								for (current_directory_var = directory_list_var.first(); NIL != directory_list_var; current_directory_var = directory_list_var.first()) {
								    directory_list_var = directory_list_var.rest();
								    SubLTrampolineFile.checkType(current_directory_var, DIRECTORY_P);
								    {
									SubLObject directory_contents_var = Filesys.directory(current_directory_var, T);
									SubLObject progress_message_var = (progress_message.isString())
										? ((SubLObject) (cconcatenate(progress_message, cconcatenate(format_nil.$format_nil_percent$.getGlobalValue(), new SubLObject[] { $str_alt658$_Directory__, format_nil.format_nil_s_no_copy(current_directory_var) }))))
										: NIL;
									{
									    SubLObject _prev_bind_0_369 = $silent_progressP$.currentBinding(thread);
									    try {
										$silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
										{
										    SubLObject list_var = directory_contents_var;
										    $progress_note$.setDynamicValue(progress_message_var, thread);
										    $progress_start_time$.setDynamicValue(get_universal_time(), thread);
										    $progress_total$.setDynamicValue(length(list_var), thread);
										    $progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
										    {
											SubLObject _prev_bind_0_370 = $last_percent_progress_index$.currentBinding(thread);
											SubLObject _prev_bind_1_371 = $last_percent_progress_prediction$.currentBinding(thread);
											SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
											SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
											try {
											    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
											    $last_percent_progress_prediction$.bind(NIL, thread);
											    $within_noting_percent_progress$.bind(T, thread);
											    $percent_progress_start_time$.bind(get_universal_time(), thread);
											    noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
											    {
												SubLObject csome_list_var = list_var;
												SubLObject filename_372 = NIL;
												for (filename_372 = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), filename_372 = csome_list_var.first()) {
												    note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
												    $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
												    if (NIL != Filesys.directory_p(filename_372)) {
													directory_list_var = cons(filename_372, directory_list_var);
												    } else {
													if (NIL == stopP) {
													    {
														SubLObject this_directory = file_utilities.deconstruct_path(filename_372);
														if (!this_directory.equal(current_directory)) {
														    current_directory = this_directory;
														    {
															SubLObject okP = NIL;
															if (NIL != com.cyc.cycjava.cycl.fact_sheets.possible_fact_sheet_directory_p(current_directory)) {
															    thread.resetMultipleValues();
															    {
																SubLObject this_verbosity = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_from_path(file_utilities.deconstruct_path(filename_372));
																SubLObject this_domain_mt = thread.secondMultipleValue();
																SubLObject this_language_mt = thread.thirdMultipleValue();
																thread.resetMultipleValues();
																if (((NIL != this_verbosity) && (NIL != this_domain_mt)) && (NIL != this_language_mt)) {
																    okP = T;
																    verbosity = this_verbosity;
																    domain_mt = this_domain_mt;
																    language_mt = this_language_mt;
																    {
																	SubLObject stream_373 = $fact_sheet_log_stream$.getDynamicValue(thread);
																	if (((T == stream_373) && (current_process() == subl_promotions.initial_process())) || (stream_373.isStream() && (NIL != output_stream_p(stream_373)))) {
																	    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_373);
																	    format(stream_373, $str_alt693$Now_doing__S__S__S, new SubLObject[] { verbosity, domain_mt, language_mt });
																	    force_output(stream_373);
																	}
																    }
																}
															    }
															}
															current_directory_okP = okP;
														    }
														}
													    }
													    if (NIL != current_directory_okP) {
														{
														    SubLObject error_message = NIL;
														    {
															SubLObject _prev_bind_0_374 = $fact_sheet_verbosity$.currentBinding(thread);
															try {
															    $fact_sheet_verbosity$.bind(verbosity, thread);
															    if (NIL != $catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
																try {
																    {
																	SubLObject _prev_bind_0_375 = Errors.$error_handler$.currentBinding(thread);
																	try {
																	    Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
																	    try {
																		com.cyc.cycjava.cycl.fact_sheets.update_fact_sheet_file_if_stale(filename_372, NIL, UNPROVIDED);
																	    } catch (Throwable catch_var) {
																		Errors.handleThrowable(catch_var, NIL);
																	    }
																	} finally {
																	    Errors.$error_handler$.rebind(_prev_bind_0_375, thread);
																	}
																    }
																} catch (Throwable ccatch_env_var) {
																    error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
																}
															    } else {
																com.cyc.cycjava.cycl.fact_sheets.update_fact_sheet_file_if_stale(filename_372, NIL, UNPROVIDED);
															    }
															    if (error_message.isString()) {
																{
																    SubLObject stream_376 = $fact_sheet_log_stream$.getDynamicValue(thread);
																    if (((T == stream_376) && (current_process() == subl_promotions.initial_process())) || (stream_376.isStream() && (NIL != output_stream_p(stream_376)))) {
																	com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream_376);
																	format(stream_376, $str_alt694$Stale_Fact_Sheet_Updater_error_on, filename_372, error_message);
																	force_output(stream_376);
																    }
																}
																error_count = add(error_count, ONE_INTEGER);
																if (error_count.numG(TEN_INTEGER)) {
																    {
																	SubLObject stream_377 = $fact_sheet_log_stream$.getDynamicValue(thread);
																	if (((T == stream_377) && (current_process() == subl_promotions.initial_process())) || (stream_377.isStream() && (NIL != output_stream_p(stream_377)))) {
																	    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream_377);
																	    format(stream_377, $str_alt695$Abandoning_after__D_errors_, error_count);
																	    force_output(stream_377);
																	}
																    }
																    stopP = T;
																}
															    }
															} finally {
															    $fact_sheet_verbosity$.rebind(_prev_bind_0_374, thread);
															}
														    }
														}
														if (NIL != $stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
														    {
															SubLObject stream_378 = $fact_sheet_log_stream$.getDynamicValue(thread);
															if (((T == stream_378) && (current_process() == subl_promotions.initial_process())) || (stream_378.isStream() && (NIL != output_stream_p(stream_378)))) {
															    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_378);
															    format(stream_378, $str_alt696$Instructed_to_stop_updates_after_);
															    force_output(stream_378);
															}
														    }
														    stopP = T;
														}
													    }
													}
												    }
												}
											    }
											    noting_percent_progress_postamble();
											} finally {
											    $percent_progress_start_time$.rebind(_prev_bind_3, thread);
											    $within_noting_percent_progress$.rebind(_prev_bind_2, thread);
											    $last_percent_progress_prediction$.rebind(_prev_bind_1_371, thread);
											    $last_percent_progress_index$.rebind(_prev_bind_0_370, thread);
											}
										    }
										}
									    } finally {
										$silent_progressP$.rebind(_prev_bind_0_369, thread);
									    }
									}
								    }
								}
							    }
							    {
								SubLObject stream_379 = $fact_sheet_log_stream$.getDynamicValue(thread);
								if (((T == stream_379) && (current_process() == subl_promotions.initial_process())) || (stream_379.isStream() && (NIL != output_stream_p(stream_379)))) {
								    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_379);
								    format(stream_379, $str_alt697$Finished_stale_fact_sheet_update_);
								    force_output(stream_379);
								}
							    }
							    if (NIL == stopP) {
								if (NIL == com.cyc.cycjava.cycl.fact_sheets.time_of_day_has_arrivedP(ZERO_INTEGER, ZERO_INTEGER, TWENTY_INTEGER)) {
								    {
									SubLObject stream_380 = $fact_sheet_log_stream$.getDynamicValue(thread);
									if (((T == stream_380) && (current_process() == subl_promotions.initial_process())) || (stream_380.isStream() && (NIL != output_stream_p(stream_380)))) {
									    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_380);
									    format(stream_380, $str_alt698$Sleeping_until_8_00_tonight__Zzz_);
									    force_output(stream_380);
									}
								    }
								    com.cyc.cycjava.cycl.fact_sheets.sleep_until_time_within_next_day(ZERO_INTEGER, ZERO_INTEGER, TWENTY_INTEGER);
								}
								{
								    SubLObject stream_381 = $fact_sheet_log_stream$.getDynamicValue(thread);
								    if (((T == stream_381) && (current_process() == subl_promotions.initial_process())) || (stream_381.isStream() && (NIL != output_stream_p(stream_381)))) {
									com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_381);
									format(stream_381, $str_alt699$Checking_for_fact_sheets_that_hav);
									force_output(stream_381);
								    }
								}
							    }
							}
						    } finally {
							$hourly_fact_sheet_stats$.rebind(_prev_bind_1_367, thread);
							$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_366, thread);
						    }
						}
						if (NIL != use_new_setupP) {
						    {
							SubLObject stream_382 = $fact_sheet_log_stream$.getDynamicValue(thread);
							if (((T == stream_382) && (current_process() == subl_promotions.initial_process())) || (stream_382.isStream() && (NIL != output_stream_p(stream_382)))) {
							    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_382);
							    format(stream_382, $str_alt685$Closing_log_);
							    force_output(stream_382);
							}
						    }
						    com.cyc.cycjava.cycl.fact_sheets.note_fact_sheet_log_file_closed(UNPROVIDED);
						}
					    } finally {
						$fact_sheet_log_stream$.rebind(_prev_bind_0_365, thread);
					    }
					}
				    } finally {
					{
					    SubLObject _prev_bind_0_383 = $is_thread_performing_cleanupP$.currentBinding(thread);
					    try {
						$is_thread_performing_cleanupP$.bind(T, thread);
						if (stream.isStream()) {
						    close(stream, UNPROVIDED);
						}
					    } finally {
						$is_thread_performing_cleanupP$.rebind(_prev_bind_0_383, thread);
					    }
					}
				    }
				}
			    } finally {
				$fact_sheet_log_file$.rebind(_prev_bind_0_363, thread);
			    }
			}
		    }
		} finally {
		    $silent_progressP$.rebind(_prev_bind_1, thread);
		    $fact_sheet_log_file$.rebind(_prev_bind_0, thread);
		}
	    }
	    return $DONE;
	}
    }

    public static SubLObject update_all_stale_fact_sheets(SubLObject root) {
	if (root == UNPROVIDED) {
	    root = file_utilities.cyc_home_subdirectory(fact_sheets.fact_sheet_data_path());
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
	final SubLObject _prev_bind_2 = $silent_progressP$.currentBinding(thread);
	try {
	    fact_sheet_logs.$fact_sheet_log_file$.bind(NIL, thread);
	    $silent_progressP$.bind(T, thread);
	    final SubLObject progress_message = (NIL != $silent_progressP$.getDynamicValue(thread)) ? NIL : fact_sheets.$str554$Updating_stale_fact_sheets___;
	    SubLObject error_count = ZERO_INTEGER;
	    SubLObject stopP = NIL;
	    SubLObject current_directory = NIL;
	    SubLObject current_directory_okP = NIL;
	    SubLObject verbosity = NIL;
	    SubLObject domain_mt = NIL;
	    SubLObject language_mt = NIL;
	    final SubLObject already_loggingP = stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
	    SubLObject directory = NIL;
	    SubLObject filename = NIL;
	    SubLObject use_new_setupP = NIL;
	    if (NIL == already_loggingP) {
		thread.resetMultipleValues();
		final SubLObject directory_$279 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
		final SubLObject filename_$280 = thread.secondMultipleValue();
		thread.resetMultipleValues();
		directory = directory_$279;
		filename = filename_$280;
		use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
	    }
	    if (NIL != use_new_setupP) {
		format(StreamsLow.$standard_output$.getDynamicValue(thread), fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
		force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
	    }
	    final SubLObject _prev_bind_0_$281 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
	    try {
		fact_sheet_logs.$fact_sheet_log_file$.bind(NIL != use_new_setupP ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
		SubLObject stream = NIL;
		try {
		    final SubLObject _prev_bind_0_$282 = stream_macros.$stream_requires_locking$.currentBinding(thread);
		    try {
			stream_macros.$stream_requires_locking$.bind(NIL, thread);
			stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), $APPEND);
		    } finally {
			stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$282, thread);
		    }
		    if (!stream.isStream()) {
			Errors.error(fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
		    }
		    final SubLObject _prev_bind_0_$283 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
		    try {
			fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
			final SubLObject _prev_bind_0_$284 = fact_sheet_logs.$next_fact_sheet_hourly_report_time$.currentBinding(thread);
			final SubLObject _prev_bind_1_$285 = fact_sheet_logs.$hourly_fact_sheet_stats$.currentBinding(thread);
			try {
			    fact_sheet_logs.$next_fact_sheet_hourly_report_time$.bind(NIL, thread);
			    fact_sheet_logs.$hourly_fact_sheet_stats$.bind(make_vector(TWO_INTEGER, ZERO_INTEGER), thread);
			    fact_sheet_logs.reset_hourly_report_time(UNPROVIDED);
			    final SubLObject stream_$286 = fact_sheet_logs.fact_sheet_log_stream();
			    if (((T == stream_$286) && current_process().eql(subl_promotions.initial_process())) || (stream_$286.isStream() && (NIL != output_stream_p(stream_$286)))) {
				fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$286);
				format(stream_$286, fact_sheets.$str555$Updating_all_stale_fact_sheets_fr, root);
				force_output(stream_$286);
			    }
			    while (NIL == stopP) {
				assert NIL != Filesys.directory_p(root) : "! Filesys.directory_p(root) " + ("Filesys.directory_p(root) " + "CommonSymbols.NIL != Filesys.directory_p(root) ") + root;
				SubLObject directory_list_var = list(root);
				SubLObject current_directory_var = NIL;
				current_directory_var = directory_list_var.first();
				while (NIL != directory_list_var) {
				    directory_list_var = directory_list_var.rest();
				    assert NIL != Filesys.directory_p(current_directory_var) : "! Filesys.directory_p(current_directory_var) " + ("Filesys.directory_p(current_directory_var) " + "CommonSymbols.NIL != Filesys.directory_p(current_directory_var) ") + current_directory_var;
				    SubLObject directory_contents_var = Filesys.directory(current_directory_var, T);
				    final SubLObject progress_message_var = (progress_message.isString())
					    ? cconcatenate(progress_message, cconcatenate(format_nil.$format_nil_percent$.getGlobalValue(), new SubLObject[] { fact_sheets.$str516$_Directory__, format_nil.format_nil_s_no_copy(current_directory_var) }))
					    : NIL;
				    final SubLObject _prev_bind_0_$285 = $silent_progressP$.currentBinding(thread);
				    try {
					$silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
					if (NIL.isFunctionSpec()) {
					    directory_contents_var = Sort.sort(directory_contents_var, NIL, UNPROVIDED);
					}
					final SubLObject list_var = directory_contents_var;
					final SubLObject _prev_bind_0_$286 = $progress_note$.currentBinding(thread);
					final SubLObject _prev_bind_1_$286 = $progress_start_time$.currentBinding(thread);
					final SubLObject _prev_bind_3 = $progress_total$.currentBinding(thread);
					final SubLObject _prev_bind_4 = $progress_sofar$.currentBinding(thread);
					final SubLObject _prev_bind_5 = $last_percent_progress_index$.currentBinding(thread);
					final SubLObject _prev_bind_6 = $last_percent_progress_prediction$.currentBinding(thread);
					final SubLObject _prev_bind_7 = $within_noting_percent_progress$.currentBinding(thread);
					final SubLObject _prev_bind_8 = $percent_progress_start_time$.currentBinding(thread);
					try {
					    $progress_note$.bind(NIL != progress_message_var ? progress_message_var : fact_sheets.$$$cdolist, thread);
					    $progress_start_time$.bind(get_universal_time(), thread);
					    $progress_total$.bind(length(list_var), thread);
					    $progress_sofar$.bind(ZERO_INTEGER, thread);
					    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
					    $last_percent_progress_prediction$.bind(NIL, thread);
					    $within_noting_percent_progress$.bind(T, thread);
					    $percent_progress_start_time$.bind(get_universal_time(), thread);
					    try {
						noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
						SubLObject csome_list_var = list_var;
						SubLObject filename_$281 = NIL;
						filename_$281 = csome_list_var.first();
						while (NIL != csome_list_var) {
						    if (NIL != Filesys.directory_p(filename_$281)) {
							directory_list_var = cons(filename_$281, directory_list_var);
						    } else if (NIL == stopP) {
							final SubLObject this_directory = file_utilities.deconstruct_path(filename_$281);
							if (!this_directory.equal(current_directory)) {
							    current_directory = this_directory;
							    SubLObject okP = NIL;
							    if (NIL != fact_sheets.possible_fact_sheet_directory_p(current_directory)) {
								thread.resetMultipleValues();
								final SubLObject this_verbosity = fact_sheets.fact_sheet_data_from_path(file_utilities.deconstruct_path(filename_$281));
								final SubLObject this_domain_mt = thread.secondMultipleValue();
								final SubLObject this_language_mt = thread.thirdMultipleValue();
								thread.resetMultipleValues();
								if (((NIL != this_verbosity) && (NIL != this_domain_mt)) && (NIL != this_language_mt)) {
								    okP = T;
								    verbosity = this_verbosity;
								    domain_mt = this_domain_mt;
								    language_mt = this_language_mt;
								    final SubLObject stream_$287 = fact_sheet_logs.fact_sheet_log_stream();
								    if (((T == stream_$287) && current_process().eql(subl_promotions.initial_process())) || (stream_$287.isStream() && (NIL != output_stream_p(stream_$287)))) {
									fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$287);
									format(stream_$287, fact_sheets.$str556$Now_doing__S__S__S, new SubLObject[] { verbosity, domain_mt, language_mt });
									force_output(stream_$287);
								    }
								}
							    }
							    current_directory_okP = okP;
							}
							if (NIL != current_directory_okP) {
							    SubLObject error_message = NIL;
							    final SubLObject _prev_bind_0_$287 = fact_sheets.$fact_sheet_verbosity$.currentBinding(thread);
							    try {
								fact_sheets.$fact_sheet_verbosity$.bind(verbosity, thread);
								if (NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
								    try {
									thread.throwStack.push($catch_error_message_target$.getGlobalValue());
									final SubLObject _prev_bind_0_$288 = Errors.$error_handler$.currentBinding(thread);
									try {
									    Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
									    try {
										fact_sheets.update_fact_sheet_file_if_stale(filename_$281, NIL, UNPROVIDED);
									    } catch (final Throwable catch_var) {
										Errors.handleThrowable(catch_var, NIL);
									    }
									} finally {
									    Errors.$error_handler$.rebind(_prev_bind_0_$288, thread);
									}
								    } catch (final Throwable ccatch_env_var) {
									error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
								    } finally {
									thread.throwStack.pop();
								    }
								} else {
								    fact_sheets.update_fact_sheet_file_if_stale(filename_$281, NIL, UNPROVIDED);
								}
								if (error_message.isString()) {
								    final SubLObject stream_$288 = fact_sheet_logs.fact_sheet_log_stream();
								    if (((T == stream_$288) && current_process().eql(subl_promotions.initial_process())) || (stream_$288.isStream() && (NIL != output_stream_p(stream_$288)))) {
									fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream_$288);
									format(stream_$288, fact_sheets.$str557$Stale_Fact_Sheet_Updater_error_on, filename_$281, error_message);
									force_output(stream_$288);
								    }
								    error_count = add(error_count, ONE_INTEGER);
								    if (error_count.numG(TEN_INTEGER)) {
									final SubLObject stream_$289 = fact_sheet_logs.fact_sheet_log_stream();
									if (((T == stream_$289) && current_process().eql(subl_promotions.initial_process())) || (stream_$289.isStream() && (NIL != output_stream_p(stream_$289)))) {
									    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream_$289);
									    format(stream_$289, fact_sheets.$str558$Abandoning_after__D_errors_, error_count);
									    force_output(stream_$289);
									}
									stopP = T;
								    }
								}
							    } finally {
								fact_sheets.$fact_sheet_verbosity$.rebind(_prev_bind_0_$287, thread);
							    }
							    if (NIL != fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
								final SubLObject stream_$290 = fact_sheet_logs.fact_sheet_log_stream();
								if (((T == stream_$290) && current_process().eql(subl_promotions.initial_process())) || (stream_$290.isStream() && (NIL != output_stream_p(stream_$290)))) {
								    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$290);
								    format(stream_$290, fact_sheets.$str559$Instructed_to_stop_updates_after_);
								    force_output(stream_$290);
								}
								stopP = T;
							    }
							}
						    }

						    $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
						    note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
						    csome_list_var = csome_list_var.rest();
						    filename_$281 = csome_list_var.first();
						}
					    } finally {
						final SubLObject _prev_bind_0_$289 = $is_thread_performing_cleanupP$.currentBinding(thread);
						try {
						    $is_thread_performing_cleanupP$.bind(T, thread);
						    final SubLObject _values = getValuesAsVector();
						    noting_percent_progress_postamble();
						    restoreValuesFromVector(_values);
						} finally {
						    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$289, thread);
						}
					    }
					} finally {
					    $percent_progress_start_time$.rebind(_prev_bind_8, thread);
					    $within_noting_percent_progress$.rebind(_prev_bind_7, thread);
					    $last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
					    $last_percent_progress_index$.rebind(_prev_bind_5, thread);
					    $progress_sofar$.rebind(_prev_bind_4, thread);
					    $progress_total$.rebind(_prev_bind_3, thread);
					    $progress_start_time$.rebind(_prev_bind_1_$286, thread);
					    $progress_note$.rebind(_prev_bind_0_$286, thread);
					}
				    } finally {
					$silent_progressP$.rebind(_prev_bind_0_$285, thread);
				    }
				    current_directory_var = directory_list_var.first();
				}
				final SubLObject stream_$291 = fact_sheet_logs.fact_sheet_log_stream();
				if (((T == stream_$291) && current_process().eql(subl_promotions.initial_process())) || (stream_$291.isStream() && (NIL != output_stream_p(stream_$291)))) {
				    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$291);
				    format(stream_$291, fact_sheets.$str560$Finished_stale_fact_sheet_update_);
				    force_output(stream_$291);
				}
				if (NIL != stopP) {
				    continue;
				}
				if (NIL == fact_sheets.time_of_day_has_arrivedP(ZERO_INTEGER, ZERO_INTEGER, TWENTY_INTEGER)) {
				    final SubLObject stream_$292 = fact_sheet_logs.fact_sheet_log_stream();
				    if (((T == stream_$292) && current_process().eql(subl_promotions.initial_process())) || (stream_$292.isStream() && (NIL != output_stream_p(stream_$292)))) {
					fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$292);
					format(stream_$292, fact_sheets.$str561$Sleeping_until_8_00_tonight__Zzz_);
					force_output(stream_$292);
				    }
				    fact_sheets.sleep_until_time_within_next_day(ZERO_INTEGER, ZERO_INTEGER, TWENTY_INTEGER);
				}
				final SubLObject stream_$293 = fact_sheet_logs.fact_sheet_log_stream();
				if (((T != stream_$293) || (!current_process().eql(subl_promotions.initial_process()))) && ((!stream_$293.isStream()) || (NIL == output_stream_p(stream_$293)))) {
				    continue;
				}
				fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$293);
				format(stream_$293, fact_sheets.$str562$Checking_for_fact_sheets_that_hav);
				force_output(stream_$293);
			    }
			} finally {
			    fact_sheet_logs.$hourly_fact_sheet_stats$.rebind(_prev_bind_1_$285, thread);
			    fact_sheet_logs.$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_$284, thread);
			}
			if (NIL != use_new_setupP) {
			    final SubLObject stream_$294 = fact_sheet_logs.fact_sheet_log_stream();
			    if (((T == stream_$294) && current_process().eql(subl_promotions.initial_process())) || (stream_$294.isStream() && (NIL != output_stream_p(stream_$294)))) {
				fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$294);
				format(stream_$294, fact_sheets.$str548$Closing_log_);
				force_output(stream_$294);
			    }
			    fact_sheet_logs.note_fact_sheet_log_file_closed(UNPROVIDED);
			}
		    } finally {
			fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$283, thread);
		    }
		} finally {
		    final SubLObject _prev_bind_0_$290 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values2 = getValuesAsVector();
			if (stream.isStream()) {
			    close(stream, UNPROVIDED);
			}
			restoreValuesFromVector(_values2);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$290, thread);
		    }
		}
	    } finally {
		fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0_$281, thread);
	    }
	} finally {
	    $silent_progressP$.rebind(_prev_bind_2, thread);
	    fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
	}
	return $DONE;
    }

    public static final SubLObject possible_regular_fact_sheet_directory_p_alt(SubLObject path) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.fact_sheets.possible_fact_sheet_directory_p(path)) && (!$PUBLIC.eql(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_verbosity_from_path(path))));
    }

    public static SubLObject possible_regular_fact_sheet_directory_p(final SubLObject path) {
	return makeBoolean((NIL != fact_sheets.possible_fact_sheet_directory_p(path)) && (!$PUBLIC.eql(fact_sheets.fact_sheet_verbosity_from_path(path))));
    }

    public static final SubLObject possible_fact_sheet_directory_p_alt(SubLObject path) {
	return makeBoolean((((NIL != list_utilities.list_of_type_p(STRINGP, path)) && (NIL != com.cyc.cycjava.cycl.fact_sheets.possible_fact_sheet_term_id_p(nth(subtract(length(path), TWO_INTEGER), path))))
		&& (NIL != com.cyc.cycjava.cycl.fact_sheets.possible_fact_sheet_term_id_p(nth(subtract(length(path), THREE_INTEGER), path)))) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_verbosity_p(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_verbosity_from_path(path))));
    }

    public static SubLObject possible_fact_sheet_directory_p(final SubLObject path) {
	return makeBoolean((((NIL != list_utilities.list_of_type_p(STRINGP, path)) && (NIL != fact_sheets.possible_fact_sheet_term_id_p(nth(subtract(length(path), TWO_INTEGER), path)))) && (NIL != fact_sheets.possible_fact_sheet_term_id_p(nth(subtract(length(path), THREE_INTEGER), path))))
		&& (NIL != fact_sheets.fact_sheet_verbosity_p(fact_sheets.fact_sheet_verbosity_from_path(path))));
    }

    public static final SubLObject fact_sheet_verbosity_from_path_alt(SubLObject path) {
	return find_symbol(Strings.string_upcase(nth(subtract(length(path), FOUR_INTEGER), path), UNPROVIDED, UNPROVIDED), find_package($$$KEYWORD));
    }

    public static SubLObject fact_sheet_verbosity_from_path(final SubLObject path) {
	return find_symbol(Strings.string_upcase(nth(subtract(length(path), FOUR_INTEGER), path), UNPROVIDED, UNPROVIDED), find_package(fact_sheets.$$$KEYWORD));
    }

    public static final SubLObject update_fact_sheet_file_if_stale_alt(SubLObject filename, SubLObject verbose_loggingP, SubLObject stale_by_fiatP) {
	if (verbose_loggingP == UNPROVIDED) {
	    verbose_loggingP = T;
	}
	if (stale_by_fiatP == UNPROVIDED) {
	    stale_by_fiatP = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject result = $NOT_UPDATED;
		if ((NIL != stale_by_fiatP) || (((NIL != file_utilities.file_existsP(filename)) && (NIL == string_utilities.substringP($str_alt703$under_construction, filename, UNPROVIDED, UNPROVIDED, UNPROVIDED)))
			&& ((NIL != string_utilities.ends_with(filename, $str_alt655$_html, UNPROVIDED)) || (NIL != string_utilities.ends_with(filename, $str_alt704$_cfasl, UNPROVIDED))))) {
		    thread.resetMultipleValues();
		    {
			SubLObject v_term = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_from_filename(filename);
			SubLObject verbosity = thread.secondMultipleValue();
			SubLObject domain_mt = thread.thirdMultipleValue();
			SubLObject language_mt = thread.fourthMultipleValue();
			thread.resetMultipleValues();
			{
			    SubLObject _prev_bind_0 = $fact_sheet_focal_term$.currentBinding(thread);
			    SubLObject _prev_bind_1 = $thcl_forts_by_fiat$.currentBinding(thread);
			    try {
				$fact_sheet_focal_term$.bind(v_term, thread);
				$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? ((SubLObject) (cons(v_term, $thcl_forts_by_fiat$.getDynamicValue(thread)))) : $thcl_forts_by_fiat$.getDynamicValue(thread), thread);
				if (NIL == v_term) {
				    if (NIL != verbose_loggingP) {
					{
					    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
					    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
						com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
						format(stream, $str_alt705$Couldn_t_determine_focal_term_fro, filename);
						force_output(stream);
					    }
					}
				    }
				} else {
				    if (NIL == cycl_grammar.cycl_denotational_term_p(v_term)) {
					{
					    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
					    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
						com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
						format(stream, $str_alt706$Can_t_update_fact_sheet_for__S___, v_term);
						force_output(stream);
					    }
					}
				    } else {
					if (!verbosity.isKeyword()) {
					    {
						SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
						if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
						    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
						    format(stream, $str_alt707$Can_t_update_fact_sheet_for__S___, v_term, filename);
						    force_output(stream);
						}
					    }
					} else {
					    if (NIL == hlmt.hlmtP(domain_mt)) {
						if (NIL != verbose_loggingP) {
						    {
							SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
							if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
							    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
							    format(stream, $str_alt708$Can_t_update_fact_sheet_for__S___, domain_mt);
							    force_output(stream);
							}
						    }
						}
					    } else {
						if (NIL == hlmt.hlmtP(language_mt)) {
						    {
							SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
							if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
							    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
							    format(stream, $str_alt709$Can_t_update_fact_sheet_for__S___, v_term, language_mt);
							    force_output(stream);
							}
						    }
						} else {
						    if (!((NIL != stale_by_fiatP) || (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_file_staleP(filename, UNPROVIDED, UNPROVIDED, UNPROVIDED)))) {
						    } else {
							{
							    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
							    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
								com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
								format(stream, $str_alt710$Updating_stale_fact_sheet_for__S_, new SubLObject[] { v_term, verbosity, domain_mt, language_mt });
								force_output(stream);
							    }
							}
							com.cyc.cycjava.cycl.fact_sheets.update_fact_sheet_for_term(v_term, verbosity, domain_mt, language_mt, UNPROVIDED, UNPROVIDED);
							com.cyc.cycjava.cycl.fact_sheets.add_fact_sheet_info_to_hourly_stats(v_term);
							com.cyc.cycjava.cycl.fact_sheets.maybe_log_fact_sheet_hourly_report();
							result = $UPDATED;
						    }
						}
					    }
					}
				    }
				}
			    } finally {
				$thcl_forts_by_fiat$.rebind(_prev_bind_1, thread);
				$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		}
		return result;
	    }
	}
    }

    public static SubLObject update_fact_sheet_file_if_stale(final SubLObject filename, SubLObject verbose_loggingP, SubLObject stale_by_fiatP) {
	if (verbose_loggingP == UNPROVIDED) {
	    verbose_loggingP = T;
	}
	if (stale_by_fiatP == UNPROVIDED) {
	    stale_by_fiatP = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject result = $NOT_UPDATED;
	if ((NIL != stale_by_fiatP) || (((NIL != file_utilities.file_existsP(filename)) && (NIL == string_utilities.substringP(fact_sheets.$str566$under_construction, filename, UNPROVIDED, UNPROVIDED, UNPROVIDED)))
		&& ((NIL != string_utilities.ends_with(filename, fact_sheets.$str513$_html, UNPROVIDED)) || (NIL != string_utilities.ends_with(filename, fact_sheets.$str567$_cfasl, UNPROVIDED))))) {
	    thread.resetMultipleValues();
	    final SubLObject v_term = fact_sheets.fact_sheet_data_from_filename(filename);
	    final SubLObject verbosity = thread.secondMultipleValue();
	    final SubLObject domain_mt = thread.thirdMultipleValue();
	    final SubLObject language_mt = thread.fourthMultipleValue();
	    thread.resetMultipleValues();
	    final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
	    final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
	    try {
		fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
		thcl.$thcl_forts_by_fiat$.bind(NIL != forts.fort_p(v_term) ? cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread), thread);
		if (NIL == v_term) {
		    if (NIL != verbose_loggingP) {
			final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
			    format(stream, fact_sheets.$str568$Couldn_t_determine_focal_term_fro, filename);
			    force_output(stream);
			}
		    }
		} else if (NIL == cycl_grammar.cycl_denotational_term_p(v_term)) {
		    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
			format(stream, fact_sheets.$str569$Can_t_update_fact_sheet_for__S___, v_term);
			force_output(stream);
		    }
		} else if (!verbosity.isKeyword()) {
		    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
			format(stream, fact_sheets.$str570$Can_t_update_fact_sheet_for__S___, v_term, filename);
			force_output(stream);
		    }
		} else if (NIL == hlmt.hlmtP(domain_mt)) {
		    if (NIL != verbose_loggingP) {
			final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
			    format(stream, fact_sheets.$str571$Can_t_update_fact_sheet_for__S___, domain_mt);
			    force_output(stream);
			}
		    }
		} else if (NIL == hlmt.hlmtP(language_mt)) {
		    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
			format(stream, fact_sheets.$str572$Can_t_update_fact_sheet_for__S___, v_term, language_mt);
			force_output(stream);
		    }
		} else if ((NIL != stale_by_fiatP) || (NIL != fact_sheets.fact_sheet_file_staleP(filename, UNPROVIDED, UNPROVIDED, UNPROVIDED))) {
		    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
			format(stream, fact_sheets.$str573$Updating_stale_fact_sheet_for__S_, new SubLObject[] { v_term, verbosity, domain_mt, language_mt });
			force_output(stream);
		    }
		    fact_sheets.update_fact_sheet_for_term(v_term, verbosity, domain_mt, language_mt, UNPROVIDED, UNPROVIDED);
		    fact_sheet_logs.add_fact_sheet_info_to_hourly_stats(v_term);
		    fact_sheet_logs.maybe_log_fact_sheet_hourly_report();
		    result = $UPDATED;
		}

	    } finally {
		thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
		fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
	    }
	}
	return result;
    }

    public static final SubLObject do_forts_for_fact_sheet_update_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt712);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject fort = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt712);
		    fort = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    return list(WITH_ALL_MTS, list(DO_ALL_FORT_INSTANCES, bq_cons(fort, $list_alt715), listS(PWHEN, listS(TERM_OK_FOR_FACT_SHEET_P, fort, $list_alt716), append(body, NIL))));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt712);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject do_forts_for_fact_sheet_update(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list575);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject fort = NIL;
	destructuring_bind_must_consp(current, datum, fact_sheets.$list575);
	fort = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    return list(WITH_ALL_MTS, list(fact_sheets.DO_ALL_FORT_INSTANCES, bq_cons(fort, fact_sheets.$list578), listS(PWHEN, listS(fact_sheets.TERM_OK_FOR_FACT_SHEET_P, fort, fact_sheets.$list579), append(body, NIL))));
	}
	cdestructuring_bind_error(datum, fact_sheets.$list575);
	return NIL;
    }

    public static final SubLObject write_term_ids_to_update_alt(SubLObject parent_directory, SubLObject batch_size) {
	if (batch_size == UNPROVIDED) {
	    batch_size = $int$50;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject directory = cconcatenate(parent_directory, $str_alt718$term_ids_to_update_);
		SubLObject done_count = ZERO_INTEGER;
		SubLObject file_number = ZERO_INTEGER;
		SubLObject ids = NIL;
		if (NIL == Filesys.directory_p(directory)) {
		    file_utilities.make_directory_recursive(directory, NIL, NIL != com.cyc.cycjava.cycl.fact_sheets.chmod_safe_to_useP() ? ((SubLObject) ($$$775)) : NIL);
		}
		{
		    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
		    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
		    try {
			mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
			mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
			{
			    SubLObject node_var = $$TerroristAttack;
			    {
				SubLObject _prev_bind_0_384 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
				SubLObject _prev_bind_1_385 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
				try {
				    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module($$isa), thread);
				    sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
				    {
					SubLObject node_var_386 = node_var;
					SubLObject deck_type = (false) ? ((SubLObject) ($QUEUE)) : $STACK;
					SubLObject recur_deck = deck.create_deck(deck_type);
					{
					    SubLObject _prev_bind_0_387 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
					    try {
						sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
						{
						    SubLObject tv_var = NIL;
						    {
							SubLObject _prev_bind_0_388 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
							SubLObject _prev_bind_1_389 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
							try {
							    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
							    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
							    if (NIL != tv_var) {
								if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
								    if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
									{
									    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
									    if (pcase_var.eql($ERROR)) {
										sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
									    } else {
										if (pcase_var.eql($CERROR)) {
										    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
										} else {
										    if (pcase_var.eql($WARN)) {
											Errors.warn($str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
										    } else {
											Errors.warn($str_alt558$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
											Errors.cerror($$$continue_anyway, $str_alt553$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
										    }
										}
									    }
									}
								    }
								}
							    }
							    {
								SubLObject _prev_bind_0_390 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
								SubLObject _prev_bind_1_391 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
								SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
								SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
								SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
								try {
								    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
								    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
								    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
								    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
								    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)), thread);
								    if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
									{
									    SubLObject _prev_bind_0_392 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
									    SubLObject _prev_bind_1_393 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
									    SubLObject _prev_bind_2_394 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
									    try {
										sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
										sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(),
											sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa))), thread);
										sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
										sbhl_marking_utilities.sbhl_mark_node_marked(node_var_386, UNPROVIDED);
										while (NIL != node_var_386) {
										    {
											SubLObject tt_node_var = node_var_386;
											SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module($$isa));
											SubLObject cdolist_list_var = accessible_modules;
											SubLObject module_var = NIL;
											for (module_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), module_var = cdolist_list_var.first()) {
											    {
												SubLObject _prev_bind_0_395 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
												SubLObject _prev_bind_1_396 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
												try {
												    sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
												    sbhl_search_vars.$genl_inverse_mode_p$.bind(
													    NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread))))
														    : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread),
													    thread);
												    {
													SubLObject node = function_terms.naut_to_nart(tt_node_var);
													if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
													    {
														SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
														if (NIL != d_link) {
														    {
															SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)),
																sbhl_module_vars.get_sbhl_module(UNPROVIDED));
															if (NIL != mt_links) {
															    {
																SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
																while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
																    thread.resetMultipleValues();
																    {
																	SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
																	SubLObject tv_links = thread.secondMultipleValue();
																	thread.resetMultipleValues();
																	if (NIL != mt_relevance_macros.relevant_mtP(mt)) {
																	    {
																		SubLObject _prev_bind_0_397 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
																		try {
																		    sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
																		    {
																			SubLObject iteration_state_398 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
																			while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_398)) {
																			    thread.resetMultipleValues();
																			    {
																				SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_398);
																				SubLObject link_nodes = thread.secondMultipleValue();
																				thread.resetMultipleValues();
																				if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
																				    {
																					SubLObject _prev_bind_0_399 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
																					try {
																					    sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
																					    {
																						SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																							? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																							: link_nodes;
																						SubLObject cdolist_list_var_400 = new_list;
																						SubLObject fort = NIL;
																						for (fort = cdolist_list_var_400.first(); NIL != cdolist_list_var_400; cdolist_list_var_400 = cdolist_list_var_400.rest(), fort = cdolist_list_var_400.first()) {
																						    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(fort,
																							    sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
																							sbhl_marking_utilities.sbhl_mark_node_marked(fort, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
																							if (NIL != forts.fort_p(fort)) {
																							    if (NIL != com.cyc.cycjava.cycl.fact_sheets.term_ok_for_fact_sheet_p(fort, NIL)) {
																								ids = cons(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(fort, T), ids);
																								done_count = add(done_count, ONE_INTEGER);
																								if (mod(done_count, batch_size).isZero()) {
																								    {
																									SubLObject filename = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id_filename(directory,
																										file_number);
																									cfasl_utilities.cfasl_save(ids, filename);
																									ids = NIL;
																									file_number = add(file_number, ONE_INTEGER);
																								    }
																								}
																							    }
																							}
																						    }
																						}
																					    }
																					} finally {
																					    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_399, thread);
																					}
																				    }
																				}
																				iteration_state_398 = dictionary_contents.do_dictionary_contents_next(iteration_state_398);
																			    }
																			}
																			dictionary_contents.do_dictionary_contents_finalize(iteration_state_398);
																		    }
																		} finally {
																		    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_397, thread);
																		}
																	    }
																	}
																	iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
																    }
																}
																dictionary_contents.do_dictionary_contents_finalize(iteration_state);
															    }
															}
														    }
														} else {
														    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt559$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
														}
													    }
													    if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
														{
														    SubLObject csome_list_var = sbhl_link_methods.non_fort_instance_table_lookup(node);
														    SubLObject instance_tuple = NIL;
														    for (instance_tuple = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), instance_tuple = csome_list_var.first()) {
															{
															    SubLObject datum = instance_tuple;
															    SubLObject current = datum;
															    SubLObject link_node = NIL;
															    SubLObject mt = NIL;
															    SubLObject tv = NIL;
															    destructuring_bind_must_consp(current, datum, $list_alt560);
															    link_node = current.first();
															    current = current.rest();
															    destructuring_bind_must_consp(current, datum, $list_alt560);
															    mt = current.first();
															    current = current.rest();
															    destructuring_bind_must_consp(current, datum, $list_alt560);
															    tv = current.first();
															    current = current.rest();
															    if (NIL == current) {
																if (NIL != mt_relevance_macros.relevant_mtP(mt)) {
																    {
																	SubLObject _prev_bind_0_401 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
																	try {
																	    sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
																	    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
																		{
																		    SubLObject _prev_bind_0_402 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
																		    try {
																			sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
																			{
																			    SubLObject link_nodes = list(link_node);
																			    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																				    : link_nodes;
																			    SubLObject cdolist_list_var_403 = new_list;
																			    SubLObject fort = NIL;
																			    for (fort = cdolist_list_var_403.first(); NIL != cdolist_list_var_403; cdolist_list_var_403 = cdolist_list_var_403.rest(), fort = cdolist_list_var_403.first()) {
																				if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(fort, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
																				    sbhl_marking_utilities.sbhl_mark_node_marked(fort, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
																				    if (NIL != forts.fort_p(fort)) {
																					if (NIL != com.cyc.cycjava.cycl.fact_sheets.term_ok_for_fact_sheet_p(fort, NIL)) {
																					    ids = cons(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(fort, T), ids);
																					    done_count = add(done_count, ONE_INTEGER);
																					    if (mod(done_count, batch_size).isZero()) {
																						{
																						    SubLObject filename = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id_filename(directory, file_number);
																						    cfasl_utilities.cfasl_save(ids, filename);
																						    ids = NIL;
																						    file_number = add(file_number, ONE_INTEGER);
																						}
																					    }
																					}
																				    }
																				}
																			    }
																			}
																		    } finally {
																			sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_402, thread);
																		    }
																		}
																	    }
																	} finally {
																	    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_401, thread);
																	}
																    }
																}
															    } else {
																cdestructuring_bind_error(datum, $list_alt560);
															    }
															}
														    }
														}
													    }
													} else {
													    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
														{
														    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
															    ? ((SubLObject) (list_utilities.randomize_list(
																    sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)),
																	    sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED)))))
															    : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module($$isa)),
																    sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
														    SubLObject cdolist_list_var_404 = new_list;
														    SubLObject generating_fn = NIL;
														    for (generating_fn = cdolist_list_var_404.first(); NIL != cdolist_list_var_404; cdolist_list_var_404 = cdolist_list_var_404.rest(), generating_fn = cdolist_list_var_404.first()) {
															{
															    SubLObject _prev_bind_0_405 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
															    try {
																sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
																{
																    SubLObject link_nodes = funcall(generating_fn, node);
																    SubLObject new_list_406 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
																    SubLObject cdolist_list_var_407 = new_list_406;
																    SubLObject fort = NIL;
																    for (fort = cdolist_list_var_407.first(); NIL != cdolist_list_var_407; cdolist_list_var_407 = cdolist_list_var_407.rest(), fort = cdolist_list_var_407.first()) {
																	if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(fort, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
																	    sbhl_marking_utilities.sbhl_mark_node_marked(fort, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
																	    if (NIL != forts.fort_p(fort)) {
																		if (NIL != com.cyc.cycjava.cycl.fact_sheets.term_ok_for_fact_sheet_p(fort, NIL)) {
																		    ids = cons(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(fort, T), ids);
																		    done_count = add(done_count, ONE_INTEGER);
																		    if (mod(done_count, batch_size).isZero()) {
																			{
																			    SubLObject filename = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id_filename(directory, file_number);
																			    cfasl_utilities.cfasl_save(ids, filename);
																			    ids = NIL;
																			    file_number = add(file_number, ONE_INTEGER);
																			}
																		    }
																		}
																	    }
																	}
																    }
																}
															    } finally {
																sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_405, thread);
															    }
															}
														    }
														}
													    }
													}
												    }
												} finally {
												    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_396, thread);
												    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_395, thread);
												}
											    }
											}
										    }
										    {
											SubLObject accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module($$isa)));
											SubLObject cdolist_list_var = accessible_modules;
											SubLObject module_var = NIL;
											for (module_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), module_var = cdolist_list_var.first()) {
											    {
												SubLObject _prev_bind_0_408 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
												SubLObject _prev_bind_1_409 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
												try {
												    sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
												    sbhl_search_vars.$genl_inverse_mode_p$.bind(
													    NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? ((SubLObject) (makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread))))
														    : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread),
													    thread);
												    {
													SubLObject node = function_terms.naut_to_nart(node_var_386);
													if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
													    {
														SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
														if (NIL != d_link) {
														    {
															SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
															if (NIL != mt_links) {
															    {
																SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links));
																while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
																    thread.resetMultipleValues();
																    {
																	SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
																	SubLObject tv_links = thread.secondMultipleValue();
																	thread.resetMultipleValues();
																	if (NIL != mt_relevance_macros.relevant_mtP(mt)) {
																	    {
																		SubLObject _prev_bind_0_410 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
																		try {
																		    sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
																		    {
																			SubLObject iteration_state_411 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links));
																			while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_411)) {
																			    thread.resetMultipleValues();
																			    {
																				SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_411);
																				SubLObject link_nodes = thread.secondMultipleValue();
																				thread.resetMultipleValues();
																				if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
																				    {
																					SubLObject _prev_bind_0_412 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
																					try {
																					    sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
																					    {
																						SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
																							? ((SubLObject) (list_utilities.randomize_list(link_nodes)))
																							: link_nodes;
																						SubLObject cdolist_list_var_413 = new_list;
																						SubLObject node_vars_link_node = NIL;
																						for (node_vars_link_node = cdolist_list_var_413.first(); NIL != cdolist_list_var_413; cdolist_list_var_413 = cdolist_list_var_413.rest(), node_vars_link_node = cdolist_list_var_413.first()) {
																						    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
																							sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
																							deck.deck_push(node_vars_link_node, recur_deck);
																						    }
																						}
																					    }
																					} finally {
																					    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_412, thread);
																					}
																				    }
																				}
																				iteration_state_411 = dictionary_contents.do_dictionary_contents_next(iteration_state_411);
																			    }
																			}
																			dictionary_contents.do_dictionary_contents_finalize(iteration_state_411);
																		    }
																		} finally {
																		    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_410, thread);
																		}
																	    }
																	}
																	iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
																    }
																}
																dictionary_contents.do_dictionary_contents_finalize(iteration_state);
															    }
															}
														    }
														} else {
														    sbhl_paranoia.sbhl_error(FIVE_INTEGER, $str_alt559$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
														}
													    }
													} else {
													    if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
														{
														    SubLObject new_list = (NIL != sbhl_link_vars.sbhl_randomize_lists_p())
															    ? ((SubLObject) (list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(),
																    sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED)))))
															    : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread),
																    sbhl_module_vars.get_sbhl_module(UNPROVIDED));
														    SubLObject cdolist_list_var_414 = new_list;
														    SubLObject generating_fn = NIL;
														    for (generating_fn = cdolist_list_var_414.first(); NIL != cdolist_list_var_414; cdolist_list_var_414 = cdolist_list_var_414.rest(), generating_fn = cdolist_list_var_414.first()) {
															{
															    SubLObject _prev_bind_0_415 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
															    try {
																sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
																{
																    SubLObject link_nodes = funcall(generating_fn, node);
																    SubLObject new_list_416 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? ((SubLObject) (list_utilities.randomize_list(link_nodes))) : link_nodes;
																    SubLObject cdolist_list_var_417 = new_list_416;
																    SubLObject node_vars_link_node = NIL;
																    for (node_vars_link_node = cdolist_list_var_417.first(); NIL != cdolist_list_var_417; cdolist_list_var_417 = cdolist_list_var_417.rest(), node_vars_link_node = cdolist_list_var_417.first()) {
																	if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED)) {
																	    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
																	    deck.deck_push(node_vars_link_node, recur_deck);
																	}
																    }
																}
															    } finally {
																sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_415, thread);
															    }
															}
														    }
														}
													    }
													}
												    }
												} finally {
												    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_409, thread);
												    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_408, thread);
												}
											    }
											}
										    }
										    node_var_386 = deck.deck_pop(recur_deck);
										}
									    } finally {
										sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_394, thread);
										sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_393, thread);
										sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_392, thread);
									    }
									}
								    } else {
									sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt561$Node__a_does_not_pass_sbhl_type_t, node_var, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
								    }
								} finally {
								    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
								    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
								    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
								    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_391, thread);
								    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_390, thread);
								}
							    }
							} finally {
							    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_389, thread);
							    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_388, thread);
							}
						    }
						    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
						}
					    } finally {
						sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_387, thread);
					    }
					}
					sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
				    }
				} finally {
				    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1_385, thread);
				    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_384, thread);
				}
			    }
			}
		    } finally {
			mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
			mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
		    }
		}
		if (NIL != ids) {
		    {
			SubLObject filename = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id_filename(directory, file_number);
			cfasl_utilities.cfasl_save(ids, filename);
			ids = NIL;
		    }
		}
		return file_number;
	    }
	}
    }

    public static SubLObject write_term_ids_to_update(final SubLObject parent_directory, SubLObject batch_size) {
	if (batch_size == UNPROVIDED) {
	    batch_size = fact_sheets.$int$50;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject directory = cconcatenate(parent_directory, fact_sheets.$str581$term_ids_to_update_);
	SubLObject done_count = ZERO_INTEGER;
	SubLObject file_number = ZERO_INTEGER;
	SubLObject ids = NIL;
	if (NIL == Filesys.directory_p(directory)) {
	    file_utilities.make_directory_recursive(directory, NIL, NIL != fact_sheets.chmod_safe_to_useP() ? fact_sheets.$$$775 : NIL);
	}
	final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
	final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
	try {
	    mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
	    mt_relevance_macros.$mt$.bind(fact_sheets.$$EverythingPSC, thread);
	    final SubLObject node_var = fact_sheets.$$TerroristAttack;
	    final SubLObject _prev_bind_0_$303 = $sbhl_module$.currentBinding(thread);
	    final SubLObject _prev_bind_1_$304 = $sbhl_gather_space$.currentBinding(thread);
	    try {
		$sbhl_module$.bind(get_sbhl_module(fact_sheets.$$isa), thread);
		$sbhl_gather_space$.bind(get_sbhl_marking_space(), thread);
		try {
		    SubLObject node_var_$305 = node_var;
		    final SubLObject deck_type = $STACK;
		    final SubLObject recur_deck = deck.create_deck(deck_type);
		    final SubLObject _prev_bind_0_$304 = $sbhl_space$.currentBinding(thread);
		    try {
			$sbhl_space$.bind(get_sbhl_marking_space(), thread);
			try {
			    final SubLObject tv_var = NIL;
			    final SubLObject _prev_bind_0_$305 = $sbhl_tv$.currentBinding(thread);
			    final SubLObject _prev_bind_1_$305 = $relevant_sbhl_tv_function$.currentBinding(thread);
			    try {
				$sbhl_tv$.bind(NIL != tv_var ? tv_var : get_sbhl_true_tv(), thread);
				$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : $relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
				if (((NIL != tv_var) && (NIL != sbhl_object_type_checking_p())) && (NIL == sbhl_true_tv_p(tv_var))) {
				    final SubLObject pcase_var = $sbhl_type_error_action$.getDynamicValue(thread);
				    if (pcase_var.eql($ERROR)) {
					sbhl_error(ONE_INTEGER, fact_sheets.$str424$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
				    } else if (pcase_var.eql($CERROR)) {
					sbhl_cerror(ONE_INTEGER, fact_sheets.$$$continue_anyway, fact_sheets.$str424$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
				    } else if (pcase_var.eql($WARN)) {
					Errors.warn(fact_sheets.$str424$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
				    } else {
					Errors.warn(fact_sheets.$str429$_A_is_not_a_valid__sbhl_type_erro, $sbhl_type_error_action$.getDynamicValue(thread));
					Errors.cerror(fact_sheets.$$$continue_anyway, fact_sheets.$str424$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
				    }

				}
				final SubLObject _prev_bind_0_$306 = $sbhl_search_module$.currentBinding(thread);
				final SubLObject _prev_bind_1_$306 = $sbhl_search_module_type$.currentBinding(thread);
				final SubLObject _prev_bind_3 = $sbhl_add_node_to_result_test$.currentBinding(thread);
				final SubLObject _prev_bind_4 = $genl_inverse_mode_p$.currentBinding(thread);
				final SubLObject _prev_bind_5 = $sbhl_module$.currentBinding(thread);
				try {
				    $sbhl_search_module$.bind(get_sbhl_transfers_through_module(get_sbhl_module(fact_sheets.$$isa)), thread);
				    $sbhl_search_module_type$.bind(get_sbhl_module_type(get_sbhl_transfers_through_module(get_sbhl_module(fact_sheets.$$isa))), thread);
				    $sbhl_add_node_to_result_test$.bind(get_sbhl_add_node_to_result_test(get_sbhl_transfers_through_module(get_sbhl_module(fact_sheets.$$isa))), thread);
				    $genl_inverse_mode_p$.bind(NIL, thread);
				    $sbhl_module$.bind(get_sbhl_transfers_through_module(get_sbhl_module(fact_sheets.$$isa)), thread);
				    if ((NIL != suspend_sbhl_type_checkingP()) || (NIL != apply_sbhl_module_type_test(node_var, get_sbhl_module(UNPROVIDED)))) {
					final SubLObject _prev_bind_0_$307 = $sbhl_search_direction$.currentBinding(thread);
					final SubLObject _prev_bind_1_$307 = $sbhl_link_direction$.currentBinding(thread);
					final SubLObject _prev_bind_2_$313 = $genl_inverse_mode_p$.currentBinding(thread);
					try {
					    $sbhl_search_direction$.bind(get_sbhl_backward_search_direction(), thread);
					    $sbhl_link_direction$.bind(sbhl_search_direction_to_link_direction(get_sbhl_backward_search_direction(), get_sbhl_transfers_through_module(get_sbhl_module(fact_sheets.$$isa))), thread);
					    $genl_inverse_mode_p$.bind(NIL, thread);
					    sbhl_mark_node_marked(node_var_$305, UNPROVIDED);
					    while (NIL != node_var_$305) {
						final SubLObject tt_node_var = node_var_$305;
						SubLObject cdolist_list_var;
						final SubLObject accessible_modules = cdolist_list_var = get_sbhl_accessible_modules(get_sbhl_module(fact_sheets.$$isa));
						SubLObject module_var = NIL;
						module_var = cdolist_list_var.first();
						while (NIL != cdolist_list_var) {
						    final SubLObject _prev_bind_0_$308 = $sbhl_module$.currentBinding(thread);
						    final SubLObject _prev_bind_1_$308 = $genl_inverse_mode_p$.currentBinding(thread);
						    try {
							$sbhl_module$.bind(module_var, thread);
							$genl_inverse_mode_p$.bind(NIL != flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == $genl_inverse_mode_p$.getDynamicValue(thread)) : $genl_inverse_mode_p$.getDynamicValue(thread), thread);
							final SubLObject node = function_terms.naut_to_nart(tt_node_var);
							if (NIL != sbhl_node_object_p(node)) {
							    final SubLObject d_link = get_sbhl_graph_link(node, get_sbhl_module(UNPROVIDED));
							    if (NIL != d_link) {
								final SubLObject mt_links = get_sbhl_mt_links(d_link, get_sbhl_module_backward_direction(get_sbhl_module(fact_sheets.$$isa)), get_sbhl_module(UNPROVIDED));
								if (NIL != mt_links) {
								    SubLObject iteration_state;
								    for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); NIL == dictionary_contents.do_dictionary_contents_doneP(
									    iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
									thread.resetMultipleValues();
									final SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
									final SubLObject tv_links = thread.secondMultipleValue();
									thread.resetMultipleValues();
									if (NIL != mt_relevance_macros.relevant_mtP(mt)) {
									    final SubLObject _prev_bind_0_$309 = $sbhl_link_mt$.currentBinding(thread);
									    try {
										$sbhl_link_mt$.bind(mt, thread);
										SubLObject iteration_state_$317;
										for (iteration_state_$317 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); NIL == dictionary_contents.do_dictionary_contents_doneP(
											iteration_state_$317); iteration_state_$317 = dictionary_contents.do_dictionary_contents_next(iteration_state_$317)) {
										    thread.resetMultipleValues();
										    final SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$317);
										    final SubLObject link_nodes = thread.secondMultipleValue();
										    thread.resetMultipleValues();
										    if (NIL != relevant_sbhl_tvP(tv)) {
											final SubLObject _prev_bind_0_$310 = $sbhl_link_tv$.currentBinding(thread);
											try {
											    $sbhl_link_tv$.bind(tv, thread);
											    final SubLObject sol = link_nodes;
											    if (NIL != set.set_p(sol)) {
												final SubLObject set_contents_var = set.do_set_internal(sol);
												SubLObject basis_object;
												SubLObject state;
												SubLObject fort;
												SubLObject filename;
												for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object,
													set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
												    fort = set_contents.do_set_contents_next(basis_object, state);
												    if ((NIL != set_contents.do_set_contents_element_validP(state, fort)) && (NIL == sbhl_search_path_termination_p(fort, $sbhl_gather_space$.getDynamicValue(thread)))) {
													sbhl_mark_node_marked(fort, $sbhl_gather_space$.getDynamicValue(thread));
													if ((NIL != forts.fort_p(fort)) && (NIL != fact_sheets.term_ok_for_fact_sheet_p(fort, NIL))) {
													    ids = cons(fact_sheets.fact_sheet_term_id(fort, T), ids);
													    done_count = add(done_count, ONE_INTEGER);
													    if (mod(done_count, batch_size).isZero()) {
														filename = fact_sheets.fact_sheet_term_id_filename(directory, file_number);
														cfasl_utilities.cfasl_save(ids, filename);
														ids = NIL;
														file_number = add(file_number, ONE_INTEGER);
													    }
													}
												    }
												}
											    } else if (sol.isList()) {
												SubLObject csome_list_var = sol;
												SubLObject fort2 = NIL;
												fort2 = csome_list_var.first();
												while (NIL != csome_list_var) {
												    if (NIL == sbhl_search_path_termination_p(fort2, $sbhl_gather_space$.getDynamicValue(thread))) {
													sbhl_mark_node_marked(fort2, $sbhl_gather_space$.getDynamicValue(thread));
													if ((NIL != forts.fort_p(fort2)) && (NIL != fact_sheets.term_ok_for_fact_sheet_p(fort2, NIL))) {
													    ids = cons(fact_sheets.fact_sheet_term_id(fort2, T), ids);
													    done_count = add(done_count, ONE_INTEGER);
													    if (mod(done_count, batch_size).isZero()) {
														final SubLObject filename2 = fact_sheets.fact_sheet_term_id_filename(directory, file_number);
														cfasl_utilities.cfasl_save(ids, filename2);
														ids = NIL;
														file_number = add(file_number, ONE_INTEGER);
													    }
													}
												    }
												    csome_list_var = csome_list_var.rest();
												    fort2 = csome_list_var.first();
												}
											    } else {
												Errors.error(fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol);
											    }

											} finally {
											    $sbhl_link_tv$.rebind(_prev_bind_0_$310, thread);
											}
										    }
										}
										dictionary_contents.do_dictionary_contents_finalize(iteration_state_$317);
									    } finally {
										$sbhl_link_mt$.rebind(_prev_bind_0_$309, thread);
									    }
									}
								    }
								    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
								}
							    } else {
								sbhl_error(FIVE_INTEGER, fact_sheets.$str434$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
							    }
							    if (NIL != do_sbhl_non_fort_linksP(node, get_sbhl_module(UNPROVIDED))) {
								SubLObject csome_list_var2 = non_fort_instance_table_lookup(node);
								SubLObject instance_tuple = NIL;
								instance_tuple = csome_list_var2.first();
								while (NIL != csome_list_var2) {
								    SubLObject current;
								    final SubLObject datum = current = instance_tuple;
								    SubLObject link_node = NIL;
								    SubLObject mt2 = NIL;
								    SubLObject tv2 = NIL;
								    destructuring_bind_must_consp(current, datum, fact_sheets.$list547);
								    link_node = current.first();
								    current = current.rest();
								    destructuring_bind_must_consp(current, datum, fact_sheets.$list547);
								    mt2 = current.first();
								    current = current.rest();
								    destructuring_bind_must_consp(current, datum, fact_sheets.$list547);
								    tv2 = current.first();
								    current = current.rest();
								    if (NIL == current) {
									if (NIL != mt_relevance_macros.relevant_mtP(mt2)) {
									    final SubLObject _prev_bind_0_$311 = $sbhl_link_mt$.currentBinding(thread);
									    try {
										$sbhl_link_mt$.bind(mt2, thread);
										if (NIL != relevant_sbhl_tvP(tv2)) {
										    final SubLObject _prev_bind_0_$312 = $sbhl_link_tv$.currentBinding(thread);
										    try {
											$sbhl_link_tv$.bind(tv2, thread);
											final SubLObject sol;
											final SubLObject link_nodes2 = sol = list(link_node);
											if (NIL != set.set_p(sol)) {
											    final SubLObject set_contents_var = set.do_set_internal(sol);
											    SubLObject basis_object;
											    SubLObject state;
											    SubLObject fort;
											    SubLObject filename;
											    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object,
												    set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
												fort = set_contents.do_set_contents_next(basis_object, state);
												if ((NIL != set_contents.do_set_contents_element_validP(state, fort)) && (NIL == sbhl_search_path_termination_p(fort, $sbhl_gather_space$.getDynamicValue(thread)))) {
												    sbhl_mark_node_marked(fort, $sbhl_gather_space$.getDynamicValue(thread));
												    if ((NIL != forts.fort_p(fort)) && (NIL != fact_sheets.term_ok_for_fact_sheet_p(fort, NIL))) {
													ids = cons(fact_sheets.fact_sheet_term_id(fort, T), ids);
													done_count = add(done_count, ONE_INTEGER);
													if (mod(done_count, batch_size).isZero()) {
													    filename = fact_sheets.fact_sheet_term_id_filename(directory, file_number);
													    cfasl_utilities.cfasl_save(ids, filename);
													    ids = NIL;
													    file_number = add(file_number, ONE_INTEGER);
													}
												    }
												}
											    }
											} else if (sol.isList()) {
											    SubLObject csome_list_var_$321 = sol;
											    SubLObject fort2 = NIL;
											    fort2 = csome_list_var_$321.first();
											    while (NIL != csome_list_var_$321) {
												if (NIL == sbhl_search_path_termination_p(fort2, $sbhl_gather_space$.getDynamicValue(thread))) {
												    sbhl_mark_node_marked(fort2, $sbhl_gather_space$.getDynamicValue(thread));
												    if ((NIL != forts.fort_p(fort2)) && (NIL != fact_sheets.term_ok_for_fact_sheet_p(fort2, NIL))) {
													ids = cons(fact_sheets.fact_sheet_term_id(fort2, T), ids);
													done_count = add(done_count, ONE_INTEGER);
													if (mod(done_count, batch_size).isZero()) {
													    final SubLObject filename2 = fact_sheets.fact_sheet_term_id_filename(directory, file_number);
													    cfasl_utilities.cfasl_save(ids, filename2);
													    ids = NIL;
													    file_number = add(file_number, ONE_INTEGER);
													}
												    }
												}
												csome_list_var_$321 = csome_list_var_$321.rest();
												fort2 = csome_list_var_$321.first();
											    }
											} else {
											    Errors.error(fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol);
											}

										    } finally {
											$sbhl_link_tv$.rebind(_prev_bind_0_$312, thread);
										    }
										}
									    } finally {
										$sbhl_link_mt$.rebind(_prev_bind_0_$311, thread);
									    }
									}
								    } else {
									cdestructuring_bind_error(datum, fact_sheets.$list547);
								    }
								    csome_list_var2 = csome_list_var2.rest();
								    instance_tuple = csome_list_var2.first();
								}
							    }
							} else if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
							    SubLObject cdolist_list_var_$322;
							    final SubLObject new_list = cdolist_list_var_$322 = (NIL != sbhl_randomize_lists_p())
								    ? list_utilities.randomize_list(get_sbhl_module_relevant_naut_link_generators(get_sbhl_module_backward_direction(get_sbhl_module(fact_sheets.$$isa)), $sbhl_tv$.getDynamicValue(thread), get_sbhl_module(UNPROVIDED)))
								    : get_sbhl_module_relevant_naut_link_generators(get_sbhl_module_backward_direction(get_sbhl_module(fact_sheets.$$isa)), $sbhl_tv$.getDynamicValue(thread), get_sbhl_module(UNPROVIDED));
							    SubLObject generating_fn = NIL;
							    generating_fn = cdolist_list_var_$322.first();
							    while (NIL != cdolist_list_var_$322) {
								final SubLObject _prev_bind_0_$313 = $sbhl_link_generator$.currentBinding(thread);
								try {
								    $sbhl_link_generator$.bind(generating_fn, thread);
								    final SubLObject sol2;
								    final SubLObject link_nodes3 = sol2 = funcall(generating_fn, node);
								    if (NIL != set.set_p(sol2)) {
									final SubLObject set_contents_var2 = set.do_set_internal(sol2);
									SubLObject basis_object2;
									SubLObject state2;
									SubLObject fort3;
									SubLObject filename3;
									for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2,
										set_contents_var2); NIL == set_contents.do_set_contents_doneP(basis_object2, state2); state2 = set_contents.do_set_contents_update_state(state2)) {
									    fort3 = set_contents.do_set_contents_next(basis_object2, state2);
									    if ((NIL != set_contents.do_set_contents_element_validP(state2, fort3)) && (NIL == sbhl_search_path_termination_p(fort3, $sbhl_gather_space$.getDynamicValue(thread)))) {
										sbhl_mark_node_marked(fort3, $sbhl_gather_space$.getDynamicValue(thread));
										if ((NIL != forts.fort_p(fort3)) && (NIL != fact_sheets.term_ok_for_fact_sheet_p(fort3, NIL))) {
										    ids = cons(fact_sheets.fact_sheet_term_id(fort3, T), ids);
										    done_count = add(done_count, ONE_INTEGER);
										    if (mod(done_count, batch_size).isZero()) {
											filename3 = fact_sheets.fact_sheet_term_id_filename(directory, file_number);
											cfasl_utilities.cfasl_save(ids, filename3);
											ids = NIL;
											file_number = add(file_number, ONE_INTEGER);
										    }
										}
									    }
									}
								    } else if (sol2.isList()) {
									SubLObject csome_list_var3 = sol2;
									SubLObject fort4 = NIL;
									fort4 = csome_list_var3.first();
									while (NIL != csome_list_var3) {
									    if (NIL == sbhl_search_path_termination_p(fort4, $sbhl_gather_space$.getDynamicValue(thread))) {
										sbhl_mark_node_marked(fort4, $sbhl_gather_space$.getDynamicValue(thread));
										if ((NIL != forts.fort_p(fort4)) && (NIL != fact_sheets.term_ok_for_fact_sheet_p(fort4, NIL))) {
										    ids = cons(fact_sheets.fact_sheet_term_id(fort4, T), ids);
										    done_count = add(done_count, ONE_INTEGER);
										    if (mod(done_count, batch_size).isZero()) {
											final SubLObject filename4 = fact_sheets.fact_sheet_term_id_filename(directory, file_number);
											cfasl_utilities.cfasl_save(ids, filename4);
											ids = NIL;
											file_number = add(file_number, ONE_INTEGER);
										    }
										}
									    }
									    csome_list_var3 = csome_list_var3.rest();
									    fort4 = csome_list_var3.first();
									}
								    } else {
									Errors.error(fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol2);
								    }

								} finally {
								    $sbhl_link_generator$.rebind(_prev_bind_0_$313, thread);
								}
								cdolist_list_var_$322 = cdolist_list_var_$322.rest();
								generating_fn = cdolist_list_var_$322.first();
							    }
							}

						    } finally {
							$genl_inverse_mode_p$.rebind(_prev_bind_1_$308, thread);
							$sbhl_module$.rebind(_prev_bind_0_$308, thread);
						    }
						    cdolist_list_var = cdolist_list_var.rest();
						    module_var = cdolist_list_var.first();
						}
						SubLObject cdolist_list_var2;
						final SubLObject accessible_modules2 = cdolist_list_var2 = get_sbhl_accessible_modules(get_sbhl_transfers_through_module(get_sbhl_module(fact_sheets.$$isa)));
						SubLObject module_var2 = NIL;
						module_var2 = cdolist_list_var2.first();
						while (NIL != cdolist_list_var2) {
						    final SubLObject _prev_bind_0_$314 = $sbhl_module$.currentBinding(thread);
						    final SubLObject _prev_bind_1_$309 = $genl_inverse_mode_p$.currentBinding(thread);
						    try {
							$sbhl_module$.bind(module_var2, thread);
							$genl_inverse_mode_p$.bind(NIL != flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == $genl_inverse_mode_p$.getDynamicValue(thread)) : $genl_inverse_mode_p$.getDynamicValue(thread), thread);
							final SubLObject node2 = function_terms.naut_to_nart(node_var_$305);
							if (NIL != sbhl_node_object_p(node2)) {
							    final SubLObject d_link2 = get_sbhl_graph_link(node2, get_sbhl_module(UNPROVIDED));
							    if (NIL != d_link2) {
								final SubLObject mt_links2 = get_sbhl_mt_links(d_link2, get_sbhl_link_direction(), get_sbhl_module(UNPROVIDED));
								if (NIL != mt_links2) {
								    SubLObject iteration_state2;
								    for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links2)); NIL == dictionary_contents.do_dictionary_contents_doneP(
									    iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
									thread.resetMultipleValues();
									final SubLObject mt3 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
									final SubLObject tv_links2 = thread.secondMultipleValue();
									thread.resetMultipleValues();
									if (NIL != mt_relevance_macros.relevant_mtP(mt3)) {
									    final SubLObject _prev_bind_0_$315 = $sbhl_link_mt$.currentBinding(thread);
									    try {
										$sbhl_link_mt$.bind(mt3, thread);
										SubLObject iteration_state_$318;
										for (iteration_state_$318 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links2)); NIL == dictionary_contents.do_dictionary_contents_doneP(
											iteration_state_$318); iteration_state_$318 = dictionary_contents.do_dictionary_contents_next(iteration_state_$318)) {
										    thread.resetMultipleValues();
										    final SubLObject tv2 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$318);
										    final SubLObject link_nodes4 = thread.secondMultipleValue();
										    thread.resetMultipleValues();
										    if (NIL != relevant_sbhl_tvP(tv2)) {
											final SubLObject _prev_bind_0_$316 = $sbhl_link_tv$.currentBinding(thread);
											try {
											    $sbhl_link_tv$.bind(tv2, thread);
											    final SubLObject sol3 = link_nodes4;
											    if (NIL != set.set_p(sol3)) {
												final SubLObject set_contents_var3 = set.do_set_internal(sol3);
												SubLObject basis_object3;
												SubLObject state3;
												SubLObject node_vars_link_node;
												for (basis_object3 = set_contents.do_set_contents_basis_object(set_contents_var3), state3 = NIL, state3 = set_contents.do_set_contents_initial_state(basis_object3,
													set_contents_var3); NIL == set_contents.do_set_contents_doneP(basis_object3, state3); state3 = set_contents.do_set_contents_update_state(state3)) {
												    node_vars_link_node = set_contents.do_set_contents_next(basis_object3, state3);
												    if ((NIL != set_contents.do_set_contents_element_validP(state3, node_vars_link_node)) && (NIL == sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED))) {
													sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
													deck.deck_push(node_vars_link_node, recur_deck);
												    }
												}
											    } else if (sol3.isList()) {
												SubLObject csome_list_var4 = sol3;
												SubLObject node_vars_link_node2 = NIL;
												node_vars_link_node2 = csome_list_var4.first();
												while (NIL != csome_list_var4) {
												    if (NIL == sbhl_search_path_termination_p(node_vars_link_node2, UNPROVIDED)) {
													sbhl_mark_node_marked(node_vars_link_node2, UNPROVIDED);
													deck.deck_push(node_vars_link_node2, recur_deck);
												    }
												    csome_list_var4 = csome_list_var4.rest();
												    node_vars_link_node2 = csome_list_var4.first();
												}
											    } else {
												Errors.error(fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol3);
											    }

											} finally {
											    $sbhl_link_tv$.rebind(_prev_bind_0_$316, thread);
											}
										    }
										}
										dictionary_contents.do_dictionary_contents_finalize(iteration_state_$318);
									    } finally {
										$sbhl_link_mt$.rebind(_prev_bind_0_$315, thread);
									    }
									}
								    }
								    dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
								}
							    } else {
								sbhl_error(FIVE_INTEGER, fact_sheets.$str434$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
							    }
							} else if (NIL != obsolete.cnat_p(node2, UNPROVIDED)) {
							    SubLObject cdolist_list_var_$323;
							    final SubLObject new_list2 = cdolist_list_var_$323 = (NIL != sbhl_randomize_lists_p())
								    ? list_utilities.randomize_list(get_sbhl_module_relevant_naut_link_generators(get_sbhl_link_direction(), $sbhl_tv$.getDynamicValue(thread), get_sbhl_module(UNPROVIDED)))
								    : get_sbhl_module_relevant_naut_link_generators(get_sbhl_link_direction(), $sbhl_tv$.getDynamicValue(thread), get_sbhl_module(UNPROVIDED));
							    SubLObject generating_fn2 = NIL;
							    generating_fn2 = cdolist_list_var_$323.first();
							    while (NIL != cdolist_list_var_$323) {
								final SubLObject _prev_bind_0_$317 = $sbhl_link_generator$.currentBinding(thread);
								try {
								    $sbhl_link_generator$.bind(generating_fn2, thread);
								    final SubLObject sol4;
								    final SubLObject link_nodes5 = sol4 = funcall(generating_fn2, node2);
								    if (NIL != set.set_p(sol4)) {
									final SubLObject set_contents_var4 = set.do_set_internal(sol4);
									SubLObject basis_object4;
									SubLObject state4;
									SubLObject node_vars_link_node3;
									for (basis_object4 = set_contents.do_set_contents_basis_object(set_contents_var4), state4 = NIL, state4 = set_contents.do_set_contents_initial_state(basis_object4,
										set_contents_var4); NIL == set_contents.do_set_contents_doneP(basis_object4, state4); state4 = set_contents.do_set_contents_update_state(state4)) {
									    node_vars_link_node3 = set_contents.do_set_contents_next(basis_object4, state4);
									    if ((NIL != set_contents.do_set_contents_element_validP(state4, node_vars_link_node3)) && (NIL == sbhl_search_path_termination_p(node_vars_link_node3, UNPROVIDED))) {
										sbhl_mark_node_marked(node_vars_link_node3, UNPROVIDED);
										deck.deck_push(node_vars_link_node3, recur_deck);
									    }
									}
								    } else if (sol4.isList()) {
									SubLObject csome_list_var5 = sol4;
									SubLObject node_vars_link_node4 = NIL;
									node_vars_link_node4 = csome_list_var5.first();
									while (NIL != csome_list_var5) {
									    if (NIL == sbhl_search_path_termination_p(node_vars_link_node4, UNPROVIDED)) {
										sbhl_mark_node_marked(node_vars_link_node4, UNPROVIDED);
										deck.deck_push(node_vars_link_node4, recur_deck);
									    }
									    csome_list_var5 = csome_list_var5.rest();
									    node_vars_link_node4 = csome_list_var5.first();
									}
								    } else {
									Errors.error(fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol4);
								    }

								} finally {
								    $sbhl_link_generator$.rebind(_prev_bind_0_$317, thread);
								}
								cdolist_list_var_$323 = cdolist_list_var_$323.rest();
								generating_fn2 = cdolist_list_var_$323.first();
							    }
							}

						    } finally {
							$genl_inverse_mode_p$.rebind(_prev_bind_1_$309, thread);
							$sbhl_module$.rebind(_prev_bind_0_$314, thread);
						    }
						    cdolist_list_var2 = cdolist_list_var2.rest();
						    module_var2 = cdolist_list_var2.first();
						}
						node_var_$305 = deck.deck_pop(recur_deck);
					    }
					} finally {
					    $genl_inverse_mode_p$.rebind(_prev_bind_2_$313, thread);
					    $sbhl_link_direction$.rebind(_prev_bind_1_$307, thread);
					    $sbhl_search_direction$.rebind(_prev_bind_0_$307, thread);
					}
				    } else {
					sbhl_warn(TWO_INTEGER, fact_sheets.$str435$Node__a_does_not_pass_sbhl_type_t, node_var, get_sbhl_type_test(get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
				    }
				} finally {
				    $sbhl_module$.rebind(_prev_bind_5, thread);
				    $genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
				    $sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
				    $sbhl_search_module_type$.rebind(_prev_bind_1_$306, thread);
				    $sbhl_search_module$.rebind(_prev_bind_0_$306, thread);
				}
			    } finally {
				$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$305, thread);
				$sbhl_tv$.rebind(_prev_bind_0_$305, thread);
			    }
			} finally {
			    final SubLObject _prev_bind_0_$318 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				final SubLObject _values = getValuesAsVector();
				free_sbhl_marking_space($sbhl_space$.getDynamicValue(thread));
				restoreValuesFromVector(_values);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$318, thread);
			    }
			}
		    } finally {
			$sbhl_space$.rebind(_prev_bind_0_$304, thread);
		    }
		} finally {
		    final SubLObject _prev_bind_0_$319 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values2 = getValuesAsVector();
			free_sbhl_marking_space($sbhl_gather_space$.getDynamicValue(thread));
			restoreValuesFromVector(_values2);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$319, thread);
		    }
		}
	    } finally {
		$sbhl_gather_space$.rebind(_prev_bind_1_$304, thread);
		$sbhl_module$.rebind(_prev_bind_0_$303, thread);
	    }
	} finally {
	    mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
	    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
	}
	if (NIL != ids) {
	    final SubLObject filename5 = fact_sheets.fact_sheet_term_id_filename(directory, file_number);
	    cfasl_utilities.cfasl_save(ids, filename5);
	    ids = NIL;
	}
	return file_number;
    }

    /**
     * Write a set of files containing ids of public fact sheet terms for the fact-sheet set FS-TYPE
     */
    @LispMethod(comment = "Write a set of files containing ids of public fact sheet terms for the fact-sheet set FS-TYPE")
    public static final SubLObject write_term_ids_to_update_for_fs_type_public_pages_alt(SubLObject fs_type, SubLObject batch_size, SubLObject parent_directory) {
	if (batch_size == UNPROVIDED) {
	    batch_size = $int$500;
	}
	if (parent_directory == UNPROVIDED) {
	    parent_directory = cconcatenate(string_utilities.bunge(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_path(), CHAR_slash), $str_alt722$_term_ids_to_update_);
	}
	{
	    SubLObject directory = cconcatenate(parent_directory, new SubLObject[] { com.cyc.cycjava.cycl.fact_sheets.get_fs_collection_name(fs_type), $str_alt205$_ });
	    SubLObject term_set = com.cyc.cycjava.cycl.fact_sheets.terms_for_public_fact_sheets(fs_type);
	    return com.cyc.cycjava.cycl.fact_sheets.write_term_ids_to_update_for_term_set(term_set, batch_size, directory);
	}
    }

    @LispMethod(comment = "Write a set of files containing ids of public fact sheet terms for the fact-sheet set FS-TYPE")
    public static SubLObject write_term_ids_to_update_for_fs_type_public_pages(final SubLObject fs_type, SubLObject batch_size, SubLObject parent_directory) {
	if (batch_size == UNPROVIDED) {
	    batch_size = fact_sheets.$int$500;
	}
	if (parent_directory == UNPROVIDED) {
	    parent_directory = cconcatenate(string_utilities.bunge(fact_sheets.fact_sheet_data_path(), CHAR_slash), fact_sheets.$str585$_term_ids_to_update_);
	}
	final SubLObject directory = cconcatenate(parent_directory, new SubLObject[] { fact_sheets.get_fs_collection_name(fs_type), fact_sheets.$str500$_ });
	final SubLObject term_set = fact_sheets.terms_for_public_fact_sheets(fs_type);
	return fact_sheets.write_term_ids_to_update_for_term_set(term_set, batch_size, directory);
    }

    /**
    * Write a set of files containing ids of public fact sheet terms for the fact-sheet set FS-TYPE
    */

    /**
     * Write a set of files containing ids of public fact sheet terms for the fact-sheet set FS-TYPE
     */
    @LispMethod(comment = "Write a set of files containing ids of public fact sheet terms for the fact-sheet set FS-TYPE")
    public static final SubLObject write_term_ids_to_update_for_fs_type_public_pages_term_set_alt(SubLObject fs_type, SubLObject term_set, SubLObject batch_size, SubLObject parent_directory) {
	if (batch_size == UNPROVIDED) {
	    batch_size = $int$500;
	}
	if (parent_directory == UNPROVIDED) {
	    parent_directory = cconcatenate(string_utilities.bunge(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_path(), CHAR_slash), $str_alt722$_term_ids_to_update_);
	}
	{
	    SubLObject directory = cconcatenate(parent_directory, new SubLObject[] { com.cyc.cycjava.cycl.fact_sheets.get_fs_collection_name(fs_type), $str_alt205$_ });
	    return com.cyc.cycjava.cycl.fact_sheets.write_term_ids_to_update_for_term_set(term_set, batch_size, directory);
	}
    }

    @LispMethod(comment = "Write a set of files containing ids of public fact sheet terms for the fact-sheet set FS-TYPE")
    public static SubLObject write_term_ids_to_update_for_fs_type_public_pages_term_set(final SubLObject fs_type, final SubLObject term_set, SubLObject batch_size, SubLObject parent_directory) {
	if (batch_size == UNPROVIDED) {
	    batch_size = fact_sheets.$int$500;
	}
	if (parent_directory == UNPROVIDED) {
	    parent_directory = cconcatenate(string_utilities.bunge(fact_sheets.fact_sheet_data_path(), CHAR_slash), fact_sheets.$str585$_term_ids_to_update_);
	}
	final SubLObject directory = cconcatenate(parent_directory, new SubLObject[] { fact_sheets.get_fs_collection_name(fs_type), fact_sheets.$str500$_ });
	return fact_sheets.write_term_ids_to_update_for_term_set(term_set, batch_size, directory);
    }

    /**
    * Write a set of files containing ids of public fact sheet terms for the fact-sheet set FS-TYPE
    */

    public static final SubLObject write_term_ids_to_update_for_term_set_alt(SubLObject term_set, SubLObject batch_size, SubLObject directory) {
	if (batch_size == UNPROVIDED) {
	    batch_size = $int$50;
	}
	if (directory == UNPROVIDED) {
	    directory = cconcatenate(string_utilities.bunge(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_path(), CHAR_slash), $str_alt722$_term_ids_to_update_);
	}
	{
	    SubLObject done_count = ZERO_INTEGER;
	    SubLObject file_number = ZERO_INTEGER;
	    SubLObject ids = NIL;
	    if (NIL == Filesys.directory_p(directory)) {
		file_utilities.make_directory_recursive(directory, NIL, NIL != com.cyc.cycjava.cycl.fact_sheets.chmod_safe_to_useP() ? ((SubLObject) ($$$775)) : NIL);
	    }
	    {
		SubLObject set_contents_var = set.do_set_internal(term_set);
		SubLObject basis_object = do_set_contents_basis_object(set_contents_var);
		SubLObject state = NIL;
		for (state = do_set_contents_initial_state(basis_object, set_contents_var); NIL == do_set_contents_doneP(basis_object, state); state = do_set_contents_update_state(state)) {
		    {
			SubLObject fort = do_set_contents_next(basis_object, state);
			if (NIL != do_set_contents_element_validP(state, fort)) {
			    ids = cons(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(fort, T), ids);
			    done_count = add(done_count, ONE_INTEGER);
			    if (mod(done_count, batch_size).isZero()) {
				{
				    SubLObject filename = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id_filename(directory, file_number);
				    cfasl_utilities.cfasl_save(ids, filename);
				    ids = NIL;
				    file_number = add(file_number, ONE_INTEGER);
				}
			    }
			}
		    }
		}
	    }
	    if (NIL != ids) {
		{
		    SubLObject filename = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id_filename(directory, file_number);
		    cfasl_utilities.cfasl_save(ids, filename);
		    ids = NIL;
		}
	    }
	    return values(file_number, directory);
	}
    }

    public static SubLObject write_term_ids_to_update_for_term_set(final SubLObject term_set, SubLObject batch_size, SubLObject directory) {
	if (batch_size == UNPROVIDED) {
	    batch_size = fact_sheets.$int$50;
	}
	if (directory == UNPROVIDED) {
	    directory = cconcatenate(string_utilities.bunge(fact_sheets.fact_sheet_data_path(), CHAR_slash), fact_sheets.$str585$_term_ids_to_update_);
	}
	SubLObject done_count = ZERO_INTEGER;
	SubLObject file_number = ZERO_INTEGER;
	SubLObject ids = NIL;
	if (NIL == Filesys.directory_p(directory)) {
	    file_utilities.make_directory_recursive(directory, NIL, NIL != fact_sheets.chmod_safe_to_useP() ? fact_sheets.$$$775 : NIL);
	}
	final SubLObject set_contents_var = set.do_set_internal(term_set);
	SubLObject basis_object;
	SubLObject state;
	SubLObject fort;
	SubLObject filename;
	for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
		state); state = set_contents.do_set_contents_update_state(state)) {
	    fort = set_contents.do_set_contents_next(basis_object, state);
	    if (NIL != set_contents.do_set_contents_element_validP(state, fort)) {
		ids = cons(fact_sheets.fact_sheet_term_id(fort, T), ids);
		done_count = add(done_count, ONE_INTEGER);
		if (mod(done_count, batch_size).isZero()) {
		    filename = fact_sheets.fact_sheet_term_id_filename(directory, file_number);
		    cfasl_utilities.cfasl_save(ids, filename);
		    ids = NIL;
		    file_number = add(file_number, ONE_INTEGER);
		}
	    }
	}
	if (NIL != ids) {
	    final SubLObject filename2 = fact_sheets.fact_sheet_term_id_filename(directory, file_number);
	    cfasl_utilities.cfasl_save(ids, filename2);
	    ids = NIL;
	}
	return values(file_number, directory);
    }

    /**
     * Given a set of term SUIDs for either constants or NARTs generate the
     * fact sheet term IDs for them. Term SUIDs that are 'out of bounds'
     * are quietly ignored to help with the 'ragged edges' of the KB number
     * ranges.
     *
     * @return LISTP of fact sheet term IDs.
     */
    @LispMethod(comment = "Given a set of term SUIDs for either constants or NARTs generate the\r\nfact sheet term IDs for them. Term SUIDs that are \'out of bounds\'\r\nare quietly ignored to help with the \'ragged edges\' of the KB number\r\nranges.\r\n\r\n@return LISTP of fact sheet term IDs.\nGiven a set of term SUIDs for either constants or NARTs generate the\nfact sheet term IDs for them. Term SUIDs that are \'out of bounds\'\nare quietly ignored to help with the \'ragged edges\' of the KB number\nranges.")
    public static final SubLObject convert_term_suids_to_fact_sheet_term_ids_alt(SubLObject term_suids, SubLObject term_type) {
	{
	    SubLObject term_ids = NIL;
	    SubLObject method = NIL;
	    SubLObject pcase_var = term_type;
	    if (pcase_var.eql($CONSTANT)) {
		method = FIND_CONSTANT_BY_INTERNAL_ID;
	    } else {
		if (pcase_var.eql($NART)) {
		    method = FIND_NART_BY_ID;
		} else {
		    Errors.error($str_alt727$Invalid_term_type_specification__, term_type);
		}
	    }
	    {
		SubLObject raw_terms = Mapping.mapcar(method, term_suids);
		SubLObject clean_terms = list_utilities.remove_if_not(FORT_P, raw_terms, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		term_ids = Mapping.mapcar(FACT_SHEET_TERM_ID, clean_terms);
	    }
	    return term_ids;
	}
    }

    @LispMethod(comment = "Given a set of term SUIDs for either constants or NARTs generate the\r\nfact sheet term IDs for them. Term SUIDs that are \'out of bounds\'\r\nare quietly ignored to help with the \'ragged edges\' of the KB number\r\nranges.\r\n\r\n@return LISTP of fact sheet term IDs.\nGiven a set of term SUIDs for either constants or NARTs generate the\nfact sheet term IDs for them. Term SUIDs that are \'out of bounds\'\nare quietly ignored to help with the \'ragged edges\' of the KB number\nranges.")
    public static SubLObject convert_term_suids_to_fact_sheet_term_ids(final SubLObject term_suids, final SubLObject term_type) {
	SubLObject term_ids = NIL;
	SubLObject method = NIL;
	if (term_type.eql($CONSTANT)) {
	    method = FIND_CONSTANT_BY_INTERNAL_ID;
	} else if (term_type.eql($NART)) {
	    method = fact_sheets.FIND_NART_BY_ID;
	} else {
	    Errors.error(fact_sheets.$str590$Invalid_term_type_specification__, term_type);
	}

	final SubLObject raw_terms = Mapping.mapcar(method, term_suids);
	final SubLObject clean_terms = list_utilities.remove_if_not(FORT_P, raw_terms, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	term_ids = Mapping.mapcar(fact_sheets.FACT_SHEET_TERM_ID, clean_terms);
	return term_ids;
    }

    /**
    * Given a set of term SUIDs for either constants or NARTs generate the
    * fact sheet term IDs for them. Term SUIDs that are 'out of bounds'
    * are quietly ignored to help with the 'ragged edges' of the KB number
    * ranges.
    *
    * @return LISTP of fact sheet term IDs.
    */

    /**
     * Given the start in a range of term SUIDs and a type term, generate a
     * sequence of the corresponding fact sheet term IDs.
     *
     * @see TERM-SUIDS-TO-FACT-SHEET-TERM-IDS
     */
    @LispMethod(comment = "Given the start in a range of term SUIDs and a type term, generate a\r\nsequence of the corresponding fact sheet term IDs.\r\n\r\n@see TERM-SUIDS-TO-FACT-SHEET-TERM-IDS\nGiven the start in a range of term SUIDs and a type term, generate a\nsequence of the corresponding fact sheet term IDs.")
    public static final SubLObject convert_term_suid_range_to_fact_sheet_term_ids_alt(SubLObject first_term_suid, SubLObject num_of_terms, SubLObject term_type) {
	return com.cyc.cycjava.cycl.fact_sheets.convert_term_suids_to_fact_sheet_term_ids(list_utilities.new_num_list(num_of_terms, first_term_suid), term_type);
    }

    @LispMethod(comment = "Given the start in a range of term SUIDs and a type term, generate a\r\nsequence of the corresponding fact sheet term IDs.\r\n\r\n@see TERM-SUIDS-TO-FACT-SHEET-TERM-IDS\nGiven the start in a range of term SUIDs and a type term, generate a\nsequence of the corresponding fact sheet term IDs.")
    public static SubLObject convert_term_suid_range_to_fact_sheet_term_ids(final SubLObject first_term_suid, final SubLObject num_of_terms, final SubLObject term_type) {
	return fact_sheets.convert_term_suids_to_fact_sheet_term_ids(list_utilities.new_num_list(num_of_terms, first_term_suid), term_type);
    }

    /**
    * Given the start in a range of term SUIDs and a type term, generate a
    * sequence of the corresponding fact sheet term IDs.
    *
    * @see TERM-SUIDS-TO-FACT-SHEET-TERM-IDS
    */

    /**
     * Update all of the fact sheets whose term-suids are specified.
     *
     * @see UPDATE-FACT-SHEETS-WITH-IDS
     * @see TERM-SUIDS-TO-FACT-SHEET-TERM-IDS
     */
    @LispMethod(comment = "Update all of the fact sheets whose term-suids are specified.\r\n\r\n@see UPDATE-FACT-SHEETS-WITH-IDS\r\n@see TERM-SUIDS-TO-FACT-SHEET-TERM-IDS")
    public static final SubLObject update_fact_sheets_with_suids_alt(SubLObject term_suids, SubLObject term_type, SubLObject write_date_threshold, SubLObject id_set_identifier) {
	if (write_date_threshold == UNPROVIDED) {
	    write_date_threshold = numeric_date_utilities.universal_time_from_date_and_second(numeric_date_utilities.get_universal_date(UNPROVIDED, UNPROVIDED), ZERO_INTEGER);
	}
	if (id_set_identifier == UNPROVIDED) {
	    id_set_identifier = $$$a_specific_ID_set;
	}
	{
	    SubLObject term_ids = com.cyc.cycjava.cycl.fact_sheets.convert_term_suids_to_fact_sheet_term_ids(term_suids, term_type);
	    return com.cyc.cycjava.cycl.fact_sheets.update_fact_sheets_with_ids(term_ids, write_date_threshold, id_set_identifier);
	}
    }

    @LispMethod(comment = "Update all of the fact sheets whose term-suids are specified.\r\n\r\n@see UPDATE-FACT-SHEETS-WITH-IDS\r\n@see TERM-SUIDS-TO-FACT-SHEET-TERM-IDS")
    public static SubLObject update_fact_sheets_with_suids(final SubLObject term_suids, final SubLObject term_type, SubLObject write_date_threshold, SubLObject id_set_identifier) {
	if (write_date_threshold == UNPROVIDED) {
	    write_date_threshold = numeric_date_utilities.universal_time_from_date_and_second(numeric_date_utilities.get_universal_date(UNPROVIDED, UNPROVIDED), ZERO_INTEGER);
	}
	if (id_set_identifier == UNPROVIDED) {
	    id_set_identifier = fact_sheets.$$$a_specific_ID_set;
	}
	final SubLObject term_ids = fact_sheets.convert_term_suids_to_fact_sheet_term_ids(term_suids, term_type);
	return fact_sheets.update_fact_sheets_with_ids(term_ids, write_date_threshold, id_set_identifier);
    }

    /**
    * Update all of the fact sheets whose term-suids are specified.
    *
    * @see UPDATE-FACT-SHEETS-WITH-IDS
    * @see TERM-SUIDS-TO-FACT-SHEET-TERM-IDS
    */

    public static final SubLObject update_fact_sheets_with_ids_alt(SubLObject term_ids, SubLObject write_date_threshold, SubLObject id_set_identifier) {
	if (write_date_threshold == UNPROVIDED) {
	    write_date_threshold = numeric_date_utilities.universal_time_from_date_and_second(numeric_date_utilities.get_universal_date(UNPROVIDED, UNPROVIDED), ZERO_INTEGER);
	}
	if (id_set_identifier == UNPROVIDED) {
	    id_set_identifier = $$$a_specific_ID_set;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject message = cconcatenate($str_alt729$Updating_fact_sheets_from_, format_nil.format_nil_a_no_copy(id_set_identifier));
		SubLObject list_var = term_ids;
		$progress_note$.setDynamicValue(message, thread);
		$progress_start_time$.setDynamicValue(get_universal_time(), thread);
		$progress_total$.setDynamicValue(length(list_var), thread);
		$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
		{
		    SubLObject _prev_bind_0 = $last_percent_progress_index$.currentBinding(thread);
		    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
		    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
		    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
		    try {
			$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
			$last_percent_progress_prediction$.bind(NIL, thread);
			$within_noting_percent_progress$.bind(T, thread);
			$percent_progress_start_time$.bind(get_universal_time(), thread);
			noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
			{
			    SubLObject csome_list_var = list_var;
			    SubLObject term_id = NIL;
			    for (term_id = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), term_id = csome_list_var.first()) {
				note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
				$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
				{
				    SubLObject fact_sheet_file = nth_value_step_2(nth_value_step_1(ONE_INTEGER), com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_fact_sheet_from_id(term_id, $NORMAL, $DEFAULT, $DEFAULT, UNPROVIDED, UNPROVIDED));
				    SubLObject v_term = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(term_id, UNPROVIDED);
				    if (NIL != file_utilities.file_existsP(fact_sheet_file)) {
					{
					    SubLObject file_write_date = Filesys.file_write_date(fact_sheet_file);
					    if (file_write_date.numG(write_date_threshold)) {
						{
						    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
						    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
							com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
							format(stream, $str_alt730$Skipping__S__which_was_updated_on, v_term, numeric_date_utilities.get_universal_date(file_write_date, UNPROVIDED));
							force_output(stream);
						    }
						}
					    } else {
						com.cyc.cycjava.cycl.fact_sheets.update_fact_sheet_file_if_stale(fact_sheet_file, T, T);
						{
						    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
						    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
							com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
							format(stream, $str_alt731$Writing_fact_sheet_data_for__S_to, v_term, fact_sheet_file);
							force_output(stream);
						    }
						}
					    }
					}
				    } else {
					{
					    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
					    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
						com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
						format(stream, $str_alt732$Couldn_t_find_fact_sheet_file_for, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_id(term_id, UNPROVIDED));
						force_output(stream);
					    }
					}
					com.cyc.cycjava.cycl.fact_sheets.update_fact_sheet_file_if_stale(fact_sheet_file, T, T);
					{
					    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
					    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
						com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
						format(stream, $str_alt731$Writing_fact_sheet_data_for__S_to, v_term, fact_sheet_file);
						force_output(stream);
					    }
					}
				    }
				}
			    }
			}
			noting_percent_progress_postamble();
		    } finally {
			$percent_progress_start_time$.rebind(_prev_bind_3, thread);
			$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
			$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
			$last_percent_progress_index$.rebind(_prev_bind_0, thread);
		    }
		}
	    }
	    return term_ids;
	}
    }

    public static SubLObject update_fact_sheets_with_ids(final SubLObject term_ids, SubLObject write_date_threshold, SubLObject id_set_identifier) {
	if (write_date_threshold == UNPROVIDED) {
	    write_date_threshold = numeric_date_utilities.universal_time_from_date_and_second(numeric_date_utilities.get_universal_date(UNPROVIDED, UNPROVIDED), ZERO_INTEGER);
	}
	if (id_set_identifier == UNPROVIDED) {
	    id_set_identifier = fact_sheets.$$$a_specific_ID_set;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject message = cconcatenate(fact_sheets.$$$Updating_fact_sheets_from_, format_nil.format_nil_a_no_copy(id_set_identifier));
	final SubLObject _prev_bind_0 = $progress_note$.currentBinding(thread);
	final SubLObject _prev_bind_2 = $progress_start_time$.currentBinding(thread);
	final SubLObject _prev_bind_3 = $progress_total$.currentBinding(thread);
	final SubLObject _prev_bind_4 = $progress_sofar$.currentBinding(thread);
	final SubLObject _prev_bind_5 = $last_percent_progress_index$.currentBinding(thread);
	final SubLObject _prev_bind_6 = $last_percent_progress_prediction$.currentBinding(thread);
	final SubLObject _prev_bind_7 = $within_noting_percent_progress$.currentBinding(thread);
	final SubLObject _prev_bind_8 = $percent_progress_start_time$.currentBinding(thread);
	try {
	    $progress_note$.bind(NIL != message ? message : fact_sheets.$$$cdolist, thread);
	    $progress_start_time$.bind(get_universal_time(), thread);
	    $progress_total$.bind(length(term_ids), thread);
	    $progress_sofar$.bind(ZERO_INTEGER, thread);
	    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
	    $last_percent_progress_prediction$.bind(NIL, thread);
	    $within_noting_percent_progress$.bind(T, thread);
	    $percent_progress_start_time$.bind(get_universal_time(), thread);
	    try {
		noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
		SubLObject csome_list_var = term_ids;
		SubLObject term_id = NIL;
		term_id = csome_list_var.first();
		while (NIL != csome_list_var) {
		    final SubLObject fact_sheet_file = nth_value_step_2(nth_value_step_1(ONE_INTEGER), fact_sheets.directory_and_filename_for_fact_sheet_from_id(term_id, $NORMAL, $DEFAULT, $DEFAULT, UNPROVIDED, UNPROVIDED));
		    final SubLObject v_term = fact_sheets.fact_sheet_term_id(term_id, UNPROVIDED);
		    if (NIL != file_utilities.file_existsP(fact_sheet_file)) {
			final SubLObject file_write_date = Filesys.file_write_date(fact_sheet_file);
			if (file_write_date.numG(write_date_threshold)) {
			    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
			    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
				fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
				format(stream, fact_sheets.$str593$Skipping__S__which_was_updated_on, v_term, numeric_date_utilities.get_universal_date(file_write_date, UNPROVIDED));
				force_output(stream);
			    }
			} else {
			    fact_sheets.update_fact_sheet_file_if_stale(fact_sheet_file, T, T);
			    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
			    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
				fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
				format(stream, fact_sheets.$str594$Writing_fact_sheet_data_for__S_to, v_term, fact_sheet_file);
				force_output(stream);
			    }
			}
		    } else {
			SubLObject stream2 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream2) && current_process().eql(subl_promotions.initial_process())) || (stream2.isStream() && (NIL != output_stream_p(stream2)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream2);
			    format(stream2, fact_sheets.$str595$Couldn_t_find_fact_sheet_file_for, fact_sheets.fact_sheet_term_from_id(term_id, UNPROVIDED));
			    force_output(stream2);
			}
			fact_sheets.update_fact_sheet_file_if_stale(fact_sheet_file, T, T);
			stream2 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream2) && current_process().eql(subl_promotions.initial_process())) || (stream2.isStream() && (NIL != output_stream_p(stream2)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream2);
			    format(stream2, fact_sheets.$str594$Writing_fact_sheet_data_for__S_to, v_term, fact_sheet_file);
			    force_output(stream2);
			}
		    }
		    $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
		    note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
		    csome_list_var = csome_list_var.rest();
		    term_id = csome_list_var.first();
		}
	    } finally {
		final SubLObject _prev_bind_0_$333 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values = getValuesAsVector();
		    noting_percent_progress_postamble();
		    restoreValuesFromVector(_values);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$333, thread);
		}
	    }
	} finally {
	    $percent_progress_start_time$.rebind(_prev_bind_8, thread);
	    $within_noting_percent_progress$.rebind(_prev_bind_7, thread);
	    $last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
	    $last_percent_progress_index$.rebind(_prev_bind_5, thread);
	    $progress_sofar$.rebind(_prev_bind_4, thread);
	    $progress_total$.rebind(_prev_bind_3, thread);
	    $progress_start_time$.rebind(_prev_bind_2, thread);
	    $progress_note$.rebind(_prev_bind_0, thread);
	}
	return term_ids;
    }

    public static final SubLObject fact_sheet_term_id_filename_alt(SubLObject directory, SubLObject file_number) {
	return cconcatenate(directory, new SubLObject[] { $str_alt733$term_ids_, format(NIL, $str_alt734$_3__0D, file_number), $str_alt704$_cfasl });
    }

    public static SubLObject fact_sheet_term_id_filename(final SubLObject directory, final SubLObject file_number) {
	return cconcatenate(directory, new SubLObject[] { fact_sheets.$str596$term_ids_, format(NIL, fact_sheets.$str597$_3__0D, file_number), fact_sheets.$str567$_cfasl });
    }

    public static final SubLObject update_fact_sheets_from_id_file_alt(SubLObject file_number, SubLObject write_date_threshold, SubLObject parent_directory) {
	if (write_date_threshold == UNPROVIDED) {
	    write_date_threshold = numeric_date_utilities.universal_time_from_date_and_second(numeric_date_utilities.get_universal_date(UNPROVIDED, UNPROVIDED), ZERO_INTEGER);
	}
	if (parent_directory == UNPROVIDED) {
	    parent_directory = cconcatenate(string_utilities.bunge(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_path(), CHAR_slash), $str_alt205$_);
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject already_loggingP = stringp($fact_sheet_log_file$.getDynamicValue(thread));
		SubLObject directory = NIL;
		SubLObject filename = NIL;
		SubLObject use_new_setupP = NIL;
		if (NIL == already_loggingP) {
		    thread.resetMultipleValues();
		    {
			SubLObject directory_418 = com.cyc.cycjava.cycl.fact_sheets.open_new_unique_fact_sheet_log_file();
			SubLObject filename_419 = thread.secondMultipleValue();
			thread.resetMultipleValues();
			directory = directory_418;
			filename = filename_419;
		    }
		    use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
		}
		if (NIL != use_new_setupP) {
		    format(StreamsLow.$standard_output$.getDynamicValue(thread), $str_alt69$__Logging_Fact_Sheet_generation_t, filename);
		    force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
		}
		{
		    SubLObject _prev_bind_0 = $fact_sheet_log_file$.currentBinding(thread);
		    try {
			$fact_sheet_log_file$.bind(NIL != use_new_setupP ? ((SubLObject) (filename)) : $fact_sheet_log_file$.getDynamicValue(thread), thread);
			{
			    SubLObject stream = NIL;
			    try {
				{
				    SubLObject _prev_bind_0_420 = stream_macros.$stream_requires_locking$.currentBinding(thread);
				    try {
					stream_macros.$stream_requires_locking$.bind(NIL, thread);
					stream = compatibility.open_text($fact_sheet_log_file$.getDynamicValue(thread), $APPEND, NIL);
				    } finally {
					stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_420, thread);
				    }
				}
				if (!stream.isStream()) {
				    Errors.error($str_alt137$Unable_to_open__S, $fact_sheet_log_file$.getDynamicValue(thread));
				}
				{
				    SubLObject _prev_bind_0_421 = $fact_sheet_log_stream$.currentBinding(thread);
				    try {
					$fact_sheet_log_stream$.bind(stream, thread);
					{
					    SubLObject _prev_bind_0_422 = $next_fact_sheet_hourly_report_time$.currentBinding(thread);
					    SubLObject _prev_bind_1 = $hourly_fact_sheet_stats$.currentBinding(thread);
					    try {
						$next_fact_sheet_hourly_report_time$.bind(NIL, thread);
						$hourly_fact_sheet_stats$.bind(make_vector(TWO_INTEGER, ZERO_INTEGER), thread);
						com.cyc.cycjava.cycl.fact_sheets.reset_hourly_report_time(UNPROVIDED);
						{
						    SubLObject stream_423 = $fact_sheet_log_stream$.getDynamicValue(thread);
						    if (((T == stream_423) && (current_process() == subl_promotions.initial_process())) || (stream_423.isStream() && (NIL != output_stream_p(stream_423)))) {
							com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_423);
							format(stream_423, $str_alt735$Updating_fact_sheets_file___D_of_, file_number, parent_directory);
							force_output(stream_423);
						    }
						}
						{
						    SubLObject directory_424 = cconcatenate(parent_directory, $str_alt718$term_ids_to_update_);
						    SubLObject filename_425 = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id_filename(directory_424, file_number);
						    if (NIL != file_utilities.file_existsP(filename_425)) {
							{
							    SubLObject term_ids = cfasl_utilities.cfasl_load(filename_425);
							    com.cyc.cycjava.cycl.fact_sheets.update_fact_sheets_with_ids(term_ids, write_date_threshold, filename_425);
							}
						    } else {
							{
							    SubLObject stream_426 = $fact_sheet_log_stream$.getDynamicValue(thread);
							    if (((T == stream_426) && (current_process() == subl_promotions.initial_process())) || (stream_426.isStream() && (NIL != output_stream_p(stream_426)))) {
								com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream_426);
								format(stream_426, $str_alt736$Couldn_t_find_id_file__S, filename_425);
								force_output(stream_426);
							    }
							}
						    }
						}
					    } finally {
						$hourly_fact_sheet_stats$.rebind(_prev_bind_1, thread);
						$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_422, thread);
					    }
					}
					if (NIL != use_new_setupP) {
					    {
						SubLObject stream_427 = $fact_sheet_log_stream$.getDynamicValue(thread);
						if (((T == stream_427) && (current_process() == subl_promotions.initial_process())) || (stream_427.isStream() && (NIL != output_stream_p(stream_427)))) {
						    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_427);
						    format(stream_427, $str_alt685$Closing_log_);
						    force_output(stream_427);
						}
					    }
					    com.cyc.cycjava.cycl.fact_sheets.note_fact_sheet_log_file_closed(UNPROVIDED);
					}
				    } finally {
					$fact_sheet_log_stream$.rebind(_prev_bind_0_421, thread);
				    }
				}
			    } finally {
				{
				    SubLObject _prev_bind_0_428 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					if (stream.isStream()) {
					    close(stream, UNPROVIDED);
					}
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0_428, thread);
				    }
				}
			    }
			}
		    } finally {
			$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
		    }
		}
	    }
	    return file_number;
	}
    }

    public static SubLObject update_fact_sheets_from_id_file(final SubLObject file_number, SubLObject write_date_threshold, SubLObject parent_directory) {
	if (write_date_threshold == UNPROVIDED) {
	    write_date_threshold = numeric_date_utilities.universal_time_from_date_and_second(numeric_date_utilities.get_universal_date(UNPROVIDED, UNPROVIDED), ZERO_INTEGER);
	}
	if (parent_directory == UNPROVIDED) {
	    parent_directory = cconcatenate(string_utilities.bunge(fact_sheets.fact_sheet_data_path(), CHAR_slash), fact_sheets.$str500$_);
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject already_loggingP = stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
	SubLObject directory = NIL;
	SubLObject filename = NIL;
	SubLObject use_new_setupP = NIL;
	if (NIL == already_loggingP) {
	    thread.resetMultipleValues();
	    final SubLObject directory_$334 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
	    final SubLObject filename_$335 = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    directory = directory_$334;
	    filename = filename_$335;
	    use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
	}
	if (NIL != use_new_setupP) {
	    format(StreamsLow.$standard_output$.getDynamicValue(thread), fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
	    force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
	}
	final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
	try {
	    fact_sheet_logs.$fact_sheet_log_file$.bind(NIL != use_new_setupP ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
	    SubLObject stream = NIL;
	    try {
		final SubLObject _prev_bind_0_$336 = stream_macros.$stream_requires_locking$.currentBinding(thread);
		try {
		    stream_macros.$stream_requires_locking$.bind(NIL, thread);
		    stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), $APPEND);
		} finally {
		    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$336, thread);
		}
		if (!stream.isStream()) {
		    Errors.error(fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
		}
		final SubLObject _prev_bind_0_$337 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
		try {
		    fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
		    final SubLObject _prev_bind_0_$338 = fact_sheet_logs.$next_fact_sheet_hourly_report_time$.currentBinding(thread);
		    final SubLObject _prev_bind_2 = fact_sheet_logs.$hourly_fact_sheet_stats$.currentBinding(thread);
		    try {
			fact_sheet_logs.$next_fact_sheet_hourly_report_time$.bind(NIL, thread);
			fact_sheet_logs.$hourly_fact_sheet_stats$.bind(make_vector(TWO_INTEGER, ZERO_INTEGER), thread);
			fact_sheet_logs.reset_hourly_report_time(UNPROVIDED);
			final SubLObject stream_$339 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream_$339) && current_process().eql(subl_promotions.initial_process())) || (stream_$339.isStream() && (NIL != output_stream_p(stream_$339)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$339);
			    format(stream_$339, fact_sheets.$str598$Updating_fact_sheets_file___D_of_, file_number, parent_directory);
			    force_output(stream_$339);
			}
			final SubLObject directory_$335 = cconcatenate(parent_directory, fact_sheets.$str581$term_ids_to_update_);
			final SubLObject filename_$336 = fact_sheets.fact_sheet_term_id_filename(directory_$335, file_number);
			if (NIL != file_utilities.file_existsP(filename_$336)) {
			    final SubLObject term_ids = cfasl_utilities.cfasl_load(filename_$336);
			    fact_sheets.update_fact_sheets_with_ids(term_ids, write_date_threshold, filename_$336);
			} else {
			    final SubLObject stream_$340 = fact_sheet_logs.fact_sheet_log_stream();
			    if (((T == stream_$340) && current_process().eql(subl_promotions.initial_process())) || (stream_$340.isStream() && (NIL != output_stream_p(stream_$340)))) {
				fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream_$340);
				format(stream_$340, fact_sheets.$str599$Couldn_t_find_id_file__S, filename_$336);
				force_output(stream_$340);
			    }
			}
		    } finally {
			fact_sheet_logs.$hourly_fact_sheet_stats$.rebind(_prev_bind_2, thread);
			fact_sheet_logs.$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_$338, thread);
		    }
		    if (NIL != use_new_setupP) {
			final SubLObject stream_$341 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream_$341) && current_process().eql(subl_promotions.initial_process())) || (stream_$341.isStream() && (NIL != output_stream_p(stream_$341)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$341);
			    format(stream_$341, fact_sheets.$str548$Closing_log_);
			    force_output(stream_$341);
			}
			fact_sheet_logs.note_fact_sheet_log_file_closed(UNPROVIDED);
		    }
		} finally {
		    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$337, thread);
		}
	    } finally {
		final SubLObject _prev_bind_0_$339 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values = getValuesAsVector();
		    if (stream.isStream()) {
			close(stream, UNPROVIDED);
		    }
		    restoreValuesFromVector(_values);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$339, thread);
		}
	    }
	} finally {
	    fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
	}
	return file_number;
    }

    /**
     * A companion to UPDATE-ALL-FACT-SHEETS, it gives an estimate of how much work remains
     * to be done.
     *
     * @return NON-NEGATIVE-INTEGER-P number of fact sheets that remain to do.
     */
    @LispMethod(comment = "A companion to UPDATE-ALL-FACT-SHEETS, it gives an estimate of how much work remains\r\nto be done.\r\n\r\n@return NON-NEGATIVE-INTEGER-P number of fact sheets that remain to do.\nA companion to UPDATE-ALL-FACT-SHEETS, it gives an estimate of how much work remains\nto be done.")
    public static final SubLObject remaining_fact_sheets_to_update_alt(SubLObject verbosities, SubLObject target_statuses, SubLObject domain_mt, SubLObject language_mt) {
	if (verbosities == UNPROVIDED) {
	    verbosities = $list_alt672;
	}
	if (target_statuses == UNPROVIDED) {
	    target_statuses = $list_alt673;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject list_var = target_statuses;
		SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
		{
		    SubLObject cdolist_list_var = list_var;
		    SubLObject elem = NIL;
		    for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), elem = cdolist_list_var.first()) {
			SubLTrampolineFile.checkType(elem, FACT_SHEET_STATUS_P);
		    }
		}
	    }
	    {
		SubLObject missing_fact_sheets = dictionary.new_dictionary(UNPROVIDED, UNPROVIDED);
		{
		    SubLObject _prev_bind_0 = $fact_sheet_log_stream$.currentBinding(thread);
		    try {
			$fact_sheet_log_stream$.bind(StreamsLow.$null_output$.getDynamicValue(thread), thread);
			{
			    SubLObject message = $str_alt739$Scanning_for_fact_sheets_requirin;
			    SubLObject total = forts.fort_count();
			    SubLObject sofar = ZERO_INTEGER;
			    {
				SubLObject _prev_bind_0_429 = $last_percent_progress_index$.currentBinding(thread);
				SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
				SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
				SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
				try {
				    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
				    $last_percent_progress_prediction$.bind(NIL, thread);
				    $within_noting_percent_progress$.bind(T, thread);
				    $percent_progress_start_time$.bind(get_universal_time(), thread);
				    noting_percent_progress_preamble(message);
				    {
					SubLObject cdolist_list_var = forts.do_forts_tables();
					SubLObject table_var = NIL;
					for (table_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), table_var = cdolist_list_var.first()) {
					    if (NIL == do_id_index_empty_p(table_var, $SKIP)) {
						{
						    SubLObject id = do_id_index_next_id(table_var, T, NIL, NIL);
						    SubLObject state_var = do_id_index_next_state(table_var, T, id, NIL);
						    SubLObject fort = NIL;
						    while (NIL != id) {
							fort = do_id_index_state_object(table_var, $SKIP, id, state_var);
							if (NIL != do_id_index_id_and_object_validP(id, fort, $SKIP)) {
							    sofar = add(sofar, ONE_INTEGER);
							    note_percent_progress(sofar, total);
							    {
								SubLObject cdolist_list_var_430 = verbosities;
								SubLObject verbosity = NIL;
								for (verbosity = cdolist_list_var_430.first(); NIL != cdolist_list_var_430; cdolist_list_var_430 = cdolist_list_var_430.rest(), verbosity = cdolist_list_var_430.first()) {
								    if (NIL != com.cyc.cycjava.cycl.fact_sheets.term_ok_for_fact_sheet_p(fort, eq(verbosity, $MINI))) {
									{
									    SubLObject status = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_status(fort, verbosity, domain_mt, language_mt, UNPROVIDED);
									    if (NIL != subl_promotions.memberP(status, target_statuses, UNPROVIDED, UNPROVIDED)) {
										map_utilities.map_increment(missing_fact_sheets, verbosity, UNPROVIDED);
									    }
									}
								    }
								}
							    }
							}
							id = do_id_index_next_id(table_var, T, id, state_var);
							state_var = do_id_index_next_state(table_var, T, id, state_var);
						    }
						}
					    }
					}
				    }
				    noting_percent_progress_postamble();
				} finally {
				    $percent_progress_start_time$.rebind(_prev_bind_3, thread);
				    $within_noting_percent_progress$.rebind(_prev_bind_2, thread);
				    $last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
				    $last_percent_progress_index$.rebind(_prev_bind_0_429, thread);
				}
			    }
			}
		    } finally {
			$fact_sheet_log_stream$.rebind(_prev_bind_0, thread);
		    }
		}
		return missing_fact_sheets;
	    }
	}
    }

    @LispMethod(comment = "A companion to UPDATE-ALL-FACT-SHEETS, it gives an estimate of how much work remains\r\nto be done.\r\n\r\n@return NON-NEGATIVE-INTEGER-P number of fact sheets that remain to do.\nA companion to UPDATE-ALL-FACT-SHEETS, it gives an estimate of how much work remains\nto be done.")
    public static SubLObject remaining_fact_sheets_to_update(SubLObject verbosities, SubLObject target_statuses, SubLObject domain_mt, SubLObject language_mt) {
	if (verbosities == UNPROVIDED) {
	    verbosities = fact_sheets.$list530;
	}
	if (target_statuses == UNPROVIDED) {
	    target_statuses = fact_sheets.$list531;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject list_var = target_statuses;
	assert NIL != list_utilities.non_dotted_list_p(list_var) : "! list_utilities.non_dotted_list_p(list_var) " + ("list_utilities.non_dotted_list_p(list_var) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(list_var) ") + list_var;
	SubLObject cdolist_list_var = list_var;
	SubLObject elem = NIL;
	elem = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    assert NIL != fact_sheets.fact_sheet_status_p(elem) : "! fact_sheets.fact_sheet_status_p(elem) " + ("fact_sheets.fact_sheet_status_p(elem) " + "CommonSymbols.NIL != fact_sheets.fact_sheet_status_p(elem) ") + elem;
	    cdolist_list_var = cdolist_list_var.rest();
	    elem = cdolist_list_var.first();
	}
	final SubLObject missing_fact_sheets = dictionary.new_dictionary(UNPROVIDED, UNPROVIDED);
	final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
	try {
	    fact_sheet_logs.$fact_sheet_log_stream$.bind(StreamsLow.$null_output$.getDynamicValue(thread), thread);
	    final SubLObject message = fact_sheets.$str602$Scanning_for_fact_sheets_requirin;
	    final SubLObject total = forts.fort_count();
	    SubLObject sofar = ZERO_INTEGER;
	    final SubLObject _prev_bind_0_$345 = $last_percent_progress_index$.currentBinding(thread);
	    final SubLObject _prev_bind_2 = $last_percent_progress_prediction$.currentBinding(thread);
	    final SubLObject _prev_bind_3 = $within_noting_percent_progress$.currentBinding(thread);
	    final SubLObject _prev_bind_4 = $percent_progress_start_time$.currentBinding(thread);
	    try {
		$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
		$last_percent_progress_prediction$.bind(NIL, thread);
		$within_noting_percent_progress$.bind(T, thread);
		$percent_progress_start_time$.bind(get_universal_time(), thread);
		try {
		    noting_percent_progress_preamble(message);
		    SubLObject cdolist_list_var2 = forts.do_forts_tables();
		    SubLObject table_var = NIL;
		    table_var = cdolist_list_var2.first();
		    while (NIL != cdolist_list_var2) {
			final SubLObject idx = table_var;
			if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
			    final SubLObject idx_$346 = idx;
			    if (NIL == id_index_dense_objects_empty_p(idx_$346, $SKIP)) {
				final SubLObject vector_var = id_index_dense_objects(idx_$346);
				final SubLObject backwardP_var = NIL;
				SubLObject length;
				SubLObject v_iteration;
				SubLObject id;
				SubLObject fort;
				SubLObject cdolist_list_var_$347;
				SubLObject verbosity;
				SubLObject status;
				for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
				    id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
				    fort = aref(vector_var, id);
				    if ((NIL == id_index_tombstone_p(fort)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
					if (NIL != id_index_tombstone_p(fort)) {
					    fort = $SKIP;
					}
					sofar = add(sofar, ONE_INTEGER);
					note_percent_progress(sofar, total);
					cdolist_list_var_$347 = verbosities;
					verbosity = NIL;
					verbosity = cdolist_list_var_$347.first();
					while (NIL != cdolist_list_var_$347) {
					    if (NIL != fact_sheets.term_ok_for_fact_sheet_p(fort, eq(verbosity, $MINI))) {
						status = fact_sheets.fact_sheet_status(fort, verbosity, domain_mt, language_mt, UNPROVIDED);
						if (NIL != subl_promotions.memberP(status, target_statuses, UNPROVIDED, UNPROVIDED)) {
						    map_utilities.map_increment(missing_fact_sheets, verbosity, UNPROVIDED);
						}
					    }
					    cdolist_list_var_$347 = cdolist_list_var_$347.rest();
					    verbosity = cdolist_list_var_$347.first();
					}
				    }
				}
			    }
			    final SubLObject idx_$347 = idx;
			    if ((NIL == id_index_sparse_objects_empty_p(idx_$347)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
				final SubLObject sparse = id_index_sparse_objects(idx_$347);
				SubLObject id2 = id_index_sparse_id_threshold(idx_$347);
				final SubLObject end_id = id_index_next_id(idx_$347);
				final SubLObject v_default = (NIL != id_index_skip_tombstones_p($SKIP)) ? NIL : $SKIP;
				while (id2.numL(end_id)) {
				    final SubLObject fort2 = gethash_without_values(id2, sparse, v_default);
				    if ((NIL == id_index_skip_tombstones_p($SKIP)) || (NIL == id_index_tombstone_p(fort2))) {
					sofar = add(sofar, ONE_INTEGER);
					note_percent_progress(sofar, total);
					SubLObject cdolist_list_var_$348 = verbosities;
					SubLObject verbosity2 = NIL;
					verbosity2 = cdolist_list_var_$348.first();
					while (NIL != cdolist_list_var_$348) {
					    if (NIL != fact_sheets.term_ok_for_fact_sheet_p(fort2, eq(verbosity2, $MINI))) {
						final SubLObject status2 = fact_sheets.fact_sheet_status(fort2, verbosity2, domain_mt, language_mt, UNPROVIDED);
						if (NIL != subl_promotions.memberP(status2, target_statuses, UNPROVIDED, UNPROVIDED)) {
						    map_utilities.map_increment(missing_fact_sheets, verbosity2, UNPROVIDED);
						}
					    }
					    cdolist_list_var_$348 = cdolist_list_var_$348.rest();
					    verbosity2 = cdolist_list_var_$348.first();
					}
				    }
				    id2 = add(id2, ONE_INTEGER);
				}
			    }
			}
			cdolist_list_var2 = cdolist_list_var2.rest();
			table_var = cdolist_list_var2.first();
		    }
		} finally {
		    final SubLObject _prev_bind_0_$346 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values = getValuesAsVector();
			noting_percent_progress_postamble();
			restoreValuesFromVector(_values);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$346, thread);
		    }
		}
	    } finally {
		$percent_progress_start_time$.rebind(_prev_bind_4, thread);
		$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
		$last_percent_progress_prediction$.rebind(_prev_bind_2, thread);
		$last_percent_progress_index$.rebind(_prev_bind_0_$345, thread);
	    }
	} finally {
	    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0, thread);
	}
	return missing_fact_sheets;
    }

    /**
    * A companion to UPDATE-ALL-FACT-SHEETS, it gives an estimate of how much work remains
    * to be done.
    *
    * @return NON-NEGATIVE-INTEGER-P number of fact sheets that remain to do.
    */

    /**
     * This method identifies all of the fact sheet filenames that a specific
     * KB is expected to have and places them into the accumulator.
     *
     * @return ACCUMULATOR
     */
    @LispMethod(comment = "This method identifies all of the fact sheet filenames that a specific\r\nKB is expected to have and places them into the accumulator.\r\n\r\n@return ACCUMULATOR\nThis method identifies all of the fact sheet filenames that a specific\nKB is expected to have and places them into the accumulator.")
    public static final SubLObject gather_all_fact_sheet_filenames_alt(SubLObject accumulator, SubLObject verbosities, SubLObject domain_mt, SubLObject language_mt) {
	if (verbosities == UNPROVIDED) {
	    verbosities = $list_alt672;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject _prev_bind_0 = $fact_sheet_log_stream$.currentBinding(thread);
		try {
		    $fact_sheet_log_stream$.bind(StreamsLow.$null_output$.getDynamicValue(thread), thread);
		    {
			SubLObject message = $str_alt740$Determining_for_all_fact_sheet_na;
			SubLObject total = forts.fort_count();
			SubLObject sofar = ZERO_INTEGER;
			{
			    SubLObject _prev_bind_0_431 = $last_percent_progress_index$.currentBinding(thread);
			    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
			    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
			    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
			    try {
				$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
				$last_percent_progress_prediction$.bind(NIL, thread);
				$within_noting_percent_progress$.bind(T, thread);
				$percent_progress_start_time$.bind(get_universal_time(), thread);
				noting_percent_progress_preamble(message);
				{
				    SubLObject cdolist_list_var = forts.do_forts_tables();
				    SubLObject table_var = NIL;
				    for (table_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), table_var = cdolist_list_var.first()) {
					if (NIL == do_id_index_empty_p(table_var, $SKIP)) {
					    {
						SubLObject id = do_id_index_next_id(table_var, T, NIL, NIL);
						SubLObject state_var = do_id_index_next_state(table_var, T, id, NIL);
						SubLObject fort = NIL;
						while (NIL != id) {
						    fort = do_id_index_state_object(table_var, $SKIP, id, state_var);
						    if (NIL != do_id_index_id_and_object_validP(id, fort, $SKIP)) {
							sofar = add(sofar, ONE_INTEGER);
							note_percent_progress(sofar, total);
							{
							    SubLObject cdolist_list_var_432 = verbosities;
							    SubLObject verbosity = NIL;
							    for (verbosity = cdolist_list_var_432.first(); NIL != cdolist_list_var_432; cdolist_list_var_432 = cdolist_list_var_432.rest(), verbosity = cdolist_list_var_432.first()) {
								if (NIL != com.cyc.cycjava.cycl.fact_sheets.term_ok_for_fact_sheet_p(fort, eq(verbosity, $MINI))) {
								    thread.resetMultipleValues();
								    {
									SubLObject directory = com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_fact_sheet(fort, verbosity, domain_mt, language_mt, UNPROVIDED);
									SubLObject path = thread.secondMultipleValue();
									thread.resetMultipleValues();
									accumulation.accumulation_add(accumulator, path);
								    }
								}
							    }
							}
						    }
						    id = do_id_index_next_id(table_var, T, id, state_var);
						    state_var = do_id_index_next_state(table_var, T, id, state_var);
						}
					    }
					}
				    }
				}
				noting_percent_progress_postamble();
			    } finally {
				$percent_progress_start_time$.rebind(_prev_bind_3, thread);
				$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
				$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
				$last_percent_progress_index$.rebind(_prev_bind_0_431, thread);
			    }
			}
		    }
		} finally {
		    $fact_sheet_log_stream$.rebind(_prev_bind_0, thread);
		}
	    }
	    return accumulator;
	}
    }

    @LispMethod(comment = "This method identifies all of the fact sheet filenames that a specific\r\nKB is expected to have and places them into the accumulator.\r\n\r\n@return ACCUMULATOR\nThis method identifies all of the fact sheet filenames that a specific\nKB is expected to have and places them into the accumulator.")
    public static SubLObject gather_all_fact_sheet_filenames(final SubLObject accumulator, SubLObject verbosities, SubLObject domain_mt, SubLObject language_mt) {
	if (verbosities == UNPROVIDED) {
	    verbosities = fact_sheets.$list530;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
	try {
	    fact_sheet_logs.$fact_sheet_log_stream$.bind(StreamsLow.$null_output$.getDynamicValue(thread), thread);
	    final SubLObject message = fact_sheets.$str604$Determining_for_all_fact_sheet_na;
	    final SubLObject total = forts.fort_count();
	    SubLObject sofar = ZERO_INTEGER;
	    final SubLObject _prev_bind_0_$351 = $last_percent_progress_index$.currentBinding(thread);
	    final SubLObject _prev_bind_2 = $last_percent_progress_prediction$.currentBinding(thread);
	    final SubLObject _prev_bind_3 = $within_noting_percent_progress$.currentBinding(thread);
	    final SubLObject _prev_bind_4 = $percent_progress_start_time$.currentBinding(thread);
	    try {
		$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
		$last_percent_progress_prediction$.bind(NIL, thread);
		$within_noting_percent_progress$.bind(T, thread);
		$percent_progress_start_time$.bind(get_universal_time(), thread);
		try {
		    noting_percent_progress_preamble(message);
		    SubLObject cdolist_list_var = forts.do_forts_tables();
		    SubLObject table_var = NIL;
		    table_var = cdolist_list_var.first();
		    while (NIL != cdolist_list_var) {
			final SubLObject idx = table_var;
			if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
			    final SubLObject idx_$352 = idx;
			    if (NIL == id_index_dense_objects_empty_p(idx_$352, $SKIP)) {
				final SubLObject vector_var = id_index_dense_objects(idx_$352);
				final SubLObject backwardP_var = NIL;
				SubLObject length;
				SubLObject v_iteration;
				SubLObject id;
				SubLObject fort;
				SubLObject cdolist_list_var_$353;
				SubLObject verbosity;
				SubLObject directory;
				SubLObject path;
				for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
				    id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
				    fort = aref(vector_var, id);
				    if ((NIL == id_index_tombstone_p(fort)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
					if (NIL != id_index_tombstone_p(fort)) {
					    fort = $SKIP;
					}
					sofar = add(sofar, ONE_INTEGER);
					note_percent_progress(sofar, total);
					cdolist_list_var_$353 = verbosities;
					verbosity = NIL;
					verbosity = cdolist_list_var_$353.first();
					while (NIL != cdolist_list_var_$353) {
					    if (NIL != fact_sheets.term_ok_for_fact_sheet_p(fort, eq(verbosity, $MINI))) {
						thread.resetMultipleValues();
						directory = fact_sheets.directory_and_filename_for_fact_sheet(fort, verbosity, domain_mt, language_mt, UNPROVIDED);
						path = thread.secondMultipleValue();
						thread.resetMultipleValues();
						accumulation.accumulation_add(accumulator, path);
					    }
					    cdolist_list_var_$353 = cdolist_list_var_$353.rest();
					    verbosity = cdolist_list_var_$353.first();
					}
				    }
				}
			    }
			    final SubLObject idx_$353 = idx;
			    if ((NIL == id_index_sparse_objects_empty_p(idx_$353)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
				final SubLObject sparse = id_index_sparse_objects(idx_$353);
				SubLObject id2 = id_index_sparse_id_threshold(idx_$353);
				final SubLObject end_id = id_index_next_id(idx_$353);
				final SubLObject v_default = (NIL != id_index_skip_tombstones_p($SKIP)) ? NIL : $SKIP;
				while (id2.numL(end_id)) {
				    final SubLObject fort2 = gethash_without_values(id2, sparse, v_default);
				    if ((NIL == id_index_skip_tombstones_p($SKIP)) || (NIL == id_index_tombstone_p(fort2))) {
					sofar = add(sofar, ONE_INTEGER);
					note_percent_progress(sofar, total);
					SubLObject cdolist_list_var_$354 = verbosities;
					SubLObject verbosity2 = NIL;
					verbosity2 = cdolist_list_var_$354.first();
					while (NIL != cdolist_list_var_$354) {
					    if (NIL != fact_sheets.term_ok_for_fact_sheet_p(fort2, eq(verbosity2, $MINI))) {
						thread.resetMultipleValues();
						final SubLObject directory2 = fact_sheets.directory_and_filename_for_fact_sheet(fort2, verbosity2, domain_mt, language_mt, UNPROVIDED);
						final SubLObject path2 = thread.secondMultipleValue();
						thread.resetMultipleValues();
						accumulation.accumulation_add(accumulator, path2);
					    }
					    cdolist_list_var_$354 = cdolist_list_var_$354.rest();
					    verbosity2 = cdolist_list_var_$354.first();
					}
				    }
				    id2 = add(id2, ONE_INTEGER);
				}
			    }
			}
			cdolist_list_var = cdolist_list_var.rest();
			table_var = cdolist_list_var.first();
		    }
		} finally {
		    final SubLObject _prev_bind_0_$352 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values = getValuesAsVector();
			noting_percent_progress_postamble();
			restoreValuesFromVector(_values);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$352, thread);
		    }
		}
	    } finally {
		$percent_progress_start_time$.rebind(_prev_bind_4, thread);
		$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
		$last_percent_progress_prediction$.rebind(_prev_bind_2, thread);
		$last_percent_progress_index$.rebind(_prev_bind_0_$351, thread);
	    }
	} finally {
	    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0, thread);
	}
	return accumulator;
    }

    /**
    * This method identifies all of the fact sheet filenames that a specific
    * KB is expected to have and places them into the accumulator.
    *
    * @return ACCUMULATOR
    */

    /**
     * For all eligible FORTs, for each of VERBOSITIES, create a new fact sheet if the current
     * status is one of TARGET-STATUSES.
     * This function does *not* use a prioritizer. It just goes over all FORTs and stops
     * when it's done.
     *
     * @param NUMBER-OF-WORKERS,
     * 		THIS-WORKER-NUMBER; These allow multiple processes, possibly
     * 		running on different machines, to divide up the work. All such processes should have
     * 		identical system and KB levels.
     */
    @LispMethod(comment = "For all eligible FORTs, for each of VERBOSITIES, create a new fact sheet if the current\r\nstatus is one of TARGET-STATUSES.\r\nThis function does *not* use a prioritizer. It just goes over all FORTs and stops\r\nwhen it\'s done.\r\n\r\n@param NUMBER-OF-WORKERS,\r\n\t\tTHIS-WORKER-NUMBER; These allow multiple processes, possibly\r\n\t\trunning on different machines, to divide up the work. All such processes should have\r\n\t\tidentical system and KB levels.\nFor all eligible FORTs, for each of VERBOSITIES, create a new fact sheet if the current\nstatus is one of TARGET-STATUSES.\nThis function does *not* use a prioritizer. It just goes over all FORTs and stops\nwhen it\'s done.")
    public static final SubLObject update_all_fact_sheets_alt(SubLObject number_of_workers, SubLObject this_worker_number, SubLObject verbosities, SubLObject target_statuses, SubLObject domain_mt, SubLObject language_mt) {
	if (number_of_workers == UNPROVIDED) {
	    number_of_workers = ONE_INTEGER;
	}
	if (this_worker_number == UNPROVIDED) {
	    this_worker_number = ZERO_INTEGER;
	}
	if (verbosities == UNPROVIDED) {
	    verbosities = $list_alt672;
	}
	if (target_statuses == UNPROVIDED) {
	    target_statuses = $list_alt673;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(number_of_workers, POSITIVE_INTEGER_P);
	    SubLTrampolineFile.checkType(this_worker_number, NON_NEGATIVE_INTEGER_P);
	    {
		SubLObject list_var = target_statuses;
		SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
		{
		    SubLObject cdolist_list_var = list_var;
		    SubLObject elem = NIL;
		    for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), elem = cdolist_list_var.first()) {
			SubLTrampolineFile.checkType(elem, FACT_SHEET_STATUS_P);
		    }
		}
	    }
	    if (this_worker_number.numG(number_of_workers)) {
		Errors.error($str_alt742$THIS_WORKER_NUMBER___a__must_be_l, this_worker_number, number_of_workers);
	    }
	    {
		SubLObject stopP = NIL;
		SubLObject error_count = ZERO_INTEGER;
		SubLObject already_loggingP = stringp($fact_sheet_log_file$.getDynamicValue(thread));
		SubLObject directory = NIL;
		SubLObject filename = NIL;
		SubLObject use_new_setupP = NIL;
		if (NIL == already_loggingP) {
		    thread.resetMultipleValues();
		    {
			SubLObject directory_433 = com.cyc.cycjava.cycl.fact_sheets.open_new_unique_fact_sheet_log_file();
			SubLObject filename_434 = thread.secondMultipleValue();
			thread.resetMultipleValues();
			directory = directory_433;
			filename = filename_434;
		    }
		    use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
		}
		if (NIL != use_new_setupP) {
		    format(StreamsLow.$standard_output$.getDynamicValue(thread), $str_alt69$__Logging_Fact_Sheet_generation_t, filename);
		    force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
		}
		{
		    SubLObject _prev_bind_0 = $fact_sheet_log_file$.currentBinding(thread);
		    try {
			$fact_sheet_log_file$.bind(NIL != use_new_setupP ? ((SubLObject) (filename)) : $fact_sheet_log_file$.getDynamicValue(thread), thread);
			{
			    SubLObject stream = NIL;
			    try {
				{
				    SubLObject _prev_bind_0_435 = stream_macros.$stream_requires_locking$.currentBinding(thread);
				    try {
					stream_macros.$stream_requires_locking$.bind(NIL, thread);
					stream = compatibility.open_text($fact_sheet_log_file$.getDynamicValue(thread), $APPEND, NIL);
				    } finally {
					stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_435, thread);
				    }
				}
				if (!stream.isStream()) {
				    Errors.error($str_alt137$Unable_to_open__S, $fact_sheet_log_file$.getDynamicValue(thread));
				}
				{
				    SubLObject _prev_bind_0_436 = $fact_sheet_log_stream$.currentBinding(thread);
				    try {
					$fact_sheet_log_stream$.bind(stream, thread);
					{
					    SubLObject _prev_bind_0_437 = $next_fact_sheet_hourly_report_time$.currentBinding(thread);
					    SubLObject _prev_bind_1 = $hourly_fact_sheet_stats$.currentBinding(thread);
					    try {
						$next_fact_sheet_hourly_report_time$.bind(NIL, thread);
						$hourly_fact_sheet_stats$.bind(make_vector(TWO_INTEGER, ZERO_INTEGER), thread);
						com.cyc.cycjava.cycl.fact_sheets.reset_hourly_report_time(UNPROVIDED);
						com.cyc.cycjava.cycl.fact_sheets.start_new_fact_sheet_log_file_watcher(UNPROVIDED);
						{
						    SubLObject stream_438 = $fact_sheet_log_stream$.getDynamicValue(thread);
						    if (((T == stream_438) && (current_process() == subl_promotions.initial_process())) || (stream_438.isStream() && (NIL != output_stream_p(stream_438)))) {
							com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_438);
							format(stream_438, $str_alt743$Starting_fact_sheet_update_sessio, new SubLObject[] { this_worker_number, number_of_workers, verbosities, target_statuses, domain_mt, language_mt });
							force_output(stream_438);
						    }
						}
						{
						    SubLObject fort_num = ZERO_INTEGER;
						    SubLObject message = $str_alt744$Iterating_over_all_FORTs_to_updat;
						    SubLObject total = forts.fort_count();
						    SubLObject sofar = ZERO_INTEGER;
						    {
							SubLObject _prev_bind_0_439 = $last_percent_progress_index$.currentBinding(thread);
							SubLObject _prev_bind_1_440 = $last_percent_progress_prediction$.currentBinding(thread);
							SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
							SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
							try {
							    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
							    $last_percent_progress_prediction$.bind(NIL, thread);
							    $within_noting_percent_progress$.bind(T, thread);
							    $percent_progress_start_time$.bind(get_universal_time(), thread);
							    noting_percent_progress_preamble(message);
							    {
								SubLObject rest = NIL;
								for (rest = forts.do_forts_tables(); !((NIL != stopP) || (NIL == rest)); rest = rest.rest()) {
								    {
									SubLObject table_var = rest.first();
									if (NIL == do_id_index_empty_p(table_var, $SKIP)) {
									    {
										SubLObject id = do_id_index_next_id(table_var, T, NIL, NIL);
										SubLObject state_var = do_id_index_next_state(table_var, T, id, NIL);
										SubLObject fort = NIL;
										while ((NIL != id) && (NIL == stopP)) {
										    fort = do_id_index_state_object(table_var, $SKIP, id, state_var);
										    if (NIL != do_id_index_id_and_object_validP(id, fort, $SKIP)) {
											sofar = add(sofar, ONE_INTEGER);
											note_percent_progress(sofar, total);
											if (this_worker_number.eql(mod(fort_num, number_of_workers))) {
											    {
												SubLObject cdolist_list_var = verbosities;
												SubLObject verbosity = NIL;
												for (verbosity = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), verbosity = cdolist_list_var.first()) {
												    if (NIL != com.cyc.cycjava.cycl.fact_sheets.term_ok_for_fact_sheet_p(fort, eq(verbosity, $MINI))) {
													{
													    SubLObject status = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_status(fort, verbosity, domain_mt, language_mt, UNPROVIDED);
													    {
														SubLObject _prev_bind_0_441 = $fact_sheet_verbosity$.currentBinding(thread);
														try {
														    $fact_sheet_verbosity$.bind(verbosity, thread);
														    {
															SubLObject error_message = NIL;
															if (NIL != subl_promotions.memberP(status, target_statuses, UNPROVIDED, UNPROVIDED)) {
															    {
																SubLObject stream_442 = $fact_sheet_log_stream$.getDynamicValue(thread);
																if (((T == stream_442) && (current_process() == subl_promotions.initial_process())) || (stream_442.isStream() && (NIL != output_stream_p(stream_442)))) {
																    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_442);
																    format(stream_442, $str_alt745$Starting__S_update_on__S__Status_, new SubLObject[] { verbosity, fort, status });
																    force_output(stream_442);
																}
															    }
															    if (NIL != $catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
																try {
																    {
																	SubLObject _prev_bind_0_443 = Errors.$error_handler$.currentBinding(thread);
																	try {
																	    Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
																	    try {
																		com.cyc.cycjava.cycl.fact_sheets.update_fact_sheet_for_term_with_logging(fort, verbosity, domain_mt, language_mt);
																	    } catch (Throwable catch_var) {
																		Errors.handleThrowable(catch_var, NIL);
																	    }
																	} finally {
																	    Errors.$error_handler$.rebind(_prev_bind_0_443, thread);
																	}
																    }
																} catch (Throwable ccatch_env_var) {
																    error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
																}
															    } else {
																com.cyc.cycjava.cycl.fact_sheets.update_fact_sheet_for_term_with_logging(fort, verbosity, domain_mt, language_mt);
															    }
															    if (error_message.isString()) {
																{
																    SubLObject stream_444 = $fact_sheet_log_stream$.getDynamicValue(thread);
																    if (((T == stream_444) && (current_process() == subl_promotions.initial_process())) || (stream_444.isStream() && (NIL != output_stream_p(stream_444)))) {
																	com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream_444);
																	format(stream_444, $str_alt746$Fact_Sheet_Updater_error_on__S___, fort, error_message);
																	force_output(stream_444);
																    }
																}
																error_message = NIL;
																error_count = add(error_count, ONE_INTEGER);
																if (error_count.numG(TEN_INTEGER)) {
																    {
																	SubLObject stream_445 = $fact_sheet_log_stream$.getDynamicValue(thread);
																	if (((T == stream_445) && (current_process() == subl_promotions.initial_process())) || (stream_445.isStream() && (NIL != output_stream_p(stream_445)))) {
																	    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream_445);
																	    format(stream_445, $str_alt747$Halting_Fact_Sheet_Update_after__, error_count);
																	    force_output(stream_445);
																	}
																    }
																    stopP = T;
																}
															    }
															}
														    }
														} finally {
														    $fact_sheet_verbosity$.rebind(_prev_bind_0_441, thread);
														}
													    }
													}
												    }
												}
											    }
											    if (NIL != $stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
												stopP = T;
											    }
											}
											fort_num = add(fort_num, ONE_INTEGER);
										    }
										    id = do_id_index_next_id(table_var, T, id, state_var);
										    state_var = do_id_index_next_state(table_var, T, id, state_var);
										}
									    }
									}
								    }
								}
							    }
							    noting_percent_progress_postamble();
							} finally {
							    $percent_progress_start_time$.rebind(_prev_bind_3, thread);
							    $within_noting_percent_progress$.rebind(_prev_bind_2, thread);
							    $last_percent_progress_prediction$.rebind(_prev_bind_1_440, thread);
							    $last_percent_progress_index$.rebind(_prev_bind_0_439, thread);
							}
						    }
						}
						{
						    SubLObject stream_446 = $fact_sheet_log_stream$.getDynamicValue(thread);
						    if (((T == stream_446) && (current_process() == subl_promotions.initial_process())) || (stream_446.isStream() && (NIL != output_stream_p(stream_446)))) {
							com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_446);
							format(stream_446, $str_alt748$Finished_fact_sheet_update_sessio);
							force_output(stream_446);
						    }
						}
					    } finally {
						$hourly_fact_sheet_stats$.rebind(_prev_bind_1, thread);
						$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_437, thread);
					    }
					}
					if (NIL != use_new_setupP) {
					    {
						SubLObject stream_447 = $fact_sheet_log_stream$.getDynamicValue(thread);
						if (((T == stream_447) && (current_process() == subl_promotions.initial_process())) || (stream_447.isStream() && (NIL != output_stream_p(stream_447)))) {
						    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_447);
						    format(stream_447, $str_alt685$Closing_log_);
						    force_output(stream_447);
						}
					    }
					    com.cyc.cycjava.cycl.fact_sheets.note_fact_sheet_log_file_closed(UNPROVIDED);
					}
				    } finally {
					$fact_sheet_log_stream$.rebind(_prev_bind_0_436, thread);
				    }
				}
			    } finally {
				{
				    SubLObject _prev_bind_0_448 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					if (stream.isStream()) {
					    close(stream, UNPROVIDED);
					}
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0_448, thread);
				    }
				}
			    }
			}
		    } finally {
			$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
		    }
		}
	    }
	    return NIL;
	}
    }

    @LispMethod(comment = "For all eligible FORTs, for each of VERBOSITIES, create a new fact sheet if the current\r\nstatus is one of TARGET-STATUSES.\r\nThis function does *not* use a prioritizer. It just goes over all FORTs and stops\r\nwhen it\'s done.\r\n\r\n@param NUMBER-OF-WORKERS,\r\n\t\tTHIS-WORKER-NUMBER; These allow multiple processes, possibly\r\n\t\trunning on different machines, to divide up the work. All such processes should have\r\n\t\tidentical system and KB levels.\nFor all eligible FORTs, for each of VERBOSITIES, create a new fact sheet if the current\nstatus is one of TARGET-STATUSES.\nThis function does *not* use a prioritizer. It just goes over all FORTs and stops\nwhen it\'s done.")
    public static SubLObject update_all_fact_sheets(SubLObject number_of_workers, SubLObject this_worker_number, SubLObject verbosities, SubLObject target_statuses, SubLObject domain_mt, SubLObject language_mt) {
	if (number_of_workers == UNPROVIDED) {
	    number_of_workers = ONE_INTEGER;
	}
	if (this_worker_number == UNPROVIDED) {
	    this_worker_number = ZERO_INTEGER;
	}
	if (verbosities == UNPROVIDED) {
	    verbosities = fact_sheets.$list530;
	}
	if (target_statuses == UNPROVIDED) {
	    target_statuses = fact_sheets.$list531;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	assert NIL != subl_promotions.positive_integer_p(number_of_workers) : "! subl_promotions.positive_integer_p(number_of_workers) " + ("subl_promotions.positive_integer_p(number_of_workers) " + "CommonSymbols.NIL != subl_promotions.positive_integer_p(number_of_workers) ") + number_of_workers;
	assert NIL != subl_promotions.non_negative_integer_p(this_worker_number) : "! subl_promotions.non_negative_integer_p(this_worker_number) " + ("subl_promotions.non_negative_integer_p(this_worker_number) " + "CommonSymbols.NIL != subl_promotions.non_negative_integer_p(this_worker_number) ")
		+ this_worker_number;
	final SubLObject list_var = target_statuses;
	assert NIL != list_utilities.non_dotted_list_p(list_var) : "! list_utilities.non_dotted_list_p(list_var) " + ("list_utilities.non_dotted_list_p(list_var) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(list_var) ") + list_var;
	SubLObject cdolist_list_var = list_var;
	SubLObject elem = NIL;
	elem = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    assert NIL != fact_sheets.fact_sheet_status_p(elem) : "! fact_sheets.fact_sheet_status_p(elem) " + ("fact_sheets.fact_sheet_status_p(elem) " + "CommonSymbols.NIL != fact_sheets.fact_sheet_status_p(elem) ") + elem;
	    cdolist_list_var = cdolist_list_var.rest();
	    elem = cdolist_list_var.first();
	}
	if (this_worker_number.numG(number_of_workers)) {
	    Errors.error(fact_sheets.$str606$THIS_WORKER_NUMBER___a__must_be_l, this_worker_number, number_of_workers);
	}
	SubLObject stopP = NIL;
	SubLObject error_count = ZERO_INTEGER;
	final SubLObject already_loggingP = stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
	SubLObject directory = NIL;
	SubLObject filename = NIL;
	SubLObject use_new_setupP = NIL;
	if (NIL == already_loggingP) {
	    thread.resetMultipleValues();
	    final SubLObject directory_$357 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
	    final SubLObject filename_$358 = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    directory = directory_$357;
	    filename = filename_$358;
	    use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
	}
	if (NIL != use_new_setupP) {
	    format(StreamsLow.$standard_output$.getDynamicValue(thread), fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
	    force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
	}
	final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
	try {
	    fact_sheet_logs.$fact_sheet_log_file$.bind(NIL != use_new_setupP ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
	    SubLObject stream = NIL;
	    try {
		final SubLObject _prev_bind_0_$359 = stream_macros.$stream_requires_locking$.currentBinding(thread);
		try {
		    stream_macros.$stream_requires_locking$.bind(NIL, thread);
		    stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), $APPEND);
		} finally {
		    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$359, thread);
		}
		if (!stream.isStream()) {
		    Errors.error(fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
		}
		final SubLObject _prev_bind_0_$360 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
		try {
		    fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
		    final SubLObject _prev_bind_0_$361 = fact_sheet_logs.$next_fact_sheet_hourly_report_time$.currentBinding(thread);
		    final SubLObject _prev_bind_2 = fact_sheet_logs.$hourly_fact_sheet_stats$.currentBinding(thread);
		    try {
			fact_sheet_logs.$next_fact_sheet_hourly_report_time$.bind(NIL, thread);
			fact_sheet_logs.$hourly_fact_sheet_stats$.bind(make_vector(TWO_INTEGER, ZERO_INTEGER), thread);
			fact_sheet_logs.reset_hourly_report_time(UNPROVIDED);
			fact_sheets.start_new_fact_sheet_log_file_watcher(UNPROVIDED);
			final SubLObject stream_$362 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream_$362) && current_process().eql(subl_promotions.initial_process())) || (stream_$362.isStream() && (NIL != output_stream_p(stream_$362)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$362);
			    format(stream_$362, fact_sheets.$str607$Starting_fact_sheet_update_sessio, new SubLObject[] { this_worker_number, number_of_workers, verbosities, target_statuses, domain_mt, language_mt });
			    force_output(stream_$362);
			}
			SubLObject fort_num = ZERO_INTEGER;
			final SubLObject message = fact_sheets.$str608$Iterating_over_all_FORTs_to_updat;
			final SubLObject total = forts.fort_count();
			SubLObject sofar = ZERO_INTEGER;
			final SubLObject _prev_bind_0_$362 = $last_percent_progress_index$.currentBinding(thread);
			final SubLObject _prev_bind_1_$364 = $last_percent_progress_prediction$.currentBinding(thread);
			final SubLObject _prev_bind_3 = $within_noting_percent_progress$.currentBinding(thread);
			final SubLObject _prev_bind_4 = $percent_progress_start_time$.currentBinding(thread);
			try {
			    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
			    $last_percent_progress_prediction$.bind(NIL, thread);
			    $within_noting_percent_progress$.bind(T, thread);
			    $percent_progress_start_time$.bind(get_universal_time(), thread);
			    try {
				noting_percent_progress_preamble(message);
				SubLObject rest;
				SubLObject idx;
				SubLObject table_var;
				SubLObject idx_$365;
				SubLObject vector_var;
				SubLObject backwardP_var;
				SubLObject length;
				SubLObject current;
				SubLObject datum;
				SubLObject start;
				SubLObject end;
				SubLObject delta;
				SubLObject end_var;
				SubLObject id;
				SubLObject fort;
				SubLObject cdolist_list_var2;
				SubLObject verbosity;
				SubLObject status;
				SubLObject _prev_bind_0_$363;
				SubLObject error_message;
				SubLObject stream_$363;
				SubLObject _prev_bind_0_$364;
				SubLObject stream_$364;
				SubLObject stream_$365;
				SubLObject idx_$366;
				SubLObject sparse;
				SubLObject id2;
				SubLObject end_id;
				SubLObject v_default;
				SubLObject fort2;
				SubLObject cdolist_list_var3;
				SubLObject verbosity2;
				SubLObject status2;
				SubLObject _prev_bind_0_$365;
				SubLObject error_message2;
				SubLObject stream_$366;
				SubLObject _prev_bind_0_$366;
				SubLObject stream_$367;
				SubLObject stream_$368;
				for (rest = NIL, rest = forts.do_forts_tables(); (NIL == stopP) && (NIL != rest); rest = rest.rest()) {
				    table_var = idx = rest.first();
				    if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
					idx_$365 = idx;
					if (NIL == id_index_dense_objects_empty_p(idx_$365, $SKIP)) {
					    vector_var = id_index_dense_objects(idx_$365);
					    backwardP_var = NIL;
					    length = length(vector_var);
					    datum = current = (NIL != backwardP_var) ? list(subtract(length, ONE_INTEGER), MINUS_ONE_INTEGER, MINUS_ONE_INTEGER) : list(ZERO_INTEGER, length, ONE_INTEGER);
					    start = NIL;
					    end = NIL;
					    delta = NIL;
					    destructuring_bind_must_consp(current, datum, fact_sheets.$list609);
					    start = current.first();
					    current = current.rest();
					    destructuring_bind_must_consp(current, datum, fact_sheets.$list609);
					    end = current.first();
					    current = current.rest();
					    destructuring_bind_must_consp(current, datum, fact_sheets.$list609);
					    delta = current.first();
					    current = current.rest();
					    if (NIL == current) {
						if (NIL == stopP) {
						    for (end_var = end, id = NIL, id = start; (NIL == stopP) && (NIL == subl_macros.do_numbers_endtest(id, delta, end_var)); id = add(id, delta)) {
							fort = aref(vector_var, id);
							if ((NIL == id_index_tombstone_p(fort)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
							    if (NIL != id_index_tombstone_p(fort)) {
								fort = $SKIP;
							    }
							    sofar = add(sofar, ONE_INTEGER);
							    note_percent_progress(sofar, total);
							    if (this_worker_number.eql(mod(fort_num, number_of_workers))) {
								cdolist_list_var2 = verbosities;
								verbosity = NIL;
								verbosity = cdolist_list_var2.first();
								while (NIL != cdolist_list_var2) {
								    if (NIL != fact_sheets.term_ok_for_fact_sheet_p(fort, eq(verbosity, $MINI))) {
									status = fact_sheets.fact_sheet_status(fort, verbosity, domain_mt, language_mt, UNPROVIDED);
									_prev_bind_0_$363 = fact_sheets.$fact_sheet_verbosity$.currentBinding(thread);
									try {
									    fact_sheets.$fact_sheet_verbosity$.bind(verbosity, thread);
									    error_message = NIL;
									    if (NIL != subl_promotions.memberP(status, target_statuses, UNPROVIDED, UNPROVIDED)) {
										stream_$363 = fact_sheet_logs.fact_sheet_log_stream();
										if (((T == stream_$363) && current_process().eql(subl_promotions.initial_process())) || (stream_$363.isStream() && (NIL != output_stream_p(stream_$363)))) {
										    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$363);
										    format(stream_$363, fact_sheets.$str610$Starting__S_update_on__S__Status_, new SubLObject[] { verbosity, fort, status });
										    force_output(stream_$363);
										}
										if (NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
										    try {
											thread.throwStack.push($catch_error_message_target$.getGlobalValue());
											_prev_bind_0_$364 = Errors.$error_handler$.currentBinding(thread);
											try {
											    Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
											    try {
												fact_sheets.update_fact_sheet_for_term_with_logging(fort, verbosity, domain_mt, language_mt);
											    } catch (final Throwable catch_var) {
												Errors.handleThrowable(catch_var, NIL);
											    }
											} finally {
											    Errors.$error_handler$.rebind(_prev_bind_0_$364, thread);
											}
										    } catch (final Throwable ccatch_env_var) {
											error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
										    } finally {
											thread.throwStack.pop();
										    }
										} else {
										    fact_sheets.update_fact_sheet_for_term_with_logging(fort, verbosity, domain_mt, language_mt);
										}
										if (error_message.isString()) {
										    stream_$364 = fact_sheet_logs.fact_sheet_log_stream();
										    if (((T == stream_$364) && current_process().eql(subl_promotions.initial_process())) || (stream_$364.isStream() && (NIL != output_stream_p(stream_$364)))) {
											fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream_$364);
											format(stream_$364, fact_sheets.$str611$Fact_Sheet_Updater_error_on__S___, fort, error_message);
											force_output(stream_$364);
										    }
										    error_message = NIL;
										    error_count = add(error_count, ONE_INTEGER);
										    if (error_count.numG(TEN_INTEGER)) {
											stream_$365 = fact_sheet_logs.fact_sheet_log_stream();
											if (((T == stream_$365) && current_process().eql(subl_promotions.initial_process())) || (stream_$365.isStream() && (NIL != output_stream_p(stream_$365)))) {
											    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream_$365);
											    format(stream_$365, fact_sheets.$str612$Halting_Fact_Sheet_Update_after__, error_count);
											    force_output(stream_$365);
											}
											stopP = T;
										    }
										}
									    }
									} finally {
									    fact_sheets.$fact_sheet_verbosity$.rebind(_prev_bind_0_$363, thread);
									}
								    }
								    cdolist_list_var2 = cdolist_list_var2.rest();
								    verbosity = cdolist_list_var2.first();
								}
								if (NIL != fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
								    stopP = T;
								}
							    }
							    fort_num = add(fort_num, ONE_INTEGER);
							}
						    }
						}
					    } else {
						cdestructuring_bind_error(datum, fact_sheets.$list609);
					    }
					}
					idx_$366 = idx;
					if ((NIL == id_index_sparse_objects_empty_p(idx_$366)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
					    sparse = id_index_sparse_objects(idx_$366);
					    id2 = id_index_sparse_id_threshold(idx_$366);
					    end_id = id_index_next_id(idx_$366);
					    v_default = (NIL != id_index_skip_tombstones_p($SKIP)) ? NIL : $SKIP;
					    while (id2.numL(end_id) && (NIL == stopP)) {
						fort2 = gethash_without_values(id2, sparse, v_default);
						if ((NIL == id_index_skip_tombstones_p($SKIP)) || (NIL == id_index_tombstone_p(fort2))) {
						    sofar = add(sofar, ONE_INTEGER);
						    note_percent_progress(sofar, total);
						    if (this_worker_number.eql(mod(fort_num, number_of_workers))) {
							cdolist_list_var3 = verbosities;
							verbosity2 = NIL;
							verbosity2 = cdolist_list_var3.first();
							while (NIL != cdolist_list_var3) {
							    if (NIL != fact_sheets.term_ok_for_fact_sheet_p(fort2, eq(verbosity2, $MINI))) {
								status2 = fact_sheets.fact_sheet_status(fort2, verbosity2, domain_mt, language_mt, UNPROVIDED);
								_prev_bind_0_$365 = fact_sheets.$fact_sheet_verbosity$.currentBinding(thread);
								try {
								    fact_sheets.$fact_sheet_verbosity$.bind(verbosity2, thread);
								    error_message2 = NIL;
								    if (NIL != subl_promotions.memberP(status2, target_statuses, UNPROVIDED, UNPROVIDED)) {
									stream_$366 = fact_sheet_logs.fact_sheet_log_stream();
									if (((T == stream_$366) && current_process().eql(subl_promotions.initial_process())) || (stream_$366.isStream() && (NIL != output_stream_p(stream_$366)))) {
									    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$366);
									    format(stream_$366, fact_sheets.$str610$Starting__S_update_on__S__Status_, new SubLObject[] { verbosity2, fort2, status2 });
									    force_output(stream_$366);
									}
									if (NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
									    try {
										thread.throwStack.push($catch_error_message_target$.getGlobalValue());
										_prev_bind_0_$366 = Errors.$error_handler$.currentBinding(thread);
										try {
										    Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
										    try {
											fact_sheets.update_fact_sheet_for_term_with_logging(fort2, verbosity2, domain_mt, language_mt);
										    } catch (final Throwable catch_var2) {
											Errors.handleThrowable(catch_var2, NIL);
										    }
										} finally {
										    Errors.$error_handler$.rebind(_prev_bind_0_$366, thread);
										}
									    } catch (final Throwable ccatch_env_var2) {
										error_message2 = Errors.handleThrowable(ccatch_env_var2, $catch_error_message_target$.getGlobalValue());
									    } finally {
										thread.throwStack.pop();
									    }
									} else {
									    fact_sheets.update_fact_sheet_for_term_with_logging(fort2, verbosity2, domain_mt, language_mt);
									}
									if (error_message2.isString()) {
									    stream_$367 = fact_sheet_logs.fact_sheet_log_stream();
									    if (((T == stream_$367) && current_process().eql(subl_promotions.initial_process())) || (stream_$367.isStream() && (NIL != output_stream_p(stream_$367)))) {
										fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream_$367);
										format(stream_$367, fact_sheets.$str611$Fact_Sheet_Updater_error_on__S___, fort2, error_message2);
										force_output(stream_$367);
									    }
									    error_message2 = NIL;
									    error_count = add(error_count, ONE_INTEGER);
									    if (error_count.numG(TEN_INTEGER)) {
										stream_$368 = fact_sheet_logs.fact_sheet_log_stream();
										if (((T == stream_$368) && current_process().eql(subl_promotions.initial_process())) || (stream_$368.isStream() && (NIL != output_stream_p(stream_$368)))) {
										    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream_$368);
										    format(stream_$368, fact_sheets.$str612$Halting_Fact_Sheet_Update_after__, error_count);
										    force_output(stream_$368);
										}
										stopP = T;
									    }
									}
								    }
								} finally {
								    fact_sheets.$fact_sheet_verbosity$.rebind(_prev_bind_0_$365, thread);
								}
							    }
							    cdolist_list_var3 = cdolist_list_var3.rest();
							    verbosity2 = cdolist_list_var3.first();
							}
							if (NIL != fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
							    stopP = T;
							}
						    }
						    fort_num = add(fort_num, ONE_INTEGER);
						}
						id2 = add(id2, ONE_INTEGER);
					    }
					}
				    }
				}
			    } finally {
				final SubLObject _prev_bind_0_$367 = $is_thread_performing_cleanupP$.currentBinding(thread);
				try {
				    $is_thread_performing_cleanupP$.bind(T, thread);
				    final SubLObject _values = getValuesAsVector();
				    noting_percent_progress_postamble();
				    restoreValuesFromVector(_values);
				} finally {
				    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$367, thread);
				}
			    }
			} finally {
			    $percent_progress_start_time$.rebind(_prev_bind_4, thread);
			    $within_noting_percent_progress$.rebind(_prev_bind_3, thread);
			    $last_percent_progress_prediction$.rebind(_prev_bind_1_$364, thread);
			    $last_percent_progress_index$.rebind(_prev_bind_0_$362, thread);
			}
			final SubLObject stream_$369 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream_$369) && current_process().eql(subl_promotions.initial_process())) || (stream_$369.isStream() && (NIL != output_stream_p(stream_$369)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$369);
			    format(stream_$369, fact_sheets.$str613$Finished_fact_sheet_update_sessio);
			    force_output(stream_$369);
			}
		    } finally {
			fact_sheet_logs.$hourly_fact_sheet_stats$.rebind(_prev_bind_2, thread);
			fact_sheet_logs.$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_$361, thread);
		    }
		    if (NIL != use_new_setupP) {
			final SubLObject stream_$370 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream_$370) && current_process().eql(subl_promotions.initial_process())) || (stream_$370.isStream() && (NIL != output_stream_p(stream_$370)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$370);
			    format(stream_$370, fact_sheets.$str548$Closing_log_);
			    force_output(stream_$370);
			}
			fact_sheet_logs.note_fact_sheet_log_file_closed(UNPROVIDED);
		    }
		} finally {
		    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$360, thread);
		}
	    } finally {
		final SubLObject _prev_bind_0_$368 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values2 = getValuesAsVector();
		    if (stream.isStream()) {
			close(stream, UNPROVIDED);
		    }
		    restoreValuesFromVector(_values2);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$368, thread);
		}
	    }
	} finally {
	    fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
	}
	return NIL;
    }

    /**
    * For all eligible FORTs, for each of VERBOSITIES, create a new fact sheet if the current
    * status is one of TARGET-STATUSES.
    * This function does *not* use a prioritizer. It just goes over all FORTs and stops
    * when it's done.
    *
    * @param NUMBER-OF-WORKERS,
    * 		THIS-WORKER-NUMBER; These allow multiple processes, possibly
    * 		running on different machines, to divide up the work. All such processes should have
    * 		identical system and KB levels.
    */

    /**
     *
     *
     * @param STOP-AFTER;
     * 		NIL or INTEGERP; Stop after updating this many fact sheets.
     */
    @LispMethod(comment = "@param STOP-AFTER;\r\n\t\tNIL or INTEGERP; Stop after updating this many fact sheets.")
    public static final SubLObject update_fact_sheets_alt(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject stop_after, SubLObject new_days) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (stop_after == UNPROVIDED) {
	    stop_after = NIL;
	}
	if (new_days == UNPROVIDED) {
	    new_days = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_default_new_days();
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject done_count = ZERO_INTEGER;
		SubLObject prioritizer = com.cyc.cycjava.cycl.fact_sheets.find_or_create_fact_sheet_update_term_prioritizer(verbosity, domain_mt, language_mt, new_days);
		SubLObject stopP = NIL;
		SubLObject error_count = ZERO_INTEGER;
		SubLObject error_message = NIL;
		SubLObject already_loggingP = stringp($fact_sheet_log_file$.getDynamicValue(thread));
		SubLObject directory = NIL;
		SubLObject filename = NIL;
		SubLObject use_new_setupP = NIL;
		if (NIL == already_loggingP) {
		    thread.resetMultipleValues();
		    {
			SubLObject directory_449 = com.cyc.cycjava.cycl.fact_sheets.open_new_unique_fact_sheet_log_file();
			SubLObject filename_450 = thread.secondMultipleValue();
			thread.resetMultipleValues();
			directory = directory_449;
			filename = filename_450;
		    }
		    use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
		}
		if (NIL != use_new_setupP) {
		    format(StreamsLow.$standard_output$.getDynamicValue(thread), $str_alt69$__Logging_Fact_Sheet_generation_t, filename);
		    force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
		}
		{
		    SubLObject _prev_bind_0 = $fact_sheet_log_file$.currentBinding(thread);
		    try {
			$fact_sheet_log_file$.bind(NIL != use_new_setupP ? ((SubLObject) (filename)) : $fact_sheet_log_file$.getDynamicValue(thread), thread);
			{
			    SubLObject stream = NIL;
			    try {
				{
				    SubLObject _prev_bind_0_451 = stream_macros.$stream_requires_locking$.currentBinding(thread);
				    try {
					stream_macros.$stream_requires_locking$.bind(NIL, thread);
					stream = compatibility.open_text($fact_sheet_log_file$.getDynamicValue(thread), $APPEND, NIL);
				    } finally {
					stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_451, thread);
				    }
				}
				if (!stream.isStream()) {
				    Errors.error($str_alt137$Unable_to_open__S, $fact_sheet_log_file$.getDynamicValue(thread));
				}
				{
				    SubLObject _prev_bind_0_452 = $fact_sheet_log_stream$.currentBinding(thread);
				    try {
					$fact_sheet_log_stream$.bind(stream, thread);
					{
					    SubLObject _prev_bind_0_453 = $next_fact_sheet_hourly_report_time$.currentBinding(thread);
					    SubLObject _prev_bind_1 = $hourly_fact_sheet_stats$.currentBinding(thread);
					    try {
						$next_fact_sheet_hourly_report_time$.bind(NIL, thread);
						$hourly_fact_sheet_stats$.bind(make_vector(TWO_INTEGER, ZERO_INTEGER), thread);
						com.cyc.cycjava.cycl.fact_sheets.reset_hourly_report_time(UNPROVIDED);
						com.cyc.cycjava.cycl.fact_sheets.start_new_fact_sheet_log_file_watcher(UNPROVIDED);
						{
						    SubLObject stream_454 = $fact_sheet_log_stream$.getDynamicValue(thread);
						    if (((T == stream_454) && (current_process() == subl_promotions.initial_process())) || (stream_454.isStream() && (NIL != output_stream_p(stream_454)))) {
							com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_454);
							format(stream_454, $str_alt749$Starting_fact_sheet_update_sessio, new SubLObject[] { verbosity, domain_mt, language_mt, stop_after });
							force_output(stream_454);
						    }
						}
						while (NIL == stopP) {
						    if (NIL != $catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
							try {
							    {
								SubLObject _prev_bind_0_455 = Errors.$error_handler$.currentBinding(thread);
								try {
								    Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
								    try {
									thread.resetMultipleValues();
									{
									    SubLObject done_count_456 = com.cyc.cycjava.cycl.fact_sheets.update_fact_sheets_internal(prioritizer, stop_after, done_count, UNPROVIDED);
									    SubLObject stopP_457 = thread.secondMultipleValue();
									    thread.resetMultipleValues();
									    done_count = done_count_456;
									    stopP = stopP_457;
									}
								    } catch (Throwable catch_var) {
									Errors.handleThrowable(catch_var, NIL);
								    }
								} finally {
								    Errors.$error_handler$.rebind(_prev_bind_0_455, thread);
								}
							    }
							} catch (Throwable ccatch_env_var) {
							    error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
							}
						    } else {
							thread.resetMultipleValues();
							{
							    SubLObject done_count_458 = com.cyc.cycjava.cycl.fact_sheets.update_fact_sheets_internal(prioritizer, stop_after, done_count, UNPROVIDED);
							    SubLObject stopP_459 = thread.secondMultipleValue();
							    thread.resetMultipleValues();
							    done_count = done_count_458;
							    stopP = stopP_459;
							}
						    }
						    if (error_message.isString()) {
							Errors.warn(cconcatenate($str_alt750$Fact_Sheet_Updater_error__, error_message));
							error_message = NIL;
							error_count = add(error_count, ONE_INTEGER);
							if (error_count.numG(TEN_INTEGER)) {
							    {
								SubLObject stream_460 = $fact_sheet_log_stream$.getDynamicValue(thread);
								if (((T == stream_460) && (current_process() == subl_promotions.initial_process())) || (stream_460.isStream() && (NIL != output_stream_p(stream_460)))) {
								    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream_460);
								    format(stream_460, $str_alt747$Halting_Fact_Sheet_Update_after__, error_count);
								    force_output(stream_460);
								}
							    }
							    stopP = T;
							}
						    }
						}
						{
						    SubLObject stream_461 = $fact_sheet_log_stream$.getDynamicValue(thread);
						    if (((T == stream_461) && (current_process() == subl_promotions.initial_process())) || (stream_461.isStream() && (NIL != output_stream_p(stream_461)))) {
							com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_461);
							format(stream_461, $str_alt748$Finished_fact_sheet_update_sessio);
							force_output(stream_461);
						    }
						}
					    } finally {
						$hourly_fact_sheet_stats$.rebind(_prev_bind_1, thread);
						$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_453, thread);
					    }
					}
					if (NIL != use_new_setupP) {
					    {
						SubLObject stream_462 = $fact_sheet_log_stream$.getDynamicValue(thread);
						if (((T == stream_462) && (current_process() == subl_promotions.initial_process())) || (stream_462.isStream() && (NIL != output_stream_p(stream_462)))) {
						    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_462);
						    format(stream_462, $str_alt685$Closing_log_);
						    force_output(stream_462);
						}
					    }
					    com.cyc.cycjava.cycl.fact_sheets.note_fact_sheet_log_file_closed(UNPROVIDED);
					}
				    } finally {
					$fact_sheet_log_stream$.rebind(_prev_bind_0_452, thread);
				    }
				}
			    } finally {
				{
				    SubLObject _prev_bind_0_463 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					if (stream.isStream()) {
					    close(stream, UNPROVIDED);
					}
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0_463, thread);
				    }
				}
			    }
			}
		    } finally {
			$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
		    }
		}
		com.cyc.cycjava.cycl.fact_sheets.stop_fsut_prioritizer(prioritizer);
	    }
	    return NIL;
	}
    }

    /**
     *
     *
     * @param STOP-AFTER;
     * 		NIL or INTEGERP; Stop after updating this many fact sheets.
     */
    @LispMethod(comment = "@param STOP-AFTER;\r\n\t\tNIL or INTEGERP; Stop after updating this many fact sheets.")
    public static SubLObject update_fact_sheets(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject stop_after, SubLObject new_days) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (stop_after == UNPROVIDED) {
	    stop_after = NIL;
	}
	if (new_days == UNPROVIDED) {
	    new_days = fact_sheets.fsut_prioritizer_default_new_days();
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject done_count = ZERO_INTEGER;
	final SubLObject prioritizer = fact_sheets.find_or_create_fact_sheet_update_term_prioritizer(verbosity, domain_mt, language_mt, new_days);
	SubLObject stopP = NIL;
	SubLObject error_count = ZERO_INTEGER;
	SubLObject error_message = NIL;
	final SubLObject already_loggingP = stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
	SubLObject directory = NIL;
	SubLObject filename = NIL;
	SubLObject use_new_setupP = NIL;
	if (NIL == already_loggingP) {
	    thread.resetMultipleValues();
	    final SubLObject directory_$381 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
	    final SubLObject filename_$382 = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    directory = directory_$381;
	    filename = filename_$382;
	    use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
	}
	if (NIL != use_new_setupP) {
	    format(StreamsLow.$standard_output$.getDynamicValue(thread), fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
	    force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
	}
	final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
	try {
	    fact_sheet_logs.$fact_sheet_log_file$.bind(NIL != use_new_setupP ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
	    SubLObject stream = NIL;
	    try {
		final SubLObject _prev_bind_0_$383 = stream_macros.$stream_requires_locking$.currentBinding(thread);
		try {
		    stream_macros.$stream_requires_locking$.bind(NIL, thread);
		    stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), $APPEND);
		} finally {
		    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$383, thread);
		}
		if (!stream.isStream()) {
		    Errors.error(fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
		}
		final SubLObject _prev_bind_0_$384 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
		try {
		    fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
		    final SubLObject _prev_bind_0_$385 = fact_sheet_logs.$next_fact_sheet_hourly_report_time$.currentBinding(thread);
		    final SubLObject _prev_bind_2 = fact_sheet_logs.$hourly_fact_sheet_stats$.currentBinding(thread);
		    try {
			fact_sheet_logs.$next_fact_sheet_hourly_report_time$.bind(NIL, thread);
			fact_sheet_logs.$hourly_fact_sheet_stats$.bind(make_vector(TWO_INTEGER, ZERO_INTEGER), thread);
			fact_sheet_logs.reset_hourly_report_time(UNPROVIDED);
			fact_sheets.start_new_fact_sheet_log_file_watcher(UNPROVIDED);
			final SubLObject stream_$386 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream_$386) && current_process().eql(subl_promotions.initial_process())) || (stream_$386.isStream() && (NIL != output_stream_p(stream_$386)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$386);
			    format(stream_$386, fact_sheets.$str614$Starting_fact_sheet_update_sessio, new SubLObject[] { verbosity, domain_mt, language_mt, stop_after });
			    force_output(stream_$386);
			}
			while (NIL == stopP) {
			    if (NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
				try {
				    thread.throwStack.push($catch_error_message_target$.getGlobalValue());
				    final SubLObject _prev_bind_0_$386 = Errors.$error_handler$.currentBinding(thread);
				    try {
					Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
					try {
					    thread.resetMultipleValues();
					    final SubLObject done_count_$388 = fact_sheets.update_fact_sheets_internal(prioritizer, stop_after, done_count, UNPROVIDED);
					    final SubLObject stopP_$389 = thread.secondMultipleValue();
					    thread.resetMultipleValues();
					    done_count = done_count_$388;
					    stopP = stopP_$389;
					} catch (final Throwable catch_var) {
					    Errors.handleThrowable(catch_var, NIL);
					}
				    } finally {
					Errors.$error_handler$.rebind(_prev_bind_0_$386, thread);
				    }
				} catch (final Throwable ccatch_env_var) {
				    error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
				} finally {
				    thread.throwStack.pop();
				}
			    } else {
				thread.resetMultipleValues();
				final SubLObject done_count_$389 = fact_sheets.update_fact_sheets_internal(prioritizer, stop_after, done_count, UNPROVIDED);
				final SubLObject stopP_$390 = thread.secondMultipleValue();
				thread.resetMultipleValues();
				done_count = done_count_$389;
				stopP = stopP_$390;
			    }
			    if (error_message.isString()) {
				Errors.warn(cconcatenate(fact_sheets.$str615$Fact_Sheet_Updater_error__, error_message));
				error_message = NIL;
				error_count = add(error_count, ONE_INTEGER);
				if (!error_count.numG(TEN_INTEGER)) {
				    continue;
				}
				final SubLObject stream_$387 = fact_sheet_logs.fact_sheet_log_stream();
				if (((T == stream_$387) && current_process().eql(subl_promotions.initial_process())) || (stream_$387.isStream() && (NIL != output_stream_p(stream_$387)))) {
				    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream_$387);
				    format(stream_$387, fact_sheets.$str612$Halting_Fact_Sheet_Update_after__, error_count);
				    force_output(stream_$387);
				}
				stopP = T;
			    }
			}
			final SubLObject stream_$388 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream_$388) && current_process().eql(subl_promotions.initial_process())) || (stream_$388.isStream() && (NIL != output_stream_p(stream_$388)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$388);
			    format(stream_$388, fact_sheets.$str613$Finished_fact_sheet_update_sessio);
			    force_output(stream_$388);
			}
		    } finally {
			fact_sheet_logs.$hourly_fact_sheet_stats$.rebind(_prev_bind_2, thread);
			fact_sheet_logs.$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_$385, thread);
		    }
		    if (NIL != use_new_setupP) {
			final SubLObject stream_$389 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream_$389) && current_process().eql(subl_promotions.initial_process())) || (stream_$389.isStream() && (NIL != output_stream_p(stream_$389)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$389);
			    format(stream_$389, fact_sheets.$str548$Closing_log_);
			    force_output(stream_$389);
			}
			fact_sheet_logs.note_fact_sheet_log_file_closed(UNPROVIDED);
		    }
		} finally {
		    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$384, thread);
		}
	    } finally {
		final SubLObject _prev_bind_0_$387 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values = getValuesAsVector();
		    if (stream.isStream()) {
			close(stream, UNPROVIDED);
		    }
		    restoreValuesFromVector(_values);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$387, thread);
		}
	    }
	} finally {
	    fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
	}
	fact_sheets.stop_fsut_prioritizer(prioritizer);
	return NIL;
    }

    /**
     * Sleep until the next occurrence of HOUR:MINUTE:SECOND.
     */
    @LispMethod(comment = "Sleep until the next occurrence of HOUR:MINUTE:SECOND.")
    public static final SubLObject sleep_until_time_within_next_day_alt(SubLObject second, SubLObject minute, SubLObject hour) {
	{
	    SubLObject time_now = get_universal_time();
	    SubLObject wake_time = numeric_date_utilities.get_universal_time_within_next_day(second, minute, hour);
	    SubLObject sleep_time = number_utilities.f_1X(subtract(wake_time, time_now));
	    sleep(sleep_time);
	    return NIL;
	}
    }

    @LispMethod(comment = "Sleep until the next occurrence of HOUR:MINUTE:SECOND.")
    public static SubLObject sleep_until_time_within_next_day(final SubLObject second, final SubLObject minute, final SubLObject hour) {
	final SubLObject time_now = get_universal_time();
	final SubLObject wake_time = numeric_date_utilities.get_universal_time_within_next_day(second, minute, hour);
	final SubLObject sleep_time = number_utilities.f_1X(subtract(wake_time, time_now));
	sleep(sleep_time);
	return NIL;
    }

    /**
    * Sleep until the next occurrence of HOUR:MINUTE:SECOND.
    */

    public static final SubLObject time_of_day_has_arrivedP_alt(SubLObject second, SubLObject minute, SubLObject hour) {
	return time_has_arrivedP(numeric_date_utilities.get_universal_time_today(second, minute, hour));
    }

    public static SubLObject time_of_day_has_arrivedP(final SubLObject second, final SubLObject minute, final SubLObject hour) {
	return time_has_arrivedP(numeric_date_utilities.get_universal_time_today(second, minute, hour));
    }

    /**
     *
     *
     * @return BOOLEANP; Does it appear that this image isn't working on anything right now?
    (except for determining whether it appears to be idle or working on any thread in EXCEPT-FOR)
     */
    @LispMethod(comment = "@return BOOLEANP; Does it appear that this image isn\'t working on anything right now?\r\n(except for determining whether it appears to be idle or working on any thread in EXCEPT-FOR)")
    public static final SubLObject image_seems_idleP_alt(SubLObject reverify_times, SubLObject except_for) {
	if (reverify_times == UNPROVIDED) {
	    reverify_times = ZERO_INTEGER;
	}
	if (except_for == UNPROVIDED) {
	    except_for = NIL;
	}
	{
	    SubLObject busyP = NIL;
	    while ((NIL == busyP) && (NIL != subl_promotions.non_negative_integer_p(reverify_times))) {
		busyP = com.cyc.cycjava.cycl.fact_sheets.image_find_busy_thread(except_for);
		reverify_times = subtract(reverify_times, ONE_INTEGER);
	    }
	    return makeBoolean(NIL == busyP);
	}
    }

    /**
     *
     *
     * @return BOOLEANP; Does it appear that this image isn't working on anything right now?
    (except for determining whether it appears to be idle or working on any thread in EXCEPT-FOR)
     */
    @LispMethod(comment = "@return BOOLEANP; Does it appear that this image isn\'t working on anything right now?\r\n(except for determining whether it appears to be idle or working on any thread in EXCEPT-FOR)")
    public static SubLObject image_seems_idleP(SubLObject reverify_times, SubLObject except_for) {
	if (reverify_times == UNPROVIDED) {
	    reverify_times = ZERO_INTEGER;
	}
	if (except_for == UNPROVIDED) {
	    except_for = NIL;
	}
	SubLObject busyP;
	for (busyP = NIL; (NIL == busyP) && (NIL != subl_promotions.non_negative_integer_p(reverify_times)); busyP = fact_sheets.image_find_busy_thread(except_for), reverify_times = subtract(reverify_times, ONE_INTEGER)) {
	}
	return makeBoolean(NIL == busyP);
    }

    public static final SubLObject image_find_busy_thread_alt(SubLObject except_for) {
	if (except_for == UNPROVIDED) {
	    except_for = NIL;
	}
	{
	    SubLObject busy_thread = NIL;
	    if (NIL == busy_thread) {
		{
		    SubLObject csome_list_var = all_processes();
		    SubLObject thread = NIL;
		    for (thread = csome_list_var.first(); !((NIL != busy_thread) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), thread = csome_list_var.first()) {
			if (!((((thread == current_process()) || (NIL != member(thread, except_for, UNPROVIDED, UNPROVIDED))) || $$$Background.equalp(process_name(thread))) || (!$$$Run.equalp(process_whostate(thread))))) {
			    busy_thread = thread;
			}
		    }
		}
	    }
	    return busy_thread;
	}
    }

    public static SubLObject image_find_busy_thread(SubLObject except_for) {
	if (except_for == UNPROVIDED) {
	    except_for = NIL;
	}
	SubLObject busy_thread = NIL;
	if (NIL == busy_thread) {
	    SubLObject csome_list_var = all_processes();
	    SubLObject thread = NIL;
	    thread = csome_list_var.first();
	    while ((NIL == busy_thread) && (NIL != csome_list_var)) {
		if ((((!thread.eql(current_process())) && (NIL == member(thread, except_for, UNPROVIDED, UNPROVIDED))) && (!fact_sheets.$$$Background.equalp(process_name(thread)))) && fact_sheets.$$$Run.equalp(process_whostate(thread))) {
		    busy_thread = thread;
		}
		csome_list_var = csome_list_var.rest();
		thread = csome_list_var.first();
	    }
	}
	return busy_thread;
    }

    public static final SubLObject maybe_start_new_fact_sheet_updater_default_screensaver_for_user_alt(SubLObject user_string) {
	if (user_string == UNPROVIDED) {
	    user_string = Environment.get_user_name(UNPROVIDED);
	}
	if (((NIL != kb_loaded()) && (NIL != list_utilities.alist_has_keyP($fact_sheet_screensaver_users$.getGlobalValue(), user_string, symbol_function(EQUALP)))) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_fbc_okP())) {
	    return com.cyc.cycjava.cycl.fact_sheets.start_new_fact_sheet_updater_default_screensaver(user_string);
	}
	return NIL;
    }

    public static SubLObject maybe_start_new_fact_sheet_updater_default_screensaver_for_user(SubLObject user_string) {
	if (user_string == UNPROVIDED) {
	    user_string = Environment.get_user_name(UNPROVIDED);
	}
	if ((NIL != kb_loaded()) && (NIL != list_utilities.alist_has_keyP(fact_sheets.$fact_sheet_screensaver_users$.getGlobalValue(), user_string, symbol_function(EQUALP)))) {
	    return fact_sheets.start_new_fact_sheet_updater_default_screensaver(user_string);
	}
	return NIL;
    }

    public static final SubLObject start_new_fact_sheet_updater_default_screensaver_alt(SubLObject user_string) {
	if (user_string == UNPROVIDED) {
	    user_string = NIL;
	}
	return NIL != user_string ? ((SubLObject) (com.cyc.cycjava.cycl.fact_sheets.start_new_fact_sheet_updater_screensaver(com.cyc.cycjava.cycl.fact_sheets.default_fact_sheet_updater_screensaver_verbosity_for_user(user_string), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED)))
		: com.cyc.cycjava.cycl.fact_sheets.start_new_fact_sheet_updater_screensaver(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject start_new_fact_sheet_updater_default_screensaver(SubLObject user_string) {
	if (user_string == UNPROVIDED) {
	    user_string = NIL;
	}
	return NIL != user_string ? fact_sheets.start_new_fact_sheet_updater_screensaver(fact_sheets.default_fact_sheet_updater_screensaver_verbosity_for_user(user_string), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED)
		: fact_sheets.start_new_fact_sheet_updater_screensaver(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject default_fact_sheet_updater_screensaver_verbosity_for_user_alt(SubLObject user_string) {
	return list_utilities.alist_lookup($fact_sheet_screensaver_users$.getGlobalValue(), user_string, symbol_function(EQUALP), $NORMAL);
    }

    public static SubLObject default_fact_sheet_updater_screensaver_verbosity_for_user(final SubLObject user_string) {
	return list_utilities.alist_lookup(fact_sheets.$fact_sheet_screensaver_users$.getGlobalValue(), user_string, symbol_function(EQUALP), $NORMAL);
    }

    public static final SubLObject register_fact_sheet_screensaver_alt(SubLObject screensaver) {
	$fact_sheet_screensavers$.setGlobalValue(cons(screensaver, $fact_sheet_screensavers$.getGlobalValue()));
	return $fact_sheet_screensavers$.getGlobalValue();
    }

    public static SubLObject register_fact_sheet_screensaver(final SubLObject screensaver) {
	fact_sheets.$fact_sheet_screensavers$.setGlobalValue(cons(screensaver, fact_sheets.$fact_sheet_screensavers$.getGlobalValue()));
	return fact_sheets.$fact_sheet_screensavers$.getGlobalValue();
    }

    public static final SubLObject deregister_fact_sheet_screensaver_alt(SubLObject screensaver) {
	$fact_sheet_screensavers$.setGlobalValue(delete(screensaver, $fact_sheet_screensavers$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
	return $fact_sheet_screensavers$.getGlobalValue();
    }

    public static SubLObject deregister_fact_sheet_screensaver(final SubLObject screensaver) {
	fact_sheets.$fact_sheet_screensavers$.setGlobalValue(delete(screensaver, fact_sheets.$fact_sheet_screensavers$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
	return fact_sheets.$fact_sheet_screensavers$.getGlobalValue();
    }

    public static final SubLObject start_new_fact_sheet_updater_screensaver_alt(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject start_hour, SubLObject end_hour) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (start_hour == UNPROVIDED) {
	    start_hour = ONE_INTEGER;
	}
	if (end_hour == UNPROVIDED) {
	    end_hour = FIVE_INTEGER;
	}
	com.cyc.cycjava.cycl.fact_sheets.allow_fact_sheet_screensavers();
	{
	    SubLObject screensaver = process_utilities.make_cyc_server_process_with_args($$$Fact_Sheet_Screensaver, UPDATE_FACT_SHEET_SCREENSAVER, list(verbosity, domain_mt, language_mt, start_hour, end_hour));
	    com.cyc.cycjava.cycl.fact_sheets.register_fact_sheet_screensaver(screensaver);
	    return screensaver;
	}
    }

    public static SubLObject start_new_fact_sheet_updater_screensaver(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject start_hour, SubLObject end_hour) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (start_hour == UNPROVIDED) {
	    start_hour = ONE_INTEGER;
	}
	if (end_hour == UNPROVIDED) {
	    end_hour = FIVE_INTEGER;
	}
	fact_sheets.allow_fact_sheet_screensavers();
	final SubLObject screensaver = process_utilities.make_cyc_server_process_with_args(fact_sheets.$$$Fact_Sheet_Screensaver, fact_sheets.UPDATE_FACT_SHEET_SCREENSAVER, list(verbosity, domain_mt, language_mt, start_hour, end_hour));
	fact_sheets.register_fact_sheet_screensaver(screensaver);
	return screensaver;
    }

    /**
     * Stop any Fact Sheet Screensavers for the day, once they have finished updating their current term.
     * They/it will start again the next day at the regular time, or when
     * restarted via RESTART-ALL-FACT-SHEET-SCREENSAVERS.
     */
    @LispMethod(comment = "Stop any Fact Sheet Screensavers for the day, once they have finished updating their current term.\r\nThey/it will start again the next day at the regular time, or when\r\nrestarted via RESTART-ALL-FACT-SHEET-SCREENSAVERS.\nStop any Fact Sheet Screensavers for the day, once they have finished updating their current term.\nThey/it will start again the next day at the regular time, or when\nrestarted via RESTART-ALL-FACT-SHEET-SCREENSAVERS.")
    public static final SubLObject stop_all_fact_sheet_screensavers_alt() {
	$fact_sheet_screensavers_should_sleepP$.setGlobalValue(T);
	return $fact_sheet_screensavers_should_sleepP$.getGlobalValue();
    }

    @LispMethod(comment = "Stop any Fact Sheet Screensavers for the day, once they have finished updating their current term.\r\nThey/it will start again the next day at the regular time, or when\r\nrestarted via RESTART-ALL-FACT-SHEET-SCREENSAVERS.\nStop any Fact Sheet Screensavers for the day, once they have finished updating their current term.\nThey/it will start again the next day at the regular time, or when\nrestarted via RESTART-ALL-FACT-SHEET-SCREENSAVERS.")
    public static SubLObject stop_all_fact_sheet_screensavers() {
	fact_sheets.$fact_sheet_screensavers_should_sleepP$.setGlobalValue(T);
	return fact_sheets.$fact_sheet_screensavers_should_sleepP$.getGlobalValue();
    }

    /**
    * Stop any Fact Sheet Screensavers for the day, once they have finished updating their current term.
    * They/it will start again the next day at the regular time, or when
    * restarted via RESTART-ALL-FACT-SHEET-SCREENSAVERS.
    */

    public static final SubLObject restart_all_fact_sheet_screensavers_alt() {
	$fact_sheet_screensavers_should_sleepP$.setGlobalValue(NIL);
	return $fact_sheet_screensavers_should_sleepP$.getGlobalValue();
    }

    public static SubLObject restart_all_fact_sheet_screensavers() {
	fact_sheets.$fact_sheet_screensavers_should_sleepP$.setGlobalValue(NIL);
	return fact_sheets.$fact_sheet_screensavers_should_sleepP$.getGlobalValue();
    }

    public static final SubLObject allow_fact_sheet_screensavers_alt() {
	$fact_sheet_screensavers_should_dieP$.setGlobalValue(NIL);
	return $fact_sheet_screensavers_should_dieP$.getGlobalValue();
    }

    public static SubLObject allow_fact_sheet_screensavers() {
	fact_sheets.$fact_sheet_screensavers_should_dieP$.setGlobalValue(NIL);
	return fact_sheets.$fact_sheet_screensavers_should_dieP$.getGlobalValue();
    }

    /**
     * Stop any Fact Sheet Screensavers for good.
     *
     * @param NOW?
     * 		- If non-NIL, interrupt current updates and stop immediately.
     * 		If NIL, wait until current updates are finished.
     */
    @LispMethod(comment = "Stop any Fact Sheet Screensavers for good.\r\n\r\n@param NOW?\r\n\t\t- If non-NIL, interrupt current updates and stop immediately.\r\n\t\tIf NIL, wait until current updates are finished.")
    public static final SubLObject kill_all_fact_sheet_screensavers_alt(SubLObject nowP) {
	if (nowP == UNPROVIDED) {
	    nowP = NIL;
	}
	if (NIL != nowP) {
	    while (NIL != $fact_sheet_screensavers$.getGlobalValue()) {
		{
		    SubLObject screensaver = $fact_sheet_screensavers$.getGlobalValue().first();
		    if (NIL != valid_process_p(screensaver)) {
			kill_process(screensaver);
		    }
		    $fact_sheet_screensavers$.setGlobalValue($fact_sheet_screensavers$.getGlobalValue().rest());
		}
	    }
	} else {
	    $fact_sheet_screensavers_should_dieP$.setGlobalValue(T);
	}
	return NIL;
    }

    @LispMethod(comment = "Stop any Fact Sheet Screensavers for good.\r\n\r\n@param NOW?\r\n\t\t- If non-NIL, interrupt current updates and stop immediately.\r\n\t\tIf NIL, wait until current updates are finished.")
    public static SubLObject kill_all_fact_sheet_screensavers(SubLObject nowP) {
	if (nowP == UNPROVIDED) {
	    nowP = NIL;
	}
	if (NIL != nowP) {
	    while (NIL != fact_sheets.$fact_sheet_screensavers$.getGlobalValue()) {
		final SubLObject screensaver = fact_sheets.$fact_sheet_screensavers$.getGlobalValue().first();
		if (NIL != valid_process_p(screensaver)) {
		    kill_process(screensaver);
		}
		fact_sheets.$fact_sheet_screensavers$.setGlobalValue(fact_sheets.$fact_sheet_screensavers$.getGlobalValue().rest());
	    }
	} else {
	    fact_sheets.$fact_sheet_screensavers_should_dieP$.setGlobalValue(T);
	}
	return NIL;
    }

    /**
    * Stop any Fact Sheet Screensavers for good.
    *
    * @param NOW?
    * 		- If non-NIL, interrupt current updates and stop immediately.
    * 		If NIL, wait until current updates are finished.
    */

    public static final SubLObject update_fact_sheet_screensaver_alt(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject start_hour, SubLObject end_hour) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject already_loggingP = stringp($fact_sheet_log_file$.getDynamicValue(thread));
		SubLObject directory = NIL;
		SubLObject filename = NIL;
		SubLObject use_new_setupP = NIL;
		if (NIL == already_loggingP) {
		    thread.resetMultipleValues();
		    {
			SubLObject directory_464 = com.cyc.cycjava.cycl.fact_sheets.open_new_unique_fact_sheet_log_file();
			SubLObject filename_465 = thread.secondMultipleValue();
			thread.resetMultipleValues();
			directory = directory_464;
			filename = filename_465;
		    }
		    use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
		}
		if (NIL != use_new_setupP) {
		    format(StreamsLow.$standard_output$.getDynamicValue(thread), $str_alt69$__Logging_Fact_Sheet_generation_t, filename);
		    force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
		}
		{
		    SubLObject _prev_bind_0 = $fact_sheet_log_file$.currentBinding(thread);
		    try {
			$fact_sheet_log_file$.bind(NIL != use_new_setupP ? ((SubLObject) (filename)) : $fact_sheet_log_file$.getDynamicValue(thread), thread);
			{
			    SubLObject stream = NIL;
			    try {
				{
				    SubLObject _prev_bind_0_466 = stream_macros.$stream_requires_locking$.currentBinding(thread);
				    try {
					stream_macros.$stream_requires_locking$.bind(NIL, thread);
					stream = compatibility.open_text($fact_sheet_log_file$.getDynamicValue(thread), $APPEND, NIL);
				    } finally {
					stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_466, thread);
				    }
				}
				if (!stream.isStream()) {
				    Errors.error($str_alt137$Unable_to_open__S, $fact_sheet_log_file$.getDynamicValue(thread));
				}
				{
				    SubLObject _prev_bind_0_467 = $fact_sheet_log_stream$.currentBinding(thread);
				    try {
					$fact_sheet_log_stream$.bind(stream, thread);
					{
					    SubLObject _prev_bind_0_468 = $next_fact_sheet_hourly_report_time$.currentBinding(thread);
					    SubLObject _prev_bind_1 = $hourly_fact_sheet_stats$.currentBinding(thread);
					    try {
						$next_fact_sheet_hourly_report_time$.bind(NIL, thread);
						$hourly_fact_sheet_stats$.bind(make_vector(TWO_INTEGER, ZERO_INTEGER), thread);
						com.cyc.cycjava.cycl.fact_sheets.reset_hourly_report_time(UNPROVIDED);
						{
						    SubLObject stream_469 = $fact_sheet_log_stream$.getDynamicValue(thread);
						    if (((T == stream_469) && (current_process() == subl_promotions.initial_process())) || (stream_469.isStream() && (NIL != output_stream_p(stream_469)))) {
							com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_469);
							format(stream_469, $str_alt757$Starting_fact_sheet_update_screen,
								new SubLObject[] { verbosity, domain_mt, language_mt, start_hour, NIL != end_hour ? ((SubLObject) (cconcatenate(format_nil.format_nil_s_no_copy(end_hour), $str_alt758$_00))) : $$$midnight });
							force_output(stream_469);
						    }
						}
						while (NIL == $fact_sheet_screensavers_should_dieP$.getGlobalValue()) {
						    {
							SubLObject start_has_arrivedP = com.cyc.cycjava.cycl.fact_sheets.time_of_day_has_arrivedP(ZERO_INTEGER, ZERO_INTEGER, start_hour);
							SubLObject end_has_arrivedP = makeBoolean((NIL != end_hour) && (NIL != com.cyc.cycjava.cycl.fact_sheets.time_of_day_has_arrivedP(ZERO_INTEGER, ZERO_INTEGER, end_hour)));
							SubLObject work_past_midnightP = makeBoolean((NIL != end_hour) && end_hour.numL(start_hour));
							SubLObject prioritizer = com.cyc.cycjava.cycl.fact_sheets.find_fsut_prioritizer(verbosity, domain_mt, language_mt, UNPROVIDED);
							SubLObject prioritizer_thread = (NIL != prioritizer) ? ((SubLObject) (com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_thread(prioritizer))) : NIL;
							if ((NIL == start_has_arrivedP) && ((NIL == work_past_midnightP) || (NIL != end_has_arrivedP))) {
							    {
								SubLObject stream_470 = $fact_sheet_log_stream$.getDynamicValue(thread);
								if (((T == stream_470) && (current_process() == subl_promotions.initial_process())) || (stream_470.isStream() && (NIL != output_stream_p(stream_470)))) {
								    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_470);
								    format(stream_470, $str_alt760$Start_time_hasn_t_arrived__Sleepi, start_hour);
								    force_output(stream_470);
								}
							    }
							    com.cyc.cycjava.cycl.fact_sheets.sleep_until_time_within_next_day(ZERO_INTEGER, ZERO_INTEGER, start_hour);
							    com.cyc.cycjava.cycl.fact_sheets.reset_hourly_report_time(UNPROVIDED);
							} else {
							    if ((NIL != end_has_arrivedP) && ((NIL == work_past_midnightP) || (NIL == start_has_arrivedP))) {
								com.cyc.cycjava.cycl.fact_sheets.log_fact_sheet_hourly_report();
								{
								    SubLObject stream_471 = $fact_sheet_log_stream$.getDynamicValue(thread);
								    if (((T == stream_471) && (current_process() == subl_promotions.initial_process())) || (stream_471.isStream() && (NIL != output_stream_p(stream_471)))) {
									com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_471);
									format(stream_471, $str_alt761$End_time_of__S_00_has_passed__Sle, end_hour, start_hour);
									force_output(stream_471);
								    }
								}
								com.cyc.cycjava.cycl.fact_sheets.stop_all_fsut_prioritizers();
								com.cyc.cycjava.cycl.fact_sheets.sleep_until_time_within_next_day(ZERO_INTEGER, ZERO_INTEGER, start_hour);
								$fact_sheet_screensavers_should_sleepP$.setGlobalValue(NIL);
								com.cyc.cycjava.cycl.fact_sheets.reset_hourly_report_time(UNPROVIDED);
							    } else {
								if (NIL != $fact_sheet_screensavers_should_sleepP$.getGlobalValue()) {
								    {
									SubLObject seconds = $int$60;
									SubLObject stream_472 = $fact_sheet_log_stream$.getDynamicValue(thread);
									if (((T == stream_472) && (current_process() == subl_promotions.initial_process())) || (stream_472.isStream() && (NIL != output_stream_p(stream_472)))) {
									    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_472);
									    format(stream_472, $str_alt762$Been_told_to_sleep__Sleeping_for_, seconds);
									    force_output(stream_472);
									}
									com.cyc.cycjava.cycl.fact_sheets.stop_all_fsut_prioritizers();
									sleep(seconds);
								    }
								    com.cyc.cycjava.cycl.fact_sheets.reset_hourly_report_time(UNPROVIDED);
								} else {
								    if (NIL == com.cyc.cycjava.cycl.fact_sheets.image_seems_idleP(EIGHT_INTEGER, NIL != prioritizer_thread ? ((SubLObject) (list(prioritizer_thread))) : NIL)) {
									{
									    SubLObject seconds = $int$60;
									    SubLObject stream_473 = $fact_sheet_log_stream$.getDynamicValue(thread);
									    if (((T == stream_473) && (current_process() == subl_promotions.initial_process())) || (stream_473.isStream() && (NIL != output_stream_p(stream_473)))) {
										com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_473);
										format(stream_473, $str_alt763$Image_appears_to_be_busy__Sleepin, seconds);
										force_output(stream_473);
									    }
									    if (NIL != prioritizer) {
										com.cyc.cycjava.cycl.fact_sheets.stop_fsut_prioritizer(prioritizer);
									    }
									    sleep(seconds);
									}
								    } else {
									{
									    SubLObject prioritizer_474 = com.cyc.cycjava.cycl.fact_sheets.find_or_create_fact_sheet_update_term_prioritizer(verbosity, domain_mt, language_mt, UNPROVIDED);
									    com.cyc.cycjava.cycl.fact_sheets.renice_fsut_prioritizer(prioritizer_474, UNPROVIDED);
									    com.cyc.cycjava.cycl.fact_sheets.update_fact_sheets_internal(prioritizer_474, ONE_INTEGER, ZERO_INTEGER, end_hour);
									}
								    }
								}
							    }
							}
						    }
						}
						{
						    SubLObject stream_475 = $fact_sheet_log_stream$.getDynamicValue(thread);
						    if (((T == stream_475) && (current_process() == subl_promotions.initial_process())) || (stream_475.isStream() && (NIL != output_stream_p(stream_475)))) {
							com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_475);
							format(stream_475, $str_alt764$Fact_Sheet_Screensavers_have_been);
							force_output(stream_475);
						    }
						}
						com.cyc.cycjava.cycl.fact_sheets.log_fact_sheet_hourly_report();
						com.cyc.cycjava.cycl.fact_sheets.deregister_fact_sheet_screensaver(current_process());
					    } finally {
						$hourly_fact_sheet_stats$.rebind(_prev_bind_1, thread);
						$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_468, thread);
					    }
					}
					if (NIL != use_new_setupP) {
					    {
						SubLObject stream_476 = $fact_sheet_log_stream$.getDynamicValue(thread);
						if (((T == stream_476) && (current_process() == subl_promotions.initial_process())) || (stream_476.isStream() && (NIL != output_stream_p(stream_476)))) {
						    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_476);
						    format(stream_476, $str_alt685$Closing_log_);
						    force_output(stream_476);
						}
					    }
					    com.cyc.cycjava.cycl.fact_sheets.note_fact_sheet_log_file_closed(UNPROVIDED);
					}
				    } finally {
					$fact_sheet_log_stream$.rebind(_prev_bind_0_467, thread);
				    }
				}
			    } finally {
				{
				    SubLObject _prev_bind_0_477 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					if (stream.isStream()) {
					    close(stream, UNPROVIDED);
					}
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0_477, thread);
				    }
				}
			    }
			}
		    } finally {
			$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
		    }
		}
	    }
	    return NIL;
	}
    }

    public static SubLObject update_fact_sheet_screensaver(final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject start_hour, final SubLObject end_hour) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject already_loggingP = stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
	SubLObject directory = NIL;
	SubLObject filename = NIL;
	SubLObject use_new_setupP = NIL;
	if (NIL == already_loggingP) {
	    thread.resetMultipleValues();
	    final SubLObject directory_$396 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
	    final SubLObject filename_$397 = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    directory = directory_$396;
	    filename = filename_$397;
	    use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
	}
	if (NIL != use_new_setupP) {
	    format(StreamsLow.$standard_output$.getDynamicValue(thread), fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
	    force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
	}
	final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
	try {
	    fact_sheet_logs.$fact_sheet_log_file$.bind(NIL != use_new_setupP ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
	    SubLObject stream = NIL;
	    try {
		final SubLObject _prev_bind_0_$398 = stream_macros.$stream_requires_locking$.currentBinding(thread);
		try {
		    stream_macros.$stream_requires_locking$.bind(NIL, thread);
		    stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), $APPEND);
		} finally {
		    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$398, thread);
		}
		if (!stream.isStream()) {
		    Errors.error(fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
		}
		final SubLObject _prev_bind_0_$399 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
		try {
		    fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
		    final SubLObject _prev_bind_0_$400 = fact_sheet_logs.$next_fact_sheet_hourly_report_time$.currentBinding(thread);
		    final SubLObject _prev_bind_2 = fact_sheet_logs.$hourly_fact_sheet_stats$.currentBinding(thread);
		    try {
			fact_sheet_logs.$next_fact_sheet_hourly_report_time$.bind(NIL, thread);
			fact_sheet_logs.$hourly_fact_sheet_stats$.bind(make_vector(TWO_INTEGER, ZERO_INTEGER), thread);
			fact_sheet_logs.reset_hourly_report_time(UNPROVIDED);
			final SubLObject stream_$401 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream_$401) && current_process().eql(subl_promotions.initial_process())) || (stream_$401.isStream() && (NIL != output_stream_p(stream_$401)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$401);
			    format(stream_$401, fact_sheets.$str622$Starting_fact_sheet_update_screen, new SubLObject[] { verbosity, domain_mt, language_mt, start_hour, NIL != end_hour ? cconcatenate(format_nil.format_nil_s_no_copy(end_hour), fact_sheets.$str623$_00) : fact_sheets.$$$midnight });
			    force_output(stream_$401);
			}
			while (NIL == fact_sheets.$fact_sheet_screensavers_should_dieP$.getGlobalValue()) {
			    final SubLObject start_has_arrivedP = fact_sheets.time_of_day_has_arrivedP(ZERO_INTEGER, ZERO_INTEGER, start_hour);
			    final SubLObject end_has_arrivedP = makeBoolean((NIL != end_hour) && (NIL != fact_sheets.time_of_day_has_arrivedP(ZERO_INTEGER, ZERO_INTEGER, end_hour)));
			    final SubLObject work_past_midnightP = makeBoolean((NIL != end_hour) && end_hour.numL(start_hour));
			    final SubLObject prioritizer = fact_sheets.find_fsut_prioritizer(verbosity, domain_mt, language_mt, UNPROVIDED);
			    final SubLObject prioritizer_thread = (NIL != prioritizer) ? fact_sheets.fsut_prioritizer_thread(prioritizer) : NIL;
			    if ((NIL == start_has_arrivedP) && ((NIL == work_past_midnightP) || (NIL != end_has_arrivedP))) {
				final SubLObject stream_$402 = fact_sheet_logs.fact_sheet_log_stream();
				if (((T == stream_$402) && current_process().eql(subl_promotions.initial_process())) || (stream_$402.isStream() && (NIL != output_stream_p(stream_$402)))) {
				    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$402);
				    format(stream_$402, fact_sheets.$str625$Start_time_hasn_t_arrived__Sleepi, start_hour);
				    force_output(stream_$402);
				}
				fact_sheets.sleep_until_time_within_next_day(ZERO_INTEGER, ZERO_INTEGER, start_hour);
				fact_sheet_logs.reset_hourly_report_time(UNPROVIDED);
			    } else if ((NIL != end_has_arrivedP) && ((NIL == work_past_midnightP) || (NIL == start_has_arrivedP))) {
				fact_sheet_logs.log_fact_sheet_hourly_report();
				final SubLObject stream_$403 = fact_sheet_logs.fact_sheet_log_stream();
				if (((T == stream_$403) && current_process().eql(subl_promotions.initial_process())) || (stream_$403.isStream() && (NIL != output_stream_p(stream_$403)))) {
				    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$403);
				    format(stream_$403, fact_sheets.$str626$End_time_of__S_00_has_passed__Sle, end_hour, start_hour);
				    force_output(stream_$403);
				}
				fact_sheets.stop_all_fsut_prioritizers();
				fact_sheets.sleep_until_time_within_next_day(ZERO_INTEGER, ZERO_INTEGER, start_hour);
				fact_sheets.$fact_sheet_screensavers_should_sleepP$.setGlobalValue(NIL);
				fact_sheet_logs.reset_hourly_report_time(UNPROVIDED);
			    } else if (NIL != fact_sheets.$fact_sheet_screensavers_should_sleepP$.getGlobalValue()) {
				final SubLObject seconds = fact_sheets.$int$60;
				final SubLObject stream_$404 = fact_sheet_logs.fact_sheet_log_stream();
				if (((T == stream_$404) && current_process().eql(subl_promotions.initial_process())) || (stream_$404.isStream() && (NIL != output_stream_p(stream_$404)))) {
				    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$404);
				    format(stream_$404, fact_sheets.$str627$Been_told_to_sleep__Sleeping_for_, seconds);
				    force_output(stream_$404);
				}
				fact_sheets.stop_all_fsut_prioritizers();
				sleep(seconds);
				fact_sheet_logs.reset_hourly_report_time(UNPROVIDED);
			    } else if (NIL == fact_sheets.image_seems_idleP(EIGHT_INTEGER, NIL != prioritizer_thread ? list(prioritizer_thread) : NIL)) {
				final SubLObject seconds = fact_sheets.$int$60;
				final SubLObject stream_$405 = fact_sheet_logs.fact_sheet_log_stream();
				if (((T == stream_$405) && current_process().eql(subl_promotions.initial_process())) || (stream_$405.isStream() && (NIL != output_stream_p(stream_$405)))) {
				    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$405);
				    format(stream_$405, fact_sheets.$str628$Image_appears_to_be_busy__Sleepin, seconds);
				    force_output(stream_$405);
				}
				if (NIL != prioritizer) {
				    fact_sheets.stop_fsut_prioritizer(prioritizer);
				}
				sleep(seconds);
			    } else {
				final SubLObject prioritizer_$406 = fact_sheets.find_or_create_fact_sheet_update_term_prioritizer(verbosity, domain_mt, language_mt, UNPROVIDED);
				fact_sheets.renice_fsut_prioritizer(prioritizer_$406, UNPROVIDED);
				fact_sheets.update_fact_sheets_internal(prioritizer_$406, ONE_INTEGER, ZERO_INTEGER, end_hour);
			    }

			}
			final SubLObject stream_$406 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream_$406) && current_process().eql(subl_promotions.initial_process())) || (stream_$406.isStream() && (NIL != output_stream_p(stream_$406)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$406);
			    format(stream_$406, fact_sheets.$str629$Fact_Sheet_Screensavers_have_been);
			    force_output(stream_$406);
			}
			fact_sheet_logs.log_fact_sheet_hourly_report();
			fact_sheets.deregister_fact_sheet_screensaver(current_process());
		    } finally {
			fact_sheet_logs.$hourly_fact_sheet_stats$.rebind(_prev_bind_2, thread);
			fact_sheet_logs.$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_$400, thread);
		    }
		    if (NIL != use_new_setupP) {
			final SubLObject stream_$407 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream_$407) && current_process().eql(subl_promotions.initial_process())) || (stream_$407.isStream() && (NIL != output_stream_p(stream_$407)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$407);
			    format(stream_$407, fact_sheets.$str548$Closing_log_);
			    force_output(stream_$407);
			}
			fact_sheet_logs.note_fact_sheet_log_file_closed(UNPROVIDED);
		    }
		} finally {
		    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$399, thread);
		}
	    } finally {
		final SubLObject _prev_bind_0_$401 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values = getValuesAsVector();
		    if (stream.isStream()) {
			close(stream, UNPROVIDED);
		    }
		    restoreValuesFromVector(_values);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$401, thread);
		}
	    }
	} finally {
	    fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
	}
	return NIL;
    }

    public static final SubLObject update_fact_sheets_internal_alt(SubLObject prioritizer, SubLObject stop_after, SubLObject done_count, SubLObject end_hour) {
	if (end_hour == UNPROVIDED) {
	    end_hour = NIL;
	}
	{
	    SubLObject fort = NIL;
	    SubLObject stopP = NIL;
	    SubLObject verbosity = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_verbosity(prioritizer);
	    SubLObject domain_mt = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_domain_mt(prioritizer);
	    SubLObject language_mt = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_language_mt(prioritizer);
	    while (!((NIL != fort) || (NIL != stopP))) {
		fort = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_next_term(prioritizer, end_hour);
		if (NIL == fort) {
		    stopP = T;
		}
	    }
	    if (NIL != fort) {
		com.cyc.cycjava.cycl.fact_sheets.update_fact_sheet_for_term_with_logging(fort, verbosity, domain_mt, language_mt);
		if (NIL != subl_promotions.positive_integer_p(stop_after)) {
		    done_count = add(done_count, ONE_INTEGER);
		    if (done_count.numGE(stop_after)) {
			stopP = T;
		    }
		}
		if (NIL != $stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
		    stopP = T;
		}
		fort = NIL;
	    }
	    return values(done_count, stopP);
	}
    }

    public static SubLObject update_fact_sheets_internal(final SubLObject prioritizer, final SubLObject stop_after, SubLObject done_count, SubLObject end_hour) {
	if (end_hour == UNPROVIDED) {
	    end_hour = NIL;
	}
	SubLObject fort = NIL;
	SubLObject stopP = NIL;
	final SubLObject verbosity = fact_sheets.fsut_prioritizer_verbosity(prioritizer);
	final SubLObject domain_mt = fact_sheets.fsut_prioritizer_domain_mt(prioritizer);
	final SubLObject language_mt = fact_sheets.fsut_prioritizer_language_mt(prioritizer);
	while ((NIL == fort) && (NIL == stopP)) {
	    fort = fact_sheets.fsut_prioritizer_next_term(prioritizer, end_hour);
	    if (NIL == fort) {
		stopP = T;
	    }
	}
	if (NIL != fort) {
	    fact_sheets.update_fact_sheet_for_term_with_logging(fort, verbosity, domain_mt, language_mt);
	    if (NIL != subl_promotions.positive_integer_p(stop_after)) {
		done_count = add(done_count, ONE_INTEGER);
		if (done_count.numGE(stop_after)) {
		    stopP = T;
		}
	    }
	    if (NIL != fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
		stopP = T;
	    }
	    fort = NIL;
	}
	return values(done_count, stopP);
    }

    public static final SubLObject update_fact_sheet_for_term_with_logging_alt(SubLObject fort, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
		if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
		    format(stream, $str_alt765$Updating__S, fort);
		    force_output(stream);
		}
	    }
	    {
		SubLObject error_message = NIL;
		SubLObject time = NIL;
		{
		    SubLObject _prev_bind_0 = Errors.$continue_cerrorP$.currentBinding(thread);
		    SubLObject _prev_bind_1 = pph_error.$pph_error_handling_onP$.currentBinding(thread);
		    try {
			Errors.$continue_cerrorP$.bind(NIL, thread);
			pph_error.$pph_error_handling_onP$.bind(T, thread);
			if (NIL != pph_error.pph_break_on_errorP()) {
			    {
				SubLObject time_var = get_internal_real_time();
				com.cyc.cycjava.cycl.fact_sheets.update_fact_sheet_for_term(fort, verbosity, domain_mt, language_mt, UNPROVIDED, UNPROVIDED);
				time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
				{
				    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
				    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
					com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
					format(stream, $str_alt766$Finished_fact_sheet_for__S_in__5F, fort, time);
					force_output(stream);
				    }
				}
				com.cyc.cycjava.cycl.fact_sheets.add_fact_sheet_info_to_hourly_stats(fort);
			    }
			} else {
			    try {
				{
				    SubLObject _prev_bind_0_478 = Errors.$error_handler$.currentBinding(thread);
				    try {
					Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
					try {
					    {
						SubLObject time_var = get_internal_real_time();
						com.cyc.cycjava.cycl.fact_sheets.update_fact_sheet_for_term(fort, verbosity, domain_mt, language_mt, UNPROVIDED, UNPROVIDED);
						time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
					    }
					    {
						SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
						if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
						    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
						    format(stream, $str_alt766$Finished_fact_sheet_for__S_in__5F, fort, time);
						    force_output(stream);
						}
					    }
					    com.cyc.cycjava.cycl.fact_sheets.add_fact_sheet_info_to_hourly_stats(fort);
					} catch (Throwable catch_var) {
					    Errors.handleThrowable(catch_var, NIL);
					}
				    } finally {
					Errors.$error_handler$.rebind(_prev_bind_0_478, thread);
				    }
				}
			    } catch (Throwable ccatch_env_var) {
				error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
			    }
			    if (error_message.isString()) {
				Errors.warn(error_message);
			    }
			}
		    } finally {
			pph_error.$pph_error_handling_onP$.rebind(_prev_bind_1, thread);
			Errors.$continue_cerrorP$.rebind(_prev_bind_0, thread);
		    }
		}
		if (NIL != error_message) {
		    {
			SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
			if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
			    format(stream, error_message);
			    force_output(stream);
			}
		    }
		}
	    }
	    com.cyc.cycjava.cycl.fact_sheets.maybe_log_fact_sheet_hourly_report();
	    return fort;
	}
    }

    public static SubLObject update_fact_sheet_for_term_with_logging(final SubLObject fort, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
	if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
	    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
	    format(stream, fact_sheets.$str630$Updating__S, fort);
	    force_output(stream);
	}
	SubLObject error_message = NIL;
	SubLObject time = NIL;
	final SubLObject _prev_bind_0 = Errors.$continue_cerrorP$.currentBinding(thread);
	final SubLObject _prev_bind_2 = pph_error.$pph_error_handling_onP$.currentBinding(thread);
	try {
	    Errors.$continue_cerrorP$.bind(NIL, thread);
	    pph_error.$pph_error_handling_onP$.bind(T, thread);
	    if (NIL != pph_error.pph_break_on_errorP()) {
		final SubLObject time_var = get_internal_real_time();
		fact_sheets.update_fact_sheet_for_term(fort, verbosity, domain_mt, language_mt, UNPROVIDED, UNPROVIDED);
		time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
		final SubLObject stream2 = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream2) && current_process().eql(subl_promotions.initial_process())) || (stream2.isStream() && (NIL != output_stream_p(stream2)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream2);
		    format(stream2, fact_sheets.$str631$Finished_fact_sheet_for__S_in__5F, fort, time);
		    force_output(stream2);
		}
		fact_sheet_logs.add_fact_sheet_info_to_hourly_stats(fort);
	    } else {
		try {
		    thread.throwStack.push($catch_error_message_target$.getGlobalValue());
		    final SubLObject _prev_bind_0_$410 = Errors.$error_handler$.currentBinding(thread);
		    try {
			Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
			try {
			    final SubLObject time_var2 = get_internal_real_time();
			    fact_sheets.update_fact_sheet_for_term(fort, verbosity, domain_mt, language_mt, UNPROVIDED, UNPROVIDED);
			    time = divide(subtract(get_internal_real_time(), time_var2), time_high.$internal_time_units_per_second$.getGlobalValue());
			    final SubLObject stream2 = fact_sheet_logs.fact_sheet_log_stream();
			    if (((T == stream2) && current_process().eql(subl_promotions.initial_process())) || (stream2.isStream() && (NIL != output_stream_p(stream2)))) {
				fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream2);
				format(stream2, fact_sheets.$str631$Finished_fact_sheet_for__S_in__5F, fort, time);
				force_output(stream2);
			    }
			    fact_sheet_logs.add_fact_sheet_info_to_hourly_stats(fort);
			} catch (final Throwable catch_var) {
			    Errors.handleThrowable(catch_var, NIL);
			}
		    } finally {
			Errors.$error_handler$.rebind(_prev_bind_0_$410, thread);
		    }
		} catch (final Throwable ccatch_env_var) {
		    error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
		} finally {
		    thread.throwStack.pop();
		}
		if (error_message.isString() && (NIL == pph_error.suppress_pph_warningsP())) {
		    Errors.warn(cconcatenate(pph_error_message_truncator.truncate_pph_error_message(error_message), fact_sheets.$str270$___Top_level_CycL___S), pph_vars.pph_top_level_cycl());
		}
	    }
	} finally {
	    pph_error.$pph_error_handling_onP$.rebind(_prev_bind_2, thread);
	    Errors.$continue_cerrorP$.rebind(_prev_bind_0, thread);
	}
	if (NIL != error_message) {
	    final SubLObject stream3 = fact_sheet_logs.fact_sheet_log_stream();
	    if (((T == stream3) && current_process().eql(subl_promotions.initial_process())) || (stream3.isStream() && (NIL != output_stream_p(stream3)))) {
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream3);
		format(stream3, error_message);
		force_output(stream3);
	    }
	}
	fact_sheet_logs.maybe_log_fact_sheet_hourly_report();
	return fort;
    }

    public static final SubLObject possibly_update_fact_sheet_for_term_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	{
	    SubLObject updatedP = NIL;
	    if ((NIL != com.cyc.cycjava.cycl.fact_sheets.term_ok_for_fact_sheet_p(v_term, eq(verbosity, $MINI)))
		    && ((NIL == com.cyc.cycjava.cycl.fact_sheets.fact_sheet_up_to_dateP(v_term, verbosity, domain_mt, language_mt)) || (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_too_shortP(v_term, verbosity, domain_mt, language_mt)))) {
		com.cyc.cycjava.cycl.fact_sheets.update_fact_sheet_for_term(v_term, verbosity, domain_mt, language_mt, UNPROVIDED, UNPROVIDED);
		updatedP = T;
	    }
	    return updatedP;
	}
    }

    public static SubLObject possibly_update_fact_sheet_for_term(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
	SubLObject updatedP = NIL;
	if ((NIL != fact_sheets.term_ok_for_fact_sheet_p(v_term, eq(verbosity, $MINI))) && ((NIL == fact_sheets.fact_sheet_up_to_dateP(v_term, verbosity, domain_mt, language_mt)) || (NIL != fact_sheets.fact_sheet_too_shortP(v_term, verbosity, domain_mt, language_mt)))) {
	    fact_sheets.update_fact_sheet_for_term(v_term, verbosity, domain_mt, language_mt, UNPROVIDED, UNPROVIDED);
	    updatedP = T;
	}
	return updatedP;
    }

    public static final SubLObject fact_sheet_query_soft_timeout_time_reachedP_alt() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject timeout_time = $fact_sheet_query_soft_timeout_time$.getDynamicValue(thread);
		return NIL != timeout_time ? ((SubLObject) (numGE(get_universal_time(), timeout_time))) : NIL;
	    }
	}
    }

    public static SubLObject fact_sheet_query_soft_timeout_time_reachedP() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject timeout_time = fact_sheets.$fact_sheet_query_soft_timeout_time$.getDynamicValue(thread);
	return NIL != timeout_time ? numGE(get_universal_time(), timeout_time) : NIL;
    }

    public static final SubLObject fact_sheet_query_soft_timeout_time_left_alt() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject timeout_time = $fact_sheet_query_soft_timeout_time$.getDynamicValue(thread);
		return NIL != timeout_time ? ((SubLObject) (subtract(timeout_time, get_universal_time()))) : NIL;
	    }
	}
    }

    public static SubLObject fact_sheet_query_soft_timeout_time_left() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject timeout_time = fact_sheets.$fact_sheet_query_soft_timeout_time$.getDynamicValue(thread);
	return NIL != timeout_time ? subtract(timeout_time, get_universal_time()) : NIL;
    }

    public static final SubLObject compute_fact_sheet_query_soft_timeout_time_alt(SubLObject max_time) {
	return NIL != max_time ? ((SubLObject) (add(get_universal_time(), integerDivide(max_time, TWO_INTEGER)))) : NIL;
    }

    public static SubLObject compute_fact_sheet_query_soft_timeout_time(final SubLObject max_time) {
	return NIL != max_time ? add(get_universal_time(), integerDivide(max_time, TWO_INTEGER)) : NIL;
    }

    public static final SubLObject fact_sheet_paraphrase_soft_timeout_time_reachedP_alt() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject timeout_time = $fact_sheet_paraphrase_soft_timeout_time$.getDynamicValue(thread);
		return NIL != timeout_time ? ((SubLObject) (numGE(get_universal_time(), timeout_time))) : NIL;
	    }
	}
    }

    public static SubLObject fact_sheet_paraphrase_soft_timeout_time_reachedP() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject timeout_time = fact_sheets.$fact_sheet_paraphrase_soft_timeout_time$.getDynamicValue(thread);
	return NIL != timeout_time ? numGE(get_universal_time(), timeout_time) : NIL;
    }

    public static final SubLObject fact_sheet_paraphrase_soft_timeout_time_left_alt() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject timeout_time = $fact_sheet_paraphrase_soft_timeout_time$.getDynamicValue(thread);
		return NIL != timeout_time ? ((SubLObject) (subtract(timeout_time, get_universal_time()))) : NIL;
	    }
	}
    }

    public static SubLObject fact_sheet_paraphrase_soft_timeout_time_left() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject timeout_time = fact_sheets.$fact_sheet_paraphrase_soft_timeout_time$.getDynamicValue(thread);
	return NIL != timeout_time ? subtract(timeout_time, get_universal_time()) : NIL;
    }

    public static final SubLObject compute_fact_sheet_paraphrase_soft_timeout_time_alt(SubLObject max_time) {
	return NIL != max_time ? ((SubLObject) (add(get_universal_time(), max_time))) : NIL;
    }

    public static SubLObject compute_fact_sheet_paraphrase_soft_timeout_time(final SubLObject max_time) {
	return NIL != max_time ? add(get_universal_time(), max_time) : NIL;
    }

    public static final SubLObject update_fact_sheet_for_term_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject max_time, SubLObject make_upP) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (max_time == UNPROVIDED) {
	    max_time = NIL;
	}
	if (make_upP == UNPROVIDED) {
	    make_upP = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(verbosity, FACT_SHEET_VERBOSITY_P);
	    if (domain_mt == $DEFAULT) {
		domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	    }
	    if (language_mt == $DEFAULT) {
		language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	    }
	    {
		SubLObject error_message = NIL;
		if ((NIL != make_upP) || (NIL != $catch_fact_sheet_errorsP$.getDynamicValue(thread))) {
		    try {
			{
			    SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
			    try {
				Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
				try {
				    if (verbosity.eql($MINI)) {
					com.cyc.cycjava.cycl.fact_sheets.update_mini_fact_sheet_for_term(v_term, domain_mt, language_mt);
				    } else {
					com.cyc.cycjava.cycl.fact_sheets.update_fact_sheet_data_for_term(v_term, verbosity == $PUBLIC ? ((SubLObject) ($NORMAL)) : verbosity, domain_mt, language_mt, max_time, make_upP);
				    }
				} catch (Throwable catch_var) {
				    Errors.handleThrowable(catch_var, NIL);
				}
			    } finally {
				Errors.$error_handler$.rebind(_prev_bind_0, thread);
			    }
			}
		    } catch (Throwable ccatch_env_var) {
			error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
		    }
		} else {
		    if (verbosity.eql($MINI)) {
			com.cyc.cycjava.cycl.fact_sheets.update_mini_fact_sheet_for_term(v_term, domain_mt, language_mt);
		    } else {
			com.cyc.cycjava.cycl.fact_sheets.update_fact_sheet_data_for_term(v_term, verbosity == $PUBLIC ? ((SubLObject) ($NORMAL)) : verbosity, domain_mt, language_mt, max_time, make_upP);
		    }
		}
		if (error_message.isString()) {
		    {
			SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
			if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
			    format(stream, $str_alt767$Caught_error_while_updating__S_fa, new SubLObject[] { verbosity, v_term, error_message });
			    force_output(stream);
			}
		    }
		    com.cyc.cycjava.cycl.fact_sheets.remove_any_cached_fact_sheet_data(v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
		}
		return NIL;
	    }
	}
    }

    public static SubLObject update_fact_sheet_for_term(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject max_time, SubLObject make_upP) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (max_time == UNPROVIDED) {
	    max_time = NIL;
	}
	if (make_upP == UNPROVIDED) {
	    make_upP = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	assert NIL != fact_sheets.fact_sheet_verbosity_p(verbosity) : "! fact_sheets.fact_sheet_verbosity_p(verbosity) " + ("fact_sheets.fact_sheet_verbosity_p(verbosity) " + "CommonSymbols.NIL != fact_sheets.fact_sheet_verbosity_p(verbosity) ") + verbosity;
	if (domain_mt == $DEFAULT) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == $DEFAULT) {
	    language_mt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	SubLObject error_message = NIL;
	Label_0389: {
	    if (NIL == make_upP) {
		if (NIL == fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
		    if (verbosity.eql($MINI)) {
			fact_sheets.update_mini_fact_sheet_for_term(v_term, domain_mt, language_mt);
			break Label_0389;
		    }
		    fact_sheets.update_fact_sheet_data_for_term(v_term, verbosity == $PUBLIC ? $NORMAL : verbosity, domain_mt, language_mt, max_time, make_upP);
		    break Label_0389;
		}
	    }
	    try {
		thread.throwStack.push($catch_error_message_target$.getGlobalValue());
		final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
		try {
		    Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
		    try {
			if (verbosity.eql($MINI)) {
			    fact_sheets.update_mini_fact_sheet_for_term(v_term, domain_mt, language_mt);
			} else {
			    fact_sheets.update_fact_sheet_data_for_term(v_term, verbosity == $PUBLIC ? $NORMAL : verbosity, domain_mt, language_mt, max_time, make_upP);
			}
		    } catch (final Throwable catch_var) {
			Errors.handleThrowable(catch_var, NIL);
		    }
		} finally {
		    Errors.$error_handler$.rebind(_prev_bind_0, thread);
		}
	    } catch (final Throwable ccatch_env_var) {
		error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
	    } finally {
		thread.throwStack.pop();
	    }
	}
	if (error_message.isString()) {
	    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
	    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
		format(stream, fact_sheets.$str632$Caught_error_while_updating__S_fa, new SubLObject[] { verbosity, v_term, error_message });
		force_output(stream);
	    }
	    fact_sheets.remove_any_cached_fact_sheet_data(v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
	}
	return NIL;
    }

    public static final SubLObject update_mini_fact_sheet_for_term_alt(SubLObject v_term, SubLObject domain_mt, SubLObject language_mt) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (domain_mt == $DEFAULT) {
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == $DEFAULT) {
	    language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	com.cyc.cycjava.cycl.fact_sheets.note_fact_sheet_under_construction(v_term, $MINI, domain_mt, language_mt);
	{
	    SubLObject datum = com.cyc.cycjava.cycl.fact_sheets.get_mini_fact_sheet_for_term_in_html(v_term, domain_mt, language_mt);
	    SubLObject current = datum;
	    SubLObject html = NIL;
	    SubLObject formatting_guidelines = NIL;
	    destructuring_bind_must_consp(current, datum, $list_alt768);
	    html = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt768);
	    formatting_guidelines = current.first();
	    current = current.rest();
	    if (NIL == current) {
		com.cyc.cycjava.cycl.fact_sheets.write_fact_sheet_html_and_formatting_guidelines(v_term, $MINI, domain_mt, language_mt, html, formatting_guidelines);
		com.cyc.cycjava.cycl.fact_sheets.note_fact_sheet_construction_done(v_term, $MINI, domain_mt, language_mt);
		return html;
	    } else {
		cdestructuring_bind_error(datum, $list_alt768);
	    }
	}
	return NIL;
    }

    public static SubLObject update_mini_fact_sheet_for_term(final SubLObject v_term, SubLObject domain_mt, SubLObject language_mt) {
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (domain_mt == $DEFAULT) {
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == $DEFAULT) {
	    language_mt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	fact_sheets.note_fact_sheet_under_construction(v_term, $MINI, domain_mt, language_mt);
	SubLObject current;
	final SubLObject datum = current = fact_sheets.get_mini_fact_sheet_for_term_in_html(v_term, domain_mt, language_mt);
	SubLObject html = NIL;
	SubLObject formatting_guidelines = NIL;
	destructuring_bind_must_consp(current, datum, fact_sheets.$list633);
	html = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list633);
	formatting_guidelines = current.first();
	current = current.rest();
	if (NIL == current) {
	    fact_sheets.write_fact_sheet_html_and_formatting_guidelines(v_term, $MINI, domain_mt, language_mt, html, formatting_guidelines);
	    fact_sheets.note_fact_sheet_construction_done(v_term, $MINI, domain_mt, language_mt);
	    return html;
	}
	cdestructuring_bind_error(datum, fact_sheets.$list633);
	return NIL;
    }

    public static final SubLObject update_fact_sheet_data_for_term_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject max_time, SubLObject make_upP) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject fact_sheet_data = NIL;
		SubLObject stats = NIL;
		SubLObject footnotes = NIL;
		SubLObject formatting_guidelines = NIL;
		{
		    SubLObject _prev_bind_0 = $fact_sheet_query_soft_timeout_time$.currentBinding(thread);
		    SubLObject _prev_bind_1 = $fact_sheet_paraphrase_soft_timeout_time$.currentBinding(thread);
		    try {
			$fact_sheet_query_soft_timeout_time$.bind(com.cyc.cycjava.cycl.fact_sheets.compute_fact_sheet_query_soft_timeout_time(max_time), thread);
			$fact_sheet_paraphrase_soft_timeout_time$.bind(NIL != max_time ? ((SubLObject) (add(max_time, get_universal_time()))) : NIL, thread);
			{
			    SubLObject old_info = com.cyc.cycjava.cycl.fact_sheets.precached_fact_sheet_data_for_term(v_term, verbosity, domain_mt, language_mt, NIL);
			    SubLObject max_make_up_time = $int$1800;
			    SubLObject data_generation_completedP = NIL;
			    SubLObject inference_error = NIL;
			    try {
				com.cyc.cycjava.cycl.fact_sheets.note_fact_sheet_under_construction(v_term, verbosity, domain_mt, language_mt);
				com.cyc.cycjava.cycl.fact_sheets.clear_all_fact_sheet_caches();
				try {
				    {
					SubLObject datum_evaluated_var = com.cyc.cycjava.cycl.fact_sheets.generate_fact_sheet_data(v_term, verbosity, domain_mt, language_mt);
					fact_sheet_data = datum_evaluated_var.first();
					stats = cadr(datum_evaluated_var);
					footnotes = cddr(datum_evaluated_var).first();
					formatting_guidelines = cadr(cddr(datum_evaluated_var));
				    }
				} catch (Throwable ccatch_env_var) {
				    inference_error = Errors.handleThrowable(ccatch_env_var, $FACT_SHEET_INFERENCE_ERROR);
				}
				if (NIL == inference_error) {
				    data_generation_completedP = T;
				}
			    } finally {
				{
				    SubLObject _prev_bind_0_479 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					if (NIL != inference_error) {
					    {
						SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
						if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
						    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
						    format(stream, $str_alt770$Encountered_inference_error_while, v_term, inference_error);
						    force_output(stream);
						}
					    }
					}
					if (NIL != data_generation_completedP) {
					    if (!verbosity.eql($PUBLIC)) {
						com.cyc.cycjava.cycl.fact_sheets.write_fact_sheet_data_and_formatting_guidelines(v_term, verbosity, domain_mt, language_mt, fact_sheet_data, stats, footnotes, formatting_guidelines);
					    }
					    com.cyc.cycjava.cycl.fact_sheets.note_fact_sheet_construction_done(v_term, verbosity, domain_mt, language_mt);
					    com.cyc.cycjava.cycl.fact_sheets.remove_any_cached_fact_sheet_data(v_term, verbosity, domain_mt, language_mt, $$$html);
					    if ((((NIL != max_time) && (NIL == inference_error)) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_paraphrase_soft_timeout_time_reachedP())) && (NIL == make_upP)) {
						com.cyc.cycjava.cycl.fact_sheets.launch_make_up_fact_sheet_updater_for_term(v_term, verbosity, domain_mt, language_mt, max_make_up_time, max_time);
					    }
					} else {
					    if (NIL != old_info) {
						{
						    SubLObject datum = old_info;
						    SubLObject current = datum;
						    SubLObject old_data = NIL;
						    SubLObject old_stats = NIL;
						    SubLObject old_footnotes = NIL;
						    SubLObject old_formatting_guidelines = NIL;
						    destructuring_bind_must_consp(current, datum, $list_alt771);
						    old_data = current.first();
						    current = current.rest();
						    destructuring_bind_must_consp(current, datum, $list_alt771);
						    old_stats = current.first();
						    current = current.rest();
						    destructuring_bind_must_consp(current, datum, $list_alt771);
						    old_footnotes = current.first();
						    current = current.rest();
						    destructuring_bind_must_consp(current, datum, $list_alt771);
						    old_formatting_guidelines = current.first();
						    current = current.rest();
						    if (NIL == current) {
							if (NIL != list_utilities.non_empty_list_p(old_data)) {
							    com.cyc.cycjava.cycl.fact_sheets.write_fact_sheet_data_and_formatting_guidelines(v_term, verbosity, domain_mt, language_mt, old_data, old_stats, old_footnotes, old_formatting_guidelines);
							} else {
							    com.cyc.cycjava.cycl.fact_sheets.remove_any_cached_fact_sheet_data(v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
							}
						    } else {
							cdestructuring_bind_error(datum, $list_alt771);
						    }
						}
						if (!((NIL != make_upP) || (NIL != inference_error))) {
						    com.cyc.cycjava.cycl.fact_sheets.launch_make_up_fact_sheet_updater_for_term(v_term, verbosity, domain_mt, language_mt, max_make_up_time, max_time);
						}
					    } else {
						com.cyc.cycjava.cycl.fact_sheets.remove_any_cached_fact_sheet_data(v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
						if (NIL == make_upP) {
						    com.cyc.cycjava.cycl.fact_sheets.launch_make_up_fact_sheet_updater_for_term(v_term, verbosity, domain_mt, language_mt, max_make_up_time, max_time);
						}
					    }
					}
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0_479, thread);
				    }
				}
			    }
			}
		    } finally {
			$fact_sheet_paraphrase_soft_timeout_time$.rebind(_prev_bind_1, thread);
			$fact_sheet_query_soft_timeout_time$.rebind(_prev_bind_0, thread);
		    }
		}
		return values(fact_sheet_data, stats, footnotes, formatting_guidelines);
	    }
	}
    }

    public static SubLObject update_fact_sheet_data_for_term(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject max_time, final SubLObject make_upP) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject fact_sheet_data = NIL;
	SubLObject stats = NIL;
	SubLObject footnotes = NIL;
	SubLObject formatting_guidelines = NIL;
	final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_query_soft_timeout_time$.currentBinding(thread);
	final SubLObject _prev_bind_2 = fact_sheets.$fact_sheet_paraphrase_soft_timeout_time$.currentBinding(thread);
	try {
	    fact_sheets.$fact_sheet_query_soft_timeout_time$.bind(fact_sheets.compute_fact_sheet_query_soft_timeout_time(max_time), thread);
	    fact_sheets.$fact_sheet_paraphrase_soft_timeout_time$.bind(NIL != max_time ? add(max_time, get_universal_time()) : NIL, thread);
	    final SubLObject old_info = fact_sheets.precached_fact_sheet_data_for_term(v_term, verbosity, domain_mt, language_mt, NIL);
	    final SubLObject max_make_up_time = fact_sheets.$int$1800;
	    SubLObject data_generation_completedP = NIL;
	    SubLObject inference_error = NIL;
	    try {
		fact_sheets.note_fact_sheet_under_construction(v_term, verbosity, domain_mt, language_mt);
		fact_sheets.clear_all_fact_sheet_caches();
		try {
		    thread.throwStack.push(fact_sheets.$FACT_SHEET_INFERENCE_ERROR);
		    final SubLObject datum_evaluated_var = fact_sheets.generate_fact_sheet_data(v_term, verbosity, domain_mt, language_mt);
		    fact_sheet_data = datum_evaluated_var.first();
		    stats = cadr(datum_evaluated_var);
		    footnotes = cddr(datum_evaluated_var).first();
		    formatting_guidelines = cadr(cddr(datum_evaluated_var));
		} catch (final Throwable ccatch_env_var) {
		    inference_error = Errors.handleThrowable(ccatch_env_var, fact_sheets.$FACT_SHEET_INFERENCE_ERROR);
		} finally {
		    thread.throwStack.pop();
		}
		if (NIL == inference_error) {
		    data_generation_completedP = T;
		}
	    } finally {
		final SubLObject _prev_bind_0_$411 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values = getValuesAsVector();
		    if (NIL != inference_error) {
			final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
			    format(stream, fact_sheets.$str635$Encountered_inference_error_while, v_term, inference_error);
			    force_output(stream);
			}
		    }
		    if (NIL != data_generation_completedP) {
			if (!verbosity.eql($PUBLIC)) {
			    fact_sheets.write_fact_sheet_data_and_formatting_guidelines(v_term, verbosity, domain_mt, language_mt, fact_sheet_data, stats, footnotes, formatting_guidelines);
			}
			fact_sheets.note_fact_sheet_construction_done(v_term, verbosity, domain_mt, language_mt);
			fact_sheets.remove_any_cached_fact_sheet_data(v_term, verbosity, domain_mt, language_mt, fact_sheets.$$$html);
			if ((((NIL != max_time) && (NIL == inference_error)) && (NIL != fact_sheets.fact_sheet_paraphrase_soft_timeout_time_reachedP())) && (NIL == make_upP)) {
			    fact_sheets.launch_make_up_fact_sheet_updater_for_term(v_term, verbosity, domain_mt, language_mt, max_make_up_time, max_time);
			}
		    } else if (NIL != old_info) {
			SubLObject current;
			final SubLObject datum = current = old_info;
			SubLObject old_data = NIL;
			SubLObject old_stats = NIL;
			SubLObject old_footnotes = NIL;
			SubLObject old_formatting_guidelines = NIL;
			destructuring_bind_must_consp(current, datum, fact_sheets.$list636);
			old_data = current.first();
			current = current.rest();
			destructuring_bind_must_consp(current, datum, fact_sheets.$list636);
			old_stats = current.first();
			current = current.rest();
			destructuring_bind_must_consp(current, datum, fact_sheets.$list636);
			old_footnotes = current.first();
			current = current.rest();
			destructuring_bind_must_consp(current, datum, fact_sheets.$list636);
			old_formatting_guidelines = current.first();
			current = current.rest();
			if (NIL == current) {
			    if (NIL != list_utilities.non_empty_list_p(old_data)) {
				fact_sheets.write_fact_sheet_data_and_formatting_guidelines(v_term, verbosity, domain_mt, language_mt, old_data, old_stats, old_footnotes, old_formatting_guidelines);
			    } else {
				fact_sheets.remove_any_cached_fact_sheet_data(v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
			    }
			} else {
			    cdestructuring_bind_error(datum, fact_sheets.$list636);
			}
			if ((NIL == make_upP) && (NIL == inference_error)) {
			    fact_sheets.launch_make_up_fact_sheet_updater_for_term(v_term, verbosity, domain_mt, language_mt, max_make_up_time, max_time);
			}
		    } else {
			fact_sheets.remove_any_cached_fact_sheet_data(v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
			if (NIL == make_upP) {
			    fact_sheets.launch_make_up_fact_sheet_updater_for_term(v_term, verbosity, domain_mt, language_mt, max_make_up_time, max_time);
			}
		    }

		    restoreValuesFromVector(_values);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$411, thread);
		}
	    }
	} finally {
	    fact_sheets.$fact_sheet_paraphrase_soft_timeout_time$.rebind(_prev_bind_2, thread);
	    fact_sheets.$fact_sheet_query_soft_timeout_time$.rebind(_prev_bind_0, thread);
	}
	return values(fact_sheet_data, stats, footnotes, formatting_guidelines);
    }

    public static final SubLObject launch_make_up_fact_sheet_updater_for_term_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject max_time, SubLObject old_max_time) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (max_time == UNPROVIDED) {
	    max_time = NIL;
	}
	if (old_max_time == UNPROVIDED) {
	    old_max_time = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
		if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
		    format(stream, $str_alt772$Launching_make_up_updater_for__S_, v_term,
			    NIL != old_max_time ? ((SubLObject) (cconcatenate($str_alt773$_Timed_out_after_, new SubLObject[] { format_nil.format_nil_s_no_copy(old_max_time), $str_alt774$_seconds__ }))) : $str_alt775$_Didn_t_time_out__Probably_ran_in);
		    force_output(stream);
		}
	    }
	    return process_utilities.make_cyc_server_process_with_args($str_alt776$Fact_Sheet_Post_Timeout_Updater, symbol_function(UPDATE_FACT_SHEET_FOR_TERM), list(v_term, verbosity, domain_mt, language_mt, max_time, T));
	}
    }

    public static SubLObject launch_make_up_fact_sheet_updater_for_term(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject max_time, SubLObject old_max_time) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (max_time == UNPROVIDED) {
	    max_time = NIL;
	}
	if (old_max_time == UNPROVIDED) {
	    old_max_time = NIL;
	}
	final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
	if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
	    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
	    format(stream, fact_sheets.$str637$Launching_make_up_updater_for__S_, v_term,
		    NIL != old_max_time ? cconcatenate(fact_sheets.$str638$_Timed_out_after_, new SubLObject[] { format_nil.format_nil_s_no_copy(old_max_time), fact_sheets.$str639$_seconds__ }) : fact_sheets.$str640$_Didn_t_time_out__Probably_ran_in);
	    force_output(stream);
	}
	return process_utilities.make_cyc_server_process_with_args(fact_sheets.$str641$Fact_Sheet_Post_Timeout_Updater, symbol_function(fact_sheets.UPDATE_FACT_SHEET_FOR_TERM), list(v_term, verbosity, domain_mt, language_mt, max_time, T));
    }

    public static final SubLObject fact_sheet_too_shortP_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	{
	    SubLObject cached = com.cyc.cycjava.cycl.fact_sheets.cached_fact_sheet_data_for_term(v_term, verbosity, domain_mt, language_mt, NIL);
	    return list_utilities.empty_list_p(cached.first());
	}
    }

    public static SubLObject fact_sheet_too_shortP(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
	final SubLObject cached = fact_sheets.cached_fact_sheet_data_for_term(v_term, verbosity, domain_mt, language_mt, NIL);
	return list_utilities.empty_list_p(cached.first());
    }

    public static final SubLObject fact_sheet_up_to_dateP_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL != com.cyc.cycjava.cycl.fact_sheets.term_ok_for_fact_sheet_p(v_term, UNPROVIDED)) {
		thread.resetMultipleValues();
		{
		    SubLObject directory = com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
		    SubLObject cached_filename = thread.secondMultipleValue();
		    thread.resetMultipleValues();
		    if (NIL != file_utilities.file_existsP(cached_filename)) {
			{
			    SubLObject datum = com.cyc.cycjava.cycl.fact_sheets.cached_fact_sheet_save_date_and_second(cached_filename);
			    SubLObject current = datum;
			    SubLObject date = NIL;
			    SubLObject second = NIL;
			    destructuring_bind_must_consp(current, datum, $list_alt778);
			    date = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt778);
			    second = current.first();
			    current = current.rest();
			    if (NIL == current) {
				if (!((NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_modified_sinceP(v_term, date, second)) || (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_generator_modified_sinceP(date, second)))) {
				    return T;
				}
			    } else {
				cdestructuring_bind_error(datum, $list_alt778);
			    }
			}
		    }
		}
	    }
	    return NIL;
	}
    }

    public static SubLObject fact_sheet_up_to_dateP(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	if (NIL != fact_sheets.term_ok_for_fact_sheet_p(v_term, UNPROVIDED)) {
	    thread.resetMultipleValues();
	    final SubLObject directory = fact_sheets.directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
	    final SubLObject cached_filename = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    if (NIL != file_utilities.file_existsP(cached_filename)) {
		SubLObject current;
		final SubLObject datum = current = fact_sheets.cached_fact_sheet_save_date_and_second(cached_filename);
		SubLObject date = NIL;
		SubLObject second = NIL;
		destructuring_bind_must_consp(current, datum, fact_sheets.$list643);
		date = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, fact_sheets.$list643);
		second = current.first();
		current = current.rest();
		if (NIL == current) {
		    if ((NIL == fact_sheets.fact_sheet_term_modified_sinceP(v_term, date, second)) && (NIL == fact_sheets.fact_sheet_generator_modified_sinceP(date, second))) {
			return T;
		    }
		} else {
		    cdestructuring_bind_error(datum, fact_sheets.$list643);
		}
	    }
	}
	return NIL;
    }

    public static final SubLObject cached_fact_sheet_save_date_and_second_alt(SubLObject filename) {
	if (NIL != file_utilities.file_existsP(filename)) {
	    {
		SubLObject universal_time = Filesys.file_write_date(filename);
		SubLObject date = numeric_date_utilities.get_universal_date(universal_time, UNPROVIDED);
		SubLObject second = numeric_date_utilities.get_universal_second(universal_time);
		return list(date, second);
	    }
	}
	return NIL;
    }

    public static SubLObject cached_fact_sheet_save_date_and_second(final SubLObject filename) {
	if (NIL != file_utilities.file_existsP(filename)) {
	    final SubLObject universal_time = Filesys.file_write_date(filename);
	    final SubLObject date = numeric_date_utilities.get_universal_date(universal_time, UNPROVIDED);
	    final SubLObject second = numeric_date_utilities.get_universal_second(universal_time);
	    return list(date, second);
	}
	return NIL;
    }

    public static final SubLObject fact_sheet_generator_modified_sinceP_alt(SubLObject date, SubLObject second) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject ans = NIL;
		SubLObject datum = $fact_sheet_generator_update_date_and_second$.getDynamicValue(thread);
		SubLObject current = datum;
		SubLObject modified_date = NIL;
		SubLObject modified_second = NIL;
		destructuring_bind_must_consp(current, datum, $list_alt779);
		modified_date = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, $list_alt779);
		modified_second = current.first();
		current = current.rest();
		if (NIL == current) {
		    if (NIL == modified_date) {
		    } else {
			if (modified_date.numL(date)) {
			} else {
			    if (modified_date.numG(date)) {
				ans = T;
			    } else {
				ans = makeBoolean((NIL != modified_second) && modified_second.numG(second));
			    }
			}
		    }
		} else {
		    cdestructuring_bind_error(datum, $list_alt779);
		}
		return ans;
	    }
	}
    }

    public static SubLObject fact_sheet_generator_modified_sinceP(final SubLObject date, final SubLObject second) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject ans = NIL;
	SubLObject current;
	final SubLObject datum = current = fact_sheets.$fact_sheet_generator_update_date_and_second$.getDynamicValue(thread);
	SubLObject modified_date = NIL;
	SubLObject modified_second = NIL;
	destructuring_bind_must_consp(current, datum, fact_sheets.$list644);
	modified_date = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, fact_sheets.$list644);
	modified_second = current.first();
	current = current.rest();
	if (NIL == current) {
	    if (NIL != modified_date) {
		if (!modified_date.numL(date)) {
		    if (modified_date.numG(date)) {
			ans = T;
		    } else {
			ans = makeBoolean((NIL != modified_second) && modified_second.numG(second));
		    }
		}
	    }
	} else {
	    cdestructuring_bind_error(datum, fact_sheets.$list644);
	}
	return ans;
    }

    public static final SubLObject fact_sheet_term_modified_sinceP_alt(SubLObject v_term, SubLObject date, SubLObject second) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(v_term, TERM_OK_FOR_FACT_SHEET_P);
	    {
		SubLObject ans = NIL;
		SubLObject pred_var = NIL;
		if (NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(v_term, NIL, pred_var)) {
		    {
			SubLObject iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(v_term, NIL, pred_var);
			SubLObject done_var = ans;
			SubLObject token_var = NIL;
			while (NIL == done_var) {
			    {
				SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
				SubLObject valid = makeBoolean(token_var != final_index_spec);
				if (NIL != valid) {
				    {
					SubLObject final_index_iterator = NIL;
					try {
					    final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, $GAF, NIL, NIL);
					    {
						SubLObject done_var_480 = ans;
						SubLObject token_var_481 = NIL;
						while (NIL == done_var_480) {
						    {
							SubLObject gaf = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_481);
							SubLObject valid_482 = makeBoolean(token_var_481 != gaf);
							if (NIL != valid_482) {
							    {
								SubLObject modified_date = assertions_high.asserted_when(gaf);
								if (NIL == modified_date) {
								} else {
								    if (modified_date.numL(date)) {
								    } else {
									if (modified_date.numG(date)) {
									    {
										SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
										if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
										    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
										    format(stream, $str_alt780$_S_was_modified_on__S, v_term, modified_date);
										    force_output(stream);
										}
									    }
									    ans = T;
									} else {
									    {
										SubLObject modified_second = assertions_high.asserted_second(gaf);
										ans = makeBoolean((NIL != modified_second) && modified_second.numG(second));
									    }
									}
								    }
								}
							    }
							}
							done_var_480 = makeBoolean((NIL == valid_482) || (NIL != ans));
						    }
						}
					    }
					} finally {
					    {
						SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
						try {
						    $is_thread_performing_cleanupP$.bind(T, thread);
						    if (NIL != final_index_iterator) {
							kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
						    }
						} finally {
						    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
						}
					    }
					}
				    }
				}
				done_var = makeBoolean((NIL == valid) || (NIL != ans));
			    }
			}
		    }
		}
		return ans;
	    }
	}
    }

    public static SubLObject fact_sheet_term_modified_sinceP(final SubLObject v_term, final SubLObject date, final SubLObject second) {
	assert NIL != fact_sheets.term_ok_for_fact_sheet_p(v_term, UNPROVIDED) : "! fact_sheets.term_ok_for_fact_sheet_p(v_term, .UNPROVIDED) "
		+ ("fact_sheets.term_ok_for_fact_sheet_p(v_term, CommonSymbols.UNPROVIDED) " + "CommonSymbols.NIL != fact_sheets.term_ok_for_fact_sheet_p(v_term, CommonSymbols.UNPROVIDED) ") + v_term;
	SubLObject ans = NIL;
	final SubLObject pred_var = NIL;
	if (NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(v_term, NIL, pred_var)) {
	    final SubLObject iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(v_term, NIL, pred_var);
	    SubLObject done_var = ans;
	    final SubLObject token_var = NIL;
	    while (NIL == done_var) {
		final SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
		final SubLObject valid = makeBoolean(!token_var.eql(final_index_spec));
		if (NIL != valid) {
		    SubLObject final_index_iterator = NIL;
		    try {
			final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, $GAF, NIL, NIL);
			SubLObject done_var_$412 = ans;
			final SubLObject token_var_$413 = NIL;
			while (NIL == done_var_$412) {
			    final SubLObject gaf = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_$413);
			    final SubLObject valid_$414 = makeBoolean(!token_var_$413.eql(gaf));
			    if (NIL != valid_$414) {
				final SubLObject modified_date = assertions_high.asserted_when(gaf);
				if (NIL != modified_date) {
				    if (!modified_date.numL(date)) {
					if (modified_date.numG(date)) {
					    ans = T;
					} else {
					    final SubLObject modified_second = assertions_high.asserted_second(gaf);
					    ans = makeBoolean((NIL != modified_second) && modified_second.numG(second));
					}
				    }
				}
				if ((NIL != ans) && (NIL != fort_types_interface.collection_p(v_term))) {
				    final SubLObject formula = assertions_high.gaf_formula(gaf);
				    if ((((NIL != formula_pattern_match.formula_matches_pattern(formula, list(fact_sheets.$list645, $ANYTHING, v_term))) || (NIL != formula_pattern_match.formula_matches_pattern(formula, list(fact_sheets.$list647, $ANYTHING, $ANYTHING, v_term))))
					    || (NIL != formula_pattern_match.formula_matches_pattern(formula, list(fact_sheets.$list648, $ANYTHING, v_term)))) || (NIL != formula_pattern_match.formula_matches_pattern(formula, list(fact_sheets.$list649, $ANYTHING, v_term)))) {
					ans = NIL;
				    }
				}
				if (NIL != ans) {
				    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
				    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
					fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
					format(stream, fact_sheets.$str650$_S_was_modified_on__S____New_GAF_, new SubLObject[] { v_term, modified_date, gaf });
					force_output(stream);
				    }
				}
			    }
			    done_var_$412 = makeBoolean((NIL == valid_$414) || (NIL != ans));
			}
		    } finally {
			final SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
			try {
			    bind($is_thread_performing_cleanupP$, T);
			    final SubLObject _values = getValuesAsVector();
			    if (NIL != final_index_iterator) {
				kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
			    }
			    restoreValuesFromVector(_values);
			} finally {
			    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
			}
		    }
		}
		done_var = makeBoolean((NIL == valid) || (NIL != ans));
	    }
	}
	return ans;
    }

    public static final SubLObject fact_sheet_formatting_guidelines_file_alt(SubLObject filename, SubLObject extension) {
	if (extension == UNPROVIDED) {
	    extension = $$$html;
	}
	return cconcatenate(string_utilities.post_remove(string_utilities.post_remove(filename, extension, UNPROVIDED), $str_alt653$_, UNPROVIDED), $str_alt781$_formatting_guidelines_cfasl);
    }

    public static SubLObject fact_sheet_formatting_guidelines_file(final SubLObject filename, SubLObject extension) {
	if (extension == UNPROVIDED) {
	    extension = fact_sheets.$$$html;
	}
	return cconcatenate(string_utilities.post_remove(string_utilities.post_remove(filename, extension, UNPROVIDED), fact_sheets.$str511$_, UNPROVIDED), fact_sheets.$str651$_formatting_guidelines_cfasl);
    }

    public static final SubLObject fact_sheet_file_for_fact_sheet_term_alt(SubLObject v_term) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    thread.resetMultipleValues();
	    {
		SubLObject directory = com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_fact_sheet(v_term, $NORMAL, $DEFAULT, $DEFAULT, $$$cfasl);
		SubLObject filename = thread.secondMultipleValue();
		thread.resetMultipleValues();
		return filename;
	    }
	}
    }

    public static SubLObject fact_sheet_file_for_fact_sheet_term(final SubLObject v_term) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	thread.resetMultipleValues();
	final SubLObject directory = fact_sheets.directory_and_filename_for_fact_sheet(v_term, $NORMAL, $DEFAULT, $DEFAULT, fact_sheets.$$$cfasl);
	final SubLObject filename = thread.secondMultipleValue();
	thread.resetMultipleValues();
	return filename;
    }

    public static final SubLObject directory_and_filename_for_fact_sheet_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject extension) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (extension == UNPROVIDED) {
	    extension = (verbosity.eql($MINI)) ? ((SubLObject) ($$$html)) : $$$cfasl;
	}
	{
	    SubLObject enable_reverse_lookupP = T;
	    SubLObject external_id_string = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(v_term, enable_reverse_lookupP);
	    return com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_fact_sheet_from_id(external_id_string, verbosity, domain_mt, language_mt, v_term, extension);
	}
    }

    public static SubLObject directory_and_filename_for_fact_sheet(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject extension) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (extension == UNPROVIDED) {
	    extension = (verbosity.eql($MINI)) ? fact_sheets.$$$html : fact_sheets.$$$cfasl;
	}
	final SubLObject enable_reverse_lookupP = T;
	final SubLObject external_id_string = fact_sheets.fact_sheet_term_id(v_term, enable_reverse_lookupP);
	return fact_sheets.directory_and_filename_for_fact_sheet_from_id(external_id_string, verbosity, domain_mt, language_mt, v_term, extension);
    }

    public static final SubLObject directory_and_filename_for_fact_sheet_from_id_alt(SubLObject term_id, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_term, SubLObject extension) {
	if (v_term == UNPROVIDED) {
	    v_term = NIL;
	}
	if (extension == UNPROVIDED) {
	    extension = $$$cfasl;
	}
	if (domain_mt == $DEFAULT) {
	    if (NIL == v_term) {
		v_term = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_id(term_id, UNPROVIDED);
	    }
	    domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == $DEFAULT) {
	    if (NIL == v_term) {
		v_term = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_id(term_id, UNPROVIDED);
	    }
	    language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	SubLTrampolineFile.checkType(domain_mt, CYCL_DENOTATIONAL_TERM_P);
	SubLTrampolineFile.checkType(language_mt, CYCL_DENOTATIONAL_TERM_P);
	{
	    SubLObject directory_list = append(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_path(), list(Strings.string_downcase(princ_to_string(verbosity), UNPROVIDED, UNPROVIDED), com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(domain_mt, NIL),
		    com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(language_mt, NIL), com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id_file_preface(term_id)));
	    SubLObject directory = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_directory_from_list(directory_list);
	    SubLObject filename = cconcatenate(directory, new SubLObject[] { term_id, $str_alt653$_, extension });
	    return values(directory, filename);
	}
    }

    public static SubLObject directory_and_filename_for_fact_sheet_from_id(final SubLObject term_id, final SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_term, SubLObject extension) {
	if (v_term == UNPROVIDED) {
	    v_term = NIL;
	}
	if (extension == UNPROVIDED) {
	    extension = fact_sheets.$$$cfasl;
	}
	if (domain_mt == $DEFAULT) {
	    if (NIL == v_term) {
		v_term = fact_sheets.fact_sheet_term_from_id(term_id, UNPROVIDED);
	    }
	    domain_mt = fact_sheets.fact_sheet_default_domain_mt_for_term(v_term);
	}
	if (language_mt == $DEFAULT) {
	    if (NIL == v_term) {
		v_term = fact_sheets.fact_sheet_term_from_id(term_id, UNPROVIDED);
	    }
	    language_mt = fact_sheets.fact_sheet_default_language_mt_for_term(v_term);
	}
	assert NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) : "! cycl_grammar.cycl_denotational_term_p(domain_mt) " + ("cycl_grammar.cycl_denotational_term_p(domain_mt) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) ") + domain_mt;
	assert NIL != cycl_grammar.cycl_denotational_term_p(language_mt) : "! cycl_grammar.cycl_denotational_term_p(language_mt) " + ("cycl_grammar.cycl_denotational_term_p(language_mt) " + "CommonSymbols.NIL != cycl_grammar.cycl_denotational_term_p(language_mt) ") + language_mt;
	final SubLObject directory_list = append(fact_sheets.fact_sheet_data_path(),
		list(Strings.string_downcase(princ_to_string(verbosity), UNPROVIDED, UNPROVIDED), fact_sheets.fact_sheet_term_id(domain_mt, NIL), fact_sheets.fact_sheet_term_id(language_mt, NIL), fact_sheets.fact_sheet_term_id_file_preface(term_id)));
	final SubLObject directory = fact_sheets.fact_sheet_directory_from_list(directory_list);
	final SubLObject filename = cconcatenate(directory, new SubLObject[] { term_id, fact_sheets.$str511$_, extension });
	return values(directory, filename);
    }

    public static final SubLObject fact_sheet_term_id_file_preface_alt(SubLObject term_id) {
	{
	    SubLObject id_length = length(term_id);
	    SubLObject last_3_digits = string_utilities.substring(term_id, subtract(id_length, THREE_INTEGER), UNPROVIDED);
	    return last_3_digits;
	}
    }

    public static SubLObject fact_sheet_term_id_file_preface(final SubLObject term_id) {
	final SubLObject id_length = length(term_id);
	final SubLObject last_3_digits = string_utilities.substring(term_id, subtract(id_length, THREE_INTEGER), UNPROVIDED);
	return last_3_digits;
    }

    public static final SubLObject fact_sheet_term_from_filename_alt(SubLObject filename) {
	return nth_value_step_2(nth_value_step_1(ZERO_INTEGER), com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_from_filename(filename));
    }

    public static SubLObject fact_sheet_term_from_filename(final SubLObject filename) {
	return nth_value_step_2(nth_value_step_1(ZERO_INTEGER), fact_sheets.fact_sheet_data_from_filename(filename));
    }

    public static final SubLObject fact_sheet_data_from_filename_alt(SubLObject filename) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if ((NIL != string_utilities.ends_with(filename, $str_alt655$_html, UNPROVIDED)) || (NIL != string_utilities.ends_with(filename, $str_alt704$_cfasl, UNPROVIDED))) {
		thread.resetMultipleValues();
		{
		    SubLObject path = file_utilities.deconstruct_path(filename);
		    SubLObject local_filename = thread.secondMultipleValue();
		    thread.resetMultipleValues();
		    {
			SubLObject term_id = string_utilities.post_remove(string_utilities.post_remove(local_filename, $str_alt655$_html, UNPROVIDED), $str_alt704$_cfasl, UNPROVIDED);
			SubLObject v_term = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_id(term_id, UNPROVIDED);
			if (NIL != list_utilities.lengthG(path, TWO_INTEGER, UNPROVIDED)) {
			    thread.resetMultipleValues();
			    {
				SubLObject verbosity = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_from_path(path);
				SubLObject domain_mt = thread.secondMultipleValue();
				SubLObject language_mt = thread.thirdMultipleValue();
				thread.resetMultipleValues();
				return values(v_term, verbosity, domain_mt, language_mt);
			    }
			}
		    }
		}
	    }
	    return values(NIL, NIL, NIL, NIL);
	}
    }

    public static SubLObject fact_sheet_data_from_filename(final SubLObject filename) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	if ((NIL != string_utilities.ends_with(filename, fact_sheets.$str513$_html, UNPROVIDED)) || (NIL != string_utilities.ends_with(filename, fact_sheets.$str567$_cfasl, UNPROVIDED))) {
	    thread.resetMultipleValues();
	    final SubLObject path = file_utilities.deconstruct_path(filename);
	    final SubLObject local_filename = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    final SubLObject term_id = string_utilities.post_remove(string_utilities.post_remove(local_filename, fact_sheets.$str513$_html, UNPROVIDED), fact_sheets.$str567$_cfasl, UNPROVIDED);
	    final SubLObject v_term = fact_sheets.fact_sheet_term_from_id(term_id, UNPROVIDED);
	    if (NIL != list_utilities.lengthG(path, TWO_INTEGER, UNPROVIDED)) {
		thread.resetMultipleValues();
		final SubLObject verbosity = fact_sheets.fact_sheet_data_from_path(path);
		final SubLObject domain_mt = thread.secondMultipleValue();
		final SubLObject language_mt = thread.thirdMultipleValue();
		thread.resetMultipleValues();
		return values(v_term, verbosity, domain_mt, language_mt);
	    }
	}
	return values(NIL, NIL, NIL, NIL);
    }

    public static final SubLObject fact_sheet_data_from_path_alt(SubLObject path) {
	while ((NIL != list_utilities.non_empty_list_p(path)) && (NIL == com.cyc.cycjava.cycl.fact_sheets.possible_fact_sheet_term_id_p(list_utilities.last_one(path)))) {
	    path = butlast(path, UNPROVIDED);
	}
	if (NIL != list_utilities.lengthG(path, TWO_INTEGER, UNPROVIDED)) {
	    {
		SubLObject datum = last(path, THREE_INTEGER);
		SubLObject current = datum;
		SubLObject verbosity_string = NIL;
		SubLObject domain_mt_id = NIL;
		SubLObject language_mt_id = NIL;
		destructuring_bind_must_consp(current, datum, $list_alt782);
		verbosity_string = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, $list_alt782);
		domain_mt_id = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, $list_alt782);
		language_mt_id = current.first();
		current = current.rest();
		if (NIL == current) {
		    {
			SubLObject verbosity = find_symbol(Strings.string_upcase(verbosity_string, UNPROVIDED, UNPROVIDED), find_package($$$KEYWORD));
			SubLObject domain_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_id(domain_mt_id, UNPROVIDED);
			SubLObject language_mt = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_id(language_mt_id, UNPROVIDED);
			return values(verbosity, domain_mt, language_mt);
		    }
		} else {
		    cdestructuring_bind_error(datum, $list_alt782);
		}
	    }
	}
	return values(NIL, NIL, NIL);
    }

    public static SubLObject fact_sheet_data_from_path(SubLObject path) {
	while ((NIL != list_utilities.non_empty_list_p(path)) && (NIL == fact_sheets.possible_fact_sheet_term_id_p(list_utilities.last_one(path)))) {
	    path = butlast(path, UNPROVIDED);
	}
	if (NIL != list_utilities.lengthG(path, TWO_INTEGER, UNPROVIDED)) {
	    SubLObject current;
	    final SubLObject datum = current = last(path, THREE_INTEGER);
	    SubLObject verbosity_string = NIL;
	    SubLObject domain_mt_id = NIL;
	    SubLObject language_mt_id = NIL;
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list652);
	    verbosity_string = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list652);
	    domain_mt_id = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list652);
	    language_mt_id = current.first();
	    current = current.rest();
	    if (NIL == current) {
		final SubLObject verbosity = find_symbol(Strings.string_upcase(verbosity_string, UNPROVIDED, UNPROVIDED), find_package(fact_sheets.$$$KEYWORD));
		final SubLObject domain_mt = fact_sheets.fact_sheet_term_from_id(domain_mt_id, UNPROVIDED);
		final SubLObject language_mt = fact_sheets.fact_sheet_term_from_id(language_mt_id, UNPROVIDED);
		return values(verbosity, domain_mt, language_mt);
	    }
	    cdestructuring_bind_error(datum, fact_sheets.$list652);
	}
	return values(NIL, NIL, NIL);
    }

    public static final SubLObject clear_fact_sheet_directory_from_list_alt() {
	{
	    SubLObject cs = $fact_sheet_directory_from_list_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_fact_sheet_directory_from_list() {
	final SubLObject cs = fact_sheets.$fact_sheet_directory_from_list_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_fact_sheet_directory_from_list_alt(SubLObject directory_list) {
	if (directory_list == UNPROVIDED) {
	    directory_list = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_path();
	}
	return memoization_state.caching_state_remove_function_results_with_args($fact_sheet_directory_from_list_caching_state$.getGlobalValue(), list(directory_list), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_fact_sheet_directory_from_list(SubLObject directory_list) {
	if (directory_list == UNPROVIDED) {
	    directory_list = fact_sheets.fact_sheet_data_path();
	}
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_directory_from_list_caching_state$.getGlobalValue(), list(directory_list), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_directory_from_list_internal_alt(SubLObject directory_list) {
	return cconcatenate(string_utilities.bunge(directory_list, CHAR_slash), $str_alt205$_);
    }

    public static SubLObject fact_sheet_directory_from_list_internal(final SubLObject directory_list) {
	return cconcatenate(string_utilities.bunge(directory_list, CHAR_slash), fact_sheets.$str500$_);
    }

    public static final SubLObject fact_sheet_directory_from_list_alt(SubLObject directory_list) {
	if (directory_list == UNPROVIDED) {
	    directory_list = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_path();
	}
	{
	    SubLObject caching_state = $fact_sheet_directory_from_list_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(FACT_SHEET_DIRECTORY_FROM_LIST, $fact_sheet_directory_from_list_caching_state$, NIL, EQUAL, ONE_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject results = memoization_state.caching_state_lookup(caching_state, directory_list, $kw127$_MEMOIZED_ITEM_NOT_FOUND_);
		if (results == $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_directory_from_list_internal(directory_list)));
		    memoization_state.caching_state_put(caching_state, directory_list, results, UNPROVIDED);
		}
		return memoization_state.caching_results(results);
	    }
	}
    }

    public static SubLObject fact_sheet_directory_from_list(SubLObject directory_list) {
	if (directory_list == UNPROVIDED) {
	    directory_list = fact_sheets.fact_sheet_data_path();
	}
	SubLObject caching_state = fact_sheets.$fact_sheet_directory_from_list_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.FACT_SHEET_DIRECTORY_FROM_LIST, fact_sheets.$fact_sheet_directory_from_list_caching_state$, NIL, EQUAL, ONE_INTEGER, ZERO_INTEGER);
	}
	SubLObject results = memoization_state.caching_state_lookup(caching_state, directory_list, memoization_state.$memoized_item_not_found$.getGlobalValue());
	if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    results = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_directory_from_list_internal(directory_list)));
	    memoization_state.caching_state_put(caching_state, directory_list, results, UNPROVIDED);
	}
	return memoization_state.caching_results(results);
    }

    public static final SubLObject fact_sheet_update_term_prioritizer_print_function_trampoline_alt(SubLObject v_object, SubLObject stream) {
	com.cyc.cycjava.cycl.fact_sheets.pprint_fsut_prioritizer(v_object, stream, ZERO_INTEGER);
	return NIL;
    }

    public static SubLObject fact_sheet_update_term_prioritizer_print_function_trampoline(final SubLObject v_object, final SubLObject stream) {
	fact_sheets.pprint_fsut_prioritizer(v_object, stream, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject fact_sheet_update_term_prioritizer_p_alt(SubLObject v_object) {
	return v_object.getClass() == com.cyc.cycjava.cycl.fact_sheets.$fact_sheet_update_term_prioritizer_native.class ? ((SubLObject) (T)) : NIL;
    }

    public static SubLObject fact_sheet_update_term_prioritizer_p(final SubLObject v_object) {
	return v_object.getClass() == com.cyc.cycjava.cycl.fact_sheets.$fact_sheet_update_term_prioritizer_native.class ? T : NIL;
    }

    public static final SubLObject fsut_prioritizer_stale_terms_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.getField2();
    }

    public static SubLObject fsut_prioritizer_stale_terms(final SubLObject v_object) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.getField2();
    }

    public static final SubLObject fsut_prioritizer_missing_terms_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.getField3();
    }

    public static SubLObject fsut_prioritizer_missing_terms(final SubLObject v_object) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.getField3();
    }

    public static final SubLObject fsut_prioritizer_up_to_date_terms_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.getField4();
    }

    public static SubLObject fsut_prioritizer_up_to_date_terms(final SubLObject v_object) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.getField4();
    }

    public static final SubLObject fsut_prioritizer_thread_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.getField5();
    }

    public static SubLObject fsut_prioritizer_thread(final SubLObject v_object) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.getField5();
    }

    public static final SubLObject fsut_prioritizer_should_sleepP_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.getField6();
    }

    public static SubLObject fsut_prioritizer_should_sleepP(final SubLObject v_object) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.getField6();
    }

    public static final SubLObject fsut_prioritizer_verbosity_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.getField7();
    }

    public static SubLObject fsut_prioritizer_verbosity(final SubLObject v_object) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.getField7();
    }

    public static final SubLObject fsut_prioritizer_domain_mt_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.getField8();
    }

    public static SubLObject fsut_prioritizer_domain_mt(final SubLObject v_object) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.getField8();
    }

    public static final SubLObject fsut_prioritizer_language_mt_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.getField9();
    }

    public static SubLObject fsut_prioritizer_language_mt(final SubLObject v_object) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.getField9();
    }

    public static final SubLObject fsut_prioritizer_nice_level_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.getField10();
    }

    public static SubLObject fsut_prioritizer_nice_level(final SubLObject v_object) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.getField10();
    }

    public static final SubLObject fsut_prioritizer_new_days_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.getField11();
    }

    public static SubLObject fsut_prioritizer_new_days(final SubLObject v_object) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.getField11();
    }

    public static final SubLObject _csetf_fsut_prioritizer_stale_terms_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.setField2(value);
    }

    public static SubLObject _csetf_fsut_prioritizer_stale_terms(final SubLObject v_object, final SubLObject value) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.setField2(value);
    }

    public static final SubLObject _csetf_fsut_prioritizer_missing_terms_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.setField3(value);
    }

    public static SubLObject _csetf_fsut_prioritizer_missing_terms(final SubLObject v_object, final SubLObject value) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.setField3(value);
    }

    public static final SubLObject _csetf_fsut_prioritizer_up_to_date_terms_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.setField4(value);
    }

    public static SubLObject _csetf_fsut_prioritizer_up_to_date_terms(final SubLObject v_object, final SubLObject value) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.setField4(value);
    }

    public static final SubLObject _csetf_fsut_prioritizer_thread_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.setField5(value);
    }

    public static SubLObject _csetf_fsut_prioritizer_thread(final SubLObject v_object, final SubLObject value) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.setField5(value);
    }

    public static final SubLObject _csetf_fsut_prioritizer_should_sleepP_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.setField6(value);
    }

    public static SubLObject _csetf_fsut_prioritizer_should_sleepP(final SubLObject v_object, final SubLObject value) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.setField6(value);
    }

    public static final SubLObject _csetf_fsut_prioritizer_verbosity_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.setField7(value);
    }

    public static SubLObject _csetf_fsut_prioritizer_verbosity(final SubLObject v_object, final SubLObject value) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.setField7(value);
    }

    public static final SubLObject _csetf_fsut_prioritizer_domain_mt_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.setField8(value);
    }

    public static SubLObject _csetf_fsut_prioritizer_domain_mt(final SubLObject v_object, final SubLObject value) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.setField8(value);
    }

    public static final SubLObject _csetf_fsut_prioritizer_language_mt_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.setField9(value);
    }

    public static SubLObject _csetf_fsut_prioritizer_language_mt(final SubLObject v_object, final SubLObject value) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.setField9(value);
    }

    public static final SubLObject _csetf_fsut_prioritizer_nice_level_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.setField10(value);
    }

    public static SubLObject _csetf_fsut_prioritizer_nice_level(final SubLObject v_object, final SubLObject value) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.setField10(value);
    }

    public static final SubLObject _csetf_fsut_prioritizer_new_days_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, FACT_SHEET_UPDATE_TERM_PRIORITIZER_P);
	return v_object.setField11(value);
    }

    public static SubLObject _csetf_fsut_prioritizer_new_days(final SubLObject v_object, final SubLObject value) {
	assert NIL != fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) : "! fact_sheets.fact_sheet_update_term_prioritizer_p(v_object) " + "fact_sheets.fact_sheet_update_term_prioritizer_p error :" + v_object;
	return v_object.setField11(value);
    }

    public static final SubLObject make_fact_sheet_update_term_prioritizer_alt(SubLObject arglist) {
	if (arglist == UNPROVIDED) {
	    arglist = NIL;
	}
	{
	    SubLObject v_new = new com.cyc.cycjava.cycl.fact_sheets.$fact_sheet_update_term_prioritizer_native();
	    SubLObject next = NIL;
	    for (next = arglist; NIL != next; next = cddr(next)) {
		{
		    SubLObject current_arg = next.first();
		    SubLObject current_value = cadr(next);
		    SubLObject pcase_var = current_arg;
		    if (pcase_var.eql($STALE_TERMS)) {
			com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_stale_terms(v_new, current_value);
		    } else {
			if (pcase_var.eql($MISSING_TERMS)) {
			    com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_missing_terms(v_new, current_value);
			} else {
			    if (pcase_var.eql($UP_TO_DATE_TERMS)) {
				com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_up_to_date_terms(v_new, current_value);
			    } else {
				if (pcase_var.eql($THREAD)) {
				    com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_thread(v_new, current_value);
				} else {
				    if (pcase_var.eql($kw817$SHOULD_SLEEP_)) {
					com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_should_sleepP(v_new, current_value);
				    } else {
					if (pcase_var.eql($VERBOSITY)) {
					    com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_verbosity(v_new, current_value);
					} else {
					    if (pcase_var.eql($DOMAIN_MT)) {
						com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_domain_mt(v_new, current_value);
					    } else {
						if (pcase_var.eql($LANGUAGE_MT)) {
						    com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_language_mt(v_new, current_value);
						} else {
						    if (pcase_var.eql($NICE_LEVEL)) {
							com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_nice_level(v_new, current_value);
						    } else {
							if (pcase_var.eql($NEW_DAYS)) {
							    com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_new_days(v_new, current_value);
							} else {
							    Errors.error($str_alt822$Invalid_slot__S_for_construction_, current_arg);
							}
						    }
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	    return v_new;
	}
    }

    public static SubLObject make_fact_sheet_update_term_prioritizer(SubLObject arglist) {
	if (arglist == UNPROVIDED) {
	    arglist = NIL;
	}
	final SubLObject v_new = new com.cyc.cycjava.cycl.fact_sheets.$fact_sheet_update_term_prioritizer_native();
	SubLObject next;
	SubLObject current_arg;
	SubLObject current_value;
	SubLObject pcase_var;
	for (next = NIL, next = arglist; NIL != next; next = cddr(next)) {
	    current_arg = next.first();
	    current_value = cadr(next);
	    pcase_var = current_arg;
	    if (pcase_var.eql($STALE_TERMS)) {
		fact_sheets._csetf_fsut_prioritizer_stale_terms(v_new, current_value);
	    } else if (pcase_var.eql($MISSING_TERMS)) {
		fact_sheets._csetf_fsut_prioritizer_missing_terms(v_new, current_value);
	    } else if (pcase_var.eql(fact_sheets.$UP_TO_DATE_TERMS)) {
		fact_sheets._csetf_fsut_prioritizer_up_to_date_terms(v_new, current_value);
	    } else if (pcase_var.eql($THREAD)) {
		fact_sheets._csetf_fsut_prioritizer_thread(v_new, current_value);
	    } else if (pcase_var.eql(fact_sheets.$kw688$SHOULD_SLEEP_)) {
		fact_sheets._csetf_fsut_prioritizer_should_sleepP(v_new, current_value);
	    } else if (pcase_var.eql($VERBOSITY)) {
		fact_sheets._csetf_fsut_prioritizer_verbosity(v_new, current_value);
	    } else if (pcase_var.eql($DOMAIN_MT)) {
		fact_sheets._csetf_fsut_prioritizer_domain_mt(v_new, current_value);
	    } else if (pcase_var.eql($LANGUAGE_MT)) {
		fact_sheets._csetf_fsut_prioritizer_language_mt(v_new, current_value);
	    } else if (pcase_var.eql($NICE_LEVEL)) {
		fact_sheets._csetf_fsut_prioritizer_nice_level(v_new, current_value);
	    } else if (pcase_var.eql($NEW_DAYS)) {
		fact_sheets._csetf_fsut_prioritizer_new_days(v_new, current_value);
	    } else {
		Errors.error(fact_sheets.$str694$Invalid_slot__S_for_construction_, current_arg);
	    }

	}
	return v_new;
    }

    public static SubLObject visit_defstruct_fact_sheet_update_term_prioritizer(final SubLObject obj, final SubLObject visitor_fn) {
	funcall(visitor_fn, obj, $BEGIN, fact_sheets.MAKE_FACT_SHEET_UPDATE_TERM_PRIORITIZER, TEN_INTEGER);
	funcall(visitor_fn, obj, $SLOT, $STALE_TERMS, fact_sheets.fsut_prioritizer_stale_terms(obj));
	funcall(visitor_fn, obj, $SLOT, $MISSING_TERMS, fact_sheets.fsut_prioritizer_missing_terms(obj));
	funcall(visitor_fn, obj, $SLOT, fact_sheets.$UP_TO_DATE_TERMS, fact_sheets.fsut_prioritizer_up_to_date_terms(obj));
	funcall(visitor_fn, obj, $SLOT, $THREAD, fact_sheets.fsut_prioritizer_thread(obj));
	funcall(visitor_fn, obj, $SLOT, fact_sheets.$kw688$SHOULD_SLEEP_, fact_sheets.fsut_prioritizer_should_sleepP(obj));
	funcall(visitor_fn, obj, $SLOT, $VERBOSITY, fact_sheets.fsut_prioritizer_verbosity(obj));
	funcall(visitor_fn, obj, $SLOT, $DOMAIN_MT, fact_sheets.fsut_prioritizer_domain_mt(obj));
	funcall(visitor_fn, obj, $SLOT, $LANGUAGE_MT, fact_sheets.fsut_prioritizer_language_mt(obj));
	funcall(visitor_fn, obj, $SLOT, $NICE_LEVEL, fact_sheets.fsut_prioritizer_nice_level(obj));
	funcall(visitor_fn, obj, $SLOT, $NEW_DAYS, fact_sheets.fsut_prioritizer_new_days(obj));
	funcall(visitor_fn, obj, $END, fact_sheets.MAKE_FACT_SHEET_UPDATE_TERM_PRIORITIZER, TEN_INTEGER);
	return obj;
    }

    public static SubLObject visit_defstruct_object_fact_sheet_update_term_prioritizer_method(final SubLObject obj, final SubLObject visitor_fn) {
	return fact_sheets.visit_defstruct_fact_sheet_update_term_prioritizer(obj, visitor_fn);
    }

    public static final SubLObject pprint_fsut_prioritizer_alt(SubLObject fsut_prioritizer, SubLObject stream, SubLObject depth) {
	if (stream == UNPROVIDED) {
	    stream = NIL;
	}
	if (depth == UNPROVIDED) {
	    depth = NIL;
	}
	format(stream, $str_alt823$__PRIORITIZER_stale__S_missing__S, new SubLObject[] { queues.p_queue_size(com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_stale_terms(fsut_prioritizer)), queues.p_queue_size(com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_missing_terms(fsut_prioritizer)),
		queues.p_queue_size(com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_up_to_date_terms(fsut_prioritizer)) });
	return NIL;
    }

    public static SubLObject pprint_fsut_prioritizer(final SubLObject fsut_prioritizer, SubLObject stream, SubLObject depth) {
	if (stream == UNPROVIDED) {
	    stream = NIL;
	}
	if (depth == UNPROVIDED) {
	    depth = NIL;
	}
	format(stream, fact_sheets.$str700$__PRIORITIZER_stale__S_missing__S,
		new SubLObject[] { queues.p_queue_size(fact_sheets.fsut_prioritizer_stale_terms(fsut_prioritizer)), queues.p_queue_size(fact_sheets.fsut_prioritizer_missing_terms(fsut_prioritizer)), queues.p_queue_size(fact_sheets.fsut_prioritizer_up_to_date_terms(fsut_prioritizer)) });
	return NIL;
    }

    public static final SubLObject register_fsut_prioritizer_alt(SubLObject prioritizer) {
	{
	    SubLObject key = list(com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_verbosity(prioritizer), com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_domain_mt(prioritizer), com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_language_mt(prioritizer),
		    com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_new_days(prioritizer));
	    dictionary.dictionary_enter($fact_sheet_update_term_prioritizers$.getGlobalValue(), key, prioritizer);
	}
	return $fact_sheet_update_term_prioritizers$.getGlobalValue();
    }

    public static SubLObject register_fsut_prioritizer(final SubLObject prioritizer) {
	final SubLObject key = list(fact_sheets.fsut_prioritizer_verbosity(prioritizer), fact_sheets.fsut_prioritizer_domain_mt(prioritizer), fact_sheets.fsut_prioritizer_language_mt(prioritizer), fact_sheets.fsut_prioritizer_new_days(prioritizer));
	dictionary.dictionary_enter(fact_sheets.$fact_sheet_update_term_prioritizers$.getGlobalValue(), key, prioritizer);
	return fact_sheets.$fact_sheet_update_term_prioritizers$.getGlobalValue();
    }

    public static final SubLObject all_fact_sheet_update_term_prioritizers_alt() {
	return dictionary.dictionary_values($fact_sheet_update_term_prioritizers$.getGlobalValue());
    }

    public static SubLObject all_fact_sheet_update_term_prioritizers() {
	return dictionary.dictionary_values(fact_sheets.$fact_sheet_update_term_prioritizers$.getGlobalValue());
    }

    public static final SubLObject find_fsut_prioritizer_alt(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject new_days) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (new_days == UNPROVIDED) {
	    new_days = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_default_new_days();
	}
	{
	    SubLObject key = list(verbosity, domain_mt, language_mt, new_days);
	    return dictionary.dictionary_lookup($fact_sheet_update_term_prioritizers$.getGlobalValue(), key, UNPROVIDED);
	}
    }

    public static SubLObject find_fsut_prioritizer(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject new_days) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (new_days == UNPROVIDED) {
	    new_days = fact_sheets.fsut_prioritizer_default_new_days();
	}
	final SubLObject key = list(verbosity, domain_mt, language_mt, new_days);
	return dictionary.dictionary_lookup(fact_sheets.$fact_sheet_update_term_prioritizers$.getGlobalValue(), key, UNPROVIDED);
    }

    public static final SubLObject find_or_create_fact_sheet_update_term_prioritizer_alt(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject new_days) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (new_days == UNPROVIDED) {
	    new_days = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_default_new_days();
	}
	{
	    SubLObject existing = com.cyc.cycjava.cycl.fact_sheets.find_fsut_prioritizer(verbosity, domain_mt, language_mt, new_days);
	    return NIL != existing ? ((SubLObject) (existing)) : com.cyc.cycjava.cycl.fact_sheets.new_fact_sheet_update_term_prioritizer(verbosity, domain_mt, language_mt, new_days, UNPROVIDED);
	}
    }

    public static SubLObject find_or_create_fact_sheet_update_term_prioritizer(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject new_days) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (new_days == UNPROVIDED) {
	    new_days = fact_sheets.fsut_prioritizer_default_new_days();
	}
	final SubLObject existing = fact_sheets.find_fsut_prioritizer(verbosity, domain_mt, language_mt, new_days);
	return NIL != existing ? existing : fact_sheets.new_fact_sheet_update_term_prioritizer(verbosity, domain_mt, language_mt, new_days, UNPROVIDED);
    }

    public static final SubLObject fsut_prioritizer_max_nice_level_alt() {
	return $fsut_prioritizer_max_nice_level$.getGlobalValue();
    }

    public static SubLObject fsut_prioritizer_max_nice_level() {
	return fact_sheets.$fsut_prioritizer_max_nice_level$.getGlobalValue();
    }

    public static final SubLObject fsut_prioritizer_min_nice_level_alt() {
	return $fsut_prioritizer_min_nice_level$.getGlobalValue();
    }

    public static SubLObject fsut_prioritizer_min_nice_level() {
	return fact_sheets.$fsut_prioritizer_min_nice_level$.getGlobalValue();
    }

    public static final SubLObject fsut_prioritizer_default_new_days_alt() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    return $fsut_prioritizer_default_new_days$.getDynamicValue(thread);
	}
    }

    public static SubLObject fsut_prioritizer_default_new_days() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	return fact_sheets.$fsut_prioritizer_default_new_days$.getDynamicValue(thread);
    }

    public static final SubLObject new_fact_sheet_update_term_prioritizer_alt(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject nice_level, SubLObject new_days) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (nice_level == UNPROVIDED) {
	    nice_level = $fsut_prioritizer_default_nice_level$.getDynamicValue();
	}
	if (new_days == UNPROVIDED) {
	    new_days = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_default_new_days();
	}
	{
	    SubLObject prioritizer = com.cyc.cycjava.cycl.fact_sheets.make_fact_sheet_update_term_prioritizer(UNPROVIDED);
	    com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_stale_terms(prioritizer, queues.create_p_queue($int$1000, symbol_function(FSUT_PRIORITIZER_QUEUE_RANK_FUNC), symbol_function(FSUT_PRIORITIZER_QUEUE_COMP_FUNC)));
	    com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_missing_terms(prioritizer, queues.create_p_queue($int$1000, symbol_function(FSUT_PRIORITIZER_QUEUE_RANK_FUNC), symbol_function(FSUT_PRIORITIZER_QUEUE_COMP_FUNC)));
	    com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_up_to_date_terms(prioritizer, queues.create_p_queue($int$1000, symbol_function(FSUT_PRIORITIZER_QUEUE_RANK_FUNC), symbol_function(FSUT_PRIORITIZER_QUEUE_COMP_FUNC)));
	    com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_verbosity(prioritizer, verbosity);
	    com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_domain_mt(prioritizer, domain_mt);
	    com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_language_mt(prioritizer, language_mt);
	    com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_nice_level(prioritizer, nice_level);
	    com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_new_days(prioritizer, new_days);
	    com.cyc.cycjava.cycl.fact_sheets.register_fsut_prioritizer(prioritizer);
	    com.cyc.cycjava.cycl.fact_sheets.start_fsut_prioritizer(prioritizer);
	    return prioritizer;
	}
    }

    public static SubLObject new_fact_sheet_update_term_prioritizer(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject nice_level, SubLObject new_days) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (nice_level == UNPROVIDED) {
	    nice_level = fact_sheets.$fsut_prioritizer_default_nice_level$.getDynamicValue();
	}
	if (new_days == UNPROVIDED) {
	    new_days = fact_sheets.fsut_prioritizer_default_new_days();
	}
	final SubLObject prioritizer = fact_sheets.make_fact_sheet_update_term_prioritizer(UNPROVIDED);
	fact_sheets._csetf_fsut_prioritizer_stale_terms(prioritizer, queues.create_p_queue($int$1000, symbol_function(fact_sheets.FSUT_PRIORITIZER_QUEUE_RANK_FUNC), symbol_function(fact_sheets.FSUT_PRIORITIZER_QUEUE_COMP_FUNC)));
	fact_sheets._csetf_fsut_prioritizer_missing_terms(prioritizer, queues.create_p_queue($int$1000, symbol_function(fact_sheets.FSUT_PRIORITIZER_QUEUE_RANK_FUNC), symbol_function(fact_sheets.FSUT_PRIORITIZER_QUEUE_COMP_FUNC)));
	fact_sheets._csetf_fsut_prioritizer_up_to_date_terms(prioritizer, queues.create_p_queue($int$1000, symbol_function(fact_sheets.FSUT_PRIORITIZER_QUEUE_RANK_FUNC), symbol_function(fact_sheets.FSUT_PRIORITIZER_QUEUE_COMP_FUNC)));
	fact_sheets._csetf_fsut_prioritizer_verbosity(prioritizer, verbosity);
	fact_sheets._csetf_fsut_prioritizer_domain_mt(prioritizer, domain_mt);
	fact_sheets._csetf_fsut_prioritizer_language_mt(prioritizer, language_mt);
	fact_sheets._csetf_fsut_prioritizer_nice_level(prioritizer, nice_level);
	fact_sheets._csetf_fsut_prioritizer_new_days(prioritizer, new_days);
	fact_sheets.register_fsut_prioritizer(prioritizer);
	fact_sheets.start_fsut_prioritizer(prioritizer);
	return prioritizer;
    }

    public static final SubLObject fsut_prioritizer_queue_rank_func_alt(SubLObject item) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (item.isCons()) {
		return item.rest();
	    } else {
		{
		    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
		    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
			format(stream, $str_alt829$Non_cons_item_in_prioritizer_queu, item);
			force_output(stream);
		    }
		}
		return item;
	    }
	}
    }

    public static SubLObject fsut_prioritizer_queue_rank_func(final SubLObject item) {
	if (item.isCons()) {
	    return item.rest();
	}
	final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
	if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
	    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
	    format(stream, fact_sheets.$str706$Non_cons_item_in_prioritizer_queu, item);
	    force_output(stream);
	}
	return item;
    }

    public static final SubLObject fsut_prioritizer_queue_comp_func_alt(SubLObject priority1, SubLObject priority2) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL == subl_promotions.non_negative_integer_p(priority1)) {
		{
		    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
		    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
			format(stream, $str_alt830$Non_non_negative_integer_priority, priority1);
			force_output(stream);
		    }
		}
		return NIL;
	    } else {
		if (NIL == subl_promotions.non_negative_integer_p(priority2)) {
		    {
			SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
			if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
			    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
			    format(stream, $str_alt830$Non_non_negative_integer_priority, priority2);
			    force_output(stream);
			}
		    }
		    return NIL;
		} else {
		    return numG(priority1, priority2);
		}
	    }
	}
    }

    public static SubLObject fsut_prioritizer_queue_comp_func(final SubLObject priority1, final SubLObject priority2) {
	if (NIL == subl_promotions.non_negative_integer_p(priority1)) {
	    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
	    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
		format(stream, fact_sheets.$str707$Non_non_negative_integer_priority, priority1);
		force_output(stream);
	    }
	    return NIL;
	}
	if (NIL == subl_promotions.non_negative_integer_p(priority2)) {
	    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
	    if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
		format(stream, fact_sheets.$str707$Non_non_negative_integer_priority, priority2);
		force_output(stream);
	    }
	    return NIL;
	}
	return numG(priority1, priority2);
    }

    public static final SubLObject renice_fsut_prioritizer_alt(SubLObject prioritizer, SubLObject nice_level) {
	if (nice_level == UNPROVIDED) {
	    nice_level = $fsut_prioritizer_default_nice_level$.getDynamicValue();
	}
	com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_nice_level(prioritizer, nice_level);
	com.cyc.cycjava.cycl.fact_sheets.start_fsut_prioritizer(prioritizer);
	return prioritizer;
    }

    public static SubLObject renice_fsut_prioritizer(final SubLObject prioritizer, SubLObject nice_level) {
	if (nice_level == UNPROVIDED) {
	    nice_level = fact_sheets.$fsut_prioritizer_default_nice_level$.getDynamicValue();
	}
	fact_sheets._csetf_fsut_prioritizer_nice_level(prioritizer, nice_level);
	fact_sheets.start_fsut_prioritizer(prioritizer);
	return prioritizer;
    }

    public static final SubLObject start_fsut_prioritizer_alt(SubLObject prioritizer) {
	{
	    SubLObject thread = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_thread(prioritizer);
	    com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_should_sleepP(prioritizer, NIL);
	    if (NIL == valid_process_p(thread)) {
		thread = process_utilities.make_cyc_server_process_with_args($$$Fact_Sheet_Prioritizer, FSUT_PRIORITIZER_PLACE_TERMS, list(prioritizer));
		com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_thread(prioritizer, thread);
	    }
	    return thread;
	}
    }

    public static SubLObject start_fsut_prioritizer(final SubLObject prioritizer) {
	SubLObject thread = fact_sheets.fsut_prioritizer_thread(prioritizer);
	fact_sheets._csetf_fsut_prioritizer_should_sleepP(prioritizer, NIL);
	if (NIL == valid_process_p(thread)) {
	    thread = process_utilities.make_cyc_server_process_with_args(fact_sheets.$$$Fact_Sheet_Prioritizer, fact_sheets.FSUT_PRIORITIZER_PLACE_TERMS, list(prioritizer));
	    fact_sheets._csetf_fsut_prioritizer_thread(prioritizer, thread);
	}
	return thread;
    }

    public static final SubLObject stop_all_fsut_prioritizers_alt() {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents($fact_sheet_update_term_prioritizers$.getGlobalValue()));
		while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
		    thread.resetMultipleValues();
		    {
			SubLObject key = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
			SubLObject prioritizer = thread.secondMultipleValue();
			thread.resetMultipleValues();
			com.cyc.cycjava.cycl.fact_sheets.stop_fsut_prioritizer(prioritizer);
			iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
		    }
		}
		dictionary_contents.do_dictionary_contents_finalize(iteration_state);
	    }
	    return $STOPPED;
	}
    }

    public static SubLObject stop_all_fsut_prioritizers() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject iteration_state;
	for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(fact_sheets.$fact_sheet_update_term_prioritizers$.getGlobalValue())); NIL == dictionary_contents.do_dictionary_contents_doneP(
		iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
	    thread.resetMultipleValues();
	    final SubLObject key = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
	    final SubLObject prioritizer = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    fact_sheets.stop_fsut_prioritizer(prioritizer);
	}
	dictionary_contents.do_dictionary_contents_finalize(iteration_state);
	return $STOPPED;
    }

    public static final SubLObject stop_fsut_prioritizer_alt(SubLObject prioritizer) {
	com.cyc.cycjava.cycl.fact_sheets._csetf_fsut_prioritizer_should_sleepP(prioritizer, T);
	return prioritizer;
    }

    public static SubLObject stop_fsut_prioritizer(final SubLObject prioritizer) {
	fact_sheets._csetf_fsut_prioritizer_should_sleepP(prioritizer, T);
	return prioritizer;
    }

    public static final SubLObject fsut_prioritizer_next_term_alt(SubLObject prioritizer, SubLObject end_hour) {
	if (end_hour == UNPROVIDED) {
	    end_hour = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject missing_weight = $int$50;
		SubLObject stale_weight = FIVE_INTEGER;
		SubLObject up_to_date_weight = ONE_INTEGER;
		SubLObject v_term = NIL;
		SubLObject stopP = NIL;
		SubLObject verbosity = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_verbosity(prioritizer);
		SubLObject domain_mt = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_domain_mt(prioritizer);
		SubLObject language_mt = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_language_mt(prioritizer);
		SubLObject min_terms = $int$100;
		if (NIL != com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_empty_p(prioritizer, min_terms)) {
		    if (NIL != com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_should_sleepP(prioritizer)) {
			com.cyc.cycjava.cycl.fact_sheets.start_fsut_prioritizer(prioritizer);
		    }
		    while (NIL != com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_empty_p(prioritizer, min_terms)) {
			sleep(ONE_INTEGER);
		    }
		}
		while (!((NIL != v_term) || (NIL != stopP))) {
		    if ((NIL != end_hour) && (NIL != com.cyc.cycjava.cycl.fact_sheets.time_of_day_has_arrivedP(ZERO_INTEGER, ZERO_INTEGER, end_hour))) {
			stopP = T;
		    }
		    {
			SubLObject dice_roll = random.random(add(missing_weight, stale_weight, up_to_date_weight));
			if (dice_roll.numL(up_to_date_weight) && (NIL == queues.p_queue_empty_p(com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_up_to_date_terms(prioritizer)))) {
			    v_term = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_next_up_to_date_term(prioritizer);
			} else {
			    if (dice_roll.numL(add(stale_weight, up_to_date_weight)) && (NIL == queues.p_queue_empty_p(com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_stale_terms(prioritizer)))) {
				v_term = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_next_stale_term(prioritizer);
			    } else {
				if (NIL == queues.p_queue_empty_p(com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_missing_terms(prioritizer))) {
				    v_term = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_next_missing_term(prioritizer);
				} else {
				    if (NIL == queues.p_queue_empty_p(com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_stale_terms(prioritizer))) {
					v_term = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_next_stale_term(prioritizer);
				    } else {
					v_term = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_next_up_to_date_term(prioritizer);
				    }
				}
			    }
			}
			if (NIL == v_term) {
			    {
				SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
				if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
				    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream);
				    format(stream, $str_alt835$Had_trouble_getting_a_term_from__, prioritizer);
				    force_output(stream);
				}
			    }
			    if (NIL != com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_should_sleepP(prioritizer)) {
				com.cyc.cycjava.cycl.fact_sheets.start_fsut_prioritizer(prioritizer);
			    }
			    while (NIL != com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_empty_p(prioritizer, min_terms)) {
				sleep(ONE_INTEGER);
			    }
			} else {
			    if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_update_already_undertakenP(v_term, verbosity, domain_mt, language_mt)) {
				{
				    SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
				    if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
					com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
					format(stream, $str_alt836$Skipping__S__Update_already_under, v_term);
					force_output(stream);
				    }
				}
				v_term = NIL;
			    }
			}
		    }
		}
		return v_term;
	    }
	}
    }

    public static SubLObject fsut_prioritizer_next_term(final SubLObject prioritizer, SubLObject end_hour) {
	if (end_hour == UNPROVIDED) {
	    end_hour = NIL;
	}
	final SubLObject missing_weight = fact_sheets.$int$50;
	final SubLObject stale_weight = FIVE_INTEGER;
	final SubLObject up_to_date_weight = ONE_INTEGER;
	SubLObject v_term = NIL;
	SubLObject stopP = NIL;
	final SubLObject verbosity = fact_sheets.fsut_prioritizer_verbosity(prioritizer);
	final SubLObject domain_mt = fact_sheets.fsut_prioritizer_domain_mt(prioritizer);
	final SubLObject language_mt = fact_sheets.fsut_prioritizer_language_mt(prioritizer);
	final SubLObject min_terms = $int$100;
	if (NIL != fact_sheets.fsut_prioritizer_empty_p(prioritizer, min_terms)) {
	    if (NIL != fact_sheets.fsut_prioritizer_should_sleepP(prioritizer)) {
		fact_sheets.start_fsut_prioritizer(prioritizer);
	    }
	    while (NIL != fact_sheets.fsut_prioritizer_empty_p(prioritizer, min_terms)) {
		sleep(ONE_INTEGER);
	    }
	}
	while ((NIL == v_term) && (NIL == stopP)) {
	    if ((NIL != end_hour) && (NIL != fact_sheets.time_of_day_has_arrivedP(ZERO_INTEGER, ZERO_INTEGER, end_hour))) {
		stopP = T;
	    }
	    final SubLObject dice_roll = random.random(add(missing_weight, stale_weight, up_to_date_weight));
	    if (dice_roll.numL(up_to_date_weight) && (NIL == queues.p_queue_empty_p(fact_sheets.fsut_prioritizer_up_to_date_terms(prioritizer)))) {
		v_term = fact_sheets.fsut_prioritizer_next_up_to_date_term(prioritizer);
	    } else if (dice_roll.numL(add(stale_weight, up_to_date_weight)) && (NIL == queues.p_queue_empty_p(fact_sheets.fsut_prioritizer_stale_terms(prioritizer)))) {
		v_term = fact_sheets.fsut_prioritizer_next_stale_term(prioritizer);
	    } else if (NIL == queues.p_queue_empty_p(fact_sheets.fsut_prioritizer_missing_terms(prioritizer))) {
		v_term = fact_sheets.fsut_prioritizer_next_missing_term(prioritizer);
	    } else if (NIL == queues.p_queue_empty_p(fact_sheets.fsut_prioritizer_stale_terms(prioritizer))) {
		v_term = fact_sheets.fsut_prioritizer_next_stale_term(prioritizer);
	    } else {
		v_term = fact_sheets.fsut_prioritizer_next_up_to_date_term(prioritizer);
	    }

	    if (NIL == v_term) {
		final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream);
		    format(stream, fact_sheets.$str712$Had_trouble_getting_a_term_from__, prioritizer);
		    force_output(stream);
		}
		if (NIL != fact_sheets.fsut_prioritizer_should_sleepP(prioritizer)) {
		    fact_sheets.start_fsut_prioritizer(prioritizer);
		}
		while (NIL != fact_sheets.fsut_prioritizer_empty_p(prioritizer, min_terms)) {
		    sleep(ONE_INTEGER);
		}
	    } else {
		if (NIL == fact_sheets.fact_sheet_term_update_already_undertakenP(v_term, verbosity, domain_mt, language_mt)) {
		    continue;
		}
		final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
		    format(stream, fact_sheets.$str713$Skipping__S__Update_already_under, v_term);
		    force_output(stream);
		}
		v_term = NIL;
	    }
	}
	return v_term;
    }

    public static final SubLObject fsut_prioritizer_empty_p_alt(SubLObject prioritizer, SubLObject min_terms) {
	if (min_terms == UNPROVIDED) {
	    min_terms = ONE_INTEGER;
	}
	return numL(add(queues.p_queue_size(com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_stale_terms(prioritizer)), queues.p_queue_size(com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_up_to_date_terms(prioritizer)),
		queues.p_queue_size(com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_missing_terms(prioritizer))), min_terms);
    }

    public static SubLObject fsut_prioritizer_empty_p(final SubLObject prioritizer, SubLObject min_terms) {
	if (min_terms == UNPROVIDED) {
	    min_terms = ONE_INTEGER;
	}
	return numL(add(queues.p_queue_size(fact_sheets.fsut_prioritizer_stale_terms(prioritizer)), queues.p_queue_size(fact_sheets.fsut_prioritizer_up_to_date_terms(prioritizer)), queues.p_queue_size(fact_sheets.fsut_prioritizer_missing_terms(prioritizer))), min_terms);
    }

    public static final SubLObject fsut_prioritizer_next_stale_term_alt(SubLObject prioritizer) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject verbosity = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_verbosity(prioritizer);
		SubLObject domain_mt = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_domain_mt(prioritizer);
		SubLObject language_mt = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_language_mt(prioritizer);
		SubLObject pq = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_stale_terms(prioritizer);
		while (NIL == queues.p_queue_empty_p(pq)) {
		    {
			SubLObject item = queues.p_dequeue(pq, UNPROVIDED);
			SubLObject datum = item;
			SubLObject current = datum;
			SubLObject v_term = NIL;
			SubLObject priority = NIL;
			destructuring_bind_must_consp(current, datum, $list_alt837);
			v_term = current.first();
			current = current.rest();
			priority = current;
			if (com.cyc.cycjava.cycl.fact_sheets.fact_sheet_status(v_term, verbosity, domain_mt, language_mt, UNPROVIDED) == $STALE) {
			    {
				SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
				if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
				    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
				    format(stream, $str_alt838$Dequeuing__S__Status__stale__Prio, v_term, priority);
				    force_output(stream);
				}
			    }
			    return v_term;
			}
		    }
		}
	    }
	    return NIL;
	}
    }

    public static SubLObject fsut_prioritizer_next_stale_term(final SubLObject prioritizer) {
	final SubLObject verbosity = fact_sheets.fsut_prioritizer_verbosity(prioritizer);
	final SubLObject domain_mt = fact_sheets.fsut_prioritizer_domain_mt(prioritizer);
	final SubLObject language_mt = fact_sheets.fsut_prioritizer_language_mt(prioritizer);
	final SubLObject pq = fact_sheets.fsut_prioritizer_stale_terms(prioritizer);
	while (NIL == queues.p_queue_empty_p(pq)) {
	    final SubLObject item = queues.p_dequeue(pq, UNPROVIDED);
	    SubLObject current;
	    final SubLObject datum = current = item;
	    SubLObject v_term = NIL;
	    SubLObject priority = NIL;
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list714);
	    v_term = current.first();
	    current = priority = current.rest();
	    if (fact_sheets.fact_sheet_status(v_term, verbosity, domain_mt, language_mt, UNPROVIDED) == $STALE) {
		final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
		    format(stream, fact_sheets.$str716$Dequeuing__S__Status__stale__Prio, v_term, priority);
		    force_output(stream);
		}
		return v_term;
	    }
	}
	return NIL;
    }

    public static final SubLObject fsut_prioritizer_next_missing_term_alt(SubLObject prioritizer) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject verbosity = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_verbosity(prioritizer);
		SubLObject domain_mt = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_domain_mt(prioritizer);
		SubLObject language_mt = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_language_mt(prioritizer);
		SubLObject pq = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_missing_terms(prioritizer);
		while (NIL == queues.p_queue_empty_p(pq)) {
		    {
			SubLObject item = queues.p_dequeue(pq, UNPROVIDED);
			SubLObject datum = item;
			SubLObject current = datum;
			SubLObject v_term = NIL;
			SubLObject priority = NIL;
			destructuring_bind_must_consp(current, datum, $list_alt837);
			v_term = current.first();
			current = current.rest();
			priority = current;
			if (com.cyc.cycjava.cycl.fact_sheets.fact_sheet_status(v_term, verbosity, domain_mt, language_mt, UNPROVIDED) == $MISSING) {
			    {
				SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
				if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
				    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
				    format(stream, $str_alt840$Dequeuing__S__Status__missing__Pr, v_term, priority);
				    force_output(stream);
				}
			    }
			    return v_term;
			}
		    }
		}
	    }
	    return NIL;
	}
    }

    public static SubLObject fsut_prioritizer_next_missing_term(final SubLObject prioritizer) {
	final SubLObject verbosity = fact_sheets.fsut_prioritizer_verbosity(prioritizer);
	final SubLObject domain_mt = fact_sheets.fsut_prioritizer_domain_mt(prioritizer);
	final SubLObject language_mt = fact_sheets.fsut_prioritizer_language_mt(prioritizer);
	final SubLObject pq = fact_sheets.fsut_prioritizer_missing_terms(prioritizer);
	while (NIL == queues.p_queue_empty_p(pq)) {
	    final SubLObject item = queues.p_dequeue(pq, UNPROVIDED);
	    SubLObject current;
	    final SubLObject datum = current = item;
	    SubLObject v_term = NIL;
	    SubLObject priority = NIL;
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list714);
	    v_term = current.first();
	    current = priority = current.rest();
	    if (fact_sheets.fact_sheet_status(v_term, verbosity, domain_mt, language_mt, UNPROVIDED) == $MISSING) {
		final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
		    format(stream, fact_sheets.$str718$Dequeuing__S__Status__missing__Pr, v_term, priority);
		    force_output(stream);
		}
		return v_term;
	    }
	}
	return NIL;
    }

    public static final SubLObject fsut_prioritizer_next_up_to_date_term_alt(SubLObject prioritizer) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject verbosity = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_verbosity(prioritizer);
		SubLObject domain_mt = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_domain_mt(prioritizer);
		SubLObject language_mt = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_language_mt(prioritizer);
		SubLObject pq = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_up_to_date_terms(prioritizer);
		while (NIL == queues.p_queue_empty_p(pq)) {
		    {
			SubLObject item = queues.p_dequeue(pq, UNPROVIDED);
			SubLObject datum = item;
			SubLObject current = datum;
			SubLObject v_term = NIL;
			SubLObject priority = NIL;
			destructuring_bind_must_consp(current, datum, $list_alt837);
			v_term = current.first();
			current = current.rest();
			priority = current;
			if (com.cyc.cycjava.cycl.fact_sheets.fact_sheet_status(v_term, verbosity, domain_mt, language_mt, UNPROVIDED) == $UP_TO_DATE) {
			    {
				SubLObject stream = $fact_sheet_log_stream$.getDynamicValue(thread);
				if (((T == stream) && (current_process() == subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
				    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream);
				    format(stream, $str_alt842$Dequeuing__S__Status__up_to_date_, v_term, priority);
				    force_output(stream);
				}
			    }
			    return v_term;
			}
		    }
		}
	    }
	    return NIL;
	}
    }

    public static SubLObject fsut_prioritizer_next_up_to_date_term(final SubLObject prioritizer) {
	final SubLObject verbosity = fact_sheets.fsut_prioritizer_verbosity(prioritizer);
	final SubLObject domain_mt = fact_sheets.fsut_prioritizer_domain_mt(prioritizer);
	final SubLObject language_mt = fact_sheets.fsut_prioritizer_language_mt(prioritizer);
	final SubLObject pq = fact_sheets.fsut_prioritizer_up_to_date_terms(prioritizer);
	while (NIL == queues.p_queue_empty_p(pq)) {
	    final SubLObject item = queues.p_dequeue(pq, UNPROVIDED);
	    SubLObject current;
	    final SubLObject datum = current = item;
	    SubLObject v_term = NIL;
	    SubLObject priority = NIL;
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list714);
	    v_term = current.first();
	    current = priority = current.rest();
	    if (fact_sheets.fact_sheet_status(v_term, verbosity, domain_mt, language_mt, UNPROVIDED) == fact_sheets.$UP_TO_DATE) {
		final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream) && current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && (NIL != output_stream_p(stream)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream);
		    format(stream, fact_sheets.$str720$Dequeuing__S__Status__up_to_date_, v_term, priority);
		    force_output(stream);
		}
		return v_term;
	    }
	}
	return NIL;
    }

    public static final SubLObject clear_fsut_prioritizer_sleep_interval_from_nice_level_alt() {
	{
	    SubLObject cs = $fsut_prioritizer_sleep_interval_from_nice_level_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_fsut_prioritizer_sleep_interval_from_nice_level() {
	final SubLObject cs = fact_sheets.$fsut_prioritizer_sleep_interval_from_nice_level_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_fsut_prioritizer_sleep_interval_from_nice_level_alt(SubLObject nice_level, SubLObject divisor) {
	if (divisor == UNPROVIDED) {
	    divisor = $fsut_prioritizer_divisor$.getGlobalValue();
	}
	return memoization_state.caching_state_remove_function_results_with_args($fsut_prioritizer_sleep_interval_from_nice_level_caching_state$.getGlobalValue(), list(nice_level, divisor), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_fsut_prioritizer_sleep_interval_from_nice_level(final SubLObject nice_level, SubLObject divisor) {
	if (divisor == UNPROVIDED) {
	    divisor = fact_sheets.$fsut_prioritizer_divisor$.getGlobalValue();
	}
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fsut_prioritizer_sleep_interval_from_nice_level_caching_state$.getGlobalValue(), list(nice_level, divisor), UNPROVIDED, UNPROVIDED);
    }

    /**
     * Sleep this many seconds between FORTs.
     */
    @LispMethod(comment = "Sleep this many seconds between FORTs.")
    public static final SubLObject fsut_prioritizer_sleep_interval_from_nice_level_internal_alt(SubLObject nice_level, SubLObject divisor) {
	return divide(add(TWENTY_INTEGER, nice_level), divisor);
    }

    @LispMethod(comment = "Sleep this many seconds between FORTs.")
    public static SubLObject fsut_prioritizer_sleep_interval_from_nice_level_internal(final SubLObject nice_level, final SubLObject divisor) {
	return divide(add(TWENTY_INTEGER, nice_level), divisor);
    }

    /**
    * Sleep this many seconds between FORTs.
    */

    public static final SubLObject fsut_prioritizer_sleep_interval_from_nice_level_alt(SubLObject nice_level, SubLObject divisor) {
	if (divisor == UNPROVIDED) {
	    divisor = $fsut_prioritizer_divisor$.getGlobalValue();
	}
	{
	    SubLObject caching_state = $fsut_prioritizer_sleep_interval_from_nice_level_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(FSUT_PRIORITIZER_SLEEP_INTERVAL_FROM_NICE_LEVEL, $fsut_prioritizer_sleep_interval_from_nice_level_caching_state$, NIL, EQ, TWO_INTEGER, $int$40);
	    }
	    {
		SubLObject sxhash = memoization_state.sxhash_calc_2(nice_level, divisor);
		SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
		if (collisions != $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    {
			SubLObject cdolist_list_var = collisions;
			SubLObject collision = NIL;
			for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), collision = cdolist_list_var.first()) {
			    {
				SubLObject cached_args = collision.first();
				SubLObject results2 = second(collision);
				if (nice_level == cached_args.first()) {
				    cached_args = cached_args.rest();
				    if (((NIL != cached_args) && (NIL == cached_args.rest())) && (divisor == cached_args.first())) {
					return memoization_state.caching_results(results2);
				    }
				}
			    }
			}
		    }
		}
		{
		    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_sleep_interval_from_nice_level_internal(nice_level, divisor)));
		    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(nice_level, divisor));
		    return memoization_state.caching_results(results);
		}
	    }
	}
    }

    public static SubLObject fsut_prioritizer_sleep_interval_from_nice_level(final SubLObject nice_level, SubLObject divisor) {
	if (divisor == UNPROVIDED) {
	    divisor = fact_sheets.$fsut_prioritizer_divisor$.getGlobalValue();
	}
	SubLObject caching_state = fact_sheets.$fsut_prioritizer_sleep_interval_from_nice_level_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.FSUT_PRIORITIZER_SLEEP_INTERVAL_FROM_NICE_LEVEL, fact_sheets.$fsut_prioritizer_sleep_interval_from_nice_level_caching_state$, NIL, EQ, TWO_INTEGER, fact_sheets.$int$40);
	}
	final SubLObject sxhash = memoization_state.sxhash_calc_2(nice_level, divisor);
	final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
	if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    SubLObject cdolist_list_var = collisions;
	    SubLObject collision = NIL;
	    collision = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cached_args = collision.first();
		final SubLObject results2 = second(collision);
		if (nice_level.eql(cached_args.first())) {
		    cached_args = cached_args.rest();
		    if (((NIL != cached_args) && (NIL == cached_args.rest())) && divisor.eql(cached_args.first())) {
			return memoization_state.caching_results(results2);
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		collision = cdolist_list_var.first();
	    }
	}
	final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fsut_prioritizer_sleep_interval_from_nice_level_internal(nice_level, divisor)));
	memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(nice_level, divisor));
	return memoization_state.caching_results(results3);
    }

    public static final SubLObject fsut_prioritizer_place_terms_alt(SubLObject prioritizer) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
		try {
		    $silent_progressP$.bind(T, thread);
		    while (true) {
			{
			    SubLObject message = $$$mapping_Cyc_FORTs;
			    SubLObject total = forts.fort_count();
			    SubLObject sofar = ZERO_INTEGER;
			    {
				SubLObject _prev_bind_0_483 = $last_percent_progress_index$.currentBinding(thread);
				SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
				SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
				SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
				try {
				    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
				    $last_percent_progress_prediction$.bind(NIL, thread);
				    $within_noting_percent_progress$.bind(T, thread);
				    $percent_progress_start_time$.bind(get_universal_time(), thread);
				    noting_percent_progress_preamble(message);
				    {
					SubLObject cdolist_list_var = forts.do_forts_tables();
					SubLObject table_var = NIL;
					for (table_var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), table_var = cdolist_list_var.first()) {
					    if (NIL == do_id_index_empty_p(table_var, $SKIP)) {
						{
						    SubLObject id = do_id_index_next_id(table_var, T, NIL, NIL);
						    SubLObject state_var = do_id_index_next_state(table_var, T, id, NIL);
						    SubLObject v_term = NIL;
						    while (NIL != id) {
							v_term = do_id_index_state_object(table_var, $SKIP, id, state_var);
							if (NIL != do_id_index_id_and_object_validP(id, v_term, $SKIP)) {
							    sofar = add(sofar, ONE_INTEGER);
							    note_percent_progress(sofar, total);
							    while (NIL != com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_should_sleepP(prioritizer)) {
								sleep(ONE_INTEGER);
							    }
							    if (NIL != com.cyc.cycjava.cycl.fact_sheets.term_ok_for_fact_sheet_p(v_term, eq(com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_verbosity(prioritizer), $MINI))) {
								com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_place_term(v_term, prioritizer);
								sleep(com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_sleep_interval_from_nice_level(com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_nice_level(prioritizer), UNPROVIDED));
							    }
							}
							id = do_id_index_next_id(table_var, T, id, state_var);
							state_var = do_id_index_next_state(table_var, T, id, state_var);
						    }
						}
					    }
					}
				    }
				    noting_percent_progress_postamble();
				} finally {
				    $percent_progress_start_time$.rebind(_prev_bind_3, thread);
				    $within_noting_percent_progress$.rebind(_prev_bind_2, thread);
				    $last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
				    $last_percent_progress_index$.rebind(_prev_bind_0_483, thread);
				}
			    }
			}
		    }
		} finally {
		    $silent_progressP$.rebind(_prev_bind_0, thread);
		}
	    }
	}
    }

    public static SubLObject fsut_prioritizer_place_terms(final SubLObject prioritizer) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
	try {
	    $silent_progressP$.bind(T, thread);
	    while (true) {
		final SubLObject message = fact_sheets.$$$mapping_Cyc_FORTs;
		final SubLObject total = forts.fort_count();
		SubLObject sofar = ZERO_INTEGER;
		final SubLObject _prev_bind_0_$415 = $last_percent_progress_index$.currentBinding(thread);
		final SubLObject _prev_bind_2 = $last_percent_progress_prediction$.currentBinding(thread);
		final SubLObject _prev_bind_3 = $within_noting_percent_progress$.currentBinding(thread);
		final SubLObject _prev_bind_4 = $percent_progress_start_time$.currentBinding(thread);
		try {
		    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
		    $last_percent_progress_prediction$.bind(NIL, thread);
		    $within_noting_percent_progress$.bind(T, thread);
		    $percent_progress_start_time$.bind(get_universal_time(), thread);
		    try {
			noting_percent_progress_preamble(message);
			SubLObject cdolist_list_var = forts.do_forts_tables();
			SubLObject table_var = NIL;
			table_var = cdolist_list_var.first();
			while (NIL != cdolist_list_var) {
			    final SubLObject idx = table_var;
			    if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
				final SubLObject idx_$416 = idx;
				if (NIL == id_index_dense_objects_empty_p(idx_$416, $SKIP)) {
				    final SubLObject vector_var = id_index_dense_objects(idx_$416);
				    final SubLObject backwardP_var = NIL;
				    SubLObject length;
				    SubLObject v_iteration;
				    SubLObject id;
				    SubLObject v_term;
				    for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
					id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
					v_term = aref(vector_var, id);
					if ((NIL == id_index_tombstone_p(v_term)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
					    if (NIL != id_index_tombstone_p(v_term)) {
						v_term = $SKIP;
					    }
					    sofar = add(sofar, ONE_INTEGER);
					    note_percent_progress(sofar, total);
					    while (NIL != fact_sheets.fsut_prioritizer_should_sleepP(prioritizer)) {
						sleep(ONE_INTEGER);
					    }
					    if (NIL != fact_sheets.term_ok_for_fact_sheet_p(v_term, eq(fact_sheets.fsut_prioritizer_verbosity(prioritizer), $MINI))) {
						fact_sheets.fsut_prioritizer_place_term(v_term, prioritizer);
						sleep(fact_sheets.fsut_prioritizer_sleep_interval_from_nice_level(fact_sheets.fsut_prioritizer_nice_level(prioritizer), UNPROVIDED));
					    }
					}
				    }
				}
				final SubLObject idx_$417 = idx;
				if ((NIL == id_index_sparse_objects_empty_p(idx_$417)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
				    final SubLObject sparse = id_index_sparse_objects(idx_$417);
				    SubLObject id2 = id_index_sparse_id_threshold(idx_$417);
				    final SubLObject end_id = id_index_next_id(idx_$417);
				    final SubLObject v_default = (NIL != id_index_skip_tombstones_p($SKIP)) ? NIL : $SKIP;
				    while (id2.numL(end_id)) {
					final SubLObject v_term2 = gethash_without_values(id2, sparse, v_default);
					if ((NIL == id_index_skip_tombstones_p($SKIP)) || (NIL == id_index_tombstone_p(v_term2))) {
					    sofar = add(sofar, ONE_INTEGER);
					    note_percent_progress(sofar, total);
					    while (NIL != fact_sheets.fsut_prioritizer_should_sleepP(prioritizer)) {
						sleep(ONE_INTEGER);
					    }
					    if (NIL != fact_sheets.term_ok_for_fact_sheet_p(v_term2, eq(fact_sheets.fsut_prioritizer_verbosity(prioritizer), $MINI))) {
						fact_sheets.fsut_prioritizer_place_term(v_term2, prioritizer);
						sleep(fact_sheets.fsut_prioritizer_sleep_interval_from_nice_level(fact_sheets.fsut_prioritizer_nice_level(prioritizer), UNPROVIDED));
					    }
					}
					id2 = add(id2, ONE_INTEGER);
				    }
				}
			    }
			    cdolist_list_var = cdolist_list_var.rest();
			    table_var = cdolist_list_var.first();
			}
		    } finally {
			final SubLObject _prev_bind_0_$416 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    final SubLObject _values = getValuesAsVector();
			    noting_percent_progress_postamble();
			    restoreValuesFromVector(_values);
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$416, thread);
			}
		    }
		} finally {
		    $percent_progress_start_time$.rebind(_prev_bind_4, thread);
		    $within_noting_percent_progress$.rebind(_prev_bind_3, thread);
		    $last_percent_progress_prediction$.rebind(_prev_bind_2, thread);
		    $last_percent_progress_index$.rebind(_prev_bind_0_$415, thread);
		}
	    }
	} finally {
	    $silent_progressP$.rebind(_prev_bind_0, thread);
	}
    }

    public static final SubLObject fsut_prioritizer_place_term_alt(SubLObject v_term, SubLObject prioritizer) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject verbosity = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_verbosity(prioritizer);
		SubLObject domain_mt = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_domain_mt(prioritizer);
		SubLObject language_mt = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_language_mt(prioritizer);
		thread.resetMultipleValues();
		{
		    SubLObject status = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_status(v_term, verbosity, domain_mt, language_mt, com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_new_days(prioritizer));
		    SubLObject priority = thread.secondMultipleValue();
		    thread.resetMultipleValues();
		    {
			SubLObject pcase_var = status;
			if (pcase_var.eql($STALE)) {
			    com.cyc.cycjava.cycl.fact_sheets.add_to_prioritizer_queue(v_term, priority, com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_stale_terms(prioritizer));
			} else {
			    if (pcase_var.eql($MISSING)) {
				com.cyc.cycjava.cycl.fact_sheets.add_to_prioritizer_queue(v_term, priority, com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_missing_terms(prioritizer));
			    } else {
				if (pcase_var.eql($UP_TO_DATE)) {
				    com.cyc.cycjava.cycl.fact_sheets.add_to_prioritizer_queue(v_term, priority, com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_up_to_date_terms(prioritizer));
				}
			    }
			}
		    }
		    return values(status, priority);
		}
	    }
	}
    }

    public static SubLObject fsut_prioritizer_place_term(final SubLObject v_term, final SubLObject prioritizer) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject verbosity = fact_sheets.fsut_prioritizer_verbosity(prioritizer);
	final SubLObject domain_mt = fact_sheets.fsut_prioritizer_domain_mt(prioritizer);
	final SubLObject language_mt = fact_sheets.fsut_prioritizer_language_mt(prioritizer);
	thread.resetMultipleValues();
	final SubLObject status = fact_sheets.fact_sheet_status(v_term, verbosity, domain_mt, language_mt, fact_sheets.fsut_prioritizer_new_days(prioritizer));
	final SubLObject priority = thread.secondMultipleValue();
	thread.resetMultipleValues();
	final SubLObject pcase_var = status;
	if (pcase_var.eql($STALE)) {
	    fact_sheets.add_to_prioritizer_queue(v_term, priority, fact_sheets.fsut_prioritizer_stale_terms(prioritizer));
	} else if (pcase_var.eql($MISSING)) {
	    fact_sheets.add_to_prioritizer_queue(v_term, priority, fact_sheets.fsut_prioritizer_missing_terms(prioritizer));
	} else if (pcase_var.eql(fact_sheets.$UP_TO_DATE)) {
	    fact_sheets.add_to_prioritizer_queue(v_term, priority, fact_sheets.fsut_prioritizer_up_to_date_terms(prioritizer));
	}

	return values(status, priority);
    }

    public static final SubLObject add_to_prioritizer_queue_alt(SubLObject v_term, SubLObject priority, SubLObject queue) {
	SubLTrampolineFile.checkType(priority, NON_NEGATIVE_INTEGER_P);
	com.cyc.cycjava.cycl.fact_sheets.sanity_check_prioritizer_queue(queue);
	if (NIL == queues.p_queue_find(v_term, queue, symbol_function(EQL), symbol_function(CAR))) {
	    queues.p_enqueue(cons(v_term, priority), queue);
	}
	return queue;
    }

    public static SubLObject add_to_prioritizer_queue(final SubLObject v_term, final SubLObject priority, final SubLObject queue) {
	assert NIL != subl_promotions.non_negative_integer_p(priority) : "! subl_promotions.non_negative_integer_p(priority) " + ("subl_promotions.non_negative_integer_p(priority) " + "CommonSymbols.NIL != subl_promotions.non_negative_integer_p(priority) ") + priority;
	fact_sheets.sanity_check_prioritizer_queue(queue);
	if (NIL == queues.p_queue_find(v_term, queue, symbol_function(EQL), symbol_function(CAR))) {
	    queues.p_enqueue(cons(v_term, priority), queue);
	}
	return queue;
    }

    public static final SubLObject sanity_check_prioritizer_queue_alt(SubLObject queue) {
	{
	    SubLObject stack = NIL;
	    SubLObject subtree = queues.do_priority_queue_elements_btree(queue);
	    for (; NIL != subtree;) {
		{
		    SubLObject key_var = binary_tree.do_btree_index_key(subtree);
		    SubLObject collisions_var = binary_tree.do_btree_index_value(subtree);
		    SubLObject cdolist_list_var = collisions_var;
		    SubLObject item = NIL;
		    for (item = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), item = cdolist_list_var.first()) {
			if (!item.isCons()) {
			    Errors.error($str_alt847$Non_cons_in_fact_sheet_prioritize, item);
			}
		    }
		}
		{
		    SubLObject lower = binary_tree.do_btree_lower(subtree);
		    SubLObject higher = binary_tree.do_btree_higher(subtree);
		    if (NIL != lower) {
			if (NIL != higher) {
			    stack = cons(higher, stack);
			}
			subtree = lower;
		    } else {
			if (NIL != higher) {
			    subtree = higher;
			} else {
			    subtree = stack.first();
			    stack = stack.rest();
			}
		    }
		}
	    }
	    stack = NIL;
	}
	return $OK;
    }

    public static SubLObject sanity_check_prioritizer_queue(final SubLObject queue) {
	SubLObject stack = NIL;
	SubLObject subtree = queues.do_priority_queue_elements_btree(queue);
	while (NIL != subtree) {
	    final SubLObject key_var = binary_tree.do_btree_index_key(subtree);
	    SubLObject cdolist_list_var;
	    final SubLObject collisions_var = cdolist_list_var = binary_tree.do_btree_index_value(subtree);
	    SubLObject item = NIL;
	    item = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		if (!item.isCons()) {
		    Errors.error(fact_sheets.$str725$Non_cons_in_fact_sheet_prioritize, item);
		}
		cdolist_list_var = cdolist_list_var.rest();
		item = cdolist_list_var.first();
	    }
	    final SubLObject lower = binary_tree.do_btree_lower(subtree);
	    final SubLObject higher = binary_tree.do_btree_higher(subtree);
	    if (NIL != lower) {
		if (NIL != higher) {
		    stack = cons(higher, stack);
		}
		subtree = lower;
	    } else if (NIL != higher) {
		subtree = higher;
	    } else {
		subtree = stack.first();
		stack = stack.rest();
	    }

	}
	stack = NIL;
	return $OK;
    }

    public static final SubLObject fact_sheet_status_p_alt(SubLObject v_object) {
	return subl_promotions.memberP(v_object, $fact_sheet_statuses$.getGlobalValue(), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject fact_sheet_status_p(final SubLObject v_object) {
	return subl_promotions.memberP(v_object, fact_sheets.$fact_sheet_statuses$.getGlobalValue(), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_status_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject new_days) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (new_days == UNPROVIDED) {
	    new_days = com.cyc.cycjava.cycl.fact_sheets.fsut_prioritizer_default_new_days();
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject status = $MISSING;
		SubLObject miniP = eq(verbosity, $MINI);
		SubLObject priority = ZERO_INTEGER;
		if (NIL != indexed_term_p(v_term)) {
		    priority = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_gaf_priority(v_term);
		}
		if (NIL != com.cyc.cycjava.cycl.fact_sheets.term_ok_for_fact_sheet_p(v_term, miniP)) {
		    thread.resetMultipleValues();
		    {
			SubLObject directory = com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
			SubLObject cached_filename = thread.secondMultipleValue();
			thread.resetMultipleValues();
			thread.resetMultipleValues();
			{
			    SubLObject status_484 = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_file_status(cached_filename, priority, miniP, v_term, new_days);
			    SubLObject priority_485 = thread.secondMultipleValue();
			    thread.resetMultipleValues();
			    status = status_484;
			    priority = priority_485;
			}
		    }
		    if (NIL != isa.isa_in_any_mtP(v_term, $$TerroristAttack)) {
			priority = add(priority, $int$25);
		    }
		    if (status == $MISSING) {
			priority = add(priority, $int$50);
		    }
		}
		return values(status, priority);
	    }
	}
    }

    public static SubLObject fact_sheet_status(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject new_days) {
	if (verbosity == UNPROVIDED) {
	    verbosity = $NORMAL;
	}
	if (domain_mt == UNPROVIDED) {
	    domain_mt = $DEFAULT;
	}
	if (language_mt == UNPROVIDED) {
	    language_mt = $DEFAULT;
	}
	if (new_days == UNPROVIDED) {
	    new_days = fact_sheets.fsut_prioritizer_default_new_days();
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject status = $MISSING;
	final SubLObject miniP = eq(verbosity, $MINI);
	SubLObject priority = ZERO_INTEGER;
	if (NIL != indexed_term_p(v_term)) {
	    priority = fact_sheets.fact_sheet_term_gaf_priority(v_term);
	}
	if (NIL != fact_sheets.term_ok_for_fact_sheet_p(v_term, miniP)) {
	    thread.resetMultipleValues();
	    final SubLObject directory = fact_sheets.directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, UNPROVIDED);
	    final SubLObject cached_filename = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    thread.resetMultipleValues();
	    final SubLObject status_$419 = fact_sheets.fact_sheet_file_status(cached_filename, priority, miniP, v_term, new_days);
	    final SubLObject priority_$420 = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    status = status_$419;
	    priority = priority_$420;
	    if (NIL != isa.isa_in_any_mtP(v_term, fact_sheets.$$TerroristAttack)) {
		priority = add(priority, fact_sheets.$int$25);
	    }
	    if (status == $MISSING) {
		priority = add(priority, fact_sheets.$int$50);
	    }
	}
	return values(status, priority);
    }

    public static final SubLObject fact_sheet_file_status_alt(SubLObject cached_filename, SubLObject term_priority, SubLObject miniP, SubLObject v_term, SubLObject new_days) {
	{
	    SubLObject status = $MISSING;
	    SubLObject priority = term_priority;
	    if ((NIL != file_utilities.file_existsP(cached_filename)) && ((NIL == miniP) || (NIL == string_utilities.substringP($str_alt851$border_0, string_utilities.read_string_from_file(cached_filename, UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED)))) {
		{
		    SubLObject datum = com.cyc.cycjava.cycl.fact_sheets.cached_fact_sheet_save_date_and_second(cached_filename);
		    SubLObject current = datum;
		    SubLObject date = NIL;
		    SubLObject second = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt778);
		    date = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt778);
		    second = current.first();
		    current = current.rest();
		    if (NIL == current) {
			{
			    SubLObject age_in_days = date_utilities.days_between_universal_dates(numeric_date_utilities.today(), date);
			    priority = add(priority, age_in_days);
			    if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_file_staleP(cached_filename, v_term, date, second)) {
				status = $STALE;
			    } else {
				status = $UP_TO_DATE;
				if (age_in_days.numLE(new_days)) {
				    priority = ZERO_INTEGER;
				}
			    }
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt778);
		    }
		}
	    }
	    return values(status, priority);
	}
    }

    public static SubLObject fact_sheet_file_status(final SubLObject cached_filename, final SubLObject term_priority, final SubLObject miniP, final SubLObject v_term, final SubLObject new_days) {
	SubLObject status = $MISSING;
	SubLObject priority = term_priority;
	if ((NIL != file_utilities.file_existsP(cached_filename)) && ((NIL == miniP) || (NIL == string_utilities.substringP(fact_sheets.$str729$border_0, string_utilities.read_string_from_file(cached_filename, UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED)))) {
	    SubLObject current;
	    final SubLObject datum = current = fact_sheets.cached_fact_sheet_save_date_and_second(cached_filename);
	    SubLObject date = NIL;
	    SubLObject second = NIL;
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list643);
	    date = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, fact_sheets.$list643);
	    second = current.first();
	    current = current.rest();
	    if (NIL == current) {
		final SubLObject age_in_days = date_utilities.days_between_universal_dates(numeric_date_utilities.today(), date);
		priority = add(priority, age_in_days);
		if (NIL != fact_sheets.fact_sheet_file_staleP(cached_filename, v_term, date, second)) {
		    status = $STALE;
		} else {
		    status = fact_sheets.$UP_TO_DATE;
		    if (age_in_days.numLE(new_days)) {
			priority = ZERO_INTEGER;
		    }
		}
	    } else {
		cdestructuring_bind_error(datum, fact_sheets.$list643);
	    }
	}
	return values(status, priority);
    }

    public static final SubLObject fact_sheet_file_staleP_alt(SubLObject filename, SubLObject v_term, SubLObject save_date, SubLObject save_second) {
	if (v_term == UNPROVIDED) {
	    v_term = NIL;
	}
	if (save_date == UNPROVIDED) {
	    save_date = NIL;
	}
	if (save_second == UNPROVIDED) {
	    save_second = NIL;
	}
	if (NIL == file_utilities.file_existsP(filename)) {
	    return NIL;
	}
	if (NIL == save_date) {
	    {
		SubLObject datum_evaluated_var = com.cyc.cycjava.cycl.fact_sheets.cached_fact_sheet_save_date_and_second(filename);
		save_date = datum_evaluated_var.first();
		save_second = cadr(datum_evaluated_var);
	    }
	}
	if (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_generator_modified_sinceP(save_date, save_second)) {
	    return T;
	}
	if (NIL == v_term) {
	    v_term = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_filename(filename);
	}
	return makeBoolean((NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_file_has_invalid_assertionP(filename))
		|| ((NIL != com.cyc.cycjava.cycl.fact_sheets.term_ok_for_fact_sheet_p(v_term, UNPROVIDED)) && (NIL != com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_modified_sinceP(v_term, save_date, save_second))));
    }

    public static SubLObject fact_sheet_file_staleP(final SubLObject filename, SubLObject v_term, SubLObject save_date, SubLObject save_second) {
	if (v_term == UNPROVIDED) {
	    v_term = NIL;
	}
	if (save_date == UNPROVIDED) {
	    save_date = NIL;
	}
	if (save_second == UNPROVIDED) {
	    save_second = NIL;
	}
	if (NIL == file_utilities.file_existsP(filename)) {
	    return NIL;
	}
	if (NIL == save_date) {
	    final SubLObject datum_evaluated_var = fact_sheets.cached_fact_sheet_save_date_and_second(filename);
	    save_date = datum_evaluated_var.first();
	    save_second = cadr(datum_evaluated_var);
	}
	if (NIL != fact_sheets.fact_sheet_generator_modified_sinceP(save_date, save_second)) {
	    return T;
	}
	if (NIL == v_term) {
	    v_term = fact_sheets.fact_sheet_term_from_filename(filename);
	}
	return makeBoolean((NIL != fact_sheets.fact_sheet_file_has_invalid_assertionP(filename)) || ((NIL != fact_sheets.term_ok_for_fact_sheet_p(v_term, UNPROVIDED)) && (NIL != fact_sheets.fact_sheet_term_modified_sinceP(v_term, save_date, save_second))));
    }

    public static final SubLObject fact_sheet_file_has_invalid_assertionP_alt(SubLObject filename) {
	return makeBoolean(((NIL != file_utilities.file_existsP(filename)) && (NIL != string_utilities.ends_with(filename, $str_alt704$_cfasl, UNPROVIDED)))
		&& (NIL != list_utilities.tree_find_if($sym322$INVALID_ASSERTION_, com.cyc.cycjava.cycl.fact_sheets.precached_fact_sheet_data_from_file(filename, $FORBIDDEN, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED).first(), UNPROVIDED)));
    }

    public static SubLObject fact_sheet_file_has_invalid_assertionP(final SubLObject filename) {
	return makeBoolean(((NIL != file_utilities.file_existsP(filename)) && (NIL != string_utilities.ends_with(filename, fact_sheets.$str567$_cfasl, UNPROVIDED)))
		&& (NIL != list_utilities.tree_find_if(fact_sheets.$sym161$INVALID_ASSERTION_, fact_sheets.precached_fact_sheet_data_from_file(filename, $FORBIDDEN, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED).first(), UNPROVIDED)));
    }

    /**
     *
     *
     * @return INTEGERP; Number of distinct pred-argnum combinations indexed on TERM.
    Intended to give a quick estimate of the extent to which TERM has been represented.
     */
    @LispMethod(comment = "@return INTEGERP; Number of distinct pred-argnum combinations indexed on TERM.\r\nIntended to give a quick estimate of the extent to which TERM has been represented.")
    public static final SubLObject fact_sheet_term_gaf_priority_alt(SubLObject v_term) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject priority = ZERO_INTEGER;
		SubLObject index = term_index(v_term);
		SubLObject gaf_arg_index = (NIL != intermediate_index_p(index)) ? ((SubLObject) (intermediate_index_lookup(index, $GAF_ARG))) : NIL;
		if (NIL != intermediate_index_p(gaf_arg_index)) {
		    {
			SubLObject index_486 = gaf_arg_index;
			if (NIL != do_intermediate_index_valid_index_p(index_486)) {
			    {
				SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(intermediate_index_dictionary(index_486)));
				while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
				    thread.resetMultipleValues();
				    {
					SubLObject argnum = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
					SubLObject pred_index = thread.secondMultipleValue();
					thread.resetMultipleValues();
					if (NIL != intermediate_index_p(pred_index)) {
					    {
						SubLObject index_487 = pred_index;
						if (NIL != do_intermediate_index_valid_index_p(index_487)) {
						    {
							SubLObject iteration_state_488 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(intermediate_index_dictionary(index_487)));
							while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_488)) {
							    thread.resetMultipleValues();
							    {
								SubLObject pred = dictionary_contents.do_dictionary_contents_key_value(iteration_state_488);
								SubLObject mt_index = thread.secondMultipleValue();
								thread.resetMultipleValues();
								priority = add(priority, ONE_INTEGER);
								iteration_state_488 = dictionary_contents.do_dictionary_contents_next(iteration_state_488);
							    }
							}
							dictionary_contents.do_dictionary_contents_finalize(iteration_state_488);
						    }
						}
					    }
					}
					iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
				    }
				}
				dictionary_contents.do_dictionary_contents_finalize(iteration_state);
			    }
			}
		    }
		} else {
		    if (NIL != simple_index_p(index)) {
			{
			    SubLObject seen = set.new_set(symbol_function(EQUAL), UNPROVIDED);
			    SubLObject cdolist_list_var = do_simple_index_term_assertion_list(v_term);
			    SubLObject as = NIL;
			    for (as = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), as = cdolist_list_var.first()) {
				if (NIL != assertions_high.gaf_assertionP(as)) {
				    {
					SubLObject terms = cycl_utilities.formula_terms(as, UNPROVIDED);
					SubLObject argnum = position(v_term, terms, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
					SubLObject pred = terms.first();
					SubLObject key = cons(pred, argnum);
					if (NIL == set.set_memberP(key, seen)) {
					    set.set_add(key, seen);
					    priority = add(priority, ONE_INTEGER);
					}
				    }
				}
			    }
			}
		    }
		}
		return priority;
	    }
	}
    }

    /**
     *
     *
     * @return INTEGERP; Number of distinct pred-argnum combinations indexed on TERM.
    Intended to give a quick estimate of the extent to which TERM has been represented.
     */
    @LispMethod(comment = "@return INTEGERP; Number of distinct pred-argnum combinations indexed on TERM.\r\nIntended to give a quick estimate of the extent to which TERM has been represented.")
    public static SubLObject fact_sheet_term_gaf_priority(final SubLObject v_term) {
	return set.set_size(fact_sheets.pred_argnum_combos_for_term(v_term));
    }

    public static SubLObject pred_argnum_combos_for_term_internal(final SubLObject v_term) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject seen = set.new_set(symbol_function(EQUAL), UNPROVIDED);
	final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
	final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
	try {
	    mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
	    mt_relevance_macros.$mt$.bind(fact_sheets.$$EverythingPSC, thread);
	    final SubLObject pred_var = NIL;
	    if (NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(v_term, NIL, pred_var)) {
		final SubLObject iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(v_term, NIL, pred_var);
		SubLObject done_var = NIL;
		final SubLObject token_var = NIL;
		while (NIL == done_var) {
		    final SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
		    final SubLObject valid = makeBoolean(!token_var.eql(final_index_spec));
		    if (NIL != valid) {
			SubLObject final_index_iterator = NIL;
			try {
			    final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, $GAF, NIL, NIL);
			    SubLObject done_var_$421 = NIL;
			    final SubLObject token_var_$422 = NIL;
			    while (NIL == done_var_$421) {
				final SubLObject assertion_var = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_$422);
				final SubLObject valid_$423 = makeBoolean(!token_var_$422.eql(assertion_var));
				if (NIL != valid_$423) {
				    final SubLObject formula = assertions_high.gaf_formula(assertion_var);
				    set.set_add(cons(cycl_utilities.formula_arg0(formula), position(v_term, cycl_utilities.formula_terms(formula, UNPROVIDED), symbol_function(EQUAL), UNPROVIDED, UNPROVIDED, UNPROVIDED)), seen);
				}
				done_var_$421 = makeBoolean(NIL == valid_$423);
			    }
			} finally {
			    final SubLObject _prev_bind_0_$424 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				final SubLObject _values = getValuesAsVector();
				if (NIL != final_index_iterator) {
				    kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
				}
				restoreValuesFromVector(_values);
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$424, thread);
			    }
			}
		    }
		    done_var = makeBoolean(NIL == valid);
		}
	    }
	} finally {
	    mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
	    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
	}
	return seen;
    }

    public static SubLObject pred_argnum_combos_for_term(final SubLObject v_term) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
	SubLObject caching_state = NIL;
	if (NIL == v_memoization_state) {
	    return fact_sheets.pred_argnum_combos_for_term_internal(v_term);
	}
	caching_state = memoization_state.memoization_state_lookup(v_memoization_state, fact_sheets.PRED_ARGNUM_COMBOS_FOR_TERM, UNPROVIDED);
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), fact_sheets.PRED_ARGNUM_COMBOS_FOR_TERM, ONE_INTEGER, NIL, EQUAL, UNPROVIDED);
	    memoization_state.memoization_state_put(v_memoization_state, fact_sheets.PRED_ARGNUM_COMBOS_FOR_TERM, caching_state);
	}
	SubLObject results = memoization_state.caching_state_lookup(caching_state, v_term, memoization_state.$memoized_item_not_found$.getGlobalValue());
	if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    results = arg2(thread.resetMultipleValues(), multiple_value_list(fact_sheets.pred_argnum_combos_for_term_internal(v_term)));
	    memoization_state.caching_state_put(caching_state, v_term, results, UNPROVIDED);
	}
	return memoization_state.caching_results(results);
    }

    public static final SubLObject cb_fact_sheet_evaluation_alt(SubLObject args) {
	if (args == UNPROVIDED) {
	    args = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject term_id = html_extract_input($$$term, args);
		SubLObject v_term = cb_guess_fort(term_id, UNPROVIDED);
		SubLObject creation_kb = html_extract_input($str_alt854$creation_kb, args);
		SubLObject creation_system = html_extract_input($str_alt855$creation_system, args);
		SubLObject evaluator_id = html_extract_input($$$evaluator, args);
		SubLObject title_var = $$$Fact_Sheet_Evaluation;
		{
		    SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
		    try {
			html_macros.$html_id_space_id_generator$.bind(NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread)) ? ((SubLObject) (html_macros.$html_id_space_id_generator$.getDynamicValue(thread)))
				: integer_sequence_generator.new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
			html_markup(html_macros.$html_html_head$.getGlobalValue());
			html_markup(html_macros.$html_head_head$.getGlobalValue());
			html_macros.html_head_content_type();
			cb_head_shortcut_icon();
			html_meta_robot_instructions($cb_permit_robots_to_indexP$.getDynamicValue(thread), $cb_permit_robots_to_followP$.getDynamicValue(thread));
			if (NIL != title_var) {
			    html_source_readability_terpri(UNPROVIDED);
			    html_markup(html_macros.$html_title_head$.getGlobalValue());
			    html_princ(title_var);
			    html_markup(html_macros.$html_title_tail$.getGlobalValue());
			}
			html_markup(html_macros.$html_head_tail$.getGlobalValue());
			html_source_readability_terpri(UNPROVIDED);
			{
			    SubLObject _prev_bind_0_489 = html_macros.$html_inside_bodyP$.currentBinding(thread);
			    try {
				html_macros.$html_inside_bodyP$.bind(T, thread);
				html_markup(html_macros.$html_body_head$.getGlobalValue());
				if (NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
				    html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
				    html_char(CHAR_quotation, UNPROVIDED);
				    html_markup(html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
				    html_char(CHAR_quotation, UNPROVIDED);
				}
				if (true) {
				    html_markup(html_macros.$html_body_class$.getGlobalValue());
				    html_char(CHAR_quotation, UNPROVIDED);
				    html_markup($str_alt860$yui_skin_sam);
				    html_char(CHAR_quotation, UNPROVIDED);
				}
				html_char(CHAR_greater, UNPROVIDED);
				{
				    SubLObject _prev_bind_0_490 = html_macros.$html_safe_print$.currentBinding(thread);
				    try {
					html_macros.$html_safe_print$.bind(T, thread);
					if (NIL != title_var) {
					    html_markup(html_macros.$html_heading_head$.getGlobalValue());
					    html_markup(TWO_INTEGER);
					    html_char(CHAR_greater, UNPROVIDED);
					    html_princ(title_var);
					    html_markup(html_macros.$html_heading_tail$.getGlobalValue());
					    html_markup(TWO_INTEGER);
					    html_char(CHAR_greater, UNPROVIDED);
					}
					html_markup(html_macros.$html_heading_head$.getGlobalValue());
					html_markup(THREE_INTEGER);
					html_char(CHAR_greater, UNPROVIDED);
					cb_form(v_term, UNPROVIDED, UNPROVIDED);
					html_markup(html_macros.$html_heading_tail$.getGlobalValue());
					html_markup(THREE_INTEGER);
					html_char(CHAR_greater, UNPROVIDED);
					{
					    SubLObject frame_name_var = cb_frame_name(NIL);
					    html_markup(html_macros.$html_form_head$.getGlobalValue());
					    html_markup(html_macros.$html_form_action$.getGlobalValue());
					    html_char(CHAR_quotation, UNPROVIDED);
					    html_markup(system_parameters.$cyc_cgi_program$.getDynamicValue(thread));
					    html_char(CHAR_quotation, UNPROVIDED);
					    if (NIL != html_macros.$html_form_method_post$.getGlobalValue()) {
						html_markup(html_macros.$html_form_method$.getGlobalValue());
						html_char(CHAR_quotation, UNPROVIDED);
						html_markup(html_macros.$html_form_method_post$.getGlobalValue());
						html_char(CHAR_quotation, UNPROVIDED);
					    }
					    if (NIL != frame_name_var) {
						html_markup(html_macros.$html_form_target$.getGlobalValue());
						html_char(CHAR_quotation, UNPROVIDED);
						html_markup(frame_name_var);
						html_char(CHAR_quotation, UNPROVIDED);
					    }
					    html_char(CHAR_greater, UNPROVIDED);
					    {
						SubLObject _prev_bind_0_491 = html_macros.$html_safe_print$.currentBinding(thread);
						SubLObject _prev_bind_1 = html_macros.$within_html_form$.currentBinding(thread);
						SubLObject _prev_bind_2 = html_macros.$html_form_field_uniquifier_code$.currentBinding(thread);
						try {
						    html_macros.$html_safe_print$.bind(T, thread);
						    html_macros.$within_html_form$.bind(T, thread);
						    html_macros.$html_form_field_uniquifier_code$.bind(html_macros.next_html_form_field_uniquifier_code(), thread);
						    html_hidden_input($str_alt861$cb_handle_fact_sheet_evaluation, T, UNPROVIDED);
						    html_hidden_input($$$term, term_id, UNPROVIDED);
						    html_hidden_input($$$evaluator, evaluator_id, UNPROVIDED);
						    html_hidden_input($str_alt854$creation_kb, creation_kb, UNPROVIDED);
						    html_hidden_input($str_alt855$creation_system, creation_system, UNPROVIDED);
						    com.cyc.cycjava.cycl.fact_sheets.print_one_eval_section($COVERAGE, $list_alt863);
						    com.cyc.cycjava.cycl.fact_sheets.print_one_eval_section($FILTERING, $list_alt865);
						    com.cyc.cycjava.cycl.fact_sheets.print_one_eval_section($REDUNDANCY, $list_alt867);
						    com.cyc.cycjava.cycl.fact_sheets.print_one_eval_section($CLARITY, $list_alt869);
						    com.cyc.cycjava.cycl.fact_sheets.print_one_eval_section($LINKS, $list_alt871);
						    com.cyc.cycjava.cycl.fact_sheets.print_one_eval_section($CATEGORIZATION, $list_alt873);
						    com.cyc.cycjava.cycl.fact_sheets.print_one_eval_section($FLUIDITY, $list_alt875);
						    com.cyc.cycjava.cycl.fact_sheets.print_one_eval_section($ESTHETIC_VALUE, $list_alt877);
						    html_submit_input($$$Submit_Evaluation, UNPROVIDED, UNPROVIDED);
						    html_macros.embed_form_field_code(html_macros.$html_form_field_uniquifier_code$.getDynamicValue(thread));
						} finally {
						    html_macros.$html_form_field_uniquifier_code$.rebind(_prev_bind_2, thread);
						    html_macros.$within_html_form$.rebind(_prev_bind_1, thread);
						    html_macros.$html_safe_print$.rebind(_prev_bind_0_491, thread);
						}
					    }
					    html_markup(html_macros.$html_form_tail$.getGlobalValue());
					}
					html_source_readability_terpri(UNPROVIDED);
					html_copyright_notice();
				    } finally {
					html_macros.$html_safe_print$.rebind(_prev_bind_0_490, thread);
				    }
				}
				html_markup(html_macros.$html_body_tail$.getGlobalValue());
				html_source_readability_terpri(UNPROVIDED);
			    } finally {
				html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_489, thread);
			    }
			}
			html_markup(html_macros.$html_html_tail$.getGlobalValue());
			html_source_readability_terpri(UNPROVIDED);
		    } finally {
			html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
		    }
		}
	    }
	    return NIL;
	}
    }

    public static SubLObject cb_fact_sheet_evaluation(SubLObject args) {
	if (args == UNPROVIDED) {
	    args = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject term_id = html_extract_input(fact_sheets.$$$term, args);
	final SubLObject v_term = cb_guess_fort(term_id, UNPROVIDED);
	final SubLObject creation_kb = html_extract_input(fact_sheets.$str733$creation_kb, args);
	final SubLObject creation_system = html_extract_input(fact_sheets.$str734$creation_system, args);
	final SubLObject evaluator_id = html_extract_input(fact_sheets.$$$evaluator, args);
	final SubLObject title_var = fact_sheets.$$$Fact_Sheet_Evaluation;
	final SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
	try {
	    html_macros.$html_id_space_id_generator$.bind(NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread)) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread)
		    : integer_sequence_generator.new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
	    html_markup(fact_sheets.$str196$__DOCTYPE_html_PUBLIC_____W3C__DT);
	    if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
		html_source_readability_terpri(UNPROVIDED);
		html_markup(fact_sheets.$str197$_meta_http_equiv__X_UA_Compatible);
	    }
	    html_source_readability_terpri(UNPROVIDED);
	    final SubLObject _prev_bind_0_$425 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
	    try {
		cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
		html_markup(html_macros.$html_html_head$.getGlobalValue());
		html_markup(html_macros.$html_head_head$.getGlobalValue());
		html_macros.html_head_content_type();
		cb_head_shortcut_icon();
		html_meta_robot_instructions($cb_permit_robots_to_indexP$.getDynamicValue(thread), $cb_permit_robots_to_followP$.getDynamicValue(thread));
		cyc_file_dependencies.css($CB_CYC);
		dhtml_macros.html_basic_cb_scripts();
		if (NIL != title_var) {
		    html_source_readability_terpri(UNPROVIDED);
		    html_markup(html_macros.$html_title_head$.getGlobalValue());
		    html_princ(title_var);
		    html_markup(html_macros.$html_title_tail$.getGlobalValue());
		}
		html_markup(html_macros.$html_head_tail$.getGlobalValue());
		html_source_readability_terpri(UNPROVIDED);
		final SubLObject _prev_bind_0_$426 = html_macros.$html_inside_bodyP$.currentBinding(thread);
		try {
		    html_macros.$html_inside_bodyP$.bind(T, thread);
		    html_markup(html_macros.$html_body_head$.getGlobalValue());
		    if (NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
			html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
			html_char(CHAR_quotation, UNPROVIDED);
		    }
		    html_markup(html_macros.$html_body_class$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup(fact_sheets.$str740$yui_skin_sam);
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_char(CHAR_greater, UNPROVIDED);
		    final SubLObject _prev_bind_0_$427 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			html_markup(html_macros.$html_div_head$.getGlobalValue());
			html_markup(html_macros.$html_attribute_id$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(fact_sheets.$$$reloadFrameButton);
			html_char(CHAR_quotation, UNPROVIDED);
			html_char(CHAR_greater, UNPROVIDED);
			final SubLObject _prev_bind_0_$428 = html_macros.$html_safe_print$.currentBinding(thread);
			try {
			    html_macros.$html_safe_print$.bind(T, thread);
			    html_markup(html_macros.$html_input_head$.getGlobalValue());
			    html_markup(html_macros.$html_input_type$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup(fact_sheets.$$$button);
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup(html_macros.$html_input_name$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup(fact_sheets.$$$reload);
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup(html_macros.$html_input_value$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_princ(fact_sheets.$$$Refresh_Frames);
			    html_char(CHAR_quotation, UNPROVIDED);
			    if (NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
				html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
			    }
			    html_char(CHAR_greater, UNPROVIDED);
			} finally {
			    html_macros.$html_safe_print$.rebind(_prev_bind_0_$428, thread);
			}
			html_markup(html_macros.$html_div_tail$.getGlobalValue());
			if (NIL != title_var) {
			    html_markup(html_macros.$html_heading_head$.getGlobalValue());
			    html_markup(TWO_INTEGER);
			    html_char(CHAR_greater, UNPROVIDED);
			    html_princ(title_var);
			    html_markup(html_macros.$html_heading_tail$.getGlobalValue());
			    html_markup(TWO_INTEGER);
			    html_char(CHAR_greater, UNPROVIDED);
			}
			html_markup(html_macros.$html_heading_head$.getGlobalValue());
			html_markup(THREE_INTEGER);
			html_char(CHAR_greater, UNPROVIDED);
			cb_form(v_term, UNPROVIDED, UNPROVIDED);
			html_markup(html_macros.$html_heading_tail$.getGlobalValue());
			html_markup(THREE_INTEGER);
			html_char(CHAR_greater, UNPROVIDED);
			final SubLObject frame_name_var = cb_frame_name(NIL);
			html_markup(html_macros.$html_form_head$.getGlobalValue());
			html_markup(html_macros.$html_form_action$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(system_parameters.$cyc_cgi_program$.getDynamicValue(thread));
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(html_macros.$html_form_method$.getGlobalValue());
			html_char(CHAR_quotation, UNPROVIDED);
			html_markup(fact_sheets.$$$post);
			html_char(CHAR_quotation, UNPROVIDED);
			if (NIL != frame_name_var) {
			    html_markup(html_macros.$html_form_target$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup(frame_name_var);
			    html_char(CHAR_quotation, UNPROVIDED);
			}
			html_char(CHAR_greater, UNPROVIDED);
			final SubLObject _prev_bind_0_$429 = html_macros.$html_safe_print$.currentBinding(thread);
			final SubLObject _prev_bind_2 = html_macros.$within_html_form$.currentBinding(thread);
			final SubLObject _prev_bind_3 = html_macros.$html_form_field_uniquifier_code$.currentBinding(thread);
			try {
			    html_macros.$html_safe_print$.bind(T, thread);
			    html_macros.$within_html_form$.bind(T, thread);
			    html_macros.$html_form_field_uniquifier_code$.bind(html_macros.next_html_form_field_uniquifier_code(), thread);
			    html_hidden_input(fact_sheets.$str746$cb_handle_fact_sheet_evaluation, T, UNPROVIDED);
			    html_hidden_input(fact_sheets.$$$term, term_id, UNPROVIDED);
			    html_hidden_input(fact_sheets.$$$evaluator, evaluator_id, UNPROVIDED);
			    html_hidden_input(fact_sheets.$str733$creation_kb, creation_kb, UNPROVIDED);
			    html_hidden_input(fact_sheets.$str734$creation_system, creation_system, UNPROVIDED);
			    fact_sheets.print_one_eval_section($COVERAGE, fact_sheets.$list748);
			    fact_sheets.print_one_eval_section($FILTERING, fact_sheets.$list750);
			    fact_sheets.print_one_eval_section($REDUNDANCY, fact_sheets.$list752);
			    fact_sheets.print_one_eval_section($CLARITY, fact_sheets.$list754);
			    fact_sheets.print_one_eval_section($LINKS, fact_sheets.$list756);
			    fact_sheets.print_one_eval_section($CATEGORIZATION, fact_sheets.$list758);
			    fact_sheets.print_one_eval_section($FLUIDITY, fact_sheets.$list760);
			    fact_sheets.print_one_eval_section($ESTHETIC_VALUE, fact_sheets.$list762);
			    html_submit_input(fact_sheets.$$$Submit_Evaluation, UNPROVIDED, UNPROVIDED);
			    html_macros.embed_form_field_code(html_macros.$html_form_field_uniquifier_code$.getDynamicValue(thread));
			} finally {
			    html_macros.$html_form_field_uniquifier_code$.rebind(_prev_bind_3, thread);
			    html_macros.$within_html_form$.rebind(_prev_bind_2, thread);
			    html_macros.$html_safe_print$.rebind(_prev_bind_0_$429, thread);
			}
			html_markup(html_macros.$html_form_tail$.getGlobalValue());
			html_source_readability_terpri(UNPROVIDED);
			html_copyright_notice();
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_0_$427, thread);
		    }
		    html_markup(html_macros.$html_body_tail$.getGlobalValue());
		    html_source_readability_terpri(UNPROVIDED);
		} finally {
		    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$426, thread);
		}
		html_markup(html_macros.$html_html_tail$.getGlobalValue());
	    } finally {
		cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$425, thread);
	    }
	    html_source_readability_terpri(UNPROVIDED);
	} finally {
	    html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
	}
	return NIL;
    }

    public static final SubLObject print_one_eval_section_alt(SubLObject eval_keyword, SubLObject values_with_strings) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject title = string_utilities.capitalize_smart(Strings.string_downcase(cconcatenate(format_nil.format_nil_a_no_copy(eval_keyword), $str_alt51$__), UNPROVIDED, UNPROVIDED));
		SubLObject select_name = Strings.string_downcase(format_nil.format_nil_a(eval_keyword), UNPROVIDED, UNPROVIDED);
		SubLObject comment_name = cconcatenate(select_name, $str_alt880$_comments);
		html_markup(html_macros.$html_bold_head$.getGlobalValue());
		format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt287$_A, title);
		html_markup(html_macros.$html_bold_tail$.getGlobalValue());
		html_newline(UNPROVIDED);
		format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt881$Score__);
		html_markup(html_macros.$html_select_head$.getGlobalValue());
		html_markup(html_macros.$html_select_name$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(select_name);
		html_char(CHAR_quotation, UNPROVIDED);
		html_char(CHAR_greater, UNPROVIDED);
		{
		    SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			com.cyc.cycjava.cycl.fact_sheets.print_numbered_options(ZERO_INTEGER, TEN_INTEGER, values_with_strings);
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
		    }
		}
		html_markup(html_macros.$html_select_tail$.getGlobalValue());
		html_newline(UNPROVIDED);
		format(html_macros.$html_stream$.getDynamicValue(thread), $str_alt882$Comments__);
		html_text_input(comment_name, $str_alt133$, $int$80);
		html_newline(TWO_INTEGER);
		return NIL;
	    }
	}
    }

    public static SubLObject print_one_eval_section(final SubLObject eval_keyword, final SubLObject values_with_strings) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject title = string_utilities.capitalize_smart(Strings.string_downcase(cconcatenate(format_nil.format_nil_a_no_copy(eval_keyword), fact_sheets.$str766$__), UNPROVIDED, UNPROVIDED));
	final SubLObject select_name = Strings.string_downcase(format_nil.format_nil_a(eval_keyword), UNPROVIDED, UNPROVIDED);
	final SubLObject comment_name = cconcatenate(select_name, fact_sheets.$str767$_comments);
	html_markup(html_macros.$html_bold_head$.getGlobalValue());
	format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$str124$_A, title);
	html_markup(html_macros.$html_bold_tail$.getGlobalValue());
	html_newline(UNPROVIDED);
	format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$str768$Score__);
	html_markup(html_macros.$html_select_head$.getGlobalValue());
	html_markup(html_macros.$html_select_name$.getGlobalValue());
	html_char(CHAR_quotation, UNPROVIDED);
	html_markup(select_name);
	html_char(CHAR_quotation, UNPROVIDED);
	if (NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
	    html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
	}
	html_char(CHAR_greater, UNPROVIDED);
	final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
	try {
	    html_macros.$html_safe_print$.bind(T, thread);
	    fact_sheets.print_numbered_options(ZERO_INTEGER, TEN_INTEGER, values_with_strings);
	} finally {
	    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
	}
	html_markup(html_macros.$html_select_tail$.getGlobalValue());
	html_newline(UNPROVIDED);
	format(html_macros.$html_stream$.getDynamicValue(thread), fact_sheets.$str769$Comments__);
	html_text_input(comment_name, fact_sheets.$str73$, fact_sheets.$int$80);
	html_newline(TWO_INTEGER);
	return NIL;
    }

    public static final SubLObject print_numbered_options_alt(SubLObject start_number, SubLObject end_number, SubLObject option_value_alist) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    html_markup(html_macros.$html_option_head$.getGlobalValue());
	    if (true) {
		html_markup(html_macros.$html_option_value$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(MINUS_ONE_INTEGER);
		html_char(CHAR_quotation, UNPROVIDED);
	    }
	    html_char(CHAR_greater, UNPROVIDED);
	    {
		SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
		try {
		    html_macros.$html_safe_print$.bind(T, thread);
		    html_princ($$$No_Value_Selected);
		} finally {
		    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
		}
	    }
	    html_markup(html_macros.$html_option_tail$.getGlobalValue());
	    {
		SubLObject option_number = NIL;
		for (option_number = start_number; !option_number.numG(end_number); option_number = add(ONE_INTEGER, option_number)) {
		    {
			SubLObject option_string = list_utilities.alist_lookup(option_value_alist, option_number, EQ, option_number);
			html_markup(html_macros.$html_option_head$.getGlobalValue());
			if (NIL != option_number) {
			    html_markup(html_macros.$html_option_value$.getGlobalValue());
			    html_char(CHAR_quotation, UNPROVIDED);
			    html_markup(option_number);
			    html_char(CHAR_quotation, UNPROVIDED);
			}
			html_char(CHAR_greater, UNPROVIDED);
			{
			    SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
			    try {
				html_macros.$html_safe_print$.bind(T, thread);
				html_princ(option_string);
			    } finally {
				html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
			    }
			}
			html_markup(html_macros.$html_option_tail$.getGlobalValue());
		    }
		}
	    }
	    return T;
	}
    }

    public static SubLObject print_numbered_options(final SubLObject start_number, final SubLObject end_number, final SubLObject option_value_alist) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	html_markup(html_macros.$html_option_head$.getGlobalValue());
	html_markup(html_macros.$html_option_value$.getGlobalValue());
	html_char(CHAR_quotation, UNPROVIDED);
	html_markup(MINUS_ONE_INTEGER);
	html_char(CHAR_quotation, UNPROVIDED);
	html_char(CHAR_greater, UNPROVIDED);
	final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
	try {
	    html_macros.$html_safe_print$.bind(T, thread);
	    html_princ(fact_sheets.$$$No_Value_Selected);
	} finally {
	    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
	}
	html_markup(html_macros.$html_option_tail$.getGlobalValue());
	SubLObject option_number;
	SubLObject option_string;
	SubLObject _prev_bind_2;
	for (option_number = NIL, option_number = start_number; !option_number.numG(end_number); option_number = add(ONE_INTEGER, option_number)) {
	    option_string = list_utilities.alist_lookup(option_value_alist, option_number, EQ, option_number);
	    html_markup(html_macros.$html_option_head$.getGlobalValue());
	    if (NIL != option_number) {
		html_markup(html_macros.$html_option_value$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(option_number);
		html_char(CHAR_quotation, UNPROVIDED);
	    }
	    html_char(CHAR_greater, UNPROVIDED);
	    _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
	    try {
		html_macros.$html_safe_print$.bind(T, thread);
		html_princ(option_string);
	    } finally {
		html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
	    }
	    html_markup(html_macros.$html_option_tail$.getGlobalValue());
	}
	return T;
    }

    public static final SubLObject cb_handle_fact_sheet_evaluation_alt(SubLObject args) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject v_term = cycl_utilities.hl_to_el(cb_guess_fort(html_extract_input($$$term, args), UNPROVIDED));
		SubLObject evaluator = cycl_utilities.hl_to_el(cb_guess_fort(html_extract_input($$$evaluator, args), UNPROVIDED));
		SubLObject vars = $list_alt885;
		SubLObject eval_info = list($TERM, v_term, $EVALUATOR, evaluator);
		SubLObject cdolist_list_var = vars;
		SubLObject var = NIL;
		for (var = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), var = cdolist_list_var.first()) {
		    {
			SubLObject value = html_extract_input(var, args);
			if ((NIL != value) && (NIL == subl_promotions.memberP(value, $list_alt887, EQUAL, UNPROVIDED))) {
			    eval_info = putf(eval_info, make_keyword(Strings.string_upcase(var, UNPROVIDED, UNPROVIDED)), value);
			}
		    }
		}
		eval_info = putf(eval_info, $EVAL_SYSTEM, system_info.cyc_revision_string());
		eval_info = putf(eval_info, $EVAL_TIME, numeric_date_utilities.timestamp(UNPROVIDED, UNPROVIDED));
		{
		    SubLObject stream = NIL;
		    try {
			stream = compatibility.open_text($fact_sheet_eval_log_file$.getDynamicValue(thread), $APPEND, NIL);
			if (!stream.isStream()) {
			    Errors.error($str_alt137$Unable_to_open__S, $fact_sheet_eval_log_file$.getDynamicValue(thread));
			}
			{
			    SubLObject file = stream;
			    format(file, $str_alt890$_S__, eval_info);
			}
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				if (stream.isStream()) {
				    close(stream, UNPROVIDED);
				}
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		}
		cb_tools.cb_history(UNPROVIDED);
		return NIL;
	    }
	}
    }

    public static SubLObject cb_handle_fact_sheet_evaluation(final SubLObject args) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject v_term = cycl_utilities.hl_to_el(cb_guess_fort(html_extract_input(fact_sheets.$$$term, args), UNPROVIDED));
	final SubLObject evaluator = cycl_utilities.hl_to_el(cb_guess_fort(html_extract_input(fact_sheets.$$$evaluator, args), UNPROVIDED));
	final SubLObject vars = fact_sheets.$list772;
	SubLObject eval_info = list($TERM, v_term, $EVALUATOR, evaluator);
	SubLObject cdolist_list_var = vars;
	SubLObject var = NIL;
	var = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    final SubLObject value = html_extract_input(var, args);
	    if ((NIL != value) && (NIL == subl_promotions.memberP(value, fact_sheets.$list775, EQUAL, UNPROVIDED))) {
		eval_info = putf(eval_info, make_keyword(Strings.string_upcase(var, UNPROVIDED, UNPROVIDED)), value);
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    var = cdolist_list_var.first();
	}
	eval_info = putf(eval_info, $EVAL_SYSTEM, system_info.cyc_revision_string());
	eval_info = putf(eval_info, $EVAL_TIME, numeric_date_utilities.timestamp(UNPROVIDED, UNPROVIDED));
	SubLObject stream = NIL;
	try {
	    stream = compatibility.open_text(fact_sheets.$fact_sheet_eval_log_file$.getDynamicValue(thread), $APPEND);
	    if (!stream.isStream()) {
		Errors.error(fact_sheets.$str284$Unable_to_open__S, fact_sheets.$fact_sheet_eval_log_file$.getDynamicValue(thread));
	    }
	    final SubLObject file = stream;
	    format(file, fact_sheets.$str778$_S__, eval_info);
	} finally {
	    final SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values = getValuesAsVector();
		if (stream.isStream()) {
		    close(stream, UNPROVIDED);
		}
		restoreValuesFromVector(_values);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
	    }
	}
	cb_tools.cb_history(UNPROVIDED);
	return NIL;
    }

    public static final SubLObject absolute_fact_sheet_eval_url_alt(SubLObject v_term, SubLObject user, SubLObject creation_kb, SubLObject creation_system) {
	return cconcatenate(format_nil.format_nil_a_no_copy(http_kernel.http_server_cgi_base_url()),
		new SubLObject[] { $str_alt892$cg_cb_fact_sheet_evaluation_term_, format_nil.format_nil_a_no_copy(cb_term_identifier(v_term)), $str_alt893$_evaluator_, format_nil.format_nil_a_no_copy(cb_term_identifier(user)), $str_alt894$_creation_kb_,
			format_nil.format_nil_a_no_copy(web_utilities.html_url_encode(creation_kb, UNPROVIDED)), $str_alt895$_creation_system_, format_nil.format_nil_a_no_copy(web_utilities.html_url_encode(creation_system, UNPROVIDED)) });
    }

    public static SubLObject absolute_fact_sheet_eval_url(final SubLObject v_term, final SubLObject user, final SubLObject creation_kb, final SubLObject creation_system) {
	return cconcatenate(format_nil.format_nil_a_no_copy(http_kernel.http_server_cgi_base_url()),
		new SubLObject[] { fact_sheets.$str780$cg_cb_fact_sheet_evaluation_term_, format_nil.format_nil_a_no_copy(cb_term_identifier(v_term)), fact_sheets.$str781$_evaluator_, format_nil.format_nil_a_no_copy(cb_term_identifier(user)), fact_sheets.$str782$_creation_kb_,
			format_nil.format_nil_a_no_copy(web_utilities.html_url_encode(creation_kb, UNPROVIDED)), fact_sheets.$str783$_creation_system_, format_nil.format_nil_a_no_copy(web_utilities.html_url_encode(creation_system, UNPROVIDED)) });
    }

    public static final SubLObject html_emit_fact_sheet_evaluation_link_alt(SubLObject v_term, SubLObject user, SubLObject creation_kb, SubLObject creation_system) {
	if (user == UNPROVIDED) {
	    user = operation_communication.the_cyclist();
	}
	if (creation_kb == UNPROVIDED) {
	    creation_kb = NIL;
	}
	if (creation_system == UNPROVIDED) {
	    creation_system = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject url = com.cyc.cycjava.cycl.fact_sheets.absolute_fact_sheet_eval_url(v_term, user, creation_kb, creation_system);
		html_markup(html_macros.$html_anchor_head$.getGlobalValue());
		html_markup(html_macros.$html_anchor_href$.getGlobalValue());
		html_char(CHAR_quotation, UNPROVIDED);
		html_markup(url);
		html_char(CHAR_quotation, UNPROVIDED);
		if (true) {
		    html_markup(html_macros.$html_anchor_title$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup($$$Evaluate_Fact_Sheet);
		    html_char(CHAR_quotation, UNPROVIDED);
		}
		if (NIL != html_macros.$html_blank_target$.getGlobalValue()) {
		    html_markup(html_macros.$html_anchor_target$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		    html_markup(html_macros.$html_blank_target$.getGlobalValue());
		    html_char(CHAR_quotation, UNPROVIDED);
		}
		html_char(CHAR_greater, UNPROVIDED);
		{
		    SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
		    try {
			html_macros.$html_safe_print$.bind(T, thread);
			html_princ($$$Evaluate_this_Fact_Sheet);
		    } finally {
			html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
		    }
		}
		html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
	    }
	    return NIL;
	}
    }

    public static SubLObject html_emit_fact_sheet_evaluation_link(final SubLObject v_term, SubLObject user, SubLObject creation_kb, SubLObject creation_system) {
	if (user == UNPROVIDED) {
	    user = operation_communication.the_cyclist();
	}
	if (creation_kb == UNPROVIDED) {
	    creation_kb = NIL;
	}
	if (creation_system == UNPROVIDED) {
	    creation_system = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject url = fact_sheets.absolute_fact_sheet_eval_url(v_term, user, creation_kb, creation_system);
	html_markup(html_macros.$html_anchor_head$.getGlobalValue());
	html_markup(html_macros.$html_anchor_href$.getGlobalValue());
	html_char(CHAR_quotation, UNPROVIDED);
	html_markup(url);
	html_char(CHAR_quotation, UNPROVIDED);
	html_markup(html_macros.$html_anchor_title$.getGlobalValue());
	html_char(CHAR_quotation, UNPROVIDED);
	html_markup(fact_sheets.$$$Evaluate_Fact_Sheet);
	html_char(CHAR_quotation, UNPROVIDED);
	if (NIL != html_macros.$html_blank_target$.getGlobalValue()) {
	    html_markup(html_macros.$html_anchor_target$.getGlobalValue());
	    html_char(CHAR_quotation, UNPROVIDED);
	    html_markup(html_macros.$html_blank_target$.getGlobalValue());
	    html_char(CHAR_quotation, UNPROVIDED);
	}
	html_char(CHAR_greater, UNPROVIDED);
	final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
	try {
	    html_macros.$html_safe_print$.bind(T, thread);
	    html_princ(fact_sheets.$$$Evaluate_this_Fact_Sheet);
	} finally {
	    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
	}
	html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
	return NIL;
    }

    public static final SubLObject allowed_to_update_fact_sheet_with_sentenceP_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject assertion) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject result = NIL;
		SubLObject lock = $fact_sheet_updating_lock$.getGlobalValue();
		SubLObject release = NIL;
		try {
		    release = seize_lock(lock);
		    if ((NIL != dictionary.dictionary_lookup($fact_sheet_updating_process_dictionary$.getDynamicValue(thread), list(v_term, verbosity, domain_mt, language_mt), UNPROVIDED))
			    && (NIL != valid_process_p(dictionary.dictionary_lookup($fact_sheet_updating_process_dictionary$.getDynamicValue(thread), list(v_term, verbosity, domain_mt, language_mt), UNPROVIDED)))) {
			result = NIL;
		    } else {
			dictionary.dictionary_enter($fact_sheet_updating_process_dictionary$.getDynamicValue(thread), list(v_term, verbosity, domain_mt, language_mt), current_process());
			result = T;
		    }
		} finally {
		    if (NIL != release) {
			release_lock(lock);
		    }
		}
		return result;
	    }
	}
    }

    public static SubLObject allowed_to_update_fact_sheet_with_sentenceP(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject assertion) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject result = NIL;
	SubLObject release = NIL;
	try {
	    release = seize_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
	    if ((NIL != dictionary.dictionary_lookup(fact_sheets.$fact_sheet_updating_process_dictionary$.getDynamicValue(thread), list(v_term, verbosity, domain_mt, language_mt), UNPROVIDED))
		    && (NIL != valid_process_p(dictionary.dictionary_lookup(fact_sheets.$fact_sheet_updating_process_dictionary$.getDynamicValue(thread), list(v_term, verbosity, domain_mt, language_mt), UNPROVIDED)))) {
		result = NIL;
	    } else {
		dictionary.dictionary_enter(fact_sheets.$fact_sheet_updating_process_dictionary$.getDynamicValue(thread), list(v_term, verbosity, domain_mt, language_mt), current_process());
		result = T;
	    }
	} finally {
	    if (NIL != release) {
		release_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
	    }
	}
	return result;
    }

    public static final SubLObject mark_fact_sheet_term_modifiable_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject result = NIL;
		SubLObject lock = $fact_sheet_updating_lock$.getGlobalValue();
		SubLObject release = NIL;
		try {
		    release = seize_lock(lock);
		    if (!dictionary.dictionary_lookup($fact_sheet_updating_process_dictionary$.getDynamicValue(thread), v_term, UNPROVIDED).equalp(current_process())) {
			Errors.warn($str_alt900$The_process_that_is_marking_the_f, current_process(), dictionary.dictionary_lookup($fact_sheet_updating_process_dictionary$.getDynamicValue(thread), v_term, UNPROVIDED));
		    }
		    dictionary.dictionary_enter($fact_sheet_updating_process_dictionary$.getDynamicValue(thread), list(v_term, verbosity, domain_mt, language_mt), NIL);
		} finally {
		    if (NIL != release) {
			release_lock(lock);
		    }
		}
		return result;
	    }
	}
    }

    public static SubLObject mark_fact_sheet_term_modifiable(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject result = NIL;
	SubLObject release = NIL;
	try {
	    release = seize_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
	    if (!dictionary.dictionary_lookup(fact_sheets.$fact_sheet_updating_process_dictionary$.getDynamicValue(thread), v_term, UNPROVIDED).equalp(current_process())) {
		Errors.warn(fact_sheets.$str788$The_process_that_is_marking_the_f, current_process(), dictionary.dictionary_lookup(fact_sheets.$fact_sheet_updating_process_dictionary$.getDynamicValue(thread), v_term, UNPROVIDED));
	    }
	    dictionary.dictionary_enter(fact_sheets.$fact_sheet_updating_process_dictionary$.getDynamicValue(thread), list(v_term, verbosity, domain_mt, language_mt), NIL);
	} finally {
	    if (NIL != release) {
		release_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
	    }
	}
	return result;
    }

    public static final SubLObject cache_local_fact_sheet_data_alt(SubLObject data, SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject time) {
	if (time == UNPROVIDED) {
	    time = get_universal_time();
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject result = NIL;
		SubLObject lock = $fact_sheet_updating_lock$.getGlobalValue();
		SubLObject release = NIL;
		try {
		    release = seize_lock(lock);
		    result = dictionary.dictionary_enter($fact_sheet_lookaside_cache$.getDynamicValue(thread), list(v_term, verbosity, domain_mt, language_mt), list(time, data));
		} finally {
		    if (NIL != release) {
			release_lock(lock);
		    }
		}
		return result;
	    }
	}
    }

    public static SubLObject cache_local_fact_sheet_data(final SubLObject data, final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, SubLObject time) {
	if (time == UNPROVIDED) {
	    time = get_universal_time();
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject result = NIL;
	SubLObject release = NIL;
	try {
	    release = seize_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
	    result = dictionary.dictionary_enter(fact_sheets.$fact_sheet_lookaside_cache$.getDynamicValue(thread), list(v_term, verbosity, domain_mt, language_mt), list(time, data));
	} finally {
	    if (NIL != release) {
		release_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
	    }
	}
	return result;
    }

    /**
     *
     *
     * @unknown listp; the cached fact-sheet data
     * @unknown universal-time-p; the time when this return0 was entered into the cache
     */
    @LispMethod(comment = "@unknown listp; the cached fact-sheet data\r\n@unknown universal-time-p; the time when this return0 was entered into the cache")
    public static final SubLObject get_cached_local_fact_sheet_data_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject time = NIL;
		SubLObject data = NIL;
		SubLObject lock = $fact_sheet_updating_lock$.getGlobalValue();
		SubLObject release = NIL;
		try {
		    release = seize_lock(lock);
		    {
			SubLObject datum_evaluated_var = dictionary.dictionary_lookup($fact_sheet_lookaside_cache$.getDynamicValue(thread), list(v_term, verbosity, domain_mt, language_mt), UNPROVIDED);
			time = datum_evaluated_var.first();
			data = cadr(datum_evaluated_var);
		    }
		} finally {
		    if (NIL != release) {
			release_lock(lock);
		    }
		}
		return values(data, time);
	    }
	}
    }

    /**
     *
     *
     * @unknown listp; the cached fact-sheet data
     * @unknown universal-time-p; the time when this return0 was entered into the cache
     */
    @LispMethod(comment = "@unknown listp; the cached fact-sheet data\r\n@unknown universal-time-p; the time when this return0 was entered into the cache")
    public static SubLObject get_cached_local_fact_sheet_data(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject time = NIL;
	SubLObject data = NIL;
	SubLObject release = NIL;
	try {
	    release = seize_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
	    final SubLObject datum_evaluated_var = dictionary.dictionary_lookup(fact_sheets.$fact_sheet_lookaside_cache$.getDynamicValue(thread), list(v_term, verbosity, domain_mt, language_mt), UNPROVIDED);
	    time = datum_evaluated_var.first();
	    data = cadr(datum_evaluated_var);
	} finally {
	    if (NIL != release) {
		release_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
	    }
	}
	return values(data, time);
    }

    public static final SubLObject remove_cached_local_fact_sheet_data_alt(SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject lock = $fact_sheet_updating_lock$.getGlobalValue();
		SubLObject release = NIL;
		try {
		    release = seize_lock(lock);
		    dictionary.dictionary_remove($fact_sheet_lookaside_cache$.getDynamicValue(thread), list(v_term, verbosity, domain_mt, language_mt));
		} finally {
		    if (NIL != release) {
			release_lock(lock);
		    }
		}
	    }
	    return NIL;
	}
    }

    public static SubLObject remove_cached_local_fact_sheet_data(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject release = NIL;
	try {
	    release = seize_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
	    dictionary.dictionary_remove(fact_sheets.$fact_sheet_lookaside_cache$.getDynamicValue(thread), list(v_term, verbosity, domain_mt, language_mt));
	} finally {
	    if (NIL != release) {
		release_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
	    }
	}
	return NIL;
    }

    public static final SubLObject public_fact_sheet_ad_html_alt() {
	return $public_fact_sheet_ad_html$.getGlobalValue();
    }

    public static SubLObject public_fact_sheet_ad_html() {
	return fact_sheets.$public_fact_sheet_ad_html$.getGlobalValue();
    }

    public static final SubLObject directory_and_filename_for_public_fact_sheet_alt(SubLObject v_term, SubLObject fs_type, SubLObject extension) {
	if (extension == UNPROVIDED) {
	    extension = $$$html;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    SubLTrampolineFile.checkType(v_term, FORT_P);
	    {
		SubLObject term_id = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(v_term, UNPROVIDED);
		SubLObject raw_filename = cconcatenate(term_id, new SubLObject[] { $str_alt653$_, extension });
		SubLObject parent_directory = com.cyc.cycjava.cycl.fact_sheets.get_public_fact_sheet_term_parent_directory_string(v_term, fs_type, raw_filename);
		SubLObject fs_collection_name = com.cyc.cycjava.cycl.fact_sheets.get_fs_collection_name(fs_type);
		SubLObject directory_list = cconcatenate($public_fact_sheet_path$.getDynamicValue(thread), list(fs_collection_name, parent_directory));
		SubLObject directory = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_directory_from_list(directory_list);
		SubLObject filename = cconcatenate(directory, raw_filename);
		return values(directory, filename);
	    }
	}
    }

    public static SubLObject directory_and_filename_for_public_fact_sheet(final SubLObject v_term, final SubLObject fs_type, SubLObject extension) {
	if (extension == UNPROVIDED) {
	    extension = fact_sheets.$$$html;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	assert NIL != forts.fort_p(v_term) : "! forts.fort_p(v_term) " + ("forts.fort_p(v_term) " + "CommonSymbols.NIL != forts.fort_p(v_term) ") + v_term;
	final SubLObject term_id = fact_sheets.fact_sheet_term_id(v_term, UNPROVIDED);
	final SubLObject raw_filename = cconcatenate(term_id, new SubLObject[] { fact_sheets.$str511$_, extension });
	final SubLObject parent_directory = fact_sheets.get_public_fact_sheet_term_parent_directory_string(v_term, fs_type, raw_filename);
	final SubLObject fs_collection_name = fact_sheets.get_fs_collection_name(fs_type);
	final SubLObject directory_list = cconcatenate(fact_sheets.$public_fact_sheet_path$.getDynamicValue(thread), list(fs_collection_name, parent_directory));
	final SubLObject directory = fact_sheets.fact_sheet_directory_from_list(directory_list);
	final SubLObject filename = cconcatenate(directory, raw_filename);
	return values(directory, filename);
    }

    public static final SubLObject relative_filename_for_public_fact_sheet_alt(SubLObject v_term, SubLObject fs_type, SubLObject extension) {
	if (extension == UNPROVIDED) {
	    extension = $$$html;
	}
	{
	    SubLObject term_id = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id(v_term, UNPROVIDED);
	    SubLObject raw_filename = cconcatenate(term_id, new SubLObject[] { $str_alt653$_, extension });
	    SubLObject parent_directory = com.cyc.cycjava.cycl.fact_sheets.get_public_fact_sheet_term_parent_directory_string(v_term, fs_type, raw_filename);
	    SubLObject directory_list = list($str_alt903$__, parent_directory);
	    SubLObject directory = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_directory_from_list(directory_list);
	    SubLObject filename = cconcatenate(directory, raw_filename);
	    return filename;
	}
    }

    public static SubLObject relative_filename_for_public_fact_sheet(final SubLObject v_term, final SubLObject fs_type, SubLObject extension) {
	if (extension == UNPROVIDED) {
	    extension = fact_sheets.$$$html;
	}
	final SubLObject term_id = fact_sheets.fact_sheet_term_id(v_term, UNPROVIDED);
	final SubLObject raw_filename = cconcatenate(term_id, new SubLObject[] { fact_sheets.$str511$_, extension });
	final SubLObject parent_directory = fact_sheets.get_public_fact_sheet_term_parent_directory_string(v_term, fs_type, raw_filename);
	final SubLObject directory_list = list(fact_sheets.$str791$__, parent_directory);
	final SubLObject directory = fact_sheets.fact_sheet_directory_from_list(directory_list);
	final SubLObject filename = cconcatenate(directory, raw_filename);
	return filename;
    }

    public static final SubLObject clear_get_public_fact_sheet_term_parent_directory_string_alt() {
	{
	    SubLObject cs = $get_public_fact_sheet_term_parent_directory_string_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_get_public_fact_sheet_term_parent_directory_string() {
	final SubLObject cs = fact_sheets.$get_public_fact_sheet_term_parent_directory_string_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_get_public_fact_sheet_term_parent_directory_string_alt(SubLObject v_term, SubLObject fs_type, SubLObject filename) {
	return memoization_state.caching_state_remove_function_results_with_args($get_public_fact_sheet_term_parent_directory_string_caching_state$.getGlobalValue(), list(v_term, fs_type, filename), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_get_public_fact_sheet_term_parent_directory_string(final SubLObject v_term, final SubLObject fs_type, final SubLObject filename) {
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$get_public_fact_sheet_term_parent_directory_string_caching_state$.getGlobalValue(), list(v_term, fs_type, filename), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject get_public_fact_sheet_term_parent_directory_string_internal_alt(SubLObject v_term, SubLObject fs_type, SubLObject filename) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject directory_name = NIL;
		SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate($$InferencePSC);
		{
		    SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
		    SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
		    SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
		    try {
			mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
			mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
			mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
			{
			    SubLObject generalization_function = (NIL != kb_accessors.kb_individual_p(v_term)) ? ((SubLObject) (MIN_ISA_AMONG)) : MIN_GENLS_AMONG;
			    SubLObject available_types = remove(v_term, com.cyc.cycjava.cycl.fact_sheets.types_for_public_fact_sheets(fs_type), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
			    SubLObject first_pass_types = funcall(generalization_function, v_term, available_types);
			    SubLObject types = (NIL != first_pass_types) ? ((SubLObject) (first_pass_types)) : isa.min_isa_among(v_term, available_types, UNPROVIDED, UNPROVIDED);
			    SubLObject preferred_type = cardinality_estimates.sort_by_generality_estimate(types, UNPROVIDED).first();
			    SubLObject best_type = (NIL != preferred_type) ? ((SubLObject) (preferred_type)) : v_term;
			    SubLObject generation = pph_main.generate_phrase(best_type, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
			    directory_name = list_utilities.remove_if_not($sym907$FACT_SHEET_FILENAME_CHAR_, string_utilities.string_subst($str_alt908$_, $str_alt50$_, Strings.string_downcase(generation, UNPROVIDED, UNPROVIDED), UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
			}
		    } finally {
			mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
			mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
			mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
		    }
		}
		com.cyc.cycjava.cycl.fact_sheets.note_term_to_file_mapping(v_term, fs_type, directory_name, filename);
		return directory_name;
	    }
	}
    }

    public static SubLObject get_public_fact_sheet_term_parent_directory_string_internal(final SubLObject v_term, final SubLObject fs_type, final SubLObject filename) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject directory_name = NIL;
	final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(fact_sheets.$$InferencePSC);
	final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
	final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
	final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
	try {
	    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
	    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
	    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
	    final SubLObject generalization_function = (NIL != kb_accessors.kb_individual_p(v_term)) ? fact_sheets.MIN_ISA_AMONG : fact_sheets.MIN_GENLS_AMONG;
	    final SubLObject available_types = remove(v_term, fact_sheets.types_for_public_fact_sheets(fs_type), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	    final SubLObject first_pass_types = funcall(generalization_function, v_term, available_types);
	    final SubLObject types = (NIL != first_pass_types) ? first_pass_types : isa.min_isa_among(v_term, available_types, UNPROVIDED, UNPROVIDED);
	    final SubLObject preferred_type = cardinality_estimates.sort_by_generality_estimate(types, UNPROVIDED).first();
	    final SubLObject best_type = (NIL != preferred_type) ? preferred_type : v_term;
	    final SubLObject generation = pph_main.generate_phrase(best_type, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	    directory_name = list_utilities.remove_if_not(fact_sheets.$sym795$FACT_SHEET_FILENAME_CHAR_, string_utilities.string_subst(fact_sheets.$str796$_, fact_sheets.$$$_, Strings.string_downcase(generation, UNPROVIDED, UNPROVIDED), UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	} finally {
	    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
	    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
	    mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
	}
	fact_sheets.note_term_to_file_mapping(v_term, fs_type, directory_name, filename);
	return directory_name;
    }

    public static final SubLObject get_public_fact_sheet_term_parent_directory_string_alt(SubLObject v_term, SubLObject fs_type, SubLObject filename) {
	{
	    SubLObject caching_state = $get_public_fact_sheet_term_parent_directory_string_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(GET_PUBLIC_FACT_SHEET_TERM_PARENT_DIRECTORY_STRING, $get_public_fact_sheet_term_parent_directory_string_caching_state$, NIL, EQUAL, THREE_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject sxhash = memoization_state.sxhash_calc_3(v_term, fs_type, filename);
		SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
		if (collisions != $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    {
			SubLObject cdolist_list_var = collisions;
			SubLObject collision = NIL;
			for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), collision = cdolist_list_var.first()) {
			    {
				SubLObject cached_args = collision.first();
				SubLObject results2 = second(collision);
				if (v_term.equal(cached_args.first())) {
				    cached_args = cached_args.rest();
				    if (fs_type.equal(cached_args.first())) {
					cached_args = cached_args.rest();
					if (((NIL != cached_args) && (NIL == cached_args.rest())) && filename.equal(cached_args.first())) {
					    return memoization_state.caching_results(results2);
					}
				    }
				}
			    }
			}
		    }
		}
		{
		    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.get_public_fact_sheet_term_parent_directory_string_internal(v_term, fs_type, filename)));
		    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(v_term, fs_type, filename));
		    return memoization_state.caching_results(results);
		}
	    }
	}
    }

    public static SubLObject get_public_fact_sheet_term_parent_directory_string(final SubLObject v_term, final SubLObject fs_type, final SubLObject filename) {
	SubLObject caching_state = fact_sheets.$get_public_fact_sheet_term_parent_directory_string_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.GET_PUBLIC_FACT_SHEET_TERM_PARENT_DIRECTORY_STRING, fact_sheets.$get_public_fact_sheet_term_parent_directory_string_caching_state$, NIL, EQUAL, THREE_INTEGER, ZERO_INTEGER);
	}
	final SubLObject sxhash = memoization_state.sxhash_calc_3(v_term, fs_type, filename);
	final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
	if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    SubLObject cdolist_list_var = collisions;
	    SubLObject collision = NIL;
	    collision = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cached_args = collision.first();
		final SubLObject results2 = second(collision);
		if (v_term.equal(cached_args.first())) {
		    cached_args = cached_args.rest();
		    if (fs_type.equal(cached_args.first())) {
			cached_args = cached_args.rest();
			if (((NIL != cached_args) && (NIL == cached_args.rest())) && filename.equal(cached_args.first())) {
			    return memoization_state.caching_results(results2);
			}
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		collision = cdolist_list_var.first();
	    }
	}
	final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.get_public_fact_sheet_term_parent_directory_string_internal(v_term, fs_type, filename)));
	memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(v_term, fs_type, filename));
	return memoization_state.caching_results(results3);
    }

    public static final SubLObject fact_sheet_filename_charP_alt(SubLObject v_char) {
	return makeBoolean((v_char == CHAR_underbar) || (NIL != alphanumericp(v_char)));
    }

    public static SubLObject fact_sheet_filename_charP(final SubLObject v_char) {
	return makeBoolean(v_char.eql(CHAR_underbar) || (NIL != alphanumericp(v_char)));
    }

    public static final SubLObject note_term_to_file_mapping_alt(SubLObject v_term, SubLObject fs_type, SubLObject directory_name, SubLObject filename) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject output_file = cconcatenate(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_directory_from_list($public_fact_sheet_path$.getDynamicValue(thread)), new SubLObject[] { com.cyc.cycjava.cycl.fact_sheets.get_fs_collection_name(fs_type), $str_alt910$_term_mapping_cfasl });
		SubLObject txt_output_file = cconcatenate(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_directory_from_list($public_fact_sheet_path$.getDynamicValue(thread)), new SubLObject[] { com.cyc.cycjava.cycl.fact_sheets.get_fs_collection_name(fs_type), $str_alt911$_term_mapping_txt });
		SubLObject stream = NIL;
		try {
		    {
			SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
			try {
			    stream_macros.$stream_requires_locking$.bind(NIL, thread);
			    stream = compatibility.open_binary(output_file, $APPEND, NIL);
			} finally {
			    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
			}
		    }
		    if (!stream.isStream()) {
			Errors.error($str_alt137$Unable_to_open__S, output_file);
		    }
		    {
			SubLObject stream_492 = stream;
			cfasl_output(list(v_term, directory_name, filename), stream_492);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    if (stream.isStream()) {
				close(stream, UNPROVIDED);
			    }
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		{
		    SubLObject stream_493 = NIL;
		    try {
			{
			    SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
			    try {
				stream_macros.$stream_requires_locking$.bind(NIL, thread);
				stream_493 = compatibility.open_text(txt_output_file, $APPEND, NIL);
			    } finally {
				stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
			    }
			}
			if (!stream_493.isStream()) {
			    Errors.error($str_alt137$Unable_to_open__S, txt_output_file);
			}
			{
			    SubLObject stream_494 = stream_493;
			    prin1(list(v_term, directory_name, filename), stream_494);
			}
		    } finally {
			{
			    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			    try {
				$is_thread_performing_cleanupP$.bind(T, thread);
				if (stream_493.isStream()) {
				    close(stream_493, UNPROVIDED);
				}
			    } finally {
				$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		}
		return T;
	    }
	}
    }

    public static SubLObject note_term_to_file_mapping(final SubLObject v_term, final SubLObject fs_type, final SubLObject directory_name, final SubLObject filename) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject output_file = cconcatenate(fact_sheets.fact_sheet_directory_from_list(fact_sheets.$public_fact_sheet_path$.getDynamicValue(thread)), new SubLObject[] { fact_sheets.get_fs_collection_name(fs_type), fact_sheets.$str798$_term_mapping_cfasl });
	final SubLObject txt_output_file = cconcatenate(fact_sheets.fact_sheet_directory_from_list(fact_sheets.$public_fact_sheet_path$.getDynamicValue(thread)), new SubLObject[] { fact_sheets.get_fs_collection_name(fs_type), fact_sheets.$str799$_term_mapping_txt });
	SubLObject stream = NIL;
	try {
	    final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
	    try {
		stream_macros.$stream_requires_locking$.bind(NIL, thread);
		stream = compatibility.open_binary(output_file, $APPEND);
	    } finally {
		stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
	    }
	    if (!stream.isStream()) {
		Errors.error(fact_sheets.$str284$Unable_to_open__S, output_file);
	    }
	    final SubLObject stream_$430 = stream;
	    cfasl_output(list(v_term, directory_name, filename), stream_$430);
	} finally {
	    final SubLObject _prev_bind_2 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values = getValuesAsVector();
		if (stream.isStream()) {
		    close(stream, UNPROVIDED);
		}
		restoreValuesFromVector(_values);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
	    }
	}
	SubLObject stream_$431 = NIL;
	try {
	    final SubLObject _prev_bind_3 = stream_macros.$stream_requires_locking$.currentBinding(thread);
	    try {
		stream_macros.$stream_requires_locking$.bind(NIL, thread);
		stream_$431 = compatibility.open_text(txt_output_file, $APPEND);
	    } finally {
		stream_macros.$stream_requires_locking$.rebind(_prev_bind_3, thread);
	    }
	    if (!stream_$431.isStream()) {
		Errors.error(fact_sheets.$str284$Unable_to_open__S, txt_output_file);
	    }
	    final SubLObject stream_$432 = stream_$431;
	    prin1(list(v_term, directory_name, filename), stream_$432);
	} finally {
	    final SubLObject _prev_bind_4 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values2 = getValuesAsVector();
		if (stream_$431.isStream()) {
		    close(stream_$431, UNPROVIDED);
		}
		restoreValuesFromVector(_values2);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
	    }
	}
	return T;
    }

    public static final SubLObject clear_terms_for_public_fact_sheets_alt() {
	{
	    SubLObject cs = $terms_for_public_fact_sheets_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_terms_for_public_fact_sheets() {
	final SubLObject cs = fact_sheets.$terms_for_public_fact_sheets_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_terms_for_public_fact_sheets_alt(SubLObject fs_type) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	return memoization_state.caching_state_remove_function_results_with_args($terms_for_public_fact_sheets_caching_state$.getGlobalValue(), list(fs_type), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_terms_for_public_fact_sheets(SubLObject fs_type) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$terms_for_public_fact_sheets_caching_state$.getGlobalValue(), list(fs_type), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject terms_for_public_fact_sheets_internal_alt(SubLObject fs_type) {
	{
	    SubLObject whitelist = com.cyc.cycjava.cycl.fact_sheets.get_fs_whitelist_types(fs_type);
	    SubLObject blacklist = com.cyc.cycjava.cycl.fact_sheets.get_fs_blacklist_types(fs_type);
	    SubLObject quoted_blacklist = com.cyc.cycjava.cycl.fact_sheets.get_fs_quoted_blacklist_types(fs_type);
	    SubLObject terms = set.new_set(UNPROVIDED, UNPROVIDED);
	    SubLObject mt = com.cyc.cycjava.cycl.fact_sheets.get_domain_mt_for_fs_type(fs_type);
	    SubLObject store = NIL;
	    try {
		store = inference_datastructures_problem_store.new_problem_store(NIL);
		{
		    SubLObject cdolist_list_var = whitelist;
		    SubLObject type = NIL;
		    for (type = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), type = cdolist_list_var.first()) {
			{
			    SubLObject cdolist_list_var_495 = $list_alt919;
			    SubLObject pred = NIL;
			    for (pred = cdolist_list_var_495.first(); NIL != cdolist_list_var_495; cdolist_list_var_495 = cdolist_list_var_495.rest(), pred = cdolist_list_var_495.first()) {
				{
				    SubLObject new_terms = ask_utilities.query_variable($sym914$_X, list(pred, $sym914$_X, type), mt, listS($ANSWER_LANGUAGE, $HL, $PROBLEM_STORE, store, $list_alt917));
				    Errors.warn($str_alt918$_S__S___S, pred, type, length(new_terms));
				    set_utilities.set_add_all(new_terms, terms);
				}
			    }
			}
		    }
		}
		{
		    SubLObject cdolist_list_var = blacklist;
		    SubLObject bad_type = NIL;
		    for (bad_type = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), bad_type = cdolist_list_var.first()) {
			set_utilities.set_remove_all(isa.all_instances(bad_type, mt, UNPROVIDED), terms);
		    }
		}
		{
		    SubLObject cdolist_list_var = quoted_blacklist;
		    SubLObject bad_quoted_type = NIL;
		    for (bad_quoted_type = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), bad_quoted_type = cdolist_list_var.first()) {
			set_utilities.set_remove_all(isa.all_quoted_instances(bad_quoted_type, mt, UNPROVIDED), terms);
		    }
		}
	    } finally {
		{
		    SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
		    try {
			bind($is_thread_performing_cleanupP$, T);
			inference_datastructures_problem_store.destroy_problem_store(store);
		    } finally {
			rebind($is_thread_performing_cleanupP$, _prev_bind_0);
		    }
		}
	    }
	    return terms;
	}
    }

    public static SubLObject terms_for_public_fact_sheets_internal(final SubLObject fs_type) {
	final SubLObject whitelist = fact_sheets.get_fs_whitelist_types(fs_type);
	final SubLObject blacklist = fact_sheets.get_fs_blacklist_types(fs_type);
	final SubLObject quoted_blacklist = fact_sheets.get_fs_quoted_blacklist_types(fs_type);
	final SubLObject terms = set.new_set(UNPROVIDED, UNPROVIDED);
	final SubLObject mt = fact_sheets.get_domain_mt_for_fs_type(fs_type);
	SubLObject store = NIL;
	try {
	    store = new_problem_store(NIL);
	    SubLObject cdolist_list_var = whitelist;
	    SubLObject type = NIL;
	    type = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cdolist_list_var_$433 = fact_sheets.$list807;
		SubLObject pred = NIL;
		pred = cdolist_list_var_$433.first();
		while (NIL != cdolist_list_var_$433) {
		    final SubLObject new_terms = ask_utilities.query_variable(fact_sheets.$sym802$_X, list(pred, fact_sheets.$sym802$_X, type), mt, listS($ANSWER_LANGUAGE, $HL, $PROBLEM_STORE, store, fact_sheets.$list805));
		    Errors.warn(fact_sheets.$str806$_S__S___S, pred, type, length(new_terms));
		    set_utilities.set_add_all(new_terms, terms);
		    cdolist_list_var_$433 = cdolist_list_var_$433.rest();
		    pred = cdolist_list_var_$433.first();
		}
		cdolist_list_var = cdolist_list_var.rest();
		type = cdolist_list_var.first();
	    }
	    cdolist_list_var = blacklist;
	    SubLObject bad_type = NIL;
	    bad_type = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		set_utilities.set_remove_all(isa.all_instances(bad_type, mt, UNPROVIDED), terms);
		cdolist_list_var = cdolist_list_var.rest();
		bad_type = cdolist_list_var.first();
	    }
	    cdolist_list_var = quoted_blacklist;
	    SubLObject bad_quoted_type = NIL;
	    bad_quoted_type = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		set_utilities.set_remove_all(isa.all_quoted_instances(bad_quoted_type, mt, UNPROVIDED), terms);
		cdolist_list_var = cdolist_list_var.rest();
		bad_quoted_type = cdolist_list_var.first();
	    }
	} finally {
	    final SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
	    try {
		bind($is_thread_performing_cleanupP$, T);
		final SubLObject _values = getValuesAsVector();
		destroy_problem_store(store);
		restoreValuesFromVector(_values);
	    } finally {
		rebind($is_thread_performing_cleanupP$, _prev_bind_0);
	    }
	}
	return terms;
    }

    public static final SubLObject terms_for_public_fact_sheets_alt(SubLObject fs_type) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	{
	    SubLObject caching_state = $terms_for_public_fact_sheets_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(TERMS_FOR_PUBLIC_FACT_SHEETS, $terms_for_public_fact_sheets_caching_state$, NIL, EQUAL, ONE_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject results = memoization_state.caching_state_lookup(caching_state, fs_type, $kw127$_MEMOIZED_ITEM_NOT_FOUND_);
		if (results == $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.terms_for_public_fact_sheets_internal(fs_type)));
		    memoization_state.caching_state_put(caching_state, fs_type, results, UNPROVIDED);
		}
		return memoization_state.caching_results(results);
	    }
	}
    }

    public static SubLObject terms_for_public_fact_sheets(SubLObject fs_type) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	SubLObject caching_state = fact_sheets.$terms_for_public_fact_sheets_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.TERMS_FOR_PUBLIC_FACT_SHEETS, fact_sheets.$terms_for_public_fact_sheets_caching_state$, NIL, EQUAL, ONE_INTEGER, ZERO_INTEGER);
	}
	SubLObject results = memoization_state.caching_state_lookup(caching_state, fs_type, memoization_state.$memoized_item_not_found$.getGlobalValue());
	if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    results = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.terms_for_public_fact_sheets_internal(fs_type)));
	    memoization_state.caching_state_put(caching_state, fs_type, results, UNPROVIDED);
	}
	return memoization_state.caching_results(results);
    }

    public static final SubLObject clear_types_for_public_fact_sheets_alt() {
	{
	    SubLObject cs = $types_for_public_fact_sheets_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_types_for_public_fact_sheets() {
	final SubLObject cs = fact_sheets.$types_for_public_fact_sheets_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_types_for_public_fact_sheets_alt(SubLObject fs_type) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	return memoization_state.caching_state_remove_function_results_with_args($types_for_public_fact_sheets_caching_state$.getGlobalValue(), list(fs_type), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_types_for_public_fact_sheets(SubLObject fs_type) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$types_for_public_fact_sheets_caching_state$.getGlobalValue(), list(fs_type), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject types_for_public_fact_sheets_internal_alt(SubLObject fs_type) {
	return list_utilities.remove_if_not($sym922$COLLECTION_IN_ANY_MT_, set.set_element_list(com.cyc.cycjava.cycl.fact_sheets.terms_for_public_fact_sheets(fs_type)), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject types_for_public_fact_sheets_internal(final SubLObject fs_type) {
	return list_utilities.remove_if_not(fact_sheets.$sym810$COLLECTION_IN_ANY_MT_, set.set_element_list(fact_sheets.terms_for_public_fact_sheets(fs_type)), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject types_for_public_fact_sheets_alt(SubLObject fs_type) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	{
	    SubLObject caching_state = $types_for_public_fact_sheets_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(TYPES_FOR_PUBLIC_FACT_SHEETS, $types_for_public_fact_sheets_caching_state$, NIL, EQ, ONE_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject results = memoization_state.caching_state_lookup(caching_state, fs_type, $kw127$_MEMOIZED_ITEM_NOT_FOUND_);
		if (results == $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.types_for_public_fact_sheets_internal(fs_type)));
		    memoization_state.caching_state_put(caching_state, fs_type, results, UNPROVIDED);
		}
		return memoization_state.caching_results(results);
	    }
	}
    }

    public static SubLObject types_for_public_fact_sheets(SubLObject fs_type) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	SubLObject caching_state = fact_sheets.$types_for_public_fact_sheets_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.TYPES_FOR_PUBLIC_FACT_SHEETS, fact_sheets.$types_for_public_fact_sheets_caching_state$, NIL, EQ, ONE_INTEGER, ZERO_INTEGER);
	}
	SubLObject results = memoization_state.caching_state_lookup(caching_state, fs_type, memoization_state.$memoized_item_not_found$.getGlobalValue());
	if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    results = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.types_for_public_fact_sheets_internal(fs_type)));
	    memoization_state.caching_state_put(caching_state, fs_type, results, UNPROVIDED);
	}
	return memoization_state.caching_results(results);
    }

    public static final SubLObject clear_fact_sheet_term_strings_alt() {
	{
	    SubLObject cs = $fact_sheet_term_strings_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_fact_sheet_term_strings() {
	final SubLObject cs = fact_sheets.$fact_sheet_term_strings_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_fact_sheet_term_strings_alt(SubLObject v_term) {
	return memoization_state.caching_state_remove_function_results_with_args($fact_sheet_term_strings_caching_state$.getGlobalValue(), list(v_term), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_fact_sheet_term_strings(final SubLObject v_term) {
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_term_strings_caching_state$.getGlobalValue(), list(v_term), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject fact_sheet_term_strings_internal_alt(SubLObject v_term) {
	return nl_generation_api.cycl_term_to_nl_string_internal(v_term, $DEFAULT);
    }

    public static SubLObject fact_sheet_term_strings_internal(final SubLObject v_term) {
	return nl_generation_api.cycl_term_to_nl_string_internal(v_term, $DEFAULT);
    }

    public static final SubLObject fact_sheet_term_strings_alt(SubLObject v_term) {
	{
	    SubLObject caching_state = $fact_sheet_term_strings_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(FACT_SHEET_TERM_STRINGS, $fact_sheet_term_strings_caching_state$, NIL, EQUAL, ONE_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject results = memoization_state.caching_state_lookup(caching_state, v_term, $kw127$_MEMOIZED_ITEM_NOT_FOUND_);
		if (results == $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_strings_internal(v_term)));
		    memoization_state.caching_state_put(caching_state, v_term, results, UNPROVIDED);
		}
		return memoization_state.caching_results(results);
	    }
	}
    }

    public static SubLObject fact_sheet_term_strings(final SubLObject v_term) {
	SubLObject caching_state = fact_sheets.$fact_sheet_term_strings_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.FACT_SHEET_TERM_STRINGS, fact_sheets.$fact_sheet_term_strings_caching_state$, NIL, EQUAL, ONE_INTEGER, ZERO_INTEGER);
	}
	SubLObject results = memoization_state.caching_state_lookup(caching_state, v_term, memoization_state.$memoized_item_not_found$.getGlobalValue());
	if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    results = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.fact_sheet_term_strings_internal(v_term)));
	    memoization_state.caching_state_put(caching_state, v_term, results, UNPROVIDED);
	}
	return memoization_state.caching_results(results);
    }

    public static final SubLObject get_public_fact_sheet_string_mappings_alt(SubLObject fs_type) {
	return com.cyc.cycjava.cycl.fact_sheets.get_public_fact_sheet_string_mappings_int(set.set_element_list(com.cyc.cycjava.cycl.fact_sheets.terms_for_public_fact_sheets(fs_type)));
    }

    public static SubLObject get_public_fact_sheet_string_mappings(final SubLObject fs_type) {
	return fact_sheets.get_public_fact_sheet_string_mappings_int(set.set_element_list(fact_sheets.terms_for_public_fact_sheets(fs_type)));
    }

    public static final SubLObject get_public_fact_sheet_string_mappings_int_alt(SubLObject terms) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject result = NIL;
		SubLObject list_var = terms;
		$progress_note$.setDynamicValue($$$Getting_English_for_terms, thread);
		$progress_start_time$.setDynamicValue(get_universal_time(), thread);
		$progress_total$.setDynamicValue(length(list_var), thread);
		$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
		{
		    SubLObject _prev_bind_0 = $last_percent_progress_index$.currentBinding(thread);
		    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
		    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
		    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
		    try {
			$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
			$last_percent_progress_prediction$.bind(NIL, thread);
			$within_noting_percent_progress$.bind(T, thread);
			$percent_progress_start_time$.bind(get_universal_time(), thread);
			noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
			{
			    SubLObject csome_list_var = list_var;
			    SubLObject v_term = NIL;
			    for (v_term = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), v_term = csome_list_var.first()) {
				note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
				$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
				result = cons(list(v_term, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_strings(v_term)), result);
			    }
			}
			noting_percent_progress_postamble();
		    } finally {
			$percent_progress_start_time$.rebind(_prev_bind_3, thread);
			$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
			$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
			$last_percent_progress_index$.rebind(_prev_bind_0, thread);
		    }
		}
		return result;
	    }
	}
    }

    public static SubLObject get_public_fact_sheet_string_mappings_int(final SubLObject terms) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject result = NIL;
	final SubLObject _prev_bind_0 = $progress_note$.currentBinding(thread);
	final SubLObject _prev_bind_2 = $progress_start_time$.currentBinding(thread);
	final SubLObject _prev_bind_3 = $progress_total$.currentBinding(thread);
	final SubLObject _prev_bind_4 = $progress_sofar$.currentBinding(thread);
	final SubLObject _prev_bind_5 = $last_percent_progress_index$.currentBinding(thread);
	final SubLObject _prev_bind_6 = $last_percent_progress_prediction$.currentBinding(thread);
	final SubLObject _prev_bind_7 = $within_noting_percent_progress$.currentBinding(thread);
	final SubLObject _prev_bind_8 = $percent_progress_start_time$.currentBinding(thread);
	try {
	    $progress_note$.bind(fact_sheets.$$$Getting_English_for_terms, thread);
	    $progress_start_time$.bind(get_universal_time(), thread);
	    $progress_total$.bind(length(terms), thread);
	    $progress_sofar$.bind(ZERO_INTEGER, thread);
	    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
	    $last_percent_progress_prediction$.bind(NIL, thread);
	    $within_noting_percent_progress$.bind(T, thread);
	    $percent_progress_start_time$.bind(get_universal_time(), thread);
	    try {
		noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
		SubLObject csome_list_var = terms;
		SubLObject v_term = NIL;
		v_term = csome_list_var.first();
		while (NIL != csome_list_var) {
		    result = cons(list(v_term, fact_sheets.fact_sheet_term_strings(v_term)), result);
		    $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
		    note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
		    csome_list_var = csome_list_var.rest();
		    v_term = csome_list_var.first();
		}
	    } finally {
		final SubLObject _prev_bind_0_$434 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values = getValuesAsVector();
		    noting_percent_progress_postamble();
		    restoreValuesFromVector(_values);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$434, thread);
		}
	    }
	} finally {
	    $percent_progress_start_time$.rebind(_prev_bind_8, thread);
	    $within_noting_percent_progress$.rebind(_prev_bind_7, thread);
	    $last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
	    $last_percent_progress_index$.rebind(_prev_bind_5, thread);
	    $progress_sofar$.rebind(_prev_bind_4, thread);
	    $progress_total$.rebind(_prev_bind_3, thread);
	    $progress_start_time$.rebind(_prev_bind_2, thread);
	    $progress_note$.rebind(_prev_bind_0, thread);
	}
	return result;
    }

    public static final SubLObject clear_get_public_fact_sheet_string_url_mappings_alt() {
	{
	    SubLObject cs = $get_public_fact_sheet_string_url_mappings_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_get_public_fact_sheet_string_url_mappings() {
	final SubLObject cs = fact_sheets.$get_public_fact_sheet_string_url_mappings_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_get_public_fact_sheet_string_url_mappings_alt(SubLObject terms, SubLObject fs_type) {
	if (terms == UNPROVIDED) {
	    terms = set.set_element_list(com.cyc.cycjava.cycl.fact_sheets.terms_for_public_fact_sheets(UNPROVIDED));
	}
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	return memoization_state.caching_state_remove_function_results_with_args($get_public_fact_sheet_string_url_mappings_caching_state$.getGlobalValue(), list(terms, fs_type), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_get_public_fact_sheet_string_url_mappings(SubLObject terms, SubLObject fs_type) {
	if (terms == UNPROVIDED) {
	    terms = set.set_element_list(fact_sheets.terms_for_public_fact_sheets(UNPROVIDED));
	}
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$get_public_fact_sheet_string_url_mappings_caching_state$.getGlobalValue(), list(terms, fs_type), UNPROVIDED, UNPROVIDED);
    }

    /**
     * intended to be called just before syncing a new set of factsheets with the public server.  Figures out the urls
     * for search, and removes any for which the factsheets can't be found
     */
    @LispMethod(comment = "intended to be called just before syncing a new set of factsheets with the public server.  Figures out the urls\r\nfor search, and removes any for which the factsheets can\'t be found\nintended to be called just before syncing a new set of factsheets with the public server.  Figures out the urls\nfor search, and removes any for which the factsheets can\'t be found")
    public static final SubLObject get_public_fact_sheet_string_url_mappings_internal_alt(SubLObject terms, SubLObject fs_type) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject result = dictionary.new_dictionary(EQUAL, UNPROVIDED);
		SubLObject mappings = com.cyc.cycjava.cycl.fact_sheets.get_public_fact_sheet_string_mappings_int(terms);
		SubLObject list_var = mappings;
		$progress_note$.setDynamicValue($$$getting_urls_for_terms, thread);
		$progress_start_time$.setDynamicValue(get_universal_time(), thread);
		$progress_total$.setDynamicValue(length(list_var), thread);
		$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
		{
		    SubLObject _prev_bind_0 = $last_percent_progress_index$.currentBinding(thread);
		    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
		    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
		    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
		    try {
			$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
			$last_percent_progress_prediction$.bind(NIL, thread);
			$within_noting_percent_progress$.bind(T, thread);
			$percent_progress_start_time$.bind(get_universal_time(), thread);
			noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
			{
			    SubLObject csome_list_var = list_var;
			    SubLObject mapping = NIL;
			    for (mapping = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), mapping = csome_list_var.first()) {
				note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
				$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
				{
				    SubLObject datum = mapping;
				    SubLObject current = datum;
				    SubLObject v_term = NIL;
				    SubLObject strings = NIL;
				    destructuring_bind_must_consp(current, datum, $list_alt929);
				    v_term = current.first();
				    current = current.rest();
				    destructuring_bind_must_consp(current, datum, $list_alt929);
				    strings = current.first();
				    current = current.rest();
				    if (NIL == current) {
					{
					    SubLObject url = string_utilities.substring(com.cyc.cycjava.cycl.fact_sheets.relative_filename_for_public_fact_sheet(v_term, fs_type, UNPROVIDED), THREE_INTEGER, UNPROVIDED);
					    SubLObject cdolist_list_var = strings;
					    SubLObject string = NIL;
					    for (string = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), string = cdolist_list_var.first()) {
						dictionary_utilities.dictionary_push(result, Strings.string_downcase(string, UNPROVIDED, UNPROVIDED), list(v_term, url));
					    }
					}
				    } else {
					cdestructuring_bind_error(datum, $list_alt929);
				    }
				}
			    }
			}
			noting_percent_progress_postamble();
		    } finally {
			$percent_progress_start_time$.rebind(_prev_bind_3, thread);
			$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
			$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
			$last_percent_progress_index$.rebind(_prev_bind_0, thread);
		    }
		}
		return result;
	    }
	}
    }

    @LispMethod(comment = "intended to be called just before syncing a new set of factsheets with the public server.  Figures out the urls\r\nfor search, and removes any for which the factsheets can\'t be found\nintended to be called just before syncing a new set of factsheets with the public server.  Figures out the urls\nfor search, and removes any for which the factsheets can\'t be found")
    public static SubLObject get_public_fact_sheet_string_url_mappings_internal(final SubLObject terms, final SubLObject fs_type) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject result = dictionary.new_dictionary(EQUAL, UNPROVIDED);
	final SubLObject list_var;
	final SubLObject mappings = list_var = fact_sheets.get_public_fact_sheet_string_mappings_int(terms);
	final SubLObject _prev_bind_0 = $progress_note$.currentBinding(thread);
	final SubLObject _prev_bind_2 = $progress_start_time$.currentBinding(thread);
	final SubLObject _prev_bind_3 = $progress_total$.currentBinding(thread);
	final SubLObject _prev_bind_4 = $progress_sofar$.currentBinding(thread);
	final SubLObject _prev_bind_5 = $last_percent_progress_index$.currentBinding(thread);
	final SubLObject _prev_bind_6 = $last_percent_progress_prediction$.currentBinding(thread);
	final SubLObject _prev_bind_7 = $within_noting_percent_progress$.currentBinding(thread);
	final SubLObject _prev_bind_8 = $percent_progress_start_time$.currentBinding(thread);
	try {
	    $progress_note$.bind(fact_sheets.$$$getting_urls_for_terms, thread);
	    $progress_start_time$.bind(get_universal_time(), thread);
	    $progress_total$.bind(length(list_var), thread);
	    $progress_sofar$.bind(ZERO_INTEGER, thread);
	    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
	    $last_percent_progress_prediction$.bind(NIL, thread);
	    $within_noting_percent_progress$.bind(T, thread);
	    $percent_progress_start_time$.bind(get_universal_time(), thread);
	    try {
		noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
		SubLObject csome_list_var = list_var;
		SubLObject mapping = NIL;
		mapping = csome_list_var.first();
		while (NIL != csome_list_var) {
		    SubLObject current;
		    final SubLObject datum = current = mapping;
		    SubLObject v_term = NIL;
		    SubLObject strings = NIL;
		    destructuring_bind_must_consp(current, datum, fact_sheets.$list817);
		    v_term = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, fact_sheets.$list817);
		    strings = current.first();
		    current = current.rest();
		    if (NIL == current) {
			final SubLObject url = string_utilities.substring(fact_sheets.relative_filename_for_public_fact_sheet(v_term, fs_type, UNPROVIDED), THREE_INTEGER, UNPROVIDED);
			SubLObject cdolist_list_var = strings;
			SubLObject string = NIL;
			string = cdolist_list_var.first();
			while (NIL != cdolist_list_var) {
			    dictionary_utilities.dictionary_push(result, Strings.string_downcase(string, UNPROVIDED, UNPROVIDED), list(v_term, url));
			    cdolist_list_var = cdolist_list_var.rest();
			    string = cdolist_list_var.first();
			}
		    } else {
			cdestructuring_bind_error(datum, fact_sheets.$list817);
		    }
		    $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
		    note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
		    csome_list_var = csome_list_var.rest();
		    mapping = csome_list_var.first();
		}
	    } finally {
		final SubLObject _prev_bind_0_$435 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values = getValuesAsVector();
		    noting_percent_progress_postamble();
		    restoreValuesFromVector(_values);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$435, thread);
		}
	    }
	} finally {
	    $percent_progress_start_time$.rebind(_prev_bind_8, thread);
	    $within_noting_percent_progress$.rebind(_prev_bind_7, thread);
	    $last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
	    $last_percent_progress_index$.rebind(_prev_bind_5, thread);
	    $progress_sofar$.rebind(_prev_bind_4, thread);
	    $progress_total$.rebind(_prev_bind_3, thread);
	    $progress_start_time$.rebind(_prev_bind_2, thread);
	    $progress_note$.rebind(_prev_bind_0, thread);
	}
	return result;
    }

    /**
    * intended to be called just before syncing a new set of factsheets with the public server.  Figures out the urls
    * for search, and removes any for which the factsheets can't be found
    */

    public static final SubLObject get_public_fact_sheet_string_url_mappings_alt(SubLObject terms, SubLObject fs_type) {
	if (terms == UNPROVIDED) {
	    terms = set.set_element_list(com.cyc.cycjava.cycl.fact_sheets.terms_for_public_fact_sheets(UNPROVIDED));
	}
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	{
	    SubLObject caching_state = $get_public_fact_sheet_string_url_mappings_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(GET_PUBLIC_FACT_SHEET_STRING_URL_MAPPINGS, $get_public_fact_sheet_string_url_mappings_caching_state$, NIL, EQUAL, TWO_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject sxhash = memoization_state.sxhash_calc_2(terms, fs_type);
		SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
		if (collisions != $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    {
			SubLObject cdolist_list_var = collisions;
			SubLObject collision = NIL;
			for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), collision = cdolist_list_var.first()) {
			    {
				SubLObject cached_args = collision.first();
				SubLObject results2 = second(collision);
				if (terms.equal(cached_args.first())) {
				    cached_args = cached_args.rest();
				    if (((NIL != cached_args) && (NIL == cached_args.rest())) && fs_type.equal(cached_args.first())) {
					return memoization_state.caching_results(results2);
				    }
				}
			    }
			}
		    }
		}
		{
		    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.get_public_fact_sheet_string_url_mappings_internal(terms, fs_type)));
		    memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(terms, fs_type));
		    return memoization_state.caching_results(results);
		}
	    }
	}
    }

    public static SubLObject get_public_fact_sheet_string_url_mappings(SubLObject terms, SubLObject fs_type) {
	if (terms == UNPROVIDED) {
	    terms = set.set_element_list(fact_sheets.terms_for_public_fact_sheets(UNPROVIDED));
	}
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	SubLObject caching_state = fact_sheets.$get_public_fact_sheet_string_url_mappings_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.GET_PUBLIC_FACT_SHEET_STRING_URL_MAPPINGS, fact_sheets.$get_public_fact_sheet_string_url_mappings_caching_state$, NIL, EQUAL, TWO_INTEGER, ZERO_INTEGER);
	}
	final SubLObject sxhash = memoization_state.sxhash_calc_2(terms, fs_type);
	final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
	if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    SubLObject cdolist_list_var = collisions;
	    SubLObject collision = NIL;
	    collision = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject cached_args = collision.first();
		final SubLObject results2 = second(collision);
		if (terms.equal(cached_args.first())) {
		    cached_args = cached_args.rest();
		    if (((NIL != cached_args) && (NIL == cached_args.rest())) && fs_type.equal(cached_args.first())) {
			return memoization_state.caching_results(results2);
		    }
		}
		cdolist_list_var = cdolist_list_var.rest();
		collision = cdolist_list_var.first();
	    }
	}
	final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.get_public_fact_sheet_string_url_mappings_internal(terms, fs_type)));
	memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(terms, fs_type));
	return memoization_state.caching_results(results3);
    }

    /**
     *
     *
     * @param MAPPINGS;
     * 		a dictionary containing mappings between strings and (TERM RELATIVE-URL) pairs
     * @param OUT-FILE
     * 		stringp; a fully-qualified filename to be used for the XML output
     */
    @LispMethod(comment = "@param MAPPINGS;\r\n\t\ta dictionary containing mappings between strings and (TERM RELATIVE-URL) pairs\r\n@param OUT-FILE\r\n\t\tstringp; a fully-qualified filename to be used for the XML output")
    public static final SubLObject dump_fact_sheet_string_url_mappings_alt(SubLObject mappings, SubLObject out_file) {
	if (mappings == UNPROVIDED) {
	    mappings = com.cyc.cycjava.cycl.fact_sheets.get_public_fact_sheet_string_url_mappings(UNPROVIDED, UNPROVIDED);
	}
	if (out_file == UNPROVIDED) {
	    out_file = $incyc_searchdata_xml_file$.getDynamicValue();
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject stream = NIL;
		try {
		    {
			SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
			try {
			    stream_macros.$stream_requires_locking$.bind(NIL, thread);
			    stream = compatibility.open_text(out_file, $OUTPUT, NIL);
			} finally {
			    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
			}
		    }
		    if (!stream.isStream()) {
			Errors.error($str_alt137$Unable_to_open__S, out_file);
		    }
		    {
			SubLObject s = stream;
			{
			    SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
			    try {
				xml_vars.$xml_stream$.bind(s, thread);
				{
				    SubLObject _prev_bind_0_496 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
				    SubLObject _prev_bind_1 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
				    try {
					xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
					xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
					xml_utilities.xml_start_tag_internal($$$resultSet, NIL, NIL);
					{
					    SubLObject so_far = ZERO_INTEGER;
					    SubLObject total = dictionary.dictionary_length(mappings);
					    {
						SubLObject _prev_bind_0_497 = $last_percent_progress_index$.currentBinding(thread);
						SubLObject _prev_bind_1_498 = $last_percent_progress_prediction$.currentBinding(thread);
						SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
						SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
						try {
						    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
						    $last_percent_progress_prediction$.bind(NIL, thread);
						    $within_noting_percent_progress$.bind(T, thread);
						    $percent_progress_start_time$.bind(get_universal_time(), thread);
						    noting_percent_progress_preamble($$$Writing_out_paths);
						    {
							SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mappings));
							while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
							    thread.resetMultipleValues();
							    {
								SubLObject string = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
								SubLObject mapping = thread.secondMultipleValue();
								thread.resetMultipleValues();
								{
								    SubLObject cdolist_list_var = mapping;
								    SubLObject term_url = NIL;
								    for (term_url = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), term_url = cdolist_list_var.first()) {
									{
									    SubLObject datum = term_url;
									    SubLObject current = datum;
									    SubLObject v_term = NIL;
									    SubLObject url = NIL;
									    destructuring_bind_must_consp(current, datum, $list_alt933);
									    v_term = current.first();
									    current = current.rest();
									    destructuring_bind_must_consp(current, datum, $list_alt933);
									    url = current.first();
									    current = current.rest();
									    if (NIL == current) {
										{
										    SubLObject attrs = list(new SubLObject[] { $$$displayNl, string, $$$nl, string, $$$factSheetPath, url, $$$cycl, v_term, $$$cyclId, kb_utilities.compact_hl_external_id_string(v_term) });
										    {
											SubLObject _prev_bind_0_499 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
											SubLObject _prev_bind_1_500 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
											try {
											    xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
											    xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
											    xml_utilities.xml_start_tag_internal($$$term, attrs, T);
											} finally {
											    xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_500, thread);
											    xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_499, thread);
											}
										    }
										}
									    } else {
										cdestructuring_bind_error(datum, $list_alt933);
									    }
									}
									xml_utilities.xml_terpri();
								    }
								}
								so_far = add(so_far, ONE_INTEGER);
								note_percent_progress(so_far, total);
								iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
							    }
							}
							dictionary_contents.do_dictionary_contents_finalize(iteration_state);
						    }
						    noting_percent_progress_postamble();
						} finally {
						    $percent_progress_start_time$.rebind(_prev_bind_3, thread);
						    $within_noting_percent_progress$.rebind(_prev_bind_2, thread);
						    $last_percent_progress_prediction$.rebind(_prev_bind_1_498, thread);
						    $last_percent_progress_index$.rebind(_prev_bind_0_497, thread);
						}
					    }
					}
				    } finally {
					xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1, thread);
					xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_496, thread);
				    }
				}
				xml_utilities.xml_terpri();
				xml_utilities.xml_end_tag_internal($$$resultSet);
			    } finally {
				xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    if (stream.isStream()) {
				close(stream, UNPROVIDED);
			    }
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
	    }
	    return $incyc_searchdata_xml_file$.getDynamicValue(thread);
	}
    }

    /**
     *
     *
     * @param MAPPINGS;
     * 		a dictionary containing mappings between strings and (TERM RELATIVE-URL) pairs
     * @param OUT-FILE
     * 		stringp; a fully-qualified filename to be used for the XML output
     */
    @LispMethod(comment = "@param MAPPINGS;\r\n\t\ta dictionary containing mappings between strings and (TERM RELATIVE-URL) pairs\r\n@param OUT-FILE\r\n\t\tstringp; a fully-qualified filename to be used for the XML output")
    public static SubLObject dump_fact_sheet_string_url_mappings(SubLObject mappings, SubLObject out_file) {
	if (mappings == UNPROVIDED) {
	    mappings = fact_sheets.get_public_fact_sheet_string_url_mappings(UNPROVIDED, UNPROVIDED);
	}
	if (out_file == UNPROVIDED) {
	    out_file = fact_sheets.$incyc_searchdata_xml_file$.getDynamicValue();
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject stream = NIL;
	try {
	    final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
	    try {
		stream_macros.$stream_requires_locking$.bind(NIL, thread);
		stream = compatibility.open_text(out_file, $OUTPUT);
	    } finally {
		stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
	    }
	    if (!stream.isStream()) {
		Errors.error(fact_sheets.$str284$Unable_to_open__S, out_file);
	    }
	    final SubLObject s = stream;
	    final SubLObject _prev_bind_2 = xml_vars.$xml_stream$.currentBinding(thread);
	    try {
		xml_vars.$xml_stream$.bind(s, thread);
		try {
		    final SubLObject _prev_bind_0_$436 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
		    final SubLObject _prev_bind_3 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
		    try {
			xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
			xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
			xml_utilities.xml_start_tag_internal(fact_sheets.$$$resultSet, NIL, NIL, NIL, $UNINITIALIZED);
			final SubLObject _prev_bind_0_$437 = xml_vars.$xml_default_namespace$.currentBinding(thread);
			try {
			    xml_vars.$xml_default_namespace$.bind($UNINITIALIZED, thread);
			    SubLObject so_far = ZERO_INTEGER;
			    final SubLObject total = dictionary.dictionary_length(mappings);
			    final SubLObject _prev_bind_0_$438 = $last_percent_progress_index$.currentBinding(thread);
			    final SubLObject _prev_bind_1_$439 = $last_percent_progress_prediction$.currentBinding(thread);
			    final SubLObject _prev_bind_4 = $within_noting_percent_progress$.currentBinding(thread);
			    final SubLObject _prev_bind_5 = $percent_progress_start_time$.currentBinding(thread);
			    try {
				$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
				$last_percent_progress_prediction$.bind(NIL, thread);
				$within_noting_percent_progress$.bind(T, thread);
				$percent_progress_start_time$.bind(get_universal_time(), thread);
				try {
				    noting_percent_progress_preamble(fact_sheets.$$$Writing_out_paths);
				    SubLObject iteration_state;
				    for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mappings)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(
					    iteration_state)) {
					thread.resetMultipleValues();
					final SubLObject string = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
					final SubLObject mapping = thread.secondMultipleValue();
					thread.resetMultipleValues();
					SubLObject cdolist_list_var = mapping;
					SubLObject term_url = NIL;
					term_url = cdolist_list_var.first();
					while (NIL != cdolist_list_var) {
					    SubLObject current;
					    final SubLObject datum = current = term_url;
					    SubLObject v_term = NIL;
					    SubLObject url = NIL;
					    destructuring_bind_must_consp(current, datum, fact_sheets.$list821);
					    v_term = current.first();
					    current = current.rest();
					    destructuring_bind_must_consp(current, datum, fact_sheets.$list821);
					    url = current.first();
					    current = current.rest();
					    if (NIL == current) {
						final SubLObject attrs = list(new SubLObject[] { fact_sheets.$$$displayNl, string, fact_sheets.$$$nl, string, fact_sheets.$$$factSheetPath, url, fact_sheets.$$$cycl, v_term, fact_sheets.$$$cyclId, kb_utilities.compact_hl_external_id_string(v_term) });
						final SubLObject _prev_bind_0_$439 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
						final SubLObject _prev_bind_1_$440 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
						try {
						    xml_utilities.$xml_indentation_level$.bind(add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
						    xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
						    xml_utilities.xml_start_tag_internal(fact_sheets.$$$term, attrs, T, NIL, $UNINITIALIZED);
						    final SubLObject _prev_bind_0_$440 = xml_vars.$xml_default_namespace$.currentBinding(thread);
						    try {
							xml_vars.$xml_default_namespace$.bind($UNINITIALIZED, thread);
						    } finally {
							xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$440, thread);
						    }
						} finally {
						    xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$440, thread);
						    xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$439, thread);
						}
					    } else {
						cdestructuring_bind_error(datum, fact_sheets.$list821);
					    }
					    xml_utilities.xml_terpri();
					    cdolist_list_var = cdolist_list_var.rest();
					    term_url = cdolist_list_var.first();
					}
					so_far = add(so_far, ONE_INTEGER);
					note_percent_progress(so_far, total);
				    }
				    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
				} finally {
				    final SubLObject _prev_bind_0_$441 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					final SubLObject _values = getValuesAsVector();
					noting_percent_progress_postamble();
					restoreValuesFromVector(_values);
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$441, thread);
				    }
				}
			    } finally {
				$percent_progress_start_time$.rebind(_prev_bind_5, thread);
				$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
				$last_percent_progress_prediction$.rebind(_prev_bind_1_$439, thread);
				$last_percent_progress_index$.rebind(_prev_bind_0_$438, thread);
			    }
			} finally {
			    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$437, thread);
			}
		    } finally {
			xml_utilities.$cycml_indent_level$.rebind(_prev_bind_3, thread);
			xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$436, thread);
		    }
		} finally {
		    final SubLObject _prev_bind_0_$442 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values2 = getValuesAsVector();
			xml_utilities.xml_terpri();
			xml_utilities.xml_end_tag_internal(fact_sheets.$$$resultSet);
			restoreValuesFromVector(_values2);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$442, thread);
		    }
		}
	    } finally {
		xml_vars.$xml_stream$.rebind(_prev_bind_2, thread);
	    }
	} finally {
	    final SubLObject _prev_bind_6 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values3 = getValuesAsVector();
		if (stream.isStream()) {
		    close(stream, UNPROVIDED);
		}
		restoreValuesFromVector(_values3);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
	    }
	}
	return fact_sheets.$incyc_searchdata_xml_file$.getDynamicValue(thread);
    }

    public static final SubLObject convert_search_data_to_htaccess_redirects_alt(SubLObject searchdata_file, SubLObject out_file) {
	if (searchdata_file == UNPROVIDED) {
	    searchdata_file = $incyc_searchdata_xml_file$.getDynamicValue();
	}
	if (out_file == UNPROVIDED) {
	    out_file = $incyc_searchdata_htaccess_file$.getDynamicValue();
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject stream = NIL;
		try {
		    {
			SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
			try {
			    stream_macros.$stream_requires_locking$.bind(NIL, thread);
			    stream = compatibility.open_text(out_file, $OUTPUT, NIL);
			} finally {
			    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
			}
		    }
		    if (!stream.isStream()) {
			Errors.error($str_alt137$Unable_to_open__S, out_file);
		    }
		    {
			SubLObject s = stream;
			SubLObject stream_501 = NIL;
			try {
			    stream_501 = compatibility.open_text(searchdata_file, $INPUT, NIL);
			    if (!stream_501.isStream()) {
				Errors.error($str_alt137$Unable_to_open__S, searchdata_file);
			    }
			    {
				SubLObject infile = stream_501;
				if (infile.isStream()) {
				    {
					SubLObject line = NIL;
					for (line = read_line(infile, NIL, NIL, UNPROVIDED); NIL != line; line = read_line(infile, NIL, NIL, UNPROVIDED)) {
					    {
						SubLObject match = regular_expression_utilities.regexp_capturing_match($str_alt943$factSheetPath__________cyclId____, line, UNPROVIDED, UNPROVIDED);
						SubLObject path = (NIL != match) ? ((SubLObject) (second(match))) : NIL;
						SubLObject id = (NIL != match) ? ((SubLObject) (third(match))) : NIL;
						if ((NIL != path) && (NIL != id)) {
						    format(s, $str_alt944$RewriteCond________1___A___, id);
						    format(s, $str_alt945$RewriteRule________scratch_www_in, path);
						}
					    }
					}
				    }
				}
			    }
			} finally {
			    {
				SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
				try {
				    $is_thread_performing_cleanupP$.bind(T, thread);
				    if (stream_501.isStream()) {
					close(stream_501, UNPROVIDED);
				    }
				} finally {
				    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
				}
			    }
			}
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    if (stream.isStream()) {
				close(stream, UNPROVIDED);
			    }
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
	    }
	    return out_file;
	}
    }

    public static SubLObject convert_search_data_to_htaccess_redirects(SubLObject searchdata_file, SubLObject out_file) {
	if (searchdata_file == UNPROVIDED) {
	    searchdata_file = fact_sheets.$incyc_searchdata_xml_file$.getDynamicValue();
	}
	if (out_file == UNPROVIDED) {
	    out_file = fact_sheets.$incyc_searchdata_htaccess_file$.getDynamicValue();
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject stream = NIL;
	try {
	    final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
	    try {
		stream_macros.$stream_requires_locking$.bind(NIL, thread);
		stream = compatibility.open_text(out_file, $OUTPUT);
	    } finally {
		stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
	    }
	    if (!stream.isStream()) {
		Errors.error(fact_sheets.$str284$Unable_to_open__S, out_file);
	    }
	    final SubLObject s = stream;
	    SubLObject stream_$445 = NIL;
	    try {
		final SubLObject _prev_bind_2 = stream_macros.$stream_requires_locking$.currentBinding(thread);
		try {
		    stream_macros.$stream_requires_locking$.bind(NIL, thread);
		    stream_$445 = compatibility.open_text(searchdata_file, $INPUT);
		} finally {
		    stream_macros.$stream_requires_locking$.rebind(_prev_bind_2, thread);
		}
		if (!stream_$445.isStream()) {
		    Errors.error(fact_sheets.$str284$Unable_to_open__S, searchdata_file);
		}
		final SubLObject infile = stream_$445;
		if (infile.isStream()) {
		    SubLObject line;
		    SubLObject match;
		    SubLObject path;
		    SubLObject id;
		    for (line = NIL, line = file_utilities.cdolines_get_next_line(infile); NIL != line; line = file_utilities.cdolines_get_next_line(infile)) {
			match = regular_expression_utilities.regexp_capturing_match(fact_sheets.$str831$factSheetPath__________cyclId____, line, UNPROVIDED, UNPROVIDED);
			path = (NIL != match) ? second(match) : NIL;
			id = (NIL != match) ? third(match) : NIL;
			if ((NIL != path) && (NIL != id)) {
			    format(s, fact_sheets.$str832$RewriteCond________1___A___, id);
			    format(s, fact_sheets.$str833$RewriteRule________scratch_www_in, path);
			}
		    }
		}
	    } finally {
		final SubLObject _prev_bind_3 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values = getValuesAsVector();
		    if (stream_$445.isStream()) {
			close(stream_$445, UNPROVIDED);
		    }
		    restoreValuesFromVector(_values);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
		}
	    }
	} finally {
	    final SubLObject _prev_bind_4 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values2 = getValuesAsVector();
		if (stream.isStream()) {
		    close(stream, UNPROVIDED);
		}
		restoreValuesFromVector(_values2);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
	    }
	}
	return out_file;
    }

    public static final SubLObject convert_search_data_to_sql_file_alt(SubLObject searchdata_file, SubLObject out_file) {
	if (searchdata_file == UNPROVIDED) {
	    searchdata_file = $incyc_searchdata_xml_file$.getDynamicValue();
	}
	if (out_file == UNPROVIDED) {
	    out_file = $incyc_searchdata_sql_file$.getDynamicValue();
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject stream = NIL;
		try {
		    {
			SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
			try {
			    stream_macros.$stream_requires_locking$.bind(NIL, thread);
			    stream = compatibility.open_text(out_file, $OUTPUT, NIL);
			} finally {
			    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
			}
		    }
		    if (!stream.isStream()) {
			Errors.error($str_alt137$Unable_to_open__S, out_file);
		    }
		    {
			SubLObject s = stream;
			format(s, $str_alt946$_A__, $str_alt947$DROP_TABLE_HAS_INCYC_PAGE_);
			format(s, $str_alt946$_A__, $str_alt948$CREATE_TABLE_HAS_INCYC_PAGE__EXTE);
			{
			    SubLObject current_line = ZERO_INTEGER;
			    SubLObject values = NIL;
			    SubLObject stream_502 = NIL;
			    try {
				stream_502 = compatibility.open_text(searchdata_file, $INPUT, NIL);
				if (!stream_502.isStream()) {
				    Errors.error($str_alt137$Unable_to_open__S, searchdata_file);
				}
				{
				    SubLObject infile = stream_502;
				    if (infile.isStream()) {
					{
					    SubLObject line = NIL;
					    for (line = read_line(infile, NIL, NIL, UNPROVIDED); NIL != line; line = read_line(infile, NIL, NIL, UNPROVIDED)) {
						{
						    SubLObject match = regular_expression_utilities.regexp_capturing_match($str_alt949$cyclId________, line, UNPROVIDED, UNPROVIDED);
						    SubLObject id = (NIL != match) ? ((SubLObject) (second(match))) : NIL;
						    if (NIL != id) {
							current_line = add(current_line, ONE_INTEGER);
							if (mod(current_line, $int$50) == ZERO_INTEGER) {
							    {
								SubLObject value_lines = string_utilities.bunge_with_string(values, $str_alt950$__);
								format(s, $str_alt951$INSERT_INTO_InCyc_Pages__EXTERNAL, value_lines);
								values = NIL;
							    }
							} else {
							    values = cons(cconcatenate($str_alt952$__, new SubLObject[] { format_nil.format_nil_a_no_copy(id), $str_alt953$__ }), values);
							}
						    }
						}
					    }
					}
				    }
				}
			    } finally {
				{
				    SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					if (stream_502.isStream()) {
					    close(stream_502, UNPROVIDED);
					}
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
				    }
				}
			    }
			    if (NIL != values) {
				{
				    SubLObject value_lines = string_utilities.bunge_with_string(values, $str_alt950$__);
				    format(s, $str_alt951$INSERT_INTO_InCyc_Pages__EXTERNAL, value_lines);
				    values = NIL;
				}
			    }
			}
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    if (stream.isStream()) {
				close(stream, UNPROVIDED);
			    }
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
	    }
	    return out_file;
	}
    }

    public static SubLObject convert_search_data_to_sql_file(SubLObject searchdata_file, SubLObject out_file) {
	if (searchdata_file == UNPROVIDED) {
	    searchdata_file = fact_sheets.$incyc_searchdata_xml_file$.getDynamicValue();
	}
	if (out_file == UNPROVIDED) {
	    out_file = fact_sheets.$incyc_searchdata_sql_file$.getDynamicValue();
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject stream = NIL;
	try {
	    final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
	    try {
		stream_macros.$stream_requires_locking$.bind(NIL, thread);
		stream = compatibility.open_text(out_file, $OUTPUT);
	    } finally {
		stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
	    }
	    if (!stream.isStream()) {
		Errors.error(fact_sheets.$str284$Unable_to_open__S, out_file);
	    }
	    final SubLObject s = stream;
	    format(s, fact_sheets.$str834$_A__, fact_sheets.$str835$DROP_TABLE_HAS_INCYC_PAGE_);
	    format(s, fact_sheets.$str834$_A__, fact_sheets.$str836$CREATE_TABLE_HAS_INCYC_PAGE__EXTE);
	    SubLObject current_line = ZERO_INTEGER;
	    SubLObject values = NIL;
	    SubLObject stream_$446 = NIL;
	    try {
		final SubLObject _prev_bind_2 = stream_macros.$stream_requires_locking$.currentBinding(thread);
		try {
		    stream_macros.$stream_requires_locking$.bind(NIL, thread);
		    stream_$446 = compatibility.open_text(searchdata_file, $INPUT);
		} finally {
		    stream_macros.$stream_requires_locking$.rebind(_prev_bind_2, thread);
		}
		if (!stream_$446.isStream()) {
		    Errors.error(fact_sheets.$str284$Unable_to_open__S, searchdata_file);
		}
		final SubLObject infile = stream_$446;
		if (infile.isStream()) {
		    SubLObject line;
		    SubLObject match;
		    SubLObject id;
		    SubLObject value_lines;
		    for (line = NIL, line = file_utilities.cdolines_get_next_line(infile); NIL != line; line = file_utilities.cdolines_get_next_line(infile)) {
			match = regular_expression_utilities.regexp_capturing_match(fact_sheets.$str837$cyclId________, line, UNPROVIDED, UNPROVIDED);
			id = (NIL != match) ? second(match) : NIL;
			if (NIL != id) {
			    current_line = add(current_line, ONE_INTEGER);
			    if (mod(current_line, fact_sheets.$int$50).eql(ZERO_INTEGER)) {
				value_lines = string_utilities.bunge_with_string(values, fact_sheets.$str838$__);
				format(s, fact_sheets.$str839$INSERT_INTO_InCyc_Pages__EXTERNAL, value_lines);
				values = NIL;
			    } else {
				values = cons(cconcatenate(fact_sheets.$str840$__, new SubLObject[] { format_nil.format_nil_a_no_copy(id), fact_sheets.$str841$__ }), values);
			    }
			}
		    }
		}
	    } finally {
		final SubLObject _prev_bind_3 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values = getValuesAsVector();
		    if (stream_$446.isStream()) {
			close(stream_$446, UNPROVIDED);
		    }
		    restoreValuesFromVector(_values);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
		}
	    }
	    if (NIL != values) {
		final SubLObject value_lines2 = string_utilities.bunge_with_string(values, fact_sheets.$str838$__);
		format(s, fact_sheets.$str839$INSERT_INTO_InCyc_Pages__EXTERNAL, value_lines2);
		values = NIL;
	    }
	} finally {
	    final SubLObject _prev_bind_4 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values2 = getValuesAsVector();
		if (stream.isStream()) {
		    close(stream, UNPROVIDED);
		}
		restoreValuesFromVector(_values2);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
	    }
	}
	return out_file;
    }

    /**
     *
     *
     * @return dictionary-p; a dictionary relating Cyc terms with public fact sheets to the fact-sheet paths
     */
    @LispMethod(comment = "@return dictionary-p; a dictionary relating Cyc terms with public fact sheets to the fact-sheet paths")
    public static final SubLObject get_existing_public_fact_sheet_term_pairs_alt(SubLObject directory) {
	if (directory == UNPROVIDED) {
	    directory = $incyc_factsheet_staging_directory$.getDynamicValue();
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject dict = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
		SubLTrampolineFile.checkType(directory, DIRECTORY_P);
		{
		    SubLObject directory_list_var = list(directory);
		    SubLObject current_directory_var = NIL;
		    for (current_directory_var = directory_list_var.first(); NIL != directory_list_var; current_directory_var = directory_list_var.first()) {
			directory_list_var = directory_list_var.rest();
			SubLTrampolineFile.checkType(current_directory_var, DIRECTORY_P);
			{
			    SubLObject directory_contents_var = Filesys.directory(current_directory_var, T);
			    SubLObject progress_message_var = ($str_alt954$Mapping_public_fact_sheet_files__.isString())
				    ? ((SubLObject) (cconcatenate($str_alt954$Mapping_public_fact_sheet_files__, cconcatenate(format_nil.$format_nil_percent$.getGlobalValue(), new SubLObject[] { $str_alt658$_Directory__, format_nil.format_nil_s_no_copy(current_directory_var) }))))
				    : NIL;
			    {
				SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
				try {
				    $silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
				    {
					SubLObject list_var = directory_contents_var;
					$progress_note$.setDynamicValue(progress_message_var, thread);
					$progress_start_time$.setDynamicValue(get_universal_time(), thread);
					$progress_total$.setDynamicValue(length(list_var), thread);
					$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
					{
					    SubLObject _prev_bind_0_503 = $last_percent_progress_index$.currentBinding(thread);
					    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
					    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
					    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
					    try {
						$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
						$last_percent_progress_prediction$.bind(NIL, thread);
						$within_noting_percent_progress$.bind(T, thread);
						$percent_progress_start_time$.bind(get_universal_time(), thread);
						noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
						{
						    SubLObject csome_list_var = list_var;
						    SubLObject file = NIL;
						    for (file = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), file = csome_list_var.first()) {
							note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
							$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
							if (NIL != Filesys.directory_p(file)) {
							    directory_list_var = cons(file, directory_list_var);
							} else {
							    if (NIL != string_utilities.ends_with(file, $str_alt655$_html, UNPROVIDED)) {
								{
								    SubLObject local_filename = nth_value_step_2(nth_value_step_1(ONE_INTEGER), file_utilities.deconstruct_path(file));
								    SubLObject fact_sheet_term_id = string_utilities.post_remove(local_filename, $str_alt655$_html, UNPROVIDED);
								    SubLObject v_term = (NIL != com.cyc.cycjava.cycl.fact_sheets.possible_fact_sheet_term_id_p(fact_sheet_term_id)) ? ((SubLObject) (com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_id(fact_sheet_term_id, UNPROVIDED))) : NIL;
								    if (NIL != v_term) {
									dictionary.dictionary_enter(dict, v_term, file);
								    }
								}
							    }
							}
						    }
						}
						noting_percent_progress_postamble();
					    } finally {
						$percent_progress_start_time$.rebind(_prev_bind_3, thread);
						$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
						$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
						$last_percent_progress_index$.rebind(_prev_bind_0_503, thread);
					    }
					}
				    }
				} finally {
				    $silent_progressP$.rebind(_prev_bind_0, thread);
				}
			    }
			}
		    }
		}
		return dict;
	    }
	}
    }

    /**
     *
     *
     * @return dictionary-p; a dictionary relating Cyc terms with public fact sheets to the fact-sheet paths
     */
    @LispMethod(comment = "@return dictionary-p; a dictionary relating Cyc terms with public fact sheets to the fact-sheet paths")
    public static SubLObject get_existing_public_fact_sheet_term_pairs(SubLObject directory) {
	if (directory == UNPROVIDED) {
	    directory = fact_sheets.$incyc_factsheet_staging_directory$.getDynamicValue();
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject dict = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
	assert NIL != Filesys.directory_p(directory) : "! Filesys.directory_p(directory) " + ("Filesys.directory_p(directory) " + "CommonSymbols.NIL != Filesys.directory_p(directory) ") + directory;
	SubLObject directory_list_var = list(directory);
	SubLObject current_directory_var = NIL;
	current_directory_var = directory_list_var.first();
	while (NIL != directory_list_var) {
	    directory_list_var = directory_list_var.rest();
	    assert NIL != Filesys.directory_p(current_directory_var) : "! Filesys.directory_p(current_directory_var) " + ("Filesys.directory_p(current_directory_var) " + "CommonSymbols.NIL != Filesys.directory_p(current_directory_var) ") + current_directory_var;
	    SubLObject directory_contents_var = Filesys.directory(current_directory_var, T);
	    final SubLObject progress_message_var = (fact_sheets.$str842$Mapping_public_fact_sheet_files__.isString())
		    ? cconcatenate(fact_sheets.$str842$Mapping_public_fact_sheet_files__, cconcatenate(format_nil.$format_nil_percent$.getGlobalValue(), new SubLObject[] { fact_sheets.$str516$_Directory__, format_nil.format_nil_s_no_copy(current_directory_var) }))
		    : NIL;
	    final SubLObject _prev_bind_0 = $silent_progressP$.currentBinding(thread);
	    try {
		$silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
		if (NIL.isFunctionSpec()) {
		    directory_contents_var = Sort.sort(directory_contents_var, NIL, UNPROVIDED);
		}
		final SubLObject list_var = directory_contents_var;
		final SubLObject _prev_bind_0_$447 = $progress_note$.currentBinding(thread);
		final SubLObject _prev_bind_2 = $progress_start_time$.currentBinding(thread);
		final SubLObject _prev_bind_3 = $progress_total$.currentBinding(thread);
		final SubLObject _prev_bind_4 = $progress_sofar$.currentBinding(thread);
		final SubLObject _prev_bind_5 = $last_percent_progress_index$.currentBinding(thread);
		final SubLObject _prev_bind_6 = $last_percent_progress_prediction$.currentBinding(thread);
		final SubLObject _prev_bind_7 = $within_noting_percent_progress$.currentBinding(thread);
		final SubLObject _prev_bind_8 = $percent_progress_start_time$.currentBinding(thread);
		try {
		    $progress_note$.bind(NIL != progress_message_var ? progress_message_var : fact_sheets.$$$cdolist, thread);
		    $progress_start_time$.bind(get_universal_time(), thread);
		    $progress_total$.bind(length(list_var), thread);
		    $progress_sofar$.bind(ZERO_INTEGER, thread);
		    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
		    $last_percent_progress_prediction$.bind(NIL, thread);
		    $within_noting_percent_progress$.bind(T, thread);
		    $percent_progress_start_time$.bind(get_universal_time(), thread);
		    try {
			noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
			SubLObject csome_list_var = list_var;
			SubLObject file = NIL;
			file = csome_list_var.first();
			while (NIL != csome_list_var) {
			    if (NIL != Filesys.directory_p(file)) {
				directory_list_var = cons(file, directory_list_var);
			    } else if (NIL != string_utilities.ends_with(file, fact_sheets.$str513$_html, UNPROVIDED)) {
				final SubLObject local_filename = nth_value_step_2(nth_value_step_1(ONE_INTEGER), file_utilities.deconstruct_path(file));
				final SubLObject fact_sheet_term_id = string_utilities.post_remove(local_filename, fact_sheets.$str513$_html, UNPROVIDED);
				final SubLObject v_term = (NIL != fact_sheets.possible_fact_sheet_term_id_p(fact_sheet_term_id)) ? fact_sheets.fact_sheet_term_from_id(fact_sheet_term_id, UNPROVIDED) : NIL;
				if (NIL != v_term) {
				    dictionary.dictionary_enter(dict, v_term, file);
				}
			    }

			    $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
			    note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
			    csome_list_var = csome_list_var.rest();
			    file = csome_list_var.first();
			}
		    } finally {
			final SubLObject _prev_bind_0_$448 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    final SubLObject _values = getValuesAsVector();
			    noting_percent_progress_postamble();
			    restoreValuesFromVector(_values);
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$448, thread);
			}
		    }
		} finally {
		    $percent_progress_start_time$.rebind(_prev_bind_8, thread);
		    $within_noting_percent_progress$.rebind(_prev_bind_7, thread);
		    $last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
		    $last_percent_progress_index$.rebind(_prev_bind_5, thread);
		    $progress_sofar$.rebind(_prev_bind_4, thread);
		    $progress_total$.rebind(_prev_bind_3, thread);
		    $progress_start_time$.rebind(_prev_bind_2, thread);
		    $progress_note$.rebind(_prev_bind_0_$447, thread);
		}
	    } finally {
		$silent_progressP$.rebind(_prev_bind_0, thread);
	    }
	    current_directory_var = directory_list_var.first();
	}
	return dict;
    }

    public static final SubLObject get_public_fact_sheet_string_url_mappings_as_json_alt(SubLObject fact_sheets_directory, SubLObject filename, SubLObject fs_type) {
	if (fact_sheets_directory == UNPROVIDED) {
	    fact_sheets_directory = $incyc_factsheet_staging_directory$.getDynamicValue();
	}
	if (filename == UNPROVIDED) {
	    filename = $incyc_searchdata_staging_file$.getDynamicValue();
	}
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject terms = set.set_element_list(com.cyc.cycjava.cycl.fact_sheets.terms_for_public_fact_sheets(fs_type));
		SubLObject mappings = com.cyc.cycjava.cycl.fact_sheets.get_public_fact_sheet_string_url_mappings(terms, fs_type);
		SubLObject active_mappings = com.cyc.cycjava.cycl.fact_sheets.filter_mappings_for_good_urls(mappings, fact_sheets_directory);
		SubLObject mapping_progress = ZERO_INTEGER;
		SubLObject stream = NIL;
		try {
		    {
			SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
			try {
			    stream_macros.$stream_requires_locking$.bind(NIL, thread);
			    stream = compatibility.open_text(filename, $OUTPUT, NIL);
			} finally {
			    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
			}
		    }
		    if (!stream.isStream()) {
			Errors.error($str_alt137$Unable_to_open__S, filename);
		    }
		    {
			SubLObject s = stream;
			princ($str_alt955$var_searchData____, s);
			{
			    SubLObject so_far = ZERO_INTEGER;
			    SubLObject total = dictionary.dictionary_length(active_mappings);
			    {
				SubLObject _prev_bind_0 = $last_percent_progress_index$.currentBinding(thread);
				SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
				SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
				SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
				try {
				    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
				    $last_percent_progress_prediction$.bind(NIL, thread);
				    $within_noting_percent_progress$.bind(T, thread);
				    $percent_progress_start_time$.bind(get_universal_time(), thread);
				    noting_percent_progress_preamble($$$writing_json);
				    {
					SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(active_mappings));
					while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
					    thread.resetMultipleValues();
					    {
						SubLObject string = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
						SubLObject terms_urls = thread.secondMultipleValue();
						thread.resetMultipleValues();
						mapping_progress = add(mapping_progress, ONE_INTEGER);
						com.cyc.cycjava.cycl.fact_sheets.print_one_string_term_url_mapping_as_json(string, terms_urls, s);
						if (mapping_progress.numL(dictionary.dictionary_length(active_mappings))) {
						    princ($str_alt957$_, s);
						}
						so_far = add(so_far, ONE_INTEGER);
						note_percent_progress(so_far, total);
						iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
					    }
					}
					dictionary_contents.do_dictionary_contents_finalize(iteration_state);
				    }
				    noting_percent_progress_postamble();
				} finally {
				    $percent_progress_start_time$.rebind(_prev_bind_3, thread);
				    $within_noting_percent_progress$.rebind(_prev_bind_2, thread);
				    $last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
				    $last_percent_progress_index$.rebind(_prev_bind_0, thread);
				}
			    }
			}
			princ($str_alt958$_, s);
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    if (stream.isStream()) {
				close(stream, UNPROVIDED);
			    }
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return filename;
	    }
	}
    }

    public static SubLObject get_public_fact_sheet_string_url_mappings_as_json(SubLObject fact_sheets_directory, SubLObject filename, SubLObject fs_type) {
	if (fact_sheets_directory == UNPROVIDED) {
	    fact_sheets_directory = fact_sheets.$incyc_factsheet_staging_directory$.getDynamicValue();
	}
	if (filename == UNPROVIDED) {
	    filename = fact_sheets.$incyc_searchdata_staging_file$.getDynamicValue();
	}
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject terms = set.set_element_list(fact_sheets.terms_for_public_fact_sheets(fs_type));
	final SubLObject mappings = fact_sheets.get_public_fact_sheet_string_url_mappings(terms, fs_type);
	final SubLObject active_mappings = fact_sheets.filter_mappings_for_good_urls(mappings, fact_sheets_directory);
	SubLObject mapping_progress = ZERO_INTEGER;
	SubLObject stream = NIL;
	try {
	    final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
	    try {
		stream_macros.$stream_requires_locking$.bind(NIL, thread);
		stream = compatibility.open_text(filename, $OUTPUT);
	    } finally {
		stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
	    }
	    if (!stream.isStream()) {
		Errors.error(fact_sheets.$str284$Unable_to_open__S, filename);
	    }
	    final SubLObject s = stream;
	    princ(fact_sheets.$str843$var_searchData____, s);
	    SubLObject so_far = ZERO_INTEGER;
	    final SubLObject total = dictionary.dictionary_length(active_mappings);
	    final SubLObject _prev_bind_2 = $last_percent_progress_index$.currentBinding(thread);
	    final SubLObject _prev_bind_3 = $last_percent_progress_prediction$.currentBinding(thread);
	    final SubLObject _prev_bind_4 = $within_noting_percent_progress$.currentBinding(thread);
	    final SubLObject _prev_bind_5 = $percent_progress_start_time$.currentBinding(thread);
	    try {
		$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
		$last_percent_progress_prediction$.bind(NIL, thread);
		$within_noting_percent_progress$.bind(T, thread);
		$percent_progress_start_time$.bind(get_universal_time(), thread);
		try {
		    noting_percent_progress_preamble(fact_sheets.$$$writing_json);
		    SubLObject iteration_state;
		    for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(active_mappings)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(
			    iteration_state)) {
			thread.resetMultipleValues();
			final SubLObject string = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
			final SubLObject terms_urls = thread.secondMultipleValue();
			thread.resetMultipleValues();
			mapping_progress = add(mapping_progress, ONE_INTEGER);
			fact_sheets.print_one_string_term_url_mapping_as_json(string, terms_urls, s);
			if (mapping_progress.numL(dictionary.dictionary_length(active_mappings))) {
			    princ(fact_sheets.$str845$_, s);
			}
			so_far = add(so_far, ONE_INTEGER);
			note_percent_progress(so_far, total);
		    }
		    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
		} finally {
		    final SubLObject _prev_bind_0_$449 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values = getValuesAsVector();
			noting_percent_progress_postamble();
			restoreValuesFromVector(_values);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$449, thread);
		    }
		}
	    } finally {
		$percent_progress_start_time$.rebind(_prev_bind_5, thread);
		$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
		$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
		$last_percent_progress_index$.rebind(_prev_bind_2, thread);
	    }
	    princ(fact_sheets.$str846$_, s);
	} finally {
	    final SubLObject _prev_bind_6 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values2 = getValuesAsVector();
		if (stream.isStream()) {
		    close(stream, UNPROVIDED);
		}
		restoreValuesFromVector(_values2);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
	    }
	}
	return filename;
    }

    public static final SubLObject print_one_string_term_url_mapping_as_json_alt(SubLObject string, SubLObject terms_urls, SubLObject stream) {
	{
	    SubLObject clean_string = string_utilities.do_string_substitutions_robust(string, $list_alt959, UNPROVIDED);
	    format(stream, $str_alt960$__A_, clean_string);
	    princ($str_alt961$___, stream);
	    if (NIL != terms_urls) {
		format(stream, $str_alt960$__A_, terms_urls.first());
		{
		    SubLObject cdolist_list_var = terms_urls.rest();
		    SubLObject term_url = NIL;
		    for (term_url = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), term_url = cdolist_list_var.first()) {
			princ($str_alt950$__, stream);
			format(stream, $str_alt960$__A_, term_url);
		    }
		}
		princ($str_alt962$_, stream);
	    }
	}
	return NIL;
    }

    public static SubLObject print_one_string_term_url_mapping_as_json(final SubLObject string, final SubLObject terms_urls, final SubLObject stream) {
	final SubLObject clean_string = string_utilities.do_string_substitutions_robust(string, fact_sheets.$list847, UNPROVIDED);
	format(stream, fact_sheets.$str848$__A_, clean_string);
	princ(fact_sheets.$str849$___, stream);
	if (NIL != terms_urls) {
	    format(stream, fact_sheets.$str848$__A_, terms_urls.first());
	    SubLObject cdolist_list_var = terms_urls.rest();
	    SubLObject term_url = NIL;
	    term_url = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		princ(fact_sheets.$str838$__, stream);
		format(stream, fact_sheets.$str848$__A_, term_url);
		cdolist_list_var = cdolist_list_var.rest();
		term_url = cdolist_list_var.first();
	    }
	    princ(fact_sheets.$str850$_, stream);
	}
	return NIL;
    }

    public static final SubLObject filter_mappings_for_good_urls_alt(SubLObject mappings, SubLObject fact_sheets_directory) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject new_mappings = dictionary.new_dictionary(EQUAL, dictionary.dictionary_length(mappings));
		SubLObject so_far = ZERO_INTEGER;
		SubLObject total = dictionary.dictionary_length(mappings);
		{
		    SubLObject _prev_bind_0 = $last_percent_progress_index$.currentBinding(thread);
		    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
		    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
		    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
		    try {
			$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
			$last_percent_progress_prediction$.bind(NIL, thread);
			$within_noting_percent_progress$.bind(T, thread);
			$percent_progress_start_time$.bind(get_universal_time(), thread);
			noting_percent_progress_preamble($str_alt963$checking_for_fact_sheets);
			{
			    SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mappings));
			    while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
				thread.resetMultipleValues();
				{
				    SubLObject string = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
				    SubLObject terms_urls = thread.secondMultipleValue();
				    thread.resetMultipleValues();
				    {
					SubLObject cdolist_list_var = terms_urls;
					SubLObject term_url = NIL;
					for (term_url = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), term_url = cdolist_list_var.first()) {
					    {
						SubLObject datum = term_url;
						SubLObject current = datum;
						SubLObject v_term = NIL;
						SubLObject url = NIL;
						destructuring_bind_must_consp(current, datum, $list_alt933);
						v_term = current.first();
						current = current.rest();
						destructuring_bind_must_consp(current, datum, $list_alt933);
						url = current.first();
						current = current.rest();
						if (NIL == current) {
						    if (NIL != file_utilities.file_existsP(cconcatenate(fact_sheets_directory, url))) {
							dictionary_utilities.dictionary_push(new_mappings, string, url);
						    }
						} else {
						    cdestructuring_bind_error(datum, $list_alt933);
						}
					    }
					}
				    }
				    so_far = add(so_far, ONE_INTEGER);
				    note_percent_progress(so_far, total);
				    iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
				}
			    }
			    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
			}
			noting_percent_progress_postamble();
		    } finally {
			$percent_progress_start_time$.rebind(_prev_bind_3, thread);
			$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
			$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
			$last_percent_progress_index$.rebind(_prev_bind_0, thread);
		    }
		}
		return new_mappings;
	    }
	}
    }

    public static SubLObject filter_mappings_for_good_urls(final SubLObject mappings, final SubLObject fact_sheets_directory) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject new_mappings = dictionary.new_dictionary(EQUAL, dictionary.dictionary_length(mappings));
	SubLObject so_far = ZERO_INTEGER;
	final SubLObject total = dictionary.dictionary_length(mappings);
	final SubLObject _prev_bind_0 = $last_percent_progress_index$.currentBinding(thread);
	final SubLObject _prev_bind_2 = $last_percent_progress_prediction$.currentBinding(thread);
	final SubLObject _prev_bind_3 = $within_noting_percent_progress$.currentBinding(thread);
	final SubLObject _prev_bind_4 = $percent_progress_start_time$.currentBinding(thread);
	try {
	    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
	    $last_percent_progress_prediction$.bind(NIL, thread);
	    $within_noting_percent_progress$.bind(T, thread);
	    $percent_progress_start_time$.bind(get_universal_time(), thread);
	    try {
		noting_percent_progress_preamble(fact_sheets.$str851$checking_for_fact_sheets);
		SubLObject iteration_state;
		for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mappings)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
		    thread.resetMultipleValues();
		    final SubLObject string = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
		    final SubLObject terms_urls = thread.secondMultipleValue();
		    thread.resetMultipleValues();
		    SubLObject cdolist_list_var = terms_urls;
		    SubLObject term_url = NIL;
		    term_url = cdolist_list_var.first();
		    while (NIL != cdolist_list_var) {
			SubLObject current;
			final SubLObject datum = current = term_url;
			SubLObject v_term = NIL;
			SubLObject url = NIL;
			destructuring_bind_must_consp(current, datum, fact_sheets.$list821);
			v_term = current.first();
			current = current.rest();
			destructuring_bind_must_consp(current, datum, fact_sheets.$list821);
			url = current.first();
			current = current.rest();
			if (NIL == current) {
			    if (NIL != file_utilities.file_existsP(cconcatenate(fact_sheets_directory, url))) {
				dictionary_utilities.dictionary_push(new_mappings, string, url);
			    }
			} else {
			    cdestructuring_bind_error(datum, fact_sheets.$list821);
			}
			cdolist_list_var = cdolist_list_var.rest();
			term_url = cdolist_list_var.first();
		    }
		    so_far = add(so_far, ONE_INTEGER);
		    note_percent_progress(so_far, total);
		}
		dictionary_contents.do_dictionary_contents_finalize(iteration_state);
	    } finally {
		final SubLObject _prev_bind_0_$450 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values = getValuesAsVector();
		    noting_percent_progress_postamble();
		    restoreValuesFromVector(_values);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$450, thread);
		}
	    }
	} finally {
	    $percent_progress_start_time$.rebind(_prev_bind_4, thread);
	    $within_noting_percent_progress$.rebind(_prev_bind_3, thread);
	    $last_percent_progress_prediction$.rebind(_prev_bind_2, thread);
	    $last_percent_progress_index$.rebind(_prev_bind_0, thread);
	}
	return new_mappings;
    }

    public static final SubLObject fact_sheet_properties_for_type_alt(SubLObject type) {
	return getf(com.cyc.cycjava.cycl.fact_sheets.get_public_fact_sheet_properties(), type, UNPROVIDED);
    }

    public static SubLObject fact_sheet_properties_for_type(final SubLObject type) {
	return getf(fact_sheets.get_public_fact_sheet_properties(), type, UNPROVIDED);
    }

    public static final SubLObject get_fs_collection_name_alt(SubLObject type) {
	return getf(getf(com.cyc.cycjava.cycl.fact_sheets.get_public_fact_sheet_properties(), type, UNPROVIDED), $COLLECTION_NAME, UNPROVIDED);
    }

    public static SubLObject get_fs_collection_name(final SubLObject type) {
	return getf(getf(fact_sheets.get_public_fact_sheet_properties(), type, UNPROVIDED), $COLLECTION_NAME, UNPROVIDED);
    }

    public static final SubLObject get_fs_whitelist_types_alt(SubLObject type) {
	return getf(getf(com.cyc.cycjava.cycl.fact_sheets.get_public_fact_sheet_properties(), type, UNPROVIDED), $ROOT_TYPES, UNPROVIDED);
    }

    public static SubLObject get_fs_whitelist_types(final SubLObject type) {
	return getf(getf(fact_sheets.get_public_fact_sheet_properties(), type, UNPROVIDED), $ROOT_TYPES, UNPROVIDED);
    }

    public static final SubLObject get_fs_blacklist_types_alt(SubLObject type) {
	return getf(getf(com.cyc.cycjava.cycl.fact_sheets.get_public_fact_sheet_properties(), type, UNPROVIDED), $BLACKLIST_TYPES, UNPROVIDED);
    }

    public static SubLObject get_fs_blacklist_types(final SubLObject type) {
	return getf(getf(fact_sheets.get_public_fact_sheet_properties(), type, UNPROVIDED), $BLACKLIST_TYPES, UNPROVIDED);
    }

    public static final SubLObject get_fs_quoted_blacklist_types_alt(SubLObject type) {
	return getf(getf(com.cyc.cycjava.cycl.fact_sheets.get_public_fact_sheet_properties(), type, UNPROVIDED), $BLACKLIST_QUOTED_TYPES, UNPROVIDED);
    }

    public static SubLObject get_fs_quoted_blacklist_types(final SubLObject type) {
	return getf(getf(fact_sheets.get_public_fact_sheet_properties(), type, UNPROVIDED), fact_sheets.$BLACKLIST_QUOTED_TYPES, UNPROVIDED);
    }

    public static final SubLObject get_fs_blacklist_sources_alt(SubLObject type) {
	return getf(getf(com.cyc.cycjava.cycl.fact_sheets.get_public_fact_sheet_properties(), type, UNPROVIDED), $BLACKLIST_SOURCES, UNPROVIDED);
    }

    public static SubLObject get_fs_blacklist_sources(final SubLObject type) {
	return getf(getf(fact_sheets.get_public_fact_sheet_properties(), type, UNPROVIDED), $BLACKLIST_SOURCES, UNPROVIDED);
    }

    public static final SubLObject get_fs_default_starting_points_filename_alt(SubLObject type) {
	return getf(getf(com.cyc.cycjava.cycl.fact_sheets.get_public_fact_sheet_properties(), type, UNPROVIDED), $DEFAULT_STARTING_POINTS_FILENAME, UNPROVIDED);
    }

    public static SubLObject get_fs_default_starting_points_filename(final SubLObject type) {
	return getf(getf(fact_sheets.get_public_fact_sheet_properties(), type, UNPROVIDED), fact_sheets.$DEFAULT_STARTING_POINTS_FILENAME, UNPROVIDED);
    }

    public static final SubLObject get_domain_mt_for_fs_type_alt(SubLObject type) {
	{
	    SubLObject stored_mt = getf(getf(com.cyc.cycjava.cycl.fact_sheets.get_public_fact_sheet_properties(), type, UNPROVIDED), $DOMAIN_MT, UNPROVIDED);
	    if (NIL != stored_mt) {
		return stored_mt;
	    } else {
		return com.cyc.cycjava.cycl.fact_sheets.fact_sheet_anytime_mt(listS($$MtUnionFn, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_default_domain_mt(), $list_alt969));
	    }
	}
    }

    public static SubLObject get_domain_mt_for_fs_type(final SubLObject type) {
	final SubLObject stored_mt = getf(getf(fact_sheets.get_public_fact_sheet_properties(), type, UNPROVIDED), $DOMAIN_MT, UNPROVIDED);
	if (NIL != stored_mt) {
	    return stored_mt;
	}
	return fact_sheets.fact_sheet_anytime_mt(listS(fact_sheets.$$MtUnionFn, fact_sheets.fact_sheet_default_domain_mt(), fact_sheets.$list857));
    }

    public static final SubLObject category_label_from_properties_alt(SubLObject pred, SubLObject v_properties) {
	{
	    SubLObject pred_labels = getf(v_properties, $CATEGORY_LABELS, UNPROVIDED);
	    SubLObject new_label = (NIL != assoc(pred, pred_labels, UNPROVIDED, UNPROVIDED)) ? ((SubLObject) (assoc(pred, pred_labels, UNPROVIDED, UNPROVIDED).rest())) : NIL;
	    return new_label;
	}
    }

    public static SubLObject category_label_from_properties(final SubLObject pred, final SubLObject v_properties) {
	final SubLObject pred_labels = getf(v_properties, $CATEGORY_LABELS, UNPROVIDED);
	final SubLObject new_label = (NIL != assoc(pred, pred_labels, UNPROVIDED, UNPROVIDED)) ? assoc(pred, pred_labels, UNPROVIDED, UNPROVIDED).rest() : NIL;
	return new_label;
    }

    public static final SubLObject new_category_label_alt(SubLObject pred, SubLObject string) {
	return list(pred, string);
    }

    public static SubLObject new_category_label(final SubLObject pred, final SubLObject string) {
	return list(pred, string);
    }

    public static final SubLObject category_label_string_alt(SubLObject label) {
	return second(label);
    }

    public static SubLObject category_label_string(final SubLObject label) {
	return second(label);
    }

    public static final SubLObject category_label_pred_alt(SubLObject label) {
	if (!label.isList()) {
	    return NIL;
	}
	return label.first();
    }

    public static SubLObject category_label_pred(final SubLObject label) {
	if (!label.isList()) {
	    return NIL;
	}
	return label.first();
    }

    public static final SubLObject category_label_style_alt(SubLObject label) {
	if (label.isString()) {
	    return list_utilities.remove_if_not(ALPHANUMERICP, label, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	}
	return list_utilities.remove_if_not(ALPHANUMERICP, string_utilities.to_string(com.cyc.cycjava.cycl.fact_sheets.category_label_pred(label)), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject category_label_style(final SubLObject label) {
	if (label.isString()) {
	    return list_utilities.remove_if_not(ALPHANUMERICP, label, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	}
	return list_utilities.remove_if_not(ALPHANUMERICP, string_utilities.to_string(fact_sheets.category_label_pred(label)), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject get_sort_fn_from_properties_alt(SubLObject props) {
	return getf(props, $SORT_FN, DEFAULT_FACT_SHEET_PARAGRAPH_RETRIEVAL_TIME_SORT_FN);
    }

    public static SubLObject get_sort_fn_from_properties(final SubLObject props) {
	return getf(props, $SORT_FN, fact_sheets.DEFAULT_FACT_SHEET_PARAGRAPH_RETRIEVAL_TIME_SORT_FN);
    }

    public static final SubLObject default_fact_sheet_paragraph_retrieval_time_sort_fn_alt(SubLObject data1, SubLObject data2) {
	return NIL;
    }

    public static SubLObject default_fact_sheet_paragraph_retrieval_time_sort_fn(final SubLObject data1, final SubLObject data2) {
	return NIL;
    }

    public static final SubLObject incyc_higher_priority_categoryP_alt(SubLObject data1, SubLObject data2) {
	{
	    SubLObject pred1 = data1.first();
	    SubLObject pred2 = data2.first();
	    if (NIL != subl_promotions.memberP(pred2, $list_alt974, UNPROVIDED, UNPROVIDED)) {
		return T;
	    } else {
		return NIL;
	    }
	}
    }

    public static SubLObject incyc_higher_priority_categoryP(final SubLObject data1, final SubLObject data2) {
	final SubLObject pred1 = data1.first();
	final SubLObject pred2 = data2.first();
	if (NIL != subl_promotions.memberP(pred2, fact_sheets.$list862, UNPROVIDED, UNPROVIDED)) {
	    return T;
	}
	return NIL;
    }

    public static final SubLObject get_public_fact_sheet_properties_alt() {
	if (NIL == $public_fact_sheet_properties$.getGlobalValue()) {
	    $public_fact_sheet_properties$.setGlobalValue(list($INCYC,
		    listS($COLLECTION_NAME,
			    new SubLObject[] { $$$incyc, $kw619$DISPLAY_TITLE_, T, $kw621$SHOW_COPYRIGHT_, T, $kw620$PRINT_STATS_, NIL, $kw345$SHOW_AD_, T, $SHOW_INFO_LINK_URL, $str_alt976$______info_html, $STYLESHEET, $str_alt977$______styles_css, $BRANDING_INFO,
				    listS($str_alt978$______index_html, $str_alt979$______img_inCyc_beta_png, $fact_sheet_in_cyc_logo$.getGlobalValue(), $list_alt980), $ALLOWED_TERM_TYPE, $NON_PROPRIETARY, $kw347$SHOW_URI_, T, $kw348$SHOW_FOLLOWUP_WIDGET_, T, $ROOT_TYPES, $list_alt981,
				    $BLACKLIST_TYPES, $list_alt982, $BLACKLIST_QUOTED_TYPES, $list_alt983, $BLACKLIST_SOURCES, cconcatenate($list_alt984, function_terms.narts_of_function($$HPACMaterialFileFn)), $list_alt986 }),
		    $AKB,
		    list(new SubLObject[] { $COLLECTION_NAME, $str_alt988$analyst_knowledge_base, $kw619$DISPLAY_TITLE_, T, $kw621$SHOW_COPYRIGHT_, T, $kw620$PRINT_STATS_, NIL, $kw345$SHOW_AD_, NIL, $SHOW_INFO_LINK_URL, NIL, $STYLESHEET, $str_alt989$___styles_css, $BRANDING_INFO, NIL,
			    $ALLOWED_TERM_TYPE, $ALL, $kw348$SHOW_FOLLOWUP_WIDGET_, T, $ROOT_TYPES, $list_alt990, $BLACKLIST_TYPES, NIL, $BLACKLIST_QUOTED_TYPES, $list_alt991, $DEFAULT_STARTING_POINTS_FILENAME, $str_alt992$data_fact_sheets_public_analyst_k, $DOMAIN_MT,
			    com.cyc.cycjava.cycl.fact_sheets.fact_sheet_anytime_mt($$TKBSourceSpindleCollectorMt) })));
	}
	return $public_fact_sheet_properties$.getGlobalValue();
    }

    public static SubLObject get_public_fact_sheet_properties() {
	if (NIL == fact_sheets.$public_fact_sheet_properties$.getGlobalValue()) {
	    fact_sheets.$public_fact_sheet_properties$.setGlobalValue(list($INCYC,
		    listS($COLLECTION_NAME,
			    new SubLObject[] { fact_sheets.$$$incyc, fact_sheets.$kw475$DISPLAY_TITLE_, T, fact_sheets.$kw477$SHOW_COPYRIGHT_, T, fact_sheets.$kw476$PRINT_STATS_, NIL, fact_sheets.$kw192$SHOW_AD_, T, fact_sheets.$SHOW_INFO_LINK_URL, fact_sheets.$str864$______info_html, $STYLESHEET,
				    fact_sheets.$str865$______styles_css, $BRANDING_INFO, listS(fact_sheets.$str866$______index_html, fact_sheets.$str867$______img_inCyc_beta_png, fact_sheets.$fact_sheet_in_cyc_logo$.getGlobalValue(), fact_sheets.$list868), fact_sheets.$ALLOWED_TERM_TYPE,
				    $NON_PROPRIETARY, fact_sheets.$kw194$SHOW_URI_, T, fact_sheets.$kw195$SHOW_FOLLOWUP_WIDGET_, T, $ROOT_TYPES, fact_sheets.$list869, $BLACKLIST_TYPES, fact_sheets.$list870, fact_sheets.$BLACKLIST_QUOTED_TYPES, fact_sheets.$list871, $BLACKLIST_SOURCES,
				    cconcatenate(fact_sheets.$list872, function_terms.narts_of_function(fact_sheets.$$HPACMaterialFileFn)), fact_sheets.$list874 }),
		    $AKB,
		    list(new SubLObject[] { $COLLECTION_NAME, fact_sheets.$str876$analyst_knowledge_base, fact_sheets.$kw475$DISPLAY_TITLE_, T, fact_sheets.$kw477$SHOW_COPYRIGHT_, T, fact_sheets.$kw476$PRINT_STATS_, NIL, fact_sheets.$kw192$SHOW_AD_, NIL, fact_sheets.$SHOW_INFO_LINK_URL, NIL,
			    $STYLESHEET, fact_sheets.$str877$___styles_css, $BRANDING_INFO, NIL, fact_sheets.$ALLOWED_TERM_TYPE, $ALL, fact_sheets.$kw195$SHOW_FOLLOWUP_WIDGET_, T, $ROOT_TYPES, fact_sheets.$list878, $BLACKLIST_TYPES, NIL, fact_sheets.$BLACKLIST_QUOTED_TYPES, fact_sheets.$list879,
			    fact_sheets.$DEFAULT_STARTING_POINTS_FILENAME, fact_sheets.$str880$data_fact_sheets_public_analyst_k, $DOMAIN_MT, fact_sheets.fact_sheet_anytime_mt(fact_sheets.$$TKBSourceSpindleCollectorMt) })));
	}
	return fact_sheets.$public_fact_sheet_properties$.getGlobalValue();
    }

    public static final SubLObject get_public_fact_sheet_for_term_alt(SubLObject v_term, SubLObject fs_type, SubLObject force_redoP) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	if (force_redoP == UNPROVIDED) {
	    force_redoP = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    com.cyc.cycjava.cycl.fact_sheets.ensure_public_fact_sheet_for_term(v_term, fs_type, force_redoP);
	    thread.resetMultipleValues();
	    {
		SubLObject directory = com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_public_fact_sheet(v_term, fs_type, UNPROVIDED);
		SubLObject filename = thread.secondMultipleValue();
		thread.resetMultipleValues();
		return string_utilities.read_string_from_file(filename, UNPROVIDED, UNPROVIDED);
	    }
	}
    }

    public static SubLObject get_public_fact_sheet_for_term(final SubLObject v_term, SubLObject fs_type, SubLObject force_redoP) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	if (force_redoP == UNPROVIDED) {
	    force_redoP = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	fact_sheets.ensure_public_fact_sheet_for_term(v_term, fs_type, force_redoP);
	thread.resetMultipleValues();
	final SubLObject directory = fact_sheets.directory_and_filename_for_public_fact_sheet(v_term, fs_type, UNPROVIDED);
	final SubLObject filename = thread.secondMultipleValue();
	thread.resetMultipleValues();
	return string_utilities.read_string_from_file(filename, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject start_new_public_fact_sheet_updater_alt(SubLObject fs_type, SubLObject force_redoP) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	if (force_redoP == UNPROVIDED) {
	    force_redoP = NIL;
	}
	return process_utilities.make_cyc_server_process_with_args(cconcatenate($str_alt993$Public_Fact_Sheet_Updater_for_, new SubLObject[] { string_utilities.to_string(fs_type), $str_alt994$_Fact_Sheets }), ENSURE_ALL_PUBLIC_FACT_SHEETS, list(fs_type, force_redoP));
    }

    public static SubLObject start_new_public_fact_sheet_updater(SubLObject fs_type, SubLObject force_redoP) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	if (force_redoP == UNPROVIDED) {
	    force_redoP = NIL;
	}
	return process_utilities.make_cyc_server_process_with_args(cconcatenate(fact_sheets.$$$Public_Fact_Sheet_Updater_for_, new SubLObject[] { string_utilities.to_string(fs_type), fact_sheets.$$$_Fact_Sheets }), fact_sheets.ENSURE_ALL_PUBLIC_FACT_SHEETS, list(fs_type, force_redoP));
    }

    public static final SubLObject ensure_all_public_fact_sheets_alt(SubLObject fs_type, SubLObject force_redoP) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	if (force_redoP == UNPROVIDED) {
	    force_redoP = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject set_var = com.cyc.cycjava.cycl.fact_sheets.terms_for_public_fact_sheets(fs_type);
		$progress_note$.setDynamicValue($str_alt996$Ensuring_public_fact_sheets_are_i, thread);
		$progress_start_time$.setDynamicValue(get_universal_time(), thread);
		$progress_total$.setDynamicValue(set.set_size(set_var), thread);
		$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
		{
		    SubLObject _prev_bind_0 = $last_percent_progress_index$.currentBinding(thread);
		    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
		    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
		    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
		    try {
			$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
			$last_percent_progress_prediction$.bind(NIL, thread);
			$within_noting_percent_progress$.bind(T, thread);
			$percent_progress_start_time$.bind(get_universal_time(), thread);
			noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
			{
			    SubLObject set_contents_var = set.do_set_internal(set_var);
			    SubLObject basis_object = do_set_contents_basis_object(set_contents_var);
			    SubLObject state = NIL;
			    for (state = do_set_contents_initial_state(basis_object, set_contents_var); NIL == do_set_contents_doneP(basis_object, state); state = do_set_contents_update_state(state)) {
				{
				    SubLObject v_term = do_set_contents_next(basis_object, state);
				    if (NIL != do_set_contents_element_validP(state, v_term)) {
					note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
					$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
					com.cyc.cycjava.cycl.fact_sheets.ensure_public_fact_sheet_for_term(v_term, fs_type, force_redoP);
				    }
				}
			    }
			}
			noting_percent_progress_postamble();
		    } finally {
			$percent_progress_start_time$.rebind(_prev_bind_3, thread);
			$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
			$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
			$last_percent_progress_index$.rebind(_prev_bind_0, thread);
		    }
		}
	    }
	    return NIL;
	}
    }

    public static SubLObject ensure_all_public_fact_sheets(SubLObject fs_type, SubLObject force_redoP) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	if (force_redoP == UNPROVIDED) {
	    force_redoP = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject set_var = fact_sheets.terms_for_public_fact_sheets(fs_type);
	final SubLObject _prev_bind_0 = $progress_note$.currentBinding(thread);
	final SubLObject _prev_bind_2 = $progress_start_time$.currentBinding(thread);
	final SubLObject _prev_bind_3 = $progress_total$.currentBinding(thread);
	final SubLObject _prev_bind_4 = $progress_sofar$.currentBinding(thread);
	final SubLObject _prev_bind_5 = $last_percent_progress_index$.currentBinding(thread);
	final SubLObject _prev_bind_6 = $last_percent_progress_prediction$.currentBinding(thread);
	final SubLObject _prev_bind_7 = $within_noting_percent_progress$.currentBinding(thread);
	final SubLObject _prev_bind_8 = $percent_progress_start_time$.currentBinding(thread);
	try {
	    $progress_note$.bind(fact_sheets.$str885$Ensuring_public_fact_sheets_are_i, thread);
	    $progress_start_time$.bind(get_universal_time(), thread);
	    $progress_total$.bind(set.set_size(set_var), thread);
	    $progress_sofar$.bind(ZERO_INTEGER, thread);
	    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
	    $last_percent_progress_prediction$.bind(NIL, thread);
	    $within_noting_percent_progress$.bind(T, thread);
	    $percent_progress_start_time$.bind(get_universal_time(), thread);
	    try {
		noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
		final SubLObject set_contents_var = set.do_set_internal(set_var);
		SubLObject basis_object;
		SubLObject state;
		SubLObject v_term;
		for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
			state); state = set_contents.do_set_contents_update_state(state)) {
		    v_term = set_contents.do_set_contents_next(basis_object, state);
		    if (NIL != set_contents.do_set_contents_element_validP(state, v_term)) {
			fact_sheets.ensure_public_fact_sheet_for_term(v_term, fs_type, force_redoP);
			$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
			note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
		    }
		}
	    } finally {
		final SubLObject _prev_bind_0_$451 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values = getValuesAsVector();
		    noting_percent_progress_postamble();
		    restoreValuesFromVector(_values);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$451, thread);
		}
	    }
	} finally {
	    $percent_progress_start_time$.rebind(_prev_bind_8, thread);
	    $within_noting_percent_progress$.rebind(_prev_bind_7, thread);
	    $last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
	    $last_percent_progress_index$.rebind(_prev_bind_5, thread);
	    $progress_sofar$.rebind(_prev_bind_4, thread);
	    $progress_total$.rebind(_prev_bind_3, thread);
	    $progress_start_time$.rebind(_prev_bind_2, thread);
	    $progress_note$.rebind(_prev_bind_0, thread);
	}
	return NIL;
    }

    public static final SubLObject ensure_public_fact_sheet_for_term_alt(SubLObject v_term, SubLObject fs_type, SubLObject force_redoP) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	if (force_redoP == UNPROVIDED) {
	    force_redoP = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    thread.resetMultipleValues();
	    {
		SubLObject directory = com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_public_fact_sheet(v_term, fs_type, UNPROVIDED);
		SubLObject filename = thread.secondMultipleValue();
		thread.resetMultipleValues();
		{
		    SubLObject state = memoization_state.possibly_new_memoization_state();
		    SubLObject local_state = state;
		    {
			SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
			try {
			    memoization_state.$memoization_state$.bind(local_state, thread);
			    {
				SubLObject original_memoization_process = NIL;
				if ((NIL != local_state) && (NIL == memoization_state.memoization_state_lock(local_state))) {
				    original_memoization_process = memoization_state.memoization_state_get_current_process_internal(local_state);
				    {
					SubLObject current_proc = current_process();
					if (NIL == original_memoization_process) {
					    memoization_state.memoization_state_set_current_process_internal(local_state, current_proc);
					} else {
					    if (original_memoization_process != current_proc) {
						Errors.error($str_alt424$Invalid_attempt_to_reuse_memoizat);
					    }
					}
				    }
				}
				try {
				    if (!(((NIL == force_redoP) && (NIL != Filesys.directory_p(directory))) && (NIL != file_utilities.file_existsP(filename)))) {
					{
					    SubLObject html = NIL;
					    SubLObject formatting = NIL;
					    {
						SubLObject _prev_bind_0_504 = $fact_sheet_term_paraphrase_for_titleP$.currentBinding(thread);
						SubLObject _prev_bind_1 = $use_relative_fact_sheet_image_urlsP$.currentBinding(thread);
						SubLObject _prev_bind_2 = $allow_fact_sheet_evaluationsP$.currentBinding(thread);
						SubLObject _prev_bind_3 = $fact_sheet_use_base_urlP$.currentBinding(thread);
						try {
						    $fact_sheet_term_paraphrase_for_titleP$.bind(T, thread);
						    $use_relative_fact_sheet_image_urlsP$.bind(T, thread);
						    $allow_fact_sheet_evaluationsP$.bind(ZERO_INTEGER, thread);
						    $fact_sheet_use_base_urlP$.bind(NIL, thread);
						    {
							SubLObject datum_evaluated_var = com.cyc.cycjava.cycl.fact_sheets.get_fact_sheet_for_term_in_html(v_term, $PUBLIC, $DEFAULT, $DEFAULT, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_properties_for_type(fs_type));
							html = datum_evaluated_var.first();
							formatting = cadr(datum_evaluated_var);
						    }
						} finally {
						    $fact_sheet_use_base_urlP$.rebind(_prev_bind_3, thread);
						    $allow_fact_sheet_evaluationsP$.rebind(_prev_bind_2, thread);
						    $use_relative_fact_sheet_image_urlsP$.rebind(_prev_bind_1, thread);
						    $fact_sheet_term_paraphrase_for_titleP$.rebind(_prev_bind_0_504, thread);
						}
					    }
					    html = com.cyc.cycjava.cycl.fact_sheets.publicize_fact_sheet_links(html, fs_type);
					    if (NIL == Filesys.directory_p(directory)) {
						file_utilities.make_directory_recursive(directory, NIL, NIL != com.cyc.cycjava.cycl.fact_sheets.chmod_safe_to_useP() ? ((SubLObject) ($$$775)) : NIL);
					    }
					    SubLTrampolineFile.checkType(directory, DIRECTORY_P);
					    {
						SubLObject stream = NIL;
						try {
						    {
							SubLObject _prev_bind_0_505 = stream_macros.$stream_requires_locking$.currentBinding(thread);
							try {
							    stream_macros.$stream_requires_locking$.bind(NIL, thread);
							    stream = compatibility.open_text(filename, $OUTPUT, NIL);
							} finally {
							    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_505, thread);
							}
						    }
						    if (!stream.isStream()) {
							Errors.error($str_alt137$Unable_to_open__S, filename);
						    }
						    {
							SubLObject stream_506 = stream;
							write_string(html, stream_506, UNPROVIDED, UNPROVIDED);
						    }
						} finally {
						    {
							SubLObject _prev_bind_0_507 = $is_thread_performing_cleanupP$.currentBinding(thread);
							try {
							    $is_thread_performing_cleanupP$.bind(T, thread);
							    if (stream.isStream()) {
								close(stream, UNPROVIDED);
							    }
							} finally {
							    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_507, thread);
							}
						    }
						}
					    }
					    if (NIL != com.cyc.cycjava.cycl.fact_sheets.chmod_safe_to_useP()) {
						file_utilities.chmod(filename, $$$664);
					    }
					}
				    }
				} finally {
				    {
					SubLObject _prev_bind_0_508 = $is_thread_performing_cleanupP$.currentBinding(thread);
					try {
					    $is_thread_performing_cleanupP$.bind(T, thread);
					    if ((NIL != local_state) && (NIL == original_memoization_process)) {
						memoization_state.memoization_state_set_current_process_internal(local_state, NIL);
					    }
					} finally {
					    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_508, thread);
					}
				    }
				}
			    }
			} finally {
			    memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return filename;
	    }
	}
    }

    public static SubLObject ensure_public_fact_sheet_for_term(final SubLObject v_term, SubLObject fs_type, SubLObject force_redoP) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	if (force_redoP == UNPROVIDED) {
	    force_redoP = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	thread.resetMultipleValues();
	final SubLObject directory = fact_sheets.directory_and_filename_for_public_fact_sheet(v_term, fs_type, UNPROVIDED);
	final SubLObject filename = thread.secondMultipleValue();
	thread.resetMultipleValues();
	final SubLObject local_state;
	final SubLObject state = local_state = memoization_state.possibly_new_memoization_state();
	final SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
	try {
	    memoization_state.$memoization_state$.bind(local_state, thread);
	    final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
	    try {
		if (((NIL != force_redoP) || (NIL == Filesys.directory_p(directory))) || (NIL == file_utilities.file_existsP(filename))) {
		    SubLObject html = NIL;
		    SubLObject formatting = NIL;
		    final SubLObject _prev_bind_0_$452 = fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.currentBinding(thread);
		    final SubLObject _prev_bind_2 = fact_sheets.$use_relative_fact_sheet_image_urlsP$.currentBinding(thread);
		    final SubLObject _prev_bind_3 = fact_sheets.$allow_fact_sheet_evaluationsP$.currentBinding(thread);
		    final SubLObject _prev_bind_4 = fact_sheets.$fact_sheet_use_base_urlP$.currentBinding(thread);
		    try {
			fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.bind(T, thread);
			fact_sheets.$use_relative_fact_sheet_image_urlsP$.bind(T, thread);
			fact_sheets.$allow_fact_sheet_evaluationsP$.bind(ZERO_INTEGER, thread);
			fact_sheets.$fact_sheet_use_base_urlP$.bind(NIL, thread);
			final SubLObject datum_evaluated_var = fact_sheets.get_fact_sheet_for_term_in_html(v_term, $PUBLIC, $DEFAULT, $DEFAULT, fact_sheets.fact_sheet_properties_for_type(fs_type));
			html = datum_evaluated_var.first();
			formatting = cadr(datum_evaluated_var);
		    } finally {
			fact_sheets.$fact_sheet_use_base_urlP$.rebind(_prev_bind_4, thread);
			fact_sheets.$allow_fact_sheet_evaluationsP$.rebind(_prev_bind_3, thread);
			fact_sheets.$use_relative_fact_sheet_image_urlsP$.rebind(_prev_bind_2, thread);
			fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.rebind(_prev_bind_0_$452, thread);
		    }
		    html = fact_sheets.publicize_fact_sheet_links(html, fs_type);
		    if (NIL == Filesys.directory_p(directory)) {
			file_utilities.make_directory_recursive(directory, NIL, NIL != fact_sheets.chmod_safe_to_useP() ? fact_sheets.$$$775 : NIL);
		    }
		    assert NIL != Filesys.directory_p(directory) : "! Filesys.directory_p(directory) " + ("Filesys.directory_p(directory) " + "CommonSymbols.NIL != Filesys.directory_p(directory) ") + directory;
		    SubLObject stream = NIL;
		    try {
			final SubLObject _prev_bind_0_$453 = stream_macros.$stream_requires_locking$.currentBinding(thread);
			try {
			    stream_macros.$stream_requires_locking$.bind(NIL, thread);
			    stream = compatibility.open_text(filename, $OUTPUT);
			} finally {
			    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$453, thread);
			}
			if (!stream.isStream()) {
			    Errors.error(fact_sheets.$str284$Unable_to_open__S, filename);
			}
			final SubLObject stream_$454 = stream;
			write_string(html, stream_$454, UNPROVIDED, UNPROVIDED);
		    } finally {
			final SubLObject _prev_bind_0_$454 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    final SubLObject _values = getValuesAsVector();
			    if (stream.isStream()) {
				close(stream, UNPROVIDED);
			    }
			    restoreValuesFromVector(_values);
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$454, thread);
			}
		    }
		    if (NIL != fact_sheets.chmod_safe_to_useP()) {
			file_utilities.chmod(filename, fact_sheets.$$$664);
		    }
		}
	    } finally {
		final SubLObject _prev_bind_0_$455 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values2 = getValuesAsVector();
		    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
		    restoreValuesFromVector(_values2);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$455, thread);
		}
	    }
	} finally {
	    memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
	}
	return filename;
    }

    public static final SubLObject publicize_fact_sheet_links_alt(SubLObject raw_fact_sheet, SubLObject fs_type) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject result = NIL;
		{
		    SubLObject _prev_bind_0 = $fs_type$.currentBinding(thread);
		    try {
			$fs_type$.bind(fs_type, thread);
			result = com.cyc.cycjava.cycl.fact_sheets.replace_fact_sheet_markups_fast(raw_fact_sheet, PUBLICIZE_FACT_SHEET_LINK, UNPROVIDED);
		    } finally {
			$fs_type$.rebind(_prev_bind_0, thread);
		    }
		}
		return result;
	    }
	}
    }

    public static SubLObject publicize_fact_sheet_links(final SubLObject raw_fact_sheet, final SubLObject fs_type) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject result = NIL;
	final SubLObject _prev_bind_0 = fact_sheets.$fs_type$.currentBinding(thread);
	try {
	    fact_sheets.$fs_type$.bind(fs_type, thread);
	    result = fact_sheets.replace_fact_sheet_markups_fast(raw_fact_sheet, fact_sheets.PUBLICIZE_FACT_SHEET_LINK, UNPROVIDED);
	} finally {
	    fact_sheets.$fs_type$.rebind(_prev_bind_0, thread);
	}
	return result;
    }

    public static final SubLObject publicize_fact_sheet_link_alt(SubLObject v_term, SubLObject original_open_tag, SubLObject original_link_tokens, SubLObject original_close_tag, SubLObject fs_type) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $fs_type$.getDynamicValue();
	}
	if (v_term == $UNKNOWN) {
	    return list($str_alt133$, original_link_tokens, $str_alt133$);
	} else {
	    if (NIL != collection_defns.cycl_sentenceP(v_term)) {
		return list($str_alt133$, original_link_tokens, $str_alt133$);
	    } else {
		if (NIL == search($fact_sheet_bogus_url_prefix$.getGlobalValue(), original_open_tag, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
		    return list($str_alt133$, original_link_tokens, $str_alt133$);
		} else {
		    if (NIL == set.set_memberP(v_term, com.cyc.cycjava.cycl.fact_sheets.terms_for_public_fact_sheets(fs_type))) {
			return list($str_alt133$, original_link_tokens, $str_alt133$);
		    } else {
			{
			    SubLObject href = com.cyc.cycjava.cycl.fact_sheets.relative_filename_for_public_fact_sheet(v_term, fs_type, UNPROVIDED);
			    SubLObject new_open_tag = cconcatenate($str_alt998$_a_href__, new SubLObject[] { format_nil.format_nil_a_no_copy(href), $str_alt999$__ });
			    return list(new_open_tag, original_link_tokens, original_close_tag);
			}
		    }
		}
	    }
	}
    }

    public static SubLObject publicize_fact_sheet_link(final SubLObject v_term, final SubLObject original_open_tag, final SubLObject original_link_tokens, final SubLObject original_close_tag, SubLObject fs_type) {
	if (fs_type == UNPROVIDED) {
	    fs_type = fact_sheets.$fs_type$.getDynamicValue();
	}
	if (v_term == $UNKNOWN) {
	    return list(fact_sheets.$str73$, original_link_tokens, fact_sheets.$str73$);
	}
	if (NIL != collection_defns.cycl_sentenceP(v_term)) {
	    return list(fact_sheets.$str73$, original_link_tokens, fact_sheets.$str73$);
	}
	if (NIL == search(fact_sheets.$fact_sheet_bogus_url_prefix$.getGlobalValue(), original_open_tag, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
	    return list(fact_sheets.$str73$, original_link_tokens, fact_sheets.$str73$);
	}
	if (NIL == set.set_memberP(v_term, fact_sheets.terms_for_public_fact_sheets(fs_type))) {
	    return list(fact_sheets.$str73$, original_link_tokens, fact_sheets.$str73$);
	}
	final SubLObject href = fact_sheets.relative_filename_for_public_fact_sheet(v_term, fs_type, UNPROVIDED);
	final SubLObject new_open_tag = cconcatenate(fact_sheets.$str887$_a_href__, new SubLObject[] { format_nil.format_nil_a_no_copy(href), fact_sheets.$str888$__ });
	return list(new_open_tag, original_link_tokens, original_close_tag);
    }

    /**
     * Rebuilds the public HTML fact sheets for terms mentioned in FILE-NUMBER, based on cached fact-sheet-data
     * for each of the terms.  This does not rebuild any of the underlying data, it merely reconstructs the HTML.
     */
    @LispMethod(comment = "Rebuilds the public HTML fact sheets for terms mentioned in FILE-NUMBER, based on cached fact-sheet-data\r\nfor each of the terms.  This does not rebuild any of the underlying data, it merely reconstructs the HTML.\nRebuilds the public HTML fact sheets for terms mentioned in FILE-NUMBER, based on cached fact-sheet-data\nfor each of the terms.  This does not rebuild any of the underlying data, it merely reconstructs the HTML.")
    public static final SubLObject update_public_fact_sheets_from_id_file_alt(SubLObject file_number, SubLObject fs_type, SubLObject write_date_threshold, SubLObject parent_directory) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	if (write_date_threshold == UNPROVIDED) {
	    write_date_threshold = numeric_date_utilities.universal_time_from_date_and_second(numeric_date_utilities.get_universal_date(UNPROVIDED, UNPROVIDED), ZERO_INTEGER);
	}
	if (parent_directory == UNPROVIDED) {
	    parent_directory = cconcatenate(string_utilities.bunge(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_path(), CHAR_slash), $str_alt722$_term_ids_to_update_);
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject already_loggingP = stringp($fact_sheet_log_file$.getDynamicValue(thread));
		SubLObject directory = NIL;
		SubLObject filename = NIL;
		SubLObject use_new_setupP = NIL;
		if (NIL == already_loggingP) {
		    thread.resetMultipleValues();
		    {
			SubLObject directory_509 = com.cyc.cycjava.cycl.fact_sheets.open_new_unique_fact_sheet_log_file();
			SubLObject filename_510 = thread.secondMultipleValue();
			thread.resetMultipleValues();
			directory = directory_509;
			filename = filename_510;
		    }
		    use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
		}
		if (NIL != use_new_setupP) {
		    format(StreamsLow.$standard_output$.getDynamicValue(thread), $str_alt69$__Logging_Fact_Sheet_generation_t, filename);
		    force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
		}
		{
		    SubLObject _prev_bind_0 = $fact_sheet_log_file$.currentBinding(thread);
		    try {
			$fact_sheet_log_file$.bind(NIL != use_new_setupP ? ((SubLObject) (filename)) : $fact_sheet_log_file$.getDynamicValue(thread), thread);
			{
			    SubLObject stream = NIL;
			    try {
				{
				    SubLObject _prev_bind_0_511 = stream_macros.$stream_requires_locking$.currentBinding(thread);
				    try {
					stream_macros.$stream_requires_locking$.bind(NIL, thread);
					stream = compatibility.open_text($fact_sheet_log_file$.getDynamicValue(thread), $APPEND, NIL);
				    } finally {
					stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_511, thread);
				    }
				}
				if (!stream.isStream()) {
				    Errors.error($str_alt137$Unable_to_open__S, $fact_sheet_log_file$.getDynamicValue(thread));
				}
				{
				    SubLObject _prev_bind_0_512 = $fact_sheet_log_stream$.currentBinding(thread);
				    try {
					$fact_sheet_log_stream$.bind(stream, thread);
					{
					    SubLObject _prev_bind_0_513 = $next_fact_sheet_hourly_report_time$.currentBinding(thread);
					    SubLObject _prev_bind_1 = $hourly_fact_sheet_stats$.currentBinding(thread);
					    try {
						$next_fact_sheet_hourly_report_time$.bind(NIL, thread);
						$hourly_fact_sheet_stats$.bind(make_vector(TWO_INTEGER, ZERO_INTEGER), thread);
						com.cyc.cycjava.cycl.fact_sheets.reset_hourly_report_time(UNPROVIDED);
						{
						    SubLObject stream_514 = $fact_sheet_log_stream$.getDynamicValue(thread);
						    if (((T == stream_514) && (current_process() == subl_promotions.initial_process())) || (stream_514.isStream() && (NIL != output_stream_p(stream_514)))) {
							com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_514);
							format(stream_514, $str_alt1000$Updating__A_public_fact_sheets_fi, new SubLObject[] { fs_type, file_number, parent_directory });
							force_output(stream_514);
						    }
						}
						{
						    SubLObject directory_515 = cconcatenate(parent_directory, new SubLObject[] { com.cyc.cycjava.cycl.fact_sheets.get_fs_collection_name(fs_type), $str_alt205$_ });
						    SubLObject filename_516 = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_id_filename(directory_515, file_number);
						    if (NIL != file_utilities.file_existsP(filename_516)) {
							{
							    SubLObject term_ids = cfasl_utilities.cfasl_load(filename_516);
							    SubLObject list_var = term_ids;
							    $progress_note$.setDynamicValue(cconcatenate($str_alt688$Updating_,
								    new SubLObject[] { format_nil.format_nil_a_no_copy(fs_type), $str_alt1001$_public_fact_sheets_from_, format_nil.format_nil_a_no_copy(filename_516), $str_alt51$__, format_nil.format_nil_a_no_copy(Filesys.probe_file(filename_516)) }),
								    thread);
							    $progress_start_time$.setDynamicValue(get_universal_time(), thread);
							    $progress_total$.setDynamicValue(length(list_var), thread);
							    $progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
							    {
								SubLObject _prev_bind_0_517 = $last_percent_progress_index$.currentBinding(thread);
								SubLObject _prev_bind_1_518 = $last_percent_progress_prediction$.currentBinding(thread);
								SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
								SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
								try {
								    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
								    $last_percent_progress_prediction$.bind(NIL, thread);
								    $within_noting_percent_progress$.bind(T, thread);
								    $percent_progress_start_time$.bind(get_universal_time(), thread);
								    noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
								    {
									SubLObject csome_list_var = list_var;
									SubLObject term_id = NIL;
									for (term_id = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), term_id = csome_list_var.first()) {
									    note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
									    $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
									    {
										SubLObject v_term = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_term_from_id(term_id, UNPROVIDED);
										if (NIL != v_term) {
										    {
											SubLObject fact_sheet_file = nth_value_step_2(nth_value_step_1(ONE_INTEGER), com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_public_fact_sheet(v_term, fs_type, UNPROVIDED));
											SubLObject file_write_date = (NIL != file_utilities.file_existsP(fact_sheet_file)) ? ((SubLObject) (Filesys.file_write_date(fact_sheet_file))) : ZERO_INTEGER;
											if (file_write_date.numG(write_date_threshold)) {
											    {
												SubLObject stream_519 = $fact_sheet_log_stream$.getDynamicValue(thread);
												if (((T == stream_519) && (current_process() == subl_promotions.initial_process())) || (stream_519.isStream() && (NIL != output_stream_p(stream_519)))) {
												    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_519);
												    format(stream_519, $str_alt730$Skipping__S__which_was_updated_on, v_term, numeric_date_utilities.get_universal_date(file_write_date, UNPROVIDED));
												    force_output(stream_519);
												}
											    }
											} else {
											    com.cyc.cycjava.cycl.fact_sheets.ensure_public_fact_sheet_for_term(v_term, fs_type, T);
											}
										    }
										} else {
										    {
											SubLObject stream_520 = $fact_sheet_log_stream$.getDynamicValue(thread);
											if (((T == stream_520) && (current_process() == subl_promotions.initial_process())) || (stream_520.isStream() && (NIL != output_stream_p(stream_520)))) {
											    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream_520);
											    format(stream_520, $str_alt1002$Couldn_t_find_term_for_id___S__, term_id);
											    force_output(stream_520);
											}
										    }
										}
									    }
									}
								    }
								    noting_percent_progress_postamble();
								} finally {
								    $percent_progress_start_time$.rebind(_prev_bind_3, thread);
								    $within_noting_percent_progress$.rebind(_prev_bind_2, thread);
								    $last_percent_progress_prediction$.rebind(_prev_bind_1_518, thread);
								    $last_percent_progress_index$.rebind(_prev_bind_0_517, thread);
								}
							    }
							}
						    } else {
							{
							    SubLObject stream_521 = $fact_sheet_log_stream$.getDynamicValue(thread);
							    if (((T == stream_521) && (current_process() == subl_promotions.initial_process())) || (stream_521.isStream() && (NIL != output_stream_p(stream_521)))) {
								com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream_521);
								format(stream_521, $str_alt1003$Couldn_t_find_datafile___S, filename_516);
								force_output(stream_521);
							    }
							}
						    }
						}
					    } finally {
						$hourly_fact_sheet_stats$.rebind(_prev_bind_1, thread);
						$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_513, thread);
					    }
					}
					if (NIL != use_new_setupP) {
					    {
						SubLObject stream_522 = $fact_sheet_log_stream$.getDynamicValue(thread);
						if (((T == stream_522) && (current_process() == subl_promotions.initial_process())) || (stream_522.isStream() && (NIL != output_stream_p(stream_522)))) {
						    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_522);
						    format(stream_522, $str_alt685$Closing_log_);
						    force_output(stream_522);
						}
					    }
					    com.cyc.cycjava.cycl.fact_sheets.note_fact_sheet_log_file_closed(UNPROVIDED);
					}
				    } finally {
					$fact_sheet_log_stream$.rebind(_prev_bind_0_512, thread);
				    }
				}
			    } finally {
				{
				    SubLObject _prev_bind_0_523 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					if (stream.isStream()) {
					    close(stream, UNPROVIDED);
					}
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0_523, thread);
				    }
				}
			    }
			}
		    } finally {
			$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
		    }
		}
	    }
	    return file_number;
	}
    }

    @LispMethod(comment = "Rebuilds the public HTML fact sheets for terms mentioned in FILE-NUMBER, based on cached fact-sheet-data\r\nfor each of the terms.  This does not rebuild any of the underlying data, it merely reconstructs the HTML.\nRebuilds the public HTML fact sheets for terms mentioned in FILE-NUMBER, based on cached fact-sheet-data\nfor each of the terms.  This does not rebuild any of the underlying data, it merely reconstructs the HTML.")
    public static SubLObject update_public_fact_sheets_from_id_file(final SubLObject file_number, SubLObject fs_type, SubLObject write_date_threshold, SubLObject parent_directory) {
	if (fs_type == UNPROVIDED) {
	    fs_type = $INCYC;
	}
	if (write_date_threshold == UNPROVIDED) {
	    write_date_threshold = numeric_date_utilities.universal_time_from_date_and_second(numeric_date_utilities.get_universal_date(UNPROVIDED, UNPROVIDED), ZERO_INTEGER);
	}
	if (parent_directory == UNPROVIDED) {
	    parent_directory = cconcatenate(string_utilities.bunge(fact_sheets.fact_sheet_data_path(), CHAR_slash), fact_sheets.$str585$_term_ids_to_update_);
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject already_loggingP = stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
	SubLObject directory = NIL;
	SubLObject filename = NIL;
	SubLObject use_new_setupP = NIL;
	if (NIL == already_loggingP) {
	    thread.resetMultipleValues();
	    final SubLObject directory_$457 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
	    final SubLObject filename_$458 = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    directory = directory_$457;
	    filename = filename_$458;
	    use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
	}
	if (NIL != use_new_setupP) {
	    format(StreamsLow.$standard_output$.getDynamicValue(thread), fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
	    force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
	}
	final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
	try {
	    fact_sheet_logs.$fact_sheet_log_file$.bind(NIL != use_new_setupP ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
	    SubLObject stream = NIL;
	    try {
		final SubLObject _prev_bind_0_$459 = stream_macros.$stream_requires_locking$.currentBinding(thread);
		try {
		    stream_macros.$stream_requires_locking$.bind(NIL, thread);
		    stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), $APPEND);
		} finally {
		    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$459, thread);
		}
		if (!stream.isStream()) {
		    Errors.error(fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
		}
		final SubLObject _prev_bind_0_$460 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
		try {
		    fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
		    final SubLObject _prev_bind_0_$461 = fact_sheet_logs.$next_fact_sheet_hourly_report_time$.currentBinding(thread);
		    final SubLObject _prev_bind_2 = fact_sheet_logs.$hourly_fact_sheet_stats$.currentBinding(thread);
		    try {
			fact_sheet_logs.$next_fact_sheet_hourly_report_time$.bind(NIL, thread);
			fact_sheet_logs.$hourly_fact_sheet_stats$.bind(make_vector(TWO_INTEGER, ZERO_INTEGER), thread);
			fact_sheet_logs.reset_hourly_report_time(UNPROVIDED);
			final SubLObject stream_$462 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream_$462) && current_process().eql(subl_promotions.initial_process())) || (stream_$462.isStream() && (NIL != output_stream_p(stream_$462)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$462);
			    format(stream_$462, fact_sheets.$str889$Updating__A_public_fact_sheets_fi, new SubLObject[] { fs_type, file_number, parent_directory });
			    force_output(stream_$462);
			}
			final SubLObject directory_$458 = cconcatenate(parent_directory, new SubLObject[] { fact_sheets.get_fs_collection_name(fs_type), fact_sheets.$str500$_ });
			final SubLObject filename_$459 = fact_sheets.fact_sheet_term_id_filename(directory_$458, file_number);
			if (NIL != file_utilities.file_existsP(filename_$459)) {
			    final SubLObject list_var;
			    final SubLObject term_ids = list_var = cfasl_utilities.cfasl_load(filename_$459);
			    final SubLObject _prev_bind_0_$462 = $progress_note$.currentBinding(thread);
			    final SubLObject _prev_bind_1_$466 = $progress_start_time$.currentBinding(thread);
			    final SubLObject _prev_bind_3 = $progress_total$.currentBinding(thread);
			    final SubLObject _prev_bind_4 = $progress_sofar$.currentBinding(thread);
			    final SubLObject _prev_bind_5 = $last_percent_progress_index$.currentBinding(thread);
			    final SubLObject _prev_bind_6 = $last_percent_progress_prediction$.currentBinding(thread);
			    final SubLObject _prev_bind_7 = $within_noting_percent_progress$.currentBinding(thread);
			    final SubLObject _prev_bind_8 = $percent_progress_start_time$.currentBinding(thread);
			    try {
				$progress_note$.bind(NIL != cconcatenate(fact_sheets.$$$Updating_,
					new SubLObject[] { format_nil.format_nil_a_no_copy(fs_type), fact_sheets.$$$_public_fact_sheets_from_, format_nil.format_nil_a_no_copy(filename_$459), fact_sheets.$str766$__, format_nil.format_nil_a_no_copy(Filesys.probe_file(filename_$459)) })
						? cconcatenate(fact_sheets.$$$Updating_,
							new SubLObject[] { format_nil.format_nil_a_no_copy(fs_type), fact_sheets.$$$_public_fact_sheets_from_, format_nil.format_nil_a_no_copy(filename_$459), fact_sheets.$str766$__, format_nil.format_nil_a_no_copy(Filesys.probe_file(filename_$459)) })
						: fact_sheets.$$$cdolist,
					thread);
				$progress_start_time$.bind(get_universal_time(), thread);
				$progress_total$.bind(length(list_var), thread);
				$progress_sofar$.bind(ZERO_INTEGER, thread);
				$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
				$last_percent_progress_prediction$.bind(NIL, thread);
				$within_noting_percent_progress$.bind(T, thread);
				$percent_progress_start_time$.bind(get_universal_time(), thread);
				try {
				    noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
				    SubLObject csome_list_var = list_var;
				    SubLObject term_id = NIL;
				    term_id = csome_list_var.first();
				    while (NIL != csome_list_var) {
					final SubLObject v_term = fact_sheets.fact_sheet_term_from_id(term_id, UNPROVIDED);
					if (NIL != v_term) {
					    final SubLObject fact_sheet_file = nth_value_step_2(nth_value_step_1(ONE_INTEGER), fact_sheets.directory_and_filename_for_public_fact_sheet(v_term, fs_type, UNPROVIDED));
					    final SubLObject file_write_date = (NIL != file_utilities.file_existsP(fact_sheet_file)) ? Filesys.file_write_date(fact_sheet_file) : ZERO_INTEGER;
					    if (file_write_date.numG(write_date_threshold)) {
						final SubLObject stream_$463 = fact_sheet_logs.fact_sheet_log_stream();
						if (((T == stream_$463) && current_process().eql(subl_promotions.initial_process())) || (stream_$463.isStream() && (NIL != output_stream_p(stream_$463)))) {
						    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$463);
						    format(stream_$463, fact_sheets.$str593$Skipping__S__which_was_updated_on, v_term, numeric_date_utilities.get_universal_date(file_write_date, UNPROVIDED));
						    force_output(stream_$463);
						}
					    } else {
						fact_sheets.ensure_public_fact_sheet_for_term(v_term, fs_type, T);
					    }
					} else {
					    final SubLObject stream_$464 = fact_sheet_logs.fact_sheet_log_stream();
					    if (((T == stream_$464) && current_process().eql(subl_promotions.initial_process())) || (stream_$464.isStream() && (NIL != output_stream_p(stream_$464)))) {
						fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream_$464);
						format(stream_$464, fact_sheets.$str891$Couldn_t_find_term_for_id___S__, term_id);
						force_output(stream_$464);
					    }
					}
					$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
					note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
					csome_list_var = csome_list_var.rest();
					term_id = csome_list_var.first();
				    }
				} finally {
				    final SubLObject _prev_bind_0_$463 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					final SubLObject _values = getValuesAsVector();
					noting_percent_progress_postamble();
					restoreValuesFromVector(_values);
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$463, thread);
				    }
				}
			    } finally {
				$percent_progress_start_time$.rebind(_prev_bind_8, thread);
				$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
				$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
				$last_percent_progress_index$.rebind(_prev_bind_5, thread);
				$progress_sofar$.rebind(_prev_bind_4, thread);
				$progress_total$.rebind(_prev_bind_3, thread);
				$progress_start_time$.rebind(_prev_bind_1_$466, thread);
				$progress_note$.rebind(_prev_bind_0_$462, thread);
			    }
			} else {
			    final SubLObject stream_$465 = fact_sheet_logs.fact_sheet_log_stream();
			    if (((T == stream_$465) && current_process().eql(subl_promotions.initial_process())) || (stream_$465.isStream() && (NIL != output_stream_p(stream_$465)))) {
				fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream_$465);
				format(stream_$465, fact_sheets.$str892$Couldn_t_find_datafile___S, filename_$459);
				force_output(stream_$465);
			    }
			}
		    } finally {
			fact_sheet_logs.$hourly_fact_sheet_stats$.rebind(_prev_bind_2, thread);
			fact_sheet_logs.$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_$461, thread);
		    }
		    if (NIL != use_new_setupP) {
			final SubLObject stream_$466 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream_$466) && current_process().eql(subl_promotions.initial_process())) || (stream_$466.isStream() && (NIL != output_stream_p(stream_$466)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$466);
			    format(stream_$466, fact_sheets.$str548$Closing_log_);
			    force_output(stream_$466);
			}
			fact_sheet_logs.note_fact_sheet_log_file_closed(UNPROVIDED);
		    }
		} finally {
		    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$460, thread);
		}
	    } finally {
		final SubLObject _prev_bind_0_$464 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values2 = getValuesAsVector();
		    if (stream.isStream()) {
			close(stream, UNPROVIDED);
		    }
		    restoreValuesFromVector(_values2);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$464, thread);
		}
	    }
	} finally {
	    fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
	}
	return file_number;
    }

    /**
    * Rebuilds the public HTML fact sheets for terms mentioned in FILE-NUMBER, based on cached fact-sheet-data
    * for each of the terms.  This does not rebuild any of the underlying data, it merely reconstructs the HTML.
    */

    public static final SubLObject any_token_containsP_alt(SubLObject search_string, SubLObject token_list) {
	{
	    SubLObject result = NIL;
	    if (NIL == result) {
		{
		    SubLObject csome_list_var = token_list;
		    SubLObject token = NIL;
		    for (token = csome_list_var.first(); !((NIL != result) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), token = csome_list_var.first()) {
			result = search(search_string, token, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		    }
		}
	    }
	    return result;
	}
    }

    public static SubLObject any_token_containsP(final SubLObject search_string, final SubLObject token_list) {
	SubLObject result = NIL;
	if (NIL == result) {
	    SubLObject csome_list_var;
	    SubLObject token;
	    for (csome_list_var = token_list, token = NIL, token = csome_list_var.first(); (NIL == result)
		    && (NIL != csome_list_var); result = search(search_string, token, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), csome_list_var = csome_list_var.rest(), token = csome_list_var.first()) {
	    }
	}
	return result;
    }

    /**
     *
     *
     * @unknown This function requires that the HTML files actually be present for the starting points (and their parents).
    If the HTML files are not present, the list of starting points will be empty.
     */
    @LispMethod(comment = "@unknown This function requires that the HTML files actually be present for the starting points (and their parents).\r\nIf the HTML files are not present, the list of starting points will be empty.")
    public static final SubLObject write_public_fact_sheets_starting_points_data_alt(SubLObject fs_type, SubLObject destination_filename) {
	if (destination_filename == UNPROVIDED) {
	    destination_filename = NIL;
	}
	{
	    SubLObject destination = (NIL != destination_filename) ? ((SubLObject) (destination_filename)) : com.cyc.cycjava.cycl.fact_sheets.get_fs_default_starting_points_filename(fs_type);
	    return com.cyc.cycjava.cycl.fact_sheets.write_public_fact_sheets_starting_points_data_int(destination, com.cyc.cycjava.cycl.fact_sheets.suggested_starting_points_for_public_fact_sheet_browsing(fs_type), fs_type);
	}
    }

    /**
     *
     *
     * @unknown This function requires that the HTML files actually be present for the starting points (and their parents).
    If the HTML files are not present, the list of starting points will be empty.
     */
    @LispMethod(comment = "@unknown This function requires that the HTML files actually be present for the starting points (and their parents).\r\nIf the HTML files are not present, the list of starting points will be empty.")
    public static SubLObject write_public_fact_sheets_starting_points_data(final SubLObject fs_type, SubLObject destination_filename) {
	if (destination_filename == UNPROVIDED) {
	    destination_filename = NIL;
	}
	final SubLObject destination = (NIL != destination_filename) ? destination_filename : fact_sheets.get_fs_default_starting_points_filename(fs_type);
	return fact_sheets.write_public_fact_sheets_starting_points_data_int(destination, fact_sheets.suggested_starting_points_for_public_fact_sheet_browsing(fs_type), fs_type);
    }

    public static final SubLObject write_public_fact_sheets_starting_points_data_int_alt(SubLObject destination_filename, SubLObject starting_points, SubLObject fs_type) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject stream = NIL;
		try {
		    {
			SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
			try {
			    stream_macros.$stream_requires_locking$.bind(NIL, thread);
			    stream = compatibility.open_text(destination_filename, $OUTPUT, NIL);
			} finally {
			    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
			}
		    }
		    if (!stream.isStream()) {
			Errors.error($str_alt137$Unable_to_open__S, destination_filename);
		    }
		    {
			SubLObject stream_524 = stream;
			SubLObject list_var = starting_points;
			$progress_note$.setDynamicValue($str_alt1004$Writing_fact_sheet_starting_point, thread);
			$progress_start_time$.setDynamicValue(get_universal_time(), thread);
			$progress_total$.setDynamicValue(length(list_var), thread);
			$progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
			{
			    SubLObject _prev_bind_0 = $last_percent_progress_index$.currentBinding(thread);
			    SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
			    SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
			    SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
			    try {
				$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
				$last_percent_progress_prediction$.bind(NIL, thread);
				$within_noting_percent_progress$.bind(T, thread);
				$percent_progress_start_time$.bind(get_universal_time(), thread);
				noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
				{
				    SubLObject csome_list_var = list_var;
				    SubLObject v_term = NIL;
				    for (v_term = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), v_term = csome_list_var.first()) {
					note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
					$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
					if (NIL != com.cyc.cycjava.cycl.fact_sheets.public_fact_sheet_starting_point_okP(v_term, fs_type)) {
					    thread.resetMultipleValues();
					    {
						SubLObject directory = com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_public_fact_sheet(v_term, fs_type, UNPROVIDED);
						SubLObject filename = thread.secondMultipleValue();
						thread.resetMultipleValues();
						{
						    SubLObject file_length = file_utilities.get_file_length(filename);
						    SubLObject href = string_utilities.pre_remove(com.cyc.cycjava.cycl.fact_sheets.relative_filename_for_public_fact_sheet(v_term, fs_type, UNPROVIDED), $str_alt1005$___, UNPROVIDED);
						    {
							SubLObject _prev_bind_0_525 = $fact_sheet_term_paraphrase_for_titleP$.currentBinding(thread);
							try {
							    $fact_sheet_term_paraphrase_for_titleP$.bind(T, thread);
							    {
								SubLObject term_paraphrase = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_title(v_term);
								{
								    SubLObject _prev_bind_0_526 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
								    SubLObject _prev_bind_1_527 = mt_relevance_macros.$mt$.currentBinding(thread);
								    try {
									mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
									mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
									{
									    SubLObject cols = remove(v_term, union(isa.all_isa(v_term, UNPROVIDED, UNPROVIDED), genls.all_genls(v_term, UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
									    SubLObject cdolist_list_var = cols;
									    SubLObject type = NIL;
									    for (type = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), type = cdolist_list_var.first()) {
										if (NIL != com.cyc.cycjava.cycl.fact_sheets.public_fact_sheet_starting_point_okP(type, fs_type)) {
										    {
											SubLObject type_href = string_utilities.pre_remove(com.cyc.cycjava.cycl.fact_sheets.relative_filename_for_public_fact_sheet(type, fs_type, UNPROVIDED), $str_alt1005$___, UNPROVIDED);
											{
											    SubLObject _prev_bind_0_528 = $fact_sheet_term_paraphrase_for_titleP$.currentBinding(thread);
											    try {
												$fact_sheet_term_paraphrase_for_titleP$.bind(T, thread);
												{
												    SubLObject type_paraphrase = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_title(type);
												    SubLObject printed_oneP = NIL;
												    SubLObject cdolist_list_var_529 = list(type_paraphrase, term_paraphrase, file_length, type_href, href);
												    SubLObject datum = NIL;
												    for (datum = cdolist_list_var_529.first(); NIL != cdolist_list_var_529; cdolist_list_var_529 = cdolist_list_var_529.rest(), datum = cdolist_list_var_529.first()) {
													if (NIL != printed_oneP) {
													    princ(CHAR_tab, stream_524);
													}
													princ(datum, stream_524);
													printed_oneP = T;
												    }
												    terpri(stream_524);
												}
											    } finally {
												$fact_sheet_term_paraphrase_for_titleP$.rebind(_prev_bind_0_528, thread);
											    }
											}
										    }
										}
									    }
									}
								    } finally {
									mt_relevance_macros.$mt$.rebind(_prev_bind_1_527, thread);
									mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_526, thread);
								    }
								}
							    }
							} finally {
							    $fact_sheet_term_paraphrase_for_titleP$.rebind(_prev_bind_0_525, thread);
							}
						    }
						}
					    }
					}
				    }
				}
				noting_percent_progress_postamble();
			    } finally {
				$percent_progress_start_time$.rebind(_prev_bind_3, thread);
				$within_noting_percent_progress$.rebind(_prev_bind_2, thread);
				$last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
				$last_percent_progress_index$.rebind(_prev_bind_0, thread);
			    }
			}
		    }
		} finally {
		    {
			SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    if (stream.isStream()) {
				close(stream, UNPROVIDED);
			    }
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
	    }
	    return destination_filename;
	}
    }

    public static SubLObject write_public_fact_sheets_starting_points_data_int(final SubLObject destination_filename, final SubLObject starting_points, final SubLObject fs_type) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject stream = NIL;
	try {
	    final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
	    try {
		stream_macros.$stream_requires_locking$.bind(NIL, thread);
		stream = compatibility.open_text(destination_filename, $OUTPUT);
	    } finally {
		stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
	    }
	    if (!stream.isStream()) {
		Errors.error(fact_sheets.$str284$Unable_to_open__S, destination_filename);
	    }
	    final SubLObject stream_$473 = stream;
	    final SubLObject _prev_bind_2 = $progress_note$.currentBinding(thread);
	    final SubLObject _prev_bind_3 = $progress_start_time$.currentBinding(thread);
	    final SubLObject _prev_bind_4 = $progress_total$.currentBinding(thread);
	    final SubLObject _prev_bind_5 = $progress_sofar$.currentBinding(thread);
	    final SubLObject _prev_bind_6 = $last_percent_progress_index$.currentBinding(thread);
	    final SubLObject _prev_bind_7 = $last_percent_progress_prediction$.currentBinding(thread);
	    final SubLObject _prev_bind_8 = $within_noting_percent_progress$.currentBinding(thread);
	    final SubLObject _prev_bind_9 = $percent_progress_start_time$.currentBinding(thread);
	    try {
		$progress_note$.bind(fact_sheets.$str893$Writing_fact_sheet_starting_point, thread);
		$progress_start_time$.bind(get_universal_time(), thread);
		$progress_total$.bind(length(starting_points), thread);
		$progress_sofar$.bind(ZERO_INTEGER, thread);
		$last_percent_progress_index$.bind(ZERO_INTEGER, thread);
		$last_percent_progress_prediction$.bind(NIL, thread);
		$within_noting_percent_progress$.bind(T, thread);
		$percent_progress_start_time$.bind(get_universal_time(), thread);
		try {
		    noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
		    SubLObject csome_list_var = starting_points;
		    SubLObject v_term = NIL;
		    v_term = csome_list_var.first();
		    while (NIL != csome_list_var) {
			if (NIL != fact_sheets.public_fact_sheet_starting_point_okP(v_term, fs_type)) {
			    thread.resetMultipleValues();
			    final SubLObject directory = fact_sheets.directory_and_filename_for_public_fact_sheet(v_term, fs_type, UNPROVIDED);
			    final SubLObject filename = thread.secondMultipleValue();
			    thread.resetMultipleValues();
			    final SubLObject file_length = file_utilities.get_file_length(filename);
			    final SubLObject href = string_utilities.pre_remove(fact_sheets.relative_filename_for_public_fact_sheet(v_term, fs_type, UNPROVIDED), fact_sheets.$str894$___, UNPROVIDED);
			    final SubLObject _prev_bind_0_$474 = fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.currentBinding(thread);
			    try {
				fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.bind(T, thread);
				final SubLObject term_paraphrase = fact_sheets.fact_sheet_title(v_term);
				final SubLObject _prev_bind_0_$475 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
				final SubLObject _prev_bind_1_$476 = mt_relevance_macros.$mt$.currentBinding(thread);
				try {
				    mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
				    mt_relevance_macros.$mt$.bind(fact_sheets.$$EverythingPSC, thread);
				    SubLObject cdolist_list_var;
				    final SubLObject cols = cdolist_list_var = remove(v_term, union(isa.all_isa(v_term, UNPROVIDED, UNPROVIDED), genls.all_genls(v_term, UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
				    SubLObject type = NIL;
				    type = cdolist_list_var.first();
				    while (NIL != cdolist_list_var) {
					if (NIL != fact_sheets.public_fact_sheet_starting_point_okP(type, fs_type)) {
					    final SubLObject type_href = string_utilities.pre_remove(fact_sheets.relative_filename_for_public_fact_sheet(type, fs_type, UNPROVIDED), fact_sheets.$str894$___, UNPROVIDED);
					    final SubLObject _prev_bind_0_$476 = fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.currentBinding(thread);
					    try {
						fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.bind(T, thread);
						final SubLObject type_paraphrase = fact_sheets.fact_sheet_title(type);
						SubLObject printed_oneP = NIL;
						SubLObject cdolist_list_var_$478 = list(type_paraphrase, term_paraphrase, file_length, type_href, href);
						SubLObject datum = NIL;
						datum = cdolist_list_var_$478.first();
						while (NIL != cdolist_list_var_$478) {
						    if (NIL != printed_oneP) {
							princ(CHAR_tab, stream_$473);
						    }
						    princ(datum, stream_$473);
						    printed_oneP = T;
						    cdolist_list_var_$478 = cdolist_list_var_$478.rest();
						    datum = cdolist_list_var_$478.first();
						}
						terpri(stream_$473);
					    } finally {
						fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.rebind(_prev_bind_0_$476, thread);
					    }
					}
					cdolist_list_var = cdolist_list_var.rest();
					type = cdolist_list_var.first();
				    }
				} finally {
				    mt_relevance_macros.$mt$.rebind(_prev_bind_1_$476, thread);
				    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_$475, thread);
				}
			    } finally {
				fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.rebind(_prev_bind_0_$474, thread);
			    }
			}
			$progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
			note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
			csome_list_var = csome_list_var.rest();
			v_term = csome_list_var.first();
		    }
		} finally {
		    final SubLObject _prev_bind_0_$477 = $is_thread_performing_cleanupP$.currentBinding(thread);
		    try {
			$is_thread_performing_cleanupP$.bind(T, thread);
			final SubLObject _values = getValuesAsVector();
			noting_percent_progress_postamble();
			restoreValuesFromVector(_values);
		    } finally {
			$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$477, thread);
		    }
		}
	    } finally {
		$percent_progress_start_time$.rebind(_prev_bind_9, thread);
		$within_noting_percent_progress$.rebind(_prev_bind_8, thread);
		$last_percent_progress_prediction$.rebind(_prev_bind_7, thread);
		$last_percent_progress_index$.rebind(_prev_bind_6, thread);
		$progress_sofar$.rebind(_prev_bind_5, thread);
		$progress_total$.rebind(_prev_bind_4, thread);
		$progress_start_time$.rebind(_prev_bind_3, thread);
		$progress_note$.rebind(_prev_bind_2, thread);
	    }
	} finally {
	    final SubLObject _prev_bind_10 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values2 = getValuesAsVector();
		if (stream.isStream()) {
		    close(stream, UNPROVIDED);
		}
		restoreValuesFromVector(_values2);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
	    }
	}
	return destination_filename;
    }

    public static final SubLObject public_fact_sheet_starting_point_okP_alt(SubLObject v_term, SubLObject fs_type) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject okP = NIL;
		thread.resetMultipleValues();
		{
		    SubLObject directory = com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_public_fact_sheet(v_term, fs_type, UNPROVIDED);
		    SubLObject filename = thread.secondMultipleValue();
		    thread.resetMultipleValues();
		    if (((NIL != Filesys.directory_p(directory)) && (NIL != file_utilities.file_existsP(filename))) && file_utilities.get_file_length(filename).numG($int$1500)) {
			okP = T;
		    }
		}
		return okP;
	    }
	}
    }

    public static SubLObject public_fact_sheet_starting_point_okP(final SubLObject v_term, final SubLObject fs_type) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject okP = NIL;
	thread.resetMultipleValues();
	final SubLObject directory = fact_sheets.directory_and_filename_for_public_fact_sheet(v_term, fs_type, UNPROVIDED);
	final SubLObject filename = thread.secondMultipleValue();
	thread.resetMultipleValues();
	if (((NIL != Filesys.directory_p(directory)) && (NIL != file_utilities.file_existsP(filename))) && file_utilities.get_file_length(filename).numG(fact_sheets.$int$1500)) {
	    okP = T;
	}
	return okP;
    }

    public static final SubLObject suggested_starting_points_for_public_fact_sheet_browsing_alt(SubLObject fs_type) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject sorted = Sort.sort(set.set_element_list(com.cyc.cycjava.cycl.fact_sheets.terms_for_public_fact_sheets(fs_type)), symbol_function($sym108$_), symbol_function(CACHED_NUM_GAF_ARG_INDEX));
		SubLObject done_types = set.new_set(symbol_function(EQUAL), UNPROVIDED);
		SubLObject starting_points = NIL;
		{
		    SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
		    SubLObject _prev_bind_1 = mt_relevance_macros.$mt$.currentBinding(thread);
		    try {
			mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
			mt_relevance_macros.$mt$.bind($$EverythingPSC, thread);
			{
			    SubLObject cdolist_list_var = sorted;
			    SubLObject v_term = NIL;
			    for (v_term = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), v_term = cdolist_list_var.first()) {
				{
				    SubLObject newP = NIL;
				    SubLObject types = isa.min_isa(v_term, UNPROVIDED, UNPROVIDED);
				    if (NIL == newP) {
					{
					    SubLObject csome_list_var = types;
					    SubLObject type = NIL;
					    for (type = csome_list_var.first(); !((NIL != newP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), type = csome_list_var.first()) {
						if (NIL == set.set_memberP(type, done_types)) {
						    newP = T;
						}
					    }
					}
				    }
				    if (NIL != newP) {
					starting_points = cons(v_term, starting_points);
					set_utilities.set_add_all(types, done_types);
				    }
				}
			    }
			}
		    } finally {
			mt_relevance_macros.$mt$.rebind(_prev_bind_1, thread);
			mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
		    }
		}
		return nreverse(starting_points);
	    }
	}
    }

    public static SubLObject suggested_starting_points_for_public_fact_sheet_browsing(final SubLObject fs_type) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject sorted = Sort.sort(set.set_element_list(fact_sheets.terms_for_public_fact_sheets(fs_type)), symbol_function(fact_sheets.$sym313$_), symbol_function(fact_sheets.CACHED_NUM_GAF_ARG_INDEX));
	final SubLObject done_types = set.new_set(symbol_function(EQUAL), UNPROVIDED);
	SubLObject starting_points = NIL;
	final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
	final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
	try {
	    mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
	    mt_relevance_macros.$mt$.bind(fact_sheets.$$EverythingPSC, thread);
	    SubLObject cdolist_list_var = sorted;
	    SubLObject v_term = NIL;
	    v_term = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject newP = NIL;
		final SubLObject types = isa.min_isa(v_term, UNPROVIDED, UNPROVIDED);
		if (NIL == newP) {
		    SubLObject csome_list_var = types;
		    SubLObject type = NIL;
		    type = csome_list_var.first();
		    while ((NIL == newP) && (NIL != csome_list_var)) {
			if (NIL == set.set_memberP(type, done_types)) {
			    newP = T;
			}
			csome_list_var = csome_list_var.rest();
			type = csome_list_var.first();
		    }
		}
		if (NIL != newP) {
		    starting_points = cons(v_term, starting_points);
		    set_utilities.set_add_all(types, done_types);
		}
		cdolist_list_var = cdolist_list_var.rest();
		v_term = cdolist_list_var.first();
	    }
	} finally {
	    mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
	    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
	}
	return nreverse(starting_points);
    }

    public static final SubLObject clear_cached_num_gaf_arg_index_alt() {
	{
	    SubLObject cs = $cached_num_gaf_arg_index_caching_state$.getGlobalValue();
	    if (NIL != cs) {
		memoization_state.caching_state_clear(cs);
	    }
	}
	return NIL;
    }

    public static SubLObject clear_cached_num_gaf_arg_index() {
	final SubLObject cs = fact_sheets.$cached_num_gaf_arg_index_caching_state$.getGlobalValue();
	if (NIL != cs) {
	    memoization_state.caching_state_clear(cs);
	}
	return NIL;
    }

    public static final SubLObject remove_cached_num_gaf_arg_index_alt(SubLObject v_term) {
	return memoization_state.caching_state_remove_function_results_with_args($cached_num_gaf_arg_index_caching_state$.getGlobalValue(), list(v_term), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_cached_num_gaf_arg_index(final SubLObject v_term) {
	return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$cached_num_gaf_arg_index_caching_state$.getGlobalValue(), list(v_term), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject cached_num_gaf_arg_index_internal_alt(SubLObject v_term) {
	return kb_indexing.num_gaf_arg_index(v_term, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject cached_num_gaf_arg_index_internal(final SubLObject v_term) {
	return kb_indexing.num_gaf_arg_index(v_term, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject cached_num_gaf_arg_index_alt(SubLObject v_term) {
	{
	    SubLObject caching_state = $cached_num_gaf_arg_index_caching_state$.getGlobalValue();
	    if (NIL == caching_state) {
		caching_state = memoization_state.create_global_caching_state_for_name(CACHED_NUM_GAF_ARG_INDEX, $cached_num_gaf_arg_index_caching_state$, NIL, EQL, ONE_INTEGER, ZERO_INTEGER);
	    }
	    {
		SubLObject results = memoization_state.caching_state_lookup(caching_state, v_term, $kw127$_MEMOIZED_ITEM_NOT_FOUND_);
		if (results == $kw127$_MEMOIZED_ITEM_NOT_FOUND_) {
		    results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.fact_sheets.cached_num_gaf_arg_index_internal(v_term)));
		    memoization_state.caching_state_put(caching_state, v_term, results, UNPROVIDED);
		}
		return memoization_state.caching_results(results);
	    }
	}
    }

    public static SubLObject cached_num_gaf_arg_index(final SubLObject v_term) {
	SubLObject caching_state = fact_sheets.$cached_num_gaf_arg_index_caching_state$.getGlobalValue();
	if (NIL == caching_state) {
	    caching_state = memoization_state.create_global_caching_state_for_name(fact_sheets.CACHED_NUM_GAF_ARG_INDEX, fact_sheets.$cached_num_gaf_arg_index_caching_state$, NIL, EQL, ONE_INTEGER, ZERO_INTEGER);
	}
	SubLObject results = memoization_state.caching_state_lookup(caching_state, v_term, memoization_state.$memoized_item_not_found$.getGlobalValue());
	if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
	    results = arg2(resetMultipleValues(), multiple_value_list(fact_sheets.cached_num_gaf_arg_index_internal(v_term)));
	    memoization_state.caching_state_put(caching_state, v_term, results, UNPROVIDED);
	}
	return memoization_state.caching_results(results);
    }

    /**
     * Write all CycL sentences in fact sheets under ROOT.
     */
    @LispMethod(comment = "Write all CycL sentences in fact sheets under ROOT.")
    public static final SubLObject dump_fact_sheet_sentences_old_alt(SubLObject destination_file, SubLObject root, SubLObject max_count) {
	if (root == UNPROVIDED) {
	    root = cconcatenate(file_utilities.cyc_home_subdirectory(com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_path()), $$$normal);
	}
	if (max_count == UNPROVIDED) {
	    max_count = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject stopP = NIL;
		SubLObject done_count = ZERO_INTEGER;
		SubLObject progress_message = cconcatenate($str_alt1010$Dumping_fact_sheet_sentences_to_, format_nil.format_nil_s_no_copy(destination_file));
		SubLObject current_directory = NIL;
		SubLObject current_directory_okP = NIL;
		SubLObject already_loggingP = stringp($fact_sheet_log_file$.getDynamicValue(thread));
		SubLObject directory = NIL;
		SubLObject filename = NIL;
		SubLObject use_new_setupP = NIL;
		if (NIL == already_loggingP) {
		    thread.resetMultipleValues();
		    {
			SubLObject directory_530 = com.cyc.cycjava.cycl.fact_sheets.open_new_unique_fact_sheet_log_file();
			SubLObject filename_531 = thread.secondMultipleValue();
			thread.resetMultipleValues();
			directory = directory_530;
			filename = filename_531;
		    }
		    use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
		}
		if (NIL != use_new_setupP) {
		    format(StreamsLow.$standard_output$.getDynamicValue(thread), $str_alt69$__Logging_Fact_Sheet_generation_t, filename);
		    force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
		}
		{
		    SubLObject _prev_bind_0 = $fact_sheet_log_file$.currentBinding(thread);
		    try {
			$fact_sheet_log_file$.bind(NIL != use_new_setupP ? ((SubLObject) (filename)) : $fact_sheet_log_file$.getDynamicValue(thread), thread);
			{
			    SubLObject stream = NIL;
			    try {
				{
				    SubLObject _prev_bind_0_532 = stream_macros.$stream_requires_locking$.currentBinding(thread);
				    try {
					stream_macros.$stream_requires_locking$.bind(NIL, thread);
					stream = compatibility.open_text($fact_sheet_log_file$.getDynamicValue(thread), $APPEND, NIL);
				    } finally {
					stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_532, thread);
				    }
				}
				if (!stream.isStream()) {
				    Errors.error($str_alt137$Unable_to_open__S, $fact_sheet_log_file$.getDynamicValue(thread));
				}
				{
				    SubLObject _prev_bind_0_533 = $fact_sheet_log_stream$.currentBinding(thread);
				    try {
					$fact_sheet_log_stream$.bind(stream, thread);
					{
					    SubLObject stream_534 = NIL;
					    try {
						{
						    SubLObject _prev_bind_0_535 = stream_macros.$stream_requires_locking$.currentBinding(thread);
						    try {
							stream_macros.$stream_requires_locking$.bind(NIL, thread);
							stream_534 = compatibility.open_text(destination_file, $OUTPUT, NIL);
						    } finally {
							stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_535, thread);
						    }
						}
						if (!stream_534.isStream()) {
						    Errors.error($str_alt137$Unable_to_open__S, destination_file);
						}
						{
						    SubLObject stream_536 = stream_534;
						    SubLTrampolineFile.checkType(root, DIRECTORY_P);
						    {
							SubLObject directory_list_var = list(root);
							SubLObject current_directory_var = NIL;
							for (current_directory_var = directory_list_var.first(); NIL != directory_list_var; current_directory_var = directory_list_var.first()) {
							    directory_list_var = directory_list_var.rest();
							    SubLTrampolineFile.checkType(current_directory_var, DIRECTORY_P);
							    {
								SubLObject directory_contents_var = Filesys.directory(current_directory_var, T);
								SubLObject progress_message_var = (progress_message.isString())
									? ((SubLObject) (cconcatenate(progress_message, cconcatenate(format_nil.$format_nil_percent$.getGlobalValue(), new SubLObject[] { $str_alt658$_Directory__, format_nil.format_nil_s_no_copy(current_directory_var) }))))
									: NIL;
								{
								    SubLObject _prev_bind_0_537 = $silent_progressP$.currentBinding(thread);
								    try {
									$silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
									{
									    SubLObject list_var = directory_contents_var;
									    $progress_note$.setDynamicValue(progress_message_var, thread);
									    $progress_start_time$.setDynamicValue(get_universal_time(), thread);
									    $progress_total$.setDynamicValue(length(list_var), thread);
									    $progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
									    {
										SubLObject _prev_bind_0_538 = $last_percent_progress_index$.currentBinding(thread);
										SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
										SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
										SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
										try {
										    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
										    $last_percent_progress_prediction$.bind(NIL, thread);
										    $within_noting_percent_progress$.bind(T, thread);
										    $percent_progress_start_time$.bind(get_universal_time(), thread);
										    noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
										    {
											SubLObject csome_list_var = list_var;
											SubLObject filename_539 = NIL;
											for (filename_539 = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest(), filename_539 = csome_list_var.first()) {
											    note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
											    $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
											    if (NIL != Filesys.directory_p(filename_539)) {
												directory_list_var = cons(filename_539, directory_list_var);
											    } else {
												if (NIL == stopP) {
												    {
													SubLObject this_directory = file_utilities.deconstruct_path(filename_539);
													SubLObject v_term = NIL;
													if (!this_directory.equal(current_directory)) {
													    current_directory = this_directory;
													    {
														SubLObject okP = NIL;
														if (NIL != com.cyc.cycjava.cycl.fact_sheets.possible_fact_sheet_directory_p(current_directory)) {
														    thread.resetMultipleValues();
														    {
															SubLObject this_term = com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_from_filename(filename_539);
															SubLObject this_verbosity = thread.secondMultipleValue();
															SubLObject this_domain_mt = thread.thirdMultipleValue();
															SubLObject this_language_mt = thread.fourthMultipleValue();
															thread.resetMultipleValues();
															v_term = this_term;
															if (((NIL != this_verbosity) && (NIL != this_domain_mt)) && (NIL != this_language_mt)) {
															    okP = T;
															    current_directory_okP = okP;
															}
														    }
														}
													    }
													}
													if (NIL != current_directory_okP) {
													    done_count = com.cyc.cycjava.cycl.fact_sheets.dump_fact_sheet_sentences_for_term(v_term, stream_536, done_count, max_count);
													}
												    }
												}
											    }
											}
										    }
										    noting_percent_progress_postamble();
										} finally {
										    $percent_progress_start_time$.rebind(_prev_bind_3, thread);
										    $within_noting_percent_progress$.rebind(_prev_bind_2, thread);
										    $last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
										    $last_percent_progress_index$.rebind(_prev_bind_0_538, thread);
										}
									    }
									}
								    } finally {
									$silent_progressP$.rebind(_prev_bind_0_537, thread);
								    }
								}
							    }
							}
						    }
						}
					    } finally {
						{
						    SubLObject _prev_bind_0_540 = $is_thread_performing_cleanupP$.currentBinding(thread);
						    try {
							$is_thread_performing_cleanupP$.bind(T, thread);
							if (stream_534.isStream()) {
							    close(stream_534, UNPROVIDED);
							}
						    } finally {
							$is_thread_performing_cleanupP$.rebind(_prev_bind_0_540, thread);
						    }
						}
					    }
					    if (NIL != use_new_setupP) {
						{
						    SubLObject stream_541 = $fact_sheet_log_stream$.getDynamicValue(thread);
						    if (((T == stream_541) && (current_process() == subl_promotions.initial_process())) || (stream_541.isStream() && (NIL != output_stream_p(stream_541)))) {
							com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_541);
							format(stream_541, $str_alt685$Closing_log_);
							force_output(stream_541);
						    }
						}
						com.cyc.cycjava.cycl.fact_sheets.note_fact_sheet_log_file_closed(UNPROVIDED);
					    }
					}
				    } finally {
					$fact_sheet_log_stream$.rebind(_prev_bind_0_533, thread);
				    }
				}
			    } finally {
				{
				    SubLObject _prev_bind_0_542 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					if (stream.isStream()) {
					    close(stream, UNPROVIDED);
					}
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0_542, thread);
				    }
				}
			    }
			}
		    } finally {
			$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
		    }
		}
	    }
	    return destination_file;
	}
    }

    @LispMethod(comment = "Write all CycL sentences in fact sheets under ROOT.")
    public static SubLObject dump_fact_sheet_sentences_old(final SubLObject destination_file, SubLObject root, SubLObject max_count) {
	if (root == UNPROVIDED) {
	    root = cconcatenate(file_utilities.cyc_home_subdirectory(fact_sheets.fact_sheet_data_path()), fact_sheets.$$$normal);
	}
	if (max_count == UNPROVIDED) {
	    max_count = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject stopP = NIL;
	SubLObject done_count = ZERO_INTEGER;
	final SubLObject progress_message = cconcatenate(fact_sheets.$str899$Dumping_fact_sheet_sentences_to_, format_nil.format_nil_s_no_copy(destination_file));
	SubLObject current_directory = NIL;
	SubLObject current_directory_okP = NIL;
	final SubLObject already_loggingP = stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
	SubLObject directory = NIL;
	SubLObject filename = NIL;
	SubLObject use_new_setupP = NIL;
	if (NIL == already_loggingP) {
	    thread.resetMultipleValues();
	    final SubLObject directory_$480 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
	    final SubLObject filename_$481 = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    directory = directory_$480;
	    filename = filename_$481;
	    use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
	}
	if (NIL != use_new_setupP) {
	    format(StreamsLow.$standard_output$.getDynamicValue(thread), fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
	    force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
	}
	final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
	try {
	    fact_sheet_logs.$fact_sheet_log_file$.bind(NIL != use_new_setupP ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
	    SubLObject stream = NIL;
	    try {
		final SubLObject _prev_bind_0_$482 = stream_macros.$stream_requires_locking$.currentBinding(thread);
		try {
		    stream_macros.$stream_requires_locking$.bind(NIL, thread);
		    stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), $APPEND);
		} finally {
		    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$482, thread);
		}
		if (!stream.isStream()) {
		    Errors.error(fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
		}
		final SubLObject _prev_bind_0_$483 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
		try {
		    fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
		    SubLObject stream_$484 = NIL;
		    try {
			final SubLObject _prev_bind_0_$484 = stream_macros.$stream_requires_locking$.currentBinding(thread);
			try {
			    stream_macros.$stream_requires_locking$.bind(NIL, thread);
			    stream_$484 = compatibility.open_text(destination_file, $OUTPUT);
			} finally {
			    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$484, thread);
			}
			if (!stream_$484.isStream()) {
			    Errors.error(fact_sheets.$str284$Unable_to_open__S, destination_file);
			}
			final SubLObject stream_$485 = stream_$484;
			assert NIL != Filesys.directory_p(root) : "! Filesys.directory_p(root) " + ("Filesys.directory_p(root) " + "CommonSymbols.NIL != Filesys.directory_p(root) ") + root;
			SubLObject directory_list_var = list(root);
			SubLObject current_directory_var = NIL;
			current_directory_var = directory_list_var.first();
			while (NIL != directory_list_var) {
			    directory_list_var = directory_list_var.rest();
			    assert NIL != Filesys.directory_p(current_directory_var) : "! Filesys.directory_p(current_directory_var) " + ("Filesys.directory_p(current_directory_var) " + "CommonSymbols.NIL != Filesys.directory_p(current_directory_var) ") + current_directory_var;
			    SubLObject directory_contents_var = Filesys.directory(current_directory_var, T);
			    final SubLObject progress_message_var = (progress_message.isString())
				    ? cconcatenate(progress_message, cconcatenate(format_nil.$format_nil_percent$.getGlobalValue(), new SubLObject[] { fact_sheets.$str516$_Directory__, format_nil.format_nil_s_no_copy(current_directory_var) }))
				    : NIL;
			    final SubLObject _prev_bind_0_$485 = $silent_progressP$.currentBinding(thread);
			    try {
				$silent_progressP$.bind(makeBoolean(!progress_message_var.isString()), thread);
				if (NIL.isFunctionSpec()) {
				    directory_contents_var = Sort.sort(directory_contents_var, NIL, UNPROVIDED);
				}
				final SubLObject list_var = directory_contents_var;
				final SubLObject _prev_bind_0_$486 = $progress_note$.currentBinding(thread);
				final SubLObject _prev_bind_2 = $progress_start_time$.currentBinding(thread);
				final SubLObject _prev_bind_3 = $progress_total$.currentBinding(thread);
				final SubLObject _prev_bind_4 = $progress_sofar$.currentBinding(thread);
				final SubLObject _prev_bind_5 = $last_percent_progress_index$.currentBinding(thread);
				final SubLObject _prev_bind_6 = $last_percent_progress_prediction$.currentBinding(thread);
				final SubLObject _prev_bind_7 = $within_noting_percent_progress$.currentBinding(thread);
				final SubLObject _prev_bind_8 = $percent_progress_start_time$.currentBinding(thread);
				try {
				    $progress_note$.bind(NIL != progress_message_var ? progress_message_var : fact_sheets.$$$cdolist, thread);
				    $progress_start_time$.bind(get_universal_time(), thread);
				    $progress_total$.bind(length(list_var), thread);
				    $progress_sofar$.bind(ZERO_INTEGER, thread);
				    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
				    $last_percent_progress_prediction$.bind(NIL, thread);
				    $within_noting_percent_progress$.bind(T, thread);
				    $percent_progress_start_time$.bind(get_universal_time(), thread);
				    try {
					noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
					SubLObject csome_list_var = list_var;
					SubLObject filename_$482 = NIL;
					filename_$482 = csome_list_var.first();
					while (NIL != csome_list_var) {
					    if (NIL != Filesys.directory_p(filename_$482)) {
						directory_list_var = cons(filename_$482, directory_list_var);
					    } else if (NIL == stopP) {
						final SubLObject this_directory = file_utilities.deconstruct_path(filename_$482);
						SubLObject v_term = NIL;
						if (!this_directory.equal(current_directory)) {
						    current_directory = this_directory;
						    SubLObject okP = NIL;
						    if (NIL != fact_sheets.possible_fact_sheet_directory_p(current_directory)) {
							thread.resetMultipleValues();
							final SubLObject this_term = fact_sheets.fact_sheet_data_from_filename(filename_$482);
							final SubLObject this_verbosity = thread.secondMultipleValue();
							final SubLObject this_domain_mt = thread.thirdMultipleValue();
							final SubLObject this_language_mt = thread.fourthMultipleValue();
							thread.resetMultipleValues();
							v_term = this_term;
							if (((NIL != this_verbosity) && (NIL != this_domain_mt)) && (NIL != this_language_mt)) {
							    okP = current_directory_okP = T;
							}
						    }
						}
						if (NIL != current_directory_okP) {
						    done_count = fact_sheets.dump_fact_sheet_sentences_for_term(v_term, stream_$485, done_count, max_count);
						}
					    }

					    $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
					    note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
					    csome_list_var = csome_list_var.rest();
					    filename_$482 = csome_list_var.first();
					}
				    } finally {
					final SubLObject _prev_bind_0_$487 = $is_thread_performing_cleanupP$.currentBinding(thread);
					try {
					    $is_thread_performing_cleanupP$.bind(T, thread);
					    final SubLObject _values = getValuesAsVector();
					    noting_percent_progress_postamble();
					    restoreValuesFromVector(_values);
					} finally {
					    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$487, thread);
					}
				    }
				} finally {
				    $percent_progress_start_time$.rebind(_prev_bind_8, thread);
				    $within_noting_percent_progress$.rebind(_prev_bind_7, thread);
				    $last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
				    $last_percent_progress_index$.rebind(_prev_bind_5, thread);
				    $progress_sofar$.rebind(_prev_bind_4, thread);
				    $progress_total$.rebind(_prev_bind_3, thread);
				    $progress_start_time$.rebind(_prev_bind_2, thread);
				    $progress_note$.rebind(_prev_bind_0_$486, thread);
				}
			    } finally {
				$silent_progressP$.rebind(_prev_bind_0_$485, thread);
			    }
			    current_directory_var = directory_list_var.first();
			}
		    } finally {
			final SubLObject _prev_bind_0_$488 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    final SubLObject _values2 = getValuesAsVector();
			    if (stream_$484.isStream()) {
				close(stream_$484, UNPROVIDED);
			    }
			    restoreValuesFromVector(_values2);
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$488, thread);
			}
		    }
		    if (NIL != use_new_setupP) {
			final SubLObject stream_$486 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream_$486) && current_process().eql(subl_promotions.initial_process())) || (stream_$486.isStream() && (NIL != output_stream_p(stream_$486)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$486);
			    format(stream_$486, fact_sheets.$str548$Closing_log_);
			    force_output(stream_$486);
			}
			fact_sheet_logs.note_fact_sheet_log_file_closed(UNPROVIDED);
		    }
		} finally {
		    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$483, thread);
		}
	    } finally {
		final SubLObject _prev_bind_0_$489 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values3 = getValuesAsVector();
		    if (stream.isStream()) {
			close(stream, UNPROVIDED);
		    }
		    restoreValuesFromVector(_values3);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$489, thread);
		}
	    }
	} finally {
	    fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
	}
	return destination_file;
    }

    /**
    * Write all CycL sentences in fact sheets under ROOT.
    */

    /**
     * Write all CycL sentences in fact sheets for all FORTs.
     */
    @LispMethod(comment = "Write all CycL sentences in fact sheets for all FORTs.")
    public static final SubLObject dump_fact_sheet_sentences_alt(SubLObject destination_file, SubLObject max_count) {
	if (max_count == UNPROVIDED) {
	    max_count = NIL;
	}
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject stopP = NIL;
		SubLObject done_count = ZERO_INTEGER;
		SubLObject progress_message = cconcatenate($str_alt1010$Dumping_fact_sheet_sentences_to_, format_nil.format_nil_s_no_copy(destination_file));
		SubLObject already_loggingP = stringp($fact_sheet_log_file$.getDynamicValue(thread));
		SubLObject directory = NIL;
		SubLObject filename = NIL;
		SubLObject use_new_setupP = NIL;
		if (NIL == already_loggingP) {
		    thread.resetMultipleValues();
		    {
			SubLObject directory_543 = com.cyc.cycjava.cycl.fact_sheets.open_new_unique_fact_sheet_log_file();
			SubLObject filename_544 = thread.secondMultipleValue();
			thread.resetMultipleValues();
			directory = directory_543;
			filename = filename_544;
		    }
		    use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
		}
		if (NIL != use_new_setupP) {
		    format(StreamsLow.$standard_output$.getDynamicValue(thread), $str_alt69$__Logging_Fact_Sheet_generation_t, filename);
		    force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
		}
		{
		    SubLObject _prev_bind_0 = $fact_sheet_log_file$.currentBinding(thread);
		    try {
			$fact_sheet_log_file$.bind(NIL != use_new_setupP ? ((SubLObject) (filename)) : $fact_sheet_log_file$.getDynamicValue(thread), thread);
			{
			    SubLObject stream = NIL;
			    try {
				{
				    SubLObject _prev_bind_0_545 = stream_macros.$stream_requires_locking$.currentBinding(thread);
				    try {
					stream_macros.$stream_requires_locking$.bind(NIL, thread);
					stream = compatibility.open_text($fact_sheet_log_file$.getDynamicValue(thread), $APPEND, NIL);
				    } finally {
					stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_545, thread);
				    }
				}
				if (!stream.isStream()) {
				    Errors.error($str_alt137$Unable_to_open__S, $fact_sheet_log_file$.getDynamicValue(thread));
				}
				{
				    SubLObject _prev_bind_0_546 = $fact_sheet_log_stream$.currentBinding(thread);
				    try {
					$fact_sheet_log_stream$.bind(stream, thread);
					{
					    SubLObject stream_547 = NIL;
					    try {
						{
						    SubLObject _prev_bind_0_548 = stream_macros.$stream_requires_locking$.currentBinding(thread);
						    try {
							stream_macros.$stream_requires_locking$.bind(NIL, thread);
							stream_547 = compatibility.open_text(destination_file, $OUTPUT, NIL);
						    } finally {
							stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_548, thread);
						    }
						}
						if (!stream_547.isStream()) {
						    Errors.error($str_alt137$Unable_to_open__S, destination_file);
						}
						{
						    SubLObject stream_549 = stream_547;
						    SubLObject message = progress_message;
						    SubLObject total = forts.fort_count();
						    SubLObject sofar = ZERO_INTEGER;
						    {
							SubLObject _prev_bind_0_550 = $last_percent_progress_index$.currentBinding(thread);
							SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
							SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
							SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
							try {
							    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
							    $last_percent_progress_prediction$.bind(NIL, thread);
							    $within_noting_percent_progress$.bind(T, thread);
							    $percent_progress_start_time$.bind(get_universal_time(), thread);
							    noting_percent_progress_preamble(message);
							    {
								SubLObject rest = NIL;
								for (rest = forts.do_forts_tables(); !((NIL != stopP) || (NIL == rest)); rest = rest.rest()) {
								    {
									SubLObject table_var = rest.first();
									if (NIL == do_id_index_empty_p(table_var, $SKIP)) {
									    {
										SubLObject id = do_id_index_next_id(table_var, T, NIL, NIL);
										SubLObject state_var = do_id_index_next_state(table_var, T, id, NIL);
										SubLObject v_term = NIL;
										while ((NIL != id) && (NIL == stopP)) {
										    v_term = do_id_index_state_object(table_var, $SKIP, id, state_var);
										    if (NIL != do_id_index_id_and_object_validP(id, v_term, $SKIP)) {
											sofar = add(sofar, ONE_INTEGER);
											note_percent_progress(sofar, total);
											done_count = com.cyc.cycjava.cycl.fact_sheets.dump_fact_sheet_sentences_for_term(v_term, stream_549, done_count, max_count);
											if ((NIL != max_count) && done_count.numGE(max_count)) {
											    stopP = T;
											}
										    }
										    id = do_id_index_next_id(table_var, T, id, state_var);
										    state_var = do_id_index_next_state(table_var, T, id, state_var);
										}
									    }
									}
								    }
								}
							    }
							    noting_percent_progress_postamble();
							} finally {
							    $percent_progress_start_time$.rebind(_prev_bind_3, thread);
							    $within_noting_percent_progress$.rebind(_prev_bind_2, thread);
							    $last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
							    $last_percent_progress_index$.rebind(_prev_bind_0_550, thread);
							}
						    }
						}
					    } finally {
						{
						    SubLObject _prev_bind_0_551 = $is_thread_performing_cleanupP$.currentBinding(thread);
						    try {
							$is_thread_performing_cleanupP$.bind(T, thread);
							if (stream_547.isStream()) {
							    close(stream_547, UNPROVIDED);
							}
						    } finally {
							$is_thread_performing_cleanupP$.rebind(_prev_bind_0_551, thread);
						    }
						}
					    }
					    if (NIL != use_new_setupP) {
						{
						    SubLObject stream_552 = $fact_sheet_log_stream$.getDynamicValue(thread);
						    if (((T == stream_552) && (current_process() == subl_promotions.initial_process())) || (stream_552.isStream() && (NIL != output_stream_p(stream_552)))) {
							com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_552);
							format(stream_552, $str_alt685$Closing_log_);
							force_output(stream_552);
						    }
						}
						com.cyc.cycjava.cycl.fact_sheets.note_fact_sheet_log_file_closed(UNPROVIDED);
					    }
					}
				    } finally {
					$fact_sheet_log_stream$.rebind(_prev_bind_0_546, thread);
				    }
				}
			    } finally {
				{
				    SubLObject _prev_bind_0_553 = $is_thread_performing_cleanupP$.currentBinding(thread);
				    try {
					$is_thread_performing_cleanupP$.bind(T, thread);
					if (stream.isStream()) {
					    close(stream, UNPROVIDED);
					}
				    } finally {
					$is_thread_performing_cleanupP$.rebind(_prev_bind_0_553, thread);
				    }
				}
			    }
			}
		    } finally {
			$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
		    }
		}
	    }
	    return destination_file;
	}
    }

    @LispMethod(comment = "Write all CycL sentences in fact sheets for all FORTs.")
    public static SubLObject dump_fact_sheet_sentences(final SubLObject destination_file, SubLObject max_count) {
	if (max_count == UNPROVIDED) {
	    max_count = NIL;
	}
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject stopP = NIL;
	SubLObject done_count = ZERO_INTEGER;
	final SubLObject progress_message = cconcatenate(fact_sheets.$str899$Dumping_fact_sheet_sentences_to_, format_nil.format_nil_s_no_copy(destination_file));
	final SubLObject already_loggingP = stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
	SubLObject directory = NIL;
	SubLObject filename = NIL;
	SubLObject use_new_setupP = NIL;
	if (NIL == already_loggingP) {
	    thread.resetMultipleValues();
	    final SubLObject directory_$494 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
	    final SubLObject filename_$495 = thread.secondMultipleValue();
	    thread.resetMultipleValues();
	    directory = directory_$494;
	    filename = filename_$495;
	    use_new_setupP = makeBoolean((NIL != Filesys.directory_p(directory)) && filename.isString());
	}
	if (NIL != use_new_setupP) {
	    format(StreamsLow.$standard_output$.getDynamicValue(thread), fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
	    force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
	}
	final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
	try {
	    fact_sheet_logs.$fact_sheet_log_file$.bind(NIL != use_new_setupP ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
	    SubLObject stream = NIL;
	    try {
		final SubLObject _prev_bind_0_$496 = stream_macros.$stream_requires_locking$.currentBinding(thread);
		try {
		    stream_macros.$stream_requires_locking$.bind(NIL, thread);
		    stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), $APPEND);
		} finally {
		    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$496, thread);
		}
		if (!stream.isStream()) {
		    Errors.error(fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
		}
		final SubLObject _prev_bind_0_$497 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
		try {
		    fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
		    SubLObject stream_$498 = NIL;
		    try {
			final SubLObject _prev_bind_0_$498 = stream_macros.$stream_requires_locking$.currentBinding(thread);
			try {
			    stream_macros.$stream_requires_locking$.bind(NIL, thread);
			    stream_$498 = compatibility.open_text(destination_file, $OUTPUT);
			} finally {
			    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$498, thread);
			}
			if (!stream_$498.isStream()) {
			    Errors.error(fact_sheets.$str284$Unable_to_open__S, destination_file);
			}
			final SubLObject stream_$499 = stream_$498;
			final SubLObject message = progress_message;
			final SubLObject total = forts.fort_count();
			SubLObject sofar = ZERO_INTEGER;
			final SubLObject _prev_bind_0_$499 = $last_percent_progress_index$.currentBinding(thread);
			final SubLObject _prev_bind_2 = $last_percent_progress_prediction$.currentBinding(thread);
			final SubLObject _prev_bind_3 = $within_noting_percent_progress$.currentBinding(thread);
			final SubLObject _prev_bind_4 = $percent_progress_start_time$.currentBinding(thread);
			try {
			    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
			    $last_percent_progress_prediction$.bind(NIL, thread);
			    $within_noting_percent_progress$.bind(T, thread);
			    $percent_progress_start_time$.bind(get_universal_time(), thread);
			    try {
				noting_percent_progress_preamble(message);
				SubLObject rest;
				SubLObject idx;
				SubLObject table_var;
				SubLObject idx_$502;
				SubLObject vector_var;
				SubLObject backwardP_var;
				SubLObject length;
				SubLObject current;
				SubLObject datum;
				SubLObject start;
				SubLObject end;
				SubLObject delta;
				SubLObject end_var;
				SubLObject id;
				SubLObject v_term;
				SubLObject idx_$503;
				SubLObject sparse;
				SubLObject id2;
				SubLObject end_id;
				SubLObject v_default;
				SubLObject v_term2;
				for (rest = NIL, rest = forts.do_forts_tables(); (NIL == stopP) && (NIL != rest); rest = rest.rest()) {
				    table_var = idx = rest.first();
				    if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
					idx_$502 = idx;
					if (NIL == id_index_dense_objects_empty_p(idx_$502, $SKIP)) {
					    vector_var = id_index_dense_objects(idx_$502);
					    backwardP_var = NIL;
					    length = length(vector_var);
					    datum = current = (NIL != backwardP_var) ? list(subtract(length, ONE_INTEGER), MINUS_ONE_INTEGER, MINUS_ONE_INTEGER) : list(ZERO_INTEGER, length, ONE_INTEGER);
					    start = NIL;
					    end = NIL;
					    delta = NIL;
					    destructuring_bind_must_consp(current, datum, fact_sheets.$list609);
					    start = current.first();
					    current = current.rest();
					    destructuring_bind_must_consp(current, datum, fact_sheets.$list609);
					    end = current.first();
					    current = current.rest();
					    destructuring_bind_must_consp(current, datum, fact_sheets.$list609);
					    delta = current.first();
					    current = current.rest();
					    if (NIL == current) {
						if (NIL == stopP) {
						    for (end_var = end, id = NIL, id = start; (NIL == stopP) && (NIL == subl_macros.do_numbers_endtest(id, delta, end_var)); id = add(id, delta)) {
							v_term = aref(vector_var, id);
							if ((NIL == id_index_tombstone_p(v_term)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
							    if (NIL != id_index_tombstone_p(v_term)) {
								v_term = $SKIP;
							    }
							    sofar = add(sofar, ONE_INTEGER);
							    note_percent_progress(sofar, total);
							    done_count = fact_sheets.dump_fact_sheet_sentences_for_term(v_term, stream_$499, done_count, max_count);
							    if ((NIL != max_count) && done_count.numGE(max_count)) {
								stopP = T;
							    }
							}
						    }
						}
					    } else {
						cdestructuring_bind_error(datum, fact_sheets.$list609);
					    }
					}
					idx_$503 = idx;
					if ((NIL == id_index_sparse_objects_empty_p(idx_$503)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
					    sparse = id_index_sparse_objects(idx_$503);
					    id2 = id_index_sparse_id_threshold(idx_$503);
					    end_id = id_index_next_id(idx_$503);
					    v_default = (NIL != id_index_skip_tombstones_p($SKIP)) ? NIL : $SKIP;
					    while (id2.numL(end_id) && (NIL == stopP)) {
						v_term2 = gethash_without_values(id2, sparse, v_default);
						if ((NIL == id_index_skip_tombstones_p($SKIP)) || (NIL == id_index_tombstone_p(v_term2))) {
						    sofar = add(sofar, ONE_INTEGER);
						    note_percent_progress(sofar, total);
						    done_count = fact_sheets.dump_fact_sheet_sentences_for_term(v_term2, stream_$499, done_count, max_count);
						    if ((NIL != max_count) && done_count.numGE(max_count)) {
							stopP = T;
						    }
						}
						id2 = add(id2, ONE_INTEGER);
					    }
					}
				    }
				}
			    } finally {
				final SubLObject _prev_bind_0_$500 = $is_thread_performing_cleanupP$.currentBinding(thread);
				try {
				    $is_thread_performing_cleanupP$.bind(T, thread);
				    final SubLObject _values = getValuesAsVector();
				    noting_percent_progress_postamble();
				    restoreValuesFromVector(_values);
				} finally {
				    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$500, thread);
				}
			    }
			} finally {
			    $percent_progress_start_time$.rebind(_prev_bind_4, thread);
			    $within_noting_percent_progress$.rebind(_prev_bind_3, thread);
			    $last_percent_progress_prediction$.rebind(_prev_bind_2, thread);
			    $last_percent_progress_index$.rebind(_prev_bind_0_$499, thread);
			}
		    } finally {
			final SubLObject _prev_bind_0_$501 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    final SubLObject _values2 = getValuesAsVector();
			    if (stream_$498.isStream()) {
				close(stream_$498, UNPROVIDED);
			    }
			    restoreValuesFromVector(_values2);
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$501, thread);
			}
		    }
		    if (NIL != use_new_setupP) {
			final SubLObject stream_$500 = fact_sheet_logs.fact_sheet_log_stream();
			if (((T == stream_$500) && current_process().eql(subl_promotions.initial_process())) || (stream_$500.isStream() && (NIL != output_stream_p(stream_$500)))) {
			    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$500);
			    format(stream_$500, fact_sheets.$str548$Closing_log_);
			    force_output(stream_$500);
			}
			fact_sheet_logs.note_fact_sheet_log_file_closed(UNPROVIDED);
		    }
		} finally {
		    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$497, thread);
		}
	    } finally {
		final SubLObject _prev_bind_0_$502 = $is_thread_performing_cleanupP$.currentBinding(thread);
		try {
		    $is_thread_performing_cleanupP$.bind(T, thread);
		    final SubLObject _values3 = getValuesAsVector();
		    if (stream.isStream()) {
			close(stream, UNPROVIDED);
		    }
		    restoreValuesFromVector(_values3);
		} finally {
		    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$502, thread);
		}
	    }
	} finally {
	    fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
	}
	return destination_file;
    }

    /**
    * Write all CycL sentences in fact sheets for all FORTs.
    */

    public static final SubLObject dump_fact_sheet_sentences_for_term_alt(SubLObject v_term, SubLObject stream, SubLObject done_count, SubLObject max_count) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject filename = nth_value_step_2(nth_value_step_1(ONE_INTEGER), com.cyc.cycjava.cycl.fact_sheets.directory_and_filename_for_fact_sheet(v_term, $NORMAL, UNPROVIDED, UNPROVIDED, UNPROVIDED));
		SubLObject cached_data = com.cyc.cycjava.cycl.fact_sheets.precached_fact_sheet_data_from_file(filename, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		SubLObject data = cached_data.first();
		SubLObject stopP = NIL;
		if (NIL != cached_data) {
		    {
			SubLObject stream_554 = $fact_sheet_log_stream$.getDynamicValue(thread);
			if (((T == stream_554) && (current_process() == subl_promotions.initial_process())) || (stream_554.isStream() && (NIL != output_stream_p(stream_554)))) {
			    com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_554);
			    format(stream_554, $str_alt1011$Data_for__S_has__D_categories_, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_from_filename(filename), length(data));
			    force_output(stream_554);
			}
		    }
		    {
			SubLObject rest = NIL;
			for (rest = data; !((NIL != stopP) || (NIL == rest)); rest = rest.rest()) {
			    {
				SubLObject cons = rest.first();
				SubLObject datum = cons;
				SubLObject current = datum;
				SubLObject category = NIL;
				SubLObject category_data = NIL;
				destructuring_bind_must_consp(current, datum, $list_alt1012);
				category = current.first();
				current = current.rest();
				category_data = current;
				{
				    SubLObject stream_555 = $fact_sheet_log_stream$.getDynamicValue(thread);
				    if (((T == stream_555) && (current_process() == subl_promotions.initial_process())) || (stream_555.isStream() && (NIL != output_stream_p(stream_555)))) {
					com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_555);
					format(stream_555, $str_alt1013$Doing__S___D_paragraphs___D_sente, new SubLObject[] { category, length(category_data), apply(symbol_function($sym1014$_), Mapping.mapcar(LENGTH, category_data)) });
					force_output(stream_555);
				    }
				}
				{
				    SubLObject cdolist_list_var = category_data;
				    SubLObject paragraph_data = NIL;
				    for (paragraph_data = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), paragraph_data = cdolist_list_var.first()) {
					{
					    SubLObject stream_556 = $fact_sheet_log_stream$.getDynamicValue(thread);
					    if (((T == stream_556) && (current_process() == subl_promotions.initial_process())) || (stream_556.isStream() && (NIL != output_stream_p(stream_556)))) {
						com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$NOTE, stream_556);
						format(stream_556, $str_alt1016$This_paragraph_has__D_sentences_, length(paragraph_data));
						force_output(stream_556);
					    }
					}
					{
					    SubLObject rest_557 = NIL;
					    for (rest_557 = paragraph_data; !((NIL != stopP) || (NIL == rest_557)); rest_557 = rest_557.rest()) {
						{
						    SubLObject cons_558 = rest_557.first();
						    SubLObject datum_559 = cons_558;
						    SubLObject current_560 = datum_559;
						    SubLObject cycl_sentence = NIL;
						    SubLObject value = NIL;
						    destructuring_bind_must_consp(current_560, datum_559, $list_alt1017);
						    cycl_sentence = current_560.first();
						    current_560 = current_560.rest();
						    value = current_560;
						    if (NIL != cycl_grammar.cycl_sentence_p(cycl_sentence)) {
							{
							    SubLObject string = remove(CHAR_newline, write_to_string(cycl_utilities.hl_to_el(cycl_sentence), EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
							    write_line(string, stream, UNPROVIDED, UNPROVIDED);
							    force_output(stream);
							}
							done_count = add(done_count, ONE_INTEGER);
							if ((NIL != max_count) && done_count.numGE(max_count)) {
							    stopP = T;
							}
						    } else {
							{
							    SubLObject stream_561 = $fact_sheet_log_stream$.getDynamicValue(thread);
							    if (((T == stream_561) && (current_process() == subl_promotions.initial_process())) || (stream_561.isStream() && (NIL != output_stream_p(stream_561)))) {
								com.cyc.cycjava.cycl.fact_sheets.print_fact_sheet_log_header($$$WARN, stream_561);
								format(stream_561, $str_alt1018$Non_sentence__S_in__S_for__S, new SubLObject[] { cycl_sentence, paragraph_data, v_term });
								force_output(stream_561);
							    }
							}
						    }
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	    return done_count;
	}
    }

    public static SubLObject dump_fact_sheet_sentences_for_term(final SubLObject v_term, final SubLObject stream, SubLObject done_count, final SubLObject max_count) {
	final SubLObject filename = nth_value_step_2(nth_value_step_1(ONE_INTEGER), fact_sheets.directory_and_filename_for_fact_sheet(v_term, $NORMAL, UNPROVIDED, UNPROVIDED, UNPROVIDED));
	final SubLObject cached_data = fact_sheets.precached_fact_sheet_data_from_file(filename, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	final SubLObject data = cached_data.first();
	SubLObject stopP = NIL;
	if (NIL != cached_data) {
	    final SubLObject stream_$508 = fact_sheet_logs.fact_sheet_log_stream();
	    if (((T == stream_$508) && current_process().eql(subl_promotions.initial_process())) || (stream_$508.isStream() && (NIL != output_stream_p(stream_$508)))) {
		fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$508);
		format(stream_$508, fact_sheets.$str900$Data_for__S_has__D_categories_, fact_sheets.fact_sheet_data_from_filename(filename), length(data));
		force_output(stream_$508);
	    }
	    SubLObject rest;
	    SubLObject cons;
	    SubLObject current;
	    SubLObject datum;
	    SubLObject category;
	    SubLObject category_data;
	    SubLObject stream_$509;
	    SubLObject cdolist_list_var;
	    SubLObject paragraph_data;
	    SubLObject stream_$510;
	    SubLObject rest_$511;
	    SubLObject cons_$512;
	    SubLObject current_$514;
	    SubLObject datum_$513;
	    SubLObject cycl_sentence;
	    SubLObject value;
	    SubLObject string;
	    SubLObject stream_$511;
	    for (rest = NIL, rest = data; (NIL == stopP) && (NIL != rest); rest = rest.rest()) {
		cons = rest.first();
		datum = current = cons;
		category = NIL;
		category_data = NIL;
		destructuring_bind_must_consp(current, datum, fact_sheets.$list901);
		category = current.first();
		current = category_data = current.rest();
		stream_$509 = fact_sheet_logs.fact_sheet_log_stream();
		if (((T == stream_$509) && current_process().eql(subl_promotions.initial_process())) || (stream_$509.isStream() && (NIL != output_stream_p(stream_$509)))) {
		    fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$509);
		    format(stream_$509, fact_sheets.$str902$Doing__S___D_paragraphs___D_sente, new SubLObject[] { category, length(category_data), apply(symbol_function(fact_sheets.$sym903$_), Mapping.mapcar(LENGTH, category_data)) });
		    force_output(stream_$509);
		}
		cdolist_list_var = category_data;
		paragraph_data = NIL;
		paragraph_data = cdolist_list_var.first();
		while (NIL != cdolist_list_var) {
		    stream_$510 = fact_sheet_logs.fact_sheet_log_stream();
		    if (((T == stream_$510) && current_process().eql(subl_promotions.initial_process())) || (stream_$510.isStream() && (NIL != output_stream_p(stream_$510)))) {
			fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$NOTE, stream_$510);
			format(stream_$510, fact_sheets.$str905$This_paragraph_has__D_sentences_, length(paragraph_data));
			force_output(stream_$510);
		    }
		    for (rest_$511 = NIL, rest_$511 = paragraph_data; (NIL == stopP) && (NIL != rest_$511); rest_$511 = rest_$511.rest()) {
			cons_$512 = rest_$511.first();
			datum_$513 = current_$514 = cons_$512;
			cycl_sentence = NIL;
			value = NIL;
			destructuring_bind_must_consp(current_$514, datum_$513, fact_sheets.$list906);
			cycl_sentence = current_$514.first();
			current_$514 = value = current_$514.rest();
			if (NIL != cycl_grammar.cycl_sentence_p(cycl_sentence)) {
			    string = remove(CHAR_newline, write_to_string(cycl_utilities.hl_to_el(cycl_sentence), EMPTY_SUBL_OBJECT_ARRAY), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
			    write_line(string, stream, UNPROVIDED, UNPROVIDED);
			    force_output(stream);
			    done_count = add(done_count, ONE_INTEGER);
			    if ((NIL != max_count) && done_count.numGE(max_count)) {
				stopP = T;
			    }
			} else {
			    stream_$511 = fact_sheet_logs.fact_sheet_log_stream();
			    if (((T == stream_$511) && current_process().eql(subl_promotions.initial_process())) || (stream_$511.isStream() && (NIL != output_stream_p(stream_$511)))) {
				fact_sheet_logs.print_fact_sheet_log_header(fact_sheets.$$$WARN, stream_$511);
				format(stream_$511, fact_sheets.$str907$Non_sentence__S_in__S_for__S, new SubLObject[] { cycl_sentence, paragraph_data, v_term });
				force_output(stream_$511);
			    }
			}
		    }
		    cdolist_list_var = cdolist_list_var.rest();
		    paragraph_data = cdolist_list_var.first();
		}
	    }
	}
	return done_count;
    }

    public static final SubLObject fact_sheets_term_from_string_containsP_alt(SubLObject string, SubLObject required_elements) {
	{
	    SubLObject word_cycl_pairs = com.cyc.cycjava.cycl.fact_sheets.get_word_denots_for_fact_sheets(string);
	    SubLObject failP = NIL;
	    if (NIL == failP) {
		{
		    SubLObject csome_list_var = required_elements;
		    SubLObject element = NIL;
		    for (element = csome_list_var.first(); !((NIL != failP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest(), element = csome_list_var.first()) {
			if (NIL == com.cyc.cycjava.cycl.fact_sheets.cycls_are_membersP(element, word_cycl_pairs, EQUALP)) {
			    Errors.warn($str_alt1039$missing_from_parse_result___S__, element);
			    failP = T;
			}
		    }
		}
	    }
	    return makeBoolean(NIL == failP);
	}
    }

    public static SubLObject fact_sheets_term_from_string_containsP(final SubLObject string, final SubLObject required_elements) {
	final SubLObject word_cycl_pairs = fact_sheets.get_word_denots_for_fact_sheets(string);
	SubLObject failP = NIL;
	if (NIL == failP) {
	    SubLObject csome_list_var = required_elements;
	    SubLObject element = NIL;
	    element = csome_list_var.first();
	    while ((NIL == failP) && (NIL != csome_list_var)) {
		if (NIL == fact_sheets.cycls_are_membersP(element, word_cycl_pairs, EQUALP)) {
		    Errors.warn(fact_sheets.$str908$missing_from_parse_result___S__, element);
		    failP = T;
		}
		csome_list_var = csome_list_var.rest();
		element = csome_list_var.first();
	    }
	}
	return makeBoolean(NIL == failP);
    }

    public static final SubLObject cycls_are_membersP_alt(SubLObject elt, SubLObject list, SubLObject equality) {
	{
	    SubLObject datum = elt;
	    SubLObject current = datum;
	    SubLObject desired_string = NIL;
	    SubLObject desired_cycl = NIL;
	    destructuring_bind_must_consp(current, datum, $list_alt1040);
	    desired_string = current.first();
	    current = current.rest();
	    destructuring_bind_must_consp(current, datum, $list_alt1040);
	    desired_cycl = current.first();
	    current = current.rest();
	    if (NIL == current) {
		{
		    SubLObject matching_elt = find(desired_string, cycl_utilities.hl_to_el(list), equality, FIRST, UNPROVIDED, UNPROVIDED);
		    if (NIL != list_utilities.lengthGE(intersection(second(matching_elt), desired_cycl, EQUAL, UNPROVIDED), length(desired_cycl), UNPROVIDED)) {
			return T;
		    }
		}
	    } else {
		cdestructuring_bind_error(datum, $list_alt1040);
	    }
	}
	return NIL;
    }

    public static SubLObject cycls_are_membersP(final SubLObject elt, final SubLObject list, final SubLObject equality) {
	SubLObject desired_string = NIL;
	SubLObject desired_cycl = NIL;
	destructuring_bind_must_consp(elt, elt, fact_sheets.$list909);
	desired_string = elt.first();
	SubLObject current = elt.rest();
	destructuring_bind_must_consp(current, elt, fact_sheets.$list909);
	desired_cycl = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject matching_elt = find(desired_string, cycl_utilities.hl_to_el(list), equality, FIRST, UNPROVIDED, UNPROVIDED);
	    if (NIL != list_utilities.lengthGE(intersection(second(matching_elt), desired_cycl, EQUAL, UNPROVIDED), length(desired_cycl), UNPROVIDED)) {
		return T;
	    }
	} else {
	    cdestructuring_bind_error(elt, fact_sheets.$list909);
	}
	return NIL;
    }

    public static final SubLObject declare_fact_sheets_file_alt() {
	declareMacro("allowing_fact_sheet_evalations", "ALLOWING-FACT-SHEET-EVALATIONS");
	declareMacro("disallowing_fact_sheet_evalations", "DISALLOWING-FACT-SHEET-EVALATIONS");
	declareFunction("allow_fact_sheet_evaluationsP", "ALLOW-FACT-SHEET-EVALUATIONS?", 0, 0, false);
	declareFunction("allow_fact_sheet_evaluations", "ALLOW-FACT-SHEET-EVALUATIONS", 0, 1, false);
	declareFunction("indexical_fact_sheet_topic", "INDEXICAL-FACT-SHEET-TOPIC", 0, 0, false);
	declareFunction("indexical_fact_sheet_query_mt", "INDEXICAL-FACT-SHEET-QUERY-MT", 0, 0, false);
	declareFunction("indexical_fact_sheet_table_type", "INDEXICAL-FACT-SHEET-TABLE-TYPE", 0, 0, false);
	declareFunction("indexical_fact_sheet_sentence", "INDEXICAL-FACT-SHEET-SENTENCE", 0, 0, false);
	declareMacro("with_new_fact_sheet_problem_store", "WITH-NEW-FACT-SHEET-PROBLEM-STORE");
	declareMacro("within_fact_sheet_paraphrase", "WITHIN-FACT-SHEET-PARAPHRASE");
	declareFunction("within_fact_sheet_paraphraseP", "WITHIN-FACT-SHEET-PARAPHRASE?", 0, 0, false);
	declareMacro("with_quiet_fact_sheet_logging", "WITH-QUIET-FACT-SHEET-LOGGING");
	declareMacro("log_fact_sheet_message", "LOG-FACT-SHEET-MESSAGE");
	declareFunction("print_fact_sheet_log_header", "PRINT-FACT-SHEET-LOG-HEADER", 2, 0, false);
	declareMacro("log_fact_sheet_warning", "LOG-FACT-SHEET-WARNING");
	declareMacro("log_fact_sheet_note", "LOG-FACT-SHEET-NOTE");
	declareMacro("with_fact_sheet_log_file", "WITH-FACT-SHEET-LOG-FILE");
	declareMacro("with_fact_sheet_logging", "WITH-FACT-SHEET-LOGGING");
	declareFunction("note_fact_sheet_log_file_closed", "NOTE-FACT-SHEET-LOG-FILE-CLOSED", 0, 1, false);
	declareFunction("fact_sheet_log_file_closed_p", "FACT-SHEET-LOG-FILE-CLOSED-P", 1, 0, false);
	declareMacro("with_fact_sheet_logging_and_hourly_reporting", "WITH-FACT-SHEET-LOGGING-AND-HOURLY-REPORTING");
	declareFunction("fact_sheet_hourly_reporting_onP", "FACT-SHEET-HOURLY-REPORTING-ON?", 0, 0, false);
	declareFunction("reset_hourly_report_time", "RESET-HOURLY-REPORT-TIME", 0, 1, false);
	declareFunction("clear_hourly_fact_sheet_stats", "CLEAR-HOURLY-FACT-SHEET-STATS", 0, 0, false);
	declareFunction("add_fact_sheet_info_to_hourly_stats", "ADD-FACT-SHEET-INFO-TO-HOURLY-STATS", 1, 0, false);
	declareFunction("get_hourly_fact_sheet_update_count", "GET-HOURLY-FACT-SHEET-UPDATE-COUNT", 0, 0, false);
	declareFunction("clear_hourly_fact_sheet_update_count", "CLEAR-HOURLY-FACT-SHEET-UPDATE-COUNT", 0, 0, false);
	declareFunction("note_fact_sheet_query_timeout_in_hourly_stats", "NOTE-FACT-SHEET-QUERY-TIMEOUT-IN-HOURLY-STATS", 0, 0, false);
	declareFunction("get_hourly_fact_sheet_query_timeout_count", "GET-HOURLY-FACT-SHEET-QUERY-TIMEOUT-COUNT", 0, 0, false);
	declareFunction("clear_hourly_fact_sheet_query_timeout_count", "CLEAR-HOURLY-FACT-SHEET-QUERY-TIMEOUT-COUNT", 0, 0, false);
	declareFunction("maybe_log_fact_sheet_hourly_report", "MAYBE-LOG-FACT-SHEET-HOURLY-REPORT", 0, 0, false);
	declareFunction("log_fact_sheet_hourly_report", "LOG-FACT-SHEET-HOURLY-REPORT", 0, 0, false);
	declareFunction("fact_sheet_log_directory_generated_count", "FACT-SHEET-LOG-DIRECTORY-GENERATED-COUNT", 1, 0, false);
	declareFunction("fact_sheet_log_file_generated_count", "FACT-SHEET-LOG-FILE-GENERATED-COUNT", 1, 1, false);
	declareFunction("fact_sheet_log_directory_average_total_time", "FACT-SHEET-LOG-DIRECTORY-AVERAGE-TOTAL-TIME", 1, 0, false);
	declareFunction("fact_sheet_log_file_count_and_total_time", "FACT-SHEET-LOG-FILE-COUNT-AND-TOTAL-TIME", 1, 1, false);
	declareFunction("plot_fact_sheet_log_directory_generated_count_by_date", "PLOT-FACT-SHEET-LOG-DIRECTORY-GENERATED-COUNT-BY-DATE", 1, 2, false);
	declareFunction("fact_sheet_log_directory_generated_count_by_date", "FACT-SHEET-LOG-DIRECTORY-GENERATED-COUNT-BY-DATE", 1, 1, false);
	declareFunction("fact_sheet_log_file_generated_count_by_date", "FACT-SHEET-LOG-FILE-GENERATED-COUNT-BY-DATE", 1, 2, false);
	declareFunction("fact_sheet_log_directory_average_total_time_by_date", "FACT-SHEET-LOG-DIRECTORY-AVERAGE-TOTAL-TIME-BY-DATE", 1, 1, false);
	declareFunction("fact_sheet_log_file_average_total_time_by_date", "FACT-SHEET-LOG-FILE-AVERAGE-TOTAL-TIME-BY-DATE", 1, 2, false);
	declareFunction("fact_sheet_log_directory_average_category_count_by_date", "FACT-SHEET-LOG-DIRECTORY-AVERAGE-CATEGORY-COUNT-BY-DATE", 1, 1, false);
	declareFunction("fact_sheet_log_file_average_category_count_by_date", "FACT-SHEET-LOG-FILE-AVERAGE-CATEGORY-COUNT-BY-DATE", 1, 2, false);
	declareFunction("fact_sheet_log_directory_average_sentence_count_by_date", "FACT-SHEET-LOG-DIRECTORY-AVERAGE-SENTENCE-COUNT-BY-DATE", 1, 1, false);
	declareFunction("fact_sheet_log_file_average_sentence_count_by_date", "FACT-SHEET-LOG-FILE-AVERAGE-SENTENCE-COUNT-BY-DATE", 1, 2, false);
	declareFunction("fact_sheet_log_directory_average_uncategorized_sentence_count_by_date", "FACT-SHEET-LOG-DIRECTORY-AVERAGE-UNCATEGORIZED-SENTENCE-COUNT-BY-DATE", 1, 1, false);
	declareFunction("fact_sheet_log_file_average_uncategorized_sentence_count_by_date", "FACT-SHEET-LOG-FILE-AVERAGE-UNCATEGORIZED-SENTENCE-COUNT-BY-DATE", 1, 2, false);
	declareFunction("plot_fact_sheet_log_directory_query_failure_rate_by_date", "PLOT-FACT-SHEET-LOG-DIRECTORY-QUERY-FAILURE-RATE-BY-DATE", 1, 3, false);
	declareFunction("fact_sheet_log_directory_query_failure_rate_by_date", "FACT-SHEET-LOG-DIRECTORY-QUERY-FAILURE-RATE-BY-DATE", 1, 1, false);
	declareFunction("fact_sheet_log_file_query_failure_rate_by_date", "FACT-SHEET-LOG-FILE-QUERY-FAILURE-RATE-BY-DATE", 1, 2, false);
	declareFunction("fact_sheet_log_directory_generated_count_for_date", "FACT-SHEET-LOG-DIRECTORY-GENERATED-COUNT-FOR-DATE", 1, 1, false);
	declareFunction("fact_sheet_log_file_generated_count_for_date", "FACT-SHEET-LOG-FILE-GENERATED-COUNT-FOR-DATE", 1, 2, false);
	declareFunction("fact_sheet_log_file_generated_count_old", "FACT-SHEET-LOG-FILE-GENERATED-COUNT-OLD", 1, 0, false);
	declareFunction("fact_sheet_log_file_generated_count_for_date_old", "FACT-SHEET-LOG-FILE-GENERATED-COUNT-FOR-DATE-OLD", 1, 1, false);
	declareFunction("get_fact_sheet_log_file_data", "GET-FACT-SHEET-LOG-FILE-DATA", 1, 0, false);
	declareFunction("get_fact_sheet_log_directory_data", "GET-FACT-SHEET-LOG-DIRECTORY-DATA", 1, 1, false);
	declareFunction("clear_get_fact_sheet_log_directory_data_cached", "CLEAR-GET-FACT-SHEET-LOG-DIRECTORY-DATA-CACHED", 0, 0, false);
	declareFunction("remove_get_fact_sheet_log_directory_data_cached", "REMOVE-GET-FACT-SHEET-LOG-DIRECTORY-DATA-CACHED", 2, 0, false);
	declareFunction("get_fact_sheet_log_directory_data_cached_internal", "GET-FACT-SHEET-LOG-DIRECTORY-DATA-CACHED-INTERNAL", 2, 0, false);
	declareFunction("get_fact_sheet_log_directory_data_cached", "GET-FACT-SHEET-LOG-DIRECTORY-DATA-CACHED", 2, 0, false);
	declareFunction("find_or_create_fact_sheet_log_directory_data_file", "FIND-OR-CREATE-FACT-SHEET-LOG-DIRECTORY-DATA-FILE", 1, 1, false);
	declareFunction("ensure_fact_sheet_log_directories_are_up_to_date", "ENSURE-FACT-SHEET-LOG-DIRECTORIES-ARE-UP-TO-DATE", 0, 0, false);
	declareFunction("parse_and_save_fact_sheet_log_directory_data", "PARSE-AND-SAVE-FACT-SHEET-LOG-DIRECTORY-DATA", 1, 0, false);
	declareFunction("parse_and_save_fact_sheet_log_file_data", "PARSE-AND-SAVE-FACT-SHEET-LOG-FILE-DATA", 1, 2, false);
	declareFunction("fact_sheet_log_file_parsed_data_filename", "FACT-SHEET-LOG-FILE-PARSED-DATA-FILENAME", 1, 0, false);
	declareFunction("fact_sheet_log_directory_parsed_data_filename", "FACT-SHEET-LOG-DIRECTORY-PARSED-DATA-FILENAME", 1, 0, false);
	declareFunction("fact_sheet_log_file_parse_data", "FACT-SHEET-LOG-FILE-PARSE-DATA", 1, 0, false);
	declareFunction("fact_sheet_log_line_starts_withP", "FACT-SHEET-LOG-LINE-STARTS-WITH?", 3, 0, false);
	declareFunction("fact_sheet_log_file_parse_start_line_data", "FACT-SHEET-LOG-FILE-PARSE-START-LINE-DATA", 1, 0, false);
	declareFunction("fact_sheet_log_file_parse_stale_start_line_data", "FACT-SHEET-LOG-FILE-PARSE-STALE-START-LINE-DATA", 2, 0, false);
	declareFunction("fact_sheet_log_file_parse_dequeue_line_data", "FACT-SHEET-LOG-FILE-PARSE-DEQUEUE-LINE-DATA", 2, 0, false);
	declareFunction("fact_sheet_log_file_parse_new_query_timeout_line_data", "FACT-SHEET-LOG-FILE-PARSE-NEW-QUERY-TIMEOUT-LINE-DATA", 1, 0, false);
	declareFunction("update_current_datum_for_misc_sentence_stats", "UPDATE-CURRENT-DATUM-FOR-MISC-SENTENCE-STATS", 3, 0, false);
	declareFunction("update_current_datum_for_pph_stats", "UPDATE-CURRENT-DATUM-FOR-PPH-STATS", 3, 0, false);
	declareFunction("update_current_datum_for_pph_failure_stats", "UPDATE-CURRENT-DATUM-FOR-PPH-FAILURE-STATS", 3, 0, false);
	declareFunction("update_current_datum_for_info_gather_stats", "UPDATE-CURRENT-DATUM-FOR-INFO-GATHER-STATS", 3, 0, false);
	declareFunction("finalize_current_datum", "FINALIZE-CURRENT-DATUM", 3, 0, false);
	declareFunction("compute_total_time_from_start_and_end", "COMPUTE-TOTAL-TIME-FROM-START-AND-END", 1, 0, false);
	declareFunction("term_from_fact_sheet_log_finish_line", "TERM-FROM-FACT-SHEET-LOG-FINISH-LINE", 2, 0, false);
	declareFunction("add_total_time_to_datum", "ADD-TOTAL-TIME-TO-DATUM", 1, 1, false);
	declareFunction("add_end_date_and_time_to_datum", "ADD-END-DATE-AND-TIME-TO-DATUM", 2, 0, false);
	declareFunction("fact_sheet_term_from_string", "FACT-SHEET-TERM-FROM-STRING", 1, 3, false);
	declareFunction("nart_end_from_string", "NART-END-FROM-STRING", 2, 0, false);
	declareFunction("open_new_unique_fact_sheet_log_file", "OPEN-NEW-UNIQUE-FACT-SHEET-LOG-FILE", 0, 0, false);
	declareFunction("fact_sheet_log_directory_path_for_kb", "FACT-SHEET-LOG-DIRECTORY-PATH-FOR-KB", 0, 1, false);
	declareFunction("uniquify_fact_sheet_log_filename", "UNIQUIFY-FACT-SHEET-LOG-FILENAME", 3, 0, false);
	declareFunction("physical_directory_from_path", "PHYSICAL-DIRECTORY-FROM-PATH", 1, 0, false);
	declareMacro("with_fact_sheet_focal_term", "WITH-FACT-SHEET-FOCAL-TERM");
	declareFunction("chmod_safe_to_useP", "CHMOD-SAFE-TO-USE?", 0, 0, false);
	declareMacro("writing_fact_sheet_file", "WRITING-FACT-SHEET-FILE");
	declareMacro("writing_fact_sheet_data_file", "WRITING-FACT-SHEET-DATA-FILE");
	declareMacro("reading_fact_sheet_data_file", "READING-FACT-SHEET-DATA-FILE");
	declareFunction("clear_fact_sheet_default_language_mt", "CLEAR-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	declareFunction("remove_fact_sheet_default_language_mt", "REMOVE-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	declareFunction("fact_sheet_default_language_mt_internal", "FACT-SHEET-DEFAULT-LANGUAGE-MT-INTERNAL", 0, 0, false);
	declareFunction("fact_sheet_default_language_mt", "FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	declareFunction("clear_build_fact_sheet_default_language_mt", "CLEAR-BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	declareFunction("remove_build_fact_sheet_default_language_mt", "REMOVE-BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	declareFunction("build_fact_sheet_default_language_mt_internal", "BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT-INTERNAL", 0, 0, false);
	declareFunction("build_fact_sheet_default_language_mt", "BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	declareFunction("fact_sheet_default_language_mt_for_term", "FACT-SHEET-DEFAULT-LANGUAGE-MT-FOR-TERM", 1, 0, false);
	declareFunction("clear_fact_sheet_default_domain_mt", "CLEAR-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	declareFunction("remove_fact_sheet_default_domain_mt", "REMOVE-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	declareFunction("fact_sheet_default_domain_mt_internal", "FACT-SHEET-DEFAULT-DOMAIN-MT-INTERNAL", 0, 0, false);
	declareFunction("fact_sheet_default_domain_mt", "FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	declareFunction("clear_build_fact_sheet_default_domain_mt", "CLEAR-BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	declareFunction("remove_build_fact_sheet_default_domain_mt", "REMOVE-BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	declareFunction("build_fact_sheet_default_domain_mt_internal", "BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT-INTERNAL", 0, 0, false);
	declareFunction("build_fact_sheet_default_domain_mt", "BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	declareFunction("fact_sheet_default_domain_mt_for_term", "FACT-SHEET-DEFAULT-DOMAIN-MT-FOR-TERM", 1, 0, false);
	declareFunction("get_linkless_fact_sheet_for_term_in_html", "GET-LINKLESS-FACT-SHEET-FOR-TERM-IN-HTML", 1, 4, false);
	declareFunction("convert_fact_sheet_sentence_links_to_spans", "CONVERT-FACT-SHEET-SENTENCE-LINKS-TO-SPANS", 1, 0, false);
	declareFunction("convert_fact_sheet_link_to_span", "CONVERT-FACT-SHEET-LINK-TO-SPAN", 4, 0, false);
	declareFunction("get_updated_fact_sheet_for_term_and_sentence_in_html", "GET-UPDATED-FACT-SHEET-FOR-TERM-AND-SENTENCE-IN-HTML", 2, 4, false);
	declareFunction("get_updated_fact_sheet_for_term_and_sentence_in_markup_internal", "GET-UPDATED-FACT-SHEET-FOR-TERM-AND-SENTENCE-IN-MARKUP-INTERNAL", 6, 0, false);
	declareFunction("get_fact_sheet_for_term_in_xml_with_only_kb_specified_content", "GET-FACT-SHEET-FOR-TERM-IN-XML-WITH-ONLY-KB-SPECIFIED-CONTENT", 1, 4, false);
	declareFunction("get_fact_sheet_for_term_in_html", "GET-FACT-SHEET-FOR-TERM-IN-HTML", 1, 4, false);
	declareFunction("get_fact_sheet_for_term_in_markup_language", "GET-FACT-SHEET-FOR-TERM-IN-MARKUP-LANGUAGE", 1, 4, false);
	declareFunction("get_fact_sheet_for_term_in_markup_internal", "GET-FACT-SHEET-FOR-TERM-IN-MARKUP-INTERNAL", 5, 1, false);
	declareFunction("fact_sheet_filter_footnotes_for_sources", "FACT-SHEET-FILTER-FOOTNOTES-FOR-SOURCES", 2, 0, false);
	declareMacro("html_fact_sheet_optional_section", "HTML-FACT-SHEET-OPTIONAL-SECTION");
	declareFunction("footnote_text", "FOOTNOTE-TEXT", 1, 0, false);
	declareFunction("footnote_source", "FOOTNOTE-SOURCE", 1, 0, false);
	declareFunction("generate_fact_sheet_data", "GENERATE-FACT-SHEET-DATA", 4, 0, false);
	declareFunction("fact_sheet_stats_p", "FACT-SHEET-STATS-P", 1, 0, false);
	declareFunction("possibly_fact_sheet_domain_mtP", "POSSIBLY-FACT-SHEET-DOMAIN-MT?", 1, 0, false);
	declareFunction("new_fact_sheet_stats", "NEW-FACT-SHEET-STATS", 7, 0, false);
	declareFunction("fact_sheet_texts_from_data", "FACT-SHEET-TEXTS-FROM-DATA", 5, 0, false);
	declareFunction("fact_sheet_markup_tables_from_data", "FACT-SHEET-MARKUP-TABLES-FROM-DATA", 6, 0, false);
	declareFunction("fact_sheet_xml_table_from_data", "FACT-SHEET-XML-TABLE-FROM-DATA", 7, 0, false);
	declareFunction("fact_sheet_html_table_from_data", "FACT-SHEET-HTML-TABLE-FROM-DATA", 7, 0, false);
	declareFunction("sort_fact_sheet_table_data", "SORT-FACT-SHEET-TABLE-DATA", 1, 0, false);
	declareFunction("fact_sheet_table_sentence_data_predicate", "FACT-SHEET-TABLE-SENTENCE-DATA-PREDICATE", 1, 0, false);
	declareFunction("find_assertion_for_fact_sheet_sentence", "FIND-ASSERTION-FOR-FACT-SHEET-SENTENCE", 2, 0, false);
	declareFunction("fact_sheet_table_title", "FACT-SHEET-TABLE-TITLE", 2, 0, false);
	declareFunction("output_fact_sheet_table_title_row", "OUTPUT-FACT-SHEET-TABLE-TITLE-ROW", 2, 0, false);
	declareFunction("output_fact_sheet_table_sentence_link", "OUTPUT-FACT-SHEET-TABLE-SENTENCE-LINK", 1, 0, false);
	declareFunction("fact_sheet_table_header_values", "FACT-SHEET-TABLE-HEADER-VALUES", 2, 0, false);
	declareFunction("fact_sheet_table_data_for_value", "FACT-SHEET-TABLE-DATA-FOR-VALUE", 6, 0, false);
	declareFunction("fact_sheet_table_specs", "FACT-SHEET-TABLE-SPECS", 0, 2, false);
	declareFunction("section_table_specs", "SECTION-TABLE-SPECS", 2, 0, false);
	declareFunction("table_types_from_section_table_specs", "TABLE-TYPES-FROM-SECTION-TABLE-SPECS", 1, 0, false);
	declareFunction("table_data_for_sentence", "TABLE-DATA-FOR-SENTENCE", 2, 3, false);
	declareFunction("dereference_fact_sheet_indexicals", "DEREFERENCE-FACT-SHEET-INDEXICALS", 1, 0, false);
	declareFunction("fact_sheet_anytime_mt", "FACT-SHEET-ANYTIME-MT", 1, 0, false);
	declareFunction("possibly_reserve_sentence_for_tables", "POSSIBLY-RESERVE-SENTENCE-FOR-TABLES", 3, 3, false);
	declareFunction("fact_sheet_sentence_conjuncts", "FACT-SHEET-SENTENCE-CONJUNCTS", 1, 0, false);
	declareFunction("valid_sentence_data_for_table_typeP", "VALID-SENTENCE-DATA-FOR-TABLE-TYPE?", 2, 0, false);
	declareFunction("fact_sheet_table_type_width_internal", "FACT-SHEET-TABLE-TYPE-WIDTH-INTERNAL", 1, 0, false);
	declareFunction("fact_sheet_table_type_width", "FACT-SHEET-TABLE-TYPE-WIDTH", 1, 0, false);
	declareFunction("fact_sheet_sort_paragraphs_at_retrieval_time", "FACT-SHEET-SORT-PARAGRAPHS-AT-RETRIEVAL-TIME", 2, 0, false);
	declareFunction("possibly_convert_summary_sentence_to_cycl", "POSSIBLY-CONVERT-SUMMARY-SENTENCE-TO-CYCL", 1, 0, false);
	declareFunction("new_summary_sentence", "NEW-SUMMARY-SENTENCE", 2, 0, false);
	declareFunction("summary_sentence_cycl", "SUMMARY-SENTENCE-CYCL", 1, 0, false);
	declareFunction("summary_sentence_assertions", "SUMMARY-SENTENCE-ASSERTIONS", 1, 0, false);
	declareFunction("summary_sentence_sources", "SUMMARY-SENTENCE-SOURCES", 1, 0, false);
	declareFunction("summary_sentence_plistP", "SUMMARY-SENTENCE-PLIST?", 1, 0, false);
	declareFunction("construct_fact_sheet_paragraph", "CONSTRUCT-FACT-SHEET-PARAGRAPH", 6, 0, false);
	declareFunction("fact_sheet_summary_sentence_passes_data_gathering_time_filterP", "FACT-SHEET-SUMMARY-SENTENCE-PASSES-DATA-GATHERING-TIME-FILTER?", 3, 0, false);
	declareFunction("fact_sheet_summary_sentence_passes_retrieval_time_filterP", "FACT-SHEET-SUMMARY-SENTENCE-PASSES-RETRIEVAL-TIME-FILTER?", 2, 3, false);
	declareFunction("fact_sheet_blacklisted_sources", "FACT-SHEET-BLACKLISTED-SOURCES", 2, 0, false);
	declareFunction("any_term_in_assertion_list_passes_test", "ANY-TERM-IN-ASSERTION-LIST-PASSES-TEST", 3, 0, false);
	declareFunction("fact_sheet_title", "FACT-SHEET-TITLE", 1, 0, false);
	declareFunction("generate_fact_sheet_markup", "GENERATE-FACT-SHEET-MARKUP", 7, 0, false);
	declareFunction("generate_fact_sheet_xml", "GENERATE-FACT-SHEET-XML", 7, 0, false);
	declareFunction("generate_fact_sheet_html", "GENERATE-FACT-SHEET-HTML", 7, 0, false);
	declareFunction("emit_fact_sheet_opencyc_uri", "EMIT-FACT-SHEET-OPENCYC-URI", 3, 0, false);
	declareFunction("get_fact_sheet_for_term_id_in_html", "GET-FACT-SHEET-FOR-TERM-ID-IN-HTML", 1, 4, false);
	declareFunction("clear_all_fact_sheet_caches", "CLEAR-ALL-FACT-SHEET-CACHES", 0, 0, false);
	declareFunction("fact_sheet_request_denots", "FACT-SHEET-REQUEST-DENOTS", 1, 0, false);
	declareFunction("get_possible_fact_sheet_terms_mentioned_in_string", "GET-POSSIBLE-FACT-SHEET-TERMS-MENTIONED-IN-STRING", 2, 1, false);
	declareFunction("get_word_denots_for_fact_sheets", "GET-WORD-DENOTS-FOR-FACT-SHEETS", 1, 0, false);
	declareFunction("term_ok_for_cae_query_search_term_box_p", "TERM-OK-FOR-CAE-QUERY-SEARCH-TERM-BOX-P", 1, 0, false);
	declareFunction("clear_scalar_interval_p", "CLEAR-SCALAR-INTERVAL-P", 0, 0, false);
	declareFunction("remove_scalar_interval_p", "REMOVE-SCALAR-INTERVAL-P", 1, 1, false);
	declareFunction("scalar_interval_p_internal", "SCALAR-INTERVAL-P-INTERNAL", 2, 0, false);
	declareFunction("scalar_interval_p", "SCALAR-INTERVAL-P", 1, 1, false);
	declareFunction("term_ok_for_fact_sheet_p", "TERM-OK-FOR-FACT-SHEET-P", 1, 1, false);
	declareFunction("mini_fact_sheet_term_types", "MINI-FACT-SHEET-TERM-TYPES", 0, 0, false);
	declareFunction("fact_sheet_data_path", "FACT-SHEET-DATA-PATH", 0, 0, false);
	declareFunction("set_fact_sheet_data_path", "SET-FACT-SHEET-DATA-PATH", 1, 0, false);
	declareFunction("get_fact_sheet_term_fht_full_path", "GET-FACT-SHEET-TERM-FHT-FULL-PATH", 0, 0, false);
	declareFunction("build_fact_sheet_term_fht", "BUILD-FACT-SHEET-TERM-FHT", 1, 2, false);
	declareFunction("fact_sheet_term_id", "FACT-SHEET-TERM-ID", 1, 1, false);
	declareFunction("possible_fact_sheet_term_id_p", "POSSIBLE-FACT-SHEET-TERM-ID-P", 1, 0, false);
	declareFunction("clear_construct_fact_sheet_term_id", "CLEAR-CONSTRUCT-FACT-SHEET-TERM-ID", 0, 0, false);
	declareFunction("remove_construct_fact_sheet_term_id", "REMOVE-CONSTRUCT-FACT-SHEET-TERM-ID", 1, 0, false);
	declareFunction("construct_fact_sheet_term_id_internal", "CONSTRUCT-FACT-SHEET-TERM-ID-INTERNAL", 1, 0, false);
	declareFunction("construct_fact_sheet_term_id", "CONSTRUCT-FACT-SHEET-TERM-ID", 1, 0, false);
	declareFunction("fact_sheet_term_from_id", "FACT-SHEET-TERM-FROM-ID", 1, 1, false);
	declareFunction("ensure_fact_sheet_term_id_indexed", "ENSURE-FACT-SHEET-TERM-ID-INDEXED", 1, 1, false);
	declareFunction("index_fact_sheet_term_id", "INDEX-FACT-SHEET-TERM-ID", 2, 0, false);
	declareFunction("fact_sheet_term_from_span_id", "FACT-SHEET-TERM-FROM-SPAN-ID", 1, 1, false);
	declareFunction("ensure_fact_sheet_term_fbc_created", "ENSURE-FACT-SHEET-TERM-FBC-CREATED", 0, 1, false);
	declareFunction("fact_sheet_term_fbc_okP", "FACT-SHEET-TERM-FBC-OK?", 0, 0, false);
	declareFunction("cfasl_externalized_checksum", "CFASL-EXTERNALIZED-CHECKSUM", 1, 0, false);
	declareFunction("paraphrase_fact_sheet_sentences", "PARAPHRASE-FACT-SHEET-SENTENCES", 5, 0, false);
	declareFunction("fact_sheet_footnotes_for_sources", "FACT-SHEET-FOOTNOTES-FOR-SOURCES", 1, 1, false);
	declareFunction("fact_sheet_footnote_for_source", "FACT-SHEET-FOOTNOTE-FOR-SOURCE", 3, 0, false);
	declareFunction("sort_fact_sheet_texts_by_category", "SORT-FACT-SHEET-TEXTS-BY-CATEGORY", 1, 0, false);
	declareFunction("higher_priority_fact_sheet_categoryP", "HIGHER-PRIORITY-FACT-SHEET-CATEGORY?", 2, 0, false);
	declareFunction("substitute_fact_sheet_labels_for_categories", "SUBSTITUTE-FACT-SHEET-LABELS-FOR-CATEGORIES", 3, 0, false);
	declareFunction("substitute_fact_sheet_label_for_category", "SUBSTITUTE-FACT-SHEET-LABEL-FOR-CATEGORY", 3, 0, false);
	declareFunction("clear_fact_sheet_sentence_group_summary", "CLEAR-FACT-SHEET-SENTENCE-GROUP-SUMMARY", 0, 0, false);
	declareFunction("remove_fact_sheet_sentence_group_summary", "REMOVE-FACT-SHEET-SENTENCE-GROUP-SUMMARY", 6, 1, false);
	declareFunction("fact_sheet_sentence_group_summary_internal", "FACT-SHEET-SENTENCE-GROUP-SUMMARY-INTERNAL", 7, 0, false);
	declareFunction("fact_sheet_sentence_group_summary", "FACT-SHEET-SENTENCE-GROUP-SUMMARY", 6, 1, false);
	declareFunction("simulate_fact_sheet_sentence_paraphrase", "SIMULATE-FACT-SHEET-SENTENCE-PARAPHRASE", 2, 2, false);
	declareFunction("fact_sheet_bogus_hyperlink_open_tag_for_term", "FACT-SHEET-BOGUS-HYPERLINK-OPEN-TAG-FOR-TERM", 2, 0, false);
	declareFunction("fact_sheet_bogus_hyperlink_open_tag_for_term_id", "FACT-SHEET-BOGUS-HYPERLINK-OPEN-TAG-FOR-TERM-ID", 1, 0, false);
	declareFunction("fact_sheet_bogus_url_for_term", "FACT-SHEET-BOGUS-URL-FOR-TERM", 1, 0, false);
	declareFunction("fact_sheet_bogus_url_for_term_id", "FACT-SHEET-BOGUS-URL-FOR-TERM-ID", 1, 0, false);
	declareFunction("strip_bogus_hyperlinks_for_term_id", "STRIP-BOGUS-HYPERLINKS-FOR-TERM-ID", 2, 0, false);
	declareFunction("fact_sheet_html_find_marked_up_terms", "FACT-SHEET-HTML-FIND-MARKED-UP-TERMS", 1, 1, false);
	declareFunction("fact_sheet_html_find_marked_up_terms_fast", "FACT-SHEET-HTML-FIND-MARKED-UP-TERMS-FAST", 1, 1, false);
	declareFunction("get_term_and_close_tag_from_token", "GET-TERM-AND-CLOSE-TAG-FROM-TOKEN", 1, 0, false);
	declareFunction("fact_sheet_html_find_matching_close_tag_start", "FACT-SHEET-HTML-FIND-MATCHING-CLOSE-TAG-START", 4, 0, false);
	declareFunction("fact_sheet_term_inappropriate_for_hyperlinkP", "FACT-SHEET-TERM-INAPPROPRIATE-FOR-HYPERLINK?", 1, 0, false);
	declareFunction("mark_up_fact_sheet_sentenceP", "MARK-UP-FACT-SHEET-SENTENCE?", 2, 0, false);
	declareFunction("fact_sheet_possibly_mark_up_sentence_paraphrase", "FACT-SHEET-POSSIBLY-MARK-UP-SENTENCE-PARAPHRASE", 3, 0, false);
	declareFunction("fact_sheet_mark_up_sentence_paraphrase", "FACT-SHEET-MARK-UP-SENTENCE-PARAPHRASE", 3, 0, false);
	declareFunction("remove_link", "REMOVE-LINK", 3, 0, false);
	declareFunction("fact_sheet_sentence_id_function", "FACT-SHEET-SENTENCE-ID-FUNCTION", 1, 0, false);
	declareFunction("xml_factsheetsP", "XML-FACTSHEETS?", 1, 0, false);
	declareFunction("fact_sheet_sentence_expand_coordination_sets", "FACT-SHEET-SENTENCE-EXPAND-COORDINATION-SETS", 1, 0, false);
	declareFunction("fact_sheet_span_for_term", "FACT-SHEET-SPAN-FOR-TERM", 2, 0, false);
	declareFunction("replace_fact_sheet_markups", "REPLACE-FACT-SHEET-MARKUPS", 2, 1, false);
	declareFunction("replace_fact_sheet_markups_fast", "REPLACE-FACT-SHEET-MARKUPS-FAST", 2, 1, false);
	declareFunction("fact_sheet_max_sentences_per_pred", "FACT-SHEET-MAX-SENTENCES-PER-PRED", 1, 0, false);
	declareFunction("display_fact_sheet", "DISPLAY-FACT-SHEET", 5, 0, false);
	declareFunction("display_fact_sheet_with_internal_styles", "DISPLAY-FACT-SHEET-WITH-INTERNAL-STYLES", 4, 0, false);
	declareFunction("display_fact_sheet_for_external_styles", "DISPLAY-FACT-SHEET-FOR-EXTERNAL-STYLES", 4, 1, false);
	declareFunction("display_fact_sheet_xml", "DISPLAY-FACT-SHEET-XML", 4, 1, false);
	declareFunction("print_fact_sheet_stats", "PRINT-FACT-SHEET-STATS", 2, 1, false);
	declareFunction("fact_sheet_kb_version_string", "FACT-SHEET-KB-VERSION-STRING", 1, 0, false);
	declareFunction("fact_sheet_cyc_revision_string", "FACT-SHEET-CYC-REVISION-STRING", 1, 0, false);
	declareFunction("fact_sheet_info_string", "FACT-SHEET-INFO-STRING", 2, 0, false);
	declareFunction("fact_sheet_pph_demerit_cutoff", "FACT-SHEET-PPH-DEMERIT-CUTOFF", 0, 0, false);
	declareFunction("fact_sheet_min_paragraph_length", "FACT-SHEET-MIN-PARAGRAPH-LENGTH", 0, 0, false);
	declareFunction("fact_sheet_verbosity_p", "FACT-SHEET-VERBOSITY-P", 1, 0, false);
	declareFunction("fact_sheet_image_root_placeholder", "FACT-SHEET-IMAGE-ROOT-PLACEHOLDER", 0, 0, false);
	declareFunction("fact_sheet_image_url_for_term", "FACT-SHEET-IMAGE-URL-FOR-TERM", 1, 1, false);
	declareFunction("fact_sheet_base_url_placeholder", "FACT-SHEET-BASE-URL-PLACEHOLDER", 0, 0, false);
	declareFunction("fact_sheet_html_replace_placeholders", "FACT-SHEET-HTML-REPLACE-PLACEHOLDERS", 2, 0, false);
	declareFunction("fact_sheet_html_contains_replaceable_colorsP", "FACT-SHEET-HTML-CONTAINS-REPLACEABLE-COLORS?", 1, 0, false);
	declareFunction("fact_sheet_html_replace_colors", "FACT-SHEET-HTML-REPLACE-COLORS", 1, 0, false);
	declareFunction("fact_sheet_html_contains_base_url_placeholderP", "FACT-SHEET-HTML-CONTAINS-BASE-URL-PLACEHOLDER?", 1, 0, false);
	declareFunction("fact_sheet_html_replace_base_url_placeholder", "FACT-SHEET-HTML-REPLACE-BASE-URL-PLACEHOLDER", 1, 0, false);
	declareFunction("fact_sheet_html_contains_image_root_placeholderP", "FACT-SHEET-HTML-CONTAINS-IMAGE-ROOT-PLACEHOLDER?", 1, 0, false);
	declareFunction("clear_fact_sheet_image_file_root_url", "CLEAR-FACT-SHEET-IMAGE-FILE-ROOT-URL", 0, 0, false);
	declareFunction("remove_fact_sheet_image_file_root_url", "REMOVE-FACT-SHEET-IMAGE-FILE-ROOT-URL", 0, 0, false);
	declareFunction("fact_sheet_image_file_root_url_internal", "FACT-SHEET-IMAGE-FILE-ROOT-URL-INTERNAL", 0, 0, false);
	declareFunction("fact_sheet_image_file_root_url", "FACT-SHEET-IMAGE-FILE-ROOT-URL", 0, 0, false);
	declareFunction("use_fact_sheet_image_file_root_urlP", "USE-FACT-SHEET-IMAGE-FILE-ROOT-URL?", 0, 0, false);
	declareFunction("relative_fact_sheet_image_url", "RELATIVE-FACT-SHEET-IMAGE-URL", 0, 1, false);
	declareFunction("fact_sheet_html_replace_image_root_placeholder", "FACT-SHEET-HTML-REPLACE-IMAGE-ROOT-PLACEHOLDER", 2, 0, false);
	declareFunction("clear_fact_sheet_image_url_root", "CLEAR-FACT-SHEET-IMAGE-URL-ROOT", 0, 0, false);
	declareFunction("remove_fact_sheet_image_url_root", "REMOVE-FACT-SHEET-IMAGE-URL-ROOT", 1, 0, false);
	declareFunction("fact_sheet_image_url_root_internal", "FACT-SHEET-IMAGE-URL-ROOT-INTERNAL", 1, 0, false);
	declareFunction("fact_sheet_image_url_root", "FACT-SHEET-IMAGE-URL-ROOT", 1, 0, false);
	declareFunction("fact_sheet_image_path_okP", "FACT-SHEET-IMAGE-PATH-OK?", 1, 0, false);
	declareFunction("fact_sheet_query_sentence", "FACT-SHEET-QUERY-SENTENCE", 0, 2, false);
	declareFunction("get_mini_fact_sheet_for_term_in_html", "GET-MINI-FACT-SHEET-FOR-TERM-IN-HTML", 1, 2, false);
	declareFunction("clear_get_mini_fact_sheet_for_term_cached", "CLEAR-GET-MINI-FACT-SHEET-FOR-TERM-CACHED", 0, 0, false);
	declareFunction("remove_get_mini_fact_sheet_for_term_cached", "REMOVE-GET-MINI-FACT-SHEET-FOR-TERM-CACHED", 4, 0, false);
	declareFunction("get_mini_fact_sheet_for_term_cached_internal", "GET-MINI-FACT-SHEET-FOR-TERM-CACHED-INTERNAL", 4, 0, false);
	declareFunction("get_mini_fact_sheet_for_term_cached", "GET-MINI-FACT-SHEET-FOR-TERM-CACHED", 4, 0, false);
	declareFunction("fallback_mini_fact_sheet_for_term_in_html", "FALLBACK-MINI-FACT-SHEET-FOR-TERM-IN-HTML", 3, 0, false);
	declareFunction("fact_sheet_query_properties", "FACT-SHEET-QUERY-PROPERTIES", 0, 2, false);
	declareFunction("omitted_fact_sheet_sentences", "OMITTED-FACT-SHEET-SENTENCES", 0, 0, false);
	declareFunction("fact_sheet_sentences_for_assertion_and_term", "FACT-SHEET-SENTENCES-FOR-ASSERTION-AND-TERM", 2, 1, false);
	declareFunction("fact_sheet_sentences_for_term", "FACT-SHEET-SENTENCES-FOR-TERM", 1, 1, false);
	declareFunction("fact_sheet_sentences_for_term_from_kbq", "FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ", 2, 3, false);
	declareFunction("clear_fact_sheet_sentences_for_term_internal", "CLEAR-FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL", 0, 0, false);
	declareFunction("remove_fact_sheet_sentences_for_term_internal", "REMOVE-FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL", 4, 0, false);
	declareFunction("fact_sheet_sentences_for_term_internal_internal", "FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL-INTERNAL", 4, 0, false);
	declareFunction("fact_sheet_sentences_for_term_internal", "FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL", 4, 0, false);
	declareFunction("fact_sheet_sentence_about_topicP", "FACT-SHEET-SENTENCE-ABOUT-TOPIC?", 2, 3, false);
	declareFunction("clear_fact_sheet_sentence_trivially_impliesP", "CLEAR-FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?", 0, 0, false);
	declareFunction("remove_fact_sheet_sentence_trivially_impliesP", "REMOVE-FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?", 2, 1, false);
	declareFunction("fact_sheet_sentence_trivially_impliesP_internal", "FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?-INTERNAL", 3, 0, false);
	declareFunction("fact_sheet_sentence_trivially_impliesP", "FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?", 2, 1, false);
	declareFunction("assertion_mt_times_visibleP", "ASSERTION-MT-TIMES-VISIBLE?", 2, 0, false);
	declareFunction("fact_sheet_skolem_time_intervalP", "FACT-SHEET-SKOLEM-TIME-INTERVAL?", 1, 0, false);
	declareFunction("fact_sheet_skolem_time_interval_more_constrainedP", "FACT-SHEET-SKOLEM-TIME-INTERVAL-MORE-CONSTRAINED?", 2, 0, false);
	declareFunction("fact_sheet_skolem_time_interval_subsuming_interval", "FACT-SHEET-SKOLEM-TIME-INTERVAL-SUBSUMING-INTERVAL", 1, 0, false);
	declareFunction("fact_sheet_args_imply_args_for_pred", "FACT-SHEET-ARGS-IMPLY-ARGS-FOR-PRED", 3, 1, false);
	declareFunction("clear_fact_sheet_transitivity_check", "CLEAR-FACT-SHEET-TRANSITIVITY-CHECK", 0, 0, false);
	declareFunction("remove_fact_sheet_transitivity_check", "REMOVE-FACT-SHEET-TRANSITIVITY-CHECK", 2, 0, false);
	declareFunction("fact_sheet_transitivity_check_internal", "FACT-SHEET-TRANSITIVITY-CHECK-INTERNAL", 2, 0, false);
	declareFunction("fact_sheet_transitivity_check", "FACT-SHEET-TRANSITIVITY-CHECK", 2, 0, false);
	declareFunction("add_thcl_fact_sheet_sentences", "ADD-THCL-FACT-SHEET-SENTENCES", 3, 0, false);
	declareFunction("thcl_sentences_for_term_fact_sheet", "THCL-SENTENCES-FOR-TERM-FACT-SHEET", 1, 1, false);
	declareFunction("thcl_preds_for_term_fact_sheet", "THCL-PREDS-FOR-TERM-FACT-SHEET", 1, 1, false);
	declareFunction("fact_sheet_queries_browsableP", "FACT-SHEET-QUERIES-BROWSABLE?", 0, 0, false);
	declareFunction("new_fact_sheet_query_daemon", "NEW-FACT-SHEET-QUERY-DAEMON", 0, 0, false);
	declareFunction("fact_sheet_query_daemon_run", "FACT-SHEET-QUERY-DAEMON-RUN", 1, 0, false);
	declareFunction("free_fact_sheet_query_spec", "FREE-FACT-SHEET-QUERY-SPEC", 1, 0, false);
	declareFunction("valid_fact_sheet_query_spec_p", "VALID-FACT-SHEET-QUERY-SPEC-P", 1, 0, false);
	declareFunction("new_fact_sheet_query", "NEW-FACT-SHEET-QUERY", 4, 0, false);
	declareFunction("fact_sheet_sentence_query", "FACT-SHEET-SENTENCE-QUERY", 3, 0, false);
	declareFunction("clear_fact_sheet_label_for_category", "CLEAR-FACT-SHEET-LABEL-FOR-CATEGORY", 0, 0, false);
	declareFunction("remove_fact_sheet_label_for_category", "REMOVE-FACT-SHEET-LABEL-FOR-CATEGORY", 3, 0, false);
	declareFunction("fact_sheet_label_for_category_internal", "FACT-SHEET-LABEL-FOR-CATEGORY-INTERNAL", 3, 0, false);
	declareFunction("fact_sheet_label_for_category", "FACT-SHEET-LABEL-FOR-CATEGORY", 3, 0, false);
	declareFunction("group_fact_sheet_sentences_alist", "GROUP-FACT-SHEET-SENTENCES-ALIST", 1, 0, false);
	declareFunction("group_fact_sheet_sentences_for_category", "GROUP-FACT-SHEET-SENTENCES-FOR-CATEGORY", 2, 0, false);
	declareFunction("sort_fact_sheet_sentences_for_category", "SORT-FACT-SHEET-SENTENCES-FOR-CATEGORY", 2, 0, false);
	declareFunction("fact_sheet_sentence_more_recentP", "FACT-SHEET-SENTENCE-MORE-RECENT?", 2, 0, false);
	declareFunction("fact_sheet_sentence_time_interval", "FACT-SHEET-SENTENCE-TIME-INTERVAL", 1, 0, false);
	declareFunction("clear_fact_sheet_sentence_time_interval_cached", "CLEAR-FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED", 0, 0, false);
	declareFunction("remove_fact_sheet_sentence_time_interval_cached", "REMOVE-FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED", 1, 0, false);
	declareFunction("fact_sheet_sentence_time_interval_cached_internal", "FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED-INTERNAL", 1, 0, false);
	declareFunction("fact_sheet_sentence_time_interval_cached", "FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED", 1, 0, false);
	declareFunction("fact_sheet_sentence_precedence_for_category_internal", "FACT-SHEET-SENTENCE-PRECEDENCE-FOR-CATEGORY-INTERNAL", 2, 0, false);
	declareFunction("fact_sheet_sentence_precedence_for_category", "FACT-SHEET-SENTENCE-PRECEDENCE-FOR-CATEGORY", 2, 0, false);
	declareFunction("maximize_fact_sheet_sentence_coherence", "MAXIMIZE-FACT-SHEET-SENTENCE-COHERENCE", 1, 0, false);
	declareFunction("most_coherent_fact_sheet_sentence", "MOST-COHERENT-FACT-SHEET-SENTENCE", 2, 0, false);
	declareFunction("fact_sheet_sentence_coherence", "FACT-SHEET-SENTENCE-COHERENCE", 2, 1, false);
	declareFunction("delete_duplicate_fact_sheet_sentences", "DELETE-DUPLICATE-FACT-SHEET-SENTENCES", 1, 0, false);
	declareFunction("fact_sheet_sentences_equalP", "FACT-SHEET-SENTENCES-EQUAL?", 2, 0, false);
	declareFunction("fact_sheet_assertion_time_indices_equalP", "FACT-SHEET-ASSERTION-TIME-INDICES-EQUAL?", 2, 0, false);
	declareFunction("fact_sheet_sentence_predicate", "FACT-SHEET-SENTENCE-PREDICATE", 1, 0, false);
	declareFunction("fact_sheet_sentence_mt", "FACT-SHEET-SENTENCE-MT", 1, 0, false);
	declareFunction("pred_counts_for_sentences", "PRED-COUNTS-FOR-SENTENCES", 1, 0, false);
	declareFunction("fact_sheet_pred_count_L", "FACT-SHEET-PRED-COUNT-<", 2, 0, false);
	declareFunction("stable_sort_fact_sheet_sentences", "STABLE-SORT-FACT-SHEET-SENTENCES", 1, 0, false);
	declareFunction("stable_sort_fact_sheet_sentences_for_category", "STABLE-SORT-FACT-SHEET-SENTENCES-FOR-CATEGORY", 1, 0, false);
	declareFunction("fact_sheet_predicate_L", "FACT-SHEET-PREDICATE-<", 2, 0, false);
	declareFunction("possibly_remove_fact_sheet_sections", "POSSIBLY-REMOVE-FACT-SHEET-SECTIONS", 2, 1, false);
	declareFunction("get_factsheet_kb_from_html", "GET-FACTSHEET-KB-FROM-HTML", 1, 0, false);
	declareFunction("get_factsheet_system_from_html", "GET-FACTSHEET-SYSTEM-FROM-HTML", 1, 0, false);
	declareFunction("fact_sheet_section_start_position", "FACT-SHEET-SECTION-START-POSITION", 2, 1, false);
	declareFunction("fact_sheet_section_end_position", "FACT-SHEET-SECTION-END-POSITION", 3, 0, false);
	declareFunction("remove_fact_sheet_section", "REMOVE-FACT-SHEET-SECTION", 2, 1, false);
	declareFunction("add_evaluation_link", "ADD-EVALUATION-LINK", 2, 3, false);
	declareFunction("add_before_fact_sheet_section", "ADD-BEFORE-FACT-SHEET-SECTION", 3, 0, false);
	declareFunction("clear_fact_sheet_optional_section_start_comment", "CLEAR-FACT-SHEET-OPTIONAL-SECTION-START-COMMENT", 0, 0, false);
	declareFunction("remove_fact_sheet_optional_section_start_comment", "REMOVE-FACT-SHEET-OPTIONAL-SECTION-START-COMMENT", 1, 1, false);
	declareFunction("fact_sheet_optional_section_start_comment_internal", "FACT-SHEET-OPTIONAL-SECTION-START-COMMENT-INTERNAL", 2, 0, false);
	declareFunction("fact_sheet_optional_section_start_comment", "FACT-SHEET-OPTIONAL-SECTION-START-COMMENT", 1, 1, false);
	declareFunction("clear_fact_sheet_optional_section_end_comment", "CLEAR-FACT-SHEET-OPTIONAL-SECTION-END-COMMENT", 0, 0, false);
	declareFunction("remove_fact_sheet_optional_section_end_comment", "REMOVE-FACT-SHEET-OPTIONAL-SECTION-END-COMMENT", 1, 0, false);
	declareFunction("fact_sheet_optional_section_end_comment_internal", "FACT-SHEET-OPTIONAL-SECTION-END-COMMENT-INTERNAL", 1, 0, false);
	declareFunction("fact_sheet_optional_section_end_comment", "FACT-SHEET-OPTIONAL-SECTION-END-COMMENT", 1, 0, false);
	declareFunction("fact_sheet_optional_section_start_string", "FACT-SHEET-OPTIONAL-SECTION-START-STRING", 1, 0, false);
	declareFunction("fact_sheet_optional_section_end_string", "FACT-SHEET-OPTIONAL-SECTION-END-STRING", 1, 0, false);
	declareFunction("term_has_precached_fact_sheetP", "TERM-HAS-PRECACHED-FACT-SHEET?", 1, 3, false);
	declareFunction("precached_fact_sheet_file_for_term_id", "PRECACHED-FACT-SHEET-FILE-FOR-TERM-ID", 4, 2, false);
	declareFunction("precached_fact_sheet_for_term_in_html", "PRECACHED-FACT-SHEET-FOR-TERM-IN-HTML", 5, 1, false);
	declareFunction("precached_fact_sheet_for_term_id_in_html", "PRECACHED-FACT-SHEET-FOR-TERM-ID-IN-HTML", 5, 1, false);
	declareFunction("updated_fact_sheet_data_for_term_and_sentence", "UPDATED-FACT-SHEET-DATA-FOR-TERM-AND-SENTENCE", 2, 4, false);
	declareFunction("update_fact_sheet_data_for_term_and_user_added_sentence", "UPDATE-FACT-SHEET-DATA-FOR-TERM-AND-USER-ADDED-SENTENCE", 2, 4, false);
	declareFunction("update_fact_sheet_data_for_term_and_removed_sentence", "UPDATE-FACT-SHEET-DATA-FOR-TERM-AND-REMOVED-SENTENCE", 2, 4, false);
	declareFunction("updated_fact_sheet_stats", "UPDATED-FACT-SHEET-STATS", 1, 0, false);
	declareFunction("cached_fact_sheet_data_for_term", "CACHED-FACT-SHEET-DATA-FOR-TERM", 1, 4, false);
	declareFunction("mts_with_precached_fact_sheet_data_for_term_internal", "MTS-WITH-PRECACHED-FACT-SHEET-DATA-FOR-TERM-INTERNAL", 1, 1, false);
	declareFunction("mts_with_precached_fact_sheet_data_for_term", "MTS-WITH-PRECACHED-FACT-SHEET-DATA-FOR-TERM", 1, 1, false);
	declareFunction("precached_fact_sheet_data_for_term", "PRECACHED-FACT-SHEET-DATA-FOR-TERM", 1, 4, false);
	declareFunction("precached_fact_sheet_data_for_term_id", "PRECACHED-FACT-SHEET-DATA-FOR-TERM-ID", 4, 1, false);
	declareFunction("precached_fact_sheet_data_from_file", "PRECACHED-FACT-SHEET-DATA-FROM-FILE", 1, 7, false);
	declareFunction("load_fact_sheet_formatting_guidelines", "LOAD-FACT-SHEET-FORMATTING-GUIDELINES", 1, 0, false);
	declareFunction("fact_sheet_under_construction_message", "FACT-SHEET-UNDER-CONSTRUCTION-MESSAGE", 1, 0, false);
	declareFunction("fact_sheet_under_construction_code", "FACT-SHEET-UNDER-CONSTRUCTION-CODE", 0, 0, false);
	declareFunction("fact_sheet_under_construction_xml", "FACT-SHEET-UNDER-CONSTRUCTION-XML", 2, 0, false);
	declareFunction("fact_sheet_under_construction_html", "FACT-SHEET-UNDER-CONSTRUCTION-HTML", 2, 0, false);
	declareFunction("note_fact_sheet_under_construction", "NOTE-FACT-SHEET-UNDER-CONSTRUCTION", 1, 3, false);
	declareFunction("note_fact_sheet_construction_done", "NOTE-FACT-SHEET-CONSTRUCTION-DONE", 1, 3, false);
	declareFunction("fact_sheet_under_construction_filename", "FACT-SHEET-UNDER-CONSTRUCTION-FILENAME", 1, 3, false);
	declareFunction("fact_sheet_term_under_constructionP", "FACT-SHEET-TERM-UNDER-CONSTRUCTION?", 1, 4, false);
	declareFunction("fact_sheet_file_under_constructionP", "FACT-SHEET-FILE-UNDER-CONSTRUCTION?", 2, 0, false);
	declareFunction("html_fact_sheet_file_under_constructionP", "HTML-FACT-SHEET-FILE-UNDER-CONSTRUCTION?", 1, 1, false);
	declareFunction("fact_sheet_term_update_already_undertakenP", "FACT-SHEET-TERM-UPDATE-ALREADY-UNDERTAKEN?", 4, 0, false);
	declareFunction("term_fact_sheet_current_on_kb_and_systemP", "TERM-FACT-SHEET-CURRENT-ON-KB-AND-SYSTEM?", 2, 2, false);
	declareFunction("gather_old_under_construction_fact_sheet_files", "GATHER-OLD-UNDER-CONSTRUCTION-FACT-SHEET-FILES", 0, 1, false);
	declareFunction("remove_any_cached_fact_sheet_data", "REMOVE-ANY-CACHED-FACT-SHEET-DATA", 4, 1, false);
	declareFunction("write_fact_sheet_html_and_formatting_guidelines", "WRITE-FACT-SHEET-HTML-AND-FORMATTING-GUIDELINES", 6, 0, false);
	declareFunction("write_fact_sheet_data_and_formatting_guidelines", "WRITE-FACT-SHEET-DATA-AND-FORMATTING-GUIDELINES", 8, 0, false);
	declareFunction("stop_fact_sheet_updates_after_current_term", "STOP-FACT-SHEET-UPDATES-AFTER-CURRENT-TERM", 0, 0, false);
	declareFunction("start_new_fact_sheet_updater", "START-NEW-FACT-SHEET-UPDATER", 0, 5, false);
	declareFunction("start_new_stale_fact_sheet_updater", "START-NEW-STALE-FACT-SHEET-UPDATER", 0, 1, false);
	declareFunction("start_new_all_fact_sheet_updater", "START-NEW-ALL-FACT-SHEET-UPDATER", 0, 6, false);
	declareFunction("start_new_fact_sheet_log_file_watcher", "START-NEW-FACT-SHEET-LOG-FILE-WATCHER", 0, 1, false);
	declareFunction("watch_fact_sheet_log_file", "WATCH-FACT-SHEET-LOG-FILE", 1, 0, false);
	declareFunction("fact_sheet_log_stream_active_p", "FACT-SHEET-LOG-STREAM-ACTIVE-P", 1, 0, false);
	declareFunction("halt_fact_sheet_updater_image", "HALT-FACT-SHEET-UPDATER-IMAGE", 1, 0, false);
	declareFunction("update_fact_sheets_for_all_fact_sheetable_instances_of_without_good_fact_sheets_generated_since", "UPDATE-FACT-SHEETS-FOR-ALL-FACT-SHEETABLE-INSTANCES-OF-WITHOUT-GOOD-FACT-SHEETS-GENERATED-SINCE", 0, 5, false);
	declareFunction("launch_fact_sheet_updater_of_fs_type_not_updated_since", "LAUNCH-FACT-SHEET-UPDATER-OF-FS-TYPE-NOT-UPDATED-SINCE", 1, 4, false);
	declareFunction("update_fact_sheets_of_fs_type_not_updated_since", "UPDATE-FACT-SHEETS-OF-FS-TYPE-NOT-UPDATED-SINCE", 1, 4, false);
	declareFunction("maybe_update_fact_sheet_and_record_stats", "MAYBE-UPDATE-FACT-SHEET-AND-RECORD-STATS", 4, 0, false);
	declareFunction("update_all_stale_fact_sheets", "UPDATE-ALL-STALE-FACT-SHEETS", 0, 1, false);
	declareFunction("possible_regular_fact_sheet_directory_p", "POSSIBLE-REGULAR-FACT-SHEET-DIRECTORY-P", 1, 0, false);
	declareFunction("possible_fact_sheet_directory_p", "POSSIBLE-FACT-SHEET-DIRECTORY-P", 1, 0, false);
	declareFunction("fact_sheet_verbosity_from_path", "FACT-SHEET-VERBOSITY-FROM-PATH", 1, 0, false);
	declareFunction("update_fact_sheet_file_if_stale", "UPDATE-FACT-SHEET-FILE-IF-STALE", 1, 2, false);
	declareMacro("do_forts_for_fact_sheet_update", "DO-FORTS-FOR-FACT-SHEET-UPDATE");
	declareFunction("write_term_ids_to_update", "WRITE-TERM-IDS-TO-UPDATE", 1, 1, false);
	declareFunction("write_term_ids_to_update_for_fs_type_public_pages", "WRITE-TERM-IDS-TO-UPDATE-FOR-FS-TYPE-PUBLIC-PAGES", 1, 2, false);
	declareFunction("write_term_ids_to_update_for_fs_type_public_pages_term_set", "WRITE-TERM-IDS-TO-UPDATE-FOR-FS-TYPE-PUBLIC-PAGES-TERM-SET", 2, 2, false);
	declareFunction("write_term_ids_to_update_for_term_set", "WRITE-TERM-IDS-TO-UPDATE-FOR-TERM-SET", 1, 2, false);
	declareFunction("convert_term_suids_to_fact_sheet_term_ids", "CONVERT-TERM-SUIDS-TO-FACT-SHEET-TERM-IDS", 2, 0, false);
	declareFunction("convert_term_suid_range_to_fact_sheet_term_ids", "CONVERT-TERM-SUID-RANGE-TO-FACT-SHEET-TERM-IDS", 3, 0, false);
	declareFunction("update_fact_sheets_with_suids", "UPDATE-FACT-SHEETS-WITH-SUIDS", 2, 2, false);
	declareFunction("update_fact_sheets_with_ids", "UPDATE-FACT-SHEETS-WITH-IDS", 1, 2, false);
	declareFunction("fact_sheet_term_id_filename", "FACT-SHEET-TERM-ID-FILENAME", 2, 0, false);
	declareFunction("update_fact_sheets_from_id_file", "UPDATE-FACT-SHEETS-FROM-ID-FILE", 1, 2, false);
	declareFunction("remaining_fact_sheets_to_update", "REMAINING-FACT-SHEETS-TO-UPDATE", 0, 4, false);
	declareFunction("gather_all_fact_sheet_filenames", "GATHER-ALL-FACT-SHEET-FILENAMES", 1, 3, false);
	declareFunction("update_all_fact_sheets", "UPDATE-ALL-FACT-SHEETS", 0, 6, false);
	declareFunction("update_fact_sheets", "UPDATE-FACT-SHEETS", 0, 5, false);
	declareFunction("sleep_until_time_within_next_day", "SLEEP-UNTIL-TIME-WITHIN-NEXT-DAY", 3, 0, false);
	declareFunction("time_of_day_has_arrivedP", "TIME-OF-DAY-HAS-ARRIVED?", 3, 0, false);
	declareFunction("image_seems_idleP", "IMAGE-SEEMS-IDLE?", 0, 2, false);
	declareFunction("image_find_busy_thread", "IMAGE-FIND-BUSY-THREAD", 0, 1, false);
	declareFunction("maybe_start_new_fact_sheet_updater_default_screensaver_for_user", "MAYBE-START-NEW-FACT-SHEET-UPDATER-DEFAULT-SCREENSAVER-FOR-USER", 0, 1, false);
	declareFunction("start_new_fact_sheet_updater_default_screensaver", "START-NEW-FACT-SHEET-UPDATER-DEFAULT-SCREENSAVER", 0, 1, false);
	declareFunction("default_fact_sheet_updater_screensaver_verbosity_for_user", "DEFAULT-FACT-SHEET-UPDATER-SCREENSAVER-VERBOSITY-FOR-USER", 1, 0, false);
	declareFunction("register_fact_sheet_screensaver", "REGISTER-FACT-SHEET-SCREENSAVER", 1, 0, false);
	declareFunction("deregister_fact_sheet_screensaver", "DEREGISTER-FACT-SHEET-SCREENSAVER", 1, 0, false);
	declareFunction("start_new_fact_sheet_updater_screensaver", "START-NEW-FACT-SHEET-UPDATER-SCREENSAVER", 0, 5, false);
	declareFunction("stop_all_fact_sheet_screensavers", "STOP-ALL-FACT-SHEET-SCREENSAVERS", 0, 0, false);
	declareFunction("restart_all_fact_sheet_screensavers", "RESTART-ALL-FACT-SHEET-SCREENSAVERS", 0, 0, false);
	declareFunction("allow_fact_sheet_screensavers", "ALLOW-FACT-SHEET-SCREENSAVERS", 0, 0, false);
	declareFunction("kill_all_fact_sheet_screensavers", "KILL-ALL-FACT-SHEET-SCREENSAVERS", 0, 1, false);
	declareFunction("update_fact_sheet_screensaver", "UPDATE-FACT-SHEET-SCREENSAVER", 5, 0, false);
	declareFunction("update_fact_sheets_internal", "UPDATE-FACT-SHEETS-INTERNAL", 3, 1, false);
	declareFunction("update_fact_sheet_for_term_with_logging", "UPDATE-FACT-SHEET-FOR-TERM-WITH-LOGGING", 4, 0, false);
	declareFunction("possibly_update_fact_sheet_for_term", "POSSIBLY-UPDATE-FACT-SHEET-FOR-TERM", 4, 0, false);
	declareFunction("fact_sheet_query_soft_timeout_time_reachedP", "FACT-SHEET-QUERY-SOFT-TIMEOUT-TIME-REACHED?", 0, 0, false);
	declareFunction("fact_sheet_query_soft_timeout_time_left", "FACT-SHEET-QUERY-SOFT-TIMEOUT-TIME-LEFT", 0, 0, false);
	declareFunction("compute_fact_sheet_query_soft_timeout_time", "COMPUTE-FACT-SHEET-QUERY-SOFT-TIMEOUT-TIME", 1, 0, false);
	declareFunction("fact_sheet_paraphrase_soft_timeout_time_reachedP", "FACT-SHEET-PARAPHRASE-SOFT-TIMEOUT-TIME-REACHED?", 0, 0, false);
	declareFunction("fact_sheet_paraphrase_soft_timeout_time_left", "FACT-SHEET-PARAPHRASE-SOFT-TIMEOUT-TIME-LEFT", 0, 0, false);
	declareFunction("compute_fact_sheet_paraphrase_soft_timeout_time", "COMPUTE-FACT-SHEET-PARAPHRASE-SOFT-TIMEOUT-TIME", 1, 0, false);
	declareFunction("update_fact_sheet_for_term", "UPDATE-FACT-SHEET-FOR-TERM", 1, 5, false);
	declareFunction("update_mini_fact_sheet_for_term", "UPDATE-MINI-FACT-SHEET-FOR-TERM", 1, 2, false);
	declareFunction("update_fact_sheet_data_for_term", "UPDATE-FACT-SHEET-DATA-FOR-TERM", 6, 0, false);
	declareFunction("launch_make_up_fact_sheet_updater_for_term", "LAUNCH-MAKE-UP-FACT-SHEET-UPDATER-FOR-TERM", 1, 5, false);
	declareFunction("fact_sheet_too_shortP", "FACT-SHEET-TOO-SHORT?", 4, 0, false);
	declareFunction("fact_sheet_up_to_dateP", "FACT-SHEET-UP-TO-DATE?", 4, 0, false);
	declareFunction("cached_fact_sheet_save_date_and_second", "CACHED-FACT-SHEET-SAVE-DATE-AND-SECOND", 1, 0, false);
	declareFunction("fact_sheet_generator_modified_sinceP", "FACT-SHEET-GENERATOR-MODIFIED-SINCE?", 2, 0, false);
	declareFunction("fact_sheet_term_modified_sinceP", "FACT-SHEET-TERM-MODIFIED-SINCE?", 3, 0, false);
	declareFunction("fact_sheet_formatting_guidelines_file", "FACT-SHEET-FORMATTING-GUIDELINES-FILE", 1, 1, false);
	declareFunction("fact_sheet_file_for_fact_sheet_term", "FACT-SHEET-FILE-FOR-FACT-SHEET-TERM", 1, 0, false);
	declareFunction("directory_and_filename_for_fact_sheet", "DIRECTORY-AND-FILENAME-FOR-FACT-SHEET", 1, 4, false);
	declareFunction("directory_and_filename_for_fact_sheet_from_id", "DIRECTORY-AND-FILENAME-FOR-FACT-SHEET-FROM-ID", 4, 2, false);
	declareFunction("fact_sheet_term_id_file_preface", "FACT-SHEET-TERM-ID-FILE-PREFACE", 1, 0, false);
	declareFunction("fact_sheet_term_from_filename", "FACT-SHEET-TERM-FROM-FILENAME", 1, 0, false);
	declareFunction("fact_sheet_data_from_filename", "FACT-SHEET-DATA-FROM-FILENAME", 1, 0, false);
	declareFunction("fact_sheet_data_from_path", "FACT-SHEET-DATA-FROM-PATH", 1, 0, false);
	declareFunction("clear_fact_sheet_directory_from_list", "CLEAR-FACT-SHEET-DIRECTORY-FROM-LIST", 0, 0, false);
	declareFunction("remove_fact_sheet_directory_from_list", "REMOVE-FACT-SHEET-DIRECTORY-FROM-LIST", 0, 1, false);
	declareFunction("fact_sheet_directory_from_list_internal", "FACT-SHEET-DIRECTORY-FROM-LIST-INTERNAL", 1, 0, false);
	declareFunction("fact_sheet_directory_from_list", "FACT-SHEET-DIRECTORY-FROM-LIST", 0, 1, false);
	declareFunction("fact_sheet_update_term_prioritizer_print_function_trampoline", "FACT-SHEET-UPDATE-TERM-PRIORITIZER-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
	declareFunction("fact_sheet_update_term_prioritizer_p", "FACT-SHEET-UPDATE-TERM-PRIORITIZER-P", 1, 0, false);
	new com.cyc.cycjava.cycl.fact_sheets.$fact_sheet_update_term_prioritizer_p$UnaryFunction();
	declareFunction("fsut_prioritizer_stale_terms", "FSUT-PRIORITIZER-STALE-TERMS", 1, 0, false);
	declareFunction("fsut_prioritizer_missing_terms", "FSUT-PRIORITIZER-MISSING-TERMS", 1, 0, false);
	declareFunction("fsut_prioritizer_up_to_date_terms", "FSUT-PRIORITIZER-UP-TO-DATE-TERMS", 1, 0, false);
	declareFunction("fsut_prioritizer_thread", "FSUT-PRIORITIZER-THREAD", 1, 0, false);
	declareFunction("fsut_prioritizer_should_sleepP", "FSUT-PRIORITIZER-SHOULD-SLEEP?", 1, 0, false);
	declareFunction("fsut_prioritizer_verbosity", "FSUT-PRIORITIZER-VERBOSITY", 1, 0, false);
	declareFunction("fsut_prioritizer_domain_mt", "FSUT-PRIORITIZER-DOMAIN-MT", 1, 0, false);
	declareFunction("fsut_prioritizer_language_mt", "FSUT-PRIORITIZER-LANGUAGE-MT", 1, 0, false);
	declareFunction("fsut_prioritizer_nice_level", "FSUT-PRIORITIZER-NICE-LEVEL", 1, 0, false);
	declareFunction("fsut_prioritizer_new_days", "FSUT-PRIORITIZER-NEW-DAYS", 1, 0, false);
	declareFunction("_csetf_fsut_prioritizer_stale_terms", "_CSETF-FSUT-PRIORITIZER-STALE-TERMS", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_missing_terms", "_CSETF-FSUT-PRIORITIZER-MISSING-TERMS", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_up_to_date_terms", "_CSETF-FSUT-PRIORITIZER-UP-TO-DATE-TERMS", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_thread", "_CSETF-FSUT-PRIORITIZER-THREAD", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_should_sleepP", "_CSETF-FSUT-PRIORITIZER-SHOULD-SLEEP?", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_verbosity", "_CSETF-FSUT-PRIORITIZER-VERBOSITY", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_domain_mt", "_CSETF-FSUT-PRIORITIZER-DOMAIN-MT", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_language_mt", "_CSETF-FSUT-PRIORITIZER-LANGUAGE-MT", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_nice_level", "_CSETF-FSUT-PRIORITIZER-NICE-LEVEL", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_new_days", "_CSETF-FSUT-PRIORITIZER-NEW-DAYS", 2, 0, false);
	declareFunction("make_fact_sheet_update_term_prioritizer", "MAKE-FACT-SHEET-UPDATE-TERM-PRIORITIZER", 0, 1, false);
	declareFunction("pprint_fsut_prioritizer", "PPRINT-FSUT-PRIORITIZER", 1, 2, false);
	declareFunction("register_fsut_prioritizer", "REGISTER-FSUT-PRIORITIZER", 1, 0, false);
	declareFunction("all_fact_sheet_update_term_prioritizers", "ALL-FACT-SHEET-UPDATE-TERM-PRIORITIZERS", 0, 0, false);
	declareFunction("find_fsut_prioritizer", "FIND-FSUT-PRIORITIZER", 0, 4, false);
	declareFunction("find_or_create_fact_sheet_update_term_prioritizer", "FIND-OR-CREATE-FACT-SHEET-UPDATE-TERM-PRIORITIZER", 0, 4, false);
	declareFunction("fsut_prioritizer_max_nice_level", "FSUT-PRIORITIZER-MAX-NICE-LEVEL", 0, 0, false);
	declareFunction("fsut_prioritizer_min_nice_level", "FSUT-PRIORITIZER-MIN-NICE-LEVEL", 0, 0, false);
	declareFunction("fsut_prioritizer_default_new_days", "FSUT-PRIORITIZER-DEFAULT-NEW-DAYS", 0, 0, false);
	declareFunction("new_fact_sheet_update_term_prioritizer", "NEW-FACT-SHEET-UPDATE-TERM-PRIORITIZER", 0, 5, false);
	declareFunction("fsut_prioritizer_queue_rank_func", "FSUT-PRIORITIZER-QUEUE-RANK-FUNC", 1, 0, false);
	declareFunction("fsut_prioritizer_queue_comp_func", "FSUT-PRIORITIZER-QUEUE-COMP-FUNC", 2, 0, false);
	declareFunction("renice_fsut_prioritizer", "RENICE-FSUT-PRIORITIZER", 1, 1, false);
	declareFunction("start_fsut_prioritizer", "START-FSUT-PRIORITIZER", 1, 0, false);
	declareFunction("stop_all_fsut_prioritizers", "STOP-ALL-FSUT-PRIORITIZERS", 0, 0, false);
	declareFunction("stop_fsut_prioritizer", "STOP-FSUT-PRIORITIZER", 1, 0, false);
	declareFunction("fsut_prioritizer_next_term", "FSUT-PRIORITIZER-NEXT-TERM", 1, 1, false);
	declareFunction("fsut_prioritizer_empty_p", "FSUT-PRIORITIZER-EMPTY-P", 1, 1, false);
	declareFunction("fsut_prioritizer_next_stale_term", "FSUT-PRIORITIZER-NEXT-STALE-TERM", 1, 0, false);
	declareFunction("fsut_prioritizer_next_missing_term", "FSUT-PRIORITIZER-NEXT-MISSING-TERM", 1, 0, false);
	declareFunction("fsut_prioritizer_next_up_to_date_term", "FSUT-PRIORITIZER-NEXT-UP-TO-DATE-TERM", 1, 0, false);
	declareFunction("clear_fsut_prioritizer_sleep_interval_from_nice_level", "CLEAR-FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL", 0, 0, false);
	declareFunction("remove_fsut_prioritizer_sleep_interval_from_nice_level", "REMOVE-FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL", 1, 1, false);
	declareFunction("fsut_prioritizer_sleep_interval_from_nice_level_internal", "FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL-INTERNAL", 2, 0, false);
	declareFunction("fsut_prioritizer_sleep_interval_from_nice_level", "FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL", 1, 1, false);
	declareFunction("fsut_prioritizer_place_terms", "FSUT-PRIORITIZER-PLACE-TERMS", 1, 0, false);
	declareFunction("fsut_prioritizer_place_term", "FSUT-PRIORITIZER-PLACE-TERM", 2, 0, false);
	declareFunction("add_to_prioritizer_queue", "ADD-TO-PRIORITIZER-QUEUE", 3, 0, false);
	declareFunction("sanity_check_prioritizer_queue", "SANITY-CHECK-PRIORITIZER-QUEUE", 1, 0, false);
	declareFunction("fact_sheet_status_p", "FACT-SHEET-STATUS-P", 1, 0, false);
	declareFunction("fact_sheet_status", "FACT-SHEET-STATUS", 1, 4, false);
	declareFunction("fact_sheet_file_status", "FACT-SHEET-FILE-STATUS", 5, 0, false);
	declareFunction("fact_sheet_file_staleP", "FACT-SHEET-FILE-STALE?", 1, 3, false);
	declareFunction("fact_sheet_file_has_invalid_assertionP", "FACT-SHEET-FILE-HAS-INVALID-ASSERTION?", 1, 0, false);
	declareFunction("fact_sheet_term_gaf_priority", "FACT-SHEET-TERM-GAF-PRIORITY", 1, 0, false);
	declareFunction("cb_fact_sheet_evaluation", "CB-FACT-SHEET-EVALUATION", 0, 1, false);
	declareFunction("print_one_eval_section", "PRINT-ONE-EVAL-SECTION", 2, 0, false);
	declareFunction("print_numbered_options", "PRINT-NUMBERED-OPTIONS", 3, 0, false);
	declareFunction("cb_handle_fact_sheet_evaluation", "CB-HANDLE-FACT-SHEET-EVALUATION", 1, 0, false);
	declareFunction("absolute_fact_sheet_eval_url", "ABSOLUTE-FACT-SHEET-EVAL-URL", 4, 0, false);
	declareFunction("html_emit_fact_sheet_evaluation_link", "HTML-EMIT-FACT-SHEET-EVALUATION-LINK", 1, 3, false);
	declareFunction("allowed_to_update_fact_sheet_with_sentenceP", "ALLOWED-TO-UPDATE-FACT-SHEET-WITH-SENTENCE?", 5, 0, false);
	declareFunction("mark_fact_sheet_term_modifiable", "MARK-FACT-SHEET-TERM-MODIFIABLE", 4, 0, false);
	declareFunction("cache_local_fact_sheet_data", "CACHE-LOCAL-FACT-SHEET-DATA", 5, 1, false);
	declareFunction("get_cached_local_fact_sheet_data", "GET-CACHED-LOCAL-FACT-SHEET-DATA", 4, 0, false);
	declareFunction("remove_cached_local_fact_sheet_data", "REMOVE-CACHED-LOCAL-FACT-SHEET-DATA", 4, 0, false);
	declareFunction("public_fact_sheet_ad_html", "PUBLIC-FACT-SHEET-AD-HTML", 0, 0, false);
	declareFunction("directory_and_filename_for_public_fact_sheet", "DIRECTORY-AND-FILENAME-FOR-PUBLIC-FACT-SHEET", 2, 1, false);
	declareFunction("relative_filename_for_public_fact_sheet", "RELATIVE-FILENAME-FOR-PUBLIC-FACT-SHEET", 2, 1, false);
	declareFunction("clear_get_public_fact_sheet_term_parent_directory_string", "CLEAR-GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING", 0, 0, false);
	declareFunction("remove_get_public_fact_sheet_term_parent_directory_string", "REMOVE-GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING", 3, 0, false);
	declareFunction("get_public_fact_sheet_term_parent_directory_string_internal", "GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING-INTERNAL", 3, 0, false);
	declareFunction("get_public_fact_sheet_term_parent_directory_string", "GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING", 3, 0, false);
	declareFunction("fact_sheet_filename_charP", "FACT-SHEET-FILENAME-CHAR?", 1, 0, false);
	declareFunction("note_term_to_file_mapping", "NOTE-TERM-TO-FILE-MAPPING", 4, 0, false);
	declareFunction("clear_terms_for_public_fact_sheets", "CLEAR-TERMS-FOR-PUBLIC-FACT-SHEETS", 0, 0, false);
	declareFunction("remove_terms_for_public_fact_sheets", "REMOVE-TERMS-FOR-PUBLIC-FACT-SHEETS", 0, 1, false);
	declareFunction("terms_for_public_fact_sheets_internal", "TERMS-FOR-PUBLIC-FACT-SHEETS-INTERNAL", 1, 0, false);
	declareFunction("terms_for_public_fact_sheets", "TERMS-FOR-PUBLIC-FACT-SHEETS", 0, 1, false);
	declareFunction("clear_types_for_public_fact_sheets", "CLEAR-TYPES-FOR-PUBLIC-FACT-SHEETS", 0, 0, false);
	declareFunction("remove_types_for_public_fact_sheets", "REMOVE-TYPES-FOR-PUBLIC-FACT-SHEETS", 0, 1, false);
	declareFunction("types_for_public_fact_sheets_internal", "TYPES-FOR-PUBLIC-FACT-SHEETS-INTERNAL", 1, 0, false);
	declareFunction("types_for_public_fact_sheets", "TYPES-FOR-PUBLIC-FACT-SHEETS", 0, 1, false);
	declareFunction("clear_fact_sheet_term_strings", "CLEAR-FACT-SHEET-TERM-STRINGS", 0, 0, false);
	declareFunction("remove_fact_sheet_term_strings", "REMOVE-FACT-SHEET-TERM-STRINGS", 1, 0, false);
	declareFunction("fact_sheet_term_strings_internal", "FACT-SHEET-TERM-STRINGS-INTERNAL", 1, 0, false);
	declareFunction("fact_sheet_term_strings", "FACT-SHEET-TERM-STRINGS", 1, 0, false);
	declareFunction("get_public_fact_sheet_string_mappings", "GET-PUBLIC-FACT-SHEET-STRING-MAPPINGS", 1, 0, false);
	declareFunction("get_public_fact_sheet_string_mappings_int", "GET-PUBLIC-FACT-SHEET-STRING-MAPPINGS-INT", 1, 0, false);
	declareFunction("clear_get_public_fact_sheet_string_url_mappings", "CLEAR-GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS", 0, 0, false);
	declareFunction("remove_get_public_fact_sheet_string_url_mappings", "REMOVE-GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS", 0, 2, false);
	declareFunction("get_public_fact_sheet_string_url_mappings_internal", "GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS-INTERNAL", 2, 0, false);
	declareFunction("get_public_fact_sheet_string_url_mappings", "GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS", 0, 2, false);
	declareFunction("dump_fact_sheet_string_url_mappings", "DUMP-FACT-SHEET-STRING-URL-MAPPINGS", 0, 2, false);
	declareFunction("convert_search_data_to_htaccess_redirects", "CONVERT-SEARCH-DATA-TO-HTACCESS-REDIRECTS", 0, 2, false);
	declareFunction("convert_search_data_to_sql_file", "CONVERT-SEARCH-DATA-TO-SQL-FILE", 0, 2, false);
	declareFunction("get_existing_public_fact_sheet_term_pairs", "GET-EXISTING-PUBLIC-FACT-SHEET-TERM-PAIRS", 0, 1, false);
	declareFunction("get_public_fact_sheet_string_url_mappings_as_json", "GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS-AS-JSON", 0, 3, false);
	declareFunction("print_one_string_term_url_mapping_as_json", "PRINT-ONE-STRING-TERM-URL-MAPPING-AS-JSON", 3, 0, false);
	declareFunction("filter_mappings_for_good_urls", "FILTER-MAPPINGS-FOR-GOOD-URLS", 2, 0, false);
	declareFunction("fact_sheet_properties_for_type", "FACT-SHEET-PROPERTIES-FOR-TYPE", 1, 0, false);
	declareFunction("get_fs_collection_name", "GET-FS-COLLECTION-NAME", 1, 0, false);
	declareFunction("get_fs_whitelist_types", "GET-FS-WHITELIST-TYPES", 1, 0, false);
	declareFunction("get_fs_blacklist_types", "GET-FS-BLACKLIST-TYPES", 1, 0, false);
	declareFunction("get_fs_quoted_blacklist_types", "GET-FS-QUOTED-BLACKLIST-TYPES", 1, 0, false);
	declareFunction("get_fs_blacklist_sources", "GET-FS-BLACKLIST-SOURCES", 1, 0, false);
	declareFunction("get_fs_default_starting_points_filename", "GET-FS-DEFAULT-STARTING-POINTS-FILENAME", 1, 0, false);
	declareFunction("get_domain_mt_for_fs_type", "GET-DOMAIN-MT-FOR-FS-TYPE", 1, 0, false);
	declareFunction("category_label_from_properties", "CATEGORY-LABEL-FROM-PROPERTIES", 2, 0, false);
	declareFunction("new_category_label", "NEW-CATEGORY-LABEL", 2, 0, false);
	declareFunction("category_label_string", "CATEGORY-LABEL-STRING", 1, 0, false);
	declareFunction("category_label_pred", "CATEGORY-LABEL-PRED", 1, 0, false);
	declareFunction("category_label_style", "CATEGORY-LABEL-STYLE", 1, 0, false);
	declareFunction("get_sort_fn_from_properties", "GET-SORT-FN-FROM-PROPERTIES", 1, 0, false);
	declareFunction("default_fact_sheet_paragraph_retrieval_time_sort_fn", "DEFAULT-FACT-SHEET-PARAGRAPH-RETRIEVAL-TIME-SORT-FN", 2, 0, false);
	declareFunction("incyc_higher_priority_categoryP", "INCYC-HIGHER-PRIORITY-CATEGORY?", 2, 0, false);
	declareFunction("get_public_fact_sheet_properties", "GET-PUBLIC-FACT-SHEET-PROPERTIES", 0, 0, false);
	declareFunction("get_public_fact_sheet_for_term", "GET-PUBLIC-FACT-SHEET-FOR-TERM", 1, 2, false);
	declareFunction("start_new_public_fact_sheet_updater", "START-NEW-PUBLIC-FACT-SHEET-UPDATER", 0, 2, false);
	declareFunction("ensure_all_public_fact_sheets", "ENSURE-ALL-PUBLIC-FACT-SHEETS", 0, 2, false);
	declareFunction("ensure_public_fact_sheet_for_term", "ENSURE-PUBLIC-FACT-SHEET-FOR-TERM", 1, 2, false);
	declareFunction("publicize_fact_sheet_links", "PUBLICIZE-FACT-SHEET-LINKS", 2, 0, false);
	declareFunction("publicize_fact_sheet_link", "PUBLICIZE-FACT-SHEET-LINK", 4, 1, false);
	declareFunction("update_public_fact_sheets_from_id_file", "UPDATE-PUBLIC-FACT-SHEETS-FROM-ID-FILE", 1, 3, false);
	declareFunction("any_token_containsP", "ANY-TOKEN-CONTAINS?", 2, 0, false);
	declareFunction("write_public_fact_sheets_starting_points_data", "WRITE-PUBLIC-FACT-SHEETS-STARTING-POINTS-DATA", 1, 1, false);
	declareFunction("write_public_fact_sheets_starting_points_data_int", "WRITE-PUBLIC-FACT-SHEETS-STARTING-POINTS-DATA-INT", 3, 0, false);
	declareFunction("public_fact_sheet_starting_point_okP", "PUBLIC-FACT-SHEET-STARTING-POINT-OK?", 2, 0, false);
	declareFunction("suggested_starting_points_for_public_fact_sheet_browsing", "SUGGESTED-STARTING-POINTS-FOR-PUBLIC-FACT-SHEET-BROWSING", 1, 0, false);
	declareFunction("clear_cached_num_gaf_arg_index", "CLEAR-CACHED-NUM-GAF-ARG-INDEX", 0, 0, false);
	declareFunction("remove_cached_num_gaf_arg_index", "REMOVE-CACHED-NUM-GAF-ARG-INDEX", 1, 0, false);
	declareFunction("cached_num_gaf_arg_index_internal", "CACHED-NUM-GAF-ARG-INDEX-INTERNAL", 1, 0, false);
	declareFunction("cached_num_gaf_arg_index", "CACHED-NUM-GAF-ARG-INDEX", 1, 0, false);
	declareFunction("dump_fact_sheet_sentences_old", "DUMP-FACT-SHEET-SENTENCES-OLD", 1, 2, false);
	declareFunction("dump_fact_sheet_sentences", "DUMP-FACT-SHEET-SENTENCES", 1, 1, false);
	declareFunction("dump_fact_sheet_sentences_for_term", "DUMP-FACT-SHEET-SENTENCES-FOR-TERM", 4, 0, false);
	declareFunction("subloop_reserved_initialize_fact_sheet_kitchen_sink_test_case_class", "SUBLOOP-RESERVED-INITIALIZE-FACT-SHEET-KITCHEN-SINK-TEST-CASE-CLASS", 1, 0, false);
	declareFunction("subloop_reserved_initialize_fact_sheet_kitchen_sink_test_case_instance", "SUBLOOP-RESERVED-INITIALIZE-FACT-SHEET-KITCHEN-SINK-TEST-CASE-INSTANCE", 1, 0, false);
	declareFunction("fact_sheet_kitchen_sink_test_case_p", "FACT-SHEET-KITCHEN-SINK-TEST-CASE-P", 1, 0, false);
	declareFunction("fact_sheets_term_from_string_containsP", "FACT-SHEETS-TERM-FROM-STRING-CONTAINS?", 2, 0, false);
	declareFunction("cycls_are_membersP", "CYCLS-ARE-MEMBERS?", 3, 0, false);
	return NIL;
    }

    public static SubLObject declare_fact_sheets_file() {
	if (SubLFiles.USE_V1) {
	    declareMacro("allowing_fact_sheet_evalations", "ALLOWING-FACT-SHEET-EVALATIONS");
	    declareMacro("disallowing_fact_sheet_evalations", "DISALLOWING-FACT-SHEET-EVALATIONS");
	    declareFunction("allow_fact_sheet_evaluationsP", "ALLOW-FACT-SHEET-EVALUATIONS?", 0, 0, false);
	    declareFunction("allow_fact_sheet_evaluations", "ALLOW-FACT-SHEET-EVALUATIONS", 0, 1, false);
	    declareFunction("indexical_fact_sheet_query_mt", "INDEXICAL-FACT-SHEET-QUERY-MT", 0, 0, false);
	    declareFunction("indexical_fact_sheet_table_type", "INDEXICAL-FACT-SHEET-TABLE-TYPE", 0, 0, false);
	    declareFunction("indexical_fact_sheet_sentence", "INDEXICAL-FACT-SHEET-SENTENCE", 0, 0, false);
	    declareMacro("with_new_fact_sheet_problem_store", "WITH-NEW-FACT-SHEET-PROBLEM-STORE");
	    declareMacro("within_fact_sheet_paraphrase", "WITHIN-FACT-SHEET-PARAPHRASE");
	    declareFunction("within_fact_sheet_paraphraseP", "WITHIN-FACT-SHEET-PARAPHRASE?", 0, 0, false);
	    declareFunction("indexical_fact_sheet_topic", "INDEXICAL-FACT-SHEET-TOPIC", 0, 0, false);
	    declareMacro("with_fact_sheet_focal_term", "WITH-FACT-SHEET-FOCAL-TERM");
	    declareFunction("chmod_safe_to_useP", "CHMOD-SAFE-TO-USE?", 0, 0, false);
	    declareMacro("writing_fact_sheet_file", "WRITING-FACT-SHEET-FILE");
	    declareMacro("writing_fact_sheet_data_file", "WRITING-FACT-SHEET-DATA-FILE");
	    declareMacro("reading_fact_sheet_data_file", "READING-FACT-SHEET-DATA-FILE");
	    declareFunction("clear_fact_sheet_default_language_mt", "CLEAR-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	    declareFunction("remove_fact_sheet_default_language_mt", "REMOVE-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	    declareFunction("fact_sheet_default_language_mt_internal", "FACT-SHEET-DEFAULT-LANGUAGE-MT-INTERNAL", 0, 0, false);
	    declareFunction("fact_sheet_default_language_mt", "FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	    declareFunction("clear_build_fact_sheet_default_language_mt", "CLEAR-BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	    declareFunction("remove_build_fact_sheet_default_language_mt", "REMOVE-BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	    declareFunction("build_fact_sheet_default_language_mt_internal", "BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT-INTERNAL", 0, 0, false);
	    declareFunction("build_fact_sheet_default_language_mt", "BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	    declareFunction("fact_sheet_default_language_mt_for_term", "FACT-SHEET-DEFAULT-LANGUAGE-MT-FOR-TERM", 1, 0, false);
	    declareFunction("clear_fact_sheet_default_domain_mt", "CLEAR-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	    declareFunction("remove_fact_sheet_default_domain_mt", "REMOVE-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	    declareFunction("fact_sheet_default_domain_mt_internal", "FACT-SHEET-DEFAULT-DOMAIN-MT-INTERNAL", 0, 0, false);
	    declareFunction("fact_sheet_default_domain_mt", "FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	    declareFunction("clear_build_fact_sheet_default_domain_mt", "CLEAR-BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	    declareFunction("remove_build_fact_sheet_default_domain_mt", "REMOVE-BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	    declareFunction("build_fact_sheet_default_domain_mt_internal", "BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT-INTERNAL", 0, 0, false);
	    declareFunction("build_fact_sheet_default_domain_mt", "BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	    declareFunction("fact_sheet_default_domain_mt_for_term", "FACT-SHEET-DEFAULT-DOMAIN-MT-FOR-TERM", 1, 0, false);
	    declareFunction("get_linkless_fact_sheet_for_term_in_html", "GET-LINKLESS-FACT-SHEET-FOR-TERM-IN-HTML", 1, 4, false);
	    declareFunction("convert_fact_sheet_sentence_links_to_spans", "CONVERT-FACT-SHEET-SENTENCE-LINKS-TO-SPANS", 1, 0, false);
	    declareFunction("convert_fact_sheet_link_to_span", "CONVERT-FACT-SHEET-LINK-TO-SPAN", 4, 0, false);
	    declareFunction("get_updated_fact_sheet_for_term_and_sentence_in_html", "GET-UPDATED-FACT-SHEET-FOR-TERM-AND-SENTENCE-IN-HTML", 2, 4, false);
	    declareFunction("get_updated_fact_sheet_for_term_and_sentence_in_markup_internal", "GET-UPDATED-FACT-SHEET-FOR-TERM-AND-SENTENCE-IN-MARKUP-INTERNAL", 6, 0, false);
	    declareFunction("get_fact_sheet_for_term_in_xml_with_only_kb_specified_content", "GET-FACT-SHEET-FOR-TERM-IN-XML-WITH-ONLY-KB-SPECIFIED-CONTENT", 1, 4, false);
	    declareFunction("get_fact_sheet_for_term_in_html", "GET-FACT-SHEET-FOR-TERM-IN-HTML", 1, 4, false);
	    declareFunction("get_fact_sheet_for_term_in_markup_language", "GET-FACT-SHEET-FOR-TERM-IN-MARKUP-LANGUAGE", 1, 4, false);
	    declareFunction("get_fact_sheet_for_term_in_markup_internal", "GET-FACT-SHEET-FOR-TERM-IN-MARKUP-INTERNAL", 5, 1, false);
	    declareFunction("fact_sheet_filter_footnotes_for_sources", "FACT-SHEET-FILTER-FOOTNOTES-FOR-SOURCES", 2, 0, false);
	    declareMacro("html_fact_sheet_optional_section", "HTML-FACT-SHEET-OPTIONAL-SECTION");
	    declareFunction("footnote_text", "FOOTNOTE-TEXT", 1, 0, false);
	    declareFunction("footnote_source", "FOOTNOTE-SOURCE", 1, 0, false);
	    declareFunction("generate_fact_sheet_data", "GENERATE-FACT-SHEET-DATA", 4, 0, false);
	    declareFunction("fact_sheet_stats_p", "FACT-SHEET-STATS-P", 1, 0, false);
	    declareFunction("possibly_fact_sheet_domain_mtP", "POSSIBLY-FACT-SHEET-DOMAIN-MT?", 1, 0, false);
	    declareFunction("new_fact_sheet_stats", "NEW-FACT-SHEET-STATS", 7, 0, false);
	    declareFunction("fact_sheet_texts_from_data", "FACT-SHEET-TEXTS-FROM-DATA", 5, 0, false);
	    declareFunction("fact_sheet_prefer_slot_values_for_categoryP", "FACT-SHEET-PREFER-SLOT-VALUES-FOR-CATEGORY?", 2, 0, false);
	    declareFunction("fact_sheet_markup_tables_from_data", "FACT-SHEET-MARKUP-TABLES-FROM-DATA", 6, 0, false);
	    declareFunction("fact_sheet_xml_table_from_data", "FACT-SHEET-XML-TABLE-FROM-DATA", 7, 0, false);
	    declareFunction("fact_sheet_html_table_from_data", "FACT-SHEET-HTML-TABLE-FROM-DATA", 7, 0, false);
	    declareFunction("sort_fact_sheet_table_data", "SORT-FACT-SHEET-TABLE-DATA", 1, 0, false);
	    declareFunction("fact_sheet_table_sentence_data_predicate", "FACT-SHEET-TABLE-SENTENCE-DATA-PREDICATE", 1, 0, false);
	    declareFunction("find_assertion_for_fact_sheet_sentence", "FIND-ASSERTION-FOR-FACT-SHEET-SENTENCE", 2, 0, false);
	    declareFunction("fact_sheet_table_title", "FACT-SHEET-TABLE-TITLE", 2, 0, false);
	    declareFunction("output_fact_sheet_table_title_row", "OUTPUT-FACT-SHEET-TABLE-TITLE-ROW", 2, 0, false);
	    declareFunction("output_fact_sheet_table_sentence_link", "OUTPUT-FACT-SHEET-TABLE-SENTENCE-LINK", 1, 0, false);
	    declareFunction("fact_sheet_table_header_values", "FACT-SHEET-TABLE-HEADER-VALUES", 2, 0, false);
	    declareFunction("fact_sheet_table_data_for_value", "FACT-SHEET-TABLE-DATA-FOR-VALUE", 6, 0, false);
	    declareFunction("fact_sheet_table_specs", "FACT-SHEET-TABLE-SPECS", 0, 2, false);
	    declareFunction("section_table_specs", "SECTION-TABLE-SPECS", 2, 0, false);
	    declareFunction("table_types_from_section_table_specs", "TABLE-TYPES-FROM-SECTION-TABLE-SPECS", 1, 0, false);
	    declareFunction("table_data_for_sentence", "TABLE-DATA-FOR-SENTENCE", 2, 3, false);
	    declareFunction("dereference_fact_sheet_indexicals", "DEREFERENCE-FACT-SHEET-INDEXICALS", 1, 0, false);
	    declareFunction("fact_sheet_anytime_mt", "FACT-SHEET-ANYTIME-MT", 1, 0, false);
	    declareFunction("possibly_reserve_sentence_for_tables", "POSSIBLY-RESERVE-SENTENCE-FOR-TABLES", 3, 3, false);
	    declareFunction("fact_sheet_sentence_conjuncts", "FACT-SHEET-SENTENCE-CONJUNCTS", 1, 0, false);
	    declareFunction("valid_sentence_data_for_table_typeP", "VALID-SENTENCE-DATA-FOR-TABLE-TYPE?", 2, 0, false);
	    declareFunction("fact_sheet_table_type_width_internal", "FACT-SHEET-TABLE-TYPE-WIDTH-INTERNAL", 1, 0, false);
	    declareFunction("fact_sheet_table_type_width", "FACT-SHEET-TABLE-TYPE-WIDTH", 1, 0, false);
	    declareFunction("fact_sheet_sort_paragraphs_at_retrieval_time", "FACT-SHEET-SORT-PARAGRAPHS-AT-RETRIEVAL-TIME", 2, 0, false);
	    declareFunction("possibly_convert_summary_sentence_to_cycl", "POSSIBLY-CONVERT-SUMMARY-SENTENCE-TO-CYCL", 1, 0, false);
	    declareFunction("new_summary_sentence", "NEW-SUMMARY-SENTENCE", 2, 0, false);
	    declareFunction("summary_sentence_cycl", "SUMMARY-SENTENCE-CYCL", 1, 0, false);
	    declareFunction("summary_sentence_plist_cycl", "SUMMARY-SENTENCE-PLIST-CYCL", 1, 0, false);
	    declareFunction("summary_sentence_assertions", "SUMMARY-SENTENCE-ASSERTIONS", 1, 0, false);
	    declareFunction("summary_sentence_sources", "SUMMARY-SENTENCE-SOURCES", 1, 0, false);
	    declareFunction("summary_sentence_plistP", "SUMMARY-SENTENCE-PLIST?", 1, 0, false);
	    declareFunction("construct_fact_sheet_paragraph", "CONSTRUCT-FACT-SHEET-PARAGRAPH", 7, 1, false);
	    declareFunction("fact_sheet_slot_values", "FACT-SHEET-SLOT-VALUES", 2, 0, false);
	    declareFunction("fact_sheet_slot_value_string", "FACT-SHEET-SLOT-VALUE-STRING", 1, 0, false);
	    declareFunction("fact_sheet_summary_sentence_passes_data_gathering_time_filterP", "FACT-SHEET-SUMMARY-SENTENCE-PASSES-DATA-GATHERING-TIME-FILTER?", 3, 0, false);
	    declareFunction("fact_sheet_summary_sentence_passes_retrieval_time_filterP", "FACT-SHEET-SUMMARY-SENTENCE-PASSES-RETRIEVAL-TIME-FILTER?", 2, 3, false);
	    declareFunction("fact_sheet_blacklisted_sources", "FACT-SHEET-BLACKLISTED-SOURCES", 2, 0, false);
	    declareFunction("any_term_in_assertion_list_passes_test", "ANY-TERM-IN-ASSERTION-LIST-PASSES-TEST", 3, 0, false);
	    declareFunction("fact_sheet_title", "FACT-SHEET-TITLE", 1, 0, false);
	    declareFunction("generate_fact_sheet_markup", "GENERATE-FACT-SHEET-MARKUP", 7, 0, false);
	    declareFunction("generate_fact_sheet_xml", "GENERATE-FACT-SHEET-XML", 7, 0, false);
	    declareFunction("generate_fact_sheet_html", "GENERATE-FACT-SHEET-HTML", 7, 0, false);
	    declareFunction("emit_fact_sheet_opencyc_uri", "EMIT-FACT-SHEET-OPENCYC-URI", 3, 0, false);
	    declareFunction("get_fact_sheet_for_term_id_in_html", "GET-FACT-SHEET-FOR-TERM-ID-IN-HTML", 1, 4, false);
	    declareFunction("clear_all_fact_sheet_caches", "CLEAR-ALL-FACT-SHEET-CACHES", 0, 0, false);
	    declareFunction("fact_sheet_request_denots", "FACT-SHEET-REQUEST-DENOTS", 1, 0, false);
	    declareFunction("get_possible_fact_sheet_terms_mentioned_in_string", "GET-POSSIBLE-FACT-SHEET-TERMS-MENTIONED-IN-STRING", 2, 1, false);
	    declareFunction("get_word_denots_for_fact_sheets", "GET-WORD-DENOTS-FOR-FACT-SHEETS", 1, 0, false);
	    declareFunction("term_ok_for_cae_query_search_term_box_p", "TERM-OK-FOR-CAE-QUERY-SEARCH-TERM-BOX-P", 1, 0, false);
	    declareFunction("clear_scalar_interval_p", "CLEAR-SCALAR-INTERVAL-P", 0, 0, false);
	    declareFunction("remove_scalar_interval_p", "REMOVE-SCALAR-INTERVAL-P", 1, 1, false);
	    declareFunction("scalar_interval_p_internal", "SCALAR-INTERVAL-P-INTERNAL", 2, 0, false);
	    declareFunction("scalar_interval_p", "SCALAR-INTERVAL-P", 1, 1, false);
	    declareFunction("term_ok_for_fact_sheet_p", "TERM-OK-FOR-FACT-SHEET-P", 1, 1, false);
	    declareFunction("mini_fact_sheet_term_types", "MINI-FACT-SHEET-TERM-TYPES", 0, 0, false);
	    declareFunction("fact_sheet_data_path", "FACT-SHEET-DATA-PATH", 0, 0, false);
	    declareFunction("set_fact_sheet_data_path", "SET-FACT-SHEET-DATA-PATH", 1, 0, false);
	    declareFunction("fact_sheet_term_id", "FACT-SHEET-TERM-ID", 1, 1, false);
	    declareFunction("fact_sheet_term_legacy_id", "FACT-SHEET-TERM-LEGACY-ID", 1, 0, false);
	    declareFunction("clear_fact_sheet_term_id_low", "CLEAR-FACT-SHEET-TERM-ID-LOW", 0, 0, false);
	    declareFunction("remove_fact_sheet_term_id_low", "REMOVE-FACT-SHEET-TERM-ID-LOW", 1, 1, false);
	    declareFunction("fact_sheet_term_id_low_internal", "FACT-SHEET-TERM-ID-LOW-INTERNAL", 2, 0, false);
	    declareFunction("fact_sheet_term_id_low", "FACT-SHEET-TERM-ID-LOW", 1, 1, false);
	    declareFunction("possible_fact_sheet_term_id_p", "POSSIBLE-FACT-SHEET-TERM-ID-P", 1, 0, false);
	    declareFunction("fact_sheet_term_idP", "FACT-SHEET-TERM-ID?", 1, 0, false);
	    declareFunction("fact_sheet_term_from_id", "FACT-SHEET-TERM-FROM-ID", 1, 1, false);
	    declareFunction("clear_warn_unknown_fact_sheet_term_id", "CLEAR-WARN-UNKNOWN-FACT-SHEET-TERM-ID", 0, 0, false);
	    declareFunction("remove_warn_unknown_fact_sheet_term_id", "REMOVE-WARN-UNKNOWN-FACT-SHEET-TERM-ID", 1, 0, false);
	    declareFunction("warn_unknown_fact_sheet_term_id_internal", "WARN-UNKNOWN-FACT-SHEET-TERM-ID-INTERNAL", 1, 0, false);
	    declareFunction("warn_unknown_fact_sheet_term_id", "WARN-UNKNOWN-FACT-SHEET-TERM-ID", 1, 0, false);
	    declareFunction("fact_sheet_term_from_span_id", "FACT-SHEET-TERM-FROM-SPAN-ID", 1, 1, false);
	    declareFunction("paraphrase_fact_sheet_sentences", "PARAPHRASE-FACT-SHEET-SENTENCES", 5, 0, false);
	    declareFunction("fact_sheet_force_bullets_for_categoryP", "FACT-SHEET-FORCE-BULLETS-FOR-CATEGORY?", 1, 0, false);
	    declareFunction("fact_sheet_footnotes_for_sources", "FACT-SHEET-FOOTNOTES-FOR-SOURCES", 1, 1, false);
	    declareFunction("fact_sheet_footnote_for_source", "FACT-SHEET-FOOTNOTE-FOR-SOURCE", 3, 0, false);
	    declareFunction("sort_fact_sheet_texts_by_category", "SORT-FACT-SHEET-TEXTS-BY-CATEGORY", 1, 0, false);
	    declareFunction("higher_priority_fact_sheet_categoryP", "HIGHER-PRIORITY-FACT-SHEET-CATEGORY?", 2, 0, false);
	    declareFunction("substitute_fact_sheet_labels_for_categories", "SUBSTITUTE-FACT-SHEET-LABELS-FOR-CATEGORIES", 3, 0, false);
	    declareFunction("substitute_fact_sheet_label_for_category", "SUBSTITUTE-FACT-SHEET-LABEL-FOR-CATEGORY", 3, 0, false);
	    declareFunction("clear_fact_sheet_sentence_group_summary", "CLEAR-FACT-SHEET-SENTENCE-GROUP-SUMMARY", 0, 0, false);
	    declareFunction("remove_fact_sheet_sentence_group_summary", "REMOVE-FACT-SHEET-SENTENCE-GROUP-SUMMARY", 6, 1, false);
	    declareFunction("fact_sheet_sentence_group_summary_internal", "FACT-SHEET-SENTENCE-GROUP-SUMMARY-INTERNAL", 7, 0, false);
	    declareFunction("fact_sheet_sentence_group_summary", "FACT-SHEET-SENTENCE-GROUP-SUMMARY", 6, 1, false);
	    declareFunction("simulate_fact_sheet_sentence_paraphrase", "SIMULATE-FACT-SHEET-SENTENCE-PARAPHRASE", 2, 2, false);
	    declareFunction("simulate_fact_sheet_sentences_paraphrase", "SIMULATE-FACT-SHEET-SENTENCES-PARAPHRASE", 2, 2, false);
	    declareFunction("fact_sheet_bogus_hyperlink_open_tag_for_term", "FACT-SHEET-BOGUS-HYPERLINK-OPEN-TAG-FOR-TERM", 2, 0, false);
	    declareFunction("fact_sheet_bogus_hyperlink_open_tag_for_term_id", "FACT-SHEET-BOGUS-HYPERLINK-OPEN-TAG-FOR-TERM-ID", 1, 0, false);
	    declareFunction("fact_sheet_bogus_url_for_term", "FACT-SHEET-BOGUS-URL-FOR-TERM", 1, 0, false);
	    declareFunction("fact_sheet_bogus_url_for_term_id", "FACT-SHEET-BOGUS-URL-FOR-TERM-ID", 1, 0, false);
	    declareFunction("strip_bogus_hyperlinks_for_term_id", "STRIP-BOGUS-HYPERLINKS-FOR-TERM-ID", 2, 0, false);
	    declareFunction("fact_sheet_html_find_marked_up_terms", "FACT-SHEET-HTML-FIND-MARKED-UP-TERMS", 1, 1, false);
	    declareFunction("fact_sheet_html_find_marked_up_terms_fast", "FACT-SHEET-HTML-FIND-MARKED-UP-TERMS-FAST", 1, 1, false);
	    declareFunction("get_term_and_close_tag_from_token", "GET-TERM-AND-CLOSE-TAG-FROM-TOKEN", 1, 0, false);
	    declareFunction("fact_sheet_html_find_matching_close_tag_start", "FACT-SHEET-HTML-FIND-MATCHING-CLOSE-TAG-START", 4, 0, false);
	    declareFunction("fact_sheet_term_inappropriate_for_hyperlinkP", "FACT-SHEET-TERM-INAPPROPRIATE-FOR-HYPERLINK?", 1, 0, false);
	    declareFunction("mark_up_fact_sheet_sentenceP", "MARK-UP-FACT-SHEET-SENTENCE?", 2, 0, false);
	    declareFunction("fact_sheet_possibly_mark_up_sentence_paraphrase", "FACT-SHEET-POSSIBLY-MARK-UP-SENTENCE-PARAPHRASE", 3, 0, false);
	    declareFunction("fact_sheet_mark_up_sentence_paraphrase", "FACT-SHEET-MARK-UP-SENTENCE-PARAPHRASE", 3, 0, false);
	    declareFunction("remove_link", "REMOVE-LINK", 3, 0, false);
	    declareFunction("fact_sheet_sentence_id_function", "FACT-SHEET-SENTENCE-ID-FUNCTION", 1, 0, false);
	    declareFunction("xml_factsheetsP", "XML-FACTSHEETS?", 1, 0, false);
	    declareFunction("fact_sheet_sentence_expand_coordination_sets", "FACT-SHEET-SENTENCE-EXPAND-COORDINATION-SETS", 1, 0, false);
	    declareFunction("fact_sheet_span_for_term", "FACT-SHEET-SPAN-FOR-TERM", 2, 0, false);
	    declareFunction("replace_fact_sheet_markups", "REPLACE-FACT-SHEET-MARKUPS", 2, 1, false);
	    declareFunction("replace_fact_sheet_markups_fast", "REPLACE-FACT-SHEET-MARKUPS-FAST", 2, 1, false);
	    declareFunction("fact_sheet_max_sentences_per_pred", "FACT-SHEET-MAX-SENTENCES-PER-PRED", 1, 0, false);
	    declareFunction("display_fact_sheet", "DISPLAY-FACT-SHEET", 5, 0, false);
	    declareFunction("display_fact_sheet_with_internal_styles", "DISPLAY-FACT-SHEET-WITH-INTERNAL-STYLES", 4, 0, false);
	    declareFunction("display_fact_sheet_for_external_styles", "DISPLAY-FACT-SHEET-FOR-EXTERNAL-STYLES", 4, 1, false);
	    declareFunction("display_fact_sheet_xml", "DISPLAY-FACT-SHEET-XML", 4, 1, false);
	    declareFunction("print_fact_sheet_stats", "PRINT-FACT-SHEET-STATS", 2, 1, false);
	    declareFunction("fact_sheet_kb_version_string", "FACT-SHEET-KB-VERSION-STRING", 1, 0, false);
	    declareFunction("fact_sheet_cyc_revision_string", "FACT-SHEET-CYC-REVISION-STRING", 1, 0, false);
	    declareFunction("fact_sheet_info_string", "FACT-SHEET-INFO-STRING", 2, 0, false);
	    declareFunction("fact_sheet_pph_demerit_cutoff", "FACT-SHEET-PPH-DEMERIT-CUTOFF", 0, 0, false);
	    declareFunction("fact_sheet_min_paragraph_length", "FACT-SHEET-MIN-PARAGRAPH-LENGTH", 0, 0, false);
	    declareFunction("fact_sheet_verbosity_p", "FACT-SHEET-VERBOSITY-P", 1, 0, false);
	    declareFunction("fact_sheet_image_root_placeholder", "FACT-SHEET-IMAGE-ROOT-PLACEHOLDER", 0, 0, false);
	    declareFunction("fact_sheet_image_url_for_term", "FACT-SHEET-IMAGE-URL-FOR-TERM", 1, 1, false);
	    declareFunction("fact_sheet_base_url_placeholder", "FACT-SHEET-BASE-URL-PLACEHOLDER", 0, 0, false);
	    declareFunction("fact_sheet_html_replace_placeholders", "FACT-SHEET-HTML-REPLACE-PLACEHOLDERS", 2, 0, false);
	    declareFunction("fact_sheet_html_contains_replaceable_colorsP", "FACT-SHEET-HTML-CONTAINS-REPLACEABLE-COLORS?", 1, 0, false);
	    declareFunction("fact_sheet_html_replace_colors", "FACT-SHEET-HTML-REPLACE-COLORS", 1, 0, false);
	    declareFunction("fact_sheet_html_contains_base_url_placeholderP", "FACT-SHEET-HTML-CONTAINS-BASE-URL-PLACEHOLDER?", 1, 0, false);
	    declareFunction("fact_sheet_html_replace_base_url_placeholder", "FACT-SHEET-HTML-REPLACE-BASE-URL-PLACEHOLDER", 1, 0, false);
	    declareFunction("fact_sheet_html_contains_image_root_placeholderP", "FACT-SHEET-HTML-CONTAINS-IMAGE-ROOT-PLACEHOLDER?", 1, 0, false);
	    declareFunction("clear_fact_sheet_image_file_root_url", "CLEAR-FACT-SHEET-IMAGE-FILE-ROOT-URL", 0, 0, false);
	    declareFunction("remove_fact_sheet_image_file_root_url", "REMOVE-FACT-SHEET-IMAGE-FILE-ROOT-URL", 0, 0, false);
	    declareFunction("fact_sheet_image_file_root_url_internal", "FACT-SHEET-IMAGE-FILE-ROOT-URL-INTERNAL", 0, 0, false);
	    declareFunction("fact_sheet_image_file_root_url", "FACT-SHEET-IMAGE-FILE-ROOT-URL", 0, 0, false);
	    declareFunction("use_fact_sheet_image_file_root_urlP", "USE-FACT-SHEET-IMAGE-FILE-ROOT-URL?", 0, 0, false);
	    declareFunction("relative_fact_sheet_image_url", "RELATIVE-FACT-SHEET-IMAGE-URL", 0, 1, false);
	    declareFunction("fact_sheet_html_replace_image_root_placeholder", "FACT-SHEET-HTML-REPLACE-IMAGE-ROOT-PLACEHOLDER", 2, 0, false);
	    declareFunction("clear_fact_sheet_image_url_root", "CLEAR-FACT-SHEET-IMAGE-URL-ROOT", 0, 0, false);
	    declareFunction("remove_fact_sheet_image_url_root", "REMOVE-FACT-SHEET-IMAGE-URL-ROOT", 1, 0, false);
	    declareFunction("fact_sheet_image_url_root_internal", "FACT-SHEET-IMAGE-URL-ROOT-INTERNAL", 1, 0, false);
	    declareFunction("fact_sheet_image_url_root", "FACT-SHEET-IMAGE-URL-ROOT", 1, 0, false);
	    declareFunction("fact_sheet_image_path_okP", "FACT-SHEET-IMAGE-PATH-OK?", 1, 0, false);
	    declareFunction("fact_sheet_query_sentence", "FACT-SHEET-QUERY-SENTENCE", 0, 2, false);
	    declareFunction("get_mini_fact_sheet_for_term_in_html", "GET-MINI-FACT-SHEET-FOR-TERM-IN-HTML", 1, 2, false);
	    declareFunction("clear_get_mini_fact_sheet_for_term_cached", "CLEAR-GET-MINI-FACT-SHEET-FOR-TERM-CACHED", 0, 0, false);
	    declareFunction("remove_get_mini_fact_sheet_for_term_cached", "REMOVE-GET-MINI-FACT-SHEET-FOR-TERM-CACHED", 4, 0, false);
	    declareFunction("get_mini_fact_sheet_for_term_cached_internal", "GET-MINI-FACT-SHEET-FOR-TERM-CACHED-INTERNAL", 4, 0, false);
	    declareFunction("get_mini_fact_sheet_for_term_cached", "GET-MINI-FACT-SHEET-FOR-TERM-CACHED", 4, 0, false);
	    declareFunction("fallback_mini_fact_sheet_for_term_in_html", "FALLBACK-MINI-FACT-SHEET-FOR-TERM-IN-HTML", 3, 0, false);
	    declareFunction("fact_sheet_query_properties", "FACT-SHEET-QUERY-PROPERTIES", 0, 2, false);
	    declareFunction("omitted_fact_sheet_sentences", "OMITTED-FACT-SHEET-SENTENCES", 0, 0, false);
	    declareFunction("fact_sheet_sentences_for_assertion_and_term", "FACT-SHEET-SENTENCES-FOR-ASSERTION-AND-TERM", 2, 1, false);
	    declareFunction("fact_sheet_sentences_for_term", "FACT-SHEET-SENTENCES-FOR-TERM", 1, 1, false);
	    declareFunction("clear_fact_sheet_sentences_for_term_from_kbq", "CLEAR-FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ", 0, 0, false);
	    declareFunction("remove_fact_sheet_sentences_for_term_from_kbq", "REMOVE-FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ", 2, 3, false);
	    declareFunction("fact_sheet_sentences_for_term_from_kbq_internal", "FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ-INTERNAL", 5, 0, false);
	    declareFunction("fact_sheet_sentences_for_term_from_kbq", "FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ", 2, 3, false);
	    declareFunction("clear_fact_sheet_sentences_for_term_internal", "CLEAR-FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL", 0, 0, false);
	    declareFunction("remove_fact_sheet_sentences_for_term_internal", "REMOVE-FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL", 4, 0, false);
	    declareFunction("fact_sheet_sentences_for_term_internal_internal", "FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL-INTERNAL", 4, 0, false);
	    declareFunction("fact_sheet_sentences_for_term_internal", "FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL", 4, 0, false);
	    declareFunction("fact_sheet_sentence_about_topicP", "FACT-SHEET-SENTENCE-ABOUT-TOPIC?", 2, 3, false);
	    declareFunction("clear_fact_sheet_sentence_trivially_impliesP", "CLEAR-FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?", 0, 0, false);
	    declareFunction("remove_fact_sheet_sentence_trivially_impliesP", "REMOVE-FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?", 2, 3, false);
	    declareFunction("fact_sheet_sentence_trivially_impliesP_internal", "FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?-INTERNAL", 5, 0, false);
	    declareFunction("fact_sheet_sentence_trivially_impliesP", "FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?", 2, 3, false);
	    declareFunction("fact_highly_prevalent_among_instancesP", "FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?", 4, 0, false);
	    declareFunction("clear_fact_highly_prevalent_among_instancesP_cached", "CLEAR-FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED", 0, 0, false);
	    declareFunction("remove_fact_highly_prevalent_among_instancesP_cached", "REMOVE-FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED", 3, 0, false);
	    declareFunction("fact_highly_prevalent_among_instancesP_cached_internal", "FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED-INTERNAL", 3, 0, false);
	    declareFunction("fact_highly_prevalent_among_instancesP_cached", "FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED", 3, 0, false);
	    declareFunction("fact_sheet_sentence_formula", "FACT-SHEET-SENTENCE-FORMULA", 1, 0, false);
	    declareFunction("fact_sheet_trivial_meta_supportP", "FACT-SHEET-TRIVIAL-META-SUPPORT?", 2, 0, false);
	    declareFunction("assertion_mt_times_visibleP", "ASSERTION-MT-TIMES-VISIBLE?", 2, 0, false);
	    declareFunction("fact_sheet_skolem_time_intervalP", "FACT-SHEET-SKOLEM-TIME-INTERVAL?", 1, 0, false);
	    declareFunction("fact_sheet_skolem_time_interval_more_constrainedP", "FACT-SHEET-SKOLEM-TIME-INTERVAL-MORE-CONSTRAINED?", 2, 0, false);
	    declareFunction("fact_sheet_skolem_time_interval_subsuming_interval", "FACT-SHEET-SKOLEM-TIME-INTERVAL-SUBSUMING-INTERVAL", 1, 0, false);
	    declareFunction("fact_sheet_args_imply_args_for_pred", "FACT-SHEET-ARGS-IMPLY-ARGS-FOR-PRED", 3, 2, false);
	    declareFunction("clear_fact_sheet_transitivity_check", "CLEAR-FACT-SHEET-TRANSITIVITY-CHECK", 0, 0, false);
	    declareFunction("remove_fact_sheet_transitivity_check", "REMOVE-FACT-SHEET-TRANSITIVITY-CHECK", 2, 0, false);
	    declareFunction("fact_sheet_transitivity_check_internal", "FACT-SHEET-TRANSITIVITY-CHECK-INTERNAL", 2, 0, false);
	    declareFunction("fact_sheet_transitivity_check", "FACT-SHEET-TRANSITIVITY-CHECK", 2, 0, false);
	    declareFunction("add_thcl_fact_sheet_sentences", "ADD-THCL-FACT-SHEET-SENTENCES", 3, 0, false);
	    declareFunction("thcl_sentences_for_term_fact_sheet", "THCL-SENTENCES-FOR-TERM-FACT-SHEET", 1, 1, false);
	    declareFunction("thcl_preds_for_term_fact_sheet", "THCL-PREDS-FOR-TERM-FACT-SHEET", 1, 1, false);
	    declareFunction("fact_sheet_queries_browsableP", "FACT-SHEET-QUERIES-BROWSABLE?", 0, 0, false);
	    declareFunction("new_fact_sheet_query_daemon", "NEW-FACT-SHEET-QUERY-DAEMON", 0, 0, false);
	    declareFunction("fact_sheet_query_daemon_run", "FACT-SHEET-QUERY-DAEMON-RUN", 1, 0, false);
	    declareFunction("free_fact_sheet_query_spec", "FREE-FACT-SHEET-QUERY-SPEC", 1, 0, false);
	    declareFunction("valid_fact_sheet_query_spec_p", "VALID-FACT-SHEET-QUERY-SPEC-P", 1, 0, false);
	    declareFunction("new_fact_sheet_query", "NEW-FACT-SHEET-QUERY", 4, 0, false);
	    declareFunction("fact_sheet_sentence_query", "FACT-SHEET-SENTENCE-QUERY", 3, 0, false);
	    declareFunction("clear_fact_sheet_label_for_category", "CLEAR-FACT-SHEET-LABEL-FOR-CATEGORY", 0, 0, false);
	    declareFunction("remove_fact_sheet_label_for_category", "REMOVE-FACT-SHEET-LABEL-FOR-CATEGORY", 3, 0, false);
	    declareFunction("fact_sheet_label_for_category_internal", "FACT-SHEET-LABEL-FOR-CATEGORY-INTERNAL", 3, 0, false);
	    declareFunction("fact_sheet_label_for_category", "FACT-SHEET-LABEL-FOR-CATEGORY", 3, 0, false);
	    declareFunction("group_fact_sheet_sentences_alist", "GROUP-FACT-SHEET-SENTENCES-ALIST", 1, 0, false);
	    declareFunction("group_fact_sheet_sentences_for_category", "GROUP-FACT-SHEET-SENTENCES-FOR-CATEGORY", 2, 0, false);
	    declareFunction("sort_fact_sheet_sentences_for_category", "SORT-FACT-SHEET-SENTENCES-FOR-CATEGORY", 2, 0, false);
	    declareFunction("fact_sheet_sentence_more_recentP", "FACT-SHEET-SENTENCE-MORE-RECENT?", 2, 0, false);
	    declareFunction("fact_sheet_sentence_time_interval", "FACT-SHEET-SENTENCE-TIME-INTERVAL", 1, 0, false);
	    declareFunction("clear_fact_sheet_sentence_time_interval_cached", "CLEAR-FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED", 0, 0, false);
	    declareFunction("remove_fact_sheet_sentence_time_interval_cached", "REMOVE-FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED", 1, 0, false);
	    declareFunction("fact_sheet_sentence_time_interval_cached_internal", "FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED-INTERNAL", 1, 0, false);
	    declareFunction("fact_sheet_sentence_time_interval_cached", "FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED", 1, 0, false);
	    declareFunction("fact_sheet_sentence_precedence_for_category_internal", "FACT-SHEET-SENTENCE-PRECEDENCE-FOR-CATEGORY-INTERNAL", 2, 0, false);
	    declareFunction("fact_sheet_sentence_precedence_for_category", "FACT-SHEET-SENTENCE-PRECEDENCE-FOR-CATEGORY", 2, 0, false);
	    declareFunction("maximize_fact_sheet_sentence_coherence", "MAXIMIZE-FACT-SHEET-SENTENCE-COHERENCE", 1, 0, false);
	    declareFunction("most_coherent_fact_sheet_sentence", "MOST-COHERENT-FACT-SHEET-SENTENCE", 2, 0, false);
	    declareFunction("fact_sheet_sentence_coherence_to_group", "FACT-SHEET-SENTENCE-COHERENCE-TO-GROUP", 2, 0, false);
	    declareFunction("fact_sheet_sentence_coherence_internal", "FACT-SHEET-SENTENCE-COHERENCE-INTERNAL", 2, 1, false);
	    declareFunction("fact_sheet_sentence_coherence", "FACT-SHEET-SENTENCE-COHERENCE", 2, 1, false);
	    declareFunction("delete_duplicate_fact_sheet_sentences", "DELETE-DUPLICATE-FACT-SHEET-SENTENCES", 1, 0, false);
	    declareFunction("fact_sheet_sentences_equalP", "FACT-SHEET-SENTENCES-EQUAL?", 2, 0, false);
	    declareFunction("fact_sheet_assertion_time_indices_equalP", "FACT-SHEET-ASSERTION-TIME-INDICES-EQUAL?", 2, 0, false);
	    declareFunction("fact_sheet_sentence_predicate", "FACT-SHEET-SENTENCE-PREDICATE", 1, 0, false);
	    declareFunction("fact_sheet_sentence_mt", "FACT-SHEET-SENTENCE-MT", 1, 0, false);
	    declareFunction("pred_counts_for_sentences", "PRED-COUNTS-FOR-SENTENCES", 1, 0, false);
	    declareFunction("fact_sheet_pred_count_L", "FACT-SHEET-PRED-COUNT-<", 2, 0, false);
	    declareFunction("stable_sort_fact_sheet_sentences", "STABLE-SORT-FACT-SHEET-SENTENCES", 1, 0, false);
	    declareFunction("stable_sort_fact_sheet_sentences_for_category", "STABLE-SORT-FACT-SHEET-SENTENCES-FOR-CATEGORY", 1, 0, false);
	    declareFunction("fact_sheet_predicate_L", "FACT-SHEET-PREDICATE-<", 2, 0, false);
	    declareFunction("fact_sheet_sentence_references_earlier_dateP", "FACT-SHEET-SENTENCE-REFERENCES-EARLIER-DATE?", 2, 0, false);
	    declareFunction("fact_sheet_sentence_references_earlier_dateP_internal", "FACT-SHEET-SENTENCE-REFERENCES-EARLIER-DATE?-INTERNAL", 2, 0, false);
	    declareFunction("expression_containsP", "EXPRESSION-CONTAINS?", 2, 3, false);
	    declareFunction("possibly_remove_fact_sheet_sections", "POSSIBLY-REMOVE-FACT-SHEET-SECTIONS", 2, 1, false);
	    declareFunction("get_factsheet_kb_from_html", "GET-FACTSHEET-KB-FROM-HTML", 1, 0, false);
	    declareFunction("get_factsheet_system_from_html", "GET-FACTSHEET-SYSTEM-FROM-HTML", 1, 0, false);
	    declareFunction("fact_sheet_section_start_position", "FACT-SHEET-SECTION-START-POSITION", 2, 1, false);
	    declareFunction("fact_sheet_section_end_position", "FACT-SHEET-SECTION-END-POSITION", 3, 0, false);
	    declareFunction("remove_fact_sheet_section", "REMOVE-FACT-SHEET-SECTION", 2, 1, false);
	    declareFunction("add_evaluation_link", "ADD-EVALUATION-LINK", 2, 3, false);
	    declareFunction("add_before_fact_sheet_section", "ADD-BEFORE-FACT-SHEET-SECTION", 3, 0, false);
	    declareFunction("clear_fact_sheet_optional_section_start_comment", "CLEAR-FACT-SHEET-OPTIONAL-SECTION-START-COMMENT", 0, 0, false);
	    declareFunction("remove_fact_sheet_optional_section_start_comment", "REMOVE-FACT-SHEET-OPTIONAL-SECTION-START-COMMENT", 1, 1, false);
	    declareFunction("fact_sheet_optional_section_start_comment_internal", "FACT-SHEET-OPTIONAL-SECTION-START-COMMENT-INTERNAL", 2, 0, false);
	    declareFunction("fact_sheet_optional_section_start_comment", "FACT-SHEET-OPTIONAL-SECTION-START-COMMENT", 1, 1, false);
	    declareFunction("clear_fact_sheet_optional_section_end_comment", "CLEAR-FACT-SHEET-OPTIONAL-SECTION-END-COMMENT", 0, 0, false);
	    declareFunction("remove_fact_sheet_optional_section_end_comment", "REMOVE-FACT-SHEET-OPTIONAL-SECTION-END-COMMENT", 1, 0, false);
	    declareFunction("fact_sheet_optional_section_end_comment_internal", "FACT-SHEET-OPTIONAL-SECTION-END-COMMENT-INTERNAL", 1, 0, false);
	    declareFunction("fact_sheet_optional_section_end_comment", "FACT-SHEET-OPTIONAL-SECTION-END-COMMENT", 1, 0, false);
	    declareFunction("fact_sheet_optional_section_start_string", "FACT-SHEET-OPTIONAL-SECTION-START-STRING", 1, 0, false);
	    declareFunction("fact_sheet_optional_section_end_string", "FACT-SHEET-OPTIONAL-SECTION-END-STRING", 1, 0, false);
	    declareFunction("term_has_precached_fact_sheetP", "TERM-HAS-PRECACHED-FACT-SHEET?", 1, 3, false);
	    declareFunction("precached_fact_sheet_file_for_term_id", "PRECACHED-FACT-SHEET-FILE-FOR-TERM-ID", 4, 2, false);
	    declareFunction("precached_fact_sheet_for_term_in_html", "PRECACHED-FACT-SHEET-FOR-TERM-IN-HTML", 5, 1, false);
	    declareFunction("precached_fact_sheet_for_term_id_in_html", "PRECACHED-FACT-SHEET-FOR-TERM-ID-IN-HTML", 5, 1, false);
	    declareFunction("updated_fact_sheet_data_for_term_and_sentence", "UPDATED-FACT-SHEET-DATA-FOR-TERM-AND-SENTENCE", 2, 4, false);
	    declareFunction("update_fact_sheet_data_for_term_and_user_added_sentence", "UPDATE-FACT-SHEET-DATA-FOR-TERM-AND-USER-ADDED-SENTENCE", 2, 4, false);
	    declareFunction("update_fact_sheet_data_for_term_and_removed_sentence", "UPDATE-FACT-SHEET-DATA-FOR-TERM-AND-REMOVED-SENTENCE", 2, 4, false);
	    declareFunction("updated_fact_sheet_stats", "UPDATED-FACT-SHEET-STATS", 1, 0, false);
	    declareFunction("cached_fact_sheet_data_for_term", "CACHED-FACT-SHEET-DATA-FOR-TERM", 1, 4, false);
	    declareFunction("mts_with_precached_fact_sheet_data_for_term_internal", "MTS-WITH-PRECACHED-FACT-SHEET-DATA-FOR-TERM-INTERNAL", 1, 1, false);
	    declareFunction("mts_with_precached_fact_sheet_data_for_term", "MTS-WITH-PRECACHED-FACT-SHEET-DATA-FOR-TERM", 1, 1, false);
	    declareFunction("precached_fact_sheet_data_for_term", "PRECACHED-FACT-SHEET-DATA-FOR-TERM", 1, 4, false);
	    declareFunction("precached_fact_sheet_data_for_term_id", "PRECACHED-FACT-SHEET-DATA-FOR-TERM-ID", 4, 1, false);
	    declareFunction("precached_fact_sheet_data_from_file", "PRECACHED-FACT-SHEET-DATA-FROM-FILE", 1, 7, false);
	    declareFunction("load_fact_sheet_formatting_guidelines", "LOAD-FACT-SHEET-FORMATTING-GUIDELINES", 1, 0, false);
	    declareFunction("fact_sheet_under_construction_message", "FACT-SHEET-UNDER-CONSTRUCTION-MESSAGE", 1, 0, false);
	    declareFunction("fact_sheet_under_construction_code", "FACT-SHEET-UNDER-CONSTRUCTION-CODE", 0, 0, false);
	    declareFunction("fact_sheet_under_construction_xml", "FACT-SHEET-UNDER-CONSTRUCTION-XML", 2, 0, false);
	    declareFunction("fact_sheet_under_construction_html", "FACT-SHEET-UNDER-CONSTRUCTION-HTML", 2, 0, false);
	    declareFunction("note_fact_sheet_under_construction", "NOTE-FACT-SHEET-UNDER-CONSTRUCTION", 1, 3, false);
	    declareFunction("note_fact_sheet_construction_done", "NOTE-FACT-SHEET-CONSTRUCTION-DONE", 1, 3, false);
	    declareFunction("fact_sheet_under_construction_filename", "FACT-SHEET-UNDER-CONSTRUCTION-FILENAME", 1, 3, false);
	    declareFunction("fact_sheet_term_under_constructionP", "FACT-SHEET-TERM-UNDER-CONSTRUCTION?", 1, 4, false);
	    declareFunction("fact_sheet_file_under_constructionP", "FACT-SHEET-FILE-UNDER-CONSTRUCTION?", 2, 0, false);
	    declareFunction("html_fact_sheet_file_under_constructionP", "HTML-FACT-SHEET-FILE-UNDER-CONSTRUCTION?", 1, 1, false);
	    declareFunction("fact_sheet_term_update_already_undertakenP", "FACT-SHEET-TERM-UPDATE-ALREADY-UNDERTAKEN?", 4, 0, false);
	    declareFunction("term_fact_sheet_current_on_kb_and_systemP", "TERM-FACT-SHEET-CURRENT-ON-KB-AND-SYSTEM?", 2, 2, false);
	    declareFunction("gather_old_under_construction_fact_sheet_files", "GATHER-OLD-UNDER-CONSTRUCTION-FACT-SHEET-FILES", 0, 1, false);
	    declareFunction("remove_any_cached_fact_sheet_data", "REMOVE-ANY-CACHED-FACT-SHEET-DATA", 4, 1, false);
	    declareFunction("write_fact_sheet_html_and_formatting_guidelines", "WRITE-FACT-SHEET-HTML-AND-FORMATTING-GUIDELINES", 6, 0, false);
	    declareFunction("write_fact_sheet_data_and_formatting_guidelines", "WRITE-FACT-SHEET-DATA-AND-FORMATTING-GUIDELINES", 8, 0, false);
	    declareFunction("stop_fact_sheet_updates_after_current_term", "STOP-FACT-SHEET-UPDATES-AFTER-CURRENT-TERM", 0, 0, false);
	    declareFunction("start_new_fact_sheet_updater", "START-NEW-FACT-SHEET-UPDATER", 0, 5, false);
	    declareFunction("start_new_stale_fact_sheet_updater", "START-NEW-STALE-FACT-SHEET-UPDATER", 0, 1, false);
	    declareFunction("start_new_all_fact_sheet_updater", "START-NEW-ALL-FACT-SHEET-UPDATER", 0, 6, false);
	    declareFunction("start_new_fact_sheet_log_file_watcher", "START-NEW-FACT-SHEET-LOG-FILE-WATCHER", 0, 1, false);
	    declareFunction("watch_fact_sheet_log_file", "WATCH-FACT-SHEET-LOG-FILE", 1, 0, false);
	    declareFunction("fact_sheet_log_stream_active_p", "FACT-SHEET-LOG-STREAM-ACTIVE-P", 1, 0, false);
	    declareFunction("halt_fact_sheet_updater_image", "HALT-FACT-SHEET-UPDATER-IMAGE", 1, 0, false);
	    declareFunction("update_fact_sheets_for_all_fact_sheetable_instances_of_without_good_fact_sheets_generated_since", "UPDATE-FACT-SHEETS-FOR-ALL-FACT-SHEETABLE-INSTANCES-OF-WITHOUT-GOOD-FACT-SHEETS-GENERATED-SINCE", 0, 5, false);
	    declareFunction("launch_fact_sheet_updater_of_fs_type_not_updated_since", "LAUNCH-FACT-SHEET-UPDATER-OF-FS-TYPE-NOT-UPDATED-SINCE", 1, 4, false);
	    declareFunction("update_fact_sheets_of_fs_type_not_updated_since", "UPDATE-FACT-SHEETS-OF-FS-TYPE-NOT-UPDATED-SINCE", 1, 4, false);
	    declareFunction("maybe_update_fact_sheet_and_record_stats", "MAYBE-UPDATE-FACT-SHEET-AND-RECORD-STATS", 4, 0, false);
	    declareFunction("update_all_stale_fact_sheets", "UPDATE-ALL-STALE-FACT-SHEETS", 0, 1, false);
	    declareFunction("possible_regular_fact_sheet_directory_p", "POSSIBLE-REGULAR-FACT-SHEET-DIRECTORY-P", 1, 0, false);
	    declareFunction("possible_fact_sheet_directory_p", "POSSIBLE-FACT-SHEET-DIRECTORY-P", 1, 0, false);
	    declareFunction("fact_sheet_verbosity_from_path", "FACT-SHEET-VERBOSITY-FROM-PATH", 1, 0, false);
	    declareFunction("update_fact_sheet_file_if_stale", "UPDATE-FACT-SHEET-FILE-IF-STALE", 1, 2, false);
	    declareMacro("do_forts_for_fact_sheet_update", "DO-FORTS-FOR-FACT-SHEET-UPDATE");
	    declareFunction("write_term_ids_to_update", "WRITE-TERM-IDS-TO-UPDATE", 1, 1, false);
	    declareFunction("write_term_ids_to_update_for_fs_type_public_pages", "WRITE-TERM-IDS-TO-UPDATE-FOR-FS-TYPE-PUBLIC-PAGES", 1, 2, false);
	    declareFunction("write_term_ids_to_update_for_fs_type_public_pages_term_set", "WRITE-TERM-IDS-TO-UPDATE-FOR-FS-TYPE-PUBLIC-PAGES-TERM-SET", 2, 2, false);
	    declareFunction("write_term_ids_to_update_for_term_set", "WRITE-TERM-IDS-TO-UPDATE-FOR-TERM-SET", 1, 2, false);
	    declareFunction("convert_term_suids_to_fact_sheet_term_ids", "CONVERT-TERM-SUIDS-TO-FACT-SHEET-TERM-IDS", 2, 0, false);
	    declareFunction("convert_term_suid_range_to_fact_sheet_term_ids", "CONVERT-TERM-SUID-RANGE-TO-FACT-SHEET-TERM-IDS", 3, 0, false);
	    declareFunction("update_fact_sheets_with_suids", "UPDATE-FACT-SHEETS-WITH-SUIDS", 2, 2, false);
	    declareFunction("update_fact_sheets_with_ids", "UPDATE-FACT-SHEETS-WITH-IDS", 1, 2, false);
	    declareFunction("fact_sheet_term_id_filename", "FACT-SHEET-TERM-ID-FILENAME", 2, 0, false);
	    declareFunction("update_fact_sheets_from_id_file", "UPDATE-FACT-SHEETS-FROM-ID-FILE", 1, 2, false);
	    declareFunction("remaining_fact_sheets_to_update", "REMAINING-FACT-SHEETS-TO-UPDATE", 0, 4, false);
	    declareFunction("gather_all_fact_sheet_filenames", "GATHER-ALL-FACT-SHEET-FILENAMES", 1, 3, false);
	    declareFunction("update_all_fact_sheets", "UPDATE-ALL-FACT-SHEETS", 0, 6, false);
	    declareFunction("update_fact_sheets", "UPDATE-FACT-SHEETS", 0, 5, false);
	    declareFunction("sleep_until_time_within_next_day", "SLEEP-UNTIL-TIME-WITHIN-NEXT-DAY", 3, 0, false);
	    declareFunction("time_of_day_has_arrivedP", "TIME-OF-DAY-HAS-ARRIVED?", 3, 0, false);
	    declareFunction("image_seems_idleP", "IMAGE-SEEMS-IDLE?", 0, 2, false);
	    declareFunction("image_find_busy_thread", "IMAGE-FIND-BUSY-THREAD", 0, 1, false);
	    declareFunction("maybe_start_new_fact_sheet_updater_default_screensaver_for_user", "MAYBE-START-NEW-FACT-SHEET-UPDATER-DEFAULT-SCREENSAVER-FOR-USER", 0, 1, false);
	    declareFunction("start_new_fact_sheet_updater_default_screensaver", "START-NEW-FACT-SHEET-UPDATER-DEFAULT-SCREENSAVER", 0, 1, false);
	    declareFunction("default_fact_sheet_updater_screensaver_verbosity_for_user", "DEFAULT-FACT-SHEET-UPDATER-SCREENSAVER-VERBOSITY-FOR-USER", 1, 0, false);
	    declareFunction("register_fact_sheet_screensaver", "REGISTER-FACT-SHEET-SCREENSAVER", 1, 0, false);
	    declareFunction("deregister_fact_sheet_screensaver", "DEREGISTER-FACT-SHEET-SCREENSAVER", 1, 0, false);
	    declareFunction("start_new_fact_sheet_updater_screensaver", "START-NEW-FACT-SHEET-UPDATER-SCREENSAVER", 0, 5, false);
	    declareFunction("stop_all_fact_sheet_screensavers", "STOP-ALL-FACT-SHEET-SCREENSAVERS", 0, 0, false);
	    declareFunction("restart_all_fact_sheet_screensavers", "RESTART-ALL-FACT-SHEET-SCREENSAVERS", 0, 0, false);
	    declareFunction("allow_fact_sheet_screensavers", "ALLOW-FACT-SHEET-SCREENSAVERS", 0, 0, false);
	    declareFunction("kill_all_fact_sheet_screensavers", "KILL-ALL-FACT-SHEET-SCREENSAVERS", 0, 1, false);
	    declareFunction("update_fact_sheet_screensaver", "UPDATE-FACT-SHEET-SCREENSAVER", 5, 0, false);
	    declareFunction("update_fact_sheets_internal", "UPDATE-FACT-SHEETS-INTERNAL", 3, 1, false);
	    declareFunction("update_fact_sheet_for_term_with_logging", "UPDATE-FACT-SHEET-FOR-TERM-WITH-LOGGING", 4, 0, false);
	    declareFunction("possibly_update_fact_sheet_for_term", "POSSIBLY-UPDATE-FACT-SHEET-FOR-TERM", 4, 0, false);
	    declareFunction("fact_sheet_query_soft_timeout_time_reachedP", "FACT-SHEET-QUERY-SOFT-TIMEOUT-TIME-REACHED?", 0, 0, false);
	    declareFunction("fact_sheet_query_soft_timeout_time_left", "FACT-SHEET-QUERY-SOFT-TIMEOUT-TIME-LEFT", 0, 0, false);
	    declareFunction("compute_fact_sheet_query_soft_timeout_time", "COMPUTE-FACT-SHEET-QUERY-SOFT-TIMEOUT-TIME", 1, 0, false);
	    declareFunction("fact_sheet_paraphrase_soft_timeout_time_reachedP", "FACT-SHEET-PARAPHRASE-SOFT-TIMEOUT-TIME-REACHED?", 0, 0, false);
	    declareFunction("fact_sheet_paraphrase_soft_timeout_time_left", "FACT-SHEET-PARAPHRASE-SOFT-TIMEOUT-TIME-LEFT", 0, 0, false);
	    declareFunction("compute_fact_sheet_paraphrase_soft_timeout_time", "COMPUTE-FACT-SHEET-PARAPHRASE-SOFT-TIMEOUT-TIME", 1, 0, false);
	    declareFunction("update_fact_sheet_for_term", "UPDATE-FACT-SHEET-FOR-TERM", 1, 5, false);
	    declareFunction("update_mini_fact_sheet_for_term", "UPDATE-MINI-FACT-SHEET-FOR-TERM", 1, 2, false);
	    declareFunction("update_fact_sheet_data_for_term", "UPDATE-FACT-SHEET-DATA-FOR-TERM", 6, 0, false);
	    declareFunction("launch_make_up_fact_sheet_updater_for_term", "LAUNCH-MAKE-UP-FACT-SHEET-UPDATER-FOR-TERM", 1, 5, false);
	    declareFunction("fact_sheet_too_shortP", "FACT-SHEET-TOO-SHORT?", 4, 0, false);
	    declareFunction("fact_sheet_up_to_dateP", "FACT-SHEET-UP-TO-DATE?", 4, 0, false);
	    declareFunction("cached_fact_sheet_save_date_and_second", "CACHED-FACT-SHEET-SAVE-DATE-AND-SECOND", 1, 0, false);
	    declareFunction("fact_sheet_generator_modified_sinceP", "FACT-SHEET-GENERATOR-MODIFIED-SINCE?", 2, 0, false);
	    declareFunction("fact_sheet_term_modified_sinceP", "FACT-SHEET-TERM-MODIFIED-SINCE?", 3, 0, false);
	    declareFunction("fact_sheet_formatting_guidelines_file", "FACT-SHEET-FORMATTING-GUIDELINES-FILE", 1, 1, false);
	    declareFunction("fact_sheet_file_for_fact_sheet_term", "FACT-SHEET-FILE-FOR-FACT-SHEET-TERM", 1, 0, false);
	    declareFunction("directory_and_filename_for_fact_sheet", "DIRECTORY-AND-FILENAME-FOR-FACT-SHEET", 1, 4, false);
	    declareFunction("directory_and_filename_for_fact_sheet_from_id", "DIRECTORY-AND-FILENAME-FOR-FACT-SHEET-FROM-ID", 4, 2, false);
	    declareFunction("fact_sheet_term_id_file_preface", "FACT-SHEET-TERM-ID-FILE-PREFACE", 1, 0, false);
	    declareFunction("fact_sheet_term_from_filename", "FACT-SHEET-TERM-FROM-FILENAME", 1, 0, false);
	    declareFunction("fact_sheet_data_from_filename", "FACT-SHEET-DATA-FROM-FILENAME", 1, 0, false);
	    declareFunction("fact_sheet_data_from_path", "FACT-SHEET-DATA-FROM-PATH", 1, 0, false);
	    declareFunction("clear_fact_sheet_directory_from_list", "CLEAR-FACT-SHEET-DIRECTORY-FROM-LIST", 0, 0, false);
	    declareFunction("remove_fact_sheet_directory_from_list", "REMOVE-FACT-SHEET-DIRECTORY-FROM-LIST", 0, 1, false);
	    declareFunction("fact_sheet_directory_from_list_internal", "FACT-SHEET-DIRECTORY-FROM-LIST-INTERNAL", 1, 0, false);
	    declareFunction("fact_sheet_directory_from_list", "FACT-SHEET-DIRECTORY-FROM-LIST", 0, 1, false);
	    declareFunction("fact_sheet_update_term_prioritizer_print_function_trampoline", "FACT-SHEET-UPDATE-TERM-PRIORITIZER-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
	    declareFunction("fact_sheet_update_term_prioritizer_p", "FACT-SHEET-UPDATE-TERM-PRIORITIZER-P", 1, 0, false);
	    new fact_sheets.$fact_sheet_update_term_prioritizer_p$UnaryFunction();
	    declareFunction("fsut_prioritizer_stale_terms", "FSUT-PRIORITIZER-STALE-TERMS", 1, 0, false);
	    declareFunction("fsut_prioritizer_missing_terms", "FSUT-PRIORITIZER-MISSING-TERMS", 1, 0, false);
	    declareFunction("fsut_prioritizer_up_to_date_terms", "FSUT-PRIORITIZER-UP-TO-DATE-TERMS", 1, 0, false);
	    declareFunction("fsut_prioritizer_thread", "FSUT-PRIORITIZER-THREAD", 1, 0, false);
	    declareFunction("fsut_prioritizer_should_sleepP", "FSUT-PRIORITIZER-SHOULD-SLEEP?", 1, 0, false);
	    declareFunction("fsut_prioritizer_verbosity", "FSUT-PRIORITIZER-VERBOSITY", 1, 0, false);
	    declareFunction("fsut_prioritizer_domain_mt", "FSUT-PRIORITIZER-DOMAIN-MT", 1, 0, false);
	    declareFunction("fsut_prioritizer_language_mt", "FSUT-PRIORITIZER-LANGUAGE-MT", 1, 0, false);
	    declareFunction("fsut_prioritizer_nice_level", "FSUT-PRIORITIZER-NICE-LEVEL", 1, 0, false);
	    declareFunction("fsut_prioritizer_new_days", "FSUT-PRIORITIZER-NEW-DAYS", 1, 0, false);
	    declareFunction("_csetf_fsut_prioritizer_stale_terms", "_CSETF-FSUT-PRIORITIZER-STALE-TERMS", 2, 0, false);
	    declareFunction("_csetf_fsut_prioritizer_missing_terms", "_CSETF-FSUT-PRIORITIZER-MISSING-TERMS", 2, 0, false);
	    declareFunction("_csetf_fsut_prioritizer_up_to_date_terms", "_CSETF-FSUT-PRIORITIZER-UP-TO-DATE-TERMS", 2, 0, false);
	    declareFunction("_csetf_fsut_prioritizer_thread", "_CSETF-FSUT-PRIORITIZER-THREAD", 2, 0, false);
	    declareFunction("_csetf_fsut_prioritizer_should_sleepP", "_CSETF-FSUT-PRIORITIZER-SHOULD-SLEEP?", 2, 0, false);
	    declareFunction("_csetf_fsut_prioritizer_verbosity", "_CSETF-FSUT-PRIORITIZER-VERBOSITY", 2, 0, false);
	    declareFunction("_csetf_fsut_prioritizer_domain_mt", "_CSETF-FSUT-PRIORITIZER-DOMAIN-MT", 2, 0, false);
	    declareFunction("_csetf_fsut_prioritizer_language_mt", "_CSETF-FSUT-PRIORITIZER-LANGUAGE-MT", 2, 0, false);
	    declareFunction("_csetf_fsut_prioritizer_nice_level", "_CSETF-FSUT-PRIORITIZER-NICE-LEVEL", 2, 0, false);
	    declareFunction("_csetf_fsut_prioritizer_new_days", "_CSETF-FSUT-PRIORITIZER-NEW-DAYS", 2, 0, false);
	    declareFunction("make_fact_sheet_update_term_prioritizer", "MAKE-FACT-SHEET-UPDATE-TERM-PRIORITIZER", 0, 1, false);
	    declareFunction("visit_defstruct_fact_sheet_update_term_prioritizer", "VISIT-DEFSTRUCT-FACT-SHEET-UPDATE-TERM-PRIORITIZER", 2, 0, false);
	    declareFunction("visit_defstruct_object_fact_sheet_update_term_prioritizer_method", "VISIT-DEFSTRUCT-OBJECT-FACT-SHEET-UPDATE-TERM-PRIORITIZER-METHOD", 2, 0, false);
	    declareFunction("pprint_fsut_prioritizer", "PPRINT-FSUT-PRIORITIZER", 1, 2, false);
	    declareFunction("register_fsut_prioritizer", "REGISTER-FSUT-PRIORITIZER", 1, 0, false);
	    declareFunction("all_fact_sheet_update_term_prioritizers", "ALL-FACT-SHEET-UPDATE-TERM-PRIORITIZERS", 0, 0, false);
	    declareFunction("find_fsut_prioritizer", "FIND-FSUT-PRIORITIZER", 0, 4, false);
	    declareFunction("find_or_create_fact_sheet_update_term_prioritizer", "FIND-OR-CREATE-FACT-SHEET-UPDATE-TERM-PRIORITIZER", 0, 4, false);
	    declareFunction("fsut_prioritizer_max_nice_level", "FSUT-PRIORITIZER-MAX-NICE-LEVEL", 0, 0, false);
	    declareFunction("fsut_prioritizer_min_nice_level", "FSUT-PRIORITIZER-MIN-NICE-LEVEL", 0, 0, false);
	    declareFunction("fsut_prioritizer_default_new_days", "FSUT-PRIORITIZER-DEFAULT-NEW-DAYS", 0, 0, false);
	    declareFunction("new_fact_sheet_update_term_prioritizer", "NEW-FACT-SHEET-UPDATE-TERM-PRIORITIZER", 0, 5, false);
	    declareFunction("fsut_prioritizer_queue_rank_func", "FSUT-PRIORITIZER-QUEUE-RANK-FUNC", 1, 0, false);
	    declareFunction("fsut_prioritizer_queue_comp_func", "FSUT-PRIORITIZER-QUEUE-COMP-FUNC", 2, 0, false);
	    declareFunction("renice_fsut_prioritizer", "RENICE-FSUT-PRIORITIZER", 1, 1, false);
	    declareFunction("start_fsut_prioritizer", "START-FSUT-PRIORITIZER", 1, 0, false);
	    declareFunction("stop_all_fsut_prioritizers", "STOP-ALL-FSUT-PRIORITIZERS", 0, 0, false);
	    declareFunction("stop_fsut_prioritizer", "STOP-FSUT-PRIORITIZER", 1, 0, false);
	    declareFunction("fsut_prioritizer_next_term", "FSUT-PRIORITIZER-NEXT-TERM", 1, 1, false);
	    declareFunction("fsut_prioritizer_empty_p", "FSUT-PRIORITIZER-EMPTY-P", 1, 1, false);
	    declareFunction("fsut_prioritizer_next_stale_term", "FSUT-PRIORITIZER-NEXT-STALE-TERM", 1, 0, false);
	    declareFunction("fsut_prioritizer_next_missing_term", "FSUT-PRIORITIZER-NEXT-MISSING-TERM", 1, 0, false);
	    declareFunction("fsut_prioritizer_next_up_to_date_term", "FSUT-PRIORITIZER-NEXT-UP-TO-DATE-TERM", 1, 0, false);
	    declareFunction("clear_fsut_prioritizer_sleep_interval_from_nice_level", "CLEAR-FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL", 0, 0, false);
	    declareFunction("remove_fsut_prioritizer_sleep_interval_from_nice_level", "REMOVE-FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL", 1, 1, false);
	    declareFunction("fsut_prioritizer_sleep_interval_from_nice_level_internal", "FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL-INTERNAL", 2, 0, false);
	    declareFunction("fsut_prioritizer_sleep_interval_from_nice_level", "FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL", 1, 1, false);
	    declareFunction("fsut_prioritizer_place_terms", "FSUT-PRIORITIZER-PLACE-TERMS", 1, 0, false);
	    declareFunction("fsut_prioritizer_place_term", "FSUT-PRIORITIZER-PLACE-TERM", 2, 0, false);
	    declareFunction("add_to_prioritizer_queue", "ADD-TO-PRIORITIZER-QUEUE", 3, 0, false);
	    declareFunction("sanity_check_prioritizer_queue", "SANITY-CHECK-PRIORITIZER-QUEUE", 1, 0, false);
	    declareFunction("fact_sheet_status_p", "FACT-SHEET-STATUS-P", 1, 0, false);
	    declareFunction("fact_sheet_status", "FACT-SHEET-STATUS", 1, 4, false);
	    declareFunction("fact_sheet_file_status", "FACT-SHEET-FILE-STATUS", 5, 0, false);
	    declareFunction("fact_sheet_file_staleP", "FACT-SHEET-FILE-STALE?", 1, 3, false);
	    declareFunction("fact_sheet_file_has_invalid_assertionP", "FACT-SHEET-FILE-HAS-INVALID-ASSERTION?", 1, 0, false);
	    declareFunction("fact_sheet_term_gaf_priority", "FACT-SHEET-TERM-GAF-PRIORITY", 1, 0, false);
	    declareFunction("pred_argnum_combos_for_term_internal", "PRED-ARGNUM-COMBOS-FOR-TERM-INTERNAL", 1, 0, false);
	    declareFunction("pred_argnum_combos_for_term", "PRED-ARGNUM-COMBOS-FOR-TERM", 1, 0, false);
	    declareFunction("cb_fact_sheet_evaluation", "CB-FACT-SHEET-EVALUATION", 0, 1, false);
	    declareFunction("print_one_eval_section", "PRINT-ONE-EVAL-SECTION", 2, 0, false);
	    declareFunction("print_numbered_options", "PRINT-NUMBERED-OPTIONS", 3, 0, false);
	    declareFunction("cb_handle_fact_sheet_evaluation", "CB-HANDLE-FACT-SHEET-EVALUATION", 1, 0, false);
	    declareFunction("absolute_fact_sheet_eval_url", "ABSOLUTE-FACT-SHEET-EVAL-URL", 4, 0, false);
	    declareFunction("html_emit_fact_sheet_evaluation_link", "HTML-EMIT-FACT-SHEET-EVALUATION-LINK", 1, 3, false);
	    declareFunction("allowed_to_update_fact_sheet_with_sentenceP", "ALLOWED-TO-UPDATE-FACT-SHEET-WITH-SENTENCE?", 5, 0, false);
	    declareFunction("mark_fact_sheet_term_modifiable", "MARK-FACT-SHEET-TERM-MODIFIABLE", 4, 0, false);
	    declareFunction("cache_local_fact_sheet_data", "CACHE-LOCAL-FACT-SHEET-DATA", 5, 1, false);
	    declareFunction("get_cached_local_fact_sheet_data", "GET-CACHED-LOCAL-FACT-SHEET-DATA", 4, 0, false);
	    declareFunction("remove_cached_local_fact_sheet_data", "REMOVE-CACHED-LOCAL-FACT-SHEET-DATA", 4, 0, false);
	    declareFunction("public_fact_sheet_ad_html", "PUBLIC-FACT-SHEET-AD-HTML", 0, 0, false);
	    declareFunction("directory_and_filename_for_public_fact_sheet", "DIRECTORY-AND-FILENAME-FOR-PUBLIC-FACT-SHEET", 2, 1, false);
	    declareFunction("relative_filename_for_public_fact_sheet", "RELATIVE-FILENAME-FOR-PUBLIC-FACT-SHEET", 2, 1, false);
	    declareFunction("clear_get_public_fact_sheet_term_parent_directory_string", "CLEAR-GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING", 0, 0, false);
	    declareFunction("remove_get_public_fact_sheet_term_parent_directory_string", "REMOVE-GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING", 3, 0, false);
	    declareFunction("get_public_fact_sheet_term_parent_directory_string_internal", "GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING-INTERNAL", 3, 0, false);
	    declareFunction("get_public_fact_sheet_term_parent_directory_string", "GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING", 3, 0, false);
	    declareFunction("fact_sheet_filename_charP", "FACT-SHEET-FILENAME-CHAR?", 1, 0, false);
	    declareFunction("note_term_to_file_mapping", "NOTE-TERM-TO-FILE-MAPPING", 4, 0, false);
	    declareFunction("clear_terms_for_public_fact_sheets", "CLEAR-TERMS-FOR-PUBLIC-FACT-SHEETS", 0, 0, false);
	    declareFunction("remove_terms_for_public_fact_sheets", "REMOVE-TERMS-FOR-PUBLIC-FACT-SHEETS", 0, 1, false);
	    declareFunction("terms_for_public_fact_sheets_internal", "TERMS-FOR-PUBLIC-FACT-SHEETS-INTERNAL", 1, 0, false);
	    declareFunction("terms_for_public_fact_sheets", "TERMS-FOR-PUBLIC-FACT-SHEETS", 0, 1, false);
	    declareFunction("clear_types_for_public_fact_sheets", "CLEAR-TYPES-FOR-PUBLIC-FACT-SHEETS", 0, 0, false);
	    declareFunction("remove_types_for_public_fact_sheets", "REMOVE-TYPES-FOR-PUBLIC-FACT-SHEETS", 0, 1, false);
	    declareFunction("types_for_public_fact_sheets_internal", "TYPES-FOR-PUBLIC-FACT-SHEETS-INTERNAL", 1, 0, false);
	    declareFunction("types_for_public_fact_sheets", "TYPES-FOR-PUBLIC-FACT-SHEETS", 0, 1, false);
	    declareFunction("clear_fact_sheet_term_strings", "CLEAR-FACT-SHEET-TERM-STRINGS", 0, 0, false);
	    declareFunction("remove_fact_sheet_term_strings", "REMOVE-FACT-SHEET-TERM-STRINGS", 1, 0, false);
	    declareFunction("fact_sheet_term_strings_internal", "FACT-SHEET-TERM-STRINGS-INTERNAL", 1, 0, false);
	    declareFunction("fact_sheet_term_strings", "FACT-SHEET-TERM-STRINGS", 1, 0, false);
	    declareFunction("get_public_fact_sheet_string_mappings", "GET-PUBLIC-FACT-SHEET-STRING-MAPPINGS", 1, 0, false);
	    declareFunction("get_public_fact_sheet_string_mappings_int", "GET-PUBLIC-FACT-SHEET-STRING-MAPPINGS-INT", 1, 0, false);
	    declareFunction("clear_get_public_fact_sheet_string_url_mappings", "CLEAR-GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS", 0, 0, false);
	    declareFunction("remove_get_public_fact_sheet_string_url_mappings", "REMOVE-GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS", 0, 2, false);
	    declareFunction("get_public_fact_sheet_string_url_mappings_internal", "GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS-INTERNAL", 2, 0, false);
	    declareFunction("get_public_fact_sheet_string_url_mappings", "GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS", 0, 2, false);
	    declareFunction("dump_fact_sheet_string_url_mappings", "DUMP-FACT-SHEET-STRING-URL-MAPPINGS", 0, 2, false);
	    declareFunction("convert_search_data_to_htaccess_redirects", "CONVERT-SEARCH-DATA-TO-HTACCESS-REDIRECTS", 0, 2, false);
	    declareFunction("convert_search_data_to_sql_file", "CONVERT-SEARCH-DATA-TO-SQL-FILE", 0, 2, false);
	    declareFunction("get_existing_public_fact_sheet_term_pairs", "GET-EXISTING-PUBLIC-FACT-SHEET-TERM-PAIRS", 0, 1, false);
	    declareFunction("get_public_fact_sheet_string_url_mappings_as_json", "GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS-AS-JSON", 0, 3, false);
	    declareFunction("print_one_string_term_url_mapping_as_json", "PRINT-ONE-STRING-TERM-URL-MAPPING-AS-JSON", 3, 0, false);
	    declareFunction("filter_mappings_for_good_urls", "FILTER-MAPPINGS-FOR-GOOD-URLS", 2, 0, false);
	    declareFunction("fact_sheet_properties_for_type", "FACT-SHEET-PROPERTIES-FOR-TYPE", 1, 0, false);
	    declareFunction("get_fs_collection_name", "GET-FS-COLLECTION-NAME", 1, 0, false);
	    declareFunction("get_fs_whitelist_types", "GET-FS-WHITELIST-TYPES", 1, 0, false);
	    declareFunction("get_fs_blacklist_types", "GET-FS-BLACKLIST-TYPES", 1, 0, false);
	    declareFunction("get_fs_quoted_blacklist_types", "GET-FS-QUOTED-BLACKLIST-TYPES", 1, 0, false);
	    declareFunction("get_fs_blacklist_sources", "GET-FS-BLACKLIST-SOURCES", 1, 0, false);
	    declareFunction("get_fs_default_starting_points_filename", "GET-FS-DEFAULT-STARTING-POINTS-FILENAME", 1, 0, false);
	    declareFunction("get_domain_mt_for_fs_type", "GET-DOMAIN-MT-FOR-FS-TYPE", 1, 0, false);
	    declareFunction("category_label_from_properties", "CATEGORY-LABEL-FROM-PROPERTIES", 2, 0, false);
	    declareFunction("new_category_label", "NEW-CATEGORY-LABEL", 2, 0, false);
	    declareFunction("category_label_string", "CATEGORY-LABEL-STRING", 1, 0, false);
	    declareFunction("category_label_pred", "CATEGORY-LABEL-PRED", 1, 0, false);
	    declareFunction("category_label_style", "CATEGORY-LABEL-STYLE", 1, 0, false);
	    declareFunction("get_sort_fn_from_properties", "GET-SORT-FN-FROM-PROPERTIES", 1, 0, false);
	    declareFunction("default_fact_sheet_paragraph_retrieval_time_sort_fn", "DEFAULT-FACT-SHEET-PARAGRAPH-RETRIEVAL-TIME-SORT-FN", 2, 0, false);
	    declareFunction("incyc_higher_priority_categoryP", "INCYC-HIGHER-PRIORITY-CATEGORY?", 2, 0, false);
	    declareFunction("get_public_fact_sheet_properties", "GET-PUBLIC-FACT-SHEET-PROPERTIES", 0, 0, false);
	    declareFunction("get_public_fact_sheet_for_term", "GET-PUBLIC-FACT-SHEET-FOR-TERM", 1, 2, false);
	    declareFunction("start_new_public_fact_sheet_updater", "START-NEW-PUBLIC-FACT-SHEET-UPDATER", 0, 2, false);
	    declareFunction("ensure_all_public_fact_sheets", "ENSURE-ALL-PUBLIC-FACT-SHEETS", 0, 2, false);
	    declareFunction("ensure_public_fact_sheet_for_term", "ENSURE-PUBLIC-FACT-SHEET-FOR-TERM", 1, 2, false);
	    declareFunction("publicize_fact_sheet_links", "PUBLICIZE-FACT-SHEET-LINKS", 2, 0, false);
	    declareFunction("publicize_fact_sheet_link", "PUBLICIZE-FACT-SHEET-LINK", 4, 1, false);
	    declareFunction("update_public_fact_sheets_from_id_file", "UPDATE-PUBLIC-FACT-SHEETS-FROM-ID-FILE", 1, 3, false);
	    declareFunction("any_token_containsP", "ANY-TOKEN-CONTAINS?", 2, 0, false);
	    declareFunction("write_public_fact_sheets_starting_points_data", "WRITE-PUBLIC-FACT-SHEETS-STARTING-POINTS-DATA", 1, 1, false);
	    declareFunction("write_public_fact_sheets_starting_points_data_int", "WRITE-PUBLIC-FACT-SHEETS-STARTING-POINTS-DATA-INT", 3, 0, false);
	    declareFunction("public_fact_sheet_starting_point_okP", "PUBLIC-FACT-SHEET-STARTING-POINT-OK?", 2, 0, false);
	    declareFunction("suggested_starting_points_for_public_fact_sheet_browsing", "SUGGESTED-STARTING-POINTS-FOR-PUBLIC-FACT-SHEET-BROWSING", 1, 0, false);
	    declareFunction("clear_cached_num_gaf_arg_index", "CLEAR-CACHED-NUM-GAF-ARG-INDEX", 0, 0, false);
	    declareFunction("remove_cached_num_gaf_arg_index", "REMOVE-CACHED-NUM-GAF-ARG-INDEX", 1, 0, false);
	    declareFunction("cached_num_gaf_arg_index_internal", "CACHED-NUM-GAF-ARG-INDEX-INTERNAL", 1, 0, false);
	    declareFunction("cached_num_gaf_arg_index", "CACHED-NUM-GAF-ARG-INDEX", 1, 0, false);
	    declareFunction("dump_fact_sheet_sentences_old", "DUMP-FACT-SHEET-SENTENCES-OLD", 1, 2, false);
	    declareFunction("dump_fact_sheet_sentences", "DUMP-FACT-SHEET-SENTENCES", 1, 1, false);
	    declareFunction("dump_fact_sheet_sentences_for_term", "DUMP-FACT-SHEET-SENTENCES-FOR-TERM", 4, 0, false);
	    declareFunction("fact_sheets_term_from_string_containsP", "FACT-SHEETS-TERM-FROM-STRING-CONTAINS?", 2, 0, false);
	    declareFunction("cycls_are_membersP", "CYCLS-ARE-MEMBERS?", 3, 0, false);
	}
	if (SubLFiles.USE_V2) {
	    declareMacro("with_quiet_fact_sheet_logging", "WITH-QUIET-FACT-SHEET-LOGGING");
	    declareMacro("log_fact_sheet_message", "LOG-FACT-SHEET-MESSAGE");
	    declareFunction("print_fact_sheet_log_header", "PRINT-FACT-SHEET-LOG-HEADER", 2, 0, false);
	    declareMacro("log_fact_sheet_warning", "LOG-FACT-SHEET-WARNING");
	    declareMacro("log_fact_sheet_note", "LOG-FACT-SHEET-NOTE");
	    declareMacro("with_fact_sheet_log_file", "WITH-FACT-SHEET-LOG-FILE");
	    declareMacro("with_fact_sheet_logging", "WITH-FACT-SHEET-LOGGING");
	    declareFunction("note_fact_sheet_log_file_closed", "NOTE-FACT-SHEET-LOG-FILE-CLOSED", 0, 1, false);
	    declareFunction("fact_sheet_log_file_closed_p", "FACT-SHEET-LOG-FILE-CLOSED-P", 1, 0, false);
	    declareMacro("with_fact_sheet_logging_and_hourly_reporting", "WITH-FACT-SHEET-LOGGING-AND-HOURLY-REPORTING");
	    declareFunction("fact_sheet_hourly_reporting_onP", "FACT-SHEET-HOURLY-REPORTING-ON?", 0, 0, false);
	    declareFunction("reset_hourly_report_time", "RESET-HOURLY-REPORT-TIME", 0, 1, false);
	    declareFunction("clear_hourly_fact_sheet_stats", "CLEAR-HOURLY-FACT-SHEET-STATS", 0, 0, false);
	    declareFunction("add_fact_sheet_info_to_hourly_stats", "ADD-FACT-SHEET-INFO-TO-HOURLY-STATS", 1, 0, false);
	    declareFunction("get_hourly_fact_sheet_update_count", "GET-HOURLY-FACT-SHEET-UPDATE-COUNT", 0, 0, false);
	    declareFunction("clear_hourly_fact_sheet_update_count", "CLEAR-HOURLY-FACT-SHEET-UPDATE-COUNT", 0, 0, false);
	    declareFunction("note_fact_sheet_query_timeout_in_hourly_stats", "NOTE-FACT-SHEET-QUERY-TIMEOUT-IN-HOURLY-STATS", 0, 0, false);
	    declareFunction("get_hourly_fact_sheet_query_timeout_count", "GET-HOURLY-FACT-SHEET-QUERY-TIMEOUT-COUNT", 0, 0, false);
	    declareFunction("clear_hourly_fact_sheet_query_timeout_count", "CLEAR-HOURLY-FACT-SHEET-QUERY-TIMEOUT-COUNT", 0, 0, false);
	    declareFunction("maybe_log_fact_sheet_hourly_report", "MAYBE-LOG-FACT-SHEET-HOURLY-REPORT", 0, 0, false);
	    declareFunction("log_fact_sheet_hourly_report", "LOG-FACT-SHEET-HOURLY-REPORT", 0, 0, false);
	    declareFunction("fact_sheet_log_directory_generated_count", "FACT-SHEET-LOG-DIRECTORY-GENERATED-COUNT", 1, 0, false);
	    declareFunction("fact_sheet_log_file_generated_count", "FACT-SHEET-LOG-FILE-GENERATED-COUNT", 1, 1, false);
	    declareFunction("fact_sheet_log_directory_average_total_time", "FACT-SHEET-LOG-DIRECTORY-AVERAGE-TOTAL-TIME", 1, 0, false);
	    declareFunction("fact_sheet_log_file_count_and_total_time", "FACT-SHEET-LOG-FILE-COUNT-AND-TOTAL-TIME", 1, 1, false);
	    declareFunction("plot_fact_sheet_log_directory_generated_count_by_date", "PLOT-FACT-SHEET-LOG-DIRECTORY-GENERATED-COUNT-BY-DATE", 1, 2, false);
	    declareFunction("fact_sheet_log_directory_generated_count_by_date", "FACT-SHEET-LOG-DIRECTORY-GENERATED-COUNT-BY-DATE", 1, 1, false);
	    declareFunction("fact_sheet_log_file_generated_count_by_date", "FACT-SHEET-LOG-FILE-GENERATED-COUNT-BY-DATE", 1, 2, false);
	    declareFunction("fact_sheet_log_directory_average_total_time_by_date", "FACT-SHEET-LOG-DIRECTORY-AVERAGE-TOTAL-TIME-BY-DATE", 1, 1, false);
	    declareFunction("fact_sheet_log_file_average_total_time_by_date", "FACT-SHEET-LOG-FILE-AVERAGE-TOTAL-TIME-BY-DATE", 1, 2, false);
	    declareFunction("fact_sheet_log_directory_average_category_count_by_date", "FACT-SHEET-LOG-DIRECTORY-AVERAGE-CATEGORY-COUNT-BY-DATE", 1, 1, false);
	    declareFunction("fact_sheet_log_file_average_category_count_by_date", "FACT-SHEET-LOG-FILE-AVERAGE-CATEGORY-COUNT-BY-DATE", 1, 2, false);
	    declareFunction("fact_sheet_log_directory_average_sentence_count_by_date", "FACT-SHEET-LOG-DIRECTORY-AVERAGE-SENTENCE-COUNT-BY-DATE", 1, 1, false);
	    declareFunction("fact_sheet_log_file_average_sentence_count_by_date", "FACT-SHEET-LOG-FILE-AVERAGE-SENTENCE-COUNT-BY-DATE", 1, 2, false);
	    declareFunction("fact_sheet_log_directory_average_uncategorized_sentence_count_by_date", "FACT-SHEET-LOG-DIRECTORY-AVERAGE-UNCATEGORIZED-SENTENCE-COUNT-BY-DATE", 1, 1, false);
	    declareFunction("fact_sheet_log_file_average_uncategorized_sentence_count_by_date", "FACT-SHEET-LOG-FILE-AVERAGE-UNCATEGORIZED-SENTENCE-COUNT-BY-DATE", 1, 2, false);
	    declareFunction("plot_fact_sheet_log_directory_query_failure_rate_by_date", "PLOT-FACT-SHEET-LOG-DIRECTORY-QUERY-FAILURE-RATE-BY-DATE", 1, 3, false);
	    declareFunction("fact_sheet_log_directory_query_failure_rate_by_date", "FACT-SHEET-LOG-DIRECTORY-QUERY-FAILURE-RATE-BY-DATE", 1, 1, false);
	    declareFunction("fact_sheet_log_file_query_failure_rate_by_date", "FACT-SHEET-LOG-FILE-QUERY-FAILURE-RATE-BY-DATE", 1, 2, false);
	    declareFunction("fact_sheet_log_directory_generated_count_for_date", "FACT-SHEET-LOG-DIRECTORY-GENERATED-COUNT-FOR-DATE", 1, 1, false);
	    declareFunction("fact_sheet_log_file_generated_count_for_date", "FACT-SHEET-LOG-FILE-GENERATED-COUNT-FOR-DATE", 1, 2, false);
	    declareFunction("fact_sheet_log_file_generated_count_old", "FACT-SHEET-LOG-FILE-GENERATED-COUNT-OLD", 1, 0, false);
	    declareFunction("fact_sheet_log_file_generated_count_for_date_old", "FACT-SHEET-LOG-FILE-GENERATED-COUNT-FOR-DATE-OLD", 1, 1, false);
	    declareFunction("get_fact_sheet_log_file_data", "GET-FACT-SHEET-LOG-FILE-DATA", 1, 0, false);
	    declareFunction("get_fact_sheet_log_directory_data", "GET-FACT-SHEET-LOG-DIRECTORY-DATA", 1, 1, false);
	    declareFunction("clear_get_fact_sheet_log_directory_data_cached", "CLEAR-GET-FACT-SHEET-LOG-DIRECTORY-DATA-CACHED", 0, 0, false);
	    declareFunction("remove_get_fact_sheet_log_directory_data_cached", "REMOVE-GET-FACT-SHEET-LOG-DIRECTORY-DATA-CACHED", 2, 0, false);
	    declareFunction("get_fact_sheet_log_directory_data_cached_internal", "GET-FACT-SHEET-LOG-DIRECTORY-DATA-CACHED-INTERNAL", 2, 0, false);
	    declareFunction("get_fact_sheet_log_directory_data_cached", "GET-FACT-SHEET-LOG-DIRECTORY-DATA-CACHED", 2, 0, false);
	    declareFunction("find_or_create_fact_sheet_log_directory_data_file", "FIND-OR-CREATE-FACT-SHEET-LOG-DIRECTORY-DATA-FILE", 1, 1, false);
	    declareFunction("ensure_fact_sheet_log_directories_are_up_to_date", "ENSURE-FACT-SHEET-LOG-DIRECTORIES-ARE-UP-TO-DATE", 0, 0, false);
	    declareFunction("parse_and_save_fact_sheet_log_directory_data", "PARSE-AND-SAVE-FACT-SHEET-LOG-DIRECTORY-DATA", 1, 0, false);
	    declareFunction("parse_and_save_fact_sheet_log_file_data", "PARSE-AND-SAVE-FACT-SHEET-LOG-FILE-DATA", 1, 2, false);
	    declareFunction("fact_sheet_log_file_parsed_data_filename", "FACT-SHEET-LOG-FILE-PARSED-DATA-FILENAME", 1, 0, false);
	    declareFunction("fact_sheet_log_directory_parsed_data_filename", "FACT-SHEET-LOG-DIRECTORY-PARSED-DATA-FILENAME", 1, 0, false);
	    declareFunction("fact_sheet_log_file_parse_data", "FACT-SHEET-LOG-FILE-PARSE-DATA", 1, 0, false);
	    declareFunction("fact_sheet_log_line_starts_withP", "FACT-SHEET-LOG-LINE-STARTS-WITH?", 3, 0, false);
	    declareFunction("fact_sheet_log_file_parse_start_line_data", "FACT-SHEET-LOG-FILE-PARSE-START-LINE-DATA", 1, 0, false);
	    declareFunction("fact_sheet_log_file_parse_stale_start_line_data", "FACT-SHEET-LOG-FILE-PARSE-STALE-START-LINE-DATA", 2, 0, false);
	    declareFunction("fact_sheet_log_file_parse_dequeue_line_data", "FACT-SHEET-LOG-FILE-PARSE-DEQUEUE-LINE-DATA", 2, 0, false);
	    declareFunction("fact_sheet_log_file_parse_new_query_timeout_line_data", "FACT-SHEET-LOG-FILE-PARSE-NEW-QUERY-TIMEOUT-LINE-DATA", 1, 0, false);
	    declareFunction("update_current_datum_for_misc_sentence_stats", "UPDATE-CURRENT-DATUM-FOR-MISC-SENTENCE-STATS", 3, 0, false);
	    declareFunction("update_current_datum_for_pph_stats", "UPDATE-CURRENT-DATUM-FOR-PPH-STATS", 3, 0, false);
	    declareFunction("update_current_datum_for_pph_failure_stats", "UPDATE-CURRENT-DATUM-FOR-PPH-FAILURE-STATS", 3, 0, false);
	    declareFunction("update_current_datum_for_info_gather_stats", "UPDATE-CURRENT-DATUM-FOR-INFO-GATHER-STATS", 3, 0, false);
	    declareFunction("finalize_current_datum", "FINALIZE-CURRENT-DATUM", 3, 0, false);
	    declareFunction("compute_total_time_from_start_and_end", "COMPUTE-TOTAL-TIME-FROM-START-AND-END", 1, 0, false);
	    declareFunction("term_from_fact_sheet_log_finish_line", "TERM-FROM-FACT-SHEET-LOG-FINISH-LINE", 2, 0, false);
	    declareFunction("add_total_time_to_datum", "ADD-TOTAL-TIME-TO-DATUM", 1, 1, false);
	    declareFunction("add_end_date_and_time_to_datum", "ADD-END-DATE-AND-TIME-TO-DATUM", 2, 0, false);
	    declareFunction("fact_sheet_term_from_string", "FACT-SHEET-TERM-FROM-STRING", 1, 3, false);
	    declareFunction("nart_end_from_string", "NART-END-FROM-STRING", 2, 0, false);
	    declareFunction("open_new_unique_fact_sheet_log_file", "OPEN-NEW-UNIQUE-FACT-SHEET-LOG-FILE", 0, 0, false);
	    declareFunction("fact_sheet_log_directory_path_for_kb", "FACT-SHEET-LOG-DIRECTORY-PATH-FOR-KB", 0, 1, false);
	    declareFunction("uniquify_fact_sheet_log_filename", "UNIQUIFY-FACT-SHEET-LOG-FILENAME", 3, 0, false);
	    declareFunction("physical_directory_from_path", "PHYSICAL-DIRECTORY-FROM-PATH", 1, 0, false);
	    declareFunction("construct_fact_sheet_paragraph", "CONSTRUCT-FACT-SHEET-PARAGRAPH", 6, 0, false);
	    declareFunction("get_fact_sheet_term_fht_full_path", "GET-FACT-SHEET-TERM-FHT-FULL-PATH", 0, 0, false);
	    declareFunction("build_fact_sheet_term_fht", "BUILD-FACT-SHEET-TERM-FHT", 1, 2, false);
	    declareFunction("clear_construct_fact_sheet_term_id", "CLEAR-CONSTRUCT-FACT-SHEET-TERM-ID", 0, 0, false);
	    declareFunction("remove_construct_fact_sheet_term_id", "REMOVE-CONSTRUCT-FACT-SHEET-TERM-ID", 1, 0, false);
	    declareFunction("construct_fact_sheet_term_id_internal", "CONSTRUCT-FACT-SHEET-TERM-ID-INTERNAL", 1, 0, false);
	    declareFunction("construct_fact_sheet_term_id", "CONSTRUCT-FACT-SHEET-TERM-ID", 1, 0, false);
	    declareFunction("ensure_fact_sheet_term_id_indexed", "ENSURE-FACT-SHEET-TERM-ID-INDEXED", 1, 1, false);
	    declareFunction("index_fact_sheet_term_id", "INDEX-FACT-SHEET-TERM-ID", 2, 0, false);
	    declareFunction("ensure_fact_sheet_term_fbc_created", "ENSURE-FACT-SHEET-TERM-FBC-CREATED", 0, 1, false);
	    declareFunction("fact_sheet_term_fbc_okP", "FACT-SHEET-TERM-FBC-OK?", 0, 0, false);
	    declareFunction("cfasl_externalized_checksum", "CFASL-EXTERNALIZED-CHECKSUM", 1, 0, false);
	    declareFunction("remove_fact_sheet_sentence_trivially_impliesP", "REMOVE-FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?", 2, 1, false);
	    declareFunction("fact_sheet_sentence_trivially_impliesP_internal", "FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?-INTERNAL", 3, 0, false);
	    declareFunction("fact_sheet_sentence_trivially_impliesP", "FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?", 2, 1, false);
	    declareFunction("fact_sheet_args_imply_args_for_pred", "FACT-SHEET-ARGS-IMPLY-ARGS-FOR-PRED", 3, 1, false);
	    declareFunction("subloop_reserved_initialize_fact_sheet_kitchen_sink_test_case_class", "SUBLOOP-RESERVED-INITIALIZE-FACT-SHEET-KITCHEN-SINK-TEST-CASE-CLASS", 1, 0, false);
	    declareFunction("subloop_reserved_initialize_fact_sheet_kitchen_sink_test_case_instance", "SUBLOOP-RESERVED-INITIALIZE-FACT-SHEET-KITCHEN-SINK-TEST-CASE-INSTANCE", 1, 0, false);
	    declareFunction("fact_sheet_kitchen_sink_test_case_p", "FACT-SHEET-KITCHEN-SINK-TEST-CASE-P", 1, 0, false);
	}
	return NIL;
    }

    public static SubLObject declare_fact_sheets_file_Previous() {
	declareMacro("allowing_fact_sheet_evalations", "ALLOWING-FACT-SHEET-EVALATIONS");
	declareMacro("disallowing_fact_sheet_evalations", "DISALLOWING-FACT-SHEET-EVALATIONS");
	declareFunction("allow_fact_sheet_evaluationsP", "ALLOW-FACT-SHEET-EVALUATIONS?", 0, 0, false);
	declareFunction("allow_fact_sheet_evaluations", "ALLOW-FACT-SHEET-EVALUATIONS", 0, 1, false);
	declareFunction("indexical_fact_sheet_query_mt", "INDEXICAL-FACT-SHEET-QUERY-MT", 0, 0, false);
	declareFunction("indexical_fact_sheet_table_type", "INDEXICAL-FACT-SHEET-TABLE-TYPE", 0, 0, false);
	declareFunction("indexical_fact_sheet_sentence", "INDEXICAL-FACT-SHEET-SENTENCE", 0, 0, false);
	declareMacro("with_new_fact_sheet_problem_store", "WITH-NEW-FACT-SHEET-PROBLEM-STORE");
	declareMacro("within_fact_sheet_paraphrase", "WITHIN-FACT-SHEET-PARAPHRASE");
	declareFunction("within_fact_sheet_paraphraseP", "WITHIN-FACT-SHEET-PARAPHRASE?", 0, 0, false);
	declareFunction("indexical_fact_sheet_topic", "INDEXICAL-FACT-SHEET-TOPIC", 0, 0, false);
	declareMacro("with_fact_sheet_focal_term", "WITH-FACT-SHEET-FOCAL-TERM");
	declareFunction("chmod_safe_to_useP", "CHMOD-SAFE-TO-USE?", 0, 0, false);
	declareMacro("writing_fact_sheet_file", "WRITING-FACT-SHEET-FILE");
	declareMacro("writing_fact_sheet_data_file", "WRITING-FACT-SHEET-DATA-FILE");
	declareMacro("reading_fact_sheet_data_file", "READING-FACT-SHEET-DATA-FILE");
	declareFunction("clear_fact_sheet_default_language_mt", "CLEAR-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	declareFunction("remove_fact_sheet_default_language_mt", "REMOVE-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	declareFunction("fact_sheet_default_language_mt_internal", "FACT-SHEET-DEFAULT-LANGUAGE-MT-INTERNAL", 0, 0, false);
	declareFunction("fact_sheet_default_language_mt", "FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	declareFunction("clear_build_fact_sheet_default_language_mt", "CLEAR-BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	declareFunction("remove_build_fact_sheet_default_language_mt", "REMOVE-BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	declareFunction("build_fact_sheet_default_language_mt_internal", "BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT-INTERNAL", 0, 0, false);
	declareFunction("build_fact_sheet_default_language_mt", "BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
	declareFunction("fact_sheet_default_language_mt_for_term", "FACT-SHEET-DEFAULT-LANGUAGE-MT-FOR-TERM", 1, 0, false);
	declareFunction("clear_fact_sheet_default_domain_mt", "CLEAR-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	declareFunction("remove_fact_sheet_default_domain_mt", "REMOVE-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	declareFunction("fact_sheet_default_domain_mt_internal", "FACT-SHEET-DEFAULT-DOMAIN-MT-INTERNAL", 0, 0, false);
	declareFunction("fact_sheet_default_domain_mt", "FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	declareFunction("clear_build_fact_sheet_default_domain_mt", "CLEAR-BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	declareFunction("remove_build_fact_sheet_default_domain_mt", "REMOVE-BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	declareFunction("build_fact_sheet_default_domain_mt_internal", "BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT-INTERNAL", 0, 0, false);
	declareFunction("build_fact_sheet_default_domain_mt", "BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
	declareFunction("fact_sheet_default_domain_mt_for_term", "FACT-SHEET-DEFAULT-DOMAIN-MT-FOR-TERM", 1, 0, false);
	declareFunction("get_linkless_fact_sheet_for_term_in_html", "GET-LINKLESS-FACT-SHEET-FOR-TERM-IN-HTML", 1, 4, false);
	declareFunction("convert_fact_sheet_sentence_links_to_spans", "CONVERT-FACT-SHEET-SENTENCE-LINKS-TO-SPANS", 1, 0, false);
	declareFunction("convert_fact_sheet_link_to_span", "CONVERT-FACT-SHEET-LINK-TO-SPAN", 4, 0, false);
	declareFunction("get_updated_fact_sheet_for_term_and_sentence_in_html", "GET-UPDATED-FACT-SHEET-FOR-TERM-AND-SENTENCE-IN-HTML", 2, 4, false);
	declareFunction("get_updated_fact_sheet_for_term_and_sentence_in_markup_internal", "GET-UPDATED-FACT-SHEET-FOR-TERM-AND-SENTENCE-IN-MARKUP-INTERNAL", 6, 0, false);
	declareFunction("get_fact_sheet_for_term_in_xml_with_only_kb_specified_content", "GET-FACT-SHEET-FOR-TERM-IN-XML-WITH-ONLY-KB-SPECIFIED-CONTENT", 1, 4, false);
	declareFunction("get_fact_sheet_for_term_in_html", "GET-FACT-SHEET-FOR-TERM-IN-HTML", 1, 4, false);
	declareFunction("get_fact_sheet_for_term_in_markup_language", "GET-FACT-SHEET-FOR-TERM-IN-MARKUP-LANGUAGE", 1, 4, false);
	declareFunction("get_fact_sheet_for_term_in_markup_internal", "GET-FACT-SHEET-FOR-TERM-IN-MARKUP-INTERNAL", 5, 1, false);
	declareFunction("fact_sheet_filter_footnotes_for_sources", "FACT-SHEET-FILTER-FOOTNOTES-FOR-SOURCES", 2, 0, false);
	declareMacro("html_fact_sheet_optional_section", "HTML-FACT-SHEET-OPTIONAL-SECTION");
	declareFunction("footnote_text", "FOOTNOTE-TEXT", 1, 0, false);
	declareFunction("footnote_source", "FOOTNOTE-SOURCE", 1, 0, false);
	declareFunction("generate_fact_sheet_data", "GENERATE-FACT-SHEET-DATA", 4, 0, false);
	declareFunction("fact_sheet_stats_p", "FACT-SHEET-STATS-P", 1, 0, false);
	declareFunction("possibly_fact_sheet_domain_mtP", "POSSIBLY-FACT-SHEET-DOMAIN-MT?", 1, 0, false);
	declareFunction("new_fact_sheet_stats", "NEW-FACT-SHEET-STATS", 7, 0, false);
	declareFunction("fact_sheet_texts_from_data", "FACT-SHEET-TEXTS-FROM-DATA", 5, 0, false);
	declareFunction("fact_sheet_prefer_slot_values_for_categoryP", "FACT-SHEET-PREFER-SLOT-VALUES-FOR-CATEGORY?", 2, 0, false);
	declareFunction("fact_sheet_markup_tables_from_data", "FACT-SHEET-MARKUP-TABLES-FROM-DATA", 6, 0, false);
	declareFunction("fact_sheet_xml_table_from_data", "FACT-SHEET-XML-TABLE-FROM-DATA", 7, 0, false);
	declareFunction("fact_sheet_html_table_from_data", "FACT-SHEET-HTML-TABLE-FROM-DATA", 7, 0, false);
	declareFunction("sort_fact_sheet_table_data", "SORT-FACT-SHEET-TABLE-DATA", 1, 0, false);
	declareFunction("fact_sheet_table_sentence_data_predicate", "FACT-SHEET-TABLE-SENTENCE-DATA-PREDICATE", 1, 0, false);
	declareFunction("find_assertion_for_fact_sheet_sentence", "FIND-ASSERTION-FOR-FACT-SHEET-SENTENCE", 2, 0, false);
	declareFunction("fact_sheet_table_title", "FACT-SHEET-TABLE-TITLE", 2, 0, false);
	declareFunction("output_fact_sheet_table_title_row", "OUTPUT-FACT-SHEET-TABLE-TITLE-ROW", 2, 0, false);
	declareFunction("output_fact_sheet_table_sentence_link", "OUTPUT-FACT-SHEET-TABLE-SENTENCE-LINK", 1, 0, false);
	declareFunction("fact_sheet_table_header_values", "FACT-SHEET-TABLE-HEADER-VALUES", 2, 0, false);
	declareFunction("fact_sheet_table_data_for_value", "FACT-SHEET-TABLE-DATA-FOR-VALUE", 6, 0, false);
	declareFunction("fact_sheet_table_specs", "FACT-SHEET-TABLE-SPECS", 0, 2, false);
	declareFunction("section_table_specs", "SECTION-TABLE-SPECS", 2, 0, false);
	declareFunction("table_types_from_section_table_specs", "TABLE-TYPES-FROM-SECTION-TABLE-SPECS", 1, 0, false);
	declareFunction("table_data_for_sentence", "TABLE-DATA-FOR-SENTENCE", 2, 3, false);
	declareFunction("dereference_fact_sheet_indexicals", "DEREFERENCE-FACT-SHEET-INDEXICALS", 1, 0, false);
	declareFunction("fact_sheet_anytime_mt", "FACT-SHEET-ANYTIME-MT", 1, 0, false);
	declareFunction("possibly_reserve_sentence_for_tables", "POSSIBLY-RESERVE-SENTENCE-FOR-TABLES", 3, 3, false);
	declareFunction("fact_sheet_sentence_conjuncts", "FACT-SHEET-SENTENCE-CONJUNCTS", 1, 0, false);
	declareFunction("valid_sentence_data_for_table_typeP", "VALID-SENTENCE-DATA-FOR-TABLE-TYPE?", 2, 0, false);
	declareFunction("fact_sheet_table_type_width_internal", "FACT-SHEET-TABLE-TYPE-WIDTH-INTERNAL", 1, 0, false);
	declareFunction("fact_sheet_table_type_width", "FACT-SHEET-TABLE-TYPE-WIDTH", 1, 0, false);
	declareFunction("fact_sheet_sort_paragraphs_at_retrieval_time", "FACT-SHEET-SORT-PARAGRAPHS-AT-RETRIEVAL-TIME", 2, 0, false);
	declareFunction("possibly_convert_summary_sentence_to_cycl", "POSSIBLY-CONVERT-SUMMARY-SENTENCE-TO-CYCL", 1, 0, false);
	declareFunction("new_summary_sentence", "NEW-SUMMARY-SENTENCE", 2, 0, false);
	declareFunction("summary_sentence_cycl", "SUMMARY-SENTENCE-CYCL", 1, 0, false);
	declareFunction("summary_sentence_plist_cycl", "SUMMARY-SENTENCE-PLIST-CYCL", 1, 0, false);
	declareFunction("summary_sentence_assertions", "SUMMARY-SENTENCE-ASSERTIONS", 1, 0, false);
	declareFunction("summary_sentence_sources", "SUMMARY-SENTENCE-SOURCES", 1, 0, false);
	declareFunction("summary_sentence_plistP", "SUMMARY-SENTENCE-PLIST?", 1, 0, false);
	declareFunction("construct_fact_sheet_paragraph", "CONSTRUCT-FACT-SHEET-PARAGRAPH", 7, 1, false);
	declareFunction("fact_sheet_slot_values", "FACT-SHEET-SLOT-VALUES", 2, 0, false);
	declareFunction("fact_sheet_slot_value_string", "FACT-SHEET-SLOT-VALUE-STRING", 1, 0, false);
	declareFunction("fact_sheet_summary_sentence_passes_data_gathering_time_filterP", "FACT-SHEET-SUMMARY-SENTENCE-PASSES-DATA-GATHERING-TIME-FILTER?", 3, 0, false);
	declareFunction("fact_sheet_summary_sentence_passes_retrieval_time_filterP", "FACT-SHEET-SUMMARY-SENTENCE-PASSES-RETRIEVAL-TIME-FILTER?", 2, 3, false);
	declareFunction("fact_sheet_blacklisted_sources", "FACT-SHEET-BLACKLISTED-SOURCES", 2, 0, false);
	declareFunction("any_term_in_assertion_list_passes_test", "ANY-TERM-IN-ASSERTION-LIST-PASSES-TEST", 3, 0, false);
	declareFunction("fact_sheet_title", "FACT-SHEET-TITLE", 1, 0, false);
	declareFunction("generate_fact_sheet_markup", "GENERATE-FACT-SHEET-MARKUP", 7, 0, false);
	declareFunction("generate_fact_sheet_xml", "GENERATE-FACT-SHEET-XML", 7, 0, false);
	declareFunction("generate_fact_sheet_html", "GENERATE-FACT-SHEET-HTML", 7, 0, false);
	declareFunction("emit_fact_sheet_opencyc_uri", "EMIT-FACT-SHEET-OPENCYC-URI", 3, 0, false);
	declareFunction("get_fact_sheet_for_term_id_in_html", "GET-FACT-SHEET-FOR-TERM-ID-IN-HTML", 1, 4, false);
	declareFunction("clear_all_fact_sheet_caches", "CLEAR-ALL-FACT-SHEET-CACHES", 0, 0, false);
	declareFunction("fact_sheet_request_denots", "FACT-SHEET-REQUEST-DENOTS", 1, 0, false);
	declareFunction("get_possible_fact_sheet_terms_mentioned_in_string", "GET-POSSIBLE-FACT-SHEET-TERMS-MENTIONED-IN-STRING", 2, 1, false);
	declareFunction("get_word_denots_for_fact_sheets", "GET-WORD-DENOTS-FOR-FACT-SHEETS", 1, 0, false);
	declareFunction("term_ok_for_cae_query_search_term_box_p", "TERM-OK-FOR-CAE-QUERY-SEARCH-TERM-BOX-P", 1, 0, false);
	declareFunction("clear_scalar_interval_p", "CLEAR-SCALAR-INTERVAL-P", 0, 0, false);
	declareFunction("remove_scalar_interval_p", "REMOVE-SCALAR-INTERVAL-P", 1, 1, false);
	declareFunction("scalar_interval_p_internal", "SCALAR-INTERVAL-P-INTERNAL", 2, 0, false);
	declareFunction("scalar_interval_p", "SCALAR-INTERVAL-P", 1, 1, false);
	declareFunction("term_ok_for_fact_sheet_p", "TERM-OK-FOR-FACT-SHEET-P", 1, 1, false);
	declareFunction("mini_fact_sheet_term_types", "MINI-FACT-SHEET-TERM-TYPES", 0, 0, false);
	declareFunction("fact_sheet_data_path", "FACT-SHEET-DATA-PATH", 0, 0, false);
	declareFunction("set_fact_sheet_data_path", "SET-FACT-SHEET-DATA-PATH", 1, 0, false);
	declareFunction("fact_sheet_term_id", "FACT-SHEET-TERM-ID", 1, 1, false);
	declareFunction("fact_sheet_term_legacy_id", "FACT-SHEET-TERM-LEGACY-ID", 1, 0, false);
	declareFunction("clear_fact_sheet_term_id_low", "CLEAR-FACT-SHEET-TERM-ID-LOW", 0, 0, false);
	declareFunction("remove_fact_sheet_term_id_low", "REMOVE-FACT-SHEET-TERM-ID-LOW", 1, 1, false);
	declareFunction("fact_sheet_term_id_low_internal", "FACT-SHEET-TERM-ID-LOW-INTERNAL", 2, 0, false);
	declareFunction("fact_sheet_term_id_low", "FACT-SHEET-TERM-ID-LOW", 1, 1, false);
	declareFunction("possible_fact_sheet_term_id_p", "POSSIBLE-FACT-SHEET-TERM-ID-P", 1, 0, false);
	declareFunction("fact_sheet_term_idP", "FACT-SHEET-TERM-ID?", 1, 0, false);
	declareFunction("fact_sheet_term_from_id", "FACT-SHEET-TERM-FROM-ID", 1, 1, false);
	declareFunction("clear_warn_unknown_fact_sheet_term_id", "CLEAR-WARN-UNKNOWN-FACT-SHEET-TERM-ID", 0, 0, false);
	declareFunction("remove_warn_unknown_fact_sheet_term_id", "REMOVE-WARN-UNKNOWN-FACT-SHEET-TERM-ID", 1, 0, false);
	declareFunction("warn_unknown_fact_sheet_term_id_internal", "WARN-UNKNOWN-FACT-SHEET-TERM-ID-INTERNAL", 1, 0, false);
	declareFunction("warn_unknown_fact_sheet_term_id", "WARN-UNKNOWN-FACT-SHEET-TERM-ID", 1, 0, false);
	declareFunction("fact_sheet_term_from_span_id", "FACT-SHEET-TERM-FROM-SPAN-ID", 1, 1, false);
	declareFunction("paraphrase_fact_sheet_sentences", "PARAPHRASE-FACT-SHEET-SENTENCES", 5, 0, false);
	declareFunction("fact_sheet_force_bullets_for_categoryP", "FACT-SHEET-FORCE-BULLETS-FOR-CATEGORY?", 1, 0, false);
	declareFunction("fact_sheet_footnotes_for_sources", "FACT-SHEET-FOOTNOTES-FOR-SOURCES", 1, 1, false);
	declareFunction("fact_sheet_footnote_for_source", "FACT-SHEET-FOOTNOTE-FOR-SOURCE", 3, 0, false);
	declareFunction("sort_fact_sheet_texts_by_category", "SORT-FACT-SHEET-TEXTS-BY-CATEGORY", 1, 0, false);
	declareFunction("higher_priority_fact_sheet_categoryP", "HIGHER-PRIORITY-FACT-SHEET-CATEGORY?", 2, 0, false);
	declareFunction("substitute_fact_sheet_labels_for_categories", "SUBSTITUTE-FACT-SHEET-LABELS-FOR-CATEGORIES", 3, 0, false);
	declareFunction("substitute_fact_sheet_label_for_category", "SUBSTITUTE-FACT-SHEET-LABEL-FOR-CATEGORY", 3, 0, false);
	declareFunction("clear_fact_sheet_sentence_group_summary", "CLEAR-FACT-SHEET-SENTENCE-GROUP-SUMMARY", 0, 0, false);
	declareFunction("remove_fact_sheet_sentence_group_summary", "REMOVE-FACT-SHEET-SENTENCE-GROUP-SUMMARY", 6, 1, false);
	declareFunction("fact_sheet_sentence_group_summary_internal", "FACT-SHEET-SENTENCE-GROUP-SUMMARY-INTERNAL", 7, 0, false);
	declareFunction("fact_sheet_sentence_group_summary", "FACT-SHEET-SENTENCE-GROUP-SUMMARY", 6, 1, false);
	declareFunction("simulate_fact_sheet_sentence_paraphrase", "SIMULATE-FACT-SHEET-SENTENCE-PARAPHRASE", 2, 2, false);
	declareFunction("simulate_fact_sheet_sentences_paraphrase", "SIMULATE-FACT-SHEET-SENTENCES-PARAPHRASE", 2, 2, false);
	declareFunction("fact_sheet_bogus_hyperlink_open_tag_for_term", "FACT-SHEET-BOGUS-HYPERLINK-OPEN-TAG-FOR-TERM", 2, 0, false);
	declareFunction("fact_sheet_bogus_hyperlink_open_tag_for_term_id", "FACT-SHEET-BOGUS-HYPERLINK-OPEN-TAG-FOR-TERM-ID", 1, 0, false);
	declareFunction("fact_sheet_bogus_url_for_term", "FACT-SHEET-BOGUS-URL-FOR-TERM", 1, 0, false);
	declareFunction("fact_sheet_bogus_url_for_term_id", "FACT-SHEET-BOGUS-URL-FOR-TERM-ID", 1, 0, false);
	declareFunction("strip_bogus_hyperlinks_for_term_id", "STRIP-BOGUS-HYPERLINKS-FOR-TERM-ID", 2, 0, false);
	declareFunction("fact_sheet_html_find_marked_up_terms", "FACT-SHEET-HTML-FIND-MARKED-UP-TERMS", 1, 1, false);
	declareFunction("fact_sheet_html_find_marked_up_terms_fast", "FACT-SHEET-HTML-FIND-MARKED-UP-TERMS-FAST", 1, 1, false);
	declareFunction("get_term_and_close_tag_from_token", "GET-TERM-AND-CLOSE-TAG-FROM-TOKEN", 1, 0, false);
	declareFunction("fact_sheet_html_find_matching_close_tag_start", "FACT-SHEET-HTML-FIND-MATCHING-CLOSE-TAG-START", 4, 0, false);
	declareFunction("fact_sheet_term_inappropriate_for_hyperlinkP", "FACT-SHEET-TERM-INAPPROPRIATE-FOR-HYPERLINK?", 1, 0, false);
	declareFunction("mark_up_fact_sheet_sentenceP", "MARK-UP-FACT-SHEET-SENTENCE?", 2, 0, false);
	declareFunction("fact_sheet_possibly_mark_up_sentence_paraphrase", "FACT-SHEET-POSSIBLY-MARK-UP-SENTENCE-PARAPHRASE", 3, 0, false);
	declareFunction("fact_sheet_mark_up_sentence_paraphrase", "FACT-SHEET-MARK-UP-SENTENCE-PARAPHRASE", 3, 0, false);
	declareFunction("remove_link", "REMOVE-LINK", 3, 0, false);
	declareFunction("fact_sheet_sentence_id_function", "FACT-SHEET-SENTENCE-ID-FUNCTION", 1, 0, false);
	declareFunction("xml_factsheetsP", "XML-FACTSHEETS?", 1, 0, false);
	declareFunction("fact_sheet_sentence_expand_coordination_sets", "FACT-SHEET-SENTENCE-EXPAND-COORDINATION-SETS", 1, 0, false);
	declareFunction("fact_sheet_span_for_term", "FACT-SHEET-SPAN-FOR-TERM", 2, 0, false);
	declareFunction("replace_fact_sheet_markups", "REPLACE-FACT-SHEET-MARKUPS", 2, 1, false);
	declareFunction("replace_fact_sheet_markups_fast", "REPLACE-FACT-SHEET-MARKUPS-FAST", 2, 1, false);
	declareFunction("fact_sheet_max_sentences_per_pred", "FACT-SHEET-MAX-SENTENCES-PER-PRED", 1, 0, false);
	declareFunction("display_fact_sheet", "DISPLAY-FACT-SHEET", 5, 0, false);
	declareFunction("display_fact_sheet_with_internal_styles", "DISPLAY-FACT-SHEET-WITH-INTERNAL-STYLES", 4, 0, false);
	declareFunction("display_fact_sheet_for_external_styles", "DISPLAY-FACT-SHEET-FOR-EXTERNAL-STYLES", 4, 1, false);
	declareFunction("display_fact_sheet_xml", "DISPLAY-FACT-SHEET-XML", 4, 1, false);
	declareFunction("print_fact_sheet_stats", "PRINT-FACT-SHEET-STATS", 2, 1, false);
	declareFunction("fact_sheet_kb_version_string", "FACT-SHEET-KB-VERSION-STRING", 1, 0, false);
	declareFunction("fact_sheet_cyc_revision_string", "FACT-SHEET-CYC-REVISION-STRING", 1, 0, false);
	declareFunction("fact_sheet_info_string", "FACT-SHEET-INFO-STRING", 2, 0, false);
	declareFunction("fact_sheet_pph_demerit_cutoff", "FACT-SHEET-PPH-DEMERIT-CUTOFF", 0, 0, false);
	declareFunction("fact_sheet_min_paragraph_length", "FACT-SHEET-MIN-PARAGRAPH-LENGTH", 0, 0, false);
	declareFunction("fact_sheet_verbosity_p", "FACT-SHEET-VERBOSITY-P", 1, 0, false);
	declareFunction("fact_sheet_image_root_placeholder", "FACT-SHEET-IMAGE-ROOT-PLACEHOLDER", 0, 0, false);
	declareFunction("fact_sheet_image_url_for_term", "FACT-SHEET-IMAGE-URL-FOR-TERM", 1, 1, false);
	declareFunction("fact_sheet_base_url_placeholder", "FACT-SHEET-BASE-URL-PLACEHOLDER", 0, 0, false);
	declareFunction("fact_sheet_html_replace_placeholders", "FACT-SHEET-HTML-REPLACE-PLACEHOLDERS", 2, 0, false);
	declareFunction("fact_sheet_html_contains_replaceable_colorsP", "FACT-SHEET-HTML-CONTAINS-REPLACEABLE-COLORS?", 1, 0, false);
	declareFunction("fact_sheet_html_replace_colors", "FACT-SHEET-HTML-REPLACE-COLORS", 1, 0, false);
	declareFunction("fact_sheet_html_contains_base_url_placeholderP", "FACT-SHEET-HTML-CONTAINS-BASE-URL-PLACEHOLDER?", 1, 0, false);
	declareFunction("fact_sheet_html_replace_base_url_placeholder", "FACT-SHEET-HTML-REPLACE-BASE-URL-PLACEHOLDER", 1, 0, false);
	declareFunction("fact_sheet_html_contains_image_root_placeholderP", "FACT-SHEET-HTML-CONTAINS-IMAGE-ROOT-PLACEHOLDER?", 1, 0, false);
	declareFunction("clear_fact_sheet_image_file_root_url", "CLEAR-FACT-SHEET-IMAGE-FILE-ROOT-URL", 0, 0, false);
	declareFunction("remove_fact_sheet_image_file_root_url", "REMOVE-FACT-SHEET-IMAGE-FILE-ROOT-URL", 0, 0, false);
	declareFunction("fact_sheet_image_file_root_url_internal", "FACT-SHEET-IMAGE-FILE-ROOT-URL-INTERNAL", 0, 0, false);
	declareFunction("fact_sheet_image_file_root_url", "FACT-SHEET-IMAGE-FILE-ROOT-URL", 0, 0, false);
	declareFunction("use_fact_sheet_image_file_root_urlP", "USE-FACT-SHEET-IMAGE-FILE-ROOT-URL?", 0, 0, false);
	declareFunction("relative_fact_sheet_image_url", "RELATIVE-FACT-SHEET-IMAGE-URL", 0, 1, false);
	declareFunction("fact_sheet_html_replace_image_root_placeholder", "FACT-SHEET-HTML-REPLACE-IMAGE-ROOT-PLACEHOLDER", 2, 0, false);
	declareFunction("clear_fact_sheet_image_url_root", "CLEAR-FACT-SHEET-IMAGE-URL-ROOT", 0, 0, false);
	declareFunction("remove_fact_sheet_image_url_root", "REMOVE-FACT-SHEET-IMAGE-URL-ROOT", 1, 0, false);
	declareFunction("fact_sheet_image_url_root_internal", "FACT-SHEET-IMAGE-URL-ROOT-INTERNAL", 1, 0, false);
	declareFunction("fact_sheet_image_url_root", "FACT-SHEET-IMAGE-URL-ROOT", 1, 0, false);
	declareFunction("fact_sheet_image_path_okP", "FACT-SHEET-IMAGE-PATH-OK?", 1, 0, false);
	declareFunction("fact_sheet_query_sentence", "FACT-SHEET-QUERY-SENTENCE", 0, 2, false);
	declareFunction("get_mini_fact_sheet_for_term_in_html", "GET-MINI-FACT-SHEET-FOR-TERM-IN-HTML", 1, 2, false);
	declareFunction("clear_get_mini_fact_sheet_for_term_cached", "CLEAR-GET-MINI-FACT-SHEET-FOR-TERM-CACHED", 0, 0, false);
	declareFunction("remove_get_mini_fact_sheet_for_term_cached", "REMOVE-GET-MINI-FACT-SHEET-FOR-TERM-CACHED", 4, 0, false);
	declareFunction("get_mini_fact_sheet_for_term_cached_internal", "GET-MINI-FACT-SHEET-FOR-TERM-CACHED-INTERNAL", 4, 0, false);
	declareFunction("get_mini_fact_sheet_for_term_cached", "GET-MINI-FACT-SHEET-FOR-TERM-CACHED", 4, 0, false);
	declareFunction("fallback_mini_fact_sheet_for_term_in_html", "FALLBACK-MINI-FACT-SHEET-FOR-TERM-IN-HTML", 3, 0, false);
	declareFunction("fact_sheet_query_properties", "FACT-SHEET-QUERY-PROPERTIES", 0, 2, false);
	declareFunction("omitted_fact_sheet_sentences", "OMITTED-FACT-SHEET-SENTENCES", 0, 0, false);
	declareFunction("fact_sheet_sentences_for_assertion_and_term", "FACT-SHEET-SENTENCES-FOR-ASSERTION-AND-TERM", 2, 1, false);
	declareFunction("fact_sheet_sentences_for_term", "FACT-SHEET-SENTENCES-FOR-TERM", 1, 1, false);
	declareFunction("clear_fact_sheet_sentences_for_term_from_kbq", "CLEAR-FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ", 0, 0, false);
	declareFunction("remove_fact_sheet_sentences_for_term_from_kbq", "REMOVE-FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ", 2, 3, false);
	declareFunction("fact_sheet_sentences_for_term_from_kbq_internal", "FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ-INTERNAL", 5, 0, false);
	declareFunction("fact_sheet_sentences_for_term_from_kbq", "FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ", 2, 3, false);
	declareFunction("clear_fact_sheet_sentences_for_term_internal", "CLEAR-FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL", 0, 0, false);
	declareFunction("remove_fact_sheet_sentences_for_term_internal", "REMOVE-FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL", 4, 0, false);
	declareFunction("fact_sheet_sentences_for_term_internal_internal", "FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL-INTERNAL", 4, 0, false);
	declareFunction("fact_sheet_sentences_for_term_internal", "FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL", 4, 0, false);
	declareFunction("fact_sheet_sentence_about_topicP", "FACT-SHEET-SENTENCE-ABOUT-TOPIC?", 2, 3, false);
	declareFunction("clear_fact_sheet_sentence_trivially_impliesP", "CLEAR-FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?", 0, 0, false);
	declareFunction("remove_fact_sheet_sentence_trivially_impliesP", "REMOVE-FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?", 2, 3, false);
	declareFunction("fact_sheet_sentence_trivially_impliesP_internal", "FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?-INTERNAL", 5, 0, false);
	declareFunction("fact_sheet_sentence_trivially_impliesP", "FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?", 2, 3, false);
	declareFunction("fact_highly_prevalent_among_instancesP", "FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?", 4, 0, false);
	declareFunction("clear_fact_highly_prevalent_among_instancesP_cached", "CLEAR-FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED", 0, 0, false);
	declareFunction("remove_fact_highly_prevalent_among_instancesP_cached", "REMOVE-FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED", 3, 0, false);
	declareFunction("fact_highly_prevalent_among_instancesP_cached_internal", "FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED-INTERNAL", 3, 0, false);
	declareFunction("fact_highly_prevalent_among_instancesP_cached", "FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED", 3, 0, false);
	declareFunction("fact_sheet_sentence_formula", "FACT-SHEET-SENTENCE-FORMULA", 1, 0, false);
	declareFunction("fact_sheet_trivial_meta_supportP", "FACT-SHEET-TRIVIAL-META-SUPPORT?", 2, 0, false);
	declareFunction("assertion_mt_times_visibleP", "ASSERTION-MT-TIMES-VISIBLE?", 2, 0, false);
	declareFunction("fact_sheet_skolem_time_intervalP", "FACT-SHEET-SKOLEM-TIME-INTERVAL?", 1, 0, false);
	declareFunction("fact_sheet_skolem_time_interval_more_constrainedP", "FACT-SHEET-SKOLEM-TIME-INTERVAL-MORE-CONSTRAINED?", 2, 0, false);
	declareFunction("fact_sheet_skolem_time_interval_subsuming_interval", "FACT-SHEET-SKOLEM-TIME-INTERVAL-SUBSUMING-INTERVAL", 1, 0, false);
	declareFunction("fact_sheet_args_imply_args_for_pred", "FACT-SHEET-ARGS-IMPLY-ARGS-FOR-PRED", 3, 2, false);
	declareFunction("clear_fact_sheet_transitivity_check", "CLEAR-FACT-SHEET-TRANSITIVITY-CHECK", 0, 0, false);
	declareFunction("remove_fact_sheet_transitivity_check", "REMOVE-FACT-SHEET-TRANSITIVITY-CHECK", 2, 0, false);
	declareFunction("fact_sheet_transitivity_check_internal", "FACT-SHEET-TRANSITIVITY-CHECK-INTERNAL", 2, 0, false);
	declareFunction("fact_sheet_transitivity_check", "FACT-SHEET-TRANSITIVITY-CHECK", 2, 0, false);
	declareFunction("add_thcl_fact_sheet_sentences", "ADD-THCL-FACT-SHEET-SENTENCES", 3, 0, false);
	declareFunction("thcl_sentences_for_term_fact_sheet", "THCL-SENTENCES-FOR-TERM-FACT-SHEET", 1, 1, false);
	declareFunction("thcl_preds_for_term_fact_sheet", "THCL-PREDS-FOR-TERM-FACT-SHEET", 1, 1, false);
	declareFunction("fact_sheet_queries_browsableP", "FACT-SHEET-QUERIES-BROWSABLE?", 0, 0, false);
	declareFunction("new_fact_sheet_query_daemon", "NEW-FACT-SHEET-QUERY-DAEMON", 0, 0, false);
	declareFunction("fact_sheet_query_daemon_run", "FACT-SHEET-QUERY-DAEMON-RUN", 1, 0, false);
	declareFunction("free_fact_sheet_query_spec", "FREE-FACT-SHEET-QUERY-SPEC", 1, 0, false);
	declareFunction("valid_fact_sheet_query_spec_p", "VALID-FACT-SHEET-QUERY-SPEC-P", 1, 0, false);
	declareFunction("new_fact_sheet_query", "NEW-FACT-SHEET-QUERY", 4, 0, false);
	declareFunction("fact_sheet_sentence_query", "FACT-SHEET-SENTENCE-QUERY", 3, 0, false);
	declareFunction("clear_fact_sheet_label_for_category", "CLEAR-FACT-SHEET-LABEL-FOR-CATEGORY", 0, 0, false);
	declareFunction("remove_fact_sheet_label_for_category", "REMOVE-FACT-SHEET-LABEL-FOR-CATEGORY", 3, 0, false);
	declareFunction("fact_sheet_label_for_category_internal", "FACT-SHEET-LABEL-FOR-CATEGORY-INTERNAL", 3, 0, false);
	declareFunction("fact_sheet_label_for_category", "FACT-SHEET-LABEL-FOR-CATEGORY", 3, 0, false);
	declareFunction("group_fact_sheet_sentences_alist", "GROUP-FACT-SHEET-SENTENCES-ALIST", 1, 0, false);
	declareFunction("group_fact_sheet_sentences_for_category", "GROUP-FACT-SHEET-SENTENCES-FOR-CATEGORY", 2, 0, false);
	declareFunction("sort_fact_sheet_sentences_for_category", "SORT-FACT-SHEET-SENTENCES-FOR-CATEGORY", 2, 0, false);
	declareFunction("fact_sheet_sentence_more_recentP", "FACT-SHEET-SENTENCE-MORE-RECENT?", 2, 0, false);
	declareFunction("fact_sheet_sentence_time_interval", "FACT-SHEET-SENTENCE-TIME-INTERVAL", 1, 0, false);
	declareFunction("clear_fact_sheet_sentence_time_interval_cached", "CLEAR-FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED", 0, 0, false);
	declareFunction("remove_fact_sheet_sentence_time_interval_cached", "REMOVE-FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED", 1, 0, false);
	declareFunction("fact_sheet_sentence_time_interval_cached_internal", "FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED-INTERNAL", 1, 0, false);
	declareFunction("fact_sheet_sentence_time_interval_cached", "FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED", 1, 0, false);
	declareFunction("fact_sheet_sentence_precedence_for_category_internal", "FACT-SHEET-SENTENCE-PRECEDENCE-FOR-CATEGORY-INTERNAL", 2, 0, false);
	declareFunction("fact_sheet_sentence_precedence_for_category", "FACT-SHEET-SENTENCE-PRECEDENCE-FOR-CATEGORY", 2, 0, false);
	declareFunction("maximize_fact_sheet_sentence_coherence", "MAXIMIZE-FACT-SHEET-SENTENCE-COHERENCE", 1, 0, false);
	declareFunction("most_coherent_fact_sheet_sentence", "MOST-COHERENT-FACT-SHEET-SENTENCE", 2, 0, false);
	declareFunction("fact_sheet_sentence_coherence_to_group", "FACT-SHEET-SENTENCE-COHERENCE-TO-GROUP", 2, 0, false);
	declareFunction("fact_sheet_sentence_coherence_internal", "FACT-SHEET-SENTENCE-COHERENCE-INTERNAL", 2, 1, false);
	declareFunction("fact_sheet_sentence_coherence", "FACT-SHEET-SENTENCE-COHERENCE", 2, 1, false);
	declareFunction("delete_duplicate_fact_sheet_sentences", "DELETE-DUPLICATE-FACT-SHEET-SENTENCES", 1, 0, false);
	declareFunction("fact_sheet_sentences_equalP", "FACT-SHEET-SENTENCES-EQUAL?", 2, 0, false);
	declareFunction("fact_sheet_assertion_time_indices_equalP", "FACT-SHEET-ASSERTION-TIME-INDICES-EQUAL?", 2, 0, false);
	declareFunction("fact_sheet_sentence_predicate", "FACT-SHEET-SENTENCE-PREDICATE", 1, 0, false);
	declareFunction("fact_sheet_sentence_mt", "FACT-SHEET-SENTENCE-MT", 1, 0, false);
	declareFunction("pred_counts_for_sentences", "PRED-COUNTS-FOR-SENTENCES", 1, 0, false);
	declareFunction("fact_sheet_pred_count_L", "FACT-SHEET-PRED-COUNT-<", 2, 0, false);
	declareFunction("stable_sort_fact_sheet_sentences", "STABLE-SORT-FACT-SHEET-SENTENCES", 1, 0, false);
	declareFunction("stable_sort_fact_sheet_sentences_for_category", "STABLE-SORT-FACT-SHEET-SENTENCES-FOR-CATEGORY", 1, 0, false);
	declareFunction("fact_sheet_predicate_L", "FACT-SHEET-PREDICATE-<", 2, 0, false);
	declareFunction("fact_sheet_sentence_references_earlier_dateP", "FACT-SHEET-SENTENCE-REFERENCES-EARLIER-DATE?", 2, 0, false);
	declareFunction("fact_sheet_sentence_references_earlier_dateP_internal", "FACT-SHEET-SENTENCE-REFERENCES-EARLIER-DATE?-INTERNAL", 2, 0, false);
	declareFunction("expression_containsP", "EXPRESSION-CONTAINS?", 2, 3, false);
	declareFunction("possibly_remove_fact_sheet_sections", "POSSIBLY-REMOVE-FACT-SHEET-SECTIONS", 2, 1, false);
	declareFunction("get_factsheet_kb_from_html", "GET-FACTSHEET-KB-FROM-HTML", 1, 0, false);
	declareFunction("get_factsheet_system_from_html", "GET-FACTSHEET-SYSTEM-FROM-HTML", 1, 0, false);
	declareFunction("fact_sheet_section_start_position", "FACT-SHEET-SECTION-START-POSITION", 2, 1, false);
	declareFunction("fact_sheet_section_end_position", "FACT-SHEET-SECTION-END-POSITION", 3, 0, false);
	declareFunction("remove_fact_sheet_section", "REMOVE-FACT-SHEET-SECTION", 2, 1, false);
	declareFunction("add_evaluation_link", "ADD-EVALUATION-LINK", 2, 3, false);
	declareFunction("add_before_fact_sheet_section", "ADD-BEFORE-FACT-SHEET-SECTION", 3, 0, false);
	declareFunction("clear_fact_sheet_optional_section_start_comment", "CLEAR-FACT-SHEET-OPTIONAL-SECTION-START-COMMENT", 0, 0, false);
	declareFunction("remove_fact_sheet_optional_section_start_comment", "REMOVE-FACT-SHEET-OPTIONAL-SECTION-START-COMMENT", 1, 1, false);
	declareFunction("fact_sheet_optional_section_start_comment_internal", "FACT-SHEET-OPTIONAL-SECTION-START-COMMENT-INTERNAL", 2, 0, false);
	declareFunction("fact_sheet_optional_section_start_comment", "FACT-SHEET-OPTIONAL-SECTION-START-COMMENT", 1, 1, false);
	declareFunction("clear_fact_sheet_optional_section_end_comment", "CLEAR-FACT-SHEET-OPTIONAL-SECTION-END-COMMENT", 0, 0, false);
	declareFunction("remove_fact_sheet_optional_section_end_comment", "REMOVE-FACT-SHEET-OPTIONAL-SECTION-END-COMMENT", 1, 0, false);
	declareFunction("fact_sheet_optional_section_end_comment_internal", "FACT-SHEET-OPTIONAL-SECTION-END-COMMENT-INTERNAL", 1, 0, false);
	declareFunction("fact_sheet_optional_section_end_comment", "FACT-SHEET-OPTIONAL-SECTION-END-COMMENT", 1, 0, false);
	declareFunction("fact_sheet_optional_section_start_string", "FACT-SHEET-OPTIONAL-SECTION-START-STRING", 1, 0, false);
	declareFunction("fact_sheet_optional_section_end_string", "FACT-SHEET-OPTIONAL-SECTION-END-STRING", 1, 0, false);
	declareFunction("term_has_precached_fact_sheetP", "TERM-HAS-PRECACHED-FACT-SHEET?", 1, 3, false);
	declareFunction("precached_fact_sheet_file_for_term_id", "PRECACHED-FACT-SHEET-FILE-FOR-TERM-ID", 4, 2, false);
	declareFunction("precached_fact_sheet_for_term_in_html", "PRECACHED-FACT-SHEET-FOR-TERM-IN-HTML", 5, 1, false);
	declareFunction("precached_fact_sheet_for_term_id_in_html", "PRECACHED-FACT-SHEET-FOR-TERM-ID-IN-HTML", 5, 1, false);
	declareFunction("updated_fact_sheet_data_for_term_and_sentence", "UPDATED-FACT-SHEET-DATA-FOR-TERM-AND-SENTENCE", 2, 4, false);
	declareFunction("update_fact_sheet_data_for_term_and_user_added_sentence", "UPDATE-FACT-SHEET-DATA-FOR-TERM-AND-USER-ADDED-SENTENCE", 2, 4, false);
	declareFunction("update_fact_sheet_data_for_term_and_removed_sentence", "UPDATE-FACT-SHEET-DATA-FOR-TERM-AND-REMOVED-SENTENCE", 2, 4, false);
	declareFunction("updated_fact_sheet_stats", "UPDATED-FACT-SHEET-STATS", 1, 0, false);
	declareFunction("cached_fact_sheet_data_for_term", "CACHED-FACT-SHEET-DATA-FOR-TERM", 1, 4, false);
	declareFunction("mts_with_precached_fact_sheet_data_for_term_internal", "MTS-WITH-PRECACHED-FACT-SHEET-DATA-FOR-TERM-INTERNAL", 1, 1, false);
	declareFunction("mts_with_precached_fact_sheet_data_for_term", "MTS-WITH-PRECACHED-FACT-SHEET-DATA-FOR-TERM", 1, 1, false);
	declareFunction("precached_fact_sheet_data_for_term", "PRECACHED-FACT-SHEET-DATA-FOR-TERM", 1, 4, false);
	declareFunction("precached_fact_sheet_data_for_term_id", "PRECACHED-FACT-SHEET-DATA-FOR-TERM-ID", 4, 1, false);
	declareFunction("precached_fact_sheet_data_from_file", "PRECACHED-FACT-SHEET-DATA-FROM-FILE", 1, 7, false);
	declareFunction("load_fact_sheet_formatting_guidelines", "LOAD-FACT-SHEET-FORMATTING-GUIDELINES", 1, 0, false);
	declareFunction("fact_sheet_under_construction_message", "FACT-SHEET-UNDER-CONSTRUCTION-MESSAGE", 1, 0, false);
	declareFunction("fact_sheet_under_construction_code", "FACT-SHEET-UNDER-CONSTRUCTION-CODE", 0, 0, false);
	declareFunction("fact_sheet_under_construction_xml", "FACT-SHEET-UNDER-CONSTRUCTION-XML", 2, 0, false);
	declareFunction("fact_sheet_under_construction_html", "FACT-SHEET-UNDER-CONSTRUCTION-HTML", 2, 0, false);
	declareFunction("note_fact_sheet_under_construction", "NOTE-FACT-SHEET-UNDER-CONSTRUCTION", 1, 3, false);
	declareFunction("note_fact_sheet_construction_done", "NOTE-FACT-SHEET-CONSTRUCTION-DONE", 1, 3, false);
	declareFunction("fact_sheet_under_construction_filename", "FACT-SHEET-UNDER-CONSTRUCTION-FILENAME", 1, 3, false);
	declareFunction("fact_sheet_term_under_constructionP", "FACT-SHEET-TERM-UNDER-CONSTRUCTION?", 1, 4, false);
	declareFunction("fact_sheet_file_under_constructionP", "FACT-SHEET-FILE-UNDER-CONSTRUCTION?", 2, 0, false);
	declareFunction("html_fact_sheet_file_under_constructionP", "HTML-FACT-SHEET-FILE-UNDER-CONSTRUCTION?", 1, 1, false);
	declareFunction("fact_sheet_term_update_already_undertakenP", "FACT-SHEET-TERM-UPDATE-ALREADY-UNDERTAKEN?", 4, 0, false);
	declareFunction("term_fact_sheet_current_on_kb_and_systemP", "TERM-FACT-SHEET-CURRENT-ON-KB-AND-SYSTEM?", 2, 2, false);
	declareFunction("gather_old_under_construction_fact_sheet_files", "GATHER-OLD-UNDER-CONSTRUCTION-FACT-SHEET-FILES", 0, 1, false);
	declareFunction("remove_any_cached_fact_sheet_data", "REMOVE-ANY-CACHED-FACT-SHEET-DATA", 4, 1, false);
	declareFunction("write_fact_sheet_html_and_formatting_guidelines", "WRITE-FACT-SHEET-HTML-AND-FORMATTING-GUIDELINES", 6, 0, false);
	declareFunction("write_fact_sheet_data_and_formatting_guidelines", "WRITE-FACT-SHEET-DATA-AND-FORMATTING-GUIDELINES", 8, 0, false);
	declareFunction("stop_fact_sheet_updates_after_current_term", "STOP-FACT-SHEET-UPDATES-AFTER-CURRENT-TERM", 0, 0, false);
	declareFunction("start_new_fact_sheet_updater", "START-NEW-FACT-SHEET-UPDATER", 0, 5, false);
	declareFunction("start_new_stale_fact_sheet_updater", "START-NEW-STALE-FACT-SHEET-UPDATER", 0, 1, false);
	declareFunction("start_new_all_fact_sheet_updater", "START-NEW-ALL-FACT-SHEET-UPDATER", 0, 6, false);
	declareFunction("start_new_fact_sheet_log_file_watcher", "START-NEW-FACT-SHEET-LOG-FILE-WATCHER", 0, 1, false);
	declareFunction("watch_fact_sheet_log_file", "WATCH-FACT-SHEET-LOG-FILE", 1, 0, false);
	declareFunction("fact_sheet_log_stream_active_p", "FACT-SHEET-LOG-STREAM-ACTIVE-P", 1, 0, false);
	declareFunction("halt_fact_sheet_updater_image", "HALT-FACT-SHEET-UPDATER-IMAGE", 1, 0, false);
	declareFunction("update_fact_sheets_for_all_fact_sheetable_instances_of_without_good_fact_sheets_generated_since", "UPDATE-FACT-SHEETS-FOR-ALL-FACT-SHEETABLE-INSTANCES-OF-WITHOUT-GOOD-FACT-SHEETS-GENERATED-SINCE", 0, 5, false);
	declareFunction("launch_fact_sheet_updater_of_fs_type_not_updated_since", "LAUNCH-FACT-SHEET-UPDATER-OF-FS-TYPE-NOT-UPDATED-SINCE", 1, 4, false);
	declareFunction("update_fact_sheets_of_fs_type_not_updated_since", "UPDATE-FACT-SHEETS-OF-FS-TYPE-NOT-UPDATED-SINCE", 1, 4, false);
	declareFunction("maybe_update_fact_sheet_and_record_stats", "MAYBE-UPDATE-FACT-SHEET-AND-RECORD-STATS", 4, 0, false);
	declareFunction("update_all_stale_fact_sheets", "UPDATE-ALL-STALE-FACT-SHEETS", 0, 1, false);
	declareFunction("possible_regular_fact_sheet_directory_p", "POSSIBLE-REGULAR-FACT-SHEET-DIRECTORY-P", 1, 0, false);
	declareFunction("possible_fact_sheet_directory_p", "POSSIBLE-FACT-SHEET-DIRECTORY-P", 1, 0, false);
	declareFunction("fact_sheet_verbosity_from_path", "FACT-SHEET-VERBOSITY-FROM-PATH", 1, 0, false);
	declareFunction("update_fact_sheet_file_if_stale", "UPDATE-FACT-SHEET-FILE-IF-STALE", 1, 2, false);
	declareMacro("do_forts_for_fact_sheet_update", "DO-FORTS-FOR-FACT-SHEET-UPDATE");
	declareFunction("write_term_ids_to_update", "WRITE-TERM-IDS-TO-UPDATE", 1, 1, false);
	declareFunction("write_term_ids_to_update_for_fs_type_public_pages", "WRITE-TERM-IDS-TO-UPDATE-FOR-FS-TYPE-PUBLIC-PAGES", 1, 2, false);
	declareFunction("write_term_ids_to_update_for_fs_type_public_pages_term_set", "WRITE-TERM-IDS-TO-UPDATE-FOR-FS-TYPE-PUBLIC-PAGES-TERM-SET", 2, 2, false);
	declareFunction("write_term_ids_to_update_for_term_set", "WRITE-TERM-IDS-TO-UPDATE-FOR-TERM-SET", 1, 2, false);
	declareFunction("convert_term_suids_to_fact_sheet_term_ids", "CONVERT-TERM-SUIDS-TO-FACT-SHEET-TERM-IDS", 2, 0, false);
	declareFunction("convert_term_suid_range_to_fact_sheet_term_ids", "CONVERT-TERM-SUID-RANGE-TO-FACT-SHEET-TERM-IDS", 3, 0, false);
	declareFunction("update_fact_sheets_with_suids", "UPDATE-FACT-SHEETS-WITH-SUIDS", 2, 2, false);
	declareFunction("update_fact_sheets_with_ids", "UPDATE-FACT-SHEETS-WITH-IDS", 1, 2, false);
	declareFunction("fact_sheet_term_id_filename", "FACT-SHEET-TERM-ID-FILENAME", 2, 0, false);
	declareFunction("update_fact_sheets_from_id_file", "UPDATE-FACT-SHEETS-FROM-ID-FILE", 1, 2, false);
	declareFunction("remaining_fact_sheets_to_update", "REMAINING-FACT-SHEETS-TO-UPDATE", 0, 4, false);
	declareFunction("gather_all_fact_sheet_filenames", "GATHER-ALL-FACT-SHEET-FILENAMES", 1, 3, false);
	declareFunction("update_all_fact_sheets", "UPDATE-ALL-FACT-SHEETS", 0, 6, false);
	declareFunction("update_fact_sheets", "UPDATE-FACT-SHEETS", 0, 5, false);
	declareFunction("sleep_until_time_within_next_day", "SLEEP-UNTIL-TIME-WITHIN-NEXT-DAY", 3, 0, false);
	declareFunction("time_of_day_has_arrivedP", "TIME-OF-DAY-HAS-ARRIVED?", 3, 0, false);
	declareFunction("image_seems_idleP", "IMAGE-SEEMS-IDLE?", 0, 2, false);
	declareFunction("image_find_busy_thread", "IMAGE-FIND-BUSY-THREAD", 0, 1, false);
	declareFunction("maybe_start_new_fact_sheet_updater_default_screensaver_for_user", "MAYBE-START-NEW-FACT-SHEET-UPDATER-DEFAULT-SCREENSAVER-FOR-USER", 0, 1, false);
	declareFunction("start_new_fact_sheet_updater_default_screensaver", "START-NEW-FACT-SHEET-UPDATER-DEFAULT-SCREENSAVER", 0, 1, false);
	declareFunction("default_fact_sheet_updater_screensaver_verbosity_for_user", "DEFAULT-FACT-SHEET-UPDATER-SCREENSAVER-VERBOSITY-FOR-USER", 1, 0, false);
	declareFunction("register_fact_sheet_screensaver", "REGISTER-FACT-SHEET-SCREENSAVER", 1, 0, false);
	declareFunction("deregister_fact_sheet_screensaver", "DEREGISTER-FACT-SHEET-SCREENSAVER", 1, 0, false);
	declareFunction("start_new_fact_sheet_updater_screensaver", "START-NEW-FACT-SHEET-UPDATER-SCREENSAVER", 0, 5, false);
	declareFunction("stop_all_fact_sheet_screensavers", "STOP-ALL-FACT-SHEET-SCREENSAVERS", 0, 0, false);
	declareFunction("restart_all_fact_sheet_screensavers", "RESTART-ALL-FACT-SHEET-SCREENSAVERS", 0, 0, false);
	declareFunction("allow_fact_sheet_screensavers", "ALLOW-FACT-SHEET-SCREENSAVERS", 0, 0, false);
	declareFunction("kill_all_fact_sheet_screensavers", "KILL-ALL-FACT-SHEET-SCREENSAVERS", 0, 1, false);
	declareFunction("update_fact_sheet_screensaver", "UPDATE-FACT-SHEET-SCREENSAVER", 5, 0, false);
	declareFunction("update_fact_sheets_internal", "UPDATE-FACT-SHEETS-INTERNAL", 3, 1, false);
	declareFunction("update_fact_sheet_for_term_with_logging", "UPDATE-FACT-SHEET-FOR-TERM-WITH-LOGGING", 4, 0, false);
	declareFunction("possibly_update_fact_sheet_for_term", "POSSIBLY-UPDATE-FACT-SHEET-FOR-TERM", 4, 0, false);
	declareFunction("fact_sheet_query_soft_timeout_time_reachedP", "FACT-SHEET-QUERY-SOFT-TIMEOUT-TIME-REACHED?", 0, 0, false);
	declareFunction("fact_sheet_query_soft_timeout_time_left", "FACT-SHEET-QUERY-SOFT-TIMEOUT-TIME-LEFT", 0, 0, false);
	declareFunction("compute_fact_sheet_query_soft_timeout_time", "COMPUTE-FACT-SHEET-QUERY-SOFT-TIMEOUT-TIME", 1, 0, false);
	declareFunction("fact_sheet_paraphrase_soft_timeout_time_reachedP", "FACT-SHEET-PARAPHRASE-SOFT-TIMEOUT-TIME-REACHED?", 0, 0, false);
	declareFunction("fact_sheet_paraphrase_soft_timeout_time_left", "FACT-SHEET-PARAPHRASE-SOFT-TIMEOUT-TIME-LEFT", 0, 0, false);
	declareFunction("compute_fact_sheet_paraphrase_soft_timeout_time", "COMPUTE-FACT-SHEET-PARAPHRASE-SOFT-TIMEOUT-TIME", 1, 0, false);
	declareFunction("update_fact_sheet_for_term", "UPDATE-FACT-SHEET-FOR-TERM", 1, 5, false);
	declareFunction("update_mini_fact_sheet_for_term", "UPDATE-MINI-FACT-SHEET-FOR-TERM", 1, 2, false);
	declareFunction("update_fact_sheet_data_for_term", "UPDATE-FACT-SHEET-DATA-FOR-TERM", 6, 0, false);
	declareFunction("launch_make_up_fact_sheet_updater_for_term", "LAUNCH-MAKE-UP-FACT-SHEET-UPDATER-FOR-TERM", 1, 5, false);
	declareFunction("fact_sheet_too_shortP", "FACT-SHEET-TOO-SHORT?", 4, 0, false);
	declareFunction("fact_sheet_up_to_dateP", "FACT-SHEET-UP-TO-DATE?", 4, 0, false);
	declareFunction("cached_fact_sheet_save_date_and_second", "CACHED-FACT-SHEET-SAVE-DATE-AND-SECOND", 1, 0, false);
	declareFunction("fact_sheet_generator_modified_sinceP", "FACT-SHEET-GENERATOR-MODIFIED-SINCE?", 2, 0, false);
	declareFunction("fact_sheet_term_modified_sinceP", "FACT-SHEET-TERM-MODIFIED-SINCE?", 3, 0, false);
	declareFunction("fact_sheet_formatting_guidelines_file", "FACT-SHEET-FORMATTING-GUIDELINES-FILE", 1, 1, false);
	declareFunction("fact_sheet_file_for_fact_sheet_term", "FACT-SHEET-FILE-FOR-FACT-SHEET-TERM", 1, 0, false);
	declareFunction("directory_and_filename_for_fact_sheet", "DIRECTORY-AND-FILENAME-FOR-FACT-SHEET", 1, 4, false);
	declareFunction("directory_and_filename_for_fact_sheet_from_id", "DIRECTORY-AND-FILENAME-FOR-FACT-SHEET-FROM-ID", 4, 2, false);
	declareFunction("fact_sheet_term_id_file_preface", "FACT-SHEET-TERM-ID-FILE-PREFACE", 1, 0, false);
	declareFunction("fact_sheet_term_from_filename", "FACT-SHEET-TERM-FROM-FILENAME", 1, 0, false);
	declareFunction("fact_sheet_data_from_filename", "FACT-SHEET-DATA-FROM-FILENAME", 1, 0, false);
	declareFunction("fact_sheet_data_from_path", "FACT-SHEET-DATA-FROM-PATH", 1, 0, false);
	declareFunction("clear_fact_sheet_directory_from_list", "CLEAR-FACT-SHEET-DIRECTORY-FROM-LIST", 0, 0, false);
	declareFunction("remove_fact_sheet_directory_from_list", "REMOVE-FACT-SHEET-DIRECTORY-FROM-LIST", 0, 1, false);
	declareFunction("fact_sheet_directory_from_list_internal", "FACT-SHEET-DIRECTORY-FROM-LIST-INTERNAL", 1, 0, false);
	declareFunction("fact_sheet_directory_from_list", "FACT-SHEET-DIRECTORY-FROM-LIST", 0, 1, false);
	declareFunction("fact_sheet_update_term_prioritizer_print_function_trampoline", "FACT-SHEET-UPDATE-TERM-PRIORITIZER-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
	declareFunction("fact_sheet_update_term_prioritizer_p", "FACT-SHEET-UPDATE-TERM-PRIORITIZER-P", 1, 0, false);
	new fact_sheets.$fact_sheet_update_term_prioritizer_p$UnaryFunction();
	declareFunction("fsut_prioritizer_stale_terms", "FSUT-PRIORITIZER-STALE-TERMS", 1, 0, false);
	declareFunction("fsut_prioritizer_missing_terms", "FSUT-PRIORITIZER-MISSING-TERMS", 1, 0, false);
	declareFunction("fsut_prioritizer_up_to_date_terms", "FSUT-PRIORITIZER-UP-TO-DATE-TERMS", 1, 0, false);
	declareFunction("fsut_prioritizer_thread", "FSUT-PRIORITIZER-THREAD", 1, 0, false);
	declareFunction("fsut_prioritizer_should_sleepP", "FSUT-PRIORITIZER-SHOULD-SLEEP?", 1, 0, false);
	declareFunction("fsut_prioritizer_verbosity", "FSUT-PRIORITIZER-VERBOSITY", 1, 0, false);
	declareFunction("fsut_prioritizer_domain_mt", "FSUT-PRIORITIZER-DOMAIN-MT", 1, 0, false);
	declareFunction("fsut_prioritizer_language_mt", "FSUT-PRIORITIZER-LANGUAGE-MT", 1, 0, false);
	declareFunction("fsut_prioritizer_nice_level", "FSUT-PRIORITIZER-NICE-LEVEL", 1, 0, false);
	declareFunction("fsut_prioritizer_new_days", "FSUT-PRIORITIZER-NEW-DAYS", 1, 0, false);
	declareFunction("_csetf_fsut_prioritizer_stale_terms", "_CSETF-FSUT-PRIORITIZER-STALE-TERMS", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_missing_terms", "_CSETF-FSUT-PRIORITIZER-MISSING-TERMS", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_up_to_date_terms", "_CSETF-FSUT-PRIORITIZER-UP-TO-DATE-TERMS", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_thread", "_CSETF-FSUT-PRIORITIZER-THREAD", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_should_sleepP", "_CSETF-FSUT-PRIORITIZER-SHOULD-SLEEP?", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_verbosity", "_CSETF-FSUT-PRIORITIZER-VERBOSITY", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_domain_mt", "_CSETF-FSUT-PRIORITIZER-DOMAIN-MT", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_language_mt", "_CSETF-FSUT-PRIORITIZER-LANGUAGE-MT", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_nice_level", "_CSETF-FSUT-PRIORITIZER-NICE-LEVEL", 2, 0, false);
	declareFunction("_csetf_fsut_prioritizer_new_days", "_CSETF-FSUT-PRIORITIZER-NEW-DAYS", 2, 0, false);
	declareFunction("make_fact_sheet_update_term_prioritizer", "MAKE-FACT-SHEET-UPDATE-TERM-PRIORITIZER", 0, 1, false);
	declareFunction("visit_defstruct_fact_sheet_update_term_prioritizer", "VISIT-DEFSTRUCT-FACT-SHEET-UPDATE-TERM-PRIORITIZER", 2, 0, false);
	declareFunction("visit_defstruct_object_fact_sheet_update_term_prioritizer_method", "VISIT-DEFSTRUCT-OBJECT-FACT-SHEET-UPDATE-TERM-PRIORITIZER-METHOD", 2, 0, false);
	declareFunction("pprint_fsut_prioritizer", "PPRINT-FSUT-PRIORITIZER", 1, 2, false);
	declareFunction("register_fsut_prioritizer", "REGISTER-FSUT-PRIORITIZER", 1, 0, false);
	declareFunction("all_fact_sheet_update_term_prioritizers", "ALL-FACT-SHEET-UPDATE-TERM-PRIORITIZERS", 0, 0, false);
	declareFunction("find_fsut_prioritizer", "FIND-FSUT-PRIORITIZER", 0, 4, false);
	declareFunction("find_or_create_fact_sheet_update_term_prioritizer", "FIND-OR-CREATE-FACT-SHEET-UPDATE-TERM-PRIORITIZER", 0, 4, false);
	declareFunction("fsut_prioritizer_max_nice_level", "FSUT-PRIORITIZER-MAX-NICE-LEVEL", 0, 0, false);
	declareFunction("fsut_prioritizer_min_nice_level", "FSUT-PRIORITIZER-MIN-NICE-LEVEL", 0, 0, false);
	declareFunction("fsut_prioritizer_default_new_days", "FSUT-PRIORITIZER-DEFAULT-NEW-DAYS", 0, 0, false);
	declareFunction("new_fact_sheet_update_term_prioritizer", "NEW-FACT-SHEET-UPDATE-TERM-PRIORITIZER", 0, 5, false);
	declareFunction("fsut_prioritizer_queue_rank_func", "FSUT-PRIORITIZER-QUEUE-RANK-FUNC", 1, 0, false);
	declareFunction("fsut_prioritizer_queue_comp_func", "FSUT-PRIORITIZER-QUEUE-COMP-FUNC", 2, 0, false);
	declareFunction("renice_fsut_prioritizer", "RENICE-FSUT-PRIORITIZER", 1, 1, false);
	declareFunction("start_fsut_prioritizer", "START-FSUT-PRIORITIZER", 1, 0, false);
	declareFunction("stop_all_fsut_prioritizers", "STOP-ALL-FSUT-PRIORITIZERS", 0, 0, false);
	declareFunction("stop_fsut_prioritizer", "STOP-FSUT-PRIORITIZER", 1, 0, false);
	declareFunction("fsut_prioritizer_next_term", "FSUT-PRIORITIZER-NEXT-TERM", 1, 1, false);
	declareFunction("fsut_prioritizer_empty_p", "FSUT-PRIORITIZER-EMPTY-P", 1, 1, false);
	declareFunction("fsut_prioritizer_next_stale_term", "FSUT-PRIORITIZER-NEXT-STALE-TERM", 1, 0, false);
	declareFunction("fsut_prioritizer_next_missing_term", "FSUT-PRIORITIZER-NEXT-MISSING-TERM", 1, 0, false);
	declareFunction("fsut_prioritizer_next_up_to_date_term", "FSUT-PRIORITIZER-NEXT-UP-TO-DATE-TERM", 1, 0, false);
	declareFunction("clear_fsut_prioritizer_sleep_interval_from_nice_level", "CLEAR-FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL", 0, 0, false);
	declareFunction("remove_fsut_prioritizer_sleep_interval_from_nice_level", "REMOVE-FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL", 1, 1, false);
	declareFunction("fsut_prioritizer_sleep_interval_from_nice_level_internal", "FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL-INTERNAL", 2, 0, false);
	declareFunction("fsut_prioritizer_sleep_interval_from_nice_level", "FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL", 1, 1, false);
	declareFunction("fsut_prioritizer_place_terms", "FSUT-PRIORITIZER-PLACE-TERMS", 1, 0, false);
	declareFunction("fsut_prioritizer_place_term", "FSUT-PRIORITIZER-PLACE-TERM", 2, 0, false);
	declareFunction("add_to_prioritizer_queue", "ADD-TO-PRIORITIZER-QUEUE", 3, 0, false);
	declareFunction("sanity_check_prioritizer_queue", "SANITY-CHECK-PRIORITIZER-QUEUE", 1, 0, false);
	declareFunction("fact_sheet_status_p", "FACT-SHEET-STATUS-P", 1, 0, false);
	declareFunction("fact_sheet_status", "FACT-SHEET-STATUS", 1, 4, false);
	declareFunction("fact_sheet_file_status", "FACT-SHEET-FILE-STATUS", 5, 0, false);
	declareFunction("fact_sheet_file_staleP", "FACT-SHEET-FILE-STALE?", 1, 3, false);
	declareFunction("fact_sheet_file_has_invalid_assertionP", "FACT-SHEET-FILE-HAS-INVALID-ASSERTION?", 1, 0, false);
	declareFunction("fact_sheet_term_gaf_priority", "FACT-SHEET-TERM-GAF-PRIORITY", 1, 0, false);
	declareFunction("pred_argnum_combos_for_term_internal", "PRED-ARGNUM-COMBOS-FOR-TERM-INTERNAL", 1, 0, false);
	declareFunction("pred_argnum_combos_for_term", "PRED-ARGNUM-COMBOS-FOR-TERM", 1, 0, false);
	declareFunction("cb_fact_sheet_evaluation", "CB-FACT-SHEET-EVALUATION", 0, 1, false);
	declareFunction("print_one_eval_section", "PRINT-ONE-EVAL-SECTION", 2, 0, false);
	declareFunction("print_numbered_options", "PRINT-NUMBERED-OPTIONS", 3, 0, false);
	declareFunction("cb_handle_fact_sheet_evaluation", "CB-HANDLE-FACT-SHEET-EVALUATION", 1, 0, false);
	declareFunction("absolute_fact_sheet_eval_url", "ABSOLUTE-FACT-SHEET-EVAL-URL", 4, 0, false);
	declareFunction("html_emit_fact_sheet_evaluation_link", "HTML-EMIT-FACT-SHEET-EVALUATION-LINK", 1, 3, false);
	declareFunction("allowed_to_update_fact_sheet_with_sentenceP", "ALLOWED-TO-UPDATE-FACT-SHEET-WITH-SENTENCE?", 5, 0, false);
	declareFunction("mark_fact_sheet_term_modifiable", "MARK-FACT-SHEET-TERM-MODIFIABLE", 4, 0, false);
	declareFunction("cache_local_fact_sheet_data", "CACHE-LOCAL-FACT-SHEET-DATA", 5, 1, false);
	declareFunction("get_cached_local_fact_sheet_data", "GET-CACHED-LOCAL-FACT-SHEET-DATA", 4, 0, false);
	declareFunction("remove_cached_local_fact_sheet_data", "REMOVE-CACHED-LOCAL-FACT-SHEET-DATA", 4, 0, false);
	declareFunction("public_fact_sheet_ad_html", "PUBLIC-FACT-SHEET-AD-HTML", 0, 0, false);
	declareFunction("directory_and_filename_for_public_fact_sheet", "DIRECTORY-AND-FILENAME-FOR-PUBLIC-FACT-SHEET", 2, 1, false);
	declareFunction("relative_filename_for_public_fact_sheet", "RELATIVE-FILENAME-FOR-PUBLIC-FACT-SHEET", 2, 1, false);
	declareFunction("clear_get_public_fact_sheet_term_parent_directory_string", "CLEAR-GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING", 0, 0, false);
	declareFunction("remove_get_public_fact_sheet_term_parent_directory_string", "REMOVE-GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING", 3, 0, false);
	declareFunction("get_public_fact_sheet_term_parent_directory_string_internal", "GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING-INTERNAL", 3, 0, false);
	declareFunction("get_public_fact_sheet_term_parent_directory_string", "GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING", 3, 0, false);
	declareFunction("fact_sheet_filename_charP", "FACT-SHEET-FILENAME-CHAR?", 1, 0, false);
	declareFunction("note_term_to_file_mapping", "NOTE-TERM-TO-FILE-MAPPING", 4, 0, false);
	declareFunction("clear_terms_for_public_fact_sheets", "CLEAR-TERMS-FOR-PUBLIC-FACT-SHEETS", 0, 0, false);
	declareFunction("remove_terms_for_public_fact_sheets", "REMOVE-TERMS-FOR-PUBLIC-FACT-SHEETS", 0, 1, false);
	declareFunction("terms_for_public_fact_sheets_internal", "TERMS-FOR-PUBLIC-FACT-SHEETS-INTERNAL", 1, 0, false);
	declareFunction("terms_for_public_fact_sheets", "TERMS-FOR-PUBLIC-FACT-SHEETS", 0, 1, false);
	declareFunction("clear_types_for_public_fact_sheets", "CLEAR-TYPES-FOR-PUBLIC-FACT-SHEETS", 0, 0, false);
	declareFunction("remove_types_for_public_fact_sheets", "REMOVE-TYPES-FOR-PUBLIC-FACT-SHEETS", 0, 1, false);
	declareFunction("types_for_public_fact_sheets_internal", "TYPES-FOR-PUBLIC-FACT-SHEETS-INTERNAL", 1, 0, false);
	declareFunction("types_for_public_fact_sheets", "TYPES-FOR-PUBLIC-FACT-SHEETS", 0, 1, false);
	declareFunction("clear_fact_sheet_term_strings", "CLEAR-FACT-SHEET-TERM-STRINGS", 0, 0, false);
	declareFunction("remove_fact_sheet_term_strings", "REMOVE-FACT-SHEET-TERM-STRINGS", 1, 0, false);
	declareFunction("fact_sheet_term_strings_internal", "FACT-SHEET-TERM-STRINGS-INTERNAL", 1, 0, false);
	declareFunction("fact_sheet_term_strings", "FACT-SHEET-TERM-STRINGS", 1, 0, false);
	declareFunction("get_public_fact_sheet_string_mappings", "GET-PUBLIC-FACT-SHEET-STRING-MAPPINGS", 1, 0, false);
	declareFunction("get_public_fact_sheet_string_mappings_int", "GET-PUBLIC-FACT-SHEET-STRING-MAPPINGS-INT", 1, 0, false);
	declareFunction("clear_get_public_fact_sheet_string_url_mappings", "CLEAR-GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS", 0, 0, false);
	declareFunction("remove_get_public_fact_sheet_string_url_mappings", "REMOVE-GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS", 0, 2, false);
	declareFunction("get_public_fact_sheet_string_url_mappings_internal", "GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS-INTERNAL", 2, 0, false);
	declareFunction("get_public_fact_sheet_string_url_mappings", "GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS", 0, 2, false);
	declareFunction("dump_fact_sheet_string_url_mappings", "DUMP-FACT-SHEET-STRING-URL-MAPPINGS", 0, 2, false);
	declareFunction("convert_search_data_to_htaccess_redirects", "CONVERT-SEARCH-DATA-TO-HTACCESS-REDIRECTS", 0, 2, false);
	declareFunction("convert_search_data_to_sql_file", "CONVERT-SEARCH-DATA-TO-SQL-FILE", 0, 2, false);
	declareFunction("get_existing_public_fact_sheet_term_pairs", "GET-EXISTING-PUBLIC-FACT-SHEET-TERM-PAIRS", 0, 1, false);
	declareFunction("get_public_fact_sheet_string_url_mappings_as_json", "GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS-AS-JSON", 0, 3, false);
	declareFunction("print_one_string_term_url_mapping_as_json", "PRINT-ONE-STRING-TERM-URL-MAPPING-AS-JSON", 3, 0, false);
	declareFunction("filter_mappings_for_good_urls", "FILTER-MAPPINGS-FOR-GOOD-URLS", 2, 0, false);
	declareFunction("fact_sheet_properties_for_type", "FACT-SHEET-PROPERTIES-FOR-TYPE", 1, 0, false);
	declareFunction("get_fs_collection_name", "GET-FS-COLLECTION-NAME", 1, 0, false);
	declareFunction("get_fs_whitelist_types", "GET-FS-WHITELIST-TYPES", 1, 0, false);
	declareFunction("get_fs_blacklist_types", "GET-FS-BLACKLIST-TYPES", 1, 0, false);
	declareFunction("get_fs_quoted_blacklist_types", "GET-FS-QUOTED-BLACKLIST-TYPES", 1, 0, false);
	declareFunction("get_fs_blacklist_sources", "GET-FS-BLACKLIST-SOURCES", 1, 0, false);
	declareFunction("get_fs_default_starting_points_filename", "GET-FS-DEFAULT-STARTING-POINTS-FILENAME", 1, 0, false);
	declareFunction("get_domain_mt_for_fs_type", "GET-DOMAIN-MT-FOR-FS-TYPE", 1, 0, false);
	declareFunction("category_label_from_properties", "CATEGORY-LABEL-FROM-PROPERTIES", 2, 0, false);
	declareFunction("new_category_label", "NEW-CATEGORY-LABEL", 2, 0, false);
	declareFunction("category_label_string", "CATEGORY-LABEL-STRING", 1, 0, false);
	declareFunction("category_label_pred", "CATEGORY-LABEL-PRED", 1, 0, false);
	declareFunction("category_label_style", "CATEGORY-LABEL-STYLE", 1, 0, false);
	declareFunction("get_sort_fn_from_properties", "GET-SORT-FN-FROM-PROPERTIES", 1, 0, false);
	declareFunction("default_fact_sheet_paragraph_retrieval_time_sort_fn", "DEFAULT-FACT-SHEET-PARAGRAPH-RETRIEVAL-TIME-SORT-FN", 2, 0, false);
	declareFunction("incyc_higher_priority_categoryP", "INCYC-HIGHER-PRIORITY-CATEGORY?", 2, 0, false);
	declareFunction("get_public_fact_sheet_properties", "GET-PUBLIC-FACT-SHEET-PROPERTIES", 0, 0, false);
	declareFunction("get_public_fact_sheet_for_term", "GET-PUBLIC-FACT-SHEET-FOR-TERM", 1, 2, false);
	declareFunction("start_new_public_fact_sheet_updater", "START-NEW-PUBLIC-FACT-SHEET-UPDATER", 0, 2, false);
	declareFunction("ensure_all_public_fact_sheets", "ENSURE-ALL-PUBLIC-FACT-SHEETS", 0, 2, false);
	declareFunction("ensure_public_fact_sheet_for_term", "ENSURE-PUBLIC-FACT-SHEET-FOR-TERM", 1, 2, false);
	declareFunction("publicize_fact_sheet_links", "PUBLICIZE-FACT-SHEET-LINKS", 2, 0, false);
	declareFunction("publicize_fact_sheet_link", "PUBLICIZE-FACT-SHEET-LINK", 4, 1, false);
	declareFunction("update_public_fact_sheets_from_id_file", "UPDATE-PUBLIC-FACT-SHEETS-FROM-ID-FILE", 1, 3, false);
	declareFunction("any_token_containsP", "ANY-TOKEN-CONTAINS?", 2, 0, false);
	declareFunction("write_public_fact_sheets_starting_points_data", "WRITE-PUBLIC-FACT-SHEETS-STARTING-POINTS-DATA", 1, 1, false);
	declareFunction("write_public_fact_sheets_starting_points_data_int", "WRITE-PUBLIC-FACT-SHEETS-STARTING-POINTS-DATA-INT", 3, 0, false);
	declareFunction("public_fact_sheet_starting_point_okP", "PUBLIC-FACT-SHEET-STARTING-POINT-OK?", 2, 0, false);
	declareFunction("suggested_starting_points_for_public_fact_sheet_browsing", "SUGGESTED-STARTING-POINTS-FOR-PUBLIC-FACT-SHEET-BROWSING", 1, 0, false);
	declareFunction("clear_cached_num_gaf_arg_index", "CLEAR-CACHED-NUM-GAF-ARG-INDEX", 0, 0, false);
	declareFunction("remove_cached_num_gaf_arg_index", "REMOVE-CACHED-NUM-GAF-ARG-INDEX", 1, 0, false);
	declareFunction("cached_num_gaf_arg_index_internal", "CACHED-NUM-GAF-ARG-INDEX-INTERNAL", 1, 0, false);
	declareFunction("cached_num_gaf_arg_index", "CACHED-NUM-GAF-ARG-INDEX", 1, 0, false);
	declareFunction("dump_fact_sheet_sentences_old", "DUMP-FACT-SHEET-SENTENCES-OLD", 1, 2, false);
	declareFunction("dump_fact_sheet_sentences", "DUMP-FACT-SHEET-SENTENCES", 1, 1, false);
	declareFunction("dump_fact_sheet_sentences_for_term", "DUMP-FACT-SHEET-SENTENCES-FOR-TERM", 4, 0, false);
	declareFunction("fact_sheets_term_from_string_containsP", "FACT-SHEETS-TERM-FROM-STRING-CONTAINS?", 2, 0, false);
	declareFunction("cycls_are_membersP", "CYCLS-ARE-MEMBERS?", 3, 0, false);
	return NIL;
    }

    public static final SubLObject init_fact_sheets_file_alt() {
	defparameter("*ALLOW-FACT-SHEET-EVALUATIONS?*",
		red_infrastructure_macros.red_def_helper($list_alt0.isSymbol() ? ((SubLObject) (symbol_value($list_alt0))) : $list_alt0, $allow_fact_sheet_evaluationsP$, ONE_INTEGER.isSymbol() ? ((SubLObject) (symbol_value(ONE_INTEGER))) : ONE_INTEGER, $PARAMETER, UNPROVIDED));
	defparameter("*FACT-SHEET-EVAL-LOG-FILE*", red_infrastructure_macros.red_def_helper($list_alt7.isSymbol() ? ((SubLObject) (symbol_value($list_alt7))) : $list_alt7, $fact_sheet_eval_log_file$,
		$str_alt9$_cyc_projects_aquaint_ginko_metri.isSymbol() ? ((SubLObject) (symbol_value($str_alt9$_cyc_projects_aquaint_ginko_metri))) : $str_alt9$_cyc_projects_aquaint_ginko_metri, $PARAMETER, UNPROVIDED));
	defparameter("*FACT-SHEET-QUERY-MT*", NIL);
	defparameter("*FACT-SHEET-TABLE-TYPE*", NIL);
	defparameter("*FACT-SHEET-SENTENCE*", NIL);
	defparameter("*WITHIN-FACT-SHEET-PARAPHRASE?*", NIL);
	defparameter("*FACT-SHEET-SENTENCE-SORTER-PRED-COUNTS*", NIL);
	defparameter("*FACT-SHEET-LOG-FILE*", NIL);
	defparameter("*FACT-SHEET-LOG-STREAM*", T);
	deflexical("*CLOSED-FACT-SHEET-LOG-FILES*", NIL != boundp($closed_fact_sheet_log_files$) ? ((SubLObject) ($closed_fact_sheet_log_files$.getGlobalValue())) : NIL);
	defparameter("*NEXT-FACT-SHEET-HOURLY-REPORT-TIME*", NIL);
	defparameter("*HOURLY-FACT-SHEET-STATS*", NIL);
	deflexical("*FACT-SHEET-LOG-FILE-PROPERTIES*", $list_alt123);
	deflexical("*GET-FACT-SHEET-LOG-DIRECTORY-DATA-CACHED-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-LOG-FILE-UNIQUIFIER-LOCK*", make_lock($str_alt196$fact_sheet_log_file_uniquifier_lo));
	defparameter("*FACT-SHEET-FOCAL-TERM*", NIL);
	defparameter("*FACT-SHEET-VERBOSITY*", $NORMAL);
	defparameter("*CHMOD-SAFE-TO-USE?*", NIL);
	defparameter("*CATCH-FACT-SHEET-ERRORS?*", T);
	deflexical("*FACT-SHEET-DEFAULT-LANGUAGE-MONAD-MT*", $$FactSheetParaphraseMt);
	deflexical("*FACT-SHEET-DEFAULT-LANGUAGE-MT-TIME-INTERVAL*", $$Now);
	deflexical("*FACT-SHEET-DEFAULT-LANGUAGE-MT-TIME-PARAMETER*", $$Null_TimeParameter);
	deflexical("*FACT-SHEET-DEFAULT-LANGUAGE-MT-CACHING-STATE*", NIL);
	deflexical("*BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-DEFAULT-DOMAIN-MONAD-MT*", $$FactSheetGenerationMt);
	deflexical("*FACT-SHEET-DEFAULT-DOMAIN-MT-CACHING-STATE*", NIL);
	deflexical("*BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-TABLE-BORDER-WIDTH*", ZERO_INTEGER);
	deflexical("*FACT-SHEET-TABLE-CELLPADDING*", THREE_INTEGER);
	deflexical("*FACT-SHEET-TABLE-HORIZONTAL-ALIGNMENT*", $$$center);
	deflexical("*FACT-SHEET-TABLE-WIDTH*", $str_alt276$50_);
	deflexical("*FACT-SHEET-TABLE-TITLE-BGCOLOR*", html_macros.$html_color_cyc_logo_violet$.getDynamicValue());
	deflexical("*FACT-SHEET-TABLE-TITLE-FONT-COLOR*", html_macros.$html_color_white$.getDynamicValue());
	deflexical("*FACT-SHEET-TABLE-TITLE-HORIZONTAL-ALIGNMENT*", $$$center);
	deflexical("*FACT-SHEET-TABLE-HEADER-BGCOLOR*", html_macros.$html_color_cyc_logo_violet$.getDynamicValue());
	deflexical("*FACT-SHEET-TABLE-HEADER-HORIZONTAL-ALIGNMENT*", $$$center);
	deflexical("*FACT-SHEET-TABLE-HEADER-FONT-COLOR*", html_macros.$html_color_white$.getDynamicValue());
	deflexical("*FACT-SHEET-TABLE-DATA-BGCOLOR*", html_macros.$html_color_white$.getDynamicValue());
	deflexical("*FACT-SHEET-TABLE-DATA-FIRST-COLUMN-HORIZONTAL-ALIGNMENT*", $$$right);
	defparameter("*FACT-SHEET-TERM-PARAPHRASE-FOR-TITLE?*", T);
	defparameter("*FACT-SHEET-USE-BASE-URL?*", T);
	defparameter("*FACT-SHEET-FOLLOWUP-LOADER-ROOT-RELATIVE-PATH*", $str_alt343$_Enesta_resources_followupLoader_);
	defconstant("*FACT-SHEET-REQUEST-PATTERNS*",
		list(new SubLObject[] { cons(string_utilities.$empty_string$.getGlobalValue(), string_utilities.$empty_string$.getGlobalValue()), cons($str_alt371$what_do_you_know_about_, string_utilities.$empty_string$.getGlobalValue()),
			cons($str_alt372$tell_me_about_, string_utilities.$empty_string$.getGlobalValue()), cons($str_alt373$facts_about_, string_utilities.$empty_string$.getGlobalValue()), cons($str_alt374$explain_, string_utilities.$empty_string$.getGlobalValue()),
			cons($str_alt375$fact_sheet_for_, string_utilities.$empty_string$.getGlobalValue()), cons($str_alt376$fact_sheet_about_, string_utilities.$empty_string$.getGlobalValue()), cons($str_alt377$show_, string_utilities.$empty_string$.getGlobalValue()),
			cons(string_utilities.$empty_string$.getGlobalValue(), $str_alt378$_facts), cons(string_utilities.$empty_string$.getGlobalValue(), $str_alt379$_knowledge), cons(string_utilities.$empty_string$.getGlobalValue(), $str_alt380$_fact_sheet) }));
	deflexical("*SCALAR-INTERVAL-P-CACHING-STATE*", NIL);
	deflexical("*MINI-FACT-SHEET-TERM-TYPES*", $list_alt403);
	deflexical("*FACT-SHEET-DATA-PATH*", list($$$data, $str_alt405$fact_sheets));
	deflexical("*FACT-SHEET-TERM-FHT-FILENAME*", $str_alt407$fact_sheet_term_ids_fht);
	deflexical("*FACT-SHEET-TERM-FHT-FULL-PATH*", NIL);
	deflexical("*FACT-SHEET-TERM-FBC*", NIL);
	deflexical("*FACT-SHEET-TERM-FHT-MODE*", $IMAGE_INDEPENDENT_CFASL);
	deflexical("*CONSTRUCT-FACT-SHEET-TERM-ID-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-CATEGORY-ORDER*", $list_alt432);
	deflexical("*FACT-SHEET-SENTENCE-GROUP-SUMMARY-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-BOGUS-URL-PREFIX*", $str_alt442$http___fact_sheet);
	deflexical("*FACT-SHEET-OUTER-TABLE-CLASS*", $str_alt483$fs_outer_table);
	deflexical("*FACT-SHEET-MAIN-IMAGE*", $str_alt484$fs_main_image);
	deflexical("*FACT-SHEET-IN-CYC-LOGO*", $str_alt485$fs_in_cyc_logo);
	deflexical("*FACT-SHEET-TITLE*", $str_alt486$fs_title);
	deflexical("*FACT-SHEET-TITLE-DIV*", $str_alt487$fs_title_div);
	deflexical("*FACT-SHEET-CATEGORY-TITLE*", $str_alt488$fs_category);
	deflexical("*FACT-SHEET-FACT-CLASS1*", $str_alt489$fs_fact_1);
	deflexical("*FACT-SHEET-FACT-CLASS2*", $str_alt490$fs_fact_2);
	deflexical("*FACT-SHEET-FOOTNOTE-CLASS1*", $str_alt491$fs_footnote_1);
	deflexical("*FACT-SHEET-FOOTNOTE-CLASS2*", $str_alt492$fs_footnote_2);
	deflexical("*FACT-SHEET-KB-VERSION-STRING-INTRODUCER*", $str_alt499$KB__);
	deflexical("*FACT-SHEET-REVISION-STRING-INTRODUCER*", $str_alt500$System__);
	deflexical("*FACT-SHEET-DEMERIT-CUTOFF*", TWO_INTEGER);
	deflexical("*FACT-SHEET-MIN-PARAGRAPH-LENGTH*", FOUR_INTEGER);
	deflexical("*FACT-SHEET-VERBOSITIES*", $list_alt514);
	deflexical("*FACT-SHEET-IMAGE-MAX-WIDTH*", $int$500);
	deflexical("*FACT-SHEET-IMAGE-MAX-HEIGHT*", $int$200);
	deflexical("*FACT-SHEET-IMAGE-ROOT-PLACEHOLDER*", $str_alt517$FACT_SHEET_IMAGE_ROOT_);
	deflexical("*FACT-SHEET-BASE-URL-PLACEHOLDER*", $str_alt520$FACT_SHEET_BASE_URL_);
	defparameter("*FACT-SHEET-REPLACEMENT-COLOR-SPEC*", list(bq_cons(html_macros.$html_color_cyc_logo_light_violet$.getDynamicValue(), html_macros.$html_color_cyc_logo_light_blue$.getDynamicValue()),
		bq_cons(html_macros.$html_color_cyc_logo_lighter_violet$.getDynamicValue(), html_macros.$html_color_cyc_logo_lighter_blue$.getDynamicValue())));
	deflexical("*FACT-SHEET-IMAGE-FILE-ROOT-DIRECTORY*", $str_alt522$_cyc_httpd_htdocs_cycdoc_img_);
	deflexical("*FACT-SHEET-IMAGE-FILE-ROOT-URL-CACHING-STATE*", NIL);
	defparameter("*USE-FACT-SHEET-IMAGE-FILE-ROOT-URL?*", NIL);
	defparameter("*USE-RELATIVE-FACT-SHEET-IMAGE-URLS?*", NIL);
	deflexical("*FACT-SHEET-IMAGE-URL-ROOT-CACHING-STATE*", NIL);
	deflexical("*GET-MINI-FACT-SHEET-FOR-TERM-CACHED-CACHING-STATE*", NIL);
	defparameter("*USE-FACT-SHEET-BUILDER-QUERIES?*", T);
	defparameter("*INCLUDE-MISCELLANEOUS-ON-FACT-SHEETS?*", T);
	defparameter("*OMITTED-FACT-SHEET-SENTENCES*", NIL);
	deflexical("*FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-PRED-ABOUTNESS-MAP*", $list_alt570);
	deflexical("*FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-TRANSITIVITY-CHECK-CACHING-STATE*", NIL);
	defparameter("*FACT-SHEET-QUERIES-BROWSABLE?*", NIL);
	deflexical("*FACT-SHEET-QUERY-SPEC-POOL*", stacks.create_stack());
	deflexical("*FACT-SHEET-QUERY-POLLING-INTERVAL*", $float$0_5);
	deflexical("*FACT-SHEET-LABEL-FOR-CATEGORY-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-OPTIONAL-SECTION-START-COMMENT-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-OPTIONAL-SECTION-END-COMMENT-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-UNDER-CONSTRUCTION-CODE*", MINUS_ONE_INTEGER);
	deflexical("*STOP-FACT-SHEET-UPDATE-AFTER-CURRENT-TERM?*", NIL);
	deflexical("*FACT-SHEET-INACTIVITY-IMAGE-RESTART-DELAY*", multiply($int$60, $int$60));
	defparameter("*FACT-SHEET-GENERATOR-UPDATE-DATE-AND-SECOND*", $list_alt680);
	deflexical("*FACT-SHEET-SCREENSAVER-USERS*", $list_alt753);
	deflexical("*FACT-SHEET-SCREENSAVERS*", NIL != boundp($fact_sheet_screensavers$) ? ((SubLObject) ($fact_sheet_screensavers$.getGlobalValue())) : NIL);
	deflexical("*FACT-SHEET-SCREENSAVERS-SHOULD-SLEEP?*", NIL);
	deflexical("*FACT-SHEET-SCREENSAVERS-SHOULD-DIE?*", NIL);
	defparameter("*FACT-SHEET-QUERY-SOFT-TIMEOUT-TIME*", NIL);
	defparameter("*FACT-SHEET-PARAPHRASE-SOFT-TIMEOUT-TIME*", NIL);
	deflexical("*FACT-SHEET-DIRECTORY-FROM-LIST-CACHING-STATE*", NIL);
	defconstant("*DTP-FACT-SHEET-UPDATE-TERM-PRIORITIZER*", FACT_SHEET_UPDATE_TERM_PRIORITIZER);
	deflexical("*FACT-SHEET-UPDATE-TERM-PRIORITIZERS*", NIL != boundp($fact_sheet_update_term_prioritizers$) ? ((SubLObject) ($fact_sheet_update_term_prioritizers$.getGlobalValue())) : dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED));
	defparameter("*FSUT-PRIORITIZER-DEFAULT-NICE-LEVEL*", ZERO_INTEGER);
	deflexical("*FSUT-PRIORITIZER-MAX-NICE-LEVEL*", NINETEEN_INTEGER);
	deflexical("*FSUT-PRIORITIZER-MIN-NICE-LEVEL*", $int$_20);
	defparameter("*FSUT-PRIORITIZER-DEFAULT-NEW-DAYS*", ZERO_INTEGER);
	deflexical("*FSUT-PRIORITIZER-DIVISOR*", $int$100);
	deflexical("*FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-STATUSES*", $list_alt849);
	deflexical("*FACT-SHEET-UPDATING-LOCK*", NIL != boundp($fact_sheet_updating_lock$) ? ((SubLObject) ($fact_sheet_updating_lock$.getGlobalValue())) : make_lock($$$Fact_Sheet_Data_Update_Lock));
	defvar("*FACT-SHEET-UPDATING-PROCESS-DICTIONARY*", dictionary.new_dictionary(EQUAL, UNPROVIDED));
	defparameter("*FACT-SHEET-LOOKASIDE-CACHE*", dictionary.new_dictionary(EQUAL, UNPROVIDED));
	defparameter("*PUBLIC-FACT-SHEET-PATH*", list_utilities.add_to_end($$$public, com.cyc.cycjava.cycl.fact_sheets.fact_sheet_data_path()));
	deflexical("*PUBLIC-FACT-SHEET-AD-HTML*", $str_alt902$_script_type__text_javascript____);
	deflexical("*GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING-CACHING-STATE*", NIL);
	deflexical("*TERMS-FOR-PUBLIC-FACT-SHEETS-CACHING-STATE*", NIL);
	deflexical("*TYPES-FOR-PUBLIC-FACT-SHEETS-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-TERM-STRINGS-CACHING-STATE*", NIL);
	deflexical("*GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS-CACHING-STATE*", NIL);
	defparameter("*INCYC-FACTSHEET-STAGING-DIRECTORY*", $str_alt938$_cyc_projects_inCyc_staging_area_);
	defparameter("*INCYC-SEARCHDATA-STAGING-FILE*", $str_alt939$_cyc_projects_inCyc_staging_area_);
	defparameter("*INCYC-SEARCHDATA-XML-FILE*", $str_alt940$_cyc_projects_inCyc_staging_area_);
	defparameter("*INCYC-SEARCHDATA-HTACCESS-FILE*", $str_alt941$_cyc_projects_inCyc_staging_area_);
	defparameter("*INCYC-SEARCHDATA-SQL-FILE*", $str_alt942$_cyc_projects_inCyc_staging_area_);
	deflexical("*PUBLIC-FACT-SHEET-PROPERTIES*", NIL);
	defparameter("*FS-TYPE*", NIL);
	deflexical("*CACHED-NUM-GAF-ARG-INDEX-CACHING-STATE*", NIL);
	return NIL;
    }

    public static SubLObject init_fact_sheets_file() {
	if (SubLFiles.USE_V1) {
	    defparameter("*ALLOW-FACT-SHEET-EVALUATIONS?*",
		    red_infrastructure_macros.red_def_helper(fact_sheets.$list0.isSymbol() ? symbol_value(fact_sheets.$list0) : fact_sheets.$list0, fact_sheets.$allow_fact_sheet_evaluationsP$, ONE_INTEGER.isSymbol() ? symbol_value(ONE_INTEGER) : ONE_INTEGER, $PARAMETER, UNPROVIDED));
	    defparameter("*FACT-SHEET-EVAL-LOG-FILE*", red_infrastructure_macros.red_def_helper(fact_sheets.$list7.isSymbol() ? symbol_value(fact_sheets.$list7) : fact_sheets.$list7, fact_sheets.$fact_sheet_eval_log_file$,
		    fact_sheets.$str9$_cyc_projects_aquaint_ginko_metri.isSymbol() ? symbol_value(fact_sheets.$str9$_cyc_projects_aquaint_ginko_metri) : fact_sheets.$str9$_cyc_projects_aquaint_ginko_metri, $PARAMETER, UNPROVIDED));
	    defparameter("*FACT-SHEET-QUERY-MT*", NIL);
	    defparameter("*FACT-SHEET-TABLE-TYPE*", NIL);
	    defparameter("*FACT-SHEET-SENTENCE*", NIL);
	    defparameter("*WITHIN-FACT-SHEET-PARAPHRASE?*", NIL);
	    defparameter("*FACT-SHEET-SENTENCE-SORTER-PRED-COUNTS*", NIL);
	    defparameter("*FACT-SHEET-FOCAL-TERM*", NIL);
	    defparameter("*FACT-SHEET-VERBOSITY*", $NORMAL);
	    defparameter("*SUPPRESS-FACT-SHEET-EXTRA-IMAGES*", NIL);
	    defparameter("*SUPPRESS-FACT-SHEET-EXTRA-IMAGES-CSS*", fact_sheets.$str39$_cycdoc_css_cb_fact_sheets_suppre);
	    defparameter("*CHMOD-SAFE-TO-USE?*", NIL);
	    defparameter("*CATCH-FACT-SHEET-ERRORS?*", T);
	    deflexical("*FACT-SHEET-DEFAULT-LANGUAGE-MONAD-MT*", fact_sheets.$$FactSheetParaphraseMt);
	    deflexical("*FACT-SHEET-DEFAULT-LANGUAGE-MT-TIME-INTERVAL*", fact_sheets.$$Now);
	    deflexical("*FACT-SHEET-DEFAULT-LANGUAGE-MT-TIME-PARAMETER*", fact_sheets.$$Null_TimeParameter);
	    deflexical("*FACT-SHEET-DEFAULT-LANGUAGE-MT-CACHING-STATE*", NIL);
	    deflexical("*BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT-CACHING-STATE*", NIL);
	    deflexical("*FACT-SHEET-DEFAULT-DOMAIN-MONAD-MT*", fact_sheets.$$FactSheetGenerationMt);
	    deflexical("*FACT-SHEET-DEFAULT-DOMAIN-MT-CACHING-STATE*", NIL);
	    deflexical("*BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT-CACHING-STATE*", NIL);
	    deflexical("*FACT-SHEET-THCL-SECTION-CATEGORY*", fact_sheets.$$$Miscellaneous);
	    deflexical("*FACT-SHEET-TABLE-BORDER-WIDTH*", ZERO_INTEGER);
	    deflexical("*FACT-SHEET-TABLE-CELLPADDING*", THREE_INTEGER);
	    deflexical("*FACT-SHEET-TABLE-HORIZONTAL-ALIGNMENT*", fact_sheets.$$$center);
	    deflexical("*FACT-SHEET-TABLE-WIDTH*", fact_sheets.$str112$50_);
	    deflexical("*FACT-SHEET-TABLE-TITLE-BGCOLOR*", html_macros.$html_color_cyc_logo_violet$.getGlobalValue());
	    deflexical("*FACT-SHEET-TABLE-TITLE-FONT-COLOR*", html_macros.$html_color_white$.getGlobalValue());
	    deflexical("*FACT-SHEET-TABLE-TITLE-HORIZONTAL-ALIGNMENT*", fact_sheets.$$$center);
	    deflexical("*FACT-SHEET-TABLE-HEADER-BGCOLOR*", html_macros.$html_color_cyc_logo_violet$.getGlobalValue());
	    deflexical("*FACT-SHEET-TABLE-HEADER-HORIZONTAL-ALIGNMENT*", fact_sheets.$$$center);
	    deflexical("*FACT-SHEET-TABLE-HEADER-FONT-COLOR*", html_macros.$html_color_white$.getGlobalValue());
	    deflexical("*FACT-SHEET-TABLE-DATA-BGCOLOR*", html_macros.$html_color_white$.getGlobalValue());
	    deflexical("*FACT-SHEET-TABLE-DATA-FIRST-COLUMN-HORIZONTAL-ALIGNMENT*", fact_sheets.$$$right);
	    defparameter("*FACT-SHEET-RELEVANT-TERMS*", fact_sheets.$list175);
	    defparameter("*FACT-SHEET-TERM-PARAPHRASE-FOR-TITLE?*", T);
	    defparameter("*FACT-SHEET-USE-BASE-URL?*", T);
	    defparameter("*FACT-SHEET-FOLLOWUP-LOADER-ROOT-RELATIVE-PATH*", fact_sheets.$str190$_Enesta_resources_followupLoader_);
	    defconstant("*FACT-SHEET-REQUEST-PATTERNS*",
		    list(new SubLObject[] { cons(string_utilities.$empty_string$.getGlobalValue(), string_utilities.$empty_string$.getGlobalValue()), cons(fact_sheets.$$$what_do_you_know_about_, string_utilities.$empty_string$.getGlobalValue()),
			    cons(fact_sheets.$$$tell_me_about_, string_utilities.$empty_string$.getGlobalValue()), cons(fact_sheets.$$$facts_about_, string_utilities.$empty_string$.getGlobalValue()), cons(fact_sheets.$$$explain_, string_utilities.$empty_string$.getGlobalValue()),
			    cons(fact_sheets.$$$fact_sheet_for_, string_utilities.$empty_string$.getGlobalValue()), cons(fact_sheets.$$$fact_sheet_about_, string_utilities.$empty_string$.getGlobalValue()), cons(fact_sheets.$$$show_, string_utilities.$empty_string$.getGlobalValue()),
			    cons(string_utilities.$empty_string$.getGlobalValue(), fact_sheets.$$$_facts), cons(string_utilities.$empty_string$.getGlobalValue(), fact_sheets.$$$_knowledge), cons(string_utilities.$empty_string$.getGlobalValue(), fact_sheets.$$$_fact_sheet) }));
	    deflexical("*SCALAR-INTERVAL-P-CACHING-STATE*", NIL);
	    deflexical("*MINI-FACT-SHEET-TERM-TYPES*", fact_sheets.$list254);
	    deflexical("*FACT-SHEET-DATA-PATH*", list(fact_sheets.$$$data, fact_sheets.$str256$fact_sheets));
	    deflexical("*FACT-SHEET-ID-UPPER-CASE-ESCAPE-CHAR*", CHAR_caret);
	    deflexical("*FACT-SHEET-ID-LEGACY-UPPER-CASE-ESCAPE-CHAR*", CHAR_vertical);
	    defparameter("*USE-FACT-SHEET-LEGACY-IDS?*", NIL);
	    deflexical("*FACT-SHEET-TERM-ID-LOW-CACHING-STATE*", NIL);
	    deflexical("*WARN-UNKNOWN-FACT-SHEET-TERM-ID-CACHING-STATE*", NIL);
	    deflexical("*FACT-SHEET-CATEGORY-ORDER*", fact_sheets.$list276);
	    deflexical("*FACT-SHEET-SENTENCE-GROUP-SUMMARY-CACHING-STATE*", NIL);
	    deflexical("*FACT-SHEET-BOGUS-URL-PREFIX*", fact_sheets.$str282$http___fact_sheet);
	    deflexical("*FACT-SHEET-OUTER-TABLE-CLASS*", fact_sheets.$str323$fs_outer_table);
	    deflexical("*FACT-SHEET-MAIN-IMAGE*", fact_sheets.$str324$fs_main_image);
	    deflexical("*FACT-SHEET-IN-CYC-LOGO*", fact_sheets.$str325$fs_in_cyc_logo);
	    deflexical("*FACT-SHEET-TITLE*", fact_sheets.$str326$fs_title);
	    deflexical("*FACT-SHEET-TITLE-DIV*", fact_sheets.$str327$fs_title_div);
	    deflexical("*FACT-SHEET-CATEGORY-TITLE*", fact_sheets.$str328$fs_category);
	    deflexical("*FACT-SHEET-FACT-CLASS1*", fact_sheets.$str329$fs_fact_1);
	    deflexical("*FACT-SHEET-FACT-CLASS2*", fact_sheets.$str330$fs_fact_2);
	    deflexical("*FACT-SHEET-FOOTNOTE-CLASS1*", fact_sheets.$str331$fs_footnote_1);
	    deflexical("*FACT-SHEET-FOOTNOTE-CLASS2*", fact_sheets.$str332$fs_footnote_2);
	    deflexical("*FACT-SHEET-KB-VERSION-STRING-INTRODUCER*", fact_sheets.$str340$KB__);
	    deflexical("*FACT-SHEET-REVISION-STRING-INTRODUCER*", fact_sheets.$str341$System__);
	    deflexical("*FACT-SHEET-DEMERIT-CUTOFF*", TWO_INTEGER);
	    deflexical("*FACT-SHEET-MIN-PARAGRAPH-LENGTH*", FOUR_INTEGER);
	    deflexical("*FACT-SHEET-VERBOSITIES*", fact_sheets.$list355);
	    deflexical("*FACT-SHEET-IMAGE-MAX-WIDTH*", fact_sheets.$int$500);
	    deflexical("*FACT-SHEET-IMAGE-MAX-HEIGHT*", fact_sheets.$int$200);
	    deflexical("*FACT-SHEET-IMAGE-ROOT-PLACEHOLDER*", fact_sheets.$str358$FACT_SHEET_IMAGE_ROOT_);
	    deflexical("*FACT-SHEET-BASE-URL-PLACEHOLDER*", fact_sheets.$str361$FACT_SHEET_BASE_URL_);
	    defparameter("*FACT-SHEET-REPLACEMENT-COLOR-SPEC*", list(bq_cons(html_macros.$html_color_cyc_logo_light_violet$.getGlobalValue(), html_macros.$html_color_cyc_logo_light_blue$.getGlobalValue()),
		    bq_cons(html_macros.$html_color_cyc_logo_lighter_violet$.getGlobalValue(), html_macros.$html_color_cyc_logo_lighter_blue$.getGlobalValue())));
	    deflexical("*FACT-SHEET-IMAGE-FILE-ROOT-DIRECTORY*", NIL);
	    deflexical("*FACT-SHEET-IMAGE-FILE-ROOT-URL-CACHING-STATE*", NIL);
	    defparameter("*USE-FACT-SHEET-IMAGE-FILE-ROOT-URL?*", NIL);
	    defparameter("*USE-RELATIVE-FACT-SHEET-IMAGE-URLS?*", NIL);
	    deflexical("*FACT-SHEET-IMAGE-URL-ROOT-CACHING-STATE*", NIL);
	    deflexical("*GET-MINI-FACT-SHEET-FOR-TERM-CACHED-CACHING-STATE*", NIL);
	    defparameter("*USE-FACT-SHEET-BUILDER-QUERIES?*", T);
	    defparameter("*INCLUDE-MISCELLANEOUS-ON-FACT-SHEETS?*", T);
	    defparameter("*OMITTED-FACT-SHEET-SENTENCES*", NIL);
	    deflexical("*FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ-CACHING-STATE*", NIL);
	    deflexical("*FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL-CACHING-STATE*", NIL);
	    deflexical("*FACT-SHEET-PRED-ABOUTNESS-MAP*", fact_sheets.$list400);
	    deflexical("*FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?-CACHING-STATE*", NIL);
	    deflexical("*FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED-CACHING-STATE*", NIL);
	    deflexical("*FACT-SHEET-TRANSITIVITY-CHECK-CACHING-STATE*", NIL);
	    defparameter("*FACT-SHEET-QUERIES-BROWSABLE?*", NIL);
	    deflexical("*FACT-SHEET-QUERY-SPEC-POOL*", stacks.create_stack());
	    deflexical("*FACT-SHEET-QUERY-POLLING-INTERVAL*", fact_sheets.$float$0_5);
	    deflexical("*FACT-SHEET-LABEL-FOR-CATEGORY-CACHING-STATE*", NIL);
	    deflexical("*FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED-CACHING-STATE*", NIL);
	    deflexical("*FACT-SHEET-OPTIONAL-SECTION-START-COMMENT-CACHING-STATE*", NIL);
	    deflexical("*FACT-SHEET-OPTIONAL-SECTION-END-COMMENT-CACHING-STATE*", NIL);
	    deflexical("*FACT-SHEET-UNDER-CONSTRUCTION-CODE*", MINUS_ONE_INTEGER);
	    deflexical("*STOP-FACT-SHEET-UPDATE-AFTER-CURRENT-TERM?*", NIL);
	    deflexical("*FACT-SHEET-INACTIVITY-IMAGE-RESTART-DELAY*", multiply(fact_sheets.$int$60, fact_sheets.$int$60));
	    defparameter("*FACT-SHEET-GENERATOR-UPDATE-DATE-AND-SECOND*", fact_sheets.$list539);
	    deflexical("*FACT-SHEET-SCREENSAVER-USERS*", fact_sheets.$list618);
	    deflexical("*FACT-SHEET-SCREENSAVERS*", SubLTrampolineFile.maybeDefault(fact_sheets.$fact_sheet_screensavers$, fact_sheets.$fact_sheet_screensavers$, NIL));
	    deflexical("*FACT-SHEET-SCREENSAVERS-SHOULD-SLEEP?*", NIL);
	    deflexical("*FACT-SHEET-SCREENSAVERS-SHOULD-DIE?*", NIL);
	    defparameter("*FACT-SHEET-QUERY-SOFT-TIMEOUT-TIME*", NIL);
	    defparameter("*FACT-SHEET-PARAPHRASE-SOFT-TIMEOUT-TIME*", NIL);
	    deflexical("*FACT-SHEET-DIRECTORY-FROM-LIST-CACHING-STATE*", NIL);
	    defconstant("*DTP-FACT-SHEET-UPDATE-TERM-PRIORITIZER*", fact_sheets.FACT_SHEET_UPDATE_TERM_PRIORITIZER);
	    deflexical("*FACT-SHEET-UPDATE-TERM-PRIORITIZERS*", SubLTrampolineFile.maybeDefault(fact_sheets.$fact_sheet_update_term_prioritizers$, fact_sheets.$fact_sheet_update_term_prioritizers$, () -> dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED)));
	    defparameter("*FSUT-PRIORITIZER-DEFAULT-NICE-LEVEL*", ZERO_INTEGER);
	    deflexical("*FSUT-PRIORITIZER-MAX-NICE-LEVEL*", NINETEEN_INTEGER);
	    deflexical("*FSUT-PRIORITIZER-MIN-NICE-LEVEL*", fact_sheets.$int$_20);
	    defparameter("*FSUT-PRIORITIZER-DEFAULT-NEW-DAYS*", ZERO_INTEGER);
	    deflexical("*FSUT-PRIORITIZER-DIVISOR*", $int$100);
	    deflexical("*FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL-CACHING-STATE*", NIL);
	    deflexical("*FACT-SHEET-STATUSES*", fact_sheets.$list727);
	    deflexical("*FACT-SHEET-UPDATING-LOCK*", SubLTrampolineFile.maybeDefault(fact_sheets.$fact_sheet_updating_lock$, fact_sheets.$fact_sheet_updating_lock$, () -> make_lock(fact_sheets.$$$Fact_Sheet_Data_Update_Lock)));
	    defvar("*FACT-SHEET-UPDATING-PROCESS-DICTIONARY*", dictionary.new_dictionary(EQUAL, UNPROVIDED));
	    defparameter("*FACT-SHEET-LOOKASIDE-CACHE*", dictionary.new_dictionary(EQUAL, UNPROVIDED));
	    defparameter("*PUBLIC-FACT-SHEET-PATH*", list_utilities.add_to_end(fact_sheets.$$$public, fact_sheets.fact_sheet_data_path()));
	    deflexical("*PUBLIC-FACT-SHEET-AD-HTML*", fact_sheets.$str790$_script_type__text_javascript____);
	    deflexical("*GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING-CACHING-STATE*", NIL);
	    deflexical("*TERMS-FOR-PUBLIC-FACT-SHEETS-CACHING-STATE*", NIL);
	    deflexical("*TYPES-FOR-PUBLIC-FACT-SHEETS-CACHING-STATE*", NIL);
	    deflexical("*FACT-SHEET-TERM-STRINGS-CACHING-STATE*", NIL);
	    deflexical("*GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS-CACHING-STATE*", NIL);
	    defparameter("*INCYC-FACTSHEET-STAGING-DIRECTORY*", fact_sheets.$str826$_cyc_projects_inCyc_staging_area_);
	    defparameter("*INCYC-SEARCHDATA-STAGING-FILE*", fact_sheets.$str827$_cyc_projects_inCyc_staging_area_);
	    defparameter("*INCYC-SEARCHDATA-XML-FILE*", fact_sheets.$str828$_cyc_projects_inCyc_staging_area_);
	    defparameter("*INCYC-SEARCHDATA-HTACCESS-FILE*", fact_sheets.$str829$_cyc_projects_inCyc_staging_area_);
	    defparameter("*INCYC-SEARCHDATA-SQL-FILE*", fact_sheets.$str830$_cyc_projects_inCyc_staging_area_);
	    deflexical("*PUBLIC-FACT-SHEET-PROPERTIES*", NIL);
	    defparameter("*FS-TYPE*", NIL);
	    deflexical("*CACHED-NUM-GAF-ARG-INDEX-CACHING-STATE*", NIL);
	}
	if (SubLFiles.USE_V2) {
	    defparameter("*ALLOW-FACT-SHEET-EVALUATIONS?*",
		    red_infrastructure_macros.red_def_helper($list_alt0.isSymbol() ? ((SubLObject) (symbol_value($list_alt0))) : $list_alt0, $allow_fact_sheet_evaluationsP$, ONE_INTEGER.isSymbol() ? ((SubLObject) (symbol_value(ONE_INTEGER))) : ONE_INTEGER, $PARAMETER, UNPROVIDED));
	    defparameter("*FACT-SHEET-EVAL-LOG-FILE*", red_infrastructure_macros.red_def_helper($list_alt7.isSymbol() ? ((SubLObject) (symbol_value($list_alt7))) : $list_alt7, $fact_sheet_eval_log_file$,
		    $str_alt9$_cyc_projects_aquaint_ginko_metri.isSymbol() ? ((SubLObject) (symbol_value($str_alt9$_cyc_projects_aquaint_ginko_metri))) : $str_alt9$_cyc_projects_aquaint_ginko_metri, $PARAMETER, UNPROVIDED));
	    defparameter("*FACT-SHEET-LOG-FILE*", NIL);
	    defparameter("*FACT-SHEET-LOG-STREAM*", T);
	    deflexical("*CLOSED-FACT-SHEET-LOG-FILES*", NIL != boundp($closed_fact_sheet_log_files$) ? ((SubLObject) ($closed_fact_sheet_log_files$.getGlobalValue())) : NIL);
	    defparameter("*NEXT-FACT-SHEET-HOURLY-REPORT-TIME*", NIL);
	    defparameter("*HOURLY-FACT-SHEET-STATS*", NIL);
	    deflexical("*FACT-SHEET-LOG-FILE-PROPERTIES*", $list_alt123);
	    deflexical("*GET-FACT-SHEET-LOG-DIRECTORY-DATA-CACHED-CACHING-STATE*", NIL);
	    deflexical("*FACT-SHEET-LOG-FILE-UNIQUIFIER-LOCK*", make_lock($str_alt196$fact_sheet_log_file_uniquifier_lo));
	    deflexical("*FACT-SHEET-TABLE-WIDTH*", $str_alt276$50_);
	    deflexical("*FACT-SHEET-TABLE-TITLE-BGCOLOR*", html_macros.$html_color_cyc_logo_violet$.getDynamicValue());
	    deflexical("*FACT-SHEET-TABLE-TITLE-FONT-COLOR*", html_macros.$html_color_white$.getDynamicValue());
	    deflexical("*FACT-SHEET-TABLE-HEADER-BGCOLOR*", html_macros.$html_color_cyc_logo_violet$.getDynamicValue());
	    deflexical("*FACT-SHEET-TABLE-HEADER-FONT-COLOR*", html_macros.$html_color_white$.getDynamicValue());
	    deflexical("*FACT-SHEET-TABLE-DATA-BGCOLOR*", html_macros.$html_color_white$.getDynamicValue());
	    defparameter("*FACT-SHEET-FOLLOWUP-LOADER-ROOT-RELATIVE-PATH*", $str_alt343$_Enesta_resources_followupLoader_);
	    defconstant("*FACT-SHEET-REQUEST-PATTERNS*",
		    list(new SubLObject[] { cons(string_utilities.$empty_string$.getGlobalValue(), string_utilities.$empty_string$.getGlobalValue()), cons($str_alt371$what_do_you_know_about_, string_utilities.$empty_string$.getGlobalValue()),
			    cons($str_alt372$tell_me_about_, string_utilities.$empty_string$.getGlobalValue()), cons($str_alt373$facts_about_, string_utilities.$empty_string$.getGlobalValue()), cons($str_alt374$explain_, string_utilities.$empty_string$.getGlobalValue()),
			    cons($str_alt375$fact_sheet_for_, string_utilities.$empty_string$.getGlobalValue()), cons($str_alt376$fact_sheet_about_, string_utilities.$empty_string$.getGlobalValue()), cons($str_alt377$show_, string_utilities.$empty_string$.getGlobalValue()),
			    cons(string_utilities.$empty_string$.getGlobalValue(), $str_alt378$_facts), cons(string_utilities.$empty_string$.getGlobalValue(), $str_alt379$_knowledge), cons(string_utilities.$empty_string$.getGlobalValue(), $str_alt380$_fact_sheet) }));
	    deflexical("*MINI-FACT-SHEET-TERM-TYPES*", $list_alt403);
	    deflexical("*FACT-SHEET-DATA-PATH*", list($$$data, $str_alt405$fact_sheets));
	    deflexical("*FACT-SHEET-TERM-FHT-FILENAME*", $str_alt407$fact_sheet_term_ids_fht);
	    deflexical("*FACT-SHEET-TERM-FHT-FULL-PATH*", NIL);
	    deflexical("*FACT-SHEET-TERM-FBC*", NIL);
	    deflexical("*FACT-SHEET-TERM-FHT-MODE*", $IMAGE_INDEPENDENT_CFASL);
	    deflexical("*CONSTRUCT-FACT-SHEET-TERM-ID-CACHING-STATE*", NIL);
	    deflexical("*FACT-SHEET-CATEGORY-ORDER*", $list_alt432);
	    deflexical("*FACT-SHEET-BOGUS-URL-PREFIX*", $str_alt442$http___fact_sheet);
	    deflexical("*FACT-SHEET-OUTER-TABLE-CLASS*", $str_alt483$fs_outer_table);
	    deflexical("*FACT-SHEET-MAIN-IMAGE*", $str_alt484$fs_main_image);
	    deflexical("*FACT-SHEET-IN-CYC-LOGO*", $str_alt485$fs_in_cyc_logo);
	    deflexical("*FACT-SHEET-TITLE*", $str_alt486$fs_title);
	    deflexical("*FACT-SHEET-TITLE-DIV*", $str_alt487$fs_title_div);
	    deflexical("*FACT-SHEET-CATEGORY-TITLE*", $str_alt488$fs_category);
	    deflexical("*FACT-SHEET-FACT-CLASS1*", $str_alt489$fs_fact_1);
	    deflexical("*FACT-SHEET-FACT-CLASS2*", $str_alt490$fs_fact_2);
	    deflexical("*FACT-SHEET-FOOTNOTE-CLASS1*", $str_alt491$fs_footnote_1);
	    deflexical("*FACT-SHEET-FOOTNOTE-CLASS2*", $str_alt492$fs_footnote_2);
	    deflexical("*FACT-SHEET-KB-VERSION-STRING-INTRODUCER*", $str_alt499$KB__);
	    deflexical("*FACT-SHEET-REVISION-STRING-INTRODUCER*", $str_alt500$System__);
	    deflexical("*FACT-SHEET-VERBOSITIES*", $list_alt514);
	    deflexical("*FACT-SHEET-IMAGE-ROOT-PLACEHOLDER*", $str_alt517$FACT_SHEET_IMAGE_ROOT_);
	    deflexical("*FACT-SHEET-BASE-URL-PLACEHOLDER*", $str_alt520$FACT_SHEET_BASE_URL_);
	    defparameter("*FACT-SHEET-REPLACEMENT-COLOR-SPEC*", list(bq_cons(html_macros.$html_color_cyc_logo_light_violet$.getDynamicValue(), html_macros.$html_color_cyc_logo_light_blue$.getDynamicValue()),
		    bq_cons(html_macros.$html_color_cyc_logo_lighter_violet$.getDynamicValue(), html_macros.$html_color_cyc_logo_lighter_blue$.getDynamicValue())));
	    deflexical("*FACT-SHEET-IMAGE-FILE-ROOT-DIRECTORY*", $str_alt522$_cyc_httpd_htdocs_cycdoc_img_);
	    deflexical("*FACT-SHEET-PRED-ABOUTNESS-MAP*", $list_alt570);
	    defparameter("*FACT-SHEET-GENERATOR-UPDATE-DATE-AND-SECOND*", $list_alt680);
	    deflexical("*FACT-SHEET-SCREENSAVER-USERS*", $list_alt753);
	    deflexical("*FACT-SHEET-SCREENSAVERS*", NIL != boundp($fact_sheet_screensavers$) ? ((SubLObject) ($fact_sheet_screensavers$.getGlobalValue())) : NIL);
	    deflexical("*FACT-SHEET-UPDATE-TERM-PRIORITIZERS*", NIL != boundp($fact_sheet_update_term_prioritizers$) ? ((SubLObject) ($fact_sheet_update_term_prioritizers$.getGlobalValue())) : dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED));
	    deflexical("*FACT-SHEET-STATUSES*", $list_alt849);
	    deflexical("*FACT-SHEET-UPDATING-LOCK*", NIL != boundp($fact_sheet_updating_lock$) ? ((SubLObject) ($fact_sheet_updating_lock$.getGlobalValue())) : make_lock($$$Fact_Sheet_Data_Update_Lock));
	    deflexical("*PUBLIC-FACT-SHEET-AD-HTML*", $str_alt902$_script_type__text_javascript____);
	    defparameter("*INCYC-FACTSHEET-STAGING-DIRECTORY*", $str_alt938$_cyc_projects_inCyc_staging_area_);
	    defparameter("*INCYC-SEARCHDATA-STAGING-FILE*", $str_alt939$_cyc_projects_inCyc_staging_area_);
	    defparameter("*INCYC-SEARCHDATA-XML-FILE*", $str_alt940$_cyc_projects_inCyc_staging_area_);
	    defparameter("*INCYC-SEARCHDATA-HTACCESS-FILE*", $str_alt941$_cyc_projects_inCyc_staging_area_);
	    defparameter("*INCYC-SEARCHDATA-SQL-FILE*", $str_alt942$_cyc_projects_inCyc_staging_area_);
	}
	return NIL;
    }

    public static SubLObject init_fact_sheets_file_Previous() {
	defparameter("*ALLOW-FACT-SHEET-EVALUATIONS?*",
		red_infrastructure_macros.red_def_helper(fact_sheets.$list0.isSymbol() ? symbol_value(fact_sheets.$list0) : fact_sheets.$list0, fact_sheets.$allow_fact_sheet_evaluationsP$, ONE_INTEGER.isSymbol() ? symbol_value(ONE_INTEGER) : ONE_INTEGER, $PARAMETER, UNPROVIDED));
	defparameter("*FACT-SHEET-EVAL-LOG-FILE*", red_infrastructure_macros.red_def_helper(fact_sheets.$list7.isSymbol() ? symbol_value(fact_sheets.$list7) : fact_sheets.$list7, fact_sheets.$fact_sheet_eval_log_file$,
		fact_sheets.$str9$_cyc_projects_aquaint_ginko_metri.isSymbol() ? symbol_value(fact_sheets.$str9$_cyc_projects_aquaint_ginko_metri) : fact_sheets.$str9$_cyc_projects_aquaint_ginko_metri, $PARAMETER, UNPROVIDED));
	defparameter("*FACT-SHEET-QUERY-MT*", NIL);
	defparameter("*FACT-SHEET-TABLE-TYPE*", NIL);
	defparameter("*FACT-SHEET-SENTENCE*", NIL);
	defparameter("*WITHIN-FACT-SHEET-PARAPHRASE?*", NIL);
	defparameter("*FACT-SHEET-SENTENCE-SORTER-PRED-COUNTS*", NIL);
	defparameter("*FACT-SHEET-FOCAL-TERM*", NIL);
	defparameter("*FACT-SHEET-VERBOSITY*", $NORMAL);
	defparameter("*SUPPRESS-FACT-SHEET-EXTRA-IMAGES*", NIL);
	defparameter("*SUPPRESS-FACT-SHEET-EXTRA-IMAGES-CSS*", fact_sheets.$str39$_cycdoc_css_cb_fact_sheets_suppre);
	defparameter("*CHMOD-SAFE-TO-USE?*", NIL);
	defparameter("*CATCH-FACT-SHEET-ERRORS?*", T);
	deflexical("*FACT-SHEET-DEFAULT-LANGUAGE-MONAD-MT*", fact_sheets.$$FactSheetParaphraseMt);
	deflexical("*FACT-SHEET-DEFAULT-LANGUAGE-MT-TIME-INTERVAL*", fact_sheets.$$Now);
	deflexical("*FACT-SHEET-DEFAULT-LANGUAGE-MT-TIME-PARAMETER*", fact_sheets.$$Null_TimeParameter);
	deflexical("*FACT-SHEET-DEFAULT-LANGUAGE-MT-CACHING-STATE*", NIL);
	deflexical("*BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-DEFAULT-DOMAIN-MONAD-MT*", fact_sheets.$$FactSheetGenerationMt);
	deflexical("*FACT-SHEET-DEFAULT-DOMAIN-MT-CACHING-STATE*", NIL);
	deflexical("*BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-THCL-SECTION-CATEGORY*", fact_sheets.$$$Miscellaneous);
	deflexical("*FACT-SHEET-TABLE-BORDER-WIDTH*", ZERO_INTEGER);
	deflexical("*FACT-SHEET-TABLE-CELLPADDING*", THREE_INTEGER);
	deflexical("*FACT-SHEET-TABLE-HORIZONTAL-ALIGNMENT*", fact_sheets.$$$center);
	deflexical("*FACT-SHEET-TABLE-WIDTH*", fact_sheets.$str112$50_);
	deflexical("*FACT-SHEET-TABLE-TITLE-BGCOLOR*", html_macros.$html_color_cyc_logo_violet$.getGlobalValue());
	deflexical("*FACT-SHEET-TABLE-TITLE-FONT-COLOR*", html_macros.$html_color_white$.getGlobalValue());
	deflexical("*FACT-SHEET-TABLE-TITLE-HORIZONTAL-ALIGNMENT*", fact_sheets.$$$center);
	deflexical("*FACT-SHEET-TABLE-HEADER-BGCOLOR*", html_macros.$html_color_cyc_logo_violet$.getGlobalValue());
	deflexical("*FACT-SHEET-TABLE-HEADER-HORIZONTAL-ALIGNMENT*", fact_sheets.$$$center);
	deflexical("*FACT-SHEET-TABLE-HEADER-FONT-COLOR*", html_macros.$html_color_white$.getGlobalValue());
	deflexical("*FACT-SHEET-TABLE-DATA-BGCOLOR*", html_macros.$html_color_white$.getGlobalValue());
	deflexical("*FACT-SHEET-TABLE-DATA-FIRST-COLUMN-HORIZONTAL-ALIGNMENT*", fact_sheets.$$$right);
	defparameter("*FACT-SHEET-RELEVANT-TERMS*", fact_sheets.$list175);
	defparameter("*FACT-SHEET-TERM-PARAPHRASE-FOR-TITLE?*", T);
	defparameter("*FACT-SHEET-USE-BASE-URL?*", T);
	defparameter("*FACT-SHEET-FOLLOWUP-LOADER-ROOT-RELATIVE-PATH*", fact_sheets.$str190$_Enesta_resources_followupLoader_);
	defconstant("*FACT-SHEET-REQUEST-PATTERNS*",
		list(new SubLObject[] { cons(string_utilities.$empty_string$.getGlobalValue(), string_utilities.$empty_string$.getGlobalValue()), cons(fact_sheets.$$$what_do_you_know_about_, string_utilities.$empty_string$.getGlobalValue()),
			cons(fact_sheets.$$$tell_me_about_, string_utilities.$empty_string$.getGlobalValue()), cons(fact_sheets.$$$facts_about_, string_utilities.$empty_string$.getGlobalValue()), cons(fact_sheets.$$$explain_, string_utilities.$empty_string$.getGlobalValue()),
			cons(fact_sheets.$$$fact_sheet_for_, string_utilities.$empty_string$.getGlobalValue()), cons(fact_sheets.$$$fact_sheet_about_, string_utilities.$empty_string$.getGlobalValue()), cons(fact_sheets.$$$show_, string_utilities.$empty_string$.getGlobalValue()),
			cons(string_utilities.$empty_string$.getGlobalValue(), fact_sheets.$$$_facts), cons(string_utilities.$empty_string$.getGlobalValue(), fact_sheets.$$$_knowledge), cons(string_utilities.$empty_string$.getGlobalValue(), fact_sheets.$$$_fact_sheet) }));
	deflexical("*SCALAR-INTERVAL-P-CACHING-STATE*", NIL);
	deflexical("*MINI-FACT-SHEET-TERM-TYPES*", fact_sheets.$list254);
	deflexical("*FACT-SHEET-DATA-PATH*", list(fact_sheets.$$$data, fact_sheets.$str256$fact_sheets));
	deflexical("*FACT-SHEET-ID-UPPER-CASE-ESCAPE-CHAR*", CHAR_caret);
	deflexical("*FACT-SHEET-ID-LEGACY-UPPER-CASE-ESCAPE-CHAR*", CHAR_vertical);
	defparameter("*USE-FACT-SHEET-LEGACY-IDS?*", NIL);
	deflexical("*FACT-SHEET-TERM-ID-LOW-CACHING-STATE*", NIL);
	deflexical("*WARN-UNKNOWN-FACT-SHEET-TERM-ID-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-CATEGORY-ORDER*", fact_sheets.$list276);
	deflexical("*FACT-SHEET-SENTENCE-GROUP-SUMMARY-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-BOGUS-URL-PREFIX*", fact_sheets.$str282$http___fact_sheet);
	deflexical("*FACT-SHEET-OUTER-TABLE-CLASS*", fact_sheets.$str323$fs_outer_table);
	deflexical("*FACT-SHEET-MAIN-IMAGE*", fact_sheets.$str324$fs_main_image);
	deflexical("*FACT-SHEET-IN-CYC-LOGO*", fact_sheets.$str325$fs_in_cyc_logo);
	deflexical("*FACT-SHEET-TITLE*", fact_sheets.$str326$fs_title);
	deflexical("*FACT-SHEET-TITLE-DIV*", fact_sheets.$str327$fs_title_div);
	deflexical("*FACT-SHEET-CATEGORY-TITLE*", fact_sheets.$str328$fs_category);
	deflexical("*FACT-SHEET-FACT-CLASS1*", fact_sheets.$str329$fs_fact_1);
	deflexical("*FACT-SHEET-FACT-CLASS2*", fact_sheets.$str330$fs_fact_2);
	deflexical("*FACT-SHEET-FOOTNOTE-CLASS1*", fact_sheets.$str331$fs_footnote_1);
	deflexical("*FACT-SHEET-FOOTNOTE-CLASS2*", fact_sheets.$str332$fs_footnote_2);
	deflexical("*FACT-SHEET-KB-VERSION-STRING-INTRODUCER*", fact_sheets.$str340$KB__);
	deflexical("*FACT-SHEET-REVISION-STRING-INTRODUCER*", fact_sheets.$str341$System__);
	deflexical("*FACT-SHEET-DEMERIT-CUTOFF*", TWO_INTEGER);
	deflexical("*FACT-SHEET-MIN-PARAGRAPH-LENGTH*", FOUR_INTEGER);
	deflexical("*FACT-SHEET-VERBOSITIES*", fact_sheets.$list355);
	deflexical("*FACT-SHEET-IMAGE-MAX-WIDTH*", fact_sheets.$int$500);
	deflexical("*FACT-SHEET-IMAGE-MAX-HEIGHT*", fact_sheets.$int$200);
	deflexical("*FACT-SHEET-IMAGE-ROOT-PLACEHOLDER*", fact_sheets.$str358$FACT_SHEET_IMAGE_ROOT_);
	deflexical("*FACT-SHEET-BASE-URL-PLACEHOLDER*", fact_sheets.$str361$FACT_SHEET_BASE_URL_);
	defparameter("*FACT-SHEET-REPLACEMENT-COLOR-SPEC*",
		list(bq_cons(html_macros.$html_color_cyc_logo_light_violet$.getGlobalValue(), html_macros.$html_color_cyc_logo_light_blue$.getGlobalValue()), bq_cons(html_macros.$html_color_cyc_logo_lighter_violet$.getGlobalValue(), html_macros.$html_color_cyc_logo_lighter_blue$.getGlobalValue())));
	deflexical("*FACT-SHEET-IMAGE-FILE-ROOT-DIRECTORY*", NIL);
	deflexical("*FACT-SHEET-IMAGE-FILE-ROOT-URL-CACHING-STATE*", NIL);
	defparameter("*USE-FACT-SHEET-IMAGE-FILE-ROOT-URL?*", NIL);
	defparameter("*USE-RELATIVE-FACT-SHEET-IMAGE-URLS?*", NIL);
	deflexical("*FACT-SHEET-IMAGE-URL-ROOT-CACHING-STATE*", NIL);
	deflexical("*GET-MINI-FACT-SHEET-FOR-TERM-CACHED-CACHING-STATE*", NIL);
	defparameter("*USE-FACT-SHEET-BUILDER-QUERIES?*", T);
	defparameter("*INCLUDE-MISCELLANEOUS-ON-FACT-SHEETS?*", T);
	defparameter("*OMITTED-FACT-SHEET-SENTENCES*", NIL);
	deflexical("*FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-PRED-ABOUTNESS-MAP*", fact_sheets.$list400);
	deflexical("*FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?-CACHING-STATE*", NIL);
	deflexical("*FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-TRANSITIVITY-CHECK-CACHING-STATE*", NIL);
	defparameter("*FACT-SHEET-QUERIES-BROWSABLE?*", NIL);
	deflexical("*FACT-SHEET-QUERY-SPEC-POOL*", stacks.create_stack());
	deflexical("*FACT-SHEET-QUERY-POLLING-INTERVAL*", fact_sheets.$float$0_5);
	deflexical("*FACT-SHEET-LABEL-FOR-CATEGORY-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-OPTIONAL-SECTION-START-COMMENT-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-OPTIONAL-SECTION-END-COMMENT-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-UNDER-CONSTRUCTION-CODE*", MINUS_ONE_INTEGER);
	deflexical("*STOP-FACT-SHEET-UPDATE-AFTER-CURRENT-TERM?*", NIL);
	deflexical("*FACT-SHEET-INACTIVITY-IMAGE-RESTART-DELAY*", multiply(fact_sheets.$int$60, fact_sheets.$int$60));
	defparameter("*FACT-SHEET-GENERATOR-UPDATE-DATE-AND-SECOND*", fact_sheets.$list539);
	deflexical("*FACT-SHEET-SCREENSAVER-USERS*", fact_sheets.$list618);
	deflexical("*FACT-SHEET-SCREENSAVERS*", SubLTrampolineFile.maybeDefault(fact_sheets.$fact_sheet_screensavers$, fact_sheets.$fact_sheet_screensavers$, NIL));
	deflexical("*FACT-SHEET-SCREENSAVERS-SHOULD-SLEEP?*", NIL);
	deflexical("*FACT-SHEET-SCREENSAVERS-SHOULD-DIE?*", NIL);
	defparameter("*FACT-SHEET-QUERY-SOFT-TIMEOUT-TIME*", NIL);
	defparameter("*FACT-SHEET-PARAPHRASE-SOFT-TIMEOUT-TIME*", NIL);
	deflexical("*FACT-SHEET-DIRECTORY-FROM-LIST-CACHING-STATE*", NIL);
	defconstant("*DTP-FACT-SHEET-UPDATE-TERM-PRIORITIZER*", fact_sheets.FACT_SHEET_UPDATE_TERM_PRIORITIZER);
	deflexical("*FACT-SHEET-UPDATE-TERM-PRIORITIZERS*", SubLTrampolineFile.maybeDefault(fact_sheets.$fact_sheet_update_term_prioritizers$, fact_sheets.$fact_sheet_update_term_prioritizers$, () -> dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED)));
	defparameter("*FSUT-PRIORITIZER-DEFAULT-NICE-LEVEL*", ZERO_INTEGER);
	deflexical("*FSUT-PRIORITIZER-MAX-NICE-LEVEL*", NINETEEN_INTEGER);
	deflexical("*FSUT-PRIORITIZER-MIN-NICE-LEVEL*", fact_sheets.$int$_20);
	defparameter("*FSUT-PRIORITIZER-DEFAULT-NEW-DAYS*", ZERO_INTEGER);
	deflexical("*FSUT-PRIORITIZER-DIVISOR*", $int$100);
	deflexical("*FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-STATUSES*", fact_sheets.$list727);
	deflexical("*FACT-SHEET-UPDATING-LOCK*", SubLTrampolineFile.maybeDefault(fact_sheets.$fact_sheet_updating_lock$, fact_sheets.$fact_sheet_updating_lock$, () -> make_lock(fact_sheets.$$$Fact_Sheet_Data_Update_Lock)));
	defvar("*FACT-SHEET-UPDATING-PROCESS-DICTIONARY*", dictionary.new_dictionary(EQUAL, UNPROVIDED));
	defparameter("*FACT-SHEET-LOOKASIDE-CACHE*", dictionary.new_dictionary(EQUAL, UNPROVIDED));
	defparameter("*PUBLIC-FACT-SHEET-PATH*", list_utilities.add_to_end(fact_sheets.$$$public, fact_sheets.fact_sheet_data_path()));
	deflexical("*PUBLIC-FACT-SHEET-AD-HTML*", fact_sheets.$str790$_script_type__text_javascript____);
	deflexical("*GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING-CACHING-STATE*", NIL);
	deflexical("*TERMS-FOR-PUBLIC-FACT-SHEETS-CACHING-STATE*", NIL);
	deflexical("*TYPES-FOR-PUBLIC-FACT-SHEETS-CACHING-STATE*", NIL);
	deflexical("*FACT-SHEET-TERM-STRINGS-CACHING-STATE*", NIL);
	deflexical("*GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS-CACHING-STATE*", NIL);
	defparameter("*INCYC-FACTSHEET-STAGING-DIRECTORY*", fact_sheets.$str826$_cyc_projects_inCyc_staging_area_);
	defparameter("*INCYC-SEARCHDATA-STAGING-FILE*", fact_sheets.$str827$_cyc_projects_inCyc_staging_area_);
	defparameter("*INCYC-SEARCHDATA-XML-FILE*", fact_sheets.$str828$_cyc_projects_inCyc_staging_area_);
	defparameter("*INCYC-SEARCHDATA-HTACCESS-FILE*", fact_sheets.$str829$_cyc_projects_inCyc_staging_area_);
	defparameter("*INCYC-SEARCHDATA-SQL-FILE*", fact_sheets.$str830$_cyc_projects_inCyc_staging_area_);
	deflexical("*PUBLIC-FACT-SHEET-PROPERTIES*", NIL);
	defparameter("*FS-TYPE*", NIL);
	deflexical("*CACHED-NUM-GAF-ARG-INDEX-CACHING-STATE*", NIL);
	return NIL;
    }

    public static final SubLObject setup_fact_sheets_file_alt() {
	register_external_symbol(ALLOW_FACT_SHEET_EVALUATIONS);
	removal_modules_indexical_referent.register_indexical_referent_expansion($$FactSheetTopicIndexical, INDEXICAL_FACT_SHEET_TOPIC);
	note_funcall_helper_function(INDEXICAL_FACT_SHEET_TOPIC);
	removal_modules_indexical_referent.register_indexical_referent_expansion($$FactSheetQueryContextIndexical, INDEXICAL_FACT_SHEET_QUERY_MT);
	note_funcall_helper_function(INDEXICAL_FACT_SHEET_QUERY_MT);
	removal_modules_indexical_referent.register_indexical_referent_expansion($$FactSheetTableTypeIndexical, INDEXICAL_FACT_SHEET_TABLE_TYPE);
	note_funcall_helper_function(INDEXICAL_FACT_SHEET_TABLE_TYPE);
	removal_modules_indexical_referent.register_indexical_referent_expansion($$FactSheetSentenceIndexical, INDEXICAL_FACT_SHEET_SENTENCE);
	note_funcall_helper_function(INDEXICAL_FACT_SHEET_SENTENCE);
	register_macro_helper(LOG_FACT_SHEET_MESSAGE, $list_alt37);
	register_macro_helper(PRINT_FACT_SHEET_LOG_HEADER, LOG_FACT_SHEET_MESSAGE);
	declare_defglobal($closed_fact_sheet_log_files$);
	memoization_state.note_globally_cached_function(GET_FACT_SHEET_LOG_DIRECTORY_DATA_CACHED);
	memoization_state.note_globally_cached_function(FACT_SHEET_DEFAULT_LANGUAGE_MT);
	memoization_state.note_globally_cached_function(BUILD_FACT_SHEET_DEFAULT_LANGUAGE_MT);
	memoization_state.note_globally_cached_function(FACT_SHEET_DEFAULT_DOMAIN_MT);
	memoization_state.note_globally_cached_function(BUILD_FACT_SHEET_DEFAULT_DOMAIN_MT);
	register_external_symbol(GET_FACT_SHEET_FOR_TERM_IN_XML_WITH_ONLY_KB_SPECIFIED_CONTENT);
	register_external_symbol(GET_FACT_SHEET_FOR_TERM_IN_HTML);
	memoization_state.note_memoized_function(FACT_SHEET_TABLE_TYPE_WIDTH);
	register_external_symbol(GET_FACT_SHEET_FOR_TERM_ID_IN_HTML);
	register_external_symbol(CLEAR_ALL_FACT_SHEET_CACHES);
	register_external_symbol(GET_POSSIBLE_FACT_SHEET_TERMS_MENTIONED_IN_STRING);
	memoization_state.note_globally_cached_function(SCALAR_INTERVAL_P);
	register_external_symbol(TERM_OK_FOR_FACT_SHEET_P);
	memoization_state.note_globally_cached_function(CONSTRUCT_FACT_SHEET_TERM_ID);
	register_external_symbol(FACT_SHEET_TERM_FROM_ID);
	register_external_symbol(FACT_SHEET_TERM_FROM_SPAN_ID);
	memoization_state.note_globally_cached_function(FACT_SHEET_SENTENCE_GROUP_SUMMARY);
	define_test_case_table_int(GET_TERM_AND_CLOSE_TAG_FROM_TOKEN, list(new SubLObject[] { $TEST, EQUAL, $OWNER, $$$daves, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), $list_alt464);
	memoization_state.note_globally_cached_function(FACT_SHEET_IMAGE_FILE_ROOT_URL);
	memoization_state.note_globally_cached_function(FACT_SHEET_IMAGE_URL_ROOT);
	memoization_state.note_globally_cached_function(GET_MINI_FACT_SHEET_FOR_TERM_CACHED);
	memoization_state.note_globally_cached_function(FACT_SHEET_SENTENCES_FOR_TERM_INTERNAL);
	memoization_state.note_globally_cached_function($sym568$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_);
	memoization_state.note_globally_cached_function(FACT_SHEET_TRANSITIVITY_CHECK);
	memoization_state.note_globally_cached_function(FACT_SHEET_LABEL_FOR_CATEGORY);
	memoization_state.note_globally_cached_function(FACT_SHEET_SENTENCE_TIME_INTERVAL_CACHED);
	memoization_state.note_memoized_function(FACT_SHEET_SENTENCE_PRECEDENCE_FOR_CATEGORY);
	memoization_state.note_globally_cached_function(FACT_SHEET_OPTIONAL_SECTION_START_COMMENT);
	memoization_state.note_globally_cached_function(FACT_SHEET_OPTIONAL_SECTION_END_COMMENT);
	register_external_symbol($sym631$TERM_HAS_PRECACHED_FACT_SHEET_);
	memoization_state.note_memoized_function(MTS_WITH_PRECACHED_FACT_SHEET_DATA_FOR_TERM);
	declare_defglobal($fact_sheet_screensavers$);
	memoization_state.note_globally_cached_function(FACT_SHEET_DIRECTORY_FROM_LIST);
	register_method($print_object_method_table$.getGlobalValue(), $dtp_fact_sheet_update_term_prioritizer$.getGlobalValue(), symbol_function(FACT_SHEET_UPDATE_TERM_PRIORITIZER_PRINT_FUNCTION_TRAMPOLINE));
	def_csetf(FSUT_PRIORITIZER_STALE_TERMS, _CSETF_FSUT_PRIORITIZER_STALE_TERMS);
	def_csetf(FSUT_PRIORITIZER_MISSING_TERMS, _CSETF_FSUT_PRIORITIZER_MISSING_TERMS);
	def_csetf(FSUT_PRIORITIZER_UP_TO_DATE_TERMS, _CSETF_FSUT_PRIORITIZER_UP_TO_DATE_TERMS);
	def_csetf(FSUT_PRIORITIZER_THREAD, _CSETF_FSUT_PRIORITIZER_THREAD);
	def_csetf($sym801$FSUT_PRIORITIZER_SHOULD_SLEEP_, $sym802$_CSETF_FSUT_PRIORITIZER_SHOULD_SLEEP_);
	def_csetf(FSUT_PRIORITIZER_VERBOSITY, _CSETF_FSUT_PRIORITIZER_VERBOSITY);
	def_csetf(FSUT_PRIORITIZER_DOMAIN_MT, _CSETF_FSUT_PRIORITIZER_DOMAIN_MT);
	def_csetf(FSUT_PRIORITIZER_LANGUAGE_MT, _CSETF_FSUT_PRIORITIZER_LANGUAGE_MT);
	def_csetf(FSUT_PRIORITIZER_NICE_LEVEL, _CSETF_FSUT_PRIORITIZER_NICE_LEVEL);
	def_csetf(FSUT_PRIORITIZER_NEW_DAYS, _CSETF_FSUT_PRIORITIZER_NEW_DAYS);
	identity(FACT_SHEET_UPDATE_TERM_PRIORITIZER);
	declare_defglobal($fact_sheet_update_term_prioritizers$);
	note_funcall_helper_function(FSUT_PRIORITIZER_QUEUE_RANK_FUNC);
	note_funcall_helper_function(FSUT_PRIORITIZER_QUEUE_COMP_FUNC);
	memoization_state.note_globally_cached_function(FSUT_PRIORITIZER_SLEEP_INTERVAL_FROM_NICE_LEVEL);
	html_macros.note_html_handler_function(CB_FACT_SHEET_EVALUATION);
	html_macros.note_html_handler_function(CB_HANDLE_FACT_SHEET_EVALUATION);
	declare_defglobal($fact_sheet_updating_lock$);
	memoization_state.note_globally_cached_function(GET_PUBLIC_FACT_SHEET_TERM_PARENT_DIRECTORY_STRING);
	memoization_state.note_globally_cached_function(TERMS_FOR_PUBLIC_FACT_SHEETS);
	memoization_state.note_globally_cached_function(TYPES_FOR_PUBLIC_FACT_SHEETS);
	memoization_state.note_globally_cached_function(FACT_SHEET_TERM_STRINGS);
	memoization_state.note_globally_cached_function(GET_PUBLIC_FACT_SHEET_STRING_URL_MAPPINGS);
	memoization_state.note_globally_cached_function(CACHED_NUM_GAF_ARG_INDEX);
	sunit_macros.$current_module_sunit_tests$.setDynamicValue(cons(FACT_SHEET_KITCHEN_SINK_TEST_CASE, sunit_macros.$current_module_sunit_tests$.getDynamicValue()));
	sunit_macros.define_test_case_preamble(FACT_SHEET_KITCHEN_SINK_TEST_CASE);
	classes.subloop_new_class(FACT_SHEET_KITCHEN_SINK_TEST_CASE, TEST_CASE, NIL, NIL, $list_alt1021);
	classes.class_set_implements_slot_listeners(FACT_SHEET_KITCHEN_SINK_TEST_CASE, NIL);
	classes.subloop_note_class_initialization_function(FACT_SHEET_KITCHEN_SINK_TEST_CASE, $sym1030$SUBLOOP_RESERVED_INITIALIZE_FACT_SHEET_KITCHEN_SINK_TEST_CASE_CLA);
	classes.subloop_note_instance_initialization_function(FACT_SHEET_KITCHEN_SINK_TEST_CASE, $sym1035$SUBLOOP_RESERVED_INITIALIZE_FACT_SHEET_KITCHEN_SINK_TEST_CASE_INS);
	com.cyc.cycjava.cycl.fact_sheets.subloop_reserved_initialize_fact_sheet_kitchen_sink_test_case_class(FACT_SHEET_KITCHEN_SINK_TEST_CASE);
	sunit_macros.define_test_case_postamble(FACT_SHEET_KITCHEN_SINK_TEST_CASE, $str_alt405$fact_sheets, $$$cycl, NIL);
	sunit_macros.def_test_method_register(FACT_SHEET_KITCHEN_SINK_TEST_CASE, MISSING_IMAGE_ROOT_TEST);
	sunit_macros.def_test_method_register(FACT_SHEET_KITCHEN_SINK_TEST_CASE, CREATE_FACT_SHEET_TEST);
	sunit_macros.def_test_method_register(FACT_SHEET_KITCHEN_SINK_TEST_CASE, GENERATE_TEXT_WITHIN_FACT_SHEET_PARAPHRASE_TEST);
	define_test_case_table_int($sym1041$FACT_SHEETS_TERM_FROM_STRING_CONTAINS_, list(new SubLObject[] { $TEST, NIL, $OWNER, $$$daves, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list_alt1043);
	return NIL;
    }

    public static SubLObject setup_fact_sheets_file() {
	if (SubLFiles.USE_V1) {
	    register_external_symbol(fact_sheets.ALLOW_FACT_SHEET_EVALUATIONS);
	    register_indexical_referent_expansion(fact_sheets.$$FactSheetQueryContextIndexical, fact_sheets.INDEXICAL_FACT_SHEET_QUERY_MT);
	    note_funcall_helper_function(fact_sheets.INDEXICAL_FACT_SHEET_QUERY_MT);
	    register_indexical_referent_expansion(fact_sheets.$$FactSheetTableTypeIndexical, fact_sheets.INDEXICAL_FACT_SHEET_TABLE_TYPE);
	    note_funcall_helper_function(fact_sheets.INDEXICAL_FACT_SHEET_TABLE_TYPE);
	    register_indexical_referent_expansion(fact_sheets.$$FactSheetSentenceIndexical, fact_sheets.INDEXICAL_FACT_SHEET_SENTENCE);
	    note_funcall_helper_function(fact_sheets.INDEXICAL_FACT_SHEET_SENTENCE);
	    register_indexical_referent_expansion(fact_sheets.$$FactSheetTopicIndexical, fact_sheets.INDEXICAL_FACT_SHEET_TOPIC);
	    note_funcall_helper_function(fact_sheets.INDEXICAL_FACT_SHEET_TOPIC);
	    memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_DEFAULT_LANGUAGE_MT);
	    memoization_state.note_globally_cached_function(fact_sheets.BUILD_FACT_SHEET_DEFAULT_LANGUAGE_MT);
	    memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_DEFAULT_DOMAIN_MT);
	    memoization_state.note_globally_cached_function(fact_sheets.BUILD_FACT_SHEET_DEFAULT_DOMAIN_MT);
	    register_external_symbol(fact_sheets.GET_FACT_SHEET_FOR_TERM_IN_XML_WITH_ONLY_KB_SPECIFIED_CONTENT);
	    register_external_symbol(fact_sheets.GET_FACT_SHEET_FOR_TERM_IN_HTML);
	    memoization_state.note_memoized_function(fact_sheets.FACT_SHEET_TABLE_TYPE_WIDTH);
	    register_external_symbol(fact_sheets.GET_FACT_SHEET_FOR_TERM_ID_IN_HTML);
	    register_external_symbol(fact_sheets.CLEAR_ALL_FACT_SHEET_CACHES);
	    register_external_symbol(fact_sheets.GET_POSSIBLE_FACT_SHEET_TERMS_MENTIONED_IN_STRING);
	    memoization_state.note_globally_cached_function(fact_sheets.SCALAR_INTERVAL_P);
	    register_external_symbol(fact_sheets.TERM_OK_FOR_FACT_SHEET_P);
	    memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_TERM_ID_LOW);
	    register_external_symbol(fact_sheets.FACT_SHEET_TERM_FROM_ID);
	    memoization_state.note_globally_cached_function(fact_sheets.WARN_UNKNOWN_FACT_SHEET_TERM_ID);
	    register_external_symbol(fact_sheets.FACT_SHEET_TERM_FROM_SPAN_ID);
	    memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_SENTENCE_GROUP_SUMMARY);
	    define_test_case_table_int(fact_sheets.GET_TERM_AND_CLOSE_TAG_FROM_TOKEN, list(new SubLObject[] { $TEST, EQUAL, $OWNER, NIL, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), fact_sheets.$list304);
	    memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_IMAGE_FILE_ROOT_URL);
	    memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_IMAGE_URL_ROOT);
	    memoization_state.note_globally_cached_function(fact_sheets.GET_MINI_FACT_SHEET_FOR_TERM_CACHED);
	    memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_SENTENCES_FOR_TERM_FROM_KBQ);
	    memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_SENTENCES_FOR_TERM_INTERNAL);
	    memoization_state.note_globally_cached_function(fact_sheets.$sym398$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_);
	    memoization_state.note_globally_cached_function(fact_sheets.$sym411$FACT_HIGHLY_PREVALENT_AMONG_INSTANCES__CACHED);
	    memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_TRANSITIVITY_CHECK);
	    memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_LABEL_FOR_CATEGORY);
	    memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_SENTENCE_TIME_INTERVAL_CACHED);
	    memoization_state.note_memoized_function(fact_sheets.FACT_SHEET_SENTENCE_PRECEDENCE_FOR_CATEGORY);
	    memoization_state.note_memoized_function(fact_sheets.FACT_SHEET_SENTENCE_COHERENCE);
	    memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_OPTIONAL_SECTION_START_COMMENT);
	    memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_OPTIONAL_SECTION_END_COMMENT);
	    register_external_symbol(fact_sheets.$sym486$TERM_HAS_PRECACHED_FACT_SHEET_);
	    memoization_state.note_memoized_function(fact_sheets.MTS_WITH_PRECACHED_FACT_SHEET_DATA_FOR_TERM);
	    declare_defglobal(fact_sheets.$fact_sheet_screensavers$);
	    memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_DIRECTORY_FROM_LIST);
	    register_method($print_object_method_table$.getGlobalValue(), fact_sheets.$dtp_fact_sheet_update_term_prioritizer$.getGlobalValue(), symbol_function(fact_sheets.FACT_SHEET_UPDATE_TERM_PRIORITIZER_PRINT_FUNCTION_TRAMPOLINE));
	    SubLSpecialOperatorDeclarations.proclaim(fact_sheets.$list663);
	    def_csetf(fact_sheets.FSUT_PRIORITIZER_STALE_TERMS, fact_sheets._CSETF_FSUT_PRIORITIZER_STALE_TERMS);
	    def_csetf(fact_sheets.FSUT_PRIORITIZER_MISSING_TERMS, fact_sheets._CSETF_FSUT_PRIORITIZER_MISSING_TERMS);
	    def_csetf(fact_sheets.FSUT_PRIORITIZER_UP_TO_DATE_TERMS, fact_sheets._CSETF_FSUT_PRIORITIZER_UP_TO_DATE_TERMS);
	    def_csetf(fact_sheets.FSUT_PRIORITIZER_THREAD, fact_sheets._CSETF_FSUT_PRIORITIZER_THREAD);
	    def_csetf(fact_sheets.$sym672$FSUT_PRIORITIZER_SHOULD_SLEEP_, fact_sheets.$sym673$_CSETF_FSUT_PRIORITIZER_SHOULD_SLEEP_);
	    def_csetf(fact_sheets.FSUT_PRIORITIZER_VERBOSITY, fact_sheets._CSETF_FSUT_PRIORITIZER_VERBOSITY);
	    def_csetf(fact_sheets.FSUT_PRIORITIZER_DOMAIN_MT, fact_sheets._CSETF_FSUT_PRIORITIZER_DOMAIN_MT);
	    def_csetf(fact_sheets.FSUT_PRIORITIZER_LANGUAGE_MT, fact_sheets._CSETF_FSUT_PRIORITIZER_LANGUAGE_MT);
	    def_csetf(fact_sheets.FSUT_PRIORITIZER_NICE_LEVEL, fact_sheets._CSETF_FSUT_PRIORITIZER_NICE_LEVEL);
	    def_csetf(fact_sheets.FSUT_PRIORITIZER_NEW_DAYS, fact_sheets._CSETF_FSUT_PRIORITIZER_NEW_DAYS);
	    identity(fact_sheets.FACT_SHEET_UPDATE_TERM_PRIORITIZER);
	    register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), fact_sheets.$dtp_fact_sheet_update_term_prioritizer$.getGlobalValue(), symbol_function(fact_sheets.VISIT_DEFSTRUCT_OBJECT_FACT_SHEET_UPDATE_TERM_PRIORITIZER_METHOD));
	    declare_defglobal(fact_sheets.$fact_sheet_update_term_prioritizers$);
	    note_funcall_helper_function(fact_sheets.FSUT_PRIORITIZER_QUEUE_RANK_FUNC);
	    note_funcall_helper_function(fact_sheets.FSUT_PRIORITIZER_QUEUE_COMP_FUNC);
	    memoization_state.note_globally_cached_function(fact_sheets.FSUT_PRIORITIZER_SLEEP_INTERVAL_FROM_NICE_LEVEL);
	    memoization_state.note_memoized_function(fact_sheets.PRED_ARGNUM_COMBOS_FOR_TERM);
	    html_macros.note_cgi_handler_function(fact_sheets.CB_FACT_SHEET_EVALUATION, $HTML_HANDLER);
	    html_macros.note_cgi_handler_function(fact_sheets.CB_HANDLE_FACT_SHEET_EVALUATION, $HTML_HANDLER);
	    declare_defglobal(fact_sheets.$fact_sheet_updating_lock$);
	    memoization_state.note_globally_cached_function(fact_sheets.GET_PUBLIC_FACT_SHEET_TERM_PARENT_DIRECTORY_STRING);
	    memoization_state.note_globally_cached_function(fact_sheets.TERMS_FOR_PUBLIC_FACT_SHEETS);
	    memoization_state.note_globally_cached_function(fact_sheets.TYPES_FOR_PUBLIC_FACT_SHEETS);
	    memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_TERM_STRINGS);
	    memoization_state.note_globally_cached_function(fact_sheets.GET_PUBLIC_FACT_SHEET_STRING_URL_MAPPINGS);
	    memoization_state.note_globally_cached_function(fact_sheets.CACHED_NUM_GAF_ARG_INDEX);
	    define_test_case_table_int(fact_sheets.$sym910$FACT_SHEETS_TERM_FROM_STRING_CONTAINS_, list(new SubLObject[] { $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), fact_sheets.$list911);
	}
	if (SubLFiles.USE_V2) {
	    register_macro_helper(LOG_FACT_SHEET_MESSAGE, $list_alt37);
	    register_macro_helper(PRINT_FACT_SHEET_LOG_HEADER, LOG_FACT_SHEET_MESSAGE);
	    declare_defglobal($closed_fact_sheet_log_files$);
	    memoization_state.note_globally_cached_function(GET_FACT_SHEET_LOG_DIRECTORY_DATA_CACHED);
	    memoization_state.note_globally_cached_function(CONSTRUCT_FACT_SHEET_TERM_ID);
	    define_test_case_table_int(GET_TERM_AND_CLOSE_TAG_FROM_TOKEN, list(new SubLObject[] { $TEST, EQUAL, $OWNER, $$$daves, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), $list_alt464);
	    memoization_state.note_globally_cached_function($sym568$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_);
	    register_external_symbol($sym631$TERM_HAS_PRECACHED_FACT_SHEET_);
	    def_csetf($sym801$FSUT_PRIORITIZER_SHOULD_SLEEP_, $sym802$_CSETF_FSUT_PRIORITIZER_SHOULD_SLEEP_);
	    html_macros.note_html_handler_function(CB_FACT_SHEET_EVALUATION);
	    html_macros.note_html_handler_function(CB_HANDLE_FACT_SHEET_EVALUATION);
	    sunit_macros.$current_module_sunit_tests$.setDynamicValue(cons(FACT_SHEET_KITCHEN_SINK_TEST_CASE, sunit_macros.$current_module_sunit_tests$.getDynamicValue()));
	    sunit_macros.define_test_case_preamble(FACT_SHEET_KITCHEN_SINK_TEST_CASE);
	    classes.subloop_new_class(FACT_SHEET_KITCHEN_SINK_TEST_CASE, TEST_CASE, NIL, NIL, $list_alt1021);
	    classes.class_set_implements_slot_listeners(FACT_SHEET_KITCHEN_SINK_TEST_CASE, NIL);
	    classes.subloop_note_class_initialization_function(FACT_SHEET_KITCHEN_SINK_TEST_CASE, $sym1030$SUBLOOP_RESERVED_INITIALIZE_FACT_SHEET_KITCHEN_SINK_TEST_CASE_CLA);
	    classes.subloop_note_instance_initialization_function(FACT_SHEET_KITCHEN_SINK_TEST_CASE, $sym1035$SUBLOOP_RESERVED_INITIALIZE_FACT_SHEET_KITCHEN_SINK_TEST_CASE_INS);
	    com.cyc.cycjava.cycl.fact_sheets.subloop_reserved_initialize_fact_sheet_kitchen_sink_test_case_class(FACT_SHEET_KITCHEN_SINK_TEST_CASE);
	    sunit_macros.define_test_case_postamble(FACT_SHEET_KITCHEN_SINK_TEST_CASE, $str_alt405$fact_sheets, $$$cycl, NIL);
	    sunit_macros.def_test_method_register(FACT_SHEET_KITCHEN_SINK_TEST_CASE, MISSING_IMAGE_ROOT_TEST);
	    sunit_macros.def_test_method_register(FACT_SHEET_KITCHEN_SINK_TEST_CASE, CREATE_FACT_SHEET_TEST);
	    sunit_macros.def_test_method_register(FACT_SHEET_KITCHEN_SINK_TEST_CASE, GENERATE_TEXT_WITHIN_FACT_SHEET_PARAPHRASE_TEST);
	    define_test_case_table_int($sym1041$FACT_SHEETS_TERM_FROM_STRING_CONTAINS_, list(new SubLObject[] { $TEST, NIL, $OWNER, $$$daves, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), $list_alt1043);
	}
	return NIL;
    }

    public static SubLObject setup_fact_sheets_file_Previous() {
	register_external_symbol(fact_sheets.ALLOW_FACT_SHEET_EVALUATIONS);
	register_indexical_referent_expansion(fact_sheets.$$FactSheetQueryContextIndexical, fact_sheets.INDEXICAL_FACT_SHEET_QUERY_MT);
	note_funcall_helper_function(fact_sheets.INDEXICAL_FACT_SHEET_QUERY_MT);
	register_indexical_referent_expansion(fact_sheets.$$FactSheetTableTypeIndexical, fact_sheets.INDEXICAL_FACT_SHEET_TABLE_TYPE);
	note_funcall_helper_function(fact_sheets.INDEXICAL_FACT_SHEET_TABLE_TYPE);
	register_indexical_referent_expansion(fact_sheets.$$FactSheetSentenceIndexical, fact_sheets.INDEXICAL_FACT_SHEET_SENTENCE);
	note_funcall_helper_function(fact_sheets.INDEXICAL_FACT_SHEET_SENTENCE);
	register_indexical_referent_expansion(fact_sheets.$$FactSheetTopicIndexical, fact_sheets.INDEXICAL_FACT_SHEET_TOPIC);
	note_funcall_helper_function(fact_sheets.INDEXICAL_FACT_SHEET_TOPIC);
	memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_DEFAULT_LANGUAGE_MT);
	memoization_state.note_globally_cached_function(fact_sheets.BUILD_FACT_SHEET_DEFAULT_LANGUAGE_MT);
	memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_DEFAULT_DOMAIN_MT);
	memoization_state.note_globally_cached_function(fact_sheets.BUILD_FACT_SHEET_DEFAULT_DOMAIN_MT);
	register_external_symbol(fact_sheets.GET_FACT_SHEET_FOR_TERM_IN_XML_WITH_ONLY_KB_SPECIFIED_CONTENT);
	register_external_symbol(fact_sheets.GET_FACT_SHEET_FOR_TERM_IN_HTML);
	memoization_state.note_memoized_function(fact_sheets.FACT_SHEET_TABLE_TYPE_WIDTH);
	register_external_symbol(fact_sheets.GET_FACT_SHEET_FOR_TERM_ID_IN_HTML);
	register_external_symbol(fact_sheets.CLEAR_ALL_FACT_SHEET_CACHES);
	register_external_symbol(fact_sheets.GET_POSSIBLE_FACT_SHEET_TERMS_MENTIONED_IN_STRING);
	memoization_state.note_globally_cached_function(fact_sheets.SCALAR_INTERVAL_P);
	register_external_symbol(fact_sheets.TERM_OK_FOR_FACT_SHEET_P);
	memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_TERM_ID_LOW);
	register_external_symbol(fact_sheets.FACT_SHEET_TERM_FROM_ID);
	memoization_state.note_globally_cached_function(fact_sheets.WARN_UNKNOWN_FACT_SHEET_TERM_ID);
	register_external_symbol(fact_sheets.FACT_SHEET_TERM_FROM_SPAN_ID);
	memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_SENTENCE_GROUP_SUMMARY);
	define_test_case_table_int(fact_sheets.GET_TERM_AND_CLOSE_TAG_FROM_TOKEN, list(new SubLObject[] { $TEST, EQUAL, $OWNER, NIL, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), fact_sheets.$list304);
	memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_IMAGE_FILE_ROOT_URL);
	memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_IMAGE_URL_ROOT);
	memoization_state.note_globally_cached_function(fact_sheets.GET_MINI_FACT_SHEET_FOR_TERM_CACHED);
	memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_SENTENCES_FOR_TERM_FROM_KBQ);
	memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_SENTENCES_FOR_TERM_INTERNAL);
	memoization_state.note_globally_cached_function(fact_sheets.$sym398$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_);
	memoization_state.note_globally_cached_function(fact_sheets.$sym411$FACT_HIGHLY_PREVALENT_AMONG_INSTANCES__CACHED);
	memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_TRANSITIVITY_CHECK);
	memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_LABEL_FOR_CATEGORY);
	memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_SENTENCE_TIME_INTERVAL_CACHED);
	memoization_state.note_memoized_function(fact_sheets.FACT_SHEET_SENTENCE_PRECEDENCE_FOR_CATEGORY);
	memoization_state.note_memoized_function(fact_sheets.FACT_SHEET_SENTENCE_COHERENCE);
	memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_OPTIONAL_SECTION_START_COMMENT);
	memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_OPTIONAL_SECTION_END_COMMENT);
	register_external_symbol(fact_sheets.$sym486$TERM_HAS_PRECACHED_FACT_SHEET_);
	memoization_state.note_memoized_function(fact_sheets.MTS_WITH_PRECACHED_FACT_SHEET_DATA_FOR_TERM);
	declare_defglobal(fact_sheets.$fact_sheet_screensavers$);
	memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_DIRECTORY_FROM_LIST);
	register_method($print_object_method_table$.getGlobalValue(), fact_sheets.$dtp_fact_sheet_update_term_prioritizer$.getGlobalValue(), symbol_function(fact_sheets.FACT_SHEET_UPDATE_TERM_PRIORITIZER_PRINT_FUNCTION_TRAMPOLINE));
	SubLSpecialOperatorDeclarations.proclaim(fact_sheets.$list663);
	def_csetf(fact_sheets.FSUT_PRIORITIZER_STALE_TERMS, fact_sheets._CSETF_FSUT_PRIORITIZER_STALE_TERMS);
	def_csetf(fact_sheets.FSUT_PRIORITIZER_MISSING_TERMS, fact_sheets._CSETF_FSUT_PRIORITIZER_MISSING_TERMS);
	def_csetf(fact_sheets.FSUT_PRIORITIZER_UP_TO_DATE_TERMS, fact_sheets._CSETF_FSUT_PRIORITIZER_UP_TO_DATE_TERMS);
	def_csetf(fact_sheets.FSUT_PRIORITIZER_THREAD, fact_sheets._CSETF_FSUT_PRIORITIZER_THREAD);
	def_csetf(fact_sheets.$sym672$FSUT_PRIORITIZER_SHOULD_SLEEP_, fact_sheets.$sym673$_CSETF_FSUT_PRIORITIZER_SHOULD_SLEEP_);
	def_csetf(fact_sheets.FSUT_PRIORITIZER_VERBOSITY, fact_sheets._CSETF_FSUT_PRIORITIZER_VERBOSITY);
	def_csetf(fact_sheets.FSUT_PRIORITIZER_DOMAIN_MT, fact_sheets._CSETF_FSUT_PRIORITIZER_DOMAIN_MT);
	def_csetf(fact_sheets.FSUT_PRIORITIZER_LANGUAGE_MT, fact_sheets._CSETF_FSUT_PRIORITIZER_LANGUAGE_MT);
	def_csetf(fact_sheets.FSUT_PRIORITIZER_NICE_LEVEL, fact_sheets._CSETF_FSUT_PRIORITIZER_NICE_LEVEL);
	def_csetf(fact_sheets.FSUT_PRIORITIZER_NEW_DAYS, fact_sheets._CSETF_FSUT_PRIORITIZER_NEW_DAYS);
	identity(fact_sheets.FACT_SHEET_UPDATE_TERM_PRIORITIZER);
	register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), fact_sheets.$dtp_fact_sheet_update_term_prioritizer$.getGlobalValue(), symbol_function(fact_sheets.VISIT_DEFSTRUCT_OBJECT_FACT_SHEET_UPDATE_TERM_PRIORITIZER_METHOD));
	declare_defglobal(fact_sheets.$fact_sheet_update_term_prioritizers$);
	note_funcall_helper_function(fact_sheets.FSUT_PRIORITIZER_QUEUE_RANK_FUNC);
	note_funcall_helper_function(fact_sheets.FSUT_PRIORITIZER_QUEUE_COMP_FUNC);
	memoization_state.note_globally_cached_function(fact_sheets.FSUT_PRIORITIZER_SLEEP_INTERVAL_FROM_NICE_LEVEL);
	memoization_state.note_memoized_function(fact_sheets.PRED_ARGNUM_COMBOS_FOR_TERM);
	html_macros.note_cgi_handler_function(fact_sheets.CB_FACT_SHEET_EVALUATION, $HTML_HANDLER);
	html_macros.note_cgi_handler_function(fact_sheets.CB_HANDLE_FACT_SHEET_EVALUATION, $HTML_HANDLER);
	declare_defglobal(fact_sheets.$fact_sheet_updating_lock$);
	memoization_state.note_globally_cached_function(fact_sheets.GET_PUBLIC_FACT_SHEET_TERM_PARENT_DIRECTORY_STRING);
	memoization_state.note_globally_cached_function(fact_sheets.TERMS_FOR_PUBLIC_FACT_SHEETS);
	memoization_state.note_globally_cached_function(fact_sheets.TYPES_FOR_PUBLIC_FACT_SHEETS);
	memoization_state.note_globally_cached_function(fact_sheets.FACT_SHEET_TERM_STRINGS);
	memoization_state.note_globally_cached_function(fact_sheets.GET_PUBLIC_FACT_SHEET_STRING_URL_MAPPINGS);
	memoization_state.note_globally_cached_function(fact_sheets.CACHED_NUM_GAF_ARG_INDEX);
	define_test_case_table_int(fact_sheets.$sym910$FACT_SHEETS_TERM_FROM_STRING_CONTAINS_, list(new SubLObject[] { $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $FULL, $WORKING_, T }), fact_sheets.$list911);
	return NIL;
    }

    @Override
    public void declareFunctions() {
	fact_sheets.declare_fact_sheets_file();
    }

    @Override
    public void initializeVariables() {
	fact_sheets.init_fact_sheets_file();
    }

    @Override
    public void runTopLevelForms() {
	fact_sheets.setup_fact_sheets_file();
    }

    static {
    }

    public static final class $fact_sheet_update_term_prioritizer_native extends SubLStructNative {
	public SubLObject $stale_terms;

	public SubLObject $missing_terms;

	public SubLObject $up_to_date_terms;

	public SubLObject $thread;

	public SubLObject $should_sleepP;

	public SubLObject $verbosity;

	public SubLObject $domain_mt;

	public SubLObject $language_mt;

	public SubLObject $nice_level;

	public SubLObject $new_days;

	private static final SubLStructDeclNative structDecl;

	public $fact_sheet_update_term_prioritizer_native() {
	    fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$stale_terms = Lisp.NIL;
	    fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$missing_terms = Lisp.NIL;
	    fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$up_to_date_terms = Lisp.NIL;
	    fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$thread = Lisp.NIL;
	    fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$should_sleepP = Lisp.NIL;
	    fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$verbosity = Lisp.NIL;
	    fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$domain_mt = Lisp.NIL;
	    fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$language_mt = Lisp.NIL;
	    fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$nice_level = Lisp.NIL;
	    fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$new_days = Lisp.NIL;
	}

	@Override
	public SubLStructDecl getStructDecl() {
	    return structDecl;
	}

	@Override
	public SubLObject getField2() {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$stale_terms;
	}

	@Override
	public SubLObject getField3() {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$missing_terms;
	}

	@Override
	public SubLObject getField4() {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$up_to_date_terms;
	}

	@Override
	public SubLObject getField5() {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$thread;
	}

	@Override
	public SubLObject getField6() {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$should_sleepP;
	}

	@Override
	public SubLObject getField7() {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$verbosity;
	}

	@Override
	public SubLObject getField8() {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$domain_mt;
	}

	@Override
	public SubLObject getField9() {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$language_mt;
	}

	@Override
	public SubLObject getField10() {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$nice_level;
	}

	@Override
	public SubLObject getField11() {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$new_days;
	}

	@Override
	public SubLObject setField2(final SubLObject value) {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$stale_terms = value;
	}

	@Override
	public SubLObject setField3(final SubLObject value) {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$missing_terms = value;
	}

	@Override
	public SubLObject setField4(final SubLObject value) {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$up_to_date_terms = value;
	}

	@Override
	public SubLObject setField5(final SubLObject value) {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$thread = value;
	}

	@Override
	public SubLObject setField6(final SubLObject value) {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$should_sleepP = value;
	}

	@Override
	public SubLObject setField7(final SubLObject value) {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$verbosity = value;
	}

	@Override
	public SubLObject setField8(final SubLObject value) {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$domain_mt = value;
	}

	@Override
	public SubLObject setField9(final SubLObject value) {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$language_mt = value;
	}

	@Override
	public SubLObject setField10(final SubLObject value) {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$nice_level = value;
	}

	@Override
	public SubLObject setField11(final SubLObject value) {
	    return fact_sheets.$fact_sheet_update_term_prioritizer_native.this.$new_days = value;
	}

	static {
	    structDecl = makeStructDeclNative(com.cyc.cycjava.cycl.fact_sheets.$fact_sheet_update_term_prioritizer_native.class, fact_sheets.FACT_SHEET_UPDATE_TERM_PRIORITIZER, fact_sheets.FACT_SHEET_UPDATE_TERM_PRIORITIZER_P, fact_sheets.$list657, fact_sheets.$list658,
		    new String[] { "$stale_terms", "$missing_terms", "$up_to_date_terms", "$thread", "$should_sleepP", "$verbosity", "$domain_mt", "$language_mt", "$nice_level", "$new_days" }, fact_sheets.$list659, fact_sheets.$list660, fact_sheets.PPRINT_FSUT_PRIORITIZER);
	}
    }

    public static final class $fact_sheet_update_term_prioritizer_p$UnaryFunction extends UnaryFunction {
	public $fact_sheet_update_term_prioritizer_p$UnaryFunction() {
	    super(extractFunctionNamed("FACT-SHEET-UPDATE-TERM-PRIORITIZER-P"));
	}

	@Override
	public SubLObject processItem(final SubLObject arg1) {
	    return fact_sheets.fact_sheet_update_term_prioritizer_p(arg1);
	}
    }

    // Internal Constants
    @LispMethod(comment = "Internal Constants")
    static private final SubLList $list_alt0 = list(makeString("application.cae.allow-fact-sheet-evaluations?"));

    static private final SubLList $list_alt4 = list(list(makeSymbol("*ALLOW-FACT-SHEET-EVALUATIONS?*"), ONE_INTEGER));

    static private final SubLList $list_alt5 = list(list(makeSymbol("*ALLOW-FACT-SHEET-EVALUATIONS?*"), ZERO_INTEGER));

    static private final SubLList $list_alt7 = list(makeString("application.cae.fact-sheet-eval-log-file"));

    static private final SubLString $str_alt9$_cyc_projects_aquaint_ginko_metri = makeString("/cyc/projects/aquaint/ginko/metrics/fact-sheets/factsheet-eval-log.txt");

    static private final SubLList $list_alt18 = list(list(makeSymbol("PROBLEM-STORE-VAR")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLList $list_alt22 = list(list(makeSymbol("NEW-PROBLEM-STORE")));

    static private final SubLList $list_alt24 = list(makeSymbol("FACT-SHEET-QUERIES-BROWSABLE?"));

    static private final SubLList $list_alt26 = list(makeSymbol("FOCAL-TERM"), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLList $list_alt27 = list(list(makeSymbol("*WITHIN-FACT-SHEET-PARAPHRASE?*"), T));

    static private final SubLList $list_alt30 = list(makeKeyword("FACT-SHEET"), NIL);

    static private final SubLList $list_alt32 = list(list(QUOTE, makeSymbol("FACT-SHEET-TERM-ID")));

    static private final SubLList $list_alt34 = list(makeKeyword("UNKNOWN"), makeKeyword("UNKNOWN"));

    static private final SubLList $list_alt35 = list(list(makeSymbol("*FACT-SHEET-LOG-STREAM*"), makeSymbol("*NULL-OUTPUT*")));

    private static final SubLSymbol LOG_FACT_SHEET_MESSAGE = makeSymbol("LOG-FACT-SHEET-MESSAGE");

    static private final SubLList $list_alt37 = list(makeSymbol("LOG-FACT-SHEET-WARNING"), makeSymbol("LOG-FACT-SHEET-NOTE"));

    static private final SubLList $list_alt38 = list(makeSymbol("MSG-TYPE"), makeSymbol("FORMAT-STR"), makeSymbol("&REST"), makeSymbol("ARGS"));

    static private final SubLSymbol $sym39$STREAM = makeUninternedSymbol("STREAM");

    static private final SubLList $list_alt40 = list(makeSymbol("*FACT-SHEET-LOG-STREAM*"));

    static private final SubLList $list_alt44 = list(list(EQ, list(makeSymbol("CURRENT-PROCESS")), list(makeSymbol("INITIAL-PROCESS"))));

    private static final SubLSymbol PRINT_FACT_SHEET_LOG_HEADER = makeSymbol("PRINT-FACT-SHEET-LOG-HEADER");

    static private final SubLString $str_alt50$_ = makeString(" ");

    static private final SubLString $str_alt51$__ = makeString(": ");

    static private final SubLList $list_alt52 = list(makeSymbol("FORMAT-STR"), makeSymbol("&REST"), makeSymbol("ARGS"));

    static private final SubLList $list_alt55 = list(list(makeSymbol("FILENAME")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLList $list_alt58 = list(makeSymbol("*FACT-SHEET-LOG-STREAM*"), makeSymbol("*FACT-SHEET-LOG-FILE*"), makeKeyword("APPEND"));

    static private final SubLSymbol $sym59$DIRECTORY = makeUninternedSymbol("DIRECTORY");

    static private final SubLSymbol $sym60$FILENAME = makeUninternedSymbol("FILENAME");

    static private final SubLSymbol $sym61$ALREADY_LOGGING_ = makeUninternedSymbol("ALREADY-LOGGING?");

    static private final SubLSymbol $sym62$USE_NEW_SETUP_ = makeUninternedSymbol("USE-NEW-SETUP?");

    static private final SubLList $list_alt63 = list(list(makeSymbol("STRINGP"), makeSymbol("*FACT-SHEET-LOG-FILE*")));

    static private final SubLList $list_alt65 = list(list(makeSymbol("OPEN-NEW-UNIQUE-FACT-SHEET-LOG-FILE")));

    static private final SubLString $str_alt69$__Logging_Fact_Sheet_generation_t = makeString("~&Logging Fact-Sheet generation to file:~% ~S~%");

    static private final SubLList $list_alt70 = list(list(makeSymbol("FORCE-OUTPUT"), makeSymbol("*STANDARD-OUTPUT*")));

    private static final SubLSymbol WITH_FACT_SHEET_LOG_FILE = makeSymbol("WITH-FACT-SHEET-LOG-FILE");

    static private final SubLList $list_alt73 = list(makeSymbol("*FACT-SHEET-LOG-FILE*"));

    static private final SubLList $list_alt74 = list(list(makeSymbol("LOG-FACT-SHEET-NOTE"), makeString("Closing log.")), list(makeSymbol("NOTE-FACT-SHEET-LOG-FILE-CLOSED")));

    private static final SubLSymbol WITH_FACT_SHEET_LOGGING = makeSymbol("WITH-FACT-SHEET-LOGGING");

    static private final SubLList $list_alt77 = list(list(makeSymbol("*NEXT-FACT-SHEET-HOURLY-REPORT-TIME*")), list(makeSymbol("*HOURLY-FACT-SHEET-STATS*"), list(makeSymbol("MAKE-VECTOR"), TWO_INTEGER, ZERO_INTEGER)));

    static private final SubLList $list_alt78 = list(makeSymbol("RESET-HOURLY-REPORT-TIME"));

    static private final SubLString $str_alt79$Hourly_report__Generated__S_fact_ = makeString("Hourly report: Generated ~S fact sheets. Suffered ~S query timeouts.");

    static private final SubLString $str_alt80$Counting_fact_sheets_in_ = makeString("Counting fact sheets in ");

    static private final SubLString $str_alt81$Gathering_time_info_for_fact_shee = makeString("Gathering time info for fact sheets in ");

    static private final SubLList $list_alt83 = cons(makeSymbol("DATE-STRING"), makeSymbol("COUNT"));

    static private final SubLSymbol $sym84$DATESTRING_ = makeSymbol("DATESTRING<");

    private static final SubLSymbol $XDATA = makeKeyword("XDATA");

    static private final SubLString $$$time = makeString("time");

    private static final SubLSymbol $TIMEFMT = makeKeyword("TIMEFMT");

    static private final SubLString $str_alt88$__m__d__Y_ = makeString("\"%m/%d/%Y\"");

    static private final SubLString $$$Date = makeString("Date");

    static private final SubLString $str_alt92$__of_Fact_Sheets = makeString("# of Fact Sheets");

    static private final SubLList $list_alt95 = list(makeString("Fact Sheets per Day"));

    static private final SubLString $str_alt97$Categorizing_fact_sheets_in_ = makeString("Categorizing fact sheets in ");

    static private final SubLString $str_alt98$_by_date = makeString(" by date");

    private static final SubLSymbol $END_DATE = makeKeyword("END-DATE");

    static private final SubLString $str_alt100$Analyzing_fact_sheet_times_in_ = makeString("Analyzing fact sheet times in ");

    static private final SubLString $str_alt101$Analyzing_fact_sheet_categorizati = makeString("Analyzing fact sheet categorization in ");

    private static final SubLSymbol $CATEGORY_COUNT = makeKeyword("CATEGORY-COUNT");

    static private final SubLString $str_alt103$Analyzing_fact_sheet_sentence_cou = makeString("Analyzing fact sheet sentence count in ");

    private static final SubLSymbol $PPH_SENTENCE_COUNT = makeKeyword("PPH-SENTENCE-COUNT");

    static private final SubLString $str_alt105$Analyzing_fact_sheet_uncategorize = makeString("Analyzing fact sheet uncategorized sentence count in ");

    private static final SubLSymbol $MISC_SENTENCE_COUNT = makeKeyword("MISC-SENTENCE-COUNT");

    static private final SubLList $list_alt107 = cons(makeSymbol("DATE-STRING"), makeSymbol("FAILURES"));

    static private final SubLSymbol $sym108$_ = makeSymbol(">");

    static private final SubLList $list_alt109 = list(makeSymbol("DATE-STRING"), makeSymbol("FAILURES"));

    static private final SubLString $$$Failure_Rate = makeString("Failure Rate");

    static private final SubLString $$$Query_Failure_Rates_by_Day = makeString("Query Failure Rates by Day");

    static private final SubLString $str_alt112$Analyzing_query_failure_rates_in_ = makeString("Analyzing query failure rates in ");

    static private final SubLList $list_alt113 = cons(makeSymbol("DATE-STRING"), makeSymbol("INFO-CONS"));

    static private final SubLList $list_alt114 = cons(makeSymbol("TOTAL-COUNT"), makeSymbol("QUERY-FAILURE-DICTIONARY"));

    private static final SubLSymbol $QUERY_TIMEOUT_INFO = makeKeyword("QUERY-TIMEOUT-INFO");

    static private final SubLString $str_alt120$_generated_on_ = makeString(" generated on ");

    static private final SubLString $$$Finished_fact_sheet = makeString("Finished fact sheet");

    static private final SubLString $str_alt122$____Finished_fact_sheet = makeString(" .* Finished fact sheet");

    static private final SubLList $list_alt123 = list(new SubLObject[] { makeKeyword("VERBOSITY"), $TERM, makeKeyword("STATUS"), makeKeyword("START-DATE"), makeKeyword("START-TIME"), makeKeyword("END-DATE"), makeKeyword("END-TIME"), makeKeyword("QUERY-TIMEOUTS"),
	    makeKeyword("QUERY-TIMEOUT-INFO"), makeKeyword("MISC-SENTENCE-COUNT"), makeKeyword("MISC-SENTENCE-TIME"), makeKeyword("FILTERED-REDUNDANT-FACT-COUNT"), makeKeyword("CATEGORY-COUNT"), makeKeyword("INFO-GATHERING-TIME"), makeKeyword("PPH-PARAGRAPH-COUNT"),
	    makeKeyword("PPH-SENTENCE-COUNT"), makeKeyword("PPH-FAILURE-COUNT"), makeKeyword("PPH-TIME"), makeKeyword("TOTAL-TIME") });

    private static final SubLSymbol GET_FACT_SHEET_LOG_DIRECTORY_DATA_CACHED = makeSymbol("GET-FACT-SHEET-LOG-DIRECTORY-DATA-CACHED");

    public static final SubLSymbol $kw127$_MEMOIZED_ITEM_NOT_FOUND_ = makeKeyword("&MEMOIZED-ITEM-NOT-FOUND&");

    static private final SubLString $str_alt128$Ensuring_data_file_is_up_to_date_ = makeString("Ensuring data file is up to date...");

    static private final SubLString $str_alt129$_log = makeString(".log");

    static private final SubLString $str_alt130$Parsing_data_from_ = makeString("Parsing data from ");

    static private final SubLString $str_alt131$___ = makeString("...");

    static private final SubLSymbol $sym132$FILE_EXISTS_ = makeSymbol("FILE-EXISTS?");

    static private final SubLString $str_alt134$parsed_data_cfasl = makeString("parsed-data.cfasl");

    static private final SubLString $str_alt135$MM_DD_YYYY_HH_MM_SS_ = makeString("MM/DD/YYYY HH:MM:SS ");

    static private final SubLString $str_alt137$Unable_to_open__S = makeString("Unable to open ~S");

    static private final SubLString $str_alt138$NOTE__Starting__ = makeString("NOTE: Starting :");

    private static final SubLSymbol $PARSING_DATUM = makeKeyword("PARSING-DATUM");

    static private final SubLString $str_alt140$_Verbosity__ = makeString(" Verbosity: ");

    static private final SubLString $str_alt141$NOTE__Dequeuing_ = makeString("NOTE: Dequeuing ");

    private static final SubLSymbol $DEQUEUED_TERM = makeKeyword("DEQUEUED-TERM");

    static private final SubLString $str_alt143$NOTE__Skipping_ = makeString("NOTE: Skipping ");

    static private final SubLString $str_alt144$NOTE__Updating_ = makeString("NOTE: Updating ");

    static private final SubLString $str_alt145$NOTE__Updating_all_stale_fact_she = makeString("NOTE: Updating all stale fact sheets from ");

    static private final SubLString $str_alt146$NOTE__Updating_stale_fact_sheet_f = makeString("NOTE: Updating stale fact sheet for ");

    static private final SubLString $str_alt147$WARN__Hit_soft_timeout_of_ = makeString("WARN: Hit soft timeout of ");

    private static final SubLSymbol $QUERY_TIMEOUTS = makeKeyword("QUERY-TIMEOUTS");

    private static final SubLSymbol $HIT_QUERY_TIMEOUT = makeKeyword("HIT-QUERY-TIMEOUT");

    static private final SubLString $str_alt151$NOTE__ = makeString("NOTE: ");

    private static final SubLSymbol $LOOKING_FOR_TIMED_OUT_QUERY_YIELD = makeKeyword("LOOKING-FOR-TIMED-OUT-QUERY-YIELD");

    static private final SubLString $str_alt153$_yielded_ = makeString(" yielded ");

    private static final SubLSymbol $PARAGRAPH_COUNT = makeKeyword("PARAGRAPH-COUNT");

    static private final SubLString $str_alt155$WARN__Launching_make_up_updater = makeString("WARN: Launching make-up updater");

    static private final SubLString $str_alt156$We_appear_to_have_aborted_the_fac = makeString("We appear to have aborted the fact-sheet generation for~% ~S (launched make-up updater)~% ~S");

    static private final SubLString $str_alt158$NOTE__Added_ = makeString("NOTE: Added ");

    static private final SubLString $str_alt159$NOTE__Gathered_ = makeString("NOTE: Gathered ");

    static private final SubLString $str_alt160$_implies_ = makeString(" implies ");

    private static final SubLSymbol $FILTERED_REDUNDANT_FACT_COUNT = makeKeyword("FILTERED-REDUNDANT-FACT-COUNT");

    static private final SubLString $str_alt162$NOTE__Generated_ = makeString("NOTE: Generated ");

    static private final SubLString $str_alt163$WARN__Failed_to_paraphrase_ = makeString("WARN: Failed to paraphrase ");

    static private final SubLString $str_alt164$WARN__Query_failed_to_get_mini_fa = makeString("WARN: Query failed to get mini fact sheet for ");

    static private final SubLString $str_alt165$NOTE__Query_got_mini_fact_sheet_o = makeString("NOTE: Query got mini fact sheet of length 120 for ");

    static private final SubLString $str_alt166$NOTE__Finished_fact_sheet_for_ = makeString("NOTE: Finished fact sheet for ");

    static private final SubLString $str_alt167$Found_finish_line__but_state_is__ = makeString("Found finish line, but state is ~S~% Current datum: ~S~%~S~%~S");

    static private final SubLString $str_alt168$We_appear_to_have_aborted_the_fac = makeString("We appear to have aborted the fact-sheet generation for~% ~S (end of log file)~% ~S");

    static private final SubLString $str_alt170$update_on_ = makeString("update on ");

    static private final SubLString $str_alt171$__Status = makeString(". Status");

    static private final SubLString $str_alt172$__Status__ = makeString(". Status: ");

    private static final SubLSymbol $START_DATE = makeKeyword("START-DATE");

    private static final SubLSymbol $TIMEOUT_TIME = makeKeyword("TIMEOUT-TIME");

    static private final SubLString $$$seconds_after_getting = makeString("seconds after getting");

    private static final SubLSymbol $RESULT_COUNT = makeKeyword("RESULT-COUNT");

    static private final SubLString $$$THCL_sentences_in = makeString("THCL sentences in");

    private static final SubLSymbol $MISC_SENTENCE_TIME = makeKeyword("MISC-SENTENCE-TIME");

    private static final SubLSymbol $PPH_PARAGRAPH_COUNT = makeKeyword("PPH-PARAGRAPH-COUNT");

    static private final SubLString $str_alt184$paragraphs_containing_ = makeString("paragraphs containing ");

    static private final SubLString $str_alt185$sentences_for_ = makeString("sentences for ");

    static private final SubLString $str_alt186$Must_have_missed_the__Finished__l = makeString("Must have missed the 'Finished' line for ~S");

    static private final SubLString $str_alt187$_in_ = makeString(" in ");

    private static final SubLSymbol $PPH_TIME = makeKeyword("PPH-TIME");

    private static final SubLSymbol $PPH_FAILURE_COUNT = makeKeyword("PPH-FAILURE-COUNT");

    static private final SubLString $str_alt190$groups_of_sentences_for_ = makeString("groups of sentences for ");

    private static final SubLSymbol $INFO_GATHERING_TIME = makeKeyword("INFO-GATHERING-TIME");

    static private final SubLString $str_alt193$___ = makeString("#<(");

    static private final SubLString $str_alt194$__ = makeString("#<");

    static private final SubLString $str_alt195$Couldn_t_determine_term_from__S = makeString("Couldn't determine term from ~S");

    static private final SubLString $str_alt196$fact_sheet_log_file_uniquifier_lo = makeString("fact-sheet-log-file-uniquifier-lock");

    static private final SubLString $str_alt197$_ = makeString("-");

    static private final SubLString $$$0775 = makeString("0775");

    static private final SubLString $$$logs = makeString("logs");

    static private final SubLString $str_alt200$_5__0D = makeString("~5,'0D");

    static private final SubLString $str_alt202$Opening_log_ = makeString("Opening log.");

    static private final SubLString $$$755 = makeString("755");

    private static final SubLSymbol LIST_OF_STRING_P = makeSymbol("LIST-OF-STRING-P");

    static private final SubLString $str_alt205$_ = makeString("/");

    static private final SubLList $list_alt206 = list(list(makeSymbol("TERM")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLList $list_alt209 = list(list(makeSymbol("FILENAME"), makeSymbol("STREAM"), makeSymbol("ERROR-MESSAGE-VAR")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLList $list_alt211 = list(makeSymbol("*CATCH-FACT-SHEET-ERRORS?*"));

    static private final SubLList $list_alt213 = list(makeKeyword("OUTPUT"));

    static private final SubLList $list_alt217 = list(makeString("664"));

    static private final SubLString $str_alt220$Cannot_open__A = makeString("Cannot open ~A");

    static private final SubLList $list_alt221 = list(makeKeyword("INPUT"));

    static private final SubLString $str_alt244$fact_sheet_sentence = makeString("fact-sheet-sentence");

    static private final SubLString $str_alt245$_span_id__ = makeString("<span id='");

    static private final SubLString $str_alt246$__class__fact_sheet_sentence__ = makeString("' class='fact-sheet-sentence'>");

    static private final SubLString $str_alt247$__span_ = makeString("</span>");

    static private final SubLList $list_alt251 = list(makeSymbol("DATA"), makeSymbol("STATS"), makeSymbol("FOOTNOTES"), makeSymbol("FORMATTING-GUIDELINES"));

    static private final SubLList $list_alt256 = list(makeString("Miscellaneous"));

    static private final SubLList $list_alt259 = list(new SubLObject[] { makeKeyword("DISPLAY-TITLE?"), NIL, makeKeyword("PRINT-STATS?"), T, makeKeyword("SHOW-COPYRIGHT?"), NIL, makeKeyword("MAX-TIME"), NIL, makeKeyword("STYLESHEET"), NIL, makeKeyword("MARKUP-TYPE"), $HTML,
	    makeKeyword("SKIP-SECTIONS"), NIL, makeKeyword("SHOW-URI?"), NIL, makeKeyword("INCLUDE-SECTIONS"), NIL });

    static private final SubLList $list_alt261 = list(list(makeSymbol("SECTION-KEY")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLList $list_alt264 = list(makeSymbol("*HTML-STREAM*"));

    static private final SubLString $str_alt266$Gathered__S_groups_of_sentences_f = makeString("Gathered ~S groups of sentences for ~S in ~A");

    static private final SubLList $list_alt267 = list(new SubLObject[] { list($TEST, makeSymbol("POSSIBLY-FACT-SHEET-DOMAIN-MT?")), list($TEST, makeSymbol("FACT-SHEET-VERBOSITY-P")), list($TEST, makeSymbol("NON-NEGATIVE-INTEGER-P")),
	    list($TEST, makeSymbol("NON-NEGATIVE-INTEGER-P")), list($TEST, makeSymbol("NON-NEGATIVE-NUMBER-P")), list($TEST, makeSymbol("NON-NEGATIVE-NUMBER-P")), list($TEST, makeSymbol("STRINGP")),
	    list($TEST, makeSymbol("STRINGP")), list($TEST, makeSymbol("STRINGP")), list($TEST, makeSymbol("STRINGP")), list($TEST, makeSymbol("STRINGP")) });

    static private final SubLList $list_alt268 = list(new SubLObject[] { list($TEST, makeSymbol("POSSIBLY-FACT-SHEET-DOMAIN-MT?")), list($TEST, makeSymbol("FACT-SHEET-VERBOSITY-P")), list($TEST, makeSymbol("NON-NEGATIVE-INTEGER-P")),
	    list($TEST, makeSymbol("NON-NEGATIVE-INTEGER-P")), list($TEST, makeSymbol("NON-NEGATIVE-NUMBER-P")), list($TEST, makeSymbol("NON-NEGATIVE-NUMBER-P")), list($TEST, makeSymbol("STRINGP")),
	    list($TEST, makeSymbol("STRINGP")), list($TEST, makeSymbol("STRINGP")), list($TEST, makeSymbol("STRINGP")), list($TEST, makeSymbol("STRINGP")), list($TEST, makeSymbol("CYCL-REPRESENTED-TERM-P")) });

    static private final SubLSymbol $sym270$HLMT_ = makeSymbol("HLMT?");

    static private final SubLList $list_alt274 = cons(makeSymbol("LABEL"), makeSymbol("PARAGRAPH-DATA"));

    static private final SubLString $str_alt276$50_ = makeString("50%");

    static private final SubLList $list_alt280 = cons(makeSymbol("SENTENCE"), makeSymbol("SENTENCE-DATA"));

    static private final SubLList $list_alt284 = cons(makeSymbol("COLUMN"), makeSymbol("VALUE"));

    static private final SubLString $str_alt287$_A = makeString("~A");

    static private final SubLSymbol $sym288$_ = makeSymbol("<");

    static private final SubLSymbol $sym289$TERM__ = makeSymbol("TERM-<");

    static private final SubLSymbol $sym290$FACT_SHEET_PRED_COUNT__ = makeSymbol("FACT-SHEET-PRED-COUNT-<");

    static private final SubLList $list_alt296 = list(CHAR_colon);

    public static final SubLObject $const301$FactSheetTableSectionAndHeaderQue = reader_make_constant_shell("FactSheetTableSectionAndHeaderQuery");

    static private final SubLList $list_alt311 = list(list(makeKeyword("AND"), list($TEST, makeSymbol("CYC-VAR?")), list($BIND, makeSymbol("VAR"))));

    static private final SubLList $list_alt313 = list(reader_make_constant_shell("FactSheetSentenceIndexical"), reader_make_constant_shell("FactSheetTableTypeIndexical"), reader_make_constant_shell("FactSheetQueryContextIndexical"), reader_make_constant_shell("FactSheetTopicIndexical"));

    static private final SubLList $list_alt315 = cons(makeSymbol("CONJUNCT"), makeSymbol("CONJUNCT-DATA"));

    static private final SubLSymbol $sym322$INVALID_ASSERTION_ = makeSymbol("INVALID-ASSERTION?");

    static private final SubLList $list_alt326 = cons(makeSymbol("SUMMARY-SENTENCE"), makeSymbol("PARAPHRASE"));

    static private final SubLSymbol $sym327$INVALID_FORT_ = makeSymbol("INVALID-FORT?");

    static private final SubLSymbol $sym328$UNLEXIFIED_ = makeSymbol("UNLEXIFIED?");

    static private final SubLSymbol $sym333$NON_PUBLIC_CONSTANT_ = makeSymbol("NON-PUBLIC-CONSTANT?");

    static private final SubLString $str_alt334$Filtering__S___due_to_non_public_ = makeString("Filtering ~S~% due to non-public constant: ~S");

    static private final SubLSymbol $sym336$PROPRIETARY_CONSTANT_ = makeSymbol("PROPRIETARY-CONSTANT?");

    static private final SubLString $str_alt337$Filtering__S___due_to_proprietary = makeString("Filtering ~S~% due to proprietary constant: ~S");

    static private final SubLString $str_alt338$Filtering__S___due_to_blacklisted = makeString("Filtering ~S~% due to blacklisted source: ~S");

    static private final SubLString $str_alt339$Filtering____S = makeString("Filtering~% ~S");

    static private final SubLString $str_alt340$Fact_Sheet_for_ = makeString("Fact Sheet for ");

    static private final SubLString $str_alt343$_Enesta_resources_followupLoader_ = makeString("/Enesta/resources/followupLoader.js");

    public static final SubLSymbol $kw345$SHOW_AD_ = makeKeyword("SHOW-AD?");

    public static final SubLSymbol $kw347$SHOW_URI_ = makeKeyword("SHOW-URI?");

    public static final SubLSymbol $kw348$SHOW_FOLLOWUP_WIDGET_ = makeKeyword("SHOW-FOLLOWUP-WIDGET?");

    static private final SubLString $str_alt350$text_css = makeString("text/css");

    static private final SubLString $str_alt351$_div_class__cycFollowup__termId__ = makeString("<div class='cycFollowup' termId=~S termString=~S></div>");

    static private final SubLString $str_alt354$_script_src___A__type__text_javas = makeString("<script src='~A' type='text/javascript'></script>");

    static private final SubLString $str_alt355$Unable_to_print_fact_sheet_statis = makeString("Unable to print fact sheet statistics for ~S");

    static private final SubLList $list_alt356 = list(reader_make_constant_shell("nonSingular-Generic"));

    static private final SubLString $str_alt357$A_Semantic_Web_URI_is_a_stable_na = makeString("A Semantic Web URI is a stable name for a concept that is designed to be understood by semantically-aware applications.  You can rely on this URI to refer to ");

    static private final SubLString $str_alt358$__and_you_should_use_it_in_web_pa = makeString(", and you should use it in web page annotations and in software code to maximize interoperability with other semantic applications.");

    static private final SubLString $str_alt360$This_page_was_automatically_creat = makeString("This page was automatically created by Cyc using ");

    static private final SubLString $str_alt361$automated_reasoning_and_natural_l = makeString("automated reasoning and natural language processing");

    static private final SubLString $str_alt362$__ = makeString(". ");

    static private final SubLString $str_alt363$Cyc_first_learned_about__A_on__A_ = makeString("Cyc first learned about ~A on ~A. ");

    static private final SubLString $str_alt364$The_ = makeString("The ");

    static private final SubLString $str_alt365$http___sw_opencyc_org_docs_swuri_ = makeString("http://sw.opencyc.org/docs/swuri.html");

    static private final SubLString $str_alt367$_for__A_is__ = makeString(" for ~A is: ");

    static private final SubLString $str_alt371$what_do_you_know_about_ = makeString("what do you know about ");

    static private final SubLString $str_alt372$tell_me_about_ = makeString("tell me about ");

    static private final SubLString $str_alt373$facts_about_ = makeString("facts about ");

    static private final SubLString $str_alt374$explain_ = makeString("explain ");

    static private final SubLString $str_alt375$fact_sheet_for_ = makeString("fact sheet for ");

    static private final SubLString $str_alt376$fact_sheet_about_ = makeString("fact sheet about ");

    static private final SubLString $str_alt377$show_ = makeString("show ");

    static private final SubLString $str_alt378$_facts = makeString(" facts");

    static private final SubLString $str_alt379$_knowledge = makeString(" knowledge");

    static private final SubLString $str_alt380$_fact_sheet = makeString(" fact sheet");

    static private final SubLList $list_alt381 = list(reader_make_constant_shell("MtUnionFn"), reader_make_constant_shell("CommonEnglishMisspellingsMt"), reader_make_constant_shell("AllEnglishValidatedLexicalMicrotheoryPSC"));

    static private final SubLList $list_alt382 = cons(makeSymbol("PATTERN-START"), makeSymbol("PATTERN-END"));

    static private final SubLList $list_alt383 = list(makeKeyword("ABBREVS"), makeKeyword("ACRONYMS"));

    static private final SubLList $list_alt388 = cons(makeSymbol("STRIPPED-STRING-DENOTS"), makeSymbol("STRIPPED-STRING"));

    static private final SubLList $list_alt389 = list(makeSymbol("PHRASE-STRING"), makeSymbol("DENOTS"));

    static private final SubLList $list_alt395 = list($CYCL, makeKeyword("T"), makeKeyword("INFLECTIONS"), T);

    static private final SubLList $list_alt403 = list(reader_make_constant_shell("Event"), reader_make_constant_shell("Terrorist"), reader_make_constant_shell("TerroristGroup"));

    static private final SubLString $str_alt405$fact_sheets = makeString("fact-sheets");

    static private final SubLString $str_alt406$_S_does_not_specify_an_existing_d = makeString("~S does not specify an existing directory relative to the cyc home.");

    static private final SubLString $str_alt407$fact_sheet_term_ids_fht = makeString("fact-sheet-term-ids.fht");

    private static final SubLSymbol $IMAGE_INDEPENDENT_CFASL = makeKeyword("IMAGE-INDEPENDENT-CFASL");

    static private final SubLString $str_alt409$tmp_ = makeString("tmp/");

    static private final SubLString $str_alt410$Caching_FORTs_for_Fact_Sheet_term = makeString("Caching FORTs for Fact-Sheet term IDs...");

    private static final SubLSymbol CONSTRUCT_FACT_SHEET_TERM_ID = makeSymbol("CONSTRUCT-FACT-SHEET-TERM-ID");

    static private final SubLString $str_alt418$Error_getting_fact_sheet_term_fro = makeString("Error getting fact-sheet term from ID ~S: ~A");

    static private final SubLString $str_alt419$0_ = makeString("0-");

    static private final SubLString $str_alt420$Couldn_t_identify_term_from_fact_ = makeString("Couldn't identify term from fact-sheet ID ~S");

    static private final SubLString $str_alt421$Term__S_from_ID__S_contains_inval = makeString("Term ~S from ID ~S contains invalid FORT ~S");

    static private final SubLString $str_alt423$Error_getting_fact_sheet_term_fro = makeString("Error getting fact-sheet term from span ID ~S: ~A");

    static private final SubLString $str_alt424$Invalid_attempt_to_reuse_memoizat = makeString("Invalid attempt to reuse memoization state in multiple threads simultaneously.");

    static private final SubLList $list_alt425 = cons(makeSymbol("PRED"), makeSymbol("SENTENCE-GROUPS"));

    static private final SubLString $str_alt426$Using_PPH_timeout_of__S_seconds_ = makeString("Using PPH timeout of ~S seconds.");

    static private final SubLString $str_alt428$Error_generating_paraphrases___A = makeString("Error generating paraphrases: ~A");

    static private final SubLString $str_alt429$Generated__S_paragraphs_containin = makeString("Generated ~S paragraphs containing ~S sentences for ~S in ~A.");

    static private final SubLSymbol $sym431$HIGHER_PRIORITY_FACT_SHEET_CATEGORY_ = makeSymbol("HIGHER-PRIORITY-FACT-SHEET-CATEGORY?");

    static private final SubLList $list_alt432 = list(reader_make_constant_shell("placeBasicDataSentence"), reader_make_constant_shell("agentBioDataSentence"), reader_make_constant_shell("agentDocumentationDataSentence"), reader_make_constant_shell("collectionDefinitionalDataSentence"),
	    reader_make_constant_shell("collectionDocumentationDataSentence"));

    static private final SubLString $str_alt434$_PPH_error_level_ = makeString("(PPH error level ");

    static private final SubLString $str_alt435$__ = makeString(") ");

    static private final SubLString $str_alt436$_is_not_a_ = makeString(" is not a ");

    static private final SubLString $str_alt438$Failed_to_paraphrase__D_sentence_ = makeString("Failed to paraphrase ~D sentence~:P for ~S:~% ~S");

    static private final SubLString $str_alt440$_a_href_ = makeString("<a href=");

    static private final SubLString $str_alt441$_ = makeString(">");

    static private final SubLString $str_alt442$http___fact_sheet = makeString("http://fact-sheet");

    static private final SubLList $list_alt445 = list(makeString("<a href=\"http://fact-sheet"), makeString("<a href=\"http://assertion-edit"), makeString("<span id=\""), makeString("<a href=\"cg?FACT-SHEET&"));

    static private final SubLList $list_alt446 = list(makeSymbol("FACT-SHEET-TERM-FROM-ID"), makeSymbol("FIND-OBJECT-BY-HL-EXTERNAL-ID-STRING"), makeSymbol("FIND-OBJECT-BY-COMPACT-HL-INTERNAL-ID-STRING"), makeSymbol("FACT-SHEET-TERM-FROM-ID"));

    static private final SubLString $str_alt447$_a = makeString("<a");

    static private final SubLString $str_alt448$_span = makeString("<span");

    static private final SubLList $list_alt449 = list(makeSymbol("TERM"), makeSymbol("CLOSE-TAG"));

    static private final SubLString $str_alt450$__a = makeString("</a");

    static private final SubLString $str_alt451$__span = makeString("</span");

    static private final SubLList $list_alt452 = list(makeSymbol("START-TOKEN"), makeSymbol("START-TOKEN-INDEX"), makeSymbol("TERM"), makeSymbol("CLOSE-TAG"));

    static private final SubLString $str_alt454$close_tag__S_and_current_tag__S_d = makeString("close tag ~S and current tag ~S don't match");

    static private final SubLString $str_alt455$__ = makeString("</");

    static private final SubLString $$$daves = makeString("daves");

    static private final SubLList $list_alt464 = list(list(list(makeString("<a href=\"http://fact-sheet107953410-26839203\">")), list(reader_make_constant_shell("UnitedStatesPresident"), makeString("</a>"))),
	    list(list(makeString("<span class=\"fs-category\">")), list(makeKeyword("DONT-REPLACE"), makeString("</span>"))));

    static private final SubLString $str_alt471$fact_sheet_term = makeString("fact-sheet-term");

    static private final SubLList $list_alt472 = list(makeSymbol("START-POSITION"), makeSymbol("END-POSITION"), makeSymbol("TERM"), makeSymbol("LINK-TEXT"), makeSymbol("LINKED-TEXT"));

    static private final SubLList $list_alt473 = list(makeSymbol("AMOUNT"), makeSymbol("OLD"), makeSymbol("NEW"));

    static private final SubLList $list_alt474 = list(makeSymbol("ORIGINAL-OPEN-TAG"), makeSymbol("OPEN-TAG-POSITION"), makeSymbol("ORIGINAL-LINK-TOKENS"), makeSymbol("ORIGINAL-CLOSE-TAG"), makeSymbol("CLOSE-TAG-POSITION"), makeSymbol("TERM"));

    static private final SubLList $list_alt475 = list(makeSymbol("OPEN-TAG"), makeSymbol("LINK-TEXT"), makeSymbol("CLOSE-TAG"));

    static private final SubLList $list_alt481 = cons(makeSymbol("CATEGORY"), makeSymbol("PARAGRAPH-TEXTS"));

    static private final SubLString $str_alt483$fs_outer_table = makeString("fs-outer-table");

    static private final SubLString $str_alt484$fs_main_image = makeString("fs-main-image");

    static private final SubLString $str_alt485$fs_in_cyc_logo = makeString("fs-in-cyc-logo");

    static private final SubLString $str_alt486$fs_title = makeString("fs-title");

    static private final SubLString $str_alt487$fs_title_div = makeString("fs-title-div");

    static private final SubLString $str_alt488$fs_category = makeString("fs-category");

    static private final SubLString $str_alt489$fs_fact_1 = makeString("fs-fact-1");

    static private final SubLString $str_alt490$fs_fact_2 = makeString("fs-fact-2");

    static private final SubLString $str_alt491$fs_footnote_1 = makeString("fs-footnote-1");

    static private final SubLString $str_alt492$fs_footnote_2 = makeString("fs-footnote-2");

    static private final SubLList $list_alt493 = list(makeSymbol("URL"), makeSymbol("LOGO-URL"), makeSymbol("BRAND-CLASS"), makeSymbol("ALT-TEXT"));

    static private final SubLString $str_alt499$KB__ = makeString("KB: ");

    static private final SubLString $str_alt500$System__ = makeString("System: ");

    static private final SubLList $list_alt501 = list(new SubLObject[] { makeSymbol("DOMAIN-MT"), makeSymbol("VERBOSITY"), makeSymbol("SENTENCE-COUNT"), makeSymbol("SECTION-COUNT"), makeSymbol("INFO-GATHERING-TIME"), makeSymbol("PPH-TIME"), makeSymbol("SECONDSTRING"), makeSymbol("DATESTRING"),
	    makeSymbol("IMAGE-ID"), makeSymbol("KB-VERSION"), makeSymbol("CYC-REVISION"), makeSymbol("&OPTIONAL"), makeSymbol("TERM") });

    static private final SubLString $str_alt502$Domain_mt___A = makeString("Domain mt: ~A");

    static private final SubLString $str_alt503$Verbosity___A = makeString("Verbosity: ~A");

    static private final SubLString $str_alt504$Sentence_Count___S = makeString("Sentence Count: ~S");

    static private final SubLString $str_alt505$Section_Count___S = makeString("Section Count: ~S");

    static private final SubLString $str_alt506$Information_Gathering_Time___a = makeString("Information Gathering Time: ~a");

    static private final SubLString $str_alt507$Paraphrase_Time___a = makeString("Paraphrase Time: ~a");

    static private final SubLString $str_alt508$Customization_and_Display_Time___ = makeString("Customization and Display Time: ~a");

    static private final SubLString $str_alt509$_A_at__A_on__A = makeString("~A at ~A on ~A");

    static private final SubLString $str_alt512$Image_ID___A = makeString("Image ID: ~A");

    static private final SubLString $str_alt513$_A_A__A_A_ = makeString("~A~A ~A~A ");

    static private final SubLList $list_alt514 = list(makeKeyword("TERSE"), makeKeyword("NORMAL"), makeKeyword("VERBOSE"), $MINI, makeKeyword("PUBLIC"));

    static private final SubLString $str_alt517$FACT_SHEET_IMAGE_ROOT_ = makeString("FACT-SHEET-IMAGE-ROOT/");

    static private final SubLString $str_alt520$FACT_SHEET_BASE_URL_ = makeString("FACT-SHEET-BASE-URL/");

    static private final SubLList $list_alt521 = cons(makeSymbol("ORIGINAL"), makeSymbol("REPLACEMENT"));

    static private final SubLString $str_alt522$_cyc_httpd_htdocs_cycdoc_img_ = makeString("/cyc/httpd/htdocs/cycdoc/img/");

    static private final SubLString $str_alt524$file___ = makeString("file://");

    static private final SubLString $str_alt526$___img_ = makeString("../img/");

    static private final SubLSymbol $sym528$_URL = makeSymbol("?URL");

    static private final SubLList $list_alt529 = list(reader_make_constant_shell("salientTermsImageRoot"), makeSymbol("?URL"));

    static private final SubLSymbol $sym533$_SENTENCE = makeSymbol("?SENTENCE");

    static private final SubLList $list_alt536 = list(makeSymbol("HTML"), makeSymbol("FORMATTING-DIRECTIVES"));

    static private final SubLString $str_alt538$Query_got_mini_fact_sheet_of_leng = makeString("Query got mini fact sheet of length ~S for ~S");

    static private final SubLString $str_alt539$Query_failed_to_get_mini_fact_she = makeString("Query failed to get mini fact sheet for ~S");

    static private final SubLString $str_alt542$Using_soft_query_timeout_of__S_se = makeString("Using soft query timeout of ~S seconds.");

    public static final SubLObject $$True_JustificationTruth = reader_make_constant_shell("True-JustificationTruth");

    static private final SubLString $str_alt553$_A_is_not_a__A = makeString("~A is not a ~A");

    static private final SubLString $str_alt558$_A_is_not_a_valid__sbhl_type_erro = makeString("~A is not a valid *sbhl-type-error-action* value");

    static private final SubLString $str_alt559$attempting_to_bind_direction_link = makeString("attempting to bind direction link variable, to NIL. macro body not executed.");

    static private final SubLList $list_alt560 = list(makeUninternedSymbol("LINK-NODE"), makeUninternedSymbol("MT"), makeUninternedSymbol("TV"));

    static private final SubLString $str_alt561$Node__a_does_not_pass_sbhl_type_t = makeString("Node ~a does not pass sbhl-type-test ~a~%");

    static private final SubLString $str_alt563$_S____yielded__S_paragraphs_in__A = makeString("~S:~% yielded ~S paragraphs in ~A for ~S");

    static private final SubLList $list_alt566 = cons(makeSymbol("PRED"), makeSymbol("SUMMARY-SENTENCE"));

    static private final SubLList $list_alt567 = cons(makeSymbol("PRED"), makeSymbol("SUMMARY-SENTENCES"));

    static private final SubLSymbol $sym568$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_ = makeSymbol("FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?");

    static private final SubLList $list_alt570 = list(new SubLObject[] { list(reader_make_constant_shell("isa"), ONE_INTEGER), list(reader_make_constant_shell("internationalOrganizationMemberCountries"), TWO_INTEGER),
	    list(reader_make_constant_shell("relationInstanceAll"), TWO_INTEGER, THREE_INTEGER), list(reader_make_constant_shell("relationInstanceExistsAndOnly"), TWO_INTEGER), list(reader_make_constant_shell("relationInstanceExistsCount"), TWO_INTEGER),
	    list(reader_make_constant_shell("relationInstanceExists"), TWO_INTEGER), list(reader_make_constant_shell("relationInstanceExistsMany"), TWO_INTEGER), list(reader_make_constant_shell("relationInstanceExistsMax"), TWO_INTEGER),
	    list(reader_make_constant_shell("relationInstanceExistsMin"), TWO_INTEGER), list(reader_make_constant_shell("relationInstanceExistsRange"), TWO_INTEGER) });

    static private final SubLList $list_alt572 = cons(reader_make_constant_shell("relationInstanceExistsCount"), makeKeyword("ANYTHING"));

    static private final SubLList $list_alt574 = cons(reader_make_constant_shell("relationInstanceExists"), makeKeyword("ANYTHING"));

    static private final SubLString $str_alt575$_S___implies__S = makeString("~S~% implies ~S");

    static private final SubLSymbol $sym576$_FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES__CACHING_STATE_ = makeSymbol("*FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?-CACHING-STATE*");

    static private final SubLList $list_alt577 = cons(reader_make_constant_shell("SomeTimeInIntervalFn"), makeKeyword("ANYTHING"));

    static private final SubLList $list_alt586 = cons(makeUninternedSymbol("KEY"), makeSymbol("PRED-SENTENCES"));

    static private final SubLString $str_alt588$Added__S_THCL_sentences_in__5F_se = makeString("Added ~S THCL sentences in ~5F seconds.");

    static private final SubLList $list_alt589 = list(makeSymbol("PRED"), makeSymbol("ARGNUM"));

    static private final SubLString $str_alt594$Fact_Sheet_Query_Daemon_caught_er = makeString("Fact Sheet Query Daemon caught error while working on~% (~S ~S ~S ~S):~% ~S");

    static private final SubLString $str_alt597$Hit_soft_timeout_of__S_seconds_af = makeString("Hit soft timeout of ~S seconds after getting ~S query results for ~S");

    static private final SubLString $str_alt598$Hit_hard_timeout_of__S_seconds_af = makeString("Hit hard timeout of ~S seconds after getting ~S query-results for ~S");

    static private final SubLList $list_alt602 = cons(makeSymbol("CATEGORY"), makeSymbol("SENTENCES"));

    static private final SubLList $list_alt603 = cons(makeUninternedSymbol("KEY"), makeSymbol("SENTENCES"));

    static private final SubLSymbol $sym604$FACT_SHEET_SENTENCE_MORE_RECENT_ = makeSymbol("FACT-SHEET-SENTENCE-MORE-RECENT?");

    static private final SubLList $list_alt614 = cons(makeSymbol("FIRST-SENTENCE"), makeSymbol("REMAINING"));

    static private final SubLSymbol $sym615$FACT_SHEET_SENTENCES_EQUAL_ = makeSymbol("FACT-SHEET-SENTENCES-EQUAL?");

    static private final SubLString $str_alt616$_S_has_coherence__S_to__S = makeString("~S has coherence ~S to ~S");

    static private final SubLList $list_alt617 = cons(makeSymbol("PRED"), makeSymbol("SENTENCES"));

    public static final SubLSymbol $kw619$DISPLAY_TITLE_ = makeKeyword("DISPLAY-TITLE?");

    public static final SubLSymbol $kw620$PRINT_STATS_ = makeKeyword("PRINT-STATS?");

    public static final SubLSymbol $kw621$SHOW_COPYRIGHT_ = makeKeyword("SHOW-COPYRIGHT?");

    static private final SubLString $str_alt623$KB____0123456789_____ = makeString("KB: ([0123456789.]*) ");

    static private final SubLString $str_alt624$System____0123456789_____ = makeString("System: ([0123456789.]*) ");

    static private final SubLString $str_alt625$_span_class__copyright__ = makeString("<span class=\"copyright\">");

    static private final SubLString $str_alt629$Start_Fact_Sheet_Section_ = makeString("Start Fact Sheet Section ");

    static private final SubLString $str_alt630$End_Fact_Sheet_Section_ = makeString("End Fact Sheet Section ");

    static private final SubLSymbol $sym631$TERM_HAS_PRECACHED_FACT_SHEET_ = makeSymbol("TERM-HAS-PRECACHED-FACT-SHEET?");

    static private final SubLList $list_alt633 = cons(makeSymbol("DOMAIN-MT"), makeSymbol("LANGUAGE-MTS"));

    static private final SubLList $list_alt634 = cons(makeSymbol("KNOWN-DOMAIN-MT"), makeSymbol("LANGUAGE-MTS"));

    static private final SubLList $list_alt635 = list(makeString("cfasl"), makeString("html"));

    public static final SubLSymbol $kw639$FELL_BACK_ON_DEFAULT_ = makeKeyword("FELL-BACK-ON-DEFAULT?");

    static private final SubLList $list_alt641 = list(new SubLObject[] { makeSymbol("DOMAIN-MT"), makeSymbol("VERBOSITY"), makeSymbol("SENTENCE-COUNT"), makeSymbol("SECTION-COUNT"), makeSymbol("INFO-GATHERING-TIME"), makeSymbol("PPH-TIME"), makeSymbol("SECOND-STRING"), makeSymbol("DATE-STRING"),
	    makeSymbol("CYC-IMAGE-ID"), makeSymbol("KB-VERSION-STRING"), makeSymbol("CYC-REVISION-STRING"), makeSymbol("&OPTIONAL"), makeSymbol("TERM") });

    static private final SubLList $list_alt643 = list(CHAR_slash);

    static private final SubLString $str_alt647$Unable_to_load_formatting_guideli = makeString("Unable to load formatting guidelines for ~S: ~A");

    static private final SubLString $str_alt648$Error_loading_data_for__S___A = makeString("Error loading data for ~S: ~A");

    static private final SubLString $str_alt649$This_fact_sheet_for_ = makeString("This fact sheet for ");

    static private final SubLString $str_alt650$_is_under_construction__Come_back = makeString(" is under construction. Come back soon.");

    static private final SubLString $str_alt652$Couldn_t_create_directory_for_fac = makeString("Couldn't create directory for fact sheet for ~S~% directory: ~S");

    static private final SubLString $str_alt653$_ = makeString(".");

    static private final SubLString $str_alt654$_under_construction_ = makeString("-under-construction.");

    static private final SubLString $str_alt655$_html = makeString(".html");

    static private final SubLString $str_alt656$under_construction__Come_back_soo = makeString("under construction. Come back soon.");

    static private final SubLString $str_alt657$Gathering_old_under_construction_ = makeString("Gathering old under-construction fact-sheets...");

    static private final SubLString $str_alt658$_Directory__ = makeString(" Directory: ");

    static private final SubLString $str_alt659$_under_construction_cfasl = makeString("-under-construction.cfasl");

    static private final SubLString $str_alt661$_S_is_not_a_valid_extension__Must = makeString("~S is not a valid extension. Must be one of ~S");

    static private final SubLString $str_alt662$Couldn_t_create_directory_for_fac = makeString("Couldn't create directory for fact sheet for ~S~% directory: ~A");

    static private final SubLString $str_alt663$Couldn_t_write_fact_sheet_for__S_ = makeString("Couldn't write fact sheet for ~S on try ~A. Got error message: ~S");

    static private final SubLString $str_alt664$Couldn_t_write_fact_sheet_for__S_ = makeString("Couldn't write fact sheet for ~S on final try. Got error message: ~S");

    static private final SubLString $str_alt665$Couldn_t_write_fact_sheet_formatt = makeString("Couldn't write fact sheet formatting guidelines for ~S Got error message: ~S");

    static private final SubLString $str_alt666$Couldn_t_create_directory_for_fac = makeString("Couldn't create directory for fact sheet data for ~S~% directory: ~A");

    static private final SubLString $str_alt667$Couldn_t_write_fact_sheet_data_fo = makeString("Couldn't write fact sheet data for ~S Got error message: ~S");

    static private final SubLList $list_alt672 = list($MINI, makeKeyword("NORMAL"));

    static private final SubLList $list_alt673 = list(makeKeyword("MISSING"), makeKeyword("STALE"));

    static private final SubLString $str_alt679$No_progress_after_at_least__A_try = makeString("No progress after at least ~A trying to update~% ~S");

    static private final SubLList $list_alt680 = list(makeInteger(20071102), makeInteger(102500));

    static private final SubLString $str_alt684$Updating_fact_sheets_for_all_fact = makeString("Updating fact sheets for all fact-sheetable instances of ~S that don't have fact sheets generated since ~S~%  verbosity: ~S~%  domain mt: ~S~%  language mt: ~S");

    static private final SubLString $str_alt685$Closing_log_ = makeString("Closing log.");

    static private final SubLString $str_alt686$Fact_Sheet_updater_for_Public_Fac = makeString("Fact Sheet updater for Public Fact Sheet Data");

    static private final SubLString $str_alt688$Updating_ = makeString("Updating ");

    static private final SubLString $str_alt689$_fact_sheets = makeString(" fact sheets");

    static private final SubLString $str_alt690$Updating_fact_sheets_for_public_t = makeString("Updating fact sheets for public-type ~S that haven't been generated since ~S~%  verbosity: ~S~%  domain mt: ~S~% language mt: ~S");

    static private final SubLString $str_alt691$Updating_stale_fact_sheets___ = makeString("Updating stale fact sheets...");

    static private final SubLString $str_alt692$Updating_all_stale_fact_sheets_fr = makeString("Updating all stale fact sheets from ~S");

    static private final SubLString $str_alt693$Now_doing__S__S__S = makeString("Now doing ~S ~S ~S");

    static private final SubLString $str_alt694$Stale_Fact_Sheet_Updater_error_on = makeString("Stale Fact-Sheet Updater error on ~S: ~A");

    static private final SubLString $str_alt695$Abandoning_after__D_errors_ = makeString("Abandoning after ~D errors.");

    static private final SubLString $str_alt696$Instructed_to_stop_updates_after_ = makeString("Instructed to stop updates after current term.");

    static private final SubLString $str_alt697$Finished_stale_fact_sheet_update_ = makeString("Finished stale fact-sheet update sweep.");

    static private final SubLString $str_alt698$Sleeping_until_8_00_tonight__Zzz_ = makeString("Sleeping until 8:00 tonight. Zzz...");

    static private final SubLString $str_alt699$Checking_for_fact_sheets_that_hav = makeString("Checking for fact sheets that have become stale...");

    static private final SubLString $str_alt703$under_construction = makeString("under-construction");

    static private final SubLString $str_alt704$_cfasl = makeString(".cfasl");

    static private final SubLString $str_alt705$Couldn_t_determine_focal_term_fro = makeString("Couldn't determine focal term from filename:~% ~S");

    static private final SubLString $str_alt706$Can_t_update_fact_sheet_for__S___ = makeString("Can't update fact sheet for ~S -- not a CYCL-DENOTATIONAL-TERM-P.");

    static private final SubLString $str_alt707$Can_t_update_fact_sheet_for__S___ = makeString("Can't update fact sheet for ~S -- couldn't determine verbosity from ~S");

    static private final SubLString $str_alt708$Can_t_update_fact_sheet_for__S___ = makeString("Can't update fact sheet for ~S -- Domain mt ~S fails HLMT?");

    static private final SubLString $str_alt709$Can_t_update_fact_sheet_for__S___ = makeString("Can't update fact sheet for ~S -- Language mt ~S fails HLMT?");

    static private final SubLString $str_alt710$Updating_stale_fact_sheet_for__S_ = makeString("Updating stale fact sheet for ~S ~S ~S ~S");

    static private final SubLList $list_alt712 = list(list(makeSymbol("FORT")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLList $list_alt715 = list(reader_make_constant_shell("TerroristAttack"));

    static private final SubLList $list_alt716 = list(NIL);

    static private final SubLString $str_alt718$term_ids_to_update_ = makeString("term-ids-to-update/");

    static private final SubLString $str_alt722$_term_ids_to_update_ = makeString("/term-ids-to-update/");

    static private final SubLString $str_alt727$Invalid_term_type_specification__ = makeString("Invalid term-type specification ~A.~%");

    static private final SubLString $str_alt729$Updating_fact_sheets_from_ = makeString("Updating fact sheets from ");

    static private final SubLString $str_alt730$Skipping__S__which_was_updated_on = makeString("Skipping ~S, which was updated on ~S");

    static private final SubLString $str_alt731$Writing_fact_sheet_data_for__S_to = makeString("Writing fact-sheet-data for ~S to ~S");

    static private final SubLString $str_alt732$Couldn_t_find_fact_sheet_file_for = makeString("Couldn't find fact-sheet file for ~S");

    static private final SubLString $str_alt733$term_ids_ = makeString("term-ids-");

    static private final SubLString $str_alt734$_3__0D = makeString("~3,'0D");

    static private final SubLString $str_alt735$Updating_fact_sheets_file___D_of_ = makeString("Updating fact sheets file #~D of ~S");

    static private final SubLString $str_alt736$Couldn_t_find_id_file__S = makeString("Couldn't find id-file ~S");

    static private final SubLString $str_alt739$Scanning_for_fact_sheets_requirin = makeString("Scanning for fact sheets requiring update ....");

    static private final SubLString $str_alt740$Determining_for_all_fact_sheet_na = makeString("Determining for all fact sheet names for this KB ....");

    static private final SubLString $str_alt742$THIS_WORKER_NUMBER___a__must_be_l = makeString("THIS-WORKER-NUMBER (~a) must be less than NUMBER-OF-WORKERS (~a)");

    static private final SubLString $str_alt743$Starting_fact_sheet_update_sessio = makeString("Starting fact-sheet update session (worker #~S of ~S).~% Verbosities: ~S Target-Statuses: ~S Domain-mt: ~S Language-mt: ~S");

    static private final SubLString $str_alt744$Iterating_over_all_FORTs_to_updat = makeString("Iterating over all FORTs to update fact sheets as necessary...");

    static private final SubLString $str_alt745$Starting__S_update_on__S__Status_ = makeString("Starting ~S update on ~S. Status: ~S");

    static private final SubLString $str_alt746$Fact_Sheet_Updater_error_on__S___ = makeString("Fact-Sheet Updater error on ~S: ~A");

    static private final SubLString $str_alt747$Halting_Fact_Sheet_Update_after__ = makeString("Halting Fact-Sheet Update after ~S errors");

    static private final SubLString $str_alt748$Finished_fact_sheet_update_sessio = makeString("Finished fact-sheet update session.");

    static private final SubLString $str_alt749$Starting_fact_sheet_update_sessio = makeString("Starting fact-sheet update session.~% Verbosity: ~S Domain-mt: ~S Language-mt: ~S Stop-after: ~S");

    static private final SubLString $str_alt750$Fact_Sheet_Updater_error__ = makeString("Fact-Sheet Updater error: ");

    static private final SubLList $list_alt753 = list(cons(makeString("daves"), makeKeyword("NORMAL")), cons(makeString("baxter"), makeKeyword("NORMAL")));

    static private final SubLString $str_alt757$Starting_fact_sheet_update_screen = makeString("Starting fact-sheet update screensaver~% Verbosity: ~S Domain-mt: ~S Language-mt: ~S Start-hour: ~S:00 End-hour: ~A");

    static private final SubLString $str_alt758$_00 = makeString(":00");

    static private final SubLString $str_alt760$Start_time_hasn_t_arrived__Sleepi = makeString("Start time hasn't arrived. Sleeping until ~S:00.~%Zzzz.");

    static private final SubLString $str_alt761$End_time_of__S_00_has_passed__Sle = makeString("End time of ~S:00 has passed. Sleeping until ~S:00.~%Zzzz.");

    static private final SubLString $str_alt762$Been_told_to_sleep__Sleeping_for_ = makeString("Been told to sleep. Sleeping for ~S seconds.~%Zzzz.");

    static private final SubLString $str_alt763$Image_appears_to_be_busy__Sleepin = makeString("Image appears to be busy. Sleeping for ~S seconds.~%Zzzz.");

    static private final SubLString $str_alt764$Fact_Sheet_Screensavers_have_been = makeString("Fact Sheet Screensavers have been instructed to die.");

    static private final SubLString $str_alt765$Updating__S = makeString("Updating ~S");

    static private final SubLString $str_alt766$Finished_fact_sheet_for__S_in__5F = makeString("Finished fact sheet for ~S in ~5F seconds.");

    static private final SubLString $str_alt767$Caught_error_while_updating__S_fa = makeString("Caught error while updating ~S fact sheet for ~S:~% ~A");

    static private final SubLList $list_alt768 = list(makeSymbol("HTML"), makeSymbol("FORMATTING-GUIDELINES"));

    static private final SubLString $str_alt770$Encountered_inference_error_while = makeString("Encountered inference error while updating ~S:~% ~S");

    static private final SubLList $list_alt771 = list(makeSymbol("OLD-DATA"), makeSymbol("OLD-STATS"), makeSymbol("OLD-FOOTNOTES"), makeSymbol("OLD-FORMATTING-GUIDELINES"));

    static private final SubLString $str_alt772$Launching_make_up_updater_for__S_ = makeString("Launching make-up updater for ~S. ~A");

    static private final SubLString $str_alt773$_Timed_out_after_ = makeString("(Timed out after ");

    static private final SubLString $str_alt774$_seconds__ = makeString(" seconds.)");

    static private final SubLString $str_alt775$_Didn_t_time_out__Probably_ran_in = makeString("(Didn't time out. Probably ran into an error.)");

    static private final SubLString $str_alt776$Fact_Sheet_Post_Timeout_Updater = makeString("Fact Sheet Post-Timeout Updater");

    static private final SubLList $list_alt778 = list(makeSymbol("DATE"), makeSymbol("SECOND"));

    static private final SubLList $list_alt779 = list(makeSymbol("MODIFIED-DATE"), makeSymbol("MODIFIED-SECOND"));

    static private final SubLString $str_alt780$_S_was_modified_on__S = makeString("~S was modified on ~S");

    static private final SubLString $str_alt781$_formatting_guidelines_cfasl = makeString("-formatting-guidelines.cfasl");

    static private final SubLList $list_alt782 = list(makeSymbol("VERBOSITY-STRING"), makeSymbol("DOMAIN-MT-ID"), makeSymbol("LANGUAGE-MT-ID"));

    static private final SubLList $list_alt787 = list(
	    new SubLObject[] { makeSymbol("STALE-TERMS"), makeSymbol("MISSING-TERMS"), makeSymbol("UP-TO-DATE-TERMS"), makeSymbol("THREAD"), makeSymbol("SHOULD-SLEEP?"), makeSymbol("VERBOSITY"), makeSymbol("DOMAIN-MT"), makeSymbol("LANGUAGE-MT"), makeSymbol("NICE-LEVEL"), makeSymbol("NEW-DAYS") });

    static private final SubLList $list_alt788 = list(new SubLObject[] { makeKeyword("STALE-TERMS"), makeKeyword("MISSING-TERMS"), makeKeyword("UP-TO-DATE-TERMS"), makeKeyword("THREAD"), makeKeyword("SHOULD-SLEEP?"), makeKeyword("VERBOSITY"), makeKeyword("DOMAIN-MT"), makeKeyword("LANGUAGE-MT"),
	    makeKeyword("NICE-LEVEL"), makeKeyword("NEW-DAYS") });

    static private final SubLList $list_alt789 = list(new SubLObject[] { makeSymbol("FSUT-PRIORITIZER-STALE-TERMS"), makeSymbol("FSUT-PRIORITIZER-MISSING-TERMS"), makeSymbol("FSUT-PRIORITIZER-UP-TO-DATE-TERMS"), makeSymbol("FSUT-PRIORITIZER-THREAD"), makeSymbol("FSUT-PRIORITIZER-SHOULD-SLEEP?"),
	    makeSymbol("FSUT-PRIORITIZER-VERBOSITY"), makeSymbol("FSUT-PRIORITIZER-DOMAIN-MT"), makeSymbol("FSUT-PRIORITIZER-LANGUAGE-MT"), makeSymbol("FSUT-PRIORITIZER-NICE-LEVEL"), makeSymbol("FSUT-PRIORITIZER-NEW-DAYS") });

    static private final SubLList $list_alt790 = list(
	    new SubLObject[] { makeSymbol("_CSETF-FSUT-PRIORITIZER-STALE-TERMS"), makeSymbol("_CSETF-FSUT-PRIORITIZER-MISSING-TERMS"), makeSymbol("_CSETF-FSUT-PRIORITIZER-UP-TO-DATE-TERMS"), makeSymbol("_CSETF-FSUT-PRIORITIZER-THREAD"), makeSymbol("_CSETF-FSUT-PRIORITIZER-SHOULD-SLEEP?"),
		    makeSymbol("_CSETF-FSUT-PRIORITIZER-VERBOSITY"), makeSymbol("_CSETF-FSUT-PRIORITIZER-DOMAIN-MT"), makeSymbol("_CSETF-FSUT-PRIORITIZER-LANGUAGE-MT"), makeSymbol("_CSETF-FSUT-PRIORITIZER-NICE-LEVEL"), makeSymbol("_CSETF-FSUT-PRIORITIZER-NEW-DAYS") });

    static private final SubLSymbol $sym801$FSUT_PRIORITIZER_SHOULD_SLEEP_ = makeSymbol("FSUT-PRIORITIZER-SHOULD-SLEEP?");

    static private final SubLSymbol $sym802$_CSETF_FSUT_PRIORITIZER_SHOULD_SLEEP_ = makeSymbol("_CSETF-FSUT-PRIORITIZER-SHOULD-SLEEP?");

    public static final SubLSymbol $kw817$SHOULD_SLEEP_ = makeKeyword("SHOULD-SLEEP?");

    static private final SubLString $str_alt822$Invalid_slot__S_for_construction_ = makeString("Invalid slot ~S for construction function");

    static private final SubLString $str_alt823$__PRIORITIZER_stale__S_missing__S = makeString("#<PRIORITIZER stale=~S missing=~S up-to-date=~S>");

    static private final SubLString $str_alt829$Non_cons_item_in_prioritizer_queu = makeString("Non-cons item in prioritizer queue: ~S");

    static private final SubLString $str_alt830$Non_non_negative_integer_priority = makeString("Non-non-negative-integer priority in prioritizer queue: ~S");

    static private final SubLString $str_alt835$Had_trouble_getting_a_term_from__ = makeString("Had trouble getting a term from ~S");

    static private final SubLString $str_alt836$Skipping__S__Update_already_under = makeString("Skipping ~S: Update already undertaken.");

    static private final SubLList $list_alt837 = cons(makeSymbol("TERM"), makeSymbol("PRIORITY"));

    static private final SubLString $str_alt838$Dequeuing__S__Status__stale__Prio = makeString("Dequeuing ~S. Status: stale. Priority: ~S");

    static private final SubLString $str_alt840$Dequeuing__S__Status__missing__Pr = makeString("Dequeuing ~S. Status: missing. Priority: ~S");

    static private final SubLString $str_alt842$Dequeuing__S__Status__up_to_date_ = makeString("Dequeuing ~S. Status: up-to-date. Priority: ~S");

    static private final SubLString $str_alt847$Non_cons_in_fact_sheet_prioritize = makeString("Non-cons in fact sheet prioritizer queue: ~S");

    static private final SubLList $list_alt849 = list(makeKeyword("MISSING"), makeKeyword("STALE"), makeKeyword("UP-TO-DATE"));

    static private final SubLString $str_alt851$border_0 = makeString("border=0");

    static private final SubLString $str_alt854$creation_kb = makeString("creation-kb");

    static private final SubLString $str_alt855$creation_system = makeString("creation-system");

    static private final SubLString $str_alt859$text_javascript = makeString("text/javascript");

    static private final SubLString $str_alt860$yui_skin_sam = makeString("yui-skin-sam");

    static private final SubLString $str_alt861$cb_handle_fact_sheet_evaluation = makeString("cb-handle-fact-sheet-evaluation");

    static private final SubLList $list_alt863 = list(cons(ZERO_INTEGER, makeString("0 -- No facts visible")), cons(FIVE_INTEGER, makeString("5 -- Half of the facts I'd expect to see are here")), cons(TEN_INTEGER, makeString("10 -- all relevant facts from KB are present in the Fact Sheet")));

    static private final SubLList $list_alt865 = list(cons(ZERO_INTEGER, makeString("0 -- none of the facts on this fact sheet should be here")), cons(FIVE_INTEGER, makeString("5 -- Half of the facts are inappropriate for this fact sheet")),
	    cons(TEN_INTEGER, makeString("10 -- Nothing that should be removed")));

    static private final SubLList $list_alt867 = list(cons(ZERO_INTEGER, makeString("0 -- Every fact I see involves redundancy")), cons(FIVE_INTEGER, makeString("5 -- Half of the facts on the sheet involve redundancy")), cons(TEN_INTEGER, makeString("10 -- There are no bothersome redundant facts")));

    static private final SubLList $list_alt869 = list(cons(ZERO_INTEGER, makeString("0 -- I couldn't understand a single one of the facts")), cons(TWO_INTEGER, makeString("2 -- Some understandable, but much incomprehensible")),
	    cons(FIVE_INTEGER, makeString("5 -- It took me a while to figure what it was saying")), cons(EIGHT_INTEGER, makeString("8 -- Awkward, but fairly easy to understand")), cons(TEN_INTEGER, makeString("10 -- all facts were presented perfectly clearly")));

    static private final SubLList $list_alt871 = list(cons(ZERO_INTEGER, makeString("0 -- I couldn't get to any other Fact Sheets from this one")), cons(TEN_INTEGER, makeString("10 -- All other relevant fact sheets reachable from here")));

    static private final SubLList $list_alt873 = list(cons(ZERO_INTEGER, makeString("0 -- Not a single fact was in the right section")), cons(FIVE_INTEGER, makeString("5 -- Half the facts were in appropriate sections")), cons(TEN_INTEGER, makeString("10 -- All facts were in appropriate sections")));

    static private final SubLList $list_alt875 = list(cons(ZERO_INTEGER, makeString("0 -- No useful pattern for how anything was ordered or presented")), cons(FIVE_INTEGER, makeString("5 -- Facts were mostly in the right order, but some jarring")),
	    cons(TEN_INTEGER, makeString("10 -- Looks like a good writer wrote each section")));

    static private final SubLList $list_alt877 = list(cons(ZERO_INTEGER, makeString("0 -- I've never seen anything uglier")), cons(TEN_INTEGER, makeString("10 -- I can't imagine how these could ever look better")));

    static private final SubLString $str_alt880$_comments = makeString("-comments");

    static private final SubLString $str_alt881$Score__ = makeString("Score: ");

    static private final SubLString $str_alt882$Comments__ = makeString("Comments: ");

    static private final SubLList $list_alt885 = list(new SubLObject[] { makeString("filtering"), makeString("filtering-comments"), makeString("coverage"), makeString("coverage-comments"), makeString("linking"), makeString("linking-comments"), makeString("clarity"), makeString("clarity-comments"),
	    makeString("categorization"), makeString("categorization-comments"), makeString("esthetic-value"), makeString("esthetic-value-comments"), makeString("fluidity"), makeString("fluidity-comments"), makeString("creation-kb"), makeString("creation-system") });

    static private final SubLList $list_alt887 = list(makeString("-1"), makeString(""));

    static private final SubLString $str_alt890$_S__ = makeString("~S~%");

    static private final SubLString $str_alt892$cg_cb_fact_sheet_evaluation_term_ = makeString("cg?cb-fact-sheet-evaluation&term=");

    static private final SubLString $str_alt893$_evaluator_ = makeString("&evaluator=");

    static private final SubLString $str_alt894$_creation_kb_ = makeString("&creation-kb=");

    static private final SubLString $str_alt895$_creation_system_ = makeString("&creation-system=");

    static private final SubLString $str_alt900$The_process_that_is_marking_the_f = makeString("The process that is marking the factsheet as modifiable (~A) is not the process currently modifying the fact sheet (~A)");

    static private final SubLString $str_alt902$_script_type__text_javascript____ = makeString(
	    "<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-0348708830263077\";\ngoogle_alternate_color = \"6728B2\";\ngoogle_ad_width = 728;\ngoogle_ad_height = 90;\ngoogle_ad_format = \"728x90_as\";\ngoogle_ad_type = \"text_image\";\ngoogle_ad_channel = \"\";\ngoogle_color_border = \"341473\";\ngoogle_color_bg = \"E6F0FF\";\ngoogle_color_link = \"0000FF\";\ngoogle_color_text = \"000000\";\ngoogle_color_url = \"008000\";\ngoogle_ui_features = \"rc:6\";\n//-->\n</script>\n<script type=\"text/javascript\"\n src=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>");

    static private final SubLString $str_alt903$__ = makeString("..");

    static private final SubLSymbol $sym907$FACT_SHEET_FILENAME_CHAR_ = makeSymbol("FACT-SHEET-FILENAME-CHAR?");

    static private final SubLString $str_alt908$_ = makeString("_");

    static private final SubLString $str_alt910$_term_mapping_cfasl = makeString("-term-mapping.cfasl");

    static private final SubLString $str_alt911$_term_mapping_txt = makeString("-term-mapping.txt");

    static private final SubLSymbol $sym914$_X = makeSymbol("?X");

    static private final SubLList $list_alt917 = list(makeKeyword("INFERENCE-MODE"), makeKeyword("MINIMAL"), makeKeyword("BROWSABLE?"), makeSymbol("*FACT-SHEET-QUERIES-BROWSABLE?*"));

    static private final SubLString $str_alt918$_S__S___S = makeString("~S ~S: ~S");

    static private final SubLList $list_alt919 = list(reader_make_constant_shell("isa"), reader_make_constant_shell("genls"));

    static private final SubLSymbol $sym922$COLLECTION_IN_ANY_MT_ = makeSymbol("COLLECTION-IN-ANY-MT?");

    static private final SubLList $list_alt929 = list(makeSymbol("TERM"), makeSymbol("STRINGS"));

    static private final SubLList $list_alt933 = list(makeSymbol("TERM"), makeSymbol("URL"));

    static private final SubLString $str_alt938$_cyc_projects_inCyc_staging_area_ = makeString("/cyc/projects/inCyc/staging-area/inCyc/concepts/");

    static private final SubLString $str_alt939$_cyc_projects_inCyc_staging_area_ = makeString("/cyc/projects/inCyc/staging-area/inCyc/js/searchdata.js");

    static private final SubLString $str_alt940$_cyc_projects_inCyc_staging_area_ = makeString("/cyc/projects/inCyc/staging-area/inCyc/searchdata.xml");

    static private final SubLString $str_alt941$_cyc_projects_inCyc_staging_area_ = makeString("/cyc/projects/inCyc/staging-area/inCyc/searchdata.htaccess");

    static private final SubLString $str_alt942$_cyc_projects_inCyc_staging_area_ = makeString("/cyc/projects/inCyc/staging-area/inCyc/searchdata.sql");

    static private final SubLString $str_alt943$factSheetPath__________cyclId____ = makeString("factSheetPath=\"(.*?)\".*cyclId=\"(.*?)\"");

    static private final SubLString $str_alt944$RewriteCond________1___A___ = makeString("RewriteCond       $1 ^~A$~%");

    static private final SubLString $str_alt945$RewriteRule________scratch_www_in = makeString("RewriteRule ^(.+) /scratch/www/incyc/concepts/~A  [L]~%~%");

    static private final SubLString $str_alt946$_A__ = makeString("~A~%");

    static private final SubLString $str_alt947$DROP_TABLE_HAS_INCYC_PAGE_ = makeString("DROP TABLE HAS_INCYC_PAGE;");

    static private final SubLString $str_alt948$CREATE_TABLE_HAS_INCYC_PAGE__EXTE = makeString("CREATE TABLE HAS_INCYC_PAGE (EXTERNAL_ID varchar(2048) NOT NULL PRIMARY KEY);");

    static private final SubLString $str_alt949$cyclId________ = makeString("cyclId=\"(.*?)\"");

    static private final SubLString $str_alt950$__ = makeString(", ");

    static private final SubLString $str_alt951$INSERT_INTO_InCyc_Pages__EXTERNAL = makeString("INSERT INTO InCyc_Pages (EXTERNAL_ID) VALUES ~A;~%");

    static private final SubLString $str_alt952$__ = makeString("('");

    static private final SubLString $str_alt953$__ = makeString("')");

    static private final SubLString $str_alt954$Mapping_public_fact_sheet_files__ = makeString("Mapping public fact-sheet files...");

    static private final SubLString $str_alt955$var_searchData____ = makeString("var searchData = {");

    static private final SubLString $str_alt957$_ = makeString(",");

    static private final SubLString $str_alt958$_ = makeString("}");

    static private final SubLList $list_alt959 = list(cons(makeString("'"), makeString("\\\'")), cons(makeString(","), makeString("\\,")));

    static private final SubLString $str_alt960$__A_ = makeString("'~A'");

    static private final SubLString $str_alt961$___ = makeString(": [");

    static private final SubLString $str_alt962$_ = makeString("]");

    static private final SubLString $str_alt963$checking_for_fact_sheets = makeString("checking for fact-sheets");

    static private final SubLList $list_alt969 = list(reader_make_constant_shell("WorldGeographyDualistMt"));

    static private final SubLList $list_alt974 = list(reader_make_constant_shell("agentDocumentationDataSentence"), reader_make_constant_shell("collectionDocumentationDataSentence"));

    static private final SubLString $str_alt976$______info_html = makeString("../../info.html");

    static private final SubLString $str_alt977$______styles_css = makeString("../../styles.css");

    static private final SubLString $str_alt978$______index_html = makeString("../../index.html");

    static private final SubLString $str_alt979$______img_inCyc_beta_png = makeString("../../img/inCyc_beta.png");

    static private final SubLList $list_alt980 = list(makeString("inCyc(beta)"));

    static private final SubLList $list_alt981 = list(reader_make_constant_shell("FamousHuman"), reader_make_constant_shell("GeopoliticalEntity"), reader_make_constant_shell("EcologicalRegion"), reader_make_constant_shell("LandTopographicalFeature"), reader_make_constant_shell("TouristAttraction"),
	    reader_make_constant_shell("InternationalOrganizationOfCountries"), reader_make_constant_shell("ChemicalSubstanceType"), reader_make_constant_shell("PhysiologicalConditionType"));

    static private final SubLList $list_alt982 = list(reader_make_constant_shell("Terrorist"), reader_make_constant_shell("PornStar"));

    static private final SubLList $list_alt983 = list(reader_make_constant_shell("OpenCycExcludedTerm"), reader_make_constant_shell("CCFConstant"), reader_make_constant_shell("IndeterminateTerm"));

    static private final SubLList $list_alt984 = list(reader_make_constant_shell("TOMES"), reader_make_constant_shell("BACWORTHsEncyclopedia"));

    static private final SubLList $list_alt986 = list(makeKeyword("DEFAULT-STARTING-POINTS-FILENAME"), makeString("data/fact-sheets/public/incyc/starting-points.tsv"), makeKeyword("CATEGORY-LABELS"),
	    list(cons(reader_make_constant_shell("collectionDocumentationDataSentence"), makeString("Manually Written Notes")), cons(reader_make_constant_shell("agentDocumentationDataSentence"), makeString("Manually Written Notes"))), makeKeyword("SORT-FN"),
	    makeSymbol("INCYC-HIGHER-PRIORITY-CATEGORY?"));

    static private final SubLString $str_alt988$analyst_knowledge_base = makeString("analyst-knowledge-base");

    static private final SubLString $str_alt989$___styles_css = makeString("../styles.css");

    static private final SubLList $list_alt990 = list(reader_make_constant_shell("Terrorist"), reader_make_constant_shell("TerroristGroup"), reader_make_constant_shell("TerroristAct"));

    static private final SubLList $list_alt991 = list(reader_make_constant_shell("CCFConstant"));

    static private final SubLString $str_alt992$data_fact_sheets_public_analyst_k = makeString("data/fact-sheets/public/analyst-knowledge-base/starting-points.tsv");

    static private final SubLString $str_alt993$Public_Fact_Sheet_Updater_for_ = makeString("Public Fact Sheet Updater for ");

    static private final SubLString $str_alt994$_Fact_Sheets = makeString(" Fact Sheets");

    static private final SubLString $str_alt996$Ensuring_public_fact_sheets_are_i = makeString("Ensuring public fact sheets are in place...");

    static private final SubLString $str_alt998$_a_href__ = makeString("<a href=\"");

    static private final SubLString $str_alt999$__ = makeString("\">");

    static private final SubLString $str_alt1000$Updating__A_public_fact_sheets_fi = makeString("Updating ~A public fact sheets file #~D of ~S");

    static private final SubLString $str_alt1001$_public_fact_sheets_from_ = makeString(" public fact sheets from ");

    static private final SubLString $str_alt1002$Couldn_t_find_term_for_id___S__ = makeString("Couldn't find term for id: ~S~%");

    static private final SubLString $str_alt1003$Couldn_t_find_datafile___S = makeString("Couldn't find datafile: ~S");

    static private final SubLString $str_alt1004$Writing_fact_sheet_starting_point = makeString("Writing fact-sheet starting-point data...");

    static private final SubLString $str_alt1005$___ = makeString("../");

    static private final SubLString $str_alt1010$Dumping_fact_sheet_sentences_to_ = makeString("Dumping fact-sheet sentences to ");

    static private final SubLString $str_alt1011$Data_for__S_has__D_categories_ = makeString("Data for ~S has ~D categories.");

    static private final SubLList $list_alt1012 = cons(makeSymbol("CATEGORY"), makeSymbol("CATEGORY-DATA"));

    static private final SubLString $str_alt1013$Doing__S___D_paragraphs___D_sente = makeString("Doing ~S: ~D paragraphs, ~D sentences");

    static private final SubLSymbol $sym1014$_ = makeSymbol("+");

    static private final SubLString $str_alt1016$This_paragraph_has__D_sentences_ = makeString("This paragraph has ~D sentences.");

    static private final SubLList $list_alt1017 = cons(makeSymbol("CYCL-SENTENCE"), makeUninternedSymbol("VALUE"));

    static private final SubLString $str_alt1018$Non_sentence__S_in__S_for__S = makeString("Non-sentence ~S in ~S for ~S");

    private static final SubLSymbol FACT_SHEET_KITCHEN_SINK_TEST_CASE = makeSymbol("FACT-SHEET-KITCHEN-SINK-TEST-CASE");

    static private final SubLList $list_alt1021 = list(list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("SETUP"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CLEANUP"), NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("MISSING-IMAGE-ROOT-TEST"), NIL, makeKeyword("PROTECTED")), list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("CREATE-FACT-SHEET-TEST"), NIL, makeKeyword("PROTECTED")),
	    list(makeSymbol("DEF-INSTANCE-METHOD"), makeSymbol("GENERATE-TEXT-WITHIN-FACT-SHEET-PARAPHRASE-TEST"), NIL, makeKeyword("PROTECTED")));

    static private final SubLSymbol $sym1030$SUBLOOP_RESERVED_INITIALIZE_FACT_SHEET_KITCHEN_SINK_TEST_CASE_CLA = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-FACT-SHEET-KITCHEN-SINK-TEST-CASE-CLASS");

    static private final SubLSymbol $sym1035$SUBLOOP_RESERVED_INITIALIZE_FACT_SHEET_KITCHEN_SINK_TEST_CASE_INS = makeSymbol("SUBLOOP-RESERVED-INITIALIZE-FACT-SHEET-KITCHEN-SINK-TEST-CASE-INSTANCE");

    private static final SubLSymbol MISSING_IMAGE_ROOT_TEST = makeSymbol("MISSING-IMAGE-ROOT-TEST");

    private static final SubLSymbol CREATE_FACT_SHEET_TEST = makeSymbol("CREATE-FACT-SHEET-TEST");

    private static final SubLSymbol GENERATE_TEXT_WITHIN_FACT_SHEET_PARAPHRASE_TEST = makeSymbol("GENERATE-TEXT-WITHIN-FACT-SHEET-PARAPHRASE-TEST");

    static private final SubLString $str_alt1039$missing_from_parse_result___S__ = makeString("missing from parse result: ~S~%");

    static private final SubLList $list_alt1040 = list(makeSymbol("DESIRED-STRING"), makeSymbol("DESIRED-CYCL"));

    static private final SubLSymbol $sym1041$FACT_SHEETS_TERM_FROM_STRING_CONTAINS_ = makeSymbol("FACT-SHEETS-TERM-FROM-STRING-CONTAINS?");

    static private final SubLList $list_alt1043 = list(
	    new SubLObject[] { list(list(makeString("Where is Osama bin Laden?"), list(list(makeString("Osama bin Laden"), list(reader_make_constant_shell("OsamaBinLaden"))))), T), list(list(makeString("Israel"), list(list(makeString("Israel"), list(reader_make_constant_shell("Israel"))))), T),
		    list(list(makeString("In which cities have Hezbollah and Hamas carried out attacks?"), list(list(makeString("Hezbollah"), list(reader_make_constant_shell("LebaneseHizballah"))), list(makeString("Hamas"), list(reader_make_constant_shell("TerroristOrganization-Hamas"))))), T),
		    list(list(makeString("When was George Bush elected in the United States?"),
			    list(list(makeString("George Bush"), list(reader_make_constant_shell("GeorgeHWBush"), reader_make_constant_shell("GeorgeWBush"))), list(makeString("the United States"), list(reader_make_constant_shell("UnitedStatesOfAmerica"))))), T),
		    list(list(makeString("22 mmhg"), list(list(makeString("22 mmhg"), list(list(reader_make_constant_shell("MM-Hg"), makeInteger(22)))))), T),
		    list(list(makeString("22 millimeters of mercury"), list(list(makeString("22 millimeters of mercury"), list(list(reader_make_constant_shell("MM-Hg"), makeInteger(22)))))), T),
		    list(list(makeString(".22 millimeters of mercury"), list(list(makeString(".22 millimeters of mercury"), list(list(reader_make_constant_shell("MM-Hg"), makeDouble(0.22)))))), T),
		    list(list(makeString(".3 cm"), list(list(makeString(".3 cm"), list(list(list(reader_make_constant_shell("Centi"), reader_make_constant_shell("Meter")), makeDouble(0.3)))))), T),
		    list(list(makeString("0.3 cm"), list(list(makeString("0.3 cm"), list(list(list(reader_make_constant_shell("Centi"), reader_make_constant_shell("Meter")), makeDouble(0.3)))))), T) });
}

/**
 * Total time: 16327 ms synthetic
 */
