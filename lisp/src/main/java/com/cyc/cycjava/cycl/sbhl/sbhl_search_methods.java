/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 */
package com.cyc.cycjava.cycl.sbhl;


import static com.cyc.cycjava.cycl.constant_handles.reader_make_constant_shell;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.append;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.cons;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.nconc;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.rplacd;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.apply;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntryKey;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntrySetIterator;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntryValue;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.iteratorHasNext;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.iteratorNextEntry;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.releaseEntrySetIterator;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.add;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.subtract;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow.format;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.length;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.remove;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.remove_if;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_function;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.$is_thread_performing_cleanupP$;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.getValuesAsVector;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.restoreValuesFromVector;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeBoolean;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeString;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeSymbol;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.copy_list;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.intersection;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.last;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.member;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.set_difference;
import static com.cyc.tool.subl.util.SubLFiles.declareFunction;
import static com.cyc.tool.subl.util.SubLFiles.defparameter;

import java.util.Iterator;
import java.util.Map;

import com.cyc.cycjava.cycl.V12;
import com.cyc.cycjava.cycl.cardinality_estimates;
import com.cyc.cycjava.cycl.keyhash_utilities;
import com.cyc.cycjava.cycl.list_utilities;
import com.cyc.cycjava.cycl.mt_relevance_macros;
import com.cyc.cycjava.cycl.queues;
import com.cyc.cycjava.cycl.set;
import com.cyc.cycjava.cycl.set_contents;
import com.cyc.cycjava.cycl.subl_promotions;
import com.cyc.cycjava.cycl.inference.harness.inference_metrics;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Mapping;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.ReadWriteLocks;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.UnaryFunction;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLFiles.LispMethod;
import com.cyc.tool.subl.util.SubLTrampolineFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;


public final class sbhl_search_methods extends SubLTranslatedFile implements V12 {
    public static final SubLFile me = new sbhl_search_methods();

 public static final String myName = "com.cyc.cycjava.cycl.sbhl.sbhl_search_methods";


    // defparameter
    @LispMethod(comment = "defparameter")
    public static final SubLSymbol $sbhl_search_self_incompatibility_check_disabledP$ = makeSymbol("*SBHL-SEARCH-SELF-INCOMPATIBILITY-CHECK-DISABLED?*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $debug_sbhl_cache_inconsistency_problemP$ = makeSymbol("*DEBUG-SBHL-CACHE-INCONSISTENCY-PROBLEM?*");

    static private final SubLString $str3$_A_is_not_a__A = makeString("~A is not a ~A");

    static private final SubLString $$$continue_anyway = makeString("continue anyway");

    static private final SubLString $str8$_A_is_not_a_valid__sbhl_type_erro = makeString("~A is not a valid *sbhl-type-error-action* value");

    private static final SubLObject $$True_JustificationTruth = reader_make_constant_shell("True-JustificationTruth");

    private static final SubLSymbol SBHL_PUSH_ONTO_RESULT = makeSymbol("SBHL-PUSH-ONTO-RESULT");

    private static final SubLSymbol SBHL_FALSE_TV_P = makeSymbol("SBHL-FALSE-TV-P");

    private static final SubLObject $$False_JustificationTruth = reader_make_constant_shell("False-JustificationTruth");

    static private final SubLString $str15$Node__a_does_not_pass_sbhl_type_t = makeString("Node ~a does not pass sbhl-type-test ~a~%");

    private static final SubLSymbol SBHL_PUSH_ONTO_RESULT_WITH_PRUNE = makeSymbol("SBHL-PUSH-ONTO-RESULT-WITH-PRUNE");

    private static final SubLSymbol SBHL_GATHER_DEAD_END_NODES = makeSymbol("SBHL-GATHER-DEAD-END-NODES");

    private static final SubLSymbol SBHL_GATHER_FIRST_NON_NIL_RESULT = makeSymbol("SBHL-GATHER-FIRST-NON-NIL-RESULT");

    private static final SubLSymbol SBHL_LEAF_INSTANCES_SWEEP = makeSymbol("SBHL-LEAF-INSTANCES-SWEEP");

    private static final SubLSymbol SBHL_SIMPLE_TRUE_SEARCH_AND_UNWIND = makeSymbol("SBHL-SIMPLE-TRUE-SEARCH-AND-UNWIND");

    private static final SubLSymbol SBHL_APPLY_COMPOSE_FN = makeSymbol("SBHL-APPLY-COMPOSE-FN");

    private static final SubLSymbol SBHL_APPLY_COMPOSE_FN_IF = makeSymbol("SBHL-APPLY-COMPOSE-FN-IF");

    private static final SubLSymbol SBHL_PUSH_UNWIND_ONTO_RESULT = makeSymbol("SBHL-PUSH-UNWIND-ONTO-RESULT");

    private static final SubLSymbol SBHL_APPLY_COMPOSE_FN_AND_COMBINE_WITH_RESULT = makeSymbol("SBHL-APPLY-COMPOSE-FN-AND-COMBINE-WITH-RESULT");

    private static final SubLSymbol SBHL_GATHER_FIRST_NON_NIL_RESULT_WITH_PRUNE = makeSymbol("SBHL-GATHER-FIRST-NON-NIL-RESULT-WITH-PRUNE");

    private static final SubLSymbol SBHL_PUSH_ONTO_RESULT_IF = makeSymbol("SBHL-PUSH-ONTO-RESULT-IF");

    private static final SubLSymbol SBHL_PUSH_ONTO_RESULT_IF_AND_STOP_UNLESS = makeSymbol("SBHL-PUSH-ONTO-RESULT-IF-AND-STOP-UNLESS");

    private static final SubLSymbol SBHL_MARKED_IN_TARGET_SPACE_P = makeSymbol("SBHL-MARKED-IN-TARGET-SPACE-P");

    static private final SubLSymbol $sym32$MEMBER_ = makeSymbol("MEMBER?");

    private static final SubLSymbol SBHL_STOP_AT_HORIZON = makeSymbol("SBHL-STOP-AT-HORIZON");



    static private final SubLSymbol $sym38$_ = makeSymbol("+");

    private static final SubLSymbol GENL_CARDINALITY = makeSymbol("GENL-CARDINALITY");

    private static final SubLSymbol SBHL_PUSH_DEPENDENT_NODES_ONTO_RESULT = makeSymbol("SBHL-PUSH-DEPENDENT-NODES-ONTO-RESULT");

    private static final SubLSymbol SBHL_CHECK_TARGET_MARKING_FOR_DEPENDENCE = makeSymbol("SBHL-CHECK-TARGET-MARKING-FOR-DEPENDENCE");

    private static final SubLString $str42$__sbhl_predicate_relation_p__cach = makeString("~&sbhl-predicate-relation-p: cache ~S differs from sbhl ~S!~%");

    private static final SubLString $str43$_______cached___S__clet__cached_r = makeString("~&     cached: ~S (clet (cached-result) (possibly-with-sbhl-mt-relevance ~S (csetq cached-result (sbhl-cached-predicate-relation-p ~S ~S ~S))) cached-result)~%");

    private static final SubLString $str44$___non_cached___S__clet__non_cach = makeString("~& non-cached: ~S (clet (non-cached-result) (with-new-sbhl-space (with-sbhl-search-module (get-sbhl-module ~S) (with-sbhl-forward-true-search ~S ~S (csetq non-cached-result (sbhl-path-from-node-to-node-p ~S ~S))))) non-cached-result)~%");

    private static final SubLSymbol SBHL_MARK_NODE_IN_PRECOMPUTE_SPACE = makeSymbol("SBHL-MARK-NODE-IN-PRECOMPUTE-SPACE");

    private static final SubLSymbol SBHL_NODE_IS_GOAL_NODE = makeSymbol("SBHL-NODE-IS-GOAL-NODE");



    private static final SubLSymbol SBHL_NODE_MARKED_AS_GOAL_NODE = makeSymbol("SBHL-NODE-MARKED-AS-GOAL-NODE");

    private static final SubLSymbol SBHL_PREDICATE_RELATION_P = makeSymbol("SBHL-PREDICATE-RELATION-P");

    private static final SubLSymbol SBHL_FALSE_PREDICATE_RELATION_P = makeSymbol("SBHL-FALSE-PREDICATE-RELATION-P");

    private static final SubLSymbol SBHL_IMPLIED_DISJOINS_RELATION_P = makeSymbol("SBHL-IMPLIED-DISJOINS-RELATION-P");

    private static final SubLSymbol SBHL_IMPLIED_FALSE_PREDICATE_RELATION_P = makeSymbol("SBHL-IMPLIED-FALSE-PREDICATE-RELATION-P");

    private static final SubLString $str54$Invalid_TV_argument__a__or__sbhl_ = makeString("Invalid TV argument ~a, or *sbhl-tv* ~a");

    private static final SubLSymbol SBHL_PREDICATE_RELATION_WITH_ANY_P = makeSymbol("SBHL-PREDICATE-RELATION-WITH-ANY-P");

    private static final SubLString $str56$_A_is_neither_SET_P_nor_LISTP_ = makeString("~A is neither SET-P nor LISTP.");





    // Definitions
    /**
     *
     *
     * @return listp; all forward true nodes accessbile to NODE via MODULE.
     */
    @LispMethod(comment = "@return listp; all forward true nodes accessbile to NODE via MODULE.")
    public static final SubLObject sbhl_all_forward_true_nodes_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_1 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_4 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_5 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_6 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_7 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_8 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_9 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_10 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_11 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_12 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_13 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_14 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_15 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject _prev_bind_0_16 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_17 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_2_18 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node);
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_18, thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_17, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_16, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_15, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_14, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_13, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_12, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_11, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_10, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_9, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_8, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_7, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_6, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_5, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_4, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_3, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_2, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_1, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    // Definitions
    /**
     *
     *
     * @return listp; all forward true nodes accessbile to NODE via MODULE.
     */
    @LispMethod(comment = "@return listp; all forward true nodes accessbile to NODE via MODULE.")
    public static SubLObject sbhl_all_forward_true_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$2 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$3 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$3 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$4 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$4 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$4 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$5 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$6 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$5 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$5 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$14 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$15 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$7 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$6 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$6 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                            result = sbhl_transitive_closure(node);
                                        } finally {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_$6, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$6, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$7, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$15, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$14, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$5, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$5, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$6, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$5, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$4, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$4, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$4, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$3, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$3, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$2, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$3, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$2, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; all forward false nodes accessbile to NODE via MODULE.
     */
    @LispMethod(comment = "@return listp; all forward false nodes accessbile to NODE via MODULE.")
    public static final SubLObject sbhl_all_forward_false_nodes_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_19 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_20 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_21 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_22 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_23 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_false_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_24 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_25 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_26 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_27 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_28 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_29 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_30 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_31 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_32 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_33 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject _prev_bind_0_34 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_35 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_2_36 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node);
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_36, thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_35, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_34, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_33, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_32, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_31, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_30, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_29, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_28, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_27, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_26, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_25, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_24, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_23, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_22, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_21, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_20, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_19, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; all forward false nodes accessbile to NODE via MODULE.
     */
    @LispMethod(comment = "@return listp; all forward false nodes accessbile to NODE via MODULE.")
    public static SubLObject sbhl_all_forward_false_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$19 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$20 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$21 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$20 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$21 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$21 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$22 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$22 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$22 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$23 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$24 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$23 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$23 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$32 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$33 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$25 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$24 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$24 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                            result = sbhl_transitive_closure(node);
                                        } finally {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_$24, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$24, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$25, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$33, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$32, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$23, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$23, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$24, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$23, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$22, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$22, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$22, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$21, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$21, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$20, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$21, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$20, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$19, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; all backward true nodes accessbile to NODE via MODULE.
     */
    @LispMethod(comment = "@return listp; all backward true nodes accessbile to NODE via MODULE.")
    public static final SubLObject sbhl_all_backward_true_nodes_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_37 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_38 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_39 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_40 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_41 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_42 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_43 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_44 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_45 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_46 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_47 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_48 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_49 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_50 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_51 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject _prev_bind_0_52 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_53 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_2_54 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node);
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_54, thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_53, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_52, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_51, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_50, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_49, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_48, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_47, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_46, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_45, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_44, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_43, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_42, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_41, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_40, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_39, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_38, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_37, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; all backward true nodes accessbile to NODE via MODULE.
     */
    @LispMethod(comment = "@return listp; all backward true nodes accessbile to NODE via MODULE.")
    public static SubLObject sbhl_all_backward_true_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$37 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$38 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$39 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$38 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$39 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$39 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$40 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$40 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$40 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$41 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$42 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$41 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$41 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$50 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$51 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$43 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$42 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$42 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                            result = sbhl_transitive_closure(node);
                                        } finally {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_$42, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$42, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$43, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$51, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$50, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$41, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$41, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$42, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$41, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$40, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$40, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$40, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$39, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$39, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$38, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$39, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$38, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$37, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; all backward false nodes accessbile to NODE via MODULE.
     */
    @LispMethod(comment = "@return listp; all backward false nodes accessbile to NODE via MODULE.")
    public static final SubLObject sbhl_all_backward_false_nodes_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_55 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_56 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_57 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_58 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_59 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_false_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_60 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_61 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_62 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_63 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_64 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_65 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_66 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_67 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_68 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_69 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject _prev_bind_0_70 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_71 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_2_72 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node);
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_72, thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_71, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_70, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_69, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_68, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_67, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_66, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_65, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_64, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_63, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_62, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_61, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_60, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_59, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_58, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_57, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_56, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_55, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; all backward false nodes accessbile to NODE via MODULE.
     */
    @LispMethod(comment = "@return listp; all backward false nodes accessbile to NODE via MODULE.")
    public static SubLObject sbhl_all_backward_false_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$55 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$56 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$57 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$56 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$57 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$57 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$58 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$58 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$58 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$59 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$60 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$59 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$59 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$68 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$69 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$61 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$60 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$60 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                            result = sbhl_transitive_closure(node);
                                        } finally {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_$60, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$60, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$61, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$69, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$68, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$59, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$59, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$60, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$59, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$58, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$58, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$58, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$57, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$57, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$56, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$57, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$56, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$55, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; the transitive closure of NODE with current search module, direction, and truth.
     */
    @LispMethod(comment = "@return listp; the transitive closure of NODE with current search module, direction, and truth.")
    public static final SubLObject sbhl_transitive_closure_alt(SubLObject node) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                        try {
                            if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                {
                                    SubLObject _prev_bind_0_73 = sbhl_search_vars.$sbhl_unmarking_search_p$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_unmarking_search_p$.bind(NIL, thread);
                                        sbhl_search_utilities.apply_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_behavior(), node);
                                    } finally {
                                        sbhl_search_vars.$sbhl_unmarking_search_p$.rebind(_prev_bind_0_73, thread);
                                    }
                                }
                            } else {
                                sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            }
                        } finally {
                            {
                                SubLObject _prev_bind_0_74 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                } finally {
                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_74, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; the transitive closure of NODE with current search module, direction, and truth.
     */
    @LispMethod(comment = "@return listp; the transitive closure of NODE with current search module, direction, and truth.")
    public static SubLObject sbhl_transitive_closure(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
            try {
                if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                    final SubLObject _prev_bind_0_$73 = sbhl_search_vars.$sbhl_unmarking_search_p$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_unmarking_search_p$.bind(NIL, thread);
                        sbhl_search_utilities.apply_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_behavior(), node);
                    } finally {
                        sbhl_search_vars.$sbhl_unmarking_search_p$.rebind(_prev_bind_0_$73, thread);
                    }
                } else {
                    sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                }
            } finally {
                final SubLObject _prev_bind_0_$74 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values = getValuesAsVector();
                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                    restoreValuesFromVector(_values);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$74, thread);
                }
            }
        } finally {
            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; all forward true nodes accessbile to NODE via MODULE.
     */
    @LispMethod(comment = "@return listp; all forward true nodes accessbile to NODE via MODULE.")
    public static final SubLObject sbhl_all_forward_true_nodes_with_prune_alt(SubLObject module, SubLObject node, SubLObject compose_fn, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_75 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_76 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_77 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_78 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_79 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_80 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_81 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_82 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_83 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_84 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_85 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_86 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_87 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_88 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_89 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject _prev_bind_0_90 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_91 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_2_92 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_3_93 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    sbhl_search_vars.$sbhl_compose_fn$.bind(compose_fn, thread);
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT_WITH_PRUNE, thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node);
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_93, thread);
                                                                                                    sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_92, thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_91, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_90, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_89, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_88, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_87, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_86, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_85, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_84, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_83, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_82, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_81, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_80, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_79, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_78, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_77, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_76, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_75, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; all forward true nodes accessbile to NODE via MODULE.
     */
    @LispMethod(comment = "@return listp; all forward true nodes accessbile to NODE via MODULE.")
    public static SubLObject sbhl_all_forward_true_nodes_with_prune(final SubLObject module, final SubLObject node, final SubLObject compose_fn, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$75 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$76 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$77 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$76 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$77 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$77 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$78 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$78 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$78 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$79 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$80 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$79 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$79 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$88 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$89 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$81 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$80 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$80 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$89 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(compose_fn, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT_WITH_PRUNE, thread);
                                            result = sbhl_transitive_closure(node);
                                        } finally {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$89, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_$80, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$80, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$81, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$89, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$88, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$79, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$79, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$80, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$79, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$78, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$78, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$78, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$77, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$77, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$76, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$77, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$76, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$75, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; all backward true nodes accessbile to NODE via MODULE.
     */
    @LispMethod(comment = "@return listp; all backward true nodes accessbile to NODE via MODULE.")
    public static final SubLObject sbhl_all_backward_true_nodes_with_prune_alt(SubLObject module, SubLObject node, SubLObject compose_fn, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_94 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_95 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_96 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_97 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_98 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_99 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_100 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_101 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_102 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_103 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_104 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_105 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_106 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_107 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_108 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject _prev_bind_0_109 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_110 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_2_111 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_3_112 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    sbhl_search_vars.$sbhl_compose_fn$.bind(compose_fn, thread);
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT_WITH_PRUNE, thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node);
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_112, thread);
                                                                                                    sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_111, thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_110, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_109, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_108, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_107, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_106, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_105, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_104, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_103, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_102, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_101, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_100, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_99, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_98, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_97, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_96, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_95, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_94, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; all backward true nodes accessbile to NODE via MODULE.
     */
    @LispMethod(comment = "@return listp; all backward true nodes accessbile to NODE via MODULE.")
    public static SubLObject sbhl_all_backward_true_nodes_with_prune(final SubLObject module, final SubLObject node, final SubLObject compose_fn, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$94 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$95 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$96 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$95 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$96 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$96 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$97 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$97 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$97 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$98 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$99 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$98 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$98 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$107 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$108 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$100 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$99 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$99 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$108 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(compose_fn, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT_WITH_PRUNE, thread);
                                            result = sbhl_transitive_closure(node);
                                        } finally {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$108, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_$99, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$99, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$100, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$108, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$107, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$98, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$98, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$99, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$98, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$97, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$97, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$97, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$96, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$96, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$95, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$96, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$95, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$94, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; the union of forward true nodes accessible to each of NODES via MODULE.
     */
    @LispMethod(comment = "@return listp; the union of forward true nodes accessible to each of NODES via MODULE.")
    public static final SubLObject sbhl_union_all_forward_true_nodes_alt(SubLObject module, SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_113 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_114 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_115 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_116 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_117 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_118 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_119 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_120 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_121 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_122 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_123 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_124 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_125 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_126 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_127 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject _prev_bind_0_128 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_129 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_2_130 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_union_nodes_transitive_closures(nodes);
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_130, thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_129, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_128, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_127, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_126, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_125, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_124, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_123, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_122, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_121, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_120, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_119, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_118, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_117, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_116, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_115, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_114, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_113, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; the union of forward true nodes accessible to each of NODES via MODULE.
     */
    @LispMethod(comment = "@return listp; the union of forward true nodes accessible to each of NODES via MODULE.")
    public static SubLObject sbhl_union_all_forward_true_nodes(final SubLObject module, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$113 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$114 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$115 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$114 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$115 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$115 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$116 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$116 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$116 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$117 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$118 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$117 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$117 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$126 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$127 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$119 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$118 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$118 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                            result = sbhl_union_nodes_transitive_closures(nodes);
                                        } finally {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_$118, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$118, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$119, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$127, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$126, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$117, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$117, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$118, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$117, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$116, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$116, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$116, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$115, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$115, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$114, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$115, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$114, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$113, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; the union of backward true nodes accessible to each of NODES via MODULE.
     */
    @LispMethod(comment = "@return listp; the union of backward true nodes accessible to each of NODES via MODULE.")
    public static final SubLObject sbhl_union_all_backward_true_nodes_alt(SubLObject module, SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_131 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_132 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_133 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_134 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_135 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_136 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_137 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_138 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_139 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_140 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_141 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_142 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_143 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_144 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_145 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject _prev_bind_0_146 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_147 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_2_148 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_union_nodes_transitive_closures(nodes);
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_148, thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_147, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_146, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_145, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_144, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_143, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_142, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_141, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_140, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_139, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_138, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_137, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_136, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_135, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_134, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_133, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_132, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_131, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; the union of backward true nodes accessible to each of NODES via MODULE.
     */
    @LispMethod(comment = "@return listp; the union of backward true nodes accessible to each of NODES via MODULE.")
    public static SubLObject sbhl_union_all_backward_true_nodes(final SubLObject module, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$131 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$132 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$133 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$132 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$133 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$133 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$134 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$134 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$134 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$135 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$136 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$135 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$135 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$144 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$145 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$137 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$136 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$136 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                            result = sbhl_union_nodes_transitive_closures(nodes);
                                        } finally {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_$136, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$136, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$137, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$145, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$144, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$135, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$135, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$136, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$135, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$134, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$134, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$134, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$133, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$133, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$132, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$133, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$132, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$131, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; the union of all transitive closures of NODES.
     */
    @LispMethod(comment = "@return listp; the union of all transitive closures of NODES.")
    public static final SubLObject sbhl_union_nodes_transitive_closures_alt(SubLObject nodes) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                        sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                        try {
                            {
                                SubLObject cdolist_list_var = nodes;
                                SubLObject node = NIL;
                                for (node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , node = cdolist_list_var.first()) {
                                    if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                        {
                                            SubLObject _prev_bind_0_149 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                            SubLObject _prev_bind_1_150 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                                            } finally {
                                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_1_150, thread);
                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_149, thread);
                                            }
                                        }
                                    } else {
                                        sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    }
                                }
                            }
                        } finally {
                            {
                                SubLObject _prev_bind_0_151 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                } finally {
                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_151, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; the union of all transitive closures of NODES.
     */
    @LispMethod(comment = "@return listp; the union of all transitive closures of NODES.")
    public static SubLObject sbhl_union_nodes_transitive_closures(final SubLObject nodes) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
            sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
            try {
                SubLObject cdolist_list_var = nodes;
                SubLObject node = NIL;
                node = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                        final SubLObject _prev_bind_0_$149 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$150 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                            sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                            sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                        } finally {
                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_1_$150, thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_$149, thread);
                        }
                    } else {
                        sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    node = cdolist_list_var.first();
                } 
            } finally {
                final SubLObject _prev_bind_0_$150 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values = getValuesAsVector();
                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                    restoreValuesFromVector(_values);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$150, thread);
                }
            }
        } finally {
            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there are no nodes accessible to NODE.
     */
    @LispMethod(comment = "@return booleanp; whether there are no nodes accessible to NODE.")
    public static final SubLObject sbhl_gather_dead_end_nodes_alt(SubLObject node) {
        if (NIL != sbhl_link_methods.no_accessible_sbhl_nodes_p(node)) {
            sbhl_search_utilities.sbhl_push_onto_result(node);
        }
        return NIL;
    }

    /**
     *
     *
     * @return booleanp; whether there are no nodes accessible to NODE.
     */
    @LispMethod(comment = "@return booleanp; whether there are no nodes accessible to NODE.")
    public static SubLObject sbhl_gather_dead_end_nodes(final SubLObject node) {
        if (NIL != sbhl_link_methods.no_accessible_sbhl_nodes_p(node)) {
            sbhl_search_utilities.sbhl_push_onto_result(node);
        }
        return NIL;
    }

    /**
     *
     *
     * @return listp. the terminal nodes accessible to NODE.
     */
    @LispMethod(comment = "@return listp. the terminal nodes accessible to NODE.")
    public static final SubLObject sbhl_extremes_alt(SubLObject node) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_GATHER_DEAD_END_NODES, thread);
                        sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                        result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node);
                    } finally {
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp. the terminal nodes accessible to NODE.
     */
    @LispMethod(comment = "@return listp. the terminal nodes accessible to NODE.")
    public static SubLObject sbhl_extremes(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_GATHER_DEAD_END_NODES, thread);
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            result = sbhl_transitive_closure(node);
        } finally {
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; the most subordinate nodes accessible to NODE. @see sbhl-extremes.
     */
    @LispMethod(comment = "@return listp; the most subordinate nodes accessible to NODE. @see sbhl-extremes.")
    public static final SubLObject sbhl_leaf_nodes_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_152 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_153 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_154 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_155 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_156 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_157 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_158 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_159 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_160 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_161 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_162 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_163 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_164 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_165 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_166 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_extremes(node);
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_166, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_165, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_164, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_163, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_162, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_161, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_160, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_159, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_158, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_157, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_156, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_155, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_154, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_153, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_152, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; the most subordinate nodes accessible to NODE. @see sbhl-extremes.
     */
    @LispMethod(comment = "@return listp; the most subordinate nodes accessible to NODE. @see sbhl-extremes.")
    public static SubLObject sbhl_leaf_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$152 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$153 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$154 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$153 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$154 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$154 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$155 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$155 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$155 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$156 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$157 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$156 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$156 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$165 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$166 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_extremes(node);
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$166, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$165, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$156, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$156, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$157, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$156, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$155, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$155, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$155, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$154, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$154, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$153, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$154, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$153, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$152, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; the most superordinate nodes accessible to NODE. @see sbhl-extremes.
     */
    @LispMethod(comment = "@return listp; the most superordinate nodes accessible to NODE. @see sbhl-extremes.")
    public static final SubLObject sbhl_root_nodes_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_167 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_168 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_169 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_170 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_171 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_172 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_173 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_174 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_175 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_176 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_177 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_178 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_179 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_180 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_181 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_extremes(node);
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_181, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_180, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_179, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_178, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_177, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_176, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_175, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_174, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_173, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_172, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_171, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_170, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_169, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_168, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_167, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; the most superordinate nodes accessible to NODE. @see sbhl-extremes.
     */
    @LispMethod(comment = "@return listp; the most superordinate nodes accessible to NODE. @see sbhl-extremes.")
    public static SubLObject sbhl_root_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$167 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$168 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$169 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$168 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$169 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$169 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$170 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$170 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$170 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$171 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$172 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$171 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$171 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$180 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$181 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_extremes(node);
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$181, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$180, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$171, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$171, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$172, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$171, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$170, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$170, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$170, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$169, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$169, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$168, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$169, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$168, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$167, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; the max/summary MODULE relations for NODE.
     */
    @LispMethod(comment = "@return listp; the max/summary MODULE relations for NODE.")
    public static final SubLObject sbhl_max_true_disjoins_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_182 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_183 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_184 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_185 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_186 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_187 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_188 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_189 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_190 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_191 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_192 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_193 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_194 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_195 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_196 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject _prev_bind_0_197 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_198 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                                                                                    sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                                                                                                    try {
                                                                                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                                                            result = sbhl_search_utilities.sbhl_sweep_and_gather_disjoins(node);
                                                                                                        } else {
                                                                                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        }
                                                                                                    } finally {
                                                                                                        {
                                                                                                            SubLObject _prev_bind_0_199 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                                            try {
                                                                                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                                                                                result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                                                                                            } finally {
                                                                                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_199, thread);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_1_198, thread);
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0_197, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_196, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_195, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_194, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_193, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_192, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_191, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_190, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_189, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_188, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_187, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_186, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_185, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_184, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_183, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_182, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), result, mt, tv, UNPROVIDED);
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; the max/summary MODULE relations for NODE.
     */
    @LispMethod(comment = "@return listp; the max/summary MODULE relations for NODE.")
    public static SubLObject sbhl_max_true_disjoins(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$182 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$183 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$184 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$183 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$184 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$184 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$185 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$185 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$185 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$186 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$187 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$186 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$186 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$195 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$196 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$188 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$187 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                            sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                                            try {
                                                if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                    result = sbhl_search_utilities.sbhl_sweep_and_gather_disjoins(node);
                                                } else {
                                                    sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                }
                                            } finally {
                                                final SubLObject _prev_bind_0_$189 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                                    final SubLObject _values = getValuesAsVector();
                                                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                                    restoreValuesFromVector(_values);
                                                } finally {
                                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$189, thread);
                                                }
                                            }
                                        } finally {
                                            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_1_$187, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0_$188, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$196, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$195, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$186, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$186, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$187, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$186, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$185, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$185, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$185, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$184, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$184, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$183, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$184, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$183, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$182, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        result = sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), result, mt, tv, UNPROVIDED);
        return result;
    }

    /**
     *
     *
     * @return listp; the min/summary false MODULE relations for NODE.
     */
    @LispMethod(comment = "@return listp; the min/summary false MODULE relations for NODE.")
    public static final SubLObject sbhl_min_asserted_false_disjoins_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_200 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_201 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_202 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_203 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_204 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_false_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_205 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_206 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_207 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_208 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_209 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_210 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_211 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_212 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_213 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_214 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject _prev_bind_0_215 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_216 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                                                                                    sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                                                                                                    try {
                                                                                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                                                            result = sbhl_search_utilities.sbhl_sweep_and_gather_disjoins(node);
                                                                                                        } else {
                                                                                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        }
                                                                                                    } finally {
                                                                                                        {
                                                                                                            SubLObject _prev_bind_0_217 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                                            try {
                                                                                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                                                                                result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                                                                                            } finally {
                                                                                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_217, thread);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_1_216, thread);
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0_215, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_214, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_213, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_212, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_211, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_210, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_209, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_208, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_207, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_206, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_205, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_204, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_203, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_202, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_201, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_200, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), result, mt, tv);
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; the min/summary false MODULE relations for NODE.
     */
    @LispMethod(comment = "@return listp; the min/summary false MODULE relations for NODE.")
    public static SubLObject sbhl_min_asserted_false_disjoins(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$200 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$201 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$202 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$201 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$202 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$202 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$203 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$203 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$203 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$204 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$205 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$204 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$204 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$213 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$214 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$206 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$205 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                            sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                                            try {
                                                if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                    result = sbhl_search_utilities.sbhl_sweep_and_gather_disjoins(node);
                                                } else {
                                                    sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                }
                                            } finally {
                                                final SubLObject _prev_bind_0_$207 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                                    final SubLObject _values = getValuesAsVector();
                                                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                                    restoreValuesFromVector(_values);
                                                } finally {
                                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$207, thread);
                                                }
                                            }
                                        } finally {
                                            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_1_$205, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0_$206, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$214, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$213, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$204, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$204, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$205, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$204, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$203, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$203, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$203, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$202, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$202, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$201, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$202, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$201, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$200, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        result = sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), result, mt, tv);
        return result;
    }

    /**
     *
     *
     * @return listp; the min false MODULE relations along with the leaf nodes of the module for which MODULE is the disjoins module.
     */
    @LispMethod(comment = "@return listp; the min false MODULE relations along with the leaf nodes of the module for which MODULE is the disjoins module.")
    public static final SubLObject sbhl_min_implied_false_disjoins_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        {
            SubLObject reductions_module = sbhl_module_utilities.get_sbhl_reductions_module(module);
            SubLObject min_asserted_false_disjoins = NIL;
            SubLObject leaf_nodes = NIL;
            SubLObject result = NIL;
            leaf_nodes = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_leaf_nodes(reductions_module, node, mt, tv);
            min_asserted_false_disjoins = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_min_asserted_false_disjoins(module, node, mt, tv);
            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_min_nodes(reductions_module, append(leaf_nodes, min_asserted_false_disjoins), mt, tv);
            return result;
        }
    }

    /**
     *
     *
     * @return listp; the min false MODULE relations along with the leaf nodes of the module for which MODULE is the disjoins module.
     */
    @LispMethod(comment = "@return listp; the min false MODULE relations along with the leaf nodes of the module for which MODULE is the disjoins module.")
    public static SubLObject sbhl_min_implied_false_disjoins(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject reductions_module = sbhl_module_utilities.get_sbhl_reductions_module(module);
        SubLObject min_asserted_false_disjoins = NIL;
        SubLObject leaf_nodes = NIL;
        SubLObject result = NIL;
        leaf_nodes = sbhl_leaf_nodes(reductions_module, node, mt, tv);
        min_asserted_false_disjoins = sbhl_min_asserted_false_disjoins(module, node, mt, tv);
        result = sbhl_min_nodes(reductions_module, append(leaf_nodes, min_asserted_false_disjoins), mt, tv);
        return result;
    }

    /**
     *
     *
     * @return listp; @see sbhl-min-implied-false-disjoins.
     */
    @LispMethod(comment = "@return listp; @see sbhl-min-implied-false-disjoins.")
    public static final SubLObject sbhl_implied_min_false_disjoins_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        return com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_min_implied_false_disjoins(module, node, mt, tv);
    }

    /**
     *
     *
     * @return listp; @see sbhl-min-implied-false-disjoins.
     */
    @LispMethod(comment = "@return listp; @see sbhl-min-implied-false-disjoins.")
    public static SubLObject sbhl_implied_min_false_disjoins(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        return sbhl_min_implied_false_disjoins(module, node, mt, tv);
    }

    /**
     *
     *
     * @return sbhl-node-object-p; the first disjoin found for MODULE or its argument flipped associated module.
     */
    @LispMethod(comment = "@return sbhl-node-object-p; the first disjoin found for MODULE or its argument flipped associated module.")
    public static final SubLObject sbhl_gather_first_true_disjoin_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_218 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_219 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_220 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_221 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_222 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_223 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_224 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_225 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_226 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_227 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_228 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_229 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_230 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_231 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_232 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject _prev_bind_0_233 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_234 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_2_235 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_compose_fn$.bind(symbol_function(IDENTITY), thread);
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_GATHER_FIRST_NON_NIL_RESULT, thread);
                                                                                                    sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                                                                                                    try {
                                                                                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                                                            result = sbhl_search_utilities.sbhl_sweep_and_gather_first_disjoin(node);
                                                                                                        } else {
                                                                                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        }
                                                                                                    } finally {
                                                                                                        {
                                                                                                            SubLObject _prev_bind_0_236 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                                            try {
                                                                                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                                                                                result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                                                                                            } finally {
                                                                                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_236, thread);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } finally {
                                                                                                    sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_2_235, thread);
                                                                                                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_1_234, thread);
                                                                                                    sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_0_233, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_232, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_231, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_230, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_229, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_228, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_227, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_226, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_225, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_224, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_223, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_222, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_221, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_220, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_219, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_218, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return sbhl-node-object-p; the first disjoin found for MODULE or its argument flipped associated module.
     */
    @LispMethod(comment = "@return sbhl-node-object-p; the first disjoin found for MODULE or its argument flipped associated module.")
    public static SubLObject sbhl_gather_first_true_disjoin(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$218 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$219 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$220 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$219 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$220 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$220 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$221 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$221 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$221 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$222 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$223 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$222 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$222 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$231 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$232 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$224 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$223 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$223 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(symbol_function(IDENTITY), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_GATHER_FIRST_NON_NIL_RESULT, thread);
                                            sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                                            try {
                                                if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                    result = sbhl_search_utilities.sbhl_sweep_and_gather_first_disjoin(node);
                                                } else {
                                                    sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                }
                                            } finally {
                                                final SubLObject _prev_bind_0_$225 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                                    final SubLObject _values = getValuesAsVector();
                                                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                                    restoreValuesFromVector(_values);
                                                } finally {
                                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$225, thread);
                                                }
                                            }
                                        } finally {
                                            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_2_$223, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_1_$223, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_0_$224, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$232, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$231, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$222, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$222, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$223, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$222, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$221, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$221, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$221, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$220, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$220, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$219, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$220, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$219, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$218, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; a sample of the the leaf (backward terminal) nodes from START-NODE,
    via MODULE @see sbhl-sample-extremal-nodes
     */
    @LispMethod(comment = "@return listp; a sample of the the leaf (backward terminal) nodes from START-NODE,\r\nvia MODULE @see sbhl-sample-extremal-nodes")
    public static final SubLObject sbhl_sample_leaf_nodes_alt(SubLObject module, SubLObject start_node, SubLObject samples, SubLObject mt, SubLObject tv) {
        if (samples == UNPROVIDED) {
            samples = ONE_INTEGER;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_237 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_238 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_239 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_240 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_241 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_242 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_243 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_244 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_245 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_246 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_247 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_248 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_249 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_250 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_251 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(start_node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                                                result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_sample_extremal_nodes(start_node, samples, UNPROVIDED);
                                                                                            } else {
                                                                                                sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt15$Node__a_does_not_pass_sbhl_type_t, start_node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_251, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_250, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_249, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_248, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_247, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_246, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_245, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_244, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_243, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_242, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_241, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_240, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_239, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_238, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_237, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; a sample of the the leaf (backward terminal) nodes from START-NODE,
    via MODULE @see sbhl-sample-extremal-nodes
     */
    @LispMethod(comment = "@return listp; a sample of the the leaf (backward terminal) nodes from START-NODE,\r\nvia MODULE @see sbhl-sample-extremal-nodes")
    public static SubLObject sbhl_sample_leaf_nodes(final SubLObject module, final SubLObject start_node, SubLObject samples, SubLObject mt, SubLObject tv) {
        if (samples == UNPROVIDED) {
            samples = ONE_INTEGER;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$237 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$238 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$239 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$238 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$239 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$239 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$240 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$240 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$240 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$241 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$242 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$241 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$241 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$250 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$251 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(start_node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                            result = sbhl_sample_extremal_nodes(start_node, samples, UNPROVIDED);
                                        } else {
                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str15$Node__a_does_not_pass_sbhl_type_t, start_node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$251, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$250, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$241, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$241, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$242, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$241, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$240, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$240, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$240, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$239, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$239, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$238, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$239, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$238, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$237, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; a sample of the the leaf (backward terminal) nodes from START-NODE,
    via MODULE, such that none of them accesses any node b/w DIF-NODE and START-NODE via
    MODULE. @see sbhl-sample-extremal-nodes
     */
    @LispMethod(comment = "@return listp; a sample of the the leaf (backward terminal) nodes from START-NODE,\r\nvia MODULE, such that none of them accesses any node b/w DIF-NODE and START-NODE via\r\nMODULE. @see sbhl-sample-extremal-nodes")
    public static final SubLObject sbhl_sample_different_leaf_nodes_alt(SubLObject module, SubLObject dif_node, SubLObject start_node, SubLObject samples, SubLObject mt, SubLObject tv) {
        if (samples == UNPROVIDED) {
            samples = ONE_INTEGER;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_252 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_253 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_254 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_255 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_256 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_257 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_258 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_259 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_260 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_261 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_262 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_263 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_264 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_265 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_266 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(start_node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                                                {
                                                                                                    SubLObject _prev_bind_0_267 = sbhl_marking_vars.$sbhl_target_gather_space$.currentBinding(thread);
                                                                                                    try {
                                                                                                        sbhl_marking_vars.$sbhl_target_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                                                                                        sbhl_marking_methods.sbhl_mark_forward_true_nodes_between_and_all_their_inherited_nodes(module, dif_node, start_node, mt, tv);
                                                                                                        {
                                                                                                            SubLObject _prev_bind_0_268 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                                                                            SubLObject _prev_bind_1_269 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                                                                            SubLObject _prev_bind_2_270 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                                                            SubLObject _prev_bind_3_271 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                            SubLObject _prev_bind_4_272 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                                            try {
                                                                                                                sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_reductions_module(module), thread);
                                                                                                                sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_reductions_module(module)), thread);
                                                                                                                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_reductions_module(module)), thread);
                                                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                                                sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_reductions_module(module), thread);
                                                                                                                sbhl_marking_methods.sbhl_unmark_cyclic_closure(start_node);
                                                                                                            } finally {
                                                                                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4_272, thread);
                                                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3_271, thread);
                                                                                                                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_270, thread);
                                                                                                                sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_269, thread);
                                                                                                                sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_268, thread);
                                                                                                            }
                                                                                                        }
                                                                                                        result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_sample_extremal_nodes(start_node, samples, T);
                                                                                                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread));
                                                                                                    } finally {
                                                                                                        sbhl_marking_vars.$sbhl_target_gather_space$.rebind(_prev_bind_0_267, thread);
                                                                                                    }
                                                                                                }
                                                                                            } else {
                                                                                                sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt15$Node__a_does_not_pass_sbhl_type_t, start_node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_266, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_265, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_264, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_263, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_262, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_261, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_260, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_259, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_258, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_257, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_256, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_255, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_254, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_253, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_252, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; a sample of the the leaf (backward terminal) nodes from START-NODE,
    via MODULE, such that none of them accesses any node b/w DIF-NODE and START-NODE via
    MODULE. @see sbhl-sample-extremal-nodes
     */
    @LispMethod(comment = "@return listp; a sample of the the leaf (backward terminal) nodes from START-NODE,\r\nvia MODULE, such that none of them accesses any node b/w DIF-NODE and START-NODE via\r\nMODULE. @see sbhl-sample-extremal-nodes")
    public static SubLObject sbhl_sample_different_leaf_nodes(final SubLObject module, final SubLObject dif_node, final SubLObject start_node, SubLObject samples, SubLObject mt, SubLObject tv) {
        if (samples == UNPROVIDED) {
            samples = ONE_INTEGER;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$252 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$253 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$254 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$253 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$254 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$254 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$255 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$255 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$255 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$256 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$257 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$256 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$256 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$265 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$266 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(start_node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                            final SubLObject _prev_bind_0_$258 = sbhl_marking_vars.$sbhl_target_gather_space$.currentBinding(thread);
                                            try {
                                                sbhl_marking_vars.$sbhl_target_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                                try {
                                                    sbhl_marking_methods.sbhl_mark_forward_true_nodes_between_and_all_their_inherited_nodes(module, dif_node, start_node, mt, tv);
                                                    final SubLObject _prev_bind_0_$259 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$257 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                    final SubLObject _prev_bind_2_$257 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                    final SubLObject _prev_bind_3_$266 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    final SubLObject _prev_bind_4_$267 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_reductions_module(module), thread);
                                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_reductions_module(module)), thread);
                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_reductions_module(module)), thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_reductions_module(module), thread);
                                                        sbhl_marking_methods.sbhl_unmark_cyclic_closure(start_node);
                                                    } finally {
                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4_$267, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3_$266, thread);
                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$257, thread);
                                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$257, thread);
                                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$259, thread);
                                                    }
                                                    result = sbhl_sample_extremal_nodes(start_node, samples, T);
                                                } finally {
                                                    final SubLObject _prev_bind_0_$260 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                    try {
                                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                                        final SubLObject _values = getValuesAsVector();
                                                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread));
                                                        restoreValuesFromVector(_values);
                                                    } finally {
                                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$260, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_marking_vars.$sbhl_target_gather_space$.rebind(_prev_bind_0_$258, thread);
                                            }
                                        } else {
                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str15$Node__a_does_not_pass_sbhl_type_t, start_node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$266, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$265, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$256, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$256, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$257, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$256, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$255, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$255, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$255, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$254, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$254, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$253, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$254, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$253, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$252, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; Returns n=SAMPLES nodes which are extremal nodes of START-NODES. Currently
    usable only for transitive or directed transfers through preds.
     */
    @LispMethod(comment = "@return listp; Returns n=SAMPLES nodes which are extremal nodes of START-NODES. Currently\r\nusable only for transitive or directed transfers through preds.")
    public static final SubLObject sbhl_sample_extremal_nodes_alt(SubLObject start_node, SubLObject samples, SubLObject different_leavesP) {
        if (different_leavesP == UNPROVIDED) {
            different_leavesP = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_consider_node_fn$.bind(sbhl_search_utilities.determine_sbhl_sample_leaf_consider_fn(different_leavesP), thread);
                        {
                            SubLObject queue = queues.enqueue(start_node, queues.create_queue());
                            {
                                SubLObject _prev_bind_0_273 = sbhl_search_vars.$sbhl_sample_leaf_queues$.currentBinding(thread);
                                SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                SubLObject _prev_bind_2 = sbhl_link_vars.$sbhl_randomize_lists_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_sample_leaf_queues$.bind(list(queue), thread);
                                    sbhl_search_vars.$sbhl_search_behavior$.bind(NIL != sbhl_module_utilities.sbhl_transfers_through_module_p(sbhl_module_vars.get_sbhl_module(UNPROVIDED)) ? ((SubLObject) (SBHL_LEAF_INSTANCES_SWEEP)) : SBHL_SIMPLE_TRUE_SEARCH_AND_UNWIND, thread);
                                    sbhl_link_vars.$sbhl_randomize_lists_p$.bind(T, thread);
                                    {
                                        SubLObject n = NIL;
                                        for (n = ZERO_INTEGER; n.numL(samples); n = add(n, ONE_INTEGER)) {
                                            {
                                                SubLObject _prev_bind_0_274 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                    {
                                                        SubLObject leaf = NIL;
                                                        while ((NIL != sbhl_search_vars.$sbhl_sample_leaf_queues$.getDynamicValue(thread)) && (NIL == leaf)) {
                                                            {
                                                                SubLObject queue_275 = sbhl_search_vars.$sbhl_sample_leaf_queues$.getDynamicValue(thread).first();
                                                                SubLObject node = queues.queue_elements(queue_275).first();
                                                                {
                                                                    SubLObject _prev_bind_0_276 = sbhl_search_vars.$sbhl_current_leaf_queue$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_search_vars.$sbhl_current_leaf_queue$.bind(queues.create_queue(), thread);
                                                                        sbhl_marking_utilities.sbhl_mark_node_unmarked(node, UNPROVIDED);
                                                                        leaf = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node);
                                                                        if (NIL != leaf) {
                                                                            result = cons(leaf, result);
                                                                        }
                                                                        if (NIL != leaf) {
                                                                            rplacd(last(sbhl_search_vars.$sbhl_sample_leaf_queues$.getDynamicValue(thread), UNPROVIDED), list(queue_275, sbhl_search_vars.$sbhl_current_leaf_queue$.getDynamicValue(thread)));
                                                                            sbhl_search_vars.$sbhl_sample_leaf_queues$.setDynamicValue(sbhl_search_vars.$sbhl_sample_leaf_queues$.getDynamicValue(thread).rest(), thread);
                                                                        } else {
                                                                            queues.dequeue(queue_275);
                                                                        }
                                                                    } finally {
                                                                        sbhl_search_vars.$sbhl_current_leaf_queue$.rebind(_prev_bind_0_276, thread);
                                                                    }
                                                                }
                                                            }
                                                            sbhl_search_vars.$sbhl_sample_leaf_queues$.setDynamicValue(remove_if(QUEUE_EMPTY_P, sbhl_search_vars.$sbhl_sample_leaf_queues$.getDynamicValue(thread), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
                                                        } 
                                                    }
                                                } finally {
                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_274, thread);
                                                }
                                            }
                                        }
                                    }
                                } finally {
                                    sbhl_link_vars.$sbhl_randomize_lists_p$.rebind(_prev_bind_2, thread);
                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1, thread);
                                    sbhl_search_vars.$sbhl_sample_leaf_queues$.rebind(_prev_bind_0_273, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; Returns n=SAMPLES nodes which are extremal nodes of START-NODES. Currently
    usable only for transitive or directed transfers through preds.
     */
    @LispMethod(comment = "@return listp; Returns n=SAMPLES nodes which are extremal nodes of START-NODES. Currently\r\nusable only for transitive or directed transfers through preds.")
    public static SubLObject sbhl_sample_extremal_nodes(final SubLObject start_node, final SubLObject samples, SubLObject different_leavesP) {
        if (different_leavesP == UNPROVIDED) {
            different_leavesP = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_consider_node_fn$.bind(sbhl_search_utilities.determine_sbhl_sample_leaf_consider_fn(different_leavesP), thread);
            final SubLObject queue = queues.enqueue(start_node, queues.create_queue(UNPROVIDED));
            final SubLObject _prev_bind_0_$274 = sbhl_search_vars.$sbhl_sample_leaf_queues$.currentBinding(thread);
            final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
            final SubLObject _prev_bind_3 = sbhl_link_vars.$sbhl_randomize_lists_p$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_sample_leaf_queues$.bind(list(queue), thread);
                sbhl_search_vars.$sbhl_search_behavior$.bind(NIL != sbhl_module_utilities.sbhl_transfers_through_module_p(sbhl_module_vars.get_sbhl_module(UNPROVIDED)) ? SBHL_LEAF_INSTANCES_SWEEP : SBHL_SIMPLE_TRUE_SEARCH_AND_UNWIND, thread);
                sbhl_link_vars.$sbhl_randomize_lists_p$.bind(T, thread);
                SubLObject n;
                SubLObject _prev_bind_0_$275;
                SubLObject leaf;
                SubLObject queue_$276;
                SubLObject node;
                SubLObject _prev_bind_0_$276;
                for (n = NIL, n = ZERO_INTEGER; n.numL(samples); n = add(n, ONE_INTEGER)) {
                    _prev_bind_0_$275 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                        leaf = NIL;
                        while ((NIL != sbhl_search_vars.$sbhl_sample_leaf_queues$.getDynamicValue(thread)) && (NIL == leaf)) {
                            queue_$276 = sbhl_search_vars.$sbhl_sample_leaf_queues$.getDynamicValue(thread).first();
                            node = queues.queue_elements(queue_$276).first();
                            _prev_bind_0_$276 = sbhl_search_vars.$sbhl_current_leaf_queue$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_current_leaf_queue$.bind(queues.create_queue(UNPROVIDED), thread);
                                sbhl_marking_utilities.sbhl_mark_node_unmarked(node, UNPROVIDED);
                                leaf = sbhl_transitive_closure(node);
                                if (NIL != leaf) {
                                    result = cons(leaf, result);
                                }
                                if (NIL != leaf) {
                                    rplacd(last(sbhl_search_vars.$sbhl_sample_leaf_queues$.getDynamicValue(thread), UNPROVIDED), list(queue_$276, sbhl_search_vars.$sbhl_current_leaf_queue$.getDynamicValue(thread)));
                                    sbhl_search_vars.$sbhl_sample_leaf_queues$.setDynamicValue(sbhl_search_vars.$sbhl_sample_leaf_queues$.getDynamicValue(thread).rest(), thread);
                                } else {
                                    queues.dequeue(queue_$276);
                                }
                            } finally {
                                sbhl_search_vars.$sbhl_current_leaf_queue$.rebind(_prev_bind_0_$276, thread);
                            }
                            sbhl_search_vars.$sbhl_sample_leaf_queues$.setDynamicValue(remove_if(QUEUE_EMPTY_P, sbhl_search_vars.$sbhl_sample_leaf_queues$.getDynamicValue(thread), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
                        } 
                    } finally {
                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$275, thread);
                    }
                }
            } finally {
                sbhl_link_vars.$sbhl_randomize_lists_p$.rebind(_prev_bind_3, thread);
                sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_2, thread);
                sbhl_search_vars.$sbhl_sample_leaf_queues$.rebind(_prev_bind_0_$274, thread);
            }
        } finally {
            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     * Applies FUNCTION to each element of NODE's forward true transitive closure
     */
    @LispMethod(comment = "Applies FUNCTION to each element of NODE\'s forward true transitive closure")
    public static final SubLObject sbhl_map_all_forward_true_nodes_alt(SubLObject module, SubLObject node, SubLObject function, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                    sbhl_module_vars.$sbhl_module$.bind(module, thread);
                    {
                        SubLObject mt_var = mt;
                        {
                            SubLObject _prev_bind_0_277 = mt_relevance_macros.$mt$.currentBinding(thread);
                            SubLObject _prev_bind_1_278 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            SubLObject _prev_bind_2_279 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                {
                                    SubLObject tv_var = tv;
                                    {
                                        SubLObject _prev_bind_0_280 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                        SubLObject _prev_bind_1_281 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                            if (NIL != tv_var) {
                                                if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                    if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                        {
                                                            SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                            if (pcase_var.eql($ERROR)) {
                                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            } else {
                                                                if (pcase_var.eql($CERROR)) {
                                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($WARN)) {
                                                                        Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    } else {
                                                                        Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                        Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            {
                                                SubLObject _prev_bind_0_282 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                SubLObject _prev_bind_1_283 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                SubLObject _prev_bind_2_284 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                    {
                                                        SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                        {
                                                            SubLObject _prev_bind_0_285 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                            try {
                                                                sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                {
                                                                    SubLObject _prev_bind_0_286 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                        {
                                                                            SubLObject _prev_bind_0_287 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_1_288 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_2_289 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_3_290 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_4_291 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                {
                                                                                    SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                    SubLObject needs_to_releaseP = NIL;
                                                                                    try {
                                                                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                        if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                            if (!function.isFunctionSpec()) {
                                                                                                {
                                                                                                    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                    if (pcase_var.eql($ERROR)) {
                                                                                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                    } else {
                                                                                                        if (pcase_var.eql($CERROR)) {
                                                                                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($WARN)) {
                                                                                                                Errors.warn($str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                                                                            } else {
                                                                                                                Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            SubLObject _prev_bind_0_292 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_1_293 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_2_294 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_3_295 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_4_296 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_APPLY_COMPOSE_FN, thread);
                                                                                                sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                                                                                if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                                                    sbhl_search_utilities.apply_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_behavior(), node);
                                                                                                } else {
                                                                                                    sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                }
                                                                                            } finally {
                                                                                                sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_296, thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_295, thread);
                                                                                                sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_294, thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_293, thread);
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_292, thread);
                                                                                            }
                                                                                        }
                                                                                    } finally {
                                                                                        if (NIL != needs_to_releaseP) {
                                                                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_291, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_290, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_289, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_288, thread);
                                                                                sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_287, thread);
                                                                            }
                                                                        }
                                                                        if (source == $RESOURCE) {
                                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                        }
                                                                    } finally {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_286, thread);
                                                                    }
                                                                }
                                                                if (source == $RESOURCE) {
                                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                }
                                                            } finally {
                                                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_285, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_284, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_283, thread);
                                                    sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_282, thread);
                                                }
                                            }
                                        } finally {
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_281, thread);
                                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_280, thread);
                                        }
                                    }
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_279, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_278, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_277, thread);
                            }
                        }
                    }
                } finally {
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                }
            }
            return NIL;
        }
    }

    @LispMethod(comment = "Applies FUNCTION to each element of NODE\'s forward true transitive closure")
    public static SubLObject sbhl_map_all_forward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject function, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$278 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$279 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$280 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$279 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$280 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$280 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$281 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$281 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$281 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$282 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$283 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$282 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$282 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$291 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$292 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!function.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$284 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$283 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$283 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$292 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$293 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_APPLY_COMPOSE_FN, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                            if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                sbhl_search_utilities.apply_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_behavior(), node);
                                            } else {
                                                sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            }
                                        } finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_$293, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$292, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_$283, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$283, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$284, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$292, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$291, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$282, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$282, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$283, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$282, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$281, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$281, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$281, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$280, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$280, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$279, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$280, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$279, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$278, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }/**
     * Applies FUNCTION to each element of NODE's forward true transitive closure
     */


    /**
     * Applies FUNCTION to each element of NODE's forward true transitive closure which passes TEST-FN
     */
    @LispMethod(comment = "Applies FUNCTION to each element of NODE\'s forward true transitive closure which passes TEST-FN")
    public static final SubLObject sbhl_map_all_forward_true_nodes_if_alt(SubLObject module, SubLObject node, SubLObject fn, SubLObject test_fn, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                    sbhl_module_vars.$sbhl_module$.bind(module, thread);
                    {
                        SubLObject mt_var = mt;
                        {
                            SubLObject _prev_bind_0_297 = mt_relevance_macros.$mt$.currentBinding(thread);
                            SubLObject _prev_bind_1_298 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            SubLObject _prev_bind_2_299 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                {
                                    SubLObject tv_var = tv;
                                    {
                                        SubLObject _prev_bind_0_300 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                        SubLObject _prev_bind_1_301 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                            if (NIL != tv_var) {
                                                if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                    if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                        {
                                                            SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                            if (pcase_var.eql($ERROR)) {
                                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            } else {
                                                                if (pcase_var.eql($CERROR)) {
                                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($WARN)) {
                                                                        Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    } else {
                                                                        Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                        Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            {
                                                SubLObject _prev_bind_0_302 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                SubLObject _prev_bind_1_303 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                SubLObject _prev_bind_2_304 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                    {
                                                        SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                        {
                                                            SubLObject _prev_bind_0_305 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                            try {
                                                                sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                {
                                                                    SubLObject _prev_bind_0_306 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                        {
                                                                            SubLObject _prev_bind_0_307 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_1_308 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_2_309 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_3_310 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_4_311 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                {
                                                                                    SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                    SubLObject needs_to_releaseP = NIL;
                                                                                    try {
                                                                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                        if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                            if (!fn.isFunctionSpec()) {
                                                                                                {
                                                                                                    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                    if (pcase_var.eql($ERROR)) {
                                                                                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                    } else {
                                                                                                        if (pcase_var.eql($CERROR)) {
                                                                                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($WARN)) {
                                                                                                                Errors.warn($str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                            } else {
                                                                                                                Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                            if (!test_fn.isFunctionSpec()) {
                                                                                                {
                                                                                                    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                    if (pcase_var.eql($ERROR)) {
                                                                                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, test_fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                    } else {
                                                                                                        if (pcase_var.eql($CERROR)) {
                                                                                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, test_fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($WARN)) {
                                                                                                                Errors.warn($str_alt3$_A_is_not_a__A, test_fn, FUNCTION_SPEC_P);
                                                                                                            } else {
                                                                                                                Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, test_fn, FUNCTION_SPEC_P);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            SubLObject _prev_bind_0_312 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_1_313 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_2_314 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_3_315 = sbhl_search_vars.$sbhl_map_test_fn$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_4_316 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_5 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                sbhl_search_vars.$sbhl_compose_fn$.bind(fn, thread);
                                                                                                sbhl_search_vars.$sbhl_map_test_fn$.bind(test_fn, thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_APPLY_COMPOSE_FN_IF, thread);
                                                                                                sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                                                                                if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                                                    sbhl_search_utilities.apply_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_behavior(), node);
                                                                                                } else {
                                                                                                    sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                }
                                                                                            } finally {
                                                                                                sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_5, thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_4_316, thread);
                                                                                                sbhl_search_vars.$sbhl_map_test_fn$.rebind(_prev_bind_3_315, thread);
                                                                                                sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_314, thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_313, thread);
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_312, thread);
                                                                                            }
                                                                                        }
                                                                                    } finally {
                                                                                        if (NIL != needs_to_releaseP) {
                                                                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_311, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_310, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_309, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_308, thread);
                                                                                sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_307, thread);
                                                                            }
                                                                        }
                                                                        if (source == $RESOURCE) {
                                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                        }
                                                                    } finally {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_306, thread);
                                                                    }
                                                                }
                                                                if (source == $RESOURCE) {
                                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                }
                                                            } finally {
                                                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_305, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_304, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_303, thread);
                                                    sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_302, thread);
                                                }
                                            }
                                        } finally {
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_301, thread);
                                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_300, thread);
                                        }
                                    }
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_299, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_298, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_297, thread);
                            }
                        }
                    }
                } finally {
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                }
            }
            return NIL;
        }
    }

    @LispMethod(comment = "Applies FUNCTION to each element of NODE\'s forward true transitive closure which passes TEST-FN")
    public static SubLObject sbhl_map_all_forward_true_nodes_if(final SubLObject module, final SubLObject node, final SubLObject fn, final SubLObject test_fn, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$298 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$299 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$300 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$299 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$300 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$300 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$301 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$301 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$301 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$302 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$303 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$302 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$302 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$311 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$312 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!fn.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!test_fn.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, test_fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, test_fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, test_fn, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, test_fn, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$304 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$303 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$303 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$312 = sbhl_search_vars.$sbhl_map_test_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$313 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(fn, thread);
                                            sbhl_search_vars.$sbhl_map_test_fn$.bind(test_fn, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_APPLY_COMPOSE_FN_IF, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                            if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                sbhl_search_utilities.apply_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_behavior(), node);
                                            } else {
                                                sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            }
                                        } finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_6, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_4_$313, thread);
                                            sbhl_search_vars.$sbhl_map_test_fn$.rebind(_prev_bind_3_$312, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_$303, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$303, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$304, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$312, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$311, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$302, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$302, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$303, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$302, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$301, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$301, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$301, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$300, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$300, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$299, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$300, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$299, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$298, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }/**
     * Applies FUNCTION to each element of NODE's forward true transitive closure which passes TEST-FN
     */


    /**
     * Binds *sbhl-space* to SPACE and *sbhl-gather-space* to GATHER-SPACE and performs @see sbhl-map-all-forward-true-nodes.
     */
    @LispMethod(comment = "Binds *sbhl-space* to SPACE and *sbhl-gather-space* to GATHER-SPACE and performs @see sbhl-map-all-forward-true-nodes.")
    public static final SubLObject sbhl_map_and_mark_forward_true_nodes_in_space_alt(SubLObject module, SubLObject node, SubLObject fn, SubLObject space, SubLObject gather_space) {
        if (space == UNPROVIDED) {
            space = sbhl_marking_vars.$sbhl_space$.getDynamicValue();
        }
        if (gather_space == UNPROVIDED) {
            gather_space = sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue();
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_suspend_new_spacesP$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_space$.bind(space, thread);
                    sbhl_marking_vars.$sbhl_gather_space$.bind(gather_space, thread);
                    sbhl_marking_vars.$sbhl_suspend_new_spacesP$.bind(T, thread);
                    com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_map_all_forward_true_nodes(module, node, fn, UNPROVIDED, UNPROVIDED);
                } finally {
                    sbhl_marking_vars.$sbhl_suspend_new_spacesP$.rebind(_prev_bind_2, thread);
                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1, thread);
                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0, thread);
                }
            }
            return NIL;
        }
    }

    @LispMethod(comment = "Binds *sbhl-space* to SPACE and *sbhl-gather-space* to GATHER-SPACE and performs @see sbhl-map-all-forward-true-nodes.")
    public static SubLObject sbhl_map_and_mark_forward_true_nodes_in_space(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject space, SubLObject gather_space) {
        if (space == UNPROVIDED) {
            space = sbhl_marking_vars.$sbhl_space$.getDynamicValue();
        }
        if (gather_space == UNPROVIDED) {
            gather_space = sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_suspend_new_spacesP$.currentBinding(thread);
        try {
            sbhl_marking_vars.$sbhl_space$.bind(space, thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(gather_space, thread);
            sbhl_marking_vars.$sbhl_suspend_new_spacesP$.bind(T, thread);
            sbhl_map_all_forward_true_nodes(module, node, fn, UNPROVIDED, UNPROVIDED);
        } finally {
            sbhl_marking_vars.$sbhl_suspend_new_spacesP$.rebind(_prev_bind_3, thread);
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_2, thread);
            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }/**
     * Binds *sbhl-space* to SPACE and *sbhl-gather-space* to GATHER-SPACE and performs @see sbhl-map-all-forward-true-nodes.
     */


    /**
     * Applies FUNCTION to each element of NODE's backward true transitive closure
     */
    @LispMethod(comment = "Applies FUNCTION to each element of NODE\'s backward true transitive closure")
    public static final SubLObject sbhl_map_all_backward_true_nodes_alt(SubLObject module, SubLObject node, SubLObject function, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                    sbhl_module_vars.$sbhl_module$.bind(module, thread);
                    {
                        SubLObject mt_var = mt;
                        {
                            SubLObject _prev_bind_0_317 = mt_relevance_macros.$mt$.currentBinding(thread);
                            SubLObject _prev_bind_1_318 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            SubLObject _prev_bind_2_319 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                {
                                    SubLObject tv_var = tv;
                                    {
                                        SubLObject _prev_bind_0_320 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                        SubLObject _prev_bind_1_321 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                            if (NIL != tv_var) {
                                                if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                    if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                        {
                                                            SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                            if (pcase_var.eql($ERROR)) {
                                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            } else {
                                                                if (pcase_var.eql($CERROR)) {
                                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($WARN)) {
                                                                        Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    } else {
                                                                        Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                        Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            {
                                                SubLObject _prev_bind_0_322 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                SubLObject _prev_bind_1_323 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                SubLObject _prev_bind_2_324 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                    {
                                                        SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                        {
                                                            SubLObject _prev_bind_0_325 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                            try {
                                                                sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                {
                                                                    SubLObject _prev_bind_0_326 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                        {
                                                                            SubLObject _prev_bind_0_327 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_1_328 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_2_329 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_3_330 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_4_331 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                {
                                                                                    SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                    SubLObject needs_to_releaseP = NIL;
                                                                                    try {
                                                                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                        if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                            if (!function.isFunctionSpec()) {
                                                                                                {
                                                                                                    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                    if (pcase_var.eql($ERROR)) {
                                                                                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                    } else {
                                                                                                        if (pcase_var.eql($CERROR)) {
                                                                                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($WARN)) {
                                                                                                                Errors.warn($str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                                                                            } else {
                                                                                                                Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            SubLObject _prev_bind_0_332 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_1_333 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_2_334 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_3_335 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_4_336 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_APPLY_COMPOSE_FN, thread);
                                                                                                sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                                                                                if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                                                    sbhl_search_utilities.apply_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_behavior(), node);
                                                                                                } else {
                                                                                                    sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                }
                                                                                            } finally {
                                                                                                sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_336, thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_335, thread);
                                                                                                sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_334, thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_333, thread);
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_332, thread);
                                                                                            }
                                                                                        }
                                                                                    } finally {
                                                                                        if (NIL != needs_to_releaseP) {
                                                                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_331, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_330, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_329, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_328, thread);
                                                                                sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_327, thread);
                                                                            }
                                                                        }
                                                                        if (source == $RESOURCE) {
                                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                        }
                                                                    } finally {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_326, thread);
                                                                    }
                                                                }
                                                                if (source == $RESOURCE) {
                                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                }
                                                            } finally {
                                                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_325, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_324, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_323, thread);
                                                    sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_322, thread);
                                                }
                                            }
                                        } finally {
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_321, thread);
                                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_320, thread);
                                        }
                                    }
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_319, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_318, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_317, thread);
                            }
                        }
                    }
                } finally {
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                }
            }
            return NIL;
        }
    }

    @LispMethod(comment = "Applies FUNCTION to each element of NODE\'s backward true transitive closure")
    public static SubLObject sbhl_map_all_backward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject function, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$318 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$319 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$320 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$319 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$320 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$320 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$321 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$321 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$321 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$322 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$323 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$322 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$322 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$331 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$332 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!function.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$324 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$323 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$323 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$332 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$333 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_APPLY_COMPOSE_FN, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                            if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                sbhl_search_utilities.apply_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_behavior(), node);
                                            } else {
                                                sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            }
                                        } finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_$333, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$332, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_$323, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$323, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$324, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$332, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$331, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$322, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$322, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$323, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$322, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$321, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$321, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$321, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$320, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$320, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$319, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$320, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$319, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$318, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }/**
     * Applies FUNCTION to each element of NODE's backward true transitive closure
     */


    /**
     * Applies FUNCTION to each element of NODE's backward true transitive closure, considering only accessible links, and irrespective of the manner in which a node was reached.
     */
    @LispMethod(comment = "Applies FUNCTION to each element of NODE\'s backward true transitive closure, considering only accessible links, and irrespective of the manner in which a node was reached.")
    public static final SubLObject sbhl_simply_map_all_backward_true_nodes_alt(SubLObject module, SubLObject node, SubLObject function, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                    sbhl_module_vars.$sbhl_module$.bind(module, thread);
                    {
                        SubLObject mt_var = mt;
                        {
                            SubLObject _prev_bind_0_337 = mt_relevance_macros.$mt$.currentBinding(thread);
                            SubLObject _prev_bind_1_338 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            SubLObject _prev_bind_2_339 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                {
                                    SubLObject tv_var = tv;
                                    {
                                        SubLObject _prev_bind_0_340 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                        SubLObject _prev_bind_1_341 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                            if (NIL != tv_var) {
                                                if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                    if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                        {
                                                            SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                            if (pcase_var.eql($ERROR)) {
                                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            } else {
                                                                if (pcase_var.eql($CERROR)) {
                                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($WARN)) {
                                                                        Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    } else {
                                                                        Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                        Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            {
                                                SubLObject _prev_bind_0_342 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                SubLObject _prev_bind_1_343 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                SubLObject _prev_bind_2_344 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                    {
                                                        SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                        {
                                                            SubLObject _prev_bind_0_345 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                            try {
                                                                sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                {
                                                                    SubLObject _prev_bind_0_346 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                        {
                                                                            SubLObject _prev_bind_0_347 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_1_348 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_2_349 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_3_350 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_4_351 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                {
                                                                                    SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                    SubLObject needs_to_releaseP = NIL;
                                                                                    try {
                                                                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                        if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                            if (!function.isFunctionSpec()) {
                                                                                                {
                                                                                                    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                    if (pcase_var.eql($ERROR)) {
                                                                                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                    } else {
                                                                                                        if (pcase_var.eql($CERROR)) {
                                                                                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($WARN)) {
                                                                                                                Errors.warn($str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                                                                            } else {
                                                                                                                Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            SubLObject _prev_bind_0_352 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_1_353 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_2_354 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_3_355 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_4_356 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_5 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(NIL, thread);
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_APPLY_COMPOSE_FN, thread);
                                                                                                sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                                                                                if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                                                    sbhl_search_utilities.apply_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_behavior(), node);
                                                                                                } else {
                                                                                                    sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                }
                                                                                            } finally {
                                                                                                sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_5, thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_4_356, thread);
                                                                                                sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_3_355, thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_354, thread);
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_353, thread);
                                                                                                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_352, thread);
                                                                                            }
                                                                                        }
                                                                                    } finally {
                                                                                        if (NIL != needs_to_releaseP) {
                                                                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_351, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_350, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_349, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_348, thread);
                                                                                sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_347, thread);
                                                                            }
                                                                        }
                                                                        if (source == $RESOURCE) {
                                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                        }
                                                                    } finally {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_346, thread);
                                                                    }
                                                                }
                                                                if (source == $RESOURCE) {
                                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                }
                                                            } finally {
                                                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_345, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_344, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_343, thread);
                                                    sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_342, thread);
                                                }
                                            }
                                        } finally {
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_341, thread);
                                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_340, thread);
                                        }
                                    }
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_339, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_338, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_337, thread);
                            }
                        }
                    }
                } finally {
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                }
            }
            return NIL;
        }
    }

    @LispMethod(comment = "Applies FUNCTION to each element of NODE\'s backward true transitive closure, considering only accessible links, and irrespective of the manner in which a node was reached.")
    public static SubLObject sbhl_simply_map_all_backward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject function, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$338 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$339 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$340 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$339 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$340 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$340 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$341 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$341 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$341 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$342 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$343 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$342 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$342 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$351 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$352 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!function.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$344 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$343 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$343 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$352 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$353 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(NIL, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_APPLY_COMPOSE_FN, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                            if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                sbhl_search_utilities.apply_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_behavior(), node);
                                            } else {
                                                sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            }
                                        } finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_6, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_4_$353, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_3_$352, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_$343, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_$343, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_$344, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$352, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$351, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$342, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$342, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$343, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$342, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$341, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$341, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$341, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$340, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$340, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$339, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$340, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$339, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$338, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }/**
     * Applies FUNCTION to each element of NODE's backward true transitive closure, considering only accessible links, and irrespective of the manner in which a node was reached.
     */


    /**
     * Applies FUNCTION to each element of NODES' forward true transitive closures
     */
    @LispMethod(comment = "Applies FUNCTION to each element of NODES\' forward true transitive closures")
    public static final SubLObject sbhl_map_union_all_forward_true_nodes_alt(SubLObject module, SubLObject nodes, SubLObject function, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                    sbhl_module_vars.$sbhl_module$.bind(module, thread);
                    {
                        SubLObject mt_var = mt;
                        {
                            SubLObject _prev_bind_0_357 = mt_relevance_macros.$mt$.currentBinding(thread);
                            SubLObject _prev_bind_1_358 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            SubLObject _prev_bind_2_359 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                {
                                    SubLObject tv_var = tv;
                                    {
                                        SubLObject _prev_bind_0_360 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                        SubLObject _prev_bind_1_361 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                            if (NIL != tv_var) {
                                                if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                    if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                        {
                                                            SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                            if (pcase_var.eql($ERROR)) {
                                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            } else {
                                                                if (pcase_var.eql($CERROR)) {
                                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($WARN)) {
                                                                        Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    } else {
                                                                        Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                        Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            {
                                                SubLObject _prev_bind_0_362 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                SubLObject _prev_bind_1_363 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                SubLObject _prev_bind_2_364 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                    {
                                                        SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                        {
                                                            SubLObject _prev_bind_0_365 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                            try {
                                                                sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                {
                                                                    SubLObject _prev_bind_0_366 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                        {
                                                                            SubLObject _prev_bind_0_367 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_1_368 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_2_369 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_3_370 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_4_371 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                {
                                                                                    SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                    SubLObject needs_to_releaseP = NIL;
                                                                                    try {
                                                                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                        if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                            if (!function.isFunctionSpec()) {
                                                                                                {
                                                                                                    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                    if (pcase_var.eql($ERROR)) {
                                                                                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                    } else {
                                                                                                        if (pcase_var.eql($CERROR)) {
                                                                                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($WARN)) {
                                                                                                                Errors.warn($str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                                                                            } else {
                                                                                                                Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            SubLObject _prev_bind_0_372 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_1_373 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_2_374 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_3_375 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_4_376 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_APPLY_COMPOSE_FN, thread);
                                                                                                sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                                                                                {
                                                                                                    SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
                                                                                                    SubLObject cdolist_list_var = nodes;
                                                                                                    SubLObject node = NIL;
                                                                                                    for (node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , node = cdolist_list_var.first()) {
                                                                                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                                                            {
                                                                                                                SubLObject _prev_bind_0_377 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                                SubLObject _prev_bind_1_378 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                                                try {
                                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                                                    sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                                                                                                                } finally {
                                                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_1_378, thread);
                                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_377, thread);
                                                                                                                }
                                                                                                            }
                                                                                                        } else {
                                                                                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } finally {
                                                                                                sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_376, thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_375, thread);
                                                                                                sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_374, thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_373, thread);
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_372, thread);
                                                                                            }
                                                                                        }
                                                                                    } finally {
                                                                                        if (NIL != needs_to_releaseP) {
                                                                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_371, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_370, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_369, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_368, thread);
                                                                                sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_367, thread);
                                                                            }
                                                                        }
                                                                        if (source == $RESOURCE) {
                                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                        }
                                                                    } finally {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_366, thread);
                                                                    }
                                                                }
                                                                if (source == $RESOURCE) {
                                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                }
                                                            } finally {
                                                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_365, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_364, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_363, thread);
                                                    sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_362, thread);
                                                }
                                            }
                                        } finally {
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_361, thread);
                                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_360, thread);
                                        }
                                    }
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_359, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_358, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_357, thread);
                            }
                        }
                    }
                } finally {
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                }
            }
            return NIL;
        }
    }

    @LispMethod(comment = "Applies FUNCTION to each element of NODES\' forward true transitive closures")
    public static SubLObject sbhl_map_union_all_forward_true_nodes(final SubLObject module, final SubLObject nodes, final SubLObject function, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$358 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$359 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$360 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$359 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$360 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$360 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$361 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$361 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$361 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$362 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$363 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$362 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$362 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$371 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$372 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!function.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$364 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$363 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$363 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$372 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$373 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_APPLY_COMPOSE_FN, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                            final SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
                                            SubLObject cdolist_list_var = nodes;
                                            SubLObject node = NIL;
                                            node = cdolist_list_var.first();
                                            while (NIL != cdolist_list_var) {
                                                if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                    final SubLObject _prev_bind_0_$365 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$364 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                        sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                                                    } finally {
                                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_1_$364, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_$365, thread);
                                                    }
                                                } else {
                                                    sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                node = cdolist_list_var.first();
                                            } 
                                        } finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_$373, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$372, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_$363, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$363, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$364, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$372, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$371, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$362, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$362, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$363, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$362, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$361, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$361, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$361, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$360, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$360, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$359, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$360, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$359, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$358, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }/**
     * Applies FUNCTION to each element of NODES' forward true transitive closures
     */


    /**
     * Applies FUNCTION to each element of NODES' backward true transitive closures
     */
    @LispMethod(comment = "Applies FUNCTION to each element of NODES\' backward true transitive closures")
    public static final SubLObject sbhl_map_union_all_backward_true_nodes_alt(SubLObject module, SubLObject nodes, SubLObject function, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                    sbhl_module_vars.$sbhl_module$.bind(module, thread);
                    {
                        SubLObject mt_var = mt;
                        {
                            SubLObject _prev_bind_0_379 = mt_relevance_macros.$mt$.currentBinding(thread);
                            SubLObject _prev_bind_1_380 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            SubLObject _prev_bind_2_381 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                {
                                    SubLObject tv_var = tv;
                                    {
                                        SubLObject _prev_bind_0_382 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                        SubLObject _prev_bind_1_383 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                            if (NIL != tv_var) {
                                                if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                    if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                        {
                                                            SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                            if (pcase_var.eql($ERROR)) {
                                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            } else {
                                                                if (pcase_var.eql($CERROR)) {
                                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($WARN)) {
                                                                        Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    } else {
                                                                        Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                        Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            {
                                                SubLObject _prev_bind_0_384 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                SubLObject _prev_bind_1_385 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                SubLObject _prev_bind_2_386 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                    {
                                                        SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                        {
                                                            SubLObject _prev_bind_0_387 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                            try {
                                                                sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                {
                                                                    SubLObject _prev_bind_0_388 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                        {
                                                                            SubLObject _prev_bind_0_389 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_1_390 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_2_391 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_3_392 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_4_393 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                {
                                                                                    SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                    SubLObject needs_to_releaseP = NIL;
                                                                                    try {
                                                                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                        if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                            if (!function.isFunctionSpec()) {
                                                                                                {
                                                                                                    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                    if (pcase_var.eql($ERROR)) {
                                                                                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                    } else {
                                                                                                        if (pcase_var.eql($CERROR)) {
                                                                                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($WARN)) {
                                                                                                                Errors.warn($str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                                                                            } else {
                                                                                                                Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            SubLObject _prev_bind_0_394 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_1_395 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_2_396 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_3_397 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_4_398 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_APPLY_COMPOSE_FN, thread);
                                                                                                sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                                                                                {
                                                                                                    SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
                                                                                                    SubLObject cdolist_list_var = nodes;
                                                                                                    SubLObject node = NIL;
                                                                                                    for (node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , node = cdolist_list_var.first()) {
                                                                                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                                                            {
                                                                                                                SubLObject _prev_bind_0_399 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                                SubLObject _prev_bind_1_400 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                                                try {
                                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                                                    sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                                                                                                                } finally {
                                                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_1_400, thread);
                                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_399, thread);
                                                                                                                }
                                                                                                            }
                                                                                                        } else {
                                                                                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } finally {
                                                                                                sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_398, thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_397, thread);
                                                                                                sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_396, thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_395, thread);
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_394, thread);
                                                                                            }
                                                                                        }
                                                                                    } finally {
                                                                                        if (NIL != needs_to_releaseP) {
                                                                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_393, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_392, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_391, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_390, thread);
                                                                                sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_389, thread);
                                                                            }
                                                                        }
                                                                        if (source == $RESOURCE) {
                                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                        }
                                                                    } finally {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_388, thread);
                                                                    }
                                                                }
                                                                if (source == $RESOURCE) {
                                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                }
                                                            } finally {
                                                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_387, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_386, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_385, thread);
                                                    sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_384, thread);
                                                }
                                            }
                                        } finally {
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_383, thread);
                                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_382, thread);
                                        }
                                    }
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_381, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_380, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_379, thread);
                            }
                        }
                    }
                } finally {
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                }
            }
            return NIL;
        }
    }

    @LispMethod(comment = "Applies FUNCTION to each element of NODES\' backward true transitive closures")
    public static SubLObject sbhl_map_union_all_backward_true_nodes(final SubLObject module, final SubLObject nodes, final SubLObject function, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$380 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$381 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$382 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$381 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$382 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$382 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$383 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$383 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$383 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$384 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$385 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$384 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$384 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$393 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$394 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!function.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$386 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$385 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$385 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$394 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$395 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_APPLY_COMPOSE_FN, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                            final SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
                                            SubLObject cdolist_list_var = nodes;
                                            SubLObject node = NIL;
                                            node = cdolist_list_var.first();
                                            while (NIL != cdolist_list_var) {
                                                if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                    final SubLObject _prev_bind_0_$387 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$386 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                        sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                                                    } finally {
                                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_1_$386, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_$387, thread);
                                                    }
                                                } else {
                                                    sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                node = cdolist_list_var.first();
                                            } 
                                        } finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_$395, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$394, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_$385, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$385, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$386, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$394, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$393, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$384, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$384, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$385, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$384, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$383, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$383, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$383, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$382, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$382, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$381, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$382, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$381, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$380, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }/**
     * Applies FUNCTION to each element of NODES' backward true transitive closures
     */


    public static final SubLObject sbhl_simply_union_all_backward_true_nodes_alt(SubLObject module, SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                    sbhl_module_vars.$sbhl_module$.bind(module, thread);
                    {
                        SubLObject mt_var = mt;
                        {
                            SubLObject _prev_bind_0_401 = mt_relevance_macros.$mt$.currentBinding(thread);
                            SubLObject _prev_bind_1_402 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            SubLObject _prev_bind_2_403 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                {
                                    SubLObject tv_var = tv;
                                    {
                                        SubLObject _prev_bind_0_404 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                        SubLObject _prev_bind_1_405 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                            if (NIL != tv_var) {
                                                if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                    if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                        {
                                                            SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                            if (pcase_var.eql($ERROR)) {
                                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            } else {
                                                                if (pcase_var.eql($CERROR)) {
                                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($WARN)) {
                                                                        Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    } else {
                                                                        Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                        Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            {
                                                SubLObject _prev_bind_0_406 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                SubLObject _prev_bind_1_407 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                SubLObject _prev_bind_2_408 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                    {
                                                        SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                        {
                                                            SubLObject _prev_bind_0_409 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                            try {
                                                                sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                {
                                                                    SubLObject _prev_bind_0_410 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                        {
                                                                            SubLObject _prev_bind_0_411 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_1_412 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_2_413 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_3_414 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_4_415 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                {
                                                                                    SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                    SubLObject needs_to_releaseP = NIL;
                                                                                    try {
                                                                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                        {
                                                                                            SubLObject _prev_bind_0_416 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_1_417 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_2_418 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_3_419 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_4_420 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(NIL, thread);
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                                                                                sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                                                                                {
                                                                                                    SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
                                                                                                    SubLObject cdolist_list_var = nodes;
                                                                                                    SubLObject node = NIL;
                                                                                                    for (node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , node = cdolist_list_var.first()) {
                                                                                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                                                            sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                                                                                                        } else {
                                                                                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } finally {
                                                                                                sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_420, thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_419, thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_418, thread);
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_417, thread);
                                                                                                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_416, thread);
                                                                                            }
                                                                                        }
                                                                                    } finally {
                                                                                        if (NIL != needs_to_releaseP) {
                                                                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_415, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_414, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_413, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_412, thread);
                                                                                sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_411, thread);
                                                                            }
                                                                        }
                                                                        if (source == $RESOURCE) {
                                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                        }
                                                                    } finally {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_410, thread);
                                                                    }
                                                                }
                                                                if (source == $RESOURCE) {
                                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                }
                                                            } finally {
                                                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_409, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_408, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_407, thread);
                                                    sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_406, thread);
                                                }
                                            }
                                        } finally {
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_405, thread);
                                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_404, thread);
                                        }
                                    }
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_403, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_402, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_401, thread);
                            }
                        }
                    }
                } finally {
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                }
            }
            return NIL;
        }
    }

    public static SubLObject sbhl_simply_union_all_backward_true_nodes(final SubLObject module, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$402 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$403 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$404 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$403 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$404 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$404 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$405 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$405 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$405 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$406 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$407 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$406 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$406 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$415 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$416 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$408 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$407 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$407 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$416 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$417 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(NIL, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                            final SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
                                            SubLObject cdolist_list_var = nodes;
                                            SubLObject node = NIL;
                                            node = cdolist_list_var.first();
                                            while (NIL != cdolist_list_var) {
                                                if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                    sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                                                } else {
                                                    sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                node = cdolist_list_var.first();
                                            } 
                                        } finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_$417, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$416, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_$407, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_$407, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_$408, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$416, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$415, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$406, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$406, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$407, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$406, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$405, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$405, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$405, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$404, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$404, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$403, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$404, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$403, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$402, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    public static final SubLObject sbhl_union_simply_all_backward_true_edges_alt(SubLObject module, SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                    sbhl_module_vars.$sbhl_module$.bind(module, thread);
                    {
                        SubLObject mt_var = mt;
                        {
                            SubLObject _prev_bind_0_421 = mt_relevance_macros.$mt$.currentBinding(thread);
                            SubLObject _prev_bind_1_422 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            SubLObject _prev_bind_2_423 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                {
                                    SubLObject tv_var = tv;
                                    {
                                        SubLObject _prev_bind_0_424 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                        SubLObject _prev_bind_1_425 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                            if (NIL != tv_var) {
                                                if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                    if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                        {
                                                            SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                            if (pcase_var.eql($ERROR)) {
                                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            } else {
                                                                if (pcase_var.eql($CERROR)) {
                                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($WARN)) {
                                                                        Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    } else {
                                                                        Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                        Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            {
                                                SubLObject _prev_bind_0_426 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                SubLObject _prev_bind_1_427 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                SubLObject _prev_bind_2_428 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                    {
                                                        SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                        {
                                                            SubLObject _prev_bind_0_429 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                            try {
                                                                sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                {
                                                                    SubLObject _prev_bind_0_430 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                        {
                                                                            SubLObject _prev_bind_0_431 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_1_432 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_2_433 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_3_434 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_4_435 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                {
                                                                                    SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                    SubLObject needs_to_releaseP = NIL;
                                                                                    try {
                                                                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                        {
                                                                                            SubLObject _prev_bind_0_436 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_1_437 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_2_438 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_3_439 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_4_440 = sbhl_search_vars.$sbhl_apply_unwind_function_p$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_5 = sbhl_search_vars.$sbhl_unwind_function$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(NIL, thread);
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.bind(NIL, thread);
                                                                                                sbhl_search_vars.$sbhl_apply_unwind_function_p$.bind(T, thread);
                                                                                                sbhl_search_vars.$sbhl_unwind_function$.bind(SBHL_PUSH_UNWIND_ONTO_RESULT, thread);
                                                                                                sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                                                                                {
                                                                                                    SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
                                                                                                    SubLObject cdolist_list_var = nodes;
                                                                                                    SubLObject node = NIL;
                                                                                                    for (node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , node = cdolist_list_var.first()) {
                                                                                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                                                            sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                                                                                                        } else {
                                                                                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } finally {
                                                                                                sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_6, thread);
                                                                                                sbhl_search_vars.$sbhl_unwind_function$.rebind(_prev_bind_5, thread);
                                                                                                sbhl_search_vars.$sbhl_apply_unwind_function_p$.rebind(_prev_bind_4_440, thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_439, thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_438, thread);
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_437, thread);
                                                                                                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_436, thread);
                                                                                            }
                                                                                        }
                                                                                    } finally {
                                                                                        if (NIL != needs_to_releaseP) {
                                                                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_435, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_434, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_433, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_432, thread);
                                                                                sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_431, thread);
                                                                            }
                                                                        }
                                                                        if (source == $RESOURCE) {
                                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                        }
                                                                    } finally {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_430, thread);
                                                                    }
                                                                }
                                                                if (source == $RESOURCE) {
                                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                }
                                                            } finally {
                                                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_429, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_428, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_427, thread);
                                                    sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_426, thread);
                                                }
                                            }
                                        } finally {
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_425, thread);
                                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_424, thread);
                                        }
                                    }
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_423, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_422, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_421, thread);
                            }
                        }
                    }
                } finally {
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                }
            }
            return NIL;
        }
    }

    public static SubLObject sbhl_union_simply_all_backward_true_edges(final SubLObject module, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$422 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$423 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$424 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$423 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$424 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$424 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$425 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$425 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$425 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$426 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$427 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$426 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$426 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$435 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$436 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$428 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$427 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$427 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$436 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$437 = sbhl_search_vars.$sbhl_apply_unwind_function_p$.currentBinding(thread);
                                        final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_unwind_function$.currentBinding(thread);
                                        final SubLObject _prev_bind_7 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(NIL, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(NIL, thread);
                                            sbhl_search_vars.$sbhl_apply_unwind_function_p$.bind(T, thread);
                                            sbhl_search_vars.$sbhl_unwind_function$.bind(SBHL_PUSH_UNWIND_ONTO_RESULT, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                            final SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
                                            SubLObject cdolist_list_var = nodes;
                                            SubLObject node = NIL;
                                            node = cdolist_list_var.first();
                                            while (NIL != cdolist_list_var) {
                                                if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                    sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                                                } else {
                                                    sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                node = cdolist_list_var.first();
                                            } 
                                        } finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_7, thread);
                                            sbhl_search_vars.$sbhl_unwind_function$.rebind(_prev_bind_6, thread);
                                            sbhl_search_vars.$sbhl_apply_unwind_function_p$.rebind(_prev_bind_4_$437, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$436, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_$427, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_$427, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_$428, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$436, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$435, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$426, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$426, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$427, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$426, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$425, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$425, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$425, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$424, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$424, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$423, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$424, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$423, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$422, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    /**
     * all specs, specpreds and specinverses, of NODES wrt PRED such that they pass the test FN.
     */
    @LispMethod(comment = "all specs, specpreds and specinverses, of NODES wrt PRED such that they pass the test FN.")
    public static final SubLObject sbhl_simply_union_all_backward_true_nodes_such_that_alt(SubLObject module, SubLObject nodes, SubLObject fn, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                    sbhl_module_vars.$sbhl_module$.bind(module, thread);
                    {
                        SubLObject mt_var = mt;
                        {
                            SubLObject _prev_bind_0_441 = mt_relevance_macros.$mt$.currentBinding(thread);
                            SubLObject _prev_bind_1_442 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            SubLObject _prev_bind_2_443 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                {
                                    SubLObject tv_var = tv;
                                    {
                                        SubLObject _prev_bind_0_444 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                        SubLObject _prev_bind_1_445 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                            if (NIL != tv_var) {
                                                if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                    if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                        {
                                                            SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                            if (pcase_var.eql($ERROR)) {
                                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            } else {
                                                                if (pcase_var.eql($CERROR)) {
                                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($WARN)) {
                                                                        Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    } else {
                                                                        Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                        Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            {
                                                SubLObject _prev_bind_0_446 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                SubLObject _prev_bind_1_447 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                SubLObject _prev_bind_2_448 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                    {
                                                        SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                        {
                                                            SubLObject _prev_bind_0_449 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                            try {
                                                                sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                {
                                                                    SubLObject _prev_bind_0_450 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                        {
                                                                            SubLObject _prev_bind_0_451 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_1_452 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                            SubLObject _prev_bind_2_453 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_3_454 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                            SubLObject _prev_bind_4_455 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                {
                                                                                    SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                    SubLObject needs_to_releaseP = NIL;
                                                                                    try {
                                                                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                        if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                            if (!fn.isFunctionSpec()) {
                                                                                                {
                                                                                                    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                    if (pcase_var.eql($ERROR)) {
                                                                                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                    } else {
                                                                                                        if (pcase_var.eql($CERROR)) {
                                                                                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($WARN)) {
                                                                                                                Errors.warn($str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                            } else {
                                                                                                                Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            SubLObject _prev_bind_0_456 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_1_457 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_2_458 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_3_459 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                                                                            SubLObject _prev_bind_4_460 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(fn, thread);
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                                                                                sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                                                                                {
                                                                                                    SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
                                                                                                    SubLObject cdolist_list_var = nodes;
                                                                                                    SubLObject node = NIL;
                                                                                                    for (node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , node = cdolist_list_var.first()) {
                                                                                                        if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                                                                            sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                                                                                                        } else {
                                                                                                            sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str_alt15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } finally {
                                                                                                sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_460, thread);
                                                                                                sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_459, thread);
                                                                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_458, thread);
                                                                                                sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_457, thread);
                                                                                                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_456, thread);
                                                                                            }
                                                                                        }
                                                                                    } finally {
                                                                                        if (NIL != needs_to_releaseP) {
                                                                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_455, thread);
                                                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_454, thread);
                                                                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_453, thread);
                                                                                sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_452, thread);
                                                                                sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_451, thread);
                                                                            }
                                                                        }
                                                                        if (source == $RESOURCE) {
                                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                        }
                                                                    } finally {
                                                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_450, thread);
                                                                    }
                                                                }
                                                                if (source == $RESOURCE) {
                                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                }
                                                            } finally {
                                                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_449, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_448, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_447, thread);
                                                    sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_446, thread);
                                                }
                                            }
                                        } finally {
                                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_445, thread);
                                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_444, thread);
                                        }
                                    }
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_443, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_442, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_441, thread);
                            }
                        }
                    }
                } finally {
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                }
            }
            return NIL;
        }
    }

    @LispMethod(comment = "all specs, specpreds and specinverses, of NODES wrt PRED such that they pass the test FN.")
    public static SubLObject sbhl_simply_union_all_backward_true_nodes_such_that(final SubLObject module, final SubLObject nodes, final SubLObject fn, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$442 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$443 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$444 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$443 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$444 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$444 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$445 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$445 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$445 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$446 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$447 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$446 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$446 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$455 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$456 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!fn.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$448 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$447 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$447 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$456 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$457 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(fn, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind($CLOSURE, thread);
                                            final SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
                                            SubLObject cdolist_list_var = nodes;
                                            SubLObject node = NIL;
                                            node = cdolist_list_var.first();
                                            while (NIL != cdolist_list_var) {
                                                if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                                    sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                                                } else {
                                                    sbhl_paranoia.sbhl_warn(TWO_INTEGER, $str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                node = cdolist_list_var.first();
                                            } 
                                        } finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_$457, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$456, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_$447, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_$447, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_$448, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$456, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$455, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$446, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$446, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$447, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$446, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$445, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$445, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$445, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$444, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$444, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$443, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$444, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$443, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$442, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }/**
     * all specs, specpreds and specinverses, of NODES wrt PRED such that they pass the test FN.
     */


    /**
     * Applies FUNCTION to each element of NODE's forward true closure, combining any non-nil result with *sbhl-result* using COMBINE-FN. @see sbhl-gather-closure
     */
    @LispMethod(comment = "Applies FUNCTION to each element of NODE\'s forward true closure, combining any non-nil result with *sbhl-result* using COMBINE-FN. @see sbhl-gather-closure")
    public static final SubLObject sbhl_gather_all_forward_true_nodes_alt(SubLObject module, SubLObject node, SubLObject function, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject combiner = (NIL != combine_fn) ? ((SubLObject) (combine_fn)) : sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue(thread);
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_461 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_462 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_463 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_464 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_465 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_466 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_467 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_468 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_469 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_470 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_471 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_472 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_473 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_474 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_475 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                                if (!function.isFunctionSpec()) {
                                                                                                    {
                                                                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                        if (pcase_var.eql($ERROR)) {
                                                                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($CERROR)) {
                                                                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                            } else {
                                                                                                                if (pcase_var.eql($WARN)) {
                                                                                                                    Errors.warn($str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                                                                                } else {
                                                                                                                    Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                    Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                SubLObject _prev_bind_0_476 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_477 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_gather_closure(node, function, combiner);
                                                                                                } finally {
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_477, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_476, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_475, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_474, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_473, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_472, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_471, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_470, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_469, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_468, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_467, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_466, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_465, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_464, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_463, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_462, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_461, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    @LispMethod(comment = "Applies FUNCTION to each element of NODE\'s forward true closure, combining any non-nil result with *sbhl-result* using COMBINE-FN. @see sbhl-gather-closure")
    public static SubLObject sbhl_gather_all_forward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject function, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject combiner = (NIL != combine_fn) ? combine_fn : sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue(thread);
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$462 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$463 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$464 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$463 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$464 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$464 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$465 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$465 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$465 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$466 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$467 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$466 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$466 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$475 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$476 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!function.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$468 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$467 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_gather_closure(node, function, combiner);
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$467, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$468, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$476, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$475, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$466, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$466, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$467, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$466, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$465, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$465, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$465, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$464, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$464, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$463, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$464, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$463, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$462, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }/**
     * Applies FUNCTION to each element of NODE's forward true closure, combining any non-nil result with *sbhl-result* using COMBINE-FN. @see sbhl-gather-closure
     */


    /**
     * Applies FUNCTION to each element of NODE's backward true closure, combining any non-nil result with *sbhl-result* using COMBINE-FN. @see sbhl-gather-closure
     */
    @LispMethod(comment = "Applies FUNCTION to each element of NODE\'s backward true closure, combining any non-nil result with *sbhl-result* using COMBINE-FN. @see sbhl-gather-closure")
    public static final SubLObject sbhl_gather_all_backward_true_nodes_alt(SubLObject module, SubLObject node, SubLObject function, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject combiner = (NIL != combine_fn) ? ((SubLObject) (combine_fn)) : sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue(thread);
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_478 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_479 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_480 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_481 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_482 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_483 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_484 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_485 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_486 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_487 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_488 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_489 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_490 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_491 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_492 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                                if (!function.isFunctionSpec()) {
                                                                                                    {
                                                                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                        if (pcase_var.eql($ERROR)) {
                                                                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($CERROR)) {
                                                                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                            } else {
                                                                                                                if (pcase_var.eql($WARN)) {
                                                                                                                    Errors.warn($str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                                                                                } else {
                                                                                                                    Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                    Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                SubLObject _prev_bind_0_493 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_494 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_gather_closure(node, function, combiner);
                                                                                                } finally {
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_494, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_493, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_492, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_491, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_490, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_489, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_488, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_487, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_486, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_485, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_484, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_483, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_482, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_481, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_480, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_479, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_478, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    @LispMethod(comment = "Applies FUNCTION to each element of NODE\'s backward true closure, combining any non-nil result with *sbhl-result* using COMBINE-FN. @see sbhl-gather-closure")
    public static SubLObject sbhl_gather_all_backward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject function, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject combiner = (NIL != combine_fn) ? combine_fn : sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue(thread);
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$479 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$480 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$481 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$480 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$481 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$481 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$482 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$482 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$482 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$483 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$484 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$483 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$483 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$492 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$493 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!function.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, function, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$485 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$484 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_gather_closure(node, function, combiner);
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$484, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$485, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$493, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$492, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$483, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$483, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$484, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$483, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$482, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$482, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$482, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$481, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$481, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$480, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$481, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$480, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$479, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }/**
     * Applies FUNCTION to each element of NODE's backward true closure, combining any non-nil result with *sbhl-result* using COMBINE-FN. @see sbhl-gather-closure
     */


    /**
     *
     *
     * @unknown *sbhl-compose-fn*. @binds *sbhl-combine-fn*. @binds *sbhl-consider-node-fn*, to @see sbhl-apply-compose-fn-and-combine-with-result. Then performs @see sbhl-transitive-closure.
     */
    @LispMethod(comment = "@unknown *sbhl-compose-fn*. @binds *sbhl-combine-fn*. @binds *sbhl-consider-node-fn*, to @see sbhl-apply-compose-fn-and-combine-with-result. Then performs @see sbhl-transitive-closure.")
    public static final SubLObject sbhl_gather_closure_alt(SubLObject node, SubLObject function, SubLObject combine_fn) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_combine_fn$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
                        sbhl_search_vars.$sbhl_combine_fn$.bind(combine_fn, thread);
                        sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_APPLY_COMPOSE_FN_AND_COMBINE_WITH_RESULT, thread);
                        result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node);
                    } finally {
                        sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_combine_fn$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @unknown *sbhl-compose-fn*. @binds *sbhl-combine-fn*. @binds *sbhl-consider-node-fn*, to @see sbhl-apply-compose-fn-and-combine-with-result. Then performs @see sbhl-transitive-closure.
     */
    @LispMethod(comment = "@unknown *sbhl-compose-fn*. @binds *sbhl-combine-fn*. @binds *sbhl-consider-node-fn*, to @see sbhl-apply-compose-fn-and-combine-with-result. Then performs @see sbhl-transitive-closure.")
    public static SubLObject sbhl_gather_closure(final SubLObject node, final SubLObject function, final SubLObject combine_fn) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_combine_fn$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
            sbhl_search_vars.$sbhl_combine_fn$.bind(combine_fn, thread);
            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_APPLY_COMPOSE_FN_AND_COMBINE_WITH_RESULT, thread);
            result = sbhl_transitive_closure(node);
        } finally {
            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_combine_fn$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     * Applies FUNCTION to each element of NODE's forward true closure, returning the first non-nil result. @see sbhl-gather-first-among-closure
     */
    @LispMethod(comment = "Applies FUNCTION to each element of NODE\'s forward true closure, returning the first non-nil result. @see sbhl-gather-first-among-closure")
    public static final SubLObject sbhl_gather_first_among_all_forward_true_nodes_alt(SubLObject module, SubLObject node, SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject combiner = (NIL != combine_fn) ? ((SubLObject) (combine_fn)) : sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue(thread);
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_495 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_496 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_497 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_498 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_499 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_500 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_501 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_502 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_503 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_504 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_505 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_506 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_507 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_508 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_509 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                                if (!fn.isFunctionSpec()) {
                                                                                                    {
                                                                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                        if (pcase_var.eql($ERROR)) {
                                                                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($CERROR)) {
                                                                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                            } else {
                                                                                                                if (pcase_var.eql($WARN)) {
                                                                                                                    Errors.warn($str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                } else {
                                                                                                                    Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                    Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                SubLObject _prev_bind_0_510 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_511 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_gather_first_among_closure(node, fn, combiner);
                                                                                                } finally {
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_511, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_510, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_509, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_508, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_507, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_506, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_505, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_504, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_503, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_502, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_501, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_500, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_499, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_498, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_497, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_496, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_495, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    @LispMethod(comment = "Applies FUNCTION to each element of NODE\'s forward true closure, returning the first non-nil result. @see sbhl-gather-first-among-closure")
    public static SubLObject sbhl_gather_first_among_all_forward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject combiner = (NIL != combine_fn) ? combine_fn : sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue(thread);
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$496 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$497 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$498 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$497 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$498 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$498 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$499 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$499 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$499 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$500 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$501 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$500 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$500 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$509 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$510 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!fn.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$502 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$501 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_gather_first_among_closure(node, fn, combiner);
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$501, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$502, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$510, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$509, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$500, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$500, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$501, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$500, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$499, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$499, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$499, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$498, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$498, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$497, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$498, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$497, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$496, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }/**
     * Applies FUNCTION to each element of NODE's forward true closure, returning the first non-nil result. @see sbhl-gather-first-among-closure
     */


    /**
     * Modifier: Binds *sbhl-space* to SPACE and *sbhl-gather-space* to GATHER-SPACE and performs @see sbhl-gather-first-among-closure
     */
    @LispMethod(comment = "Modifier: Binds *sbhl-space* to SPACE and *sbhl-gather-space* to GATHER-SPACE and performs @see sbhl-gather-first-among-closure")
    public static final SubLObject sbhl_gather_first_among_forward_true_nodes_in_space_alt(SubLObject module, SubLObject node, SubLObject fn, SubLObject space, SubLObject gather_space, SubLObject combine_fn) {
        if (space == UNPROVIDED) {
            space = sbhl_marking_vars.$sbhl_space$.getDynamicValue();
        }
        if (gather_space == UNPROVIDED) {
            gather_space = sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue();
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject combiner = (NIL != combine_fn) ? ((SubLObject) (combine_fn)) : sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue(thread);
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    SubLObject _prev_bind_5 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                    SubLObject _prev_bind_6 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                    SubLObject _prev_bind_7 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    SubLObject _prev_bind_8 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    SubLObject _prev_bind_9 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    SubLObject _prev_bind_10 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                    SubLObject _prev_bind_11 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                    SubLObject _prev_bind_12 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                    SubLObject _prev_bind_13 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                    SubLObject _prev_bind_14 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        sbhl_marking_vars.$sbhl_space$.bind(space, thread);
                        sbhl_marking_vars.$sbhl_gather_space$.bind(gather_space, thread);
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                        sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        {
                            SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                            SubLObject needs_to_releaseP = NIL;
                            try {
                                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                {
                                    SubLObject _prev_bind_0_512 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                    SubLObject _prev_bind_1_513 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                        sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                        result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_gather_first_among_closure(node, fn, combiner);
                                    } finally {
                                        sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_513, thread);
                                        sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_512, thread);
                                    }
                                }
                            } finally {
                                if (NIL != needs_to_releaseP) {
                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                }
                            }
                        }
                    } finally {
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_14, thread);
                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_13, thread);
                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_12, thread);
                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_11, thread);
                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_10, thread);
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_9, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_8, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_7, thread);
                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_6, thread);
                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_5, thread);
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    @LispMethod(comment = "Modifier: Binds *sbhl-space* to SPACE and *sbhl-gather-space* to GATHER-SPACE and performs @see sbhl-gather-first-among-closure")
    public static SubLObject sbhl_gather_first_among_forward_true_nodes_in_space(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject space, SubLObject gather_space, SubLObject combine_fn) {
        if (space == UNPROVIDED) {
            space = sbhl_marking_vars.$sbhl_space$.getDynamicValue();
        }
        if (gather_space == UNPROVIDED) {
            gather_space = sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue();
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject combiner = (NIL != combine_fn) ? combine_fn : sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue(thread);
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_6 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
        final SubLObject _prev_bind_7 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        final SubLObject _prev_bind_8 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
        final SubLObject _prev_bind_9 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
        final SubLObject _prev_bind_10 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
        final SubLObject _prev_bind_11 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
        final SubLObject _prev_bind_12 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
        final SubLObject _prev_bind_13 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
        final SubLObject _prev_bind_14 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
        final SubLObject _prev_bind_15 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            sbhl_marking_vars.$sbhl_space$.bind(space, thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(gather_space, thread);
            sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
            sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
            sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
            sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
            SubLObject needs_to_releaseP = NIL;
            try {
                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                final SubLObject _prev_bind_0_$513 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                final SubLObject _prev_bind_1_$514 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                    result = sbhl_gather_first_among_closure(node, fn, combiner);
                } finally {
                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$514, thread);
                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$513, thread);
                }
            } finally {
                if (NIL != needs_to_releaseP) {
                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                }
            }
        } finally {
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_15, thread);
            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_14, thread);
            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_13, thread);
            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_12, thread);
            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_11, thread);
            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_10, thread);
            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_9, thread);
            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_8, thread);
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_7, thread);
            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_6, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }/**
     * Modifier: Binds *sbhl-space* to SPACE and *sbhl-gather-space* to GATHER-SPACE and performs @see sbhl-gather-first-among-closure
     */


    /**
     * Applies FUNCTION to each element of NODE's backward true closure, returning the first non-nil result. @see sbhl-gather-first-among-closure
     */
    @LispMethod(comment = "Applies FUNCTION to each element of NODE\'s backward true closure, returning the first non-nil result. @see sbhl-gather-first-among-closure")
    public static final SubLObject sbhl_gather_first_among_all_backward_true_nodes_alt(SubLObject module, SubLObject node, SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject combiner = (NIL != combine_fn) ? ((SubLObject) (combine_fn)) : sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue(thread);
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_514 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_515 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_516 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_517 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_518 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_519 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_520 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_521 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_522 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_523 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_524 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_525 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_526 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_527 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_528 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                                if (!fn.isFunctionSpec()) {
                                                                                                    {
                                                                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                        if (pcase_var.eql($ERROR)) {
                                                                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($CERROR)) {
                                                                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                            } else {
                                                                                                                if (pcase_var.eql($WARN)) {
                                                                                                                    Errors.warn($str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                } else {
                                                                                                                    Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                    Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                SubLObject _prev_bind_0_529 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_530 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_gather_first_among_closure(node, fn, combiner);
                                                                                                } finally {
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_530, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_529, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_528, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_527, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_526, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_525, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_524, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_523, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_522, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_521, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_520, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_519, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_518, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_517, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_516, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_515, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_514, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    @LispMethod(comment = "Applies FUNCTION to each element of NODE\'s backward true closure, returning the first non-nil result. @see sbhl-gather-first-among-closure")
    public static SubLObject sbhl_gather_first_among_all_backward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject combiner = (NIL != combine_fn) ? combine_fn : sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue(thread);
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$515 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$516 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$517 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$516 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$517 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$517 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$518 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$518 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$518 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$519 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$520 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$519 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$519 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$528 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$529 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!fn.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$521 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$520 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_gather_first_among_closure(node, fn, combiner);
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$520, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$521, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$529, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$528, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$519, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$519, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$520, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$519, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$518, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$518, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$518, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$517, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$517, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$516, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$517, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$516, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$515, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }/**
     * Applies FUNCTION to each element of NODE's backward true closure, returning the first non-nil result. @see sbhl-gather-first-among-closure
     */


    public static final SubLObject sbhl_simply_gather_first_among_all_forward_true_nodes_alt(SubLObject module, SubLObject node, SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue();
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_531 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_532 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_533 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_534 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_535 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_536 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_537 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_538 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_539 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_540 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_541 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_542 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_543 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_544 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_545 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                                if (!fn.isFunctionSpec()) {
                                                                                                    {
                                                                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                        if (pcase_var.eql($ERROR)) {
                                                                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($CERROR)) {
                                                                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                            } else {
                                                                                                                if (pcase_var.eql($WARN)) {
                                                                                                                    Errors.warn($str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                } else {
                                                                                                                    Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                    Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                SubLObject _prev_bind_0_546 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_547 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_2_548 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(NIL, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_gather_first_among_closure(node, fn, combine_fn);
                                                                                                } finally {
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_548, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_547, thread);
                                                                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_546, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_545, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_544, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_543, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_542, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_541, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_540, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_539, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_538, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_537, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_536, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_535, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_534, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_533, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_532, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_531, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    public static SubLObject sbhl_simply_gather_first_among_all_forward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$532 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$533 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$534 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$533 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$534 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$534 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$535 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$535 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$535 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$536 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$537 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$536 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$536 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$545 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$546 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!fn.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$538 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$537 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$537 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(NIL, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_gather_first_among_closure(node, fn, combine_fn);
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_$537, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_$537, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_$538, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$546, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$545, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$536, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$536, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$537, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$536, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$535, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$535, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$535, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$534, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$534, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$533, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$534, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$533, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$532, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    public static final SubLObject sbhl_simply_gather_first_among_all_backward_true_nodes_alt(SubLObject module, SubLObject node, SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue();
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_549 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_550 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_551 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_552 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_553 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_554 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_555 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_556 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_557 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_558 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_559 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_560 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_561 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_562 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_563 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                                if (!fn.isFunctionSpec()) {
                                                                                                    {
                                                                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                        if (pcase_var.eql($ERROR)) {
                                                                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($CERROR)) {
                                                                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                            } else {
                                                                                                                if (pcase_var.eql($WARN)) {
                                                                                                                    Errors.warn($str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                } else {
                                                                                                                    Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                    Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                SubLObject _prev_bind_0_564 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_565 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_2_566 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(NIL, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_gather_first_among_closure(node, fn, combine_fn);
                                                                                                } finally {
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_566, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_565, thread);
                                                                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_564, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_563, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_562, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_561, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_560, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_559, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_558, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_557, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_556, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_555, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_554, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_553, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_552, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_551, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_550, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_549, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    public static SubLObject sbhl_simply_gather_first_among_all_backward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$550 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$551 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$552 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$551 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$552 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$552 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$553 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$553 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$553 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$554 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$555 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$554 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$554 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$563 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$564 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!fn.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$556 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$555 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$555 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(NIL, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_gather_first_among_closure(node, fn, combine_fn);
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_$555, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_$555, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_$556, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$564, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$563, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$554, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$554, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$555, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$554, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$553, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$553, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$553, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$552, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$552, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$551, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$552, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$551, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$550, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    public static final SubLObject sbhl_gather_first_among_closure_alt(SubLObject node, SubLObject compose_fn, SubLObject combine_fn) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_combine_fn$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_compose_fn$.bind(compose_fn, thread);
                        sbhl_search_vars.$sbhl_combine_fn$.bind(combine_fn, thread);
                        sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_GATHER_FIRST_NON_NIL_RESULT, thread);
                        result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node);
                    } finally {
                        sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_combine_fn$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    public static SubLObject sbhl_gather_first_among_closure(final SubLObject node, final SubLObject compose_fn, final SubLObject combine_fn) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_combine_fn$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_compose_fn$.bind(compose_fn, thread);
            sbhl_search_vars.$sbhl_combine_fn$.bind(combine_fn, thread);
            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_GATHER_FIRST_NON_NIL_RESULT, thread);
            result = sbhl_transitive_closure(node);
        } finally {
            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_combine_fn$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    public static final SubLObject sbhl_simply_gather_first_among_all_forward_true_nodes_with_prune_alt(SubLObject module, SubLObject node, SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue();
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_567 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_568 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_569 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_570 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_571 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_572 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_573 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_574 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_575 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_576 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_577 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_578 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_579 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_580 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_581 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                                if (!fn.isFunctionSpec()) {
                                                                                                    {
                                                                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                        if (pcase_var.eql($ERROR)) {
                                                                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($CERROR)) {
                                                                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                            } else {
                                                                                                                if (pcase_var.eql($WARN)) {
                                                                                                                    Errors.warn($str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                } else {
                                                                                                                    Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                    Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                SubLObject _prev_bind_0_582 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_583 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_2_584 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(NIL, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_gather_first_among_closure_with_prune(node, fn, combine_fn);
                                                                                                } finally {
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_584, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_583, thread);
                                                                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_582, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_581, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_580, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_579, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_578, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_577, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_576, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_575, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_574, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_573, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_572, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_571, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_570, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_569, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_568, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_567, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    public static SubLObject sbhl_simply_gather_first_among_all_forward_true_nodes_with_prune(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$568 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$569 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$570 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$569 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$570 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$570 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$571 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$571 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$571 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$572 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$573 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$572 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$572 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$581 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$582 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!fn.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$574 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$573 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$573 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(NIL, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_gather_first_among_closure_with_prune(node, fn, combine_fn);
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_$573, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_$573, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_$574, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$582, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$581, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$572, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$572, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$573, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$572, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$571, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$571, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$571, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$570, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$570, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$569, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$570, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$569, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$568, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    public static final SubLObject sbhl_simply_gather_first_among_all_backward_true_nodes_with_prune_alt(SubLObject module, SubLObject node, SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue();
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_585 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_586 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_587 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_588 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_589 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_590 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_591 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_592 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_593 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_594 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_595 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_596 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_597 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_598 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_599 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                                if (!fn.isFunctionSpec()) {
                                                                                                    {
                                                                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                        if (pcase_var.eql($ERROR)) {
                                                                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($CERROR)) {
                                                                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                            } else {
                                                                                                                if (pcase_var.eql($WARN)) {
                                                                                                                    Errors.warn($str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                } else {
                                                                                                                    Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                    Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                SubLObject _prev_bind_0_600 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_601 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_2_602 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(NIL, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_gather_first_among_closure_with_prune(node, fn, combine_fn);
                                                                                                } finally {
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_602, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_601, thread);
                                                                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_600, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_599, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_598, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_597, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_596, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_595, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_594, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_593, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_592, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_591, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_590, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_589, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_588, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_587, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_586, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_585, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    public static SubLObject sbhl_simply_gather_first_among_all_backward_true_nodes_with_prune(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (combine_fn == UNPROVIDED) {
            combine_fn = sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$586 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$587 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$588 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$587 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$588 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$588 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$589 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$589 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$589 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$590 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$591 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$590 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$590 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$599 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$600 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!fn.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$592 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$591 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$591 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(NIL, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_gather_first_among_closure_with_prune(node, fn, combine_fn);
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_$591, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_$591, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_$592, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$600, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$599, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$590, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$590, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$591, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$590, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$589, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$589, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$589, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$588, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$588, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$587, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$588, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$587, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$586, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    public static final SubLObject sbhl_gather_first_among_closure_with_prune_alt(SubLObject node, SubLObject compose_fn, SubLObject combine_fn) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_combine_fn$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_compose_fn$.bind(compose_fn, thread);
                        sbhl_search_vars.$sbhl_combine_fn$.bind(combine_fn, thread);
                        sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_GATHER_FIRST_NON_NIL_RESULT_WITH_PRUNE, thread);
                        result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node);
                    } finally {
                        sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_combine_fn$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    public static SubLObject sbhl_gather_first_among_closure_with_prune(final SubLObject node, final SubLObject compose_fn, final SubLObject combine_fn) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_combine_fn$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_compose_fn$.bind(compose_fn, thread);
            sbhl_search_vars.$sbhl_combine_fn$.bind(combine_fn, thread);
            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_GATHER_FIRST_NON_NIL_RESULT_WITH_PRUNE, thread);
            result = sbhl_transitive_closure(node);
        } finally {
            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_combine_fn$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; each element of NODE's forward true transitive closure that pass the test FN.
     */
    @LispMethod(comment = "@return listp; each element of NODE\'s forward true transitive closure that pass the test FN.")
    public static final SubLObject sbhl_all_forward_true_nodes_if_alt(SubLObject module, SubLObject node, SubLObject fn, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_603 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_604 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_605 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_606 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_607 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_608 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_609 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_610 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_611 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_612 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_613 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_614 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_615 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_616 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_617 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                                if (!fn.isFunctionSpec()) {
                                                                                                    {
                                                                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                        if (pcase_var.eql($ERROR)) {
                                                                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($CERROR)) {
                                                                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                            } else {
                                                                                                                if (pcase_var.eql($WARN)) {
                                                                                                                    Errors.warn($str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                } else {
                                                                                                                    Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                    Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                SubLObject _prev_bind_0_618 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_619 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_closure_if(node, fn);
                                                                                                } finally {
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_619, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_618, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_617, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_616, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_615, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_614, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_613, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_612, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_611, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_610, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_609, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_608, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_607, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_606, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_605, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_604, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_603, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; each element of NODE's forward true transitive closure that pass the test FN.
     */
    @LispMethod(comment = "@return listp; each element of NODE\'s forward true transitive closure that pass the test FN.")
    public static SubLObject sbhl_all_forward_true_nodes_if(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$604 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$605 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$606 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$605 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$606 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$606 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$607 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$607 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$607 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$608 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$609 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$608 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$608 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$617 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$618 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!fn.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$610 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$609 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_closure_if(node, fn);
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$609, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$610, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$618, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$617, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$608, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$608, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$609, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$608, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$607, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$607, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$607, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$606, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$606, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$605, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$606, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$605, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$604, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; each element of NODE's backward true transitive closure that pass the test FN.
     */
    @LispMethod(comment = "@return listp; each element of NODE\'s backward true transitive closure that pass the test FN.")
    public static final SubLObject sbhl_all_backward_true_nodes_if_alt(SubLObject module, SubLObject node, SubLObject fn, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_620 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_621 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_622 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_623 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_624 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_625 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_626 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_627 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_628 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_629 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_630 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_631 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_632 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_633 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_634 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                                if (!fn.isFunctionSpec()) {
                                                                                                    {
                                                                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                        if (pcase_var.eql($ERROR)) {
                                                                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($CERROR)) {
                                                                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                            } else {
                                                                                                                if (pcase_var.eql($WARN)) {
                                                                                                                    Errors.warn($str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                } else {
                                                                                                                    Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                    Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                SubLObject _prev_bind_0_635 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_636 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_closure_if(node, fn);
                                                                                                } finally {
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_636, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_635, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_634, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_633, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_632, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_631, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_630, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_629, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_628, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_627, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_626, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_625, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_624, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_623, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_622, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_621, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_620, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; each element of NODE's backward true transitive closure that pass the test FN.
     */
    @LispMethod(comment = "@return listp; each element of NODE\'s backward true transitive closure that pass the test FN.")
    public static SubLObject sbhl_all_backward_true_nodes_if(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$621 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$622 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$623 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$622 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$623 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$623 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$624 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$624 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$624 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$625 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$626 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$625 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$625 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$634 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$635 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!fn.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$627 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$626 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_closure_if(node, fn);
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$626, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$627, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$635, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$634, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$625, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$625, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$626, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$625, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$624, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$624, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$624, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$623, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$623, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$622, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$623, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$622, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$621, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; each element of NODE's transitive closure that passes the test: FN. @binds *sbhl-consider-node-fn* to @see sbhl-push-onto-result-if
     */
    @LispMethod(comment = "@return listp; each element of NODE\'s transitive closure that passes the test: FN. @binds *sbhl-consider-node-fn* to @see sbhl-push-onto-result-if")
    public static final SubLObject sbhl_closure_if_alt(SubLObject node, SubLObject fn) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT_IF, thread);
                        sbhl_search_vars.$sbhl_compose_fn$.bind(fn, thread);
                        result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node);
                    } finally {
                        sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; each element of NODE's transitive closure that passes the test: FN. @binds *sbhl-consider-node-fn* to @see sbhl-push-onto-result-if
     */
    @LispMethod(comment = "@return listp; each element of NODE\'s transitive closure that passes the test: FN. @binds *sbhl-consider-node-fn* to @see sbhl-push-onto-result-if")
    public static SubLObject sbhl_closure_if(final SubLObject node, final SubLObject fn) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT_IF, thread);
            sbhl_search_vars.$sbhl_compose_fn$.bind(fn, thread);
            result = sbhl_transitive_closure(node);
        } finally {
            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; each element of NODE's forward true transitive closure that pass the test FN.
     */
    @LispMethod(comment = "@return listp; each element of NODE\'s forward true transitive closure that pass the test FN.")
    public static final SubLObject sbhl_all_forward_true_nodes_if_with_pruning_alt(SubLObject module, SubLObject node, SubLObject fn, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_637 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_638 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_639 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_640 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_641 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_642 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_643 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_644 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_645 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_646 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_647 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_648 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_649 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_650 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_651 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                                if (!fn.isFunctionSpec()) {
                                                                                                    {
                                                                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                        if (pcase_var.eql($ERROR)) {
                                                                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($CERROR)) {
                                                                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                            } else {
                                                                                                                if (pcase_var.eql($WARN)) {
                                                                                                                    Errors.warn($str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                } else {
                                                                                                                    Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                    Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                SubLObject _prev_bind_0_652 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_653 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_closure_if_and_stop_unless(node, fn);
                                                                                                } finally {
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_653, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_652, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_651, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_650, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_649, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_648, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_647, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_646, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_645, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_644, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_643, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_642, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_641, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_640, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_639, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_638, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_637, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; each element of NODE's forward true transitive closure that pass the test FN.
     */
    @LispMethod(comment = "@return listp; each element of NODE\'s forward true transitive closure that pass the test FN.")
    public static SubLObject sbhl_all_forward_true_nodes_if_with_pruning(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$638 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$639 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$640 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$639 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$640 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$640 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$641 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$641 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$641 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$642 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$643 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$642 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$642 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$651 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$652 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!fn.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$644 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$643 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_closure_if_and_stop_unless(node, fn);
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$643, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$644, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$652, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$651, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$642, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$642, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$643, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$642, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$641, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$641, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$641, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$640, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$640, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$639, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$640, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$639, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$638, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; each element of NODE's backward true transitive closure that pass the test FN.
     */
    @LispMethod(comment = "@return listp; each element of NODE\'s backward true transitive closure that pass the test FN.")
    public static final SubLObject sbhl_all_backward_true_nodes_if_with_pruning_alt(SubLObject module, SubLObject node, SubLObject fn, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_654 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_655 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_656 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_657 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_658 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_659 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_660 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_661 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_662 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_663 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_664 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_665 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_666 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_667 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_668 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                                                if (!fn.isFunctionSpec()) {
                                                                                                    {
                                                                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                                                        if (pcase_var.eql($ERROR)) {
                                                                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                        } else {
                                                                                                            if (pcase_var.eql($CERROR)) {
                                                                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                            } else {
                                                                                                                if (pcase_var.eql($WARN)) {
                                                                                                                    Errors.warn($str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                } else {
                                                                                                                    Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                                                    Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                SubLObject _prev_bind_0_669 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_670 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_closure_if_and_stop_unless(node, fn);
                                                                                                } finally {
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_670, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_669, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_668, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_667, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_666, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_665, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_664, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_663, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_662, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_661, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_660, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_659, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_658, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_657, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_656, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_655, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_654, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; each element of NODE's backward true transitive closure that pass the test FN.
     */
    @LispMethod(comment = "@return listp; each element of NODE\'s backward true transitive closure that pass the test FN.")
    public static SubLObject sbhl_all_backward_true_nodes_if_with_pruning(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$655 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$656 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$657 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$656 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$657 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$657 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$658 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$658 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$658 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$659 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$660 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$659 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$659 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$668 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$669 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if ((NIL != sbhl_paranoia.sbhl_object_type_checking_p()) && (!fn.isFunctionSpec())) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql($ERROR)) {
                                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var2.eql($CERROR)) {
                                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                } else
                                                    if (pcase_var2.eql($WARN)) {
                                                        Errors.warn($str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    } else {
                                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, fn, FUNCTION_SPEC_P);
                                                    }


                                        }
                                        final SubLObject _prev_bind_0_$661 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$660 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_closure_if_and_stop_unless(node, fn);
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$660, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$661, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$669, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$668, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$659, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$659, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$660, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$659, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$658, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$658, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$658, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$657, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$657, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$656, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$657, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$656, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$655, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; each element of NODE's transitive closure that passes the test: FN. @binds *sbhl-consider-node-fn* to @see sbhl-push-onto-result-if
     */
    @LispMethod(comment = "@return listp; each element of NODE\'s transitive closure that passes the test: FN. @binds *sbhl-consider-node-fn* to @see sbhl-push-onto-result-if")
    public static final SubLObject sbhl_closure_if_and_stop_unless_alt(SubLObject node, SubLObject fn) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT_IF_AND_STOP_UNLESS, thread);
                        sbhl_search_vars.$sbhl_compose_fn$.bind(fn, thread);
                        result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node);
                    } finally {
                        sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; each element of NODE's transitive closure that passes the test: FN. @binds *sbhl-consider-node-fn* to @see sbhl-push-onto-result-if
     */
    @LispMethod(comment = "@return listp; each element of NODE\'s transitive closure that passes the test: FN. @binds *sbhl-consider-node-fn* to @see sbhl-push-onto-result-if")
    public static SubLObject sbhl_closure_if_and_stop_unless(final SubLObject node, final SubLObject fn) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_PUSH_ONTO_RESULT_IF_AND_STOP_UNLESS, thread);
            sbhl_search_vars.$sbhl_compose_fn$.bind(fn, thread);
            result = sbhl_transitive_closure(node);
        } finally {
            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; Marks proper closures of nodes, noting cycles. Filters non-extremal cycles, and then unmarks the cyclic closure of the extremal cycles. All unmarked nodes are returned, as they are the extremal ones.
     */
    @LispMethod(comment = "@return listp; Marks proper closures of nodes, noting cycles. Filters non-extremal cycles, and then unmarks the cyclic closure of the extremal cycles. All unmarked nodes are returned, as they are the extremal ones.")
    public static final SubLObject sbhl_extremal_nodes_alt(SubLObject nodes) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject unique_nodes = list_utilities.fast_delete_duplicates(nodes, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                SubLObject result = NIL;
                {
                    SubLObject cdolist_list_var = unique_nodes;
                    SubLObject node = NIL;
                    for (node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , node = cdolist_list_var.first()) {
                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node, UNPROVIDED)) {
                            sbhl_marking_methods.sbhl_mark_proper_closure_as_marked(node);
                            if (NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, UNPROVIDED)) {
                                {
                                    SubLObject _prev_bind_0 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                    try {
                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                                        sbhl_marking_methods.sbhl_unmark_marked_closure(node);
                                    } finally {
                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0, thread);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    SubLObject cdolist_list_var = unique_nodes;
                    SubLObject node = NIL;
                    for (node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , node = cdolist_list_var.first()) {
                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node, UNPROVIDED)) {
                            result = cons(node, result);
                        }
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; Marks proper closures of nodes, noting cycles. Filters non-extremal cycles, and then unmarks the cyclic closure of the extremal cycles. All unmarked nodes are returned, as they are the extremal ones.
     */
    @LispMethod(comment = "@return listp; Marks proper closures of nodes, noting cycles. Filters non-extremal cycles, and then unmarks the cyclic closure of the extremal cycles. All unmarked nodes are returned, as they are the extremal ones.")
    public static SubLObject sbhl_extremal_nodes(final SubLObject nodes) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject unique_nodes = list_utilities.fast_delete_duplicates(nodes, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        SubLObject result = NIL;
        SubLObject cdolist_list_var = unique_nodes;
        SubLObject node = NIL;
        node = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node, UNPROVIDED)) {
                sbhl_marking_methods.sbhl_mark_proper_closure_as_marked(node);
                if (NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, UNPROVIDED)) {
                    final SubLObject _prev_bind_0 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                        sbhl_marking_methods.sbhl_unmark_marked_closure(node);
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0, thread);
                    }
                }
            }
            cdolist_list_var = cdolist_list_var.rest();
            node = cdolist_list_var.first();
        } 
        cdolist_list_var = unique_nodes;
        node = NIL;
        node = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node, UNPROVIDED)) {
                result = cons(node, result);
            }
            cdolist_list_var = cdolist_list_var.rest();
            node = cdolist_list_var.first();
        } 
        return result;
    }

    /**
     *
     *
     * @return listp; the most superordinate among NODES.
     */
    @LispMethod(comment = "@return listp; the most superordinate among NODES.")
    public static final SubLObject max_nodes_backward_alt(SubLObject module, SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            if (NIL != list_utilities.lengthLE(nodes, ONE_INTEGER, UNPROVIDED)) {
                return nodes;
            } else {
                {
                    SubLObject result = NIL;
                    {
                        SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                        SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                        SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                        SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                        SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                            sbhl_module_vars.$sbhl_module$.bind(module, thread);
                            {
                                SubLObject mt_var = mt;
                                {
                                    SubLObject _prev_bind_0_671 = mt_relevance_macros.$mt$.currentBinding(thread);
                                    SubLObject _prev_bind_1_672 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                    SubLObject _prev_bind_2_673 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                    try {
                                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                        {
                                            SubLObject tv_var = tv;
                                            {
                                                SubLObject _prev_bind_0_674 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                SubLObject _prev_bind_1_675 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                    if (NIL != tv_var) {
                                                        if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                            if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                {
                                                                    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                    if (pcase_var.eql($ERROR)) {
                                                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($CERROR)) {
                                                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        } else {
                                                                            if (pcase_var.eql($WARN)) {
                                                                                Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                            } else {
                                                                                Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    {
                                                        SubLObject _prev_bind_0_676 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                        SubLObject _prev_bind_1_677 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                        SubLObject _prev_bind_2_678 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                            {
                                                                SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                                {
                                                                    SubLObject _prev_bind_0_679 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                        {
                                                                            SubLObject _prev_bind_0_680 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                                {
                                                                                    SubLObject _prev_bind_0_681 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_1_682 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_2_683 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_3_684 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_4_685 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                    try {
                                                                                        sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                        {
                                                                                            SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                            SubLObject needs_to_releaseP = NIL;
                                                                                            try {
                                                                                                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                                {
                                                                                                    SubLObject _prev_bind_0_686 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                    SubLObject _prev_bind_1_687 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                    try {
                                                                                                        sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                        sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                        result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_extremal_nodes(nodes);
                                                                                                    } finally {
                                                                                                        sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_687, thread);
                                                                                                        sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_686, thread);
                                                                                                    }
                                                                                                }
                                                                                            } finally {
                                                                                                if (NIL != needs_to_releaseP) {
                                                                                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } finally {
                                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_685, thread);
                                                                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_684, thread);
                                                                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_683, thread);
                                                                                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_682, thread);
                                                                                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_681, thread);
                                                                                    }
                                                                                }
                                                                                if (source == $RESOURCE) {
                                                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                }
                                                                            } finally {
                                                                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_680, thread);
                                                                            }
                                                                        }
                                                                        if (source == $RESOURCE) {
                                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                        }
                                                                    } finally {
                                                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_679, thread);
                                                                    }
                                                                }
                                                            }
                                                        } finally {
                                                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_678, thread);
                                                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_677, thread);
                                                            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_676, thread);
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_675, thread);
                                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_674, thread);
                                                }
                                            }
                                        }
                                    } finally {
                                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_673, thread);
                                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_672, thread);
                                        mt_relevance_macros.$mt$.rebind(_prev_bind_0_671, thread);
                                    }
                                }
                            }
                        } finally {
                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                        }
                    }
                    return result;
                }
            }
        }
    }

    /**
     *
     *
     * @return listp; the most superordinate among NODES.
     */
    @LispMethod(comment = "@return listp; the most superordinate among NODES.")
    public static SubLObject max_nodes_backward(final SubLObject module, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        if (NIL != list_utilities.lengthLE(nodes, ONE_INTEGER, UNPROVIDED)) {
            return nodes;
        }
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$672 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$673 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$674 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$673 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$674 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$674 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$675 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$675 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$675 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$676 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$677 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$676 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$676 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$685 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$686 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$678 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$677 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_extremal_nodes(nodes);
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$677, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$678, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$686, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$685, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$676, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$676, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$677, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$676, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$675, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$675, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$675, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$674, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$674, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$673, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$674, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$673, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$672, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; a list of lists. Each list is a group of nodes among NODES which are coextensional.
     */
    @LispMethod(comment = "@return listp; a list of lists. Each list is a group of nodes among NODES which are coextensional.")
    public static final SubLObject sbhl_independent_cycles_alt(SubLObject nodes) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject cycles = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        {
                            SubLObject _prev_bind_0_688 = sbhl_marking_vars.$sbhl_target_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_target_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                sbhl_marking_utilities.sbhl_mark_nodes_in_target_space(nodes);
                                {
                                    SubLObject cdolist_list_var = nodes;
                                    SubLObject node = NIL;
                                    for (node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , node = cdolist_list_var.first()) {
                                        if (NIL == list_utilities.tree_find(node, cycles, UNPROVIDED, UNPROVIDED)) {
                                            {
                                                SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                {
                                                    SubLObject _prev_bind_0_689 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                    try {
                                                        sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                        {
                                                            SubLObject _prev_bind_0_690 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                            try {
                                                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                {
                                                                    SubLObject _prev_bind_0_691 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                    SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                    SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                        {
                                                                            SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                            SubLObject needs_to_releaseP = NIL;
                                                                            try {
                                                                                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                sbhl_marking_methods.sbhl_mark_proper_closure_as_marked(node);
                                                                                if (NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, UNPROVIDED)) {
                                                                                    {
                                                                                        SubLObject _prev_bind_0_692 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                                                                                            {
                                                                                                SubLObject result = NIL;
                                                                                                {
                                                                                                    SubLObject _prev_bind_0_693 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                                                                                                    try {
                                                                                                        sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                                                                                                        try {
                                                                                                            sbhl_marking_methods.sbhl_unmark_marked_closure_and_gather_if(node, SBHL_MARKED_IN_TARGET_SPACE_P);
                                                                                                        } finally {
                                                                                                            {
                                                                                                                SubLObject _prev_bind_0_694 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                                                try {
                                                                                                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                                                                                                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                                                                                                } finally {
                                                                                                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_694, thread);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    } finally {
                                                                                                        sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_0_693, thread);
                                                                                                    }
                                                                                                }
                                                                                                if (NIL != result) {
                                                                                                    cycles = cons(result, cycles);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_692, thread);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                if (NIL != needs_to_releaseP) {
                                                                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                }
                                                                            }
                                                                        }
                                                                    } finally {
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3, thread);
                                                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2, thread);
                                                                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1, thread);
                                                                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_691, thread);
                                                                    }
                                                                }
                                                                if (source == $RESOURCE) {
                                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                }
                                                            } finally {
                                                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_690, thread);
                                                            }
                                                        }
                                                        if (source == $RESOURCE) {
                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                        }
                                                    } finally {
                                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_689, thread);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread));
                            } finally {
                                sbhl_marking_vars.$sbhl_target_gather_space$.rebind(_prev_bind_0_688, thread);
                            }
                        }
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    } finally {
                        sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_0, thread);
                    }
                }
                return cycles;
            }
        }
    }

    /**
     *
     *
     * @return listp; a list of lists. Each list is a group of nodes among NODES which are coextensional.
     */
    @LispMethod(comment = "@return listp; a list of lists. Each list is a group of nodes among NODES which are coextensional.")
    public static SubLObject sbhl_independent_cycles(final SubLObject nodes) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject cycles = NIL;
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
        try {
            sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                final SubLObject _prev_bind_0_$689 = sbhl_marking_vars.$sbhl_target_gather_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_target_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                    try {
                        sbhl_marking_utilities.sbhl_mark_nodes_in_target_space(nodes);
                        SubLObject cdolist_list_var = nodes;
                        SubLObject node = NIL;
                        node = cdolist_list_var.first();
                        while (NIL != cdolist_list_var) {
                            if (NIL == list_utilities.tree_find(node, cycles, UNPROVIDED, UNPROVIDED)) {
                                final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                final SubLObject _prev_bind_0_$690 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                    final SubLObject _prev_bind_0_$691 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                        final SubLObject _prev_bind_0_$692 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                        final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                        final SubLObject _prev_bind_5 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                            sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                            final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                            SubLObject needs_to_releaseP = NIL;
                                            try {
                                                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                sbhl_marking_methods.sbhl_mark_proper_closure_as_marked(node);
                                                if (NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, UNPROVIDED)) {
                                                    final SubLObject _prev_bind_0_$693 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                                                        SubLObject result = NIL;
                                                        final SubLObject _prev_bind_0_$694 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                                                            try {
                                                                sbhl_marking_methods.sbhl_unmark_marked_closure_and_gather_if(node, SBHL_MARKED_IN_TARGET_SPACE_P);
                                                            } finally {
                                                                final SubLObject _prev_bind_0_$695 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                try {
                                                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                                                    final SubLObject _values = getValuesAsVector();
                                                                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                                                    restoreValuesFromVector(_values);
                                                                } finally {
                                                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$695, thread);
                                                                }
                                                            }
                                                        } finally {
                                                            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_0_$694, thread);
                                                        }
                                                        if (NIL != result) {
                                                            cycles = cons(result, cycles);
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_$693, thread);
                                                    }
                                                }
                                            } finally {
                                                if (NIL != needs_to_releaseP) {
                                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                }
                                            }
                                        } finally {
                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_5, thread);
                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_4, thread);
                                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_3, thread);
                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_2, thread);
                                            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$692, thread);
                                        }
                                        if (source == $RESOURCE) {
                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                        }
                                    } finally {
                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$691, thread);
                                    }
                                    if (source == $RESOURCE) {
                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                    }
                                } finally {
                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$690, thread);
                                }
                            }
                            cdolist_list_var = cdolist_list_var.rest();
                            node = cdolist_list_var.first();
                        } 
                    } finally {
                        final SubLObject _prev_bind_0_$696 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values2 = getValuesAsVector();
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread));
                            restoreValuesFromVector(_values2);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$696, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$sbhl_target_gather_space$.rebind(_prev_bind_0_$689, thread);
                }
            } finally {
                final SubLObject _prev_bind_0_$697 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values3 = getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    restoreValuesFromVector(_values3);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$697, thread);
                }
            }
        } finally {
            sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_0, thread);
        }
        return cycles;
    }

    /**
     *
     *
     * @return listp; the maximal nodes among NODES wrt module MODULE. checks to see if each node of NODES has any node subsuming it (and not coextensional) among the other nodes.
     */
    @LispMethod(comment = "@return listp; the maximal nodes among NODES wrt module MODULE. checks to see if each node of NODES has any node subsuming it (and not coextensional) among the other nodes.")
    public static final SubLObject max_nodes_forward_alt(SubLObject module, SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject unique_nodes = list_utilities.fast_delete_duplicates(nodes, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                SubLObject cycles = NIL;
                SubLObject visited_nodes = NIL;
                SubLObject max_nodes = NIL;
                if (NIL != list_utilities.lengthLE(unique_nodes, ONE_INTEGER, UNPROVIDED)) {
                    return unique_nodes;
                } else {
                    {
                        SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                        SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                        SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                        SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                        SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                            sbhl_module_vars.$sbhl_module$.bind(module, thread);
                            {
                                SubLObject mt_var = mt;
                                {
                                    SubLObject _prev_bind_0_695 = mt_relevance_macros.$mt$.currentBinding(thread);
                                    SubLObject _prev_bind_1_696 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                    SubLObject _prev_bind_2_697 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                    try {
                                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                        {
                                            SubLObject tv_var = tv;
                                            {
                                                SubLObject _prev_bind_0_698 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                SubLObject _prev_bind_1_699 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                    if (NIL != tv_var) {
                                                        if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                            if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                {
                                                                    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                    if (pcase_var.eql($ERROR)) {
                                                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($CERROR)) {
                                                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        } else {
                                                                            if (pcase_var.eql($WARN)) {
                                                                                Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                            } else {
                                                                                Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    {
                                                        SubLObject _prev_bind_0_700 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                        SubLObject _prev_bind_1_701 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                        SubLObject _prev_bind_2_702 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                            {
                                                                SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                                {
                                                                    SubLObject _prev_bind_0_703 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                        {
                                                                            SubLObject _prev_bind_0_704 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                                {
                                                                                    SubLObject _prev_bind_0_705 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_1_706 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_2_707 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_3_708 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_4_709 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                    try {
                                                                                        sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                        {
                                                                                            SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                            SubLObject needs_to_releaseP = NIL;
                                                                                            try {
                                                                                                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                                {
                                                                                                    SubLObject _prev_bind_0_710 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                    SubLObject _prev_bind_1_711 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                    try {
                                                                                                        sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                        sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                        cycles = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_independent_cycles(unique_nodes);
                                                                                                        {
                                                                                                            SubLObject cdolist_list_var = unique_nodes;
                                                                                                            SubLObject node = NIL;
                                                                                                            for (node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , node = cdolist_list_var.first()) {
                                                                                                                {
                                                                                                                    SubLObject source_712 = sbhl_marking_vars.sbhl_new_space_source();
                                                                                                                    {
                                                                                                                        SubLObject _prev_bind_0_713 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                                                                        try {
                                                                                                                            sbhl_marking_vars.$sbhl_space$.bind(source_712 == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source_712), thread);
                                                                                                                            {
                                                                                                                                SubLObject _prev_bind_0_714 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                                                                                try {
                                                                                                                                    sbhl_marking_vars.$sbhl_gather_space$.bind(source_712 == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source_712), thread);
                                                                                                                                    {
                                                                                                                                        SubLObject _prev_bind_0_715 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                                                                        SubLObject _prev_bind_1_716 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                                                                        SubLObject _prev_bind_2_717 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                                                                        SubLObject _prev_bind_3_718 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                                                                        SubLObject _prev_bind_4_719 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                                                                            sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                                                                            {
                                                                                                                                                SubLObject rw_lock_var_720 = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                                                                                SubLObject needs_to_releaseP_721 = NIL;
                                                                                                                                                try {
                                                                                                                                                    needs_to_releaseP_721 = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var_720);
                                                                                                                                                    {
                                                                                                                                                        SubLObject cyclic_nodes = member(node, cycles, $sym32$MEMBER_, UNPROVIDED).first();
                                                                                                                                                        SubLObject other_nodes = NIL;
                                                                                                                                                        other_nodes = (NIL != cyclic_nodes) ? ((SubLObject) (set_difference(unique_nodes, cyclic_nodes, UNPROVIDED, UNPROVIDED))) : remove(node, unique_nodes, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                                                                                        if (NIL == subl_promotions.memberP(node, visited_nodes, UNPROVIDED, UNPROVIDED)) {
                                                                                                                                                            visited_nodes = nconc(copy_list(cyclic_nodes), visited_nodes);
                                                                                                                                                            if (NIL == com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_node_to_any_of_nodes_p(node, other_nodes)) {
                                                                                                                                                                if (NIL != cyclic_nodes) {
                                                                                                                                                                    max_nodes = nconc(copy_list(cyclic_nodes), max_nodes);
                                                                                                                                                                } else {
                                                                                                                                                                    max_nodes = cons(node, max_nodes);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                } finally {
                                                                                                                                                    if (NIL != needs_to_releaseP_721) {
                                                                                                                                                        ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var_720);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } finally {
                                                                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_719, thread);
                                                                                                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_718, thread);
                                                                                                                                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_717, thread);
                                                                                                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_716, thread);
                                                                                                                                            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_715, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    if (source_712 == $RESOURCE) {
                                                                                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                    }
                                                                                                                                } finally {
                                                                                                                                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_714, thread);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            if (source_712 == $RESOURCE) {
                                                                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                                                                            }
                                                                                                                        } finally {
                                                                                                                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_713, thread);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    } finally {
                                                                                                        sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_711, thread);
                                                                                                        sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_710, thread);
                                                                                                    }
                                                                                                }
                                                                                            } finally {
                                                                                                if (NIL != needs_to_releaseP) {
                                                                                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } finally {
                                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_709, thread);
                                                                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_708, thread);
                                                                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_707, thread);
                                                                                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_706, thread);
                                                                                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_705, thread);
                                                                                    }
                                                                                }
                                                                                if (source == $RESOURCE) {
                                                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                }
                                                                            } finally {
                                                                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_704, thread);
                                                                            }
                                                                        }
                                                                        if (source == $RESOURCE) {
                                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                        }
                                                                    } finally {
                                                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_703, thread);
                                                                    }
                                                                }
                                                            }
                                                        } finally {
                                                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_702, thread);
                                                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_701, thread);
                                                            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_700, thread);
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_699, thread);
                                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_698, thread);
                                                }
                                            }
                                        }
                                    } finally {
                                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_697, thread);
                                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_696, thread);
                                        mt_relevance_macros.$mt$.rebind(_prev_bind_0_695, thread);
                                    }
                                }
                            }
                        } finally {
                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
                return max_nodes;
            }
        }
    }

    /**
     *
     *
     * @return listp; the maximal nodes among NODES wrt module MODULE. checks to see if each node of NODES has any node subsuming it (and not coextensional) among the other nodes.
     */
    @LispMethod(comment = "@return listp; the maximal nodes among NODES wrt module MODULE. checks to see if each node of NODES has any node subsuming it (and not coextensional) among the other nodes.")
    public static SubLObject max_nodes_forward(final SubLObject module, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject unique_nodes = list_utilities.fast_delete_duplicates(nodes, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        SubLObject cycles = NIL;
        SubLObject visited_nodes = NIL;
        SubLObject max_nodes = NIL;
        if (NIL != list_utilities.lengthLE(unique_nodes, ONE_INTEGER, UNPROVIDED)) {
            return unique_nodes;
        }
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$698 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$699 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$700 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$699 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$700 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$700 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$701 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$701 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$701 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$702 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$703 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$702 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$702 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$711 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$712 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$704 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$703 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            cycles = sbhl_independent_cycles(unique_nodes);
                                            SubLObject cdolist_list_var = unique_nodes;
                                            SubLObject node = NIL;
                                            node = cdolist_list_var.first();
                                            while (NIL != cdolist_list_var) {
                                                final SubLObject source_$715 = sbhl_marking_vars.sbhl_new_space_source();
                                                final SubLObject _prev_bind_0_$705 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                try {
                                                    sbhl_marking_vars.$sbhl_space$.bind(source_$715 == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source_$715), thread);
                                                    final SubLObject _prev_bind_0_$706 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                    try {
                                                        sbhl_marking_vars.$sbhl_gather_space$.bind(source_$715 == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source_$715), thread);
                                                        final SubLObject _prev_bind_0_$707 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                        final SubLObject _prev_bind_1_$704 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                        final SubLObject _prev_bind_2_$703 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                        final SubLObject _prev_bind_3_$712 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                        final SubLObject _prev_bind_4_$713 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                            sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                            final SubLObject rw_lock_var_$723 = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                            SubLObject needs_to_releaseP_$724 = NIL;
                                                            try {
                                                                needs_to_releaseP_$724 = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var_$723);
                                                                final SubLObject cyclic_nodes = member(node, cycles, $sym32$MEMBER_, UNPROVIDED).first();
                                                                SubLObject other_nodes = NIL;
                                                                other_nodes = (NIL != cyclic_nodes) ? set_difference(unique_nodes, cyclic_nodes, UNPROVIDED, UNPROVIDED) : remove(node, unique_nodes, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                if (NIL == subl_promotions.memberP(node, visited_nodes, UNPROVIDED, UNPROVIDED)) {
                                                                    visited_nodes = nconc(copy_list(cyclic_nodes), visited_nodes);
                                                                    if (NIL == sbhl_path_from_node_to_any_of_nodes_p(node, other_nodes)) {
                                                                        if (NIL != cyclic_nodes) {
                                                                            max_nodes = nconc(copy_list(cyclic_nodes), max_nodes);
                                                                        } else {
                                                                            max_nodes = cons(node, max_nodes);
                                                                        }
                                                                    }
                                                                }
                                                            } finally {
                                                                if (NIL != needs_to_releaseP_$724) {
                                                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var_$723);
                                                                }
                                                            }
                                                        } finally {
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$713, thread);
                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$712, thread);
                                                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$703, thread);
                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$704, thread);
                                                            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$707, thread);
                                                        }
                                                        if (source_$715 == $RESOURCE) {
                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                        }
                                                    } finally {
                                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$706, thread);
                                                    }
                                                    if (source_$715 == $RESOURCE) {
                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                    }
                                                } finally {
                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$705, thread);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                node = cdolist_list_var.first();
                                            } 
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$703, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$704, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$712, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$711, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$702, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$702, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$703, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$702, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$701, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$701, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$701, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$700, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$700, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$699, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$700, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$699, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$698, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return max_nodes;
    }

    /**
     *
     *
     * @return keywordp; whether to do max-nodes :forward or :backward
     */
    @LispMethod(comment = "@return keywordp; whether to do max-nodes :forward or :backward")
    public static final SubLObject max_nodes_direction_alt(SubLObject nodes) {
        {
            SubLObject others = subtract(length(nodes), ONE_INTEGER);
            SubLObject up_cost = ZERO_INTEGER;
            SubLObject down_cost = ZERO_INTEGER;
            SubLObject cdolist_list_var = nodes;
            SubLObject node = NIL;
            for (node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , node = cdolist_list_var.first()) {
                down_cost = add(down_cost, cardinality_estimates.spec_cardinality(node));
                up_cost = add(up_cost, others, cardinality_estimates.genl_cardinality(node));
            }
            if (up_cost.numL(down_cost)) {
                return $FORWARD;
            } else {
                return $BACKWARD;
            }
        }
    }

    /**
     *
     *
     * @return keywordp; whether to do max-nodes :forward or :backward
     */
    @LispMethod(comment = "@return keywordp; whether to do max-nodes :forward or :backward")
    public static SubLObject max_nodes_direction(final SubLObject nodes) {
        final SubLObject others = subtract(length(nodes), ONE_INTEGER);
        SubLObject up_cost = ZERO_INTEGER;
        SubLObject down_cost = ZERO_INTEGER;
        SubLObject cdolist_list_var = nodes;
        SubLObject node = NIL;
        node = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            down_cost = add(down_cost, cardinality_estimates.spec_cardinality(node));
            up_cost = add(up_cost, others, cardinality_estimates.genl_cardinality(node));
            cdolist_list_var = cdolist_list_var.rest();
            node = cdolist_list_var.first();
        } 
        if (up_cost.numL(down_cost)) {
            return $FORWARD;
        }
        return $BACKWARD;
    }

    /**
     *
     *
     * @return listp; the most subordinate among NODES.
     */
    @LispMethod(comment = "@return listp; the most subordinate among NODES.")
    public static final SubLObject sbhl_min_nodes_alt(SubLObject module, SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            nodes = list_utilities.fast_delete_duplicates(nodes, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            if (NIL != list_utilities.lengthLE(nodes, ONE_INTEGER, UNPROVIDED)) {
                return nodes;
            } else {
                {
                    SubLObject result = NIL;
                    {
                        SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                        SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                        SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                        SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                        SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                            sbhl_module_vars.$sbhl_module$.bind(module, thread);
                            {
                                SubLObject mt_var = mt;
                                {
                                    SubLObject _prev_bind_0_722 = mt_relevance_macros.$mt$.currentBinding(thread);
                                    SubLObject _prev_bind_1_723 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                    SubLObject _prev_bind_2_724 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                    try {
                                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                        {
                                            SubLObject tv_var = tv;
                                            {
                                                SubLObject _prev_bind_0_725 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                SubLObject _prev_bind_1_726 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                    if (NIL != tv_var) {
                                                        if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                            if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                {
                                                                    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                    if (pcase_var.eql($ERROR)) {
                                                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($CERROR)) {
                                                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        } else {
                                                                            if (pcase_var.eql($WARN)) {
                                                                                Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                            } else {
                                                                                Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    {
                                                        SubLObject _prev_bind_0_727 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                        SubLObject _prev_bind_1_728 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                        SubLObject _prev_bind_2_729 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                            {
                                                                SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                                {
                                                                    SubLObject _prev_bind_0_730 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                        {
                                                                            SubLObject _prev_bind_0_731 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                                {
                                                                                    SubLObject _prev_bind_0_732 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_1_733 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_2_734 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_3_735 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_4_736 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                    try {
                                                                                        sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                        {
                                                                                            SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                            SubLObject needs_to_releaseP = NIL;
                                                                                            try {
                                                                                                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                                {
                                                                                                    SubLObject _prev_bind_0_737 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                    SubLObject _prev_bind_1_738 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                    try {
                                                                                                        sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                        sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                        result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_extremal_nodes(nodes);
                                                                                                    } finally {
                                                                                                        sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_738, thread);
                                                                                                        sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_737, thread);
                                                                                                    }
                                                                                                }
                                                                                            } finally {
                                                                                                if (NIL != needs_to_releaseP) {
                                                                                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } finally {
                                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_736, thread);
                                                                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_735, thread);
                                                                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_734, thread);
                                                                                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_733, thread);
                                                                                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_732, thread);
                                                                                    }
                                                                                }
                                                                                if (source == $RESOURCE) {
                                                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                }
                                                                            } finally {
                                                                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_731, thread);
                                                                            }
                                                                        }
                                                                        if (source == $RESOURCE) {
                                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                        }
                                                                    } finally {
                                                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_730, thread);
                                                                    }
                                                                }
                                                            }
                                                        } finally {
                                                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_729, thread);
                                                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_728, thread);
                                                            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_727, thread);
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_726, thread);
                                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_725, thread);
                                                }
                                            }
                                        }
                                    } finally {
                                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_724, thread);
                                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_723, thread);
                                        mt_relevance_macros.$mt$.rebind(_prev_bind_0_722, thread);
                                    }
                                }
                            }
                        } finally {
                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                        }
                    }
                    return result;
                }
            }
        }
    }

    /**
     *
     *
     * @return listp; the most subordinate among NODES.
     */
    @LispMethod(comment = "@return listp; the most subordinate among NODES.")
    public static SubLObject sbhl_min_nodes(final SubLObject module, SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        nodes = list_utilities.fast_delete_duplicates(nodes, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        if (NIL != list_utilities.lengthLE(nodes, ONE_INTEGER, UNPROVIDED)) {
            return nodes;
        }
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$725 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$726 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$727 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$726 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$727 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$727 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$728 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$728 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$728 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$729 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$730 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$729 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$729 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$738 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$739 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$731 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$730 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_extremal_nodes(nodes);
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$730, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$731, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$739, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$738, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$729, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$729, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$730, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$729, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$728, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$728, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$728, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$727, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$727, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$726, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$727, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$726, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$725, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; the most superordinate among NODES. DIRECTION :backward uses @see sbhl-extremal-nodes, and may be expensive. @hack DIRECTION :forward will clobber maximal cycles
     */
    @LispMethod(comment = "@return listp; the most superordinate among NODES. DIRECTION :backward uses @see sbhl-extremal-nodes, and may be expensive. @hack DIRECTION :forward will clobber maximal cycles")
    public static final SubLObject sbhl_max_nodes_alt(SubLObject module, SubLObject nodes, SubLObject mt, SubLObject tv, SubLObject direction) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (direction == UNPROVIDED) {
            direction = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        nodes = list_utilities.fast_delete_duplicates(nodes, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        if (NIL != list_utilities.singletonP(nodes)) {
            return nodes;
        }
        {
            SubLObject dir = (NIL != direction) ? ((SubLObject) (direction)) : com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.max_nodes_direction(nodes);
            SubLObject pcase_var = dir;
            if (pcase_var.eql($BACKWARD)) {
                return com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.max_nodes_backward(module, nodes, mt, tv);
            } else {
                if (pcase_var.eql($FORWARD)) {
                    return com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.max_nodes_forward(module, nodes, mt, tv);
                }
            }
        }
        return NIL;
    }

    /**
     *
     *
     * @return listp; the most superordinate among NODES. DIRECTION :backward uses @see sbhl-extremal-nodes, and may be expensive. @hack DIRECTION :forward will clobber maximal cycles
     */
    @LispMethod(comment = "@return listp; the most superordinate among NODES. DIRECTION :backward uses @see sbhl-extremal-nodes, and may be expensive. @hack DIRECTION :forward will clobber maximal cycles")
    public static SubLObject sbhl_max_nodes(final SubLObject module, SubLObject nodes, SubLObject mt, SubLObject tv, SubLObject direction) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (direction == UNPROVIDED) {
            direction = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        nodes = list_utilities.fast_delete_duplicates(nodes, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        if (NIL != list_utilities.singletonP(nodes)) {
            return nodes;
        }
        final SubLObject pcase_var;
        final SubLObject dir = pcase_var = (NIL != direction) ? direction : max_nodes_direction(nodes);
        if (pcase_var.eql($BACKWARD)) {
            return max_nodes_backward(module, nodes, mt, tv);
        }
        if (pcase_var.eql($FORWARD)) {
            return max_nodes_forward(module, nodes, mt, tv);
        }
        return NIL;
    }

    /**
     *
     *
     * @return listp; the minimal among forward true link nodes.
     */
    @LispMethod(comment = "@return listp; the minimal among forward true link nodes.")
    public static final SubLObject sbhl_min_forward_true_link_nodes_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        if (NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return NIL;
        }
        {
            SubLObject local_forwards = sbhl_link_methods.sbhl_forward_true_link_nodes(module, node, mt, tv, UNPROVIDED);
            if (NIL == local_forwards) {
                {
                    SubLObject root = sbhl_module_utilities.get_sbhl_module_root(module);
                    return NIL != root ? ((SubLObject) (list(root))) : NIL;
                }
            } else {
                return com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_forwards, mt, tv);
            }
        }
    }

    /**
     *
     *
     * @return listp; the minimal among forward true link nodes.
     */
    @LispMethod(comment = "@return listp; the minimal among forward true link nodes.")
    public static SubLObject sbhl_min_forward_true_link_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        if (NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return NIL;
        }
        final SubLObject local_forwards = sbhl_link_methods.sbhl_forward_true_link_nodes(module, node, mt, tv, UNPROVIDED);
        if (NIL == local_forwards) {
            final SubLObject root = sbhl_module_utilities.get_sbhl_module_root(module);
            return NIL != root ? list(root) : NIL;
        }
        return sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_forwards, mt, tv);
    }

    /**
     *
     *
     * @return listp; the maximal among forward true link nodes. used for disjoins
     */
    @LispMethod(comment = "@return listp; the maximal among forward true link nodes. used for disjoins")
    public static final SubLObject sbhl_max_forward_true_link_nodes_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        if (NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return NIL;
        }
        {
            SubLObject local_forwards = sbhl_link_methods.sbhl_forward_true_link_nodes(module, node, mt, tv, UNPROVIDED);
            return com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_forwards, mt, tv, UNPROVIDED);
        }
    }

    /**
     *
     *
     * @return listp; the maximal among forward true link nodes. used for disjoins
     */
    @LispMethod(comment = "@return listp; the maximal among forward true link nodes. used for disjoins")
    public static SubLObject sbhl_max_forward_true_link_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        if (NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return NIL;
        }
        final SubLObject local_forwards = sbhl_link_methods.sbhl_forward_true_link_nodes(module, node, mt, tv, UNPROVIDED);
        return sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_forwards, mt, tv, UNPROVIDED);
    }

    /**
     *
     *
     * @return listp; the minimal among forward false link nodes.
     */
    @LispMethod(comment = "@return listp; the minimal among forward false link nodes.")
    public static final SubLObject sbhl_min_forward_false_link_nodes_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        if (NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return NIL;
        }
        {
            SubLObject local_not_forwards = sbhl_link_methods.sbhl_forward_false_link_nodes(module, node, mt, tv, UNPROVIDED);
            return com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_not_forwards, mt, tv);
        }
    }

    /**
     *
     *
     * @return listp; the minimal among forward false link nodes.
     */
    @LispMethod(comment = "@return listp; the minimal among forward false link nodes.")
    public static SubLObject sbhl_min_forward_false_link_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        if (NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return NIL;
        }
        final SubLObject local_not_forwards = sbhl_link_methods.sbhl_forward_false_link_nodes(module, node, mt, tv, UNPROVIDED);
        return sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_not_forwards, mt, tv);
    }

    /**
     *
     *
     * @return listp; the maximal among forward false link nodes. used for disjoins
     */
    @LispMethod(comment = "@return listp; the maximal among forward false link nodes. used for disjoins")
    public static final SubLObject sbhl_max_forward_false_link_nodes_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        if (NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return NIL;
        }
        {
            SubLObject local_not_forwards = sbhl_link_methods.sbhl_forward_false_link_nodes(module, node, mt, tv, UNPROVIDED);
            return com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_not_forwards, mt, tv, UNPROVIDED);
        }
    }

    /**
     *
     *
     * @return listp; the maximal among forward false link nodes. used for disjoins
     */
    @LispMethod(comment = "@return listp; the maximal among forward false link nodes. used for disjoins")
    public static SubLObject sbhl_max_forward_false_link_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        if (NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return NIL;
        }
        final SubLObject local_not_forwards = sbhl_link_methods.sbhl_forward_false_link_nodes(module, node, mt, tv, UNPROVIDED);
        return sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_not_forwards, mt, tv, UNPROVIDED);
    }

    /**
     *
     *
     * @return listp; the minimal among backward true link nodes.
     */
    @LispMethod(comment = "@return listp; the minimal among backward true link nodes.")
    public static final SubLObject sbhl_min_backward_true_link_nodes_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        if (NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return NIL;
        }
        {
            SubLObject local_backwards = sbhl_link_methods.sbhl_backward_true_link_nodes(module, node, mt, tv, UNPROVIDED);
            return com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_backwards, mt, tv);
        }
    }

    /**
     *
     *
     * @return listp; the minimal among backward true link nodes.
     */
    @LispMethod(comment = "@return listp; the minimal among backward true link nodes.")
    public static SubLObject sbhl_min_backward_true_link_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        if (NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return NIL;
        }
        final SubLObject local_backwards = sbhl_link_methods.sbhl_backward_true_link_nodes(module, node, mt, tv, UNPROVIDED);
        return sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_backwards, mt, tv);
    }

    /**
     *
     *
     * @return listp; the maximal among backward true link nodes. used for disjoins
     */
    @LispMethod(comment = "@return listp; the maximal among backward true link nodes. used for disjoins")
    public static final SubLObject sbhl_max_backward_true_link_nodes_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        if (NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return NIL;
        }
        {
            SubLObject local_backwards = sbhl_link_methods.sbhl_backward_true_link_nodes(module, node, mt, tv, UNPROVIDED);
            return com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_backwards, mt, tv, UNPROVIDED);
        }
    }

    /**
     *
     *
     * @return listp; the maximal among backward true link nodes. used for disjoins
     */
    @LispMethod(comment = "@return listp; the maximal among backward true link nodes. used for disjoins")
    public static SubLObject sbhl_max_backward_true_link_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        if (NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return NIL;
        }
        final SubLObject local_backwards = sbhl_link_methods.sbhl_backward_true_link_nodes(module, node, mt, tv, UNPROVIDED);
        return sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_backwards, mt, tv, UNPROVIDED);
    }

    /**
     *
     *
     * @return listp; the minimal among backward false link nodes.
     */
    @LispMethod(comment = "@return listp; the minimal among backward false link nodes.")
    public static final SubLObject sbhl_min_backward_false_link_nodes_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        if (NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return NIL;
        }
        {
            SubLObject local_not_backwards = sbhl_link_methods.sbhl_backward_false_link_nodes(module, node, mt, tv, UNPROVIDED);
            return com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_not_backwards, mt, tv);
        }
    }

    /**
     *
     *
     * @return listp; the minimal among backward false link nodes.
     */
    @LispMethod(comment = "@return listp; the minimal among backward false link nodes.")
    public static SubLObject sbhl_min_backward_false_link_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        if (NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return NIL;
        }
        final SubLObject local_not_backwards = sbhl_link_methods.sbhl_backward_false_link_nodes(module, node, mt, tv, UNPROVIDED);
        return sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_not_backwards, mt, tv);
    }

    /**
     *
     *
     * @return listp; the maximal among backward false link nodes. used for disjoins
     */
    @LispMethod(comment = "@return listp; the maximal among backward false link nodes. used for disjoins")
    public static final SubLObject sbhl_max_backward_false_link_nodes_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        if (NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return NIL;
        }
        {
            SubLObject local_not_backwards = sbhl_link_methods.sbhl_backward_false_link_nodes(module, node, mt, tv, UNPROVIDED);
            return com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_not_backwards, mt, tv, UNPROVIDED);
        }
    }

    /**
     *
     *
     * @return listp; the maximal among backward false link nodes. used for disjoins
     */
    @LispMethod(comment = "@return listp; the maximal among backward false link nodes. used for disjoins")
    public static SubLObject sbhl_max_backward_false_link_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        if (NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return NIL;
        }
        final SubLObject local_not_backwards = sbhl_link_methods.sbhl_backward_false_link_nodes(module, node, mt, tv, UNPROVIDED);
        return sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_not_backwards, mt, tv, UNPROVIDED);
    }

    /**
     * Checks NODE marking within target space. If NODE is marked in target space, NODE is pushed onto *sbhl-result*, then search path is stopped. @see sbhl-stop-search-path.
     */
    @LispMethod(comment = "Checks NODE marking within target space. If NODE is marked in target space, NODE is pushed onto *sbhl-result*, then search path is stopped. @see sbhl-stop-search-path.")
    public static final SubLObject sbhl_stop_at_horizon_alt(SubLObject node) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                    sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread), thread);
                    if (NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, UNPROVIDED)) {
                        sbhl_search_vars.$sbhl_result$.setDynamicValue(cons(node, sbhl_search_vars.$sbhl_result$.getDynamicValue(thread)), thread);
                        sbhl_search_vars.sbhl_stop_search_path();
                    } else {
                        sbhl_search_vars.sbhl_continue_search_path();
                    }
                } finally {
                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1, thread);
                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0, thread);
                }
            }
            return NIL;
        }
    }

    @LispMethod(comment = "Checks NODE marking within target space. If NODE is marked in target space, NODE is pushed onto *sbhl-result*, then search path is stopped. @see sbhl-stop-search-path.")
    public static SubLObject sbhl_stop_at_horizon(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        try {
            sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread), thread);
            if (NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, UNPROVIDED)) {
                sbhl_search_vars.$sbhl_result$.setDynamicValue(cons(node, sbhl_search_vars.$sbhl_result$.getDynamicValue(thread)), thread);
                sbhl_search_vars.sbhl_stop_search_path();
            } else {
                sbhl_search_vars.sbhl_continue_search_path();
            }
        } finally {
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_2, thread);
            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }/**
     * Checks NODE marking within target space. If NODE is marked in target space, NODE is pushed onto *sbhl-result*, then search path is stopped. @see sbhl-stop-search-path.
     */


    /**
     * Uses @see sbhl-transitive-closure, marks up through minimal intersection with nodes in target space.
     */
    @LispMethod(comment = "Uses @see sbhl-transitive-closure, marks up through minimal intersection with nodes in target space.")
    public static final SubLObject sbhl_mark_closure_up_to_horizon_alt(SubLObject node) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject intersection = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                        sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_STOP_AT_HORIZON, thread);
                        intersection = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node);
                    } finally {
                        sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2, thread);
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0, thread);
                    }
                }
                return intersection;
            }
        }
    }

    @LispMethod(comment = "Uses @see sbhl-transitive-closure, marks up through minimal intersection with nodes in target space.")
    public static SubLObject sbhl_mark_closure_up_to_horizon(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject intersection = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_STOP_AT_HORIZON, thread);
            intersection = sbhl_transitive_closure(node);
        } finally {
            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3, thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0, thread);
        }
        return intersection;
    }/**
     * Uses @see sbhl-transitive-closure, marks up through minimal intersection with nodes in target space.
     */


    /**
     *
     *
     * @return listp; the nodes accessible to all of NODES. Incrementally calculates the minimal intersection of NODES, storing this set as nodes marked within *sbhl-target-space*
     */
    @LispMethod(comment = "@return listp; the nodes accessible to all of NODES. Incrementally calculates the minimal intersection of NODES, storing this set as nodes marked within *sbhl-target-space*")
    public static final SubLObject sbhl_common_horizon_alt(SubLObject nodes, SubLObject candidates) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject transfers_through_searchP = sbhl_module_utilities.sbhl_transfers_through_module_p(sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                SubLObject initial_node = nodes.first();
                SubLObject redux_module = (NIL != transfers_through_searchP) ? ((SubLObject) (sbhl_module_utilities.get_sbhl_reductions_module(sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) : sbhl_module_vars.$sbhl_module$.getDynamicValue(thread);
                SubLObject redux_behavior = sbhl_search_utilities.determine_sbhl_search_behavior(redux_module, sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv());
                SubLObject minimal_intersection = NIL;
                SubLObject empty_intersectionP = NIL;
                SubLObject result = NIL;
                if (NIL != list_utilities.singletonP(nodes)) {
                    if (NIL != candidates) {
                        return intersection(nodes, candidates, UNPROVIDED, UNPROVIDED);
                    } else {
                        return nodes;
                    }
                }
                {
                    SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        {
                            SubLObject _prev_bind_0_739 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                                sbhl_marking_methods.sbhl_mark_closure_as_marked(initial_node);
                                {
                                    SubLObject _prev_bind_0_740 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                        if (NIL == empty_intersectionP) {
                                            {
                                                SubLObject csome_list_var = nodes.rest();
                                                SubLObject node = NIL;
                                                for (node = csome_list_var.first(); !((NIL != empty_intersectionP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , node = csome_list_var.first()) {
                                                    minimal_intersection = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_mark_closure_up_to_horizon(node);
                                                    {
                                                        SubLObject _prev_bind_0_741 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                            if (NIL != minimal_intersection) {
                                                                {
                                                                    SubLObject _prev_bind_0_742 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                    SubLObject _prev_bind_5 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_search_vars.$sbhl_search_module$.bind(redux_module, thread);
                                                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(redux_module), thread);
                                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(redux_module), thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                        sbhl_module_vars.$sbhl_module$.bind(redux_module, thread);
                                                                        sbhl_search_vars.$sbhl_search_behavior$.bind(redux_behavior, thread);
                                                                        sbhl_marking_utilities.clear_sbhl_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                                                                        {
                                                                            SubLObject _prev_bind_0_743 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                                                                                {
                                                                                    SubLObject cdolist_list_var = minimal_intersection;
                                                                                    SubLObject min_node = NIL;
                                                                                    for (min_node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , min_node = cdolist_list_var.first()) {
                                                                                        {
                                                                                            SubLObject _prev_bind_0_744 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                                sbhl_marking_methods.sbhl_mark_closure_as_marked(min_node);
                                                                                            } finally {
                                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_744, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_743, thread);
                                                                            }
                                                                        }
                                                                        {
                                                                            SubLObject _prev_bind_0_745 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                                                                                {
                                                                                    SubLObject cdolist_list_var = minimal_intersection;
                                                                                    SubLObject min_node = NIL;
                                                                                    for (min_node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , min_node = cdolist_list_var.first()) {
                                                                                        sbhl_marking_methods.sbhl_unmark_marked_closure(min_node);
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_745, thread);
                                                                            }
                                                                        }
                                                                    } finally {
                                                                        sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_5, thread);
                                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                                                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                                                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_742, thread);
                                                                    }
                                                                }
                                                            } else {
                                                                empty_intersectionP = T;
                                                            }
                                                        } finally {
                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_0_741, thread);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                    } finally {
                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_740, thread);
                                    }
                                }
                                if (NIL == empty_intersectionP) {
                                    {
                                        SubLObject cdohash_table = sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread);
                                        SubLObject node = NIL;
                                        SubLObject node_marking = NIL;
                                        {
                                            final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
                                            try {
                                                while (iteratorHasNext(cdohash_iterator)) {
                                                    final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
                                                    node = getEntryKey(cdohash_entry);
                                                    node_marking = getEntryValue(cdohash_entry);
                                                    if (NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread))) {
                                                        result = cons(node, result);
                                                    }
                                                } 
                                            } finally {
                                                releaseEntrySetIterator(cdohash_iterator);
                                            }
                                        }
                                    }
                                    if (NIL != candidates) {
                                        result = keyhash_utilities.fast_intersection(candidates, result, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    }
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_739, thread);
                            }
                        }
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    } finally {
                        sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; the nodes accessible to all of NODES. Incrementally calculates the minimal intersection of NODES, storing this set as nodes marked within *sbhl-target-space*
     */
    @LispMethod(comment = "@return listp; the nodes accessible to all of NODES. Incrementally calculates the minimal intersection of NODES, storing this set as nodes marked within *sbhl-target-space*")
    public static SubLObject sbhl_common_horizon(SubLObject nodes, SubLObject candidates) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != set.set_p(nodes)) {
            nodes = set.set_element_list(nodes);
        }
        if (NIL != set.set_p(candidates)) {
            candidates = set.set_element_list(candidates);
        }
        final SubLObject transfers_through_searchP = sbhl_module_utilities.sbhl_transfers_through_module_p(sbhl_module_vars.get_sbhl_module(UNPROVIDED));
        final SubLObject initial_node = nodes.first();
        final SubLObject redux_module = (NIL != transfers_through_searchP) ? sbhl_module_utilities.get_sbhl_reductions_module(sbhl_module_vars.get_sbhl_module(UNPROVIDED)) : sbhl_module_vars.$sbhl_module$.getDynamicValue(thread);
        final SubLObject redux_behavior = sbhl_search_utilities.determine_sbhl_search_behavior(redux_module, sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv());
        SubLObject minimal_intersection = NIL;
        SubLObject empty_intersectionP = NIL;
        SubLObject result = NIL;
        if (NIL == list_utilities.singletonP(nodes)) {
            final SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
            try {
                sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                try {
                    final SubLObject _prev_bind_0_$742 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                        sbhl_marking_methods.sbhl_mark_closure_as_marked(initial_node);
                        final SubLObject _prev_bind_0_$743 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                            try {
                                if (NIL == empty_intersectionP) {
                                    SubLObject csome_list_var = nodes.rest();
                                    SubLObject node = NIL;
                                    node = csome_list_var.first();
                                    while ((NIL == empty_intersectionP) && (NIL != csome_list_var)) {
                                        minimal_intersection = sbhl_mark_closure_up_to_horizon(node);
                                        final SubLObject _prev_bind_0_$744 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                            if (NIL != minimal_intersection) {
                                                final SubLObject _prev_bind_0_$745 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_module$.bind(redux_module, thread);
                                                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(redux_module), thread);
                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(redux_module), thread);
                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                    sbhl_module_vars.$sbhl_module$.bind(redux_module, thread);
                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(redux_behavior, thread);
                                                    sbhl_marking_utilities.clear_sbhl_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                                                    final SubLObject _prev_bind_0_$746 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                    try {
                                                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                                                        SubLObject cdolist_list_var = minimal_intersection;
                                                        SubLObject min_node = NIL;
                                                        min_node = cdolist_list_var.first();
                                                        while (NIL != cdolist_list_var) {
                                                            final SubLObject _prev_bind_0_$747 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                            try {
                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                sbhl_marking_methods.sbhl_mark_closure_as_marked(min_node);
                                                            } finally {
                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_$747, thread);
                                                            }
                                                            cdolist_list_var = cdolist_list_var.rest();
                                                            min_node = cdolist_list_var.first();
                                                        } 
                                                    } finally {
                                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$746, thread);
                                                    }
                                                    final SubLObject _prev_bind_0_$748 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                                                        SubLObject cdolist_list_var = minimal_intersection;
                                                        SubLObject min_node = NIL;
                                                        min_node = cdolist_list_var.first();
                                                        while (NIL != cdolist_list_var) {
                                                            sbhl_marking_methods.sbhl_unmark_marked_closure(min_node);
                                                            cdolist_list_var = cdolist_list_var.rest();
                                                            min_node = cdolist_list_var.first();
                                                        } 
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_$748, thread);
                                                    }
                                                } finally {
                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_6, thread);
                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                                                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
                                                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$745, thread);
                                                }
                                            } else {
                                                empty_intersectionP = T;
                                            }
                                        } finally {
                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_0_$744, thread);
                                        }
                                        csome_list_var = csome_list_var.rest();
                                        node = csome_list_var.first();
                                    } 
                                }
                            } finally {
                                final SubLObject _prev_bind_0_$749 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                    final SubLObject _values = getValuesAsVector();
                                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                    restoreValuesFromVector(_values);
                                } finally {
                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$749, thread);
                                }
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$743, thread);
                        }
                        if (NIL == empty_intersectionP) {
                            final SubLObject cdohash_table = sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread);
                            SubLObject node2 = NIL;
                            SubLObject node_marking = NIL;
                            final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
                            try {
                                while (iteratorHasNext(cdohash_iterator)) {
                                    final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
                                    node2 = getEntryKey(cdohash_entry);
                                    node_marking = getEntryValue(cdohash_entry);
                                    if (NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node2, sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread))) {
                                        result = cons(node2, result);
                                    }
                                } 
                            } finally {
                                releaseEntrySetIterator(cdohash_iterator);
                            }
                            if (NIL != candidates) {
                                result = keyhash_utilities.fast_intersection(candidates, result, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            }
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$742, thread);
                    }
                } finally {
                    final SubLObject _prev_bind_0_$750 = $is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        $is_thread_performing_cleanupP$.bind(T, thread);
                        final SubLObject _values2 = getValuesAsVector();
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                        restoreValuesFromVector(_values2);
                    } finally {
                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$750, thread);
                    }
                }
            } finally {
                sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_0, thread);
            }
            return result;
        }
        if (NIL != candidates) {
            return intersection(nodes, candidates, UNPROVIDED, UNPROVIDED);
        }
        return nodes;
    }

    /**
     *
     *
     * @return listp; the most subordinate nodes which are forward accessible by NODES. @see ceilings. @see sbhl-min-nodes.
     */
    @LispMethod(comment = "@return listp; the most subordinate nodes which are forward accessible by NODES. @see ceilings. @see sbhl-min-nodes.")
    public static final SubLObject sbhl_min_ceilings_alt(SubLObject module, SubLObject nodes, SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        {
            SubLObject ceilings = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_ceilings(module, nodes, candidates, mt, tv);
            return com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), ceilings, mt, tv);
        }
    }

    /**
     *
     *
     * @return listp; the most subordinate nodes which are forward accessible by NODES. @see ceilings. @see sbhl-min-nodes.
     */
    @LispMethod(comment = "@return listp; the most subordinate nodes which are forward accessible by NODES. @see ceilings. @see sbhl-min-nodes.")
    public static SubLObject sbhl_min_ceilings(final SubLObject module, final SubLObject nodes, SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject ceilings = sbhl_ceilings(module, nodes, candidates, mt, tv);
        return sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), ceilings, mt, tv);
    }

    /**
     *
     *
     * @return listp; the most superordinate nodes which are backward accessible by NODES. @see sbhl-floors. @see sbhl-max-nodes.
     */
    @LispMethod(comment = "@return listp; the most superordinate nodes which are backward accessible by NODES. @see sbhl-floors. @see sbhl-max-nodes.")
    public static final SubLObject sbhl_max_floors_alt(SubLObject module, SubLObject nodes, SubLObject candidates, SubLObject mt, SubLObject tv, SubLObject direction) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (direction == UNPROVIDED) {
            direction = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        {
            SubLObject min_nodes = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_min_nodes(module, nodes, mt, tv);
            SubLObject floors = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_floors(module, min_nodes, candidates, mt, tv);
            return com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), floors, mt, tv, direction);
        }
    }

    /**
     *
     *
     * @return listp; the most superordinate nodes which are backward accessible by NODES. @see sbhl-floors. @see sbhl-max-nodes.
     */
    @LispMethod(comment = "@return listp; the most superordinate nodes which are backward accessible by NODES. @see sbhl-floors. @see sbhl-max-nodes.")
    public static SubLObject sbhl_max_floors(final SubLObject module, final SubLObject nodes, SubLObject candidates, SubLObject mt, SubLObject tv, SubLObject direction) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (direction == UNPROVIDED) {
            direction = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject min_nodes = sbhl_min_nodes(module, nodes, mt, tv);
        final SubLObject floors = sbhl_floors(module, min_nodes, candidates, mt, tv);
        return sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), floors, mt, tv, direction);
    }

    /**
     *
     *
     * @return listp; the most superordinate nodes which are backward accessible by NODES. @see sbhl-floors. @see sbhl-max-nodes. prunes all cyclic nodes from result except those from NODES and CANDIDATES or keeps just one arbitrary node from each cycle.
     */
    @LispMethod(comment = "@return listp; the most superordinate nodes which are backward accessible by NODES. @see sbhl-floors. @see sbhl-max-nodes. prunes all cyclic nodes from result except those from NODES and CANDIDATES or keeps just one arbitrary node from each cycle.")
    public static final SubLObject sbhl_max_floors_pruning_cycles_alt(SubLObject module, SubLObject nodes, SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        {
            SubLObject max_floors = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_max_floors(module, nodes, candidates, mt, tv, UNPROVIDED);
            SubLObject cycle_preferred_members = append(nodes, candidates);
            SubLObject result = NIL;
            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_prune_unwanted_extremal_cycles(module, max_floors, cycle_preferred_members, mt, tv);
            return result;
        }
    }

    /**
     *
     *
     * @return listp; the most superordinate nodes which are backward accessible by NODES. @see sbhl-floors. @see sbhl-max-nodes. prunes all cyclic nodes from result except those from NODES and CANDIDATES or keeps just one arbitrary node from each cycle.
     */
    @LispMethod(comment = "@return listp; the most superordinate nodes which are backward accessible by NODES. @see sbhl-floors. @see sbhl-max-nodes. prunes all cyclic nodes from result except those from NODES and CANDIDATES or keeps just one arbitrary node from each cycle.")
    public static SubLObject sbhl_max_floors_pruning_cycles(final SubLObject module, final SubLObject nodes, SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject max_floors = sbhl_max_floors(module, nodes, candidates, mt, tv, UNPROVIDED);
        final SubLObject cycle_preferred_members = append(nodes, candidates);
        SubLObject result = NIL;
        result = sbhl_prune_unwanted_extremal_cycles(module, max_floors, cycle_preferred_members, mt, tv);
        return result;
    }

    /**
     * Does the pruning for @see sbhl-max-floors pruning-cycles. @hack roll this into a different max-floors implementation.
     */
    @LispMethod(comment = "Does the pruning for @see sbhl-max-floors pruning-cycles. @hack roll this into a different max-floors implementation.")
    public static final SubLObject sbhl_prune_unwanted_extremal_cycles_alt(SubLObject module, SubLObject nodes, SubLObject cycle_preferred_members, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            if (NIL == list_utilities.lengthG(nodes, ONE_INTEGER, UNPROVIDED)) {
                return nodes;
            }
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_table$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_table$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        {
                            SubLObject _prev_bind_0_746 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                            SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                            SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                            SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                            SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                            SubLObject _prev_bind_5 = sbhl_marking_vars.$sbhl_suspend_new_spacesP$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                                sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                sbhl_module_vars.$sbhl_module$.bind(module, thread);
                                sbhl_marking_vars.$sbhl_suspend_new_spacesP$.bind(T, thread);
                                {
                                    SubLObject mt_var = mt;
                                    {
                                        SubLObject _prev_bind_0_747 = mt_relevance_macros.$mt$.currentBinding(thread);
                                        SubLObject _prev_bind_1_748 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                        SubLObject _prev_bind_2_749 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                        try {
                                            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                            {
                                                SubLObject tv_var = tv;
                                                {
                                                    SubLObject _prev_bind_0_750 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_751 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                        if (NIL != tv_var) {
                                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                    {
                                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                        if (pcase_var.eql($ERROR)) {
                                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        } else {
                                                                            if (pcase_var.eql($CERROR)) {
                                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                            } else {
                                                                                if (pcase_var.eql($WARN)) {
                                                                                    Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                } else {
                                                                                    Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                    Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        {
                                                            SubLObject _prev_bind_0_752 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                            SubLObject _prev_bind_1_753 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                            SubLObject _prev_bind_2_754 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                            try {
                                                                sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                                {
                                                                    SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                                    {
                                                                        SubLObject _prev_bind_0_755 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_756 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                                    {
                                                                                        SubLObject _prev_bind_0_757 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_1_758 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_2_759 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_3_760 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_4_761 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                            sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                            {
                                                                                                SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                                SubLObject needs_to_releaseP = NIL;
                                                                                                try {
                                                                                                    needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                                    {
                                                                                                        SubLObject _prev_bind_0_762 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                        SubLObject _prev_bind_1_763 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                            {
                                                                                                                SubLObject cdolist_list_var = nodes;
                                                                                                                SubLObject node = NIL;
                                                                                                                for (node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , node = cdolist_list_var.first()) {
                                                                                                                    if (NIL == sbhl_marking_methods.sbhl_recorded_node_p(node, UNPROVIDED)) {
                                                                                                                        {
                                                                                                                            SubLObject _prev_bind_0_764 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                                                                            try {
                                                                                                                                sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                                                                                                                sbhl_marking_methods.sbhl_mark_proper_closure_as_marked(node);
                                                                                                                                if (NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, UNPROVIDED)) {
                                                                                                                                    {
                                                                                                                                        SubLObject cycle = NIL;
                                                                                                                                        SubLObject pushedP = NIL;
                                                                                                                                        {
                                                                                                                                            SubLObject _prev_bind_0_765 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                                                                                                                                            try {
                                                                                                                                                sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                                                                                                                                                try {
                                                                                                                                                    {
                                                                                                                                                        SubLObject _prev_bind_0_766 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                                                                                                        try {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                                                                                                                                                            sbhl_marking_methods.sbhl_unmark_marked_closure_and_gather(node);
                                                                                                                                                        } finally {
                                                                                                                                                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_766, thread);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                } finally {
                                                                                                                                                    {
                                                                                                                                                        SubLObject _prev_bind_0_767 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                                                                                        try {
                                                                                                                                                            $is_thread_performing_cleanupP$.bind(T, thread);
                                                                                                                                                            cycle = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                                                                                                                                        } finally {
                                                                                                                                                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_767, thread);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            } finally {
                                                                                                                                                sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_0_765, thread);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        {
                                                                                                                                            SubLObject cdolist_list_var_768 = cycle;
                                                                                                                                            SubLObject cycle_node = NIL;
                                                                                                                                            for (cycle_node = cdolist_list_var_768.first(); NIL != cdolist_list_var_768; cdolist_list_var_768 = cdolist_list_var_768.rest() , cycle_node = cdolist_list_var_768.first()) {
                                                                                                                                                sbhl_marking_methods.sbhl_record_node(cycle_node, UNPROVIDED);
                                                                                                                                                if (NIL != subl_promotions.memberP(cycle_node, cycle_preferred_members, UNPROVIDED, UNPROVIDED)) {
                                                                                                                                                    pushedP = T;
                                                                                                                                                    result = cons(cycle_node, result);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        if (NIL == pushedP) {
                                                                                                                                            result = cons(node, result);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                } else {
                                                                                                                                    result = cons(node, result);
                                                                                                                                }
                                                                                                                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                                                                            } finally {
                                                                                                                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_764, thread);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } finally {
                                                                                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_763, thread);
                                                                                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_762, thread);
                                                                                                        }
                                                                                                    }
                                                                                                } finally {
                                                                                                    if (NIL != needs_to_releaseP) {
                                                                                                        ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_761, thread);
                                                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_760, thread);
                                                                                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_759, thread);
                                                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_758, thread);
                                                                                            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_757, thread);
                                                                                        }
                                                                                    }
                                                                                    if (source == $RESOURCE) {
                                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_756, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_755, thread);
                                                                        }
                                                                    }
                                                                }
                                                            } finally {
                                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_754, thread);
                                                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_753, thread);
                                                                sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_752, thread);
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_751, thread);
                                                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_750, thread);
                                                    }
                                                }
                                            }
                                        } finally {
                                            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_749, thread);
                                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_748, thread);
                                            mt_relevance_macros.$mt$.rebind(_prev_bind_0_747, thread);
                                        }
                                    }
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_suspend_new_spacesP$.rebind(_prev_bind_5, thread);
                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                                sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                                sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_746, thread);
                            }
                        }
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_table$.getDynamicValue(thread));
                    } finally {
                        sbhl_marking_vars.$sbhl_table$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    @LispMethod(comment = "Does the pruning for @see sbhl-max-floors pruning-cycles. @hack roll this into a different max-floors implementation.")
    public static SubLObject sbhl_prune_unwanted_extremal_cycles(final SubLObject module, final SubLObject nodes, final SubLObject cycle_preferred_members, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        if (NIL == list_utilities.lengthG(nodes, ONE_INTEGER, UNPROVIDED)) {
            return nodes;
        }
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_table$.currentBinding(thread);
        try {
            sbhl_marking_vars.$sbhl_table$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                final SubLObject _prev_bind_0_$751 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                final SubLObject _prev_bind_6 = sbhl_marking_vars.$sbhl_suspend_new_spacesP$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                    sbhl_module_vars.$sbhl_module$.bind(module, thread);
                    sbhl_marking_vars.$sbhl_suspend_new_spacesP$.bind(T, thread);
                    final SubLObject mt_var = mt;
                    final SubLObject _prev_bind_0_$752 = mt_relevance_macros.$mt$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$753 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$754 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                        final SubLObject tv_var = tv;
                        final SubLObject _prev_bind_0_$753 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$754 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                            if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                                final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                if (pcase_var.eql($ERROR)) {
                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                } else
                                    if (pcase_var.eql($CERROR)) {
                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    } else
                                        if (pcase_var.eql($WARN)) {
                                            Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                        } else {
                                            Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                            Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                        }


                            }
                            final SubLObject _prev_bind_0_$754 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$755 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                            final SubLObject _prev_bind_2_$755 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                final SubLObject _prev_bind_0_$755 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                    final SubLObject _prev_bind_0_$756 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                        final SubLObject _prev_bind_0_$757 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$756 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$756 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$765 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$766 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                            sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                            final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                            SubLObject needs_to_releaseP = NIL;
                                            try {
                                                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                final SubLObject _prev_bind_0_$758 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                final SubLObject _prev_bind_1_$757 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                    SubLObject cdolist_list_var = nodes;
                                                    SubLObject node = NIL;
                                                    node = cdolist_list_var.first();
                                                    while (NIL != cdolist_list_var) {
                                                        if (NIL == sbhl_marking_methods.sbhl_recorded_node_p(node, UNPROVIDED)) {
                                                            final SubLObject _prev_bind_0_$759 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                            try {
                                                                sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                                                try {
                                                                    sbhl_marking_methods.sbhl_mark_proper_closure_as_marked(node);
                                                                    if (NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, UNPROVIDED)) {
                                                                        SubLObject cycle = NIL;
                                                                        SubLObject pushedP = NIL;
                                                                        final SubLObject _prev_bind_0_$760 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                                                                            try {
                                                                                final SubLObject _prev_bind_0_$761 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                                                                                    sbhl_marking_methods.sbhl_unmark_marked_closure_and_gather(node);
                                                                                } finally {
                                                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_$761, thread);
                                                                                }
                                                                            } finally {
                                                                                final SubLObject _prev_bind_0_$762 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                try {
                                                                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                                                                    final SubLObject _values = getValuesAsVector();
                                                                                    cycle = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                                                                    restoreValuesFromVector(_values);
                                                                                } finally {
                                                                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$762, thread);
                                                                                }
                                                                            }
                                                                        } finally {
                                                                            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_0_$760, thread);
                                                                        }
                                                                        SubLObject cdolist_list_var_$773 = cycle;
                                                                        SubLObject cycle_node = NIL;
                                                                        cycle_node = cdolist_list_var_$773.first();
                                                                        while (NIL != cdolist_list_var_$773) {
                                                                            sbhl_marking_methods.sbhl_record_node(cycle_node, UNPROVIDED);
                                                                            if (NIL != subl_promotions.memberP(cycle_node, cycle_preferred_members, UNPROVIDED, UNPROVIDED)) {
                                                                                pushedP = T;
                                                                                result = cons(cycle_node, result);
                                                                            }
                                                                            cdolist_list_var_$773 = cdolist_list_var_$773.rest();
                                                                            cycle_node = cdolist_list_var_$773.first();
                                                                        } 
                                                                        if (NIL == pushedP) {
                                                                            result = cons(node, result);
                                                                        }
                                                                    } else {
                                                                        result = cons(node, result);
                                                                    }
                                                                } finally {
                                                                    final SubLObject _prev_bind_0_$763 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                                    try {
                                                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                                                        final SubLObject _values2 = getValuesAsVector();
                                                                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                        restoreValuesFromVector(_values2);
                                                                    } finally {
                                                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$763, thread);
                                                                    }
                                                                }
                                                            } finally {
                                                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$759, thread);
                                                            }
                                                        }
                                                        cdolist_list_var = cdolist_list_var.rest();
                                                        node = cdolist_list_var.first();
                                                    } 
                                                } finally {
                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$757, thread);
                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$758, thread);
                                                }
                                            } finally {
                                                if (NIL != needs_to_releaseP) {
                                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                }
                                            }
                                        } finally {
                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$766, thread);
                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$765, thread);
                                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$756, thread);
                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$756, thread);
                                            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$757, thread);
                                        }
                                        if (source == $RESOURCE) {
                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                        }
                                    } finally {
                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$756, thread);
                                    }
                                    if (source == $RESOURCE) {
                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                    }
                                } finally {
                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$755, thread);
                                }
                            } finally {
                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$755, thread);
                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$755, thread);
                                sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$754, thread);
                            }
                        } finally {
                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$754, thread);
                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$753, thread);
                        }
                    } finally {
                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$754, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$753, thread);
                        mt_relevance_macros.$mt$.rebind(_prev_bind_0_$752, thread);
                    }
                } finally {
                    sbhl_marking_vars.$sbhl_suspend_new_spacesP$.rebind(_prev_bind_6, thread);
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$751, thread);
                }
            } finally {
                final SubLObject _prev_bind_0_$764 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values3 = getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_table$.getDynamicValue(thread));
                    restoreValuesFromVector(_values3);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$764, thread);
                }
            }
        } finally {
            sbhl_marking_vars.$sbhl_table$.rebind(_prev_bind_0, thread);
        }
        return result;
    }/**
     * Does the pruning for @see sbhl-max-floors pruning-cycles. @hack roll this into a different max-floors implementation.
     */


    /**
     *
     *
     * @return listp; the nodes which are a member of the intersection of the forward true closures of each of NODES. If CANDIDATES are provided, the answer will subset them.
     */
    @LispMethod(comment = "@return listp; the nodes which are a member of the intersection of the forward true closures of each of NODES. If CANDIDATES are provided, the answer will subset them.")
    public static final SubLObject sbhl_ceilings_alt(SubLObject module, SubLObject nodes, SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            nodes = list_utilities.fast_delete_duplicates(nodes, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            {
                SubLObject result = NIL;
                if (NIL == nodes) {
                    return NIL;
                } else {
                    if (NIL == list_utilities.singletonP(nodes)) {
                        {
                            SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                            SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                            SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                            SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                            SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                                sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                sbhl_module_vars.$sbhl_module$.bind(module, thread);
                                {
                                    SubLObject mt_var = mt;
                                    {
                                        SubLObject _prev_bind_0_769 = mt_relevance_macros.$mt$.currentBinding(thread);
                                        SubLObject _prev_bind_1_770 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                        SubLObject _prev_bind_2_771 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                        try {
                                            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                            {
                                                SubLObject tv_var = tv;
                                                {
                                                    SubLObject _prev_bind_0_772 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_773 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                        if (NIL != tv_var) {
                                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                    {
                                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                        if (pcase_var.eql($ERROR)) {
                                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        } else {
                                                                            if (pcase_var.eql($CERROR)) {
                                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                            } else {
                                                                                if (pcase_var.eql($WARN)) {
                                                                                    Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                } else {
                                                                                    Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                    Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        {
                                                            SubLObject _prev_bind_0_774 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                            SubLObject _prev_bind_1_775 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                            SubLObject _prev_bind_2_776 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                            try {
                                                                sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                                {
                                                                    SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                                    {
                                                                        SubLObject _prev_bind_0_777 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_778 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                                    {
                                                                                        SubLObject _prev_bind_0_779 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_1_780 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_2_781 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_3_782 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_4_783 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                            sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                            {
                                                                                                SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                                SubLObject needs_to_releaseP = NIL;
                                                                                                try {
                                                                                                    needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                                    {
                                                                                                        SubLObject _prev_bind_0_784 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                        SubLObject _prev_bind_1_785 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_common_horizon(nodes, candidates);
                                                                                                        } finally {
                                                                                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_785, thread);
                                                                                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_784, thread);
                                                                                                        }
                                                                                                    }
                                                                                                } finally {
                                                                                                    if (NIL != needs_to_releaseP) {
                                                                                                        ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_783, thread);
                                                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_782, thread);
                                                                                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_781, thread);
                                                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_780, thread);
                                                                                            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_779, thread);
                                                                                        }
                                                                                    }
                                                                                    if (source == $RESOURCE) {
                                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_778, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_777, thread);
                                                                        }
                                                                    }
                                                                }
                                                            } finally {
                                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_776, thread);
                                                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_775, thread);
                                                                sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_774, thread);
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_773, thread);
                                                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_772, thread);
                                                    }
                                                }
                                            }
                                        } finally {
                                            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_771, thread);
                                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_770, thread);
                                            mt_relevance_macros.$mt$.rebind(_prev_bind_0_769, thread);
                                        }
                                    }
                                }
                            } finally {
                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                                sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                                sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                            }
                        }
                    } else {
                        if (NIL == candidates) {
                            if (NIL != sbhl_module_utilities.sbhl_transfers_through_module_p(module)) {
                                result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_min_forward_true_link_nodes(module, nodes.first(), mt, tv);
                            } else {
                                result = nodes;
                            }
                        } else {
                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_predicate_relation_to_which(module, nodes.first(), candidates, mt, tv, UNPROVIDED);
                        }
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; the nodes which are a member of the intersection of the forward true closures of each of NODES. If CANDIDATES are provided, the answer will subset them.
     */
    @LispMethod(comment = "@return listp; the nodes which are a member of the intersection of the forward true closures of each of NODES. If CANDIDATES are provided, the answer will subset them.")
    public static SubLObject sbhl_ceilings(final SubLObject module, SubLObject nodes, SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        nodes = list_utilities.fast_delete_duplicates(nodes, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        SubLObject result = NIL;
        if (NIL == nodes) {
            return NIL;
        }
        if (NIL == list_utilities.singletonP(nodes)) {
            final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
            final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
            final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
            final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
            final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                sbhl_module_vars.$sbhl_module$.bind(module, thread);
                final SubLObject mt_var = mt;
                final SubLObject _prev_bind_0_$776 = mt_relevance_macros.$mt$.currentBinding(thread);
                final SubLObject _prev_bind_1_$777 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_2_$778 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                try {
                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                    final SubLObject tv_var = tv;
                    final SubLObject _prev_bind_0_$777 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$778 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                        if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                            final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                            if (pcase_var.eql($ERROR)) {
                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($CERROR)) {
                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                } else
                                    if (pcase_var.eql($WARN)) {
                                        Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                    } else {
                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                    }


                        }
                        final SubLObject _prev_bind_0_$778 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$779 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$779 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                            final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                            final SubLObject _prev_bind_0_$779 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$780 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                    final SubLObject _prev_bind_0_$781 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$780 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$780 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                    final SubLObject _prev_bind_3_$789 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                    final SubLObject _prev_bind_4_$790 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                        final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                        SubLObject needs_to_releaseP = NIL;
                                        try {
                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                            final SubLObject _prev_bind_0_$782 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$781 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                result = sbhl_common_horizon(nodes, candidates);
                                            } finally {
                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$781, thread);
                                                sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$782, thread);
                                            }
                                        } finally {
                                            if (NIL != needs_to_releaseP) {
                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                            }
                                        }
                                    } finally {
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$790, thread);
                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$789, thread);
                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$780, thread);
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$780, thread);
                                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$781, thread);
                                    }
                                    if (source == $RESOURCE) {
                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                    }
                                } finally {
                                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$780, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$779, thread);
                            }
                        } finally {
                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$779, thread);
                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$779, thread);
                            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$778, thread);
                        }
                    } finally {
                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$778, thread);
                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$777, thread);
                    }
                } finally {
                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$778, thread);
                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$777, thread);
                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_$776, thread);
                }
            } finally {
                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
                sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
            }
        } else
            if (NIL == candidates) {
                if (NIL != sbhl_module_utilities.sbhl_transfers_through_module_p(module)) {
                    result = sbhl_min_forward_true_link_nodes(module, nodes.first(), mt, tv);
                } else {
                    result = nodes;
                }
            } else {
                result = sbhl_predicate_relation_to_which(module, nodes.first(), candidates, mt, tv, UNPROVIDED);
            }

        return result;
    }

    /**
     *
     *
     * @return listp; the nodes which are a member of the intersection of the backward true closures of each of NODES. If CANDIDATES are provided, the answer will subset them.
     */
    @LispMethod(comment = "@return listp; the nodes which are a member of the intersection of the backward true closures of each of NODES. If CANDIDATES are provided, the answer will subset them.")
    public static final SubLObject sbhl_floors_alt(SubLObject module, SubLObject nodes, SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                nodes = list_utilities.fast_delete_duplicates(nodes, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                if (NIL == nodes) {
                    return NIL;
                } else {
                    if (NIL == list_utilities.singletonP(nodes)) {
                        {
                            SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                            SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                            SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                            SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                            SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                                sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                sbhl_module_vars.$sbhl_module$.bind(module, thread);
                                {
                                    SubLObject mt_var = mt;
                                    {
                                        SubLObject _prev_bind_0_786 = mt_relevance_macros.$mt$.currentBinding(thread);
                                        SubLObject _prev_bind_1_787 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                        SubLObject _prev_bind_2_788 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                        try {
                                            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                            {
                                                SubLObject tv_var = tv;
                                                {
                                                    SubLObject _prev_bind_0_789 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_790 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                        if (NIL != tv_var) {
                                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                    {
                                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                        if (pcase_var.eql($ERROR)) {
                                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        } else {
                                                                            if (pcase_var.eql($CERROR)) {
                                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                            } else {
                                                                                if (pcase_var.eql($WARN)) {
                                                                                    Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                } else {
                                                                                    Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                    Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        {
                                                            SubLObject _prev_bind_0_791 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                            SubLObject _prev_bind_1_792 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                            SubLObject _prev_bind_2_793 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                            try {
                                                                sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                                {
                                                                    SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                                    {
                                                                        SubLObject _prev_bind_0_794 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_795 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                                    {
                                                                                        SubLObject _prev_bind_0_796 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_1_797 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_2_798 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_3_799 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_4_800 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                            sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                            {
                                                                                                SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                                SubLObject needs_to_releaseP = NIL;
                                                                                                try {
                                                                                                    needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                                    {
                                                                                                        SubLObject _prev_bind_0_801 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                        SubLObject _prev_bind_1_802 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_common_horizon(nodes, candidates);
                                                                                                        } finally {
                                                                                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_802, thread);
                                                                                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_801, thread);
                                                                                                        }
                                                                                                    }
                                                                                                } finally {
                                                                                                    if (NIL != needs_to_releaseP) {
                                                                                                        ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_800, thread);
                                                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_799, thread);
                                                                                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_798, thread);
                                                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_797, thread);
                                                                                            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_796, thread);
                                                                                        }
                                                                                    }
                                                                                    if (source == $RESOURCE) {
                                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_795, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_794, thread);
                                                                        }
                                                                    }
                                                                }
                                                            } finally {
                                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_793, thread);
                                                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_792, thread);
                                                                sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_791, thread);
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_790, thread);
                                                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_789, thread);
                                                    }
                                                }
                                            }
                                        } finally {
                                            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_788, thread);
                                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_787, thread);
                                            mt_relevance_macros.$mt$.rebind(_prev_bind_0_786, thread);
                                        }
                                    }
                                }
                            } finally {
                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                                sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                                sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                            }
                        }
                    } else {
                        if (NIL == candidates) {
                            if (NIL != sbhl_module_utilities.sbhl_transfers_through_module_p(module)) {
                                result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_max_backward_true_link_nodes(module, nodes.first(), mt, tv);
                            } else {
                                result = nodes;
                            }
                        } else {
                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_inverse_relation_to_which(module, nodes.first(), candidates, mt, tv);
                        }
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; the nodes which are a member of the intersection of the backward true closures of each of NODES. If CANDIDATES are provided, the answer will subset them.
     */
    @LispMethod(comment = "@return listp; the nodes which are a member of the intersection of the backward true closures of each of NODES. If CANDIDATES are provided, the answer will subset them.")
    public static SubLObject sbhl_floors(final SubLObject module, SubLObject nodes, SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (candidates == UNPROVIDED) {
            candidates = NIL;
        }
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        nodes = list_utilities.fast_delete_duplicates(nodes, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        if (NIL == nodes) {
            return NIL;
        }
        if (NIL == list_utilities.singletonP(nodes)) {
            final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
            final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
            final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
            final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
            final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                sbhl_module_vars.$sbhl_module$.bind(module, thread);
                final SubLObject mt_var = mt;
                final SubLObject _prev_bind_0_$793 = mt_relevance_macros.$mt$.currentBinding(thread);
                final SubLObject _prev_bind_1_$794 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_2_$795 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                try {
                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                    final SubLObject tv_var = tv;
                    final SubLObject _prev_bind_0_$794 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$795 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                        if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                            final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                            if (pcase_var.eql($ERROR)) {
                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($CERROR)) {
                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                } else
                                    if (pcase_var.eql($WARN)) {
                                        Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                    } else {
                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                    }


                        }
                        final SubLObject _prev_bind_0_$795 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$796 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$796 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                            final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                            final SubLObject _prev_bind_0_$796 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$797 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                    final SubLObject _prev_bind_0_$798 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$797 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$797 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                    final SubLObject _prev_bind_3_$806 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                    final SubLObject _prev_bind_4_$807 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                        final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                        SubLObject needs_to_releaseP = NIL;
                                        try {
                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                            final SubLObject _prev_bind_0_$799 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$798 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                result = sbhl_common_horizon(nodes, candidates);
                                            } finally {
                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$798, thread);
                                                sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$799, thread);
                                            }
                                        } finally {
                                            if (NIL != needs_to_releaseP) {
                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                            }
                                        }
                                    } finally {
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$807, thread);
                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$806, thread);
                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$797, thread);
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$797, thread);
                                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$798, thread);
                                    }
                                    if (source == $RESOURCE) {
                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                    }
                                } finally {
                                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$797, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$796, thread);
                            }
                        } finally {
                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$796, thread);
                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$796, thread);
                            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$795, thread);
                        }
                    } finally {
                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$795, thread);
                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$794, thread);
                    }
                } finally {
                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$795, thread);
                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$794, thread);
                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_$793, thread);
                }
            } finally {
                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
                sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
            }
        } else
            if (NIL == candidates) {
                if (NIL != sbhl_module_utilities.sbhl_transfers_through_module_p(module)) {
                    result = sbhl_max_backward_true_link_nodes(module, nodes.first(), mt, tv);
                } else {
                    result = nodes;
                }
            } else {
                result = sbhl_inverse_relation_to_which(module, nodes.first(), candidates, mt, tv);
            }

        return result;
    }

    /**
     *
     *
     * @return listp; the members of CANDIDATES which are accessible to NODE.
     */
    @LispMethod(comment = "@return listp; the members of CANDIDATES which are accessible to NODE.")
    public static final SubLObject sbhl_predicate_relation_to_which_alt(SubLObject module, SubLObject node, SubLObject candidates, SubLObject mt, SubLObject tv, SubLObject excl_link_node) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (excl_link_node == UNPROVIDED) {
            excl_link_node = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_803 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_804 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_805 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_806 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_807 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_808 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_809 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_810 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_811 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_812 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_813 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_814 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_815 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_816 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_817 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject _prev_bind_0_818 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_819 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    if (NIL != excl_link_node) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(excl_link_node, UNPROVIDED);
                                                                                                    }
                                                                                                    sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
                                                                                                    if (NIL != excl_link_node) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_unmarked(excl_link_node, UNPROVIDED);
                                                                                                    }
                                                                                                    {
                                                                                                        SubLObject cdolist_list_var = candidates;
                                                                                                        SubLObject candidate = NIL;
                                                                                                        for (candidate = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , candidate = cdolist_list_var.first()) {
                                                                                                            {
                                                                                                                SubLObject _prev_bind_0_820 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                                                try {
                                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(sbhl_module_vars.get_sbhl_module_link_pred(module) == $$genlInverse ? ((SubLObject) (T)) : NIL, thread);
                                                                                                                    if (NIL != sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(candidate)) {
                                                                                                                        result = cons(candidate, result);
                                                                                                                    }
                                                                                                                } finally {
                                                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_820, thread);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } finally {
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_819, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_818, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_817, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_816, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_815, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_814, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_813, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_812, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_811, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_810, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_809, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_808, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_807, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_806, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_805, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_804, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_803, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; the members of CANDIDATES which are accessible to NODE.
     */
    @LispMethod(comment = "@return listp; the members of CANDIDATES which are accessible to NODE.")
    public static SubLObject sbhl_predicate_relation_to_which(final SubLObject module, final SubLObject node, final SubLObject candidates, SubLObject mt, SubLObject tv, SubLObject excl_link_node) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (excl_link_node == UNPROVIDED) {
            excl_link_node = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$810 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$811 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$812 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$811 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$812 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$812 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$813 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$813 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$813 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$814 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$815 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$814 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$814 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$823 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$824 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$816 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$815 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            if (NIL != excl_link_node) {
                                                sbhl_marking_utilities.sbhl_mark_node_marked(excl_link_node, UNPROVIDED);
                                            }
                                            sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
                                            if (NIL != excl_link_node) {
                                                sbhl_marking_utilities.sbhl_mark_node_unmarked(excl_link_node, UNPROVIDED);
                                            }
                                            SubLObject cdolist_list_var = candidates;
                                            SubLObject candidate = NIL;
                                            candidate = cdolist_list_var.first();
                                            while (NIL != cdolist_list_var) {
                                                final SubLObject _prev_bind_0_$817 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(sbhl_module_vars.get_sbhl_module_link_pred(module).eql($$genlInverse) ? T : NIL, thread);
                                                    if (NIL != sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(candidate)) {
                                                        result = cons(candidate, result);
                                                    }
                                                } finally {
                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_$817, thread);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                candidate = cdolist_list_var.first();
                                            } 
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$815, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$816, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$824, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$823, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$814, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$814, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$815, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$814, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$813, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$813, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$813, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$812, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$812, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$811, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$812, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$811, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$810, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; the members of NODES which can access NODE by MODULE.
     */
    @LispMethod(comment = "@return listp; the members of NODES which can access NODE by MODULE.")
    public static final SubLObject sbhl_which_with_predicate_relation_alt(SubLObject module, SubLObject nodes, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        return NIL;
    }

    /**
     *
     *
     * @return listp; the members of NODES which can access NODE by MODULE.
     */
    @LispMethod(comment = "@return listp; the members of NODES which can access NODE by MODULE.")
    public static SubLObject sbhl_which_with_predicate_relation(final SubLObject module, final SubLObject nodes, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        return NIL;
    }

    public static final SubLObject sbhl_predicate_relation_to_which_excluding_link_node_alt(SubLObject module, SubLObject node, SubLObject candidates, SubLObject excl_link_node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        return com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_predicate_relation_to_which(module, node, candidates, mt, tv, excl_link_node);
    }

    public static SubLObject sbhl_predicate_relation_to_which_excluding_link_node(final SubLObject module, final SubLObject node, final SubLObject candidates, final SubLObject excl_link_node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        return sbhl_predicate_relation_to_which(module, node, candidates, mt, tv, excl_link_node);
    }

    /**
     *
     *
     * @return listp; the members of CANDIDATES which are accessible to NODE.
     */
    @LispMethod(comment = "@return listp; the members of CANDIDATES which are accessible to NODE.")
    public static final SubLObject sbhl_inverse_relation_to_which_alt(SubLObject module, SubLObject node, SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_821 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_822 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_823 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_824 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_825 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_826 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_827 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_828 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_829 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_830 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_831 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_832 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_833 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_834 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_835 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject _prev_bind_0_836 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_837 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
                                                                                                    {
                                                                                                        SubLObject cdolist_list_var = candidates;
                                                                                                        SubLObject candidate = NIL;
                                                                                                        for (candidate = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , candidate = cdolist_list_var.first()) {
                                                                                                            if (NIL != sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(candidate)) {
                                                                                                                result = cons(candidate, result);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } finally {
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_837, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_836, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_835, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_834, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_833, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_832, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_831, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_830, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_829, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_828, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_827, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_826, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_825, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_824, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_823, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_822, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_821, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; the members of CANDIDATES which are accessible to NODE.
     */
    @LispMethod(comment = "@return listp; the members of CANDIDATES which are accessible to NODE.")
    public static SubLObject sbhl_inverse_relation_to_which(final SubLObject module, final SubLObject node, final SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$828 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$829 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$830 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$829 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$830 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$830 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$831 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$831 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$831 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$832 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$833 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$832 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$832 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$841 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$842 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$834 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$833 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
                                            SubLObject cdolist_list_var = candidates;
                                            SubLObject candidate = NIL;
                                            candidate = cdolist_list_var.first();
                                            while (NIL != cdolist_list_var) {
                                                if (NIL != sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(candidate)) {
                                                    result = cons(candidate, result);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                candidate = cdolist_list_var.first();
                                            } 
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$833, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$834, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$842, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$841, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$832, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$832, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$833, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$832, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$831, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$831, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$831, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$830, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$830, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$829, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$830, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$829, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$828, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return sbhl-node-object-p; the first node accessible to NODE marked in target space
     */
    @LispMethod(comment = "@return sbhl-node-object-p; the first node accessible to NODE marked in target space")
    public static final SubLObject sbhl_gather_first_target_marked_node_alt(SubLObject node) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                        try {
                            {
                                SubLObject _prev_bind_0_838 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                    sbhl_search_vars.$sbhl_compose_fn$.bind(SBHL_MARKED_IN_TARGET_SPACE_P, thread);
                                    sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_GATHER_FIRST_NON_NIL_RESULT, thread);
                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node);
                                } finally {
                                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3, thread);
                                    sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2, thread);
                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1, thread);
                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_838, thread);
                                }
                            }
                        } finally {
                            {
                                SubLObject _prev_bind_0_839 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                } finally {
                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_839, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return sbhl-node-object-p; the first node accessible to NODE marked in target space
     */
    @LispMethod(comment = "@return sbhl-node-object-p; the first node accessible to NODE marked in target space")
    public static SubLObject sbhl_gather_first_target_marked_node(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
            try {
                final SubLObject _prev_bind_0_$845 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                    sbhl_search_vars.$sbhl_compose_fn$.bind(SBHL_MARKED_IN_TARGET_SPACE_P, thread);
                    sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_GATHER_FIRST_NON_NIL_RESULT, thread);
                    result = sbhl_transitive_closure(node);
                } finally {
                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_3, thread);
                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$845, thread);
                }
            } finally {
                final SubLObject _prev_bind_0_$846 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values = getValuesAsVector();
                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                    restoreValuesFromVector(_values);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$846, thread);
                }
            }
        } finally {
            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return sbhl-node-object-p; the first encountered node accessible to NODE1 and NODE2.
     */
    @LispMethod(comment = "@return sbhl-node-object-p; the first encountered node accessible to NODE1 and NODE2.")
    public static final SubLObject sbhl_first_common_horizon_alt(SubLObject node1, SubLObject node2) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        {
                            SubLObject _prev_bind_0_840 = sbhl_marking_vars.$sbhl_target_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_target_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                {
                                    SubLObject _prev_bind_0_841 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                                        sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread), thread);
                                        sbhl_marking_methods.sbhl_mark_closure_as_marked(node1);
                                        {
                                            SubLObject _prev_bind_0_842 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                            try {
                                                sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                                {
                                                    SubLObject _prev_bind_0_843 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                    try {
                                                        sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                                        result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_gather_first_target_marked_node(node2);
                                                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                    } finally {
                                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_843, thread);
                                                    }
                                                }
                                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                            } finally {
                                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_842, thread);
                                            }
                                        }
                                    } finally {
                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1, thread);
                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_841, thread);
                                    }
                                }
                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread));
                            } finally {
                                sbhl_marking_vars.$sbhl_target_gather_space$.rebind(_prev_bind_0_840, thread);
                            }
                        }
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    } finally {
                        sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return sbhl-node-object-p; the first encountered node accessible to NODE1 and NODE2.
     */
    @LispMethod(comment = "@return sbhl-node-object-p; the first encountered node accessible to NODE1 and NODE2.")
    public static SubLObject sbhl_first_common_horizon(final SubLObject node1, final SubLObject node2) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
        try {
            sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                final SubLObject _prev_bind_0_$847 = sbhl_marking_vars.$sbhl_target_gather_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_target_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                    try {
                        final SubLObject _prev_bind_0_$848 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread), thread);
                            sbhl_marking_methods.sbhl_mark_closure_as_marked(node1);
                            final SubLObject _prev_bind_0_$849 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                try {
                                    final SubLObject _prev_bind_0_$850 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                        try {
                                            result = sbhl_gather_first_target_marked_node(node2);
                                        } finally {
                                            final SubLObject _prev_bind_0_$851 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                            try {
                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                final SubLObject _values = getValuesAsVector();
                                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                restoreValuesFromVector(_values);
                                            } finally {
                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$851, thread);
                                            }
                                        }
                                    } finally {
                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$850, thread);
                                    }
                                } finally {
                                    final SubLObject _prev_bind_0_$852 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                        final SubLObject _values2 = getValuesAsVector();
                                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                        restoreValuesFromVector(_values2);
                                    } finally {
                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$852, thread);
                                    }
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$849, thread);
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_2, thread);
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$848, thread);
                        }
                    } finally {
                        final SubLObject _prev_bind_0_$853 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values3 = getValuesAsVector();
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread));
                            restoreValuesFromVector(_values3);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$853, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$sbhl_target_gather_space$.rebind(_prev_bind_0_$847, thread);
                }
            } finally {
                final SubLObject _prev_bind_0_$854 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values4 = getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    restoreValuesFromVector(_values4);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$854, thread);
                }
            }
        } finally {
            sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return sbhl-node-object-p; the first node found backwards accessible to NODE1 and NODE2 via MODULE.
     */
    @LispMethod(comment = "@return sbhl-node-object-p; the first node found backwards accessible to NODE1 and NODE2 via MODULE.")
    public static final SubLObject sbhl_first_floor_of_node_pair_alt(SubLObject module, SubLObject node1, SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_844 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_845 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_846 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_847 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_848 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_849 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_850 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_851 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_852 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_853 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_854 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_855 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_856 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_857 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_858 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_first_common_horizon(node1, node2);
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_858, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_857, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_856, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_855, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_854, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_853, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_852, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_851, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_850, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_849, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_848, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_847, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_846, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_845, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_844, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return sbhl-node-object-p; the first node found backwards accessible to NODE1 and NODE2 via MODULE.
     */
    @LispMethod(comment = "@return sbhl-node-object-p; the first node found backwards accessible to NODE1 and NODE2 via MODULE.")
    public static SubLObject sbhl_first_floor_of_node_pair(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$855 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$856 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$857 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$856 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$857 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$857 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$858 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$858 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$858 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$859 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$860 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$859 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$859 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$868 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$869 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_first_common_horizon(node1, node2);
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$869, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$868, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$859, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$859, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$860, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$859, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$858, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$858, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$858, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$857, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$857, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$856, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$857, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$856, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$855, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return sbhl-node-object-p; the first node found forwards accessible to NODE1 and NODE2 via MODULE.
     */
    @LispMethod(comment = "@return sbhl-node-object-p; the first node found forwards accessible to NODE1 and NODE2 via MODULE.")
    public static final SubLObject sbhl_first_ceiling_of_node_pair_alt(SubLObject module, SubLObject node1, SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_859 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_860 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_861 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_862 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_863 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_864 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_865 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_866 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_867 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_868 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_869 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_870 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_871 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_872 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_873 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_first_common_horizon(node1, node2);
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_873, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_872, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_871, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_870, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_869, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_868, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_867, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_866, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_865, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_864, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_863, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_862, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_861, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_860, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_859, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return sbhl-node-object-p; the first node found forwards accessible to NODE1 and NODE2 via MODULE.
     */
    @LispMethod(comment = "@return sbhl-node-object-p; the first node found forwards accessible to NODE1 and NODE2 via MODULE.")
    public static SubLObject sbhl_first_ceiling_of_node_pair(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$870 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$871 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$872 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$871 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$872 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$872 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$873 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$873 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$873 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$874 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$875 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$874 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$874 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$883 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$884 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_first_common_horizon(node1, node2);
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$884, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$883, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$874, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$874, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$875, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$874, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$873, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$873, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$873, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$872, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$872, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$871, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$872, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$871, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$870, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; all of GOALS which can not be accessed by a forward true path from any of NODES.
     */
    @LispMethod(comment = "@return listp; all of GOALS which can not be accessed by a forward true path from any of NODES.")
    public static final SubLObject sbhl_forward_true_goals_with_no_path_from_nodes_alt(SubLObject module, SubLObject nodes, SubLObject goals, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_874 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_875 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_876 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_877 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_878 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_879 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_880 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_881 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_882 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_883 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_884 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_885 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_886 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_887 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_888 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject _prev_bind_0_889 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_890 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_all_goals_with_no_path_from_nodes(nodes, goals);
                                                                                                } finally {
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_890, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_889, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_888, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_887, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_886, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_885, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_884, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_883, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_882, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_881, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_880, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_879, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_878, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_877, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_876, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_875, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_874, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; all of GOALS which can not be accessed by a forward true path from any of NODES.
     */
    @LispMethod(comment = "@return listp; all of GOALS which can not be accessed by a forward true path from any of NODES.")
    public static SubLObject sbhl_forward_true_goals_with_no_path_from_nodes(final SubLObject module, final SubLObject nodes, final SubLObject goals, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$885 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$886 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$887 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$886 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$887 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$887 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$888 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$888 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$888 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$889 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$890 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$889 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$889 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$898 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$899 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$891 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$890 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_all_goals_with_no_path_from_nodes(nodes, goals);
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$890, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$891, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$899, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$898, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$889, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$889, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$890, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$889, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$888, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$888, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$888, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$887, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$887, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$886, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$887, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$886, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$885, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; all of GOALS which can not be accessed from any of NODES.
     */
    @LispMethod(comment = "@return listp; all of GOALS which can not be accessed from any of NODES.")
    public static final SubLObject sbhl_all_goals_with_no_path_from_nodes_alt(SubLObject nodes, SubLObject goals) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject cdolist_list_var = nodes;
                    SubLObject node = NIL;
                    for (node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , node = cdolist_list_var.first()) {
                        {
                            SubLObject _prev_bind_0 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                            SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
                            } finally {
                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_1, thread);
                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0, thread);
                            }
                        }
                    }
                }
                {
                    SubLObject cdolist_list_var = goals;
                    SubLObject goal = NIL;
                    for (goal = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , goal = cdolist_list_var.first()) {
                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(goal, UNPROVIDED)) {
                            result = cons(goal, result);
                        }
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; all of GOALS which can not be accessed from any of NODES.
     */
    @LispMethod(comment = "@return listp; all of GOALS which can not be accessed from any of NODES.")
    public static SubLObject sbhl_all_goals_with_no_path_from_nodes(final SubLObject nodes, final SubLObject goals) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        SubLObject cdolist_list_var = nodes;
        SubLObject node = NIL;
        node = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject _prev_bind_0 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
            final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
            try {
                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
            } finally {
                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2, thread);
                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0, thread);
            }
            cdolist_list_var = cdolist_list_var.rest();
            node = cdolist_list_var.first();
        } 
        cdolist_list_var = goals;
        SubLObject goal = NIL;
        goal = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(goal, UNPROVIDED)) {
                result = cons(goal, result);
            }
            cdolist_list_var = cdolist_list_var.rest();
            goal = cdolist_list_var.first();
        } 
        return result;
    }

    /**
     *
     *
     * @return listp; The forward true closure of NODE1 that intersects the backward true closure of NODE2.
     */
    @LispMethod(comment = "@return listp; The forward true closure of NODE1 that intersects the backward true closure of NODE2.")
    public static final SubLObject sbhl_all_forward_true_nodes_between_alt(SubLObject module, SubLObject node1, SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_891 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_892 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_893 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_894 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_895 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_896 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_897 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_898 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_899 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_900 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_901 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_902 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_903 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_904 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_905 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject _prev_bind_0_906 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_907 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_closure_between(node1, node2);
                                                                                                } finally {
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_907, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_906, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_905, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_904, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_903, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_902, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_901, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_900, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_899, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_898, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_897, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_896, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_895, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_894, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_893, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_892, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_891, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; The forward true closure of NODE1 that intersects the backward true closure of NODE2.
     */
    @LispMethod(comment = "@return listp; The forward true closure of NODE1 that intersects the backward true closure of NODE2.")
    public static SubLObject sbhl_all_forward_true_nodes_between(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$902 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$903 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$904 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$903 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$904 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$904 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$905 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$905 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$905 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$906 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$907 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$906 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$906 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$915 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$916 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$908 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$907 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_closure_between(node1, node2);
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$907, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$908, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$916, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$915, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$906, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$906, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$907, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$906, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$905, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$905, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$905, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$904, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$904, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$903, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$904, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$903, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$902, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; The closure of NODE1 that intersects the closure of opposite direction of NODE2.
     */
    @LispMethod(comment = "@return listp; The closure of NODE1 that intersects the closure of opposite direction of NODE2.")
    public static final SubLObject sbhl_closure_between_alt(SubLObject node1, SubLObject node2) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                sbhl_marking_methods.sbhl_mark_closure_as_marked(node1);
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                        sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                        try {
                            {
                                SubLObject _prev_bind_0_908 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                try {
                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                                    sbhl_marking_methods.sbhl_unmark_marked_closure_and_gather(node2);
                                } finally {
                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_908, thread);
                                }
                            }
                        } finally {
                            {
                                SubLObject _prev_bind_0_909 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                } finally {
                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_909, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; The closure of NODE1 that intersects the closure of opposite direction of NODE2.
     */
    @LispMethod(comment = "@return listp; The closure of NODE1 that intersects the closure of opposite direction of NODE2.")
    public static SubLObject sbhl_closure_between(final SubLObject node1, final SubLObject node2) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        sbhl_marking_methods.sbhl_mark_closure_as_marked(node1);
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
            sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
            try {
                final SubLObject _prev_bind_0_$919 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                try {
                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                    sbhl_marking_methods.sbhl_unmark_marked_closure_and_gather(node2);
                } finally {
                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_$919, thread);
                }
            } finally {
                final SubLObject _prev_bind_0_$920 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values = getValuesAsVector();
                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                    restoreValuesFromVector(_values);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$920, thread);
                }
            }
        } finally {
            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; the subset of NODES in the forward true closure of NODE.
     */
    @LispMethod(comment = "@return listp; the subset of NODES in the forward true closure of NODE.")
    public static final SubLObject sbhl_all_forward_true_nodes_among_alt(SubLObject module, SubLObject node, SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                if (NIL != nodes) {
                    {
                        SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                        SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                        SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                        SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                        SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                            sbhl_module_vars.$sbhl_module$.bind(module, thread);
                            {
                                SubLObject mt_var = mt;
                                {
                                    SubLObject _prev_bind_0_910 = mt_relevance_macros.$mt$.currentBinding(thread);
                                    SubLObject _prev_bind_1_911 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                    SubLObject _prev_bind_2_912 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                    try {
                                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                        {
                                            SubLObject tv_var = tv;
                                            {
                                                SubLObject _prev_bind_0_913 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                SubLObject _prev_bind_1_914 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                    if (NIL != tv_var) {
                                                        if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                            if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                {
                                                                    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                    if (pcase_var.eql($ERROR)) {
                                                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($CERROR)) {
                                                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        } else {
                                                                            if (pcase_var.eql($WARN)) {
                                                                                Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                            } else {
                                                                                Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    {
                                                        SubLObject _prev_bind_0_915 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                        SubLObject _prev_bind_1_916 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                        SubLObject _prev_bind_2_917 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                            {
                                                                SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                                {
                                                                    SubLObject _prev_bind_0_918 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                        {
                                                                            SubLObject _prev_bind_0_919 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                                {
                                                                                    SubLObject _prev_bind_0_920 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_1_921 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_2_922 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_3_923 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_4_924 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                    try {
                                                                                        sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                        {
                                                                                            SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                            SubLObject needs_to_releaseP = NIL;
                                                                                            try {
                                                                                                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                                {
                                                                                                    SubLObject _prev_bind_0_925 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                    SubLObject _prev_bind_1_926 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                    try {
                                                                                                        sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                        sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                        result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_closure_among(node, nodes);
                                                                                                    } finally {
                                                                                                        sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_926, thread);
                                                                                                        sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_925, thread);
                                                                                                    }
                                                                                                }
                                                                                            } finally {
                                                                                                if (NIL != needs_to_releaseP) {
                                                                                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } finally {
                                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_924, thread);
                                                                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_923, thread);
                                                                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_922, thread);
                                                                                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_921, thread);
                                                                                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_920, thread);
                                                                                    }
                                                                                }
                                                                                if (source == $RESOURCE) {
                                                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                }
                                                                            } finally {
                                                                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_919, thread);
                                                                            }
                                                                        }
                                                                        if (source == $RESOURCE) {
                                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                        }
                                                                    } finally {
                                                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_918, thread);
                                                                    }
                                                                }
                                                            }
                                                        } finally {
                                                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_917, thread);
                                                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_916, thread);
                                                            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_915, thread);
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_914, thread);
                                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_913, thread);
                                                }
                                            }
                                        }
                                    } finally {
                                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_912, thread);
                                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_911, thread);
                                        mt_relevance_macros.$mt$.rebind(_prev_bind_0_910, thread);
                                    }
                                }
                            }
                        } finally {
                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; the subset of NODES in the forward true closure of NODE.
     */
    @LispMethod(comment = "@return listp; the subset of NODES in the forward true closure of NODE.")
    public static SubLObject sbhl_all_forward_true_nodes_among(final SubLObject module, final SubLObject node, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        if (NIL != nodes) {
            final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
            final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
            final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
            final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
            final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                sbhl_module_vars.$sbhl_module$.bind(module, thread);
                final SubLObject mt_var = mt;
                final SubLObject _prev_bind_0_$921 = mt_relevance_macros.$mt$.currentBinding(thread);
                final SubLObject _prev_bind_1_$922 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_2_$923 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                try {
                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                    final SubLObject tv_var = tv;
                    final SubLObject _prev_bind_0_$922 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$923 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                        if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                            final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                            if (pcase_var.eql($ERROR)) {
                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($CERROR)) {
                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                } else
                                    if (pcase_var.eql($WARN)) {
                                        Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                    } else {
                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                    }


                        }
                        final SubLObject _prev_bind_0_$923 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$924 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$924 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                            final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                            final SubLObject _prev_bind_0_$924 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$925 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                    final SubLObject _prev_bind_0_$926 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$925 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$925 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                    final SubLObject _prev_bind_3_$934 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                    final SubLObject _prev_bind_4_$935 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                        final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                        SubLObject needs_to_releaseP = NIL;
                                        try {
                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                            final SubLObject _prev_bind_0_$927 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$926 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                result = sbhl_closure_among(node, nodes);
                                            } finally {
                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$926, thread);
                                                sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$927, thread);
                                            }
                                        } finally {
                                            if (NIL != needs_to_releaseP) {
                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                            }
                                        }
                                    } finally {
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$935, thread);
                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$934, thread);
                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$925, thread);
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$925, thread);
                                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$926, thread);
                                    }
                                    if (source == $RESOURCE) {
                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                    }
                                } finally {
                                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$925, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$924, thread);
                            }
                        } finally {
                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$924, thread);
                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$924, thread);
                            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$923, thread);
                        }
                    } finally {
                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$923, thread);
                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$922, thread);
                    }
                } finally {
                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$923, thread);
                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$922, thread);
                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_$921, thread);
                }
            } finally {
                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
                sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
            }
        }
        return result;
    }

    /**
     *
     *
     * @return listp; the subset of NODES in the backward true closure of NODE.
     */
    @LispMethod(comment = "@return listp; the subset of NODES in the backward true closure of NODE.")
    public static final SubLObject sbhl_all_backward_true_nodes_among_alt(SubLObject module, SubLObject node, SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                if (NIL != nodes) {
                    if ((NIL != list_utilities.every_in_list(FORT_P, nodes, UNPROVIDED)) && apply($sym38$_, Mapping.mapcar(GENL_CARDINALITY, nodes)).numL(cardinality_estimates.spec_cardinality(node))) {
                        {
                            SubLObject cdolist_list_var = nodes;
                            SubLObject backward_node = NIL;
                            for (backward_node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , backward_node = cdolist_list_var.first()) {
                                if (NIL != com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_predicate_relation_p(module, backward_node, node, mt, tv)) {
                                    result = cons(backward_node, result);
                                }
                            }
                        }
                    } else {
                        {
                            SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                            SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                            SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                            SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                            SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                                sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                sbhl_module_vars.$sbhl_module$.bind(module, thread);
                                {
                                    SubLObject mt_var = mt;
                                    {
                                        SubLObject _prev_bind_0_927 = mt_relevance_macros.$mt$.currentBinding(thread);
                                        SubLObject _prev_bind_1_928 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                        SubLObject _prev_bind_2_929 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                        try {
                                            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                            {
                                                SubLObject tv_var = tv;
                                                {
                                                    SubLObject _prev_bind_0_930 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_931 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                        if (NIL != tv_var) {
                                                            if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                                if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                    {
                                                                        SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                        if (pcase_var.eql($ERROR)) {
                                                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        } else {
                                                                            if (pcase_var.eql($CERROR)) {
                                                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                            } else {
                                                                                if (pcase_var.eql($WARN)) {
                                                                                    Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                } else {
                                                                                    Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                    Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        {
                                                            SubLObject _prev_bind_0_932 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                            SubLObject _prev_bind_1_933 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                            SubLObject _prev_bind_2_934 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                            try {
                                                                sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                                {
                                                                    SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                                    {
                                                                        SubLObject _prev_bind_0_935 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_936 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                                    {
                                                                                        SubLObject _prev_bind_0_937 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_1_938 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_2_939 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_3_940 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                        SubLObject _prev_bind_4_941 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                            sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                            {
                                                                                                SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                                SubLObject needs_to_releaseP = NIL;
                                                                                                try {
                                                                                                    needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                                    {
                                                                                                        SubLObject _prev_bind_0_942 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                        SubLObject _prev_bind_1_943 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_closure_among(node, nodes);
                                                                                                        } finally {
                                                                                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_943, thread);
                                                                                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_942, thread);
                                                                                                        }
                                                                                                    }
                                                                                                } finally {
                                                                                                    if (NIL != needs_to_releaseP) {
                                                                                                        ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_941, thread);
                                                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_940, thread);
                                                                                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_939, thread);
                                                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_938, thread);
                                                                                            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_937, thread);
                                                                                        }
                                                                                    }
                                                                                    if (source == $RESOURCE) {
                                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_936, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_935, thread);
                                                                        }
                                                                    }
                                                                }
                                                            } finally {
                                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_934, thread);
                                                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_933, thread);
                                                                sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_932, thread);
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_931, thread);
                                                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_930, thread);
                                                    }
                                                }
                                            }
                                        } finally {
                                            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_929, thread);
                                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_928, thread);
                                            mt_relevance_macros.$mt$.rebind(_prev_bind_0_927, thread);
                                        }
                                    }
                                }
                            } finally {
                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                                sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                                sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                            }
                        }
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; the subset of NODES in the backward true closure of NODE.
     */
    @LispMethod(comment = "@return listp; the subset of NODES in the backward true closure of NODE.")
    public static SubLObject sbhl_all_backward_true_nodes_among(final SubLObject module, final SubLObject node, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        if (NIL != nodes) {
            if ((NIL != list_utilities.every_in_list(FORT_P, nodes, UNPROVIDED)) && apply($sym38$_, Mapping.mapcar(GENL_CARDINALITY, nodes)).numL(cardinality_estimates.spec_cardinality(node))) {
                SubLObject cdolist_list_var = nodes;
                SubLObject backward_node = NIL;
                backward_node = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    if (NIL != sbhl_predicate_relation_p(module, backward_node, node, mt, tv)) {
                        result = cons(backward_node, result);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    backward_node = cdolist_list_var.first();
                } 
            } else {
                final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                    sbhl_module_vars.$sbhl_module$.bind(module, thread);
                    final SubLObject mt_var = mt;
                    final SubLObject _prev_bind_0_$938 = mt_relevance_macros.$mt$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$939 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$940 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                        final SubLObject tv_var = tv;
                        final SubLObject _prev_bind_0_$939 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$940 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                            if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                                final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                if (pcase_var.eql($ERROR)) {
                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                } else
                                    if (pcase_var.eql($CERROR)) {
                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    } else
                                        if (pcase_var.eql($WARN)) {
                                            Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                        } else {
                                            Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                            Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                        }


                            }
                            final SubLObject _prev_bind_0_$940 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$941 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                            final SubLObject _prev_bind_2_$941 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                final SubLObject _prev_bind_0_$941 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                    final SubLObject _prev_bind_0_$942 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                        final SubLObject _prev_bind_0_$943 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$942 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$942 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$951 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$952 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                            sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                            final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                            SubLObject needs_to_releaseP = NIL;
                                            try {
                                                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                final SubLObject _prev_bind_0_$944 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                final SubLObject _prev_bind_1_$943 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                    result = sbhl_closure_among(node, nodes);
                                                } finally {
                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$943, thread);
                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$944, thread);
                                                }
                                            } finally {
                                                if (NIL != needs_to_releaseP) {
                                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                }
                                            }
                                        } finally {
                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$952, thread);
                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$951, thread);
                                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$942, thread);
                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$942, thread);
                                            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$943, thread);
                                        }
                                        if (source == $RESOURCE) {
                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                        }
                                    } finally {
                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$942, thread);
                                    }
                                    if (source == $RESOURCE) {
                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                    }
                                } finally {
                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$941, thread);
                                }
                            } finally {
                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$941, thread);
                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$941, thread);
                                sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$940, thread);
                            }
                        } finally {
                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$940, thread);
                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$939, thread);
                        }
                    } finally {
                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$940, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$939, thread);
                        mt_relevance_macros.$mt$.rebind(_prev_bind_0_$938, thread);
                    }
                } finally {
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                }
            }
        }
        return result;
    }

    /**
     *
     *
     * @return listp; the subset of NODES in the closure of NODE.
     */
    @LispMethod(comment = "@return listp; the subset of NODES in the closure of NODE.")
    public static final SubLObject sbhl_closure_among_alt(SubLObject node, SubLObject nodes) {
        {
            SubLObject result = NIL;
            if (NIL != nodes) {
                sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
                {
                    SubLObject cdolist_list_var = nodes;
                    SubLObject candidate = NIL;
                    for (candidate = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , candidate = cdolist_list_var.first()) {
                        if (NIL != sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(candidate)) {
                            result = cons(candidate, result);
                        }
                    }
                }
            }
            return result;
        }
    }

    /**
     *
     *
     * @return listp; the subset of NODES in the closure of NODE.
     */
    @LispMethod(comment = "@return listp; the subset of NODES in the closure of NODE.")
    public static SubLObject sbhl_closure_among(final SubLObject node, final SubLObject nodes) {
        SubLObject result = NIL;
        if (NIL != nodes) {
            sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
            SubLObject cdolist_list_var = nodes;
            SubLObject candidate = NIL;
            candidate = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(candidate)) {
                    result = cons(candidate, result);
                }
                cdolist_list_var = cdolist_list_var.rest();
                candidate = cdolist_list_var.first();
            } 
        }
        return result;
    }

    /**
     * Modifier. pushes all dependent nodes of NODE onto *sbhl-result*.
     */
    @LispMethod(comment = "Modifier. pushes all dependent nodes of NODE onto *sbhl-result*.")
    public static final SubLObject sbhl_gather_dependent_nodes_alt(SubLObject node) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            sbhl_search_utilities.sbhl_sweep(sbhl_module_vars.get_sbhl_module(UNPROVIDED), sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.get_sbhl_tv(), sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread), SBHL_PUSH_DEPENDENT_NODES_ONTO_RESULT, node, UNPROVIDED);
            return NIL;
        }
    }

    @LispMethod(comment = "Modifier. pushes all dependent nodes of NODE onto *sbhl-result*.")
    public static SubLObject sbhl_gather_dependent_nodes(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        sbhl_search_utilities.sbhl_sweep(sbhl_module_vars.get_sbhl_module(UNPROVIDED), sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.get_sbhl_tv(), sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread), SBHL_PUSH_DEPENDENT_NODES_ONTO_RESULT, node, UNPROVIDED);
        return NIL;
    }/**
     * Modifier. pushes all dependent nodes of NODE onto *sbhl-result*.
     */


    /**
     * Modifier. Determines if NODE is a dependent node, and if so, pushes it onto *sbhl-result*.
     */
    @LispMethod(comment = "Modifier. Determines if NODE is a dependent node, and if so, pushes it onto *sbhl-result*.")
    public static final SubLObject sbhl_push_dependent_nodes_onto_result_alt(SubLObject node) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            sbhl_search_vars.sbhl_continue_search_path();
            {
                SubLObject dependentP = NIL;
                if (NIL == sbhl_search_vars.sbhl_dependents_cut_node_p(node)) {
                    {
                        SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                            try {
                                {
                                    SubLObject _prev_bind_0_944 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                        sbhl_search_utilities.sbhl_sweep(sbhl_module_vars.get_sbhl_module(UNPROVIDED), sbhl_link_vars.get_sbhl_opposite_link_direction(), sbhl_search_vars.get_sbhl_tv(), sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread), SBHL_CHECK_TARGET_MARKING_FOR_DEPENDENCE, node, UNPROVIDED);
                                    } finally {
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1, thread);
                                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_944, thread);
                                    }
                                }
                            } finally {
                                {
                                    SubLObject _prev_bind_0_945 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                        dependentP = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                    } finally {
                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_945, thread);
                                    }
                                }
                            }
                        } finally {
                            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
                if (NIL != dependentP) {
                    sbhl_search_vars.sbhl_stop_search_path();
                } else {
                    sbhl_search_vars.$sbhl_result$.setDynamicValue(cons(node, sbhl_search_vars.$sbhl_result$.getDynamicValue(thread)), thread);
                }
            }
            return NIL;
        }
    }

    @LispMethod(comment = "Modifier. Determines if NODE is a dependent node, and if so, pushes it onto *sbhl-result*.")
    public static SubLObject sbhl_push_dependent_nodes_onto_result(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        sbhl_search_vars.sbhl_continue_search_path();
        SubLObject dependentP = NIL;
        if (NIL == sbhl_search_vars.sbhl_dependents_cut_node_p(node)) {
            final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                try {
                    final SubLObject _prev_bind_0_$955 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                        sbhl_search_utilities.sbhl_sweep(sbhl_module_vars.get_sbhl_module(UNPROVIDED), sbhl_link_vars.get_sbhl_opposite_link_direction(), sbhl_search_vars.get_sbhl_tv(), sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread), SBHL_CHECK_TARGET_MARKING_FOR_DEPENDENCE, node, UNPROVIDED);
                    } finally {
                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$955, thread);
                    }
                } finally {
                    final SubLObject _prev_bind_0_$956 = $is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        $is_thread_performing_cleanupP$.bind(T, thread);
                        final SubLObject _values = getValuesAsVector();
                        dependentP = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                        restoreValuesFromVector(_values);
                    } finally {
                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$956, thread);
                    }
                }
            } finally {
                sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_0, thread);
            }
        }
        if (NIL != dependentP) {
            sbhl_search_vars.sbhl_stop_search_path();
        } else {
            sbhl_search_vars.$sbhl_result$.setDynamicValue(cons(node, sbhl_search_vars.$sbhl_result$.getDynamicValue(thread)), thread);
        }
        return NIL;
    }/**
     * Modifier. Determines if NODE is a dependent node, and if so, pushes it onto *sbhl-result*.
     */


    /**
     * Checks whether NODE indicates that search has found a dependence relation or has found the original cut node.
     */
    @LispMethod(comment = "Checks whether NODE indicates that search has found a dependence relation or has found the original cut node.")
    public static final SubLObject sbhl_check_target_marking_for_dependence_alt(SubLObject node) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            sbhl_search_vars.sbhl_continue_search_path();
            if (NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread))) {
                sbhl_search_vars.$sbhl_result$.setDynamicValue(T, thread);
                sbhl_search_vars.$sbhl_finishedP$.setDynamicValue(T, thread);
            } else {
                if (NIL != sbhl_search_vars.sbhl_dependents_cut_node_p(node)) {
                    sbhl_search_vars.sbhl_stop_search_path();
                }
            }
            return NIL;
        }
    }

    @LispMethod(comment = "Checks whether NODE indicates that search has found a dependence relation or has found the original cut node.")
    public static SubLObject sbhl_check_target_marking_for_dependence(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        sbhl_search_vars.sbhl_continue_search_path();
        if (NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread))) {
            sbhl_search_vars.$sbhl_result$.setDynamicValue(T, thread);
            sbhl_search_vars.$sbhl_finishedP$.setDynamicValue(T, thread);
        } else
            if (NIL != sbhl_search_vars.sbhl_dependents_cut_node_p(node)) {
                sbhl_search_vars.sbhl_stop_search_path();
            }

        return NIL;
    }/**
     * Checks whether NODE indicates that search has found a dependence relation or has found the original cut node.
     */


    /**
     *
     *
     * @return listp; The dependent closure of NODE s.t. every node in the dependent closure must pass through NODE to access any nodes in the closure of the opposite direction.
     */
    @LispMethod(comment = "@return listp; The dependent closure of NODE s.t. every node in the dependent closure must pass through NODE to access any nodes in the closure of the opposite direction.")
    public static final SubLObject sbhl_dependent_nodes_alt(SubLObject node) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        {
                            SubLObject _prev_bind_0_946 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                                {
                                    SubLObject _prev_bind_0_947 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                    try {
                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                                        sbhl_marking_methods.sbhl_mark_proper_closure_as_marked(node);
                                    } finally {
                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_947, thread);
                                    }
                                }
                                if (NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, UNPROVIDED)) {
                                    sbhl_marking_methods.sbhl_unmark_marked_closure(node);
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_946, thread);
                            }
                        }
                        {
                            SubLObject _prev_bind_0_948 = sbhl_search_vars.$sbhl_dependents_cut_node$.currentBinding(thread);
                            SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_dependents_cut_node$.bind(node, thread);
                                sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                                try {
                                    com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_gather_dependent_nodes(node);
                                } finally {
                                    {
                                        SubLObject _prev_bind_0_949 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            $is_thread_performing_cleanupP$.bind(T, thread);
                                            result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                        } finally {
                                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_949, thread);
                                        }
                                    }
                                }
                            } finally {
                                sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_1, thread);
                                sbhl_search_vars.$sbhl_dependents_cut_node$.rebind(_prev_bind_0_948, thread);
                            }
                        }
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    } finally {
                        sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; The dependent closure of NODE s.t. every node in the dependent closure must pass through NODE to access any nodes in the closure of the opposite direction.
     */
    @LispMethod(comment = "@return listp; The dependent closure of NODE s.t. every node in the dependent closure must pass through NODE to access any nodes in the closure of the opposite direction.")
    public static SubLObject sbhl_dependent_nodes(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
        try {
            sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                final SubLObject _prev_bind_0_$957 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                    final SubLObject _prev_bind_0_$958 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                        sbhl_marking_methods.sbhl_mark_proper_closure_as_marked(node);
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_$958, thread);
                    }
                    if (NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, UNPROVIDED)) {
                        sbhl_marking_methods.sbhl_unmark_marked_closure(node);
                    }
                } finally {
                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$957, thread);
                }
                final SubLObject _prev_bind_0_$959 = sbhl_search_vars.$sbhl_dependents_cut_node$.currentBinding(thread);
                final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_dependents_cut_node$.bind(node, thread);
                    sbhl_search_vars.$sbhl_result$.bind(NIL, thread);
                    try {
                        sbhl_gather_dependent_nodes(node);
                    } finally {
                        final SubLObject _prev_bind_0_$960 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$960, thread);
                        }
                    }
                } finally {
                    sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_dependents_cut_node$.rebind(_prev_bind_0_$959, thread);
                }
            } finally {
                final SubLObject _prev_bind_0_$961 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$961, thread);
                }
            }
        } finally {
            sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return listp; The backward dependent closure of NODE s.t. every node in that closure must pass through NODE to access any node in NODE's forward closure.
     */
    @LispMethod(comment = "@return listp; The backward dependent closure of NODE s.t. every node in that closure must pass through NODE to access any node in NODE\'s forward closure.")
    public static final SubLObject sbhl_all_dependent_backward_true_nodes_alt(SubLObject module, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_950 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_951 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_952 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_953 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_954 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_955 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_956 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_957 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_958 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_959 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_960 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_961 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_962 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_963 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_964 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            {
                                                                                                SubLObject _prev_bind_0_965 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                                                                SubLObject _prev_bind_1_966 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                                                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_dependent_nodes(node);
                                                                                                } finally {
                                                                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_966, thread);
                                                                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_965, thread);
                                                                                                }
                                                                                            }
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_964, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_963, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_962, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_961, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_960, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_959, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_958, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_957, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_956, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_955, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_954, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_953, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_952, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_951, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_950, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return listp; The backward dependent closure of NODE s.t. every node in that closure must pass through NODE to access any node in NODE's forward closure.
     */
    @LispMethod(comment = "@return listp; The backward dependent closure of NODE s.t. every node in that closure must pass through NODE to access any node in NODE\'s forward closure.")
    public static SubLObject sbhl_all_dependent_backward_true_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$962 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$963 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$964 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$963 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$964 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$964 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$965 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$965 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$965 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$966 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$967 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$966 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$966 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$975 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$976 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$968 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$967 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_dependent_nodes(node);
                                        } finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$967, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$968, thread);
                                        }
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$976, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$975, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$966, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$966, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$967, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$966, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$965, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$965, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$965, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$964, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$964, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$963, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$964, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$963, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$962, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path from NODE1 to NODE2.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path from NODE1 to NODE2.")
    public static final SubLObject sbhl_predicate_relation_p_alt(SubLObject module, SubLObject node1, SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject pred = sbhl_module_vars.get_sbhl_module_link_pred(module);
                SubLObject result = NIL;
                if (NIL != sbhl_cache.sbhl_cache_use_possible_p(pred, node1, node2)) {
                    {
                        SubLObject mt_var = mt;
                        {
                            SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                            SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                result = sbhl_cache.sbhl_cached_predicate_relation_p(pred, node1, node2, UNPROVIDED);
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                            }
                        }
                    }
                } else {
                    {
                        SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                        SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                        SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                        SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                        SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                            sbhl_module_vars.$sbhl_module$.bind(module, thread);
                            {
                                SubLObject mt_var = mt;
                                {
                                    SubLObject _prev_bind_0_967 = mt_relevance_macros.$mt$.currentBinding(thread);
                                    SubLObject _prev_bind_1_968 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                    SubLObject _prev_bind_2_969 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                    try {
                                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                        {
                                            SubLObject tv_var = tv;
                                            {
                                                SubLObject _prev_bind_0_970 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                SubLObject _prev_bind_1_971 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                    if (NIL != tv_var) {
                                                        if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                            if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                {
                                                                    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                    if (pcase_var.eql($ERROR)) {
                                                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($CERROR)) {
                                                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        } else {
                                                                            if (pcase_var.eql($WARN)) {
                                                                                Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                            } else {
                                                                                Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    {
                                                        SubLObject _prev_bind_0_972 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                        SubLObject _prev_bind_1_973 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                        SubLObject _prev_bind_2_974 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                            {
                                                                SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                                {
                                                                    SubLObject _prev_bind_0_975 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                        {
                                                                            SubLObject _prev_bind_0_976 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                                {
                                                                                    SubLObject _prev_bind_0_977 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_1_978 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_2_979 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_3_980 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_4_981 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                    try {
                                                                                        sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                        {
                                                                                            SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                            SubLObject needs_to_releaseP = NIL;
                                                                                            try {
                                                                                                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                                result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_node_to_node_p(node1, node2);
                                                                                            } finally {
                                                                                                if (NIL != needs_to_releaseP) {
                                                                                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } finally {
                                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_981, thread);
                                                                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_980, thread);
                                                                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_979, thread);
                                                                                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_978, thread);
                                                                                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_977, thread);
                                                                                    }
                                                                                }
                                                                                if (source == $RESOURCE) {
                                                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                }
                                                                            } finally {
                                                                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_976, thread);
                                                                            }
                                                                        }
                                                                        if (source == $RESOURCE) {
                                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                        }
                                                                    } finally {
                                                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_975, thread);
                                                                    }
                                                                }
                                                            }
                                                        } finally {
                                                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_974, thread);
                                                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_973, thread);
                                                            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_972, thread);
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_971, thread);
                                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_970, thread);
                                                }
                                            }
                                        }
                                    } finally {
                                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_969, thread);
                                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_968, thread);
                                        mt_relevance_macros.$mt$.rebind(_prev_bind_0_967, thread);
                                    }
                                }
                            }
                        } finally {
                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path from NODE1 to NODE2.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path from NODE1 to NODE2.")
    public static SubLObject sbhl_predicate_relation_p(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject pred = sbhl_module_vars.get_sbhl_module_link_pred(module);
        SubLObject result = NIL;
        if (NIL != sbhl_cache.sbhl_cache_use_possible_p(pred, node1, node2)) {
            final SubLObject mt_var = mt;
            SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                result = sbhl_cache.sbhl_cached_predicate_relation_p(pred, node1, node2, UNPROVIDED);
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
            }
            if (NIL != $debug_sbhl_cache_inconsistency_problemP$.getDynamicValue(thread)) {
                SubLObject non_cached_result = NIL;
                _prev_bind_0 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                    try {
                        final SubLObject _prev_bind_0_$979 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                        final SubLObject _prev_bind_5 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                        final SubLObject _prev_bind_6 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                        final SubLObject _prev_bind_7 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                            sbhl_module_vars.$sbhl_module$.bind(module, thread);
                            final SubLObject mt_var2 = mt;
                            final SubLObject _prev_bind_0_$980 = mt_relevance_macros.$mt$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$981 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            final SubLObject _prev_bind_2_$982 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var2), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var2), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var2), thread);
                                final SubLObject tv_var = tv;
                                final SubLObject _prev_bind_0_$981 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$982 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                        if (pcase_var.eql($ERROR)) {
                                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        } else
                                            if (pcase_var.eql($CERROR)) {
                                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            } else
                                                if (pcase_var.eql($WARN)) {
                                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                } else {
                                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                }


                                    }
                                    final SubLObject _prev_bind_0_$982 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$983 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$983 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                        final SubLObject _prev_bind_0_$983 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                        try {
                                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                            final SubLObject _prev_bind_0_$984 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                            try {
                                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                final SubLObject _prev_bind_0_$985 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                final SubLObject _prev_bind_1_$984 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                final SubLObject _prev_bind_2_$984 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                final SubLObject _prev_bind_3_$993 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                final SubLObject _prev_bind_4_$994 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                    SubLObject needs_to_releaseP = NIL;
                                                    try {
                                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                        non_cached_result = sbhl_path_from_node_to_node_p(node1, node2);
                                                    } finally {
                                                        if (NIL != needs_to_releaseP) {
                                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$994, thread);
                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$993, thread);
                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$984, thread);
                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$984, thread);
                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$985, thread);
                                                }
                                                if (source == $RESOURCE) {
                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                }
                                            } finally {
                                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$984, thread);
                                            }
                                            if (source == $RESOURCE) {
                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                            }
                                        } finally {
                                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$983, thread);
                                        }
                                    } finally {
                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$983, thread);
                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$983, thread);
                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$982, thread);
                                    }
                                } finally {
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$982, thread);
                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$981, thread);
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$982, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$981, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$980, thread);
                            }
                        } finally {
                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_7, thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_6, thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_5, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_4, thread);
                            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$979, thread);
                        }
                    } finally {
                        final SubLObject _prev_bind_0_$986 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$986, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0, thread);
                }
                if (!result.equal(non_cached_result)) {
                    format(T, $str42$__sbhl_predicate_relation_p__cach, result, non_cached_result);
                    format(T, $str43$_______cached___S__clet__cached_r, new SubLObject[]{ result, mt, pred, node1, node2 });
                    format(T, $str44$___non_cached___S__clet__non_cach, new SubLObject[]{ non_cached_result, pred, mt, tv, node1, node2 });
                }
            }
        } else {
            final SubLObject _prev_bind_8 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
            try {
                sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                try {
                    final SubLObject _prev_bind_0_$987 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    final SubLObject _prev_bind_9 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    final SubLObject _prev_bind_10 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        final SubLObject mt_var3 = mt;
                        final SubLObject _prev_bind_0_$988 = mt_relevance_macros.$mt$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$985 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$985 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                        try {
                            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var3), thread);
                            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var3), thread);
                            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var3), thread);
                            final SubLObject tv_var2 = tv;
                            final SubLObject _prev_bind_0_$989 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$986 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var2 ? tv_var2 : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var2 ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                if (((NIL != tv_var2) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var2))) {
                                    final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                    if (pcase_var2.eql($ERROR)) {
                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var2, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    } else
                                        if (pcase_var2.eql($CERROR)) {
                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var2, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        } else
                                            if (pcase_var2.eql($WARN)) {
                                                Errors.warn($str3$_A_is_not_a__A, tv_var2, SBHL_TRUE_TV_P);
                                            } else {
                                                Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var2, SBHL_TRUE_TV_P);
                                            }


                                }
                                final SubLObject _prev_bind_0_$990 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$987 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$986 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                    final SubLObject source2 = sbhl_marking_vars.sbhl_new_space_source();
                                    final SubLObject _prev_bind_0_$991 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_space$.bind(source2 == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source2), thread);
                                        final SubLObject _prev_bind_0_$992 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                        try {
                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source2 == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source2), thread);
                                            final SubLObject _prev_bind_0_$993 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$988 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                            final SubLObject _prev_bind_2_$987 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                            final SubLObject _prev_bind_3_$994 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                            final SubLObject _prev_bind_4_$995 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                final SubLObject rw_lock_var2 = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                SubLObject needs_to_releaseP2 = NIL;
                                                try {
                                                    needs_to_releaseP2 = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var2);
                                                    result = sbhl_path_from_node_to_node_p(node1, node2);
                                                } finally {
                                                    if (NIL != needs_to_releaseP2) {
                                                        ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var2);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$995, thread);
                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$994, thread);
                                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$987, thread);
                                                sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$988, thread);
                                                sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$993, thread);
                                            }
                                            if (source2 == $RESOURCE) {
                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                            }
                                        } finally {
                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$992, thread);
                                        }
                                        if (source2 == $RESOURCE) {
                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                        }
                                    } finally {
                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$991, thread);
                                    }
                                } finally {
                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$986, thread);
                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$987, thread);
                                    sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$990, thread);
                                }
                            } finally {
                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$986, thread);
                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$989, thread);
                            }
                        } finally {
                            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$985, thread);
                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$985, thread);
                            mt_relevance_macros.$mt$.rebind(_prev_bind_0_$988, thread);
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_10, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_9, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$987, thread);
                    }
                } finally {
                    final SubLObject _prev_bind_0_$994 = $is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        $is_thread_performing_cleanupP$.bind(T, thread);
                        final SubLObject _values2 = getValuesAsVector();
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                        restoreValuesFromVector(_values2);
                    } finally {
                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$994, thread);
                    }
                }
            } finally {
                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_8, thread);
            }
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; Binds *sbhl-space* to SPACE and *sbhl-gather-space* to GATHER-SPACE and determines whether there is a forward true path from NODE to GOAL.
     */
    @LispMethod(comment = "@return booleanp; Binds *sbhl-space* to SPACE and *sbhl-gather-space* to GATHER-SPACE and determines whether there is a forward true path from NODE to GOAL.")
    public static final SubLObject sbhl_predicate_relation_in_space_p_alt(SubLObject module, SubLObject node, SubLObject goal, SubLObject space, SubLObject gather_space) {
        if (space == UNPROVIDED) {
            space = sbhl_marking_vars.$sbhl_space$.getDynamicValue();
        }
        if (gather_space == UNPROVIDED) {
            gather_space = sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue();
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    SubLObject _prev_bind_5 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                    SubLObject _prev_bind_6 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                    SubLObject _prev_bind_7 = sbhl_marking_vars.$sbhl_suspend_new_spacesP$.currentBinding(thread);
                    SubLObject _prev_bind_8 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    SubLObject _prev_bind_9 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    SubLObject _prev_bind_10 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        sbhl_marking_vars.$sbhl_space$.bind(space, thread);
                        sbhl_marking_vars.$sbhl_gather_space$.bind(gather_space, thread);
                        sbhl_marking_vars.$sbhl_suspend_new_spacesP$.bind(T, thread);
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        {
                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                            {
                                SubLObject _prev_bind_0_982 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                    {
                                        SubLObject _prev_bind_0_983 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                        try {
                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                            {
                                                SubLObject _prev_bind_0_984 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                SubLObject _prev_bind_1_985 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                SubLObject _prev_bind_2_986 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                SubLObject _prev_bind_3_987 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                SubLObject _prev_bind_4_988 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                    {
                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                        SubLObject needs_to_releaseP = NIL;
                                                        try {
                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_node_to_node_p(node, goal);
                                                        } finally {
                                                            if (NIL != needs_to_releaseP) {
                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_988, thread);
                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_987, thread);
                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_986, thread);
                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_985, thread);
                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_984, thread);
                                                }
                                            }
                                            if (source == $RESOURCE) {
                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                            }
                                        } finally {
                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_983, thread);
                                        }
                                    }
                                    if (source == $RESOURCE) {
                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                    }
                                } finally {
                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_982, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_10, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_9, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_8, thread);
                        sbhl_marking_vars.$sbhl_suspend_new_spacesP$.rebind(_prev_bind_7, thread);
                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_6, thread);
                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_5, thread);
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; Binds *sbhl-space* to SPACE and *sbhl-gather-space* to GATHER-SPACE and determines whether there is a forward true path from NODE to GOAL.
     */
    @LispMethod(comment = "@return booleanp; Binds *sbhl-space* to SPACE and *sbhl-gather-space* to GATHER-SPACE and determines whether there is a forward true path from NODE to GOAL.")
    public static SubLObject sbhl_predicate_relation_in_space_p(final SubLObject module, final SubLObject node, final SubLObject goal, SubLObject space, SubLObject gather_space) {
        if (space == UNPROVIDED) {
            space = sbhl_marking_vars.$sbhl_space$.getDynamicValue();
        }
        if (gather_space == UNPROVIDED) {
            gather_space = sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_6 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
        final SubLObject _prev_bind_7 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        final SubLObject _prev_bind_8 = sbhl_marking_vars.$sbhl_suspend_new_spacesP$.currentBinding(thread);
        final SubLObject _prev_bind_9 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
        final SubLObject _prev_bind_10 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
        final SubLObject _prev_bind_11 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            sbhl_marking_vars.$sbhl_space$.bind(space, thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(gather_space, thread);
            sbhl_marking_vars.$sbhl_suspend_new_spacesP$.bind(T, thread);
            sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
            final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
            final SubLObject _prev_bind_0_$1013 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
            try {
                sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                final SubLObject _prev_bind_0_$1014 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                    final SubLObject _prev_bind_0_$1015 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1016 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1017 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                    final SubLObject _prev_bind_3_$1018 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                    final SubLObject _prev_bind_4_$1019 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                        sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                        SubLObject needs_to_releaseP = NIL;
                        try {
                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                            result = sbhl_path_from_node_to_node_p(node, goal);
                        } finally {
                            if (NIL != needs_to_releaseP) {
                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                            }
                        }
                    } finally {
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1019, thread);
                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1018, thread);
                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1017, thread);
                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1016, thread);
                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1015, thread);
                    }
                    if (source == $RESOURCE) {
                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    }
                } finally {
                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1014, thread);
                }
                if (source == $RESOURCE) {
                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                }
            } finally {
                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1013, thread);
            }
        } finally {
            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_11, thread);
            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_10, thread);
            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_9, thread);
            sbhl_marking_vars.$sbhl_suspend_new_spacesP$.rebind(_prev_bind_8, thread);
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_7, thread);
            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_6, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; ensures no justification is done within @see sbhl-predicate-relation-p, and ensures that a new sbhl space is used
     */
    @LispMethod(comment = "@return booleanp; ensures no justification is done within @see sbhl-predicate-relation-p, and ensures that a new sbhl space is used")
    public static final SubLObject sbhl_non_justifying_predicate_relation_p_alt(SubLObject module, SubLObject node1, SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_justification_search_p$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_apply_unwind_function_p$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_paranoia.$suspend_sbhl_cache_useP$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_suspend_new_spacesP$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_justification_search_p$.bind(NIL, thread);
                        sbhl_search_vars.$sbhl_apply_unwind_function_p$.bind(NIL, thread);
                        sbhl_paranoia.$suspend_sbhl_cache_useP$.bind(NIL, thread);
                        sbhl_marking_vars.$sbhl_suspend_new_spacesP$.bind(NIL, thread);
                        result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_predicate_relation_p(module, node1, node2, mt, tv);
                    } finally {
                        sbhl_marking_vars.$sbhl_suspend_new_spacesP$.rebind(_prev_bind_3, thread);
                        sbhl_paranoia.$suspend_sbhl_cache_useP$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_apply_unwind_function_p$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_justification_search_p$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; ensures no justification is done within @see sbhl-predicate-relation-p, and ensures that a new sbhl space is used
     */
    @LispMethod(comment = "@return booleanp; ensures no justification is done within @see sbhl-predicate-relation-p, and ensures that a new sbhl space is used")
    public static SubLObject sbhl_non_justifying_predicate_relation_p(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_justification_search_p$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_apply_unwind_function_p$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_suspend_new_spacesP$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_justification_search_p$.bind(NIL, thread);
            sbhl_search_vars.$sbhl_apply_unwind_function_p$.bind(NIL, thread);
            sbhl_marking_vars.$sbhl_suspend_new_spacesP$.bind(NIL, thread);
            result = sbhl_predicate_relation_p(module, node1, node2, mt, tv);
        } finally {
            sbhl_marking_vars.$sbhl_suspend_new_spacesP$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_apply_unwind_function_p$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_justification_search_p$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether GOAL is accessible to NODE via MODULE. Used in repeated searches, with previous failures (and current marking) in FAIL-SPACE, and successful paths noted in GOAL-SPACE.
     */
    @LispMethod(comment = "@return booleanp; whether GOAL is accessible to NODE via MODULE. Used in repeated searches, with previous failures (and current marking) in FAIL-SPACE, and successful paths noted in GOAL-SPACE.")
    public static final SubLObject sbhl_predicate_relation_within_multiple_searches_p_alt(SubLObject module, SubLObject node, SubLObject goal, SubLObject fail_space, SubLObject goal_space) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_precomputed_goal_space$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_suspend_new_spacesP$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_5 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_6 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_7 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_precomputed_goal_space$.bind(goal_space, thread);
                        sbhl_marking_vars.$sbhl_space$.bind(fail_space, thread);
                        sbhl_marking_vars.$sbhl_suspend_new_spacesP$.bind(T, thread);
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject _prev_bind_0_989 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                            SubLObject _prev_bind_1_990 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                            SubLObject _prev_bind_2_991 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                {
                                    SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                    {
                                        SubLObject _prev_bind_0_992 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                        try {
                                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                            {
                                                SubLObject _prev_bind_0_993 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                try {
                                                    sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                    {
                                                        SubLObject _prev_bind_0_994 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                        SubLObject _prev_bind_1_995 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                        SubLObject _prev_bind_2_996 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                        SubLObject _prev_bind_3_997 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                        SubLObject _prev_bind_4_998 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                            sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                            {
                                                                SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                SubLObject needs_to_releaseP = NIL;
                                                                try {
                                                                    needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                    {
                                                                        SubLObject _prev_bind_0_999 = sbhl_search_vars.$sbhl_check_for_goal_marking_p$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_search_vars.$sbhl_check_for_goal_marking_p$.bind(T, thread);
                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_node_to_node_p(node, goal);
                                                                        } finally {
                                                                            sbhl_search_vars.$sbhl_check_for_goal_marking_p$.rebind(_prev_bind_0_999, thread);
                                                                        }
                                                                    }
                                                                } finally {
                                                                    if (NIL != needs_to_releaseP) {
                                                                        ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                    }
                                                                }
                                                            }
                                                        } finally {
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_998, thread);
                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_997, thread);
                                                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_996, thread);
                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_995, thread);
                                                            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_994, thread);
                                                        }
                                                    }
                                                    if (source == $RESOURCE) {
                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                    }
                                                } finally {
                                                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_993, thread);
                                                }
                                            }
                                            if (source == $RESOURCE) {
                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                            }
                                        } finally {
                                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_992, thread);
                                        }
                                    }
                                }
                            } finally {
                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_991, thread);
                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_990, thread);
                                sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_989, thread);
                            }
                        }
                        if (NIL != result) {
                            if ((NIL != sbhl_link_vars.sbhl_node_object_p(result)) && (NIL != sbhl_marking_utilities.sbhl_node_marked_precompute_goal_p(result))) {
                                sbhl_marking_utilities.sbhl_mark_node_marked(result, fail_space);
                            }
                            sbhl_marking_methods.sbhl_unmark_all_backward_true_nodes_and_map(SBHL_MARK_NODE_IN_PRECOMPUTE_SPACE, goal);
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_7, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_6, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_5, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_3, thread);
                        sbhl_marking_vars.$sbhl_suspend_new_spacesP$.rebind(_prev_bind_2, thread);
                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_precomputed_goal_space$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether GOAL is accessible to NODE via MODULE. Used in repeated searches, with previous failures (and current marking) in FAIL-SPACE, and successful paths noted in GOAL-SPACE.
     */
    @LispMethod(comment = "@return booleanp; whether GOAL is accessible to NODE via MODULE. Used in repeated searches, with previous failures (and current marking) in FAIL-SPACE, and successful paths noted in GOAL-SPACE.")
    public static SubLObject sbhl_predicate_relation_within_multiple_searches_p(final SubLObject module, final SubLObject node, final SubLObject goal, final SubLObject fail_space, final SubLObject goal_space) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_precomputed_goal_space$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_suspend_new_spacesP$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_7 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_8 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_precomputed_goal_space$.bind(goal_space, thread);
            sbhl_marking_vars.$sbhl_space$.bind(fail_space, thread);
            sbhl_marking_vars.$sbhl_suspend_new_spacesP$.bind(T, thread);
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject _prev_bind_0_$1020 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1021 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1022 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                final SubLObject _prev_bind_0_$1021 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                    final SubLObject _prev_bind_0_$1022 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                        final SubLObject _prev_bind_0_$1023 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$1022 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$1023 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                        final SubLObject _prev_bind_3_$1028 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                        final SubLObject _prev_bind_4_$1029 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                            sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                            final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                            SubLObject needs_to_releaseP = NIL;
                            try {
                                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                final SubLObject _prev_bind_0_$1024 = sbhl_search_vars.$sbhl_check_for_goal_marking_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_check_for_goal_marking_p$.bind(T, thread);
                                    result = sbhl_path_from_node_to_node_p(node, goal);
                                } finally {
                                    sbhl_search_vars.$sbhl_check_for_goal_marking_p$.rebind(_prev_bind_0_$1024, thread);
                                }
                            } finally {
                                if (NIL != needs_to_releaseP) {
                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                }
                            }
                        } finally {
                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1029, thread);
                            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1028, thread);
                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1023, thread);
                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1022, thread);
                            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1023, thread);
                        }
                        if (source == $RESOURCE) {
                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1022, thread);
                    }
                    if (source == $RESOURCE) {
                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                    }
                } finally {
                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1021, thread);
                }
            } finally {
                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1022, thread);
                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1021, thread);
                sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1020, thread);
            }
            if (NIL != result) {
                if ((NIL != sbhl_link_vars.sbhl_node_object_p(result)) && (NIL != sbhl_marking_utilities.sbhl_node_marked_precompute_goal_p(result))) {
                    sbhl_marking_utilities.sbhl_mark_node_marked(result, fail_space);
                }
                sbhl_marking_methods.sbhl_unmark_all_backward_true_nodes_and_map(SBHL_MARK_NODE_IN_PRECOMPUTE_SPACE, goal);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_8, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_7, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_6, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_4, thread);
            sbhl_marking_vars.$sbhl_suspend_new_spacesP$.rebind(_prev_bind_3, thread);
            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_precomputed_goal_space$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there is a backward true path from NODE1 to NODE2.
     */
    @LispMethod(comment = "@return booleanp; whether there is a backward true path from NODE1 to NODE2.")
    public static final SubLObject sbhl_inverse_relation_p_alt(SubLObject module, SubLObject node1, SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_1000 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_1001 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_1002 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_1003 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_1004 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_1005 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_1006 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_1007 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_1008 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_1009 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_1010 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_1011 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_1012 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_1013 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_1014 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_node_to_node_p(node1, node2);
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_1014, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_1013, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_1012, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_1011, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_1010, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_1009, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_1008, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_1007, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_1006, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_1005, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_1004, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_1003, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_1002, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_1001, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_1000, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a backward true path from NODE1 to NODE2.
     */
    @LispMethod(comment = "@return booleanp; whether there is a backward true path from NODE1 to NODE2.")
    public static SubLObject sbhl_inverse_relation_p(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1031 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1032 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1033 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1032 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1033 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$1033 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1034 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1034 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1034 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1035 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1036 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1035 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1035 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1044 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1045 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_node_to_node_p(node1, node2);
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1045, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1044, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1035, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1035, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1036, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1035, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1034, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1034, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1034, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1033, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1033, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1032, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1033, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1032, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1031, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path from NODE1 to NODE2.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path from NODE1 to NODE2.")
    public static final SubLObject sbhl_false_predicate_relation_p_alt(SubLObject module, SubLObject node1, SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_1015 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_1016 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_1017 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_1018 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_1019 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_false_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_1020 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_1021 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_1022 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_1023 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_1024 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_1025 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_1026 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_1027 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_1028 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_1029 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_node_to_node_p(node1, node2);
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_1029, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_1028, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_1027, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_1026, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_1025, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_1024, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_1023, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_1022, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_1021, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_1020, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_1019, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_1018, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_1017, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_1016, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_1015, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path from NODE1 to NODE2.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path from NODE1 to NODE2.")
    public static SubLObject sbhl_false_predicate_relation_p(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = $sbhl_search_self_incompatibility_check_disabledP$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_6 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            $sbhl_search_self_incompatibility_check_disabledP$.bind(incompatible_mt_related_moduleP(module), thread);
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1046 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1047 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1048 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1047 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1048 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$1048 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1049 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1049 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1049 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1050 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1051 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1050 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1050 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1059 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1060 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_node_to_node_p(node1, node2);
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1060, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1059, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1050, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1050, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1051, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1050, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1049, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1049, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1049, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1048, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1048, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1047, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1048, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1047, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1046, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_6, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_2, thread);
            $sbhl_search_self_incompatibility_check_disabledP$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there is a backward true path from NODE1 to NODE2.
     */
    @LispMethod(comment = "@return booleanp; whether there is a backward true path from NODE1 to NODE2.")
    public static final SubLObject sbhl_false_inverse_relation_p_alt(SubLObject module, SubLObject node1, SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_1030 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_1031 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_1032 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_1033 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_1034 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_false_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_1035 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_1036 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_1037 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_1038 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_1039 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_1040 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_1041 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_1042 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_1043 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_1044 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_node_to_node_p(node1, node2);
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_1044, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_1043, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_1042, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_1041, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_1040, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_1039, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_1038, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_1037, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_1036, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_1035, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_1034, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_1033, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_1032, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_1031, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_1030, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a backward true path from NODE1 to NODE2.
     */
    @LispMethod(comment = "@return booleanp; whether there is a backward true path from NODE1 to NODE2.")
    public static SubLObject sbhl_false_inverse_relation_p(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1061 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1062 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1063 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1062 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1063 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$1063 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1064 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1064 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1064 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1065 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1066 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1065 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1065 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1074 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1075 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_node_to_node_p(node1, node2);
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1075, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1074, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1065, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1065, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1066, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1065, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1064, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1064, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1064, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1063, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1063, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1062, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1063, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1062, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1061, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there is a path from NODE1 to NODE2.
     */
    @LispMethod(comment = "@return booleanp; whether there is a path from NODE1 to NODE2.")
    public static final SubLObject sbhl_path_from_node_to_node_p_alt(SubLObject node1, SubLObject node2) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            inference_metrics.increment_sbhl_graph_attempt_historical_count();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_type$.bind($BOOLEAN, thread);
                        sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                        {
                            SubLObject premarkingP = sbhl_search_utilities.sbhl_module_premarks_gather_nodes_p();
                            SubLObject goal_fn = SBHL_NODE_IS_GOAL_NODE;
                            SubLObject goal_node = node2;
                            SubLObject goal_space = sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread);
                            if (NIL != premarkingP) {
                                {
                                    SubLObject _prev_bind_0_1045 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                    SubLObject _prev_bind_1_1046 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    try {
                                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_search_vars.get_sbhl_search_module()), thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(sbhl_module_utilities.get_sbhl_link_pred(sbhl_search_vars.get_sbhl_search_module()) == $$negationInverse ? ((SubLObject) (T)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                        sbhl_marking_methods.sbhl_premark_gather_nodes(goal_node);
                                    } finally {
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_1046, thread);
                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_1045, thread);
                                    }
                                }
                                goal_fn = SBHL_NODE_MARKED_AS_GOAL_NODE;
                                goal_space = sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread);
                            }
                            {
                                SubLObject _prev_bind_0_1047 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                SubLObject _prev_bind_1_1048 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                SubLObject _prev_bind_2_1049 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_goal_node$.currentBinding(thread);
                                SubLObject _prev_bind_4 = sbhl_marking_vars.$sbhl_goal_space$.currentBinding(thread);
                                SubLObject _prev_bind_5 = sbhl_search_vars.$sbhl_unmarking_search_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_consider_node_fn$.bind(goal_fn, thread);
                                    sbhl_search_vars.$sbhl_goal_node$.bind(goal_node, thread);
                                    sbhl_marking_vars.$sbhl_goal_space$.bind(goal_space, thread);
                                    sbhl_search_vars.$sbhl_unmarking_search_p$.bind(NIL, thread);
                                    result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node1);
                                } finally {
                                    sbhl_search_vars.$sbhl_unmarking_search_p$.rebind(_prev_bind_5, thread);
                                    sbhl_marking_vars.$sbhl_goal_space$.rebind(_prev_bind_4, thread);
                                    sbhl_search_vars.$sbhl_goal_node$.rebind(_prev_bind_3, thread);
                                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_1049, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_1048, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_0_1047, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_0, thread);
                    }
                }
                if (NIL != result) {
                    inference_metrics.increment_sbhl_graph_success_historical_count();
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a path from NODE1 to NODE2.
     */
    @LispMethod(comment = "@return booleanp; whether there is a path from NODE1 to NODE2.")
    public static SubLObject sbhl_path_from_node_to_node_p(final SubLObject node1, final SubLObject node2) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        inference_metrics.increment_sbhl_graph_attempt_historical_count();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_type$.bind($BOOLEAN, thread);
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            final SubLObject premarkingP = sbhl_search_utilities.sbhl_module_premarks_gather_nodes_p();
            SubLObject goal_fn = SBHL_NODE_IS_GOAL_NODE;
            SubLObject goal_space = sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread);
            if (NIL != premarkingP) {
                final SubLObject _prev_bind_0_$1076 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1077 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                try {
                    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_search_vars.get_sbhl_search_module()), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind(sbhl_module_utilities.get_sbhl_link_pred(sbhl_search_vars.get_sbhl_search_module()).eql($$negationInverse) ? T : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                    sbhl_marking_methods.sbhl_premark_gather_nodes(node2);
                } finally {
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$1077, thread);
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$1076, thread);
                }
                goal_fn = SBHL_NODE_MARKED_AS_GOAL_NODE;
                goal_space = sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread);
            }
            final SubLObject _prev_bind_0_$1077 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1078 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1080 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
            final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_goal_node$.currentBinding(thread);
            final SubLObject _prev_bind_5 = sbhl_marking_vars.$sbhl_goal_space$.currentBinding(thread);
            final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_unmarking_search_p$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                sbhl_search_vars.$sbhl_consider_node_fn$.bind(goal_fn, thread);
                sbhl_search_vars.$sbhl_goal_node$.bind(node2, thread);
                sbhl_marking_vars.$sbhl_goal_space$.bind(goal_space, thread);
                sbhl_search_vars.$sbhl_unmarking_search_p$.bind(NIL, thread);
                result = sbhl_transitive_closure(node1);
            } finally {
                sbhl_search_vars.$sbhl_unmarking_search_p$.rebind(_prev_bind_6, thread);
                sbhl_marking_vars.$sbhl_goal_space$.rebind(_prev_bind_5, thread);
                sbhl_search_vars.$sbhl_goal_node$.rebind(_prev_bind_4, thread);
                sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_$1080, thread);
                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$1078, thread);
                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_0_$1077, thread);
            }
        } finally {
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_0, thread);
        }
        if (NIL != result) {
            inference_metrics.increment_sbhl_graph_success_historical_count();
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path from NODE1 to NODE2 via the disjoins module to MODULE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path from NODE1 to NODE2 via the disjoins module to MODULE.")
    public static final SubLObject sbhl_disjoins_relation_p_alt(SubLObject module, SubLObject node1, SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        {
            SubLObject disjoins_module = sbhl_module_utilities.get_sbhl_disjoins_module(module);
            SubLObject result = NIL;
            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_predicate_relation_p(disjoins_module, node1, node2, mt, tv);
            return result;
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path from NODE1 to NODE2 via the disjoins module to MODULE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path from NODE1 to NODE2 via the disjoins module to MODULE.")
    public static SubLObject sbhl_disjoins_relation_p(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject disjoins_module = sbhl_module_utilities.get_sbhl_disjoins_module(module);
        SubLObject result = NIL;
        result = sbhl_predicate_relation_p(disjoins_module, node1, node2, mt, tv);
        return result;
    }

    /**
     * Justification for why there is a relation via MODULE from NODE1 to NODE2.
     */
    @LispMethod(comment = "Justification for why there is a relation via MODULE from NODE1 to NODE2.")
    public static final SubLObject why_sbhl_predicate_relation_p_alt(SubLObject module, SubLObject node1, SubLObject node2, SubLObject mt, SubLObject tv, SubLObject behavior) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (behavior == UNPROVIDED) {
            behavior = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        return sbhl_search_utilities.sbhl_handle_justification(SBHL_PREDICATE_RELATION_P, module, node1, node2, mt, tv, behavior, T);
    }

    @LispMethod(comment = "Justification for why there is a relation via MODULE from NODE1 to NODE2.")
    public static SubLObject why_sbhl_predicate_relation_p(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv, SubLObject behavior) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (behavior == UNPROVIDED) {
            behavior = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        return sbhl_search_utilities.sbhl_handle_justification(SBHL_PREDICATE_RELATION_P, module, node1, node2, mt, tv, behavior, T);
    }/**
     * Justification for why there is a relation via MODULE from NODE1 to NODE2.
     */


    /**
     * Justification for why there is a false relation via MODULE between NODE1 and NODE2. Usually reserved for not-disjoins justifications, as all other false relations can have disjoins or sibling disjoins used for concluding the relation.
     */
    @LispMethod(comment = "Justification for why there is a false relation via MODULE between NODE1 and NODE2. Usually reserved for not-disjoins justifications, as all other false relations can have disjoins or sibling disjoins used for concluding the relation.")
    public static final SubLObject why_sbhl_false_predicate_relation_p_alt(SubLObject module, SubLObject node1, SubLObject node2, SubLObject mt, SubLObject tv, SubLObject behavior) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (behavior == UNPROVIDED) {
            behavior = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        return sbhl_search_utilities.sbhl_handle_justification(SBHL_FALSE_PREDICATE_RELATION_P, module, node1, node2, mt, tv, behavior, NIL);
    }

    @LispMethod(comment = "Justification for why there is a false relation via MODULE between NODE1 and NODE2. Usually reserved for not-disjoins justifications, as all other false relations can have disjoins or sibling disjoins used for concluding the relation.")
    public static SubLObject why_sbhl_false_predicate_relation_p(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv, SubLObject behavior) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (behavior == UNPROVIDED) {
            behavior = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        return sbhl_search_utilities.sbhl_handle_justification(SBHL_FALSE_PREDICATE_RELATION_P, module, node1, node2, mt, tv, behavior, NIL);
    }/**
     * Justification for why there is a false relation via MODULE between NODE1 and NODE2. Usually reserved for not-disjoins justifications, as all other false relations can have disjoins or sibling disjoins used for concluding the relation.
     */


    /**
     *
     */
    public static final SubLObject why_sbhl_relationP_alt(SubLObject module, SubLObject node1, SubLObject node2, SubLObject mt, SubLObject tv, SubLObject behavior) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (behavior == UNPROVIDED) {
            behavior = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject bool_fn = NIL;
                if ((NIL != sbhl_search_vars.sbhl_true_tv_p(tv)) || ((NIL == tv) && (NIL != sbhl_search_vars.sbhl_true_tv_p(sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread))))) {
                    if ((NIL != sbhl_module_utilities.sbhl_simple_module_p(module)) || (NIL != sbhl_module_utilities.sbhl_transfers_through_module_p(module))) {
                        bool_fn = SBHL_PREDICATE_RELATION_P;
                    } else {
                        if (NIL != sbhl_module_utilities.sbhl_disjoins_module_p(module)) {
                            bool_fn = SBHL_IMPLIED_DISJOINS_RELATION_P;
                        } else {
                            if (NIL != sbhl_module_utilities.sbhl_time_module_p(module)) {
                            }
                        }
                    }
                } else {
                    if ((NIL != sbhl_search_vars.sbhl_false_tv_p(tv)) || ((NIL == tv) && (NIL != sbhl_search_vars.sbhl_false_tv_p(sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread))))) {
                        if ((NIL != sbhl_module_utilities.sbhl_simple_module_p(module)) || (NIL != sbhl_module_utilities.sbhl_transfers_through_module_p(module))) {
                            bool_fn = SBHL_IMPLIED_FALSE_PREDICATE_RELATION_P;
                        } else {
                            if (NIL != sbhl_module_utilities.sbhl_disjoins_module_p(module)) {
                                bool_fn = SBHL_FALSE_PREDICATE_RELATION_P;
                            } else {
                                if (NIL != sbhl_module_utilities.sbhl_time_module_p(module)) {
                                }
                            }
                        }
                    } else {
                        sbhl_paranoia.sbhl_error(THREE_INTEGER, $str_alt51$Invalid_TV_argument__a__or__sbhl_, tv, sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    }
                }
                if (NIL != bool_fn) {
                    return sbhl_search_utilities.sbhl_handle_justification(bool_fn, module, node1, node2, mt, tv, behavior, UNPROVIDED);
                }
            }
            return NIL;
        }
    }

    public static SubLObject why_sbhl_relationP(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv, SubLObject behavior) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (behavior == UNPROVIDED) {
            behavior = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject bool_fn = NIL;
        if ((NIL != sbhl_search_vars.sbhl_true_tv_p(tv)) || ((NIL == tv) && (NIL != sbhl_search_vars.sbhl_true_tv_p(sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread))))) {
            if ((NIL != sbhl_module_utilities.sbhl_simple_module_p(module)) || (NIL != sbhl_module_utilities.sbhl_transfers_through_module_p(module))) {
                bool_fn = SBHL_PREDICATE_RELATION_P;
            } else
                if (NIL != sbhl_module_utilities.sbhl_disjoins_module_p(module)) {
                    bool_fn = SBHL_IMPLIED_DISJOINS_RELATION_P;
                } else
                    if (NIL != sbhl_module_utilities.sbhl_time_module_p(module)) {
                    }


        } else
            if ((NIL != sbhl_search_vars.sbhl_false_tv_p(tv)) || ((NIL == tv) && (NIL != sbhl_search_vars.sbhl_false_tv_p(sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread))))) {
                if ((NIL != sbhl_module_utilities.sbhl_simple_module_p(module)) || (NIL != sbhl_module_utilities.sbhl_transfers_through_module_p(module))) {
                    bool_fn = SBHL_IMPLIED_FALSE_PREDICATE_RELATION_P;
                } else
                    if (NIL != sbhl_module_utilities.sbhl_disjoins_module_p(module)) {
                        bool_fn = SBHL_FALSE_PREDICATE_RELATION_P;
                    } else
                        if (NIL != sbhl_module_utilities.sbhl_time_module_p(module)) {
                        }


            } else {
                sbhl_paranoia.sbhl_error(THREE_INTEGER, $str54$Invalid_TV_argument__a__or__sbhl_, tv, sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }

        if (NIL != bool_fn) {
            return sbhl_search_utilities.sbhl_handle_justification(bool_fn, module, node1, node2, mt, tv, behavior, UNPROVIDED);
        }
        return NIL;
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path from NODE to any of NODES.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path from NODE to any of NODES.")
    public static final SubLObject sbhl_predicate_relation_with_any_p_alt(SubLObject module, SubLObject node, SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_1050 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_1051 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_1052 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_1053 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_1054 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_1055 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_1056 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_1057 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_1058 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_1059 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_1060 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_1061 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_1062 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_1063 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_1064 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_node_to_any_of_nodes_p(node, nodes);
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_1064, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_1063, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_1062, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_1061, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_1060, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_1059, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_1058, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_1057, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_1056, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_1055, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_1054, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_1053, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_1052, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_1051, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_1050, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path from NODE to any of NODES.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path from NODE to any of NODES.")
    public static SubLObject sbhl_predicate_relation_with_any_p(final SubLObject module, final SubLObject node, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        if (NIL == nodes) {
            return NIL;
        }
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1081 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1082 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1083 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1082 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1083 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$1083 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1084 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1084 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1084 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1085 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1086 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1085 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1085 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1094 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1095 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_node_to_any_of_nodes_p(node, nodes);
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1095, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1094, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1085, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1085, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1086, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1085, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1084, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1084, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1084, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1083, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1083, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1082, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1083, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1082, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1081, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    public static final SubLObject why_some_sbhl_predicate_relation_among_p_alt(SubLObject module, SubLObject node, SubLObject nodes, SubLObject mt, SubLObject tv, SubLObject behavior) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (behavior == UNPROVIDED) {
            behavior = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        return sbhl_search_utilities.sbhl_handle_justification(SBHL_PREDICATE_RELATION_WITH_ANY_P, module, node, nodes, mt, tv, behavior, T);
    }

    public static SubLObject why_some_sbhl_predicate_relation_among_p(final SubLObject module, final SubLObject node, final SubLObject nodes, SubLObject mt, SubLObject tv, SubLObject behavior) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        if (behavior == UNPROVIDED) {
            behavior = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        return sbhl_search_utilities.sbhl_handle_justification(SBHL_PREDICATE_RELATION_WITH_ANY_P, module, node, nodes, mt, tv, behavior, T);
    }

    /**
     *
     *
     * @return booleanp; whether there is a backward true path from NODE to any of NODES.
     */
    @LispMethod(comment = "@return booleanp; whether there is a backward true path from NODE to any of NODES.")
    public static final SubLObject sbhl_inverse_relation_with_any_p_alt(SubLObject module, SubLObject node, SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_1065 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_1066 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_1067 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_1068 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_1069 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_1070 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_1071 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_1072 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_1073 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_1074 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_1075 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_1076 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_1077 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_1078 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_1079 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_node_to_any_of_nodes_p(node, nodes);
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_1079, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_1078, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_1077, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_1076, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_1075, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_1074, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_1073, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_1072, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_1071, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_1070, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_1069, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_1068, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_1067, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_1066, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_1065, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a backward true path from NODE to any of NODES.
     */
    @LispMethod(comment = "@return booleanp; whether there is a backward true path from NODE to any of NODES.")
    public static SubLObject sbhl_inverse_relation_with_any_p(final SubLObject module, final SubLObject node, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1096 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1097 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1098 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1097 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1098 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$1098 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1099 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1099 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1099 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1100 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1101 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1100 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1100 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1109 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1110 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_node_to_any_of_nodes_p(node, nodes);
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1110, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1109, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1100, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1100, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1101, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1100, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1099, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1099, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1099, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1098, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1098, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1097, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1098, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1097, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1096, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward false path from NODE to any of NODES.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward false path from NODE to any of NODES.")
    public static final SubLObject sbhl_false_predicate_relation_with_any_p_alt(SubLObject module, SubLObject node, SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_1080 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_1081 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_1082 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_1083 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_1084 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_false_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_1085 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_1086 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_1087 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_1088 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_1089 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_1090 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_1091 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_1092 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_1093 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_1094 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_node_to_any_of_nodes_p(node, nodes);
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_1094, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_1093, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_1092, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_1091, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_1090, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_1089, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_1088, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_1087, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_1086, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_1085, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_1084, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_1083, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_1082, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_1081, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_1080, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward false path from NODE to any of NODES.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward false path from NODE to any of NODES.")
    public static SubLObject sbhl_false_predicate_relation_with_any_p(final SubLObject module, final SubLObject node, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1111 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1112 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1113 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1112 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1113 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$1113 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1114 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1114 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1114 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1115 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1116 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1115 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1115 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1124 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1125 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_node_to_any_of_nodes_p(node, nodes);
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1125, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1124, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1115, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1115, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1116, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1115, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1114, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1114, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1114, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1113, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1113, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1112, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1113, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1112, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1111, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     * Modifier. marks the union of the forward closures of NODES in target space.
     */
    @LispMethod(comment = "Modifier. marks the union of the forward closures of NODES in target space.")
    public static final SubLObject sbhl_premark_union_nodes_closures_alt(SubLObject nodes) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                SubLObject _prev_bind_5 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                SubLObject _prev_bind_6 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                SubLObject _prev_bind_7 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                SubLObject _prev_bind_8 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                SubLObject _prev_bind_9 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module()), thread);
                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module())), thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module())), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module()), thread);
                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_search_vars.get_sbhl_search_module()), thread);
                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                    {
                        SubLObject cdolist_list_var = nodes;
                        SubLObject node = NIL;
                        for (node = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , node = cdolist_list_var.first()) {
                            {
                                SubLObject _prev_bind_0_1095 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_1095, thread);
                                }
                            }
                        }
                    }
                } finally {
                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_9, thread);
                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_8, thread);
                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_7, thread);
                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_6, thread);
                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_5, thread);
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                }
            }
            return NIL;
        }
    }

    @LispMethod(comment = "Modifier. marks the union of the forward closures of NODES in target space.")
    public static SubLObject sbhl_premark_union_nodes_closures(final SubLObject nodes) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
        final SubLObject _prev_bind_7 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
        final SubLObject _prev_bind_8 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_9 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        final SubLObject _prev_bind_10 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module()), thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module())), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module())), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module()), thread);
            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_search_vars.get_sbhl_search_module()), thread);
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
            SubLObject cdolist_list_var = nodes;
            SubLObject node = NIL;
            node = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                final SubLObject _prev_bind_0_$1126 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                try {
                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                    sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
                } finally {
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_$1126, thread);
                }
                cdolist_list_var = cdolist_list_var.rest();
                node = cdolist_list_var.first();
            } 
        } finally {
            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_10, thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_9, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_8, thread);
            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_7, thread);
            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_6, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }/**
     * Modifier. marks the union of the forward closures of NODES in target space.
     */


    /**
     *
     *
     * @return booleanp; whether there is a path from NODE to any of NODES.
     */
    @LispMethod(comment = "@return booleanp; whether there is a path from NODE to any of NODES.")
    public static final SubLObject sbhl_path_from_node_to_any_of_nodes_p_alt(SubLObject node, SubLObject nodes) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                        sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        {
                            SubLObject _prev_bind_0_1096 = sbhl_marking_vars.$sbhl_target_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_target_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                if (NIL != sbhl_search_utilities.sbhl_module_premarks_gather_nodes_p()) {
                                    com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_premark_union_nodes_closures(nodes);
                                } else {
                                    sbhl_marking_utilities.sbhl_mark_nodes_in_target_space_gp(nodes);
                                }
                                {
                                    SubLObject _prev_bind_0_1097 = sbhl_marking_vars.$sbhl_goal_space$.currentBinding(thread);
                                    SubLObject _prev_bind_1_1098 = sbhl_search_vars.$sbhl_goal_node$.currentBinding(thread);
                                    SubLObject _prev_bind_2_1099 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                    SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_goal_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                                        sbhl_search_vars.$sbhl_goal_node$.bind(nodes, thread);
                                        sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_NODE_MARKED_AS_GOAL_NODE, thread);
                                        sbhl_search_vars.$sbhl_search_type$.bind($BOOLEAN, thread);
                                        result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node);
                                    } finally {
                                        sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_3, thread);
                                        sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_1099, thread);
                                        sbhl_search_vars.$sbhl_goal_node$.rebind(_prev_bind_1_1098, thread);
                                        sbhl_marking_vars.$sbhl_goal_space$.rebind(_prev_bind_0_1097, thread);
                                    }
                                }
                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread));
                            } finally {
                                sbhl_marking_vars.$sbhl_target_gather_space$.rebind(_prev_bind_0_1096, thread);
                            }
                        }
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    } finally {
                        sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_2, thread);
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a path from NODE to any of NODES.
     */
    @LispMethod(comment = "@return booleanp; whether there is a path from NODE to any of NODES.")
    public static SubLObject sbhl_path_from_node_to_any_of_nodes_p(final SubLObject node, final SubLObject nodes) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                final SubLObject _prev_bind_0_$1127 = sbhl_marking_vars.$sbhl_target_gather_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_target_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                    try {
                        if (NIL != sbhl_search_utilities.sbhl_module_premarks_gather_nodes_p()) {
                            sbhl_premark_union_nodes_closures(nodes);
                        } else {
                            sbhl_marking_utilities.sbhl_mark_nodes_in_target_space_gp(nodes);
                        }
                        final SubLObject _prev_bind_0_$1128 = sbhl_marking_vars.$sbhl_goal_space$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$1129 = sbhl_search_vars.$sbhl_goal_node$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$1130 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_goal_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                            sbhl_search_vars.$sbhl_goal_node$.bind(nodes, thread);
                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_NODE_MARKED_AS_GOAL_NODE, thread);
                            sbhl_search_vars.$sbhl_search_type$.bind($BOOLEAN, thread);
                            result = sbhl_transitive_closure(node);
                        } finally {
                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4, thread);
                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_$1130, thread);
                            sbhl_search_vars.$sbhl_goal_node$.rebind(_prev_bind_1_$1129, thread);
                            sbhl_marking_vars.$sbhl_goal_space$.rebind(_prev_bind_0_$1128, thread);
                        }
                    } finally {
                        final SubLObject _prev_bind_0_$1129 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread));
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$1129, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$sbhl_target_gather_space$.rebind(_prev_bind_0_$1127, thread);
                }
            } finally {
                final SubLObject _prev_bind_0_$1130 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$1130, thread);
                }
            }
        } finally {
            sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_3, thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there is a disjoins relation between NODE and any of NODES, determined by the disjoins module for MODULE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a disjoins relation between NODE and any of NODES, determined by the disjoins module for MODULE.")
    public static final SubLObject sbhl_disjoins_relation_with_any_p_alt(SubLObject module, SubLObject node, SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        return com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_predicate_relation_with_any_p(sbhl_module_utilities.get_sbhl_disjoins_module(module), node, nodes, mt, tv);
    }

    /**
     *
     *
     * @return booleanp; whether there is a disjoins relation between NODE and any of NODES, determined by the disjoins module for MODULE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a disjoins relation between NODE and any of NODES, determined by the disjoins module for MODULE.")
    public static SubLObject sbhl_disjoins_relation_with_any_p(final SubLObject module, final SubLObject node, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        return sbhl_predicate_relation_with_any_p(sbhl_module_utilities.get_sbhl_disjoins_module(module), node, nodes, mt, tv);
    }

    /**
     *
     *
     * @return booleanp; whether NODE has a forward true path to each of NODES.
     */
    @LispMethod(comment = "@return booleanp; whether NODE has a forward true path to each of NODES.")
    public static final SubLObject sbhl_predicate_relation_with_all_p_alt(SubLObject module, SubLObject node, SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_1100 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_1101 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_1102 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_1103 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_1104 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_1105 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_1106 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_1107 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_1108 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_1109 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_1110 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_1111 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_1112 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_1113 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_1114 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_node_to_all_of_nodes_p(node, nodes);
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_1114, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_1113, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_1112, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_1111, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_1110, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_1109, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_1108, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_1107, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_1106, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_1105, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_1104, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_1103, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_1102, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_1101, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_1100, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether NODE has a forward true path to each of NODES.
     */
    @LispMethod(comment = "@return booleanp; whether NODE has a forward true path to each of NODES.")
    public static SubLObject sbhl_predicate_relation_with_all_p(final SubLObject module, final SubLObject node, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1133 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1134 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1135 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1134 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1135 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$1135 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1136 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1136 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1136 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1137 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1138 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1137 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1137 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1146 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1147 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_node_to_all_of_nodes_p(node, nodes);
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1147, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1146, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1137, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1137, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1138, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1137, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1136, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1136, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1136, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1135, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1135, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1134, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1135, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1134, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1133, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether NODE has a path to each of NODES.
     */
    @LispMethod(comment = "@return booleanp; whether NODE has a path to each of NODES.")
    public static final SubLObject sbhl_path_from_node_to_all_of_nodes_p_alt(SubLObject node, SubLObject nodes) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject not_all_nodesP = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                        sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
                        {
                            SubLObject _prev_bind_0_1115 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                if (NIL == not_all_nodesP) {
                                    {
                                        SubLObject csome_list_var = nodes;
                                        SubLObject goal = NIL;
                                        for (goal = csome_list_var.first(); !((NIL != not_all_nodesP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , goal = csome_list_var.first()) {
                                            if (NIL == sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(goal)) {
                                                not_all_nodesP = T;
                                            }
                                        }
                                    }
                                }
                            } finally {
                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_0_1115, thread);
                            }
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0, thread);
                    }
                }
                return makeBoolean(NIL == not_all_nodesP);
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether NODE has a path to each of NODES.
     */
    @LispMethod(comment = "@return booleanp; whether NODE has a path to each of NODES.")
    public static SubLObject sbhl_path_from_node_to_all_of_nodes_p(final SubLObject node, final SubLObject nodes) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject not_all_nodesP = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
            final SubLObject _prev_bind_0_$1148 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                if (NIL != set.set_p(nodes)) {
                    final SubLObject set_contents_var = set.do_set_internal(nodes);
                    SubLObject basis_object;
                    SubLObject state;
                    SubLObject goal;
                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == not_all_nodesP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                        goal = set_contents.do_set_contents_next(basis_object, state);
                        if ((NIL != set_contents.do_set_contents_element_validP(state, goal)) && (NIL == sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(goal))) {
                            not_all_nodesP = T;
                        }
                    }
                } else
                    if (nodes.isList()) {
                        if (NIL == not_all_nodesP) {
                            SubLObject csome_list_var = nodes;
                            SubLObject goal2 = NIL;
                            goal2 = csome_list_var.first();
                            while ((NIL == not_all_nodesP) && (NIL != csome_list_var)) {
                                if (NIL == sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(goal2)) {
                                    not_all_nodesP = T;
                                }
                                csome_list_var = csome_list_var.rest();
                                goal2 = csome_list_var.first();
                            } 
                        }
                    } else {
                        Errors.error($str56$_A_is_neither_SET_P_nor_LISTP_, nodes);
                    }

            } finally {
                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_0_$1148, thread);
            }
        } finally {
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0, thread);
        }
        return makeBoolean(NIL == not_all_nodesP);
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path from any of NODES to NODE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path from any of NODES to NODE.")
    public static final SubLObject sbhl_any_with_predicate_relation_p_alt(SubLObject module, SubLObject nodes, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject pred = sbhl_module_vars.get_sbhl_module_link_pred(module);
                SubLObject result = NIL;
                if (NIL != sbhl_cache.sbhl_cache_use_possible_for_nodes_p(pred, nodes, node)) {
                    {
                        SubLObject mt_var = mt;
                        {
                            SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
                            SubLObject _prev_bind_1 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                if (NIL == result) {
                                    {
                                        SubLObject csome_list_var = nodes;
                                        SubLObject subnode = NIL;
                                        for (subnode = csome_list_var.first(); !((NIL != result) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , subnode = csome_list_var.first()) {
                                            result = sbhl_cache.sbhl_cached_predicate_relation_p(pred, subnode, node, UNPROVIDED);
                                        }
                                    }
                                }
                            } finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
                            }
                        }
                    }
                } else {
                    {
                        SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                        SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                        SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                        SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                        SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                            sbhl_module_vars.$sbhl_module$.bind(module, thread);
                            {
                                SubLObject mt_var = mt;
                                {
                                    SubLObject _prev_bind_0_1116 = mt_relevance_macros.$mt$.currentBinding(thread);
                                    SubLObject _prev_bind_1_1117 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                    SubLObject _prev_bind_2_1118 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                    try {
                                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                        {
                                            SubLObject tv_var = tv;
                                            {
                                                SubLObject _prev_bind_0_1119 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                SubLObject _prev_bind_1_1120 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                    if (NIL != tv_var) {
                                                        if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                            if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                {
                                                                    SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                    if (pcase_var.eql($ERROR)) {
                                                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($CERROR)) {
                                                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        } else {
                                                                            if (pcase_var.eql($WARN)) {
                                                                                Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                            } else {
                                                                                Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                                Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    {
                                                        SubLObject _prev_bind_0_1121 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                        SubLObject _prev_bind_1_1122 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                        SubLObject _prev_bind_2_1123 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                            {
                                                                SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                                {
                                                                    SubLObject _prev_bind_0_1124 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                        {
                                                                            SubLObject _prev_bind_0_1125 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                                {
                                                                                    SubLObject _prev_bind_0_1126 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_1_1127 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_2_1128 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_3_1129 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                    SubLObject _prev_bind_4_1130 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                    try {
                                                                                        sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                        {
                                                                                            SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                            SubLObject needs_to_releaseP = NIL;
                                                                                            try {
                                                                                                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                                result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_any_of_nodes_to_node_p(nodes, node);
                                                                                            } finally {
                                                                                                if (NIL != needs_to_releaseP) {
                                                                                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } finally {
                                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_1130, thread);
                                                                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_1129, thread);
                                                                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_1128, thread);
                                                                                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_1127, thread);
                                                                                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_1126, thread);
                                                                                    }
                                                                                }
                                                                                if (source == $RESOURCE) {
                                                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                }
                                                                            } finally {
                                                                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_1125, thread);
                                                                            }
                                                                        }
                                                                        if (source == $RESOURCE) {
                                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                        }
                                                                    } finally {
                                                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_1124, thread);
                                                                    }
                                                                }
                                                            }
                                                        } finally {
                                                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_1123, thread);
                                                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_1122, thread);
                                                            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_1121, thread);
                                                        }
                                                    }
                                                } finally {
                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_1120, thread);
                                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_1119, thread);
                                                }
                                            }
                                        }
                                    } finally {
                                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_1118, thread);
                                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_1117, thread);
                                        mt_relevance_macros.$mt$.rebind(_prev_bind_0_1116, thread);
                                    }
                                }
                            }
                        } finally {
                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path from any of NODES to NODE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path from any of NODES to NODE.")
    public static SubLObject sbhl_any_with_predicate_relation_p(final SubLObject module, final SubLObject nodes, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        final SubLObject pred = sbhl_module_vars.get_sbhl_module_link_pred(module);
        SubLObject result = NIL;
        if (NIL != sbhl_cache.sbhl_cache_use_possible_for_nodes_p(pred, nodes, node)) {
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                if (NIL != set.set_p(nodes)) {
                    final SubLObject set_contents_var = set.do_set_internal(nodes);
                    SubLObject basis_object;
                    SubLObject state;
                    SubLObject subnode;
                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == result) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                        subnode = set_contents.do_set_contents_next(basis_object, state);
                        if (NIL != set_contents.do_set_contents_element_validP(state, subnode)) {
                            result = sbhl_cache.sbhl_cached_predicate_relation_p(pred, subnode, node, UNPROVIDED);
                        }
                    }
                } else
                    if (nodes.isList()) {
                        if (NIL == result) {
                            SubLObject csome_list_var;
                            SubLObject subnode2;
                            for (csome_list_var = nodes, subnode2 = NIL, subnode2 = csome_list_var.first(); (NIL == result) && (NIL != csome_list_var); result = sbhl_cache.sbhl_cached_predicate_relation_p(pred, subnode2, node, UNPROVIDED) , csome_list_var = csome_list_var.rest() , subnode2 = csome_list_var.first()) {
                            }
                        }
                    } else {
                        Errors.error($str56$_A_is_neither_SET_P_nor_LISTP_, nodes);
                    }

            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
            }
        } else {
            final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
            final SubLObject _prev_bind_5 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
            final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
            final SubLObject _prev_bind_7 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
            final SubLObject _prev_bind_8 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                sbhl_module_vars.$sbhl_module$.bind(module, thread);
                final SubLObject mt_var2 = mt;
                final SubLObject _prev_bind_0_$1149 = mt_relevance_macros.$mt$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1150 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_2_$1151 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                try {
                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var2), thread);
                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var2), thread);
                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var2), thread);
                    final SubLObject tv_var = tv;
                    final SubLObject _prev_bind_0_$1150 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1151 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                        if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                            final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                            if (pcase_var.eql($ERROR)) {
                                sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($CERROR)) {
                                    sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                } else
                                    if (pcase_var.eql($WARN)) {
                                        Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                    } else {
                                        Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                        Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                    }


                        }
                        final SubLObject _prev_bind_0_$1151 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$1152 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$1152 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                            final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                            final SubLObject _prev_bind_0_$1152 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1153 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                    final SubLObject _prev_bind_0_$1154 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$1153 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$1153 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                    final SubLObject _prev_bind_3_$1162 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                    final SubLObject _prev_bind_4_$1163 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                        final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                        SubLObject needs_to_releaseP = NIL;
                                        try {
                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                            result = sbhl_path_from_any_of_nodes_to_node_p(nodes, node);
                                        } finally {
                                            if (NIL != needs_to_releaseP) {
                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                            }
                                        }
                                    } finally {
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1163, thread);
                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1162, thread);
                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1153, thread);
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1153, thread);
                                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1154, thread);
                                    }
                                    if (source == $RESOURCE) {
                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                    }
                                } finally {
                                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1153, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1152, thread);
                            }
                        } finally {
                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1152, thread);
                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1152, thread);
                            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1151, thread);
                        }
                    } finally {
                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1151, thread);
                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1150, thread);
                    }
                } finally {
                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1151, thread);
                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1150, thread);
                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1149, thread);
                }
            } finally {
                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_8, thread);
                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_7, thread);
                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_6, thread);
                sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_5, thread);
                sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_4, thread);
            }
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there is a backward false path from any of NODES to NODE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a backward false path from any of NODES to NODE.")
    public static final SubLObject sbhl_any_with_false_inverse_relation_p_alt(SubLObject module, SubLObject nodes, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_1131 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_1132 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_1133 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_1134 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_1135 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_false_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_1136 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_1137 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_1138 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_1139 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_1140 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_1141 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_1142 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_1143 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_1144 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_1145 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_any_of_nodes_to_node_p(nodes, node);
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_1145, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_1144, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_1143, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_1142, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_1141, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_1140, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_1139, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_1138, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_1137, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_1136, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_1135, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_1134, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_1133, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_1132, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_1131, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a backward false path from any of NODES to NODE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a backward false path from any of NODES to NODE.")
    public static SubLObject sbhl_any_with_false_inverse_relation_p(final SubLObject module, final SubLObject nodes, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1164 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1165 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1166 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1165 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1166 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$1166 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1167 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1167 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1167 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1168 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1169 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1168 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1168 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1177 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1178 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_any_of_nodes_to_node_p(nodes, node);
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1178, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1177, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1168, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1168, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1169, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1168, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1167, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1167, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1167, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1166, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1166, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1165, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1166, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1165, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1164, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     * Modifier. Marks the forward closure of NODE in target space
     */
    @LispMethod(comment = "Modifier. Marks the forward closure of NODE in target space")
    public static final SubLObject sbhl_premark_node_closure_alt(SubLObject node) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                SubLObject _prev_bind_5 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                SubLObject _prev_bind_7 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                SubLObject _prev_bind_8 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                SubLObject _prev_bind_9 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                SubLObject _prev_bind_10 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module()), thread);
                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module())), thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module())), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module()), thread);
                    sbhl_search_vars.$sbhl_tv$.bind(sbhl_search_vars.sbhl_search_true_tv(), thread);
                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_search_vars.get_sbhl_search_module()), thread);
                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                    sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
                } finally {
                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_10, thread);
                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_9, thread);
                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_8, thread);
                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_7, thread);
                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_6, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_5, thread);
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                }
            }
            return NIL;
        }
    }

    @LispMethod(comment = "Modifier. Marks the forward closure of NODE in target space")
    public static SubLObject sbhl_premark_node_closure(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
        final SubLObject _prev_bind_7 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
        final SubLObject _prev_bind_8 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
        final SubLObject _prev_bind_9 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_10 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        final SubLObject _prev_bind_11 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module()), thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module())), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module())), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module()), thread);
            sbhl_search_vars.$sbhl_tv$.bind(sbhl_search_vars.sbhl_search_true_tv(), thread);
            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_search_vars.get_sbhl_search_module()), thread);
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
            sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
        } finally {
            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_11, thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_10, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_9, thread);
            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_8, thread);
            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_7, thread);
            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_6, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }/**
     * Modifier. Marks the forward closure of NODE in target space
     */


    /**
     *
     *
     * @return booleanp; whether there is a path from any of NODES to NODE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a path from any of NODES to NODE.")
    public static final SubLObject sbhl_path_from_any_of_nodes_to_node_p_alt(SubLObject nodes, SubLObject node) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_goal_node$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_type$.bind($BOOLEAN, thread);
                        sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                        sbhl_search_vars.$sbhl_goal_node$.bind(node, thread);
                        if (NIL != sbhl_search_utilities.sbhl_module_premarks_gather_nodes_p()) {
                            {
                                SubLObject _prev_bind_0_1146 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                    com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_premark_node_closure(node);
                                    {
                                        SubLObject _prev_bind_0_1147 = sbhl_marking_vars.$sbhl_goal_space$.currentBinding(thread);
                                        SubLObject _prev_bind_1_1148 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        try {
                                            sbhl_marking_vars.$sbhl_goal_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_NODE_MARKED_AS_GOAL_NODE, thread);
                                            if (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) {
                                                {
                                                    SubLObject csome_list_var = nodes;
                                                    SubLObject start = NIL;
                                                    for (start = csome_list_var.first(); !((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , start = csome_list_var.first()) {
                                                        result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(start);
                                                    }
                                                }
                                            }
                                        } finally {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_1_1148, thread);
                                            sbhl_marking_vars.$sbhl_goal_space$.rebind(_prev_bind_0_1147, thread);
                                        }
                                    }
                                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                                } finally {
                                    sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_0_1146, thread);
                                }
                            }
                        } else {
                            {
                                SubLObject _prev_bind_0_1149 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_NODE_IS_GOAL_NODE, thread);
                                    if (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) {
                                        {
                                            SubLObject csome_list_var = nodes;
                                            SubLObject start = NIL;
                                            for (start = csome_list_var.first(); !((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , start = csome_list_var.first()) {
                                                result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(start);
                                            }
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0_1149, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_search_vars.$sbhl_goal_node$.rebind(_prev_bind_3, thread);
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a path from any of NODES to NODE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a path from any of NODES to NODE.")
    public static SubLObject sbhl_path_from_any_of_nodes_to_node_p(final SubLObject nodes, final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_goal_node$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_type$.bind($BOOLEAN, thread);
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            sbhl_search_vars.$sbhl_goal_node$.bind(node, thread);
            if (NIL != sbhl_search_utilities.sbhl_module_premarks_gather_nodes_p()) {
                final SubLObject _prev_bind_0_$1179 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                    try {
                        sbhl_premark_node_closure(node);
                        final SubLObject _prev_bind_0_$1180 = sbhl_marking_vars.$sbhl_goal_space$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$1181 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_goal_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_NODE_MARKED_AS_GOAL_NODE, thread);
                            if (NIL != set.set_p(nodes)) {
                                final SubLObject set_contents_var = set.do_set_internal(nodes);
                                SubLObject basis_object;
                                SubLObject state;
                                SubLObject start;
                                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                                    start = set_contents.do_set_contents_next(basis_object, state);
                                    if (NIL != set_contents.do_set_contents_element_validP(state, start)) {
                                        result = sbhl_transitive_closure(start);
                                    }
                                }
                            } else
                                if (nodes.isList()) {
                                    if (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) {
                                        SubLObject csome_list_var = nodes;
                                        SubLObject start2 = NIL;
                                        start2 = csome_list_var.first();
                                        while ((NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL != csome_list_var)) {
                                            result = sbhl_transitive_closure(start2);
                                            csome_list_var = csome_list_var.rest();
                                            start2 = csome_list_var.first();
                                        } 
                                    }
                                } else {
                                    Errors.error($str56$_A_is_neither_SET_P_nor_LISTP_, nodes);
                                }

                        } finally {
                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_1_$1181, thread);
                            sbhl_marking_vars.$sbhl_goal_space$.rebind(_prev_bind_0_$1180, thread);
                        }
                    } finally {
                        final SubLObject _prev_bind_0_$1181 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$1181, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_0_$1179, thread);
                }
            } else {
                final SubLObject _prev_bind_0_$1182 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_NODE_IS_GOAL_NODE, thread);
                    if (NIL != set.set_p(nodes)) {
                        final SubLObject set_contents_var2 = set.do_set_internal(nodes);
                        SubLObject start2;
                        SubLObject basis_object2;
                        SubLObject state2;
                        for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL == set_contents.do_set_contents_doneP(basis_object2, state2)); state2 = set_contents.do_set_contents_update_state(state2)) {
                            start2 = set_contents.do_set_contents_next(basis_object2, state2);
                            if (NIL != set_contents.do_set_contents_element_validP(state2, start2)) {
                                result = sbhl_transitive_closure(start2);
                            }
                        }
                    } else
                        if (nodes.isList()) {
                            if (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) {
                                SubLObject csome_list_var2 = nodes;
                                SubLObject start3 = NIL;
                                start3 = csome_list_var2.first();
                                while ((NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL != csome_list_var2)) {
                                    result = sbhl_transitive_closure(start3);
                                    csome_list_var2 = csome_list_var2.rest();
                                    start3 = csome_list_var2.first();
                                } 
                            }
                        } else {
                            Errors.error($str56$_A_is_neither_SET_P_nor_LISTP_, nodes);
                        }

                } finally {
                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0_$1182, thread);
                }
            }
        } finally {
            sbhl_search_vars.$sbhl_goal_node$.rebind(_prev_bind_4, thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there is a disjoins relation between any of NODES and NODE, determined by the disjoins module for MODULE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a disjoins relation between any of NODES and NODE, determined by the disjoins module for MODULE.")
    public static final SubLObject sbhl_any_with_disjoins_relation_p_alt(SubLObject module, SubLObject nodes, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        return com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_any_with_predicate_relation_p(sbhl_module_utilities.get_sbhl_disjoins_module(module), nodes, node, mt, tv);
    }

    /**
     *
     *
     * @return booleanp; whether there is a disjoins relation between any of NODES and NODE, determined by the disjoins module for MODULE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a disjoins relation between any of NODES and NODE, determined by the disjoins module for MODULE.")
    public static SubLObject sbhl_any_with_disjoins_relation_p(final SubLObject module, final SubLObject nodes, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        return sbhl_any_with_predicate_relation_p(sbhl_module_utilities.get_sbhl_disjoins_module(module), nodes, node, mt, tv);
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path from each of NODES to NODE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path from each of NODES to NODE.")
    public static final SubLObject sbhl_all_with_predicate_relation_p_alt(SubLObject module, SubLObject nodes, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_1150 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_1151 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_1152 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_1153 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_1154 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_1155 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_1156 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_1157 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_1158 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_1159 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_1160 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_1161 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_1162 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_1163 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_1164 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_all_of_nodes_to_node_p(nodes, node);
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_1164, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_1163, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_1162, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_1161, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_1160, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_1159, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_1158, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_1157, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_1156, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_1155, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_1154, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_1153, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_1152, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_1151, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_1150, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path from each of NODES to NODE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path from each of NODES to NODE.")
    public static SubLObject sbhl_all_with_predicate_relation_p(final SubLObject module, final SubLObject nodes, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1184 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1185 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1186 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1185 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1186 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$1186 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1187 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1187 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1187 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1188 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1189 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1188 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1188 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1197 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1198 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_all_of_nodes_to_node_p(nodes, node);
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1198, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1197, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1188, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1188, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1189, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1188, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1187, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1187, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1187, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1186, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1186, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1185, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1186, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1185, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1184, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward false path from each of NODES to NODE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward false path from each of NODES to NODE.")
    public static final SubLObject sbhl_all_with_false_predicate_relation_p_alt(SubLObject module, SubLObject nodes, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_1165 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_1166 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_1167 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_1168 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_1169 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_false_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_1170 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_1171 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_1172 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_1173 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_1174 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_1175 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_1176 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_1177 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_1178 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_1179 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_all_of_nodes_to_node_p(nodes, node);
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_1179, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_1178, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_1177, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_1176, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_1175, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_1174, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_1173, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_1172, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_1171, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_1170, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_1169, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_1168, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_1167, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_1166, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_1165, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward false path from each of NODES to NODE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward false path from each of NODES to NODE.")
    public static SubLObject sbhl_all_with_false_predicate_relation_p(final SubLObject module, final SubLObject nodes, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1199 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1200 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1201 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1200 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1201 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$1201 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1202 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1202 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1202 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1203 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1204 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1203 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1203 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1212 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1213 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_all_of_nodes_to_node_p(nodes, node);
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1213, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1212, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1203, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1203, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1204, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1203, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1202, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1202, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1202, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1201, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1201, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1200, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1201, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1200, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1199, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there is a backward false path from each of NODES to NODE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a backward false path from each of NODES to NODE.")
    public static final SubLObject sbhl_all_with_false_inverse_relation_p_alt(SubLObject module, SubLObject nodes, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_1180 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_1181 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_1182 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_1183 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_1184 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_false_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_1185 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_1186 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_1187 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_1188 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_1189 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_1190 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_1191 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_1192 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_1193 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_1194 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_all_of_nodes_to_node_p(nodes, node);
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_1194, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_1193, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_1192, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_1191, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_1190, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_1189, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_1188, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_1187, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_1186, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_1185, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_1184, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_1183, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_1182, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_1181, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_1180, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a backward false path from each of NODES to NODE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a backward false path from each of NODES to NODE.")
    public static SubLObject sbhl_all_with_false_inverse_relation_p(final SubLObject module, final SubLObject nodes, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1214 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1215 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1216 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1215 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1216 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_FALSE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$1216 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1217 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1217 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1217 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1218 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1219 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1218 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1218 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1227 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1228 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_all_of_nodes_to_node_p(nodes, node);
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1228, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1227, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1218, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1218, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1219, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1218, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1217, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1217, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1217, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1216, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1216, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1215, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1216, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1215, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1214, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there is a path from each of NODES to NODE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a path from each of NODES to NODE.")
    public static final SubLObject sbhl_path_from_all_of_nodes_to_node_p_alt(SubLObject nodes, SubLObject node) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject any_missedP = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                        {
                            SubLObject cdolist_list_var = nodes;
                            SubLObject start = NIL;
                            for (start = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , start = cdolist_list_var.first()) {
                                {
                                    SubLObject _prev_bind_0_1195 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                    SubLObject _prev_bind_1_1196 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                        sbhl_marking_methods.sbhl_mark_closure_as_marked(start);
                                    } finally {
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_1196, thread);
                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_0_1195, thread);
                                    }
                                }
                            }
                        }
                        {
                            SubLObject _prev_bind_0_1197 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                            try {
                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                                sbhl_marking_methods.sbhl_unmark_marked_closure(node);
                            } finally {
                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_1197, thread);
                            }
                        }
                        if (NIL == any_missedP) {
                            {
                                SubLObject csome_list_var = nodes;
                                SubLObject start = NIL;
                                for (start = csome_list_var.first(); !((NIL != any_missedP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , start = csome_list_var.first()) {
                                    if (NIL != sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(start)) {
                                        any_missedP = T;
                                    }
                                }
                            }
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0, thread);
                    }
                }
                return makeBoolean(NIL == any_missedP);
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a path from each of NODES to NODE.
     */
    @LispMethod(comment = "@return booleanp; whether there is a path from each of NODES to NODE.")
    public static SubLObject sbhl_path_from_all_of_nodes_to_node_p(final SubLObject nodes, final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject any_missedP = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            SubLObject cdolist_list_var = nodes;
            SubLObject start = NIL;
            start = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                final SubLObject _prev_bind_0_$1229 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1230 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                    sbhl_marking_methods.sbhl_mark_closure_as_marked(start);
                } finally {
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$1230, thread);
                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_0_$1229, thread);
                }
                cdolist_list_var = cdolist_list_var.rest();
                start = cdolist_list_var.first();
            } 
            final SubLObject _prev_bind_0_$1230 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
            try {
                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                sbhl_marking_methods.sbhl_unmark_marked_closure(node);
            } finally {
                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_$1230, thread);
            }
            if (NIL != set.set_p(nodes)) {
                final SubLObject set_contents_var = set.do_set_internal(nodes);
                SubLObject basis_object;
                SubLObject state;
                SubLObject start2;
                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == any_missedP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                    start2 = set_contents.do_set_contents_next(basis_object, state);
                    if ((NIL != set_contents.do_set_contents_element_validP(state, start2)) && (NIL != sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(start2))) {
                        any_missedP = T;
                    }
                }
            } else
                if (nodes.isList()) {
                    if (NIL == any_missedP) {
                        SubLObject csome_list_var = nodes;
                        SubLObject start3 = NIL;
                        start3 = csome_list_var.first();
                        while ((NIL == any_missedP) && (NIL != csome_list_var)) {
                            if (NIL != sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(start3)) {
                                any_missedP = T;
                            }
                            csome_list_var = csome_list_var.rest();
                            start3 = csome_list_var.first();
                        } 
                    }
                } else {
                    Errors.error($str56$_A_is_neither_SET_P_nor_LISTP_, nodes);
                }

        } finally {
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0, thread);
        }
        return makeBoolean(NIL == any_missedP);
    }

    public static final SubLObject sbhl_all_with_disjoins_relation_p_alt(SubLObject module, SubLObject nodes, SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        return com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_all_with_predicate_relation_p(sbhl_module_utilities.get_sbhl_disjoins_module(module), nodes, node, mt, tv);
    }

    public static SubLObject sbhl_all_with_disjoins_relation_p(final SubLObject module, final SubLObject nodes, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        return sbhl_all_with_predicate_relation_p(sbhl_module_utilities.get_sbhl_disjoins_module(module), nodes, node, mt, tv);
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path from any of NODES1 to any of NODES2.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path from any of NODES1 to any of NODES2.")
    public static final SubLObject sbhl_predicate_relation_between_any_p_alt(SubLObject module, SubLObject nodes1, SubLObject nodes2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_1198 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_1199 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_1200 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_1201 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_1202 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_1203 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_1204 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_1205 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_1206 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_1207 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_1208 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_1209 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_1210 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_1211 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_1212 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_any_of_nodes_to_any_of_nodes_p(nodes1, nodes2);
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_1212, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_1211, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_1210, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_1209, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_1208, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_1207, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_1206, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_1205, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_1204, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_1203, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_1202, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_1201, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_1200, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_1199, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_1198, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path from any of NODES1 to any of NODES2.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path from any of NODES1 to any of NODES2.")
    public static SubLObject sbhl_predicate_relation_between_any_p(final SubLObject module, final SubLObject nodes1, final SubLObject nodes2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1232 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1233 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1234 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1233 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1234 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$1234 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1235 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1235 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1235 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1236 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1237 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1236 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1236 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1245 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1246 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_any_of_nodes_to_any_of_nodes_p(nodes1, nodes2);
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1246, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1245, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1236, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1236, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1237, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1236, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1235, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1235, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1235, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1234, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1234, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1233, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1234, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1233, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1232, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there is a path from any of NODES1 to any of NODES2.
     */
    @LispMethod(comment = "@return booleanp; whether there is a path from any of NODES1 to any of NODES2.")
    public static final SubLObject sbhl_path_from_any_of_nodes_to_any_of_nodes_p_alt(SubLObject nodes1, SubLObject nodes2) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_goal_node$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_type$.bind($BOOLEAN, thread);
                        sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                        sbhl_search_vars.$sbhl_goal_node$.bind(nodes2, thread);
                        sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        if (NIL != sbhl_search_utilities.sbhl_module_premarks_gather_nodes_p()) {
                            com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_premark_union_nodes_closures(nodes2);
                        } else {
                            sbhl_marking_utilities.sbhl_mark_nodes_in_target_space(nodes2);
                        }
                        if (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) {
                            {
                                SubLObject csome_list_var = nodes1;
                                SubLObject node = NIL;
                                for (node = csome_list_var.first(); !((NIL != sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , node = csome_list_var.first()) {
                                    {
                                        SubLObject _prev_bind_0_1213 = sbhl_marking_vars.$sbhl_goal_space$.currentBinding(thread);
                                        SubLObject _prev_bind_1_1214 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        SubLObject _prev_bind_2_1215 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                        try {
                                            sbhl_marking_vars.$sbhl_goal_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_NODE_MARKED_AS_GOAL_NODE, thread);
                                            sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_transitive_closure(node);
                                        } finally {
                                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_1215, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_1_1214, thread);
                                            sbhl_marking_vars.$sbhl_goal_space$.rebind(_prev_bind_0_1213, thread);
                                        }
                                    }
                                }
                            }
                        }
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    } finally {
                        sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$sbhl_goal_node$.rebind(_prev_bind_3, thread);
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a path from any of NODES1 to any of NODES2.
     */
    @LispMethod(comment = "@return booleanp; whether there is a path from any of NODES1 to any of NODES2.")
    public static SubLObject sbhl_path_from_any_of_nodes_to_any_of_nodes_p(final SubLObject nodes1, final SubLObject nodes2) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_goal_node$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_type$.bind($BOOLEAN, thread);
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            sbhl_search_vars.$sbhl_goal_node$.bind(nodes2, thread);
            sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                if (NIL != sbhl_search_utilities.sbhl_module_premarks_gather_nodes_p()) {
                    sbhl_premark_union_nodes_closures(nodes2);
                } else {
                    sbhl_marking_utilities.sbhl_mark_nodes_in_target_space(nodes2);
                }
                if (NIL != set.set_p(nodes1)) {
                    final SubLObject set_contents_var = set.do_set_internal(nodes1);
                    SubLObject basis_object;
                    SubLObject state;
                    SubLObject node;
                    SubLObject _prev_bind_0_$1247;
                    SubLObject _prev_bind_1_$1248;
                    SubLObject _prev_bind_2_$1249;
                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                        node = set_contents.do_set_contents_next(basis_object, state);
                        if (NIL != set_contents.do_set_contents_element_validP(state, node)) {
                            _prev_bind_0_$1247 = sbhl_marking_vars.$sbhl_goal_space$.currentBinding(thread);
                            _prev_bind_1_$1248 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                            _prev_bind_2_$1249 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_goal_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                                sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_NODE_MARKED_AS_GOAL_NODE, thread);
                                sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                result = sbhl_transitive_closure(node);
                            } finally {
                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1249, thread);
                                sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_1_$1248, thread);
                                sbhl_marking_vars.$sbhl_goal_space$.rebind(_prev_bind_0_$1247, thread);
                            }
                        }
                    }
                } else
                    if (nodes1.isList()) {
                        if (NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) {
                            SubLObject csome_list_var = nodes1;
                            SubLObject node2 = NIL;
                            node2 = csome_list_var.first();
                            while ((NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) && (NIL != csome_list_var)) {
                                final SubLObject _prev_bind_0_$1248 = sbhl_marking_vars.$sbhl_goal_space$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1249 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1250 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_goal_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                                    sbhl_search_vars.$sbhl_consider_node_fn$.bind(SBHL_NODE_MARKED_AS_GOAL_NODE, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    result = sbhl_transitive_closure(node2);
                                } finally {
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1250, thread);
                                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_1_$1249, thread);
                                    sbhl_marking_vars.$sbhl_goal_space$.rebind(_prev_bind_0_$1248, thread);
                                }
                                csome_list_var = csome_list_var.rest();
                                node2 = csome_list_var.first();
                            } 
                        }
                    } else {
                        Errors.error($str56$_A_is_neither_SET_P_nor_LISTP_, nodes1);
                    }

            } finally {
                final SubLObject _prev_bind_0_$1249 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values = getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    restoreValuesFromVector(_values);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$1249, thread);
                }
            }
        } finally {
            sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$sbhl_goal_node$.rebind(_prev_bind_4, thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path for some node in NODES2 from all nodes of NODES1.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path for some node in NODES2 from all nodes of NODES1.")
    public static final SubLObject sbhl_all_with_predicate_relation_with_any_p_alt(SubLObject module, SubLObject nodes1, SubLObject nodes2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
            {
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    SubLObject _prev_bind_3 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    SubLObject _prev_bind_4 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        {
                            SubLObject mt_var = mt;
                            {
                                SubLObject _prev_bind_0_1216 = mt_relevance_macros.$mt$.currentBinding(thread);
                                SubLObject _prev_bind_1_1217 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                SubLObject _prev_bind_2_1218 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                    {
                                        SubLObject tv_var = tv;
                                        {
                                            SubLObject _prev_bind_0_1219 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            SubLObject _prev_bind_1_1220 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? ((SubLObject) (tv_var)) : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? ((SubLObject) (RELEVANT_SBHL_TV_IS_GENERAL_TV)) : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                                if (NIL != tv_var) {
                                                    if (NIL != sbhl_paranoia.sbhl_object_type_checking_p()) {
                                                        if (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                            {
                                                                SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql($ERROR)) {
                                                                    sbhl_paranoia.sbhl_error(ONE_INTEGER, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                } else {
                                                                    if (pcase_var.eql($CERROR)) {
                                                                        sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    } else {
                                                                        if (pcase_var.eql($WARN)) {
                                                                            Errors.warn($str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        } else {
                                                                            Errors.warn($str_alt8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror($$$continue_anyway, $str_alt3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject _prev_bind_0_1221 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                                    SubLObject _prev_bind_1_1222 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                    SubLObject _prev_bind_2_1223 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                                                        {
                                                            SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                                            {
                                                                SubLObject _prev_bind_0_1224 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                                try {
                                                                    sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                    {
                                                                        SubLObject _prev_bind_0_1225 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? ((SubLObject) (sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                                            {
                                                                                SubLObject _prev_bind_0_1226 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_1_1227 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                                                SubLObject _prev_bind_2_1228 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_3_1229 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                                                SubLObject _prev_bind_4_1230 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                                                    {
                                                                                        SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                                                        SubLObject needs_to_releaseP = NIL;
                                                                                        try {
                                                                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                                                            result = com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_path_from_all_of_nodes_to_any_of_nodes_p(nodes1, nodes2);
                                                                                        } finally {
                                                                                            if (NIL != needs_to_releaseP) {
                                                                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_1230, thread);
                                                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_1229, thread);
                                                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_1228, thread);
                                                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_1227, thread);
                                                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_1226, thread);
                                                                                }
                                                                            }
                                                                            if (source == $RESOURCE) {
                                                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                            }
                                                                        } finally {
                                                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_1225, thread);
                                                                        }
                                                                    }
                                                                    if (source == $RESOURCE) {
                                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    }
                                                                } finally {
                                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_1224, thread);
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_1223, thread);
                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_1222, thread);
                                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_1221, thread);
                                                    }
                                                }
                                            } finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_1220, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_1219, thread);
                                            }
                                        }
                                    }
                                } finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_1218, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_1217, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_1216, thread);
                                }
                            }
                        }
                    } finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path for some node in NODES2 from all nodes of NODES1.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path for some node in NODES2 from all nodes of NODES1.")
    public static SubLObject sbhl_all_with_predicate_relation_with_any_p(final SubLObject module, final SubLObject nodes1, final SubLObject nodes2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1254 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1255 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1256 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1255 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1256 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                    if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql($ERROR)) {
                            sbhl_paranoia.sbhl_error(ONE_INTEGER, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } else
                            if (pcase_var.eql($CERROR)) {
                                sbhl_paranoia.sbhl_cerror(ONE_INTEGER, $$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else
                                if (pcase_var.eql($WARN)) {
                                    Errors.warn($str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                } else {
                                    Errors.warn($str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror($$$continue_anyway, $str3$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                }


                    }
                    final SubLObject _prev_bind_0_$1256 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1257 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1257 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind($$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1257 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1258 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind(source == $OLD ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1259 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1258 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1258 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1267 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1268 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind(NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_all_of_nodes_to_any_of_nodes_p(nodes1, nodes2);
                                    } finally {
                                        if (NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1268, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1267, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1258, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1258, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1259, thread);
                                }
                                if (source == $RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            } finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1258, thread);
                            }
                            if (source == $RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1257, thread);
                        }
                    } finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1257, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1257, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1256, thread);
                    }
                } finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1256, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1255, thread);
                }
            } finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1256, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1255, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1254, thread);
            }
        } finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there is any node in NODES2 that has a path from each of NODES1.
     */
    @LispMethod(comment = "@return booleanp; whether there is any node in NODES2 that has a path from each of NODES1.")
    public static final SubLObject sbhl_path_from_all_of_nodes_to_any_of_nodes_p_alt(SubLObject nodes1, SubLObject nodes2) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject goals = nodes2;
                SubLObject result = NIL;
                {
                    SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                    SubLObject _prev_bind_1 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                        {
                            SubLObject cdolist_list_var = nodes1;
                            SubLObject start = NIL;
                            for (start = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , start = cdolist_list_var.first()) {
                                {
                                    SubLObject _prev_bind_0_1231 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                        {
                                            SubLObject _prev_bind_0_1232 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                            try {
                                                sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                                {
                                                    SubLObject _prev_bind_0_1233 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                                        sbhl_marking_methods.sbhl_mark_closure_as_marked(start);
                                                    } finally {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_1233, thread);
                                                    }
                                                }
                                                {
                                                    SubLObject candidates = nodes2;
                                                    SubLObject cdolist_list_var_1234 = candidates;
                                                    SubLObject candidate = NIL;
                                                    for (candidate = cdolist_list_var_1234.first(); NIL != cdolist_list_var_1234; cdolist_list_var_1234 = cdolist_list_var_1234.rest() , candidate = cdolist_list_var_1234.first()) {
                                                        if (NIL == sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(candidate)) {
                                                            goals = remove(candidate, goals, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                        }
                                                    }
                                                }
                                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                            } finally {
                                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_1232, thread);
                                            }
                                        }
                                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                    } finally {
                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_1231, thread);
                                    }
                                }
                            }
                            result = list_utilities.sublisp_boolean(goals);
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1, thread);
                        sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0, thread);
                    }
                }
                return result;
            }
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is any node in NODES2 that has a path from each of NODES1.
     */
    @LispMethod(comment = "@return booleanp; whether there is any node in NODES2 that has a path from each of NODES1.")
    public static SubLObject sbhl_path_from_all_of_nodes_to_any_of_nodes_p(final SubLObject nodes1, final SubLObject nodes2) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject goals = nodes2;
        SubLObject result = NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            SubLObject cdolist_list_var = nodes1;
            SubLObject start = NIL;
            start = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                final SubLObject _prev_bind_0_$1269 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                    try {
                        final SubLObject _prev_bind_0_$1270 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                            try {
                                final SubLObject _prev_bind_0_$1271 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    sbhl_marking_methods.sbhl_mark_closure_as_marked(start);
                                } finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_$1271, thread);
                                }
                                SubLObject cdolist_list_var_$1272 = nodes2;
                                SubLObject candidate = NIL;
                                candidate = cdolist_list_var_$1272.first();
                                while (NIL != cdolist_list_var_$1272) {
                                    if (NIL == sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(candidate)) {
                                        goals = remove(candidate, goals, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    }
                                    cdolist_list_var_$1272 = cdolist_list_var_$1272.rest();
                                    candidate = cdolist_list_var_$1272.first();
                                } 
                            } finally {
                                final SubLObject _prev_bind_0_$1272 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                    final SubLObject _values = getValuesAsVector();
                                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                    restoreValuesFromVector(_values);
                                } finally {
                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$1272, thread);
                                }
                            }
                        } finally {
                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1270, thread);
                        }
                    } finally {
                        final SubLObject _prev_bind_0_$1273 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values2 = getValuesAsVector();
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            restoreValuesFromVector(_values2);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$1273, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1269, thread);
                }
                cdolist_list_var = cdolist_list_var.rest();
                start = cdolist_list_var.first();
            } 
            result = list_utilities.sublisp_boolean(goals);
        } finally {
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path from any node of NODES1 to all of NODES2.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path from any node of NODES1 to all of NODES2.")
    public static final SubLObject sbhl_any_predicate_relation_with_all_p_alt(SubLObject module, SubLObject nodes1, SubLObject nodes2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        SubLTrampolineFile.checkType(module, SBHL_MODULE_P);
        {
            SubLObject path_to_allP = NIL;
            if (NIL == path_to_allP) {
                {
                    SubLObject csome_list_var = nodes1;
                    SubLObject node1 = NIL;
                    for (node1 = csome_list_var.first(); !((NIL != path_to_allP) || (NIL == csome_list_var)); csome_list_var = csome_list_var.rest() , node1 = csome_list_var.first()) {
                        if (NIL != com.cyc.cycjava.cycl.sbhl.sbhl_search_methods.sbhl_predicate_relation_with_all_p(module, node1, nodes2, mt, tv)) {
                            path_to_allP = T;
                        }
                    }
                }
            }
            return path_to_allP;
        }
    }

    /**
     *
     *
     * @return booleanp; whether there is a forward true path from any node of NODES1 to all of NODES2.
     */
    @LispMethod(comment = "@return booleanp; whether there is a forward true path from any node of NODES1 to all of NODES2.")
    public static SubLObject sbhl_any_predicate_relation_with_all_p(final SubLObject module, final SubLObject nodes1, final SubLObject nodes2, SubLObject mt, SubLObject tv) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (tv == UNPROVIDED) {
            tv = NIL;
        }
        assert NIL != sbhl_module_vars.sbhl_module_p(module) : "! sbhl_module_vars.sbhl_module_p(module) " + ("sbhl_module_vars.sbhl_module_p(module) " + "CommonSymbols.NIL != sbhl_module_vars.sbhl_module_p(module) ") + module;
        SubLObject path_to_allP = NIL;
        if (NIL != set.set_p(nodes1)) {
            final SubLObject set_contents_var = set.do_set_internal(nodes1);
            SubLObject basis_object;
            SubLObject state;
            SubLObject node1;
            for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); (NIL == path_to_allP) && (NIL == set_contents.do_set_contents_doneP(basis_object, state)); state = set_contents.do_set_contents_update_state(state)) {
                node1 = set_contents.do_set_contents_next(basis_object, state);
                if ((NIL != set_contents.do_set_contents_element_validP(state, node1)) && (NIL != sbhl_predicate_relation_with_all_p(module, node1, nodes2, mt, tv))) {
                    path_to_allP = T;
                }
            }
        } else
            if (nodes1.isList()) {
                if (NIL == path_to_allP) {
                    SubLObject csome_list_var = nodes1;
                    SubLObject node2 = NIL;
                    node2 = csome_list_var.first();
                    while ((NIL == path_to_allP) && (NIL != csome_list_var)) {
                        if (NIL != sbhl_predicate_relation_with_all_p(module, node2, nodes2, mt, tv)) {
                            path_to_allP = T;
                        }
                        csome_list_var = csome_list_var.rest();
                        node2 = csome_list_var.first();
                    } 
                }
            } else {
                Errors.error($str56$_A_is_neither_SET_P_nor_LISTP_, nodes1);
            }

        return path_to_allP;
    }

    public static SubLObject incompatible_mt_related_moduleP(final SubLObject module) {
        final SubLObject pred = sbhl_module_vars.get_sbhl_module_link_pred(module);
        if (pred.eql($$incompatibleMt) || pred.eql($$intensionallyIncompatibleMt)) {
            return T;
        }
        return NIL;
    }

    public static SubLObject declare_sbhl_search_methods_file() {
        declareFunction("sbhl_all_forward_true_nodes", "SBHL-ALL-FORWARD-TRUE-NODES", 2, 2, false);
        declareFunction("sbhl_all_forward_false_nodes", "SBHL-ALL-FORWARD-FALSE-NODES", 2, 2, false);
        declareFunction("sbhl_all_backward_true_nodes", "SBHL-ALL-BACKWARD-TRUE-NODES", 2, 2, false);
        declareFunction("sbhl_all_backward_false_nodes", "SBHL-ALL-BACKWARD-FALSE-NODES", 2, 2, false);
        declareFunction("sbhl_transitive_closure", "SBHL-TRANSITIVE-CLOSURE", 1, 0, false);
        declareFunction("sbhl_all_forward_true_nodes_with_prune", "SBHL-ALL-FORWARD-TRUE-NODES-WITH-PRUNE", 3, 2, false);
        declareFunction("sbhl_all_backward_true_nodes_with_prune", "SBHL-ALL-BACKWARD-TRUE-NODES-WITH-PRUNE", 3, 2, false);
        declareFunction("sbhl_union_all_forward_true_nodes", "SBHL-UNION-ALL-FORWARD-TRUE-NODES", 2, 2, false);
        declareFunction("sbhl_union_all_backward_true_nodes", "SBHL-UNION-ALL-BACKWARD-TRUE-NODES", 2, 2, false);
        declareFunction("sbhl_union_nodes_transitive_closures", "SBHL-UNION-NODES-TRANSITIVE-CLOSURES", 1, 0, false);
        declareFunction("sbhl_gather_dead_end_nodes", "SBHL-GATHER-DEAD-END-NODES", 1, 0, false);
        declareFunction("sbhl_extremes", "SBHL-EXTREMES", 1, 0, false);
        declareFunction("sbhl_leaf_nodes", "SBHL-LEAF-NODES", 2, 2, false);
        declareFunction("sbhl_root_nodes", "SBHL-ROOT-NODES", 2, 2, false);
        declareFunction("sbhl_max_true_disjoins", "SBHL-MAX-TRUE-DISJOINS", 2, 2, false);
        declareFunction("sbhl_min_asserted_false_disjoins", "SBHL-MIN-ASSERTED-FALSE-DISJOINS", 2, 2, false);
        declareFunction("sbhl_min_implied_false_disjoins", "SBHL-MIN-IMPLIED-FALSE-DISJOINS", 2, 2, false);
        declareFunction("sbhl_implied_min_false_disjoins", "SBHL-IMPLIED-MIN-FALSE-DISJOINS", 2, 2, false);
        declareFunction("sbhl_gather_first_true_disjoin", "SBHL-GATHER-FIRST-TRUE-DISJOIN", 2, 2, false);
        declareFunction("sbhl_sample_leaf_nodes", "SBHL-SAMPLE-LEAF-NODES", 2, 3, false);
        declareFunction("sbhl_sample_different_leaf_nodes", "SBHL-SAMPLE-DIFFERENT-LEAF-NODES", 3, 3, false);
        declareFunction("sbhl_sample_extremal_nodes", "SBHL-SAMPLE-EXTREMAL-NODES", 2, 1, false);
        declareFunction("sbhl_map_all_forward_true_nodes", "SBHL-MAP-ALL-FORWARD-TRUE-NODES", 3, 2, false);
        declareFunction("sbhl_map_all_forward_true_nodes_if", "SBHL-MAP-ALL-FORWARD-TRUE-NODES-IF", 4, 2, false);
        declareFunction("sbhl_map_and_mark_forward_true_nodes_in_space", "SBHL-MAP-AND-MARK-FORWARD-TRUE-NODES-IN-SPACE", 3, 2, false);
        declareFunction("sbhl_map_all_backward_true_nodes", "SBHL-MAP-ALL-BACKWARD-TRUE-NODES", 3, 2, false);
        declareFunction("sbhl_simply_map_all_backward_true_nodes", "SBHL-SIMPLY-MAP-ALL-BACKWARD-TRUE-NODES", 3, 2, false);
        declareFunction("sbhl_map_union_all_forward_true_nodes", "SBHL-MAP-UNION-ALL-FORWARD-TRUE-NODES", 3, 2, false);
        declareFunction("sbhl_map_union_all_backward_true_nodes", "SBHL-MAP-UNION-ALL-BACKWARD-TRUE-NODES", 3, 2, false);
        declareFunction("sbhl_simply_union_all_backward_true_nodes", "SBHL-SIMPLY-UNION-ALL-BACKWARD-TRUE-NODES", 2, 2, false);
        declareFunction("sbhl_union_simply_all_backward_true_edges", "SBHL-UNION-SIMPLY-ALL-BACKWARD-TRUE-EDGES", 2, 2, false);
        declareFunction("sbhl_simply_union_all_backward_true_nodes_such_that", "SBHL-SIMPLY-UNION-ALL-BACKWARD-TRUE-NODES-SUCH-THAT", 3, 2, false);
        declareFunction("sbhl_gather_all_forward_true_nodes", "SBHL-GATHER-ALL-FORWARD-TRUE-NODES", 3, 3, false);
        declareFunction("sbhl_gather_all_backward_true_nodes", "SBHL-GATHER-ALL-BACKWARD-TRUE-NODES", 3, 3, false);
        declareFunction("sbhl_gather_closure", "SBHL-GATHER-CLOSURE", 3, 0, false);
        declareFunction("sbhl_gather_first_among_all_forward_true_nodes", "SBHL-GATHER-FIRST-AMONG-ALL-FORWARD-TRUE-NODES", 3, 3, false);
        declareFunction("sbhl_gather_first_among_forward_true_nodes_in_space", "SBHL-GATHER-FIRST-AMONG-FORWARD-TRUE-NODES-IN-SPACE", 3, 3, false);
        declareFunction("sbhl_gather_first_among_all_backward_true_nodes", "SBHL-GATHER-FIRST-AMONG-ALL-BACKWARD-TRUE-NODES", 3, 3, false);
        declareFunction("sbhl_simply_gather_first_among_all_forward_true_nodes", "SBHL-SIMPLY-GATHER-FIRST-AMONG-ALL-FORWARD-TRUE-NODES", 3, 3, false);
        declareFunction("sbhl_simply_gather_first_among_all_backward_true_nodes", "SBHL-SIMPLY-GATHER-FIRST-AMONG-ALL-BACKWARD-TRUE-NODES", 3, 3, false);
        declareFunction("sbhl_gather_first_among_closure", "SBHL-GATHER-FIRST-AMONG-CLOSURE", 3, 0, false);
        declareFunction("sbhl_simply_gather_first_among_all_forward_true_nodes_with_prune", "SBHL-SIMPLY-GATHER-FIRST-AMONG-ALL-FORWARD-TRUE-NODES-WITH-PRUNE", 3, 3, false);
        declareFunction("sbhl_simply_gather_first_among_all_backward_true_nodes_with_prune", "SBHL-SIMPLY-GATHER-FIRST-AMONG-ALL-BACKWARD-TRUE-NODES-WITH-PRUNE", 3, 3, false);
        declareFunction("sbhl_gather_first_among_closure_with_prune", "SBHL-GATHER-FIRST-AMONG-CLOSURE-WITH-PRUNE", 3, 0, false);
        declareFunction("sbhl_all_forward_true_nodes_if", "SBHL-ALL-FORWARD-TRUE-NODES-IF", 3, 2, false);
        declareFunction("sbhl_all_backward_true_nodes_if", "SBHL-ALL-BACKWARD-TRUE-NODES-IF", 3, 2, false);
        declareFunction("sbhl_closure_if", "SBHL-CLOSURE-IF", 2, 0, false);
        declareFunction("sbhl_all_forward_true_nodes_if_with_pruning", "SBHL-ALL-FORWARD-TRUE-NODES-IF-WITH-PRUNING", 3, 2, false);
        declareFunction("sbhl_all_backward_true_nodes_if_with_pruning", "SBHL-ALL-BACKWARD-TRUE-NODES-IF-WITH-PRUNING", 3, 2, false);
        declareFunction("sbhl_closure_if_and_stop_unless", "SBHL-CLOSURE-IF-AND-STOP-UNLESS", 2, 0, false);
        declareFunction("sbhl_extremal_nodes", "SBHL-EXTREMAL-NODES", 1, 0, false);
        declareFunction("max_nodes_backward", "MAX-NODES-BACKWARD", 2, 2, false);
        declareFunction("sbhl_independent_cycles", "SBHL-INDEPENDENT-CYCLES", 1, 0, false);
        declareFunction("max_nodes_forward", "MAX-NODES-FORWARD", 2, 2, false);
        declareFunction("max_nodes_direction", "MAX-NODES-DIRECTION", 1, 0, false);
        declareFunction("sbhl_min_nodes", "SBHL-MIN-NODES", 2, 2, false);
        declareFunction("sbhl_max_nodes", "SBHL-MAX-NODES", 2, 3, false);
        declareFunction("sbhl_min_forward_true_link_nodes", "SBHL-MIN-FORWARD-TRUE-LINK-NODES", 2, 2, false);
        declareFunction("sbhl_max_forward_true_link_nodes", "SBHL-MAX-FORWARD-TRUE-LINK-NODES", 2, 2, false);
        declareFunction("sbhl_min_forward_false_link_nodes", "SBHL-MIN-FORWARD-FALSE-LINK-NODES", 2, 2, false);
        declareFunction("sbhl_max_forward_false_link_nodes", "SBHL-MAX-FORWARD-FALSE-LINK-NODES", 2, 2, false);
        declareFunction("sbhl_min_backward_true_link_nodes", "SBHL-MIN-BACKWARD-TRUE-LINK-NODES", 2, 2, false);
        declareFunction("sbhl_max_backward_true_link_nodes", "SBHL-MAX-BACKWARD-TRUE-LINK-NODES", 2, 2, false);
        declareFunction("sbhl_min_backward_false_link_nodes", "SBHL-MIN-BACKWARD-FALSE-LINK-NODES", 2, 2, false);
        declareFunction("sbhl_max_backward_false_link_nodes", "SBHL-MAX-BACKWARD-FALSE-LINK-NODES", 2, 2, false);
        declareFunction("sbhl_stop_at_horizon", "SBHL-STOP-AT-HORIZON", 1, 0, false);
        new sbhl_search_methods.$sbhl_stop_at_horizon$UnaryFunction();
        declareFunction("sbhl_mark_closure_up_to_horizon", "SBHL-MARK-CLOSURE-UP-TO-HORIZON", 1, 0, false);
        declareFunction("sbhl_common_horizon", "SBHL-COMMON-HORIZON", 1, 1, false);
        declareFunction("sbhl_min_ceilings", "SBHL-MIN-CEILINGS", 2, 3, false);
        declareFunction("sbhl_max_floors", "SBHL-MAX-FLOORS", 2, 4, false);
        declareFunction("sbhl_max_floors_pruning_cycles", "SBHL-MAX-FLOORS-PRUNING-CYCLES", 2, 3, false);
        declareFunction("sbhl_prune_unwanted_extremal_cycles", "SBHL-PRUNE-UNWANTED-EXTREMAL-CYCLES", 3, 2, false);
        declareFunction("sbhl_ceilings", "SBHL-CEILINGS", 2, 3, false);
        declareFunction("sbhl_floors", "SBHL-FLOORS", 2, 3, false);
        declareFunction("sbhl_predicate_relation_to_which", "SBHL-PREDICATE-RELATION-TO-WHICH", 3, 3, false);
        declareFunction("sbhl_which_with_predicate_relation", "SBHL-WHICH-WITH-PREDICATE-RELATION", 3, 2, false);
        declareFunction("sbhl_predicate_relation_to_which_excluding_link_node", "SBHL-PREDICATE-RELATION-TO-WHICH-EXCLUDING-LINK-NODE", 4, 2, false);
        declareFunction("sbhl_inverse_relation_to_which", "SBHL-INVERSE-RELATION-TO-WHICH", 3, 2, false);
        declareFunction("sbhl_gather_first_target_marked_node", "SBHL-GATHER-FIRST-TARGET-MARKED-NODE", 1, 0, false);
        declareFunction("sbhl_first_common_horizon", "SBHL-FIRST-COMMON-HORIZON", 2, 0, false);
        declareFunction("sbhl_first_floor_of_node_pair", "SBHL-FIRST-FLOOR-OF-NODE-PAIR", 3, 2, false);
        declareFunction("sbhl_first_ceiling_of_node_pair", "SBHL-FIRST-CEILING-OF-NODE-PAIR", 3, 2, false);
        declareFunction("sbhl_forward_true_goals_with_no_path_from_nodes", "SBHL-FORWARD-TRUE-GOALS-WITH-NO-PATH-FROM-NODES", 3, 2, false);
        declareFunction("sbhl_all_goals_with_no_path_from_nodes", "SBHL-ALL-GOALS-WITH-NO-PATH-FROM-NODES", 2, 0, false);
        declareFunction("sbhl_all_forward_true_nodes_between", "SBHL-ALL-FORWARD-TRUE-NODES-BETWEEN", 3, 2, false);
        declareFunction("sbhl_closure_between", "SBHL-CLOSURE-BETWEEN", 2, 0, false);
        declareFunction("sbhl_all_forward_true_nodes_among", "SBHL-ALL-FORWARD-TRUE-NODES-AMONG", 3, 2, false);
        declareFunction("sbhl_all_backward_true_nodes_among", "SBHL-ALL-BACKWARD-TRUE-NODES-AMONG", 3, 2, false);
        declareFunction("sbhl_closure_among", "SBHL-CLOSURE-AMONG", 2, 0, false);
        declareFunction("sbhl_gather_dependent_nodes", "SBHL-GATHER-DEPENDENT-NODES", 1, 0, false);
        declareFunction("sbhl_push_dependent_nodes_onto_result", "SBHL-PUSH-DEPENDENT-NODES-ONTO-RESULT", 1, 0, false);
        declareFunction("sbhl_check_target_marking_for_dependence", "SBHL-CHECK-TARGET-MARKING-FOR-DEPENDENCE", 1, 0, false);
        declareFunction("sbhl_dependent_nodes", "SBHL-DEPENDENT-NODES", 1, 0, false);
        declareFunction("sbhl_all_dependent_backward_true_nodes", "SBHL-ALL-DEPENDENT-BACKWARD-TRUE-NODES", 2, 2, false);
        declareFunction("sbhl_predicate_relation_p", "SBHL-PREDICATE-RELATION-P", 3, 2, false);
        declareFunction("sbhl_predicate_relation_in_space_p", "SBHL-PREDICATE-RELATION-IN-SPACE-P", 3, 2, false);
        declareFunction("sbhl_non_justifying_predicate_relation_p", "SBHL-NON-JUSTIFYING-PREDICATE-RELATION-P", 3, 2, false);
        declareFunction("sbhl_predicate_relation_within_multiple_searches_p", "SBHL-PREDICATE-RELATION-WITHIN-MULTIPLE-SEARCHES-P", 5, 0, false);
        declareFunction("sbhl_inverse_relation_p", "SBHL-INVERSE-RELATION-P", 3, 2, false);
        declareFunction("sbhl_false_predicate_relation_p", "SBHL-FALSE-PREDICATE-RELATION-P", 3, 2, false);
        declareFunction("sbhl_false_inverse_relation_p", "SBHL-FALSE-INVERSE-RELATION-P", 3, 2, false);
        declareFunction("sbhl_path_from_node_to_node_p", "SBHL-PATH-FROM-NODE-TO-NODE-P", 2, 0, false);
        declareFunction("sbhl_disjoins_relation_p", "SBHL-DISJOINS-RELATION-P", 3, 2, false);
        declareFunction("why_sbhl_predicate_relation_p", "WHY-SBHL-PREDICATE-RELATION-P", 3, 3, false);
        declareFunction("why_sbhl_false_predicate_relation_p", "WHY-SBHL-FALSE-PREDICATE-RELATION-P", 3, 3, false);
        declareFunction("why_sbhl_relationP", "WHY-SBHL-RELATION?", 3, 3, false);
        declareFunction("sbhl_predicate_relation_with_any_p", "SBHL-PREDICATE-RELATION-WITH-ANY-P", 3, 2, false);
        declareFunction("why_some_sbhl_predicate_relation_among_p", "WHY-SOME-SBHL-PREDICATE-RELATION-AMONG-P", 3, 3, false);
        declareFunction("sbhl_inverse_relation_with_any_p", "SBHL-INVERSE-RELATION-WITH-ANY-P", 3, 2, false);
        declareFunction("sbhl_false_predicate_relation_with_any_p", "SBHL-FALSE-PREDICATE-RELATION-WITH-ANY-P", 3, 2, false);
        declareFunction("sbhl_premark_union_nodes_closures", "SBHL-PREMARK-UNION-NODES-CLOSURES", 1, 0, false);
        declareFunction("sbhl_path_from_node_to_any_of_nodes_p", "SBHL-PATH-FROM-NODE-TO-ANY-OF-NODES-P", 2, 0, false);
        declareFunction("sbhl_disjoins_relation_with_any_p", "SBHL-DISJOINS-RELATION-WITH-ANY-P", 3, 2, false);
        declareFunction("sbhl_predicate_relation_with_all_p", "SBHL-PREDICATE-RELATION-WITH-ALL-P", 3, 2, false);
        declareFunction("sbhl_path_from_node_to_all_of_nodes_p", "SBHL-PATH-FROM-NODE-TO-ALL-OF-NODES-P", 2, 0, false);
        declareFunction("sbhl_any_with_predicate_relation_p", "SBHL-ANY-WITH-PREDICATE-RELATION-P", 3, 2, false);
        declareFunction("sbhl_any_with_false_inverse_relation_p", "SBHL-ANY-WITH-FALSE-INVERSE-RELATION-P", 3, 2, false);
        declareFunction("sbhl_premark_node_closure", "SBHL-PREMARK-NODE-CLOSURE", 1, 0, false);
        declareFunction("sbhl_path_from_any_of_nodes_to_node_p", "SBHL-PATH-FROM-ANY-OF-NODES-TO-NODE-P", 2, 0, false);
        declareFunction("sbhl_any_with_disjoins_relation_p", "SBHL-ANY-WITH-DISJOINS-RELATION-P", 3, 2, false);
        declareFunction("sbhl_all_with_predicate_relation_p", "SBHL-ALL-WITH-PREDICATE-RELATION-P", 3, 2, false);
        declareFunction("sbhl_all_with_false_predicate_relation_p", "SBHL-ALL-WITH-FALSE-PREDICATE-RELATION-P", 3, 2, false);
        declareFunction("sbhl_all_with_false_inverse_relation_p", "SBHL-ALL-WITH-FALSE-INVERSE-RELATION-P", 3, 2, false);
        declareFunction("sbhl_path_from_all_of_nodes_to_node_p", "SBHL-PATH-FROM-ALL-OF-NODES-TO-NODE-P", 2, 0, false);
        declareFunction("sbhl_all_with_disjoins_relation_p", "SBHL-ALL-WITH-DISJOINS-RELATION-P", 3, 2, false);
        declareFunction("sbhl_predicate_relation_between_any_p", "SBHL-PREDICATE-RELATION-BETWEEN-ANY-P", 3, 2, false);
        declareFunction("sbhl_path_from_any_of_nodes_to_any_of_nodes_p", "SBHL-PATH-FROM-ANY-OF-NODES-TO-ANY-OF-NODES-P", 2, 0, false);
        declareFunction("sbhl_all_with_predicate_relation_with_any_p", "SBHL-ALL-WITH-PREDICATE-RELATION-WITH-ANY-P", 3, 2, false);
        declareFunction("sbhl_path_from_all_of_nodes_to_any_of_nodes_p", "SBHL-PATH-FROM-ALL-OF-NODES-TO-ANY-OF-NODES-P", 2, 0, false);
        declareFunction("sbhl_any_predicate_relation_with_all_p", "SBHL-ANY-PREDICATE-RELATION-WITH-ALL-P", 3, 2, false);
        declareFunction("incompatible_mt_related_moduleP", "INCOMPATIBLE-MT-RELATED-MODULE?", 1, 0, false);
        return NIL;
    }

    public static SubLObject init_sbhl_search_methods_file() {
        defparameter("*SBHL-SEARCH-SELF-INCOMPATIBILITY-CHECK-DISABLED?*", NIL);
        defparameter("*DEBUG-SBHL-CACHE-INCONSISTENCY-PROBLEM?*", NIL);
        return NIL;
    }

    public static SubLObject setup_sbhl_search_methods_file() {
        return NIL;
    }

    @Override
    public void declareFunctions() {
        declare_sbhl_search_methods_file();
    }

    @Override
    public void initializeVariables() {
        init_sbhl_search_methods_file();
    }

    @Override
    public void runTopLevelForms() {
        setup_sbhl_search_methods_file();
    }

    static {
    }

    public static final class $sbhl_stop_at_horizon$UnaryFunction extends UnaryFunction {
        public $sbhl_stop_at_horizon$UnaryFunction() {
            super(extractFunctionNamed("SBHL-STOP-AT-HORIZON"));
        }

        @Override
        public SubLObject processItem(final SubLObject arg1) {
            return sbhl_stop_at_horizon(arg1);
        }
    }

    static private final SubLString $str_alt3$_A_is_not_a__A = makeString("~A is not a ~A");

    static private final SubLString $str_alt8$_A_is_not_a_valid__sbhl_type_erro = makeString("~A is not a valid *sbhl-type-error-action* value");

    static private final SubLString $str_alt15$Node__a_does_not_pass_sbhl_type_t = makeString("Node ~a does not pass sbhl-type-test ~a~%");

    static private final SubLString $str_alt51$Invalid_TV_argument__a__or__sbhl_ = makeString("Invalid TV argument ~a, or *sbhl-tv* ~a");
}

/**
 * Total time: 9308 ms
 */
