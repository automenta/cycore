/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 */
package com.cyc.cycjava.cycl.inference;


import static com.cyc.cycjava.cycl.access_macros.register_external_symbol;
import static com.cyc.cycjava.cycl.access_macros.register_macro_helper;
import static com.cyc.cycjava.cycl.bindings.apply_bindings;
import static com.cyc.cycjava.cycl.bindings.bindings_values;
import static com.cyc.cycjava.cycl.bindings.compare_lists_of_binding_lists;
import static com.cyc.cycjava.cycl.bindings.inferencify_kb_set_of_binding_sets;
import static com.cyc.cycjava.cycl.cfasl.$cfasl_common_symbols$;
import static com.cyc.cycjava.cycl.cfasl.$cfasl_input_guid_string_resource$;
import static com.cyc.cycjava.cycl.cfasl.cfasl_input;
import static com.cyc.cycjava.cycl.cfasl.cfasl_output_externalized;
import static com.cyc.cycjava.cycl.cfasl.cfasl_set_common_symbols;
import static com.cyc.cycjava.cycl.cfasl.cfasl_set_common_symbols_simple;
import static com.cyc.cycjava.cycl.cfasl.get_new_cfasl_input_guid_string_resource;
import static com.cyc.cycjava.cycl.constant_handles.reader_make_constant_shell;
import static com.cyc.cycjava.cycl.control_vars.$inference_debugP$;
import static com.cyc.cycjava.cycl.control_vars.$kbq_run_query_auto_destroy_enabledP$;
import static com.cyc.cycjava.cycl.control_vars.$kbq_run_query_non_continuable_enabledP$;
import static com.cyc.cycjava.cycl.cyc_testing.generic_testing.define_test_case_table_int;
import static com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_thinking.kct_thinking_runstate;
import static com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_thinking.kct_thinking_set_runstate_id;
import static com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_utils.kct_binding_sets_cardinality;
import static com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_utils.kct_binding_sets_max_cardinality;
import static com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_utils.kct_binding_sets_min_cardinality;
import static com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_utils.kct_bindings_unimportantP;
import static com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_utils.kct_exact_set_of_binding_sets;
import static com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_utils.kct_query_specification;
import static com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_utils.kct_test_metrics;
import static com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_utils.kct_test_runnableP;
import static com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_utils.kct_transform_query_results_for_comparison;
import static com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_utils.kct_unwanted_binding_sets;
import static com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_utils.kct_wanted_binding_sets;
import static com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_variables.kct_mt;
import static com.cyc.cycjava.cycl.cycl_grammar.cycl_literal_p;
import static com.cyc.cycjava.cycl.cycl_utilities.formula_arg2;
import static com.cyc.cycjava.cycl.cycl_utilities.nat_arg1;
import static com.cyc.cycjava.cycl.czer_main.unquote_quoted_term;
import static com.cyc.cycjava.cycl.czer_utilities.unwrap_if_ist_permissive;
import static com.cyc.cycjava.cycl.dictionary.dictionary_contents;
import static com.cyc.cycjava.cycl.dictionary.dictionary_enter;
import static com.cyc.cycjava.cycl.dictionary.dictionary_lookup;
import static com.cyc.cycjava.cycl.dictionary.dictionary_remove;
import static com.cyc.cycjava.cycl.dictionary.new_dictionary;
import static com.cyc.cycjava.cycl.dictionary_contents.do_dictionary_contents_doneP;
import static com.cyc.cycjava.cycl.dictionary_contents.do_dictionary_contents_finalize;
import static com.cyc.cycjava.cycl.dictionary_contents.do_dictionary_contents_key_value;
import static com.cyc.cycjava.cycl.dictionary_contents.do_dictionary_contents_next;
import static com.cyc.cycjava.cycl.dictionary_contents.do_dictionary_contents_state;
import static com.cyc.cycjava.cycl.dictionary_utilities.dictionary_push;
import static com.cyc.cycjava.cycl.el_utilities.el_conjunction_p;
import static com.cyc.cycjava.cycl.el_utilities.el_existential_p;
import static com.cyc.cycjava.cycl.el_utilities.el_formula_with_operator_p;
import static com.cyc.cycjava.cycl.el_utilities.formula_arity;
import static com.cyc.cycjava.cycl.el_utilities.make_el_set;
import static com.cyc.cycjava.cycl.file_utilities.file_existsP;
import static com.cyc.cycjava.cycl.file_utilities.file_valid_for_writing_p;
import static com.cyc.cycjava.cycl.file_utilities.possibly_update_keepalive_file;
import static com.cyc.cycjava.cycl.format_nil.$format_nil_percent$;
import static com.cyc.cycjava.cycl.format_nil.force_format;
import static com.cyc.cycjava.cycl.format_nil.format_nil_a_no_copy;
import static com.cyc.cycjava.cycl.format_nil.format_nil_s_no_copy;
import static com.cyc.cycjava.cycl.format_nil.print_one_per_line;
import static com.cyc.cycjava.cycl.fort_types_interface.isa_collectionP;
import static com.cyc.cycjava.cycl.forts.fort_p;
import static com.cyc.cycjava.cycl.id_index.id_index_dense_objects;
import static com.cyc.cycjava.cycl.id_index.id_index_dense_objects_empty_p;
import static com.cyc.cycjava.cycl.id_index.id_index_objects_empty_p;
import static com.cyc.cycjava.cycl.id_index.id_index_skip_tombstones_p;
import static com.cyc.cycjava.cycl.id_index.id_index_sparse_objects;
import static com.cyc.cycjava.cycl.id_index.id_index_sparse_objects_empty_p;
import static com.cyc.cycjava.cycl.id_index.id_index_tombstone_p;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types.all_arete_query_metrics;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types.all_query_metrics;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types.avoided_inference_reason_p;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types.inference_error_suspend_status_message;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types.inference_error_suspend_status_p;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types.new_inference_error_suspend_status;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types.query_metric_p;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types.query_property_p;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.all_inferences;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.destroy_inference_and_problem_store;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_all_new_answers;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_bindings;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_count;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_id_index;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_args_to_new_cyc_query_form_string;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_compute_metrics;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_el_query;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_input_query_properties;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_mt;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.valid_inference_p;
import static com.cyc.cycjava.cycl.inference.harness.inference_strategist.with_query_abort_timeout_start_timer;
import static com.cyc.cycjava.cycl.inference.harness.inference_strategist.with_query_abort_timeout_stop_timer;
import static com.cyc.cycjava.cycl.integer_sequence_generator.integer_sequence_generator_next;
import static com.cyc.cycjava.cycl.integer_sequence_generator.new_integer_sequence_generator;
import static com.cyc.cycjava.cycl.isa.all_instances_among;
import static com.cyc.cycjava.cycl.isa.all_instances_in_all_mts;
import static com.cyc.cycjava.cycl.isa.isaP;
import static com.cyc.cycjava.cycl.isa.isa_in_any_mtP;
import static com.cyc.cycjava.cycl.kb_indexing_datastructures.indexed_term_p;
import static com.cyc.cycjava.cycl.kb_mapping_utilities.pred_values_in_any_mt;
import static com.cyc.cycjava.cycl.kb_mapping_utilities.some_pred_value_in_any_mt;
import static com.cyc.cycjava.cycl.kb_utilities.kbeq;
import static com.cyc.cycjava.cycl.kb_utilities.pretty_print_cycl_to_string;
import static com.cyc.cycjava.cycl.kb_utilities.sort_terms;
import static com.cyc.cycjava.cycl.keyhash_utilities.fast_intersection;
import static com.cyc.cycjava.cycl.list_utilities.add_to_end;
import static com.cyc.cycjava.cycl.list_utilities.alist_lookup_without_values;
import static com.cyc.cycjava.cycl.list_utilities.any_in_list;
import static com.cyc.cycjava.cycl.list_utilities.cons_count;
import static com.cyc.cycjava.cycl.list_utilities.delete_if_not;
import static com.cyc.cycjava.cycl.list_utilities.doubletonP;
import static com.cyc.cycjava.cycl.list_utilities.every_in_list;
import static com.cyc.cycjava.cycl.list_utilities.fast_intersect_all;
import static com.cyc.cycjava.cycl.list_utilities.fast_remove_duplicates;
import static com.cyc.cycjava.cycl.list_utilities.fast_set_difference;
import static com.cyc.cycjava.cycl.list_utilities.first_n;
import static com.cyc.cycjava.cycl.list_utilities.histogram;
import static com.cyc.cycjava.cycl.list_utilities.last_one;
import static com.cyc.cycjava.cycl.list_utilities.lengthLE;
import static com.cyc.cycjava.cycl.list_utilities.list_of_type_p;
import static com.cyc.cycjava.cycl.list_utilities.make_plist;
import static com.cyc.cycjava.cycl.list_utilities.member_eqP;
import static com.cyc.cycjava.cycl.list_utilities.merge_plist;
import static com.cyc.cycjava.cycl.list_utilities.middle_sublist;
import static com.cyc.cycjava.cycl.list_utilities.non_dotted_list_p;
import static com.cyc.cycjava.cycl.list_utilities.plist_lookup;
import static com.cyc.cycjava.cycl.list_utilities.pretty_print_histogram;
import static com.cyc.cycjava.cycl.list_utilities.pretty_print_plist;
import static com.cyc.cycjava.cycl.list_utilities.property_list_p;
import static com.cyc.cycjava.cycl.list_utilities.randomize_list;
import static com.cyc.cycjava.cycl.list_utilities.remove_if_not;
import static com.cyc.cycjava.cycl.list_utilities.safe_G;
import static com.cyc.cycjava.cycl.list_utilities.safe_L;
import static com.cyc.cycjava.cycl.list_utilities.safe_difference;
import static com.cyc.cycjava.cycl.list_utilities.safe_product;
import static com.cyc.cycjava.cycl.list_utilities.safe_quotient;
import static com.cyc.cycjava.cycl.list_utilities.safe_sum;
import static com.cyc.cycjava.cycl.list_utilities.sets_equalP;
import static com.cyc.cycjava.cycl.list_utilities.sets_equal_equalP;
import static com.cyc.cycjava.cycl.list_utilities.singletonP;
import static com.cyc.cycjava.cycl.list_utilities.sort_L;
import static com.cyc.cycjava.cycl.list_utilities.sublisp_boolean;
import static com.cyc.cycjava.cycl.memoization_state.caching_results;
import static com.cyc.cycjava.cycl.memoization_state.caching_state_clear;
import static com.cyc.cycjava.cycl.memoization_state.caching_state_enter_multi_key_n;
import static com.cyc.cycjava.cycl.memoization_state.caching_state_lookup;
import static com.cyc.cycjava.cycl.memoization_state.caching_state_remove_function_results_with_args;
import static com.cyc.cycjava.cycl.memoization_state.create_global_caching_state_for_name;
import static com.cyc.cycjava.cycl.memoization_state.note_globally_cached_function;
import static com.cyc.cycjava.cycl.memoization_state.register_hl_store_cache_clear_callback;
import static com.cyc.cycjava.cycl.memoization_state.sxhash_calc_3;
import static com.cyc.cycjava.cycl.misc_utilities.machine_bogomips;
import static com.cyc.cycjava.cycl.nart_handles.valid_nartP;
import static com.cyc.cycjava.cycl.number_utilities.compute_deltas;
import static com.cyc.cycjava.cycl.number_utilities.f_1X;
import static com.cyc.cycjava.cycl.number_utilities.mean;
import static com.cyc.cycjava.cycl.number_utilities.median;
import static com.cyc.cycjava.cycl.number_utilities.percent;
import static com.cyc.cycjava.cycl.number_utilities.positive_number_p;
import static com.cyc.cycjava.cycl.number_utilities.significant_digits;
import static com.cyc.cycjava.cycl.number_utilities.standard_deviation;
import static com.cyc.cycjava.cycl.number_utilities.summation;
import static com.cyc.cycjava.cycl.numeric_date_utilities.elapsed_seconds_string;
import static com.cyc.cycjava.cycl.numeric_date_utilities.timestring;
import static com.cyc.cycjava.cycl.operation_communication.kb_version_string;
import static com.cyc.cycjava.cycl.set.do_set_internal;
import static com.cyc.cycjava.cycl.set.new_set;
import static com.cyc.cycjava.cycl.set.set_add;
import static com.cyc.cycjava.cycl.set.set_element_list;
import static com.cyc.cycjava.cycl.set.set_memberP;
import static com.cyc.cycjava.cycl.set.set_p;
import static com.cyc.cycjava.cycl.set.set_remove;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_basis_object;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_doneP;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_element_validP;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_initial_state;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_next;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_update_state;
import static com.cyc.cycjava.cycl.set_utilities.construct_set_from_list;
import static com.cyc.cycjava.cycl.simplifier.conjoin;
import static com.cyc.cycjava.cycl.special_variable_state.bound_symbol_p;
import static com.cyc.cycjava.cycl.string_utilities.$new_line_string$;
import static com.cyc.cycjava.cycl.string_utilities.ends_with;
import static com.cyc.cycjava.cycl.string_utilities.non_empty_string_p;
import static com.cyc.cycjava.cycl.string_utilities.post_remove;
import static com.cyc.cycjava.cycl.string_utilities.str;
import static com.cyc.cycjava.cycl.string_utilities.string_first_n;
import static com.cyc.cycjava.cycl.string_utilities.string_tokenize;
import static com.cyc.cycjava.cycl.string_utilities.strip_final;
import static com.cyc.cycjava.cycl.string_utilities.substringP;
import static com.cyc.cycjava.cycl.string_utilities.whitespace_chars;
import static com.cyc.cycjava.cycl.subl_macro_promotions.$catch_error_message_target$;
import static com.cyc.cycjava.cycl.subl_macro_promotions.declare_defglobal;
import static com.cyc.cycjava.cycl.subl_promotions.make_process_with_args;
import static com.cyc.cycjava.cycl.subl_promotions.memberP;
import static com.cyc.cycjava.cycl.subl_promotions.positive_integer_p;
import static com.cyc.cycjava.cycl.system_info.cyc_revision_numbers;
import static com.cyc.cycjava.cycl.system_info.cyc_revision_string;
import static com.cyc.cycjava.cycl.utilities_macros.$is_noting_progressP$;
import static com.cyc.cycjava.cycl.utilities_macros.$last_percent_progress_index$;
import static com.cyc.cycjava.cycl.utilities_macros.$last_percent_progress_prediction$;
import static com.cyc.cycjava.cycl.utilities_macros.$percent_progress_start_time$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_count$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_elapsed_seconds_for_notification$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_last_pacification_time$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_note$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_notification_count$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_pacifications_since_last_nl$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_sofar$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_start_time$;
import static com.cyc.cycjava.cycl.utilities_macros.$progress_total$;
import static com.cyc.cycjava.cycl.utilities_macros.$silent_progressP$;
import static com.cyc.cycjava.cycl.utilities_macros.$suppress_all_progress_faster_than_seconds$;
import static com.cyc.cycjava.cycl.utilities_macros.$within_noting_percent_progress$;
import static com.cyc.cycjava.cycl.utilities_macros.note_percent_progress;
import static com.cyc.cycjava.cycl.utilities_macros.noting_percent_progress_postamble;
import static com.cyc.cycjava.cycl.utilities_macros.noting_percent_progress_preamble;
import static com.cyc.cycjava.cycl.utilities_macros.noting_progress_postamble;
import static com.cyc.cycjava.cycl.utilities_macros.noting_progress_preamble;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_asterisk;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.append;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.cons;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.listS;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.make_list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.nconc;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.nth;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.rplaca;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.bind;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.currentBinding;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.rebind;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.sublisp_throw;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.eq;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.equalp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.identity;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Eval.eval;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.apply;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.funcall;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntryKey;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntrySetIterator;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntryValue;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.iteratorHasNext;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.iteratorNextEntry;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.releaseEntrySetIterator;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Locks.make_lock;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Locks.release_lock;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Locks.seize_lock;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.add;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.divide;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.multiply;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.numE;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.numGE;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.numLE;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.subtract;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.truncate;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow.format;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.cconcatenate;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.count;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.count_if;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.delete_if;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.find_if;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.length;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.nreverse;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.position;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.remove;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.remove_if;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.def_csetf;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.makeStructDeclNative;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.register_method;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.boundp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_function;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_name;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_value;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.$is_thread_performing_cleanupP$;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Time.get_internal_real_time;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Time.get_universal_time;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.keywordp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.listp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.numberp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.stringp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.sublisp_null;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.arg2;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.getValuesAsVector;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.multiple_value_list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.nth_value_step_1;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.nth_value_step_2;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.resetMultipleValues;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.restoreValuesFromVector;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.values;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors.aref;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeBoolean;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeDouble;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeInteger;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeKeyword;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeString;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeSymbol;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeUninternedSymbol;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.cdestructuring_bind_error;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.destructuring_bind_must_consp;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.property_list_member;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.cadr;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.cddr;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.copy_list;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.getf;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.intersection;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.member;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.putf;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.remf;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.second;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.set_difference;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.subsetp;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.subst;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.union;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.$print_object_method_table$;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader.$read_default_float_format$;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader.bq_cons;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader.parse_integer;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.close;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.force_output;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.get_output_stream_string;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.make_private_string_output_stream;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.terpri;
import static com.cyc.tool.subl.util.SubLFiles.declareFunction;
import static com.cyc.tool.subl.util.SubLFiles.declareMacro;
import static com.cyc.tool.subl.util.SubLFiles.defconstant;
import static com.cyc.tool.subl.util.SubLFiles.deflexical;
import static com.cyc.tool.subl.util.SubLFiles.defparameter;

import java.util.Iterator;
import java.util.Map;

import org.armedbear.lisp.Lisp;

import com.cyc.cycjava.cycl.V12;
import com.cyc.cycjava.cycl.arguments;
import com.cyc.cycjava.cycl.assertions_high;
import com.cyc.cycjava.cycl.bindings;
import com.cyc.cycjava.cycl.cycl_grammar;
import com.cyc.cycjava.cycl.cycl_utilities;
import com.cyc.cycjava.cycl.czer_main;
import com.cyc.cycjava.cycl.czer_utilities;
import com.cyc.cycjava.cycl.deck;
import com.cyc.cycjava.cycl.dictionary;
import com.cyc.cycjava.cycl.dictionary_contents;
import com.cyc.cycjava.cycl.dictionary_utilities;
import com.cyc.cycjava.cycl.equals;
import com.cyc.cycjava.cycl.file_utilities;
import com.cyc.cycjava.cycl.format_nil;
import com.cyc.cycjava.cycl.fort_types_interface;
import com.cyc.cycjava.cycl.forts;
import com.cyc.cycjava.cycl.function_terms;
import com.cyc.cycjava.cycl.integer_sequence_generator;
import com.cyc.cycjava.cycl.isa;
import com.cyc.cycjava.cycl.iteration;
import com.cyc.cycjava.cycl.kb_cleanup;
import com.cyc.cycjava.cycl.kb_mapping_macros;
import com.cyc.cycjava.cycl.kb_mapping_utilities;
import com.cyc.cycjava.cycl.kb_utilities;
import com.cyc.cycjava.cycl.keyhash_utilities;
import com.cyc.cycjava.cycl.list_utilities;
import com.cyc.cycjava.cycl.memoization_state;
import com.cyc.cycjava.cycl.misc_utilities;
import com.cyc.cycjava.cycl.mt_relevance_macros;
import com.cyc.cycjava.cycl.nart_handles;
import com.cyc.cycjava.cycl.number_utilities;
import com.cyc.cycjava.cycl.numeric_date_utilities;
import com.cyc.cycjava.cycl.obsolete;
import com.cyc.cycjava.cycl.operation_communication;
import com.cyc.cycjava.cycl.process_utilities;
import com.cyc.cycjava.cycl.set;
import com.cyc.cycjava.cycl.set_contents;
import com.cyc.cycjava.cycl.set_utilities;
import com.cyc.cycjava.cycl.simplifier;
import com.cyc.cycjava.cycl.special_variable_state;
import com.cyc.cycjava.cycl.string_utilities;
import com.cyc.cycjava.cycl.subl_promotions;
import com.cyc.cycjava.cycl.system_info;
import com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_thinking;
import com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_utils;
import com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_variables;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem_store;
import com.cyc.cycjava.cycl.inference.harness.inference_kernel;
import com.cyc.cycjava.cycl.inference.harness.inference_metrics;
import com.cyc.cycjava.cycl.inference.harness.inference_strategist;
import com.cyc.cycjava.cycl.inference.harness.inference_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_graphs;
import com.cyc.cycjava.cycl.sbhl.sbhl_link_methods;
import com.cyc.cycjava.cycl.sbhl.sbhl_link_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_links;
import com.cyc.cycjava.cycl.sbhl.sbhl_macros;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_module_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_paranoia;
import com.cyc.cycjava.cycl.sbhl.sbhl_search_vars;
import com.cyc.cycjava.cycl.sksi.modeling_tools.interfaces.sksi_sks_manager;
import com.cyc.cycjava.cycl.sksi.query_sks.sksi_query_utilities;
import com.cyc.cycjava.cycl.sksi.sksi_infrastructure.sksi_infrastructure_utilities;
import com.cyc.cycjava.cycl.sksi.sksi_infrastructure.sksi_macros;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Environment;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Filesys;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Mapping;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sort;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.StreamsLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Strings;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLSpecialOperatorDeclarations;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDecl;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDeclNative;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.UnaryFunction;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.ZeroArityFunction;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLStructNative;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLFloat;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLInteger;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.compatibility;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.stream_macros;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.time_high;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.visitation;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLFiles;
import com.cyc.tool.subl.util.SubLFiles.LispMethod;
import com.cyc.tool.subl.util.SubLTrampolineFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;


/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 * module:      KBQ-QUERY-RUN
 * source file: /cyc/top/cycl/inference/kbq-query-run.lisp
 * created:     2019/07/03 17:37:43
 */
public final class kbq_query_run extends SubLTranslatedFile implements V12 {
    static private final SubLString $str_alt144$ = makeString("");

    public static final class $kct_set_runstate_native extends SubLStructNative {
        public SubLStructDecl getStructDecl() {
            return structDecl;
        }

        public SubLObject getField2() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.this.$id;
        }

        public SubLObject getField3() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.this.$lock;
        }

        public SubLObject getField4() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.this.$test_set;
        }

        public SubLObject getField5() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.this.$result;
        }

        public SubLObject getField6() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.this.$test_runstates;
        }

        public SubLObject getField7() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.this.$run_status;
        }

        public SubLObject getField8() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.this.$start;
        }

        public SubLObject getField9() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.this.$end;
        }

        public SubLObject setField2(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.this.$id = value;
        }

        public SubLObject setField3(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.this.$lock = value;
        }

        public SubLObject setField4(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.this.$test_set = value;
        }

        public SubLObject setField5(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.this.$result = value;
        }

        public SubLObject setField6(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.this.$test_runstates = value;
        }

        public SubLObject setField7(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.this.$run_status = value;
        }

        public SubLObject setField8(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.this.$start = value;
        }

        public SubLObject setField9(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.this.$end = value;
        }

        public SubLObject $id = Lisp.NIL;

        public SubLObject $lock = Lisp.NIL;

        public SubLObject $test_set = Lisp.NIL;

        public SubLObject $result = Lisp.NIL;

        public SubLObject $test_runstates = Lisp.NIL;

        public SubLObject $run_status = Lisp.NIL;

        public SubLObject $start = Lisp.NIL;

        public SubLObject $end = Lisp.NIL;

        private static final SubLStructDeclNative structDecl = makeStructDeclNative(com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.class, KCT_SET_RUNSTATE, KCT_SET_RUNSTATE_P, $list_alt295, $list_alt296, new String[]{ "$id", "$lock", "$test_set", "$result", "$test_runstates", "$run_status", "$start", "$end" }, $list_alt297, $list_alt298, DEFAULT_STRUCT_PRINT_FUNCTION);
    }

    public static final class $kct_runstate_native extends SubLStructNative {
        public SubLStructDecl getStructDecl() {
            return structDecl;
        }

        public SubLObject getField2() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$id;
        }

        public SubLObject getField3() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$lock;
        }

        public SubLObject getField4() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$test_spec;
        }

        public SubLObject getField5() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$result;
        }

        public SubLObject getField6() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$query_runstate;
        }

        public SubLObject getField7() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$test_set_runstate;
        }

        public SubLObject getField8() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$run_status;
        }

        public SubLObject getField9() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$start;
        }

        public SubLObject getField10() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$end;
        }

        public SubLObject setField2(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$id = value;
        }

        public SubLObject setField3(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$lock = value;
        }

        public SubLObject setField4(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$test_spec = value;
        }

        public SubLObject setField5(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$result = value;
        }

        public SubLObject setField6(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$query_runstate = value;
        }

        public SubLObject setField7(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$test_set_runstate = value;
        }

        public SubLObject setField8(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$run_status = value;
        }

        public SubLObject setField9(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$start = value;
        }

        public SubLObject setField10(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.this.$end = value;
        }

        public SubLObject $id = Lisp.NIL;

        public SubLObject $lock = Lisp.NIL;

        public SubLObject $test_spec = Lisp.NIL;

        public SubLObject $result = Lisp.NIL;

        public SubLObject $query_runstate = Lisp.NIL;

        public SubLObject $test_set_runstate = Lisp.NIL;

        public SubLObject $run_status = Lisp.NIL;

        public SubLObject $start = Lisp.NIL;

        public SubLObject $end = Lisp.NIL;

        private static final SubLStructDeclNative structDecl = makeStructDeclNative(com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.class, KCT_RUNSTATE, KCT_RUNSTATE_P, $list_alt263, $list_alt264, new String[]{ "$id", "$lock", "$test_spec", "$result", "$query_runstate", "$test_set_runstate", "$run_status", "$start", "$end" }, $list_alt265, $list_alt266, DEFAULT_STRUCT_PRINT_FUNCTION);
    }

    public static final class $kbq_runstate_native extends SubLStructNative {
        public SubLStructDecl getStructDecl() {
            return structDecl;
        }

        public SubLObject getField2() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native.this.$id;
        }

        public SubLObject getField3() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native.this.$lock;
        }

        public SubLObject getField4() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native.this.$query_spec;
        }

        public SubLObject getField5() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native.this.$inference;
        }

        public SubLObject getField6() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native.this.$result;
        }

        public SubLObject getField7() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native.this.$test_runstate;
        }

        public SubLObject getField8() {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native.this.$run_status;
        }

        public SubLObject setField2(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native.this.$id = value;
        }

        public SubLObject setField3(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native.this.$lock = value;
        }

        public SubLObject setField4(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native.this.$query_spec = value;
        }

        public SubLObject setField5(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native.this.$inference = value;
        }

        public SubLObject setField6(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native.this.$result = value;
        }

        public SubLObject setField7(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native.this.$test_runstate = value;
        }

        public SubLObject setField8(SubLObject value) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native.this.$run_status = value;
        }

        public SubLObject $id = Lisp.NIL;

        public SubLObject $lock = Lisp.NIL;

        public SubLObject $query_spec = Lisp.NIL;

        public SubLObject $inference = Lisp.NIL;

        public SubLObject $result = Lisp.NIL;

        public SubLObject $test_runstate = Lisp.NIL;

        public SubLObject $run_status = Lisp.NIL;

        private static final SubLStructDeclNative structDecl = makeStructDeclNative(com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native.class, KBQ_RUNSTATE, KBQ_RUNSTATE_P, $list_alt230, $list_alt231, new String[]{ "$id", "$lock", "$query_spec", "$inference", "$result", "$test_runstate", "$run_status" }, $list_alt232, $list_alt233, DEFAULT_STRUCT_PRINT_FUNCTION);
    }

    public static final SubLFile me = new kbq_query_run();

 public static final String myName = "com.cyc.cycjava.cycl.inference.kbq_query_run";


    // defparameter
    // Definitions
    // If non-nil, the runstate of the outer call to kct-run-test-set.
    /**
     * If non-nil, the runstate of the outer call to kct-run-test-set.
     */
    @LispMethod(comment = "If non-nil, the runstate of the outer call to kct-run-test-set.\ndefparameter")
    private static final SubLSymbol $kct_set_runstate$ = makeSymbol("*KCT-SET-RUNSTATE*");

    // defparameter
    // If non-nil, the runstate of the outer call to kct-run-test.
    /**
     * If non-nil, the runstate of the outer call to kct-run-test.
     */
    @LispMethod(comment = "If non-nil, the runstate of the outer call to kct-run-test.\ndefparameter")
    private static final SubLSymbol $kct_runstate$ = makeSymbol("*KCT-RUNSTATE*");

    // defparameter
    // If non-nil, the runstate of the outer call to kbq-run-query.
    /**
     * If non-nil, the runstate of the outer call to kbq-run-query.
     */
    @LispMethod(comment = "If non-nil, the runstate of the outer call to kbq-run-query.\ndefparameter")
    private static final SubLSymbol $kbq_runstate$ = makeSymbol("*KBQ-RUNSTATE*");

    // deflexical
    // for backward compatibility
    /**
     * for backward compatibility
     */
    @LispMethod(comment = "for backward compatibility\ndeflexical")
    private static final SubLSymbol $kbq_old_cfasl_common_symbols$ = makeSymbol("*KBQ-OLD-CFASL-COMMON-SYMBOLS*");

    // deflexical
    // See *query-metrics*
    /**
     * See *query-metrics*
     */
    @LispMethod(comment = "See *query-metrics*\ndeflexical")
    private static final SubLSymbol $kbq_new_cfasl_common_symbols$ = makeSymbol("*KBQ-NEW-CFASL-COMMON-SYMBOLS*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $kbq_cfasl_common_symbols$ = makeSymbol("*KBQ-CFASL-COMMON-SYMBOLS*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $kbq_cfasl_common_symbols_simple$ = makeSymbol("*KBQ-CFASL-COMMON-SYMBOLS-SIMPLE*");

    // deflexical
    // for backward compatibility
    /**
     * for backward compatibility
     */
    @LispMethod(comment = "for backward compatibility\ndeflexical")
    private static final SubLSymbol $kct_old_cfasl_common_symbols$ = makeSymbol("*KCT-OLD-CFASL-COMMON-SYMBOLS*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $kct_cfasl_common_symbols$ = makeSymbol("*KCT-CFASL-COMMON-SYMBOLS*");

    // defparameter
    // The number of times the kbq harness runs the query. Useful for profiling.
    /**
     * The number of times the kbq harness runs the query.  Useful for profiling.
     */
    @LispMethod(comment = "The number of times the kbq harness runs the query.  Useful for profiling.\ndefparameter\nThe number of times the kbq harness runs the query. Useful for profiling.")
    public static final SubLSymbol $kbq_run_number$ = makeSymbol("*KBQ-RUN-NUMBER*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $kct_test_metric_table$ = makeSymbol("*KCT-TEST-METRIC-TABLE*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $kbq_test_collection_to_query_set_query$ = makeSymbol("*KBQ-TEST-COLLECTION-TO-QUERY-SET-QUERY*");

    // defconstant
    @LispMethod(comment = "defconstant")
    public static final SubLSymbol $dtp_kbq_runstate$ = makeSymbol("*DTP-KBQ-RUNSTATE*");

    // defconstant
    @LispMethod(comment = "defconstant")
    public static final SubLSymbol $dtp_kct_runstate$ = makeSymbol("*DTP-KCT-RUNSTATE*");

    // defconstant
    @LispMethod(comment = "defconstant")
    public static final SubLSymbol $dtp_kct_set_runstate$ = makeSymbol("*DTP-KCT-SET-RUNSTATE*");

    // deflexical
    @LispMethod(comment = "deflexical")
    public static final SubLSymbol $query_set_run_file_extension$ = makeSymbol("*QUERY-SET-RUN-FILE-EXTENSION*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $kbq_filter_query_set_run_to_queries$ = makeSymbol("*KBQ-FILTER-QUERY-SET-RUN-TO-QUERIES*");

    // defparameter
    @LispMethod(comment = "defparameter")
    private static final SubLSymbol $kct_filter_test_set_run_to_tests$ = makeSymbol("*KCT-FILTER-TEST-SET-RUN-TO-TESTS*");

    // deflexical
    /**
     * The statistics we want to see in the summary, and whether it's good for them
     * to increase or decrease.
     */
    @LispMethod(comment = "The statistics we want to see in the summary, and whether it\'s good for them\r\nto increase or decrease.\ndeflexical\nThe statistics we want to see in the summary, and whether it\'s good for them\nto increase or decrease.")
    public static final SubLSymbol $kbq_summary_statistics$ = makeSymbol("*KBQ-SUMMARY-STATISTICS*");

    // defparameter
    @LispMethod(comment = "defparameter")
    public static final SubLSymbol $kbq_progress_stream$ = makeSymbol("*KBQ-PROGRESS-STREAM*");

    // defparameter
    @LispMethod(comment = "defparameter")
    public static final SubLSymbol $kbq_benchmark_outlier_timeout$ = makeSymbol("*KBQ-BENCHMARK-OUTLIER-TIMEOUT*");

    // deflexical
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $kbq_test_query_set$ = makeSymbol("*KBQ-TEST-QUERY-SET*");

    static private final SubLList $list3 = list(new SubLObject[]{ makeKeyword("ANSWER-COUNT-AT-60-SECONDS"), makeKeyword("PROBLEM-STORE-PROBLEM-COUNT"), makeKeyword("PROBLEM-STORE-PROOF-COUNT"), makeKeyword("ERROR"), makeKeyword("MAX-NUMBER"), makeKeyword("MAX-TIME"), makeKeyword("ANSWER-COUNT-AT-30-SECONDS"), makeKeyword("PROBABLY-APPROXIMATELY-DONE"), makeKeyword("TOTAL-TIME"), makeKeyword("TIME-TO-LAST-ANSWER"), makeKeyword("TIME-TO-FIRST-ANSWER"), makeKeyword("ANSWER-COUNT"), makeKeyword("EXHAUST-TOTAL"), makeKeyword("HALT-REASON"), makeKeyword("QUERY"), makeKeyword("QUERY-RUN") });

    static private final SubLList $list4 = list(new SubLObject[]{ makeKeyword("TIME-PER-ANSWER"), makeKeyword("WASTED-TIME-AFTER-LAST-ANSWER"), makeKeyword("LATENCY-IMPROVEMENT-FROM-ITERATIVITY"), makeKeyword("PROBLEM-COUNT"), makeKeyword("PROOF-COUNT"), makeKeyword("LINK-COUNT"), makeKeyword("CONTENT-LINK-COUNT"), makeKeyword("REMOVAL-LINK-COUNT"), makeKeyword("REWRITE-LINK-COUNT"), makeKeyword("TRANSFORMATION-LINK-COUNT"), makeKeyword("STRUCTURAL-LINK-COUNT"), makeKeyword("JOIN-ORDERED-LINK-COUNT"), makeKeyword("JOIN-LINK-COUNT"), makeKeyword("SPLIT-LINK-COUNT"), makeKeyword("RESTRICTION-LINK-COUNT"), makeKeyword("RESIDUAL-TRANSFORMATION-LINK-COUNT"), makeKeyword("UNION-LINK-COUNT"), makeKeyword("GOOD-PROBLEM-COUNT"), makeKeyword("NEUTRAL-PROBLEM-COUNT"), makeKeyword("NO-GOOD-PROBLEM-COUNT"), makeKeyword("SINGLE-LITERAL-PROBLEM-COUNT"), makeKeyword("CONJUNCTIVE-PROBLEM-COUNT"), makeKeyword("JOIN-PROBLEM-COUNT"), makeKeyword("SPLIT-PROBLEM-COUNT"), makeKeyword("DISJUNCTIVE-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-PROBLEM-COUNT"), makeKeyword("EXAMINED-PROBLEM-COUNT"), makeKeyword("POSSIBLE-PROBLEM-COUNT"), makeKeyword("PENDING-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-GOOD-PROBLEM-COUNT"), makeKeyword("EXAMINED-GOOD-PROBLEM-COUNT"), makeKeyword("POSSIBLE-GOOD-PROBLEM-COUNT"), makeKeyword("PENDING-GOOD-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-NEUTRAL-PROBLEM-COUNT"), makeKeyword("EXAMINED-NEUTRAL-PROBLEM-COUNT"), makeKeyword("POSSIBLE-NEUTRAL-PROBLEM-COUNT"), makeKeyword("PENDING-NEUTRAL-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-NO-GOOD-PROBLEM-COUNT"), makeKeyword("EXAMINED-NO-GOOD-PROBLEM-COUNT"), makeKeyword("POSSIBLE-NO-GOOD-PROBLEM-COUNT"), makeKeyword("PENDING-NO-GOOD-PROBLEM-COUNT"), makeKeyword("GOOD-SINGLE-LITERAL-PROBLEM-COUNT"), makeKeyword("GOOD-CONJUNCTIVE-PROBLEM-COUNT"), makeKeyword("GOOD-JOIN-PROBLEM-COUNT"), makeKeyword("GOOD-SPLIT-PROBLEM-COUNT"), makeKeyword("GOOD-DISJUNCTIVE-PROBLEM-COUNT"), makeKeyword("NEUTRAL-SINGLE-LITERAL-PROBLEM-COUNT"), makeKeyword("NEUTRAL-CONJUNCTIVE-PROBLEM-COUNT"), makeKeyword("NEUTRAL-JOIN-PROBLEM-COUNT"), makeKeyword("NEUTRAL-SPLIT-PROBLEM-COUNT"), makeKeyword("NEUTRAL-DISJUNCTIVE-PROBLEM-COUNT"), makeKeyword("NO-GOOD-SINGLE-LITERAL-PROBLEM-COUNT"), makeKeyword("NO-GOOD-CONJUNCTIVE-PROBLEM-COUNT"), makeKeyword("NO-GOOD-JOIN-PROBLEM-COUNT"), makeKeyword("NO-GOOD-SPLIT-PROBLEM-COUNT"), makeKeyword("NO-GOOD-DISJUNCTIVE-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-SINGLE-LITERAL-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-CONJUNCTIVE-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-JOIN-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-SPLIT-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-DISJUNCTIVE-PROBLEM-COUNT"), makeKeyword("EXAMINED-SINGLE-LITERAL-PROBLEM-COUNT"), makeKeyword("EXAMINED-CONJUNCTIVE-PROBLEM-COUNT"), makeKeyword("EXAMINED-JOIN-PROBLEM-COUNT"), makeKeyword("EXAMINED-SPLIT-PROBLEM-COUNT"), makeKeyword("EXAMINED-DISJUNCTIVE-PROBLEM-COUNT"), makeKeyword("POSSIBLE-SINGLE-LITERAL-PROBLEM-COUNT"), makeKeyword("POSSIBLE-CONJUNCTIVE-PROBLEM-COUNT"), makeKeyword("POSSIBLE-JOIN-PROBLEM-COUNT"), makeKeyword("POSSIBLE-SPLIT-PROBLEM-COUNT"), makeKeyword("POSSIBLE-DISJUNCTIVE-PROBLEM-COUNT"), makeKeyword("FINISHED-SINGLE-LITERAL-PROBLEM-COUNT"), makeKeyword("FINISHED-CONJUNCTIVE-PROBLEM-COUNT"), makeKeyword("FINISHED-JOIN-PROBLEM-COUNT"), makeKeyword("FINISHED-SPLIT-PROBLEM-COUNT"), makeKeyword("FINISHED-DISJUNCTIVE-PROBLEM-COUNT") });

    private static final SubLSymbol KBQ_CFASL_COMMON_SYMBOLS = makeSymbol("KBQ-CFASL-COMMON-SYMBOLS");

    private static final SubLSymbol DO_QUERY_SET_RUN = makeSymbol("DO-QUERY-SET-RUN");

    private static final SubLSymbol KBQ_CFASL_COMMON_SYMBOLS_SIMPLE = makeSymbol("KBQ-CFASL-COMMON-SYMBOLS-SIMPLE");

    static private final SubLList $list9 = list(makeKeyword("SUCCESS"), makeKeyword("FAILURE"), makeKeyword("STATUS"), $TEST);

    private static final SubLInteger $int$600 = makeInteger(600);

    private static final SubLList $list11 = list(list(makeSymbol("QUERY-SET-RUN")), makeSymbol("&BODY"), makeSymbol("BODY"));

    public static final SubLSymbol $kbq_internal_time_units_per_second$ = makeSymbol("*KBQ-INTERNAL-TIME-UNITS-PER-SECOND*");

    private static final SubLSymbol KBQ_QUERY_SET_RUN_INTERNAL_TIME_UNITS_PER_SECOND = makeSymbol("KBQ-QUERY-SET-RUN-INTERNAL-TIME-UNITS-PER-SECOND");

    private static final SubLSymbol $COMPLETE_TOTAL_TIME = makeKeyword("COMPLETE-TOTAL-TIME");

    private static final SubLSymbol $TIME_TO_FIRST_ANSWER = makeKeyword("TIME-TO-FIRST-ANSWER");

    private static final SubLSymbol $TIME_TO_LAST_ANSWER = makeKeyword("TIME-TO-LAST-ANSWER");

    private static final SubLSymbol $COMPLETE_TIME_TO_FIRST_ANSWER = makeKeyword("COMPLETE-TIME-TO-FIRST-ANSWER");

    private static final SubLSymbol $COMPLETE_TIME_TO_LAST_ANSWER = makeKeyword("COMPLETE-TIME-TO-LAST-ANSWER");

    private static final SubLSymbol $STEPS_TO_FIRST_ANSWER = makeKeyword("STEPS-TO-FIRST-ANSWER");

    private static final SubLSymbol $STEPS_TO_LAST_ANSWER = makeKeyword("STEPS-TO-LAST-ANSWER");

    private static final SubLSymbol $WASTED_TIME_AFTER_LAST_ANSWER = makeKeyword("WASTED-TIME-AFTER-LAST-ANSWER");

    private static final SubLSymbol $LATENCY_IMPROVEMENT_FROM_ITERATIVITY = makeKeyword("LATENCY-IMPROVEMENT-FROM-ITERATIVITY");

    private static final SubLSymbol $TIME_PER_ANSWER = makeKeyword("TIME-PER-ANSWER");

    private static final SubLSymbol $COMPLETE_TIME_PER_ANSWER = makeKeyword("COMPLETE-TIME-PER-ANSWER");

    private static final SubLSymbol $NEW_ROOT_RELATIVE_TOTAL_TIMES = makeKeyword("NEW-ROOT-RELATIVE-TOTAL-TIMES");

    private static final SubLSymbol $NEW_ROOT_TIMES = makeKeyword("NEW-ROOT-TIMES");

    private static final SubLSymbol $NEW_ROOT_RELATIVE_ANSWER_TIMES = makeKeyword("NEW-ROOT-RELATIVE-ANSWER-TIMES");

    private static final SubLSymbol $ESTIMATED_EXHAUSTIVE_PROBLEM_COUNT = makeKeyword("ESTIMATED-EXHAUSTIVE-PROBLEM-COUNT");

    private static final SubLSymbol $ESTIMATED_EXHAUSTIVE_NEW_ROOT_COUNT = makeKeyword("ESTIMATED-EXHAUSTIVE-NEW-ROOT-COUNT");

    private static final SubLSymbol $NEW_ROOT_COUNT = makeKeyword("NEW-ROOT-COUNT");

    private static final SubLSymbol $ESTIMATED_EXHAUSTIVE_BYTE_COUNT = makeKeyword("ESTIMATED-EXHAUSTIVE-BYTE-COUNT");

    private static final SubLSymbol $median_bytes_per_problem$ = makeSymbol("*MEDIAN-BYTES-PER-PROBLEM*");

    private static final SubLSymbol $TOTAL_NEW_ROOT_INITIAL_REMOVAL_FANOUT = makeKeyword("TOTAL-NEW-ROOT-INITIAL-REMOVAL-FANOUT");

    private static final SubLSymbol $NEW_ROOT_INITIAL_REMOVAL_FANOUTS = makeKeyword("NEW-ROOT-INITIAL-REMOVAL-FANOUTS");

    static private final SubLList $list51 = list(makeSymbol("QUERY-FUNCALL"), makeSymbol("FUNC"));

    static private final SubLList $list52 = list(makeSymbol("QUERY-FUNCALL"), makeSymbol("FUNC"), makeSymbol("ARG1"));

    private static final SubLSymbol $QUERY_RUN_FUNCALL = makeKeyword("QUERY-RUN-FUNCALL");

    private static final SubLList $list54 = list(makeSymbol("QUERY-RUN-FUNCALL"), makeSymbol("FUNC"));

    private static final SubLList $list55 = list(makeSymbol("QUERY-RUN-FUNCALL"), makeSymbol("FUNC"), makeSymbol("ARG1"));

    private static final SubLString $str56$unrecognized_KBQ_property_spec__s = makeString("unrecognized KBQ property spec ~s");

    private static final SubLString $str57$Use_the__with_kbq_query_set_run_m = makeString("Use the 'with-kbq-query-set-run macro to provide the scaling factor from internal real time to seconds.");

    private static final SubLString $str58$Use_the__with_kbq_query_set_run__ = makeString("Use the 'with-kbq-query-set-run' macro to provide the scaling factor from internal real time to seconds.");

    private static final SubLList $list59 = list(makeKeyword("MAX-TIME"), makeKeyword("OUTLIER-TIMEOUT"));

    private static final SubLFloat $float$0_1 = makeDouble(0.1);

    private static final SubLFloat $float$0_01 = makeDouble(0.01);

    private static final SubLSymbol $INFERENCE_PROOF_SPEC = makeKeyword("INFERENCE-PROOF-SPEC");



    private static final SubLSymbol $INTERNAL_TIME_UNITS_PER_SECOND = makeKeyword("INTERNAL-TIME-UNITS-PER-SECOND");

    private static final SubLSymbol KBQ_QUERY_SET_RUN_QUERY_RUNS = makeSymbol("KBQ-QUERY-SET-RUN-QUERY-RUNS");

    private static final SubLList $list80 = list(makeSymbol("&KEY"), makeSymbol("MACHINE"), makeSymbol("DATE"), makeSymbol("BOGOMIPS"), makeSymbol("INTERNAL-TIME-UNITS-PER-SECOND"), makeSymbol("PATCH-LEVEL"), makeSymbol("COMMENT"), makeSymbol("TEST-RUNS"));

    private static final SubLList $list81 = list(makeKeyword("MACHINE"), $DATE, makeKeyword("BOGOMIPS"), makeKeyword("INTERNAL-TIME-UNITS-PER-SECOND"), makeKeyword("PATCH-LEVEL"), makeKeyword("COMMENT"), makeKeyword("TEST-RUNS"));

    private static final SubLSymbol $ALLOW_OTHER_KEYS = makeKeyword("ALLOW-OTHER-KEYS");

    private static final SubLSymbol $sym84$INVALID_FORT_ = makeSymbol("INVALID-FORT?");

    private static final SubLSymbol $sym85$KBQ_RUNNABLE_ = makeSymbol("KBQ-RUNNABLE?");

    private static final SubLSymbol $sym86$_ = makeSymbol("<");

    private static final SubLSymbol $sym87$SAFE__ = makeSymbol("SAFE-<");

    private static final SubLString $str88$_s_____s__ = makeString("~s -> ~s~%");

    private static final SubLSymbol KBQ_QUERY_RUN_QUERY = makeSymbol("KBQ-QUERY-RUN-QUERY");

    private static final SubLSymbol $MEDIAN_HYPOTHESIZATION_TIME = makeKeyword("MEDIAN-HYPOTHESIZATION-TIME");

    private static final SubLSymbol $MEDIAN_TOTAL_TIME = makeKeyword("MEDIAN-TOTAL-TIME");

    private static final SubLSymbol $MEDIAN_TIME_TO_FIRST_ANSWER = makeKeyword("MEDIAN-TIME-TO-FIRST-ANSWER");

    private static final SubLSymbol $MEDIAN_TIME_TO_LAST_ANSWER = makeKeyword("MEDIAN-TIME-TO-LAST-ANSWER");

    private static final SubLString $str94$what_s_the_median_for__s = makeString("what's the median for ~s");

    private static final SubLSymbol $MEAN_HYPOTHESIZATION_TIME = makeKeyword("MEAN-HYPOTHESIZATION-TIME");

    private static final SubLSymbol $MEAN_TOTAL_TIME = makeKeyword("MEAN-TOTAL-TIME");

    private static final SubLSymbol $MEAN_TIME_TO_FIRST_ANSWER = makeKeyword("MEAN-TIME-TO-FIRST-ANSWER");

    private static final SubLSymbol $MEAN_TIME_TO_LAST_ANSWER = makeKeyword("MEAN-TIME-TO-LAST-ANSWER");

    private static final SubLString $str99$what_s_the_mean_for__s = makeString("what's the mean for ~s");

    private static final SubLSymbol KBQ_QUERY_RUN_HYPOTHESIZATION_TIME = makeSymbol("KBQ-QUERY-RUN-HYPOTHESIZATION-TIME");

    private static final SubLSymbol KBQ_QUERY_RUN_TOTAL_TIME = makeSymbol("KBQ-QUERY-RUN-TOTAL-TIME");

    private static final SubLSymbol KBQ_QUERY_RUN_TIME_TO_FIRST_ANSWER = makeSymbol("KBQ-QUERY-RUN-TIME-TO-FIRST-ANSWER");

    private static final SubLSymbol KBQ_QUERY_RUN_TIME_TO_LAST_ANSWER = makeSymbol("KBQ-QUERY-RUN-TIME-TO-LAST-ANSWER");

    private static final SubLSymbol KBQ_QUERY_RUN_COMPLETE_TOTAL_TIME = makeSymbol("KBQ-QUERY-RUN-COMPLETE-TOTAL-TIME");

    private static final SubLSymbol KBQ_QUERY_RUN_COMPLETE_TIME_TO_FIRST_ANSWER = makeSymbol("KBQ-QUERY-RUN-COMPLETE-TIME-TO-FIRST-ANSWER");

    private static final SubLSymbol KBQ_QUERY_RUN_COMPLETE_TIME_TO_LAST_ANSWER = makeSymbol("KBQ-QUERY-RUN-COMPLETE-TIME-TO-LAST-ANSWER");

    private static final SubLSymbol KBQ_QUERY_RUN_ANSWER_COUNT = makeSymbol("KBQ-QUERY-RUN-ANSWER-COUNT");

    private static final SubLString $str108$unknown_metric__s = makeString("unknown metric ~s");

    private static final SubLSymbol KCT_TEST_SET_RUN_TEST_RUNS = makeSymbol("KCT-TEST-SET-RUN-TEST-RUNS");

    private static final SubLSymbol KCT_TEST_RUN_TEST = makeSymbol("KCT-TEST-RUN-TEST");

    private static final SubLSymbol KBQ_QUERY_SPEC_P = makeSymbol("KBQ-QUERY-SPEC-P");

    private static final SubLSymbol QUERY_METRIC_P = makeSymbol("QUERY-METRIC-P");

    private static final SubLString $str120$___A____ = makeString("~%~A~%~%");

    private static final SubLSymbol $ABORT_KBQ_RUN_QUERY = makeKeyword("ABORT-KBQ-RUN-QUERY");

    private static final SubLString $$$Abort_KBQ_run_query = makeString("Abort KBQ run query");

    private static final SubLString $$$KBQ_explicitly_aborted = makeString("KBQ explicitly aborted");

    private static final SubLString $str128$Outlier_____S = makeString("Outlier :~%~S");

    private static final SubLString $str131$Unable_to_compute_any_inference_m = makeString("Unable to compute any inference metrics for ~A");

    private static final SubLString $str132$Unable_to_compute_all_desired_inf = makeString("Unable to compute all desired inference metrics for ~A");

    private static final SubLString $str133$KBQ_harness_error_for__A____A = makeString("KBQ harness error for ~A : ~A");

    private static final SubLString $str134$Error_____S___A = makeString("Error :~%~S~%~A");

    private static final SubLSymbol $NOT_A_QUERY = makeKeyword("NOT-A-QUERY");

    private static final SubLString $str136$Avoided__due_to__S______S = makeString("Avoided (due to ~S) :~%~S");

    private static final SubLSymbol $OVERRIDING_QUERY_PROPERTIES = makeKeyword("OVERRIDING-QUERY-PROPERTIES");

    private static final SubLSymbol ENSURE_SKSI_MODULES_NEEDED = makeSymbol("ENSURE-SKSI-MODULES-NEEDED");



    private static final SubLObject $$testFollowupTestFormula_All = reader_make_constant_shell("testFollowupTestFormula-All");

    private static final SubLObject $$testFollowupTestFormula_Some = reader_make_constant_shell("testFollowupTestFormula-Some");

    private static final SubLObject $$testFollowupTestFormula_None = reader_make_constant_shell("testFollowupTestFormula-None");

    private static final SubLSymbol KCT_TEST_SPEC_P = makeSymbol("KCT-TEST-SPEC-P");

    private static final SubLSymbol $BINDINGS_AND_HYPOTHETICAL_BINDINGS = makeKeyword("BINDINGS-AND-HYPOTHETICAL-BINDINGS");

    private static final SubLObject $$TestMetric_HaltReason = reader_make_constant_shell("TestMetric-HaltReason");

    private static final SubLString $str149$Unsupported_metric__S = makeString("Unsupported metric ~S");

    private static final SubLList $list150 = list(cons(reader_make_constant_shell("TestMetric-TotalTime"), makeKeyword("TOTAL-TIME")), cons(reader_make_constant_shell("TestMetric-TimeToFirstAnswer"), makeKeyword("TIME-TO-FIRST-ANSWER")), cons(reader_make_constant_shell("TestMetric-TimeToLastAnswer"), makeKeyword("TIME-TO-LAST-ANSWER")), cons(reader_make_constant_shell("TestMetric-AnswerCount"), makeKeyword("ANSWER-COUNT")), cons(reader_make_constant_shell("TestMetric-AnswerCountAt30Seconds"), makeKeyword("ANSWER-COUNT-AT-30-SECONDS")), cons(reader_make_constant_shell("TestMetric-AnswerCountAt60Seconds"), makeKeyword("ANSWER-COUNT-AT-60-SECONDS")), cons(reader_make_constant_shell("TestMetric-ProblemStoreProofCount"), makeKeyword("PROOF-COUNT")), cons(reader_make_constant_shell("TestMetric-ProblemStoreProblemCount"), makeKeyword("PROBLEM-COUNT")));

    private static final SubLList $list152 = list(makeKeyword("CONDITIONAL-SENTENCE?"), NIL);

    private static final SubLSymbol $sym153$BINDINGS_EQUAL_MODULO_EL_VAR_NAMES_ = makeSymbol("BINDINGS-EQUAL-MODULO-EL-VAR-NAMES?");

    private static final SubLString $$$Expected_ = makeString("Expected ");

    private static final SubLString $str155$__but_got_ = makeString(", but got ");

    private static final SubLString $$$Expected_exactly_ = makeString("Expected exactly ");

    private static final SubLString $str157$_binding_sets__but_got_ = makeString(" binding sets, but got ");

    private static final SubLString $str158$_ = makeString(".");

    private static final SubLString $$$Expected_at_least_ = makeString("Expected at least ");

    private static final SubLString $$$Expected_no_more_than_ = makeString("Expected no more than ");

    private static final SubLString $str161$ = makeString("");

    private static final SubLString $str162$These_expected_bindings_were_miss = makeString("These expected bindings were missing: ");

    private static final SubLString $str163$These_unwanted_bindings_were_retu = makeString("These unwanted bindings were returned: ");

    private static final SubLString $$$____ = makeString("    ");

    private static final SubLSymbol FILE_VALID_FOR_WRITING_P = makeSymbol("FILE-VALID-FOR-WRITING-P");

    private static final SubLSymbol $ABORT_KBQ_RUN_QUERY_SET = makeKeyword("ABORT-KBQ-RUN-QUERY-SET");

    private static final SubLString $$$Abort_KBQ_run_query_set = makeString("Abort KBQ run query set");

    private static final SubLString $$$KBQ_running_query_set = makeString("KBQ running query set");

    private static final SubLString $$$cdolist = makeString("cdolist");

    private static final SubLString $str171$_________________________________ = makeString("~&~%;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;~%");

    private static final SubLString $str172$______A____ = makeString("~&;; ~A~%~%");

    private static final SubLString $$$Running_ = makeString("Running ");

    private static final SubLString $str174$Unrunnable_query____S = makeString("Unrunnable query : ~S");

    private static final SubLSymbol JANUS_OPERATION_P = makeSymbol("JANUS-OPERATION-P");



    private static final SubLSymbol SKSI_MODULES_NEEDED_SORTED_MEMOIZED = makeSymbol("SKSI-MODULES-NEEDED-SORTED-MEMOIZED");

    private static final SubLSymbol QUERY_SKSI_MODULES_NEEDED_SORTED_MEMOIZED = makeSymbol("QUERY-SKSI-MODULES-NEEDED-SORTED-MEMOIZED");





    private static final SubLSymbol $sym181$_OBJ = makeSymbol("?OBJ");

    private static final SubLList $list182 = list(makeKeyword("ANSWER-LANGUAGE"), makeKeyword("HL"), makeKeyword("PRODUCTIVITY-LIMIT"), makeKeyword("POSITIVE-INFINITY"));

    private static final SubLList $list183 = list(reader_make_constant_shell("evaluate"), makeKeyword("SET"), list(reader_make_constant_shell("SetExtentFn"), list(reader_make_constant_shell("TheSetOf"), makeSymbol("?QUERY"), list(reader_make_constant_shell("thereExists"), makeSymbol("?TEST"), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("knownSentence"), list(reader_make_constant_shell("isa"), makeSymbol("?TEST"), makeKeyword("TEST-COLLECTION"))), list(reader_make_constant_shell("assertedSentence"), list(reader_make_constant_shell("testQuerySpecification"), makeSymbol("?TEST"), makeSymbol("?QUERY"))))))));

    private static final SubLList $list186 = list(makeKeyword("ANSWER-LANGUAGE"), makeKeyword("HL"));

    private static final SubLString $$$Processing_KB_Queries = makeString("Processing KB Queries");

    private static final SubLString $str190$Skip_KBQ__S = makeString("Skip KBQ ~S");

    private static final SubLSymbol $append_stack_traces_to_error_messagesP$ = makeSymbol("*APPEND-STACK-TRACES-TO-ERROR-MESSAGES?*");

    private static final SubLList $list193 = list(makeSymbol("CSETQ"), makeSymbol("*APPEND-STACK-TRACES-TO-ERROR-MESSAGES?*"), NIL);

    private static final SubLString $str195$_A = makeString("~A");

    private static final SubLList $list196 = list(makeKeyword("CONTINUABLE?"), NIL, makeKeyword("BROWSABLE?"), T);

    private static final SubLSymbol $ABORT_KCT_RUN_TEST_SET = makeKeyword("ABORT-KCT-RUN-TEST-SET");

    private static final SubLString $$$Abort_KCT_run_test_set = makeString("Abort KCT run test set");

    private static final SubLString $$$KCT_running_test_set = makeString("KCT running test set");

    private static final SubLString $str200$__Running__s__ = makeString("~&Running ~s~%");

    private static final SubLString $str201$Unrunnable_test____S = makeString("Unrunnable test : ~S");

    private static final SubLList $list202 = list(new SubLObject[]{ makeSymbol("&KEY"), makeSymbol("QUERY-SPEC-SET"), makeSymbol("FILENAME"), makeSymbol("ANALYSIS-FILENAME"), makeSymbol("KEEPALIVE-FILENAME"), makeSymbol("COMMENT"), makeSymbol("OVERRIDING-QUERY-PROPERTIES"), list(makeSymbol("METRICS"), list(QUOTE, list(makeSymbol("ALL-ARETE-QUERY-METRICS")))), list(makeSymbol("OUTLIER-TIMEOUT"), list(QUOTE, makeSymbol("*KBQ-DEFAULT-OUTLIER-TIMEOUT*"))), makeSymbol("INCREMENTAL"), list(makeSymbol("INCLUDE-RESULTS"), T), list(makeSymbol("RANDOMIZE"), NIL), list(makeSymbol("SKIP"), ZERO_INTEGER), makeSymbol("COUNT"), list(makeSymbol("IF-FILE-EXISTS"), makeKeyword("OVERWRITE")) });

    private static final SubLList $list203 = list(new SubLObject[]{ makeKeyword("QUERY-SPEC-SET"), makeKeyword("FILENAME"), makeKeyword("ANALYSIS-FILENAME"), makeKeyword("KEEPALIVE-FILENAME"), makeKeyword("COMMENT"), makeKeyword("OVERRIDING-QUERY-PROPERTIES"), makeKeyword("METRICS"), makeKeyword("OUTLIER-TIMEOUT"), makeKeyword("INCREMENTAL"), makeKeyword("INCLUDE-RESULTS"), makeKeyword("RANDOMIZE"), $SKIP, makeKeyword("COUNT"), makeKeyword("IF-FILE-EXISTS") });

    private static final SubLSymbol $QUERY_SPEC_SET = makeKeyword("QUERY-SPEC-SET");

    private static final SubLList $list208 = list(makeSymbol("ALL-ARETE-QUERY-METRICS"));

    public static final SubLSymbol $kbq_default_outlier_timeout$ = makeSymbol("*KBQ-DEFAULT-OUTLIER-TIMEOUT*");

    private static final SubLSymbol $IF_FILE_EXISTS = makeKeyword("IF-FILE-EXISTS");

    private static final SubLSymbol RUN_KBQ_EXPERIMENT_INTERNAL = makeSymbol("RUN-KBQ-EXPERIMENT-INTERNAL");

    private static final SubLSymbol $last_query_set_run$ = makeSymbol("*LAST-QUERY-SET-RUN*");

    private static final SubLSymbol RUN_KBQ_EXPERIMENT = makeSymbol("RUN-KBQ-EXPERIMENT");

    private static final SubLSymbol KBQ_IF_FILE_EXISTS_HANDLING_P = makeSymbol("KBQ-IF-FILE-EXISTS-HANDLING-P");

    private static final SubLString $str222$__run_starting_at__A = makeString("~%run starting at ~A");

    private static final SubLString $str223$__run_ended_at__A = makeString("~%run ended at ~A");

    private static final SubLString $str224$__elapsed_time____A = makeString("~%elapsed time : ~A");

    private static final SubLString $str225$Unable_to_open__S = makeString("Unable to open ~S");

    private static final SubLSymbol $sym226$KBQ_ERRORING_QUERY_RUN_ = makeSymbol("KBQ-ERRORING-QUERY-RUN?");

    private static final SubLList $list227 = list(makeKeyword("OVERWRITE"), makeKeyword("AUGMENT"), makeKeyword("RERUN-ERRORS"), makeKeyword("AUGMENT-OR-RERUN-ERRORS"));

    private static final SubLSymbol $AUGMENT_OR_RERUN_ERRORS = makeKeyword("AUGMENT-OR-RERUN-ERRORS");

    private static final SubLString $str232$unexpected_if_file_exists__s = makeString("unexpected if-file-exists ~s");

    private static final SubLString $str233$_rerun_errors_ = makeString("-rerun-errors-");

    private static final SubLList $list234 = list(new SubLObject[]{ makeSymbol("&KEY"), makeSymbol("TEST-SPEC-SET"), makeSymbol("FILENAME"), makeSymbol("ANALYSIS-FILENAME"), makeSymbol("KEEPALIVE-FILENAME"), makeSymbol("COMMENT"), makeSymbol("OVERRIDING-QUERY-PROPERTIES"), list(makeSymbol("OVERRIDING-METRICS"), list(QUOTE, list(makeSymbol("ALL-ARETE-QUERY-METRICS")))), list(makeSymbol("OUTLIER-TIMEOUT"), list(QUOTE, makeSymbol("*KBQ-OUTLIER-TIMEOUT*"))), makeSymbol("INCREMENTAL"), list(makeSymbol("INCLUDE-RESULTS"), T), list(makeSymbol("IF-FILE-EXISTS"), makeKeyword("OVERWRITE")), list(makeSymbol("EXPOSE-RUNSTATE"), NIL), list(makeSymbol("RANDOMIZE"), NIL), list(makeSymbol("SKIP"), ZERO_INTEGER), makeSymbol("COUNT") });

    private static final SubLList $list235 = list(new SubLObject[]{ makeKeyword("TEST-SPEC-SET"), makeKeyword("FILENAME"), makeKeyword("ANALYSIS-FILENAME"), makeKeyword("KEEPALIVE-FILENAME"), makeKeyword("COMMENT"), makeKeyword("OVERRIDING-QUERY-PROPERTIES"), makeKeyword("OVERRIDING-METRICS"), makeKeyword("OUTLIER-TIMEOUT"), makeKeyword("INCREMENTAL"), makeKeyword("INCLUDE-RESULTS"), makeKeyword("IF-FILE-EXISTS"), makeKeyword("EXPOSE-RUNSTATE"), makeKeyword("RANDOMIZE"), $SKIP, makeKeyword("COUNT") });

    private static final SubLSymbol $TEST_SPEC_SET = makeKeyword("TEST-SPEC-SET");

    public static final SubLSymbol $kbq_outlier_timeout$ = makeSymbol("*KBQ-OUTLIER-TIMEOUT*");

    private static final SubLSymbol RUN_KCT_EXPERIMENT_INTERNAL = makeSymbol("RUN-KCT-EXPERIMENT-INTERNAL");

    private static final SubLSymbol $last_test_set_run$ = makeSymbol("*LAST-TEST-SET-RUN*");

    private static final SubLSymbol RUN_KCT_EXPERIMENT = makeSymbol("RUN-KCT-EXPERIMENT");

    private static final SubLSymbol $sym243$KB_CONTENT_REGRESSION_TEST_ = makeSymbol("KB-CONTENT-REGRESSION-TEST?");

    private static final SubLString $str244$Filtered_to___KBContentRegression = makeString("Filtered to #$KBContentRegressionTests");

    private static final SubLString $str245$All_tests___ = makeString("All tests:~%");

    private static final SubLString $str246$__Just_the_regression_tests___ = makeString("~%Just the regression tests:~%");

    private static final SubLInteger $int$212 = makeInteger(212);

    private static final SubLString $str248$__Failing_tests_ = makeString("~%Failing tests:");

    private static final SubLString $str249$____Failing_regression_tests___a_ = makeString("~%~%Failing regression tests (~a):");

    private static final SubLString $str250$____Unrunnable_tests_ = makeString("~%~%Unrunnable tests:");

    private static final SubLString $str251$_a = makeString("~a");

    private static final SubLString $str252$___a_is_unrunnable_for_an_unknown = makeString("~%~a is unrunnable for an unknown reason.");

    private static final SubLString $str253$_csv = makeString(".csv");

    private static final SubLString $str254$__Writing_csv_to___A__ = makeString("~&Writing csv to: ~A~%");

    private static final SubLString $str255$Comment___A__ = makeString("Comment: ~A~%");

    private static final SubLString $str256$Date___A__ = makeString("Date: ~A~%");

    private static final SubLString $str257$_A__A__A__A__A__A__A___ = makeString("~A,~A,~A,~A,~A,~A,~A,~%");

    private static final SubLSymbol $sym258$KCT_ERRORING_TEST_RUN_ = makeSymbol("KCT-ERRORING-TEST-RUN?");

    private static final SubLSymbol $sym259$KCT_TEST_RUNNABLE_ = makeSymbol("KCT-TEST-RUNNABLE?");

    private static final SubLSymbol $runstate_isg$ = makeSymbol("*RUNSTATE-ISG*");

    private static final SubLSymbol $runstate_index$ = makeSymbol("*RUNSTATE-INDEX*");

    private static final SubLString $str262$Unknown_runstate_type___A = makeString("Unknown runstate type: ~A");

    private static final SubLString $str263$Runstate_has_no_status___A = makeString("Runstate has no status: ~A");

    private static final SubLString $str264$Explanations_aren_t_yet_implement = makeString("Explanations aren't yet implemented.");

    private static final SubLString $str265$No_inference_defined_for_this_run = makeString("No inference defined for this runstate: ~A");

    private static final SubLString $str266$No_start_defined_for_this_runstat = makeString("No start defined for this runstate: ~A");

    private static final SubLString $str267$No_end_defined_for_this_runstate_ = makeString("No end defined for this runstate: ~A");

    private static final SubLSymbol KBQ_RUNSTATE = makeSymbol("KBQ-RUNSTATE");

    private static final SubLSymbol KBQ_RUNSTATE_P = makeSymbol("KBQ-RUNSTATE-P");

    private static final SubLList $list271 = list(makeSymbol("ID"), makeSymbol("LOCK"), makeSymbol("QUERY-SPEC"), makeSymbol("INFERENCE"), makeSymbol("RESULT"), makeSymbol("TEST-RUNSTATE"), makeSymbol("RUN-STATUS"));

    private static final SubLList $list272 = list(makeKeyword("ID"), $LOCK, makeKeyword("QUERY-SPEC"), makeKeyword("INFERENCE"), makeKeyword("RESULT"), makeKeyword("TEST-RUNSTATE"), makeKeyword("RUN-STATUS"));

    private static final SubLList $list273 = list(makeSymbol("KBQR-ID"), makeSymbol("KBQR-LOCK"), makeSymbol("KBQR-QUERY-SPEC"), makeSymbol("KBQR-INFERENCE"), makeSymbol("KBQR-RESULT"), makeSymbol("KBQR-TEST-RUNSTATE"), makeSymbol("KBQR-RUN-STATUS"));

    private static final SubLList $list274 = list(makeSymbol("_CSETF-KBQR-ID"), makeSymbol("_CSETF-KBQR-LOCK"), makeSymbol("_CSETF-KBQR-QUERY-SPEC"), makeSymbol("_CSETF-KBQR-INFERENCE"), makeSymbol("_CSETF-KBQR-RESULT"), makeSymbol("_CSETF-KBQR-TEST-RUNSTATE"), makeSymbol("_CSETF-KBQR-RUN-STATUS"));

    private static final SubLSymbol KBQ_RUNSTATE_PRINT_FUNCTION_TRAMPOLINE = makeSymbol("KBQ-RUNSTATE-PRINT-FUNCTION-TRAMPOLINE");

    private static final SubLList $list277 = list(makeSymbol("OPTIMIZE-FUNCALL"), makeSymbol("KBQ-RUNSTATE-P"));

    private static final SubLSymbol KBQR_ID = makeSymbol("KBQR-ID");

    private static final SubLSymbol _CSETF_KBQR_ID = makeSymbol("_CSETF-KBQR-ID");

    private static final SubLSymbol KBQR_LOCK = makeSymbol("KBQR-LOCK");

    private static final SubLSymbol _CSETF_KBQR_LOCK = makeSymbol("_CSETF-KBQR-LOCK");

    private static final SubLSymbol KBQR_QUERY_SPEC = makeSymbol("KBQR-QUERY-SPEC");

    private static final SubLSymbol _CSETF_KBQR_QUERY_SPEC = makeSymbol("_CSETF-KBQR-QUERY-SPEC");

    private static final SubLSymbol KBQR_INFERENCE = makeSymbol("KBQR-INFERENCE");

    private static final SubLSymbol _CSETF_KBQR_INFERENCE = makeSymbol("_CSETF-KBQR-INFERENCE");

    private static final SubLSymbol KBQR_RESULT = makeSymbol("KBQR-RESULT");

    private static final SubLSymbol _CSETF_KBQR_RESULT = makeSymbol("_CSETF-KBQR-RESULT");

    private static final SubLSymbol KBQR_TEST_RUNSTATE = makeSymbol("KBQR-TEST-RUNSTATE");

    private static final SubLSymbol _CSETF_KBQR_TEST_RUNSTATE = makeSymbol("_CSETF-KBQR-TEST-RUNSTATE");

    private static final SubLSymbol KBQR_RUN_STATUS = makeSymbol("KBQR-RUN-STATUS");

    private static final SubLSymbol _CSETF_KBQR_RUN_STATUS = makeSymbol("_CSETF-KBQR-RUN-STATUS");

    private static final SubLString $str298$Invalid_slot__S_for_construction_ = makeString("Invalid slot ~S for construction function");

    private static final SubLSymbol MAKE_KBQ_RUNSTATE = makeSymbol("MAKE-KBQ-RUNSTATE");

    private static final SubLSymbol VISIT_DEFSTRUCT_OBJECT_KBQ_RUNSTATE_METHOD = makeSymbol("VISIT-DEFSTRUCT-OBJECT-KBQ-RUNSTATE-METHOD");

    private static final SubLSymbol KCT_RUNSTATE_P = makeSymbol("KCT-RUNSTATE-P");

    private static final SubLString $$$KBQ_Runstate_Lock = makeString("KBQ Runstate Lock");

    private static final SubLSymbol KBQ_QUERY_RUN_P = makeSymbol("KBQ-QUERY-RUN-P");

    private static final SubLSymbol KCT_RUNSTATE = makeSymbol("KCT-RUNSTATE");

    private static final SubLList $list310 = list(new SubLObject[]{ makeSymbol("ID"), makeSymbol("LOCK"), makeSymbol("TEST-SPEC"), makeSymbol("RESULT"), makeSymbol("QUERY-RUNSTATE"), makeSymbol("TEST-SET-RUNSTATE"), makeSymbol("RUN-STATUS"), makeSymbol("START"), makeSymbol("END") });

    private static final SubLList $list311 = list(new SubLObject[]{ makeKeyword("ID"), $LOCK, makeKeyword("TEST-SPEC"), makeKeyword("RESULT"), makeKeyword("QUERY-RUNSTATE"), makeKeyword("TEST-SET-RUNSTATE"), makeKeyword("RUN-STATUS"), makeKeyword("START"), makeKeyword("END") });

    private static final SubLList $list312 = list(new SubLObject[]{ makeSymbol("KCTR-ID"), makeSymbol("KCTR-LOCK"), makeSymbol("KCTR-TEST-SPEC"), makeSymbol("KCTR-RESULT"), makeSymbol("KCTR-QUERY-RUNSTATE"), makeSymbol("KCTR-TEST-SET-RUNSTATE"), makeSymbol("KCTR-RUN-STATUS"), makeSymbol("KCTR-START"), makeSymbol("KCTR-END") });

    private static final SubLList $list313 = list(new SubLObject[]{ makeSymbol("_CSETF-KCTR-ID"), makeSymbol("_CSETF-KCTR-LOCK"), makeSymbol("_CSETF-KCTR-TEST-SPEC"), makeSymbol("_CSETF-KCTR-RESULT"), makeSymbol("_CSETF-KCTR-QUERY-RUNSTATE"), makeSymbol("_CSETF-KCTR-TEST-SET-RUNSTATE"), makeSymbol("_CSETF-KCTR-RUN-STATUS"), makeSymbol("_CSETF-KCTR-START"), makeSymbol("_CSETF-KCTR-END") });

    private static final SubLSymbol KCT_RUNSTATE_PRINT_FUNCTION_TRAMPOLINE = makeSymbol("KCT-RUNSTATE-PRINT-FUNCTION-TRAMPOLINE");

    private static final SubLList $list315 = list(makeSymbol("OPTIMIZE-FUNCALL"), makeSymbol("KCT-RUNSTATE-P"));

    private static final SubLSymbol KCTR_ID = makeSymbol("KCTR-ID");

    private static final SubLSymbol _CSETF_KCTR_ID = makeSymbol("_CSETF-KCTR-ID");

    private static final SubLSymbol KCTR_LOCK = makeSymbol("KCTR-LOCK");

    private static final SubLSymbol _CSETF_KCTR_LOCK = makeSymbol("_CSETF-KCTR-LOCK");

    private static final SubLSymbol KCTR_TEST_SPEC = makeSymbol("KCTR-TEST-SPEC");

    private static final SubLSymbol _CSETF_KCTR_TEST_SPEC = makeSymbol("_CSETF-KCTR-TEST-SPEC");

    private static final SubLSymbol KCTR_RESULT = makeSymbol("KCTR-RESULT");

    private static final SubLSymbol _CSETF_KCTR_RESULT = makeSymbol("_CSETF-KCTR-RESULT");

    private static final SubLSymbol KCTR_QUERY_RUNSTATE = makeSymbol("KCTR-QUERY-RUNSTATE");

    private static final SubLSymbol _CSETF_KCTR_QUERY_RUNSTATE = makeSymbol("_CSETF-KCTR-QUERY-RUNSTATE");

    private static final SubLSymbol KCTR_TEST_SET_RUNSTATE = makeSymbol("KCTR-TEST-SET-RUNSTATE");

    private static final SubLSymbol _CSETF_KCTR_TEST_SET_RUNSTATE = makeSymbol("_CSETF-KCTR-TEST-SET-RUNSTATE");

    private static final SubLSymbol KCTR_RUN_STATUS = makeSymbol("KCTR-RUN-STATUS");

    private static final SubLSymbol _CSETF_KCTR_RUN_STATUS = makeSymbol("_CSETF-KCTR-RUN-STATUS");

    private static final SubLSymbol KCTR_START = makeSymbol("KCTR-START");

    private static final SubLSymbol _CSETF_KCTR_START = makeSymbol("_CSETF-KCTR-START");

    private static final SubLSymbol KCTR_END = makeSymbol("KCTR-END");

    private static final SubLSymbol _CSETF_KCTR_END = makeSymbol("_CSETF-KCTR-END");

    private static final SubLSymbol $TEST_SET_RUNSTATE = makeKeyword("TEST-SET-RUNSTATE");

    private static final SubLSymbol MAKE_KCT_RUNSTATE = makeSymbol("MAKE-KCT-RUNSTATE");

    private static final SubLSymbol VISIT_DEFSTRUCT_OBJECT_KCT_RUNSTATE_METHOD = makeSymbol("VISIT-DEFSTRUCT-OBJECT-KCT-RUNSTATE-METHOD");

    private static final SubLSymbol KCT_SET_RUNSTATE_P = makeSymbol("KCT-SET-RUNSTATE-P");

    private static final SubLString $$$KCT_Runstate_Lock = makeString("KCT Runstate Lock");

    private static final SubLSymbol KCT_TEST_RUN_P = makeSymbol("KCT-TEST-RUN-P");

    private static final SubLSymbol KCT_SET_RUNSTATE = makeSymbol("KCT-SET-RUNSTATE");

    private static final SubLList $list344 = list(makeSymbol("ID"), makeSymbol("LOCK"), makeSymbol("TEST-SET"), makeSymbol("RESULT"), makeSymbol("TEST-RUNSTATES"), makeSymbol("RUN-STATUS"), makeSymbol("START"), makeSymbol("END"));

    static private final SubLList $list345 = list(makeKeyword("ID"), $LOCK, makeKeyword("TEST-SET"), makeKeyword("RESULT"), makeKeyword("TEST-RUNSTATES"), makeKeyword("RUN-STATUS"), makeKeyword("START"), makeKeyword("END"));

    private static final SubLList $list346 = list(makeSymbol("KCTSR-ID"), makeSymbol("KCTSR-LOCK"), makeSymbol("KCTSR-TEST-SET"), makeSymbol("KCTSR-RESULT"), makeSymbol("KCTSR-TEST-RUNSTATES"), makeSymbol("KCTSR-RUN-STATUS"), makeSymbol("KCTSR-START"), makeSymbol("KCTSR-END"));

    private static final SubLList $list347 = list(makeSymbol("_CSETF-KCTSR-ID"), makeSymbol("_CSETF-KCTSR-LOCK"), makeSymbol("_CSETF-KCTSR-TEST-SET"), makeSymbol("_CSETF-KCTSR-RESULT"), makeSymbol("_CSETF-KCTSR-TEST-RUNSTATES"), makeSymbol("_CSETF-KCTSR-RUN-STATUS"), makeSymbol("_CSETF-KCTSR-START"), makeSymbol("_CSETF-KCTSR-END"));

    private static final SubLSymbol KCT_SET_RUNSTATE_PRINT_FUNCTION_TRAMPOLINE = makeSymbol("KCT-SET-RUNSTATE-PRINT-FUNCTION-TRAMPOLINE");

    private static final SubLList $list349 = list(makeSymbol("OPTIMIZE-FUNCALL"), makeSymbol("KCT-SET-RUNSTATE-P"));

    private static final SubLSymbol KCTSR_ID = makeSymbol("KCTSR-ID");

    private static final SubLSymbol _CSETF_KCTSR_ID = makeSymbol("_CSETF-KCTSR-ID");

    private static final SubLSymbol KCTSR_LOCK = makeSymbol("KCTSR-LOCK");

    private static final SubLSymbol _CSETF_KCTSR_LOCK = makeSymbol("_CSETF-KCTSR-LOCK");

    private static final SubLSymbol KCTSR_TEST_SET = makeSymbol("KCTSR-TEST-SET");

    private static final SubLSymbol _CSETF_KCTSR_TEST_SET = makeSymbol("_CSETF-KCTSR-TEST-SET");

    private static final SubLSymbol KCTSR_RESULT = makeSymbol("KCTSR-RESULT");

    private static final SubLSymbol _CSETF_KCTSR_RESULT = makeSymbol("_CSETF-KCTSR-RESULT");

    private static final SubLSymbol KCTSR_TEST_RUNSTATES = makeSymbol("KCTSR-TEST-RUNSTATES");

    private static final SubLSymbol _CSETF_KCTSR_TEST_RUNSTATES = makeSymbol("_CSETF-KCTSR-TEST-RUNSTATES");

    private static final SubLSymbol KCTSR_RUN_STATUS = makeSymbol("KCTSR-RUN-STATUS");

    private static final SubLSymbol _CSETF_KCTSR_RUN_STATUS = makeSymbol("_CSETF-KCTSR-RUN-STATUS");

    private static final SubLSymbol KCTSR_START = makeSymbol("KCTSR-START");

    private static final SubLSymbol _CSETF_KCTSR_START = makeSymbol("_CSETF-KCTSR-START");

    private static final SubLSymbol KCTSR_END = makeSymbol("KCTSR-END");

    private static final SubLSymbol _CSETF_KCTSR_END = makeSymbol("_CSETF-KCTSR-END");

    private static final SubLSymbol MAKE_KCT_SET_RUNSTATE = makeSymbol("MAKE-KCT-SET-RUNSTATE");

    private static final SubLSymbol VISIT_DEFSTRUCT_OBJECT_KCT_SET_RUNSTATE_METHOD = makeSymbol("VISIT-DEFSTRUCT-OBJECT-KCT-SET-RUNSTATE-METHOD");

    private static final SubLSymbol KCT_TEST_COLLECTION_P = makeSymbol("KCT-TEST-COLLECTION-P");

    private static final SubLString $$$KCT_Set_Runstate_Lock = makeString("KCT Set Runstate Lock");

    private static final SubLSymbol KCT_ERROR_RESULT_P = makeSymbol("KCT-ERROR-RESULT-P");

    private static final SubLSymbol KCT_TEST_RUN_STATUS = makeSymbol("KCT-TEST-RUN-STATUS");

    private static final SubLSymbol KCT_FAILURE_RESULT_P = makeSymbol("KCT-FAILURE-RESULT-P");

    private static final SubLSymbol KCT_TEST_SET_RUN_P = makeSymbol("KCT-TEST-SET-RUN-P");

    private static final SubLList $list376 = list(list(makeSymbol("QUERY-SET-RUN"), makeSymbol("QUERY-RUN"), makeSymbol("FILENAME"), makeSymbol("&KEY"), makeSymbol("DONE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLList $list377 = list($DONE);

    private static final SubLSymbol $sym379$STREAM = makeUninternedSymbol("STREAM");

    private static final SubLSymbol $sym380$DONE_VAR = makeUninternedSymbol("DONE-VAR");

    private static final SubLList $list383 = list(makeSymbol("STRINGP"));

    static private final SubLList $list385 = list(makeKeyword("INPUT"));

    private static final SubLSymbol WITH_CFASL_COMMON_SYMBOLS_SIMPLE = makeSymbol("WITH-CFASL-COMMON-SYMBOLS-SIMPLE");

    private static final SubLList $list387 = list(makeSymbol("KBQ-CFASL-COMMON-SYMBOLS-SIMPLE"));

    private static final SubLSymbol WITH_NEW_CFASL_INPUT_GUID_STRING_RESOURCE = makeSymbol("WITH-NEW-CFASL-INPUT-GUID-STRING-RESOURCE");

    private static final SubLSymbol KBQ_LOAD_QUERY_SET_RUN_INT = makeSymbol("KBQ-LOAD-QUERY-SET-RUN-INT");

    private static final SubLSymbol KBQ_LOAD_QUERY_RUN_INT = makeSymbol("KBQ-LOAD-QUERY-RUN-INT");

    private static final SubLList $list395 = list(makeKeyword("EOF"));

    private static final SubLList $list396 = list(T);

    private static final SubLSymbol KBQ_NCLEAN_QUERY_RUN = makeSymbol("KBQ-NCLEAN-QUERY-RUN");

    private static final SubLList $list399 = list(list(makeSymbol("QUERY-RUN"), makeSymbol("FILENAME"), makeSymbol("&KEY"), makeSymbol("DONE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol $sym400$QUERY_SET_RUN = makeUninternedSymbol("QUERY-SET-RUN");

    private static final SubLString $str405$dwimming__s_to_NIL = makeString("dwimming ~s to NIL");

    private static final SubLString $str406$_cfasl = makeString(".cfasl");

    private static final SubLString $str407$_no_results = makeString("-no-results");

    private static final SubLString $str408$Expected_a__a_file__got__s = makeString("Expected a ~a file, got ~s");

    private static final SubLString $str409$answerable_sub_run_of_____A = makeString("answerable sub-run of :~%~A");

    private static final SubLSymbol KCT_TEST_RUN_ANSWER_COUNT = makeSymbol("KCT-TEST-RUN-ANSWER-COUNT");

    private static final SubLString $str412$succeeding_sub_run_of_____A = makeString("succeeding sub-run of :~%~A");

    private static final SubLSymbol KCT_SUCCESS_RESULT_P = makeSymbol("KCT-SUCCESS-RESULT-P");

    private static final SubLString $str414$unanswerable_sub_run_of__ = makeString("unanswerable sub-run of :");

    private static final SubLString $str416$failing_sub_run_of_____A = makeString("failing sub-run of :~%~A");





    private static final SubLString $str419$_s_sub_run_of_____A = makeString("~s sub-run of :~%~A");

    private static final SubLList $list420 = list(makeSymbol("FILTERED-QUERY-SET-RUN-1"), makeSymbol("FILTERED-QUERY-SET-RUN-2"));

    private static final SubLSymbol NOT_EQL = makeSymbol("NOT-EQL");

    private static final SubLString $$$filtered_to_queries = makeString("filtered to queries");

    private static final SubLSymbol KBQ_FILTER_QUERY_SET_RUN_TO_QUERIES_NOT_LAMBDA = makeSymbol("KBQ-FILTER-QUERY-SET-RUN-TO-QUERIES-NOT-LAMBDA");

    private static final SubLSymbol KBQ_FILTER_QUERY_SET_RUN_TO_QUERIES_LAMBDA = makeSymbol("KBQ-FILTER-QUERY-SET-RUN-TO-QUERIES-LAMBDA");

    private static final SubLString $$$filtered_to_tests = makeString("filtered to tests");

    private static final SubLSymbol KCT_FILTER_TEST_SET_RUN_TO_TESTS_NOT_LAMBDA = makeSymbol("KCT-FILTER-TEST-SET-RUN-TO-TESTS-NOT-LAMBDA");

    private static final SubLSymbol KCT_FILTER_TEST_SET_RUN_TO_TESTS_LAMBDA = makeSymbol("KCT-FILTER-TEST-SET-RUN-TO-TESTS-LAMBDA");

    private static final SubLSymbol CACHED_ALL_INSTANCES_AMONG = makeSymbol("CACHED-ALL-INSTANCES-AMONG");

    private static final SubLSymbol $cached_all_instances_among_caching_state$ = makeSymbol("*CACHED-ALL-INSTANCES-AMONG-CACHING-STATE*");

    private static final SubLSymbol CLEAR_CACHED_ALL_INSTANCES_AMONG = makeSymbol("CLEAR-CACHED-ALL-INSTANCES-AMONG");

    private static final SubLList $list431 = cons(makeSymbol("FIRST-QUERY-SET-RUN"), makeSymbol("REST-QUERY-SET-RUNS"));

    private static final SubLList $list432 = cons(makeSymbol("FIRST-TEST-SET-RUN"), makeSymbol("REST-TEST-SET-RUNS"));

    private static final SubLSymbol KCT_SUCCEEDING_TEST_SET_RUN = makeSymbol("KCT-SUCCEEDING-TEST-SET-RUN");

    private static final SubLSymbol $sym434$_ = makeSymbol(">");

    private static final SubLList $list437 = list(makeSymbol("&KEY"), makeSymbol("QUERY"), makeSymbol("MISSING-FROM-1"), makeSymbol("MISSING-FROM-2"));

    private static final SubLList $list438 = list(makeKeyword("QUERY"), makeKeyword("MISSING-FROM-1"), makeKeyword("MISSING-FROM-2"));

    private static final SubLSymbol $MISSING_FROM_1 = makeKeyword("MISSING-FROM-1");

    private static final SubLSymbol $MISSING_FROM_2 = makeKeyword("MISSING-FROM-2");

    private static final SubLSymbol $MORE_ANSWERS_2 = makeKeyword("MORE-ANSWERS-2");

    private static final SubLSymbol $MORE_ANSWERS_1 = makeKeyword("MORE-ANSWERS-1");

    private static final SubLString $str446$_S_and__S_are_different_queries = makeString("~S and ~S are different queries");

    private static final SubLString $str447$_S_has_no_result = makeString("~S has no result");

    private static final SubLString $str448$query_set_runs_contained_differen = makeString("query set runs contained different queries");

    private static final SubLString $str449$_s__s__s__s__s__ = makeString("~s ~s ~s ~s ~s~%");

    private static final SubLString $str450$_s__s__s__ = makeString("~s ~s ~s~%");

    private static final SubLString $str454$unexpected_change__S = makeString("unexpected change ~S");

    private static final SubLString $str455$_S_and__S_are_different_tests = makeString("~S and ~S are different tests");

    private static final SubLString $str456$_S_has_no_status = makeString("~S has no status");

    private static final SubLList $list458 = list(new SubLObject[]{ makeKeyword("TOTAL"), makeKeyword("INCREASE"), makeKeyword("TOTAL-SUCCESS"), makeKeyword("INCREASE"), makeKeyword("TOTAL-FAILURE"), makeKeyword("DECREASE"), makeKeyword("TOTAL-ERROR"), makeKeyword("DECREASE"), makeKeyword("TOTAL-LUMPY"), makeKeyword("DECREASE"), makeKeyword("TOTAL-ANSWERABLE"), makeKeyword("INCREASE"), makeKeyword("TOTAL-UNANSWERABLE"), makeKeyword("DECREASE"), makeKeyword("SUM-ANSWER-COUNT"), makeKeyword("INCREASE"), makeKeyword("MEAN-ANSWER-COUNT"), makeKeyword("INCREASE"), makeKeyword("MEDIAN-ANSWER-COUNT"), makeKeyword("INCREASE"), makeKeyword("MEAN-TIME-TO-FIRST-ANSWER"), makeKeyword("DECREASE"), makeKeyword("MEDIAN-TIME-TO-FIRST-ANSWER"), makeKeyword("DECREASE"), makeKeyword("STDEV-TIME-TO-FIRST-ANSWER"), makeKeyword("NEITHER"), makeKeyword("MEAN-COMPLETE-TIME-TO-FIRST-ANSWER"), makeKeyword("DECREASE"), makeKeyword("MEDIAN-COMPLETE-TIME-TO-FIRST-ANSWER"), makeKeyword("DECREASE"), makeKeyword("STDEV-COMPLETE-TIME-TO-FIRST-ANSWER"), makeKeyword("NEITHER"), makeKeyword("MEAN-TIME-TO-LAST-ANSWER"), makeKeyword("DECREASE"), makeKeyword("MEDIAN-TIME-TO-LAST-ANSWER"), makeKeyword("DECREASE"), makeKeyword("STDEV-TIME-TO-LAST-ANSWER"), makeKeyword("NEITHER"), makeKeyword("SUM-ANSWERABILITY-TIME"), makeKeyword("DECREASE"), makeKeyword("MEAN-ANSWERABILITY-TIME"), makeKeyword("DECREASE"), makeKeyword("STDEV-ANSWERABILITY-TIME"), makeKeyword("NEITHER"), makeKeyword("MEDIAN-ANSWERABILITY-TIME"), makeKeyword("DECREASE"), makeKeyword("SUM-TOTAL-TIME"), makeKeyword("DECREASE"), makeKeyword("MEAN-TOTAL-TIME"), makeKeyword("DECREASE"), makeKeyword("STDEV-TOTAL-TIME"), makeKeyword("NEITHER"), makeKeyword("MEDIAN-TOTAL-TIME"), makeKeyword("DECREASE"), makeKeyword("SUM-COMPLETE-TOTAL-TIME"), makeKeyword("DECREASE"), makeKeyword("MEAN-COMPLETE-TOTAL-TIME"), makeKeyword("DECREASE"), makeKeyword("STDEV-COMPLETE-TOTAL-TIME"), makeKeyword("NEITHER"), makeKeyword("MEDIAN-COMPLETE-TOTAL-TIME"), makeKeyword("DECREASE"), makeKeyword("MEDIAN-TIME-PER-ANSWER"), makeKeyword("DECREASE"), makeKeyword("MEDIAN-COMPLETE-TIME-PER-ANSWER"), makeKeyword("DECREASE") });

    private static final SubLList $list459 = list(makeKeyword("INCREASE"), makeKeyword("DECREASE"), makeKeyword("NEITHER"));

    private static final SubLString $str462$empty__ = makeString("empty~%");

    private static final SubLSymbol $SUM_ANSWER_COUNT = makeKeyword("SUM-ANSWER-COUNT");

    private static final SubLSymbol $MEAN_ANSWER_COUNT = makeKeyword("MEAN-ANSWER-COUNT");

    private static final SubLSymbol $MEDIAN_ANSWER_COUNT = makeKeyword("MEDIAN-ANSWER-COUNT");

    private static final SubLSymbol $SUM_HYPOTHESIZATION_TIME = makeKeyword("SUM-HYPOTHESIZATION-TIME");

    private static final SubLSymbol $STDEV_HYPOTHESIZATION_TIME = makeKeyword("STDEV-HYPOTHESIZATION-TIME");

    private static final SubLSymbol $SUM_TOTAL_TIME = makeKeyword("SUM-TOTAL-TIME");

    private static final SubLSymbol $STDEV_TOTAL_TIME = makeKeyword("STDEV-TOTAL-TIME");

    private static final SubLSymbol $SUM_COMPLETE_TOTAL_TIME = makeKeyword("SUM-COMPLETE-TOTAL-TIME");

    private static final SubLSymbol $MEAN_COMPLETE_TOTAL_TIME = makeKeyword("MEAN-COMPLETE-TOTAL-TIME");

    private static final SubLSymbol $MEDIAN_COMPLETE_TOTAL_TIME = makeKeyword("MEDIAN-COMPLETE-TOTAL-TIME");

    private static final SubLSymbol $STDEV_COMPLETE_TOTAL_TIME = makeKeyword("STDEV-COMPLETE-TOTAL-TIME");

    private static final SubLSymbol $SUM_TIME_TO_FIRST_ANSWER = makeKeyword("SUM-TIME-TO-FIRST-ANSWER");

    private static final SubLSymbol $STDEV_TIME_TO_FIRST_ANSWER = makeKeyword("STDEV-TIME-TO-FIRST-ANSWER");

    private static final SubLSymbol $SUM_COMPLETE_TIME_TO_FIRST_ANSWER = makeKeyword("SUM-COMPLETE-TIME-TO-FIRST-ANSWER");

    private static final SubLSymbol $MEAN_COMPLETE_TIME_TO_FIRST_ANSWER = makeKeyword("MEAN-COMPLETE-TIME-TO-FIRST-ANSWER");

    private static final SubLSymbol $MEDIAN_COMPLETE_TIME_TO_FIRST_ANSWER = makeKeyword("MEDIAN-COMPLETE-TIME-TO-FIRST-ANSWER");

    private static final SubLSymbol $STDEV_COMPLETE_TIME_TO_FIRST_ANSWER = makeKeyword("STDEV-COMPLETE-TIME-TO-FIRST-ANSWER");

    private static final SubLSymbol $SUM_ANSWERABILITY_TIME = makeKeyword("SUM-ANSWERABILITY-TIME");

    private static final SubLSymbol $MEAN_ANSWERABILITY_TIME = makeKeyword("MEAN-ANSWERABILITY-TIME");

    private static final SubLSymbol $MEDIAN_ANSWERABILITY_TIME = makeKeyword("MEDIAN-ANSWERABILITY-TIME");

    private static final SubLSymbol $STDEV_ANSWERABILITY_TIME = makeKeyword("STDEV-ANSWERABILITY-TIME");

    private static final SubLSymbol $SUM_TIME_TO_LAST_ANSWER = makeKeyword("SUM-TIME-TO-LAST-ANSWER");

    private static final SubLSymbol $STDEV_TIME_TO_LAST_ANSWER = makeKeyword("STDEV-TIME-TO-LAST-ANSWER");

    private static final SubLSymbol $MEDIAN_COMPLETE_TIME_PER_ANSWER = makeKeyword("MEDIAN-COMPLETE-TIME-PER-ANSWER");

    private static final SubLString $str492$ignoring_metric__S = makeString("ignoring metric ~S");

    private static final SubLSymbol $MEDIAN_TIME_PER_ANSWER = makeKeyword("MEDIAN-TIME-PER-ANSWER");

    private static final SubLSymbol KCT_TEST_RUN_QUERY_RUN = makeSymbol("KCT-TEST-RUN-QUERY-RUN");

    static private final SubLList $list499 = list(makeKeyword("COMPLETE-TIME-TO-FIRST-ANSWER"), makeKeyword("COMPLETE-TOTAL-TIME"), makeKeyword("ANSWERABILITY-TIME"), makeKeyword("ANSWER-COUNT"));

    private static final SubLString $str500$_0 = makeString(":0");

    private static final SubLSymbol BOUND_SYMBOL_P = makeSymbol("BOUND-SYMBOL-P");

    private static final SubLString $str502$____Answerability_analysis____ = makeString("~%~%Answerability analysis: ~%");

    private static final SubLString $str503$Total_____________s__s__s__ = makeString("Total:           ~s ~s ~s~%");

    private static final SubLString $str504$____Basic_analysis____ = makeString("~%~%Basic analysis: ~%");

    private static final SubLString $str505$____Mutually_Answerable____ = makeString("~%~%Mutually Answerable: ~%");

    private static final SubLString $str506$____Answerable____ = makeString("~%~%Answerable: ~%");

    private static final SubLString $str507$____Unanswerable____ = makeString("~%~%Unanswerable: ~%");

    private static final SubLList $list508 = list($BOTH, makeKeyword("BASELINE"));

    private static final SubLString $$$Mutually_Answerable_ = makeString("Mutually Answerable ");

    private static final SubLSymbol $sym510$KBQ_LUMPY_QUERY_RUN_ = makeSymbol("KBQ-LUMPY-QUERY-RUN?");

    private static final SubLString $$$Unable_to_compute_any_metrics = makeString("Unable to compute any metrics");

    private static final SubLString $str513$_____Total_Tests____4D = makeString("~%;; Total Tests : ~4D");

    private static final SubLString $str514$______Successes_____4D___S___ = makeString("~%;;  Successes  : ~4D (~S %)");

    private static final SubLString $str515$______Failures______4D___S___ = makeString("~%;;  Failures   : ~4D (~S %)");

    private static final SubLString $str516$_______Test_Set_Metrics__ = makeString("~%~%;; Test Set Metrics~%");

    private static final SubLString $str517$____Test____S = makeString("~%~%Test : ~S");

    private static final SubLString $str518$__Status____S = makeString("~%Status : ~S");

    private static final SubLString $str519$__Halt_Reason____S = makeString("~%Halt Reason : ~S");

    private static final SubLString $str520$___S__S = makeString("~%~S ~S");

    private static final SubLSymbol KBQ_QUERY_RUN_HALT_REASON = makeSymbol("KBQ-QUERY-RUN-HALT-REASON");

    private static final SubLList $list522 = list(makeKeyword("TOTAL"), ZERO_INTEGER);

    private static final SubLInteger $int$3600 = makeInteger(3600);

    private static final SubLString $str524$Running_kbq_benchmark__kbq_benchm = makeString("Running kbq benchmark (kbq-benchmark-report ");

    private static final SubLString $str525$_ = makeString(")");

    private static final SubLSymbol KBQ_BENCHMARK_RUN = makeSymbol("KBQ-BENCHMARK-RUN");

    private static final SubLString $str527$kbq_benchmark__kbq_benchmark_repo = makeString("kbq benchmark (kbq-benchmark-report ~S) in background");

    private static final SubLString $str530$_______A______ = makeString("~&*** ~A ***~%");

    private static final SubLString $str531$____overriding_query_properties__ = makeString("*** overriding-query-properties: ~A ***~%");

    private static final SubLString $str532$Tests_run_in_System__A_KB__A__ = makeString("Tests run in System ~A KB ~A~%");



    private static final SubLSymbol KCT_QUERY_SPECIFICATION = makeSymbol("KCT-QUERY-SPECIFICATION");

    private static final SubLList $list535 = list(makeKeyword("ANSWER-COUNT"), makeKeyword("TIME-TO-FIRST-ANSWER"), makeKeyword("SKSI-QUERY-TOTAL-TIME"), makeKeyword("SKSI-QUERY-START-TIMES"), makeKeyword("TOTAL-TIME"));

    private static final SubLString $str536$__ANS__TTFS____TTFA__SQ____SKSI__ = makeString(" #ANS  TTFS    TTFA #SQ    SKSI +  CYC =  TOTAL   (%SQ)  TEST~%");

    private static final SubLString $str537$_________________________________ = makeString("---------------------------------------------------------------------~%");

    private static final SubLSymbol $SKSI_QUERY_START_TIMES = makeKeyword("SKSI-QUERY-START-TIMES");

    private static final SubLSymbol $SKSI_QUERY_TOTAL_TIME = makeKeyword("SKSI-QUERY-TOTAL-TIME");

    private static final SubLString $str540$_5D__5_1F__7_1F_4D__7_1F__7_1F__7 = makeString("~5D ~5,1F ~7,1F~4D ~7,1F ~7,1F ~7,1F (~4,1F%) ~A~A~%");

    private static final SubLString $str542$___A_ = makeString(" (~A)");

    private static final SubLString $str543$_5D__5_1F__7_1F_4D__7_1F__7_1F__7 = makeString("~5D ~5,1F ~7,1F~4D ~7,1F ~7,1F ~7,1F (~4,1F%)~%");

    private static final SubLList $list544 = list(makeString("/"));

    private static final SubLInteger $int$60 = makeInteger(60);

    private static final SubLString $str546$_15A___5D__5_1F__7_1F_4D__7_1F__7 = makeString("~15A: ~5D ~5,1F ~7,1F~4D ~7,1F ~7,1F ~7,1F (~4,1F%) ~30A~%");

    private static final SubLString $str547$Running__A_queries_using__proof_s = makeString("Running ~A queries using :proof-specs");

    private static final SubLSymbol $kw549$COMPUTE_ANSWER_JUSTIFICATIONS_ = makeKeyword("COMPUTE-ANSWER-JUSTIFICATIONS?");

    private static final SubLString $str550$______Test___A = makeString("~&~%~%Test: ~A");

    private static final SubLString $str551$__Query___A = makeString("~&Query: ~A");



    private static final SubLString $str553$____Answer___A__A____A = makeString("~&~%Answer (~A/~A): ~A");

    private static final SubLString $str554$__Justification__ = makeString("~&Justification: ");

    private static final SubLSymbol UNKNOWN_SENTENCE_SUPPORT_P = makeSymbol("UNKNOWN-SENTENCE-SUPPORT-P");

    private static final SubLSymbol $sym557$GENERALITY_ESTIMATE_ = makeSymbol("GENERALITY-ESTIMATE>");



    private static final SubLString $str559$___Mt___A = makeString("~& Mt: ~A");







    private static final SubLString $str568$_A_is_not_a__A = makeString("~A is not a ~A");

    private static final SubLString $$$continue_anyway = makeString("continue anyway");

    private static final SubLString $str573$_A_is_not_a_valid__sbhl_type_erro = makeString("~A is not a valid *sbhl-type-error-action* value");

    private static final SubLString $str574$_A_is_neither_SET_P_nor_LISTP_ = makeString("~A is neither SET-P nor LISTP.");

    private static final SubLString $str575$attempting_to_bind_direction_link = makeString("attempting to bind direction link variable, to NIL. macro body not executed.");

    private static final SubLList $list576 = list(makeUninternedSymbol("LINK-NODE"), makeUninternedSymbol("MT"), makeUninternedSymbol("TV"));

    private static final SubLString $str577$Node__a_does_not_pass_sbhl_type_t = makeString("Node ~a does not pass sbhl-type-test ~a~%");

    private static final SubLString $str579$_a___s____ = makeString("~a~%~s~%~%");

    private static final SubLString $str580$__________Overview___________All_ = makeString("\n========\nOverview\n========\n\nAll #$SKSIContentTests~%");

    private static final SubLString $str581$__All___SKSIContentTests_marked_a = makeString("~%All #$SKSIContentTests marked as #$KBContentRegressionTests~%");

    private static final SubLString $str582$____SKSIContentTests_using_source = makeString("~%#$SKSIContentTests using sources we care about ~a~%");

    private static final SubLString $str583$____SKSIContentTests_marked_as___ = makeString("~%#$SKSIContentTests marked as #$KBContentRegressionTests using sources we care about~%");

    private static final SubLString $str584$______________________Breakdown_b = makeString("\n\n===================\nBreakdown by source\n===================~%~%");

    private static final SubLString $str585$_a__ = makeString("~a~%");

    private static final SubLString $str586$_ = makeString("-");

    private static final SubLString $str587$______SKSIContentTests_that_use__ = makeString("~%~%#$SKSIContentTests that use ~a~%");

    private static final SubLString $str588$____SKSIContentTests_marked_as___ = makeString("~%#$SKSIContentTests marked as #$KBContentRegressionTests that use ~a~%");

    private static final SubLString $str589$__Failure_analysis_______ = makeString("~%Failure analysis:~%~%~%");

    private static final SubLList $list590 = list(new SubLObject[]{ reader_make_constant_shell("TheSet"), list(reader_make_constant_shell("QueryFn")), list(reader_make_constant_shell("QueryFn"), list(reader_make_constant_shell("Quote"), list(reader_make_constant_shell("ist"), reader_make_constant_shell("BaseKB"), list(reader_make_constant_shell("isa"))))), list(reader_make_constant_shell("QueryFn"), list(reader_make_constant_shell("Quote"), list(reader_make_constant_shell("ist"), reader_make_constant_shell("BaseKB"), list(reader_make_constant_shell("and"))))), list(reader_make_constant_shell("QueryFn"), list(reader_make_constant_shell("Quote"), list(reader_make_constant_shell("or")))), list(reader_make_constant_shell("QueryFn"), list(reader_make_constant_shell("Quote"), list(reader_make_constant_shell("ist"), reader_make_constant_shell("BaseKB"), list(reader_make_constant_shell("isa"), makeInteger(212), reader_make_constant_shell("Dog"))))), list(reader_make_constant_shell("QueryFn"), list(reader_make_constant_shell("Quote"), list(reader_make_constant_shell("trueSubL"), list(reader_make_constant_shell("SubLQuoteFn"), list(makeSymbol("WITH-INFERENCE-ERROR-HANDLING"), list(makeSymbol("ERROR"), makeString("zyxwvut"))))))), list(reader_make_constant_shell("QueryFn"), list(reader_make_constant_shell("Quote"), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("integerBetween"), ONE_INTEGER, makeSymbol("?N"), TWO_INTEGER), list(reader_make_constant_shell("performSubL"), list(reader_make_constant_shell("ExpandSubLFn"), list(makeSymbol("?N")), list(makeSymbol("PWHEN"), list(makeSymbol("="), makeSymbol("?N"), TWO_INTEGER), list(makeSymbol("WITH-INFERENCE-ERROR-HANDLING"), list(makeSymbol("ERROR"), makeString("zyxwvut"))))))))), list(reader_make_constant_shell("QueryFn"), list(reader_make_constant_shell("Quote"), list(reader_make_constant_shell("performSubL"), list(reader_make_constant_shell("SubLQuoteFn"), list(makeSymbol("SLEEP"), FOUR_INTEGER))))), list(reader_make_constant_shell("QueryFn"), list(reader_make_constant_shell("Quote"), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("integerBetween"), ONE_INTEGER, makeSymbol("?N"), TWO_INTEGER), list(reader_make_constant_shell("performSubL"), list(reader_make_constant_shell("ExpandSubLFn"), list(makeSymbol("?N")), list(makeSymbol("SLEEP"), TWO_INTEGER)))))) });

    private static final SubLSymbol COMPUTE_NEW_ROOT_RELATIVE_ANSWER_TIMES = makeSymbol("COMPUTE-NEW-ROOT-RELATIVE-ANSWER-TIMES");

    private static final SubLList $list597 = list(list(list(list(ZERO_INTEGER, TEN_INTEGER, TWENTY_INTEGER, makeInteger(30), makeInteger(40), makeInteger(50), makeInteger(500)), list(ONE_INTEGER, TWO_INTEGER, THREE_INTEGER, makeInteger(35), makeInteger(36), makeInteger(212))), list(list(ZERO_INTEGER, ONE_INTEGER, TWO_INTEGER, THREE_INTEGER), list(THREE_INTEGER, FIVE_INTEGER, SIX_INTEGER), list(FIVE_INTEGER, makeInteger(162)))), list(list(list(ZERO_INTEGER, TEN_INTEGER, TWENTY_INTEGER, makeInteger(30), makeInteger(40), makeInteger(50)), list(ONE_INTEGER, TWO_INTEGER, THREE_INTEGER, makeInteger(35), makeInteger(36), makeInteger(212))), list(list(ZERO_INTEGER, ONE_INTEGER, TWO_INTEGER, THREE_INTEGER), list(THREE_INTEGER, FIVE_INTEGER, SIX_INTEGER), list(FIVE_INTEGER, makeInteger(162)))));

    public static final SubLObject kct_success_result_p_alt(SubLObject v_object) {
        return eq($SUCCESS, v_object);
    }

    public static SubLObject kct_success_result_p(final SubLObject v_object) {
        return eq($SUCCESS, v_object);
    }

    public static final SubLObject kct_failure_result_p_alt(SubLObject v_object) {
        return eq($FAILURE, v_object);
    }

    public static SubLObject kct_failure_result_p(final SubLObject v_object) {
        return eq($FAILURE, v_object);
    }

    public static final SubLObject kct_error_result_p_alt(SubLObject v_object) {
        return eq($ERROR, v_object);
    }

    public static SubLObject kct_error_result_p(final SubLObject v_object) {
        return eq($ERROR, v_object);
    }

    public static final SubLObject kbq_cfasl_common_symbols_alt() {
        return $kbq_cfasl_common_symbols$.getGlobalValue();
    }

    public static SubLObject kbq_cfasl_common_symbols() {
        return kbq_query_run.$kbq_cfasl_common_symbols$.getGlobalValue();
    }

    public static SubLObject kbq_cfasl_common_symbols_simple() {
        if (!kbq_query_run.$kbq_cfasl_common_symbols_simple$.getGlobalValue().isVector()) {
            kbq_query_run.$kbq_cfasl_common_symbols_simple$.setGlobalValue(apply(VECTOR, kbq_query_run.kbq_cfasl_common_symbols()));
        }
        return kbq_query_run.$kbq_cfasl_common_symbols_simple$.getGlobalValue();
    }

    public static final SubLObject with_kbq_query_set_run_alt(SubLObject macroform, SubLObject environment) {
        {
            SubLObject datum = macroform.rest();
            SubLObject current = datum;
            destructuring_bind_must_consp(current, datum, $list_alt9);
            {
                SubLObject temp = current.rest();
                current = current.first();
                {
                    SubLObject query_set_run = NIL;
                    destructuring_bind_must_consp(current, datum, $list_alt9);
                    query_set_run = current.first();
                    current = current.rest();
                    if (NIL == current) {
                        current = temp;
                        {
                            SubLObject body = current;
                            return listS(CLET, list(list($kbq_internal_time_units_per_second$, list(KBQ_QUERY_SET_RUN_INTERNAL_TIME_UNITS_PER_SECOND, query_set_run))), append(body, NIL));
                        }
                    } else {
                        cdestructuring_bind_error(datum, $list_alt9);
                    }
                }
            }
        }
        return NIL;
    }

    public static SubLObject with_kbq_query_set_run(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        destructuring_bind_must_consp(current, datum, kbq_query_run.$list11);
        final SubLObject temp = current.rest();
        current = current.first();
        SubLObject query_set_run = NIL;
        destructuring_bind_must_consp(current, datum, kbq_query_run.$list11);
        query_set_run = current.first();
        current = current.rest();
        if (NIL == current) {
            final SubLObject body;
            current = body = temp;
            return listS(CLET, list(list(kbq_query_run.$kbq_internal_time_units_per_second$, list(kbq_query_run.KBQ_QUERY_SET_RUN_INTERNAL_TIME_UNITS_PER_SECOND, query_set_run))), append(body, NIL));
        }
        cdestructuring_bind_error(datum, kbq_query_run.$list11);
        return NIL;
    }

    public static final SubLObject kbq_query_run_p_alt(SubLObject v_object) {
        return list_utilities.property_list_p(v_object);
    }

    public static SubLObject kbq_query_run_p(final SubLObject v_object) {
        return property_list_p(v_object);
    }

    public static final SubLObject kbq_discard_query_run_result_alt(SubLObject query_run) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_discard_query_run_properties(query_run, list($RESULT));
    }

    public static SubLObject kbq_discard_query_run_result(final SubLObject query_run) {
        return kbq_query_run.kbq_discard_query_run_properties(query_run, list($RESULT));
    }

    /**
     * Convert QUERY-RUN into one which has none of PROPERTIES
     */
    @LispMethod(comment = "Convert QUERY-RUN into one which has none of PROPERTIES")
    public static final SubLObject kbq_discard_query_run_properties_alt(SubLObject query_run, SubLObject v_properties) {
        {
            SubLObject new_query_run = copy_list(query_run);
            SubLObject cdolist_list_var = v_properties;
            SubLObject property = NIL;
            for (property = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , property = cdolist_list_var.first()) {
                new_query_run = remf(new_query_run, property);
            }
            return new_query_run;
        }
    }

    /**
     * Convert QUERY-RUN into one which has none of PROPERTIES
     */
    @LispMethod(comment = "Convert QUERY-RUN into one which has none of PROPERTIES")
    public static SubLObject kbq_discard_query_run_properties(final SubLObject query_run, final SubLObject v_properties) {
        SubLObject new_query_run = copy_list(query_run);
        SubLObject cdolist_list_var = v_properties;
        SubLObject property = NIL;
        property = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            new_query_run = remf(new_query_run, property);
            cdolist_list_var = cdolist_list_var.rest();
            property = cdolist_list_var.first();
        } 
        return new_query_run;
    }

    public static final SubLObject kbq_query_run_query_alt(SubLObject query_run) {
        return getf(query_run, $QUERY, UNPROVIDED);
    }

    public static SubLObject kbq_query_run_query(final SubLObject query_run) {
        return getf(query_run, $QUERY, UNPROVIDED);
    }

    public static final SubLObject kbq_query_run_result_alt(SubLObject query_run) {
        return getf(query_run, $RESULT, $MISSING);
    }

    public static SubLObject kbq_query_run_result(final SubLObject query_run) {
        return getf(query_run, $RESULT, $MISSING);
    }

    public static final SubLObject kbq_extract_query_run_metric_value_alt(SubLObject query_run, SubLObject metric, SubLObject v_default) {
        if (v_default == UNPROVIDED) {
            v_default = NIL;
        }
        return getf(query_run, metric, v_default);
    }

    public static SubLObject kbq_extract_query_run_metric_value(final SubLObject query_run, final SubLObject metric, SubLObject v_default) {
        if (v_default == UNPROVIDED) {
            v_default = NIL;
        }
        return getf(query_run, metric, v_default);
    }

    public static final SubLObject kbq_query_run_answerableP_alt(SubLObject query_run) {
        return subl_promotions.positive_integer_p(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_answer_count(query_run));
    }

    public static SubLObject kbq_query_run_answerableP(final SubLObject query_run) {
        return positive_integer_p(kbq_query_run.kbq_query_run_answer_count(query_run));
    }

    public static final SubLObject kbq_query_run_unanswerableP_alt(SubLObject query_run) {
        return makeBoolean(NIL == com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_answerableP(query_run));
    }

    public static SubLObject kbq_query_run_unanswerableP(final SubLObject query_run) {
        return makeBoolean(NIL == kbq_query_run.kbq_query_run_answerableP(query_run));
    }

    public static final SubLObject kbq_query_run_answer_count_alt(SubLObject query_run) {
        return getf(query_run, $ANSWER_COUNT, UNPROVIDED);
    }

    public static SubLObject kbq_query_run_answer_count(final SubLObject query_run) {
        return getf(query_run, $ANSWER_COUNT, UNPROVIDED);
    }

    public static SubLObject kbq_query_run_hypothesization_time(final SubLObject query_run) {
        return getf(query_run, $HYPOTHESIZATION_TIME, UNPROVIDED);
    }

    public static final SubLObject kbq_query_run_total_time_alt(SubLObject query_run) {
        return getf(query_run, $TOTAL_TIME, UNPROVIDED);
    }

    public static SubLObject kbq_query_run_total_time(final SubLObject query_run) {
        return getf(query_run, $TOTAL_TIME, UNPROVIDED);
    }

    public static final SubLObject kbq_query_run_complete_total_time_alt(SubLObject query_run) {
        return getf(query_run, $COMPLETE_TOTAL_TIME, UNPROVIDED);
    }

    public static SubLObject kbq_query_run_complete_total_time(final SubLObject query_run) {
        return getf(query_run, kbq_query_run.$COMPLETE_TOTAL_TIME, UNPROVIDED);
    }

    public static final SubLObject kbq_query_run_time_to_first_answer_alt(SubLObject query_run) {
        return getf(query_run, $TIME_TO_FIRST_ANSWER, UNPROVIDED);
    }

    public static SubLObject kbq_query_run_time_to_first_answer(final SubLObject query_run) {
        return getf(query_run, kbq_query_run.$TIME_TO_FIRST_ANSWER, UNPROVIDED);
    }

    public static final SubLObject kbq_query_run_time_to_last_answer_alt(SubLObject query_run) {
        return getf(query_run, $TIME_TO_LAST_ANSWER, UNPROVIDED);
    }

    public static SubLObject kbq_query_run_time_to_last_answer(final SubLObject query_run) {
        return getf(query_run, kbq_query_run.$TIME_TO_LAST_ANSWER, UNPROVIDED);
    }

    public static final SubLObject kbq_query_run_complete_time_to_first_answer_alt(SubLObject query_run) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $COMPLETE_TIME_TO_FIRST_ANSWER, UNPROVIDED);
    }

    public static SubLObject kbq_query_run_complete_time_to_first_answer(final SubLObject query_run) {
        return kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$COMPLETE_TIME_TO_FIRST_ANSWER, UNPROVIDED);
    }

    public static final SubLObject kbq_query_run_complete_time_to_last_answer_alt(SubLObject query_run) {
        return getf(query_run, $COMPLETE_TIME_TO_LAST_ANSWER, UNPROVIDED);
    }

    public static SubLObject kbq_query_run_complete_time_to_last_answer(final SubLObject query_run) {
        return getf(query_run, kbq_query_run.$COMPLETE_TIME_TO_LAST_ANSWER, UNPROVIDED);
    }

    public static final SubLObject kbq_query_run_total_steps_alt(SubLObject query_run) {
        return getf(query_run, $TOTAL_STEPS, UNPROVIDED);
    }

    public static SubLObject kbq_query_run_total_steps(final SubLObject query_run) {
        return getf(query_run, $TOTAL_STEPS, UNPROVIDED);
    }

    public static final SubLObject kbq_query_run_steps_to_first_answer_alt(SubLObject query_run) {
        return getf(query_run, $STEPS_TO_FIRST_ANSWER, UNPROVIDED);
    }

    public static SubLObject kbq_query_run_steps_to_first_answer(final SubLObject query_run) {
        return getf(query_run, kbq_query_run.$STEPS_TO_FIRST_ANSWER, UNPROVIDED);
    }

    public static final SubLObject kbq_query_run_steps_to_last_answer_alt(SubLObject query_run) {
        return getf(query_run, $STEPS_TO_LAST_ANSWER, UNPROVIDED);
    }

    public static SubLObject kbq_query_run_steps_to_last_answer(final SubLObject query_run) {
        return getf(query_run, kbq_query_run.$STEPS_TO_LAST_ANSWER, UNPROVIDED);
    }

    public static final SubLObject kbq_extract_query_run_property_value_alt(SubLObject query_run, SubLObject query_property) {
        {
            SubLObject query = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run);
            return kb_query.kbq_query_property_value_from_keyword(query, query_property);
        }
    }

    public static SubLObject kbq_extract_query_run_property_value(final SubLObject query_run, final SubLObject query_property) {
        final SubLObject query = kbq_query_run.kbq_query_run_query(query_run);
        return kb_query.kbq_query_property_value_from_keyword(query, query_property);
    }

    /**
     *
     *
     * @param PROPERTY;
     * 		either a metric, a query property, or a (:query-funcall <func>) specification,
     * 		which indicates to extract the :query metric and then funcall <func> over it.
     * @param DEFAULT;
     * 		only used if PROPERTY is a metric
     */
    @LispMethod(comment = "@param PROPERTY;\r\n\t\teither a metric, a query property, or a (:query-funcall <func>) specification,\r\n\t\twhich indicates to extract the :query metric and then funcall <func> over it.\r\n@param DEFAULT;\r\n\t\tonly used if PROPERTY is a metric")
    public static final SubLObject kbq_query_run_property_value_alt(SubLObject query_run, SubLObject property, SubLObject v_default) {
        if (v_default == UNPROVIDED) {
            v_default = NIL;
        }
        if ($COMPLETE_TOTAL_TIME == property) {
            {
                SubLObject complete_total_time = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_metric_value(query_run, property, UNPROVIDED);
                return NIL != complete_total_time ? ((SubLObject) (complete_total_time)) : com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_metric_value(query_run, $TOTAL_TIME, v_default);
            }
        } else {
            if ((((NIL != inference_datastructures_enumerated_types.query_metric_p(property)) || ($HALT_REASON == property)) || ($QUERY == property)) || ($ORIGIN == property)) {
                return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_metric_value(query_run, property, v_default);
            } else {
                if (NIL != inference_datastructures_enumerated_types.query_property_p(property)) {
                    return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_property_value(query_run, property);
                } else {
                    if (property == $WASTED_TIME_AFTER_LAST_ANSWER) {
                        return list_utilities.safe_difference(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $TOTAL_TIME, v_default), com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $TIME_TO_LAST_ANSWER, v_default));
                    } else {
                        if (property == $LATENCY_IMPROVEMENT_FROM_ITERATIVITY) {
                            return list_utilities.safe_difference(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $TOTAL_TIME, v_default), com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $TIME_TO_FIRST_ANSWER, v_default));
                        } else {
                            if (property == $SETUP_TIME) {
                                return list_utilities.safe_difference(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $COMPLETE_TOTAL_TIME, v_default), com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $TOTAL_TIME, v_default));
                            } else {
                                if (property == $COMPLETE_TIME_TO_FIRST_ANSWER) {
                                    return list_utilities.safe_sum(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $SETUP_TIME, v_default), com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $TIME_TO_FIRST_ANSWER, v_default));
                                } else {
                                    if (property == $COMPLETE_TIME_TO_LAST_ANSWER) {
                                        return list_utilities.safe_sum(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $SETUP_TIME, v_default), com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $TIME_TO_LAST_ANSWER, v_default));
                                    } else {
                                        if (property == $TIME_PER_ANSWER) {
                                            return list_utilities.safe_quotient(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_total_time(query_run), com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_answer_count(query_run));
                                        } else {
                                            if (property == $COMPLETE_TIME_PER_ANSWER) {
                                                return list_utilities.safe_quotient(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $COMPLETE_TOTAL_TIME, v_default), com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_answer_count(query_run));
                                            } else {
                                                if (property == $ANSWERABILITY_TIME) {
                                                    {
                                                        SubLObject good_time = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $COMPLETE_TIME_TO_FIRST_ANSWER, NIL);
                                                        if (good_time.isNumber()) {
                                                            return good_time;
                                                        } else {
                                                            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $COMPLETE_TOTAL_TIME, v_default);
                                                        }
                                                    }
                                                } else {
                                                    if (property == $ANSWERABILITY_STEPS) {
                                                        {
                                                            SubLObject good_steps = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $STEPS_TO_FIRST_ANSWER, NIL);
                                                            if (good_steps.isNumber()) {
                                                                return good_steps;
                                                            } else {
                                                                return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $TOTAL_STEPS, v_default);
                                                            }
                                                        }
                                                    } else {
                                                        if (property == $NEW_ROOT_RELATIVE_TOTAL_TIMES) {
                                                            {
                                                                SubLObject new_root_times = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $NEW_ROOT_TIMES, NIL);
                                                                SubLObject inference_end_time = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_seconds_to_internal_real_time(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $TOTAL_TIME, UNPROVIDED));
                                                                SubLObject new_root_deltas = number_utilities.compute_deltas(new_root_times, inference_end_time);
                                                                return new_root_deltas;
                                                            }
                                                        } else {
                                                            if (property == $NEW_ROOT_RELATIVE_ANSWER_TIMES) {
                                                                {
                                                                    SubLObject new_root_times = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $NEW_ROOT_TIMES, NIL);
                                                                    SubLObject answer_times = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $ANSWER_TIMES, NIL);
                                                                    return com.cyc.cycjava.cycl.inference.kbq_query_run.compute_new_root_relative_answer_times(new_root_times, answer_times);
                                                                }
                                                            } else {
                                                                if (property == $ESTIMATED_EXHAUSTIVE_PROBLEM_COUNT) {
                                                                    {
                                                                        SubLObject estimated_exhaustive_new_root_count = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $ESTIMATED_EXHAUSTIVE_NEW_ROOT_COUNT, NIL);
                                                                        SubLObject new_root_count = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $NEW_ROOT_COUNT, NIL);
                                                                        SubLObject problem_count = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $PROBLEM_COUNT, NIL);
                                                                        SubLObject problems_per_new_root = list_utilities.safe_quotient(problem_count, new_root_count);
                                                                        return list_utilities.safe_product(problems_per_new_root, estimated_exhaustive_new_root_count);
                                                                    }
                                                                } else {
                                                                    if (property == $ESTIMATED_EXHAUSTIVE_BYTE_COUNT) {
                                                                        {
                                                                            SubLObject estimated_exhaustive_problem_count = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $ESTIMATED_EXHAUSTIVE_PROBLEM_COUNT, NIL);
                                                                            return list_utilities.safe_product(NIL != special_variable_state.bound_symbol_p($median_bytes_per_problem$) ? ((SubLObject) (symbol_value($median_bytes_per_problem$))) : NIL, estimated_exhaustive_problem_count);
                                                                        }
                                                                    } else {
                                                                        if (property == $TOTAL_NEW_ROOT_INITIAL_REMOVAL_FANOUT) {
                                                                            {
                                                                                SubLObject fanouts = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $NEW_ROOT_INITIAL_REMOVAL_FANOUTS, UNPROVIDED);
                                                                                SubLObject total_fanout = number_utilities.summation(fanouts.isList() ? ((SubLObject) (fanouts)) : NIL);
                                                                                return total_fanout;
                                                                            }
                                                                        } else {
                                                                            if (property.isCons() && ($QUERY_FUNCALL == property.first())) {
                                                                                if (NIL != list_utilities.doubletonP(property)) {
                                                                                    {
                                                                                        SubLObject datum = property;
                                                                                        SubLObject current = datum;
                                                                                        SubLObject query_funcall = NIL;
                                                                                        SubLObject func = NIL;
                                                                                        destructuring_bind_must_consp(current, datum, $list_alt48);
                                                                                        query_funcall = current.first();
                                                                                        current = current.rest();
                                                                                        destructuring_bind_must_consp(current, datum, $list_alt48);
                                                                                        func = current.first();
                                                                                        current = current.rest();
                                                                                        if (NIL == current) {
                                                                                            {
                                                                                                SubLObject query = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run);
                                                                                                return funcall(func, query);
                                                                                            }
                                                                                        } else {
                                                                                            cdestructuring_bind_error(datum, $list_alt48);
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    {
                                                                                        SubLObject datum = property;
                                                                                        SubLObject current = datum;
                                                                                        SubLObject query_funcall = NIL;
                                                                                        SubLObject func = NIL;
                                                                                        SubLObject arg1 = NIL;
                                                                                        destructuring_bind_must_consp(current, datum, $list_alt49);
                                                                                        query_funcall = current.first();
                                                                                        current = current.rest();
                                                                                        destructuring_bind_must_consp(current, datum, $list_alt49);
                                                                                        func = current.first();
                                                                                        current = current.rest();
                                                                                        destructuring_bind_must_consp(current, datum, $list_alt49);
                                                                                        arg1 = current.first();
                                                                                        current = current.rest();
                                                                                        if (NIL == current) {
                                                                                            {
                                                                                                SubLObject query = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run);
                                                                                                return funcall(func, query, arg1);
                                                                                            }
                                                                                        } else {
                                                                                            cdestructuring_bind_error(datum, $list_alt49);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if (property.isCons() && ($QUERY_RUN_FUNCALL == property.first())) {
                                                                                    if (NIL != list_utilities.doubletonP(property)) {
                                                                                        {
                                                                                            SubLObject datum = property;
                                                                                            SubLObject current = datum;
                                                                                            SubLObject query_run_funcall = NIL;
                                                                                            SubLObject func = NIL;
                                                                                            destructuring_bind_must_consp(current, datum, $list_alt51);
                                                                                            query_run_funcall = current.first();
                                                                                            current = current.rest();
                                                                                            destructuring_bind_must_consp(current, datum, $list_alt51);
                                                                                            func = current.first();
                                                                                            current = current.rest();
                                                                                            if (NIL == current) {
                                                                                                return funcall(func, query_run);
                                                                                            } else {
                                                                                                cdestructuring_bind_error(datum, $list_alt51);
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        {
                                                                                            SubLObject datum = property;
                                                                                            SubLObject current = datum;
                                                                                            SubLObject query_run_funcall = NIL;
                                                                                            SubLObject func = NIL;
                                                                                            SubLObject arg1 = NIL;
                                                                                            destructuring_bind_must_consp(current, datum, $list_alt52);
                                                                                            query_run_funcall = current.first();
                                                                                            current = current.rest();
                                                                                            destructuring_bind_must_consp(current, datum, $list_alt52);
                                                                                            func = current.first();
                                                                                            current = current.rest();
                                                                                            destructuring_bind_must_consp(current, datum, $list_alt52);
                                                                                            arg1 = current.first();
                                                                                            current = current.rest();
                                                                                            if (NIL == current) {
                                                                                                return funcall(func, query_run, arg1);
                                                                                            } else {
                                                                                                cdestructuring_bind_error(datum, $list_alt52);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    return Errors.error($str_alt53$unrecognized_KBQ_property_spec__s, property);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return NIL;
    }

    /**
     *
     *
     * @param PROPERTY;
     * 		either a metric, a query property, or a (:query-funcall <func>) specification,
     * 		which indicates to extract the :query metric and then funcall <func> over it.
     * @param DEFAULT;
     * 		only used if PROPERTY is a metric
     */
    @LispMethod(comment = "@param PROPERTY;\r\n\t\teither a metric, a query property, or a (:query-funcall <func>) specification,\r\n\t\twhich indicates to extract the :query metric and then funcall <func> over it.\r\n@param DEFAULT;\r\n\t\tonly used if PROPERTY is a metric")
    public static SubLObject kbq_query_run_property_value(final SubLObject query_run, final SubLObject property, SubLObject v_default) {
        if (v_default == UNPROVIDED) {
            v_default = NIL;
        }
        if (kbq_query_run.$COMPLETE_TOTAL_TIME == property) {
            final SubLObject complete_total_time = kbq_query_run.kbq_extract_query_run_metric_value(query_run, property, UNPROVIDED);
            return NIL != complete_total_time ? complete_total_time : kbq_query_run.kbq_extract_query_run_metric_value(query_run, $TOTAL_TIME, v_default);
        }
        if ((((NIL != query_metric_p(property)) || ($HALT_REASON == property)) || ($QUERY == property)) || ($ORIGIN == property)) {
            return kbq_query_run.kbq_extract_query_run_metric_value(query_run, property, v_default);
        }
        if (NIL != query_property_p(property)) {
            return kbq_query_run.kbq_extract_query_run_property_value(query_run, property);
        }
        if (property == kbq_query_run.$WASTED_TIME_AFTER_LAST_ANSWER) {
            return safe_difference(kbq_query_run.kbq_query_run_property_value(query_run, $TOTAL_TIME, v_default), kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$TIME_TO_LAST_ANSWER, v_default));
        }
        if (property == kbq_query_run.$LATENCY_IMPROVEMENT_FROM_ITERATIVITY) {
            return safe_difference(kbq_query_run.kbq_query_run_property_value(query_run, $TOTAL_TIME, v_default), kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$TIME_TO_FIRST_ANSWER, v_default));
        }
        if (property == $SETUP_TIME) {
            return safe_difference(kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$COMPLETE_TOTAL_TIME, v_default), kbq_query_run.kbq_query_run_property_value(query_run, $TOTAL_TIME, v_default));
        }
        if (property == kbq_query_run.$COMPLETE_TIME_TO_FIRST_ANSWER) {
            return safe_sum(kbq_query_run.kbq_query_run_property_value(query_run, $SETUP_TIME, v_default), kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$TIME_TO_FIRST_ANSWER, v_default));
        }
        if (property == kbq_query_run.$COMPLETE_TIME_TO_LAST_ANSWER) {
            return safe_sum(kbq_query_run.kbq_query_run_property_value(query_run, $SETUP_TIME, v_default), kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$TIME_TO_LAST_ANSWER, v_default));
        }
        if (property == kbq_query_run.$TIME_PER_ANSWER) {
            return safe_quotient(kbq_query_run.kbq_query_run_total_time(query_run), kbq_query_run.kbq_query_run_answer_count(query_run));
        }
        if (property == kbq_query_run.$COMPLETE_TIME_PER_ANSWER) {
            return safe_quotient(kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$COMPLETE_TOTAL_TIME, v_default), kbq_query_run.kbq_query_run_answer_count(query_run));
        }
        if (property == $ANSWERABILITY_TIME) {
            final SubLObject good_time = kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$COMPLETE_TIME_TO_FIRST_ANSWER, NIL);
            if (good_time.isNumber()) {
                return good_time;
            }
            return kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$COMPLETE_TOTAL_TIME, v_default);
        } else
            if (property == $ANSWERABILITY_STEPS) {
                final SubLObject good_steps = kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$STEPS_TO_FIRST_ANSWER, NIL);
                if (good_steps.isNumber()) {
                    return good_steps;
                }
                return kbq_query_run.kbq_query_run_property_value(query_run, $TOTAL_STEPS, v_default);
            } else {
                if (property == kbq_query_run.$NEW_ROOT_RELATIVE_TOTAL_TIMES) {
                    final SubLObject new_root_times = kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$NEW_ROOT_TIMES, NIL);
                    final SubLObject inference_end_time = kbq_query_run.kbq_seconds_to_internal_real_time(kbq_query_run.kbq_query_run_property_value(query_run, $TOTAL_TIME, UNPROVIDED));
                    final SubLObject new_root_deltas = compute_deltas(new_root_times, inference_end_time);
                    return new_root_deltas;
                }
                if (property == kbq_query_run.$NEW_ROOT_RELATIVE_ANSWER_TIMES) {
                    final SubLObject new_root_times = kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$NEW_ROOT_TIMES, NIL);
                    final SubLObject answer_times = kbq_query_run.kbq_query_run_property_value(query_run, $ANSWER_TIMES, NIL);
                    return kbq_query_run.compute_new_root_relative_answer_times(new_root_times, answer_times);
                }
                if (property == kbq_query_run.$ESTIMATED_EXHAUSTIVE_PROBLEM_COUNT) {
                    final SubLObject estimated_exhaustive_new_root_count = kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$ESTIMATED_EXHAUSTIVE_NEW_ROOT_COUNT, NIL);
                    final SubLObject new_root_count = kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$NEW_ROOT_COUNT, NIL);
                    final SubLObject problem_count = kbq_query_run.kbq_query_run_property_value(query_run, $PROBLEM_COUNT, NIL);
                    final SubLObject problems_per_new_root = safe_quotient(problem_count, new_root_count);
                    return safe_product(problems_per_new_root, estimated_exhaustive_new_root_count);
                }
                if (property == kbq_query_run.$ESTIMATED_EXHAUSTIVE_BYTE_COUNT) {
                    final SubLObject estimated_exhaustive_problem_count = kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$ESTIMATED_EXHAUSTIVE_PROBLEM_COUNT, NIL);
                    return safe_product(NIL != bound_symbol_p(kbq_query_run.$median_bytes_per_problem$) ? symbol_value(kbq_query_run.$median_bytes_per_problem$) : NIL, estimated_exhaustive_problem_count);
                }
                if (property == kbq_query_run.$TOTAL_NEW_ROOT_INITIAL_REMOVAL_FANOUT) {
                    final SubLObject fanouts = kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$NEW_ROOT_INITIAL_REMOVAL_FANOUTS, UNPROVIDED);
                    final SubLObject total_fanout = summation(fanouts.isList() ? fanouts : NIL);
                    return total_fanout;
                }
                if (property.isCons() && ($QUERY_FUNCALL == property.first())) {
                    if (NIL != doubletonP(property)) {
                        SubLObject query_funcall = NIL;
                        SubLObject func = NIL;
                        destructuring_bind_must_consp(property, property, kbq_query_run.$list51);
                        query_funcall = property.first();
                        SubLObject current = property.rest();
                        destructuring_bind_must_consp(current, property, kbq_query_run.$list51);
                        func = current.first();
                        current = current.rest();
                        if (NIL == current) {
                            final SubLObject query = kbq_query_run.kbq_query_run_query(query_run);
                            return funcall(func, query);
                        }
                        cdestructuring_bind_error(property, kbq_query_run.$list51);
                    } else {
                        SubLObject query_funcall = NIL;
                        SubLObject func = NIL;
                        SubLObject arg1 = NIL;
                        destructuring_bind_must_consp(property, property, kbq_query_run.$list52);
                        query_funcall = property.first();
                        SubLObject current = property.rest();
                        destructuring_bind_must_consp(current, property, kbq_query_run.$list52);
                        func = current.first();
                        current = current.rest();
                        destructuring_bind_must_consp(current, property, kbq_query_run.$list52);
                        arg1 = current.first();
                        current = current.rest();
                        if (NIL == current) {
                            final SubLObject query2 = kbq_query_run.kbq_query_run_query(query_run);
                            return funcall(func, query2, arg1);
                        }
                        cdestructuring_bind_error(property, kbq_query_run.$list52);
                    }
                } else {
                    if ((!property.isCons()) || (kbq_query_run.$QUERY_RUN_FUNCALL != property.first())) {
                        return Errors.error(kbq_query_run.$str56$unrecognized_KBQ_property_spec__s, property);
                    }
                    if (NIL != doubletonP(property)) {
                        SubLObject query_run_funcall = NIL;
                        SubLObject func = NIL;
                        destructuring_bind_must_consp(property, property, kbq_query_run.$list54);
                        query_run_funcall = property.first();
                        SubLObject current = property.rest();
                        destructuring_bind_must_consp(current, property, kbq_query_run.$list54);
                        func = current.first();
                        current = current.rest();
                        if (NIL == current) {
                            return funcall(func, query_run);
                        }
                        cdestructuring_bind_error(property, kbq_query_run.$list54);
                    } else {
                        SubLObject query_run_funcall = NIL;
                        SubLObject func = NIL;
                        SubLObject arg1 = NIL;
                        destructuring_bind_must_consp(property, property, kbq_query_run.$list55);
                        query_run_funcall = property.first();
                        SubLObject current = property.rest();
                        destructuring_bind_must_consp(current, property, kbq_query_run.$list55);
                        func = current.first();
                        current = current.rest();
                        destructuring_bind_must_consp(current, property, kbq_query_run.$list55);
                        arg1 = current.first();
                        current = current.rest();
                        if (NIL == current) {
                            return funcall(func, query_run, arg1);
                        }
                        cdestructuring_bind_error(property, kbq_query_run.$list55);
                    }
                }
                return NIL;
            }

    }

    public static final SubLObject kbq_internal_real_time_to_seconds_alt(SubLObject internal_real_time) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                if (NIL == $kbq_internal_time_units_per_second$.getDynamicValue(thread)) {
                    Errors.error($str_alt54$Use_the__with_kbq_query_set_run_m);
                }
            }
            return divide(internal_real_time, $kbq_internal_time_units_per_second$.getDynamicValue(thread));
        }
    }

    public static SubLObject kbq_internal_real_time_to_seconds(final SubLObject internal_real_time) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == kbq_query_run.$kbq_internal_time_units_per_second$.getDynamicValue(thread))) {
            Errors.error(kbq_query_run.$str57$Use_the__with_kbq_query_set_run_m);
        }
        return divide(internal_real_time, kbq_query_run.$kbq_internal_time_units_per_second$.getDynamicValue(thread));
    }

    public static final SubLObject kbq_seconds_to_internal_real_time_alt(SubLObject seconds) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                if (NIL == $kbq_internal_time_units_per_second$.getDynamicValue(thread)) {
                    Errors.error($str_alt55$Use_the__with_kbq_query_set_run__);
                }
            }
            return multiply(seconds, $kbq_internal_time_units_per_second$.getDynamicValue(thread));
        }
    }

    public static SubLObject kbq_seconds_to_internal_real_time(final SubLObject seconds) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == kbq_query_run.$kbq_internal_time_units_per_second$.getDynamicValue(thread))) {
            Errors.error(kbq_query_run.$str58$Use_the__with_kbq_query_set_run__);
        }
        return multiply(seconds, kbq_query_run.$kbq_internal_time_units_per_second$.getDynamicValue(thread));
    }

    public static final SubLObject kbq_query_run_halt_reason_alt(SubLObject query_run) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_metric_value(query_run, $HALT_REASON, UNPROVIDED);
    }

    public static SubLObject kbq_query_run_halt_reason(final SubLObject query_run) {
        return kbq_query_run.kbq_extract_query_run_metric_value(query_run, $HALT_REASON, UNPROVIDED);
    }

    public static final SubLObject kbq_query_run_timed_outP_alt(SubLObject query_run) {
        {
            SubLObject halt_reason = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_halt_reason(query_run);
            return subl_promotions.memberP(halt_reason, $list_alt56, UNPROVIDED, UNPROVIDED);
        }
    }

    public static SubLObject kbq_query_run_timed_outP(final SubLObject query_run) {
        final SubLObject halt_reason = kbq_query_run.kbq_query_run_halt_reason(query_run);
        return memberP(halt_reason, kbq_query_run.$list59, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject kbq_query_run_tautologyP_alt(SubLObject query_run) {
        {
            SubLObject halt_reason = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_halt_reason(query_run);
            return eq($TAUTOLOGY, halt_reason);
        }
    }

    public static SubLObject kbq_query_run_tautologyP(final SubLObject query_run) {
        final SubLObject halt_reason = kbq_query_run.kbq_query_run_halt_reason(query_run);
        return eq($TAUTOLOGY, halt_reason);
    }

    public static final SubLObject kbq_query_run_total_time_less_than_1000_secondsP_alt(SubLObject query_run) {
        return list_utilities.safe_L(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_total_time(query_run), $int$1000);
    }

    public static SubLObject kbq_query_run_total_time_less_than_1000_secondsP(final SubLObject query_run) {
        return safe_L(kbq_query_run.kbq_query_run_total_time(query_run), $int$1000);
    }

    public static final SubLObject kbq_query_run_total_time_less_than_100_secondsP_alt(SubLObject query_run) {
        return list_utilities.safe_L(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_total_time(query_run), $int$100);
    }

    public static SubLObject kbq_query_run_total_time_less_than_100_secondsP(final SubLObject query_run) {
        return safe_L(kbq_query_run.kbq_query_run_total_time(query_run), $int$100);
    }

    public static final SubLObject kbq_query_run_total_time_less_than_10_secondsP_alt(SubLObject query_run) {
        return list_utilities.safe_L(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_total_time(query_run), TEN_INTEGER);
    }

    public static SubLObject kbq_query_run_total_time_less_than_10_secondsP(final SubLObject query_run) {
        return safe_L(kbq_query_run.kbq_query_run_total_time(query_run), TEN_INTEGER);
    }

    public static final SubLObject kbq_query_run_total_time_less_than_a_secondP_alt(SubLObject query_run) {
        return list_utilities.safe_L(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_total_time(query_run), ONE_INTEGER);
    }

    public static SubLObject kbq_query_run_total_time_less_than_a_secondP(final SubLObject query_run) {
        return safe_L(kbq_query_run.kbq_query_run_total_time(query_run), ONE_INTEGER);
    }

    public static final SubLObject kbq_query_run_total_time_less_than_a_tenth_of_a_secondP_alt(SubLObject query_run) {
        return list_utilities.safe_L(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_total_time(query_run), $float$0_1);
    }

    public static SubLObject kbq_query_run_total_time_less_than_a_tenth_of_a_secondP(final SubLObject query_run) {
        return safe_L(kbq_query_run.kbq_query_run_total_time(query_run), kbq_query_run.$float$0_1);
    }

    public static final SubLObject kbq_query_run_total_time_less_than_a_hundredth_of_a_secondP_alt(SubLObject query_run) {
        return list_utilities.safe_L(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_total_time(query_run), $float$0_01);
    }

    public static SubLObject kbq_query_run_total_time_less_than_a_hundredth_of_a_secondP(final SubLObject query_run) {
        return safe_L(kbq_query_run.kbq_query_run_total_time(query_run), kbq_query_run.$float$0_01);
    }

    public static final SubLObject kbq_query_run_total_time_more_than_1000_secondsP_alt(SubLObject query_run) {
        return list_utilities.safe_G(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_total_time(query_run), $int$1000);
    }

    public static SubLObject kbq_query_run_total_time_more_than_1000_secondsP(final SubLObject query_run) {
        return safe_G(kbq_query_run.kbq_query_run_total_time(query_run), $int$1000);
    }

    public static final SubLObject kbq_query_run_total_time_more_than_100_secondsP_alt(SubLObject query_run) {
        return list_utilities.safe_G(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_total_time(query_run), $int$100);
    }

    public static SubLObject kbq_query_run_total_time_more_than_100_secondsP(final SubLObject query_run) {
        return safe_G(kbq_query_run.kbq_query_run_total_time(query_run), $int$100);
    }

    public static final SubLObject kbq_query_run_total_time_more_than_10_secondsP_alt(SubLObject query_run) {
        return list_utilities.safe_G(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_total_time(query_run), TEN_INTEGER);
    }

    public static SubLObject kbq_query_run_total_time_more_than_10_secondsP(final SubLObject query_run) {
        return safe_G(kbq_query_run.kbq_query_run_total_time(query_run), TEN_INTEGER);
    }

    public static final SubLObject kbq_query_run_total_time_more_than_a_secondP_alt(SubLObject query_run) {
        return list_utilities.safe_G(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_total_time(query_run), ONE_INTEGER);
    }

    public static SubLObject kbq_query_run_total_time_more_than_a_secondP(final SubLObject query_run) {
        return safe_G(kbq_query_run.kbq_query_run_total_time(query_run), ONE_INTEGER);
    }

    public static final SubLObject kbq_query_run_total_time_more_than_a_tenth_of_a_secondP_alt(SubLObject query_run) {
        return list_utilities.safe_G(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_total_time(query_run), $float$0_1);
    }

    public static SubLObject kbq_query_run_total_time_more_than_a_tenth_of_a_secondP(final SubLObject query_run) {
        return safe_G(kbq_query_run.kbq_query_run_total_time(query_run), kbq_query_run.$float$0_1);
    }

    public static final SubLObject kbq_query_run_total_time_more_than_a_hundredth_of_a_secondP_alt(SubLObject query_run) {
        return list_utilities.safe_G(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_total_time(query_run), $float$0_01);
    }

    public static SubLObject kbq_query_run_total_time_more_than_a_hundredth_of_a_secondP(final SubLObject query_run) {
        return safe_G(kbq_query_run.kbq_query_run_total_time(query_run), kbq_query_run.$float$0_01);
    }

    public static final SubLObject kbq_query_run_more_than_1000_answersP_alt(SubLObject query_run) {
        return list_utilities.safe_G(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_answer_count(query_run), $int$1000);
    }

    public static SubLObject kbq_query_run_more_than_1000_answersP(final SubLObject query_run) {
        return safe_G(kbq_query_run.kbq_query_run_answer_count(query_run), $int$1000);
    }

    public static final SubLObject kbq_query_run_inference_proof_spec_cons_count_alt(SubLObject query_run) {
        return list_utilities.cons_count(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $INFERENCE_PROOF_SPEC, UNPROVIDED));
    }

    public static SubLObject kbq_query_run_inference_proof_spec_cons_count(final SubLObject query_run) {
        return cons_count(kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$INFERENCE_PROOF_SPEC, UNPROVIDED));
    }

    public static final SubLObject kbq_sentence_truth_query_runP_alt(SubLObject query_run) {
        {
            SubLObject query = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run);
            SubLObject sentence = kb_query.kbq_sentences(query).first();
            return el_formula_with_operator_p(sentence, $$sentenceTruth);
        }
    }

    public static SubLObject kbq_sentence_truth_query_runP(final SubLObject query_run) {
        final SubLObject query = kbq_query_run.kbq_query_run_query(query_run);
        final SubLObject sentence = kb_query.kbq_sentences(query).first();
        return el_formula_with_operator_p(sentence, kbq_query_run.$$sentenceTruth);
    }

    public static final SubLObject compute_new_root_relative_answer_times_alt(SubLObject new_root_times, SubLObject answer_times) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            answer_times = list_utilities.sort_L(copy_list(answer_times), UNPROVIDED);
            {
                SubLObject dict = dictionary.new_dictionary(symbol_function(EQ), UNPROVIDED);
                SubLObject previous_new_root_index = $int$_2;
                SubLObject previous_new_root_time = MINUS_ONE_INTEGER;
                SubLObject next_new_root_index = MINUS_ONE_INTEGER;
                SubLObject next_new_root_time = MINUS_ONE_INTEGER;
                SubLObject rest_new_root_times = new_root_times;
                SubLObject cdolist_list_var = answer_times;
                SubLObject answer_time = NIL;
                for (answer_time = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , answer_time = cdolist_list_var.first()) {
                    while ((NIL != next_new_root_time) && answer_time.numG(next_new_root_time)) {
                        previous_new_root_index = add(previous_new_root_index, ONE_INTEGER);
                        next_new_root_index = add(next_new_root_index, ONE_INTEGER);
                        previous_new_root_time = next_new_root_time;
                        next_new_root_time = rest_new_root_times.first();
                        rest_new_root_times = rest_new_root_times.rest();
                    } 
                    {
                        SubLObject relative_answer_time = subtract(answer_time, previous_new_root_time);
                        dictionary_utilities.dictionary_push(dict, previous_new_root_index, relative_answer_time);
                    }
                }
                {
                    SubLObject result = NIL;
                    SubLObject iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(dict));
                    while (NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state)) {
                        thread.resetMultipleValues();
                        {
                            SubLObject new_root_number = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                            SubLObject relative_answer_times = thread.secondMultipleValue();
                            thread.resetMultipleValues();
                            result = cons(cons(new_root_number, nreverse(relative_answer_times)), result);
                            iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state);
                        }
                    } 
                    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                    return list_utilities.sort_L(result, symbol_function(FIRST));
                }
            }
        }
    }

    public static SubLObject compute_new_root_relative_answer_times(final SubLObject new_root_times, SubLObject answer_times) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        answer_times = sort_L(copy_list(answer_times), UNPROVIDED);
        final SubLObject dict = new_dictionary(symbol_function(EQ), UNPROVIDED);
        SubLObject previous_new_root_index = $int$_2;
        SubLObject previous_new_root_time = MINUS_ONE_INTEGER;
        SubLObject next_new_root_index = MINUS_ONE_INTEGER;
        SubLObject next_new_root_time = MINUS_ONE_INTEGER;
        SubLObject rest_new_root_times = new_root_times;
        SubLObject cdolist_list_var = answer_times;
        SubLObject answer_time = NIL;
        answer_time = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            while ((NIL != next_new_root_time) && answer_time.numG(next_new_root_time)) {
                previous_new_root_index = add(previous_new_root_index, ONE_INTEGER);
                next_new_root_index = add(next_new_root_index, ONE_INTEGER);
                previous_new_root_time = next_new_root_time;
                next_new_root_time = rest_new_root_times.first();
                rest_new_root_times = rest_new_root_times.rest();
            } 
            final SubLObject relative_answer_time = subtract(answer_time, previous_new_root_time);
            dictionary_push(dict, previous_new_root_index, relative_answer_time);
            cdolist_list_var = cdolist_list_var.rest();
            answer_time = cdolist_list_var.first();
        } 
        SubLObject result = NIL;
        SubLObject iteration_state;
        for (iteration_state = do_dictionary_contents_state(dictionary_contents(dict)); NIL == do_dictionary_contents_doneP(iteration_state); iteration_state = do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            final SubLObject new_root_number = do_dictionary_contents_key_value(iteration_state);
            final SubLObject relative_answer_times = thread.secondMultipleValue();
            thread.resetMultipleValues();
            result = cons(cons(new_root_number, nreverse(relative_answer_times)), result);
        }
        do_dictionary_contents_finalize(iteration_state);
        return sort_L(result, symbol_function(FIRST));
    }

    public static final SubLObject kct_test_run_p_alt(SubLObject v_object) {
        return list_utilities.property_list_p(v_object);
    }

    public static SubLObject kct_test_run_p(final SubLObject v_object) {
        return property_list_p(v_object);
    }

    public static final SubLObject kct_make_test_run_alt(SubLObject test, SubLObject status, SubLObject query_run) {
        return list($TEST, test, $STATUS, status, $QUERY_RUN, query_run);
    }

    public static SubLObject kct_make_test_run(final SubLObject test, final SubLObject status, final SubLObject query_run) {
        return list($TEST, test, $STATUS, status, $QUERY_RUN, query_run);
    }

    public static final SubLObject kct_test_run_test_alt(SubLObject test_run) {
        return getf(test_run, $TEST, UNPROVIDED);
    }

    public static SubLObject kct_test_run_test(final SubLObject test_run) {
        return getf(test_run, $TEST, UNPROVIDED);
    }

    public static final SubLObject kct_test_run_query_run_alt(SubLObject test_run) {
        return getf(test_run, $QUERY_RUN, UNPROVIDED);
    }

    public static SubLObject kct_test_run_query_run(final SubLObject test_run) {
        return getf(test_run, $QUERY_RUN, UNPROVIDED);
    }

    public static final SubLObject kct_test_run_status_alt(SubLObject test_run) {
        return getf(test_run, $STATUS, UNPROVIDED);
    }

    public static SubLObject kct_test_run_status(final SubLObject test_run) {
        return getf(test_run, $STATUS, UNPROVIDED);
    }

    public static SubLObject kct_test_run_answer_count(final SubLObject test_run) {
        return kbq_query_run.kbq_query_run_answer_count(kbq_query_run.kct_test_run_query_run(test_run));
    }

    public static final SubLObject kbq_query_set_run_p_alt(SubLObject v_object) {
        return list_utilities.property_list_p(v_object);
    }

    public static SubLObject kbq_query_set_run_p(final SubLObject v_object) {
        return property_list_p(v_object);
    }

    public static final SubLObject kbq_make_query_set_run_alt(SubLObject query_runs, SubLObject comment) {
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        return list(new SubLObject[]{ $MACHINE, Environment.get_network_name(UNPROVIDED), $DATE, get_universal_time(), $BOGOMIPS, misc_utilities.machine_bogomips(), $INTERNAL_TIME_UNITS_PER_SECOND, time_high.$internal_time_units_per_second$.getGlobalValue(), $PATCH_LEVEL, system_info.cyc_revision_numbers(), $COMMENT, comment, $QUERY_RUNS, query_runs });
    }

    public static SubLObject kbq_make_query_set_run(final SubLObject query_runs, SubLObject comment) {
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        return list(new SubLObject[]{ $MACHINE, Environment.get_network_name(UNPROVIDED), $DATE, get_universal_time(), $BOGOMIPS, machine_bogomips(), kbq_query_run.$INTERNAL_TIME_UNITS_PER_SECOND, time_high.$internal_time_units_per_second$.getGlobalValue(), $PATCH_LEVEL, cyc_revision_numbers(), $COMMENT, comment, $QUERY_RUNS, query_runs });
    }

    /**
     *
     *
     * @return query-set-run-p; The result of merging all the independent QUERY-SET-RUNS
    together into one large batched query-set-run.  The query-set run information
    from the first one is preserved since it is assumed that all the query-set-runs
    share this info (or are at least comparable).
     */
    @LispMethod(comment = "@return query-set-run-p; The result of merging all the independent QUERY-SET-RUNS\r\ntogether into one large batched query-set-run.  The query-set run information\r\nfrom the first one is preserved since it is assumed that all the query-set-runs\r\nshare this info (or are at least comparable).")
    public static final SubLObject kbq_nmerge_query_set_runs_alt(SubLObject query_set_runs, SubLObject comment) {
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        if (NIL == query_set_runs) {
            return NIL;
        }
        {
            SubLObject first_query_set_run = query_set_runs.first();
            SubLObject all_query_runs = Mapping.mapcan(symbol_function(KBQ_QUERY_SET_RUN_QUERY_RUNS), query_set_runs, EMPTY_SUBL_OBJECT_ARRAY);
            SubLObject merged_query_set_run = first_query_set_run;
            merged_query_set_run = putf(merged_query_set_run, $QUERY_RUNS, all_query_runs);
            if (NIL != comment) {
                merged_query_set_run = putf(merged_query_set_run, $COMMENT, comment);
            }
            return merged_query_set_run;
        }
    }

    /**
     *
     *
     * @return query-set-run-p; The result of merging all the independent QUERY-SET-RUNS
    together into one large batched query-set-run.  The query-set run information
    from the first one is preserved since it is assumed that all the query-set-runs
    share this info (or are at least comparable).
     */
    @LispMethod(comment = "@return query-set-run-p; The result of merging all the independent QUERY-SET-RUNS\r\ntogether into one large batched query-set-run.  The query-set run information\r\nfrom the first one is preserved since it is assumed that all the query-set-runs\r\nshare this info (or are at least comparable).")
    public static SubLObject kbq_nmerge_query_set_runs(final SubLObject query_set_runs, SubLObject comment) {
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        if (NIL == query_set_runs) {
            return NIL;
        }
        final SubLObject first_query_set_run = query_set_runs.first();
        final SubLObject all_query_runs = Mapping.mapcan(symbol_function(kbq_query_run.KBQ_QUERY_SET_RUN_QUERY_RUNS), query_set_runs, EMPTY_SUBL_OBJECT_ARRAY);
        SubLObject merged_query_set_run = first_query_set_run;
        merged_query_set_run = putf(merged_query_set_run, $QUERY_RUNS, all_query_runs);
        if (NIL != comment) {
            merged_query_set_run = putf(merged_query_set_run, $COMMENT, comment);
        }
        return merged_query_set_run;
    }

    /**
     * Convert QUERY-SET-RUN into one which has no :result for any of its query-runs.
     */
    @LispMethod(comment = "Convert QUERY-SET-RUN into one which has no :result for any of its query-runs.")
    public static final SubLObject kbq_discard_query_set_run_results_alt(SubLObject query_set_run) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_discard_query_set_run_properties(query_set_run, list($RESULT));
    }

    /**
     * Convert QUERY-SET-RUN into one which has no :result for any of its query-runs.
     */
    @LispMethod(comment = "Convert QUERY-SET-RUN into one which has no :result for any of its query-runs.")
    public static SubLObject kbq_discard_query_set_run_results(final SubLObject query_set_run) {
        return kbq_query_run.kbq_discard_query_set_run_properties(query_set_run, list($RESULT));
    }

    /**
     * Convert QUERY-SET-RUN into one which has no property in PROPERTIES for any of its query-runs.
     */
    @LispMethod(comment = "Convert QUERY-SET-RUN into one which has no property in PROPERTIES for any of its query-runs.")
    public static final SubLObject kbq_discard_query_set_run_properties_alt(SubLObject query_set_run, SubLObject v_properties) {
        {
            SubLObject new_query_set_run = copy_list(query_set_run);
            SubLObject query_runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
            SubLObject new_query_runs = NIL;
            SubLObject cdolist_list_var = query_runs;
            SubLObject query_run = NIL;
            for (query_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run = cdolist_list_var.first()) {
                {
                    SubLObject new_query_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_discard_query_run_properties(query_run, v_properties);
                    new_query_runs = cons(new_query_run, new_query_runs);
                }
            }
            new_query_set_run = putf(new_query_set_run, $QUERY_RUNS, new_query_runs);
            return new_query_set_run;
        }
    }

    /**
     * Convert QUERY-SET-RUN into one which has no property in PROPERTIES for any of its query-runs.
     */
    @LispMethod(comment = "Convert QUERY-SET-RUN into one which has no property in PROPERTIES for any of its query-runs.")
    public static SubLObject kbq_discard_query_set_run_properties(final SubLObject query_set_run, final SubLObject v_properties) {
        SubLObject new_query_set_run = copy_list(query_set_run);
        final SubLObject query_runs = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
        SubLObject new_query_runs = NIL;
        SubLObject cdolist_list_var = query_runs;
        SubLObject query_run = NIL;
        query_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject new_query_run = kbq_query_run.kbq_discard_query_run_properties(query_run, v_properties);
            new_query_runs = cons(new_query_run, new_query_runs);
            cdolist_list_var = cdolist_list_var.rest();
            query_run = cdolist_list_var.first();
        } 
        new_query_set_run = putf(new_query_set_run, $QUERY_RUNS, new_query_runs);
        return new_query_set_run;
    }

    /**
     *
     *
     * @return query-set-run-p; Construct a query-set-run from all the query-runs from the
    test-runs in TEST-SET-RUN
     */
    @LispMethod(comment = "@return query-set-run-p; Construct a query-set-run from all the query-runs from the\r\ntest-runs in TEST-SET-RUN")
    public static final SubLObject kbq_make_query_set_run_from_test_set_run_alt(SubLObject test_set_run) {
        {
            SubLObject query_runs = NIL;
            SubLObject datum = test_set_run;
            SubLObject current = datum;
            SubLObject allow_other_keys_p = NIL;
            SubLObject rest = current;
            SubLObject bad = NIL;
            SubLObject current_1 = NIL;
            for (; NIL != rest;) {
                destructuring_bind_must_consp(rest, datum, $list_alt77);
                current_1 = rest.first();
                rest = rest.rest();
                destructuring_bind_must_consp(rest, datum, $list_alt77);
                if (NIL == member(current_1, $list_alt78, UNPROVIDED, UNPROVIDED)) {
                    bad = T;
                }
                if (current_1 == $ALLOW_OTHER_KEYS) {
                    allow_other_keys_p = rest.first();
                }
                rest = rest.rest();
            }
            if ((NIL != bad) && (NIL == allow_other_keys_p)) {
                cdestructuring_bind_error(datum, $list_alt77);
            }
            {
                SubLObject machine_tail = property_list_member($MACHINE, current);
                SubLObject machine = (NIL != machine_tail) ? ((SubLObject) (cadr(machine_tail))) : NIL;
                SubLObject date_tail = property_list_member($DATE, current);
                SubLObject date = (NIL != date_tail) ? ((SubLObject) (cadr(date_tail))) : NIL;
                SubLObject bogomips_tail = property_list_member($BOGOMIPS, current);
                SubLObject bogomips = (NIL != bogomips_tail) ? ((SubLObject) (cadr(bogomips_tail))) : NIL;
                SubLObject internal_time_units_per_second_tail = property_list_member($INTERNAL_TIME_UNITS_PER_SECOND, current);
                SubLObject internal_time_units_per_second = (NIL != internal_time_units_per_second_tail) ? ((SubLObject) (cadr(internal_time_units_per_second_tail))) : NIL;
                SubLObject patch_level_tail = property_list_member($PATCH_LEVEL, current);
                SubLObject patch_level = (NIL != patch_level_tail) ? ((SubLObject) (cadr(patch_level_tail))) : NIL;
                SubLObject comment_tail = property_list_member($COMMENT, current);
                SubLObject comment = (NIL != comment_tail) ? ((SubLObject) (cadr(comment_tail))) : NIL;
                SubLObject test_runs_tail = property_list_member($TEST_RUNS, current);
                SubLObject test_runs = (NIL != test_runs_tail) ? ((SubLObject) (cadr(test_runs_tail))) : NIL;
                SubLObject cdolist_list_var = test_runs;
                SubLObject test_run = NIL;
                for (test_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , test_run = cdolist_list_var.first()) {
                    {
                        SubLObject query_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_query_run(test_run);
                        query_runs = cons(query_run, query_runs);
                    }
                }
                query_runs = nreverse(query_runs);
                return list(new SubLObject[]{ $MACHINE, machine, $DATE, date, $BOGOMIPS, bogomips, $INTERNAL_TIME_UNITS_PER_SECOND, internal_time_units_per_second, $PATCH_LEVEL, patch_level, $COMMENT, comment, $QUERY_RUNS, query_runs });
            }
        }
    }

    /**
     *
     *
     * @return query-set-run-p; Construct a query-set-run from all the query-runs from the
    test-runs in TEST-SET-RUN
     */
    @LispMethod(comment = "@return query-set-run-p; Construct a query-set-run from all the query-runs from the\r\ntest-runs in TEST-SET-RUN")
    public static SubLObject kbq_make_query_set_run_from_test_set_run(final SubLObject test_set_run) {
        SubLObject query_runs = NIL;
        SubLObject allow_other_keys_p = NIL;
        SubLObject rest = test_set_run;
        SubLObject bad = NIL;
        SubLObject current_$1 = NIL;
        while (NIL != rest) {
            destructuring_bind_must_consp(rest, test_set_run, kbq_query_run.$list80);
            current_$1 = rest.first();
            rest = rest.rest();
            destructuring_bind_must_consp(rest, test_set_run, kbq_query_run.$list80);
            if (NIL == member(current_$1, kbq_query_run.$list81, UNPROVIDED, UNPROVIDED)) {
                bad = T;
            }
            if (current_$1 == kbq_query_run.$ALLOW_OTHER_KEYS) {
                allow_other_keys_p = rest.first();
            }
            rest = rest.rest();
        } 
        if ((NIL != bad) && (NIL == allow_other_keys_p)) {
            cdestructuring_bind_error(test_set_run, kbq_query_run.$list80);
        }
        final SubLObject machine_tail = property_list_member($MACHINE, test_set_run);
        final SubLObject machine = (NIL != machine_tail) ? cadr(machine_tail) : NIL;
        final SubLObject date_tail = property_list_member($DATE, test_set_run);
        final SubLObject date = (NIL != date_tail) ? cadr(date_tail) : NIL;
        final SubLObject bogomips_tail = property_list_member($BOGOMIPS, test_set_run);
        final SubLObject bogomips = (NIL != bogomips_tail) ? cadr(bogomips_tail) : NIL;
        final SubLObject internal_time_units_per_second_tail = property_list_member(kbq_query_run.$INTERNAL_TIME_UNITS_PER_SECOND, test_set_run);
        final SubLObject internal_time_units_per_second = (NIL != internal_time_units_per_second_tail) ? cadr(internal_time_units_per_second_tail) : NIL;
        final SubLObject patch_level_tail = property_list_member($PATCH_LEVEL, test_set_run);
        final SubLObject patch_level = (NIL != patch_level_tail) ? cadr(patch_level_tail) : NIL;
        final SubLObject comment_tail = property_list_member($COMMENT, test_set_run);
        final SubLObject comment = (NIL != comment_tail) ? cadr(comment_tail) : NIL;
        final SubLObject test_runs_tail = property_list_member($TEST_RUNS, test_set_run);
        SubLObject cdolist_list_var;
        final SubLObject test_runs = cdolist_list_var = (NIL != test_runs_tail) ? cadr(test_runs_tail) : NIL;
        SubLObject test_run = NIL;
        test_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject query_run = kbq_query_run.kct_test_run_query_run(test_run);
            query_runs = cons(query_run, query_runs);
            cdolist_list_var = cdolist_list_var.rest();
            test_run = cdolist_list_var.first();
        } 
        query_runs = nreverse(query_runs);
        return list(new SubLObject[]{ $MACHINE, machine, $DATE, date, $BOGOMIPS, bogomips, kbq_query_run.$INTERNAL_TIME_UNITS_PER_SECOND, internal_time_units_per_second, $PATCH_LEVEL, patch_level, $COMMENT, comment, $QUERY_RUNS, query_runs });
    }

    public static final SubLObject kbq_query_set_run_property_value_alt(SubLObject query_set_run, SubLObject property, SubLObject v_default) {
        if (v_default == UNPROVIDED) {
            v_default = NIL;
        }
        return getf(query_set_run, property, v_default);
    }

    public static SubLObject kbq_query_set_run_property_value(final SubLObject query_set_run, final SubLObject property, SubLObject v_default) {
        if (v_default == UNPROVIDED) {
            v_default = NIL;
        }
        return getf(query_set_run, property, v_default);
    }

    public static final SubLObject kbq_query_set_run_comment_alt(SubLObject query_set_run) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_property_value(query_set_run, $COMMENT, NIL);
    }

    public static SubLObject kbq_query_set_run_comment(final SubLObject query_set_run) {
        return kbq_query_run.kbq_query_set_run_property_value(query_set_run, $COMMENT, NIL);
    }

    public static final SubLObject kbq_query_set_run_query_runs_alt(SubLObject query_set_run) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_property_value(query_set_run, $QUERY_RUNS, NIL);
    }

    public static SubLObject kbq_query_set_run_query_runs(final SubLObject query_set_run) {
        return kbq_query_run.kbq_query_set_run_property_value(query_set_run, $QUERY_RUNS, NIL);
    }

    public static final SubLObject kbq_query_set_run_patch_level_alt(SubLObject query_set_run) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_property_value(query_set_run, $PATCH_LEVEL, NIL);
    }

    public static SubLObject kbq_query_set_run_patch_level(final SubLObject query_set_run) {
        return kbq_query_run.kbq_query_set_run_property_value(query_set_run, $PATCH_LEVEL, NIL);
    }

    public static final SubLObject kbq_query_set_run_internal_time_units_per_second_alt(SubLObject query_set_run) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_property_value(query_set_run, $INTERNAL_TIME_UNITS_PER_SECOND, NIL);
    }

    public static SubLObject kbq_query_set_run_internal_time_units_per_second(final SubLObject query_set_run) {
        return kbq_query_run.kbq_query_set_run_property_value(query_set_run, kbq_query_run.$INTERNAL_TIME_UNITS_PER_SECOND, NIL);
    }

    /**
     * Sets PROPERTY to VALUE for all query runs in QUERY-SET-RUN.
     */
    @LispMethod(comment = "Sets PROPERTY to VALUE for all query runs in QUERY-SET-RUN.")
    public static final SubLObject kbq_query_set_run_put_query_run_property_alt(SubLObject query_set_run, SubLObject property, SubLObject value) {
        {
            SubLObject query_runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
            SubLObject new_query_runs = NIL;
            SubLObject cdolist_list_var = query_runs;
            SubLObject query_run = NIL;
            for (query_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run = cdolist_list_var.first()) {
                new_query_runs = cons(putf(copy_list(query_run), property, value), new_query_runs);
            }
            new_query_runs = nreverse(new_query_runs);
            query_set_run = putf(copy_list(query_set_run), $QUERY_RUNS, new_query_runs);
            return query_set_run;
        }
    }

    /**
     * Sets PROPERTY to VALUE for all query runs in QUERY-SET-RUN.
     */
    @LispMethod(comment = "Sets PROPERTY to VALUE for all query runs in QUERY-SET-RUN.")
    public static SubLObject kbq_query_set_run_put_query_run_property(SubLObject query_set_run, final SubLObject property, final SubLObject value) {
        final SubLObject query_runs = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
        SubLObject new_query_runs = NIL;
        SubLObject cdolist_list_var = query_runs;
        SubLObject query_run = NIL;
        query_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            new_query_runs = cons(putf(copy_list(query_run), property, value), new_query_runs);
            cdolist_list_var = cdolist_list_var.rest();
            query_run = cdolist_list_var.first();
        } 
        new_query_runs = nreverse(new_query_runs);
        query_set_run = putf(copy_list(query_set_run), $QUERY_RUNS, new_query_runs);
        return query_set_run;
    }

    public static final SubLObject kbq_extract_query_property_values_alt(SubLObject query_set_run, SubLObject query_property) {
        {
            SubLObject query_runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
            SubLObject property_values = NIL;
            SubLObject cdolist_list_var = query_runs;
            SubLObject query_run = NIL;
            for (query_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run = cdolist_list_var.first()) {
                {
                    SubLObject property_value = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_property_value(query_run, query_property);
                    property_values = cons(property_value, property_values);
                }
            }
            return nreverse(property_values);
        }
    }

    public static SubLObject kbq_extract_query_property_values(final SubLObject query_set_run, final SubLObject query_property) {
        final SubLObject query_runs = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
        SubLObject property_values = NIL;
        SubLObject cdolist_list_var = query_runs;
        SubLObject query_run = NIL;
        query_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject property_value = kbq_query_run.kbq_extract_query_run_property_value(query_run, query_property);
            property_values = cons(property_value, property_values);
            cdolist_list_var = cdolist_list_var.rest();
            query_run = cdolist_list_var.first();
        } 
        return nreverse(property_values);
    }

    public static final SubLObject kbq_extract_metric_values_alt(SubLObject query_set_run, SubLObject metric, SubLObject v_default) {
        if (v_default == UNPROVIDED) {
            v_default = NIL;
        }
        {
            SubLObject query_runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
            SubLObject metric_values = NIL;
            SubLObject cdolist_list_var = query_runs;
            SubLObject query_run = NIL;
            for (query_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run = cdolist_list_var.first()) {
                {
                    SubLObject metric_value = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_metric_value(query_run, metric, v_default);
                    metric_values = cons(metric_value, metric_values);
                }
            }
            return nreverse(metric_values);
        }
    }

    public static SubLObject kbq_extract_metric_values(final SubLObject query_set_run, final SubLObject metric, SubLObject v_default) {
        if (v_default == UNPROVIDED) {
            v_default = NIL;
        }
        final SubLObject query_runs = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
        SubLObject metric_values = NIL;
        SubLObject cdolist_list_var = query_runs;
        SubLObject query_run = NIL;
        query_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject metric_value = kbq_query_run.kbq_extract_query_run_metric_value(query_run, metric, v_default);
            metric_values = cons(metric_value, metric_values);
            cdolist_list_var = cdolist_list_var.rest();
            query_run = cdolist_list_var.first();
        } 
        return nreverse(metric_values);
    }

    /**
     *
     *
     * @param PROPERTY;
     * 		either a metric, a query property, or a (:query-funcall <func>) specification,
     * 		which indicates to extract the :query metric and then mapcar <func> over it.
     * @param DEFAULT;
     * 		only used if PROPERTY is a metric
     */
    @LispMethod(comment = "@param PROPERTY;\r\n\t\teither a metric, a query property, or a (:query-funcall <func>) specification,\r\n\t\twhich indicates to extract the :query metric and then mapcar <func> over it.\r\n@param DEFAULT;\r\n\t\tonly used if PROPERTY is a metric")
    public static final SubLObject kbq_extract_property_values_alt(SubLObject query_set_run, SubLObject property, SubLObject v_default) {
        if (v_default == UNPROVIDED) {
            v_default = NIL;
        }
        {
            SubLObject query_runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
            SubLObject property_values = NIL;
            SubLObject cdolist_list_var = query_runs;
            SubLObject query_run = NIL;
            for (query_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run = cdolist_list_var.first()) {
                {
                    SubLObject property_value = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, property, v_default);
                    property_values = cons(property_value, property_values);
                }
            }
            return nreverse(property_values);
        }
    }

    /**
     *
     *
     * @param PROPERTY;
     * 		either a metric, a query property, or a (:query-funcall <func>) specification,
     * 		which indicates to extract the :query metric and then mapcar <func> over it.
     * @param DEFAULT;
     * 		only used if PROPERTY is a metric
     */
    @LispMethod(comment = "@param PROPERTY;\r\n\t\teither a metric, a query property, or a (:query-funcall <func>) specification,\r\n\t\twhich indicates to extract the :query metric and then mapcar <func> over it.\r\n@param DEFAULT;\r\n\t\tonly used if PROPERTY is a metric")
    public static SubLObject kbq_extract_property_values(final SubLObject query_set_run, final SubLObject property, SubLObject v_default) {
        if (v_default == UNPROVIDED) {
            v_default = NIL;
        }
        final SubLObject query_runs = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
        SubLObject property_values = NIL;
        SubLObject cdolist_list_var = query_runs;
        SubLObject query_run = NIL;
        query_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject property_value = kbq_query_run.kbq_query_run_property_value(query_run, property, v_default);
            property_values = cons(property_value, property_values);
            cdolist_list_var = cdolist_list_var.rest();
            query_run = cdolist_list_var.first();
        } 
        return nreverse(property_values);
    }

    public static final SubLObject kbq_query_set_run_queries_alt(SubLObject query_set_run) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_property_values(query_set_run, $QUERY, UNPROVIDED);
    }

    public static SubLObject kbq_query_set_run_queries(final SubLObject query_set_run) {
        return kbq_query_run.kbq_extract_property_values(query_set_run, $QUERY, UNPROVIDED);
    }

    public static final SubLObject kbq_query_set_run_query_count_alt(SubLObject query_set_run) {
        return length(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run));
    }

    public static SubLObject kbq_query_set_run_query_count(final SubLObject query_set_run) {
        return length(kbq_query_run.kbq_query_set_run_query_runs(query_set_run));
    }

    public static final SubLObject kbq_query_set_run_valid_queries_alt(SubLObject query_set_run) {
        return delete_if($sym81$INVALID_FORT_, com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_queries(query_set_run), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject kbq_query_set_run_valid_queries(final SubLObject query_set_run) {
        return delete_if(kbq_query_run.$sym84$INVALID_FORT_, kbq_query_run.kbq_query_set_run_queries(query_set_run), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject kbq_query_set_run_runnable_queries_alt(SubLObject query_set_run) {
        return list_utilities.delete_if_not($sym82$KBQ_RUNNABLE_, delete_if($sym81$INVALID_FORT_, com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_queries(query_set_run), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject kbq_query_set_run_runnable_queries(final SubLObject query_set_run) {
        return delete_if_not(kbq_query_run.$sym85$KBQ_RUNNABLE_, delete_if(kbq_query_run.$sym84$INVALID_FORT_, kbq_query_run.kbq_query_set_run_queries(query_set_run), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject kbq_query_set_run_remove_invalid_queries_alt(SubLObject query_set_run) {
        {
            SubLObject valid_queries = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_valid_queries(query_set_run);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run, valid_queries, UNPROVIDED);
        }
    }

    public static SubLObject kbq_query_set_run_remove_invalid_queries(final SubLObject query_set_run) {
        final SubLObject valid_queries = kbq_query_run.kbq_query_set_run_valid_queries(query_set_run);
        return kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run, valid_queries, UNPROVIDED);
    }

    public static final SubLObject kbq_query_set_run_remove_unrunnable_queries_alt(SubLObject query_set_run) {
        {
            SubLObject runnable_queries = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_runnable_queries(query_set_run);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run, runnable_queries, UNPROVIDED);
        }
    }

    public static SubLObject kbq_query_set_run_remove_unrunnable_queries(final SubLObject query_set_run) {
        final SubLObject runnable_queries = kbq_query_run.kbq_query_set_run_runnable_queries(query_set_run);
        return kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run, runnable_queries, UNPROVIDED);
    }

    public static final SubLObject kbq_compute_pad_table_alt(SubLObject query_set_run) {
        {
            SubLObject answerable = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_answerable_query_set_run(query_set_run);
            SubLObject all_answerable_times_to_first_answer = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_metric_values(answerable, $TIME_TO_FIRST_ANSWER, UNPROVIDED);
            SubLObject sorted_times_to_first_answer = Sort.sort(all_answerable_times_to_first_answer, symbol_function($sym83$_), UNPROVIDED);
            return sorted_times_to_first_answer;
        }
    }

    public static SubLObject kbq_compute_pad_table(final SubLObject query_set_run) {
        final SubLObject answerable = kbq_query_run.kbq_answerable_query_set_run(query_set_run);
        final SubLObject all_answerable_times_to_first_answer = kbq_query_run.kbq_extract_metric_values(answerable, kbq_query_run.$TIME_TO_FIRST_ANSWER, UNPROVIDED);
        final SubLObject sorted_times_to_first_answer = Sort.sort(all_answerable_times_to_first_answer, symbol_function(kbq_query_run.$sym86$_), UNPROVIDED);
        return sorted_times_to_first_answer;
    }

    /**
     * Starts with the median and adds one from each end until the mean is more than N times the median.
     */
    @LispMethod(comment = "Starts with the median and adds one from each end until the mean is more than N times the median.")
    public static final SubLObject kbq_queries_within_n_of_median_alt(SubLObject query_set_run, SubLObject n, SubLObject metric) {
        if (metric == UNPROVIDED) {
            metric = $TOTAL_TIME;
        }
        {
            SubLObject median_metric = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_median_metric(metric);
            SubLObject mean_metric = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_mean_metric(metric);
            SubLObject query_runs = Sort.sort(copy_list(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run)), $sym84$SAFE__, com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_function_for_metric(metric));
            SubLObject analysis = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_analyze_query_set_run(query_set_run, UNPROVIDED);
            SubLObject median = getf(analysis, median_metric, UNPROVIDED);
            SubLObject query_run_count = length(query_runs);
            SubLObject width = ZERO_INTEGER;
            SubLObject mean = median;
            while (mean.numLE(multiply(n, median)) && width.numL(query_run_count)) {
                width = add(width, ONE_INTEGER);
                {
                    SubLObject sample_query_runs = list_utilities.middle_sublist(query_runs, width);
                    SubLObject sample_analysis = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_analyze_query_runs(sample_query_runs, list(metric));
                    mean = getf(sample_analysis, mean_metric, UNPROVIDED);
                    format(T, $str_alt85$_s_____s__, add(ONE_INTEGER, multiply(TWO_INTEGER, width)), mean);
                }
            } 
            {
                SubLObject subset_query_runs = list_utilities.middle_sublist(query_runs, subtract(width, ONE_INTEGER));
                SubLObject subset_queries = Mapping.mapcar(KBQ_QUERY_RUN_QUERY, subset_query_runs);
                return subset_queries;
            }
        }
    }

    /**
     * Starts with the median and adds one from each end until the mean is more than N times the median.
     */
    @LispMethod(comment = "Starts with the median and adds one from each end until the mean is more than N times the median.")
    public static SubLObject kbq_queries_within_n_of_median(final SubLObject query_set_run, final SubLObject n, SubLObject metric) {
        if (metric == UNPROVIDED) {
            metric = $TOTAL_TIME;
        }
        final SubLObject median_metric = kbq_query_run.kbq_median_metric(metric);
        final SubLObject mean_metric = kbq_query_run.kbq_mean_metric(metric);
        final SubLObject query_runs = Sort.sort(copy_list(kbq_query_run.kbq_query_set_run_query_runs(query_set_run)), kbq_query_run.$sym87$SAFE__, kbq_query_run.kbq_function_for_metric(metric));
        final SubLObject analysis = kbq_query_run.kbq_analyze_query_set_run(query_set_run, UNPROVIDED);
        final SubLObject median = getf(analysis, median_metric, UNPROVIDED);
        final SubLObject query_run_count = length(query_runs);
        SubLObject width = ZERO_INTEGER;
        SubLObject mean = median;
        while (mean.numLE(multiply(n, median)) && width.numL(query_run_count)) {
            width = add(width, ONE_INTEGER);
            final SubLObject sample_query_runs = middle_sublist(query_runs, width);
            final SubLObject sample_analysis = kbq_query_run.kbq_analyze_query_runs(sample_query_runs, list(metric));
            mean = getf(sample_analysis, mean_metric, UNPROVIDED);
            format(T, kbq_query_run.$str88$_s_____s__, add(ONE_INTEGER, multiply(TWO_INTEGER, width)), mean);
        } 
        final SubLObject subset_query_runs = middle_sublist(query_runs, subtract(width, ONE_INTEGER));
        final SubLObject subset_queries = Mapping.mapcar(kbq_query_run.KBQ_QUERY_RUN_QUERY, subset_query_runs);
        return subset_queries;
    }

    public static final SubLObject kbq_median_metric_alt(SubLObject metric) {
        {
            SubLObject pcase_var = metric;
            if (pcase_var.eql($TOTAL_TIME)) {
                return $MEDIAN_TOTAL_TIME;
            } else {
                if (pcase_var.eql($TIME_TO_FIRST_ANSWER)) {
                    return $MEDIAN_TIME_TO_FIRST_ANSWER;
                } else {
                    if (pcase_var.eql($TIME_TO_LAST_ANSWER)) {
                        return $MEDIAN_TIME_TO_LAST_ANSWER;
                    } else {
                        Errors.error($str_alt90$what_s_the_median_for__s, metric);
                    }
                }
            }
        }
        return NIL;
    }

    public static SubLObject kbq_median_metric(final SubLObject metric) {
        if (metric.eql($HYPOTHESIZATION_TIME)) {
            return kbq_query_run.$MEDIAN_HYPOTHESIZATION_TIME;
        }
        if (metric.eql($TOTAL_TIME)) {
            return kbq_query_run.$MEDIAN_TOTAL_TIME;
        }
        if (metric.eql(kbq_query_run.$TIME_TO_FIRST_ANSWER)) {
            return kbq_query_run.$MEDIAN_TIME_TO_FIRST_ANSWER;
        }
        if (metric.eql(kbq_query_run.$TIME_TO_LAST_ANSWER)) {
            return kbq_query_run.$MEDIAN_TIME_TO_LAST_ANSWER;
        }
        Errors.error(kbq_query_run.$str94$what_s_the_median_for__s, metric);
        return NIL;
    }

    public static final SubLObject kbq_mean_metric_alt(SubLObject metric) {
        {
            SubLObject pcase_var = metric;
            if (pcase_var.eql($TOTAL_TIME)) {
                return $MEAN_TOTAL_TIME;
            } else {
                if (pcase_var.eql($TIME_TO_FIRST_ANSWER)) {
                    return $MEAN_TIME_TO_FIRST_ANSWER;
                } else {
                    if (pcase_var.eql($TIME_TO_LAST_ANSWER)) {
                        return $MEAN_TIME_TO_LAST_ANSWER;
                    } else {
                        Errors.error($str_alt94$what_s_the_mean_for__s, metric);
                    }
                }
            }
        }
        return NIL;
    }

    public static SubLObject kbq_mean_metric(final SubLObject metric) {
        if (metric.eql($HYPOTHESIZATION_TIME)) {
            return kbq_query_run.$MEAN_HYPOTHESIZATION_TIME;
        }
        if (metric.eql($TOTAL_TIME)) {
            return kbq_query_run.$MEAN_TOTAL_TIME;
        }
        if (metric.eql(kbq_query_run.$TIME_TO_FIRST_ANSWER)) {
            return kbq_query_run.$MEAN_TIME_TO_FIRST_ANSWER;
        }
        if (metric.eql(kbq_query_run.$TIME_TO_LAST_ANSWER)) {
            return kbq_query_run.$MEAN_TIME_TO_LAST_ANSWER;
        }
        Errors.error(kbq_query_run.$str99$what_s_the_mean_for__s, metric);
        return NIL;
    }

    public static final SubLObject kbq_function_for_metric_alt(SubLObject metric) {
        {
            SubLObject pcase_var = metric;
            if (pcase_var.eql($TOTAL_TIME)) {
                return KBQ_QUERY_RUN_TOTAL_TIME;
            } else {
                if (pcase_var.eql($TIME_TO_FIRST_ANSWER)) {
                    return KBQ_QUERY_RUN_TIME_TO_FIRST_ANSWER;
                } else {
                    if (pcase_var.eql($TIME_TO_LAST_ANSWER)) {
                        return KBQ_QUERY_RUN_TIME_TO_LAST_ANSWER;
                    } else {
                        if (pcase_var.eql($COMPLETE_TOTAL_TIME)) {
                            return KBQ_QUERY_RUN_COMPLETE_TOTAL_TIME;
                        } else {
                            if (pcase_var.eql($COMPLETE_TIME_TO_FIRST_ANSWER)) {
                                return KBQ_QUERY_RUN_COMPLETE_TIME_TO_FIRST_ANSWER;
                            } else {
                                if (pcase_var.eql($COMPLETE_TIME_TO_LAST_ANSWER)) {
                                    return KBQ_QUERY_RUN_COMPLETE_TIME_TO_LAST_ANSWER;
                                } else {
                                    if (pcase_var.eql($ANSWER_COUNT)) {
                                        return KBQ_QUERY_RUN_ANSWER_COUNT;
                                    } else {
                                        Errors.error($str_alt102$unknown_metric__s, metric);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return NIL;
    }

    public static SubLObject kbq_function_for_metric(final SubLObject metric) {
        if (metric.eql($HYPOTHESIZATION_TIME)) {
            return kbq_query_run.KBQ_QUERY_RUN_HYPOTHESIZATION_TIME;
        }
        if (metric.eql($TOTAL_TIME)) {
            return kbq_query_run.KBQ_QUERY_RUN_TOTAL_TIME;
        }
        if (metric.eql(kbq_query_run.$TIME_TO_FIRST_ANSWER)) {
            return kbq_query_run.KBQ_QUERY_RUN_TIME_TO_FIRST_ANSWER;
        }
        if (metric.eql(kbq_query_run.$TIME_TO_LAST_ANSWER)) {
            return kbq_query_run.KBQ_QUERY_RUN_TIME_TO_LAST_ANSWER;
        }
        if (metric.eql(kbq_query_run.$COMPLETE_TOTAL_TIME)) {
            return kbq_query_run.KBQ_QUERY_RUN_COMPLETE_TOTAL_TIME;
        }
        if (metric.eql(kbq_query_run.$COMPLETE_TIME_TO_FIRST_ANSWER)) {
            return kbq_query_run.KBQ_QUERY_RUN_COMPLETE_TIME_TO_FIRST_ANSWER;
        }
        if (metric.eql(kbq_query_run.$COMPLETE_TIME_TO_LAST_ANSWER)) {
            return kbq_query_run.KBQ_QUERY_RUN_COMPLETE_TIME_TO_LAST_ANSWER;
        }
        if (metric.eql($ANSWER_COUNT)) {
            return kbq_query_run.KBQ_QUERY_RUN_ANSWER_COUNT;
        }
        Errors.error(kbq_query_run.$str108$unknown_metric__s, metric);
        return NIL;
    }

    public static final SubLObject kct_test_set_run_p_alt(SubLObject v_object) {
        return list_utilities.property_list_p(v_object);
    }

    public static SubLObject kct_test_set_run_p(final SubLObject v_object) {
        return property_list_p(v_object);
    }

    public static final SubLObject kct_make_test_set_run_alt(SubLObject test_runs, SubLObject comment) {
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        return list(new SubLObject[]{ $MACHINE, Environment.get_network_name(UNPROVIDED), $DATE, get_universal_time(), $BOGOMIPS, misc_utilities.machine_bogomips(), $INTERNAL_TIME_UNITS_PER_SECOND, time_high.$internal_time_units_per_second$.getGlobalValue(), $PATCH_LEVEL, system_info.cyc_revision_numbers(), $COMMENT, comment, $TEST_RUNS, test_runs });
    }

    public static SubLObject kct_make_test_set_run(final SubLObject test_runs, SubLObject comment) {
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        return list(new SubLObject[]{ $MACHINE, Environment.get_network_name(UNPROVIDED), $DATE, get_universal_time(), $BOGOMIPS, machine_bogomips(), kbq_query_run.$INTERNAL_TIME_UNITS_PER_SECOND, time_high.$internal_time_units_per_second$.getGlobalValue(), $PATCH_LEVEL, cyc_revision_numbers(), $COMMENT, comment, $TEST_RUNS, test_runs });
    }

    /**
     *
     *
     * @return test-set-run-p; The result of merging all the independent TEST-SET-RUNS
    together into one large batched test-set-run.  The test-set-run information
    from the first one is preserved since it is assumed that all the test-set-runs
    share this info (or are at least comparable).
     */
    @LispMethod(comment = "@return test-set-run-p; The result of merging all the independent TEST-SET-RUNS\r\ntogether into one large batched test-set-run.  The test-set-run information\r\nfrom the first one is preserved since it is assumed that all the test-set-runs\r\nshare this info (or are at least comparable).")
    public static final SubLObject kct_nmerge_test_set_runs_alt(SubLObject test_set_runs, SubLObject comment) {
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        if (NIL == test_set_runs) {
            return NIL;
        }
        {
            SubLObject first_test_set_run = test_set_runs.first();
            SubLObject all_test_runs = Mapping.mapcan(symbol_function(KCT_TEST_SET_RUN_TEST_RUNS), test_set_runs, EMPTY_SUBL_OBJECT_ARRAY);
            SubLObject merged_test_set_run = first_test_set_run;
            merged_test_set_run = putf(merged_test_set_run, $TEST_RUNS, all_test_runs);
            if (NIL != comment) {
                merged_test_set_run = putf(merged_test_set_run, $COMMENT, comment);
            }
            return merged_test_set_run;
        }
    }

    /**
     *
     *
     * @return test-set-run-p; The result of merging all the independent TEST-SET-RUNS
    together into one large batched test-set-run.  The test-set-run information
    from the first one is preserved since it is assumed that all the test-set-runs
    share this info (or are at least comparable).
     */
    @LispMethod(comment = "@return test-set-run-p; The result of merging all the independent TEST-SET-RUNS\r\ntogether into one large batched test-set-run.  The test-set-run information\r\nfrom the first one is preserved since it is assumed that all the test-set-runs\r\nshare this info (or are at least comparable).")
    public static SubLObject kct_nmerge_test_set_runs(final SubLObject test_set_runs, SubLObject comment) {
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        if (NIL == test_set_runs) {
            return NIL;
        }
        final SubLObject first_test_set_run = test_set_runs.first();
        final SubLObject all_test_runs = Mapping.mapcan(symbol_function(kbq_query_run.KCT_TEST_SET_RUN_TEST_RUNS), test_set_runs, EMPTY_SUBL_OBJECT_ARRAY);
        SubLObject merged_test_set_run = first_test_set_run;
        merged_test_set_run = putf(merged_test_set_run, $TEST_RUNS, all_test_runs);
        if (NIL != comment) {
            merged_test_set_run = putf(merged_test_set_run, $COMMENT, comment);
        }
        return merged_test_set_run;
    }

    public static final SubLObject kct_test_set_run_comment_alt(SubLObject test_set_run) {
        return getf(test_set_run, $COMMENT, NIL);
    }

    public static SubLObject kct_test_set_run_comment(final SubLObject test_set_run) {
        return getf(test_set_run, $COMMENT, NIL);
    }

    public static final SubLObject kct_test_set_run_internal_time_units_per_second_alt(SubLObject test_set_run) {
        return getf(test_set_run, $INTERNAL_TIME_UNITS_PER_SECOND, NIL);
    }

    public static SubLObject kct_test_set_run_internal_time_units_per_second(final SubLObject test_set_run) {
        return getf(test_set_run, kbq_query_run.$INTERNAL_TIME_UNITS_PER_SECOND, NIL);
    }

    public static final SubLObject kct_test_set_run_test_runs_alt(SubLObject test_set_run) {
        return getf(test_set_run, $TEST_RUNS, NIL);
    }

    public static SubLObject kct_test_set_run_test_runs(final SubLObject test_set_run) {
        return getf(test_set_run, $TEST_RUNS, NIL);
    }

    public static final SubLObject kct_test_set_run_tests_alt(SubLObject test_set_run) {
        return Mapping.mapcar(KCT_TEST_RUN_TEST, com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_test_runs(test_set_run));
    }

    public static SubLObject kct_test_set_run_tests(final SubLObject test_set_run) {
        return Mapping.mapcar(kbq_query_run.KCT_TEST_RUN_TEST, kbq_query_run.kct_test_set_run_test_runs(test_set_run));
    }

    public static final SubLObject kct_test_set_run_valid_tests_alt(SubLObject test_set_run) {
        return delete_if($sym81$INVALID_FORT_, com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_tests(test_set_run), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject kct_test_set_run_valid_tests(final SubLObject test_set_run) {
        return delete_if(kbq_query_run.$sym84$INVALID_FORT_, kbq_query_run.kct_test_set_run_tests(test_set_run), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject kct_test_set_run_remove_invalid_tests_alt(SubLObject test_set_run) {
        {
            SubLObject valid_tests = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_valid_tests(test_set_run);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_filter_test_set_run_to_tests(test_set_run, valid_tests, UNPROVIDED);
        }
    }

    public static SubLObject kct_test_set_run_remove_invalid_tests(final SubLObject test_set_run) {
        final SubLObject valid_tests = kbq_query_run.kct_test_set_run_valid_tests(test_set_run);
        return kbq_query_run.kct_filter_test_set_run_to_tests(test_set_run, valid_tests, UNPROVIDED);
    }

    /**
     *
     *
     * @return kbq-query-run-p
     */
    @LispMethod(comment = "@return kbq-query-run-p")
    public static final SubLObject kbq_run_query(SubLObject query_spec, SubLObject metrics, SubLObject outlier_timeout, SubLObject overriding_query_properties, SubLObject include_resultP) {
        if (metrics == UNPROVIDED) {
            metrics = NIL;
        }
        if (outlier_timeout == UNPROVIDED) {
            outlier_timeout = $int$600;
        }
        if (overriding_query_properties == UNPROVIDED) {
            overriding_query_properties = NIL;
        }
        if (include_resultP == UNPROVIDED) {
            include_resultP = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(query_spec, KBQ_QUERY_SPEC_P);
            {
                SubLObject list_var = metrics;
                SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
                {
                    SubLObject cdolist_list_var = list_var;
                    SubLObject elem = NIL;
                    for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , elem = cdolist_list_var.first()) {
                        SubLTrampolineFile.checkType(elem, QUERY_METRIC_P);
                    }
                }
            }
            if (NIL != outlier_timeout) {
                SubLTrampolineFile.checkType(outlier_timeout, NUMBERP);
            }
            {
                SubLObject plist_var = overriding_query_properties;
                SubLTrampolineFile.checkType(plist_var, PROPERTY_LIST_P);
                {
                    SubLObject remainder = NIL;
                    for (remainder = plist_var; NIL != remainder; remainder = cddr(remainder)) {
                        {
                            SubLObject property = remainder.first();
                            SubLObject value = cadr(remainder);
                            SubLTrampolineFile.checkType(property, QUERY_PROPERTY_P);
                        }
                    }
                }
            }
            leviathan.clear_problem_creation_times();
            {
                SubLObject total_time = NIL;
                SubLObject harness_error_message = NIL;
                SubLObject inference = NIL;
                SubLObject never_runP = NIL;
                SubLObject timed_outP = NIL;
                SubLObject result = NIL;
                SubLObject halt_reason = NIL;
                SubLObject metric_values = NIL;
                SubLObject metrics_plist = NIL;
                SubLObject kbq_runstate = NIL;
                overriding_query_properties = copy_list(overriding_query_properties);
                if (NIL != $kbq_run_query_non_continuable_enabledP$.getDynamicValue(thread)) {
                    overriding_query_properties = putf(overriding_query_properties, $CONTINUABLE_, NIL);
                }
                if (NIL != metrics) {
                    overriding_query_properties = putf(overriding_query_properties, $METRICS, metrics);
                }
                if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_p($kct_runstate$.getDynamicValue(thread))) {
                    kbq_runstate = com.cyc.cycjava.cycl.inference.kbq_query_run.new_kbq_runstate(query_spec, $kct_runstate$.getDynamicValue(thread));
                    com.cyc.cycjava.cycl.inference.kbq_query_run.set_kctr_query_runstate($kct_runstate$.getDynamicValue(thread), kbq_runstate);
                    overriding_query_properties = putf(overriding_query_properties, $BROWSABLE_, T);
                }
                if (NIL != $kbq_progress_stream$.getDynamicValue(thread)) {
                    thread.resetMultipleValues();
                    {
                        SubLObject sentence = kb_query.kbq_query_arguments(query_spec);
                        SubLObject mt = thread.secondMultipleValue();
                        SubLObject query_properties = thread.thirdMultipleValue();
                        thread.resetMultipleValues();
                        format_nil.force_format($kbq_progress_stream$.getDynamicValue(thread), $str_alt114$___A____, inference_datastructures_inference.inference_args_to_new_cyc_query_form_string(sentence, mt, query_properties), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    }
                }
                {
                    SubLObject _prev_bind_0 = $kbq_runstate$.currentBinding(thread);
                    try {
                        $kbq_runstate$.bind(kbq_runstate, thread);
                        try {
                            never_runP = T;
                            {
                                SubLObject i = NIL;
                                for (i = ZERO_INTEGER; i.numL($kbq_run_number$.getDynamicValue(thread)); i = add(i, ONE_INTEGER)) {
                                    com.cyc.cycjava.cycl.inference.kbq_query_run.possibly_set_kbqr_run_status($kbq_runstate$.getDynamicValue(thread), $RUNNING);
                                    {
                                        SubLObject time_var = get_internal_real_time();
                                        if (NIL == $inference_debugP$.getDynamicValue(thread)) {
                                            try {
                                                {
                                                    SubLObject _prev_bind_0_2 = Errors.$error_handler$.currentBinding(thread);
                                                    try {
                                                        Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
                                                        try {
                                                            if (i == ZERO_INTEGER) {
                                                                thread.resetMultipleValues();
                                                                {
                                                                    SubLObject inference_3 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_run_query_and_maybe_destroy(query_spec, NIL, outlier_timeout, overriding_query_properties);
                                                                    SubLObject never_runP_4 = thread.secondMultipleValue();
                                                                    SubLObject timed_outP_5 = thread.thirdMultipleValue();
                                                                    SubLObject result_6 = thread.fourthMultipleValue();
                                                                    SubLObject halt_reason_7 = thread.fifthMultipleValue();
                                                                    SubLObject metric_values_8 = thread.sixthMultipleValue();
                                                                    thread.resetMultipleValues();
                                                                    inference = inference_3;
                                                                    never_runP = never_runP_4;
                                                                    timed_outP = timed_outP_5;
                                                                    result = result_6;
                                                                    halt_reason = halt_reason_7;
                                                                    metric_values = metric_values_8;
                                                                }
                                                            } else {
                                                                com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_run_query_and_maybe_destroy(query_spec, T, outlier_timeout, overriding_query_properties);
                                                            }
                                                        } catch (Throwable catch_var) {
                                                            Errors.handleThrowable(catch_var, NIL);
                                                        }
                                                    } finally {
                                                        Errors.$error_handler$.rebind(_prev_bind_0_2, thread);
                                                    }
                                                }
                                            } catch (Throwable ccatch_env_var) {
                                                harness_error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
                                            }
                                        } else {
                                            if (i == ZERO_INTEGER) {
                                                thread.resetMultipleValues();
                                                {
                                                    SubLObject inference_9 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_run_query_and_maybe_destroy(query_spec, NIL, outlier_timeout, overriding_query_properties);
                                                    SubLObject never_runP_10 = thread.secondMultipleValue();
                                                    SubLObject timed_outP_11 = thread.thirdMultipleValue();
                                                    SubLObject result_12 = thread.fourthMultipleValue();
                                                    SubLObject halt_reason_13 = thread.fifthMultipleValue();
                                                    SubLObject metric_values_14 = thread.sixthMultipleValue();
                                                    thread.resetMultipleValues();
                                                    inference = inference_9;
                                                    never_runP = never_runP_10;
                                                    timed_outP = timed_outP_11;
                                                    result = result_12;
                                                    halt_reason = halt_reason_13;
                                                    metric_values = metric_values_14;
                                                }
                                            } else {
                                                com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_run_query_and_maybe_destroy(query_spec, T, outlier_timeout, overriding_query_properties);
                                            }
                                        }
                                        total_time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
                                    }
                                }
                            }
                            if (NIL != never_runP) {
                                com.cyc.cycjava.cycl.inference.kbq_query_run.possibly_set_kbqr_run_status($kbq_runstate$.getDynamicValue(thread), $NEVER_RUN);
                            } else {
                                com.cyc.cycjava.cycl.inference.kbq_query_run.possibly_set_kbqr_run_status($kbq_runstate$.getDynamicValue(thread), $FINISHED);
                            }
                            if (NIL == harness_error_message) {
                                try {
                                    {
                                        SubLObject _prev_bind_0_15 = Errors.$error_handler$.currentBinding(thread);
                                        try {
                                            Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
                                            try {
                                                if (NIL != timed_outP) {
                                                    Errors.warn($str_alt119$Outlier_____S, query_spec);
                                                    halt_reason = $OUTLIER_ABORT;
                                                    com.cyc.cycjava.cycl.inference.kbq_query_run.possibly_set_kbqr_run_status($kbq_runstate$.getDynamicValue(thread), $OUTLIER_TIMEOUT);
                                                    if (NIL != inference_datastructures_inference.inference_p(inference)) {
                                                        result = inference_kernel.inference_result_from_answers(inference, inference_datastructures_inference.inference_all_new_answers(inference));
                                                        metric_values = inference_datastructures_inference.inference_compute_metrics(inference);
                                                    }
                                                }
                                                if (NIL == never_runP) {
                                                    if (!length(metrics).numE(length(metric_values))) {
                                                        if (NIL == metric_values) {
                                                            Errors.error($str_alt122$Unable_to_compute_any_metrics_for, query_spec);
                                                        } else {
                                                            Errors.error($str_alt123$Unable_to_compute_all_desired_met, query_spec);
                                                        }
                                                    }
                                                    metrics_plist = list_utilities.make_plist(metrics, metric_values);
                                                }
                                                if (NIL != timed_outP) {
                                                    if (NIL != subl_promotions.memberP($TOTAL_TIME, metrics, UNPROVIDED, UNPROVIDED)) {
                                                        metrics_plist = putf(metrics_plist, $TOTAL_TIME, outlier_timeout);
                                                    }
                                                    if (NIL != subl_promotions.memberP($COMPLETE_TOTAL_TIME, metrics, UNPROVIDED, UNPROVIDED)) {
                                                        metrics_plist = putf(metrics_plist, $COMPLETE_TOTAL_TIME, outlier_timeout);
                                                    }
                                                }
                                            } catch (Throwable catch_var) {
                                                Errors.handleThrowable(catch_var, NIL);
                                            }
                                        } finally {
                                            Errors.$error_handler$.rebind(_prev_bind_0_15, thread);
                                        }
                                    }
                                } catch (Throwable ccatch_env_var) {
                                    harness_error_message = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
                                }
                            }
                            if (NIL != harness_error_message) {
                                com.cyc.cycjava.cycl.inference.kbq_query_run.possibly_set_kbqr_run_status($kbq_runstate$.getDynamicValue(thread), $ERROR);
                                halt_reason = inference_datastructures_enumerated_types.new_inference_error_suspend_status(format(NIL, $str_alt124$KBQ_harness_error_for__A____A, query_spec, harness_error_message));
                            }
                            if (NIL != never_runP) {
                                metrics_plist = nconc(new SubLObject[]{ NIL != subl_promotions.memberP($TOTAL_TIME, metrics, UNPROVIDED, UNPROVIDED) ? ((SubLObject) (list($TOTAL_TIME, total_time))) : NIL, NIL != subl_promotions.memberP($COMPLETE_TOTAL_TIME, metrics, UNPROVIDED, UNPROVIDED) ? ((SubLObject) (list($COMPLETE_TOTAL_TIME, total_time))) : NIL, NIL != subl_promotions.memberP($ANSWER_COUNT, metrics, UNPROVIDED, UNPROVIDED) ? ((SubLObject) ($TAUTOLOGY == halt_reason ? ((SubLObject) (list($ANSWER_COUNT, ONE_INTEGER))) : list($ANSWER_COUNT, ZERO_INTEGER))) : NIL, $TAUTOLOGY == halt_reason ? ((SubLObject) (nconc(NIL != subl_promotions.memberP($TIME_TO_FIRST_ANSWER, metrics, UNPROVIDED, UNPROVIDED) ? ((SubLObject) (list($TIME_TO_FIRST_ANSWER, total_time))) : NIL, NIL != subl_promotions.memberP($TIME_TO_LAST_ANSWER, metrics, UNPROVIDED, UNPROVIDED) ? ((SubLObject) (list($TIME_TO_LAST_ANSWER, total_time))) : NIL))) : NIL });
                            }
                            if (NIL != inference_datastructures_enumerated_types.inference_error_suspend_status_p(halt_reason)) {
                                Errors.warn($str_alt125$Error_____S___A, query_spec, inference_datastructures_enumerated_types.inference_error_suspend_status_message(halt_reason));
                            }
                            if ((NIL != inference_datastructures_enumerated_types.avoided_inference_reason_p(halt_reason)) && ($NOT_A_QUERY != halt_reason)) {
                                Errors.warn($str_alt127$Avoided__due_to__S______S, halt_reason, query_spec);
                            }
                        } finally {
                            {
                                SubLObject _prev_bind_0_16 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                    if (NIL == com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_p($kct_runstate$.getDynamicValue(thread))) {
                                        if (NIL != $kbq_run_query_auto_destroy_enabledP$.getDynamicValue(thread)) {
                                            if (NIL != inference_datastructures_inference.valid_inference_p(inference)) {
                                                inference_datastructures_inference.destroy_inference_and_problem_store(inference);
                                            }
                                        }
                                    }
                                } finally {
                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_16, thread);
                                }
                            }
                        }
                    } finally {
                        $kbq_runstate$.rebind(_prev_bind_0, thread);
                    }
                }
                {
                    SubLObject query_run = listS($QUERY, query_spec, append(NIL != overriding_query_properties ? ((SubLObject) (list($OVERRIDING_QUERY_PROPERTIES, overriding_query_properties))) : NIL, NIL != include_resultP ? ((SubLObject) (list($RESULT, result))) : NIL, listS($HALT_REASON, halt_reason, append(metrics_plist, NIL))));
                    if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_runstate_p(kbq_runstate)) {
                        com.cyc.cycjava.cycl.inference.kbq_query_run.set_kbqr_result(kbq_runstate, query_run);
                    }
                    return query_run;
                }
            }
        }
    }

    public static SubLObject kbq_run_query(final SubLObject query_spec, SubLObject query_metrics, SubLObject outlier_timeout, SubLObject overriding_query_properties, SubLObject include_resultP, SubLObject substitutions) {
        if (query_metrics == UNPROVIDED) {
            query_metrics = NIL;
        }
        if (outlier_timeout == UNPROVIDED) {
            outlier_timeout = kbq_query_run.$int$600;
        }
        if (overriding_query_properties == UNPROVIDED) {
            overriding_query_properties = NIL;
        }
        if (include_resultP == UNPROVIDED) {
            include_resultP = NIL;
        }
        if (substitutions == UNPROVIDED) {
            substitutions = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != kb_query.kbq_query_spec_p(query_spec) : "! kb_query.kbq_query_spec_p(query_spec) " + ("kb_query.kbq_query_spec_p(query_spec) " + "CommonSymbols.NIL != kb_query.kbq_query_spec_p(query_spec) ") + query_spec;
        final SubLObject list_var = query_metrics;
        assert NIL != non_dotted_list_p(list_var) : "! list_utilities.non_dotted_list_p(list_var) " + ("list_utilities.non_dotted_list_p(list_var) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(list_var) ") + list_var;
        SubLObject cdolist_list_var = list_var;
        SubLObject elem = NIL;
        elem = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            assert NIL != query_metric_p(elem) : "! inference_datastructures_enumerated_types.query_metric_p(elem) " + ("inference_datastructures_enumerated_types.query_metric_p(elem) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.query_metric_p(elem) ") + elem;
            cdolist_list_var = cdolist_list_var.rest();
            elem = cdolist_list_var.first();
        } 
        if (((NIL != outlier_timeout) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == numberp(outlier_timeout))) {
            throw new AssertionError(outlier_timeout);
        }
        final SubLObject plist_var = overriding_query_properties;
        assert NIL != property_list_p(plist_var) : "! list_utilities.property_list_p(plist_var) " + ("list_utilities.property_list_p(plist_var) " + "CommonSymbols.NIL != list_utilities.property_list_p(plist_var) ") + plist_var;
        SubLObject remainder;
        SubLObject property;
        SubLObject value;
        for (remainder = NIL, remainder = plist_var; NIL != remainder; remainder = cddr(remainder)) {
            property = remainder.first();
            value = cadr(remainder);
            assert NIL != query_property_p(property) : "! inference_datastructures_enumerated_types.query_property_p(property) " + ("inference_datastructures_enumerated_types.query_property_p(property) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.query_property_p(property) ") + property;
        }
        leviathan.clear_problem_creation_times();
        final SubLObject v_inference_metrics = intersection(query_metrics, inference_metrics.inference_metric_names(), UNPROVIDED, UNPROVIDED);
        SubLObject total_time = NIL;
        SubLObject harness_error_message = NIL;
        SubLObject inference = NIL;
        SubLObject never_runP = NIL;
        SubLObject timed_outP = NIL;
        SubLObject result = NIL;
        SubLObject halt_reason = NIL;
        SubLObject inference_metric_values = NIL;
        SubLObject query_metrics_plist = NIL;
        SubLObject kbq_runstate = NIL;
        overriding_query_properties = copy_list(overriding_query_properties);
        if (NIL != $kbq_run_query_non_continuable_enabledP$.getDynamicValue(thread)) {
            overriding_query_properties = putf(overriding_query_properties, $CONTINUABLE_, NIL);
        }
        if (NIL != query_metrics) {
            overriding_query_properties = putf(overriding_query_properties, $METRICS, v_inference_metrics);
        }
        if (NIL != kbq_query_run.kct_runstate_p(kbq_query_run.$kct_runstate$.getDynamicValue(thread))) {
            kbq_runstate = kbq_query_run.new_kbq_runstate(query_spec, kbq_query_run.$kct_runstate$.getDynamicValue(thread));
            kbq_query_run.set_kctr_query_runstate(kbq_query_run.$kct_runstate$.getDynamicValue(thread), kbq_runstate);
            overriding_query_properties = putf(overriding_query_properties, $BROWSABLE_, T);
        }
        if (NIL != kbq_query_run.$kbq_progress_stream$.getDynamicValue(thread)) {
            thread.resetMultipleValues();
            final SubLObject sentence = kb_query.kbq_query_arguments(query_spec, substitutions);
            final SubLObject mt = thread.secondMultipleValue();
            final SubLObject query_properties = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            force_format(kbq_query_run.$kbq_progress_stream$.getDynamicValue(thread), kbq_query_run.$str120$___A____, inference_args_to_new_cyc_query_form_string(sentence, mt, query_properties), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        final SubLObject _prev_bind_0 = kbq_query_run.$kbq_runstate$.currentBinding(thread);
        try {
            kbq_query_run.$kbq_runstate$.bind(kbq_runstate, thread);
            final SubLObject already_in_a_sandboxP = sksi_macros.$within_sksi_sandboxP$.getDynamicValue(thread);
            final SubLObject state = (NIL != already_in_a_sandboxP) ? NIL : sksi_sks_manager.current_sks_registration_state();
            final SubLObject _prev_bind_0_$2 = sksi_macros.$within_sksi_sandboxP$.currentBinding(thread);
            try {
                sksi_macros.$within_sksi_sandboxP$.bind(T, thread);
                try {
                    never_runP = T;
                    SubLObject i;
                    SubLObject time_var;
                    SubLObject _prev_bind_0_$3;
                    SubLObject aborted_via_restartP;
                    SubLObject catch_var;
                    SubLObject restart_tag;
                    SubLObject dummy;
                    SubLObject _prev_bind_0_$4;
                    SubLObject inference_$5;
                    SubLObject never_runP_$6;
                    SubLObject timed_outP_$7;
                    SubLObject result_$8;
                    SubLObject halt_reason_$9;
                    SubLObject inference_metric_values_$10;
                    SubLObject aborted_via_restartP2;
                    SubLObject catch_var3;
                    SubLObject restart_tag2;
                    SubLObject dummy2;
                    SubLObject _prev_bind_0_$5;
                    SubLObject inference_$6;
                    SubLObject never_runP_$7;
                    SubLObject timed_outP_$8;
                    SubLObject result_$9;
                    SubLObject halt_reason_$10;
                    SubLObject inference_metric_values_$11;
                    for (i = NIL, i = ZERO_INTEGER; i.numL(kbq_query_run.$kbq_run_number$.getDynamicValue(thread)); i = add(i, ONE_INTEGER)) {
                        kbq_query_run.possibly_set_kbqr_run_status(kbq_query_run.$kbq_runstate$.getDynamicValue(thread), $RUNNING);
                        time_var = get_internal_real_time();
                        if (NIL == $inference_debugP$.getDynamicValue(thread)) {
                            try {
                                thread.throwStack.push($catch_error_message_target$.getGlobalValue());
                                _prev_bind_0_$3 = Errors.$error_handler$.currentBinding(thread);
                                try {
                                    Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
                                    try {
                                        aborted_via_restartP = T;
                                        catch_var = NIL;
                                        try {
                                            thread.throwStack.push(kbq_query_run.$ABORT_KBQ_RUN_QUERY);
                                            restart_tag = kbq_query_run.$ABORT_KBQ_RUN_QUERY;
                                            dummy = NIL;
                                            _prev_bind_0_$4 = Errors.$restarts$.currentBinding(thread);
                                            try {
                                                Errors.$restarts$.bind(cons(list(restart_tag, kbq_query_run.$$$Abort_KBQ_run_query), Errors.$restarts$.getDynamicValue(thread)), thread);
                                                try {
                                                    thread.throwStack.push(restart_tag);
                                                    if (i.eql(ZERO_INTEGER)) {
                                                        thread.resetMultipleValues();
                                                        inference_$5 = kbq_query_run.kbq_run_query_and_maybe_destroy(query_spec, NIL, outlier_timeout, overriding_query_properties, substitutions);
                                                        never_runP_$6 = thread.secondMultipleValue();
                                                        timed_outP_$7 = thread.thirdMultipleValue();
                                                        result_$8 = thread.fourthMultipleValue();
                                                        halt_reason_$9 = thread.fifthMultipleValue();
                                                        inference_metric_values_$10 = thread.sixthMultipleValue();
                                                        thread.resetMultipleValues();
                                                        inference = inference_$5;
                                                        never_runP = never_runP_$6;
                                                        timed_outP = timed_outP_$7;
                                                        result = result_$8;
                                                        halt_reason = halt_reason_$9;
                                                        inference_metric_values = inference_metric_values_$10;
                                                    } else {
                                                        kbq_query_run.kbq_run_query_and_maybe_destroy(query_spec, T, outlier_timeout, overriding_query_properties, substitutions);
                                                    }
                                                    aborted_via_restartP = NIL;
                                                } catch (final Throwable ccatch_env_var) {
                                                    dummy = Errors.handleThrowable(ccatch_env_var, restart_tag);
                                                } finally {
                                                    thread.throwStack.pop();
                                                }
                                            } finally {
                                                Errors.$restarts$.rebind(_prev_bind_0_$4, thread);
                                            }
                                        } catch (final Throwable ccatch_env_var2) {
                                            catch_var = Errors.handleThrowable(ccatch_env_var2, kbq_query_run.$ABORT_KBQ_RUN_QUERY);
                                        } finally {
                                            thread.throwStack.pop();
                                        }
                                        if (NIL != aborted_via_restartP) {
                                            Errors.error(kbq_query_run.$$$KBQ_explicitly_aborted);
                                        }
                                    } catch (final Throwable catch_var2) {
                                        Errors.handleThrowable(catch_var2, NIL);
                                    }
                                } finally {
                                    Errors.$error_handler$.rebind(_prev_bind_0_$3, thread);
                                }
                            } catch (final Throwable ccatch_env_var3) {
                                harness_error_message = Errors.handleThrowable(ccatch_env_var3, $catch_error_message_target$.getGlobalValue());
                            } finally {
                                thread.throwStack.pop();
                            }
                        } else {
                            aborted_via_restartP2 = T;
                            catch_var3 = NIL;
                            try {
                                thread.throwStack.push(kbq_query_run.$ABORT_KBQ_RUN_QUERY);
                                restart_tag2 = kbq_query_run.$ABORT_KBQ_RUN_QUERY;
                                dummy2 = NIL;
                                _prev_bind_0_$5 = Errors.$restarts$.currentBinding(thread);
                                try {
                                    Errors.$restarts$.bind(cons(list(restart_tag2, kbq_query_run.$$$Abort_KBQ_run_query), Errors.$restarts$.getDynamicValue(thread)), thread);
                                    try {
                                        thread.throwStack.push(restart_tag2);
                                        if (i.eql(ZERO_INTEGER)) {
                                            thread.resetMultipleValues();
                                            inference_$6 = kbq_query_run.kbq_run_query_and_maybe_destroy(query_spec, NIL, outlier_timeout, overriding_query_properties, substitutions);
                                            never_runP_$7 = thread.secondMultipleValue();
                                            timed_outP_$8 = thread.thirdMultipleValue();
                                            result_$9 = thread.fourthMultipleValue();
                                            halt_reason_$10 = thread.fifthMultipleValue();
                                            inference_metric_values_$11 = thread.sixthMultipleValue();
                                            thread.resetMultipleValues();
                                            inference = inference_$6;
                                            never_runP = never_runP_$7;
                                            timed_outP = timed_outP_$8;
                                            result = result_$9;
                                            halt_reason = halt_reason_$10;
                                            inference_metric_values = inference_metric_values_$11;
                                        } else {
                                            kbq_query_run.kbq_run_query_and_maybe_destroy(query_spec, T, outlier_timeout, overriding_query_properties, substitutions);
                                        }
                                        aborted_via_restartP2 = NIL;
                                    } catch (final Throwable ccatch_env_var4) {
                                        dummy2 = Errors.handleThrowable(ccatch_env_var4, restart_tag2);
                                    } finally {
                                        thread.throwStack.pop();
                                    }
                                } finally {
                                    Errors.$restarts$.rebind(_prev_bind_0_$5, thread);
                                }
                            } catch (final Throwable ccatch_env_var5) {
                                catch_var3 = Errors.handleThrowable(ccatch_env_var5, kbq_query_run.$ABORT_KBQ_RUN_QUERY);
                            } finally {
                                thread.throwStack.pop();
                            }
                            if (NIL != aborted_via_restartP2) {
                                Errors.error(kbq_query_run.$$$KBQ_explicitly_aborted);
                            }
                        }
                        total_time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
                    }
                    if (NIL != never_runP) {
                        kbq_query_run.possibly_set_kbqr_run_status(kbq_query_run.$kbq_runstate$.getDynamicValue(thread), $NEVER_RUN);
                    } else {
                        kbq_query_run.possibly_set_kbqr_run_status(kbq_query_run.$kbq_runstate$.getDynamicValue(thread), $FINISHED);
                    }
                    if (NIL == harness_error_message) {
                        try {
                            thread.throwStack.push($catch_error_message_target$.getGlobalValue());
                            final SubLObject _prev_bind_0_$6 = Errors.$error_handler$.currentBinding(thread);
                            try {
                                Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
                                try {
                                    if (NIL != timed_outP) {
                                        Errors.warn(kbq_query_run.$str128$Outlier_____S, query_spec);
                                        halt_reason = $OUTLIER_ABORT;
                                        kbq_query_run.possibly_set_kbqr_run_status(kbq_query_run.$kbq_runstate$.getDynamicValue(thread), $OUTLIER_TIMEOUT);
                                        if (NIL != valid_inference_p(inference)) {
                                            result = inference_kernel.inference_result_from_answers(inference, inference_all_new_answers(inference));
                                            inference_metric_values = inference_compute_metrics(inference);
                                        }
                                    }
                                    if (NIL == never_runP) {
                                        if (!length(v_inference_metrics).numE(length(inference_metric_values))) {
                                            if (NIL == inference_metric_values) {
                                                Errors.error(kbq_query_run.$str131$Unable_to_compute_any_inference_m, query_spec);
                                            } else {
                                                Errors.error(kbq_query_run.$str132$Unable_to_compute_all_desired_inf, query_spec);
                                            }
                                        }
                                        query_metrics_plist = merge_plist(make_plist(query_metrics, make_list(length(query_metrics), UNPROVIDED)), make_plist(v_inference_metrics, inference_metric_values));
                                    }
                                    if (NIL != timed_outP) {
                                        if (NIL != memberP($TOTAL_TIME, query_metrics, UNPROVIDED, UNPROVIDED)) {
                                            query_metrics_plist = putf(query_metrics_plist, $TOTAL_TIME, outlier_timeout);
                                        }
                                        if (NIL != memberP(kbq_query_run.$COMPLETE_TOTAL_TIME, query_metrics, UNPROVIDED, UNPROVIDED)) {
                                            query_metrics_plist = putf(query_metrics_plist, kbq_query_run.$COMPLETE_TOTAL_TIME, outlier_timeout);
                                        }
                                    }
                                } catch (final Throwable catch_var4) {
                                    Errors.handleThrowable(catch_var4, NIL);
                                }
                            } finally {
                                Errors.$error_handler$.rebind(_prev_bind_0_$6, thread);
                            }
                        } catch (final Throwable ccatch_env_var6) {
                            harness_error_message = Errors.handleThrowable(ccatch_env_var6, $catch_error_message_target$.getGlobalValue());
                        } finally {
                            thread.throwStack.pop();
                        }
                    }
                    if (NIL != harness_error_message) {
                        kbq_query_run.possibly_set_kbqr_run_status(kbq_query_run.$kbq_runstate$.getDynamicValue(thread), $ERROR);
                        halt_reason = new_inference_error_suspend_status(format(NIL, kbq_query_run.$str133$KBQ_harness_error_for__A____A, query_spec, harness_error_message));
                    }
                    if (NIL != never_runP) {
                        query_metrics_plist = nconc(new SubLObject[]{ NIL != memberP($TOTAL_TIME, query_metrics, UNPROVIDED, UNPROVIDED) ? list($TOTAL_TIME, total_time) : NIL, NIL != memberP(kbq_query_run.$COMPLETE_TOTAL_TIME, query_metrics, UNPROVIDED, UNPROVIDED) ? list(kbq_query_run.$COMPLETE_TOTAL_TIME, total_time) : NIL, NIL != memberP($ANSWER_COUNT, query_metrics, UNPROVIDED, UNPROVIDED) ? $TAUTOLOGY == halt_reason ? list($ANSWER_COUNT, ONE_INTEGER) : list($ANSWER_COUNT, ZERO_INTEGER) : NIL, $TAUTOLOGY == halt_reason ? nconc(NIL != memberP(kbq_query_run.$TIME_TO_FIRST_ANSWER, query_metrics, UNPROVIDED, UNPROVIDED) ? list(kbq_query_run.$TIME_TO_FIRST_ANSWER, total_time) : NIL, NIL != memberP(kbq_query_run.$TIME_TO_LAST_ANSWER, query_metrics, UNPROVIDED, UNPROVIDED) ? list(kbq_query_run.$TIME_TO_LAST_ANSWER, total_time) : NIL) : NIL });
                    }
                    if (NIL != inference_error_suspend_status_p(halt_reason)) {
                        Errors.warn(kbq_query_run.$str134$Error_____S___A, query_spec, inference_error_suspend_status_message(halt_reason));
                    }
                    if ((NIL != avoided_inference_reason_p(halt_reason)) && (kbq_query_run.$NOT_A_QUERY != halt_reason)) {
                        Errors.warn(kbq_query_run.$str136$Avoided__due_to__S______S, halt_reason, query_spec);
                    }
                    if (((NIL == kbq_query_run.kct_runstate_p(kbq_query_run.$kct_runstate$.getDynamicValue(thread))) && (NIL != $kbq_run_query_auto_destroy_enabledP$.getDynamicValue(thread))) && (NIL != valid_inference_p(inference))) {
                        destroy_inference_and_problem_store(inference);
                    }
                } finally {
                    final SubLObject _prev_bind_0_$7 = $is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        $is_thread_performing_cleanupP$.bind(T, thread);
                        final SubLObject _values = getValuesAsVector();
                        if (NIL == already_in_a_sandboxP) {
                            sksi_sks_manager.execute_sks_registration_state(state);
                        }
                        restoreValuesFromVector(_values);
                    } finally {
                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$7, thread);
                    }
                }
            } finally {
                sksi_macros.$within_sksi_sandboxP$.rebind(_prev_bind_0_$2, thread);
            }
        } finally {
            kbq_query_run.$kbq_runstate$.rebind(_prev_bind_0, thread);
        }
        final SubLObject query_run = listS($QUERY, query_spec, append(NIL != overriding_query_properties ? list(kbq_query_run.$OVERRIDING_QUERY_PROPERTIES, overriding_query_properties) : NIL, NIL != include_resultP ? list($RESULT, result) : NIL, listS($HALT_REASON, halt_reason, append(query_metrics_plist, NIL))));
        if (NIL != kbq_query_run.kbq_runstate_p(kbq_runstate)) {
            kbq_query_run.set_kbqr_result(kbq_runstate, query_run);
        }
        return query_run;
    }

    public static SubLObject abort_kbq_run_query() {
        return sublisp_throw(kbq_query_run.$ABORT_KBQ_RUN_QUERY, NIL);
    }

    public static final SubLObject kbq_run_query_and_maybe_destroy(SubLObject query_spec, SubLObject destroyP, SubLObject outlier_timeout, SubLObject overriding_query_properties) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            thread.resetMultipleValues();
            {
                SubLObject inference_tmp = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_run_query_int(query_spec, outlier_timeout, overriding_query_properties);
                SubLObject never_runP_tmp = thread.secondMultipleValue();
                SubLObject timed_outP_tmp = thread.thirdMultipleValue();
                SubLObject result_tmp = thread.fourthMultipleValue();
                SubLObject halt_reason_tmp = thread.fifthMultipleValue();
                SubLObject metric_values_tmp = thread.sixthMultipleValue();
                thread.resetMultipleValues();
                if (NIL != destroyP) {
                    inference_datastructures_inference.destroy_inference_and_problem_store(inference_tmp);
                }
                return values(inference_tmp, never_runP_tmp, timed_outP_tmp, result_tmp, halt_reason_tmp, metric_values_tmp);
            }
        }
    }

    public static SubLObject kbq_run_query_and_maybe_destroy(final SubLObject query_spec, final SubLObject destroyP, final SubLObject outlier_timeout, final SubLObject overriding_query_properties, SubLObject substitutions) {
        if (substitutions == UNPROVIDED) {
            substitutions = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject inference_tmp = kbq_query_run.kbq_run_query_int(query_spec, outlier_timeout, overriding_query_properties, substitutions);
        final SubLObject never_runP_tmp = thread.secondMultipleValue();
        final SubLObject timed_outP_tmp = thread.thirdMultipleValue();
        final SubLObject result_tmp = thread.fourthMultipleValue();
        final SubLObject halt_reason_tmp = thread.fifthMultipleValue();
        final SubLObject metric_values_tmp = thread.sixthMultipleValue();
        thread.resetMultipleValues();
        if (NIL != destroyP) {
            destroy_inference_and_problem_store(inference_tmp);
        }
        return values(inference_tmp, never_runP_tmp, timed_outP_tmp, result_tmp, halt_reason_tmp, metric_values_tmp);
    }

    public static SubLObject kbq_run_query_problem_store(final SubLObject query_spec, SubLObject v_properties) {
        if (v_properties == UNPROVIDED) {
            v_properties = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject current;
        final SubLObject datum = current = v_properties;
        final SubLObject outlier_timeout_tail = property_list_member($OUTLIER_TIMEOUT, current);
        final SubLObject outlier_timeout = (NIL != outlier_timeout_tail) ? cadr(outlier_timeout_tail) : kbq_query_run.$int$600;
        final SubLObject overriding_query_properties_tail = property_list_member(kbq_query_run.$OVERRIDING_QUERY_PROPERTIES, current);
        final SubLObject overriding_query_properties = (NIL != overriding_query_properties_tail) ? cadr(overriding_query_properties_tail) : NIL;
        final SubLObject substitutions_tail = property_list_member($SUBSTITUTIONS, current);
        final SubLObject substitutions = (NIL != substitutions_tail) ? cadr(substitutions_tail) : NIL;
        thread.resetMultipleValues();
        final SubLObject inference = kbq_query_run.kbq_run_query_and_maybe_destroy(query_spec, NIL, outlier_timeout, overriding_query_properties, substitutions);
        thread.resetMultipleValues();
        if (NIL != inference_p(inference)) {
            return inference_problem_store(inference);
        }
        return NIL;
    }

    public static final SubLObject kbq_run_query_int(SubLObject query_spec, SubLObject outlier_timeout, SubLObject overriding_query_properties) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject inference = NIL;
                SubLObject never_runP = NIL;
                SubLObject timed_outP = NIL;
                SubLObject result = NIL;
                SubLObject halt_reason = NIL;
                SubLObject metric_values = NIL;
                SubLObject timer = NIL;
                try {
                    timer = inference_strategist.with_query_abort_timeout_start_timer(outlier_timeout);
                    thread.resetMultipleValues();
                    {
                        SubLObject result_17 = kb_query.new_cyc_query_from_kbq(query_spec, overriding_query_properties);
                        SubLObject halt_reason_18 = thread.secondMultipleValue();
                        SubLObject inference_19 = thread.thirdMultipleValue();
                        SubLObject metric_values_20 = thread.fourthMultipleValue();
                        thread.resetMultipleValues();
                        result = result_17;
                        halt_reason = halt_reason_18;
                        inference = inference_19;
                        metric_values = metric_values_20;
                    }
                } finally {
                    {
                        SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            inference_strategist.with_query_abort_timeout_stop_timer(timer);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
                never_runP = inference_datastructures_enumerated_types.avoided_inference_reason_p(halt_reason);
                timed_outP = eq($ABORT, halt_reason);
                return values(inference, never_runP, timed_outP, result, halt_reason, metric_values);
            }
        }
    }

    public static SubLObject kbq_run_query_int(final SubLObject query_spec, final SubLObject outlier_timeout, final SubLObject overriding_query_properties, SubLObject substitutions) {
        if (substitutions == UNPROVIDED) {
            substitutions = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject inference = NIL;
        SubLObject never_runP = NIL;
        SubLObject timed_outP = NIL;
        SubLObject result = NIL;
        SubLObject halt_reason = NIL;
        SubLObject metric_values = NIL;
        final SubLObject treat_as_multiple_choiceP = NIL;
        kbq_query_run.ensure_only_sksi_modules_needed(query_spec);
        SubLObject timer = NIL;
        try {
            timer = with_query_abort_timeout_start_timer(outlier_timeout);
            thread.resetMultipleValues();
            final SubLObject result_$20 = (NIL != treat_as_multiple_choiceP) ? kb_query.ask_multiple_choice_query_from_kbq(query_spec, overriding_query_properties) : kb_query.new_cyc_query_from_kbq(query_spec, overriding_query_properties, substitutions);
            final SubLObject halt_reason_$21 = thread.secondMultipleValue();
            final SubLObject inference_$22 = thread.thirdMultipleValue();
            final SubLObject metric_values_$23 = thread.fourthMultipleValue();
            thread.resetMultipleValues();
            result = result_$20;
            halt_reason = halt_reason_$21;
            inference = inference_$22;
            metric_values = metric_values_$23;
        } finally {
            final SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                $is_thread_performing_cleanupP$.bind(T, thread);
                final SubLObject _values = getValuesAsVector();
                with_query_abort_timeout_stop_timer(timer);
                restoreValuesFromVector(_values);
            } finally {
                $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
            }
        }
        never_runP = avoided_inference_reason_p(halt_reason);
        timed_outP = eq($ABORT, halt_reason);
        return values(inference, never_runP, timed_outP, result, halt_reason, metric_values);
    }

    public static SubLObject ensure_sksi_modules_needed(final SubLObject query_spec) {
        return sksi_sks_manager.register_sksi_removal_modules_for_skses(set_difference(kbq_query_run.sksi_modules_needed(query_spec), sksi_infrastructure_utilities.gather_all_top_level_registered_knowledge_sources(), UNPROVIDED, UNPROVIDED));
    }

    public static SubLObject ensure_only_sksi_modules_needed(final SubLObject query_spec) {
        if (NIL == sets_equalP(sksi_infrastructure_utilities.gather_all_top_level_registered_knowledge_sources(), kbq_query_run.sksi_modules_needed(query_spec), UNPROVIDED)) {
            sksi_query_utilities.deregister_all_combined_sksi_removal_modules(UNPROVIDED);
            sksi_sks_manager.clear_sksi_registered_knowledge_sources();
            sksi_sks_manager.clear_sksi_content_mts_with_registered_module();
            return sksi_sks_manager.register_sksi_removal_modules_for_skses(kbq_query_run.sksi_modules_needed(query_spec));
        }
        return NIL;
    }

    public static SubLObject sksi_modules_needed(final SubLObject query_spec) {
        return NIL != indexed_term_p(query_spec) ? kb_mapping_utilities.pred_values_in_any_mt(query_spec, kbq_query_run.$$sksiModulesNeeded, UNPROVIDED, UNPROVIDED, UNPROVIDED) : NIL;
    }

    public static SubLObject query_sksi_modules_needed(final SubLObject test_spec) {
        final SubLObject query = kct_utils.kct_query_specification(test_spec, UNPROVIDED);
        return NIL != query ? kbq_query_run.sksi_modules_needed(query) : NIL;
    }

    public static final SubLObject any_kct_followup_test_formula_gafsP_alt(SubLObject test_spec) {
        return makeBoolean((NIL != forts.fort_p(test_spec)) && (((NIL != some_pred_value_in_any_mt(test_spec, $$testFollowupTestFormula_All, UNPROVIDED, UNPROVIDED)) || (NIL != some_pred_value_in_any_mt(test_spec, $$testFollowupTestFormula_Some, UNPROVIDED, UNPROVIDED))) || (NIL != some_pred_value_in_any_mt(test_spec, $$testFollowupTestFormula_None, UNPROVIDED, UNPROVIDED))));
    }

    public static SubLObject any_kct_followup_test_formula_gafsP(final SubLObject test_spec) {
        return makeBoolean((NIL != fort_p(test_spec)) && (((NIL != kb_mapping_utilities.some_pred_value_in_any_mt(test_spec, kbq_query_run.$$testFollowupTestFormula_All, UNPROVIDED, UNPROVIDED)) || (NIL != kb_mapping_utilities.some_pred_value_in_any_mt(test_spec, kbq_query_run.$$testFollowupTestFormula_Some, UNPROVIDED, UNPROVIDED))) || (NIL != kb_mapping_utilities.some_pred_value_in_any_mt(test_spec, kbq_query_run.$$testFollowupTestFormula_None, UNPROVIDED, UNPROVIDED))));
    }

    /**
     *
     *
     * @return kct-test-run-p
     */
    @LispMethod(comment = "@return kct-test-run-p")
    public static final SubLObject kct_run_test_alt(SubLObject test_spec, SubLObject overriding_metrics, SubLObject outlier_timeout, SubLObject overriding_query_properties, SubLObject include_resultP, SubLObject expose_runstateP) {
        if (overriding_metrics == UNPROVIDED) {
            overriding_metrics = NIL;
        }
        if (outlier_timeout == UNPROVIDED) {
            outlier_timeout = $kbq_outlier_timeout$.getDynamicValue();
        }
        if (overriding_query_properties == UNPROVIDED) {
            overriding_query_properties = NIL;
        }
        if (include_resultP == UNPROVIDED) {
            include_resultP = NIL;
        }
        if (expose_runstateP == UNPROVIDED) {
            expose_runstateP = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(test_spec, KCT_TEST_SPEC_P);
            {
                SubLObject list_var = overriding_metrics;
                SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
                {
                    SubLObject cdolist_list_var = list_var;
                    SubLObject elem = NIL;
                    for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , elem = cdolist_list_var.first()) {
                        SubLTrampolineFile.checkType(elem, QUERY_METRIC_P);
                    }
                }
            }
            if (NIL != outlier_timeout) {
                SubLTrampolineFile.checkType(outlier_timeout, NUMBERP);
            }
            {
                SubLObject plist_var = overriding_query_properties;
                SubLTrampolineFile.checkType(plist_var, PROPERTY_LIST_P);
                {
                    SubLObject remainder = NIL;
                    for (remainder = plist_var; NIL != remainder; remainder = cddr(remainder)) {
                        {
                            SubLObject property = remainder.first();
                            SubLObject value = cadr(remainder);
                            SubLTrampolineFile.checkType(property, QUERY_PROPERTY_P);
                        }
                    }
                }
            }
            {
                SubLObject status = NIL;
                SubLObject query_run = NIL;
                SubLObject kct_runstate = NIL;
                SubLObject any_kct_followup_test_formula_gafsP = com.cyc.cycjava.cycl.inference.kbq_query_run.any_kct_followup_test_formula_gafsP(test_spec);
                SubLObject test_error_message = NIL;
                if (NIL != any_kct_followup_test_formula_gafsP) {
                    expose_runstateP = T;
                }
                if (NIL != expose_runstateP) {
                    kct_runstate = com.cyc.cycjava.cycl.inference.kbq_query_run.new_kct_runstate(test_spec, $kct_set_runstate$.getDynamicValue(thread));
                    if (NIL != process_utilities.thinking_task()) {
                        if (NIL == kct_thinking.kct_thinking_runstate(process_utilities.thinking_task())) {
                            kct_thinking.kct_thinking_set_runstate_id(com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_id(kct_runstate), UNPROVIDED);
                        }
                    }
                    if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_set_runstate_p($kct_set_runstate$.getDynamicValue(thread))) {
                        com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_test_runstate_add($kct_set_runstate$.getDynamicValue(thread), kct_runstate);
                    }
                }
                {
                    SubLObject _prev_bind_0 = $kct_runstate$.currentBinding(thread);
                    try {
                        $kct_runstate$.bind(kct_runstate, thread);
                        {
                            SubLObject query_spec = kct_query_specification(test_spec, UNPROVIDED);
                            SubLObject test_metrics = com.cyc.cycjava.cycl.inference.kbq_query_run.kb_test_metrics_to_query_metrics(kct_test_metrics(test_spec, UNPROVIDED));
                            SubLObject query_metrics = union(test_metrics, overriding_metrics, symbol_function(EQ), UNPROVIDED);
                            try {
                                query_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_run_query(query_spec, query_metrics, outlier_timeout, overriding_query_properties, T);
                                {
                                    SubLObject results = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_result(query_run);
                                    status = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_compute_test_status(test_spec, results);
                                }
                            } finally {
                                {
                                    SubLObject _prev_bind_0_21 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                        if (NIL != query_run) {
                                            if (NIL == include_resultP) {
                                                query_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_discard_query_run_result(query_run);
                                            }
                                        }
                                    } finally {
                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_21, thread);
                                    }
                                }
                            }
                        }
                    } finally {
                        $kct_runstate$.rebind(_prev_bind_0, thread);
                    }
                }
                if (NIL != test_error_message) {
                    status = $ERROR;
                }
                {
                    SubLObject kct_test_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_make_test_run(test_spec, status, query_run);
                    if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_p(kct_runstate)) {
                        com.cyc.cycjava.cycl.inference.kbq_query_run.set_kctr_result(kct_runstate, kct_test_run);
                    }
                    return kct_test_run;
                }
            }
        }
    }

    /**
     *
     *
     * @return kct-test-run-p
     */
    @LispMethod(comment = "@return kct-test-run-p")
    public static SubLObject kct_run_test(final SubLObject test_spec, SubLObject overriding_metrics, SubLObject outlier_timeout, SubLObject overriding_query_properties, SubLObject include_resultP, SubLObject expose_runstateP) {
        if (overriding_metrics == UNPROVIDED) {
            overriding_metrics = NIL;
        }
        if (outlier_timeout == UNPROVIDED) {
            outlier_timeout = kbq_query_run.$kbq_outlier_timeout$.getDynamicValue();
        }
        if (overriding_query_properties == UNPROVIDED) {
            overriding_query_properties = NIL;
        }
        if (include_resultP == UNPROVIDED) {
            include_resultP = NIL;
        }
        if (expose_runstateP == UNPROVIDED) {
            expose_runstateP = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != kct_utils.kct_test_spec_p(test_spec, UNPROVIDED) : "! kct_utils.kct_test_spec_p(test_spec, .UNPROVIDED) " + ("kct_utils.kct_test_spec_p(test_spec, CommonSymbols.UNPROVIDED) " + "CommonSymbols.NIL != kct_utils.kct_test_spec_p(test_spec, CommonSymbols.UNPROVIDED) ") + test_spec;
        final SubLObject list_var = overriding_metrics;
        assert NIL != non_dotted_list_p(list_var) : "! list_utilities.non_dotted_list_p(list_var) " + ("list_utilities.non_dotted_list_p(list_var) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(list_var) ") + list_var;
        SubLObject cdolist_list_var = list_var;
        SubLObject elem = NIL;
        elem = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            assert NIL != query_metric_p(elem) : "! inference_datastructures_enumerated_types.query_metric_p(elem) " + ("inference_datastructures_enumerated_types.query_metric_p(elem) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.query_metric_p(elem) ") + elem;
            cdolist_list_var = cdolist_list_var.rest();
            elem = cdolist_list_var.first();
        } 
        if (((NIL != outlier_timeout) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == numberp(outlier_timeout))) {
            throw new AssertionError(outlier_timeout);
        }
        final SubLObject plist_var = overriding_query_properties;
        assert NIL != property_list_p(plist_var) : "! list_utilities.property_list_p(plist_var) " + ("list_utilities.property_list_p(plist_var) " + "CommonSymbols.NIL != list_utilities.property_list_p(plist_var) ") + plist_var;
        SubLObject remainder;
        SubLObject property;
        SubLObject value;
        for (remainder = NIL, remainder = plist_var; NIL != remainder; remainder = cddr(remainder)) {
            property = remainder.first();
            value = cadr(remainder);
            assert NIL != query_property_p(property) : "! inference_datastructures_enumerated_types.query_property_p(property) " + ("inference_datastructures_enumerated_types.query_property_p(property) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.query_property_p(property) ") + property;
        }
        SubLObject status = NIL;
        SubLObject query_run = NIL;
        SubLObject kct_runstate = NIL;
        final SubLObject any_kct_followup_test_formula_gafsP = kbq_query_run.any_kct_followup_test_formula_gafsP(test_spec);
        final SubLObject test_error_message = NIL;
        if (NIL != any_kct_followup_test_formula_gafsP) {
            expose_runstateP = T;
        }
        if (NIL != expose_runstateP) {
            kct_runstate = kbq_query_run.new_kct_runstate(test_spec, kbq_query_run.$kct_set_runstate$.getDynamicValue(thread));
            if ((NIL != process_utilities.thinking_task()) && (NIL == kct_thinking_runstate(process_utilities.thinking_task()))) {
                kct_thinking_set_runstate_id(kbq_query_run.kctr_id(kct_runstate), UNPROVIDED);
            }
            if (NIL != kbq_query_run.kct_set_runstate_p(kbq_query_run.$kct_set_runstate$.getDynamicValue(thread))) {
                kbq_query_run.kctsr_test_runstate_add(kbq_query_run.$kct_set_runstate$.getDynamicValue(thread), kct_runstate);
            }
        }
        final SubLObject _prev_bind_0 = kbq_query_run.$kct_runstate$.currentBinding(thread);
        try {
            kbq_query_run.$kct_runstate$.bind(kct_runstate, thread);
            final SubLObject query_spec = kct_utils.kct_query_specification(test_spec, UNPROVIDED);
            final SubLObject test_metrics = kbq_query_run.kb_test_metrics_to_query_metrics(kct_utils.kct_test_metrics(test_spec, UNPROVIDED));
            final SubLObject query_metrics = union(test_metrics, overriding_metrics, symbol_function(EQL), UNPROVIDED);
            final SubLObject multiple_choiceP = kb_query.multiple_choice_testP(test_spec);
            try {
                SubLObject query_properties_to_use = copy_list(overriding_query_properties);
                if (NIL == multiple_choiceP) {
                    query_properties_to_use = putf(query_properties_to_use, $RETURN, kbq_query_run.$BINDINGS_AND_HYPOTHETICAL_BINDINGS);
                }
                query_run = kbq_query_run.kbq_run_query(query_spec, query_metrics, outlier_timeout, query_properties_to_use, T, UNPROVIDED);
                final SubLObject raw_results = kbq_query_run.kbq_query_run_result(query_run);
                if (NIL != multiple_choiceP) {
                    status = kbq_query_run.kct_compute_test_status(test_spec, raw_results, NIL);
                } else {
                    final SubLObject actual_results = raw_results.first();
                    final SubLObject hypothetical_bindings = second(raw_results);
                    status = kbq_query_run.kct_compute_test_status(test_spec, actual_results, hypothetical_bindings);
                }
            } finally {
                final SubLObject _prev_bind_0_$24 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values = getValuesAsVector();
                    if ((NIL != query_run) && (NIL == include_resultP)) {
                        query_run = kbq_query_run.kbq_discard_query_run_result(query_run);
                    }
                    restoreValuesFromVector(_values);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$24, thread);
                }
            }
        } finally {
            kbq_query_run.$kct_runstate$.rebind(_prev_bind_0, thread);
        }
        if (NIL != test_error_message) {
            status = $ERROR;
        }
        final SubLObject kct_test_run = kbq_query_run.kct_make_test_run(test_spec, status, query_run);
        if (NIL != kbq_query_run.kct_runstate_p(kct_runstate)) {
            kbq_query_run.set_kctr_result(kct_runstate, kct_test_run);
        }
        return kct_test_run;
    }

    public static final SubLObject kb_test_metrics_to_query_metrics_alt(SubLObject kb_test_metrics) {
        {
            SubLObject query_metrics = NIL;
            SubLObject cdolist_list_var = kb_test_metrics;
            SubLObject kb_test_metric = NIL;
            for (kb_test_metric = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , kb_test_metric = cdolist_list_var.first()) {
                {
                    SubLObject query_metric = com.cyc.cycjava.cycl.inference.kbq_query_run.kb_test_metric_to_query_metric(kb_test_metric);
                    if (NIL != query_metric) {
                        query_metrics = cons(query_metric, query_metrics);
                    } else {
                        if (kb_test_metric == $$TestMetric_HaltReason) {
                        } else {
                            Errors.warn($str_alt135$Unsupported_metric__S, kb_test_metric);
                        }
                    }
                }
            }
            return nreverse(query_metrics);
        }
    }

    public static SubLObject kb_test_metrics_to_query_metrics(final SubLObject kb_test_metrics) {
        SubLObject query_metrics = NIL;
        SubLObject cdolist_list_var = kb_test_metrics;
        SubLObject kb_test_metric = NIL;
        kb_test_metric = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject query_metric = kbq_query_run.kb_test_metric_to_query_metric(kb_test_metric);
            if (NIL != query_metric) {
                query_metrics = cons(query_metric, query_metrics);
            } else
                if (!kb_test_metric.eql(kbq_query_run.$$TestMetric_HaltReason)) {
                    Errors.warn(kbq_query_run.$str149$Unsupported_metric__S, kb_test_metric);
                }

            cdolist_list_var = cdolist_list_var.rest();
            kb_test_metric = cdolist_list_var.first();
        } 
        return nreverse(query_metrics);
    }

    public static final SubLObject kb_test_metric_to_query_metric_alt(SubLObject kb_test_metric) {
        return list_utilities.alist_lookup_without_values($kct_test_metric_table$.getGlobalValue(), kb_test_metric, symbol_function(EQ), UNPROVIDED);
    }

    public static SubLObject kb_test_metric_to_query_metric(final SubLObject kb_test_metric) {
        return alist_lookup_without_values(kbq_query_run.$kct_test_metric_table$.getGlobalValue(), kb_test_metric, symbol_function(EQL), UNPROVIDED);
    }

    public static final SubLObject kct_compute_test_status(SubLObject test_spec, SubLObject query_results) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL != janus.janus_operation_p(test_spec)) {
                return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_compute_janus_test_status(test_spec, query_results);
            }
            if (!(((NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_query_results_satisfy_binding_sets_cardinality(query_results, kct_binding_sets_cardinality(test_spec, UNPROVIDED))) && (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_query_results_satisfy_binding_sets_min_cardinality(query_results, kct_binding_sets_min_cardinality(test_spec, UNPROVIDED)))) && (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_query_results_satisfy_binding_sets_max_cardinality(query_results, kct_binding_sets_max_cardinality(test_spec, UNPROVIDED))))) {
                return $FAILURE;
            }
            if (NIL == kct_bindings_unimportantP(test_spec, UNPROVIDED)) {
                {
                    SubLObject el_query_results = kct_transform_query_results_for_comparison(query_results);
                    if (!(((NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_query_results_satisfy_exact_set_of_binding_sets(el_query_results, kct_exact_set_of_binding_sets(test_spec, UNPROVIDED))) && (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_query_results_satisfy_wanted_binding_sets(el_query_results, kct_wanted_binding_sets(test_spec, UNPROVIDED)))) && (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_query_results_satisfy_unwanted_binding_sets(el_query_results, kct_unwanted_binding_sets(test_spec, UNPROVIDED))))) {
                        return $FAILURE;
                    }
                }
            }
            if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.any_kct_followup_test_formula_gafsP(test_spec)) {
                {
                    SubLObject kbqr = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_query_runstate($kct_runstate$.getDynamicValue(thread));
                    SubLObject inference = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_runstate_inference(kbqr);
                    SubLObject mt = inference_datastructures_inference.inference_mt(inference);
                    SubLObject v_properties = inference_datastructures_inference.inference_input_query_properties(inference);
                    SubLObject el_query = inference_datastructures_inference.inference_el_query(inference);
                    SubLObject store = inference_datastructures_inference.inference_problem_store(inference);
                    SubLObject hypothetical_bindings = inference_datastructures_inference.inference_hypothetical_bindings(inference);
                    if (!(((NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_followup_test_formula_all_holdsP(test_spec, store, el_query, mt, v_properties, hypothetical_bindings, query_results)) && (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_followup_test_formula_some_holdsP(test_spec, store, el_query, mt, v_properties, hypothetical_bindings))) && (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_followup_test_formula_none_holdsP(test_spec, store, el_query, mt, v_properties, hypothetical_bindings)))) {
                        return $FAILURE;
                    }
                }
            }
            return $SUCCESS;
        }
    }

    public static SubLObject kct_compute_test_status(final SubLObject test_spec, final SubLObject query_results, final SubLObject hypothetical_bindings) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != janus.janus_operation_p(test_spec)) {
            return kbq_query_run.kct_compute_janus_test_status(test_spec, query_results);
        }
        if (NIL != kb_query.multiple_choice_testP(test_spec)) {
            if (NIL == kbq_query_run.kct_test_query_results_satisfy_best_multiple_choice_option(query_results, list(funcall(makeSymbol("MULTIPLE-CHOICE-TEST-DESIRED-OPTION"), test_spec)))) {
                return $FAILURE;
            }
        } else {
            final SubLObject el_query_results = kct_utils.kct_transform_query_results_for_comparison(query_results, hypothetical_bindings);
            if (((NIL == kbq_query_run.kct_test_query_results_satisfy_binding_sets_cardinality(query_results, kct_utils.kct_binding_sets_cardinality(test_spec, UNPROVIDED))) || (NIL == kbq_query_run.kct_test_query_results_satisfy_binding_sets_min_cardinality(query_results, kct_utils.kct_binding_sets_min_cardinality(test_spec, UNPROVIDED)))) || (NIL == kbq_query_run.kct_test_query_results_satisfy_binding_sets_max_cardinality(query_results, kct_utils.kct_binding_sets_max_cardinality(test_spec, UNPROVIDED)))) {
                return $FAILURE;
            }
            if ((NIL == kct_utils.kct_bindings_unimportantP(test_spec, UNPROVIDED)) && (((NIL == kbq_query_run.kct_test_query_results_satisfy_exact_set_of_binding_sets(el_query_results, kct_utils.kct_exact_set_of_binding_sets(test_spec, UNPROVIDED), hypothetical_bindings)) || (NIL == kbq_query_run.kct_test_query_results_satisfy_wanted_binding_sets(el_query_results, kct_utils.kct_wanted_binding_sets(test_spec, UNPROVIDED), hypothetical_bindings))) || (NIL == kbq_query_run.kct_test_query_results_satisfy_unwanted_binding_sets(el_query_results, kct_utils.kct_unwanted_binding_sets(test_spec, UNPROVIDED), hypothetical_bindings)))) {
                return $FAILURE;
            }
            if (NIL != kbq_query_run.any_kct_followup_test_formula_gafsP(test_spec)) {
                final SubLObject kbqr = kbq_query_run.kct_runstate_query_runstate(kbq_query_run.$kct_runstate$.getDynamicValue(thread));
                final SubLObject inference = kbq_query_run.kbq_runstate_inference(kbqr);
                final SubLObject mt = inference_mt(inference);
                final SubLObject v_properties = inference_input_query_properties(inference);
                final SubLObject el_query = inference_el_query(inference);
                final SubLObject store = inference_problem_store(inference);
                if (((NIL == kbq_query_run.kct_followup_test_formula_all_holdsP(test_spec, store, el_query, mt, v_properties, hypothetical_bindings, query_results)) || (NIL == kbq_query_run.kct_followup_test_formula_some_holdsP(test_spec, store, el_query, mt, v_properties, hypothetical_bindings))) || (NIL == kbq_query_run.kct_followup_test_formula_none_holdsP(test_spec, store, el_query, mt, v_properties, hypothetical_bindings))) {
                    return $FAILURE;
                }
            }
        }
        return $SUCCESS;
    }

    public static final SubLObject kct_compute_janus_test_status_alt(SubLObject test_spec, SubLObject query_results) {
        if (NIL != janus.janus_operation_successP(test_spec, query_results, UNPROVIDED)) {
            return $SUCCESS;
        } else {
            return $FAILURE;
        }
    }

    public static SubLObject kct_compute_janus_test_status(final SubLObject test_spec, final SubLObject query_results) {
        if (NIL != janus.janus_operation_successP(test_spec, query_results, UNPROVIDED)) {
            return $SUCCESS;
        }
        return $FAILURE;
    }

    public static final SubLObject kct_followup_test_formula_all_holdsP_alt(SubLObject test_spec, SubLObject store, SubLObject el_query, SubLObject mt, SubLObject query_properties, SubLObject hypothetical_bindings, SubLObject query_results) {
        {
            SubLObject cdolist_list_var = pred_values_in_any_mt(test_spec, $$testFollowupTestFormula_All, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject quoted_followup_sentence = NIL;
            for (quoted_followup_sentence = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , quoted_followup_sentence = cdolist_list_var.first()) {
                {
                    SubLObject followup_results = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_followup_test_formula_result(quoted_followup_sentence, store, el_query, mt, query_properties, hypothetical_bindings);
                    if (NIL == list_utilities.sets_equal_equalP(query_results, followup_results)) {
                        return NIL;
                    }
                }
            }
        }
        return T;
    }

    public static SubLObject kct_followup_test_formula_all_holdsP(final SubLObject test_spec, final SubLObject store, final SubLObject el_query, final SubLObject mt, final SubLObject query_properties, final SubLObject hypothetical_bindings, final SubLObject query_results) {
        SubLObject cdolist_list_var = kb_mapping_utilities.pred_values_in_any_mt(test_spec, kbq_query_run.$$testFollowupTestFormula_All, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        SubLObject quoted_followup_sentence = NIL;
        quoted_followup_sentence = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject followup_raw_results = kbq_query_run.kct_followup_test_formula_result(quoted_followup_sentence, store, el_query, mt, query_properties, hypothetical_bindings);
            final SubLObject followup_results = followup_raw_results.first();
            if (NIL == sets_equal_equalP(query_results, followup_results)) {
                return NIL;
            }
            cdolist_list_var = cdolist_list_var.rest();
            quoted_followup_sentence = cdolist_list_var.first();
        } 
        return T;
    }

    public static final SubLObject kct_followup_test_formula_some_holdsP_alt(SubLObject test_spec, SubLObject store, SubLObject el_query, SubLObject mt, SubLObject query_properties, SubLObject hypothetical_bindings) {
        {
            SubLObject cdolist_list_var = pred_values_in_any_mt(test_spec, $$testFollowupTestFormula_Some, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject quoted_followup_sentence = NIL;
            for (quoted_followup_sentence = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , quoted_followup_sentence = cdolist_list_var.first()) {
                {
                    SubLObject followup_results = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_followup_test_formula_result(quoted_followup_sentence, store, el_query, mt, query_properties, hypothetical_bindings);
                    if (NIL == followup_results) {
                        return NIL;
                    }
                }
            }
        }
        return T;
    }

    public static SubLObject kct_followup_test_formula_some_holdsP(final SubLObject test_spec, final SubLObject store, final SubLObject el_query, final SubLObject mt, final SubLObject query_properties, final SubLObject hypothetical_bindings) {
        SubLObject cdolist_list_var = kb_mapping_utilities.pred_values_in_any_mt(test_spec, kbq_query_run.$$testFollowupTestFormula_Some, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        SubLObject quoted_followup_sentence = NIL;
        quoted_followup_sentence = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject followup_raw_results = kbq_query_run.kct_followup_test_formula_result(quoted_followup_sentence, store, el_query, mt, query_properties, hypothetical_bindings);
            final SubLObject followup_results = followup_raw_results.first();
            if (NIL == followup_results) {
                return NIL;
            }
            cdolist_list_var = cdolist_list_var.rest();
            quoted_followup_sentence = cdolist_list_var.first();
        } 
        return T;
    }

    public static final SubLObject kct_followup_test_formula_none_holdsP_alt(SubLObject test_spec, SubLObject store, SubLObject el_query, SubLObject mt, SubLObject query_properties, SubLObject hypothetical_bindings) {
        {
            SubLObject cdolist_list_var = pred_values_in_any_mt(test_spec, $$testFollowupTestFormula_None, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject quoted_followup_sentence = NIL;
            for (quoted_followup_sentence = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , quoted_followup_sentence = cdolist_list_var.first()) {
                {
                    SubLObject followup_results = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_followup_test_formula_result(quoted_followup_sentence, store, el_query, mt, query_properties, hypothetical_bindings);
                    if (NIL != followup_results) {
                        return NIL;
                    }
                }
            }
        }
        return T;
    }

    public static SubLObject kct_followup_test_formula_none_holdsP(final SubLObject test_spec, final SubLObject store, final SubLObject el_query, final SubLObject mt, final SubLObject query_properties, final SubLObject hypothetical_bindings) {
        SubLObject cdolist_list_var = kb_mapping_utilities.pred_values_in_any_mt(test_spec, kbq_query_run.$$testFollowupTestFormula_None, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        SubLObject quoted_followup_sentence = NIL;
        quoted_followup_sentence = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject followup_raw_results = kbq_query_run.kct_followup_test_formula_result(quoted_followup_sentence, store, el_query, mt, query_properties, hypothetical_bindings);
            final SubLObject followup_results = followup_raw_results.first();
            if (NIL != followup_results) {
                return NIL;
            }
            cdolist_list_var = cdolist_list_var.rest();
            quoted_followup_sentence = cdolist_list_var.first();
        } 
        return T;
    }

    public static final SubLObject kct_followup_test_formula_result_alt(SubLObject quoted_followup_sentence, SubLObject store, SubLObject el_query, SubLObject mt, SubLObject query_properties, SubLObject hypothetical_bindings) {
        {
            SubLObject followup_sentence = bindings.apply_bindings(hypothetical_bindings, czer_main.unquote_quoted_term(quoted_followup_sentence, UNPROVIDED));
            SubLObject followup_conjunction = simplifier.conjoin(list(followup_sentence, el_query), UNPROVIDED);
            query_properties = list_utilities.merge_plist(query_properties, listS($PROBLEM_STORE, store, $list_alt138));
            return inference_kernel.new_cyc_query(followup_conjunction, mt, query_properties);
        }
    }

    public static SubLObject kct_followup_test_formula_result(final SubLObject quoted_followup_sentence, final SubLObject store, final SubLObject el_query, final SubLObject mt, SubLObject query_properties, final SubLObject hypothetical_bindings) {
        final SubLObject followup_sentence = apply_bindings(hypothetical_bindings, unquote_quoted_term(quoted_followup_sentence, UNPROVIDED));
        final SubLObject followup_conjunction = conjoin(list(followup_sentence, el_query), UNPROVIDED);
        query_properties = merge_plist(query_properties, listS($PROBLEM_STORE, store, kbq_query_run.$list152));
        return inference_kernel.new_cyc_query(followup_conjunction, mt, query_properties);
    }

    public static final SubLObject kct_test_query_results_satisfy_exact_set_of_binding_sets(SubLObject el_query_results, SubLObject kb_exact_set_of_binding_sets) {
        if (NIL == kb_exact_set_of_binding_sets) {
            return values(T, NIL, NIL);
        }
        {
            SubLObject hl_exact_binding_sets = bindings.inferencify_kb_set_of_binding_sets(kb_exact_set_of_binding_sets);
            SubLObject el_exact_binding_sets = kct_transform_query_results_for_comparison(hl_exact_binding_sets);
            SubLObject missing_binding_sets = list_utilities.fast_set_difference(el_exact_binding_sets, el_query_results, symbol_function(EQUAL));
            SubLObject extra_binding_sets = list_utilities.fast_set_difference(el_query_results, el_exact_binding_sets, symbol_function(EQUAL));
            SubLObject satisfiedP = makeBoolean(!((NIL != missing_binding_sets) || (NIL != extra_binding_sets)));
            return values(satisfiedP, missing_binding_sets, extra_binding_sets);
        }
    }

    public static SubLObject kct_test_query_results_satisfy_exact_set_of_binding_sets(final SubLObject el_query_results, final SubLObject kb_exact_set_of_binding_sets, final SubLObject hypothetical_bindings) {
        if (NIL == kb_exact_set_of_binding_sets) {
            return values(T, NIL, NIL);
        }
        final SubLObject hl_exact_binding_sets = inferencify_kb_set_of_binding_sets(kb_exact_set_of_binding_sets);
        final SubLObject el_exact_binding_sets = kct_utils.kct_transform_query_results_for_comparison(hl_exact_binding_sets, hypothetical_bindings);
        final SubLObject missing_binding_sets = fast_set_difference(el_exact_binding_sets, el_query_results, kbq_query_run.$sym153$BINDINGS_EQUAL_MODULO_EL_VAR_NAMES_);
        final SubLObject extra_binding_sets = fast_set_difference(el_query_results, el_exact_binding_sets, kbq_query_run.$sym153$BINDINGS_EQUAL_MODULO_EL_VAR_NAMES_);
        final SubLObject satisfiedP = makeBoolean((NIL == missing_binding_sets) && (NIL == extra_binding_sets));
        return values(satisfiedP, missing_binding_sets, extra_binding_sets);
    }

    public static final SubLObject kct_test_query_results_satisfy_wanted_binding_sets(SubLObject el_query_results, SubLObject kb_wanted_binding_sets) {
        if (NIL == kb_wanted_binding_sets) {
            return values(T, NIL);
        }
        {
            SubLObject hl_wanted_binding_sets = bindings.inferencify_kb_set_of_binding_sets(make_el_set(kb_wanted_binding_sets, UNPROVIDED));
            SubLObject el_wanted_binding_sets = kct_transform_query_results_for_comparison(hl_wanted_binding_sets);
            SubLObject missing_binding_sets = list_utilities.fast_set_difference(el_wanted_binding_sets, el_query_results, symbol_function(EQUAL));
            SubLObject satisfiedP = sublisp_null(missing_binding_sets);
            return values(satisfiedP, missing_binding_sets);
        }
    }

    public static SubLObject kct_test_query_results_satisfy_wanted_binding_sets(final SubLObject el_query_results, final SubLObject kb_wanted_binding_sets, final SubLObject hypothetical_bindings) {
        if (NIL == kb_wanted_binding_sets) {
            return values(T, NIL);
        }
        final SubLObject hl_wanted_binding_sets = inferencify_kb_set_of_binding_sets(make_el_set(kb_wanted_binding_sets, UNPROVIDED));
        final SubLObject el_wanted_binding_sets = kct_utils.kct_transform_query_results_for_comparison(hl_wanted_binding_sets, hypothetical_bindings);
        final SubLObject missing_binding_sets = fast_set_difference(el_wanted_binding_sets, el_query_results, kbq_query_run.$sym153$BINDINGS_EQUAL_MODULO_EL_VAR_NAMES_);
        final SubLObject satisfiedP = sublisp_null(missing_binding_sets);
        return values(satisfiedP, missing_binding_sets);
    }

    public static final SubLObject kct_test_query_results_satisfy_unwanted_binding_sets(SubLObject el_query_results, SubLObject kb_unwanted_binding_sets) {
        if (NIL == kb_unwanted_binding_sets) {
            return values(T, NIL);
        }
        {
            SubLObject hl_unwanted_binding_sets = bindings.inferencify_kb_set_of_binding_sets(make_el_set(kb_unwanted_binding_sets, UNPROVIDED));
            SubLObject el_unwanted_binding_sets = kct_transform_query_results_for_comparison(hl_unwanted_binding_sets);
            SubLObject unwanted_found_binding_sets = keyhash_utilities.fast_intersection(el_unwanted_binding_sets, el_query_results, symbol_function(EQUAL), UNPROVIDED, UNPROVIDED);
            SubLObject satisfiedP = sublisp_null(unwanted_found_binding_sets);
            return values(satisfiedP, unwanted_found_binding_sets);
        }
    }

    public static SubLObject kct_test_query_results_satisfy_unwanted_binding_sets(final SubLObject el_query_results, final SubLObject kb_unwanted_binding_sets, final SubLObject hypothetical_bindings) {
        if (NIL == kb_unwanted_binding_sets) {
            return values(T, NIL);
        }
        final SubLObject hl_unwanted_binding_sets = inferencify_kb_set_of_binding_sets(make_el_set(kb_unwanted_binding_sets, UNPROVIDED));
        final SubLObject el_unwanted_binding_sets = kct_utils.kct_transform_query_results_for_comparison(hl_unwanted_binding_sets, hypothetical_bindings);
        final SubLObject unwanted_found_binding_sets = fast_intersection(el_unwanted_binding_sets, el_query_results, kbq_query_run.$sym153$BINDINGS_EQUAL_MODULO_EL_VAR_NAMES_, UNPROVIDED, UNPROVIDED);
        final SubLObject satisfiedP = sublisp_null(unwanted_found_binding_sets);
        return values(satisfiedP, unwanted_found_binding_sets);
    }

    public static final SubLObject kct_test_query_results_satisfy_binding_sets_cardinality_alt(SubLObject query_results, SubLObject kb_binding_sets_cardinality) {
        if (NIL == kb_binding_sets_cardinality) {
            return T;
        }
        {
            SubLObject satisfiedP = numE(kb_binding_sets_cardinality, length(query_results));
            SubLObject wanted = kb_binding_sets_cardinality;
            SubLObject got = length(query_results);
            return values(satisfiedP, wanted, got);
        }
    }

    public static SubLObject kct_test_query_results_satisfy_binding_sets_cardinality(final SubLObject query_results, final SubLObject kb_binding_sets_cardinality) {
        if (NIL == kb_binding_sets_cardinality) {
            return T;
        }
        final SubLObject satisfiedP = numE(kb_binding_sets_cardinality, length(query_results));
        final SubLObject got = length(query_results);
        return values(satisfiedP, kb_binding_sets_cardinality, got);
    }

    public static final SubLObject kct_test_query_results_satisfy_binding_sets_min_cardinality_alt(SubLObject query_results, SubLObject kb_binding_sets_min_cardinality) {
        if (NIL == kb_binding_sets_min_cardinality) {
            return T;
        }
        {
            SubLObject satisfiedP = numLE(kb_binding_sets_min_cardinality, length(query_results));
            SubLObject wanted = kb_binding_sets_min_cardinality;
            SubLObject got = length(query_results);
            return values(satisfiedP, wanted, got);
        }
    }

    public static SubLObject kct_test_query_results_satisfy_binding_sets_min_cardinality(final SubLObject query_results, final SubLObject kb_binding_sets_min_cardinality) {
        if (NIL == kb_binding_sets_min_cardinality) {
            return T;
        }
        final SubLObject satisfiedP = numLE(kb_binding_sets_min_cardinality, length(query_results));
        final SubLObject got = length(query_results);
        return values(satisfiedP, kb_binding_sets_min_cardinality, got);
    }

    public static final SubLObject kct_test_query_results_satisfy_binding_sets_max_cardinality_alt(SubLObject query_results, SubLObject kb_binding_sets_max_cardinality) {
        if (NIL == kb_binding_sets_max_cardinality) {
            return T;
        }
        {
            SubLObject satisfiedP = numGE(kb_binding_sets_max_cardinality, length(query_results));
            SubLObject wanted = kb_binding_sets_max_cardinality;
            SubLObject got = length(query_results);
            return values(satisfiedP, wanted, got);
        }
    }

    public static SubLObject kct_test_query_results_satisfy_binding_sets_max_cardinality(final SubLObject query_results, final SubLObject kb_binding_sets_max_cardinality) {
        if (NIL == kb_binding_sets_max_cardinality) {
            return T;
        }
        final SubLObject satisfiedP = numGE(kb_binding_sets_max_cardinality, length(query_results));
        final SubLObject got = length(query_results);
        return values(satisfiedP, kb_binding_sets_max_cardinality, got);
    }

    public static SubLObject kct_test_query_results_satisfy_best_multiple_choice_option(final SubLObject chosen_option, final SubLObject kb_desired_option) {
        return equals.equalsP(chosen_option, kb_desired_option, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject why_kct_failure(SubLObject test_spec, SubLObject query_results) {
        if (com.cyc.cycjava.cycl.inference.kbq_query_run.kct_compute_test_status(test_spec, query_results) != $FAILURE) {
            return NIL;
        }
        {
            SubLObject cardinality_failure = com.cyc.cycjava.cycl.inference.kbq_query_run.why_kct_binding_cardinality_failure(test_spec, query_results);
            SubLObject binding_failure = com.cyc.cycjava.cycl.inference.kbq_query_run.why_kct_binding_match_failure(test_spec, query_results);
            return list_utilities.remove_if_not(symbol_function(IDENTITY), list(cardinality_failure, binding_failure), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
    }

    public static SubLObject why_kct_failure(final SubLObject test_spec, final SubLObject query_results, final SubLObject hypothetical_bindings) {
        if (kbq_query_run.kct_compute_test_status(test_spec, query_results, hypothetical_bindings) != $FAILURE) {
            return NIL;
        }
        if (NIL != kb_query.multiple_choice_testP(test_spec)) {
            return kbq_query_run.why_kct_multiple_choice_option_failure(test_spec, query_results);
        }
        final SubLObject cardinality_failure = kbq_query_run.why_kct_binding_cardinality_failure(test_spec, query_results);
        final SubLObject binding_failure = kbq_query_run.why_kct_binding_match_failure(test_spec, query_results, hypothetical_bindings);
        return remove_if_not(symbol_function(IDENTITY), list(cardinality_failure, binding_failure), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject why_kct_multiple_choice_option_failure(final SubLObject test_spec, final SubLObject query_results) {
        return cconcatenate(kbq_query_run.$$$Expected_, new SubLObject[]{ format_nil_a_no_copy(query_results), kbq_query_run.$str155$__but_got_, format_nil_a_no_copy(funcall(makeSymbol("MULTIPLE-CHOICE-TEST-DESIRED-OPTION"), test_spec)) });
    }

    public static final SubLObject why_kct_binding_cardinality_failure_alt(SubLObject test_spec, SubLObject query_results) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            thread.resetMultipleValues();
            {
                SubLObject satisfiedP = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_query_results_satisfy_binding_sets_cardinality(query_results, kct_binding_sets_cardinality(test_spec, UNPROVIDED));
                SubLObject wanted = thread.secondMultipleValue();
                SubLObject got = thread.thirdMultipleValue();
                thread.resetMultipleValues();
                if (NIL == satisfiedP) {
                    return cconcatenate($str_alt139$Expected_exactly_, new SubLObject[]{ format_nil.format_nil_a_no_copy(wanted), $str_alt140$_binding_sets__but_got_, format_nil.format_nil_a_no_copy(got), $str_alt141$_ });
                }
            }
            thread.resetMultipleValues();
            {
                SubLObject satisfiedP = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_query_results_satisfy_binding_sets_min_cardinality(query_results, kct_binding_sets_min_cardinality(test_spec, UNPROVIDED));
                SubLObject wanted = thread.secondMultipleValue();
                SubLObject got = thread.thirdMultipleValue();
                thread.resetMultipleValues();
                if (NIL == satisfiedP) {
                    return cconcatenate($str_alt142$Expected_at_least_, new SubLObject[]{ format_nil.format_nil_a_no_copy(wanted), $str_alt140$_binding_sets__but_got_, format_nil.format_nil_a_no_copy(got), $str_alt141$_ });
                }
            }
            thread.resetMultipleValues();
            {
                SubLObject satisfiedP = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_query_results_satisfy_binding_sets_max_cardinality(query_results, kct_binding_sets_max_cardinality(test_spec, UNPROVIDED));
                SubLObject wanted = thread.secondMultipleValue();
                SubLObject got = thread.thirdMultipleValue();
                thread.resetMultipleValues();
                if (NIL == satisfiedP) {
                    return cconcatenate($str_alt143$Expected_no_more_than_, new SubLObject[]{ format_nil.format_nil_a_no_copy(wanted), $str_alt140$_binding_sets__but_got_, format_nil.format_nil_a_no_copy(got), $str_alt141$_ });
                }
            }
            return NIL;
        }
    }

    public static SubLObject why_kct_binding_cardinality_failure(final SubLObject test_spec, final SubLObject query_results) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        SubLObject satisfiedP = kbq_query_run.kct_test_query_results_satisfy_binding_sets_cardinality(query_results, kct_utils.kct_binding_sets_cardinality(test_spec, UNPROVIDED));
        SubLObject wanted = thread.secondMultipleValue();
        SubLObject got = thread.thirdMultipleValue();
        thread.resetMultipleValues();
        if (NIL == satisfiedP) {
            return cconcatenate(kbq_query_run.$$$Expected_exactly_, new SubLObject[]{ format_nil_a_no_copy(wanted), kbq_query_run.$str157$_binding_sets__but_got_, format_nil_a_no_copy(got), kbq_query_run.$str158$_ });
        }
        thread.resetMultipleValues();
        satisfiedP = kbq_query_run.kct_test_query_results_satisfy_binding_sets_min_cardinality(query_results, kct_utils.kct_binding_sets_min_cardinality(test_spec, UNPROVIDED));
        wanted = thread.secondMultipleValue();
        got = thread.thirdMultipleValue();
        thread.resetMultipleValues();
        if (NIL == satisfiedP) {
            return cconcatenate(kbq_query_run.$$$Expected_at_least_, new SubLObject[]{ format_nil_a_no_copy(wanted), kbq_query_run.$str157$_binding_sets__but_got_, format_nil_a_no_copy(got), kbq_query_run.$str158$_ });
        }
        thread.resetMultipleValues();
        satisfiedP = kbq_query_run.kct_test_query_results_satisfy_binding_sets_max_cardinality(query_results, kct_utils.kct_binding_sets_max_cardinality(test_spec, UNPROVIDED));
        wanted = thread.secondMultipleValue();
        got = thread.thirdMultipleValue();
        thread.resetMultipleValues();
        if (NIL == satisfiedP) {
            return cconcatenate(kbq_query_run.$$$Expected_no_more_than_, new SubLObject[]{ format_nil_a_no_copy(wanted), kbq_query_run.$str157$_binding_sets__but_got_, format_nil_a_no_copy(got), kbq_query_run.$str158$_ });
        }
        return NIL;
    }

    public static final SubLObject why_kct_binding_match_failure(SubLObject test_spec, SubLObject query_results) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = $str_alt144$;
                SubLObject el_query_results = kct_transform_query_results_for_comparison(query_results);
                thread.resetMultipleValues();
                {
                    SubLObject satisfiedP = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_query_results_satisfy_exact_set_of_binding_sets(el_query_results, kct_exact_set_of_binding_sets(test_spec, UNPROVIDED));
                    SubLObject missing_binding_sets = thread.secondMultipleValue();
                    SubLObject extra_binding_sets = thread.thirdMultipleValue();
                    thread.resetMultipleValues();
                    if (NIL == satisfiedP) {
                        if (NIL != missing_binding_sets) {
                            result = cconcatenate(result, new SubLObject[]{ $str_alt145$These_expected_bindings_were_miss, com.cyc.cycjava.cycl.inference.kbq_query_run.kct_format_binding_sets_list(missing_binding_sets) });
                            if (NIL != extra_binding_sets) {
                                result = cconcatenate(format_nil.format_nil_a_no_copy(result), format_nil.$format_nil_percent$.getGlobalValue());
                            }
                        }
                        if (NIL != extra_binding_sets) {
                            result = cconcatenate(result, new SubLObject[]{ $str_alt146$These_unwanted_bindings_were_retu, com.cyc.cycjava.cycl.inference.kbq_query_run.kct_format_binding_sets_list(extra_binding_sets) });
                        }
                    }
                }
                if (NIL != string_utilities.non_empty_string_p(result)) {
                    return result;
                }
                thread.resetMultipleValues();
                {
                    SubLObject satisfiedP = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_query_results_satisfy_wanted_binding_sets(el_query_results, kct_wanted_binding_sets(test_spec, UNPROVIDED));
                    SubLObject missing_binding_sets = thread.secondMultipleValue();
                    thread.resetMultipleValues();
                    if (NIL == satisfiedP) {
                        result = cconcatenate(result, new SubLObject[]{ $str_alt145$These_expected_bindings_were_miss, com.cyc.cycjava.cycl.inference.kbq_query_run.kct_format_binding_sets_list(missing_binding_sets) });
                    }
                }
                if (NIL != string_utilities.non_empty_string_p(result)) {
                    return result;
                }
                thread.resetMultipleValues();
                {
                    SubLObject satisfiedP = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_query_results_satisfy_unwanted_binding_sets(el_query_results, kct_unwanted_binding_sets(test_spec, UNPROVIDED));
                    SubLObject extra_binding_sets = thread.secondMultipleValue();
                    thread.resetMultipleValues();
                    if (NIL == satisfiedP) {
                        result = cconcatenate(result, new SubLObject[]{ $str_alt146$These_unwanted_bindings_were_retu, com.cyc.cycjava.cycl.inference.kbq_query_run.kct_format_binding_sets_list(extra_binding_sets) });
                    }
                }
                if (NIL != string_utilities.non_empty_string_p(result)) {
                    return result;
                }
            }
            return NIL;
        }
    }

    public static SubLObject why_kct_binding_match_failure(final SubLObject test_spec, final SubLObject query_results, final SubLObject hypothetical_bindings) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = kbq_query_run.$str161$;
        final SubLObject el_query_results = kct_utils.kct_transform_query_results_for_comparison(query_results, hypothetical_bindings);
        thread.resetMultipleValues();
        SubLObject satisfiedP = kbq_query_run.kct_test_query_results_satisfy_exact_set_of_binding_sets(el_query_results, kct_utils.kct_exact_set_of_binding_sets(test_spec, UNPROVIDED), hypothetical_bindings);
        SubLObject missing_binding_sets = thread.secondMultipleValue();
        final SubLObject extra_binding_sets = thread.thirdMultipleValue();
        thread.resetMultipleValues();
        if (NIL == satisfiedP) {
            if (NIL != missing_binding_sets) {
                result = cconcatenate(result, new SubLObject[]{ kbq_query_run.$str162$These_expected_bindings_were_miss, kbq_query_run.kct_format_binding_sets_list(missing_binding_sets) });
                if (NIL != extra_binding_sets) {
                    result = cconcatenate(format_nil_a_no_copy(result), $format_nil_percent$.getGlobalValue());
                }
            }
            if (NIL != extra_binding_sets) {
                result = cconcatenate(result, new SubLObject[]{ kbq_query_run.$str163$These_unwanted_bindings_were_retu, kbq_query_run.kct_format_binding_sets_list(extra_binding_sets) });
            }
        }
        if (NIL != non_empty_string_p(result)) {
            return result;
        }
        thread.resetMultipleValues();
        satisfiedP = kbq_query_run.kct_test_query_results_satisfy_wanted_binding_sets(el_query_results, kct_utils.kct_wanted_binding_sets(test_spec, UNPROVIDED), hypothetical_bindings);
        missing_binding_sets = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (NIL == satisfiedP) {
            result = cconcatenate(result, new SubLObject[]{ kbq_query_run.$str162$These_expected_bindings_were_miss, kbq_query_run.kct_format_binding_sets_list(missing_binding_sets) });
        }
        if (NIL != non_empty_string_p(result)) {
            return result;
        }
        thread.resetMultipleValues();
        satisfiedP = kbq_query_run.kct_test_query_results_satisfy_unwanted_binding_sets(el_query_results, kct_utils.kct_unwanted_binding_sets(test_spec, UNPROVIDED), hypothetical_bindings);
        final SubLObject extra_binding_sets2 = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (NIL == satisfiedP) {
            result = cconcatenate(result, new SubLObject[]{ kbq_query_run.$str163$These_unwanted_bindings_were_retu, kbq_query_run.kct_format_binding_sets_list(extra_binding_sets2) });
        }
        if (NIL != non_empty_string_p(result)) {
            return result;
        }
        return NIL;
    }

    public static final SubLObject kct_format_binding_sets_list_alt(SubLObject binding_sets) {
        {
            SubLObject result = $str_alt144$;
            SubLObject cdolist_list_var = binding_sets;
            SubLObject binding_set = NIL;
            for (binding_set = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , binding_set = cdolist_list_var.first()) {
                result = cconcatenate(result, cconcatenate(format_nil.$format_nil_percent$.getGlobalValue(), new SubLObject[]{ $str_alt147$____, format_nil.format_nil_a_no_copy(binding_set) }));
            }
            return result;
        }
    }

    public static SubLObject kct_format_binding_sets_list(final SubLObject binding_sets) {
        SubLObject result = kbq_query_run.$str161$;
        SubLObject cdolist_list_var = binding_sets;
        SubLObject binding_set = NIL;
        binding_set = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            result = cconcatenate(result, cconcatenate($format_nil_percent$.getGlobalValue(), new SubLObject[]{ kbq_query_run.$$$____, format_nil_a_no_copy(binding_set) }));
            cdolist_list_var = cdolist_list_var.rest();
            binding_set = cdolist_list_var.first();
        } 
        return result;
    }

    /**
     *
     *
     * @return 0 ; kbq-query-set-run-p
     * @return 1 ; number of queries processed (suitable for SKIP parameter on continuation)
     */
    @LispMethod(comment = "@return 0 ; kbq-query-set-run-p\r\n@return 1 ; number of queries processed (suitable for SKIP parameter on continuation)")
    public static final SubLObject kbq_run_query_set_alt(SubLObject query_spec_set, SubLObject metrics, SubLObject outlier_timeout, SubLObject overriding_query_properties, SubLObject include_resultsP, SubLObject comment, SubLObject output_filename, SubLObject skip, SubLObject count, SubLObject randomize, SubLObject file_mode, SubLObject tail_queries, SubLObject keepalive_filename) {
        if (metrics == UNPROVIDED) {
            metrics = NIL;
        }
        if (outlier_timeout == UNPROVIDED) {
            outlier_timeout = $kbq_default_outlier_timeout$.getGlobalValue();
        }
        if (overriding_query_properties == UNPROVIDED) {
            overriding_query_properties = NIL;
        }
        if (include_resultsP == UNPROVIDED) {
            include_resultsP = T;
        }
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        if (output_filename == UNPROVIDED) {
            output_filename = NIL;
        }
        if (skip == UNPROVIDED) {
            skip = ZERO_INTEGER;
        }
        if (count == UNPROVIDED) {
            count = NIL;
        }
        if (randomize == UNPROVIDED) {
            randomize = NIL;
        }
        if (file_mode == UNPROVIDED) {
            file_mode = $OUTPUT;
        }
        if (tail_queries == UNPROVIDED) {
            tail_queries = NIL;
        }
        if (keepalive_filename == UNPROVIDED) {
            keepalive_filename = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL != keepalive_filename) {
                SubLTrampolineFile.checkType(keepalive_filename, FILE_VALID_FOR_WRITING_P);
            }
            {
                SubLObject query_specs = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_spec_set_elements(query_spec_set, randomize, tail_queries);
                SubLObject query_end = (NIL != count) ? ((SubLObject) (add(skip, count))) : NIL;
                SubLObject query_count = ZERO_INTEGER;
                SubLObject query_runs = NIL;
                SubLObject output_stream = NIL;
                SubLObject catch_var = NIL;
                try {
                    {
                        SubLObject restart_tag = $ABORT_KBQ_RUN_QUERY_SET;
                        SubLObject dummy = NIL;
                        {
                            SubLObject _prev_bind_0 = Errors.$restarts$.currentBinding(thread);
                            try {
                                Errors.$restarts$.bind(cons(list(restart_tag, $$$Abort_KBQ_run_query_set), Errors.$restarts$.getDynamicValue(thread)), thread);
                                try {
                                    try {
                                        if (NIL != output_filename) {
                                            output_stream = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_open_query_set_run_output_stream(output_filename, file_mode);
                                        }
                                        if ((NIL != output_stream) && ($OUTPUT == file_mode)) {
                                            com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_save_query_set_run_preamble(output_stream, comment);
                                        }
                                        {
                                            SubLObject list_var = query_specs;
                                            $progress_note$.setDynamicValue($$$KBQ_running_query_set, thread);
                                            $progress_start_time$.setDynamicValue(get_universal_time(), thread);
                                            $progress_total$.setDynamicValue(length(list_var), thread);
                                            $progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
                                            {
                                                SubLObject _prev_bind_0_22 = $last_percent_progress_index$.currentBinding(thread);
                                                SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
                                                SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
                                                SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
                                                try {
                                                    $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
                                                    $last_percent_progress_prediction$.bind(NIL, thread);
                                                    $within_noting_percent_progress$.bind(T, thread);
                                                    $percent_progress_start_time$.bind(get_universal_time(), thread);
                                                    noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
                                                    {
                                                        SubLObject csome_list_var = list_var;
                                                        SubLObject query_spec = NIL;
                                                        for (query_spec = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest() , query_spec = csome_list_var.first()) {
                                                            note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
                                                            $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
                                                            if (skip.isPositive()) {
                                                                skip = subtract(skip, ONE_INTEGER);
                                                            } else {
                                                                if (NIL != kb_query.kbq_runnableP(query_spec)) {
                                                                    if (NIL == $silent_progressP$.getDynamicValue(thread)) {
                                                                        format_nil.force_format(T, $str_alt153$__Running__s, query_spec, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    }
                                                                    if (NIL != $kbq_progress_stream$.getDynamicValue(thread)) {
                                                                        format_nil.force_format($kbq_progress_stream$.getDynamicValue(thread), $str_alt154$_________________________________, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                        format_nil.force_format($kbq_progress_stream$.getDynamicValue(thread), $str_alt155$______A____, query_spec, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                    }
                                                                    {
                                                                        SubLObject query_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_run_query(query_spec, metrics, outlier_timeout, overriding_query_properties, include_resultsP);
                                                                        query_runs = cons(query_run, query_runs);
                                                                        if (output_stream.isStream()) {
                                                                            com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_save_query_run(query_run, output_stream);
                                                                        }
                                                                        file_utilities.possibly_update_keepalive_file(keepalive_filename);
                                                                    }
                                                                } else {
                                                                    Errors.warn($str_alt156$Unrunnable_query____S, query_spec);
                                                                }
                                                            }
                                                            query_count = add(query_count, ONE_INTEGER);
                                                            if (NIL != query_end) {
                                                                if (query_count.numGE(query_end)) {
                                                                    com.cyc.cycjava.cycl.inference.kbq_query_run.abort_kbq_run_query_set();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    noting_percent_progress_postamble();
                                                } finally {
                                                    $percent_progress_start_time$.rebind(_prev_bind_3, thread);
                                                    $within_noting_percent_progress$.rebind(_prev_bind_2, thread);
                                                    $last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
                                                    $last_percent_progress_index$.rebind(_prev_bind_0_22, thread);
                                                }
                                            }
                                        }
                                    } finally {
                                        {
                                            SubLObject _prev_bind_0_23 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                            try {
                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                if (output_stream.isStream()) {
                                                    close(output_stream, UNPROVIDED);
                                                }
                                            } finally {
                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_23, thread);
                                            }
                                        }
                                    }
                                } catch (Throwable ccatch_env_var) {
                                    dummy = Errors.handleThrowable(ccatch_env_var, restart_tag);
                                }
                            } finally {
                                Errors.$restarts$.rebind(_prev_bind_0, thread);
                            }
                        }
                    }
                } catch (Throwable ccatch_env_var) {
                    catch_var = Errors.handleThrowable(ccatch_env_var, $ABORT_KBQ_RUN_QUERY_SET);
                }
                query_runs = nreverse(query_runs);
                {
                    SubLObject query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_make_query_set_run(query_runs, comment);
                    return values(query_set_run, query_count);
                }
            }
        }
    }

    /**
     *
     *
     * @return 0 ; kbq-query-set-run-p
     * @return 1 ; number of queries processed (suitable for SKIP parameter on continuation)
     */
    @LispMethod(comment = "@return 0 ; kbq-query-set-run-p\r\n@return 1 ; number of queries processed (suitable for SKIP parameter on continuation)")
    public static SubLObject kbq_run_query_set(final SubLObject query_spec_set, SubLObject metrics, SubLObject outlier_timeout, SubLObject overriding_query_properties, SubLObject include_resultsP, SubLObject comment, SubLObject output_filename, SubLObject skip, SubLObject count, SubLObject randomize, SubLObject file_mode, SubLObject tail_queries, SubLObject keepalive_filename) {
        if (metrics == UNPROVIDED) {
            metrics = NIL;
        }
        if (outlier_timeout == UNPROVIDED) {
            outlier_timeout = kbq_query_run.$kbq_default_outlier_timeout$.getGlobalValue();
        }
        if (overriding_query_properties == UNPROVIDED) {
            overriding_query_properties = NIL;
        }
        if (include_resultsP == UNPROVIDED) {
            include_resultsP = T;
        }
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        if (output_filename == UNPROVIDED) {
            output_filename = NIL;
        }
        if (skip == UNPROVIDED) {
            skip = ZERO_INTEGER;
        }
        if (count == UNPROVIDED) {
            count = NIL;
        }
        if (randomize == UNPROVIDED) {
            randomize = NIL;
        }
        if (file_mode == UNPROVIDED) {
            file_mode = $OUTPUT;
        }
        if (tail_queries == UNPROVIDED) {
            tail_queries = NIL;
        }
        if (keepalive_filename == UNPROVIDED) {
            keepalive_filename = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (((NIL != keepalive_filename) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == file_valid_for_writing_p(keepalive_filename))) {
            throw new AssertionError(keepalive_filename);
        }
        final SubLObject query_specs = kbq_query_run.kbq_query_spec_set_elements(query_spec_set, randomize, tail_queries);
        final SubLObject query_end = (NIL != count) ? add(skip, count) : NIL;
        SubLObject query_count = ZERO_INTEGER;
        SubLObject query_runs = NIL;
        SubLObject output_stream = NIL;
        SubLObject catch_var = NIL;
        try {
            thread.throwStack.push(kbq_query_run.$ABORT_KBQ_RUN_QUERY_SET);
            final SubLObject restart_tag = kbq_query_run.$ABORT_KBQ_RUN_QUERY_SET;
            SubLObject dummy = NIL;
            final SubLObject _prev_bind_0 = Errors.$restarts$.currentBinding(thread);
            try {
                Errors.$restarts$.bind(cons(list(restart_tag, kbq_query_run.$$$Abort_KBQ_run_query_set), Errors.$restarts$.getDynamicValue(thread)), thread);
                try {
                    thread.throwStack.push(restart_tag);
                    final SubLObject state = sksi_sks_manager.current_sks_registration_state();
                    final SubLObject _prev_bind_0_$25 = sksi_macros.$within_sksi_sandboxP$.currentBinding(thread);
                    try {
                        sksi_macros.$within_sksi_sandboxP$.bind(T, thread);
                        try {
                            if (NIL != output_filename) {
                                output_stream = kbq_query_run.kbq_open_query_set_run_output_stream(output_filename, file_mode);
                            }
                            if ((NIL != output_stream) && ($OUTPUT == file_mode)) {
                                kbq_query_run.kbq_save_query_set_run_preamble(output_stream, comment);
                            }
                            final SubLObject list_var = query_specs;
                            final SubLObject _prev_bind_0_$26 = $progress_note$.currentBinding(thread);
                            final SubLObject _prev_bind_2 = $progress_start_time$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = $progress_total$.currentBinding(thread);
                            final SubLObject _prev_bind_4 = $progress_sofar$.currentBinding(thread);
                            final SubLObject _prev_bind_5 = $last_percent_progress_index$.currentBinding(thread);
                            final SubLObject _prev_bind_6 = $last_percent_progress_prediction$.currentBinding(thread);
                            final SubLObject _prev_bind_7 = $within_noting_percent_progress$.currentBinding(thread);
                            final SubLObject _prev_bind_8 = $percent_progress_start_time$.currentBinding(thread);
                            try {
                                $progress_note$.bind(kbq_query_run.$$$KBQ_running_query_set, thread);
                                $progress_start_time$.bind(get_universal_time(), thread);
                                $progress_total$.bind(length(list_var), thread);
                                $progress_sofar$.bind(ZERO_INTEGER, thread);
                                $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
                                $last_percent_progress_prediction$.bind(NIL, thread);
                                $within_noting_percent_progress$.bind(T, thread);
                                $percent_progress_start_time$.bind(get_universal_time(), thread);
                                try {
                                    noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
                                    SubLObject csome_list_var = list_var;
                                    SubLObject query_spec = NIL;
                                    query_spec = csome_list_var.first();
                                    while (NIL != csome_list_var) {
                                        if (skip.isPositive()) {
                                            skip = subtract(skip, ONE_INTEGER);
                                        } else
                                            if (NIL != kb_query.kbq_runnableP(query_spec)) {
                                                if (NIL != kbq_query_run.$kbq_progress_stream$.getDynamicValue(thread)) {
                                                    force_format(kbq_query_run.$kbq_progress_stream$.getDynamicValue(thread), kbq_query_run.$str171$_________________________________, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                    force_format(kbq_query_run.$kbq_progress_stream$.getDynamicValue(thread), kbq_query_run.$str172$______A____, query_spec, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                }
                                                SubLObject query_run = NIL;
                                                final SubLObject str = cconcatenate(kbq_query_run.$$$Running_, format_nil_s_no_copy(query_spec));
                                                final SubLObject _prev_bind_0_$27 = $progress_start_time$.currentBinding(thread);
                                                final SubLObject _prev_bind_1_$28 = $progress_last_pacification_time$.currentBinding(thread);
                                                final SubLObject _prev_bind_2_$29 = $progress_elapsed_seconds_for_notification$.currentBinding(thread);
                                                final SubLObject _prev_bind_3_$30 = $progress_notification_count$.currentBinding(thread);
                                                final SubLObject _prev_bind_4_$31 = $progress_pacifications_since_last_nl$.currentBinding(thread);
                                                final SubLObject _prev_bind_5_$32 = $progress_count$.currentBinding(thread);
                                                final SubLObject _prev_bind_6_$33 = $is_noting_progressP$.currentBinding(thread);
                                                final SubLObject _prev_bind_7_$34 = $silent_progressP$.currentBinding(thread);
                                                try {
                                                    $progress_start_time$.bind(get_universal_time(), thread);
                                                    $progress_last_pacification_time$.bind($progress_start_time$.getDynamicValue(thread), thread);
                                                    $progress_elapsed_seconds_for_notification$.bind($suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                                                    $progress_notification_count$.bind(ZERO_INTEGER, thread);
                                                    $progress_pacifications_since_last_nl$.bind(ZERO_INTEGER, thread);
                                                    $progress_count$.bind(ZERO_INTEGER, thread);
                                                    $is_noting_progressP$.bind(T, thread);
                                                    $silent_progressP$.bind(NIL != str ? $silent_progressP$.getDynamicValue(thread) : T, thread);
                                                    noting_progress_preamble(str);
                                                    query_run = kbq_query_run.kbq_run_query(query_spec, metrics, outlier_timeout, overriding_query_properties, include_resultsP, UNPROVIDED);
                                                    noting_progress_postamble();
                                                } finally {
                                                    $silent_progressP$.rebind(_prev_bind_7_$34, thread);
                                                    $is_noting_progressP$.rebind(_prev_bind_6_$33, thread);
                                                    $progress_count$.rebind(_prev_bind_5_$32, thread);
                                                    $progress_pacifications_since_last_nl$.rebind(_prev_bind_4_$31, thread);
                                                    $progress_notification_count$.rebind(_prev_bind_3_$30, thread);
                                                    $progress_elapsed_seconds_for_notification$.rebind(_prev_bind_2_$29, thread);
                                                    $progress_last_pacification_time$.rebind(_prev_bind_1_$28, thread);
                                                    $progress_start_time$.rebind(_prev_bind_0_$27, thread);
                                                }
                                                query_runs = cons(query_run, query_runs);
                                                if (output_stream.isStream()) {
                                                    kbq_query_run.kbq_save_query_run(query_run, output_stream);
                                                }
                                                possibly_update_keepalive_file(keepalive_filename);
                                            } else {
                                                Errors.warn(kbq_query_run.$str174$Unrunnable_query____S, query_spec);
                                            }

                                        query_count = add(query_count, ONE_INTEGER);
                                        if ((NIL != query_end) && query_count.numGE(query_end)) {
                                            kbq_query_run.abort_kbq_run_query_set();
                                        }
                                        $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
                                        note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
                                        csome_list_var = csome_list_var.rest();
                                        query_spec = csome_list_var.first();
                                    } 
                                } finally {
                                    final SubLObject _prev_bind_0_$28 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                        final SubLObject _values = getValuesAsVector();
                                        noting_percent_progress_postamble();
                                        restoreValuesFromVector(_values);
                                    } finally {
                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$28, thread);
                                    }
                                }
                            } finally {
                                $percent_progress_start_time$.rebind(_prev_bind_8, thread);
                                $within_noting_percent_progress$.rebind(_prev_bind_7, thread);
                                $last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
                                $last_percent_progress_index$.rebind(_prev_bind_5, thread);
                                $progress_sofar$.rebind(_prev_bind_4, thread);
                                $progress_total$.rebind(_prev_bind_3, thread);
                                $progress_start_time$.rebind(_prev_bind_2, thread);
                                $progress_note$.rebind(_prev_bind_0_$26, thread);
                            }
                            if (output_stream.isStream()) {
                                close(output_stream, UNPROVIDED);
                            }
                        } finally {
                            final SubLObject _prev_bind_0_$29 = $is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                $is_thread_performing_cleanupP$.bind(T, thread);
                                final SubLObject _values2 = getValuesAsVector();
                                sksi_sks_manager.execute_sks_registration_state(state);
                                restoreValuesFromVector(_values2);
                            } finally {
                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$29, thread);
                            }
                        }
                    } finally {
                        sksi_macros.$within_sksi_sandboxP$.rebind(_prev_bind_0_$25, thread);
                    }
                } catch (final Throwable ccatch_env_var) {
                    dummy = Errors.handleThrowable(ccatch_env_var, restart_tag);
                } finally {
                    thread.throwStack.pop();
                }
            } finally {
                Errors.$restarts$.rebind(_prev_bind_0, thread);
            }
        } catch (final Throwable ccatch_env_var2) {
            catch_var = Errors.handleThrowable(ccatch_env_var2, kbq_query_run.$ABORT_KBQ_RUN_QUERY_SET);
        } finally {
            thread.throwStack.pop();
        }
        query_runs = nreverse(query_runs);
        final SubLObject query_set_run = kbq_query_run.kbq_make_query_set_run(query_runs, comment);
        return values(query_set_run, query_count);
    }

    public static final SubLObject abort_kbq_run_query_set_alt() {
        return sublisp_throw($ABORT_KBQ_RUN_QUERY_SET, NIL);
    }

    public static SubLObject abort_kbq_run_query_set() {
        return sublisp_throw(kbq_query_run.$ABORT_KBQ_RUN_QUERY_SET, NIL);
    }

    /**
     *
     *
     * @param TAIL-QUERIES;
     * 		a list of queries that will be appended to the end of the return value,
     * 		AFTER sorting and randomization.
     */
    @LispMethod(comment = "@param TAIL-QUERIES;\r\n\t\ta list of queries that will be appended to the end of the return value,\r\n\t\tAFTER sorting and randomization.")
    public static final SubLObject kbq_query_spec_set_elements_alt(SubLObject query_spec_set, SubLObject randomize, SubLObject tail_queries) {
        if (randomize == UNPROVIDED) {
            randomize = NIL;
        }
        if (tail_queries == UNPROVIDED) {
            tail_queries = NIL;
        }
        if (NIL != list_utilities.list_of_type_p(JANUS_OPERATION_P, query_spec_set)) {
            return append(query_spec_set, tail_queries);
        }
        {
            SubLObject v_answer = com.cyc.cycjava.cycl.inference.kbq_query_run.all_instantiations_via_inference(query_spec_set, $$EverythingPSC);
            if (NIL != randomize) {
                v_answer = list_utilities.randomize_list(v_answer);
            } else {
                v_answer = kb_utilities.sort_terms(v_answer, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            return append(v_answer, tail_queries);
        }
    }

    /**
     *
     *
     * @param TAIL-QUERIES;
     * 		a list of queries that will be appended to the end of the return value,
     * 		AFTER sorting and randomization.
     */
    @LispMethod(comment = "@param TAIL-QUERIES;\r\n\t\ta list of queries that will be appended to the end of the return value,\r\n\t\tAFTER sorting and randomization.")
    public static SubLObject kbq_query_spec_set_elements(final SubLObject query_spec_set, SubLObject randomize, SubLObject tail_queries) {
        if (randomize == UNPROVIDED) {
            randomize = NIL;
        }
        if (tail_queries == UNPROVIDED) {
            tail_queries = NIL;
        }
        if (NIL != list_of_type_p(kbq_query_run.JANUS_OPERATION_P, query_spec_set)) {
            return append(query_spec_set, tail_queries);
        }
        SubLObject v_answer = kbq_query_run.all_instantiations_via_inference(query_spec_set, kbq_query_run.$$EverythingPSC);
        if (NIL != randomize) {
            v_answer = randomize_list(v_answer);
        } else {
            v_answer = kbq_query_run.sort_queries_by_sksi_modules_needed(v_answer);
        }
        return append(v_answer, tail_queries);
    }

    public static SubLObject sort_queries_by_sksi_modules_needed(final SubLObject query_specs) {
        return kbq_query_run.sort_terms_by_sksi_modules_needed(query_specs, kbq_query_run.SKSI_MODULES_NEEDED_SORTED_MEMOIZED);
    }

    public static SubLObject sort_tests_by_sksi_modules_needed(final SubLObject test_specs) {
        return kbq_query_run.sort_terms_by_sksi_modules_needed(test_specs, kbq_query_run.QUERY_SKSI_MODULES_NEEDED_SORTED_MEMOIZED);
    }

    public static SubLObject sort_terms_by_sksi_modules_needed(final SubLObject terms, final SubLObject key) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = sort_terms(terms, T, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject local_state;
        final SubLObject state = local_state = memoization_state.new_memoization_state(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                result = sort_terms(result, NIL, T, T, T, key, UNPROVIDED);
            } finally {
                final SubLObject _prev_bind_0_$37 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values = getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    restoreValuesFromVector(_values);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$37, thread);
                }
            }
        } finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    public static SubLObject sksi_modules_needed_sorted_memoized_internal(final SubLObject query_spec) {
        return sort_terms(kbq_query_run.sksi_modules_needed(query_spec), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject sksi_modules_needed_sorted_memoized(final SubLObject query_spec) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = NIL;
        if (NIL == v_memoization_state) {
            return kbq_query_run.sksi_modules_needed_sorted_memoized_internal(query_spec);
        }
        caching_state = memoization_state.memoization_state_lookup(v_memoization_state, kbq_query_run.SKSI_MODULES_NEEDED_SORTED_MEMOIZED, UNPROVIDED);
        if (NIL == caching_state) {
            caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), kbq_query_run.SKSI_MODULES_NEEDED_SORTED_MEMOIZED, ONE_INTEGER, NIL, EQL, UNPROVIDED);
            memoization_state.memoization_state_put(v_memoization_state, kbq_query_run.SKSI_MODULES_NEEDED_SORTED_MEMOIZED, caching_state);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, query_spec, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = arg2(thread.resetMultipleValues(), multiple_value_list(kbq_query_run.sksi_modules_needed_sorted_memoized_internal(query_spec)));
            memoization_state.caching_state_put(caching_state, query_spec, results, UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }

    public static SubLObject query_sksi_modules_needed_sorted_memoized_internal(final SubLObject test_spec) {
        return sort_terms(kbq_query_run.query_sksi_modules_needed(test_spec), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject query_sksi_modules_needed_sorted_memoized(final SubLObject test_spec) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = NIL;
        if (NIL == v_memoization_state) {
            return kbq_query_run.query_sksi_modules_needed_sorted_memoized_internal(test_spec);
        }
        caching_state = memoization_state.memoization_state_lookup(v_memoization_state, kbq_query_run.QUERY_SKSI_MODULES_NEEDED_SORTED_MEMOIZED, UNPROVIDED);
        if (NIL == caching_state) {
            caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), kbq_query_run.QUERY_SKSI_MODULES_NEEDED_SORTED_MEMOIZED, ONE_INTEGER, NIL, EQL, UNPROVIDED);
            memoization_state.memoization_state_put(v_memoization_state, kbq_query_run.QUERY_SKSI_MODULES_NEEDED_SORTED_MEMOIZED, caching_state);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, test_spec, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = arg2(thread.resetMultipleValues(), multiple_value_list(kbq_query_run.query_sksi_modules_needed_sorted_memoized_internal(test_spec)));
            memoization_state.caching_state_put(caching_state, test_spec, results, UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }

    /**
     * Return all the elements of SET in MT via inference
     */
    @LispMethod(comment = "Return all the elements of SET in MT via inference")
    public static final SubLObject all_instantiations_via_inference_alt(SubLObject v_set, SubLObject mt) {
        {
            SubLObject collectionP = fort_types_interface.isa_collectionP(v_set, UNPROVIDED);
            SubLObject predicate = (NIL != collectionP) ? ((SubLObject) ($$isa)) : $$elementOf;
            return ask_utilities.query_variable($sym161$_OBJ, list(predicate, $sym161$_OBJ, v_set), mt, $list_alt162);
        }
    }

    /**
     * Return all the elements of SET in MT via inference
     */
    @LispMethod(comment = "Return all the elements of SET in MT via inference")
    public static SubLObject all_instantiations_via_inference(final SubLObject v_set, final SubLObject mt) {
        final SubLObject collectionP = isa_collectionP(v_set, UNPROVIDED);
        final SubLObject predicate = (NIL != collectionP) ? kbq_query_run.$$isa : kbq_query_run.$$elementOf;
        return ask_utilities.query_variable(kbq_query_run.$sym181$_OBJ, list(predicate, kbq_query_run.$sym181$_OBJ, v_set), mt, kbq_query_run.$list182);
    }

    public static final SubLObject kbq_test_collection_to_query_set_alt(SubLObject test_collection) {
        {
            SubLObject query = subst(test_collection, $TEST_COLLECTION, $kbq_test_collection_to_query_set_query$.getGlobalValue(), UNPROVIDED, UNPROVIDED);
            return ask_utilities.query_variable($SET, query, $$EverythingPSC, $list_alt166).first();
        }
    }

    public static SubLObject kbq_test_collection_to_query_set(final SubLObject test_collection) {
        final SubLObject query = subst(test_collection, $TEST_COLLECTION, kbq_query_run.$kbq_test_collection_to_query_set_query$.getGlobalValue(), UNPROVIDED, UNPROVIDED);
        return ask_utilities.query_variable($SET, query, kbq_query_run.$$EverythingPSC, kbq_query_run.$list186).first();
    }

    public static SubLObject run_kbq_query_spec_set_and_process_inferences(final SubLObject query_spec_set, final SubLObject process_method, SubLObject options) {
        if (options == UNPROVIDED) {
            options = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject current;
        final SubLObject datum = current = options;
        final SubLObject progress_message_tail = property_list_member($PROGRESS_MESSAGE, current);
        final SubLObject progress_message = (NIL != progress_message_tail) ? cadr(progress_message_tail) : kbq_query_run.$$$Processing_KB_Queries;
        final SubLObject query_specs = kbq_query_run.kbq_query_spec_set_elements(query_spec_set, UNPROVIDED, UNPROVIDED);
        final SubLObject message_var = progress_message;
        final SubLObject list_var = query_specs;
        SubLObject sofar = ZERO_INTEGER;
        final SubLObject total = length(list_var);
        final SubLObject _prev_bind_0 = $last_percent_progress_index$.currentBinding(thread);
        final SubLObject _prev_bind_2 = $last_percent_progress_prediction$.currentBinding(thread);
        final SubLObject _prev_bind_3 = $within_noting_percent_progress$.currentBinding(thread);
        final SubLObject _prev_bind_4 = $percent_progress_start_time$.currentBinding(thread);
        try {
            $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
            $last_percent_progress_prediction$.bind(NIL, thread);
            $within_noting_percent_progress$.bind(T, thread);
            $percent_progress_start_time$.bind(get_universal_time(), thread);
            try {
                noting_percent_progress_preamble(message_var);
                SubLObject cdolist_list_var = list_var;
                SubLObject kbq = NIL;
                kbq = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    note_percent_progress(sofar, total);
                    sofar = add(sofar, ONE_INTEGER);
                    SubLObject catch_var = NIL;
                    try {
                        thread.throwStack.push($SKIP_KBQ);
                        final SubLObject restart_tag = $SKIP_KBQ;
                        SubLObject dummy = NIL;
                        final SubLObject _prev_bind_0_$38 = Errors.$restarts$.currentBinding(thread);
                        try {
                            Errors.$restarts$.bind(cons(list(restart_tag, kbq_query_run.$str190$Skip_KBQ__S, kbq), Errors.$restarts$.getDynamicValue(thread)), thread);
                            try {
                                thread.throwStack.push(restart_tag);
                                kbq_query_run.run_kbq_and_process_inferences(kbq, process_method, options);
                            } catch (final Throwable ccatch_env_var) {
                                dummy = Errors.handleThrowable(ccatch_env_var, restart_tag);
                            } finally {
                                thread.throwStack.pop();
                            }
                        } finally {
                            Errors.$restarts$.rebind(_prev_bind_0_$38, thread);
                        }
                    } catch (final Throwable ccatch_env_var2) {
                        catch_var = Errors.handleThrowable(ccatch_env_var2, $SKIP_KBQ);
                    } finally {
                        thread.throwStack.pop();
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    kbq = cdolist_list_var.first();
                } 
            } finally {
                final SubLObject _prev_bind_0_$39 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values = getValuesAsVector();
                    noting_percent_progress_postamble();
                    restoreValuesFromVector(_values);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$39, thread);
                }
            }
        } finally {
            $percent_progress_start_time$.rebind(_prev_bind_4, thread);
            $within_noting_percent_progress$.rebind(_prev_bind_3, thread);
            $last_percent_progress_prediction$.rebind(_prev_bind_2, thread);
            $last_percent_progress_index$.rebind(_prev_bind_0, thread);
        }
        return length(query_specs);
    }

    public static SubLObject run_kbq_and_process_inferences(final SubLObject kbq, final SubLObject process_method, final SubLObject options) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject additional_args_tail = property_list_member($ADDITIONAL_ARGS, options);
        final SubLObject additional_args = (NIL != additional_args_tail) ? cadr(additional_args_tail) : NIL;
        final SubLObject outlier_timeout_tail = property_list_member($OUTLIER_TIMEOUT, options);
        final SubLObject outlier_timeout = (NIL != outlier_timeout_tail) ? cadr(outlier_timeout_tail) : NIL;
        final SubLObject overriding_query_properties_tail = property_list_member(kbq_query_run.$OVERRIDING_QUERY_PROPERTIES, options);
        final SubLObject overriding_query_properties = (NIL != overriding_query_properties_tail) ? cadr(overriding_query_properties_tail) : NIL;
        inference_datastructures_problem_store.destroy_all_problem_stores();
        kb_cleanup.forget_ephemeral_terms(NIL);
        SubLObject message_var = NIL;
        final SubLObject was_appendingP = eval(kbq_query_run.$append_stack_traces_to_error_messagesP$);
        eval(kbq_query_run.$list193);
        try {
            try {
                thread.throwStack.push($catch_error_message_target$.getGlobalValue());
                final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                try {
                    Errors.$error_handler$.bind(CATCH_ERROR_MESSAGE_HANDLER, thread);
                    try {
                        kbq_query_run.run_kbq_and_generate_inferences(kbq, outlier_timeout, overriding_query_properties);
                    } catch (final Throwable catch_var) {
                        Errors.handleThrowable(catch_var, NIL);
                    }
                } finally {
                    Errors.$error_handler$.rebind(_prev_bind_0, thread);
                }
            } catch (final Throwable ccatch_env_var) {
                message_var = Errors.handleThrowable(ccatch_env_var, $catch_error_message_target$.getGlobalValue());
            } finally {
                thread.throwStack.pop();
            }
        } finally {
            final SubLObject _prev_bind_2 = $is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                $is_thread_performing_cleanupP$.bind(T, thread);
                final SubLObject _values = getValuesAsVector();
                eval(list(CSETQ, kbq_query_run.$append_stack_traces_to_error_messagesP$, was_appendingP));
                restoreValuesFromVector(_values);
            } finally {
                $is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
            }
        }
        if (message_var.isString()) {
            Errors.warn(kbq_query_run.$str195$_A, message_var);
        }
        final SubLObject inferences = all_inferences();
        return kbq_query_run.process_all_kbq_inferences(process_method, kbq, inferences, additional_args);
    }

    public static SubLObject run_kbq_and_generate_inferences(final SubLObject kbq, final SubLObject outlier_timeout, SubLObject overriding_query_properties) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject mandatory_overrides = kbq_query_run.$list196;
        overriding_query_properties = merge_plist(mandatory_overrides, overriding_query_properties);
        final SubLObject _prev_bind_0 = $kbq_run_query_auto_destroy_enabledP$.currentBinding(thread);
        try {
            $kbq_run_query_auto_destroy_enabledP$.bind(NIL, thread);
            kbq_query_run.kbq_run_query(kbq, NIL, outlier_timeout, overriding_query_properties, NIL, UNPROVIDED);
        } finally {
            $kbq_run_query_auto_destroy_enabledP$.rebind(_prev_bind_0, thread);
        }
        return length(all_inferences());
    }

    public static SubLObject process_all_kbq_inferences(final SubLObject process_method, final SubLObject kbq, final SubLObject inferences, final SubLObject additional_args) {
        return funcall(process_method, kbq, inferences, additional_args);
    }

    /**
     *
     *
     * @return 0 ; kct-test-set-run-p
     * @return 1 ; number of tests processed (suitable for SKIP parameter on continuation)
     */
    @LispMethod(comment = "@return 0 ; kct-test-set-run-p\r\n@return 1 ; number of tests processed (suitable for SKIP parameter on continuation)")
    public static final SubLObject kct_run_test_set_alt(SubLObject test_spec_set, SubLObject overriding_metrics, SubLObject outlier_timeout, SubLObject overriding_query_properties, SubLObject include_resultsP, SubLObject comment, SubLObject output_filename, SubLObject expose_runstateP, SubLObject skip, SubLObject count, SubLObject randomize, SubLObject file_mode, SubLObject tail_tests, SubLObject keepalive_filename) {
        if (overriding_metrics == UNPROVIDED) {
            overriding_metrics = NIL;
        }
        if (outlier_timeout == UNPROVIDED) {
            outlier_timeout = $kbq_outlier_timeout$.getDynamicValue();
        }
        if (overriding_query_properties == UNPROVIDED) {
            overriding_query_properties = NIL;
        }
        if (include_resultsP == UNPROVIDED) {
            include_resultsP = NIL;
        }
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        if (output_filename == UNPROVIDED) {
            output_filename = NIL;
        }
        if (expose_runstateP == UNPROVIDED) {
            expose_runstateP = NIL;
        }
        if (skip == UNPROVIDED) {
            skip = ZERO_INTEGER;
        }
        if (count == UNPROVIDED) {
            count = NIL;
        }
        if (randomize == UNPROVIDED) {
            randomize = NIL;
        }
        if (file_mode == UNPROVIDED) {
            file_mode = $OUTPUT;
        }
        if (tail_tests == UNPROVIDED) {
            tail_tests = NIL;
        }
        if (keepalive_filename == UNPROVIDED) {
            keepalive_filename = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject test_specs = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_spec_set_elements(test_spec_set, randomize, tail_tests);
                SubLObject test_end = (NIL != count) ? ((SubLObject) (add(skip, count))) : NIL;
                SubLObject test_count = ZERO_INTEGER;
                SubLObject test_runs = NIL;
                SubLObject output_stream = NIL;
                SubLObject kct_set_runstate = NIL;
                if (NIL != expose_runstateP) {
                    kct_set_runstate = com.cyc.cycjava.cycl.inference.kbq_query_run.new_kct_set_runstate(test_spec_set);
                    kct_thinking.kct_thinking_set_runstate_id(com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_id(kct_set_runstate), UNPROVIDED);
                }
                {
                    SubLObject _prev_bind_0 = $kct_set_runstate$.currentBinding(thread);
                    try {
                        $kct_set_runstate$.bind(kct_set_runstate, thread);
                        {
                            SubLObject catch_var = NIL;
                            try {
                                {
                                    SubLObject restart_tag = $ABORT_KCT_RUN_TEST_SET;
                                    SubLObject dummy = NIL;
                                    {
                                        SubLObject _prev_bind_0_24 = Errors.$restarts$.currentBinding(thread);
                                        try {
                                            Errors.$restarts$.bind(cons(list(restart_tag, $$$Abort_KCT_run_test_set), Errors.$restarts$.getDynamicValue(thread)), thread);
                                            try {
                                                try {
                                                    if (NIL != output_filename) {
                                                        output_stream = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_open_test_set_run_output_stream(output_filename, file_mode);
                                                    }
                                                    if ((NIL != output_stream) && ($OUTPUT == file_mode)) {
                                                        com.cyc.cycjava.cycl.inference.kbq_query_run.kct_save_test_set_run_preamble(output_stream, comment);
                                                    }
                                                    {
                                                        SubLObject list_var = test_specs;
                                                        $progress_note$.setDynamicValue($$$KCT_running_test_set, thread);
                                                        $progress_start_time$.setDynamicValue(get_universal_time(), thread);
                                                        $progress_total$.setDynamicValue(length(list_var), thread);
                                                        $progress_sofar$.setDynamicValue(ZERO_INTEGER, thread);
                                                        {
                                                            SubLObject _prev_bind_0_25 = $last_percent_progress_index$.currentBinding(thread);
                                                            SubLObject _prev_bind_1 = $last_percent_progress_prediction$.currentBinding(thread);
                                                            SubLObject _prev_bind_2 = $within_noting_percent_progress$.currentBinding(thread);
                                                            SubLObject _prev_bind_3 = $percent_progress_start_time$.currentBinding(thread);
                                                            try {
                                                                $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
                                                                $last_percent_progress_prediction$.bind(NIL, thread);
                                                                $within_noting_percent_progress$.bind(T, thread);
                                                                $percent_progress_start_time$.bind(get_universal_time(), thread);
                                                                noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
                                                                {
                                                                    SubLObject csome_list_var = list_var;
                                                                    SubLObject test_spec = NIL;
                                                                    for (test_spec = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest() , test_spec = csome_list_var.first()) {
                                                                        note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
                                                                        $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
                                                                        if (skip.isPositive()) {
                                                                            skip = subtract(skip, ONE_INTEGER);
                                                                        } else {
                                                                            if (NIL != kct_test_runnableP(test_spec)) {
                                                                                if (NIL == $silent_progressP$.getDynamicValue(thread)) {
                                                                                    format_nil.force_format(T, $str_alt170$__Running__s__, test_spec, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                                                }
                                                                                {
                                                                                    SubLObject test_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_run_test(test_spec, overriding_metrics, outlier_timeout, overriding_query_properties, include_resultsP, expose_runstateP);
                                                                                    test_runs = cons(test_run, test_runs);
                                                                                    if (output_stream.isStream()) {
                                                                                        com.cyc.cycjava.cycl.inference.kbq_query_run.kct_save_test_run(test_run, output_stream);
                                                                                    }
                                                                                    file_utilities.possibly_update_keepalive_file(keepalive_filename);
                                                                                }
                                                                            } else {
                                                                                Errors.warn($str_alt171$Unrunnable_test____S, test_spec);
                                                                            }
                                                                        }
                                                                        test_count = add(test_count, ONE_INTEGER);
                                                                        if (NIL != test_end) {
                                                                            if (test_count.numGE(test_end)) {
                                                                                com.cyc.cycjava.cycl.inference.kbq_query_run.abort_kct_run_test_set();
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                noting_percent_progress_postamble();
                                                            } finally {
                                                                $percent_progress_start_time$.rebind(_prev_bind_3, thread);
                                                                $within_noting_percent_progress$.rebind(_prev_bind_2, thread);
                                                                $last_percent_progress_prediction$.rebind(_prev_bind_1, thread);
                                                                $last_percent_progress_index$.rebind(_prev_bind_0_25, thread);
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    {
                                                        SubLObject _prev_bind_0_26 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                                        try {
                                                            $is_thread_performing_cleanupP$.bind(T, thread);
                                                            if (output_stream.isStream()) {
                                                                close(output_stream, UNPROVIDED);
                                                            }
                                                        } finally {
                                                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_26, thread);
                                                        }
                                                    }
                                                }
                                            } catch (Throwable ccatch_env_var) {
                                                dummy = Errors.handleThrowable(ccatch_env_var, restart_tag);
                                            }
                                        } finally {
                                            Errors.$restarts$.rebind(_prev_bind_0_24, thread);
                                        }
                                    }
                                }
                            } catch (Throwable ccatch_env_var) {
                                catch_var = Errors.handleThrowable(ccatch_env_var, $ABORT_KCT_RUN_TEST_SET);
                            }
                        }
                    } finally {
                        $kct_set_runstate$.rebind(_prev_bind_0, thread);
                    }
                }
                test_runs = nreverse(test_runs);
                {
                    SubLObject test_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_make_test_set_run(test_runs, comment);
                    if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_set_runstate_p(kct_set_runstate)) {
                        com.cyc.cycjava.cycl.inference.kbq_query_run.set_kctsr_result(kct_set_runstate, test_set_run);
                    }
                    return values(test_set_run, test_count);
                }
            }
        }
    }

    /**
     *
     *
     * @return 0 ; kct-test-set-run-p
     * @return 1 ; number of tests processed (suitable for SKIP parameter on continuation)
     */
    @LispMethod(comment = "@return 0 ; kct-test-set-run-p\r\n@return 1 ; number of tests processed (suitable for SKIP parameter on continuation)")
    public static SubLObject kct_run_test_set(final SubLObject test_spec_set, SubLObject overriding_metrics, SubLObject outlier_timeout, SubLObject overriding_query_properties, SubLObject include_resultsP, SubLObject comment, SubLObject output_filename, SubLObject expose_runstateP, SubLObject skip, SubLObject count, SubLObject randomize, SubLObject file_mode, SubLObject tail_tests, SubLObject keepalive_filename) {
        if (overriding_metrics == UNPROVIDED) {
            overriding_metrics = NIL;
        }
        if (outlier_timeout == UNPROVIDED) {
            outlier_timeout = kbq_query_run.$kbq_outlier_timeout$.getDynamicValue();
        }
        if (overriding_query_properties == UNPROVIDED) {
            overriding_query_properties = NIL;
        }
        if (include_resultsP == UNPROVIDED) {
            include_resultsP = NIL;
        }
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        if (output_filename == UNPROVIDED) {
            output_filename = NIL;
        }
        if (expose_runstateP == UNPROVIDED) {
            expose_runstateP = NIL;
        }
        if (skip == UNPROVIDED) {
            skip = ZERO_INTEGER;
        }
        if (count == UNPROVIDED) {
            count = NIL;
        }
        if (randomize == UNPROVIDED) {
            randomize = NIL;
        }
        if (file_mode == UNPROVIDED) {
            file_mode = $OUTPUT;
        }
        if (tail_tests == UNPROVIDED) {
            tail_tests = NIL;
        }
        if (keepalive_filename == UNPROVIDED) {
            keepalive_filename = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject test_specs = kbq_query_run.kct_test_spec_set_elements(test_spec_set, randomize, tail_tests);
        final SubLObject test_end = (NIL != count) ? add(skip, count) : NIL;
        SubLObject test_count = ZERO_INTEGER;
        SubLObject test_runs = NIL;
        SubLObject output_stream = NIL;
        SubLObject kct_set_runstate = NIL;
        if (NIL != expose_runstateP) {
            kct_set_runstate = kbq_query_run.new_kct_set_runstate(test_spec_set);
            kct_thinking_set_runstate_id(kbq_query_run.kctsr_id(kct_set_runstate), UNPROVIDED);
        }
        final SubLObject _prev_bind_0 = kbq_query_run.$kct_set_runstate$.currentBinding(thread);
        try {
            kbq_query_run.$kct_set_runstate$.bind(kct_set_runstate, thread);
            SubLObject catch_var = NIL;
            try {
                thread.throwStack.push(kbq_query_run.$ABORT_KCT_RUN_TEST_SET);
                final SubLObject restart_tag = kbq_query_run.$ABORT_KCT_RUN_TEST_SET;
                SubLObject dummy = NIL;
                final SubLObject _prev_bind_0_$40 = Errors.$restarts$.currentBinding(thread);
                try {
                    Errors.$restarts$.bind(cons(list(restart_tag, kbq_query_run.$$$Abort_KCT_run_test_set), Errors.$restarts$.getDynamicValue(thread)), thread);
                    try {
                        thread.throwStack.push(restart_tag);
                        final SubLObject state = sksi_sks_manager.current_sks_registration_state();
                        final SubLObject _prev_bind_0_$41 = sksi_macros.$within_sksi_sandboxP$.currentBinding(thread);
                        try {
                            sksi_macros.$within_sksi_sandboxP$.bind(T, thread);
                            try {
                                try {
                                    if (NIL != output_filename) {
                                        output_stream = kbq_query_run.kct_open_test_set_run_output_stream(output_filename, file_mode);
                                    }
                                    if ((NIL != output_stream) && ($OUTPUT == file_mode)) {
                                        kbq_query_run.kct_save_test_set_run_preamble(output_stream, comment);
                                    }
                                    final SubLObject list_var = test_specs;
                                    final SubLObject _prev_bind_0_$42 = $progress_note$.currentBinding(thread);
                                    final SubLObject _prev_bind_2 = $progress_start_time$.currentBinding(thread);
                                    final SubLObject _prev_bind_3 = $progress_total$.currentBinding(thread);
                                    final SubLObject _prev_bind_4 = $progress_sofar$.currentBinding(thread);
                                    final SubLObject _prev_bind_5 = $last_percent_progress_index$.currentBinding(thread);
                                    final SubLObject _prev_bind_6 = $last_percent_progress_prediction$.currentBinding(thread);
                                    final SubLObject _prev_bind_7 = $within_noting_percent_progress$.currentBinding(thread);
                                    final SubLObject _prev_bind_8 = $percent_progress_start_time$.currentBinding(thread);
                                    try {
                                        $progress_note$.bind(kbq_query_run.$$$KCT_running_test_set, thread);
                                        $progress_start_time$.bind(get_universal_time(), thread);
                                        $progress_total$.bind(length(list_var), thread);
                                        $progress_sofar$.bind(ZERO_INTEGER, thread);
                                        $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
                                        $last_percent_progress_prediction$.bind(NIL, thread);
                                        $within_noting_percent_progress$.bind(T, thread);
                                        $percent_progress_start_time$.bind(get_universal_time(), thread);
                                        try {
                                            noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
                                            SubLObject csome_list_var = list_var;
                                            SubLObject test_spec = NIL;
                                            test_spec = csome_list_var.first();
                                            while (NIL != csome_list_var) {
                                                if (skip.isPositive()) {
                                                    skip = subtract(skip, ONE_INTEGER);
                                                } else
                                                    if (NIL != kct_utils.kct_test_runnableP(test_spec)) {
                                                        if (NIL == $silent_progressP$.getDynamicValue(thread)) {
                                                            force_format(T, kbq_query_run.$str200$__Running__s__, test_spec, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                        }
                                                        final SubLObject test_run = kbq_query_run.kct_run_test(test_spec, overriding_metrics, outlier_timeout, overriding_query_properties, include_resultsP, expose_runstateP);
                                                        test_runs = cons(test_run, test_runs);
                                                        if (output_stream.isStream()) {
                                                            kbq_query_run.kct_save_test_run(test_run, output_stream);
                                                        }
                                                        possibly_update_keepalive_file(keepalive_filename);
                                                    } else {
                                                        Errors.warn(kbq_query_run.$str201$Unrunnable_test____S, test_spec);
                                                    }

                                                test_count = add(test_count, ONE_INTEGER);
                                                if ((NIL != test_end) && test_count.numGE(test_end)) {
                                                    kbq_query_run.abort_kct_run_test_set();
                                                }
                                                $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
                                                note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
                                                csome_list_var = csome_list_var.rest();
                                                test_spec = csome_list_var.first();
                                            } 
                                        } finally {
                                            final SubLObject _prev_bind_0_$43 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                            try {
                                                $is_thread_performing_cleanupP$.bind(T, thread);
                                                final SubLObject _values = getValuesAsVector();
                                                noting_percent_progress_postamble();
                                                restoreValuesFromVector(_values);
                                            } finally {
                                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$43, thread);
                                            }
                                        }
                                    } finally {
                                        $percent_progress_start_time$.rebind(_prev_bind_8, thread);
                                        $within_noting_percent_progress$.rebind(_prev_bind_7, thread);
                                        $last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
                                        $last_percent_progress_index$.rebind(_prev_bind_5, thread);
                                        $progress_sofar$.rebind(_prev_bind_4, thread);
                                        $progress_total$.rebind(_prev_bind_3, thread);
                                        $progress_start_time$.rebind(_prev_bind_2, thread);
                                        $progress_note$.rebind(_prev_bind_0_$42, thread);
                                    }
                                } finally {
                                    final SubLObject _prev_bind_0_$44 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        $is_thread_performing_cleanupP$.bind(T, thread);
                                        final SubLObject _values2 = getValuesAsVector();
                                        if (output_stream.isStream()) {
                                            close(output_stream, UNPROVIDED);
                                        }
                                        restoreValuesFromVector(_values2);
                                    } finally {
                                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$44, thread);
                                    }
                                }
                            } finally {
                                final SubLObject _prev_bind_0_$45 = $is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    $is_thread_performing_cleanupP$.bind(T, thread);
                                    final SubLObject _values3 = getValuesAsVector();
                                    sksi_sks_manager.execute_sks_registration_state(state);
                                    restoreValuesFromVector(_values3);
                                } finally {
                                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$45, thread);
                                }
                            }
                        } finally {
                            sksi_macros.$within_sksi_sandboxP$.rebind(_prev_bind_0_$41, thread);
                        }
                    } catch (final Throwable ccatch_env_var) {
                        dummy = Errors.handleThrowable(ccatch_env_var, restart_tag);
                    } finally {
                        thread.throwStack.pop();
                    }
                } finally {
                    Errors.$restarts$.rebind(_prev_bind_0_$40, thread);
                }
            } catch (final Throwable ccatch_env_var2) {
                catch_var = Errors.handleThrowable(ccatch_env_var2, kbq_query_run.$ABORT_KCT_RUN_TEST_SET);
            } finally {
                thread.throwStack.pop();
            }
        } finally {
            kbq_query_run.$kct_set_runstate$.rebind(_prev_bind_0, thread);
        }
        test_runs = nreverse(test_runs);
        final SubLObject test_set_run = kbq_query_run.kct_make_test_set_run(test_runs, comment);
        if (NIL != kbq_query_run.kct_set_runstate_p(kct_set_runstate)) {
            kbq_query_run.set_kctsr_result(kct_set_runstate, test_set_run);
        }
        return values(test_set_run, test_count);
    }

    public static final SubLObject abort_kct_run_test_set_alt() {
        return sublisp_throw($ABORT_KCT_RUN_TEST_SET, NIL);
    }

    public static SubLObject abort_kct_run_test_set() {
        return sublisp_throw(kbq_query_run.$ABORT_KCT_RUN_TEST_SET, NIL);
    }

    /**
     *
     *
     * @param TAIL-TESTS;
     * 		a list of tests that will be appended to the end of the return value,
     * 		AFTER sorting and randomization.
     */
    @LispMethod(comment = "@param TAIL-TESTS;\r\n\t\ta list of tests that will be appended to the end of the return value,\r\n\t\tAFTER sorting and randomization.")
    public static final SubLObject kct_test_spec_set_elements_alt(SubLObject test_spec_set, SubLObject randomize, SubLObject tail_tests) {
        if (randomize == UNPROVIDED) {
            randomize = NIL;
        }
        if (tail_tests == UNPROVIDED) {
            tail_tests = NIL;
        }
        if (NIL != list_utilities.list_of_type_p(JANUS_OPERATION_P, test_spec_set)) {
            return append(test_spec_set, tail_tests);
        }
        {
            SubLObject v_answer = com.cyc.cycjava.cycl.inference.kbq_query_run.all_instantiations_via_inference(test_spec_set, $$EverythingPSC);
            if (NIL != randomize) {
                v_answer = list_utilities.randomize_list(v_answer);
            } else {
                v_answer = kb_utilities.sort_terms(v_answer, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            return append(v_answer, tail_tests);
        }
    }

    /**
     *
     *
     * @param TAIL-TESTS;
     * 		a list of tests that will be appended to the end of the return value,
     * 		AFTER sorting and randomization.
     */
    @LispMethod(comment = "@param TAIL-TESTS;\r\n\t\ta list of tests that will be appended to the end of the return value,\r\n\t\tAFTER sorting and randomization.")
    public static SubLObject kct_test_spec_set_elements(final SubLObject test_spec_set, SubLObject randomize, SubLObject tail_tests) {
        if (randomize == UNPROVIDED) {
            randomize = NIL;
        }
        if (tail_tests == UNPROVIDED) {
            tail_tests = NIL;
        }
        if (NIL != list_of_type_p(kbq_query_run.JANUS_OPERATION_P, test_spec_set)) {
            return append(test_spec_set, tail_tests);
        }
        SubLObject v_answer = kbq_query_run.all_instantiations_via_inference(test_spec_set, kbq_query_run.$$EverythingPSC);
        if (NIL != randomize) {
            v_answer = randomize_list(v_answer);
        } else {
            v_answer = kbq_query_run.sort_tests_by_sksi_modules_needed(v_answer);
        }
        return append(v_answer, tail_tests);
    }

    /**
     *
     *
     * @param ANALYSIS-FILENAME
     * 		nil or stringp; if provided, the filename to which a
     * 		text analysis of the run will be written after its completion.
     * @param KEEPALIVE-FILENAME
     * 		nil or stringp; if provided, the filename that will be
     * 		updated with a keepalive message in between each query.
     * @param IF-FILE-EXISTS
     * 		:overwrite, :augment, :rerun-errors, or :augment-or-rerun-errors.
     * 		If :overwrite, FILENAME will be overwritten.
     * 		If :augment, FILENAME will be analyzed if it exists, and if it was incomplete, it will be appended to.
     * 		If :rerun-errors, FILENAME will be analyzed if it exists, and any erroring queries will be rerun in a separate file with '-rerun-errors-N' added to the filename.
     * 		If :augment-or-rerun-errors, FILENAME will be augmented if it is incomplete and rerun errors if it is complete.
     */
    @LispMethod(comment = "@param ANALYSIS-FILENAME\r\n\t\tnil or stringp; if provided, the filename to which a\r\n\t\ttext analysis of the run will be written after its completion.\r\n@param KEEPALIVE-FILENAME\r\n\t\tnil or stringp; if provided, the filename that will be\r\n\t\tupdated with a keepalive message in between each query.\r\n@param IF-FILE-EXISTS\r\n\t\t:overwrite, :augment, :rerun-errors, or :augment-or-rerun-errors.\r\n\t\tIf :overwrite, FILENAME will be overwritten.\r\n\t\tIf :augment, FILENAME will be analyzed if it exists, and if it was incomplete, it will be appended to.\r\n\t\tIf :rerun-errors, FILENAME will be analyzed if it exists, and any erroring queries will be rerun in a separate file with \'-rerun-errors-N\' added to the filename.\r\n\t\tIf :augment-or-rerun-errors, FILENAME will be augmented if it is incomplete and rerun errors if it is complete.")
    public static final SubLObject run_kbq_experiment_alt(SubLObject macroform, SubLObject environment) {
        {
            SubLObject datum = macroform.rest();
            SubLObject current = datum;
            SubLObject allow_other_keys_p = NIL;
            SubLObject rest = current;
            SubLObject bad = NIL;
            SubLObject current_27 = NIL;
            for (; NIL != rest;) {
                destructuring_bind_must_consp(rest, datum, $list_alt172);
                current_27 = rest.first();
                rest = rest.rest();
                destructuring_bind_must_consp(rest, datum, $list_alt172);
                if (NIL == member(current_27, $list_alt173, UNPROVIDED, UNPROVIDED)) {
                    bad = T;
                }
                if (current_27 == $ALLOW_OTHER_KEYS) {
                    allow_other_keys_p = rest.first();
                }
                rest = rest.rest();
            }
            if ((NIL != bad) && (NIL == allow_other_keys_p)) {
                cdestructuring_bind_error(datum, $list_alt172);
            }
            {
                SubLObject query_spec_set_tail = property_list_member($QUERY_SPEC_SET, current);
                SubLObject query_spec_set = (NIL != query_spec_set_tail) ? ((SubLObject) (cadr(query_spec_set_tail))) : NIL;
                SubLObject filename_tail = property_list_member($FILENAME, current);
                SubLObject filename = (NIL != filename_tail) ? ((SubLObject) (cadr(filename_tail))) : NIL;
                SubLObject analysis_filename_tail = property_list_member($ANALYSIS_FILENAME, current);
                SubLObject analysis_filename = (NIL != analysis_filename_tail) ? ((SubLObject) (cadr(analysis_filename_tail))) : NIL;
                SubLObject keepalive_filename_tail = property_list_member($KEEPALIVE_FILENAME, current);
                SubLObject keepalive_filename = (NIL != keepalive_filename_tail) ? ((SubLObject) (cadr(keepalive_filename_tail))) : NIL;
                SubLObject comment_tail = property_list_member($COMMENT, current);
                SubLObject comment = (NIL != comment_tail) ? ((SubLObject) (cadr(comment_tail))) : NIL;
                SubLObject overriding_query_properties_tail = property_list_member($OVERRIDING_QUERY_PROPERTIES, current);
                SubLObject overriding_query_properties = (NIL != overriding_query_properties_tail) ? ((SubLObject) (cadr(overriding_query_properties_tail))) : NIL;
                SubLObject metrics_tail = property_list_member($METRICS, current);
                SubLObject metrics = (NIL != metrics_tail) ? ((SubLObject) (cadr(metrics_tail))) : $list_alt178;
                SubLObject outlier_timeout_tail = property_list_member($OUTLIER_TIMEOUT, current);
                SubLObject outlier_timeout = (NIL != outlier_timeout_tail) ? ((SubLObject) (cadr(outlier_timeout_tail))) : $kbq_default_outlier_timeout$;
                SubLObject incremental_tail = property_list_member($INCREMENTAL, current);
                SubLObject incremental = (NIL != incremental_tail) ? ((SubLObject) (cadr(incremental_tail))) : NIL;
                SubLObject include_results_tail = property_list_member($INCLUDE_RESULTS, current);
                SubLObject include_results = (NIL != include_results_tail) ? ((SubLObject) (cadr(include_results_tail))) : T;
                SubLObject randomize_tail = property_list_member($RANDOMIZE, current);
                SubLObject randomize = (NIL != randomize_tail) ? ((SubLObject) (cadr(randomize_tail))) : NIL;
                SubLObject skip_tail = property_list_member($SKIP, current);
                SubLObject skip = (NIL != skip_tail) ? ((SubLObject) (cadr(skip_tail))) : ZERO_INTEGER;
                SubLObject count_tail = property_list_member($COUNT, current);
                SubLObject count = (NIL != count_tail) ? ((SubLObject) (cadr(count_tail))) : NIL;
                SubLObject if_file_exists_tail = property_list_member($IF_FILE_EXISTS, current);
                SubLObject if_file_exists = (NIL != if_file_exists_tail) ? ((SubLObject) (cadr(if_file_exists_tail))) : $OVERWRITE;
                return list(RUN_KBQ_EXPERIMENT_INTERNAL, list(new SubLObject[]{ LIST, $QUERY_SPEC_SET, query_spec_set, $FILENAME, filename, $ANALYSIS_FILENAME, analysis_filename, $KEEPALIVE_FILENAME, keepalive_filename, $COMMENT, comment, $OVERRIDING_QUERY_PROPERTIES, overriding_query_properties, $METRICS, metrics, $OUTLIER_TIMEOUT, outlier_timeout, $INCREMENTAL, incremental, $INCLUDE_RESULTS, include_results, $RANDOMIZE, randomize, $SKIP, skip, $COUNT, count, $IF_FILE_EXISTS, if_file_exists }));
            }
        }
    }

    /**
     *
     *
     * @param ANALYSIS-FILENAME
     * 		nil or stringp; if provided, the filename to which a
     * 		text analysis of the run will be written after its completion.
     * @param KEEPALIVE-FILENAME
     * 		nil or stringp; if provided, the filename that will be
     * 		updated with a keepalive message in between each query.
     * @param IF-FILE-EXISTS
     * 		:overwrite, :augment, :rerun-errors, or :augment-or-rerun-errors.
     * 		If :overwrite, FILENAME will be overwritten.
     * 		If :augment, FILENAME will be analyzed if it exists, and if it was incomplete, it will be appended to.
     * 		If :rerun-errors, FILENAME will be analyzed if it exists, and any erroring queries will be rerun in a separate file with '-rerun-errors-N' added to the filename.
     * 		If :augment-or-rerun-errors, FILENAME will be augmented if it is incomplete and rerun errors if it is complete.
     */
    @LispMethod(comment = "@param ANALYSIS-FILENAME\r\n\t\tnil or stringp; if provided, the filename to which a\r\n\t\ttext analysis of the run will be written after its completion.\r\n@param KEEPALIVE-FILENAME\r\n\t\tnil or stringp; if provided, the filename that will be\r\n\t\tupdated with a keepalive message in between each query.\r\n@param IF-FILE-EXISTS\r\n\t\t:overwrite, :augment, :rerun-errors, or :augment-or-rerun-errors.\r\n\t\tIf :overwrite, FILENAME will be overwritten.\r\n\t\tIf :augment, FILENAME will be analyzed if it exists, and if it was incomplete, it will be appended to.\r\n\t\tIf :rerun-errors, FILENAME will be analyzed if it exists, and any erroring queries will be rerun in a separate file with \'-rerun-errors-N\' added to the filename.\r\n\t\tIf :augment-or-rerun-errors, FILENAME will be augmented if it is incomplete and rerun errors if it is complete.")
    public static SubLObject run_kbq_experiment(final SubLObject macroform, final SubLObject environment) {
        final SubLObject current;
        final SubLObject datum = current = macroform.rest();
        SubLObject allow_other_keys_p = NIL;
        SubLObject rest = current;
        SubLObject bad = NIL;
        SubLObject current_$46 = NIL;
        while (NIL != rest) {
            destructuring_bind_must_consp(rest, datum, kbq_query_run.$list202);
            current_$46 = rest.first();
            rest = rest.rest();
            destructuring_bind_must_consp(rest, datum, kbq_query_run.$list202);
            if (NIL == member(current_$46, kbq_query_run.$list203, UNPROVIDED, UNPROVIDED)) {
                bad = T;
            }
            if (current_$46 == kbq_query_run.$ALLOW_OTHER_KEYS) {
                allow_other_keys_p = rest.first();
            }
            rest = rest.rest();
        } 
        if ((NIL != bad) && (NIL == allow_other_keys_p)) {
            cdestructuring_bind_error(datum, kbq_query_run.$list202);
        }
        final SubLObject query_spec_set_tail = property_list_member(kbq_query_run.$QUERY_SPEC_SET, current);
        final SubLObject query_spec_set = (NIL != query_spec_set_tail) ? cadr(query_spec_set_tail) : NIL;
        final SubLObject filename_tail = property_list_member($FILENAME, current);
        final SubLObject filename = (NIL != filename_tail) ? cadr(filename_tail) : NIL;
        final SubLObject analysis_filename_tail = property_list_member($ANALYSIS_FILENAME, current);
        final SubLObject analysis_filename = (NIL != analysis_filename_tail) ? cadr(analysis_filename_tail) : NIL;
        final SubLObject keepalive_filename_tail = property_list_member($KEEPALIVE_FILENAME, current);
        final SubLObject keepalive_filename = (NIL != keepalive_filename_tail) ? cadr(keepalive_filename_tail) : NIL;
        final SubLObject comment_tail = property_list_member($COMMENT, current);
        final SubLObject comment = (NIL != comment_tail) ? cadr(comment_tail) : NIL;
        final SubLObject overriding_query_properties_tail = property_list_member(kbq_query_run.$OVERRIDING_QUERY_PROPERTIES, current);
        final SubLObject overriding_query_properties = (NIL != overriding_query_properties_tail) ? cadr(overriding_query_properties_tail) : NIL;
        final SubLObject metrics_tail = property_list_member($METRICS, current);
        final SubLObject metrics = (NIL != metrics_tail) ? cadr(metrics_tail) : kbq_query_run.$list208;
        final SubLObject outlier_timeout_tail = property_list_member($OUTLIER_TIMEOUT, current);
        final SubLObject outlier_timeout = (NIL != outlier_timeout_tail) ? cadr(outlier_timeout_tail) : kbq_query_run.$kbq_default_outlier_timeout$;
        final SubLObject incremental_tail = property_list_member($INCREMENTAL, current);
        final SubLObject incremental = (NIL != incremental_tail) ? cadr(incremental_tail) : NIL;
        final SubLObject include_results_tail = property_list_member($INCLUDE_RESULTS, current);
        final SubLObject include_results = (NIL != include_results_tail) ? cadr(include_results_tail) : T;
        final SubLObject randomize_tail = property_list_member($RANDOMIZE, current);
        final SubLObject randomize = (NIL != randomize_tail) ? cadr(randomize_tail) : NIL;
        final SubLObject skip_tail = property_list_member($SKIP, current);
        final SubLObject skip = (NIL != skip_tail) ? cadr(skip_tail) : ZERO_INTEGER;
        final SubLObject count_tail = property_list_member($COUNT, current);
        final SubLObject count = (NIL != count_tail) ? cadr(count_tail) : NIL;
        final SubLObject if_file_exists_tail = property_list_member(kbq_query_run.$IF_FILE_EXISTS, current);
        final SubLObject if_file_exists = (NIL != if_file_exists_tail) ? cadr(if_file_exists_tail) : $OVERWRITE;
        return list(kbq_query_run.RUN_KBQ_EXPERIMENT_INTERNAL, list(new SubLObject[]{ LIST, kbq_query_run.$QUERY_SPEC_SET, query_spec_set, $FILENAME, filename, $ANALYSIS_FILENAME, analysis_filename, $KEEPALIVE_FILENAME, keepalive_filename, $COMMENT, comment, kbq_query_run.$OVERRIDING_QUERY_PROPERTIES, overriding_query_properties, $METRICS, metrics, $OUTLIER_TIMEOUT, outlier_timeout, $INCREMENTAL, incremental, $INCLUDE_RESULTS, include_results, $RANDOMIZE, randomize, $SKIP, skip, $COUNT, count, kbq_query_run.$IF_FILE_EXISTS, if_file_exists }));
    }

    public static SubLObject last_query_set_run() {
        return kbq_query_run.$last_query_set_run$.getGlobalValue();
    }

    public static final SubLObject run_kbq_experiment_internal_alt(SubLObject experiment_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject datum = experiment_parameters;
                SubLObject current = datum;
                SubLObject query_spec_set_tail = property_list_member($QUERY_SPEC_SET, current);
                SubLObject query_spec_set = (NIL != query_spec_set_tail) ? ((SubLObject) (cadr(query_spec_set_tail))) : NIL;
                SubLObject filename_tail = property_list_member($FILENAME, current);
                SubLObject filename = (NIL != filename_tail) ? ((SubLObject) (cadr(filename_tail))) : NIL;
                SubLObject analysis_filename_tail = property_list_member($ANALYSIS_FILENAME, current);
                SubLObject analysis_filename = (NIL != analysis_filename_tail) ? ((SubLObject) (cadr(analysis_filename_tail))) : NIL;
                SubLObject keepalive_filename_tail = property_list_member($KEEPALIVE_FILENAME, current);
                SubLObject keepalive_filename = (NIL != keepalive_filename_tail) ? ((SubLObject) (cadr(keepalive_filename_tail))) : NIL;
                SubLObject comment_tail = property_list_member($COMMENT, current);
                SubLObject comment = (NIL != comment_tail) ? ((SubLObject) (cadr(comment_tail))) : NIL;
                SubLObject overriding_query_properties_tail = property_list_member($OVERRIDING_QUERY_PROPERTIES, current);
                SubLObject overriding_query_properties = (NIL != overriding_query_properties_tail) ? ((SubLObject) (cadr(overriding_query_properties_tail))) : NIL;
                SubLObject metrics_tail = property_list_member($METRICS, current);
                SubLObject metrics = (NIL != metrics_tail) ? ((SubLObject) (cadr(metrics_tail))) : inference_datastructures_enumerated_types.all_query_metrics();
                SubLObject outlier_timeout_tail = property_list_member($OUTLIER_TIMEOUT, current);
                SubLObject outlier_timeout = (NIL != outlier_timeout_tail) ? ((SubLObject) (cadr(outlier_timeout_tail))) : $kbq_default_outlier_timeout$.getGlobalValue();
                SubLObject randomize_tail = property_list_member($RANDOMIZE, current);
                SubLObject randomize = (NIL != randomize_tail) ? ((SubLObject) (cadr(randomize_tail))) : NIL;
                SubLObject skip_tail = property_list_member($SKIP, current);
                SubLObject skip = (NIL != skip_tail) ? ((SubLObject) (cadr(skip_tail))) : ZERO_INTEGER;
                SubLObject count_tail = property_list_member($COUNT, current);
                SubLObject count = (NIL != count_tail) ? ((SubLObject) (cadr(count_tail))) : NIL;
                SubLObject incremental_tail = property_list_member($INCREMENTAL, current);
                SubLObject incremental = (NIL != incremental_tail) ? ((SubLObject) (cadr(incremental_tail))) : T;
                SubLObject include_results_tail = property_list_member($INCLUDE_RESULTS, current);
                SubLObject include_results = (NIL != include_results_tail) ? ((SubLObject) (cadr(include_results_tail))) : T;
                SubLObject if_file_exists_tail = property_list_member($IF_FILE_EXISTS, current);
                SubLObject if_file_exists = (NIL != if_file_exists_tail) ? ((SubLObject) (cadr(if_file_exists_tail))) : $OVERWRITE;
                SubLTrampolineFile.checkType(if_file_exists, KBQ_IF_FILE_EXISTS_HANDLING_P);
                {
                    SubLObject query_set_run = NIL;
                    SubLObject time = NIL;
                    SubLObject tail_queries = NIL;
                    SubLObject file_mode = $OUTPUT;
                    SubLObject original_filename = filename;
                    SubLObject entire_query_set_runP = makeBoolean(NIL == file_utilities.file_existsP(original_filename));
                    if (NIL != filename) {
                        thread.resetMultipleValues();
                        {
                            SubLObject query_spec_set_28 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_setup_file_handling(query_spec_set, filename, if_file_exists);
                            SubLObject filename_29 = thread.secondMultipleValue();
                            SubLObject file_mode_30 = thread.thirdMultipleValue();
                            SubLObject tail_queries_31 = thread.fourthMultipleValue();
                            thread.resetMultipleValues();
                            query_spec_set = query_spec_set_28;
                            filename = filename_29;
                            file_mode = file_mode_30;
                            tail_queries = tail_queries_31;
                        }
                    }
                    if (NIL == $silent_progressP$.getDynamicValue(thread)) {
                        format(T, $str_alt192$__run_starting_at__A, numeric_date_utilities.timestring(UNPROVIDED));
                    }
                    {
                        SubLObject time_var = get_internal_real_time();
                        query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_run_query_set(query_spec_set, metrics, outlier_timeout, overriding_query_properties, include_results, comment, NIL != incremental ? ((SubLObject) (filename)) : NIL, skip, count, randomize, file_mode, tail_queries, keepalive_filename);
                        time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
                    }
                    if (NIL == $silent_progressP$.getDynamicValue(thread)) {
                        format(T, $str_alt193$__run_ended_at__A, numeric_date_utilities.timestring(UNPROVIDED));
                        format(T, $str_alt194$__elapsed_time____A, numeric_date_utilities.elapsed_seconds_string(truncate(time, UNPROVIDED)));
                    }
                    if (NIL == incremental) {
                        if (NIL != filename) {
                            com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_save_query_set_run(query_set_run, filename);
                        }
                    }
                    $last_query_set_run$.setGlobalValue(query_set_run);
                    if (NIL != analysis_filename) {
                        {
                            SubLObject analysis_query_set_run = (NIL != entire_query_set_runP) ? ((SubLObject) (query_set_run)) : com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_load_query_set_run_and_merge_reruns(original_filename);
                            com.cyc.cycjava.cycl.inference.kbq_query_run.print_kbq_experiment_analysis_to_file(analysis_filename, analysis_query_set_run, metrics);
                        }
                    }
                    return time;
                }
            }
        }
    }

    public static SubLObject run_kbq_experiment_internal(final SubLObject experiment_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject query_spec_set_tail = property_list_member(kbq_query_run.$QUERY_SPEC_SET, experiment_parameters);
        SubLObject query_spec_set = (NIL != query_spec_set_tail) ? cadr(query_spec_set_tail) : NIL;
        final SubLObject filename_tail = property_list_member($FILENAME, experiment_parameters);
        SubLObject filename = (NIL != filename_tail) ? cadr(filename_tail) : NIL;
        final SubLObject analysis_filename_tail = property_list_member($ANALYSIS_FILENAME, experiment_parameters);
        final SubLObject analysis_filename = (NIL != analysis_filename_tail) ? cadr(analysis_filename_tail) : NIL;
        final SubLObject keepalive_filename_tail = property_list_member($KEEPALIVE_FILENAME, experiment_parameters);
        final SubLObject keepalive_filename = (NIL != keepalive_filename_tail) ? cadr(keepalive_filename_tail) : NIL;
        final SubLObject comment_tail = property_list_member($COMMENT, experiment_parameters);
        final SubLObject comment = (NIL != comment_tail) ? cadr(comment_tail) : NIL;
        final SubLObject overriding_query_properties_tail = property_list_member(kbq_query_run.$OVERRIDING_QUERY_PROPERTIES, experiment_parameters);
        final SubLObject overriding_query_properties = (NIL != overriding_query_properties_tail) ? cadr(overriding_query_properties_tail) : NIL;
        final SubLObject metrics_tail = property_list_member($METRICS, experiment_parameters);
        final SubLObject metrics = (NIL != metrics_tail) ? cadr(metrics_tail) : all_query_metrics();
        final SubLObject outlier_timeout_tail = property_list_member($OUTLIER_TIMEOUT, experiment_parameters);
        final SubLObject outlier_timeout = (NIL != outlier_timeout_tail) ? cadr(outlier_timeout_tail) : kbq_query_run.$kbq_default_outlier_timeout$.getGlobalValue();
        final SubLObject randomize_tail = property_list_member($RANDOMIZE, experiment_parameters);
        final SubLObject randomize = (NIL != randomize_tail) ? cadr(randomize_tail) : NIL;
        final SubLObject skip_tail = property_list_member($SKIP, experiment_parameters);
        final SubLObject skip = (NIL != skip_tail) ? cadr(skip_tail) : ZERO_INTEGER;
        final SubLObject count_tail = property_list_member($COUNT, experiment_parameters);
        final SubLObject count = (NIL != count_tail) ? cadr(count_tail) : NIL;
        final SubLObject incremental_tail = property_list_member($INCREMENTAL, experiment_parameters);
        final SubLObject incremental = (NIL != incremental_tail) ? cadr(incremental_tail) : T;
        final SubLObject include_results_tail = property_list_member($INCLUDE_RESULTS, experiment_parameters);
        final SubLObject include_results = (NIL != include_results_tail) ? cadr(include_results_tail) : T;
        final SubLObject if_file_exists_tail = property_list_member(kbq_query_run.$IF_FILE_EXISTS, experiment_parameters);
        final SubLObject if_file_exists = (NIL != if_file_exists_tail) ? cadr(if_file_exists_tail) : $OVERWRITE;
        assert NIL != kbq_query_run.kbq_if_file_exists_handling_p(if_file_exists) : "! kbq_query_run.kbq_if_file_exists_handling_p(if_file_exists) " + ("kbq_query_run.kbq_if_file_exists_handling_p(if_file_exists) " + "CommonSymbols.NIL != kbq_query_run.kbq_if_file_exists_handling_p(if_file_exists) ") + if_file_exists;
        SubLObject query_set_run = NIL;
        SubLObject time = NIL;
        SubLObject tail_queries = NIL;
        SubLObject file_mode = $OUTPUT;
        final SubLObject original_filename = filename;
        final SubLObject entire_query_set_runP = makeBoolean(NIL == file_existsP(original_filename));
        if (NIL != filename) {
            thread.resetMultipleValues();
            final SubLObject query_spec_set_$47 = kbq_query_run.kbq_setup_file_handling(query_spec_set, filename, if_file_exists);
            final SubLObject filename_$48 = thread.secondMultipleValue();
            final SubLObject file_mode_$49 = thread.thirdMultipleValue();
            final SubLObject tail_queries_$50 = thread.fourthMultipleValue();
            thread.resetMultipleValues();
            query_spec_set = query_spec_set_$47;
            filename = filename_$48;
            file_mode = file_mode_$49;
            tail_queries = tail_queries_$50;
        }
        if (NIL == $silent_progressP$.getDynamicValue(thread)) {
            format(T, kbq_query_run.$str222$__run_starting_at__A, timestring(UNPROVIDED));
        }
        final SubLObject time_var = get_internal_real_time();
        query_set_run = kbq_query_run.kbq_run_query_set(query_spec_set, metrics, outlier_timeout, overriding_query_properties, include_results, comment, NIL != incremental ? filename : NIL, skip, count, randomize, file_mode, tail_queries, keepalive_filename);
        time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
        if (NIL == $silent_progressP$.getDynamicValue(thread)) {
            format(T, kbq_query_run.$str223$__run_ended_at__A, timestring(UNPROVIDED));
            format(T, kbq_query_run.$str224$__elapsed_time____A, elapsed_seconds_string(truncate(time, UNPROVIDED)));
        }
        if ((NIL == incremental) && (NIL != filename)) {
            kbq_query_run.kbq_save_query_set_run(query_set_run, filename);
        }
        kbq_query_run.$last_query_set_run$.setGlobalValue(query_set_run);
        if (NIL != analysis_filename) {
            final SubLObject analysis_query_set_run = (NIL != entire_query_set_runP) ? query_set_run : kbq_query_run.kbq_load_query_set_run_and_merge_reruns(original_filename);
            kbq_query_run.print_kbq_experiment_analysis_to_file(analysis_filename, analysis_query_set_run, metrics);
            kbq_query_run.print_experiment_csv_to_file(analysis_filename, analysis_query_set_run);
        }
        return time;
    }

    public static final SubLObject print_kbq_experiment_analysis_to_file_alt(SubLObject analysis_filename, SubLObject query_set_run, SubLObject metrics) {
        {
            SubLObject analysis = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_analyze_query_set_run(query_set_run, metrics);
            SubLObject stream = NIL;
            try {
                stream = compatibility.open_text(analysis_filename, $OUTPUT, NIL);
                if (!stream.isStream()) {
                    Errors.error($str_alt195$Unable_to_open__S, analysis_filename);
                }
                {
                    SubLObject s = stream;
                    list_utilities.pretty_print_plist(analysis, s);
                }
            } finally {
                {
                    SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
                    try {
                        bind($is_thread_performing_cleanupP$, T);
                        if (stream.isStream()) {
                            close(stream, UNPROVIDED);
                        }
                    } finally {
                        rebind($is_thread_performing_cleanupP$, _prev_bind_0);
                    }
                }
            }
        }
        return NIL;
    }

    public static SubLObject print_kbq_experiment_analysis_to_file(final SubLObject analysis_filename, final SubLObject query_set_run, final SubLObject metrics) {
        final SubLObject analysis = kbq_query_run.kbq_analyze_query_set_run(query_set_run, metrics);
        SubLObject stream = NIL;
        try {
            stream = compatibility.open_text(analysis_filename, $OUTPUT);
            if (!stream.isStream()) {
                Errors.error(kbq_query_run.$str225$Unable_to_open__S, analysis_filename);
            }
            final SubLObject s = stream;
            pretty_print_plist(analysis, s);
        } finally {
            final SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
            try {
                bind($is_thread_performing_cleanupP$, T);
                final SubLObject _values = getValuesAsVector();
                if (stream.isStream()) {
                    close(stream, UNPROVIDED);
                }
                restoreValuesFromVector(_values);
            } finally {
                rebind($is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return NIL;
    }

    public static final SubLObject kbq_erroring_queries_alt(SubLObject query_set_run) {
        {
            SubLObject queries = NIL;
            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
            SubLObject query_run = NIL;
            for (query_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run = cdolist_list_var.first()) {
                if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_erroring_query_runP(query_run)) {
                    queries = cons(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run), queries);
                }
            }
            return nreverse(queries);
        }
    }

    public static SubLObject kbq_erroring_queries(final SubLObject query_set_run) {
        SubLObject queries = NIL;
        SubLObject cdolist_list_var = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
        SubLObject query_run = NIL;
        query_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != kbq_query_run.kbq_erroring_query_runP(query_run)) {
                queries = cons(kbq_query_run.kbq_query_run_query(query_run), queries);
            }
            cdolist_list_var = cdolist_list_var.rest();
            query_run = cdolist_list_var.first();
        } 
        return nreverse(queries);
    }

    public static final SubLObject kbq_erroring_query_count_alt(SubLObject query_set_run) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_count_erroring_query_runs(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run));
    }

    public static SubLObject kbq_erroring_query_count(final SubLObject query_set_run) {
        return kbq_query_run.kbq_count_erroring_query_runs(kbq_query_run.kbq_query_set_run_query_runs(query_set_run));
    }

    public static final SubLObject kbq_count_erroring_query_runs_alt(SubLObject query_runs) {
        return count_if($sym196$KBQ_ERRORING_QUERY_RUN_, query_runs, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject kbq_count_erroring_query_runs(final SubLObject query_runs) {
        return count_if(kbq_query_run.$sym226$KBQ_ERRORING_QUERY_RUN_, query_runs, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject kbq_erroring_query_runP_alt(SubLObject query_run) {
        {
            SubLObject halt_reason = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_halt_reason(query_run);
            return inference_datastructures_enumerated_types.inference_error_suspend_status_p(halt_reason);
        }
    }

    public static SubLObject kbq_erroring_query_runP(final SubLObject query_run) {
        final SubLObject halt_reason = kbq_query_run.kbq_query_run_halt_reason(query_run);
        return inference_error_suspend_status_p(halt_reason);
    }

    public static final SubLObject kbq_if_file_exists_handling_p_alt(SubLObject v_object) {
        return list_utilities.member_eqP(v_object, $list_alt197);
    }

    public static SubLObject kbq_if_file_exists_handling_p(final SubLObject v_object) {
        return member_eqP(v_object, kbq_query_run.$list227);
    }

    /**
     *
     *
     * @return 0 the number of queries in QUERY-SPEC-SET not yet run.
     * @return 1 the number of erroring queries in QUERY-SPEC-SET.
     */
    @LispMethod(comment = "@return 0 the number of queries in QUERY-SPEC-SET not yet run.\r\n@return 1 the number of erroring queries in QUERY-SPEC-SET.")
    public static final SubLObject kbq_experiment_augmentability_status_alt(SubLObject query_spec_set, SubLObject filename) {
        {
            SubLObject old_query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_load_query_set_run(filename);
            SubLObject old_query_count = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_count(old_query_set_run);
            SubLObject query_count = length(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_spec_set_elements(query_spec_set, UNPROVIDED, UNPROVIDED));
            SubLObject not_yet_run_query_count = subtract(query_count, old_query_count);
            SubLObject erroring_query_count = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_erroring_query_count(old_query_set_run);
            return values(not_yet_run_query_count, erroring_query_count);
        }
    }

    /**
     *
     *
     * @return 0 the number of queries in QUERY-SPEC-SET not yet run.
     * @return 1 the number of erroring queries in QUERY-SPEC-SET.
     */
    @LispMethod(comment = "@return 0 the number of queries in QUERY-SPEC-SET not yet run.\r\n@return 1 the number of erroring queries in QUERY-SPEC-SET.")
    public static SubLObject kbq_experiment_augmentability_status(final SubLObject query_spec_set, final SubLObject filename) {
        final SubLObject old_query_set_run = kbq_query_run.kbq_load_query_set_run(filename);
        final SubLObject old_query_count = kbq_query_run.kbq_query_set_run_query_count(old_query_set_run);
        final SubLObject query_count = length(kbq_query_run.kbq_query_spec_set_elements(query_spec_set, UNPROVIDED, UNPROVIDED));
        final SubLObject not_yet_run_query_count = subtract(query_count, old_query_count);
        final SubLObject erroring_query_count = kbq_query_run.kbq_erroring_query_count(old_query_set_run);
        return values(not_yet_run_query_count, erroring_query_count);
    }

    public static final SubLObject kbq_setup_file_handling_alt(SubLObject query_spec_set, SubLObject filename, SubLObject if_file_exists) {
        SubLTrampolineFile.checkType(if_file_exists, KBQ_IF_FILE_EXISTS_HANDLING_P);
        if (NIL == Filesys.probe_file(filename)) {
            if_file_exists = $OVERWRITE;
        }
        {
            SubLObject pcase_var = if_file_exists;
            if (pcase_var.eql($OVERWRITE)) {
                return values(query_spec_set, filename, $OUTPUT, NIL);
            } else {
                if (pcase_var.eql($AUGMENT)) {
                    {
                        SubLObject queries_not_yet_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_queries_not_yet_run(query_spec_set, filename);
                        SubLObject possible_crash_query = queries_not_yet_run.first();
                        SubLObject rest_queries = queries_not_yet_run.rest();
                        return values(make_el_set(rest_queries, UNPROVIDED), filename, $APPEND, list(possible_crash_query));
                    }
                } else {
                    if (pcase_var.eql($RERUN_ERRORS)) {
                        {
                            SubLObject old_query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_load_query_set_run_and_merge_reruns(filename);
                            SubLObject queries_to_rerun = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_erroring_queries(old_query_set_run);
                            SubLObject filename_without_extension = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_strip_suffix_from_filename(filename);
                            SubLObject new_filename = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_compute_rerun_errors_filename(filename_without_extension);
                            return values(make_el_set(queries_to_rerun, UNPROVIDED), new_filename, $OUTPUT, NIL);
                        }
                    } else {
                        if (pcase_var.eql($AUGMENT_OR_RERUN_ERRORS)) {
                            {
                                SubLObject queries_not_yet_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_queries_not_yet_run(query_spec_set, filename);
                                if (NIL != queries_not_yet_run) {
                                    return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_setup_file_handling(query_spec_set, filename, $AUGMENT);
                                } else {
                                    return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_setup_file_handling(query_spec_set, filename, $RERUN_ERRORS);
                                }
                            }
                        } else {
                            return Errors.error($str_alt202$unexpected_if_file_exists__s, if_file_exists);
                        }
                    }
                }
            }
        }
    }

    public static SubLObject kbq_setup_file_handling(final SubLObject query_spec_set, final SubLObject filename, SubLObject if_file_exists) {
        assert NIL != kbq_query_run.kbq_if_file_exists_handling_p(if_file_exists) : "! kbq_query_run.kbq_if_file_exists_handling_p(if_file_exists) " + ("kbq_query_run.kbq_if_file_exists_handling_p(if_file_exists) " + "CommonSymbols.NIL != kbq_query_run.kbq_if_file_exists_handling_p(if_file_exists) ") + if_file_exists;
        if (NIL == Filesys.probe_file(filename)) {
            if_file_exists = $OVERWRITE;
        }
        final SubLObject pcase_var = if_file_exists;
        if (pcase_var.eql($OVERWRITE)) {
            return values(query_spec_set, filename, $OUTPUT, NIL);
        }
        if (pcase_var.eql($AUGMENT)) {
            final SubLObject queries_not_yet_run = kbq_query_run.kbq_queries_not_yet_run(query_spec_set, filename);
            final SubLObject possible_crash_query = queries_not_yet_run.first();
            final SubLObject rest_queries = queries_not_yet_run.rest();
            return values(make_el_set(rest_queries, UNPROVIDED), filename, $APPEND, list(possible_crash_query));
        }
        if (pcase_var.eql($RERUN_ERRORS)) {
            final SubLObject old_query_set_run = kbq_query_run.kbq_load_query_set_run_and_merge_reruns(filename);
            final SubLObject queries_to_rerun = kbq_query_run.kbq_erroring_queries(old_query_set_run);
            final SubLObject filename_without_extension = kbq_query_run.kbq_strip_suffix_from_filename(filename);
            final SubLObject new_filename = kbq_query_run.kbq_compute_rerun_errors_filename(filename_without_extension);
            return values(make_el_set(queries_to_rerun, UNPROVIDED), new_filename, $OUTPUT, NIL);
        }
        if (!pcase_var.eql(kbq_query_run.$AUGMENT_OR_RERUN_ERRORS)) {
            return Errors.error(kbq_query_run.$str232$unexpected_if_file_exists__s, if_file_exists);
        }
        final SubLObject queries_not_yet_run = kbq_query_run.kbq_queries_not_yet_run(query_spec_set, filename);
        if (NIL != queries_not_yet_run) {
            return kbq_query_run.kbq_setup_file_handling(query_spec_set, filename, $AUGMENT);
        }
        return kbq_query_run.kbq_setup_file_handling(query_spec_set, filename, $RERUN_ERRORS);
    }

    public static final SubLObject kbq_queries_not_yet_run_alt(SubLObject query_spec_set, SubLObject filename) {
        {
            SubLObject old_query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_load_query_set_run(filename);
            SubLObject old_queries = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_queries(old_query_set_run);
            SubLObject queries = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_spec_set_elements(query_spec_set, UNPROVIDED, UNPROVIDED);
            return kb_utilities.sort_terms(list_utilities.remove_if_not($sym82$KBQ_RUNNABLE_, list_utilities.fast_set_difference(queries, old_queries, symbol_function(EQUAL)), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
    }

    public static SubLObject kbq_queries_not_yet_run(final SubLObject query_spec_set, final SubLObject filename) {
        final SubLObject old_query_set_run = kbq_query_run.kbq_load_query_set_run(filename);
        final SubLObject old_queries = kbq_query_run.kbq_query_set_run_queries(old_query_set_run);
        final SubLObject queries = kbq_query_run.kbq_query_spec_set_elements(query_spec_set, UNPROVIDED, UNPROVIDED);
        return sort_terms(remove_if_not(kbq_query_run.$sym85$KBQ_RUNNABLE_, fast_set_difference(queries, old_queries, symbol_function(EQUAL)), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject kbq_compute_rerun_errors_filename_alt(SubLObject filename_without_extension) {
        {
            SubLObject i = ONE_INTEGER;
            SubLObject filename = NIL;
            while (NIL == filename) {
                {
                    SubLObject candidate_filename = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_candidate_rerun_errors_filename(filename_without_extension, i);
                    if (NIL != Filesys.probe_file(candidate_filename)) {
                        i = add(i, ONE_INTEGER);
                    } else {
                        filename = candidate_filename;
                    }
                }
            } 
            return filename;
        }
    }

    public static SubLObject kbq_compute_rerun_errors_filename(final SubLObject filename_without_extension) {
        SubLObject i = ONE_INTEGER;
        SubLObject filename = NIL;
        while (NIL == filename) {
            final SubLObject candidate_filename = kbq_query_run.kbq_candidate_rerun_errors_filename(filename_without_extension, i);
            if (NIL != Filesys.probe_file(candidate_filename)) {
                i = add(i, ONE_INTEGER);
            } else {
                filename = candidate_filename;
            }
        } 
        return filename;
    }

    public static final SubLObject kbq_candidate_rerun_errors_filename_alt(SubLObject filename_without_extension, SubLObject i) {
        {
            SubLObject i_str = string_utilities.str(i);
            SubLObject candidate_filename = cconcatenate(filename_without_extension, new SubLObject[]{ $str_alt203$_rerun_errors_, i_str, $query_set_run_file_extension$.getGlobalValue() });
            return candidate_filename;
        }
    }

    public static SubLObject kbq_candidate_rerun_errors_filename(final SubLObject filename_without_extension, final SubLObject i) {
        final SubLObject i_str = str(i);
        final SubLObject candidate_filename = cconcatenate(filename_without_extension, new SubLObject[]{ kbq_query_run.$str233$_rerun_errors_, i_str, kbq_query_run.$query_set_run_file_extension$.getGlobalValue() });
        return candidate_filename;
    }

    public static final SubLObject kbq_load_query_set_run_and_merge_reruns_alt(SubLObject filename) {
        {
            SubLObject query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_load_query_set_run(filename);
            SubLObject filename_without_extension = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_strip_suffix_from_filename(filename);
            SubLObject i = ONE_INTEGER;
            SubLObject doneP = NIL;
            while (NIL == doneP) {
                {
                    SubLObject rerun_filename = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_candidate_rerun_errors_filename(filename_without_extension, i);
                    if (NIL != Filesys.probe_file(rerun_filename)) {
                        {
                            SubLObject query_set_rerun = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_load_query_set_run(rerun_filename);
                            query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_merge_query_set_run_with_rerun(query_set_run, query_set_rerun);
                            i = add(i, ONE_INTEGER);
                        }
                    } else {
                        doneP = T;
                    }
                }
            } 
            return query_set_run;
        }
    }

    public static SubLObject kbq_load_query_set_run_and_merge_reruns(final SubLObject filename) {
        SubLObject query_set_run = kbq_query_run.kbq_load_query_set_run(filename);
        final SubLObject filename_without_extension = kbq_query_run.kbq_strip_suffix_from_filename(filename);
        SubLObject i = ONE_INTEGER;
        SubLObject doneP = NIL;
        while (NIL == doneP) {
            final SubLObject rerun_filename = kbq_query_run.kbq_candidate_rerun_errors_filename(filename_without_extension, i);
            if (NIL != Filesys.probe_file(rerun_filename)) {
                final SubLObject query_set_rerun = kbq_query_run.kbq_load_query_set_run(rerun_filename);
                query_set_run = kbq_query_run.kbq_merge_query_set_run_with_rerun(query_set_run, query_set_rerun);
                i = add(i, ONE_INTEGER);
            } else {
                doneP = T;
            }
        } 
        return query_set_run;
    }

    /**
     * Replaces each erroring query run in QUERY-SET-RUN with the corresponding query run in QUERY-SET-RERUN.
     */
    @LispMethod(comment = "Replaces each erroring query run in QUERY-SET-RUN with the corresponding query run in QUERY-SET-RERUN.")
    public static final SubLObject kbq_merge_query_set_run_with_rerun_alt(SubLObject query_set_run, SubLObject query_set_rerun) {
        {
            SubLObject query_runs = copy_list(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run));
            SubLObject cons = NIL;
            for (cons = query_runs; !cons.isAtom(); cons = cons.rest()) {
                {
                    SubLObject query_run = cons.first();
                    if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_erroring_query_runP(query_run)) {
                        {
                            SubLObject query = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run);
                            SubLObject query_rerun = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_lookup_query_run(query_set_rerun, query);
                            if (NIL != query_rerun) {
                                rplaca(cons, query_rerun);
                            }
                        }
                    }
                }
            }
            {
                SubLObject new_query_set_run = copy_list(query_set_run);
                new_query_set_run = putf(new_query_set_run, $QUERY_RUNS, query_runs);
                return new_query_set_run;
            }
        }
    }

    /**
     * Replaces each erroring query run in QUERY-SET-RUN with the corresponding query run in QUERY-SET-RERUN.
     */
    @LispMethod(comment = "Replaces each erroring query run in QUERY-SET-RUN with the corresponding query run in QUERY-SET-RERUN.")
    public static SubLObject kbq_merge_query_set_run_with_rerun(final SubLObject query_set_run, final SubLObject query_set_rerun) {
        final SubLObject query_runs = copy_list(kbq_query_run.kbq_query_set_run_query_runs(query_set_run));
        SubLObject cons;
        SubLObject query_run;
        SubLObject query;
        SubLObject query_rerun;
        for (cons = NIL, cons = query_runs; !cons.isAtom(); cons = cons.rest()) {
            query_run = cons.first();
            if (NIL != kbq_query_run.kbq_erroring_query_runP(query_run)) {
                query = kbq_query_run.kbq_query_run_query(query_run);
                query_rerun = kbq_query_run.kbq_lookup_query_run(query_set_rerun, query);
                if (NIL != query_rerun) {
                    rplaca(cons, query_rerun);
                }
            }
        }
        SubLObject new_query_set_run = copy_list(query_set_run);
        new_query_set_run = putf(new_query_set_run, $QUERY_RUNS, query_runs);
        return new_query_set_run;
    }

    /**
     *
     *
     * @param ANALYSIS-FILENAME
     * 		nil or stringp; if provided, the filename to which a
     * 		text analysis of the run will be written after its completion.
     * @param KEEPALIVE-FILENAME
     * 		nil or stringp; if provided, the filename that will be
     * 		updated with a keepalive message in between each query.
     */
    @LispMethod(comment = "@param ANALYSIS-FILENAME\r\n\t\tnil or stringp; if provided, the filename to which a\r\n\t\ttext analysis of the run will be written after its completion.\r\n@param KEEPALIVE-FILENAME\r\n\t\tnil or stringp; if provided, the filename that will be\r\n\t\tupdated with a keepalive message in between each query.")
    public static final SubLObject run_kct_experiment_alt(SubLObject macroform, SubLObject environment) {
        {
            SubLObject datum = macroform.rest();
            SubLObject current = datum;
            SubLObject allow_other_keys_p = NIL;
            SubLObject rest = current;
            SubLObject bad = NIL;
            SubLObject current_32 = NIL;
            for (; NIL != rest;) {
                destructuring_bind_must_consp(rest, datum, $list_alt204);
                current_32 = rest.first();
                rest = rest.rest();
                destructuring_bind_must_consp(rest, datum, $list_alt204);
                if (NIL == member(current_32, $list_alt205, UNPROVIDED, UNPROVIDED)) {
                    bad = T;
                }
                if (current_32 == $ALLOW_OTHER_KEYS) {
                    allow_other_keys_p = rest.first();
                }
                rest = rest.rest();
            }
            if ((NIL != bad) && (NIL == allow_other_keys_p)) {
                cdestructuring_bind_error(datum, $list_alt204);
            }
            {
                SubLObject test_spec_set_tail = property_list_member($TEST_SPEC_SET, current);
                SubLObject test_spec_set = (NIL != test_spec_set_tail) ? ((SubLObject) (cadr(test_spec_set_tail))) : NIL;
                SubLObject filename_tail = property_list_member($FILENAME, current);
                SubLObject filename = (NIL != filename_tail) ? ((SubLObject) (cadr(filename_tail))) : NIL;
                SubLObject analysis_filename_tail = property_list_member($ANALYSIS_FILENAME, current);
                SubLObject analysis_filename = (NIL != analysis_filename_tail) ? ((SubLObject) (cadr(analysis_filename_tail))) : NIL;
                SubLObject keepalive_filename_tail = property_list_member($KEEPALIVE_FILENAME, current);
                SubLObject keepalive_filename = (NIL != keepalive_filename_tail) ? ((SubLObject) (cadr(keepalive_filename_tail))) : NIL;
                SubLObject comment_tail = property_list_member($COMMENT, current);
                SubLObject comment = (NIL != comment_tail) ? ((SubLObject) (cadr(comment_tail))) : NIL;
                SubLObject overriding_query_properties_tail = property_list_member($OVERRIDING_QUERY_PROPERTIES, current);
                SubLObject overriding_query_properties = (NIL != overriding_query_properties_tail) ? ((SubLObject) (cadr(overriding_query_properties_tail))) : NIL;
                SubLObject overriding_metrics_tail = property_list_member($OVERRIDING_METRICS, current);
                SubLObject overriding_metrics = (NIL != overriding_metrics_tail) ? ((SubLObject) (cadr(overriding_metrics_tail))) : $list_alt178;
                SubLObject outlier_timeout_tail = property_list_member($OUTLIER_TIMEOUT, current);
                SubLObject outlier_timeout = (NIL != outlier_timeout_tail) ? ((SubLObject) (cadr(outlier_timeout_tail))) : $kbq_outlier_timeout$;
                SubLObject incremental_tail = property_list_member($INCREMENTAL, current);
                SubLObject incremental = (NIL != incremental_tail) ? ((SubLObject) (cadr(incremental_tail))) : NIL;
                SubLObject include_results_tail = property_list_member($INCLUDE_RESULTS, current);
                SubLObject include_results = (NIL != include_results_tail) ? ((SubLObject) (cadr(include_results_tail))) : T;
                SubLObject if_file_exists_tail = property_list_member($IF_FILE_EXISTS, current);
                SubLObject if_file_exists = (NIL != if_file_exists_tail) ? ((SubLObject) (cadr(if_file_exists_tail))) : $OVERWRITE;
                SubLObject expose_runstate_tail = property_list_member($EXPOSE_RUNSTATE, current);
                SubLObject expose_runstate = (NIL != expose_runstate_tail) ? ((SubLObject) (cadr(expose_runstate_tail))) : NIL;
                SubLObject randomize_tail = property_list_member($RANDOMIZE, current);
                SubLObject randomize = (NIL != randomize_tail) ? ((SubLObject) (cadr(randomize_tail))) : NIL;
                SubLObject skip_tail = property_list_member($SKIP, current);
                SubLObject skip = (NIL != skip_tail) ? ((SubLObject) (cadr(skip_tail))) : ZERO_INTEGER;
                SubLObject count_tail = property_list_member($COUNT, current);
                SubLObject count = (NIL != count_tail) ? ((SubLObject) (cadr(count_tail))) : NIL;
                return list(RUN_KCT_EXPERIMENT_INTERNAL, list(new SubLObject[]{ LIST, $TEST_SPEC_SET, test_spec_set, $FILENAME, filename, $ANALYSIS_FILENAME, analysis_filename, $KEEPALIVE_FILENAME, keepalive_filename, $COMMENT, comment, $OVERRIDING_QUERY_PROPERTIES, overriding_query_properties, $OVERRIDING_METRICS, overriding_metrics, $OUTLIER_TIMEOUT, outlier_timeout, $INCREMENTAL, incremental, $INCLUDE_RESULTS, include_results, $IF_FILE_EXISTS, if_file_exists, $EXPOSE_RUNSTATE, expose_runstate, $RANDOMIZE, randomize, $SKIP, skip, $COUNT, count }));
            }
        }
    }

    /**
     *
     *
     * @param ANALYSIS-FILENAME
     * 		nil or stringp; if provided, the filename to which a
     * 		text analysis of the run will be written after its completion.
     * @param KEEPALIVE-FILENAME
     * 		nil or stringp; if provided, the filename that will be
     * 		updated with a keepalive message in between each query.
     */
    @LispMethod(comment = "@param ANALYSIS-FILENAME\r\n\t\tnil or stringp; if provided, the filename to which a\r\n\t\ttext analysis of the run will be written after its completion.\r\n@param KEEPALIVE-FILENAME\r\n\t\tnil or stringp; if provided, the filename that will be\r\n\t\tupdated with a keepalive message in between each query.")
    public static SubLObject run_kct_experiment(final SubLObject macroform, final SubLObject environment) {
        final SubLObject current;
        final SubLObject datum = current = macroform.rest();
        SubLObject allow_other_keys_p = NIL;
        SubLObject rest = current;
        SubLObject bad = NIL;
        SubLObject current_$51 = NIL;
        while (NIL != rest) {
            destructuring_bind_must_consp(rest, datum, kbq_query_run.$list234);
            current_$51 = rest.first();
            rest = rest.rest();
            destructuring_bind_must_consp(rest, datum, kbq_query_run.$list234);
            if (NIL == member(current_$51, kbq_query_run.$list235, UNPROVIDED, UNPROVIDED)) {
                bad = T;
            }
            if (current_$51 == kbq_query_run.$ALLOW_OTHER_KEYS) {
                allow_other_keys_p = rest.first();
            }
            rest = rest.rest();
        } 
        if ((NIL != bad) && (NIL == allow_other_keys_p)) {
            cdestructuring_bind_error(datum, kbq_query_run.$list234);
        }
        final SubLObject test_spec_set_tail = property_list_member(kbq_query_run.$TEST_SPEC_SET, current);
        final SubLObject test_spec_set = (NIL != test_spec_set_tail) ? cadr(test_spec_set_tail) : NIL;
        final SubLObject filename_tail = property_list_member($FILENAME, current);
        final SubLObject filename = (NIL != filename_tail) ? cadr(filename_tail) : NIL;
        final SubLObject analysis_filename_tail = property_list_member($ANALYSIS_FILENAME, current);
        final SubLObject analysis_filename = (NIL != analysis_filename_tail) ? cadr(analysis_filename_tail) : NIL;
        final SubLObject keepalive_filename_tail = property_list_member($KEEPALIVE_FILENAME, current);
        final SubLObject keepalive_filename = (NIL != keepalive_filename_tail) ? cadr(keepalive_filename_tail) : NIL;
        final SubLObject comment_tail = property_list_member($COMMENT, current);
        final SubLObject comment = (NIL != comment_tail) ? cadr(comment_tail) : NIL;
        final SubLObject overriding_query_properties_tail = property_list_member(kbq_query_run.$OVERRIDING_QUERY_PROPERTIES, current);
        final SubLObject overriding_query_properties = (NIL != overriding_query_properties_tail) ? cadr(overriding_query_properties_tail) : NIL;
        final SubLObject overriding_metrics_tail = property_list_member($OVERRIDING_METRICS, current);
        final SubLObject overriding_metrics = (NIL != overriding_metrics_tail) ? cadr(overriding_metrics_tail) : kbq_query_run.$list208;
        final SubLObject outlier_timeout_tail = property_list_member($OUTLIER_TIMEOUT, current);
        final SubLObject outlier_timeout = (NIL != outlier_timeout_tail) ? cadr(outlier_timeout_tail) : kbq_query_run.$kbq_outlier_timeout$;
        final SubLObject incremental_tail = property_list_member($INCREMENTAL, current);
        final SubLObject incremental = (NIL != incremental_tail) ? cadr(incremental_tail) : NIL;
        final SubLObject include_results_tail = property_list_member($INCLUDE_RESULTS, current);
        final SubLObject include_results = (NIL != include_results_tail) ? cadr(include_results_tail) : T;
        final SubLObject if_file_exists_tail = property_list_member(kbq_query_run.$IF_FILE_EXISTS, current);
        final SubLObject if_file_exists = (NIL != if_file_exists_tail) ? cadr(if_file_exists_tail) : $OVERWRITE;
        final SubLObject expose_runstate_tail = property_list_member($EXPOSE_RUNSTATE, current);
        final SubLObject expose_runstate = (NIL != expose_runstate_tail) ? cadr(expose_runstate_tail) : NIL;
        final SubLObject randomize_tail = property_list_member($RANDOMIZE, current);
        final SubLObject randomize = (NIL != randomize_tail) ? cadr(randomize_tail) : NIL;
        final SubLObject skip_tail = property_list_member($SKIP, current);
        final SubLObject skip = (NIL != skip_tail) ? cadr(skip_tail) : ZERO_INTEGER;
        final SubLObject count_tail = property_list_member($COUNT, current);
        final SubLObject count = (NIL != count_tail) ? cadr(count_tail) : NIL;
        return list(kbq_query_run.RUN_KCT_EXPERIMENT_INTERNAL, list(new SubLObject[]{ LIST, kbq_query_run.$TEST_SPEC_SET, test_spec_set, $FILENAME, filename, $ANALYSIS_FILENAME, analysis_filename, $KEEPALIVE_FILENAME, keepalive_filename, $COMMENT, comment, kbq_query_run.$OVERRIDING_QUERY_PROPERTIES, overriding_query_properties, $OVERRIDING_METRICS, overriding_metrics, $OUTLIER_TIMEOUT, outlier_timeout, $INCREMENTAL, incremental, $INCLUDE_RESULTS, include_results, kbq_query_run.$IF_FILE_EXISTS, if_file_exists, $EXPOSE_RUNSTATE, expose_runstate, $RANDOMIZE, randomize, $SKIP, skip, $COUNT, count }));
    }

    public static final SubLObject run_kct_experiment_internal_alt(SubLObject experiment_parameters) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject datum = experiment_parameters;
                SubLObject current = datum;
                SubLObject test_spec_set_tail = property_list_member($TEST_SPEC_SET, current);
                SubLObject test_spec_set = (NIL != test_spec_set_tail) ? ((SubLObject) (cadr(test_spec_set_tail))) : NIL;
                SubLObject filename_tail = property_list_member($FILENAME, current);
                SubLObject filename = (NIL != filename_tail) ? ((SubLObject) (cadr(filename_tail))) : NIL;
                SubLObject analysis_filename_tail = property_list_member($ANALYSIS_FILENAME, current);
                SubLObject analysis_filename = (NIL != analysis_filename_tail) ? ((SubLObject) (cadr(analysis_filename_tail))) : NIL;
                SubLObject keepalive_filename_tail = property_list_member($KEEPALIVE_FILENAME, current);
                SubLObject keepalive_filename = (NIL != keepalive_filename_tail) ? ((SubLObject) (cadr(keepalive_filename_tail))) : NIL;
                SubLObject comment_tail = property_list_member($COMMENT, current);
                SubLObject comment = (NIL != comment_tail) ? ((SubLObject) (cadr(comment_tail))) : NIL;
                SubLObject overriding_query_properties_tail = property_list_member($OVERRIDING_QUERY_PROPERTIES, current);
                SubLObject overriding_query_properties = (NIL != overriding_query_properties_tail) ? ((SubLObject) (cadr(overriding_query_properties_tail))) : NIL;
                SubLObject overriding_metrics_tail = property_list_member($OVERRIDING_METRICS, current);
                SubLObject overriding_metrics = (NIL != overriding_metrics_tail) ? ((SubLObject) (cadr(overriding_metrics_tail))) : inference_datastructures_enumerated_types.all_arete_query_metrics();
                SubLObject outlier_timeout_tail = property_list_member($OUTLIER_TIMEOUT, current);
                SubLObject outlier_timeout = (NIL != outlier_timeout_tail) ? ((SubLObject) (cadr(outlier_timeout_tail))) : $kbq_outlier_timeout$.getDynamicValue(thread);
                SubLObject randomize_tail = property_list_member($RANDOMIZE, current);
                SubLObject randomize = (NIL != randomize_tail) ? ((SubLObject) (cadr(randomize_tail))) : NIL;
                SubLObject skip_tail = property_list_member($SKIP, current);
                SubLObject skip = (NIL != skip_tail) ? ((SubLObject) (cadr(skip_tail))) : ZERO_INTEGER;
                SubLObject count_tail = property_list_member($COUNT, current);
                SubLObject count = (NIL != count_tail) ? ((SubLObject) (cadr(count_tail))) : NIL;
                SubLObject incremental_tail = property_list_member($INCREMENTAL, current);
                SubLObject incremental = (NIL != incremental_tail) ? ((SubLObject) (cadr(incremental_tail))) : T;
                SubLObject include_results_tail = property_list_member($INCLUDE_RESULTS, current);
                SubLObject include_results = (NIL != include_results_tail) ? ((SubLObject) (cadr(include_results_tail))) : T;
                SubLObject if_file_exists_tail = property_list_member($IF_FILE_EXISTS, current);
                SubLObject if_file_exists = (NIL != if_file_exists_tail) ? ((SubLObject) (cadr(if_file_exists_tail))) : $OVERWRITE;
                SubLObject expose_runstate_tail = property_list_member($EXPOSE_RUNSTATE, current);
                SubLObject expose_runstate = (NIL != expose_runstate_tail) ? ((SubLObject) (cadr(expose_runstate_tail))) : NIL;
                SubLTrampolineFile.checkType(if_file_exists, KBQ_IF_FILE_EXISTS_HANDLING_P);
                {
                    SubLObject test_set_run = NIL;
                    SubLObject time = NIL;
                    SubLObject tail_tests = NIL;
                    SubLObject file_mode = $OUTPUT;
                    SubLObject original_filename = filename;
                    SubLObject entire_test_set_runP = makeBoolean(NIL == file_utilities.file_existsP(original_filename));
                    if (NIL != filename) {
                        thread.resetMultipleValues();
                        {
                            SubLObject test_spec_set_33 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_setup_file_handling(test_spec_set, filename, if_file_exists);
                            SubLObject filename_34 = thread.secondMultipleValue();
                            SubLObject file_mode_35 = thread.thirdMultipleValue();
                            SubLObject tail_tests_36 = thread.fourthMultipleValue();
                            thread.resetMultipleValues();
                            test_spec_set = test_spec_set_33;
                            filename = filename_34;
                            file_mode = file_mode_35;
                            tail_tests = tail_tests_36;
                        }
                    }
                    if (NIL == $silent_progressP$.getDynamicValue(thread)) {
                        format(T, $str_alt192$__run_starting_at__A, numeric_date_utilities.timestring(UNPROVIDED));
                    }
                    {
                        SubLObject time_var = get_internal_real_time();
                        test_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_run_test_set(test_spec_set, overriding_metrics, outlier_timeout, overriding_query_properties, include_results, comment, NIL != incremental ? ((SubLObject) (filename)) : NIL, expose_runstate, skip, count, randomize, file_mode, tail_tests, keepalive_filename);
                        time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
                    }
                    if (NIL == $silent_progressP$.getDynamicValue(thread)) {
                        format(T, $str_alt193$__run_ended_at__A, numeric_date_utilities.timestring(UNPROVIDED));
                        format(T, $str_alt194$__elapsed_time____A, numeric_date_utilities.elapsed_seconds_string(truncate(time, UNPROVIDED)));
                    }
                    if (NIL == incremental) {
                        if (NIL != filename) {
                            com.cyc.cycjava.cycl.inference.kbq_query_run.kct_save_test_set_run(test_set_run, filename);
                        }
                    }
                    $last_test_set_run$.setGlobalValue(test_set_run);
                    if (NIL != analysis_filename) {
                        {
                            SubLObject analysis_test_set_run = (NIL != entire_test_set_runP) ? ((SubLObject) (test_set_run)) : com.cyc.cycjava.cycl.inference.kbq_query_run.kct_load_test_set_run_and_merge_reruns(original_filename);
                            com.cyc.cycjava.cycl.inference.kbq_query_run.print_kct_experiment_analysis_to_file(analysis_filename, analysis_test_set_run, overriding_metrics);
                        }
                    }
                    return time;
                }
            }
        }
    }

    public static SubLObject run_kct_experiment_internal(final SubLObject experiment_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject test_spec_set_tail = property_list_member(kbq_query_run.$TEST_SPEC_SET, experiment_parameters);
        SubLObject test_spec_set = (NIL != test_spec_set_tail) ? cadr(test_spec_set_tail) : NIL;
        final SubLObject filename_tail = property_list_member($FILENAME, experiment_parameters);
        SubLObject filename = (NIL != filename_tail) ? cadr(filename_tail) : NIL;
        final SubLObject analysis_filename_tail = property_list_member($ANALYSIS_FILENAME, experiment_parameters);
        final SubLObject analysis_filename = (NIL != analysis_filename_tail) ? cadr(analysis_filename_tail) : NIL;
        final SubLObject keepalive_filename_tail = property_list_member($KEEPALIVE_FILENAME, experiment_parameters);
        final SubLObject keepalive_filename = (NIL != keepalive_filename_tail) ? cadr(keepalive_filename_tail) : NIL;
        final SubLObject comment_tail = property_list_member($COMMENT, experiment_parameters);
        final SubLObject comment = (NIL != comment_tail) ? cadr(comment_tail) : NIL;
        final SubLObject overriding_query_properties_tail = property_list_member(kbq_query_run.$OVERRIDING_QUERY_PROPERTIES, experiment_parameters);
        final SubLObject overriding_query_properties = (NIL != overriding_query_properties_tail) ? cadr(overriding_query_properties_tail) : NIL;
        final SubLObject overriding_metrics_tail = property_list_member($OVERRIDING_METRICS, experiment_parameters);
        final SubLObject overriding_metrics = (NIL != overriding_metrics_tail) ? cadr(overriding_metrics_tail) : all_arete_query_metrics();
        final SubLObject outlier_timeout_tail = property_list_member($OUTLIER_TIMEOUT, experiment_parameters);
        final SubLObject outlier_timeout = (NIL != outlier_timeout_tail) ? cadr(outlier_timeout_tail) : kbq_query_run.$kbq_outlier_timeout$.getDynamicValue(thread);
        final SubLObject randomize_tail = property_list_member($RANDOMIZE, experiment_parameters);
        final SubLObject randomize = (NIL != randomize_tail) ? cadr(randomize_tail) : NIL;
        final SubLObject skip_tail = property_list_member($SKIP, experiment_parameters);
        final SubLObject skip = (NIL != skip_tail) ? cadr(skip_tail) : ZERO_INTEGER;
        final SubLObject count_tail = property_list_member($COUNT, experiment_parameters);
        final SubLObject count = (NIL != count_tail) ? cadr(count_tail) : NIL;
        final SubLObject incremental_tail = property_list_member($INCREMENTAL, experiment_parameters);
        final SubLObject incremental = (NIL != incremental_tail) ? cadr(incremental_tail) : T;
        final SubLObject include_results_tail = property_list_member($INCLUDE_RESULTS, experiment_parameters);
        final SubLObject include_results = (NIL != include_results_tail) ? cadr(include_results_tail) : T;
        final SubLObject if_file_exists_tail = property_list_member(kbq_query_run.$IF_FILE_EXISTS, experiment_parameters);
        final SubLObject if_file_exists = (NIL != if_file_exists_tail) ? cadr(if_file_exists_tail) : $OVERWRITE;
        final SubLObject expose_runstate_tail = property_list_member($EXPOSE_RUNSTATE, experiment_parameters);
        final SubLObject expose_runstate = (NIL != expose_runstate_tail) ? cadr(expose_runstate_tail) : NIL;
        assert NIL != kbq_query_run.kbq_if_file_exists_handling_p(if_file_exists) : "! kbq_query_run.kbq_if_file_exists_handling_p(if_file_exists) " + ("kbq_query_run.kbq_if_file_exists_handling_p(if_file_exists) " + "CommonSymbols.NIL != kbq_query_run.kbq_if_file_exists_handling_p(if_file_exists) ") + if_file_exists;
        SubLObject test_set_run = NIL;
        SubLObject time = NIL;
        SubLObject tail_tests = NIL;
        SubLObject file_mode = $OUTPUT;
        final SubLObject original_filename = filename;
        final SubLObject entire_test_set_runP = makeBoolean(NIL == file_existsP(original_filename));
        if (NIL != filename) {
            thread.resetMultipleValues();
            final SubLObject test_spec_set_$52 = kbq_query_run.kct_setup_file_handling(test_spec_set, filename, if_file_exists);
            final SubLObject filename_$53 = thread.secondMultipleValue();
            final SubLObject file_mode_$54 = thread.thirdMultipleValue();
            final SubLObject tail_tests_$55 = thread.fourthMultipleValue();
            thread.resetMultipleValues();
            test_spec_set = test_spec_set_$52;
            filename = filename_$53;
            file_mode = file_mode_$54;
            tail_tests = tail_tests_$55;
        }
        if (NIL == $silent_progressP$.getDynamicValue(thread)) {
            format(T, kbq_query_run.$str222$__run_starting_at__A, timestring(UNPROVIDED));
        }
        final SubLObject time_var = get_internal_real_time();
        test_set_run = kbq_query_run.kct_run_test_set(test_spec_set, overriding_metrics, outlier_timeout, overriding_query_properties, include_results, comment, NIL != incremental ? filename : NIL, expose_runstate, skip, count, randomize, file_mode, tail_tests, keepalive_filename);
        time = divide(subtract(get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
        if (NIL == $silent_progressP$.getDynamicValue(thread)) {
            format(T, kbq_query_run.$str223$__run_ended_at__A, timestring(UNPROVIDED));
            format(T, kbq_query_run.$str224$__elapsed_time____A, elapsed_seconds_string(truncate(time, UNPROVIDED)));
        }
        if ((NIL == incremental) && (NIL != filename)) {
            kbq_query_run.kct_save_test_set_run(test_set_run, filename);
        }
        kbq_query_run.$last_test_set_run$.setGlobalValue(test_set_run);
        if (NIL != analysis_filename) {
            final SubLObject analysis_test_set_run = (NIL != entire_test_set_runP) ? test_set_run : kbq_query_run.kct_load_test_set_run_and_merge_reruns(original_filename);
            kbq_query_run.print_kct_experiment_analysis_to_file(analysis_filename, analysis_test_set_run, overriding_metrics, test_spec_set);
            kbq_query_run.print_experiment_csv_to_file(analysis_filename, analysis_test_set_run);
        }
        return time;
    }

    public static final SubLObject print_kct_experiment_analysis_to_file(SubLObject analysis_filename, SubLObject test_set_run, SubLObject metrics) {
        {
            SubLObject analysis = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_analyze_test_set_run(test_set_run, metrics);
            SubLObject regression_test_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_filter_test_set_run_by_test(test_set_run, $str_alt213$Filtered_to___KBContentRegression, $sym214$KB_CONTENT_REGRESSION_TEST_, KCT_TEST_RUN_TEST);
            SubLObject regression_tests_analysis = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_analyze_test_set_run(regression_test_set_run, metrics);
            SubLObject stream = NIL;
            try {
                stream = compatibility.open_text(analysis_filename, $OUTPUT, NIL);
                if (!stream.isStream()) {
                    Errors.error($str_alt195$Unable_to_open__S, analysis_filename);
                }
                {
                    SubLObject s = stream;
                    format(s, $str_alt215$All_tests___);
                    list_utilities.pretty_print_plist(analysis, s);
                    format(s, $str_alt216$__Just_the_regression_tests___);
                    list_utilities.pretty_print_plist(regression_tests_analysis, s);
                }
            } finally {
                {
                    SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
                    try {
                        bind($is_thread_performing_cleanupP$, T);
                        if (stream.isStream()) {
                            close(stream, UNPROVIDED);
                        }
                    } finally {
                        rebind($is_thread_performing_cleanupP$, _prev_bind_0);
                    }
                }
            }
        }
        return NIL;
    }

    public static SubLObject print_kct_experiment_analysis_to_file(final SubLObject analysis_filename, final SubLObject test_set_run, final SubLObject metrics, final SubLObject test_spec_set) {
        final SubLObject analysis = kbq_query_run.kct_analyze_test_set_run(test_set_run, metrics);
        final SubLObject regression_tests_uninterestingP = makeBoolean((NIL != every_in_list(kbq_query_run.$sym243$KB_CONTENT_REGRESSION_TEST_, kbq_query_run.kct_test_set_run_test_runs(test_set_run), kbq_query_run.KCT_TEST_RUN_TEST)) || (NIL == any_in_list(kbq_query_run.$sym243$KB_CONTENT_REGRESSION_TEST_, kbq_query_run.kct_test_set_run_test_runs(test_set_run), kbq_query_run.KCT_TEST_RUN_TEST)));
        final SubLObject regression_test_set_run = (NIL != regression_tests_uninterestingP) ? NIL : kbq_query_run.kct_filter_test_set_run_by_test(test_set_run, kbq_query_run.$str244$Filtered_to___KBContentRegression, kbq_query_run.$sym243$KB_CONTENT_REGRESSION_TEST_, kbq_query_run.KCT_TEST_RUN_TEST);
        final SubLObject regression_tests_analysis = (NIL != regression_tests_uninterestingP) ? NIL : kbq_query_run.kct_analyze_test_set_run(regression_test_set_run, metrics);
        final SubLObject failing_tests = kbq_query_run.kct_test_set_run_tests(kbq_query_run.kct_failing_test_set_run(test_set_run));
        final SubLObject failing_regression_tests = (NIL != regression_tests_uninterestingP) ? NIL : kbq_query_run.kct_test_set_run_tests(kbq_query_run.kct_failing_test_set_run(regression_test_set_run));
        final SubLObject test_specs = kbq_query_run.kct_test_spec_set_elements(test_spec_set, UNPROVIDED, UNPROVIDED);
        final SubLObject unrunnable_tests = fast_set_difference(test_specs, kbq_query_run.kct_test_set_run_tests(test_set_run), UNPROVIDED);
        SubLObject stream = NIL;
        try {
            stream = compatibility.open_text(analysis_filename, $OUTPUT);
            if (!stream.isStream()) {
                Errors.error(kbq_query_run.$str225$Unable_to_open__S, analysis_filename);
            }
            final SubLObject s = stream;
            format(s, kbq_query_run.$str245$All_tests___);
            pretty_print_plist(analysis, s);
            if (NIL == regression_tests_uninterestingP) {
                format(s, kbq_query_run.$str246$__Just_the_regression_tests___);
                pretty_print_plist(regression_tests_analysis, s);
            }
            if (NIL != lengthLE(failing_tests, kbq_query_run.$int$212, UNPROVIDED)) {
                format(s, kbq_query_run.$str248$__Failing_tests_);
                print_one_per_line(failing_tests, s);
            }
            if ((NIL == regression_tests_uninterestingP) && (NIL != lengthLE(failing_regression_tests, kbq_query_run.$int$212, UNPROVIDED))) {
                format(s, kbq_query_run.$str249$____Failing_regression_tests___a_, length(failing_regression_tests));
                print_one_per_line(failing_regression_tests, s);
            }
            if (NIL != unrunnable_tests) {
                format(s, kbq_query_run.$str250$____Unrunnable_tests_);
                SubLObject cdolist_list_var = unrunnable_tests;
                SubLObject test = NIL;
                test = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    final SubLObject explanation = nth_value_step_2(nth_value_step_1(ONE_INTEGER), kct_utils.why_not_kct_test_valid(test));
                    if (NIL != non_empty_string_p(explanation)) {
                        format(s, kbq_query_run.$str251$_a, explanation);
                    } else {
                        format(s, kbq_query_run.$str252$___a_is_unrunnable_for_an_unknown, test);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    test = cdolist_list_var.first();
                } 
            }
            terpri(s);
        } finally {
            final SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
            try {
                bind($is_thread_performing_cleanupP$, T);
                final SubLObject _values = getValuesAsVector();
                if (stream.isStream()) {
                    close(stream, UNPROVIDED);
                }
                restoreValuesFromVector(_values);
            } finally {
                rebind($is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return NIL;
    }

    public static SubLObject print_experiment_csv_to_file(final SubLObject analysis_filename, final SubLObject test_or_query_set_run) {
        final SubLObject csv_name = cconcatenate(analysis_filename, kbq_query_run.$str253$_csv);
        SubLObject stream = NIL;
        try {
            stream = compatibility.open_text(csv_name, $OUTPUT);
            if (!stream.isStream()) {
                Errors.error(kbq_query_run.$str225$Unable_to_open__S, csv_name);
            }
            final SubLObject csv = stream;
            format(T, kbq_query_run.$str254$__Writing_csv_to___A__, cconcatenate(analysis_filename, kbq_query_run.$str253$_csv));
            final SubLObject tests = append(plist_lookup(test_or_query_set_run, $TEST_RUNS, UNPROVIDED), plist_lookup(test_or_query_set_run, $QUERY_RUNS, UNPROVIDED));
            format(csv, kbq_query_run.$str255$Comment___A__, plist_lookup(test_or_query_set_run, $COMMENT, UNPROVIDED));
            format(csv, kbq_query_run.$str256$Date___A__, plist_lookup(test_or_query_set_run, $DATE, UNPROVIDED));
            SubLObject cdolist_list_var = tests;
            SubLObject atest = NIL;
            atest = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                final SubLObject qrun = plist_lookup(atest, $QUERY_RUN, UNPROVIDED);
                format(csv, kbq_query_run.$str257$_A__A__A__A__A__A__A___, new SubLObject[]{ plist_lookup(atest, $TEST, UNPROVIDED), plist_lookup(atest, $STATUS, UNPROVIDED), plist_lookup(atest, $STATUS, UNPROVIDED).equalp($SUCCESS) ? plist_lookup(qrun, $HALT_REASON, UNPROVIDED) : kbq_query_run.$str161$, plist_lookup(atest, $STATUS, UNPROVIDED).equalp($SUCCESS) && (!plist_lookup(qrun, $HALT_REASON, UNPROVIDED).isList()) ? plist_lookup(qrun, $HALT_REASON, UNPROVIDED) : kbq_query_run.$str161$, plist_lookup(qrun, $ANSWER_COUNT, UNPROVIDED), plist_lookup(qrun, kbq_query_run.$TIME_TO_FIRST_ANSWER, UNPROVIDED), plist_lookup(qrun, kbq_query_run.$TIME_TO_LAST_ANSWER, UNPROVIDED), plist_lookup(qrun, $TOTAL_TIME, UNPROVIDED) });
                cdolist_list_var = cdolist_list_var.rest();
                atest = cdolist_list_var.first();
            } 
        } finally {
            final SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
            try {
                bind($is_thread_performing_cleanupP$, T);
                final SubLObject _values = getValuesAsVector();
                if (stream.isStream()) {
                    close(stream, UNPROVIDED);
                }
                restoreValuesFromVector(_values);
            } finally {
                rebind($is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return NIL;
    }

    public static final SubLObject kct_erroring_tests_alt(SubLObject test_set_run) {
        {
            SubLObject tests = NIL;
            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_test_runs(test_set_run);
            SubLObject test_run = NIL;
            for (test_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , test_run = cdolist_list_var.first()) {
                if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_erroring_test_runP(test_run)) {
                    tests = cons(com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_test(test_run), tests);
                }
            }
            return nreverse(tests);
        }
    }

    public static SubLObject kct_erroring_tests(final SubLObject test_set_run) {
        SubLObject tests = NIL;
        SubLObject cdolist_list_var = kbq_query_run.kct_test_set_run_test_runs(test_set_run);
        SubLObject test_run = NIL;
        test_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != kbq_query_run.kct_erroring_test_runP(test_run)) {
                tests = cons(kbq_query_run.kct_test_run_test(test_run), tests);
            }
            cdolist_list_var = cdolist_list_var.rest();
            test_run = cdolist_list_var.first();
        } 
        return nreverse(tests);
    }

    public static final SubLObject kct_erroring_test_count_alt(SubLObject test_set_run) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_count_erroring_test_runs(com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_test_runs(test_set_run));
    }

    public static SubLObject kct_erroring_test_count(final SubLObject test_set_run) {
        return kbq_query_run.kct_count_erroring_test_runs(kbq_query_run.kct_test_set_run_test_runs(test_set_run));
    }

    public static final SubLObject kct_count_erroring_test_runs_alt(SubLObject test_runs) {
        return count_if($sym217$KCT_ERRORING_TEST_RUN_, test_runs, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject kct_count_erroring_test_runs(final SubLObject test_runs) {
        return count_if(kbq_query_run.$sym258$KCT_ERRORING_TEST_RUN_, test_runs, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject kct_erroring_test_runP_alt(SubLObject test_run) {
        {
            SubLObject halt_reason = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_halt_reason(com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_query_run(test_run));
            return inference_datastructures_enumerated_types.inference_error_suspend_status_p(halt_reason);
        }
    }

    public static SubLObject kct_erroring_test_runP(final SubLObject test_run) {
        final SubLObject halt_reason = kbq_query_run.kbq_query_run_halt_reason(kbq_query_run.kct_test_run_query_run(test_run));
        return inference_error_suspend_status_p(halt_reason);
    }

    public static final SubLObject kct_setup_file_handling_alt(SubLObject test_spec_set, SubLObject filename, SubLObject if_file_exists) {
        SubLTrampolineFile.checkType(if_file_exists, KBQ_IF_FILE_EXISTS_HANDLING_P);
        if (NIL == Filesys.probe_file(filename)) {
            if_file_exists = $OVERWRITE;
        }
        {
            SubLObject pcase_var = if_file_exists;
            if (pcase_var.eql($OVERWRITE)) {
                return values(test_spec_set, filename, $OUTPUT, NIL);
            } else {
                if (pcase_var.eql($AUGMENT)) {
                    {
                        SubLObject tests_not_yet_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_tests_not_yet_run(test_spec_set, filename);
                        SubLObject possible_crash_test = tests_not_yet_run.first();
                        SubLObject rest_tests = tests_not_yet_run.rest();
                        return values(make_el_set(rest_tests, UNPROVIDED), filename, $APPEND, list(possible_crash_test));
                    }
                } else {
                    if (pcase_var.eql($RERUN_ERRORS)) {
                        {
                            SubLObject old_test_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_load_test_set_run_and_merge_reruns(filename);
                            SubLObject tests_to_rerun = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_erroring_tests(old_test_set_run);
                            SubLObject filename_without_extension = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_strip_suffix_from_filename(filename);
                            SubLObject new_filename = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_compute_rerun_errors_filename(filename_without_extension);
                            return values(make_el_set(tests_to_rerun, UNPROVIDED), new_filename, $OUTPUT, NIL);
                        }
                    } else {
                        if (pcase_var.eql($AUGMENT_OR_RERUN_ERRORS)) {
                            {
                                SubLObject tests_not_yet_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_tests_not_yet_run(test_spec_set, filename);
                                if (NIL != tests_not_yet_run) {
                                    return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_setup_file_handling(test_spec_set, filename, $AUGMENT);
                                } else {
                                    return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_setup_file_handling(test_spec_set, filename, $RERUN_ERRORS);
                                }
                            }
                        } else {
                            return Errors.error($str_alt202$unexpected_if_file_exists__s, if_file_exists);
                        }
                    }
                }
            }
        }
    }

    public static SubLObject kct_setup_file_handling(final SubLObject test_spec_set, final SubLObject filename, SubLObject if_file_exists) {
        assert NIL != kbq_query_run.kbq_if_file_exists_handling_p(if_file_exists) : "! kbq_query_run.kbq_if_file_exists_handling_p(if_file_exists) " + ("kbq_query_run.kbq_if_file_exists_handling_p(if_file_exists) " + "CommonSymbols.NIL != kbq_query_run.kbq_if_file_exists_handling_p(if_file_exists) ") + if_file_exists;
        if (NIL == Filesys.probe_file(filename)) {
            if_file_exists = $OVERWRITE;
        }
        final SubLObject pcase_var = if_file_exists;
        if (pcase_var.eql($OVERWRITE)) {
            return values(test_spec_set, filename, $OUTPUT, NIL);
        }
        if (pcase_var.eql($AUGMENT)) {
            final SubLObject tests_not_yet_run = kbq_query_run.kct_tests_not_yet_run(test_spec_set, filename);
            final SubLObject possible_crash_test = tests_not_yet_run.first();
            final SubLObject rest_tests = tests_not_yet_run.rest();
            return values(make_el_set(rest_tests, UNPROVIDED), filename, $APPEND, list(possible_crash_test));
        }
        if (pcase_var.eql($RERUN_ERRORS)) {
            final SubLObject old_test_set_run = kbq_query_run.kct_load_test_set_run_and_merge_reruns(filename);
            final SubLObject tests_to_rerun = kbq_query_run.kct_erroring_tests(old_test_set_run);
            final SubLObject filename_without_extension = kbq_query_run.kct_strip_suffix_from_filename(filename);
            final SubLObject new_filename = kbq_query_run.kct_compute_rerun_errors_filename(filename_without_extension);
            return values(make_el_set(tests_to_rerun, UNPROVIDED), new_filename, $OUTPUT, NIL);
        }
        if (!pcase_var.eql(kbq_query_run.$AUGMENT_OR_RERUN_ERRORS)) {
            return Errors.error(kbq_query_run.$str232$unexpected_if_file_exists__s, if_file_exists);
        }
        final SubLObject tests_not_yet_run = kbq_query_run.kct_tests_not_yet_run(test_spec_set, filename);
        if (NIL != tests_not_yet_run) {
            return kbq_query_run.kct_setup_file_handling(test_spec_set, filename, $AUGMENT);
        }
        return kbq_query_run.kct_setup_file_handling(test_spec_set, filename, $RERUN_ERRORS);
    }

    public static final SubLObject kct_tests_not_yet_run_alt(SubLObject test_spec_set, SubLObject filename) {
        {
            SubLObject old_test_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_load_test_set_run(filename);
            SubLObject old_tests = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_tests(old_test_set_run);
            SubLObject tests = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_spec_set_elements(test_spec_set, UNPROVIDED, UNPROVIDED);
            return kb_utilities.sort_terms(list_utilities.remove_if_not($sym218$KCT_TEST_RUNNABLE_, list_utilities.fast_set_difference(tests, old_tests, symbol_function(EQUAL)), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
    }

    public static SubLObject kct_tests_not_yet_run(final SubLObject test_spec_set, final SubLObject filename) {
        final SubLObject old_test_set_run = kbq_query_run.kct_load_test_set_run(filename);
        final SubLObject old_tests = kbq_query_run.kct_test_set_run_tests(old_test_set_run);
        final SubLObject tests = kbq_query_run.kct_test_spec_set_elements(test_spec_set, UNPROVIDED, UNPROVIDED);
        return sort_terms(remove_if_not(kbq_query_run.$sym259$KCT_TEST_RUNNABLE_, fast_set_difference(tests, old_tests, symbol_function(EQUAL)), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject kct_compute_rerun_errors_filename_alt(SubLObject filename_without_extension) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_compute_rerun_errors_filename(filename_without_extension);
    }

    public static SubLObject kct_compute_rerun_errors_filename(final SubLObject filename_without_extension) {
        return kbq_query_run.kbq_compute_rerun_errors_filename(filename_without_extension);
    }

    public static final SubLObject kct_candidate_rerun_errors_filename_alt(SubLObject filename_without_extension, SubLObject i) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_candidate_rerun_errors_filename(filename_without_extension, i);
    }

    public static SubLObject kct_candidate_rerun_errors_filename(final SubLObject filename_without_extension, final SubLObject i) {
        return kbq_query_run.kbq_candidate_rerun_errors_filename(filename_without_extension, i);
    }

    public static final SubLObject kct_load_test_set_run_and_merge_reruns_alt(SubLObject filename) {
        {
            SubLObject test_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_load_test_set_run(filename);
            SubLObject filename_without_extension = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_strip_suffix_from_filename(filename);
            SubLObject i = ONE_INTEGER;
            SubLObject doneP = NIL;
            while (NIL == doneP) {
                {
                    SubLObject rerun_filename = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_candidate_rerun_errors_filename(filename_without_extension, i);
                    if (NIL != Filesys.probe_file(rerun_filename)) {
                        {
                            SubLObject test_set_rerun = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_load_test_set_run(rerun_filename);
                            test_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_merge_test_set_run_with_rerun(test_set_run, test_set_rerun);
                            i = add(i, ONE_INTEGER);
                        }
                    } else {
                        doneP = T;
                    }
                }
            } 
            return test_set_run;
        }
    }

    public static SubLObject kct_load_test_set_run_and_merge_reruns(final SubLObject filename) {
        SubLObject test_set_run = kbq_query_run.kct_load_test_set_run(filename);
        final SubLObject filename_without_extension = kbq_query_run.kct_strip_suffix_from_filename(filename);
        SubLObject i = ONE_INTEGER;
        SubLObject doneP = NIL;
        while (NIL == doneP) {
            final SubLObject rerun_filename = kbq_query_run.kct_candidate_rerun_errors_filename(filename_without_extension, i);
            if (NIL != Filesys.probe_file(rerun_filename)) {
                final SubLObject test_set_rerun = kbq_query_run.kct_load_test_set_run(rerun_filename);
                test_set_run = kbq_query_run.kct_merge_test_set_run_with_rerun(test_set_run, test_set_rerun);
                i = add(i, ONE_INTEGER);
            } else {
                doneP = T;
            }
        } 
        return test_set_run;
    }

    /**
     * Replaces each erroring test run in TEST-SET-RUN with the corresponding test run in TEST-SET-RERUN.
     */
    @LispMethod(comment = "Replaces each erroring test run in TEST-SET-RUN with the corresponding test run in TEST-SET-RERUN.")
    public static final SubLObject kct_merge_test_set_run_with_rerun_alt(SubLObject test_set_run, SubLObject test_set_rerun) {
        {
            SubLObject test_runs = copy_list(com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_test_runs(test_set_run));
            SubLObject cons = NIL;
            for (cons = test_runs; !cons.isAtom(); cons = cons.rest()) {
                {
                    SubLObject test_run = cons.first();
                    if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_erroring_test_runP(test_run)) {
                        {
                            SubLObject test = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_test(test_run);
                            SubLObject test_rerun = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_lookup_test_run(test_set_rerun, test);
                            if (NIL != test_rerun) {
                                rplaca(cons, test_rerun);
                            }
                        }
                    }
                }
            }
            {
                SubLObject new_test_set_run = copy_list(test_set_run);
                new_test_set_run = putf(new_test_set_run, $TEST_RUNS, test_runs);
                return new_test_set_run;
            }
        }
    }

    /**
     * Replaces each erroring test run in TEST-SET-RUN with the corresponding test run in TEST-SET-RERUN.
     */
    @LispMethod(comment = "Replaces each erroring test run in TEST-SET-RUN with the corresponding test run in TEST-SET-RERUN.")
    public static SubLObject kct_merge_test_set_run_with_rerun(final SubLObject test_set_run, final SubLObject test_set_rerun) {
        final SubLObject test_runs = copy_list(kbq_query_run.kct_test_set_run_test_runs(test_set_run));
        SubLObject cons;
        SubLObject test_run;
        SubLObject test;
        SubLObject test_rerun;
        for (cons = NIL, cons = test_runs; !cons.isAtom(); cons = cons.rest()) {
            test_run = cons.first();
            if (NIL != kbq_query_run.kct_erroring_test_runP(test_run)) {
                test = kbq_query_run.kct_test_run_test(test_run);
                test_rerun = kbq_query_run.kct_lookup_test_run(test_set_rerun, test);
                if (NIL != test_rerun) {
                    rplaca(cons, test_rerun);
                }
            }
        }
        SubLObject new_test_set_run = copy_list(test_set_run);
        new_test_set_run = putf(new_test_set_run, $TEST_RUNS, test_runs);
        return new_test_set_run;
    }

    public static final SubLObject kbq_runstate_validP_alt() {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_runstate_p($kbq_runstate$.getDynamicValue(thread));
        }
    }

    public static SubLObject kbq_runstate_validP() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return kbq_query_run.kbq_runstate_p(kbq_query_run.$kbq_runstate$.getDynamicValue(thread));
    }

    public static final SubLObject kbq_runstate_inference_already_setP_alt() {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            return list_utilities.sublisp_boolean(com.cyc.cycjava.cycl.inference.kbq_query_run.kbqr_inference($kbq_runstate$.getDynamicValue(thread)));
        }
    }

    public static SubLObject kbq_runstate_inference_already_setP() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return sublisp_boolean(kbq_query_run.kbqr_inference(kbq_query_run.$kbq_runstate$.getDynamicValue(thread)));
    }

    public static final SubLObject set_kbq_runstate_inference_alt(SubLObject inference) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            return com.cyc.cycjava.cycl.inference.kbq_query_run.set_kbqr_inference($kbq_runstate$.getDynamicValue(thread), inference);
        }
    }

    public static SubLObject set_kbq_runstate_inference(final SubLObject inference) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return kbq_query_run.set_kbqr_inference(kbq_query_run.$kbq_runstate$.getDynamicValue(thread), inference);
    }

    public static final SubLObject possibly_set_kbq_runstate_inference_alt(SubLObject inference) {
        if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_runstate_validP()) {
            if (NIL == com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_runstate_inference_already_setP()) {
                return com.cyc.cycjava.cycl.inference.kbq_query_run.set_kbq_runstate_inference(inference);
            }
        }
        return NIL;
    }

    public static SubLObject possibly_set_kbq_runstate_inference(final SubLObject inference) {
        if ((NIL != kbq_query_run.kbq_runstate_validP()) && (NIL == kbq_query_run.kbq_runstate_inference_already_setP())) {
            return kbq_query_run.set_kbq_runstate_inference(inference);
        }
        return NIL;
    }

    public static final SubLObject find_kbq_runstate_by_id_alt(SubLObject id) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.runstate_find_object_by_id(id);
    }

    public static SubLObject find_kbq_runstate_by_id(final SubLObject id) {
        return kbq_query_run.runstate_find_object_by_id(id);
    }

    public static final SubLObject find_kbq_runstate_by_id_string_alt(SubLObject id_string) {
        {
            SubLObject id = parse_integer(id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject kbq_runstate = com.cyc.cycjava.cycl.inference.kbq_query_run.find_kbq_runstate_by_id(id);
            return kbq_runstate;
        }
    }

    public static SubLObject find_kbq_runstate_by_id_string(final SubLObject id_string) {
        final SubLObject id = parse_integer(id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject kbq_runstate = kbq_query_run.find_kbq_runstate_by_id(id);
        return kbq_runstate;
    }

    public static final SubLObject find_kct_runstate_by_id_alt(SubLObject id) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.runstate_find_object_by_id(id);
    }

    public static SubLObject find_kct_runstate_by_id(final SubLObject id) {
        return kbq_query_run.runstate_find_object_by_id(id);
    }

    public static final SubLObject find_kct_runstate_by_id_string_alt(SubLObject id_string) {
        {
            SubLObject id = parse_integer(id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject kct_runstate = com.cyc.cycjava.cycl.inference.kbq_query_run.find_kbq_runstate_by_id(id);
            return kct_runstate;
        }
    }

    public static SubLObject find_kct_runstate_by_id_string(final SubLObject id_string) {
        final SubLObject id = parse_integer(id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject kct_runstate = kbq_query_run.find_kbq_runstate_by_id(id);
        return kct_runstate;
    }

    public static final SubLObject find_kct_set_runstate_by_id_alt(SubLObject id) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.runstate_find_object_by_id(id);
    }

    public static SubLObject find_kct_set_runstate_by_id(final SubLObject id) {
        return kbq_query_run.runstate_find_object_by_id(id);
    }

    public static final SubLObject find_kct_set_runstate_by_id_string_alt(SubLObject id_string) {
        {
            SubLObject id = parse_integer(id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject kct_set_runstate = com.cyc.cycjava.cycl.inference.kbq_query_run.find_kbq_runstate_by_id(id);
            return kct_set_runstate;
        }
    }

    public static SubLObject find_kct_set_runstate_by_id_string(final SubLObject id_string) {
        final SubLObject id = parse_integer(id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject kct_set_runstate = kbq_query_run.find_kbq_runstate_by_id(id);
        return kct_set_runstate;
    }

    public static final SubLObject next_runstate_id_alt() {
        return integer_sequence_generator.integer_sequence_generator_next($runstate_isg$.getGlobalValue());
    }

    public static SubLObject next_runstate_id() {
        return integer_sequence_generator_next(kbq_query_run.$runstate_isg$.getGlobalValue());
    }

    public static final SubLObject runstate_add_object_alt(SubLObject id, SubLObject v_object) {
        return dictionary.dictionary_enter($runstate_index$.getGlobalValue(), id, v_object);
    }

    public static SubLObject runstate_add_object(final SubLObject id, final SubLObject v_object) {
        return dictionary_enter(kbq_query_run.$runstate_index$.getGlobalValue(), id, v_object);
    }

    public static final SubLObject runstate_rem_object_alt(SubLObject id) {
        return dictionary.dictionary_remove($runstate_index$.getGlobalValue(), id);
    }

    public static SubLObject runstate_rem_object(final SubLObject id) {
        return dictionary_remove(kbq_query_run.$runstate_index$.getGlobalValue(), id);
    }

    public static final SubLObject runstate_find_object_by_id_alt(SubLObject id) {
        return dictionary.dictionary_lookup($runstate_index$.getGlobalValue(), id, UNPROVIDED);
    }

    public static SubLObject runstate_find_object_by_id(final SubLObject id) {
        return dictionary_lookup(kbq_query_run.$runstate_index$.getGlobalValue(), id, UNPROVIDED);
    }

    public static final SubLObject runstate_constant_alt(SubLObject runstate) {
        if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_runstate_p(runstate)) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_runstate_query_spec(runstate);
        } else {
            if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_p(runstate)) {
                return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_test_spec(runstate);
            } else {
                if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_set_runstate_p(runstate)) {
                    return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_set_runstate_test_set(runstate);
                } else {
                    Errors.error($str_alt221$Unknown_runstate_type___A, runstate);
                }
            }
        }
        return NIL;
    }

    public static SubLObject runstate_constant(final SubLObject runstate) {
        if (NIL != kbq_query_run.kbq_runstate_p(runstate)) {
            return kbq_query_run.kbq_runstate_query_spec(runstate);
        }
        if (NIL != kbq_query_run.kct_runstate_p(runstate)) {
            return kbq_query_run.kct_runstate_test_spec(runstate);
        }
        if (NIL != kbq_query_run.kct_set_runstate_p(runstate)) {
            return kbq_query_run.kct_set_runstate_test_set(runstate);
        }
        Errors.error(kbq_query_run.$str262$Unknown_runstate_type___A, runstate);
        return NIL;
    }

    public static final SubLObject runstate_result_status_alt(SubLObject runstate) {
        if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_p(runstate)) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_result_status(runstate);
        } else {
            if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_set_runstate_p(runstate)) {
                return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_set_runstate_result_status(runstate);
            } else {
                Errors.error($str_alt222$Runstate_has_no_status___A, runstate);
            }
        }
        return NIL;
    }

    public static SubLObject runstate_result_status(final SubLObject runstate) {
        if (NIL != kbq_query_run.kct_runstate_p(runstate)) {
            return kbq_query_run.kct_runstate_result_status(runstate);
        }
        if (NIL != kbq_query_run.kct_set_runstate_p(runstate)) {
            return kbq_query_run.kct_set_runstate_result_status(runstate);
        }
        Errors.error(kbq_query_run.$str263$Runstate_has_no_status___A, runstate);
        return NIL;
    }

    public static final SubLObject runstate_result_text_alt(SubLObject runstate) {
        return $str_alt223$Explanations_aren_t_yet_implement;
    }

    public static SubLObject runstate_result_text(final SubLObject runstate) {
        return kbq_query_run.$str264$Explanations_aren_t_yet_implement;
    }

    public static final SubLObject runstate_run_status_alt(SubLObject runstate) {
        if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_runstate_p(runstate)) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_runstate_run_status(runstate);
        } else {
            if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_p(runstate)) {
                return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_run_status(runstate);
            } else {
                if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_set_runstate_p(runstate)) {
                    return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_set_runstate_run_status(runstate);
                } else {
                    Errors.error($str_alt221$Unknown_runstate_type___A, runstate);
                }
            }
        }
        return NIL;
    }

    public static SubLObject runstate_run_status(final SubLObject runstate) {
        if (NIL != kbq_query_run.kbq_runstate_p(runstate)) {
            return kbq_query_run.kbq_runstate_run_status(runstate);
        }
        if (NIL != kbq_query_run.kct_runstate_p(runstate)) {
            return kbq_query_run.kct_runstate_run_status(runstate);
        }
        if (NIL != kbq_query_run.kct_set_runstate_p(runstate)) {
            return kbq_query_run.kct_set_runstate_run_status(runstate);
        }
        Errors.error(kbq_query_run.$str262$Unknown_runstate_type___A, runstate);
        return NIL;
    }

    public static final SubLObject runstate_inference_alt(SubLObject runstate) {
        if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_runstate_p(runstate)) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_runstate_inference(runstate);
        } else {
            if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_p(runstate)) {
                return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_inference(runstate);
            } else {
                Errors.error($str_alt224$No_inference_defined_for_this_run, runstate);
            }
        }
        return NIL;
    }

    public static SubLObject runstate_inference(final SubLObject runstate) {
        if (NIL != kbq_query_run.kbq_runstate_p(runstate)) {
            return kbq_query_run.kbq_runstate_inference(runstate);
        }
        if (NIL != kbq_query_run.kct_runstate_p(runstate)) {
            return kbq_query_run.kct_runstate_inference(runstate);
        }
        Errors.error(kbq_query_run.$str265$No_inference_defined_for_this_run, runstate);
        return NIL;
    }

    public static final SubLObject runstate_start_alt(SubLObject runstate) {
        if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_p(runstate)) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_start(runstate);
        } else {
            if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_set_runstate_p(runstate)) {
                return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_set_runstate_start(runstate);
            } else {
                Errors.error($str_alt225$No_start_defined_for_this_runstat, runstate);
            }
        }
        return NIL;
    }

    public static SubLObject runstate_start(final SubLObject runstate) {
        if (NIL != kbq_query_run.kct_runstate_p(runstate)) {
            return kbq_query_run.kct_runstate_start(runstate);
        }
        if (NIL != kbq_query_run.kct_set_runstate_p(runstate)) {
            return kbq_query_run.kct_set_runstate_start(runstate);
        }
        Errors.error(kbq_query_run.$str266$No_start_defined_for_this_runstat, runstate);
        return NIL;
    }

    public static final SubLObject runstate_end_alt(SubLObject runstate) {
        if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_p(runstate)) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_end(runstate);
        } else {
            if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_set_runstate_p(runstate)) {
                return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_set_runstate_end(runstate);
            } else {
                Errors.error($str_alt226$No_end_defined_for_this_runstate_, runstate);
            }
        }
        return NIL;
    }

    public static SubLObject runstate_end(final SubLObject runstate) {
        if (NIL != kbq_query_run.kct_runstate_p(runstate)) {
            return kbq_query_run.kct_runstate_end(runstate);
        }
        if (NIL != kbq_query_run.kct_set_runstate_p(runstate)) {
            return kbq_query_run.kct_set_runstate_end(runstate);
        }
        Errors.error(kbq_query_run.$str267$No_end_defined_for_this_runstate_, runstate);
        return NIL;
    }

    public static final SubLObject set_runstate_run_status_alt(SubLObject runstate, SubLObject run_status) {
        SubLTrampolineFile.checkType(run_status, KEYWORDP);
        if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_runstate_p(runstate)) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.set_kbqr_run_status(runstate, run_status);
        } else {
            if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_p(runstate)) {
                return com.cyc.cycjava.cycl.inference.kbq_query_run.set_kctr_run_status(runstate, run_status);
            } else {
                if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_set_runstate_p(runstate)) {
                    return com.cyc.cycjava.cycl.inference.kbq_query_run.set_kctsr_run_status(runstate, run_status);
                } else {
                    Errors.error($str_alt222$Runstate_has_no_status___A, runstate);
                }
            }
        }
        return NIL;
    }

    public static SubLObject set_runstate_run_status(final SubLObject runstate, final SubLObject run_status) {
        assert NIL != keywordp(run_status) : "! keywordp(run_status) " + ("Types.keywordp(run_status) " + "CommonSymbols.NIL != Types.keywordp(run_status) ") + run_status;
        if (NIL != kbq_query_run.kbq_runstate_p(runstate)) {
            return kbq_query_run.set_kbqr_run_status(runstate, run_status);
        }
        if (NIL != kbq_query_run.kct_runstate_p(runstate)) {
            return kbq_query_run.set_kctr_run_status(runstate, run_status);
        }
        if (NIL != kbq_query_run.kct_set_runstate_p(runstate)) {
            return kbq_query_run.set_kctsr_run_status(runstate, run_status);
        }
        Errors.error(kbq_query_run.$str263$Runstate_has_no_status___A, runstate);
        return NIL;
    }

    public static final SubLObject destroy_runstate_alt(SubLObject runstate) {
        if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_runstate_p(runstate)) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.destroy_kbq_runstate(runstate);
        } else {
            if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_p(runstate)) {
                return com.cyc.cycjava.cycl.inference.kbq_query_run.destroy_kct_runstate(runstate);
            } else {
                if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_set_runstate_p(runstate)) {
                    com.cyc.cycjava.cycl.inference.kbq_query_run.destroy_kct_set_runstate(runstate);
                } else {
                    Errors.error($str_alt222$Runstate_has_no_status___A, runstate);
                }
            }
        }
        return NIL;
    }

    public static SubLObject destroy_runstate(final SubLObject runstate) {
        if (NIL != kbq_query_run.kbq_runstate_p(runstate)) {
            return kbq_query_run.destroy_kbq_runstate(runstate);
        }
        if (NIL != kbq_query_run.kct_runstate_p(runstate)) {
            return kbq_query_run.destroy_kct_runstate(runstate);
        }
        if (NIL != kbq_query_run.kct_set_runstate_p(runstate)) {
            kbq_query_run.destroy_kct_set_runstate(runstate);
        } else {
            Errors.error(kbq_query_run.$str263$Runstate_has_no_status___A, runstate);
        }
        return NIL;
    }

    public static final SubLObject kbq_runstate_print_function_trampoline_alt(SubLObject v_object, SubLObject stream) {
        compatibility.default_struct_print_function(v_object, stream, ZERO_INTEGER);
        return NIL;
    }

    public static SubLObject kbq_runstate_print_function_trampoline(final SubLObject v_object, final SubLObject stream) {
        compatibility.default_struct_print_function(v_object, stream, ZERO_INTEGER);
        return NIL;
    }

    public static final SubLObject kbq_runstate_p_alt(SubLObject v_object) {
        return v_object.getClass() == com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native.class ? ((SubLObject) (T)) : NIL;
    }

    public static SubLObject kbq_runstate_p(final SubLObject v_object) {
        return v_object.getClass() == com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native.class ? T : NIL;
    }

    public static final SubLObject kbqr_id_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KBQ_RUNSTATE_P);
        return v_object.getField2();
    }

    public static SubLObject kbqr_id(final SubLObject v_object) {
        assert NIL != kbq_query_run.kbq_runstate_p(v_object) : "! kbq_query_run.kbq_runstate_p(v_object) " + "kbq_query_run.kbq_runstate_p error :" + v_object;
        return v_object.getField2();
    }

    public static final SubLObject kbqr_lock_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KBQ_RUNSTATE_P);
        return v_object.getField3();
    }

    public static SubLObject kbqr_lock(final SubLObject v_object) {
        assert NIL != kbq_query_run.kbq_runstate_p(v_object) : "! kbq_query_run.kbq_runstate_p(v_object) " + "kbq_query_run.kbq_runstate_p error :" + v_object;
        return v_object.getField3();
    }

    public static final SubLObject kbqr_query_spec_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KBQ_RUNSTATE_P);
        return v_object.getField4();
    }

    public static SubLObject kbqr_query_spec(final SubLObject v_object) {
        assert NIL != kbq_query_run.kbq_runstate_p(v_object) : "! kbq_query_run.kbq_runstate_p(v_object) " + "kbq_query_run.kbq_runstate_p error :" + v_object;
        return v_object.getField4();
    }

    public static final SubLObject kbqr_inference_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KBQ_RUNSTATE_P);
        return v_object.getField5();
    }

    public static SubLObject kbqr_inference(final SubLObject v_object) {
        assert NIL != kbq_query_run.kbq_runstate_p(v_object) : "! kbq_query_run.kbq_runstate_p(v_object) " + "kbq_query_run.kbq_runstate_p error :" + v_object;
        return v_object.getField5();
    }

    public static final SubLObject kbqr_result_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KBQ_RUNSTATE_P);
        return v_object.getField6();
    }

    public static SubLObject kbqr_result(final SubLObject v_object) {
        assert NIL != kbq_query_run.kbq_runstate_p(v_object) : "! kbq_query_run.kbq_runstate_p(v_object) " + "kbq_query_run.kbq_runstate_p error :" + v_object;
        return v_object.getField6();
    }

    public static final SubLObject kbqr_test_runstate_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KBQ_RUNSTATE_P);
        return v_object.getField7();
    }

    public static SubLObject kbqr_test_runstate(final SubLObject v_object) {
        assert NIL != kbq_query_run.kbq_runstate_p(v_object) : "! kbq_query_run.kbq_runstate_p(v_object) " + "kbq_query_run.kbq_runstate_p error :" + v_object;
        return v_object.getField7();
    }

    public static final SubLObject kbqr_run_status_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KBQ_RUNSTATE_P);
        return v_object.getField8();
    }

    public static SubLObject kbqr_run_status(final SubLObject v_object) {
        assert NIL != kbq_query_run.kbq_runstate_p(v_object) : "! kbq_query_run.kbq_runstate_p(v_object) " + "kbq_query_run.kbq_runstate_p error :" + v_object;
        return v_object.getField8();
    }

    public static final SubLObject _csetf_kbqr_id_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KBQ_RUNSTATE_P);
        return v_object.setField2(value);
    }

    public static SubLObject _csetf_kbqr_id(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kbq_runstate_p(v_object) : "! kbq_query_run.kbq_runstate_p(v_object) " + "kbq_query_run.kbq_runstate_p error :" + v_object;
        return v_object.setField2(value);
    }

    public static final SubLObject _csetf_kbqr_lock_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KBQ_RUNSTATE_P);
        return v_object.setField3(value);
    }

    public static SubLObject _csetf_kbqr_lock(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kbq_runstate_p(v_object) : "! kbq_query_run.kbq_runstate_p(v_object) " + "kbq_query_run.kbq_runstate_p error :" + v_object;
        return v_object.setField3(value);
    }

    public static final SubLObject _csetf_kbqr_query_spec_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KBQ_RUNSTATE_P);
        return v_object.setField4(value);
    }

    public static SubLObject _csetf_kbqr_query_spec(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kbq_runstate_p(v_object) : "! kbq_query_run.kbq_runstate_p(v_object) " + "kbq_query_run.kbq_runstate_p error :" + v_object;
        return v_object.setField4(value);
    }

    public static final SubLObject _csetf_kbqr_inference_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KBQ_RUNSTATE_P);
        return v_object.setField5(value);
    }

    public static SubLObject _csetf_kbqr_inference(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kbq_runstate_p(v_object) : "! kbq_query_run.kbq_runstate_p(v_object) " + "kbq_query_run.kbq_runstate_p error :" + v_object;
        return v_object.setField5(value);
    }

    public static final SubLObject _csetf_kbqr_result_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KBQ_RUNSTATE_P);
        return v_object.setField6(value);
    }

    public static SubLObject _csetf_kbqr_result(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kbq_runstate_p(v_object) : "! kbq_query_run.kbq_runstate_p(v_object) " + "kbq_query_run.kbq_runstate_p error :" + v_object;
        return v_object.setField6(value);
    }

    public static final SubLObject _csetf_kbqr_test_runstate_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KBQ_RUNSTATE_P);
        return v_object.setField7(value);
    }

    public static SubLObject _csetf_kbqr_test_runstate(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kbq_runstate_p(v_object) : "! kbq_query_run.kbq_runstate_p(v_object) " + "kbq_query_run.kbq_runstate_p error :" + v_object;
        return v_object.setField7(value);
    }

    public static final SubLObject _csetf_kbqr_run_status_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KBQ_RUNSTATE_P);
        return v_object.setField8(value);
    }

    public static SubLObject _csetf_kbqr_run_status(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kbq_runstate_p(v_object) : "! kbq_query_run.kbq_runstate_p(v_object) " + "kbq_query_run.kbq_runstate_p error :" + v_object;
        return v_object.setField8(value);
    }

    public static final SubLObject make_kbq_runstate_alt(SubLObject arglist) {
        if (arglist == UNPROVIDED) {
            arglist = NIL;
        }
        {
            SubLObject v_new = new com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native();
            SubLObject next = NIL;
            for (next = arglist; NIL != next; next = cddr(next)) {
                {
                    SubLObject current_arg = next.first();
                    SubLObject current_value = cadr(next);
                    SubLObject pcase_var = current_arg;
                    if (pcase_var.eql($ID)) {
                        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_id(v_new, current_value);
                    } else {
                        if (pcase_var.eql($LOCK)) {
                            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_lock(v_new, current_value);
                        } else {
                            if (pcase_var.eql($QUERY_SPEC)) {
                                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_query_spec(v_new, current_value);
                            } else {
                                if (pcase_var.eql($INFERENCE)) {
                                    com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_inference(v_new, current_value);
                                } else {
                                    if (pcase_var.eql($RESULT)) {
                                        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_result(v_new, current_value);
                                    } else {
                                        if (pcase_var.eql($TEST_RUNSTATE)) {
                                            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_test_runstate(v_new, current_value);
                                        } else {
                                            if (pcase_var.eql($RUN_STATUS)) {
                                                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_run_status(v_new, current_value);
                                            } else {
                                                Errors.error($str_alt256$Invalid_slot__S_for_construction_, current_arg);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return v_new;
        }
    }

    public static SubLObject make_kbq_runstate(SubLObject arglist) {
        if (arglist == UNPROVIDED) {
            arglist = NIL;
        }
        final SubLObject v_new = new com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_native();
        SubLObject next;
        SubLObject current_arg;
        SubLObject current_value;
        SubLObject pcase_var;
        for (next = NIL, next = arglist; NIL != next; next = cddr(next)) {
            current_arg = next.first();
            current_value = cadr(next);
            pcase_var = current_arg;
            if (pcase_var.eql($ID)) {
                kbq_query_run._csetf_kbqr_id(v_new, current_value);
            } else
                if (pcase_var.eql($LOCK)) {
                    kbq_query_run._csetf_kbqr_lock(v_new, current_value);
                } else
                    if (pcase_var.eql($QUERY_SPEC)) {
                        kbq_query_run._csetf_kbqr_query_spec(v_new, current_value);
                    } else
                        if (pcase_var.eql($INFERENCE)) {
                            kbq_query_run._csetf_kbqr_inference(v_new, current_value);
                        } else
                            if (pcase_var.eql($RESULT)) {
                                kbq_query_run._csetf_kbqr_result(v_new, current_value);
                            } else
                                if (pcase_var.eql($TEST_RUNSTATE)) {
                                    kbq_query_run._csetf_kbqr_test_runstate(v_new, current_value);
                                } else
                                    if (pcase_var.eql($RUN_STATUS)) {
                                        kbq_query_run._csetf_kbqr_run_status(v_new, current_value);
                                    } else {
                                        Errors.error(kbq_query_run.$str298$Invalid_slot__S_for_construction_, current_arg);
                                    }






        }
        return v_new;
    }

    public static SubLObject visit_defstruct_kbq_runstate(final SubLObject obj, final SubLObject visitor_fn) {
        funcall(visitor_fn, obj, $BEGIN, kbq_query_run.MAKE_KBQ_RUNSTATE, SEVEN_INTEGER);
        funcall(visitor_fn, obj, $SLOT, $ID, kbq_query_run.kbqr_id(obj));
        funcall(visitor_fn, obj, $SLOT, $LOCK, kbq_query_run.kbqr_lock(obj));
        funcall(visitor_fn, obj, $SLOT, $QUERY_SPEC, kbq_query_run.kbqr_query_spec(obj));
        funcall(visitor_fn, obj, $SLOT, $INFERENCE, kbq_query_run.kbqr_inference(obj));
        funcall(visitor_fn, obj, $SLOT, $RESULT, kbq_query_run.kbqr_result(obj));
        funcall(visitor_fn, obj, $SLOT, $TEST_RUNSTATE, kbq_query_run.kbqr_test_runstate(obj));
        funcall(visitor_fn, obj, $SLOT, $RUN_STATUS, kbq_query_run.kbqr_run_status(obj));
        funcall(visitor_fn, obj, $END, kbq_query_run.MAKE_KBQ_RUNSTATE, SEVEN_INTEGER);
        return obj;
    }

    public static SubLObject visit_defstruct_object_kbq_runstate_method(final SubLObject obj, final SubLObject visitor_fn) {
        return kbq_query_run.visit_defstruct_kbq_runstate(obj, visitor_fn);
    }

    public static final SubLObject new_kbq_runstate_alt(SubLObject query_spec, SubLObject test_runstate) {
        SubLTrampolineFile.checkType(query_spec, KBQ_QUERY_SPEC_P);
        if (NIL != test_runstate) {
            SubLTrampolineFile.checkType(test_runstate, KCT_RUNSTATE_P);
        }
        {
            SubLObject kbqr = com.cyc.cycjava.cycl.inference.kbq_query_run.make_kbq_runstate(UNPROVIDED);
            SubLObject id = com.cyc.cycjava.cycl.inference.kbq_query_run.next_runstate_id();
            com.cyc.cycjava.cycl.inference.kbq_query_run.runstate_add_object(id, kbqr);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_id(kbqr, id);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_query_spec(kbqr, query_spec);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_lock(kbqr, make_lock($$$KBQ_Runstate_Lock));
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_test_runstate(kbqr, test_runstate);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_run_status(kbqr, $NONE);
            return kbqr;
        }
    }

    public static SubLObject new_kbq_runstate(final SubLObject query_spec, final SubLObject test_runstate) {
        assert NIL != kb_query.kbq_query_spec_p(query_spec) : "! kb_query.kbq_query_spec_p(query_spec) " + ("kb_query.kbq_query_spec_p(query_spec) " + "CommonSymbols.NIL != kb_query.kbq_query_spec_p(query_spec) ") + query_spec;
        if (((NIL != test_runstate) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == kbq_query_run.kct_runstate_p(test_runstate))) {
            throw new AssertionError(test_runstate);
        }
        final SubLObject kbqr = kbq_query_run.make_kbq_runstate(UNPROVIDED);
        final SubLObject id = kbq_query_run.next_runstate_id();
        kbq_query_run.runstate_add_object(id, kbqr);
        kbq_query_run._csetf_kbqr_id(kbqr, id);
        kbq_query_run._csetf_kbqr_query_spec(kbqr, query_spec);
        kbq_query_run._csetf_kbqr_lock(kbqr, make_lock(kbq_query_run.$$$KBQ_Runstate_Lock));
        kbq_query_run._csetf_kbqr_test_runstate(kbqr, test_runstate);
        kbq_query_run._csetf_kbqr_run_status(kbqr, $NONE);
        return kbqr;
    }

    public static final SubLObject destroy_kbq_runstate_alt(SubLObject kbqr) {
        SubLTrampolineFile.checkType(kbqr, KBQ_RUNSTATE_P);
        com.cyc.cycjava.cycl.inference.kbq_query_run.runstate_rem_object(com.cyc.cycjava.cycl.inference.kbq_query_run.kbqr_id(kbqr));
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_id(kbqr, NIL);
        if (NIL != inference_datastructures_inference.valid_inference_p(com.cyc.cycjava.cycl.inference.kbq_query_run.kbqr_inference(kbqr))) {
            inference_datastructures_inference.destroy_inference_and_problem_store(com.cyc.cycjava.cycl.inference.kbq_query_run.kbqr_inference(kbqr));
        }
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_query_spec(kbqr, NIL);
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_lock(kbqr, NIL);
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_result(kbqr, NIL);
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_run_status(kbqr, NIL);
        return NIL;
    }

    public static SubLObject destroy_kbq_runstate(final SubLObject kbqr) {
        assert NIL != kbq_query_run.kbq_runstate_p(kbqr) : "! kbq_query_run.kbq_runstate_p(kbqr) " + ("kbq_query_run.kbq_runstate_p(kbqr) " + "CommonSymbols.NIL != kbq_query_run.kbq_runstate_p(kbqr) ") + kbqr;
        kbq_query_run.runstate_rem_object(kbq_query_run.kbqr_id(kbqr));
        kbq_query_run._csetf_kbqr_id(kbqr, NIL);
        if (NIL != valid_inference_p(kbq_query_run.kbqr_inference(kbqr))) {
            destroy_inference_and_problem_store(kbq_query_run.kbqr_inference(kbqr));
        }
        kbq_query_run._csetf_kbqr_query_spec(kbqr, NIL);
        kbq_query_run._csetf_kbqr_lock(kbqr, NIL);
        kbq_query_run._csetf_kbqr_result(kbqr, NIL);
        kbq_query_run._csetf_kbqr_run_status(kbqr, NIL);
        return NIL;
    }

    public static final SubLObject kbq_runstate_query_spec_alt(SubLObject kbqr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbqr_query_spec(kbqr);
    }

    public static SubLObject kbq_runstate_query_spec(final SubLObject kbqr) {
        return kbq_query_run.kbqr_query_spec(kbqr);
    }

    public static final SubLObject kbq_runstate_lock_alt(SubLObject kbqr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbqr_lock(kbqr);
    }

    public static SubLObject kbq_runstate_lock(final SubLObject kbqr) {
        return kbq_query_run.kbqr_lock(kbqr);
    }

    public static final SubLObject kbq_runstate_inference_alt(SubLObject kbqr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbqr_inference(kbqr);
    }

    public static SubLObject kbq_runstate_inference(final SubLObject kbqr) {
        return kbq_query_run.kbqr_inference(kbqr);
    }

    public static final SubLObject kbq_runstate_result_alt(SubLObject kbqr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbqr_result(kbqr);
    }

    public static SubLObject kbq_runstate_result(final SubLObject kbqr) {
        return kbq_query_run.kbqr_result(kbqr);
    }

    public static final SubLObject kbq_runstate_test_runstate_alt(SubLObject kbqr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbqr_test_runstate(kbqr);
    }

    public static SubLObject kbq_runstate_test_runstate(final SubLObject kbqr) {
        return kbq_query_run.kbqr_test_runstate(kbqr);
    }

    public static final SubLObject kbq_runstate_run_status_alt(SubLObject kbqr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbqr_run_status(kbqr);
    }

    public static SubLObject kbq_runstate_run_status(final SubLObject kbqr) {
        return kbq_query_run.kbqr_run_status(kbqr);
    }

    public static final SubLObject set_kbqr_inference_alt(SubLObject kbqr, SubLObject inference) {
        SubLTrampolineFile.checkType(inference, INFERENCE_P);
        SubLTrampolineFile.checkType(kbqr, KBQ_RUNSTATE_P);
        {
            SubLObject lock = com.cyc.cycjava.cycl.inference.kbq_query_run.kbqr_lock(kbqr);
            SubLObject release = NIL;
            try {
                release = seize_lock(lock);
                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_inference(kbqr, inference);
            } finally {
                if (NIL != release) {
                    release_lock(lock);
                }
            }
        }
        return kbqr;
    }

    public static SubLObject set_kbqr_inference(final SubLObject kbqr, final SubLObject inference) {
        assert NIL != inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ") + inference;
        assert NIL != kbq_query_run.kbq_runstate_p(kbqr) : "! kbq_query_run.kbq_runstate_p(kbqr) " + ("kbq_query_run.kbq_runstate_p(kbqr) " + "CommonSymbols.NIL != kbq_query_run.kbq_runstate_p(kbqr) ") + kbqr;
        final SubLObject lock = kbq_query_run.kbqr_lock(kbqr);
        SubLObject release = NIL;
        try {
            release = seize_lock(lock);
            kbq_query_run._csetf_kbqr_inference(kbqr, inference);
        } finally {
            if (NIL != release) {
                release_lock(lock);
            }
        }
        return kbqr;
    }

    public static final SubLObject set_kbqr_result_alt(SubLObject kbqr, SubLObject query_run) {
        SubLTrampolineFile.checkType(kbqr, KBQ_RUNSTATE_P);
        SubLTrampolineFile.checkType(query_run, KBQ_QUERY_RUN_P);
        {
            SubLObject lock = com.cyc.cycjava.cycl.inference.kbq_query_run.kbqr_lock(kbqr);
            SubLObject release = NIL;
            try {
                release = seize_lock(lock);
                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_result(kbqr, query_run);
            } finally {
                if (NIL != release) {
                    release_lock(lock);
                }
            }
        }
        return kbqr;
    }

    public static SubLObject set_kbqr_result(final SubLObject kbqr, final SubLObject query_run) {
        assert NIL != kbq_query_run.kbq_runstate_p(kbqr) : "! kbq_query_run.kbq_runstate_p(kbqr) " + ("kbq_query_run.kbq_runstate_p(kbqr) " + "CommonSymbols.NIL != kbq_query_run.kbq_runstate_p(kbqr) ") + kbqr;
        assert NIL != kbq_query_run.kbq_query_run_p(query_run) : "! kbq_query_run.kbq_query_run_p(query_run) " + ("kbq_query_run.kbq_query_run_p(query_run) " + "CommonSymbols.NIL != kbq_query_run.kbq_query_run_p(query_run) ") + query_run;
        final SubLObject lock = kbq_query_run.kbqr_lock(kbqr);
        SubLObject release = NIL;
        try {
            release = seize_lock(lock);
            kbq_query_run._csetf_kbqr_result(kbqr, query_run);
        } finally {
            if (NIL != release) {
                release_lock(lock);
            }
        }
        return kbqr;
    }

    public static final SubLObject set_kbqr_run_status_alt(SubLObject kbqr, SubLObject run_status) {
        SubLTrampolineFile.checkType(kbqr, KBQ_RUNSTATE_P);
        SubLTrampolineFile.checkType(run_status, KEYWORDP);
        {
            SubLObject lock = com.cyc.cycjava.cycl.inference.kbq_query_run.kbqr_lock(kbqr);
            SubLObject release = NIL;
            try {
                release = seize_lock(lock);
                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kbqr_run_status(kbqr, run_status);
            } finally {
                if (NIL != release) {
                    release_lock(lock);
                }
            }
        }
        return kbqr;
    }

    public static SubLObject set_kbqr_run_status(final SubLObject kbqr, final SubLObject run_status) {
        assert NIL != kbq_query_run.kbq_runstate_p(kbqr) : "! kbq_query_run.kbq_runstate_p(kbqr) " + ("kbq_query_run.kbq_runstate_p(kbqr) " + "CommonSymbols.NIL != kbq_query_run.kbq_runstate_p(kbqr) ") + kbqr;
        assert NIL != keywordp(run_status) : "! keywordp(run_status) " + ("Types.keywordp(run_status) " + "CommonSymbols.NIL != Types.keywordp(run_status) ") + run_status;
        final SubLObject lock = kbq_query_run.kbqr_lock(kbqr);
        SubLObject release = NIL;
        try {
            release = seize_lock(lock);
            kbq_query_run._csetf_kbqr_run_status(kbqr, run_status);
        } finally {
            if (NIL != release) {
                release_lock(lock);
            }
        }
        return kbqr;
    }

    public static final SubLObject possibly_set_kbqr_run_status_alt(SubLObject kbqr, SubLObject run_status) {
        if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_runstate_p(kbqr)) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.set_kbqr_run_status(kbqr, run_status);
        }
        return NIL;
    }

    public static SubLObject possibly_set_kbqr_run_status(final SubLObject kbqr, final SubLObject run_status) {
        if (NIL != kbq_query_run.kbq_runstate_p(kbqr)) {
            return kbq_query_run.set_kbqr_run_status(kbqr, run_status);
        }
        return NIL;
    }

    public static final SubLObject kct_runstate_print_function_trampoline_alt(SubLObject v_object, SubLObject stream) {
        compatibility.default_struct_print_function(v_object, stream, ZERO_INTEGER);
        return NIL;
    }

    public static SubLObject kct_runstate_print_function_trampoline(final SubLObject v_object, final SubLObject stream) {
        compatibility.default_struct_print_function(v_object, stream, ZERO_INTEGER);
        return NIL;
    }

    public static final SubLObject kct_runstate_p_alt(SubLObject v_object) {
        return v_object.getClass() == com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.class ? ((SubLObject) (T)) : NIL;
    }

    public static SubLObject kct_runstate_p(final SubLObject v_object) {
        return v_object.getClass() == com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native.class ? T : NIL;
    }

    public static final SubLObject kctr_id_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.getField2();
    }

    public static SubLObject kctr_id(final SubLObject v_object) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.getField2();
    }

    public static final SubLObject kctr_lock_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.getField3();
    }

    public static SubLObject kctr_lock(final SubLObject v_object) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.getField3();
    }

    public static final SubLObject kctr_test_spec_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.getField4();
    }

    public static SubLObject kctr_test_spec(final SubLObject v_object) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.getField4();
    }

    public static final SubLObject kctr_result_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.getField5();
    }

    public static SubLObject kctr_result(final SubLObject v_object) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.getField5();
    }

    public static final SubLObject kctr_query_runstate_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.getField6();
    }

    public static SubLObject kctr_query_runstate(final SubLObject v_object) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.getField6();
    }

    public static final SubLObject kctr_test_set_runstate_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.getField7();
    }

    public static SubLObject kctr_test_set_runstate(final SubLObject v_object) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.getField7();
    }

    public static final SubLObject kctr_run_status_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.getField8();
    }

    public static SubLObject kctr_run_status(final SubLObject v_object) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.getField8();
    }

    public static final SubLObject kctr_start_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.getField9();
    }

    public static SubLObject kctr_start(final SubLObject v_object) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.getField9();
    }

    public static final SubLObject kctr_end_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.getField10();
    }

    public static SubLObject kctr_end(final SubLObject v_object) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.getField10();
    }

    public static final SubLObject _csetf_kctr_id_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.setField2(value);
    }

    public static SubLObject _csetf_kctr_id(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.setField2(value);
    }

    public static final SubLObject _csetf_kctr_lock_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.setField3(value);
    }

    public static SubLObject _csetf_kctr_lock(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.setField3(value);
    }

    public static final SubLObject _csetf_kctr_test_spec_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.setField4(value);
    }

    public static SubLObject _csetf_kctr_test_spec(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.setField4(value);
    }

    public static final SubLObject _csetf_kctr_result_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.setField5(value);
    }

    public static SubLObject _csetf_kctr_result(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.setField5(value);
    }

    public static final SubLObject _csetf_kctr_query_runstate_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.setField6(value);
    }

    public static SubLObject _csetf_kctr_query_runstate(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.setField6(value);
    }

    public static final SubLObject _csetf_kctr_test_set_runstate_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.setField7(value);
    }

    public static SubLObject _csetf_kctr_test_set_runstate(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.setField7(value);
    }

    public static final SubLObject _csetf_kctr_run_status_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.setField8(value);
    }

    public static SubLObject _csetf_kctr_run_status(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.setField8(value);
    }

    public static final SubLObject _csetf_kctr_start_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.setField9(value);
    }

    public static SubLObject _csetf_kctr_start(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.setField9(value);
    }

    public static final SubLObject _csetf_kctr_end_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KCT_RUNSTATE_P);
        return v_object.setField10(value);
    }

    public static SubLObject _csetf_kctr_end(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kct_runstate_p(v_object) : "! kbq_query_run.kct_runstate_p(v_object) " + "kbq_query_run.kct_runstate_p error :" + v_object;
        return v_object.setField10(value);
    }

    public static final SubLObject make_kct_runstate_alt(SubLObject arglist) {
        if (arglist == UNPROVIDED) {
            arglist = NIL;
        }
        {
            SubLObject v_new = new com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native();
            SubLObject next = NIL;
            for (next = arglist; NIL != next; next = cddr(next)) {
                {
                    SubLObject current_arg = next.first();
                    SubLObject current_value = cadr(next);
                    SubLObject pcase_var = current_arg;
                    if (pcase_var.eql($ID)) {
                        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_id(v_new, current_value);
                    } else {
                        if (pcase_var.eql($LOCK)) {
                            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_lock(v_new, current_value);
                        } else {
                            if (pcase_var.eql($TEST_SPEC)) {
                                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_test_spec(v_new, current_value);
                            } else {
                                if (pcase_var.eql($RESULT)) {
                                    com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_result(v_new, current_value);
                                } else {
                                    if (pcase_var.eql($QUERY_RUNSTATE)) {
                                        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_query_runstate(v_new, current_value);
                                    } else {
                                        if (pcase_var.eql($TEST_SET_RUNSTATE)) {
                                            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_test_set_runstate(v_new, current_value);
                                        } else {
                                            if (pcase_var.eql($RUN_STATUS)) {
                                                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_run_status(v_new, current_value);
                                            } else {
                                                if (pcase_var.eql($START)) {
                                                    com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_start(v_new, current_value);
                                                } else {
                                                    if (pcase_var.eql($END)) {
                                                        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_end(v_new, current_value);
                                                    } else {
                                                        Errors.error($str_alt256$Invalid_slot__S_for_construction_, current_arg);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return v_new;
        }
    }

    public static SubLObject make_kct_runstate(SubLObject arglist) {
        if (arglist == UNPROVIDED) {
            arglist = NIL;
        }
        final SubLObject v_new = new com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_native();
        SubLObject next;
        SubLObject current_arg;
        SubLObject current_value;
        SubLObject pcase_var;
        for (next = NIL, next = arglist; NIL != next; next = cddr(next)) {
            current_arg = next.first();
            current_value = cadr(next);
            pcase_var = current_arg;
            if (pcase_var.eql($ID)) {
                kbq_query_run._csetf_kctr_id(v_new, current_value);
            } else
                if (pcase_var.eql($LOCK)) {
                    kbq_query_run._csetf_kctr_lock(v_new, current_value);
                } else
                    if (pcase_var.eql($TEST_SPEC)) {
                        kbq_query_run._csetf_kctr_test_spec(v_new, current_value);
                    } else
                        if (pcase_var.eql($RESULT)) {
                            kbq_query_run._csetf_kctr_result(v_new, current_value);
                        } else
                            if (pcase_var.eql($QUERY_RUNSTATE)) {
                                kbq_query_run._csetf_kctr_query_runstate(v_new, current_value);
                            } else
                                if (pcase_var.eql(kbq_query_run.$TEST_SET_RUNSTATE)) {
                                    kbq_query_run._csetf_kctr_test_set_runstate(v_new, current_value);
                                } else
                                    if (pcase_var.eql($RUN_STATUS)) {
                                        kbq_query_run._csetf_kctr_run_status(v_new, current_value);
                                    } else
                                        if (pcase_var.eql($START)) {
                                            kbq_query_run._csetf_kctr_start(v_new, current_value);
                                        } else
                                            if (pcase_var.eql($END)) {
                                                kbq_query_run._csetf_kctr_end(v_new, current_value);
                                            } else {
                                                Errors.error(kbq_query_run.$str298$Invalid_slot__S_for_construction_, current_arg);
                                            }








        }
        return v_new;
    }

    public static SubLObject visit_defstruct_kct_runstate(final SubLObject obj, final SubLObject visitor_fn) {
        funcall(visitor_fn, obj, $BEGIN, kbq_query_run.MAKE_KCT_RUNSTATE, NINE_INTEGER);
        funcall(visitor_fn, obj, $SLOT, $ID, kbq_query_run.kctr_id(obj));
        funcall(visitor_fn, obj, $SLOT, $LOCK, kbq_query_run.kctr_lock(obj));
        funcall(visitor_fn, obj, $SLOT, $TEST_SPEC, kbq_query_run.kctr_test_spec(obj));
        funcall(visitor_fn, obj, $SLOT, $RESULT, kbq_query_run.kctr_result(obj));
        funcall(visitor_fn, obj, $SLOT, $QUERY_RUNSTATE, kbq_query_run.kctr_query_runstate(obj));
        funcall(visitor_fn, obj, $SLOT, kbq_query_run.$TEST_SET_RUNSTATE, kbq_query_run.kctr_test_set_runstate(obj));
        funcall(visitor_fn, obj, $SLOT, $RUN_STATUS, kbq_query_run.kctr_run_status(obj));
        funcall(visitor_fn, obj, $SLOT, $START, kbq_query_run.kctr_start(obj));
        funcall(visitor_fn, obj, $SLOT, $END, kbq_query_run.kctr_end(obj));
        funcall(visitor_fn, obj, $END, kbq_query_run.MAKE_KCT_RUNSTATE, NINE_INTEGER);
        return obj;
    }

    public static SubLObject visit_defstruct_object_kct_runstate_method(final SubLObject obj, final SubLObject visitor_fn) {
        return kbq_query_run.visit_defstruct_kct_runstate(obj, visitor_fn);
    }

    public static final SubLObject new_kct_runstate_alt(SubLObject test_spec, SubLObject test_set_runstate) {
        if (test_set_runstate == UNPROVIDED) {
            test_set_runstate = NIL;
        }
        SubLTrampolineFile.checkType(test_spec, KCT_TEST_SPEC_P);
        if (NIL != test_set_runstate) {
            SubLTrampolineFile.checkType(test_set_runstate, KCT_SET_RUNSTATE_P);
        }
        {
            SubLObject kctr = com.cyc.cycjava.cycl.inference.kbq_query_run.make_kct_runstate(UNPROVIDED);
            SubLObject id = com.cyc.cycjava.cycl.inference.kbq_query_run.next_runstate_id();
            com.cyc.cycjava.cycl.inference.kbq_query_run.runstate_add_object(id, kctr);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_id(kctr, id);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_test_spec(kctr, test_spec);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_lock(kctr, make_lock($$$KCT_Runstate_Lock));
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_query_runstate(kctr, NIL);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_test_set_runstate(kctr, test_set_runstate);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_run_status(kctr, $NONE);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_start(kctr, NIL);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_end(kctr, NIL);
            return kctr;
        }
    }

    public static SubLObject new_kct_runstate(final SubLObject test_spec, SubLObject test_set_runstate) {
        if (test_set_runstate == UNPROVIDED) {
            test_set_runstate = NIL;
        }
        assert NIL != kct_utils.kct_test_spec_p(test_spec, UNPROVIDED) : "! kct_utils.kct_test_spec_p(test_spec, .UNPROVIDED) " + ("kct_utils.kct_test_spec_p(test_spec, CommonSymbols.UNPROVIDED) " + "CommonSymbols.NIL != kct_utils.kct_test_spec_p(test_spec, CommonSymbols.UNPROVIDED) ") + test_spec;
        if (((NIL != test_set_runstate) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == kbq_query_run.kct_set_runstate_p(test_set_runstate))) {
            throw new AssertionError(test_set_runstate);
        }
        final SubLObject kctr = kbq_query_run.make_kct_runstate(UNPROVIDED);
        final SubLObject id = kbq_query_run.next_runstate_id();
        kbq_query_run.runstate_add_object(id, kctr);
        kbq_query_run._csetf_kctr_id(kctr, id);
        kbq_query_run._csetf_kctr_test_spec(kctr, test_spec);
        kbq_query_run._csetf_kctr_lock(kctr, make_lock(kbq_query_run.$$$KCT_Runstate_Lock));
        kbq_query_run._csetf_kctr_query_runstate(kctr, NIL);
        kbq_query_run._csetf_kctr_test_set_runstate(kctr, test_set_runstate);
        kbq_query_run._csetf_kctr_run_status(kctr, $NONE);
        kbq_query_run._csetf_kctr_start(kctr, NIL);
        kbq_query_run._csetf_kctr_end(kctr, NIL);
        return kctr;
    }

    public static final SubLObject destroy_kct_runstate_alt(SubLObject kctr) {
        SubLTrampolineFile.checkType(kctr, KCT_RUNSTATE_P);
        com.cyc.cycjava.cycl.inference.kbq_query_run.runstate_rem_object(com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_id(kctr));
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_id(kctr, NIL);
        if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_set_runstate_p(com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_test_set_runstate(kctr))) {
            com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_test_runstate_remove(com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_test_set_runstate(kctr), kctr);
        }
        if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_query_runstate(kctr)) {
            com.cyc.cycjava.cycl.inference.kbq_query_run.destroy_kbq_runstate(com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_query_runstate(kctr));
        }
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_test_spec(kctr, NIL);
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_lock(kctr, NIL);
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_result(kctr, NIL);
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_run_status(kctr, NIL);
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_start(kctr, NIL);
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_end(kctr, NIL);
        return NIL;
    }

    public static SubLObject destroy_kct_runstate(final SubLObject kctr) {
        assert NIL != kbq_query_run.kct_runstate_p(kctr) : "! kbq_query_run.kct_runstate_p(kctr) " + ("kbq_query_run.kct_runstate_p(kctr) " + "CommonSymbols.NIL != kbq_query_run.kct_runstate_p(kctr) ") + kctr;
        kbq_query_run.runstate_rem_object(kbq_query_run.kctr_id(kctr));
        kbq_query_run._csetf_kctr_id(kctr, NIL);
        if (NIL != kbq_query_run.kct_set_runstate_p(kbq_query_run.kctr_test_set_runstate(kctr))) {
            kbq_query_run.kctsr_test_runstate_remove(kbq_query_run.kctr_test_set_runstate(kctr), kctr);
        }
        if (NIL != kbq_query_run.kctr_query_runstate(kctr)) {
            kbq_query_run.destroy_kbq_runstate(kbq_query_run.kctr_query_runstate(kctr));
        }
        kbq_query_run._csetf_kctr_test_spec(kctr, NIL);
        kbq_query_run._csetf_kctr_lock(kctr, NIL);
        kbq_query_run._csetf_kctr_result(kctr, NIL);
        kbq_query_run._csetf_kctr_run_status(kctr, NIL);
        kbq_query_run._csetf_kctr_start(kctr, NIL);
        kbq_query_run._csetf_kctr_end(kctr, NIL);
        return NIL;
    }

    public static final SubLObject kct_runstate_test_spec_alt(SubLObject kctr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_test_spec(kctr);
    }

    public static SubLObject kct_runstate_test_spec(final SubLObject kctr) {
        return kbq_query_run.kctr_test_spec(kctr);
    }

    public static final SubLObject kct_runstate_lock_alt(SubLObject kctr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_lock(kctr);
    }

    public static SubLObject kct_runstate_lock(final SubLObject kctr) {
        return kbq_query_run.kctr_lock(kctr);
    }

    public static final SubLObject kct_runstate_result_alt(SubLObject kctr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_result(kctr);
    }

    public static SubLObject kct_runstate_result(final SubLObject kctr) {
        return kbq_query_run.kctr_result(kctr);
    }

    public static final SubLObject kct_runstate_query_runstate_alt(SubLObject kctr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_query_runstate(kctr);
    }

    public static SubLObject kct_runstate_query_runstate(final SubLObject kctr) {
        return kbq_query_run.kctr_query_runstate(kctr);
    }

    public static final SubLObject kct_runstate_test_set_runstate_alt(SubLObject kctr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_test_set_runstate(kctr);
    }

    public static SubLObject kct_runstate_test_set_runstate(final SubLObject kctr) {
        return kbq_query_run.kctr_test_set_runstate(kctr);
    }

    public static final SubLObject kct_runstate_inference_alt(SubLObject kctr) {
        {
            SubLObject kbq_runstate = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_query_runstate(kctr);
            if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_runstate_p(kbq_runstate)) {
                return com.cyc.cycjava.cycl.inference.kbq_query_run.kbqr_inference(kbq_runstate);
            }
        }
        return NIL;
    }

    public static SubLObject kct_runstate_inference(final SubLObject kctr) {
        final SubLObject kbq_runstate = kbq_query_run.kct_runstate_query_runstate(kctr);
        if (NIL != kbq_query_run.kbq_runstate_p(kbq_runstate)) {
            return kbq_query_run.kbqr_inference(kbq_runstate);
        }
        return NIL;
    }

    /**
     *
     *
     * @return :success, :failure, :error, or NIL
     */
    @LispMethod(comment = "@return :success, :failure, :error, or NIL")
    public static final SubLObject kct_runstate_result_status_alt(SubLObject kctr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_status(com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_result(kctr));
    }

    /**
     *
     *
     * @return :success, :failure, :error, or NIL
     */
    @LispMethod(comment = "@return :success, :failure, :error, or NIL")
    public static SubLObject kct_runstate_result_status(final SubLObject kctr) {
        return kbq_query_run.kct_test_run_status(kbq_query_run.kct_runstate_result(kctr));
    }

    public static final SubLObject kct_runstate_failure_explanation_alt(SubLObject kctr) {
        {
            SubLObject test_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_result(kctr);
            SubLObject query_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_query_run(test_run);
            SubLObject query_results = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_result(query_run);
            SubLObject test_spec = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_test_spec(kctr);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.why_kct_failure(test_spec, query_results);
        }
    }

    public static SubLObject kct_runstate_failure_explanation(final SubLObject kctr) {
        final SubLObject test_run = kbq_query_run.kct_runstate_result(kctr);
        final SubLObject query_run = kbq_query_run.kct_test_run_query_run(test_run);
        final SubLObject raw_query_results = kbq_query_run.kbq_query_run_result(query_run);
        final SubLObject actual_results = raw_query_results.first();
        final SubLObject hypothetical_bindings = second(raw_query_results);
        final SubLObject test_spec = kbq_query_run.kct_runstate_test_spec(kctr);
        return kbq_query_run.why_kct_failure(test_spec, actual_results, hypothetical_bindings);
    }

    public static final SubLObject kct_runstate_metric_value_alt(SubLObject kctr, SubLObject metric) {
        {
            SubLObject test_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_result(kctr);
            SubLObject query_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_query_run(test_run);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_metric_value(query_run, metric, UNPROVIDED);
        }
    }

    public static SubLObject kct_runstate_metric_value(final SubLObject kctr, final SubLObject metric) {
        final SubLObject test_run = kbq_query_run.kct_runstate_result(kctr);
        final SubLObject query_run = kbq_query_run.kct_test_run_query_run(test_run);
        return kbq_query_run.kbq_extract_query_run_metric_value(query_run, metric, UNPROVIDED);
    }

    public static final SubLObject kct_runstate_run_status_alt(SubLObject kctr) {
        SubLTrampolineFile.checkType(kctr, KCT_RUNSTATE_P);
        {
            SubLObject kbqr = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_runstate_query_runstate(kctr);
            if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_runstate_p(kbqr)) {
                return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_runstate_run_status(kbqr);
            }
        }
        return NIL;
    }

    public static SubLObject kct_runstate_run_status(final SubLObject kctr) {
        assert NIL != kbq_query_run.kct_runstate_p(kctr) : "! kbq_query_run.kct_runstate_p(kctr) " + ("kbq_query_run.kct_runstate_p(kctr) " + "CommonSymbols.NIL != kbq_query_run.kct_runstate_p(kctr) ") + kctr;
        final SubLObject kbqr = kbq_query_run.kct_runstate_query_runstate(kctr);
        if (NIL != kbq_query_run.kbq_runstate_p(kbqr)) {
            return kbq_query_run.kbq_runstate_run_status(kbqr);
        }
        return NIL;
    }

    public static final SubLObject kct_runstate_start_alt(SubLObject kctr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_start(kctr);
    }

    public static SubLObject kct_runstate_start(final SubLObject kctr) {
        return kbq_query_run.kctr_start(kctr);
    }

    public static final SubLObject kct_runstate_end_alt(SubLObject kctr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_end(kctr);
    }

    public static SubLObject kct_runstate_end(final SubLObject kctr) {
        return kbq_query_run.kctr_end(kctr);
    }

    public static final SubLObject set_kctr_result_alt(SubLObject kctr, SubLObject test_run) {
        SubLTrampolineFile.checkType(kctr, KCT_RUNSTATE_P);
        SubLTrampolineFile.checkType(test_run, KCT_TEST_RUN_P);
        {
            SubLObject lock = com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_lock(kctr);
            SubLObject release = NIL;
            try {
                release = seize_lock(lock);
                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_result(kctr, test_run);
            } finally {
                if (NIL != release) {
                    release_lock(lock);
                }
            }
        }
        return kctr;
    }

    public static SubLObject set_kctr_result(final SubLObject kctr, final SubLObject test_run) {
        assert NIL != kbq_query_run.kct_runstate_p(kctr) : "! kbq_query_run.kct_runstate_p(kctr) " + ("kbq_query_run.kct_runstate_p(kctr) " + "CommonSymbols.NIL != kbq_query_run.kct_runstate_p(kctr) ") + kctr;
        assert NIL != kbq_query_run.kct_test_run_p(test_run) : "! kbq_query_run.kct_test_run_p(test_run) " + ("kbq_query_run.kct_test_run_p(test_run) " + "CommonSymbols.NIL != kbq_query_run.kct_test_run_p(test_run) ") + test_run;
        final SubLObject lock = kbq_query_run.kctr_lock(kctr);
        SubLObject release = NIL;
        try {
            release = seize_lock(lock);
            kbq_query_run._csetf_kctr_result(kctr, test_run);
        } finally {
            if (NIL != release) {
                release_lock(lock);
            }
        }
        return kctr;
    }

    public static final SubLObject set_kctr_query_runstate_alt(SubLObject kctr, SubLObject kbqr) {
        SubLTrampolineFile.checkType(kctr, KCT_RUNSTATE_P);
        SubLTrampolineFile.checkType(kbqr, KBQ_RUNSTATE_P);
        {
            SubLObject lock = com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_lock(kctr);
            SubLObject release = NIL;
            try {
                release = seize_lock(lock);
                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_query_runstate(kctr, kbqr);
            } finally {
                if (NIL != release) {
                    release_lock(lock);
                }
            }
        }
        return kctr;
    }

    public static SubLObject set_kctr_query_runstate(final SubLObject kctr, final SubLObject kbqr) {
        assert NIL != kbq_query_run.kct_runstate_p(kctr) : "! kbq_query_run.kct_runstate_p(kctr) " + ("kbq_query_run.kct_runstate_p(kctr) " + "CommonSymbols.NIL != kbq_query_run.kct_runstate_p(kctr) ") + kctr;
        assert NIL != kbq_query_run.kbq_runstate_p(kbqr) : "! kbq_query_run.kbq_runstate_p(kbqr) " + ("kbq_query_run.kbq_runstate_p(kbqr) " + "CommonSymbols.NIL != kbq_query_run.kbq_runstate_p(kbqr) ") + kbqr;
        final SubLObject lock = kbq_query_run.kctr_lock(kctr);
        SubLObject release = NIL;
        try {
            release = seize_lock(lock);
            kbq_query_run._csetf_kctr_query_runstate(kctr, kbqr);
        } finally {
            if (NIL != release) {
                release_lock(lock);
            }
        }
        return kctr;
    }

    public static final SubLObject set_kctr_test_set_runstate_alt(SubLObject kctr, SubLObject kctsr) {
        SubLTrampolineFile.checkType(kctr, KCT_RUNSTATE_P);
        SubLTrampolineFile.checkType(kctsr, KCT_SET_RUNSTATE_P);
        {
            SubLObject lock = com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_lock(kctr);
            SubLObject release = NIL;
            try {
                release = seize_lock(lock);
                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_test_set_runstate(kctr, kctsr);
            } finally {
                if (NIL != release) {
                    release_lock(lock);
                }
            }
        }
        return kctr;
    }

    public static SubLObject set_kctr_test_set_runstate(final SubLObject kctr, final SubLObject kctsr) {
        assert NIL != kbq_query_run.kct_runstate_p(kctr) : "! kbq_query_run.kct_runstate_p(kctr) " + ("kbq_query_run.kct_runstate_p(kctr) " + "CommonSymbols.NIL != kbq_query_run.kct_runstate_p(kctr) ") + kctr;
        assert NIL != kbq_query_run.kct_set_runstate_p(kctsr) : "! kbq_query_run.kct_set_runstate_p(kctsr) " + ("kbq_query_run.kct_set_runstate_p(kctsr) " + "CommonSymbols.NIL != kbq_query_run.kct_set_runstate_p(kctsr) ") + kctsr;
        final SubLObject lock = kbq_query_run.kctr_lock(kctr);
        SubLObject release = NIL;
        try {
            release = seize_lock(lock);
            kbq_query_run._csetf_kctr_test_set_runstate(kctr, kctsr);
        } finally {
            if (NIL != release) {
                release_lock(lock);
            }
        }
        return kctr;
    }

    public static final SubLObject set_kctr_run_status_alt(SubLObject kctr, SubLObject run_status) {
        SubLTrampolineFile.checkType(kctr, KCT_RUNSTATE_P);
        SubLTrampolineFile.checkType(run_status, KEYWORDP);
        {
            SubLObject lock = com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_lock(kctr);
            SubLObject release = NIL;
            try {
                release = seize_lock(lock);
                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_run_status(kctr, run_status);
            } finally {
                if (NIL != release) {
                    release_lock(lock);
                }
            }
        }
        return kctr;
    }

    public static SubLObject set_kctr_run_status(final SubLObject kctr, final SubLObject run_status) {
        assert NIL != kbq_query_run.kct_runstate_p(kctr) : "! kbq_query_run.kct_runstate_p(kctr) " + ("kbq_query_run.kct_runstate_p(kctr) " + "CommonSymbols.NIL != kbq_query_run.kct_runstate_p(kctr) ") + kctr;
        assert NIL != keywordp(run_status) : "! keywordp(run_status) " + ("Types.keywordp(run_status) " + "CommonSymbols.NIL != Types.keywordp(run_status) ") + run_status;
        final SubLObject lock = kbq_query_run.kctr_lock(kctr);
        SubLObject release = NIL;
        try {
            release = seize_lock(lock);
            kbq_query_run._csetf_kctr_run_status(kctr, run_status);
        } finally {
            if (NIL != release) {
                release_lock(lock);
            }
        }
        return kctr;
    }

    public static final SubLObject set_kctr_start_alt(SubLObject kctr, SubLObject time) {
        if (time == UNPROVIDED) {
            time = NIL;
        }
        if (NIL == time) {
            time = get_universal_time();
        }
        SubLTrampolineFile.checkType(kctr, KCT_RUNSTATE_P);
        {
            SubLObject lock = com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_lock(kctr);
            SubLObject release = NIL;
            try {
                release = seize_lock(lock);
                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_start(kctr, time);
            } finally {
                if (NIL != release) {
                    release_lock(lock);
                }
            }
        }
        return kctr;
    }

    public static SubLObject set_kctr_start(final SubLObject kctr, SubLObject time) {
        if (time == UNPROVIDED) {
            time = NIL;
        }
        if (NIL == time) {
            time = get_universal_time();
        }
        assert NIL != kbq_query_run.kct_runstate_p(kctr) : "! kbq_query_run.kct_runstate_p(kctr) " + ("kbq_query_run.kct_runstate_p(kctr) " + "CommonSymbols.NIL != kbq_query_run.kct_runstate_p(kctr) ") + kctr;
        final SubLObject lock = kbq_query_run.kctr_lock(kctr);
        SubLObject release = NIL;
        try {
            release = seize_lock(lock);
            kbq_query_run._csetf_kctr_start(kctr, time);
        } finally {
            if (NIL != release) {
                release_lock(lock);
            }
        }
        return kctr;
    }

    public static final SubLObject set_kctr_end_alt(SubLObject kctr, SubLObject time) {
        if (time == UNPROVIDED) {
            time = NIL;
        }
        if (NIL == time) {
            time = get_universal_time();
        }
        SubLTrampolineFile.checkType(kctr, KCT_RUNSTATE_P);
        {
            SubLObject lock = com.cyc.cycjava.cycl.inference.kbq_query_run.kctr_lock(kctr);
            SubLObject release = NIL;
            try {
                release = seize_lock(lock);
                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctr_end(kctr, time);
            } finally {
                if (NIL != release) {
                    release_lock(lock);
                }
            }
        }
        return kctr;
    }

    public static SubLObject set_kctr_end(final SubLObject kctr, SubLObject time) {
        if (time == UNPROVIDED) {
            time = NIL;
        }
        if (NIL == time) {
            time = get_universal_time();
        }
        assert NIL != kbq_query_run.kct_runstate_p(kctr) : "! kbq_query_run.kct_runstate_p(kctr) " + ("kbq_query_run.kct_runstate_p(kctr) " + "CommonSymbols.NIL != kbq_query_run.kct_runstate_p(kctr) ") + kctr;
        final SubLObject lock = kbq_query_run.kctr_lock(kctr);
        SubLObject release = NIL;
        try {
            release = seize_lock(lock);
            kbq_query_run._csetf_kctr_end(kctr, time);
        } finally {
            if (NIL != release) {
                release_lock(lock);
            }
        }
        return kctr;
    }

    public static final SubLObject kct_set_runstate_print_function_trampoline_alt(SubLObject v_object, SubLObject stream) {
        compatibility.default_struct_print_function(v_object, stream, ZERO_INTEGER);
        return NIL;
    }

    public static SubLObject kct_set_runstate_print_function_trampoline(final SubLObject v_object, final SubLObject stream) {
        compatibility.default_struct_print_function(v_object, stream, ZERO_INTEGER);
        return NIL;
    }

    public static final SubLObject kct_set_runstate_p_alt(SubLObject v_object) {
        return v_object.getClass() == com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.class ? ((SubLObject) (T)) : NIL;
    }

    public static SubLObject kct_set_runstate_p(final SubLObject v_object) {
        return v_object.getClass() == com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native.class ? T : NIL;
    }

    public static final SubLObject kctsr_id_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KCT_SET_RUNSTATE_P);
        return v_object.getField2();
    }

    public static SubLObject kctsr_id(final SubLObject v_object) {
        assert NIL != kbq_query_run.kct_set_runstate_p(v_object) : "! kbq_query_run.kct_set_runstate_p(v_object) " + "kbq_query_run.kct_set_runstate_p error :" + v_object;
        return v_object.getField2();
    }

    public static final SubLObject kctsr_lock_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KCT_SET_RUNSTATE_P);
        return v_object.getField3();
    }

    public static SubLObject kctsr_lock(final SubLObject v_object) {
        assert NIL != kbq_query_run.kct_set_runstate_p(v_object) : "! kbq_query_run.kct_set_runstate_p(v_object) " + "kbq_query_run.kct_set_runstate_p error :" + v_object;
        return v_object.getField3();
    }

    public static final SubLObject kctsr_test_set_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KCT_SET_RUNSTATE_P);
        return v_object.getField4();
    }

    public static SubLObject kctsr_test_set(final SubLObject v_object) {
        assert NIL != kbq_query_run.kct_set_runstate_p(v_object) : "! kbq_query_run.kct_set_runstate_p(v_object) " + "kbq_query_run.kct_set_runstate_p error :" + v_object;
        return v_object.getField4();
    }

    public static final SubLObject kctsr_result_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KCT_SET_RUNSTATE_P);
        return v_object.getField5();
    }

    public static SubLObject kctsr_result(final SubLObject v_object) {
        assert NIL != kbq_query_run.kct_set_runstate_p(v_object) : "! kbq_query_run.kct_set_runstate_p(v_object) " + "kbq_query_run.kct_set_runstate_p error :" + v_object;
        return v_object.getField5();
    }

    public static final SubLObject kctsr_test_runstates_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KCT_SET_RUNSTATE_P);
        return v_object.getField6();
    }

    public static SubLObject kctsr_test_runstates(final SubLObject v_object) {
        assert NIL != kbq_query_run.kct_set_runstate_p(v_object) : "! kbq_query_run.kct_set_runstate_p(v_object) " + "kbq_query_run.kct_set_runstate_p error :" + v_object;
        return v_object.getField6();
    }

    public static final SubLObject kctsr_run_status_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KCT_SET_RUNSTATE_P);
        return v_object.getField7();
    }

    public static SubLObject kctsr_run_status(final SubLObject v_object) {
        assert NIL != kbq_query_run.kct_set_runstate_p(v_object) : "! kbq_query_run.kct_set_runstate_p(v_object) " + "kbq_query_run.kct_set_runstate_p error :" + v_object;
        return v_object.getField7();
    }

    public static final SubLObject kctsr_start_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KCT_SET_RUNSTATE_P);
        return v_object.getField8();
    }

    public static SubLObject kctsr_start(final SubLObject v_object) {
        assert NIL != kbq_query_run.kct_set_runstate_p(v_object) : "! kbq_query_run.kct_set_runstate_p(v_object) " + "kbq_query_run.kct_set_runstate_p error :" + v_object;
        return v_object.getField8();
    }

    public static final SubLObject kctsr_end_alt(SubLObject v_object) {
        SubLTrampolineFile.checkType(v_object, KCT_SET_RUNSTATE_P);
        return v_object.getField9();
    }

    public static SubLObject kctsr_end(final SubLObject v_object) {
        assert NIL != kbq_query_run.kct_set_runstate_p(v_object) : "! kbq_query_run.kct_set_runstate_p(v_object) " + "kbq_query_run.kct_set_runstate_p error :" + v_object;
        return v_object.getField9();
    }

    public static final SubLObject _csetf_kctsr_id_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KCT_SET_RUNSTATE_P);
        return v_object.setField2(value);
    }

    public static SubLObject _csetf_kctsr_id(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kct_set_runstate_p(v_object) : "! kbq_query_run.kct_set_runstate_p(v_object) " + "kbq_query_run.kct_set_runstate_p error :" + v_object;
        return v_object.setField2(value);
    }

    public static final SubLObject _csetf_kctsr_lock_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KCT_SET_RUNSTATE_P);
        return v_object.setField3(value);
    }

    public static SubLObject _csetf_kctsr_lock(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kct_set_runstate_p(v_object) : "! kbq_query_run.kct_set_runstate_p(v_object) " + "kbq_query_run.kct_set_runstate_p error :" + v_object;
        return v_object.setField3(value);
    }

    public static final SubLObject _csetf_kctsr_test_set_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KCT_SET_RUNSTATE_P);
        return v_object.setField4(value);
    }

    public static SubLObject _csetf_kctsr_test_set(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kct_set_runstate_p(v_object) : "! kbq_query_run.kct_set_runstate_p(v_object) " + "kbq_query_run.kct_set_runstate_p error :" + v_object;
        return v_object.setField4(value);
    }

    public static final SubLObject _csetf_kctsr_result_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KCT_SET_RUNSTATE_P);
        return v_object.setField5(value);
    }

    public static SubLObject _csetf_kctsr_result(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kct_set_runstate_p(v_object) : "! kbq_query_run.kct_set_runstate_p(v_object) " + "kbq_query_run.kct_set_runstate_p error :" + v_object;
        return v_object.setField5(value);
    }

    public static final SubLObject _csetf_kctsr_test_runstates_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KCT_SET_RUNSTATE_P);
        return v_object.setField6(value);
    }

    public static SubLObject _csetf_kctsr_test_runstates(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kct_set_runstate_p(v_object) : "! kbq_query_run.kct_set_runstate_p(v_object) " + "kbq_query_run.kct_set_runstate_p error :" + v_object;
        return v_object.setField6(value);
    }

    public static final SubLObject _csetf_kctsr_run_status_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KCT_SET_RUNSTATE_P);
        return v_object.setField7(value);
    }

    public static SubLObject _csetf_kctsr_run_status(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kct_set_runstate_p(v_object) : "! kbq_query_run.kct_set_runstate_p(v_object) " + "kbq_query_run.kct_set_runstate_p error :" + v_object;
        return v_object.setField7(value);
    }

    public static final SubLObject _csetf_kctsr_start_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KCT_SET_RUNSTATE_P);
        return v_object.setField8(value);
    }

    public static SubLObject _csetf_kctsr_start(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kct_set_runstate_p(v_object) : "! kbq_query_run.kct_set_runstate_p(v_object) " + "kbq_query_run.kct_set_runstate_p error :" + v_object;
        return v_object.setField8(value);
    }

    public static final SubLObject _csetf_kctsr_end_alt(SubLObject v_object, SubLObject value) {
        SubLTrampolineFile.checkType(v_object, KCT_SET_RUNSTATE_P);
        return v_object.setField9(value);
    }

    public static SubLObject _csetf_kctsr_end(final SubLObject v_object, final SubLObject value) {
        assert NIL != kbq_query_run.kct_set_runstate_p(v_object) : "! kbq_query_run.kct_set_runstate_p(v_object) " + "kbq_query_run.kct_set_runstate_p error :" + v_object;
        return v_object.setField9(value);
    }

    public static final SubLObject make_kct_set_runstate_alt(SubLObject arglist) {
        if (arglist == UNPROVIDED) {
            arglist = NIL;
        }
        {
            SubLObject v_new = new com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native();
            SubLObject next = NIL;
            for (next = arglist; NIL != next; next = cddr(next)) {
                {
                    SubLObject current_arg = next.first();
                    SubLObject current_value = cadr(next);
                    SubLObject pcase_var = current_arg;
                    if (pcase_var.eql($ID)) {
                        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_id(v_new, current_value);
                    } else {
                        if (pcase_var.eql($LOCK)) {
                            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_lock(v_new, current_value);
                        } else {
                            if (pcase_var.eql($TEST_SET)) {
                                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_test_set(v_new, current_value);
                            } else {
                                if (pcase_var.eql($RESULT)) {
                                    com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_result(v_new, current_value);
                                } else {
                                    if (pcase_var.eql($TEST_RUNSTATES)) {
                                        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_test_runstates(v_new, current_value);
                                    } else {
                                        if (pcase_var.eql($RUN_STATUS)) {
                                            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_run_status(v_new, current_value);
                                        } else {
                                            if (pcase_var.eql($START)) {
                                                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_start(v_new, current_value);
                                            } else {
                                                if (pcase_var.eql($END)) {
                                                    com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_end(v_new, current_value);
                                                } else {
                                                    Errors.error($str_alt256$Invalid_slot__S_for_construction_, current_arg);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return v_new;
        }
    }

    public static SubLObject make_kct_set_runstate(SubLObject arglist) {
        if (arglist == UNPROVIDED) {
            arglist = NIL;
        }
        final SubLObject v_new = new com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_native();
        SubLObject next;
        SubLObject current_arg;
        SubLObject current_value;
        SubLObject pcase_var;
        for (next = NIL, next = arglist; NIL != next; next = cddr(next)) {
            current_arg = next.first();
            current_value = cadr(next);
            pcase_var = current_arg;
            if (pcase_var.eql($ID)) {
                kbq_query_run._csetf_kctsr_id(v_new, current_value);
            } else
                if (pcase_var.eql($LOCK)) {
                    kbq_query_run._csetf_kctsr_lock(v_new, current_value);
                } else
                    if (pcase_var.eql($TEST_SET)) {
                        kbq_query_run._csetf_kctsr_test_set(v_new, current_value);
                    } else
                        if (pcase_var.eql($RESULT)) {
                            kbq_query_run._csetf_kctsr_result(v_new, current_value);
                        } else
                            if (pcase_var.eql($TEST_RUNSTATES)) {
                                kbq_query_run._csetf_kctsr_test_runstates(v_new, current_value);
                            } else
                                if (pcase_var.eql($RUN_STATUS)) {
                                    kbq_query_run._csetf_kctsr_run_status(v_new, current_value);
                                } else
                                    if (pcase_var.eql($START)) {
                                        kbq_query_run._csetf_kctsr_start(v_new, current_value);
                                    } else
                                        if (pcase_var.eql($END)) {
                                            kbq_query_run._csetf_kctsr_end(v_new, current_value);
                                        } else {
                                            Errors.error(kbq_query_run.$str298$Invalid_slot__S_for_construction_, current_arg);
                                        }







        }
        return v_new;
    }

    public static SubLObject visit_defstruct_kct_set_runstate(final SubLObject obj, final SubLObject visitor_fn) {
        funcall(visitor_fn, obj, $BEGIN, kbq_query_run.MAKE_KCT_SET_RUNSTATE, EIGHT_INTEGER);
        funcall(visitor_fn, obj, $SLOT, $ID, kbq_query_run.kctsr_id(obj));
        funcall(visitor_fn, obj, $SLOT, $LOCK, kbq_query_run.kctsr_lock(obj));
        funcall(visitor_fn, obj, $SLOT, $TEST_SET, kbq_query_run.kctsr_test_set(obj));
        funcall(visitor_fn, obj, $SLOT, $RESULT, kbq_query_run.kctsr_result(obj));
        funcall(visitor_fn, obj, $SLOT, $TEST_RUNSTATES, kbq_query_run.kctsr_test_runstates(obj));
        funcall(visitor_fn, obj, $SLOT, $RUN_STATUS, kbq_query_run.kctsr_run_status(obj));
        funcall(visitor_fn, obj, $SLOT, $START, kbq_query_run.kctsr_start(obj));
        funcall(visitor_fn, obj, $SLOT, $END, kbq_query_run.kctsr_end(obj));
        funcall(visitor_fn, obj, $END, kbq_query_run.MAKE_KCT_SET_RUNSTATE, EIGHT_INTEGER);
        return obj;
    }

    public static SubLObject visit_defstruct_object_kct_set_runstate_method(final SubLObject obj, final SubLObject visitor_fn) {
        return kbq_query_run.visit_defstruct_kct_set_runstate(obj, visitor_fn);
    }

    public static final SubLObject new_kct_set_runstate_alt(SubLObject test_set) {
        SubLTrampolineFile.checkType(test_set, KCT_TEST_COLLECTION_P);
        {
            SubLObject kctsr = com.cyc.cycjava.cycl.inference.kbq_query_run.make_kct_set_runstate(UNPROVIDED);
            SubLObject id = com.cyc.cycjava.cycl.inference.kbq_query_run.next_runstate_id();
            com.cyc.cycjava.cycl.inference.kbq_query_run.runstate_add_object(id, kctsr);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_id(kctsr, id);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_test_set(kctsr, test_set);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_lock(kctsr, make_lock($$$KCT_Set_Runstate_Lock));
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_result(kctsr, NIL);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_test_runstates(kctsr, NIL);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_run_status(kctsr, $NONE);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_start(kctsr, NIL);
            com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_end(kctsr, NIL);
            return kctsr;
        }
    }

    public static SubLObject new_kct_set_runstate(final SubLObject test_set) {
        assert NIL != kct_utils.kct_test_collection_p(test_set, UNPROVIDED) : "! kct_utils.kct_test_collection_p(test_set, .UNPROVIDED) " + ("kct_utils.kct_test_collection_p(test_set, CommonSymbols.UNPROVIDED) " + "CommonSymbols.NIL != kct_utils.kct_test_collection_p(test_set, CommonSymbols.UNPROVIDED) ") + test_set;
        final SubLObject kctsr = kbq_query_run.make_kct_set_runstate(UNPROVIDED);
        final SubLObject id = kbq_query_run.next_runstate_id();
        kbq_query_run.runstate_add_object(id, kctsr);
        kbq_query_run._csetf_kctsr_id(kctsr, id);
        kbq_query_run._csetf_kctsr_test_set(kctsr, test_set);
        kbq_query_run._csetf_kctsr_lock(kctsr, make_lock(kbq_query_run.$$$KCT_Set_Runstate_Lock));
        kbq_query_run._csetf_kctsr_result(kctsr, NIL);
        kbq_query_run._csetf_kctsr_test_runstates(kctsr, NIL);
        kbq_query_run._csetf_kctsr_run_status(kctsr, $NONE);
        kbq_query_run._csetf_kctsr_start(kctsr, NIL);
        kbq_query_run._csetf_kctsr_end(kctsr, NIL);
        return kctsr;
    }

    public static final SubLObject destroy_kct_set_runstate_alt(SubLObject kctsr) {
        SubLTrampolineFile.checkType(kctsr, KCT_SET_RUNSTATE_P);
        com.cyc.cycjava.cycl.inference.kbq_query_run.runstate_rem_object(com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_id(kctsr));
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_id(kctsr, NIL);
        {
            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_test_runstates(kctsr);
            SubLObject kctr = NIL;
            for (kctr = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , kctr = cdolist_list_var.first()) {
                com.cyc.cycjava.cycl.inference.kbq_query_run.destroy_kct_runstate(kctr);
            }
        }
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_test_set(kctsr, NIL);
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_lock(kctsr, NIL);
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_result(kctsr, NIL);
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_run_status(kctsr, NIL);
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_start(kctsr, NIL);
        com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_end(kctsr, NIL);
        return NIL;
    }

    public static SubLObject destroy_kct_set_runstate(final SubLObject kctsr) {
        assert NIL != kbq_query_run.kct_set_runstate_p(kctsr) : "! kbq_query_run.kct_set_runstate_p(kctsr) " + ("kbq_query_run.kct_set_runstate_p(kctsr) " + "CommonSymbols.NIL != kbq_query_run.kct_set_runstate_p(kctsr) ") + kctsr;
        kbq_query_run.runstate_rem_object(kbq_query_run.kctsr_id(kctsr));
        kbq_query_run._csetf_kctsr_id(kctsr, NIL);
        SubLObject cdolist_list_var = kbq_query_run.kctsr_test_runstates(kctsr);
        SubLObject kctr = NIL;
        kctr = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            kbq_query_run.destroy_kct_runstate(kctr);
            cdolist_list_var = cdolist_list_var.rest();
            kctr = cdolist_list_var.first();
        } 
        kbq_query_run._csetf_kctsr_test_set(kctsr, NIL);
        kbq_query_run._csetf_kctsr_lock(kctsr, NIL);
        kbq_query_run._csetf_kctsr_result(kctsr, NIL);
        kbq_query_run._csetf_kctsr_run_status(kctsr, NIL);
        kbq_query_run._csetf_kctsr_start(kctsr, NIL);
        kbq_query_run._csetf_kctsr_end(kctsr, NIL);
        return NIL;
    }

    public static final SubLObject kct_set_runstate_test_set_alt(SubLObject kctsr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_test_set(kctsr);
    }

    public static SubLObject kct_set_runstate_test_set(final SubLObject kctsr) {
        return kbq_query_run.kctsr_test_set(kctsr);
    }

    public static final SubLObject kct_set_runstate_lock_alt(SubLObject kctsr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_lock(kctsr);
    }

    public static SubLObject kct_set_runstate_lock(final SubLObject kctsr) {
        return kbq_query_run.kctsr_lock(kctsr);
    }

    public static final SubLObject kct_set_runstate_result_alt(SubLObject kctsr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_result(kctsr);
    }

    public static SubLObject kct_set_runstate_result(final SubLObject kctsr) {
        return kbq_query_run.kctsr_result(kctsr);
    }

    public static final SubLObject kct_set_runstate_test_runstates_alt(SubLObject kctsr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_test_runstates(kctsr);
    }

    public static SubLObject kct_set_runstate_test_runstates(final SubLObject kctsr) {
        return kbq_query_run.kctsr_test_runstates(kctsr);
    }

    public static final SubLObject kct_set_runstate_result_status_alt(SubLObject kctsr) {
        {
            SubLObject runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_test_runs(com.cyc.cycjava.cycl.inference.kbq_query_run.kct_set_runstate_result(kctsr));
            SubLObject errorP = find_if(symbol_function(KCT_ERROR_RESULT_P), runs, symbol_function(KCT_TEST_RUN_STATUS), UNPROVIDED, UNPROVIDED);
            SubLObject failureP = find_if(symbol_function(KCT_FAILURE_RESULT_P), runs, symbol_function(KCT_TEST_RUN_STATUS), UNPROVIDED, UNPROVIDED);
            if (NIL != errorP) {
                return $ERROR;
            }
            if (NIL != failureP) {
                return $FAILURE;
            }
            return $SUCCESS;
        }
    }

    public static SubLObject kct_set_runstate_result_status(final SubLObject kctsr) {
        final SubLObject runs = kbq_query_run.kct_test_set_run_test_runs(kbq_query_run.kct_set_runstate_result(kctsr));
        final SubLObject errorP = find_if(symbol_function(kbq_query_run.KCT_ERROR_RESULT_P), runs, symbol_function(kbq_query_run.KCT_TEST_RUN_STATUS), UNPROVIDED, UNPROVIDED);
        final SubLObject failureP = find_if(symbol_function(kbq_query_run.KCT_FAILURE_RESULT_P), runs, symbol_function(kbq_query_run.KCT_TEST_RUN_STATUS), UNPROVIDED, UNPROVIDED);
        if (NIL != errorP) {
            return $ERROR;
        }
        if (NIL != failureP) {
            return $FAILURE;
        }
        return $SUCCESS;
    }

    public static final SubLObject kct_set_runstate_run_status_alt(SubLObject kctsr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_run_status(kctsr);
    }

    public static SubLObject kct_set_runstate_run_status(final SubLObject kctsr) {
        return kbq_query_run.kctsr_run_status(kctsr);
    }

    public static final SubLObject kct_set_runstate_start_alt(SubLObject kctsr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_start(kctsr);
    }

    public static SubLObject kct_set_runstate_start(final SubLObject kctsr) {
        return kbq_query_run.kctsr_start(kctsr);
    }

    public static final SubLObject kct_set_runstate_end_alt(SubLObject kctsr) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_end(kctsr);
    }

    public static SubLObject kct_set_runstate_end(final SubLObject kctsr) {
        return kbq_query_run.kctsr_end(kctsr);
    }

    public static final SubLObject set_kctsr_result_alt(SubLObject kctsr, SubLObject test_set_run) {
        SubLTrampolineFile.checkType(kctsr, KCT_SET_RUNSTATE_P);
        SubLTrampolineFile.checkType(test_set_run, KCT_TEST_SET_RUN_P);
        {
            SubLObject lock = com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_lock(kctsr);
            SubLObject release = NIL;
            try {
                release = seize_lock(lock);
                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_result(kctsr, test_set_run);
            } finally {
                if (NIL != release) {
                    release_lock(lock);
                }
            }
        }
        return kctsr;
    }

    public static SubLObject set_kctsr_result(final SubLObject kctsr, final SubLObject test_set_run) {
        assert NIL != kbq_query_run.kct_set_runstate_p(kctsr) : "! kbq_query_run.kct_set_runstate_p(kctsr) " + ("kbq_query_run.kct_set_runstate_p(kctsr) " + "CommonSymbols.NIL != kbq_query_run.kct_set_runstate_p(kctsr) ") + kctsr;
        assert NIL != kbq_query_run.kct_test_set_run_p(test_set_run) : "! kbq_query_run.kct_test_set_run_p(test_set_run) " + ("kbq_query_run.kct_test_set_run_p(test_set_run) " + "CommonSymbols.NIL != kbq_query_run.kct_test_set_run_p(test_set_run) ") + test_set_run;
        final SubLObject lock = kbq_query_run.kctsr_lock(kctsr);
        SubLObject release = NIL;
        try {
            release = seize_lock(lock);
            kbq_query_run._csetf_kctsr_result(kctsr, test_set_run);
        } finally {
            if (NIL != release) {
                release_lock(lock);
            }
        }
        return kctsr;
    }

    public static final SubLObject kctsr_test_runstate_add_alt(SubLObject kctsr, SubLObject kctr) {
        SubLTrampolineFile.checkType(kctsr, KCT_SET_RUNSTATE_P);
        SubLTrampolineFile.checkType(kctr, KCT_RUNSTATE_P);
        {
            SubLObject lock = com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_lock(kctsr);
            SubLObject release = NIL;
            try {
                release = seize_lock(lock);
                {
                    SubLObject test_runstates = com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_test_runstates(kctsr);
                    com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_test_runstates(kctsr, list_utilities.add_to_end(kctr, test_runstates));
                }
            } finally {
                if (NIL != release) {
                    release_lock(lock);
                }
            }
        }
        return kctsr;
    }

    public static SubLObject kctsr_test_runstate_add(final SubLObject kctsr, final SubLObject kctr) {
        assert NIL != kbq_query_run.kct_set_runstate_p(kctsr) : "! kbq_query_run.kct_set_runstate_p(kctsr) " + ("kbq_query_run.kct_set_runstate_p(kctsr) " + "CommonSymbols.NIL != kbq_query_run.kct_set_runstate_p(kctsr) ") + kctsr;
        assert NIL != kbq_query_run.kct_runstate_p(kctr) : "! kbq_query_run.kct_runstate_p(kctr) " + ("kbq_query_run.kct_runstate_p(kctr) " + "CommonSymbols.NIL != kbq_query_run.kct_runstate_p(kctr) ") + kctr;
        final SubLObject lock = kbq_query_run.kctsr_lock(kctsr);
        SubLObject release = NIL;
        try {
            release = seize_lock(lock);
            final SubLObject test_runstates = kbq_query_run.kctsr_test_runstates(kctsr);
            kbq_query_run._csetf_kctsr_test_runstates(kctsr, add_to_end(kctr, test_runstates));
        } finally {
            if (NIL != release) {
                release_lock(lock);
            }
        }
        return kctsr;
    }

    public static final SubLObject kctsr_test_runstate_remove_alt(SubLObject kctsr, SubLObject kctr) {
        SubLTrampolineFile.checkType(kctsr, KCT_SET_RUNSTATE_P);
        SubLTrampolineFile.checkType(kctr, KCT_RUNSTATE_P);
        {
            SubLObject lock = com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_lock(kctsr);
            SubLObject release = NIL;
            try {
                release = seize_lock(lock);
                {
                    SubLObject test_runstates = com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_test_runstates(kctsr);
                    com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_test_runstates(kctsr, remove(kctr, test_runstates, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
                }
            } finally {
                if (NIL != release) {
                    release_lock(lock);
                }
            }
        }
        return kctsr;
    }

    public static SubLObject kctsr_test_runstate_remove(final SubLObject kctsr, final SubLObject kctr) {
        assert NIL != kbq_query_run.kct_set_runstate_p(kctsr) : "! kbq_query_run.kct_set_runstate_p(kctsr) " + ("kbq_query_run.kct_set_runstate_p(kctsr) " + "CommonSymbols.NIL != kbq_query_run.kct_set_runstate_p(kctsr) ") + kctsr;
        assert NIL != kbq_query_run.kct_runstate_p(kctr) : "! kbq_query_run.kct_runstate_p(kctr) " + ("kbq_query_run.kct_runstate_p(kctr) " + "CommonSymbols.NIL != kbq_query_run.kct_runstate_p(kctr) ") + kctr;
        final SubLObject lock = kbq_query_run.kctsr_lock(kctsr);
        SubLObject release = NIL;
        try {
            release = seize_lock(lock);
            final SubLObject test_runstates = kbq_query_run.kctsr_test_runstates(kctsr);
            kbq_query_run._csetf_kctsr_test_runstates(kctsr, remove(kctr, test_runstates, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
        } finally {
            if (NIL != release) {
                release_lock(lock);
            }
        }
        return kctsr;
    }

    public static final SubLObject set_kctsr_run_status_alt(SubLObject kctsr, SubLObject run_status) {
        SubLTrampolineFile.checkType(kctsr, KCT_SET_RUNSTATE_P);
        SubLTrampolineFile.checkType(run_status, KEYWORDP);
        {
            SubLObject lock = com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_lock(kctsr);
            SubLObject release = NIL;
            try {
                release = seize_lock(lock);
                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_run_status(kctsr, run_status);
            } finally {
                if (NIL != release) {
                    release_lock(lock);
                }
            }
        }
        return kctsr;
    }

    public static SubLObject set_kctsr_run_status(final SubLObject kctsr, final SubLObject run_status) {
        assert NIL != kbq_query_run.kct_set_runstate_p(kctsr) : "! kbq_query_run.kct_set_runstate_p(kctsr) " + ("kbq_query_run.kct_set_runstate_p(kctsr) " + "CommonSymbols.NIL != kbq_query_run.kct_set_runstate_p(kctsr) ") + kctsr;
        assert NIL != keywordp(run_status) : "! keywordp(run_status) " + ("Types.keywordp(run_status) " + "CommonSymbols.NIL != Types.keywordp(run_status) ") + run_status;
        final SubLObject lock = kbq_query_run.kctsr_lock(kctsr);
        SubLObject release = NIL;
        try {
            release = seize_lock(lock);
            kbq_query_run._csetf_kctsr_run_status(kctsr, run_status);
        } finally {
            if (NIL != release) {
                release_lock(lock);
            }
        }
        return kctsr;
    }

    public static final SubLObject set_kctsr_start_alt(SubLObject kctsr, SubLObject time) {
        if (time == UNPROVIDED) {
            time = NIL;
        }
        SubLTrampolineFile.checkType(kctsr, KCT_SET_RUNSTATE_P);
        if (NIL == time) {
            time = get_universal_time();
        }
        {
            SubLObject lock = com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_lock(kctsr);
            SubLObject release = NIL;
            try {
                release = seize_lock(lock);
                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_start(kctsr, time);
            } finally {
                if (NIL != release) {
                    release_lock(lock);
                }
            }
        }
        return kctsr;
    }

    public static SubLObject set_kctsr_start(final SubLObject kctsr, SubLObject time) {
        if (time == UNPROVIDED) {
            time = NIL;
        }
        assert NIL != kbq_query_run.kct_set_runstate_p(kctsr) : "! kbq_query_run.kct_set_runstate_p(kctsr) " + ("kbq_query_run.kct_set_runstate_p(kctsr) " + "CommonSymbols.NIL != kbq_query_run.kct_set_runstate_p(kctsr) ") + kctsr;
        if (NIL == time) {
            time = get_universal_time();
        }
        final SubLObject lock = kbq_query_run.kctsr_lock(kctsr);
        SubLObject release = NIL;
        try {
            release = seize_lock(lock);
            kbq_query_run._csetf_kctsr_start(kctsr, time);
        } finally {
            if (NIL != release) {
                release_lock(lock);
            }
        }
        return kctsr;
    }

    public static final SubLObject set_kctsr_end_alt(SubLObject kctsr, SubLObject time) {
        if (time == UNPROVIDED) {
            time = NIL;
        }
        SubLTrampolineFile.checkType(kctsr, KCT_SET_RUNSTATE_P);
        if (NIL == time) {
            time = get_universal_time();
        }
        {
            SubLObject lock = com.cyc.cycjava.cycl.inference.kbq_query_run.kctsr_lock(kctsr);
            SubLObject release = NIL;
            try {
                release = seize_lock(lock);
                com.cyc.cycjava.cycl.inference.kbq_query_run._csetf_kctsr_end(kctsr, time);
            } finally {
                if (NIL != release) {
                    release_lock(lock);
                }
            }
        }
        return kctsr;
    }

    public static SubLObject set_kctsr_end(final SubLObject kctsr, SubLObject time) {
        if (time == UNPROVIDED) {
            time = NIL;
        }
        assert NIL != kbq_query_run.kct_set_runstate_p(kctsr) : "! kbq_query_run.kct_set_runstate_p(kctsr) " + ("kbq_query_run.kct_set_runstate_p(kctsr) " + "CommonSymbols.NIL != kbq_query_run.kct_set_runstate_p(kctsr) ") + kctsr;
        if (NIL == time) {
            time = get_universal_time();
        }
        final SubLObject lock = kbq_query_run.kctsr_lock(kctsr);
        SubLObject release = NIL;
        try {
            release = seize_lock(lock);
            kbq_query_run._csetf_kctsr_end(kctsr, time);
        } finally {
            if (NIL != release) {
                release_lock(lock);
            }
        }
        return kctsr;
    }

    public static final SubLObject kbq_save_query_set_run_alt(SubLObject query_set_run, SubLObject filename) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject stream = NIL;
                try {
                    {
                        SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                        try {
                            stream_macros.$stream_requires_locking$.bind(NIL, thread);
                            stream = compatibility.open_binary(filename, $OUTPUT, NIL);
                        } finally {
                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                        }
                    }
                    if (!stream.isStream()) {
                        Errors.error($str_alt195$Unable_to_open__S, filename);
                    }
                    {
                        SubLObject stream_37 = stream;
                        {
                            SubLObject _prev_bind_0 = $cfasl_common_symbols$.currentBinding(thread);
                            try {
                                $cfasl_common_symbols$.bind(NIL, thread);
                                cfasl_set_common_symbols($kbq_cfasl_common_symbols$.getGlobalValue());
                                cfasl_output_externalized(query_set_run, stream_37);
                            } finally {
                                $cfasl_common_symbols$.rebind(_prev_bind_0, thread);
                            }
                        }
                    }
                } finally {
                    {
                        SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            if (stream.isStream()) {
                                close(stream, UNPROVIDED);
                            }
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
            }
            return NIL;
        }
    }

    public static SubLObject kbq_save_query_set_run(final SubLObject query_set_run, final SubLObject filename) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject stream = NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind(NIL, thread);
                stream = compatibility.open_binary(filename, $OUTPUT);
            } finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error(kbq_query_run.$str225$Unable_to_open__S, filename);
            }
            final SubLObject stream_$56 = stream;
            final SubLObject _prev_bind_2 = $cfasl_common_symbols$.currentBinding(thread);
            try {
                $cfasl_common_symbols$.bind(NIL, thread);
                cfasl_set_common_symbols_simple(kbq_query_run.kbq_cfasl_common_symbols_simple());
                cfasl_output_externalized(query_set_run, stream_$56);
            } finally {
                $cfasl_common_symbols$.rebind(_prev_bind_2, thread);
            }
        } finally {
            final SubLObject _prev_bind_3 = $is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                $is_thread_performing_cleanupP$.bind(T, thread);
                final SubLObject _values = getValuesAsVector();
                if (stream.isStream()) {
                    close(stream, UNPROVIDED);
                }
                restoreValuesFromVector(_values);
            } finally {
                $is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        return NIL;
    }

    public static final SubLObject kct_save_test_set_run_alt(SubLObject test_set_run, SubLObject filename) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject stream = NIL;
                try {
                    {
                        SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                        try {
                            stream_macros.$stream_requires_locking$.bind(NIL, thread);
                            stream = compatibility.open_binary(filename, $OUTPUT, NIL);
                        } finally {
                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                        }
                    }
                    if (!stream.isStream()) {
                        Errors.error($str_alt195$Unable_to_open__S, filename);
                    }
                    {
                        SubLObject stream_38 = stream;
                        {
                            SubLObject _prev_bind_0 = $cfasl_common_symbols$.currentBinding(thread);
                            try {
                                $cfasl_common_symbols$.bind(NIL, thread);
                                cfasl_set_common_symbols($kct_cfasl_common_symbols$.getGlobalValue());
                                cfasl_output_externalized(test_set_run, stream_38);
                            } finally {
                                $cfasl_common_symbols$.rebind(_prev_bind_0, thread);
                            }
                        }
                    }
                } finally {
                    {
                        SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            if (stream.isStream()) {
                                close(stream, UNPROVIDED);
                            }
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
            }
            return NIL;
        }
    }

    public static SubLObject kct_save_test_set_run(final SubLObject test_set_run, final SubLObject filename) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject stream = NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind(NIL, thread);
                stream = compatibility.open_binary(filename, $OUTPUT);
            } finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error(kbq_query_run.$str225$Unable_to_open__S, filename);
            }
            final SubLObject stream_$57 = stream;
            final SubLObject _prev_bind_2 = $cfasl_common_symbols$.currentBinding(thread);
            try {
                $cfasl_common_symbols$.bind(NIL, thread);
                cfasl_set_common_symbols_simple(kbq_query_run.$kct_cfasl_common_symbols$.getGlobalValue());
                cfasl_output_externalized(test_set_run, stream_$57);
            } finally {
                $cfasl_common_symbols$.rebind(_prev_bind_2, thread);
            }
        } finally {
            final SubLObject _prev_bind_3 = $is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                $is_thread_performing_cleanupP$.bind(T, thread);
                final SubLObject _values = getValuesAsVector();
                if (stream.isStream()) {
                    close(stream, UNPROVIDED);
                }
                restoreValuesFromVector(_values);
            } finally {
                $is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        return NIL;
    }

    public static final SubLObject kbq_save_query_set_run_without_results_alt(SubLObject query_set_run, SubLObject filename) {
        query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_discard_query_set_run_results(query_set_run);
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_save_query_set_run(query_set_run, filename);
    }

    public static SubLObject kbq_save_query_set_run_without_results(SubLObject query_set_run, final SubLObject filename) {
        query_set_run = kbq_query_run.kbq_discard_query_set_run_results(query_set_run);
        return kbq_query_run.kbq_save_query_set_run(query_set_run, filename);
    }

    public static final SubLObject kbq_open_query_set_run_output_stream_alt(SubLObject filename, SubLObject file_mode) {
        if (file_mode == UNPROVIDED) {
            file_mode = $OUTPUT;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject stream = NIL;
                {
                    SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                    try {
                        stream_macros.$stream_requires_locking$.bind(NIL, thread);
                        stream = compatibility.open_binary(filename, file_mode, UNPROVIDED);
                    } finally {
                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                    }
                }
                return stream;
            }
        }
    }

    public static SubLObject kbq_open_query_set_run_output_stream(final SubLObject filename, SubLObject file_mode) {
        if (file_mode == UNPROVIDED) {
            file_mode = $OUTPUT;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject stream = NIL;
        final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
        try {
            stream_macros.$stream_requires_locking$.bind(NIL, thread);
            stream = compatibility.open_binary(filename, file_mode);
        } finally {
            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
        }
        return stream;
    }

    public static final SubLObject kct_open_test_set_run_output_stream_alt(SubLObject filename, SubLObject file_mode) {
        if (file_mode == UNPROVIDED) {
            file_mode = $OUTPUT;
        }
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_open_query_set_run_output_stream(filename, file_mode);
    }

    public static SubLObject kct_open_test_set_run_output_stream(final SubLObject filename, SubLObject file_mode) {
        if (file_mode == UNPROVIDED) {
            file_mode = $OUTPUT;
        }
        return kbq_query_run.kbq_open_query_set_run_output_stream(filename, file_mode);
    }

    public static final SubLObject kbq_save_query_set_run_preamble_alt(SubLObject stream, SubLObject comment) {
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject preamble = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_make_query_set_run(NIL, comment);
                {
                    SubLObject _prev_bind_0 = $cfasl_common_symbols$.currentBinding(thread);
                    try {
                        $cfasl_common_symbols$.bind(NIL, thread);
                        cfasl_set_common_symbols($kbq_cfasl_common_symbols$.getGlobalValue());
                        cfasl_output_externalized(preamble, stream);
                    } finally {
                        $cfasl_common_symbols$.rebind(_prev_bind_0, thread);
                    }
                }
                force_output(stream);
                return NIL;
            }
        }
    }

    public static SubLObject kbq_save_query_set_run_preamble(final SubLObject stream, SubLObject comment) {
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject preamble = kbq_query_run.kbq_make_query_set_run(NIL, comment);
        final SubLObject _prev_bind_0 = $cfasl_common_symbols$.currentBinding(thread);
        try {
            $cfasl_common_symbols$.bind(NIL, thread);
            cfasl_set_common_symbols_simple(kbq_query_run.kbq_cfasl_common_symbols_simple());
            cfasl_output_externalized(preamble, stream);
        } finally {
            $cfasl_common_symbols$.rebind(_prev_bind_0, thread);
        }
        force_output(stream);
        return NIL;
    }

    public static final SubLObject kct_save_test_set_run_preamble_alt(SubLObject stream, SubLObject comment) {
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject preamble = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_make_test_set_run(NIL, comment);
                {
                    SubLObject _prev_bind_0 = $cfasl_common_symbols$.currentBinding(thread);
                    try {
                        $cfasl_common_symbols$.bind(NIL, thread);
                        cfasl_set_common_symbols($kct_cfasl_common_symbols$.getGlobalValue());
                        cfasl_output_externalized(preamble, stream);
                    } finally {
                        $cfasl_common_symbols$.rebind(_prev_bind_0, thread);
                    }
                }
                force_output(stream);
                return NIL;
            }
        }
    }

    public static SubLObject kct_save_test_set_run_preamble(final SubLObject stream, SubLObject comment) {
        if (comment == UNPROVIDED) {
            comment = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject preamble = kbq_query_run.kct_make_test_set_run(NIL, comment);
        final SubLObject _prev_bind_0 = $cfasl_common_symbols$.currentBinding(thread);
        try {
            $cfasl_common_symbols$.bind(NIL, thread);
            cfasl_set_common_symbols_simple(kbq_query_run.$kct_cfasl_common_symbols$.getGlobalValue());
            cfasl_output_externalized(preamble, stream);
        } finally {
            $cfasl_common_symbols$.rebind(_prev_bind_0, thread);
        }
        force_output(stream);
        return NIL;
    }

    public static final SubLObject kbq_save_query_run_alt(SubLObject query_run, SubLObject stream) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject _prev_bind_0 = $cfasl_common_symbols$.currentBinding(thread);
                try {
                    $cfasl_common_symbols$.bind(NIL, thread);
                    cfasl_set_common_symbols($kbq_cfasl_common_symbols$.getGlobalValue());
                    cfasl_output_externalized(query_run, stream);
                } finally {
                    $cfasl_common_symbols$.rebind(_prev_bind_0, thread);
                }
            }
            force_output(stream);
            return NIL;
        }
    }

    public static SubLObject kbq_save_query_run(final SubLObject query_run, final SubLObject stream) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = $cfasl_common_symbols$.currentBinding(thread);
        try {
            $cfasl_common_symbols$.bind(NIL, thread);
            cfasl_set_common_symbols_simple(kbq_query_run.kbq_cfasl_common_symbols_simple());
            cfasl_output_externalized(query_run, stream);
        } finally {
            $cfasl_common_symbols$.rebind(_prev_bind_0, thread);
        }
        force_output(stream);
        return NIL;
    }

    public static final SubLObject kct_save_test_run_alt(SubLObject test_run, SubLObject stream) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject _prev_bind_0 = $cfasl_common_symbols$.currentBinding(thread);
                try {
                    $cfasl_common_symbols$.bind(NIL, thread);
                    cfasl_set_common_symbols($kct_cfasl_common_symbols$.getGlobalValue());
                    cfasl_output_externalized(test_run, stream);
                } finally {
                    $cfasl_common_symbols$.rebind(_prev_bind_0, thread);
                }
            }
            force_output(stream);
            return NIL;
        }
    }

    public static SubLObject kct_save_test_run(final SubLObject test_run, final SubLObject stream) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = $cfasl_common_symbols$.currentBinding(thread);
        try {
            $cfasl_common_symbols$.bind(NIL, thread);
            cfasl_set_common_symbols_simple(kbq_query_run.$kct_cfasl_common_symbols$.getGlobalValue());
            cfasl_output_externalized(test_run, stream);
        } finally {
            $cfasl_common_symbols$.rebind(_prev_bind_0, thread);
        }
        force_output(stream);
        return NIL;
    }

    /**
     * Binds QUERY-SET-RUN to the empty header of the query set run, then binds QUERY-RUN
     * iteratively to each query run in the set.
     * Assumes FILENAME was saved out incrementally.
     *
     * @see kbq-load-query-set-run
     */
    @LispMethod(comment = "Binds QUERY-SET-RUN to the empty header of the query set run, then binds QUERY-RUN\r\niteratively to each query run in the set.\r\nAssumes FILENAME was saved out incrementally.\r\n\r\n@see kbq-load-query-set-run\nBinds QUERY-SET-RUN to the empty header of the query set run, then binds QUERY-RUN\niteratively to each query run in the set.\nAssumes FILENAME was saved out incrementally.")
    public static final SubLObject do_query_set_run_alt(SubLObject macroform, SubLObject environment) {
        {
            SubLObject datum = macroform.rest();
            SubLObject current = datum;
            destructuring_bind_must_consp(current, datum, $list_alt324);
            {
                SubLObject temp = current.rest();
                current = current.first();
                {
                    SubLObject query_set_run = NIL;
                    SubLObject query_run = NIL;
                    SubLObject filename = NIL;
                    destructuring_bind_must_consp(current, datum, $list_alt324);
                    query_set_run = current.first();
                    current = current.rest();
                    destructuring_bind_must_consp(current, datum, $list_alt324);
                    query_run = current.first();
                    current = current.rest();
                    destructuring_bind_must_consp(current, datum, $list_alt324);
                    filename = current.first();
                    current = current.rest();
                    {
                        SubLObject allow_other_keys_p = NIL;
                        SubLObject rest = current;
                        SubLObject bad = NIL;
                        SubLObject current_39 = NIL;
                        for (; NIL != rest;) {
                            destructuring_bind_must_consp(rest, datum, $list_alt324);
                            current_39 = rest.first();
                            rest = rest.rest();
                            destructuring_bind_must_consp(rest, datum, $list_alt324);
                            if (NIL == member(current_39, $list_alt325, UNPROVIDED, UNPROVIDED)) {
                                bad = T;
                            }
                            if (current_39 == $ALLOW_OTHER_KEYS) {
                                allow_other_keys_p = rest.first();
                            }
                            rest = rest.rest();
                        }
                        if ((NIL != bad) && (NIL == allow_other_keys_p)) {
                            cdestructuring_bind_error(datum, $list_alt324);
                        }
                        {
                            SubLObject done_tail = property_list_member($DONE, current);
                            SubLObject done = (NIL != done_tail) ? ((SubLObject) (cadr(done_tail))) : NIL;
                            current = temp;
                            {
                                SubLObject body = current;
                                SubLObject stream = $sym327$STREAM;
                                SubLObject done_var = $sym328$DONE_VAR;
                                return list(PROGN, listS(CHECK_TYPE, filename, $list_alt331), list(WITH_PRIVATE_BINARY_FILE, listS(stream, filename, $list_alt333), list(WITH_CFASL_COMMON_SYMBOLS, $list_alt335, list(WITH_NEW_CFASL_INPUT_GUID_STRING_RESOURCE, list(CLET, list(list(query_set_run, list(KBQ_LOAD_QUERY_SET_RUN_INT, stream))), listS(CSOME, list(query_run, list(KBQ_QUERY_SET_RUN_QUERY_RUNS, query_set_run), done), append(body, NIL)), list(CLET, list(list(done_var, done)), list(WHILE, list(CNOT, done_var), list(CLET, list(list(query_run, list(KBQ_LOAD_QUERY_RUN_INT, stream))), list(PWHEN, listS(EQ, query_run, $list_alt343), listS(CSETQ, done_var, $list_alt345)), listS(PUNLESS, done_var, list(CSETQ, query_run, list(KBQ_NCLEAN_QUERY_RUN, query_run)), append(body, list(list(CSETQ, done_var, done))))))))))));
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * Binds QUERY-SET-RUN to the empty header of the query set run, then binds QUERY-RUN
     * iteratively to each query run in the set.
     * Assumes FILENAME was saved out incrementally.
     *
     * @see kbq-load-query-set-run
     */
    @LispMethod(comment = "Binds QUERY-SET-RUN to the empty header of the query set run, then binds QUERY-RUN\r\niteratively to each query run in the set.\r\nAssumes FILENAME was saved out incrementally.\r\n\r\n@see kbq-load-query-set-run\nBinds QUERY-SET-RUN to the empty header of the query set run, then binds QUERY-RUN\niteratively to each query run in the set.\nAssumes FILENAME was saved out incrementally.")
    public static SubLObject do_query_set_run(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        destructuring_bind_must_consp(current, datum, kbq_query_run.$list376);
        final SubLObject temp = current.rest();
        current = current.first();
        SubLObject query_set_run = NIL;
        SubLObject query_run = NIL;
        SubLObject filename = NIL;
        destructuring_bind_must_consp(current, datum, kbq_query_run.$list376);
        query_set_run = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, datum, kbq_query_run.$list376);
        query_run = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, datum, kbq_query_run.$list376);
        filename = current.first();
        current = current.rest();
        SubLObject allow_other_keys_p = NIL;
        SubLObject rest = current;
        SubLObject bad = NIL;
        SubLObject current_$58 = NIL;
        while (NIL != rest) {
            destructuring_bind_must_consp(rest, datum, kbq_query_run.$list376);
            current_$58 = rest.first();
            rest = rest.rest();
            destructuring_bind_must_consp(rest, datum, kbq_query_run.$list376);
            if (NIL == member(current_$58, kbq_query_run.$list377, UNPROVIDED, UNPROVIDED)) {
                bad = T;
            }
            if (current_$58 == kbq_query_run.$ALLOW_OTHER_KEYS) {
                allow_other_keys_p = rest.first();
            }
            rest = rest.rest();
        } 
        if ((NIL != bad) && (NIL == allow_other_keys_p)) {
            cdestructuring_bind_error(datum, kbq_query_run.$list376);
        }
        final SubLObject done_tail = property_list_member($DONE, current);
        final SubLObject done = (NIL != done_tail) ? cadr(done_tail) : NIL;
        final SubLObject body;
        current = body = temp;
        final SubLObject stream = kbq_query_run.$sym379$STREAM;
        final SubLObject done_var = kbq_query_run.$sym380$DONE_VAR;
        return list(PROGN, listS(CHECK_TYPE, filename, kbq_query_run.$list383), list(WITH_PRIVATE_BINARY_FILE, listS(stream, filename, kbq_query_run.$list385), list(kbq_query_run.WITH_CFASL_COMMON_SYMBOLS_SIMPLE, kbq_query_run.$list387, list(kbq_query_run.WITH_NEW_CFASL_INPUT_GUID_STRING_RESOURCE, list(CLET, list(list(query_set_run, list(kbq_query_run.KBQ_LOAD_QUERY_SET_RUN_INT, stream))), listS(CSOME, list(query_run, list(kbq_query_run.KBQ_QUERY_SET_RUN_QUERY_RUNS, query_set_run), done), append(body, NIL)), list(CLET, list(list(done_var, done)), list(WHILE, list(CNOT, done_var), list(CLET, list(list(query_run, list(kbq_query_run.KBQ_LOAD_QUERY_RUN_INT, stream))), list(PWHEN, listS(EQ, query_run, kbq_query_run.$list395), listS(CSETQ, done_var, kbq_query_run.$list396)), listS(PUNLESS, done_var, list(CSETQ, query_run, list(kbq_query_run.KBQ_NCLEAN_QUERY_RUN, query_run)), append(body, list(list(CSETQ, done_var, done))))))))))));
    }

    public static final SubLObject do_query_set_run_query_runs_alt(SubLObject macroform, SubLObject environment) {
        {
            SubLObject datum = macroform.rest();
            SubLObject current = datum;
            destructuring_bind_must_consp(current, datum, $list_alt348);
            {
                SubLObject temp = current.rest();
                current = current.first();
                {
                    SubLObject query_run = NIL;
                    SubLObject filename = NIL;
                    destructuring_bind_must_consp(current, datum, $list_alt348);
                    query_run = current.first();
                    current = current.rest();
                    destructuring_bind_must_consp(current, datum, $list_alt348);
                    filename = current.first();
                    current = current.rest();
                    {
                        SubLObject allow_other_keys_p = NIL;
                        SubLObject rest = current;
                        SubLObject bad = NIL;
                        SubLObject current_40 = NIL;
                        for (; NIL != rest;) {
                            destructuring_bind_must_consp(rest, datum, $list_alt348);
                            current_40 = rest.first();
                            rest = rest.rest();
                            destructuring_bind_must_consp(rest, datum, $list_alt348);
                            if (NIL == member(current_40, $list_alt325, UNPROVIDED, UNPROVIDED)) {
                                bad = T;
                            }
                            if (current_40 == $ALLOW_OTHER_KEYS) {
                                allow_other_keys_p = rest.first();
                            }
                            rest = rest.rest();
                        }
                        if ((NIL != bad) && (NIL == allow_other_keys_p)) {
                            cdestructuring_bind_error(datum, $list_alt348);
                        }
                        {
                            SubLObject done_tail = property_list_member($DONE, current);
                            SubLObject done = (NIL != done_tail) ? ((SubLObject) (cadr(done_tail))) : NIL;
                            current = temp;
                            {
                                SubLObject body = current;
                                SubLObject query_set_run = $sym349$QUERY_SET_RUN;
                                return listS(DO_QUERY_SET_RUN, list(query_set_run, query_run, filename, $DONE, done), list(IGNORE, query_set_run), append(body, NIL));
                            }
                        }
                    }
                }
            }
        }
    }

    public static SubLObject do_query_set_run_query_runs(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        destructuring_bind_must_consp(current, datum, kbq_query_run.$list399);
        final SubLObject temp = current.rest();
        current = current.first();
        SubLObject query_run = NIL;
        SubLObject filename = NIL;
        destructuring_bind_must_consp(current, datum, kbq_query_run.$list399);
        query_run = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, datum, kbq_query_run.$list399);
        filename = current.first();
        current = current.rest();
        SubLObject allow_other_keys_p = NIL;
        SubLObject rest = current;
        SubLObject bad = NIL;
        SubLObject current_$59 = NIL;
        while (NIL != rest) {
            destructuring_bind_must_consp(rest, datum, kbq_query_run.$list399);
            current_$59 = rest.first();
            rest = rest.rest();
            destructuring_bind_must_consp(rest, datum, kbq_query_run.$list399);
            if (NIL == member(current_$59, kbq_query_run.$list377, UNPROVIDED, UNPROVIDED)) {
                bad = T;
            }
            if (current_$59 == kbq_query_run.$ALLOW_OTHER_KEYS) {
                allow_other_keys_p = rest.first();
            }
            rest = rest.rest();
        } 
        if ((NIL != bad) && (NIL == allow_other_keys_p)) {
            cdestructuring_bind_error(datum, kbq_query_run.$list399);
        }
        final SubLObject done_tail = property_list_member($DONE, current);
        final SubLObject done = (NIL != done_tail) ? cadr(done_tail) : NIL;
        final SubLObject body;
        current = body = temp;
        final SubLObject query_set_run = kbq_query_run.$sym400$QUERY_SET_RUN;
        return listS(kbq_query_run.DO_QUERY_SET_RUN, list(query_set_run, query_run, filename, $DONE, done), list(IGNORE, query_set_run), append(body, NIL));
    }

    public static final SubLObject kbq_load_query_set_run_alt(SubLObject filename) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(filename, STRINGP);
            {
                SubLObject query_set_run = NIL;
                SubLObject additional_query_runs = NIL;
                SubLObject stream = NIL;
                try {
                    {
                        SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                        try {
                            stream_macros.$stream_requires_locking$.bind(NIL, thread);
                            stream = compatibility.open_binary(filename, $INPUT, NIL);
                        } finally {
                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                        }
                    }
                    if (!stream.isStream()) {
                        Errors.error($str_alt195$Unable_to_open__S, filename);
                    }
                    {
                        SubLObject stream_41 = stream;
                        {
                            SubLObject _prev_bind_0 = $cfasl_common_symbols$.currentBinding(thread);
                            try {
                                $cfasl_common_symbols$.bind(NIL, thread);
                                cfasl_set_common_symbols($kbq_cfasl_common_symbols$.getGlobalValue());
                                {
                                    SubLObject _prev_bind_0_42 = $cfasl_input_guid_string_resource$.currentBinding(thread);
                                    try {
                                        $cfasl_input_guid_string_resource$.bind(get_new_cfasl_input_guid_string_resource(), thread);
                                        query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_load_query_set_run_int(stream_41);
                                        {
                                            SubLObject doneP = NIL;
                                            while (NIL == doneP) {
                                                {
                                                    SubLObject query_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_load_query_run_int(stream_41);
                                                    doneP = eq(query_run, $EOF);
                                                    if (NIL == doneP) {
                                                        additional_query_runs = cons(query_run, additional_query_runs);
                                                    }
                                                }
                                            } 
                                        }
                                    } finally {
                                        $cfasl_input_guid_string_resource$.rebind(_prev_bind_0_42, thread);
                                    }
                                }
                            } finally {
                                $cfasl_common_symbols$.rebind(_prev_bind_0, thread);
                            }
                        }
                    }
                } finally {
                    {
                        SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            if (stream.isStream()) {
                                close(stream, UNPROVIDED);
                            }
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
                additional_query_runs = nreverse(additional_query_runs);
                query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_nmerge_query_runs(query_set_run, additional_query_runs);
                query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_nclean_query_set_run(query_set_run);
                return query_set_run;
            }
        }
    }

    public static SubLObject kbq_load_query_set_run(final SubLObject filename) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != stringp(filename) : "! stringp(filename) " + ("Types.stringp(filename) " + "CommonSymbols.NIL != Types.stringp(filename) ") + filename;
        SubLObject query_set_run = NIL;
        SubLObject additional_query_runs = NIL;
        SubLObject stream = NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind(NIL, thread);
                stream = compatibility.open_binary(filename, $INPUT);
            } finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error(kbq_query_run.$str225$Unable_to_open__S, filename);
            }
            final SubLObject stream_$60 = stream;
            final SubLObject _prev_bind_2 = $cfasl_common_symbols$.currentBinding(thread);
            try {
                $cfasl_common_symbols$.bind(NIL, thread);
                cfasl_set_common_symbols_simple(kbq_query_run.kbq_cfasl_common_symbols_simple());
                final SubLObject _prev_bind_0_$61 = $cfasl_input_guid_string_resource$.currentBinding(thread);
                try {
                    $cfasl_input_guid_string_resource$.bind(get_new_cfasl_input_guid_string_resource(), thread);
                    query_set_run = kbq_query_run.kbq_load_query_set_run_int(stream_$60);
                    SubLObject doneP = NIL;
                    while (NIL == doneP) {
                        final SubLObject query_run = kbq_query_run.kbq_load_query_run_int(stream_$60);
                        doneP = eq(query_run, $EOF);
                        if (NIL == doneP) {
                            additional_query_runs = cons(query_run, additional_query_runs);
                        }
                    } 
                } finally {
                    $cfasl_input_guid_string_resource$.rebind(_prev_bind_0_$61, thread);
                }
            } finally {
                $cfasl_common_symbols$.rebind(_prev_bind_2, thread);
            }
        } finally {
            final SubLObject _prev_bind_3 = $is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                $is_thread_performing_cleanupP$.bind(T, thread);
                final SubLObject _values = getValuesAsVector();
                if (stream.isStream()) {
                    close(stream, UNPROVIDED);
                }
                restoreValuesFromVector(_values);
            } finally {
                $is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        additional_query_runs = nreverse(additional_query_runs);
        query_set_run = kbq_query_run.kbq_query_set_run_nmerge_query_runs(query_set_run, additional_query_runs);
        query_set_run = kbq_query_run.kbq_nclean_query_set_run(query_set_run);
        return query_set_run;
    }

    public static final SubLObject kbq_load_query_set_run_int_alt(SubLObject stream) {
        return cfasl_input(stream, T, UNPROVIDED);
    }

    public static SubLObject kbq_load_query_set_run_int(final SubLObject stream) {
        return cfasl_input(stream, T, UNPROVIDED);
    }

    public static final SubLObject kbq_load_query_run_int_alt(SubLObject stream) {
        return cfasl_input(stream, NIL, $EOF);
    }

    public static SubLObject kbq_load_query_run_int(final SubLObject stream) {
        return cfasl_input(stream, NIL, $EOF);
    }

    public static final SubLObject kbq_query_set_run_nmerge_query_runs_alt(SubLObject query_set_run, SubLObject additional_query_runs) {
        if (NIL != additional_query_runs) {
            {
                SubLObject query_runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
                query_runs = nconc(query_runs, additional_query_runs);
                query_set_run = putf(query_set_run, $QUERY_RUNS, query_runs);
            }
        }
        return query_set_run;
    }

    public static SubLObject kbq_query_set_run_nmerge_query_runs(SubLObject query_set_run, final SubLObject additional_query_runs) {
        if (NIL != additional_query_runs) {
            SubLObject query_runs = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
            query_runs = nconc(query_runs, additional_query_runs);
            query_set_run = putf(query_set_run, $QUERY_RUNS, query_runs);
        }
        return query_set_run;
    }

    public static final SubLObject kct_load_test_set_run_alt(SubLObject filename) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(filename, STRINGP);
            {
                SubLObject test_set_run = NIL;
                SubLObject additional_test_runs = NIL;
                SubLObject stream = NIL;
                try {
                    {
                        SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                        try {
                            stream_macros.$stream_requires_locking$.bind(NIL, thread);
                            stream = compatibility.open_binary(filename, $INPUT, NIL);
                        } finally {
                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                        }
                    }
                    if (!stream.isStream()) {
                        Errors.error($str_alt195$Unable_to_open__S, filename);
                    }
                    {
                        SubLObject stream_43 = stream;
                        {
                            SubLObject _prev_bind_0 = $cfasl_common_symbols$.currentBinding(thread);
                            try {
                                $cfasl_common_symbols$.bind(NIL, thread);
                                cfasl_set_common_symbols($kct_cfasl_common_symbols$.getGlobalValue());
                                {
                                    SubLObject _prev_bind_0_44 = $cfasl_input_guid_string_resource$.currentBinding(thread);
                                    try {
                                        $cfasl_input_guid_string_resource$.bind(get_new_cfasl_input_guid_string_resource(), thread);
                                        test_set_run = cfasl_input(stream_43, T, UNPROVIDED);
                                        {
                                            SubLObject doneP = NIL;
                                            while (NIL == doneP) {
                                                {
                                                    SubLObject test_run = cfasl_input(stream_43, NIL, $EOF);
                                                    doneP = eq(test_run, $EOF);
                                                    if (NIL == doneP) {
                                                        additional_test_runs = cons(test_run, additional_test_runs);
                                                    }
                                                }
                                            } 
                                        }
                                    } finally {
                                        $cfasl_input_guid_string_resource$.rebind(_prev_bind_0_44, thread);
                                    }
                                }
                            } finally {
                                $cfasl_common_symbols$.rebind(_prev_bind_0, thread);
                            }
                        }
                    }
                } finally {
                    {
                        SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            if (stream.isStream()) {
                                close(stream, UNPROVIDED);
                            }
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
                additional_test_runs = nreverse(additional_test_runs);
                test_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_nmerge_test_runs(test_set_run, additional_test_runs);
                test_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_nclean_test_set_run(test_set_run);
                return test_set_run;
            }
        }
    }

    public static SubLObject kct_load_test_set_run(final SubLObject filename) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != stringp(filename) : "! stringp(filename) " + ("Types.stringp(filename) " + "CommonSymbols.NIL != Types.stringp(filename) ") + filename;
        SubLObject test_set_run = NIL;
        SubLObject additional_test_runs = NIL;
        SubLObject stream = NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind(NIL, thread);
                stream = compatibility.open_binary(filename, $INPUT);
            } finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error(kbq_query_run.$str225$Unable_to_open__S, filename);
            }
            final SubLObject stream_$62 = stream;
            final SubLObject _prev_bind_2 = $cfasl_common_symbols$.currentBinding(thread);
            try {
                $cfasl_common_symbols$.bind(NIL, thread);
                cfasl_set_common_symbols_simple(kbq_query_run.$kct_cfasl_common_symbols$.getGlobalValue());
                final SubLObject _prev_bind_0_$63 = $cfasl_input_guid_string_resource$.currentBinding(thread);
                try {
                    $cfasl_input_guid_string_resource$.bind(get_new_cfasl_input_guid_string_resource(), thread);
                    test_set_run = cfasl_input(stream_$62, T, UNPROVIDED);
                    SubLObject doneP = NIL;
                    while (NIL == doneP) {
                        final SubLObject test_run = cfasl_input(stream_$62, NIL, $EOF);
                        doneP = eq(test_run, $EOF);
                        if (NIL == doneP) {
                            additional_test_runs = cons(test_run, additional_test_runs);
                        }
                    } 
                } finally {
                    $cfasl_input_guid_string_resource$.rebind(_prev_bind_0_$63, thread);
                }
            } finally {
                $cfasl_common_symbols$.rebind(_prev_bind_2, thread);
            }
        } finally {
            final SubLObject _prev_bind_3 = $is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                $is_thread_performing_cleanupP$.bind(T, thread);
                final SubLObject _values = getValuesAsVector();
                if (stream.isStream()) {
                    close(stream, UNPROVIDED);
                }
                restoreValuesFromVector(_values);
            } finally {
                $is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        additional_test_runs = nreverse(additional_test_runs);
        test_set_run = kbq_query_run.kct_test_set_run_nmerge_test_runs(test_set_run, additional_test_runs);
        test_set_run = kbq_query_run.kct_nclean_test_set_run(test_set_run);
        return test_set_run;
    }

    public static final SubLObject kct_test_set_run_nmerge_test_runs_alt(SubLObject test_set_run, SubLObject additional_test_runs) {
        if (NIL != additional_test_runs) {
            {
                SubLObject test_runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_test_runs(test_set_run);
                test_runs = nconc(test_runs, additional_test_runs);
                test_set_run = putf(test_set_run, $TEST_RUNS, test_runs);
            }
        }
        return test_set_run;
    }

    public static SubLObject kct_test_set_run_nmerge_test_runs(SubLObject test_set_run, final SubLObject additional_test_runs) {
        if (NIL != additional_test_runs) {
            SubLObject test_runs = kbq_query_run.kct_test_set_run_test_runs(test_set_run);
            test_runs = nconc(test_runs, additional_test_runs);
            test_set_run = putf(test_set_run, $TEST_RUNS, test_runs);
        }
        return test_set_run;
    }

    /**
     * This is for backwards compatibility with query-set-runs that have been saved
     * out with errors in them.  This allows old, buggy query-set-runs to be loaded without error.
     *
     * @unknown destructive
     */
    @LispMethod(comment = "This is for backwards compatibility with query-set-runs that have been saved\r\nout with errors in them.  This allows old, buggy query-set-runs to be loaded without error.\r\n\r\n@unknown destructive\nThis is for backwards compatibility with query-set-runs that have been saved\nout with errors in them.  This allows old, buggy query-set-runs to be loaded without error.")
    public static final SubLObject kbq_nclean_query_set_run_alt(SubLObject query_set_run) {
        {
            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
            SubLObject query_run = NIL;
            for (query_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run = cdolist_list_var.first()) {
                com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_nclean_query_run(query_run);
            }
        }
        return query_set_run;
    }

    /**
     * This is for backwards compatibility with query-set-runs that have been saved
     * out with errors in them.  This allows old, buggy query-set-runs to be loaded without error.
     *
     * @unknown destructive
     */
    @LispMethod(comment = "This is for backwards compatibility with query-set-runs that have been saved\r\nout with errors in them.  This allows old, buggy query-set-runs to be loaded without error.\r\n\r\n@unknown destructive\nThis is for backwards compatibility with query-set-runs that have been saved\nout with errors in them.  This allows old, buggy query-set-runs to be loaded without error.")
    public static SubLObject kbq_nclean_query_set_run(final SubLObject query_set_run) {
        SubLObject cdolist_list_var = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
        SubLObject query_run = NIL;
        query_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            kbq_query_run.kbq_nclean_query_run(query_run);
            cdolist_list_var = cdolist_list_var.rest();
            query_run = cdolist_list_var.first();
        } 
        return query_set_run;
    }

    /**
     * This is for backwards compatibility with test-set-runs that have been saved
     * out with errors in them.  This allows old, buggy test-set-runs to be loaded without error.
     *
     * @unknown destructive
     */
    @LispMethod(comment = "This is for backwards compatibility with test-set-runs that have been saved\r\nout with errors in them.  This allows old, buggy test-set-runs to be loaded without error.\r\n\r\n@unknown destructive\nThis is for backwards compatibility with test-set-runs that have been saved\nout with errors in them.  This allows old, buggy test-set-runs to be loaded without error.")
    public static final SubLObject kct_nclean_test_set_run_alt(SubLObject test_set_run) {
        {
            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_test_runs(test_set_run);
            SubLObject test_run = NIL;
            for (test_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , test_run = cdolist_list_var.first()) {
                {
                    SubLObject query_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_query_run(test_run);
                    com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_nclean_query_run(query_run);
                }
            }
        }
        return test_set_run;
    }

    /**
     * This is for backwards compatibility with test-set-runs that have been saved
     * out with errors in them.  This allows old, buggy test-set-runs to be loaded without error.
     *
     * @unknown destructive
     */
    @LispMethod(comment = "This is for backwards compatibility with test-set-runs that have been saved\r\nout with errors in them.  This allows old, buggy test-set-runs to be loaded without error.\r\n\r\n@unknown destructive\nThis is for backwards compatibility with test-set-runs that have been saved\nout with errors in them.  This allows old, buggy test-set-runs to be loaded without error.")
    public static SubLObject kct_nclean_test_set_run(final SubLObject test_set_run) {
        SubLObject cdolist_list_var = kbq_query_run.kct_test_set_run_test_runs(test_set_run);
        SubLObject test_run = NIL;
        test_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject query_run = kbq_query_run.kct_test_run_query_run(test_run);
            kbq_query_run.kbq_nclean_query_run(query_run);
            cdolist_list_var = cdolist_list_var.rest();
            test_run = cdolist_list_var.first();
        } 
        return test_set_run;
    }

    /**
     * works by side effect of destructivity
     */
    @LispMethod(comment = "works by side effect of destructivity")
    public static final SubLObject kbq_nclean_query_run_alt(SubLObject query_run) {
        {
            SubLObject time_to_last_answer = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_time_to_last_answer(query_run);
            if (NIL != time_to_last_answer) {
                if (!time_to_last_answer.isNumber()) {
                    Errors.warn($str_alt354$dwimming__s_to_NIL, time_to_last_answer);
                    query_run = putf(query_run, $TIME_TO_LAST_ANSWER, NIL);
                }
            }
        }
        return query_run;
    }

    /**
     * works by side effect of destructivity
     */
    @LispMethod(comment = "works by side effect of destructivity")
    public static SubLObject kbq_nclean_query_run(SubLObject query_run) {
        final SubLObject time_to_last_answer = kbq_query_run.kbq_query_run_time_to_last_answer(query_run);
        if ((NIL != time_to_last_answer) && (!time_to_last_answer.isNumber())) {
            Errors.warn(kbq_query_run.$str405$dwimming__s_to_NIL, time_to_last_answer);
            query_run = putf(query_run, kbq_query_run.$TIME_TO_LAST_ANSWER, NIL);
        }
        return query_run;
    }

    /**
     * Copies FILENAME.cfasl to FILENAME-no-results.cfasl after stripping the results.
     * Passing in the empty string as a suffix will overwrite the original files.
     */
    @LispMethod(comment = "Copies FILENAME.cfasl to FILENAME-no-results.cfasl after stripping the results.\r\nPassing in the empty string as a suffix will overwrite the original files.\nCopies FILENAME.cfasl to FILENAME-no-results.cfasl after stripping the results.\nPassing in the empty string as a suffix will overwrite the original files.")
    public static final SubLObject kbq_strip_results_from_query_set_run_file_alt(SubLObject filename, SubLObject suffix) {
        if (suffix == UNPROVIDED) {
            suffix = $str_alt356$_no_results;
        }
        {
            SubLObject suffixless_filename = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_strip_suffix_from_filename(filename);
            SubLObject query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_load_query_set_run(filename);
            SubLObject new_filename = cconcatenate(suffixless_filename, new SubLObject[]{ suffix, $query_set_run_file_extension$.getGlobalValue() });
            SubLTrampolineFile.checkType(new_filename, FILE_VALID_FOR_WRITING_P);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_save_query_set_run_without_results(query_set_run, new_filename);
        }
    }

    /**
     * Copies FILENAME.cfasl to FILENAME-no-results.cfasl after stripping the results.
     * Passing in the empty string as a suffix will overwrite the original files.
     */
    @LispMethod(comment = "Copies FILENAME.cfasl to FILENAME-no-results.cfasl after stripping the results.\r\nPassing in the empty string as a suffix will overwrite the original files.\nCopies FILENAME.cfasl to FILENAME-no-results.cfasl after stripping the results.\nPassing in the empty string as a suffix will overwrite the original files.")
    public static SubLObject kbq_strip_results_from_query_set_run_file(final SubLObject filename, SubLObject suffix) {
        if (suffix == UNPROVIDED) {
            suffix = kbq_query_run.$str407$_no_results;
        }
        final SubLObject suffixless_filename = kbq_query_run.kbq_strip_suffix_from_filename(filename);
        final SubLObject query_set_run = kbq_query_run.kbq_load_query_set_run(filename);
        final SubLObject new_filename = cconcatenate(suffixless_filename, new SubLObject[]{ suffix, kbq_query_run.$query_set_run_file_extension$.getGlobalValue() });
        assert NIL != file_valid_for_writing_p(new_filename) : "! file_utilities.file_valid_for_writing_p(new_filename) " + ("file_utilities.file_valid_for_writing_p(new_filename) " + "CommonSymbols.NIL != file_utilities.file_valid_for_writing_p(new_filename) ") + new_filename;
        return kbq_query_run.kbq_save_query_set_run_without_results(query_set_run, new_filename);
    }

    public static final SubLObject kbq_strip_suffix_from_filename_alt(SubLObject filename) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                if (NIL == string_utilities.ends_with(filename, $query_set_run_file_extension$.getGlobalValue(), UNPROVIDED)) {
                    Errors.error($str_alt357$Expected_a__a_file__got__s, $query_set_run_file_extension$.getGlobalValue(), filename);
                }
            }
            return string_utilities.strip_final(filename, length($query_set_run_file_extension$.getGlobalValue()));
        }
    }

    public static SubLObject kbq_strip_suffix_from_filename(final SubLObject filename) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == ends_with(filename, kbq_query_run.$query_set_run_file_extension$.getGlobalValue(), UNPROVIDED))) {
            Errors.error(kbq_query_run.$str408$Expected_a__a_file__got__s, kbq_query_run.$query_set_run_file_extension$.getGlobalValue(), filename);
        }
        return strip_final(filename, length(kbq_query_run.$query_set_run_file_extension$.getGlobalValue()));
    }

    public static final SubLObject kct_strip_suffix_from_filename_alt(SubLObject filename) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_strip_suffix_from_filename(filename);
    }

    public static SubLObject kct_strip_suffix_from_filename(final SubLObject filename) {
        return kbq_query_run.kbq_strip_suffix_from_filename(filename);
    }

    /**
     *
     *
     * @return query-set-run-p;  Filter the query runs in QUERY-SET-RUN to only those known to
    have VALUE for PROPERTY.
     */
    @LispMethod(comment = "@return query-set-run-p;  Filter the query runs in QUERY-SET-RUN to only those known to\r\nhave VALUE for PROPERTY.")
    public static final SubLObject kbq_filter_query_set_run_by_property_value_alt(SubLObject query_set_run, SubLObject comment, SubLObject property, SubLObject value, SubLObject test) {
        if (test == UNPROVIDED) {
            test = symbol_function(EQUAL);
        }
        {
            SubLObject query_runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
            SubLObject filtered_query_runs = NIL;
            SubLObject cdolist_list_var = query_runs;
            SubLObject query_run = NIL;
            for (query_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run = cdolist_list_var.first()) {
                if (NIL != funcall(test, value, com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, property, UNPROVIDED))) {
                    filtered_query_runs = cons(query_run, filtered_query_runs);
                }
            }
            filtered_query_runs = nreverse(filtered_query_runs);
            {
                SubLObject filtered_query_set_run = copy_list(query_set_run);
                filtered_query_set_run = putf(filtered_query_set_run, $QUERY_RUNS, filtered_query_runs);
                if (NIL != comment) {
                    filtered_query_set_run = putf(filtered_query_set_run, $COMMENT, comment);
                }
                return filtered_query_set_run;
            }
        }
    }

    /**
     *
     *
     * @return query-set-run-p;  Filter the query runs in QUERY-SET-RUN to only those known to
    have VALUE for PROPERTY.
     */
    @LispMethod(comment = "@return query-set-run-p;  Filter the query runs in QUERY-SET-RUN to only those known to\r\nhave VALUE for PROPERTY.")
    public static SubLObject kbq_filter_query_set_run_by_property_value(final SubLObject query_set_run, final SubLObject comment, final SubLObject property, final SubLObject value, SubLObject test) {
        if (test == UNPROVIDED) {
            test = symbol_function(EQUAL);
        }
        final SubLObject query_runs = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
        SubLObject filtered_query_runs = NIL;
        SubLObject cdolist_list_var = query_runs;
        SubLObject query_run = NIL;
        query_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != funcall(test, value, kbq_query_run.kbq_query_run_property_value(query_run, property, UNPROVIDED))) {
                filtered_query_runs = cons(query_run, filtered_query_runs);
            }
            cdolist_list_var = cdolist_list_var.rest();
            query_run = cdolist_list_var.first();
        } 
        filtered_query_runs = nreverse(filtered_query_runs);
        SubLObject filtered_query_set_run = copy_list(query_set_run);
        filtered_query_set_run = putf(filtered_query_set_run, $QUERY_RUNS, filtered_query_runs);
        if (NIL != comment) {
            filtered_query_set_run = putf(filtered_query_set_run, $COMMENT, comment);
        }
        return filtered_query_set_run;
    }

    /**
     *
     *
     * @return query-set-run-p;  Filter the query runs in QUERY-SET-RUN to only those known to
    satisfy TEST (assuming KEY).
     */
    @LispMethod(comment = "@return query-set-run-p;  Filter the query runs in QUERY-SET-RUN to only those known to\r\nsatisfy TEST (assuming KEY).")
    public static final SubLObject kbq_filter_query_set_run_by_test_alt(SubLObject query_set_run, SubLObject comment, SubLObject test, SubLObject key) {
        if (key == UNPROVIDED) {
            key = symbol_function(IDENTITY);
        }
        {
            SubLObject query_runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
            SubLObject filtered_query_runs = NIL;
            SubLObject cdolist_list_var = query_runs;
            SubLObject query_run = NIL;
            for (query_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run = cdolist_list_var.first()) {
                if (NIL != funcall(test, funcall(key, query_run))) {
                    filtered_query_runs = cons(query_run, filtered_query_runs);
                }
            }
            filtered_query_runs = nreverse(filtered_query_runs);
            {
                SubLObject filtered_query_set_run = copy_list(query_set_run);
                filtered_query_set_run = putf(filtered_query_set_run, $QUERY_RUNS, filtered_query_runs);
                if (NIL != comment) {
                    filtered_query_set_run = putf(filtered_query_set_run, $COMMENT, comment);
                }
                return filtered_query_set_run;
            }
        }
    }

    /**
     *
     *
     * @return query-set-run-p;  Filter the query runs in QUERY-SET-RUN to only those known to
    satisfy TEST (assuming KEY).
     */
    @LispMethod(comment = "@return query-set-run-p;  Filter the query runs in QUERY-SET-RUN to only those known to\r\nsatisfy TEST (assuming KEY).")
    public static SubLObject kbq_filter_query_set_run_by_test(final SubLObject query_set_run, final SubLObject comment, final SubLObject test, SubLObject key) {
        if (key == UNPROVIDED) {
            key = symbol_function(IDENTITY);
        }
        final SubLObject query_runs = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
        SubLObject filtered_query_runs = NIL;
        SubLObject cdolist_list_var = query_runs;
        SubLObject query_run = NIL;
        query_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != funcall(test, funcall(key, query_run))) {
                filtered_query_runs = cons(query_run, filtered_query_runs);
            }
            cdolist_list_var = cdolist_list_var.rest();
            query_run = cdolist_list_var.first();
        } 
        filtered_query_runs = nreverse(filtered_query_runs);
        SubLObject filtered_query_set_run = copy_list(query_set_run);
        filtered_query_set_run = putf(filtered_query_set_run, $QUERY_RUNS, filtered_query_runs);
        if (NIL != comment) {
            filtered_query_set_run = putf(filtered_query_set_run, $COMMENT, comment);
        }
        return filtered_query_set_run;
    }

    /**
     *
     *
     * @return test-set-run-p;  Filter the test runs in TEST-SET-RUN to only those known to
    satisfy TEST (assuming KEY).
     */
    @LispMethod(comment = "@return test-set-run-p;  Filter the test runs in TEST-SET-RUN to only those known to\r\nsatisfy TEST (assuming KEY).")
    public static final SubLObject kct_filter_test_set_run_by_test_alt(SubLObject test_set_run, SubLObject comment, SubLObject test, SubLObject key) {
        if (key == UNPROVIDED) {
            key = symbol_function(IDENTITY);
        }
        {
            SubLObject test_runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_test_runs(test_set_run);
            SubLObject filtered_test_runs = NIL;
            SubLObject cdolist_list_var = test_runs;
            SubLObject test_run = NIL;
            for (test_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , test_run = cdolist_list_var.first()) {
                if (NIL != funcall(test, funcall(key, test_run))) {
                    filtered_test_runs = cons(test_run, filtered_test_runs);
                }
            }
            filtered_test_runs = nreverse(filtered_test_runs);
            {
                SubLObject filtered_test_set_run = copy_list(test_set_run);
                filtered_test_set_run = putf(filtered_test_set_run, $TEST_RUNS, filtered_test_runs);
                if (NIL != comment) {
                    filtered_test_set_run = putf(filtered_test_set_run, $COMMENT, comment);
                }
                return filtered_test_set_run;
            }
        }
    }

    /**
     *
     *
     * @return test-set-run-p;  Filter the test runs in TEST-SET-RUN to only those known to
    satisfy TEST (assuming KEY).
     */
    @LispMethod(comment = "@return test-set-run-p;  Filter the test runs in TEST-SET-RUN to only those known to\r\nsatisfy TEST (assuming KEY).")
    public static SubLObject kct_filter_test_set_run_by_test(final SubLObject test_set_run, final SubLObject comment, final SubLObject test, SubLObject key) {
        if (key == UNPROVIDED) {
            key = symbol_function(IDENTITY);
        }
        final SubLObject test_runs = kbq_query_run.kct_test_set_run_test_runs(test_set_run);
        SubLObject filtered_test_runs = NIL;
        SubLObject cdolist_list_var = test_runs;
        SubLObject test_run = NIL;
        test_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != funcall(test, funcall(key, test_run))) {
                filtered_test_runs = cons(test_run, filtered_test_runs);
            }
            cdolist_list_var = cdolist_list_var.rest();
            test_run = cdolist_list_var.first();
        } 
        filtered_test_runs = nreverse(filtered_test_runs);
        SubLObject filtered_test_set_run = copy_list(test_set_run);
        filtered_test_set_run = putf(filtered_test_set_run, $TEST_RUNS, filtered_test_runs);
        if (NIL != comment) {
            filtered_test_set_run = putf(filtered_test_set_run, $COMMENT, comment);
        }
        return filtered_test_set_run;
    }

    /**
     *
     *
     * @return query-set-run-p;  Filter the query runs in QUERY-SET-RUN to only those known
    to be answerable.
     */
    @LispMethod(comment = "@return query-set-run-p;  Filter the query runs in QUERY-SET-RUN to only those known\r\nto be answerable.")
    public static final SubLObject kbq_answerable_query_set_run_alt(SubLObject query_set_run) {
        {
            SubLObject comment = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_comment(query_set_run);
            SubLObject new_comment = format(NIL, $str_alt358$answerable_sub_run_of_____A, comment);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_by_test(query_set_run, new_comment, symbol_function(POSITIVE_INTEGER_P), symbol_function(KBQ_QUERY_RUN_ANSWER_COUNT));
        }
    }

    /**
     *
     *
     * @return query-set-run-p;  Filter the query runs in QUERY-SET-RUN to only those known
    to be answerable.
     */
    @LispMethod(comment = "@return query-set-run-p;  Filter the query runs in QUERY-SET-RUN to only those known\r\nto be answerable.")
    public static SubLObject kbq_answerable_query_set_run(final SubLObject query_set_run) {
        final SubLObject comment = kbq_query_run.kbq_query_set_run_comment(query_set_run);
        final SubLObject new_comment = format(NIL, kbq_query_run.$str409$answerable_sub_run_of_____A, comment);
        return kbq_query_run.kbq_filter_query_set_run_by_test(query_set_run, new_comment, symbol_function(POSITIVE_INTEGER_P), symbol_function(kbq_query_run.KBQ_QUERY_RUN_ANSWER_COUNT));
    }

    public static SubLObject kct_answerable_test_set_run(final SubLObject test_set_run) {
        final SubLObject comment = kbq_query_run.kct_test_set_run_comment(test_set_run);
        final SubLObject new_comment = format(NIL, kbq_query_run.$str409$answerable_sub_run_of_____A, comment);
        return kbq_query_run.kct_filter_test_set_run_by_test(test_set_run, new_comment, symbol_function(POSITIVE_INTEGER_P), symbol_function(kbq_query_run.KCT_TEST_RUN_ANSWER_COUNT));
    }

    /**
     *
     *
     * @return test-set-run-p;  Filter the test runs in TEST-SET-RUN to only those known
    to succeed.
     */
    @LispMethod(comment = "@return test-set-run-p;  Filter the test runs in TEST-SET-RUN to only those known\r\nto succeed.")
    public static final SubLObject kct_succeeding_test_set_run_alt(SubLObject test_set_run) {
        {
            SubLObject comment = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_comment(test_set_run);
            SubLObject new_comment = format(NIL, $str_alt360$succeeding_sub_run_of_____A, comment);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_filter_test_set_run_by_test(test_set_run, new_comment, KCT_SUCCESS_RESULT_P, KCT_TEST_RUN_STATUS);
        }
    }

    /**
     *
     *
     * @return test-set-run-p;  Filter the test runs in TEST-SET-RUN to only those known
    to succeed.
     */
    @LispMethod(comment = "@return test-set-run-p;  Filter the test runs in TEST-SET-RUN to only those known\r\nto succeed.")
    public static SubLObject kct_succeeding_test_set_run(final SubLObject test_set_run) {
        final SubLObject comment = kbq_query_run.kct_test_set_run_comment(test_set_run);
        final SubLObject new_comment = format(NIL, kbq_query_run.$str412$succeeding_sub_run_of_____A, comment);
        return kbq_query_run.kct_filter_test_set_run_by_test(test_set_run, new_comment, kbq_query_run.KCT_SUCCESS_RESULT_P, kbq_query_run.KCT_TEST_RUN_STATUS);
    }

    /**
     *
     *
     * @return query-set-run-p;  Filter the query runs in QUERY-SET-RUN to only those known
    to be unanswerable.
     */
    @LispMethod(comment = "@return query-set-run-p;  Filter the query runs in QUERY-SET-RUN to only those known\r\nto be unanswerable.")
    public static final SubLObject kbq_unanswerable_query_set_run_alt(SubLObject query_set_run) {
        {
            SubLObject comment = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_comment(query_set_run);
            SubLObject new_comment = format(NIL, $str_alt362$unanswerable_sub_run_of_____A, comment);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_by_property_value(query_set_run, new_comment, $ANSWER_COUNT, ZERO_INTEGER, UNPROVIDED);
        }
    }

    /**
     *
     *
     * @return query-set-run-p;  Filter the query runs in QUERY-SET-RUN to only those known
    to be unanswerable.
     */
    @LispMethod(comment = "@return query-set-run-p;  Filter the query runs in QUERY-SET-RUN to only those known\r\nto be unanswerable.")
    public static SubLObject kbq_unanswerable_query_set_run(final SubLObject query_set_run) {
        final SubLObject comment = kbq_query_run.kbq_query_set_run_comment(query_set_run);
        final SubLObject new_comment = cconcatenate(kbq_query_run.$str414$unanswerable_sub_run_of__, new SubLObject[]{ $format_nil_percent$.getGlobalValue(), format_nil_a_no_copy(comment) });
        return kbq_query_run.kbq_filter_query_set_run_by_property_value(query_set_run, new_comment, $ANSWER_COUNT, ZERO_INTEGER, UNPROVIDED);
    }

    public static SubLObject kct_unanswerable_test_set_run(final SubLObject test_set_run) {
        final SubLObject comment = kbq_query_run.kct_test_set_run_comment(test_set_run);
        final SubLObject new_comment = cconcatenate(kbq_query_run.$str414$unanswerable_sub_run_of__, new SubLObject[]{ $format_nil_percent$.getGlobalValue(), format_nil_a_no_copy(comment) });
        return kbq_query_run.kct_filter_test_set_run_by_test(test_set_run, new_comment, symbol_function(ZEROP), symbol_function(kbq_query_run.KCT_TEST_RUN_ANSWER_COUNT));
    }

    /**
     *
     *
     * @return test-set-run-p;  Filter the test runs in TEST-SET-RUN to only those known
    to fail
     */
    @LispMethod(comment = "@return test-set-run-p;  Filter the test runs in TEST-SET-RUN to only those known\r\nto fail")
    public static final SubLObject kct_failing_test_set_run_alt(SubLObject test_set_run) {
        {
            SubLObject comment = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_comment(test_set_run);
            SubLObject new_comment = format(NIL, $str_alt363$failing_sub_run_of_____A, comment);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_filter_test_set_run_by_test(test_set_run, new_comment, KCT_FAILURE_RESULT_P, KCT_TEST_RUN_STATUS);
        }
    }

    /**
     *
     *
     * @return test-set-run-p;  Filter the test runs in TEST-SET-RUN to only those known
    to fail
     */
    @LispMethod(comment = "@return test-set-run-p;  Filter the test runs in TEST-SET-RUN to only those known\r\nto fail")
    public static SubLObject kct_failing_test_set_run(final SubLObject test_set_run) {
        final SubLObject comment = kbq_query_run.kct_test_set_run_comment(test_set_run);
        final SubLObject new_comment = format(NIL, kbq_query_run.$str416$failing_sub_run_of_____A, comment);
        return kbq_query_run.kct_filter_test_set_run_by_test(test_set_run, new_comment, kbq_query_run.KCT_FAILURE_RESULT_P, kbq_query_run.KCT_TEST_RUN_STATUS);
    }

    public static SubLObject kct_erroring_test_set_run(final SubLObject test_set_run) {
        return kbq_query_run.kct_filter_test_set_run_to_tests(test_set_run, kbq_query_run.kct_erroring_tests(test_set_run), UNPROVIDED);
    }

    /**
     *
     *
     * @return test-set-run-p;  Filter the test runs in TEST-SET-RUN to only those known
    to be instances of #$CommonSenseTest
     */
    @LispMethod(comment = "@return test-set-run-p;  Filter the test runs in TEST-SET-RUN to only those known\r\nto be instances of #$CommonSenseTest")
    public static final SubLObject kct_common_sense_test_set_run_alt(SubLObject test_set_run) {
        {
            SubLObject test_runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_test_runs(test_set_run);
            SubLObject common_sense_test_runs = NIL;
            SubLObject cdolist_list_var = test_runs;
            SubLObject test_run = NIL;
            for (test_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , test_run = cdolist_list_var.first()) {
                if (NIL != isa.isa_in_any_mtP(com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_test(test_run), $$CommonSenseTest)) {
                    common_sense_test_runs = cons(test_run, common_sense_test_runs);
                }
            }
            common_sense_test_runs = nreverse(common_sense_test_runs);
            {
                SubLObject common_sense_test_set_run = copy_list(test_set_run);
                SubLObject comment = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_comment(test_set_run);
                SubLObject new_comment = format(NIL, $str_alt365$__CommonSenseTest_sub_run_of_____, comment);
                common_sense_test_set_run = putf(common_sense_test_set_run, $TEST_RUNS, common_sense_test_runs);
                common_sense_test_set_run = putf(common_sense_test_set_run, $COMMENT, new_comment);
                return common_sense_test_set_run;
            }
        }
    }

    /**
     *
     *
     * @return test-set-run-p;  Filter the test runs in TEST-SET-RUN to only those known
    to be instances of #$CommonSenseTest
     */
    @LispMethod(comment = "@return test-set-run-p;  Filter the test runs in TEST-SET-RUN to only those known\r\nto be instances of #$CommonSenseTest")
    public static SubLObject kct_common_sense_test_set_run(final SubLObject test_set_run) {
        return kbq_query_run.kct_subcollection_test_set_run(test_set_run, kbq_query_run.$$CommonSenseTest);
    }

    public static SubLObject kct_regression_test_set_run(final SubLObject test_set_run) {
        return kbq_query_run.kct_subcollection_test_set_run(test_set_run, kbq_query_run.$$KBContentRegressionTest);
    }

    public static SubLObject kct_subcollection_test_set_run(final SubLObject test_set_run, final SubLObject collection) {
        final SubLObject test_runs = kbq_query_run.kct_test_set_run_test_runs(test_set_run);
        SubLObject common_sense_test_runs = NIL;
        SubLObject cdolist_list_var = test_runs;
        SubLObject test_run = NIL;
        test_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != isa_in_any_mtP(kbq_query_run.kct_test_run_test(test_run), collection)) {
                common_sense_test_runs = cons(test_run, common_sense_test_runs);
            }
            cdolist_list_var = cdolist_list_var.rest();
            test_run = cdolist_list_var.first();
        } 
        common_sense_test_runs = nreverse(common_sense_test_runs);
        SubLObject common_sense_test_set_run = copy_list(test_set_run);
        final SubLObject comment = kbq_query_run.kct_test_set_run_comment(test_set_run);
        final SubLObject new_comment = format(NIL, kbq_query_run.$str419$_s_sub_run_of_____A, collection, comment);
        common_sense_test_set_run = putf(common_sense_test_set_run, $TEST_RUNS, common_sense_test_runs);
        common_sense_test_set_run = putf(common_sense_test_set_run, $COMMENT, new_comment);
        return common_sense_test_set_run;
    }

    public static SubLObject kct_failing_tests(final SubLObject test_set_run) {
        return kbq_query_run.kct_test_set_run_tests(kbq_query_run.kct_failing_test_set_run(test_set_run));
    }

    public static SubLObject kct_succeeding_tests(final SubLObject test_set_run) {
        return kbq_query_run.kct_test_set_run_tests(kbq_query_run.kct_succeeding_test_set_run(test_set_run));
    }

    public static SubLObject kct_answerable_tests(final SubLObject test_set_run) {
        return kbq_query_run.kct_test_set_run_tests(kbq_query_run.kct_answerable_test_set_run(test_set_run));
    }

    public static SubLObject kct_unanswerable_tests(final SubLObject test_set_run) {
        return kbq_query_run.kct_test_set_run_tests(kbq_query_run.kct_unanswerable_test_set_run(test_set_run));
    }

    public static SubLObject kct_newly_failing_tests(final SubLObject old_test_set_run, final SubLObject new_test_set_run) {
        return fast_set_difference(kbq_query_run.kct_failing_tests(new_test_set_run), kbq_query_run.kct_failing_tests(old_test_set_run), UNPROVIDED);
    }

    /**
     * Return the list of queries common to both QUERY-SET-RUN-1 and QUERY-SET-RUN-2
     * such that they have the same value for PROPERTY.
     * TEST is the equality test performed on the property values.
     * KEY transforms the property value before comparison.
     */
    @LispMethod(comment = "Return the list of queries common to both QUERY-SET-RUN-1 and QUERY-SET-RUN-2\r\nsuch that they have the same value for PROPERTY.\r\nTEST is the equality test performed on the property values.\r\nKEY transforms the property value before comparison.\nReturn the list of queries common to both QUERY-SET-RUN-1 and QUERY-SET-RUN-2\nsuch that they have the same value for PROPERTY.\nTEST is the equality test performed on the property values.\nKEY transforms the property value before comparison.")
    public static final SubLObject kbq_same_property_value_queries_alt(SubLObject query_set_run_1, SubLObject query_set_run_2, SubLObject property, SubLObject test, SubLObject key) {
        if (test == UNPROVIDED) {
            test = symbol_function(EQL);
        }
        if (key == UNPROVIDED) {
            key = symbol_function(IDENTITY);
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject query_runs_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run_1);
                SubLObject query_runs_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run_2);
                SubLObject property_value_dictionary = dictionary.new_dictionary(symbol_function(EQUAL), length(query_runs_1));
                SubLObject same_property_value_queries = NIL;
                {
                    SubLObject cdolist_list_var = query_runs_1;
                    SubLObject query_run_1 = NIL;
                    for (query_run_1 = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run_1 = cdolist_list_var.first()) {
                        {
                            SubLObject query = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run_1);
                            SubLObject value_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run_1, property, UNPROVIDED);
                            SubLObject compare_value_1 = funcall(key, value_1);
                            dictionary.dictionary_enter(property_value_dictionary, query, compare_value_1);
                        }
                    }
                }
                {
                    SubLObject cdolist_list_var = query_runs_2;
                    SubLObject query_run_2 = NIL;
                    for (query_run_2 = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run_2 = cdolist_list_var.first()) {
                        {
                            SubLObject query = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run_2);
                            SubLObject value_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run_2, property, UNPROVIDED);
                            SubLObject compare_value_2 = funcall(key, value_2);
                            thread.resetMultipleValues();
                            {
                                SubLObject compare_value_1 = dictionary.dictionary_lookup(property_value_dictionary, query, UNPROVIDED);
                                SubLObject presentP = thread.secondMultipleValue();
                                thread.resetMultipleValues();
                                if ((NIL != presentP) && (NIL != funcall(test, compare_value_1, compare_value_2))) {
                                    same_property_value_queries = cons(query, same_property_value_queries);
                                }
                            }
                        }
                    }
                }
                return nreverse(same_property_value_queries);
            }
        }
    }

    /**
     * Return the list of queries common to both QUERY-SET-RUN-1 and QUERY-SET-RUN-2
     * such that they have the same value for PROPERTY.
     * TEST is the equality test performed on the property values.
     * KEY transforms the property value before comparison.
     */
    @LispMethod(comment = "Return the list of queries common to both QUERY-SET-RUN-1 and QUERY-SET-RUN-2\r\nsuch that they have the same value for PROPERTY.\r\nTEST is the equality test performed on the property values.\r\nKEY transforms the property value before comparison.\nReturn the list of queries common to both QUERY-SET-RUN-1 and QUERY-SET-RUN-2\nsuch that they have the same value for PROPERTY.\nTEST is the equality test performed on the property values.\nKEY transforms the property value before comparison.")
    public static SubLObject kbq_same_property_value_queries(final SubLObject query_set_run_1, final SubLObject query_set_run_2, final SubLObject property, SubLObject test, SubLObject key) {
        if (test == UNPROVIDED) {
            test = symbol_function(EQL);
        }
        if (key == UNPROVIDED) {
            key = symbol_function(IDENTITY);
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject query_runs_1 = kbq_query_run.kbq_query_set_run_query_runs(query_set_run_1);
        final SubLObject query_runs_2 = kbq_query_run.kbq_query_set_run_query_runs(query_set_run_2);
        final SubLObject property_value_dictionary = new_dictionary(symbol_function(EQUAL), length(query_runs_1));
        SubLObject same_property_value_queries = NIL;
        SubLObject cdolist_list_var = query_runs_1;
        SubLObject query_run_1 = NIL;
        query_run_1 = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject query = kbq_query_run.kbq_query_run_query(query_run_1);
            final SubLObject value_1 = kbq_query_run.kbq_query_run_property_value(query_run_1, property, UNPROVIDED);
            final SubLObject compare_value_1 = funcall(key, value_1);
            dictionary_enter(property_value_dictionary, query, compare_value_1);
            cdolist_list_var = cdolist_list_var.rest();
            query_run_1 = cdolist_list_var.first();
        } 
        cdolist_list_var = query_runs_2;
        SubLObject query_run_2 = NIL;
        query_run_2 = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject query = kbq_query_run.kbq_query_run_query(query_run_2);
            final SubLObject value_2 = kbq_query_run.kbq_query_run_property_value(query_run_2, property, UNPROVIDED);
            final SubLObject compare_value_2 = funcall(key, value_2);
            thread.resetMultipleValues();
            final SubLObject compare_value_3 = dictionary_lookup(property_value_dictionary, query, UNPROVIDED);
            final SubLObject presentP = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if ((NIL != presentP) && (NIL != funcall(test, compare_value_3, compare_value_2))) {
                same_property_value_queries = cons(query, same_property_value_queries);
            }
            cdolist_list_var = cdolist_list_var.rest();
            query_run_2 = cdolist_list_var.first();
        } 
        return nreverse(same_property_value_queries);
    }

    public static final SubLObject kbq_mutually_answerable_queries_alt(SubLObject query_set_runs) {
        {
            SubLObject result_query_set_run = query_set_runs.first();
            SubLObject cdolist_list_var = query_set_runs.rest();
            SubLObject query_set_run = NIL;
            for (query_set_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_set_run = cdolist_list_var.first()) {
                result_query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_mutually_answerable_query_set_runs(result_query_set_run, query_set_run);
            }
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_queries(result_query_set_run);
        }
    }

    public static SubLObject kbq_mutually_answerable_queries(final SubLObject query_set_runs) {
        SubLObject result_query_set_run = query_set_runs.first();
        SubLObject cdolist_list_var = query_set_runs.rest();
        SubLObject query_set_run = NIL;
        query_set_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            result_query_set_run = kbq_query_run.kbq_mutually_answerable_query_set_runs(result_query_set_run, query_set_run);
            cdolist_list_var = cdolist_list_var.rest();
            query_set_run = cdolist_list_var.first();
        } 
        return kbq_query_run.kbq_query_set_run_queries(result_query_set_run);
    }

    public static final SubLObject kbq_mutually_unanswerable_queries_alt(SubLObject query_set_runs) {
        {
            SubLObject result_query_set_run = query_set_runs.first();
            SubLObject cdolist_list_var = query_set_runs.rest();
            SubLObject query_set_run = NIL;
            for (query_set_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_set_run = cdolist_list_var.first()) {
                result_query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_mutually_unanswerable_query_set_runs(result_query_set_run, query_set_run);
            }
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_queries(result_query_set_run);
        }
    }

    public static SubLObject kbq_mutually_unanswerable_queries(final SubLObject query_set_runs) {
        SubLObject result_query_set_run = query_set_runs.first();
        SubLObject cdolist_list_var = query_set_runs.rest();
        SubLObject query_set_run = NIL;
        query_set_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            result_query_set_run = kbq_query_run.kbq_mutually_unanswerable_query_set_runs(result_query_set_run, query_set_run);
            cdolist_list_var = cdolist_list_var.rest();
            query_set_run = cdolist_list_var.first();
        } 
        return kbq_query_run.kbq_query_set_run_queries(result_query_set_run);
    }

    /**
     * Returns those queries in QUERY-SET-RUN with a total time of less than FAST-THRESHOLD.
     */
    @LispMethod(comment = "Returns those queries in QUERY-SET-RUN with a total time of less than FAST-THRESHOLD.")
    public static final SubLObject kbq_fast_queries_alt(SubLObject query_set_run, SubLObject fast_threshold) {
        if (fast_threshold == UNPROVIDED) {
            fast_threshold = ONE_INTEGER;
        }
        {
            SubLObject fast_queries = NIL;
            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
            SubLObject query_run = NIL;
            for (query_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run = cdolist_list_var.first()) {
                if (NIL != list_utilities.safe_L(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_total_time(query_run), fast_threshold)) {
                    fast_queries = cons(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run), fast_queries);
                }
            }
            return nreverse(fast_queries);
        }
    }

    /**
     * Returns those queries in QUERY-SET-RUN with a total time of less than FAST-THRESHOLD.
     */
    @LispMethod(comment = "Returns those queries in QUERY-SET-RUN with a total time of less than FAST-THRESHOLD.")
    public static SubLObject kbq_fast_queries(final SubLObject query_set_run, SubLObject fast_threshold) {
        if (fast_threshold == UNPROVIDED) {
            fast_threshold = ONE_INTEGER;
        }
        SubLObject fast_queries = NIL;
        SubLObject cdolist_list_var = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
        SubLObject query_run = NIL;
        query_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != safe_L(kbq_query_run.kbq_query_run_total_time(query_run), fast_threshold)) {
                fast_queries = cons(kbq_query_run.kbq_query_run_query(query_run), fast_queries);
            }
            cdolist_list_var = cdolist_list_var.rest();
            query_run = cdolist_list_var.first();
        } 
        return nreverse(fast_queries);
    }

    public static final SubLObject kct_mutually_succeeding_tests_alt(SubLObject test_set_runs) {
        {
            SubLObject result_test_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_succeeding_test_set_run(test_set_runs.first());
            SubLObject cdolist_list_var = test_set_runs.rest();
            SubLObject test_set_run = NIL;
            for (test_set_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , test_set_run = cdolist_list_var.first()) {
                result_test_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_mutually_succeeding_test_set_runs(result_test_set_run, test_set_run);
            }
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_tests(result_test_set_run);
        }
    }

    public static SubLObject kct_mutually_succeeding_tests(final SubLObject test_set_runs) {
        SubLObject result_test_set_run = kbq_query_run.kct_succeeding_test_set_run(test_set_runs.first());
        SubLObject cdolist_list_var = test_set_runs.rest();
        SubLObject test_set_run = NIL;
        test_set_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            result_test_set_run = kbq_query_run.kct_mutually_succeeding_test_set_runs(result_test_set_run, test_set_run);
            cdolist_list_var = cdolist_list_var.rest();
            test_set_run = cdolist_list_var.first();
        } 
        return kbq_query_run.kct_test_set_run_tests(result_test_set_run);
    }

    public static final SubLObject kct_mutually_failing_tests_alt(SubLObject test_set_runs) {
        {
            SubLObject result_test_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_failing_test_set_run(test_set_runs.first());
            SubLObject cdolist_list_var = test_set_runs.rest();
            SubLObject test_set_run = NIL;
            for (test_set_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , test_set_run = cdolist_list_var.first()) {
                result_test_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_mutually_failing_test_set_runs(result_test_set_run, test_set_run);
            }
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_tests(result_test_set_run);
        }
    }

    public static SubLObject kct_mutually_failing_tests(final SubLObject test_set_runs) {
        SubLObject result_test_set_run = kbq_query_run.kct_failing_test_set_run(test_set_runs.first());
        SubLObject cdolist_list_var = test_set_runs.rest();
        SubLObject test_set_run = NIL;
        test_set_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            result_test_set_run = kbq_query_run.kct_mutually_failing_test_set_runs(result_test_set_run, test_set_run);
            cdolist_list_var = cdolist_list_var.rest();
            test_set_run = cdolist_list_var.first();
        } 
        return kbq_query_run.kct_test_set_run_tests(result_test_set_run);
    }

    /**
     *
     *
     * @return 0; QUERY-SET-RUN-1 filtered to include only those queries that are answerable in both query set runs.
     * @return 1; QUERY-SET-RUN-2 filtered to include only those queries that are answerable in both query set runs.
     */
    @LispMethod(comment = "@return 0; QUERY-SET-RUN-1 filtered to include only those queries that are answerable in both query set runs.\r\n@return 1; QUERY-SET-RUN-2 filtered to include only those queries that are answerable in both query set runs.")
    public static final SubLObject kbq_mutually_answerable_query_set_runs_alt(SubLObject query_set_run_1, SubLObject query_set_run_2) {
        {
            SubLObject answerable_query_set_run_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_answerable_query_set_run(query_set_run_1);
            SubLObject answerable_query_set_run_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_answerable_query_set_run(query_set_run_2);
            SubLObject answerable_queries_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_property_values(answerable_query_set_run_1, $QUERY, UNPROVIDED);
            SubLObject answerable_queries_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_property_values(answerable_query_set_run_2, $QUERY, UNPROVIDED);
            SubLObject mutually_answerable_queries = keyhash_utilities.fast_intersection(answerable_queries_1, answerable_queries_2, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject filtered_query_set_run_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(answerable_query_set_run_1, mutually_answerable_queries, UNPROVIDED);
            SubLObject filtered_query_set_run_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(answerable_query_set_run_2, mutually_answerable_queries, UNPROVIDED);
            SubLObject set_difference_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(answerable_query_set_run_1, mutually_answerable_queries, T);
            SubLObject set_difference_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(answerable_query_set_run_2, mutually_answerable_queries, T);
            return values(filtered_query_set_run_1, filtered_query_set_run_2, set_difference_1, set_difference_2);
        }
    }

    /**
     *
     *
     * @return 0; QUERY-SET-RUN-1 filtered to include only those queries that are answerable in both query set runs.
     * @return 1; QUERY-SET-RUN-2 filtered to include only those queries that are answerable in both query set runs.
     */
    @LispMethod(comment = "@return 0; QUERY-SET-RUN-1 filtered to include only those queries that are answerable in both query set runs.\r\n@return 1; QUERY-SET-RUN-2 filtered to include only those queries that are answerable in both query set runs.")
    public static SubLObject kbq_mutually_answerable_query_set_runs(final SubLObject query_set_run_1, final SubLObject query_set_run_2) {
        final SubLObject answerable_query_set_run_1 = kbq_query_run.kbq_answerable_query_set_run(query_set_run_1);
        final SubLObject answerable_query_set_run_2 = kbq_query_run.kbq_answerable_query_set_run(query_set_run_2);
        final SubLObject answerable_queries_1 = kbq_query_run.kbq_extract_property_values(answerable_query_set_run_1, $QUERY, UNPROVIDED);
        final SubLObject answerable_queries_2 = kbq_query_run.kbq_extract_property_values(answerable_query_set_run_2, $QUERY, UNPROVIDED);
        final SubLObject mutually_answerable_queries = fast_intersection(answerable_queries_1, answerable_queries_2, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject filtered_query_set_run_1 = kbq_query_run.kbq_filter_query_set_run_to_queries(answerable_query_set_run_1, mutually_answerable_queries, UNPROVIDED);
        final SubLObject filtered_query_set_run_2 = kbq_query_run.kbq_filter_query_set_run_to_queries(answerable_query_set_run_2, mutually_answerable_queries, UNPROVIDED);
        final SubLObject set_difference_1 = kbq_query_run.kbq_filter_query_set_run_to_queries(answerable_query_set_run_1, mutually_answerable_queries, T);
        final SubLObject set_difference_2 = kbq_query_run.kbq_filter_query_set_run_to_queries(answerable_query_set_run_2, mutually_answerable_queries, T);
        return values(filtered_query_set_run_1, filtered_query_set_run_2, set_difference_1, set_difference_2);
    }

    /**
     *
     *
     * @return 0; QUERY-SET-RUN-1 filtered to include only those queries that are unanswerable in both query set runs.
     * @return 1; QUERY-SET-RUN-2 filtered to include only those queries that are unanswerable in both query set runs.
     */
    @LispMethod(comment = "@return 0; QUERY-SET-RUN-1 filtered to include only those queries that are unanswerable in both query set runs.\r\n@return 1; QUERY-SET-RUN-2 filtered to include only those queries that are unanswerable in both query set runs.")
    public static final SubLObject kbq_mutually_unanswerable_query_set_runs_alt(SubLObject query_set_run_1, SubLObject query_set_run_2) {
        {
            SubLObject unanswerable_query_set_run_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_unanswerable_query_set_run(query_set_run_1);
            SubLObject unanswerable_query_set_run_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_unanswerable_query_set_run(query_set_run_2);
            SubLObject unanswerable_queries_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_property_values(unanswerable_query_set_run_1, $QUERY, UNPROVIDED);
            SubLObject unanswerable_queries_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_property_values(unanswerable_query_set_run_2, $QUERY, UNPROVIDED);
            SubLObject mutually_unanswerable_queries = keyhash_utilities.fast_intersection(unanswerable_queries_1, unanswerable_queries_2, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject filtered_query_set_run_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(unanswerable_query_set_run_1, mutually_unanswerable_queries, UNPROVIDED);
            SubLObject filtered_query_set_run_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(unanswerable_query_set_run_2, mutually_unanswerable_queries, UNPROVIDED);
            SubLObject set_difference_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(unanswerable_query_set_run_1, mutually_unanswerable_queries, T);
            SubLObject set_difference_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(unanswerable_query_set_run_2, mutually_unanswerable_queries, T);
            return values(filtered_query_set_run_1, filtered_query_set_run_2, set_difference_1, set_difference_2);
        }
    }

    /**
     *
     *
     * @return 0; QUERY-SET-RUN-1 filtered to include only those queries that are unanswerable in both query set runs.
     * @return 1; QUERY-SET-RUN-2 filtered to include only those queries that are unanswerable in both query set runs.
     */
    @LispMethod(comment = "@return 0; QUERY-SET-RUN-1 filtered to include only those queries that are unanswerable in both query set runs.\r\n@return 1; QUERY-SET-RUN-2 filtered to include only those queries that are unanswerable in both query set runs.")
    public static SubLObject kbq_mutually_unanswerable_query_set_runs(final SubLObject query_set_run_1, final SubLObject query_set_run_2) {
        final SubLObject unanswerable_query_set_run_1 = kbq_query_run.kbq_unanswerable_query_set_run(query_set_run_1);
        final SubLObject unanswerable_query_set_run_2 = kbq_query_run.kbq_unanswerable_query_set_run(query_set_run_2);
        final SubLObject unanswerable_queries_1 = kbq_query_run.kbq_extract_property_values(unanswerable_query_set_run_1, $QUERY, UNPROVIDED);
        final SubLObject unanswerable_queries_2 = kbq_query_run.kbq_extract_property_values(unanswerable_query_set_run_2, $QUERY, UNPROVIDED);
        final SubLObject mutually_unanswerable_queries = fast_intersection(unanswerable_queries_1, unanswerable_queries_2, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject filtered_query_set_run_1 = kbq_query_run.kbq_filter_query_set_run_to_queries(unanswerable_query_set_run_1, mutually_unanswerable_queries, UNPROVIDED);
        final SubLObject filtered_query_set_run_2 = kbq_query_run.kbq_filter_query_set_run_to_queries(unanswerable_query_set_run_2, mutually_unanswerable_queries, UNPROVIDED);
        final SubLObject set_difference_1 = kbq_query_run.kbq_filter_query_set_run_to_queries(unanswerable_query_set_run_1, mutually_unanswerable_queries, T);
        final SubLObject set_difference_2 = kbq_query_run.kbq_filter_query_set_run_to_queries(unanswerable_query_set_run_2, mutually_unanswerable_queries, T);
        return values(filtered_query_set_run_1, filtered_query_set_run_2, set_difference_1, set_difference_2);
    }

    public static final SubLObject kbq_query_set_runs_common_queries_alt(SubLObject query_set_runs) {
        {
            SubLObject queries_list = NIL;
            SubLObject cdolist_list_var = query_set_runs;
            SubLObject query_set_run = NIL;
            for (query_set_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_set_run = cdolist_list_var.first()) {
                queries_list = cons(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_queries(query_set_run), queries_list);
            }
            return list_utilities.fast_intersect_all(queries_list, symbol_function(EQ), UNPROVIDED);
        }
    }

    public static SubLObject kbq_query_set_runs_common_queries(final SubLObject query_set_runs) {
        SubLObject queries_list = NIL;
        SubLObject cdolist_list_var = query_set_runs;
        SubLObject query_set_run = NIL;
        query_set_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            queries_list = cons(kbq_query_run.kbq_query_set_run_queries(query_set_run), queries_list);
            cdolist_list_var = cdolist_list_var.rest();
            query_set_run = cdolist_list_var.first();
        } 
        return fast_intersect_all(queries_list, symbol_function(EQ), UNPROVIDED);
    }

    /**
     *
     *
     * @return list of query-set-run-p; each element of QUERY-SET-RUNS filtered to include only those queries that appear in all query set runs.
     */
    @LispMethod(comment = "@return list of query-set-run-p; each element of QUERY-SET-RUNS filtered to include only those queries that appear in all query set runs.")
    public static final SubLObject kbq_common_queries_query_set_runs_alt(SubLObject query_set_runs) {
        {
            SubLObject filtered_query_set_runs = NIL;
            SubLObject common_queries = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_runs_common_queries(query_set_runs);
            SubLObject cdolist_list_var = query_set_runs;
            SubLObject query_set_run = NIL;
            for (query_set_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_set_run = cdolist_list_var.first()) {
                {
                    SubLObject filtered_query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run, common_queries, UNPROVIDED);
                    filtered_query_set_runs = cons(filtered_query_set_run, filtered_query_set_runs);
                }
            }
            return nreverse(filtered_query_set_runs);
        }
    }

    /**
     *
     *
     * @return list of query-set-run-p; each element of QUERY-SET-RUNS filtered to include only those queries that appear in all query set runs.
     */
    @LispMethod(comment = "@return list of query-set-run-p; each element of QUERY-SET-RUNS filtered to include only those queries that appear in all query set runs.")
    public static SubLObject kbq_common_queries_query_set_runs(final SubLObject query_set_runs) {
        SubLObject filtered_query_set_runs = NIL;
        final SubLObject common_queries = kbq_query_run.kbq_query_set_runs_common_queries(query_set_runs);
        SubLObject cdolist_list_var = query_set_runs;
        SubLObject query_set_run = NIL;
        query_set_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject filtered_query_set_run = kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run, common_queries, UNPROVIDED);
            filtered_query_set_runs = cons(filtered_query_set_run, filtered_query_set_runs);
            cdolist_list_var = cdolist_list_var.rest();
            query_set_run = cdolist_list_var.first();
        } 
        return nreverse(filtered_query_set_runs);
    }

    public static final SubLObject kbq_common_queries_two_query_set_runs_alt(SubLObject query_set_run_1, SubLObject query_set_run_2) {
        {
            SubLObject datum = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_common_queries_query_set_runs(list(query_set_run_1, query_set_run_2));
            SubLObject current = datum;
            SubLObject filtered_query_set_run_1 = NIL;
            SubLObject filtered_query_set_run_2 = NIL;
            destructuring_bind_must_consp(current, datum, $list_alt366);
            filtered_query_set_run_1 = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list_alt366);
            filtered_query_set_run_2 = current.first();
            current = current.rest();
            if (NIL == current) {
                return values(filtered_query_set_run_1, filtered_query_set_run_2);
            } else {
                cdestructuring_bind_error(datum, $list_alt366);
            }
        }
        return NIL;
    }

    public static SubLObject kbq_common_queries_two_query_set_runs(final SubLObject query_set_run_1, final SubLObject query_set_run_2) {
        SubLObject current;
        final SubLObject datum = current = kbq_query_run.kbq_common_queries_query_set_runs(list(query_set_run_1, query_set_run_2));
        SubLObject filtered_query_set_run_1 = NIL;
        SubLObject filtered_query_set_run_2 = NIL;
        destructuring_bind_must_consp(current, datum, kbq_query_run.$list420);
        filtered_query_set_run_1 = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, datum, kbq_query_run.$list420);
        filtered_query_set_run_2 = current.first();
        current = current.rest();
        if (NIL == current) {
            return values(filtered_query_set_run_1, filtered_query_set_run_2);
        }
        cdestructuring_bind_error(datum, kbq_query_run.$list420);
        return NIL;
    }

    /**
     *
     *
     * @return list of test-set-run-p; each element of TEST-SET-RUNS filtered to include only those tests that appear in all test set runs.
     */
    @LispMethod(comment = "@return list of test-set-run-p; each element of TEST-SET-RUNS filtered to include only those tests that appear in all test set runs.")
    public static final SubLObject kct_common_tests_test_set_runs_alt(SubLObject test_set_runs) {
        {
            SubLObject filtered_test_set_runs = NIL;
            SubLObject common_tests = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_tests_common_to_all_test_set_runs(test_set_runs);
            SubLObject cdolist_list_var = test_set_runs;
            SubLObject test_set_run = NIL;
            for (test_set_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , test_set_run = cdolist_list_var.first()) {
                {
                    SubLObject filtered_test_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_filter_test_set_run_to_tests(test_set_run, common_tests, UNPROVIDED);
                    filtered_test_set_runs = cons(filtered_test_set_run, filtered_test_set_runs);
                }
            }
            return nreverse(filtered_test_set_runs);
        }
    }

    /**
     *
     *
     * @return list of test-set-run-p; each element of TEST-SET-RUNS filtered to include only those tests that appear in all test set runs.
     */
    @LispMethod(comment = "@return list of test-set-run-p; each element of TEST-SET-RUNS filtered to include only those tests that appear in all test set runs.")
    public static SubLObject kct_common_tests_test_set_runs(final SubLObject test_set_runs) {
        SubLObject filtered_test_set_runs = NIL;
        final SubLObject common_tests = kbq_query_run.kct_tests_common_to_all_test_set_runs(test_set_runs);
        SubLObject cdolist_list_var = test_set_runs;
        SubLObject test_set_run = NIL;
        test_set_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject filtered_test_set_run = kbq_query_run.kct_filter_test_set_run_to_tests(test_set_run, common_tests, UNPROVIDED);
            filtered_test_set_runs = cons(filtered_test_set_run, filtered_test_set_runs);
            cdolist_list_var = cdolist_list_var.rest();
            test_set_run = cdolist_list_var.first();
        } 
        return nreverse(filtered_test_set_runs);
    }

    /**
     *
     *
     * @return 0; TEST-SET-RUN-1 filtered to include only those tests that succeed in both test set runs.
     * @return 1; TEST-SET-RUN-2 filtered to include only those tests that succeed in both test set runs.
     */
    @LispMethod(comment = "@return 0; TEST-SET-RUN-1 filtered to include only those tests that succeed in both test set runs.\r\n@return 1; TEST-SET-RUN-2 filtered to include only those tests that succeed in both test set runs.")
    public static final SubLObject kct_mutually_succeeding_test_set_runs_alt(SubLObject test_set_run_1, SubLObject test_set_run_2) {
        {
            SubLObject succeeding_test_set_run_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_succeeding_test_set_run(test_set_run_1);
            SubLObject succeeding_test_set_run_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_succeeding_test_set_run(test_set_run_2);
            SubLObject succeeding_tests_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_valid_tests(succeeding_test_set_run_1);
            SubLObject succeeding_tests_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_valid_tests(succeeding_test_set_run_2);
            SubLObject mutually_succeeding_tests = keyhash_utilities.fast_intersection(succeeding_tests_1, succeeding_tests_2, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject filtered_test_set_run_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_filter_test_set_run_to_tests(succeeding_test_set_run_1, mutually_succeeding_tests, UNPROVIDED);
            SubLObject filtered_test_set_run_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_filter_test_set_run_to_tests(succeeding_test_set_run_2, mutually_succeeding_tests, UNPROVIDED);
            SubLObject set_difference_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_filter_test_set_run_to_tests(succeeding_test_set_run_1, mutually_succeeding_tests, T);
            SubLObject set_difference_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_filter_test_set_run_to_tests(succeeding_test_set_run_2, mutually_succeeding_tests, T);
            return values(filtered_test_set_run_1, filtered_test_set_run_2, set_difference_1, set_difference_2);
        }
    }

    /**
     *
     *
     * @return 0; TEST-SET-RUN-1 filtered to include only those tests that succeed in both test set runs.
     * @return 1; TEST-SET-RUN-2 filtered to include only those tests that succeed in both test set runs.
     */
    @LispMethod(comment = "@return 0; TEST-SET-RUN-1 filtered to include only those tests that succeed in both test set runs.\r\n@return 1; TEST-SET-RUN-2 filtered to include only those tests that succeed in both test set runs.")
    public static SubLObject kct_mutually_succeeding_test_set_runs(final SubLObject test_set_run_1, final SubLObject test_set_run_2) {
        final SubLObject succeeding_test_set_run_1 = kbq_query_run.kct_succeeding_test_set_run(test_set_run_1);
        final SubLObject succeeding_test_set_run_2 = kbq_query_run.kct_succeeding_test_set_run(test_set_run_2);
        final SubLObject succeeding_tests_1 = kbq_query_run.kct_test_set_run_valid_tests(succeeding_test_set_run_1);
        final SubLObject succeeding_tests_2 = kbq_query_run.kct_test_set_run_valid_tests(succeeding_test_set_run_2);
        final SubLObject mutually_succeeding_tests = fast_intersection(succeeding_tests_1, succeeding_tests_2, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject filtered_test_set_run_1 = kbq_query_run.kct_filter_test_set_run_to_tests(succeeding_test_set_run_1, mutually_succeeding_tests, UNPROVIDED);
        final SubLObject filtered_test_set_run_2 = kbq_query_run.kct_filter_test_set_run_to_tests(succeeding_test_set_run_2, mutually_succeeding_tests, UNPROVIDED);
        final SubLObject set_difference_1 = kbq_query_run.kct_filter_test_set_run_to_tests(succeeding_test_set_run_1, mutually_succeeding_tests, T);
        final SubLObject set_difference_2 = kbq_query_run.kct_filter_test_set_run_to_tests(succeeding_test_set_run_2, mutually_succeeding_tests, T);
        return values(filtered_test_set_run_1, filtered_test_set_run_2, set_difference_1, set_difference_2);
    }

    /**
     *
     *
     * @return 0; TEST-SET-RUN-1 filtered to include only those tests that succeed in both test set runs.
     * @return 1; TEST-SET-RUN-2 filtered to include only those tests that succeed in both test set runs.
     */
    @LispMethod(comment = "@return 0; TEST-SET-RUN-1 filtered to include only those tests that succeed in both test set runs.\r\n@return 1; TEST-SET-RUN-2 filtered to include only those tests that succeed in both test set runs.")
    public static final SubLObject kct_mutually_failing_test_set_runs_alt(SubLObject test_set_run_1, SubLObject test_set_run_2) {
        {
            SubLObject failing_test_set_run_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_failing_test_set_run(test_set_run_1);
            SubLObject failing_test_set_run_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_failing_test_set_run(test_set_run_2);
            SubLObject failing_tests_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_tests(failing_test_set_run_1);
            SubLObject failing_tests_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_tests(failing_test_set_run_2);
            SubLObject mutually_failing_tests = keyhash_utilities.fast_intersection(failing_tests_1, failing_tests_2, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject filtered_test_set_run_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_filter_test_set_run_to_tests(failing_test_set_run_1, mutually_failing_tests, UNPROVIDED);
            SubLObject filtered_test_set_run_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_filter_test_set_run_to_tests(failing_test_set_run_2, mutually_failing_tests, UNPROVIDED);
            SubLObject set_difference_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_filter_test_set_run_to_tests(failing_test_set_run_1, mutually_failing_tests, T);
            SubLObject set_difference_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_filter_test_set_run_to_tests(failing_test_set_run_2, mutually_failing_tests, T);
            return values(filtered_test_set_run_1, filtered_test_set_run_2, set_difference_1, set_difference_2);
        }
    }

    /**
     *
     *
     * @return 0; TEST-SET-RUN-1 filtered to include only those tests that succeed in both test set runs.
     * @return 1; TEST-SET-RUN-2 filtered to include only those tests that succeed in both test set runs.
     */
    @LispMethod(comment = "@return 0; TEST-SET-RUN-1 filtered to include only those tests that succeed in both test set runs.\r\n@return 1; TEST-SET-RUN-2 filtered to include only those tests that succeed in both test set runs.")
    public static SubLObject kct_mutually_failing_test_set_runs(final SubLObject test_set_run_1, final SubLObject test_set_run_2) {
        final SubLObject failing_test_set_run_1 = kbq_query_run.kct_failing_test_set_run(test_set_run_1);
        final SubLObject failing_test_set_run_2 = kbq_query_run.kct_failing_test_set_run(test_set_run_2);
        final SubLObject failing_tests_1 = kbq_query_run.kct_test_set_run_tests(failing_test_set_run_1);
        final SubLObject failing_tests_2 = kbq_query_run.kct_test_set_run_tests(failing_test_set_run_2);
        final SubLObject mutually_failing_tests = fast_intersection(failing_tests_1, failing_tests_2, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject filtered_test_set_run_1 = kbq_query_run.kct_filter_test_set_run_to_tests(failing_test_set_run_1, mutually_failing_tests, UNPROVIDED);
        final SubLObject filtered_test_set_run_2 = kbq_query_run.kct_filter_test_set_run_to_tests(failing_test_set_run_2, mutually_failing_tests, UNPROVIDED);
        final SubLObject set_difference_1 = kbq_query_run.kct_filter_test_set_run_to_tests(failing_test_set_run_1, mutually_failing_tests, T);
        final SubLObject set_difference_2 = kbq_query_run.kct_filter_test_set_run_to_tests(failing_test_set_run_2, mutually_failing_tests, T);
        return values(filtered_test_set_run_1, filtered_test_set_run_2, set_difference_1, set_difference_2);
    }

    /**
     *
     *
     * @return 0; QUERY-SET-RUN-1 filtered to include only those queries with the same answer count in both query set runs.
     * @return 1; QUERY-SET-RUN-2 filtered to include only those queries with the same answer count in both query set runs.
     */
    @LispMethod(comment = "@return 0; QUERY-SET-RUN-1 filtered to include only those queries with the same answer count in both query set runs.\r\n@return 1; QUERY-SET-RUN-2 filtered to include only those queries with the same answer count in both query set runs.")
    public static final SubLObject kbq_same_answer_count_query_set_runs_alt(SubLObject query_set_run_1, SubLObject query_set_run_2) {
        {
            SubLObject queries = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_same_property_value_queries(query_set_run_1, query_set_run_2, $ANSWER_COUNT, UNPROVIDED, UNPROVIDED);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_to_queries_int(query_set_run_1, query_set_run_2, queries);
        }
    }

    /**
     *
     *
     * @return 0; QUERY-SET-RUN-1 filtered to include only those queries with the same answer count in both query set runs.
     * @return 1; QUERY-SET-RUN-2 filtered to include only those queries with the same answer count in both query set runs.
     */
    @LispMethod(comment = "@return 0; QUERY-SET-RUN-1 filtered to include only those queries with the same answer count in both query set runs.\r\n@return 1; QUERY-SET-RUN-2 filtered to include only those queries with the same answer count in both query set runs.")
    public static SubLObject kbq_same_answer_count_query_set_runs(final SubLObject query_set_run_1, final SubLObject query_set_run_2) {
        final SubLObject queries = kbq_query_run.kbq_same_property_value_queries(query_set_run_1, query_set_run_2, $ANSWER_COUNT, UNPROVIDED, UNPROVIDED);
        return kbq_query_run.kbq_filter_to_queries_int(query_set_run_1, query_set_run_2, queries);
    }

    /**
     *
     *
     * @return 0; QUERY-SET-RUN-1 filtered to include only those queries with different answer counts in both query set runs.
     * @return 1; QUERY-SET-RUN-2 filtered to include only those queries with different answer counts in both query set runs.
     */
    @LispMethod(comment = "@return 0; QUERY-SET-RUN-1 filtered to include only those queries with different answer counts in both query set runs.\r\n@return 1; QUERY-SET-RUN-2 filtered to include only those queries with different answer counts in both query set runs.")
    public static final SubLObject kbq_different_answer_count_query_set_runs_alt(SubLObject query_set_run_1, SubLObject query_set_run_2) {
        {
            SubLObject queries = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_same_property_value_queries(query_set_run_1, query_set_run_2, $ANSWER_COUNT, symbol_function(NOT_EQL), UNPROVIDED);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_to_queries_int(query_set_run_1, query_set_run_2, queries);
        }
    }

    /**
     *
     *
     * @return 0; QUERY-SET-RUN-1 filtered to include only those queries with different answer counts in both query set runs.
     * @return 1; QUERY-SET-RUN-2 filtered to include only those queries with different answer counts in both query set runs.
     */
    @LispMethod(comment = "@return 0; QUERY-SET-RUN-1 filtered to include only those queries with different answer counts in both query set runs.\r\n@return 1; QUERY-SET-RUN-2 filtered to include only those queries with different answer counts in both query set runs.")
    public static SubLObject kbq_different_answer_count_query_set_runs(final SubLObject query_set_run_1, final SubLObject query_set_run_2) {
        final SubLObject queries = kbq_query_run.kbq_same_property_value_queries(query_set_run_1, query_set_run_2, $ANSWER_COUNT, symbol_function(kbq_query_run.NOT_EQL), UNPROVIDED);
        return kbq_query_run.kbq_filter_to_queries_int(query_set_run_1, query_set_run_2, queries);
    }

    public static final SubLObject kbq_filter_to_queries_int_alt(SubLObject query_set_run_1, SubLObject query_set_run_2, SubLObject queries) {
        {
            SubLObject filtered_query_set_run_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run_1, queries, UNPROVIDED);
            SubLObject filtered_query_set_run_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run_2, queries, UNPROVIDED);
            SubLObject set_difference_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run_1, queries, T);
            SubLObject set_difference_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run_2, queries, T);
            return values(filtered_query_set_run_1, filtered_query_set_run_2, set_difference_1, set_difference_2);
        }
    }

    public static SubLObject kbq_filter_to_queries_int(final SubLObject query_set_run_1, final SubLObject query_set_run_2, final SubLObject queries) {
        final SubLObject filtered_query_set_run_1 = kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run_1, queries, UNPROVIDED);
        final SubLObject filtered_query_set_run_2 = kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run_2, queries, UNPROVIDED);
        final SubLObject set_difference_1 = kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run_1, queries, T);
        final SubLObject set_difference_2 = kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run_2, queries, T);
        return values(filtered_query_set_run_1, filtered_query_set_run_2, set_difference_1, set_difference_2);
    }

    public static final SubLObject kbq_filter_query_set_run_to_queries_lambda_alt(SubLObject query) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            return set.set_memberP(query, $kbq_filter_query_set_run_to_queries$.getDynamicValue(thread));
        }
    }

    public static SubLObject kbq_filter_query_set_run_to_queries_lambda(final SubLObject query) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return set_memberP(query, kbq_query_run.$kbq_filter_query_set_run_to_queries$.getDynamicValue(thread));
    }

    public static final SubLObject kbq_filter_query_set_run_to_queries_not_lambda_alt(SubLObject query) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            return makeBoolean(NIL == set.set_memberP(query, $kbq_filter_query_set_run_to_queries$.getDynamicValue(thread)));
        }
    }

    public static SubLObject kbq_filter_query_set_run_to_queries_not_lambda(final SubLObject query) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return makeBoolean(NIL == set_memberP(query, kbq_query_run.$kbq_filter_query_set_run_to_queries$.getDynamicValue(thread)));
    }

    /**
     *
     *
     * @param COMPLEMENT?;
     * 		if non-nil, will filter /out/ QUERIES instead of selecting them.
     */
    @LispMethod(comment = "@param COMPLEMENT?;\r\n\t\tif non-nil, will filter /out/ QUERIES instead of selecting them.")
    public static final SubLObject kbq_filter_query_set_run_to_queries_alt(SubLObject query_set_run, SubLObject queries, SubLObject complementP) {
        if (complementP == UNPROVIDED) {
            complementP = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject new_comment = $$$filtered_to_queries;
                SubLObject v_answer = NIL;
                {
                    SubLObject _prev_bind_0 = $kbq_filter_query_set_run_to_queries$.currentBinding(thread);
                    try {
                        $kbq_filter_query_set_run_to_queries$.bind(set_utilities.construct_set_from_list(queries, symbol_function(EQ), UNPROVIDED), thread);
                        v_answer = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_by_test(query_set_run, new_comment, NIL != complementP ? ((SubLObject) (KBQ_FILTER_QUERY_SET_RUN_TO_QUERIES_NOT_LAMBDA)) : KBQ_FILTER_QUERY_SET_RUN_TO_QUERIES_LAMBDA, KBQ_QUERY_RUN_QUERY);
                    } finally {
                        $kbq_filter_query_set_run_to_queries$.rebind(_prev_bind_0, thread);
                    }
                }
                return v_answer;
            }
        }
    }

    /**
     *
     *
     * @param COMPLEMENT?;
     * 		if non-nil, will filter /out/ QUERIES instead of selecting them.
     */
    @LispMethod(comment = "@param COMPLEMENT?;\r\n\t\tif non-nil, will filter /out/ QUERIES instead of selecting them.")
    public static SubLObject kbq_filter_query_set_run_to_queries(final SubLObject query_set_run, final SubLObject queries, SubLObject complementP) {
        if (complementP == UNPROVIDED) {
            complementP = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject new_comment = kbq_query_run.$$$filtered_to_queries;
        SubLObject v_answer = NIL;
        final SubLObject _prev_bind_0 = kbq_query_run.$kbq_filter_query_set_run_to_queries$.currentBinding(thread);
        try {
            kbq_query_run.$kbq_filter_query_set_run_to_queries$.bind(construct_set_from_list(queries, symbol_function(EQUAL), UNPROVIDED), thread);
            v_answer = kbq_query_run.kbq_filter_query_set_run_by_test(query_set_run, new_comment, NIL != complementP ? kbq_query_run.KBQ_FILTER_QUERY_SET_RUN_TO_QUERIES_NOT_LAMBDA : kbq_query_run.KBQ_FILTER_QUERY_SET_RUN_TO_QUERIES_LAMBDA, kbq_query_run.KBQ_QUERY_RUN_QUERY);
        } finally {
            kbq_query_run.$kbq_filter_query_set_run_to_queries$.rebind(_prev_bind_0, thread);
        }
        return v_answer;
    }

    public static final SubLObject kct_filter_test_set_run_to_tests_lambda_alt(SubLObject test) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            return set.set_memberP(test, $kct_filter_test_set_run_to_tests$.getDynamicValue(thread));
        }
    }

    public static SubLObject kct_filter_test_set_run_to_tests_lambda(final SubLObject test) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return set_memberP(test, kbq_query_run.$kct_filter_test_set_run_to_tests$.getDynamicValue(thread));
    }

    public static final SubLObject kct_filter_test_set_run_to_tests_not_lambda_alt(SubLObject test) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            return makeBoolean(NIL == set.set_memberP(test, $kct_filter_test_set_run_to_tests$.getDynamicValue(thread)));
        }
    }

    public static SubLObject kct_filter_test_set_run_to_tests_not_lambda(final SubLObject test) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return makeBoolean(NIL == set_memberP(test, kbq_query_run.$kct_filter_test_set_run_to_tests$.getDynamicValue(thread)));
    }

    /**
     *
     *
     * @param COMPLEMENT?;
     * 		if non-nil, will filter /out/ TESTS instead of selecting them.
     */
    @LispMethod(comment = "@param COMPLEMENT?;\r\n\t\tif non-nil, will filter /out/ TESTS instead of selecting them.")
    public static final SubLObject kct_filter_test_set_run_to_tests_alt(SubLObject test_set_run, SubLObject tests, SubLObject complementP) {
        if (complementP == UNPROVIDED) {
            complementP = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject new_comment = $$$filtered_to_tests;
                SubLObject v_answer = NIL;
                {
                    SubLObject _prev_bind_0 = $kct_filter_test_set_run_to_tests$.currentBinding(thread);
                    try {
                        $kct_filter_test_set_run_to_tests$.bind(set_utilities.construct_set_from_list(tests, symbol_function(EQ), UNPROVIDED), thread);
                        v_answer = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_filter_test_set_run_by_test(test_set_run, new_comment, NIL != complementP ? ((SubLObject) (KCT_FILTER_TEST_SET_RUN_TO_TESTS_NOT_LAMBDA)) : KCT_FILTER_TEST_SET_RUN_TO_TESTS_LAMBDA, KCT_TEST_RUN_TEST);
                    } finally {
                        $kct_filter_test_set_run_to_tests$.rebind(_prev_bind_0, thread);
                    }
                }
                return v_answer;
            }
        }
    }

    /**
     *
     *
     * @param COMPLEMENT?;
     * 		if non-nil, will filter /out/ TESTS instead of selecting them.
     */
    @LispMethod(comment = "@param COMPLEMENT?;\r\n\t\tif non-nil, will filter /out/ TESTS instead of selecting them.")
    public static SubLObject kct_filter_test_set_run_to_tests(final SubLObject test_set_run, final SubLObject tests, SubLObject complementP) {
        if (complementP == UNPROVIDED) {
            complementP = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject new_comment = kbq_query_run.$$$filtered_to_tests;
        SubLObject v_answer = NIL;
        final SubLObject _prev_bind_0 = kbq_query_run.$kct_filter_test_set_run_to_tests$.currentBinding(thread);
        try {
            kbq_query_run.$kct_filter_test_set_run_to_tests$.bind(construct_set_from_list(tests, symbol_function(EQUAL), UNPROVIDED), thread);
            v_answer = kbq_query_run.kct_filter_test_set_run_by_test(test_set_run, new_comment, NIL != complementP ? kbq_query_run.KCT_FILTER_TEST_SET_RUN_TO_TESTS_NOT_LAMBDA : kbq_query_run.KCT_FILTER_TEST_SET_RUN_TO_TESTS_LAMBDA, kbq_query_run.KCT_TEST_RUN_TEST);
        } finally {
            kbq_query_run.$kct_filter_test_set_run_to_tests$.rebind(_prev_bind_0, thread);
        }
        return v_answer;
    }

    public static final SubLObject kbq_filter_query_set_run_to_query_collection_alt(SubLObject query_set_run, SubLObject collection, SubLObject complementP) {
        if (complementP == UNPROVIDED) {
            complementP = NIL;
        }
        {
            SubLObject queries = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_queries(query_set_run);
            SubLObject filtered_queries = com.cyc.cycjava.cycl.inference.kbq_query_run.cached_all_instances_among(collection, queries, kct_variables.kct_mt());
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run, filtered_queries, complementP);
        }
    }

    public static SubLObject kbq_filter_query_set_run_to_query_collection(final SubLObject query_set_run, final SubLObject collection, SubLObject complementP) {
        if (complementP == UNPROVIDED) {
            complementP = NIL;
        }
        final SubLObject queries = kbq_query_run.kbq_query_set_run_queries(query_set_run);
        final SubLObject filtered_queries = kbq_query_run.cached_all_instances_among(collection, queries, kct_mt());
        return kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run, filtered_queries, complementP);
    }

    public static final SubLObject kct_filter_test_set_run_to_test_collection_alt(SubLObject test_set_run, SubLObject collection, SubLObject complementP) {
        if (complementP == UNPROVIDED) {
            complementP = NIL;
        }
        {
            SubLObject tests = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_tests(test_set_run);
            SubLObject filtered_tests = com.cyc.cycjava.cycl.inference.kbq_query_run.cached_all_instances_among(collection, tests, kct_variables.kct_mt());
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_filter_test_set_run_to_tests(test_set_run, filtered_tests, complementP);
        }
    }

    public static SubLObject kct_filter_test_set_run_to_test_collection(final SubLObject test_set_run, final SubLObject collection, SubLObject complementP) {
        if (complementP == UNPROVIDED) {
            complementP = NIL;
        }
        final SubLObject tests = kbq_query_run.kct_test_set_run_tests(test_set_run);
        final SubLObject filtered_tests = kbq_query_run.cached_all_instances_among(collection, tests, kct_mt());
        return kbq_query_run.kct_filter_test_set_run_to_tests(test_set_run, filtered_tests, complementP);
    }

    public static final SubLObject clear_cached_all_instances_among_alt() {
        {
            SubLObject cs = $cached_all_instances_among_caching_state$.getGlobalValue();
            if (NIL != cs) {
                caching_state_clear(cs);
            }
        }
        return NIL;
    }

    public static SubLObject clear_cached_all_instances_among() {
        final SubLObject cs = kbq_query_run.$cached_all_instances_among_caching_state$.getGlobalValue();
        if (NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return NIL;
    }

    public static final SubLObject remove_cached_all_instances_among_alt(SubLObject col, SubLObject terms, SubLObject mt) {
        return caching_state_remove_function_results_with_args($cached_all_instances_among_caching_state$.getGlobalValue(), list(col, terms, mt), UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject remove_cached_all_instances_among(final SubLObject col, final SubLObject terms, final SubLObject mt) {
        return memoization_state.caching_state_remove_function_results_with_args(kbq_query_run.$cached_all_instances_among_caching_state$.getGlobalValue(), list(col, terms, mt), UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject cached_all_instances_among_internal_alt(SubLObject col, SubLObject terms, SubLObject mt) {
        return isa.all_instances_among(col, terms, mt, UNPROVIDED);
    }

    public static SubLObject cached_all_instances_among_internal(final SubLObject col, final SubLObject terms, final SubLObject mt) {
        return all_instances_among(col, terms, mt, UNPROVIDED);
    }

    public static final SubLObject cached_all_instances_among_alt(SubLObject col, SubLObject terms, SubLObject mt) {
        {
            SubLObject caching_state = $cached_all_instances_among_caching_state$.getGlobalValue();
            if (NIL == caching_state) {
                caching_state = create_global_caching_state_for_name(CACHED_ALL_INSTANCES_AMONG, $cached_all_instances_among_caching_state$, NIL, EQUAL, THREE_INTEGER, ZERO_INTEGER);
                register_hl_store_cache_clear_callback(CLEAR_CACHED_ALL_INSTANCES_AMONG);
            }
            {
                SubLObject sxhash = sxhash_calc_3(col, terms, mt);
                SubLObject collisions = caching_state_lookup(caching_state, sxhash, UNPROVIDED);
                if (collisions != $kw377$_MEMOIZED_ITEM_NOT_FOUND_) {
                    {
                        SubLObject cdolist_list_var = collisions;
                        SubLObject collision = NIL;
                        for (collision = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , collision = cdolist_list_var.first()) {
                            {
                                SubLObject cached_args = collision.first();
                                SubLObject results2 = second(collision);
                                if (col.equal(cached_args.first())) {
                                    cached_args = cached_args.rest();
                                    if (terms.equal(cached_args.first())) {
                                        cached_args = cached_args.rest();
                                        if (((NIL != cached_args) && (NIL == cached_args.rest())) && mt.equal(cached_args.first())) {
                                            return caching_results(results2);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    SubLObject results = arg2(resetMultipleValues(), multiple_value_list(com.cyc.cycjava.cycl.inference.kbq_query_run.cached_all_instances_among_internal(col, terms, mt)));
                    caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results, list(col, terms, mt));
                    return caching_results(results);
                }
            }
        }
    }

    public static SubLObject cached_all_instances_among(final SubLObject col, final SubLObject terms, final SubLObject mt) {
        SubLObject caching_state = kbq_query_run.$cached_all_instances_among_caching_state$.getGlobalValue();
        if (NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name(kbq_query_run.CACHED_ALL_INSTANCES_AMONG, kbq_query_run.$cached_all_instances_among_caching_state$, NIL, EQUAL, THREE_INTEGER, ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback(kbq_query_run.CLEAR_CACHED_ALL_INSTANCES_AMONG);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_3(col, terms, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = NIL;
            collision = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = second(collision);
                if (col.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (terms.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (((NIL != cached_args) && (NIL == cached_args.rest())) && mt.equal(cached_args.first())) {
                            return memoization_state.caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            } 
        }
        final SubLObject results3 = arg2(resetMultipleValues(), multiple_value_list(kbq_query_run.cached_all_instances_among_internal(col, terms, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, list(col, terms, mt));
        return memoization_state.caching_results(results3);
    }

    public static final SubLObject kbq_queries_common_to_all_query_set_runs_alt(SubLObject query_set_runs) {
        if (NIL != list_utilities.singletonP(query_set_runs)) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_valid_queries(query_set_runs.first());
        } else {
            {
                SubLObject datum = query_set_runs;
                SubLObject current = datum;
                SubLObject first_query_set_run = NIL;
                SubLObject rest_query_set_runs = NIL;
                destructuring_bind_must_consp(current, datum, $list_alt378);
                first_query_set_run = current.first();
                current = current.rest();
                rest_query_set_runs = current;
                {
                    SubLObject intersection_set = set_utilities.construct_set_from_list(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_valid_queries(first_query_set_run), symbol_function(EQ), UNPROVIDED);
                    SubLObject cdolist_list_var = rest_query_set_runs;
                    SubLObject rest_query_set_run = NIL;
                    for (rest_query_set_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , rest_query_set_run = cdolist_list_var.first()) {
                        {
                            SubLObject candidate_set = set_utilities.construct_set_from_list(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_valid_queries(rest_query_set_run), symbol_function(EQ), UNPROVIDED);
                            SubLObject missing = NIL;
                            SubLObject set_contents_var = set.do_set_internal(intersection_set);
                            SubLObject basis_object = set_contents.do_set_contents_basis_object(set_contents_var);
                            SubLObject state = NIL;
                            for (state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                {
                                    SubLObject item = set_contents.do_set_contents_next(basis_object, state);
                                    if (NIL != set_contents.do_set_contents_element_validP(state, item)) {
                                        if (NIL == set.set_memberP(item, candidate_set)) {
                                            missing = cons(item, missing);
                                        }
                                    }
                                }
                            }
                            {
                                SubLObject cdolist_list_var_45 = missing;
                                SubLObject item = NIL;
                                for (item = cdolist_list_var_45.first(); NIL != cdolist_list_var_45; cdolist_list_var_45 = cdolist_list_var_45.rest() , item = cdolist_list_var_45.first()) {
                                    set.set_remove(item, intersection_set);
                                }
                            }
                        }
                    }
                    return set.set_element_list(intersection_set);
                }
            }
        }
    }

    public static SubLObject kbq_queries_common_to_all_query_set_runs(final SubLObject query_set_runs) {
        if (NIL != singletonP(query_set_runs)) {
            return kbq_query_run.kbq_query_set_run_valid_queries(query_set_runs.first());
        }
        SubLObject first_query_set_run = NIL;
        SubLObject rest_query_set_runs = NIL;
        destructuring_bind_must_consp(query_set_runs, query_set_runs, kbq_query_run.$list431);
        first_query_set_run = query_set_runs.first();
        final SubLObject current = rest_query_set_runs = query_set_runs.rest();
        final SubLObject intersection_set = construct_set_from_list(kbq_query_run.kbq_query_set_run_valid_queries(first_query_set_run), symbol_function(EQ), UNPROVIDED);
        SubLObject cdolist_list_var = rest_query_set_runs;
        SubLObject rest_query_set_run = NIL;
        rest_query_set_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject candidate_set = construct_set_from_list(kbq_query_run.kbq_query_set_run_valid_queries(rest_query_set_run), symbol_function(EQ), UNPROVIDED);
            SubLObject missing = NIL;
            final SubLObject set_contents_var = do_set_internal(intersection_set);
            SubLObject basis_object;
            SubLObject state;
            SubLObject item;
            for (basis_object = do_set_contents_basis_object(set_contents_var), state = NIL, state = do_set_contents_initial_state(basis_object, set_contents_var); NIL == do_set_contents_doneP(basis_object, state); state = do_set_contents_update_state(state)) {
                item = do_set_contents_next(basis_object, state);
                if ((NIL != do_set_contents_element_validP(state, item)) && (NIL == set_memberP(item, candidate_set))) {
                    missing = cons(item, missing);
                }
            }
            SubLObject cdolist_list_var_$64 = missing;
            SubLObject item2 = NIL;
            item2 = cdolist_list_var_$64.first();
            while (NIL != cdolist_list_var_$64) {
                set_remove(item2, intersection_set);
                cdolist_list_var_$64 = cdolist_list_var_$64.rest();
                item2 = cdolist_list_var_$64.first();
            } 
            cdolist_list_var = cdolist_list_var.rest();
            rest_query_set_run = cdolist_list_var.first();
        } 
        return set_element_list(intersection_set);
    }

    public static final SubLObject kct_tests_common_to_all_test_set_runs_alt(SubLObject test_set_runs) {
        if (NIL != list_utilities.singletonP(test_set_runs)) {
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_valid_tests(test_set_runs.first());
        } else {
            {
                SubLObject datum = test_set_runs;
                SubLObject current = datum;
                SubLObject first_test_set_run = NIL;
                SubLObject rest_test_set_runs = NIL;
                destructuring_bind_must_consp(current, datum, $list_alt379);
                first_test_set_run = current.first();
                current = current.rest();
                rest_test_set_runs = current;
                {
                    SubLObject intersection_set = set_utilities.construct_set_from_list(com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_valid_tests(first_test_set_run), symbol_function(EQ), UNPROVIDED);
                    SubLObject cdolist_list_var = rest_test_set_runs;
                    SubLObject rest_test_set_run = NIL;
                    for (rest_test_set_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , rest_test_set_run = cdolist_list_var.first()) {
                        {
                            SubLObject candidate_set = set_utilities.construct_set_from_list(com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_valid_tests(rest_test_set_run), symbol_function(EQ), UNPROVIDED);
                            SubLObject missing = NIL;
                            SubLObject set_contents_var = set.do_set_internal(intersection_set);
                            SubLObject basis_object = set_contents.do_set_contents_basis_object(set_contents_var);
                            SubLObject state = NIL;
                            for (state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                {
                                    SubLObject item = set_contents.do_set_contents_next(basis_object, state);
                                    if (NIL != set_contents.do_set_contents_element_validP(state, item)) {
                                        if (NIL == set.set_memberP(item, candidate_set)) {
                                            missing = cons(item, missing);
                                        }
                                    }
                                }
                            }
                            {
                                SubLObject cdolist_list_var_46 = missing;
                                SubLObject item = NIL;
                                for (item = cdolist_list_var_46.first(); NIL != cdolist_list_var_46; cdolist_list_var_46 = cdolist_list_var_46.rest() , item = cdolist_list_var_46.first()) {
                                    set.set_remove(item, intersection_set);
                                }
                            }
                        }
                    }
                    return set.set_element_list(intersection_set);
                }
            }
        }
    }

    public static SubLObject kct_tests_common_to_all_test_set_runs(final SubLObject test_set_runs) {
        if (NIL != singletonP(test_set_runs)) {
            return kbq_query_run.kct_test_set_run_valid_tests(test_set_runs.first());
        }
        SubLObject first_test_set_run = NIL;
        SubLObject rest_test_set_runs = NIL;
        destructuring_bind_must_consp(test_set_runs, test_set_runs, kbq_query_run.$list432);
        first_test_set_run = test_set_runs.first();
        final SubLObject current = rest_test_set_runs = test_set_runs.rest();
        final SubLObject intersection_set = construct_set_from_list(kbq_query_run.kct_test_set_run_valid_tests(first_test_set_run), symbol_function(EQ), UNPROVIDED);
        SubLObject cdolist_list_var = rest_test_set_runs;
        SubLObject rest_test_set_run = NIL;
        rest_test_set_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject candidate_set = construct_set_from_list(kbq_query_run.kct_test_set_run_valid_tests(rest_test_set_run), symbol_function(EQ), UNPROVIDED);
            SubLObject missing = NIL;
            final SubLObject set_contents_var = do_set_internal(intersection_set);
            SubLObject basis_object;
            SubLObject state;
            SubLObject item;
            for (basis_object = do_set_contents_basis_object(set_contents_var), state = NIL, state = do_set_contents_initial_state(basis_object, set_contents_var); NIL == do_set_contents_doneP(basis_object, state); state = do_set_contents_update_state(state)) {
                item = do_set_contents_next(basis_object, state);
                if ((NIL != do_set_contents_element_validP(state, item)) && (NIL == set_memberP(item, candidate_set))) {
                    missing = cons(item, missing);
                }
            }
            SubLObject cdolist_list_var_$65 = missing;
            SubLObject item2 = NIL;
            item2 = cdolist_list_var_$65.first();
            while (NIL != cdolist_list_var_$65) {
                set_remove(item2, intersection_set);
                cdolist_list_var_$65 = cdolist_list_var_$65.rest();
                item2 = cdolist_list_var_$65.first();
            } 
            cdolist_list_var = cdolist_list_var.rest();
            rest_test_set_run = cdolist_list_var.first();
        } 
        return set_element_list(intersection_set);
    }

    public static final SubLObject kct_consistently_succeeding_tests_alt(SubLObject test_set_runs) {
        {
            SubLObject succeeding_test_set_runs = Mapping.mapcar(KCT_SUCCEEDING_TEST_SET_RUN, test_set_runs);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_tests_common_to_all_test_set_runs(succeeding_test_set_runs);
        }
    }

    public static SubLObject kct_consistently_succeeding_tests(final SubLObject test_set_runs) {
        final SubLObject succeeding_test_set_runs = Mapping.mapcar(kbq_query_run.KCT_SUCCEEDING_TEST_SET_RUN, test_set_runs);
        return kbq_query_run.kct_tests_common_to_all_test_set_runs(succeeding_test_set_runs);
    }

    public static final SubLObject kct_consistently_succeeding_test_set_runs_alt(SubLObject test_set_runs) {
        {
            SubLObject consistently_succeeding_test_set_runs = NIL;
            SubLObject succeeding_test_set_runs = Mapping.mapcar(KCT_SUCCEEDING_TEST_SET_RUN, test_set_runs);
            SubLObject consistently_succeeding_tests = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_tests_common_to_all_test_set_runs(succeeding_test_set_runs);
            SubLObject cdolist_list_var = succeeding_test_set_runs;
            SubLObject test_set_run = NIL;
            for (test_set_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , test_set_run = cdolist_list_var.first()) {
                {
                    SubLObject consistently_succeeding_test_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_filter_test_set_run_to_tests(test_set_run, consistently_succeeding_tests, UNPROVIDED);
                    consistently_succeeding_test_set_runs = cons(consistently_succeeding_test_set_run, consistently_succeeding_test_set_runs);
                }
            }
            return nreverse(consistently_succeeding_test_set_runs);
        }
    }

    public static SubLObject kct_consistently_succeeding_test_set_runs(final SubLObject test_set_runs) {
        SubLObject consistently_succeeding_test_set_runs = NIL;
        final SubLObject succeeding_test_set_runs = Mapping.mapcar(kbq_query_run.KCT_SUCCEEDING_TEST_SET_RUN, test_set_runs);
        final SubLObject consistently_succeeding_tests = kbq_query_run.kct_tests_common_to_all_test_set_runs(succeeding_test_set_runs);
        SubLObject cdolist_list_var = succeeding_test_set_runs;
        SubLObject test_set_run = NIL;
        test_set_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject consistently_succeeding_test_set_run = kbq_query_run.kct_filter_test_set_run_to_tests(test_set_run, consistently_succeeding_tests, UNPROVIDED);
            consistently_succeeding_test_set_runs = cons(consistently_succeeding_test_set_run, consistently_succeeding_test_set_runs);
            cdolist_list_var = cdolist_list_var.rest();
            test_set_run = cdolist_list_var.first();
        } 
        return nreverse(consistently_succeeding_test_set_runs);
    }

    /**
     * The list of queries that are answerable in QUERY-SET-RUN-1 but not in QUERY-SET-RUN-2
     */
    @LispMethod(comment = "The list of queries that are answerable in QUERY-SET-RUN-1 but not in QUERY-SET-RUN-2")
    public static final SubLObject queries_that_became_unanswerable_alt(SubLObject query_set_run_1, SubLObject query_set_run_2) {
        {
            SubLObject answerable_queries_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_queries(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_answerable_query_set_run(query_set_run_1));
            SubLObject unanswerable_queries_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_queries(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_unanswerable_query_set_run(query_set_run_2));
            SubLObject queries_that_became_unanswerable = keyhash_utilities.fast_intersection(answerable_queries_1, unanswerable_queries_2, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            return queries_that_became_unanswerable;
        }
    }

    /**
     * The list of queries that are answerable in QUERY-SET-RUN-1 but not in QUERY-SET-RUN-2
     */
    @LispMethod(comment = "The list of queries that are answerable in QUERY-SET-RUN-1 but not in QUERY-SET-RUN-2")
    public static SubLObject queries_that_became_unanswerable(final SubLObject query_set_run_1, final SubLObject query_set_run_2) {
        final SubLObject answerable_queries_1 = kbq_query_run.kbq_query_set_run_queries(kbq_query_run.kbq_answerable_query_set_run(query_set_run_1));
        final SubLObject unanswerable_queries_2 = kbq_query_run.kbq_query_set_run_queries(kbq_query_run.kbq_unanswerable_query_set_run(query_set_run_2));
        final SubLObject queries_that_became_unanswerable = fast_intersection(answerable_queries_1, unanswerable_queries_2, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return queries_that_became_unanswerable;
    }

    /**
     * The list of queries with different answer counts in QUERY-SET-RUN-1 and QUERY-SET-RUN-2
     */
    @LispMethod(comment = "The list of queries with different answer counts in QUERY-SET-RUN-1 and QUERY-SET-RUN-2")
    public static final SubLObject queries_that_changed_answer_count_alt(SubLObject query_set_run_1, SubLObject query_set_run_2) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_queries(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_different_answer_count_query_set_runs(query_set_run_1, query_set_run_2));
    }

    /**
     * The list of queries with different answer counts in QUERY-SET-RUN-1 and QUERY-SET-RUN-2
     */
    @LispMethod(comment = "The list of queries with different answer counts in QUERY-SET-RUN-1 and QUERY-SET-RUN-2")
    public static SubLObject queries_that_changed_answer_count(final SubLObject query_set_run_1, final SubLObject query_set_run_2) {
        return kbq_query_run.kbq_query_set_run_queries(kbq_query_run.kbq_different_answer_count_query_set_runs(query_set_run_1, query_set_run_2));
    }

    /**
     * Returns the N worst slowdowns from QUERY-SET-RUN-2, as compared to the baseline of QUERY-SET-RUN-1.
     */
    @LispMethod(comment = "Returns the N worst slowdowns from QUERY-SET-RUN-2, as compared to the baseline of QUERY-SET-RUN-1.")
    public static final SubLObject kbq_query_runs_with_worst_slowdown_alt(SubLObject query_set_run_1, SubLObject query_set_run_2, SubLObject n, SubLObject metric) {
        if (n == UNPROVIDED) {
            n = TEN_INTEGER;
        }
        if (metric == UNPROVIDED) {
            metric = $COMPLETE_TOTAL_TIME;
        }
        {
            SubLObject list = NIL;
            SubLObject query_run_1 = NIL;
            SubLObject query_run_1_47 = NIL;
            SubLObject query_run_2 = NIL;
            SubLObject query_run_2_48 = NIL;
            for (query_run_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run_1), query_run_1_47 = query_run_1.first(), query_run_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run_2), query_run_2_48 = query_run_2.first(); !((NIL == query_run_2) && (NIL == query_run_1)); query_run_1 = query_run_1.rest() , query_run_1_47 = query_run_1.first() , query_run_2 = query_run_2.rest() , query_run_2_48 = query_run_2.first()) {
                if (!com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run_1_47).equal(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run_2_48))) {
                    return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_runs_with_worst_slowdown_robust(query_set_run_1, query_set_run_2, n, metric);
                }
                {
                    SubLObject metric_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run_1_47, metric, UNPROVIDED);
                    SubLObject metric_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run_2_48, metric, UNPROVIDED);
                    if ((NIL != number_utilities.positive_number_p(metric_1)) && (NIL != number_utilities.positive_number_p(metric_2))) {
                        {
                            SubLObject slowdown = subtract(metric_2, metric_1);
                            list = cons(list(query_run_2_48, metric_2, metric_1, slowdown), list);
                        }
                    }
                }
            }
            return list_utilities.first_n(n, Sort.sort(list, symbol_function($sym381$_), symbol_function(FOURTH)));
        }
    }

    /**
     * Returns the N worst slowdowns from QUERY-SET-RUN-2, as compared to the baseline of QUERY-SET-RUN-1.
     */
    @LispMethod(comment = "Returns the N worst slowdowns from QUERY-SET-RUN-2, as compared to the baseline of QUERY-SET-RUN-1.")
    public static SubLObject kbq_query_runs_with_worst_slowdown(final SubLObject query_set_run_1, final SubLObject query_set_run_2, SubLObject n, SubLObject metric) {
        if (n == UNPROVIDED) {
            n = TEN_INTEGER;
        }
        if (metric == UNPROVIDED) {
            metric = kbq_query_run.$COMPLETE_TOTAL_TIME;
        }
        SubLObject list = NIL;
        SubLObject query_run_1 = NIL;
        SubLObject query_run_1_$66 = NIL;
        SubLObject query_run_2 = NIL;
        SubLObject query_run_2_$67 = NIL;
        query_run_1 = kbq_query_run.kbq_query_set_run_query_runs(query_set_run_1);
        query_run_1_$66 = query_run_1.first();
        query_run_2 = kbq_query_run.kbq_query_set_run_query_runs(query_set_run_2);
        query_run_2_$67 = query_run_2.first();
        while ((NIL != query_run_2) || (NIL != query_run_1)) {
            if (!kbq_query_run.kbq_query_run_query(query_run_1_$66).equal(kbq_query_run.kbq_query_run_query(query_run_2_$67))) {
                return kbq_query_run.kbq_query_runs_with_worst_slowdown_robust(query_set_run_1, query_set_run_2, n, metric);
            }
            final SubLObject metric_1 = kbq_query_run.kbq_query_run_property_value(query_run_1_$66, metric, UNPROVIDED);
            final SubLObject metric_2 = kbq_query_run.kbq_query_run_property_value(query_run_2_$67, metric, UNPROVIDED);
            if ((NIL != positive_number_p(metric_1)) && (NIL != positive_number_p(metric_2))) {
                final SubLObject slowdown = subtract(metric_2, metric_1);
                list = cons(list(query_run_2_$67, metric_2, metric_1, slowdown), list);
            }
            query_run_1 = query_run_1.rest();
            query_run_1_$66 = query_run_1.first();
            query_run_2 = query_run_2.rest();
            query_run_2_$67 = query_run_2.first();
        } 
        return first_n(n, Sort.sort(list, symbol_function(kbq_query_run.$sym434$_), symbol_function(FOURTH)));
    }

    /**
     * Like @xref kbq-query-runs-with-worst-slowdown, but handles non-corresponding query runs.
     */
    @LispMethod(comment = "Like @xref kbq-query-runs-with-worst-slowdown, but handles non-corresponding query runs.")
    public static final SubLObject kbq_query_runs_with_worst_slowdown_robust_alt(SubLObject query_set_run_1, SubLObject query_set_run_2, SubLObject n, SubLObject metric) {
        if (n == UNPROVIDED) {
            n = TEN_INTEGER;
        }
        if (metric == UNPROVIDED) {
            metric = $COMPLETE_TOTAL_TIME;
        }
        {
            SubLObject list = NIL;
            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run_1);
            SubLObject query_run_1 = NIL;
            for (query_run_1 = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run_1 = cdolist_list_var.first()) {
                {
                    SubLObject query_run_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_lookup_query_run(query_set_run_2, com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run_1));
                    SubLObject metric_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run_1, metric, UNPROVIDED);
                    SubLObject metric_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run_2, metric, UNPROVIDED);
                    if ((NIL != number_utilities.positive_number_p(metric_1)) && (NIL != number_utilities.positive_number_p(metric_2))) {
                        {
                            SubLObject slowdown = subtract(metric_2, metric_1);
                            list = cons(list(query_run_2, metric_2, metric_1, slowdown), list);
                        }
                    }
                }
            }
            return list_utilities.first_n(n, Sort.sort(list, symbol_function($sym381$_), symbol_function(FOURTH)));
        }
    }

    /**
     * Like @xref kbq-query-runs-with-worst-slowdown, but handles non-corresponding query runs.
     */
    @LispMethod(comment = "Like @xref kbq-query-runs-with-worst-slowdown, but handles non-corresponding query runs.")
    public static SubLObject kbq_query_runs_with_worst_slowdown_robust(final SubLObject query_set_run_1, final SubLObject query_set_run_2, SubLObject n, SubLObject metric) {
        if (n == UNPROVIDED) {
            n = TEN_INTEGER;
        }
        if (metric == UNPROVIDED) {
            metric = kbq_query_run.$COMPLETE_TOTAL_TIME;
        }
        SubLObject list = NIL;
        SubLObject cdolist_list_var = kbq_query_run.kbq_query_set_run_query_runs(query_set_run_1);
        SubLObject query_run_1 = NIL;
        query_run_1 = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject query_run_2 = kbq_query_run.kbq_lookup_query_run(query_set_run_2, kbq_query_run.kbq_query_run_query(query_run_1));
            final SubLObject metric_1 = kbq_query_run.kbq_query_run_property_value(query_run_1, metric, UNPROVIDED);
            final SubLObject metric_2 = kbq_query_run.kbq_query_run_property_value(query_run_2, metric, UNPROVIDED);
            if ((NIL != positive_number_p(metric_1)) && (NIL != positive_number_p(metric_2))) {
                final SubLObject slowdown = subtract(metric_2, metric_1);
                list = cons(list(query_run_2, metric_2, metric_1, slowdown), list);
            }
            cdolist_list_var = cdolist_list_var.rest();
            query_run_1 = cdolist_list_var.first();
        } 
        return first_n(n, Sort.sort(list, symbol_function(kbq_query_run.$sym434$_), symbol_function(FOURTH)));
    }

    public static final SubLObject kbq_slowest_query_runs_alt(SubLObject query_set_run, SubLObject n, SubLObject metric) {
        if (n == UNPROVIDED) {
            n = TEN_INTEGER;
        }
        if (metric == UNPROVIDED) {
            metric = $COMPLETE_TOTAL_TIME;
        }
        {
            SubLObject list = NIL;
            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
            SubLObject query_run = NIL;
            for (query_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run = cdolist_list_var.first()) {
                {
                    SubLObject value = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, metric, UNPROVIDED);
                    if (value.isNumber()) {
                        list = cons(list(query_run, value), list);
                    }
                }
            }
            return Mapping.mapcar(symbol_function(FIRST), list_utilities.first_n(n, Sort.sort(list, symbol_function($sym381$_), symbol_function(SECOND))));
        }
    }

    public static SubLObject kbq_slowest_query_runs(final SubLObject query_set_run, SubLObject n, SubLObject metric) {
        if (n == UNPROVIDED) {
            n = TEN_INTEGER;
        }
        if (metric == UNPROVIDED) {
            metric = kbq_query_run.$COMPLETE_TOTAL_TIME;
        }
        SubLObject list = NIL;
        SubLObject cdolist_list_var = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
        SubLObject query_run = NIL;
        query_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject value = kbq_query_run.kbq_query_run_property_value(query_run, metric, UNPROVIDED);
            if (value.isNumber()) {
                list = cons(list(query_run, value), list);
            }
            cdolist_list_var = cdolist_list_var.rest();
            query_run = cdolist_list_var.first();
        } 
        return Mapping.mapcar(symbol_function(FIRST), first_n(n, Sort.sort(list, symbol_function(kbq_query_run.$sym434$_), symbol_function(SECOND))));
    }

    public static final SubLObject kct_slowest_test_runs_alt(SubLObject test_set_run, SubLObject n, SubLObject metric) {
        if (n == UNPROVIDED) {
            n = TEN_INTEGER;
        }
        if (metric == UNPROVIDED) {
            metric = $COMPLETE_TOTAL_TIME;
        }
        {
            SubLObject list = NIL;
            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_test_runs(test_set_run);
            SubLObject test_run = NIL;
            for (test_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , test_run = cdolist_list_var.first()) {
                {
                    SubLObject query_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_query_run(test_run);
                    SubLObject value = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, metric, UNPROVIDED);
                    if (value.isNumber()) {
                        list = cons(list(test_run, value), list);
                    }
                }
            }
            return Mapping.mapcar(symbol_function(FIRST), list_utilities.first_n(n, Sort.sort(list, symbol_function($sym381$_), symbol_function(SECOND))));
        }
    }

    public static SubLObject kct_slowest_test_runs(final SubLObject test_set_run, SubLObject n, SubLObject metric) {
        if (n == UNPROVIDED) {
            n = TEN_INTEGER;
        }
        if (metric == UNPROVIDED) {
            metric = kbq_query_run.$COMPLETE_TOTAL_TIME;
        }
        SubLObject list = NIL;
        SubLObject cdolist_list_var = kbq_query_run.kct_test_set_run_test_runs(test_set_run);
        SubLObject test_run = NIL;
        test_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject query_run = kbq_query_run.kct_test_run_query_run(test_run);
            final SubLObject value = kbq_query_run.kbq_query_run_property_value(query_run, metric, UNPROVIDED);
            if (value.isNumber()) {
                list = cons(list(test_run, value), list);
            }
            cdolist_list_var = cdolist_list_var.rest();
            test_run = cdolist_list_var.first();
        } 
        return Mapping.mapcar(symbol_function(FIRST), first_n(n, Sort.sort(list, symbol_function(kbq_query_run.$sym434$_), symbol_function(SECOND))));
    }

    public static final SubLObject kbq_compare_query_set_run_answers_alt(SubLObject query_set_run_1, SubLObject query_set_run_2) {
        {
            SubLObject differences = NIL;
            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run_1);
            SubLObject query_run_1 = NIL;
            for (query_run_1 = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run_1 = cdolist_list_var.first()) {
                {
                    SubLObject query = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run_1);
                    SubLObject query_run_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_lookup_query_run(query_set_run_2, query);
                    SubLObject difference = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_compare_query_run_answers(query_run_1, query_run_2);
                    if (NIL != difference) {
                        differences = cons(listS($QUERY, query, difference), differences);
                    }
                }
            }
            differences = nreverse(differences);
            return differences;
        }
    }

    public static SubLObject kbq_compare_query_set_run_answers(final SubLObject query_set_run_1, final SubLObject query_set_run_2) {
        SubLObject differences = NIL;
        SubLObject cdolist_list_var = kbq_query_run.kbq_query_set_run_query_runs(query_set_run_1);
        SubLObject query_run_1 = NIL;
        query_run_1 = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject query = kbq_query_run.kbq_query_run_query(query_run_1);
            final SubLObject query_run_2 = kbq_query_run.kbq_lookup_query_run(query_set_run_2, query);
            final SubLObject difference = kbq_query_run.kbq_compare_query_run_answers(query_run_1, query_run_2);
            if (NIL != difference) {
                differences = cons(listS($QUERY, query, difference), differences);
            }
            cdolist_list_var = cdolist_list_var.rest();
            query_run_1 = cdolist_list_var.first();
        } 
        differences = nreverse(differences);
        return differences;
    }

    public static final SubLObject kbq_summarize_compare_query_set_run_answers_alt(SubLObject query_set_run_1, SubLObject query_set_run_2) {
        {
            SubLObject answerable_2 = NIL;
            SubLObject more_answers_2 = NIL;
            SubLObject different_answers = NIL;
            SubLObject more_answers_1 = NIL;
            SubLObject answerable_1 = NIL;
            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_compare_query_set_run_answers(query_set_run_1, query_set_run_2);
            SubLObject difference = NIL;
            for (difference = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , difference = cdolist_list_var.first()) {
                {
                    SubLObject datum = difference;
                    SubLObject current = datum;
                    SubLObject allow_other_keys_p = NIL;
                    SubLObject rest = current;
                    SubLObject bad = NIL;
                    SubLObject current_49 = NIL;
                    for (; NIL != rest;) {
                        destructuring_bind_must_consp(rest, datum, $list_alt384);
                        current_49 = rest.first();
                        rest = rest.rest();
                        destructuring_bind_must_consp(rest, datum, $list_alt384);
                        if (NIL == member(current_49, $list_alt385, UNPROVIDED, UNPROVIDED)) {
                            bad = T;
                        }
                        if (current_49 == $ALLOW_OTHER_KEYS) {
                            allow_other_keys_p = rest.first();
                        }
                        rest = rest.rest();
                    }
                    if ((NIL != bad) && (NIL == allow_other_keys_p)) {
                        cdestructuring_bind_error(datum, $list_alt384);
                    }
                    {
                        SubLObject query_tail = property_list_member($QUERY, current);
                        SubLObject query = (NIL != query_tail) ? ((SubLObject) (cadr(query_tail))) : NIL;
                        SubLObject missing_from_1_tail = property_list_member($MISSING_FROM_1, current);
                        SubLObject missing_from_1 = (NIL != missing_from_1_tail) ? ((SubLObject) (cadr(missing_from_1_tail))) : NIL;
                        SubLObject missing_from_2_tail = property_list_member($MISSING_FROM_2, current);
                        SubLObject missing_from_2 = (NIL != missing_from_2_tail) ? ((SubLObject) (cadr(missing_from_2_tail))) : NIL;
                        SubLObject v_1_count = length(missing_from_2);
                        SubLObject v_2_count = length(missing_from_1);
                        if (v_1_count.numE(v_2_count)) {
                            different_answers = cons(list(query, v_1_count), different_answers);
                        } else {
                            if (v_2_count.isZero()) {
                                answerable_1 = cons(list(query, v_1_count), answerable_1);
                            } else {
                                if (v_1_count.isZero()) {
                                    answerable_2 = cons(list(query, v_2_count), answerable_2);
                                } else {
                                    if (v_1_count.numG(v_2_count)) {
                                        more_answers_1 = cons(list(query, subtract(v_1_count, v_2_count)), more_answers_1);
                                    } else {
                                        if (v_1_count.numL(v_2_count)) {
                                            more_answers_2 = cons(list(query, subtract(v_2_count, v_1_count)), more_answers_2);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return nconc(new SubLObject[]{ NIL != answerable_2 ? ((SubLObject) (list($ANSWERABLE_2, Sort.sort(answerable_2, symbol_function($sym381$_), symbol_function(SECOND))))) : NIL, NIL != more_answers_2 ? ((SubLObject) (list($MORE_ANSWERS_2, Sort.sort(more_answers_2, symbol_function($sym381$_), symbol_function(SECOND))))) : NIL, NIL != different_answers ? ((SubLObject) (list($DIFFERENT_ANSWERS, Sort.sort(different_answers, symbol_function($sym381$_), symbol_function(SECOND))))) : NIL, NIL != more_answers_1 ? ((SubLObject) (list($MORE_ANSWERS_1, Sort.sort(more_answers_1, symbol_function($sym381$_), symbol_function(SECOND))))) : NIL, NIL != answerable_1 ? ((SubLObject) (list($ANSWERABLE_1, Sort.sort(answerable_1, symbol_function($sym381$_), symbol_function(SECOND))))) : NIL });
        }
    }

    public static SubLObject kbq_summarize_compare_query_set_run_answers(final SubLObject query_set_run_1, final SubLObject query_set_run_2) {
        SubLObject answerable_2 = NIL;
        SubLObject more_answers_2 = NIL;
        SubLObject different_answers = NIL;
        SubLObject more_answers_3 = NIL;
        SubLObject answerable_3 = NIL;
        SubLObject cdolist_list_var = kbq_query_run.kbq_compare_query_set_run_answers(query_set_run_1, query_set_run_2);
        SubLObject difference = NIL;
        difference = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject current;
            final SubLObject datum = current = difference;
            SubLObject allow_other_keys_p = NIL;
            SubLObject rest = current;
            SubLObject bad = NIL;
            SubLObject current_$68 = NIL;
            while (NIL != rest) {
                destructuring_bind_must_consp(rest, datum, kbq_query_run.$list437);
                current_$68 = rest.first();
                rest = rest.rest();
                destructuring_bind_must_consp(rest, datum, kbq_query_run.$list437);
                if (NIL == member(current_$68, kbq_query_run.$list438, UNPROVIDED, UNPROVIDED)) {
                    bad = T;
                }
                if (current_$68 == kbq_query_run.$ALLOW_OTHER_KEYS) {
                    allow_other_keys_p = rest.first();
                }
                rest = rest.rest();
            } 
            if ((NIL != bad) && (NIL == allow_other_keys_p)) {
                cdestructuring_bind_error(datum, kbq_query_run.$list437);
            }
            final SubLObject query_tail = property_list_member($QUERY, current);
            final SubLObject query = (NIL != query_tail) ? cadr(query_tail) : NIL;
            final SubLObject missing_from_1_tail = property_list_member(kbq_query_run.$MISSING_FROM_1, current);
            final SubLObject missing_from_1 = (NIL != missing_from_1_tail) ? cadr(missing_from_1_tail) : NIL;
            final SubLObject missing_from_2_tail = property_list_member(kbq_query_run.$MISSING_FROM_2, current);
            final SubLObject missing_from_2 = (NIL != missing_from_2_tail) ? cadr(missing_from_2_tail) : NIL;
            final SubLObject v_1_count = length(missing_from_2);
            final SubLObject v_2_count = length(missing_from_1);
            if (v_1_count.numE(v_2_count)) {
                different_answers = cons(list(query, v_1_count), different_answers);
            } else
                if (v_2_count.isZero()) {
                    answerable_3 = cons(list(query, v_1_count), answerable_3);
                } else
                    if (v_1_count.isZero()) {
                        answerable_2 = cons(list(query, v_2_count), answerable_2);
                    } else
                        if (v_1_count.numG(v_2_count)) {
                            more_answers_3 = cons(list(query, subtract(v_1_count, v_2_count)), more_answers_3);
                        } else
                            if (v_1_count.numL(v_2_count)) {
                                more_answers_2 = cons(list(query, subtract(v_2_count, v_1_count)), more_answers_2);
                            }




            cdolist_list_var = cdolist_list_var.rest();
            difference = cdolist_list_var.first();
        } 
        return nconc(new SubLObject[]{ NIL != answerable_2 ? list($ANSWERABLE_2, Sort.sort(answerable_2, symbol_function(kbq_query_run.$sym434$_), symbol_function(SECOND))) : NIL, NIL != more_answers_2 ? list(kbq_query_run.$MORE_ANSWERS_2, Sort.sort(more_answers_2, symbol_function(kbq_query_run.$sym434$_), symbol_function(SECOND))) : NIL, NIL != different_answers ? list($DIFFERENT_ANSWERS, Sort.sort(different_answers, symbol_function(kbq_query_run.$sym434$_), symbol_function(SECOND))) : NIL, NIL != more_answers_3 ? list(kbq_query_run.$MORE_ANSWERS_1, Sort.sort(more_answers_3, symbol_function(kbq_query_run.$sym434$_), symbol_function(SECOND))) : NIL, NIL != answerable_3 ? list($ANSWERABLE_1, Sort.sort(answerable_3, symbol_function(kbq_query_run.$sym434$_), symbol_function(SECOND))) : NIL });
    }

    public static final SubLObject kbq_sort_query_runs_alt(SubLObject query_set_run, SubLObject metric) {
        return Sort.sort(copy_list(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run)), $sym84$SAFE__, com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_function_for_metric(metric));
    }

    public static SubLObject kbq_sort_query_runs(final SubLObject query_set_run, final SubLObject metric) {
        return Sort.sort(copy_list(kbq_query_run.kbq_query_set_run_query_runs(query_set_run)), kbq_query_run.$sym87$SAFE__, kbq_query_run.kbq_function_for_metric(metric));
    }

    public static final SubLObject kbq_lookup_query_run_alt(SubLObject query_set_run, SubLObject query) {
        {
            SubLObject query_runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
            SubLObject cdolist_list_var = query_runs;
            SubLObject query_run = NIL;
            for (query_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run = cdolist_list_var.first()) {
                if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_equal(query, com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run))) {
                    return query_run;
                }
            }
        }
        return NIL;
    }

    public static SubLObject kbq_lookup_query_run(final SubLObject query_set_run, final SubLObject query) {
        SubLObject cdolist_list_var;
        final SubLObject query_runs = cdolist_list_var = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
        SubLObject query_run = NIL;
        query_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != kbq_query_run.kbq_query_equal(query, kbq_query_run.kbq_query_run_query(query_run))) {
                return query_run;
            }
            cdolist_list_var = cdolist_list_var.rest();
            query_run = cdolist_list_var.first();
        } 
        return NIL;
    }

    public static final SubLObject kbq_lookup_query_run_from_query_runs_alt(SubLObject query_runs, SubLObject query) {
        {
            SubLObject cdolist_list_var = query_runs;
            SubLObject query_run = NIL;
            for (query_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run = cdolist_list_var.first()) {
                if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_equal(query, com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run))) {
                    return query_run;
                }
            }
        }
        return NIL;
    }

    public static SubLObject kbq_lookup_query_run_from_query_runs(final SubLObject query_runs, final SubLObject query) {
        SubLObject cdolist_list_var = query_runs;
        SubLObject query_run = NIL;
        query_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != kbq_query_run.kbq_query_equal(query, kbq_query_run.kbq_query_run_query(query_run))) {
                return query_run;
            }
            cdolist_list_var = cdolist_list_var.rest();
            query_run = cdolist_list_var.first();
        } 
        return NIL;
    }

    public static final SubLObject kbq_lookup_query_runs_alt(SubLObject query_set_runs, SubLObject query) {
        {
            SubLObject query_runs = NIL;
            SubLObject cdolist_list_var = query_set_runs;
            SubLObject query_set_run = NIL;
            for (query_set_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_set_run = cdolist_list_var.first()) {
                {
                    SubLObject query_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_lookup_query_run(query_set_run, query);
                    query_runs = cons(query_run, query_runs);
                }
            }
            return nreverse(query_runs);
        }
    }

    public static SubLObject kbq_lookup_query_runs(final SubLObject query_set_runs, final SubLObject query) {
        SubLObject query_runs = NIL;
        SubLObject cdolist_list_var = query_set_runs;
        SubLObject query_set_run = NIL;
        query_set_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject query_run = kbq_query_run.kbq_lookup_query_run(query_set_run, query);
            query_runs = cons(query_run, query_runs);
            cdolist_list_var = cdolist_list_var.rest();
            query_set_run = cdolist_list_var.first();
        } 
        return nreverse(query_runs);
    }

    public static final SubLObject kbq_query_equal_alt(SubLObject query_1, SubLObject query_2) {
        return equalp(query_1, query_2);
    }

    public static SubLObject kbq_query_equal(final SubLObject query_1, final SubLObject query_2) {
        return equalp(query_1, query_2);
    }

    public static final SubLObject kbq_compare_query_run_answers_alt(SubLObject query_run_1, SubLObject query_run_2) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject query_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run_1);
                SubLObject query_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run_2);
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                    if (NIL == com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_equal(query_1, query_2)) {
                        Errors.error($str_alt393$_S_and__S_are_different_queries, query_1, query_2);
                    }
                }
                {
                    SubLObject result_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_result(query_run_1);
                    SubLObject result_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_result(query_run_2);
                    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                        if ($MISSING == result_1) {
                            Errors.error($str_alt394$_S_has_no_result, query_1);
                        }
                    }
                    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                        if ($MISSING == result_2) {
                            Errors.error($str_alt394$_S_has_no_result, query_2);
                        }
                    }
                    thread.resetMultipleValues();
                    {
                        SubLObject missing_from_2 = bindings.compare_lists_of_binding_lists(result_1, result_2);
                        SubLObject missing_from_1 = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        if ((NIL == missing_from_1) && (NIL == missing_from_2)) {
                            return NIL;
                        } else {
                            if (NIL == missing_from_1) {
                                return list($MISSING_FROM_2, missing_from_2);
                            } else {
                                if (NIL == missing_from_2) {
                                    return list($MISSING_FROM_1, missing_from_1);
                                } else {
                                    return list($MISSING_FROM_1, missing_from_1, $MISSING_FROM_2, missing_from_2);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public static SubLObject kbq_compare_query_run_answers(final SubLObject query_run_1, final SubLObject query_run_2) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject query_1 = kbq_query_run.kbq_query_run_query(query_run_1);
        final SubLObject query_2 = kbq_query_run.kbq_query_run_query(query_run_2);
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == kbq_query_run.kbq_query_equal(query_1, query_2))) {
            Errors.error(kbq_query_run.$str446$_S_and__S_are_different_queries, query_1, query_2);
        }
        final SubLObject result_1 = kbq_query_run.kbq_query_run_result(query_run_1);
        final SubLObject result_2 = kbq_query_run.kbq_query_run_result(query_run_2);
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && ($MISSING == result_1)) {
            Errors.error(kbq_query_run.$str447$_S_has_no_result, query_1);
        }
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && ($MISSING == result_2)) {
            Errors.error(kbq_query_run.$str447$_S_has_no_result, query_2);
        }
        thread.resetMultipleValues();
        final SubLObject missing_from_2 = compare_lists_of_binding_lists(result_1, result_2);
        final SubLObject missing_from_3 = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if ((NIL == missing_from_3) && (NIL == missing_from_2)) {
            return NIL;
        }
        if (NIL == missing_from_3) {
            return list(kbq_query_run.$MISSING_FROM_2, missing_from_2);
        }
        if (NIL == missing_from_2) {
            return list(kbq_query_run.$MISSING_FROM_1, missing_from_3);
        }
        return list(kbq_query_run.$MISSING_FROM_1, missing_from_3, kbq_query_run.$MISSING_FROM_2, missing_from_2);
    }

    /**
     *
     *
     * @return 0 a list of lists, each element of which is of the form: (<query> <value1> <value2> <number>) .
    <query> is the query, <value1> is the value of PROPERTY for <query> in QUERY-SET-RUN-1,
    <value2> is the value of PROPERTY for <query> in QUERY-SET-RUN-2, and <number> is either 1 or 2,
    depending on which one had a lower value for PROPERTY.  'lower value' can be parametrized with TEST.
    Assumes that QUERY-SET-RUN-1 and QUERY-SET-RUN-2 have the same queries.
     * @return 1 the number of queries with <number> 1
     * @return 2 the number of queries with <number> 2
     */
    @LispMethod(comment = "@return 0 a list of lists, each element of which is of the form: (<query> <value1> <value2> <number>) .\r\n<query> is the query, <value1> is the value of PROPERTY for <query> in QUERY-SET-RUN-1,\r\n<value2> is the value of PROPERTY for <query> in QUERY-SET-RUN-2, and <number> is either 1 or 2,\r\ndepending on which one had a lower value for PROPERTY.  \'lower value\' can be parametrized with TEST.\r\nAssumes that QUERY-SET-RUN-1 and QUERY-SET-RUN-2 have the same queries.\r\n@return 1 the number of queries with <number> 1\r\n@return 2 the number of queries with <number> 2")
    public static final SubLObject kbq_compare_query_set_runs_by_property_alt(SubLObject query_set_run_1, SubLObject query_set_run_2, SubLObject property, SubLObject test) {
        if (test == UNPROVIDED) {
            test = $sym84$SAFE__;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject result = NIL;
                SubLObject count_1 = ZERO_INTEGER;
                SubLObject count_2 = ZERO_INTEGER;
                SubLObject queries_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_property_values(query_set_run_1, $QUERY, UNPROVIDED);
                SubLObject queries_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_property_values(query_set_run_1, $QUERY, UNPROVIDED);
                SubLObject values_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_property_values(query_set_run_1, property, UNPROVIDED);
                SubLObject values_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_property_values(query_set_run_2, property, UNPROVIDED);
                SubLObject i = ZERO_INTEGER;
                SubLObject query_1 = NIL;
                SubLObject query_1_50 = NIL;
                SubLObject query_2 = NIL;
                SubLObject query_2_51 = NIL;
                SubLObject value_1 = NIL;
                SubLObject value_1_52 = NIL;
                SubLObject value_2 = NIL;
                SubLObject value_2_53 = NIL;
                for (query_1 = queries_1, query_1_50 = query_1.first(), query_2 = queries_2, query_2_51 = query_2.first(), value_1 = values_1, value_1_52 = value_1.first(), value_2 = values_2, value_2_53 = value_2.first(); !((((NIL == value_2) && (NIL == value_1)) && (NIL == query_2)) && (NIL == query_1)); query_1 = query_1.rest() , query_1_50 = query_1.first() , query_2 = query_2.rest() , query_2_51 = query_2.first() , value_1 = value_1.rest() , value_1_52 = value_1.first() , value_2 = value_2.rest() , value_2_53 = value_2.first()) {
                    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                        if (query_1_50 != query_2_51) {
                            Errors.error($str_alt395$query_set_runs_contained_differen);
                        }
                    }
                    if (NIL != funcall(test, value_1_52, value_2_53)) {
                        result = cons(list(query_1_50, value_1_52, value_2_53, ONE_INTEGER), result);
                        count_1 = add(count_1, ONE_INTEGER);
                    } else {
                        result = cons(list(query_1_50, value_1_52, value_2_53, TWO_INTEGER), result);
                        count_2 = add(count_2, ONE_INTEGER);
                    }
                    i = add(i, ONE_INTEGER);
                }
                return values(nreverse(result), count_1, count_2);
            }
        }
    }

    /**
     *
     *
     * @return 0 a list of lists, each element of which is of the form: (<query> <value1> <value2> <number>) .
    <query> is the query, <value1> is the value of PROPERTY for <query> in QUERY-SET-RUN-1,
    <value2> is the value of PROPERTY for <query> in QUERY-SET-RUN-2, and <number> is either 1 or 2,
    depending on which one had a lower value for PROPERTY.  'lower value' can be parametrized with TEST.
    Assumes that QUERY-SET-RUN-1 and QUERY-SET-RUN-2 have the same queries.
     * @return 1 the number of queries with <number> 1
     * @return 2 the number of queries with <number> 2
     */
    @LispMethod(comment = "@return 0 a list of lists, each element of which is of the form: (<query> <value1> <value2> <number>) .\r\n<query> is the query, <value1> is the value of PROPERTY for <query> in QUERY-SET-RUN-1,\r\n<value2> is the value of PROPERTY for <query> in QUERY-SET-RUN-2, and <number> is either 1 or 2,\r\ndepending on which one had a lower value for PROPERTY.  \'lower value\' can be parametrized with TEST.\r\nAssumes that QUERY-SET-RUN-1 and QUERY-SET-RUN-2 have the same queries.\r\n@return 1 the number of queries with <number> 1\r\n@return 2 the number of queries with <number> 2")
    public static SubLObject kbq_compare_query_set_runs_by_property(final SubLObject query_set_run_1, final SubLObject query_set_run_2, final SubLObject property, SubLObject test) {
        if (test == UNPROVIDED) {
            test = kbq_query_run.$sym87$SAFE__;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = NIL;
        SubLObject count_1 = ZERO_INTEGER;
        SubLObject count_2 = ZERO_INTEGER;
        final SubLObject queries_1 = kbq_query_run.kbq_extract_property_values(query_set_run_1, $QUERY, UNPROVIDED);
        final SubLObject queries_2 = kbq_query_run.kbq_extract_property_values(query_set_run_1, $QUERY, UNPROVIDED);
        final SubLObject values_1 = kbq_query_run.kbq_extract_property_values(query_set_run_1, property, UNPROVIDED);
        final SubLObject values_2 = kbq_query_run.kbq_extract_property_values(query_set_run_2, property, UNPROVIDED);
        SubLObject i = ZERO_INTEGER;
        SubLObject query_1 = NIL;
        SubLObject query_1_$69 = NIL;
        SubLObject query_2 = NIL;
        SubLObject query_2_$70 = NIL;
        SubLObject value_1 = NIL;
        SubLObject value_1_$71 = NIL;
        SubLObject value_2 = NIL;
        SubLObject value_2_$72 = NIL;
        query_1 = queries_1;
        query_1_$69 = query_1.first();
        query_2 = queries_2;
        query_2_$70 = query_2.first();
        value_1 = values_1;
        value_1_$71 = value_1.first();
        value_2 = values_2;
        value_2_$72 = value_2.first();
        while ((((NIL != value_2) || (NIL != value_1)) || (NIL != query_2)) || (NIL != query_1)) {
            if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (!query_1_$69.eql(query_2_$70))) {
                Errors.error(kbq_query_run.$str448$query_set_runs_contained_differen);
            }
            if (NIL != funcall(test, value_1_$71, value_2_$72)) {
                result = cons(list(query_1_$69, value_1_$71, value_2_$72, ONE_INTEGER), result);
                count_1 = add(count_1, ONE_INTEGER);
            } else {
                result = cons(list(query_1_$69, value_1_$71, value_2_$72, TWO_INTEGER), result);
                count_2 = add(count_2, ONE_INTEGER);
            }
            i = add(i, ONE_INTEGER);
            query_1 = query_1.rest();
            query_1_$69 = query_1.first();
            query_2 = query_2.rest();
            query_2_$70 = query_2.first();
            value_1 = value_1.rest();
            value_1_$71 = value_1.first();
            value_2 = value_2.rest();
            value_2_$72 = value_2.first();
        } 
        return values(nreverse(result), count_1, count_2);
    }

    public static final SubLObject show_query_runs_that_became_unanswerable_alt(SubLObject query_set_run_1, SubLObject query_set_run_2, SubLObject key, SubLObject sort_pred, SubLObject extra_key) {
        if (key == UNPROVIDED) {
            key = KBQ_QUERY_RUN_TOTAL_TIME;
        }
        if (sort_pred == UNPROVIDED) {
            sort_pred = symbol_function($sym84$SAFE__);
        }
        if (extra_key == UNPROVIDED) {
            extra_key = NIL;
        }
        {
            SubLObject queries = com.cyc.cycjava.cycl.inference.kbq_query_run.queries_that_became_unanswerable(query_set_run_1, query_set_run_2);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.show_query_runs_int(query_set_run_1, query_set_run_2, queries, key, sort_pred, extra_key);
        }
    }

    public static SubLObject show_query_runs_that_became_unanswerable(final SubLObject query_set_run_1, final SubLObject query_set_run_2, SubLObject key, SubLObject sort_pred, SubLObject extra_key) {
        if (key == UNPROVIDED) {
            key = kbq_query_run.KBQ_QUERY_RUN_TOTAL_TIME;
        }
        if (sort_pred == UNPROVIDED) {
            sort_pred = symbol_function(kbq_query_run.$sym87$SAFE__);
        }
        if (extra_key == UNPROVIDED) {
            extra_key = NIL;
        }
        final SubLObject queries = kbq_query_run.queries_that_became_unanswerable(query_set_run_1, query_set_run_2);
        return kbq_query_run.show_query_runs_int(query_set_run_1, query_set_run_2, queries, key, sort_pred, extra_key);
    }

    public static final SubLObject show_query_runs_that_changed_answer_count_alt(SubLObject query_set_run_1, SubLObject query_set_run_2, SubLObject key, SubLObject sort_pred, SubLObject extra_key) {
        if (key == UNPROVIDED) {
            key = KBQ_QUERY_RUN_ANSWER_COUNT;
        }
        if (sort_pred == UNPROVIDED) {
            sort_pred = symbol_function($sym84$SAFE__);
        }
        if (extra_key == UNPROVIDED) {
            extra_key = NIL;
        }
        {
            SubLObject queries = com.cyc.cycjava.cycl.inference.kbq_query_run.queries_that_changed_answer_count(query_set_run_1, query_set_run_2);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.show_query_runs_int(query_set_run_1, query_set_run_2, queries, key, sort_pred, extra_key);
        }
    }

    public static SubLObject show_query_runs_that_changed_answer_count(final SubLObject query_set_run_1, final SubLObject query_set_run_2, SubLObject key, SubLObject sort_pred, SubLObject extra_key) {
        if (key == UNPROVIDED) {
            key = kbq_query_run.KBQ_QUERY_RUN_ANSWER_COUNT;
        }
        if (sort_pred == UNPROVIDED) {
            sort_pred = symbol_function(kbq_query_run.$sym87$SAFE__);
        }
        if (extra_key == UNPROVIDED) {
            extra_key = NIL;
        }
        final SubLObject queries = kbq_query_run.queries_that_changed_answer_count(query_set_run_1, query_set_run_2);
        return kbq_query_run.show_query_runs_int(query_set_run_1, query_set_run_2, queries, key, sort_pred, extra_key);
    }

    public static final SubLObject show_query_runs_int_alt(SubLObject query_set_run_1, SubLObject query_set_run_2, SubLObject queries, SubLObject key, SubLObject sort_pred, SubLObject extra_key) {
        {
            SubLObject query_runs_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run_1, queries, UNPROVIDED));
            SubLObject sorted_query_runs = Sort.sort(query_runs_1, sort_pred, key);
            SubLObject cdolist_list_var = sorted_query_runs;
            SubLObject query_run = NIL;
            for (query_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run = cdolist_list_var.first()) {
                {
                    SubLObject query = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run);
                    SubLObject value = funcall(key, query_run);
                    SubLObject other_query_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_lookup_query_run(query_set_run_2, query);
                    SubLObject other_value = funcall(key, other_query_run);
                    if (NIL != extra_key) {
                        {
                            SubLObject extra_value = funcall(extra_key, query_run);
                            SubLObject extra_other_value = funcall(extra_key, other_query_run);
                            format(T, $str_alt396$_s__s__s__s__s__, new SubLObject[]{ value, extra_value, other_value, extra_other_value, query });
                        }
                    } else {
                        format(T, $str_alt397$_s__s__s__, new SubLObject[]{ value, other_value, query });
                    }
                }
            }
            return sorted_query_runs;
        }
    }

    public static SubLObject show_query_runs_int(final SubLObject query_set_run_1, final SubLObject query_set_run_2, final SubLObject queries, final SubLObject key, final SubLObject sort_pred, final SubLObject extra_key) {
        final SubLObject query_runs_1 = kbq_query_run.kbq_query_set_run_query_runs(kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run_1, queries, UNPROVIDED));
        SubLObject cdolist_list_var;
        final SubLObject sorted_query_runs = cdolist_list_var = Sort.sort(query_runs_1, sort_pred, key);
        SubLObject query_run = NIL;
        query_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject query = kbq_query_run.kbq_query_run_query(query_run);
            final SubLObject value = funcall(key, query_run);
            final SubLObject other_query_run = kbq_query_run.kbq_lookup_query_run(query_set_run_2, query);
            final SubLObject other_value = funcall(key, other_query_run);
            if (NIL != extra_key) {
                final SubLObject extra_value = funcall(extra_key, query_run);
                final SubLObject extra_other_value = funcall(extra_key, other_query_run);
                format(T, kbq_query_run.$str449$_s__s__s__s__s__, new SubLObject[]{ value, extra_value, other_value, extra_other_value, query });
            } else {
                format(T, kbq_query_run.$str450$_s__s__s__, new SubLObject[]{ value, other_value, query });
            }
            cdolist_list_var = cdolist_list_var.rest();
            query_run = cdolist_list_var.first();
        } 
        return sorted_query_runs;
    }

    /**
     *
     *
     * @return 0 integerp; the number of queries that are answerable in QUERY-SET-RUN-1 but not in QUERY-SET-RUN-2.
     * @return 1 integerp; the number of queries that are answerable in both QUERY-SET-RUN-1 and QUERY-SET-RUN-2.
     * @return 2 integerp; the number of queries that are answerable in QUERY-SET-RUN-2 but not in QUERY-SET-RUN-1.
     */
    @LispMethod(comment = "@return 0 integerp; the number of queries that are answerable in QUERY-SET-RUN-1 but not in QUERY-SET-RUN-2.\r\n@return 1 integerp; the number of queries that are answerable in both QUERY-SET-RUN-1 and QUERY-SET-RUN-2.\r\n@return 2 integerp; the number of queries that are answerable in QUERY-SET-RUN-2 but not in QUERY-SET-RUN-1.")
    public static final SubLObject kbq_query_set_run_answerable_counts_alt(SubLObject query_set_run_1, SubLObject query_set_run_2) {
        {
            SubLObject answerable_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_total_answerable(query_set_run_1);
            SubLObject answerable_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_total_answerable(query_set_run_2);
            SubLObject mutually_answerable = length(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_mutually_answerable_queries(list(query_set_run_1, query_set_run_2)));
            SubLObject only_answerable_in_1 = subtract(answerable_1, mutually_answerable);
            SubLObject only_answerable_in_2 = subtract(answerable_2, mutually_answerable);
            return values(only_answerable_in_1, mutually_answerable, only_answerable_in_2);
        }
    }

    /**
     *
     *
     * @return 0 integerp; the number of queries that are answerable in QUERY-SET-RUN-1 but not in QUERY-SET-RUN-2.
     * @return 1 integerp; the number of queries that are answerable in both QUERY-SET-RUN-1 and QUERY-SET-RUN-2.
     * @return 2 integerp; the number of queries that are answerable in QUERY-SET-RUN-2 but not in QUERY-SET-RUN-1.
     */
    @LispMethod(comment = "@return 0 integerp; the number of queries that are answerable in QUERY-SET-RUN-1 but not in QUERY-SET-RUN-2.\r\n@return 1 integerp; the number of queries that are answerable in both QUERY-SET-RUN-1 and QUERY-SET-RUN-2.\r\n@return 2 integerp; the number of queries that are answerable in QUERY-SET-RUN-2 but not in QUERY-SET-RUN-1.")
    public static SubLObject kbq_query_set_run_answerable_counts(final SubLObject query_set_run_1, final SubLObject query_set_run_2) {
        final SubLObject answerable_1 = kbq_query_run.kbq_query_set_run_total_answerable(query_set_run_1);
        final SubLObject answerable_2 = kbq_query_run.kbq_query_set_run_total_answerable(query_set_run_2);
        final SubLObject mutually_answerable = length(kbq_query_run.kbq_mutually_answerable_queries(list(query_set_run_1, query_set_run_2)));
        final SubLObject only_answerable_in_1 = subtract(answerable_1, mutually_answerable);
        final SubLObject only_answerable_in_2 = subtract(answerable_2, mutually_answerable);
        return values(only_answerable_in_1, mutually_answerable, only_answerable_in_2);
    }

    public static final SubLObject kct_compare_test_set_run_statuses_alt(SubLObject test_set_run_1, SubLObject test_set_run_2) {
        if ((NIL != janus.janus_experiment_p(test_set_run_1)) && (NIL != janus.janus_experiment_p(test_set_run_2))) {
            return janus.janus_compare_test_set_run_statuses(test_set_run_1, test_set_run_2);
        }
        {
            SubLObject differences = NIL;
            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_test_runs(test_set_run_1);
            SubLObject test_run_1 = NIL;
            for (test_run_1 = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , test_run_1 = cdolist_list_var.first()) {
                {
                    SubLObject test = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_test(test_run_1);
                    SubLObject test_run_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_lookup_test_run(test_set_run_2, test);
                    if (NIL != test_run_2) {
                        {
                            SubLObject difference = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_compare_test_run_statuses(test_run_1, test_run_2);
                            if (NIL != difference) {
                                differences = cons(list($TEST, test, $CHANGE, difference), differences);
                            }
                        }
                    }
                }
            }
            differences = nreverse(differences);
            return differences;
        }
    }

    public static SubLObject kct_compare_test_set_run_statuses(final SubLObject test_set_run_1, final SubLObject test_set_run_2) {
        if ((NIL != janus.janus_experiment_p(test_set_run_1)) && (NIL != janus.janus_experiment_p(test_set_run_2))) {
            return janus.janus_compare_test_set_run_statuses(test_set_run_1, test_set_run_2);
        }
        SubLObject differences = NIL;
        SubLObject cdolist_list_var = kbq_query_run.kct_test_set_run_test_runs(test_set_run_1);
        SubLObject test_run_1 = NIL;
        test_run_1 = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject test = kbq_query_run.kct_test_run_test(test_run_1);
            final SubLObject test_run_2 = kbq_query_run.kct_lookup_test_run(test_set_run_2, test);
            if (NIL != test_run_2) {
                final SubLObject difference = kbq_query_run.kct_compare_test_run_statuses(test_run_1, test_run_2);
                if (NIL != difference) {
                    differences = cons(list($TEST, test, $CHANGE, difference), differences);
                }
            }
            cdolist_list_var = cdolist_list_var.rest();
            test_run_1 = cdolist_list_var.first();
        } 
        differences = nreverse(differences);
        return differences;
    }

    public static final SubLObject kct_summarize_compare_test_set_run_statuses_alt(SubLObject test_set_run_1, SubLObject test_set_run_2) {
        {
            SubLObject became_success = ZERO_INTEGER;
            SubLObject became_failure = ZERO_INTEGER;
            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_compare_test_set_run_statuses(test_set_run_1, test_set_run_2);
            SubLObject difference = NIL;
            for (difference = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , difference = cdolist_list_var.first()) {
                {
                    SubLObject datum = difference;
                    SubLObject current = datum;
                    SubLObject change_tail = property_list_member($CHANGE, current);
                    SubLObject change = (NIL != change_tail) ? ((SubLObject) (cadr(change_tail))) : NIL;
                    SubLObject pcase_var = change;
                    if (pcase_var.eql($BECAME_SUCCESS)) {
                        became_success = add(became_success, ONE_INTEGER);
                    } else {
                        if (pcase_var.eql($BECAME_FAILURE)) {
                            became_failure = add(became_failure, ONE_INTEGER);
                        } else {
                            Errors.error($str_alt401$unexpected_change__S, change);
                        }
                    }
                }
            }
            return nconc(NIL != became_success ? ((SubLObject) (list($BECAME_SUCCESS, became_success))) : NIL, NIL != became_failure ? ((SubLObject) (list($BECAME_FAILURE, became_failure))) : NIL);
        }
    }

    public static SubLObject kct_summarize_compare_test_set_run_statuses(final SubLObject test_set_run_1, final SubLObject test_set_run_2) {
        SubLObject became_success = ZERO_INTEGER;
        SubLObject became_failure = ZERO_INTEGER;
        SubLObject cdolist_list_var = kbq_query_run.kct_compare_test_set_run_statuses(test_set_run_1, test_set_run_2);
        SubLObject difference = NIL;
        difference = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject current;
            final SubLObject datum = current = difference;
            final SubLObject change_tail = property_list_member($CHANGE, current);
            final SubLObject pcase_var;
            final SubLObject change = pcase_var = (NIL != change_tail) ? cadr(change_tail) : NIL;
            if (pcase_var.eql($BECAME_SUCCESS)) {
                became_success = add(became_success, ONE_INTEGER);
            } else
                if (pcase_var.eql($BECAME_FAILURE)) {
                    became_failure = add(became_failure, ONE_INTEGER);
                } else {
                    Errors.error(kbq_query_run.$str454$unexpected_change__S, change);
                }

            cdolist_list_var = cdolist_list_var.rest();
            difference = cdolist_list_var.first();
        } 
        return nconc(NIL != became_success ? list($BECAME_SUCCESS, became_success) : NIL, NIL != became_failure ? list($BECAME_FAILURE, became_failure) : NIL);
    }

    public static final SubLObject kct_lookup_test_run_alt(SubLObject test_set_run, SubLObject test) {
        {
            SubLObject test_runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_test_runs(test_set_run);
            SubLObject cdolist_list_var = test_runs;
            SubLObject test_run = NIL;
            for (test_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , test_run = cdolist_list_var.first()) {
                if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_equal(test, com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_test(test_run))) {
                    return test_run;
                }
            }
        }
        return NIL;
    }

    public static SubLObject kct_lookup_test_run(final SubLObject test_set_run, final SubLObject test) {
        SubLObject cdolist_list_var;
        final SubLObject test_runs = cdolist_list_var = kbq_query_run.kct_test_set_run_test_runs(test_set_run);
        SubLObject test_run = NIL;
        test_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != kbq_query_run.kct_test_equal(test, kbq_query_run.kct_test_run_test(test_run))) {
                return test_run;
            }
            cdolist_list_var = cdolist_list_var.rest();
            test_run = cdolist_list_var.first();
        } 
        return NIL;
    }

    public static final SubLObject kct_test_equal_alt(SubLObject test_1, SubLObject test_2) {
        return equalp(test_1, test_2);
    }

    public static SubLObject kct_test_equal(final SubLObject test_1, final SubLObject test_2) {
        return equalp(test_1, test_2);
    }

    public static final SubLObject kct_compare_test_run_statuses_alt(SubLObject test_run_1, SubLObject test_run_2) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject test_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_test(test_run_1);
                SubLObject test_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_test(test_run_2);
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                    if (NIL == com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_equal(test_1, test_2)) {
                        Errors.error($str_alt402$_S_and__S_are_different_tests, test_1, test_2);
                    }
                }
                {
                    SubLObject status_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_status(test_run_1);
                    SubLObject status_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_status(test_run_2);
                    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                        if (NIL == status_1) {
                            Errors.error($str_alt403$_S_has_no_status, test_1);
                        }
                    }
                    if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
                        if (NIL == status_2) {
                            Errors.error($str_alt403$_S_has_no_status, test_2);
                        }
                    }
                    if (status_1 == status_2) {
                        return NIL;
                    } else {
                        if ($SUCCESS == status_1) {
                            return $BECAME_FAILURE;
                        } else {
                            return $BECAME_SUCCESS;
                        }
                    }
                }
            }
        }
    }

    public static SubLObject kct_compare_test_run_statuses(final SubLObject test_run_1, final SubLObject test_run_2) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject test_1 = kbq_query_run.kct_test_run_test(test_run_1);
        final SubLObject test_2 = kbq_query_run.kct_test_run_test(test_run_2);
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == kbq_query_run.kct_test_equal(test_1, test_2))) {
            Errors.error(kbq_query_run.$str455$_S_and__S_are_different_tests, test_1, test_2);
        }
        final SubLObject status_1 = kbq_query_run.kct_test_run_status(test_run_1);
        final SubLObject status_2 = kbq_query_run.kct_test_run_status(test_run_2);
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == status_1)) {
            Errors.error(kbq_query_run.$str456$_S_has_no_status, test_1);
        }
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == status_2)) {
            Errors.error(kbq_query_run.$str456$_S_has_no_status, test_2);
        }
        if (status_1.eql(status_2)) {
            return NIL;
        }
        if ($SUCCESS == status_1) {
            return $BECAME_FAILURE;
        }
        return $BECAME_SUCCESS;
    }

    public static final SubLObject kbq_analyze_query_set_runs_alt(SubLObject query_set_run_1, SubLObject query_set_run_2, SubLObject metrics) {
        if (metrics == UNPROVIDED) {
            metrics = inference_datastructures_enumerated_types.all_arete_query_metrics();
        }
        {
            SubLObject analysis_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_analyze_query_set_run(query_set_run_1, metrics);
            SubLObject analysis_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_analyze_query_set_run(query_set_run_2, metrics);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_compare_analysis(analysis_1, analysis_2);
        }
    }

    public static SubLObject kbq_analyze_query_set_runs(final SubLObject query_set_run_1, final SubLObject query_set_run_2, SubLObject metrics) {
        if (metrics == UNPROVIDED) {
            metrics = all_arete_query_metrics();
        }
        final SubLObject analysis_1 = kbq_query_run.kbq_analyze_query_set_run(query_set_run_1, metrics);
        final SubLObject analysis_2 = kbq_query_run.kbq_analyze_query_set_run(query_set_run_2, metrics);
        return kbq_query_run.kbq_compare_analysis(analysis_1, analysis_2);
    }

    public static final SubLObject kct_analyze_test_set_runs_alt(SubLObject test_set_run_1, SubLObject test_set_run_2, SubLObject metrics) {
        if (metrics == UNPROVIDED) {
            metrics = inference_datastructures_enumerated_types.all_arete_query_metrics();
        }
        {
            SubLObject analysis_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_analyze_test_set_run(test_set_run_1, metrics);
            SubLObject analysis_2 = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_analyze_test_set_run(test_set_run_2, metrics);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_compare_analysis(analysis_1, analysis_2);
        }
    }

    public static SubLObject kct_analyze_test_set_runs(final SubLObject test_set_run_1, final SubLObject test_set_run_2, SubLObject metrics) {
        if (metrics == UNPROVIDED) {
            metrics = all_arete_query_metrics();
        }
        final SubLObject analysis_1 = kbq_query_run.kct_analyze_test_set_run(test_set_run_1, metrics);
        final SubLObject analysis_2 = kbq_query_run.kct_analyze_test_set_run(test_set_run_2, metrics);
        return kbq_query_run.kbq_compare_analysis(analysis_1, analysis_2);
    }

    public static final SubLObject kbq_compare_analysis_alt(SubLObject analysis_1, SubLObject analysis_2) {
        {
            SubLObject analysis = NIL;
            SubLObject remainder = NIL;
            for (remainder = analysis_2; NIL != remainder; remainder = cddr(remainder)) {
                {
                    SubLObject metric = remainder.first();
                    SubLObject metric_value_2 = cadr(remainder);
                    SubLObject metric_value_1 = getf(analysis_1, metric, $UNDEFINED);
                    if ($UNDEFINED != metric_value_1) {
                        {
                            SubLObject difference = list_utilities.safe_difference(metric_value_2, metric_value_1);
                            SubLObject percentage = (((NIL == metric_value_1) || metric_value_1.isZero()) || (NIL == metric_value_2)) ? ((SubLObject) ($UNDEFINED)) : number_utilities.significant_digits(multiply($int$100, divide(difference, metric_value_1)), FOUR_INTEGER);
                            SubLObject metric_comparison_values = list(NIL != metric_value_1 ? ((SubLObject) (com.cyc.cycjava.cycl.inference.kbq_query_run.significant_digits_if_float(metric_value_1, FOUR_INTEGER))) : NIL, NIL != metric_value_2 ? ((SubLObject) (com.cyc.cycjava.cycl.inference.kbq_query_run.significant_digits_if_float(metric_value_2, FOUR_INTEGER))) : NIL, NIL != difference ? ((SubLObject) (com.cyc.cycjava.cycl.inference.kbq_query_run.significant_digits_if_float(difference, FOUR_INTEGER))) : NIL, percentage);
                            if (NIL == list_utilities.member_eqP($UNDEFINED, metric_comparison_values)) {
                                analysis = putf(analysis, metric, metric_comparison_values);
                            }
                        }
                    }
                }
            }
            return analysis;
        }
    }

    public static SubLObject kbq_compare_analysis(final SubLObject analysis_1, final SubLObject analysis_2) {
        SubLObject analysis = NIL;
        SubLObject remainder;
        SubLObject metric;
        SubLObject metric_value_2;
        SubLObject metric_value_3;
        SubLObject difference;
        SubLObject percentage;
        SubLObject metric_comparison_values;
        for (remainder = NIL, remainder = analysis_2; NIL != remainder; remainder = cddr(remainder)) {
            metric = remainder.first();
            metric_value_2 = cadr(remainder);
            metric_value_3 = getf(analysis_1, metric, $UNDEFINED);
            if ($UNDEFINED != metric_value_3) {
                difference = safe_difference(metric_value_2, metric_value_3);
                percentage = (((NIL == metric_value_3) || metric_value_3.isZero()) || (NIL == metric_value_2)) ? $UNDEFINED : significant_digits(multiply($int$100, divide(difference, metric_value_3)), FOUR_INTEGER);
                metric_comparison_values = list(NIL != metric_value_3 ? kbq_query_run.significant_digits_if_float(metric_value_3, FOUR_INTEGER) : NIL, NIL != metric_value_2 ? kbq_query_run.significant_digits_if_float(metric_value_2, FOUR_INTEGER) : NIL, NIL != difference ? kbq_query_run.significant_digits_if_float(difference, FOUR_INTEGER) : NIL, percentage);
                if (NIL == member_eqP($UNDEFINED, metric_comparison_values)) {
                    analysis = putf(analysis, metric, metric_comparison_values);
                }
            }
        }
        return analysis;
    }

    public static final SubLObject significant_digits_if_float_alt(SubLObject number, SubLObject significant_digits) {
        if (number.isInteger()) {
            return number;
        } else {
            return number_utilities.significant_digits(number, significant_digits);
        }
    }

    public static SubLObject significant_digits_if_float(final SubLObject number, final SubLObject significant_digits) {
        if (number.isInteger()) {
            return number;
        }
        return significant_digits(number, significant_digits);
    }

    /**
     * the ratio between the new first and the new second, or inverted, depending on the statistic.
     */
    @LispMethod(comment = "the ratio between the new first and the new second, or inverted, depending on the statistic.")
    public static final SubLObject kbq_print_analysis_alt(SubLObject analysis) {
        if (NIL != analysis) {
            {
                SubLObject new_plist = NIL;
                SubLObject remainder = NIL;
                for (remainder = analysis; NIL != remainder; remainder = cddr(remainder)) {
                    {
                        SubLObject statistic_name = remainder.first();
                        SubLObject statistic_list = cadr(remainder);
                        SubLObject baseline_value = statistic_list.first();
                        SubLObject experiment_value = second(statistic_list);
                        SubLObject statistic_type = getf($kbq_summary_statistics$.getGlobalValue(), statistic_name, UNPROVIDED);
                        if (NIL != subl_promotions.memberP(statistic_type, $list_alt406, UNPROVIDED, UNPROVIDED)) {
                            {
                                SubLObject ratio = ($NEITHER == statistic_type) ? ((SubLObject) (NIL)) : $INCREASE == statistic_type ? ((SubLObject) ((NIL == baseline_value) || baseline_value.isZero() ? ((SubLObject) ($UNDEFINED)) : number_utilities.significant_digits(divide(experiment_value, baseline_value), FOUR_INTEGER))) : (NIL == experiment_value) || experiment_value.isZero() ? ((SubLObject) ($UNDEFINED)) : number_utilities.significant_digits(divide(baseline_value, experiment_value), FOUR_INTEGER);
                                SubLObject list = ($NEITHER == statistic_type) ? ((SubLObject) (list(baseline_value, experiment_value))) : list(baseline_value, experiment_value, ratio);
                                new_plist = putf(new_plist, statistic_name, list);
                            }
                        }
                    }
                }
                list_utilities.pretty_print_plist(new_plist, UNPROVIDED);
                return new_plist;
            }
        } else {
            format(T, $str_alt409$empty__);
            return NIL;
        }
    }

    /**
     * the ratio between the new first and the new second, or inverted, depending on the statistic.
     */
    @LispMethod(comment = "the ratio between the new first and the new second, or inverted, depending on the statistic.")
    public static SubLObject kbq_print_analysis(final SubLObject analysis) {
        if (NIL != analysis) {
            SubLObject new_plist = NIL;
            SubLObject remainder;
            SubLObject statistic_name;
            SubLObject statistic_list;
            SubLObject baseline_value;
            SubLObject experiment_value;
            SubLObject statistic_type;
            SubLObject ratio;
            SubLObject list;
            for (remainder = NIL, remainder = analysis; NIL != remainder; remainder = cddr(remainder)) {
                statistic_name = remainder.first();
                statistic_list = cadr(remainder);
                baseline_value = statistic_list.first();
                experiment_value = second(statistic_list);
                statistic_type = getf(kbq_query_run.$kbq_summary_statistics$.getGlobalValue(), statistic_name, UNPROVIDED);
                if (NIL != memberP(statistic_type, kbq_query_run.$list459, UNPROVIDED, UNPROVIDED)) {
                    ratio = ($NEITHER == statistic_type) ? NIL : $INCREASE == statistic_type ? (NIL == baseline_value) || baseline_value.isZero() ? $UNDEFINED : significant_digits(divide(experiment_value, baseline_value), FOUR_INTEGER) : (NIL == experiment_value) || experiment_value.isZero() ? $UNDEFINED : significant_digits(divide(baseline_value, experiment_value), FOUR_INTEGER);
                    list = ($NEITHER == statistic_type) ? list(baseline_value, experiment_value) : list(baseline_value, experiment_value, ratio);
                    new_plist = putf(new_plist, statistic_name, list);
                }
            }
            pretty_print_plist(new_plist, UNPROVIDED);
            return new_plist;
        }
        format(T, kbq_query_run.$str462$empty__);
        return NIL;
    }

    public static final SubLObject kbq_analyze_query_set_run_alt(SubLObject query_set_run, SubLObject metrics) {
        if (metrics == UNPROVIDED) {
            metrics = inference_datastructures_enumerated_types.all_arete_query_metrics();
        }
        {
            SubLObject query_runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_analyze_query_runs(query_runs, metrics);
        }
    }

    public static SubLObject kbq_analyze_query_set_run(final SubLObject query_set_run, SubLObject metrics) {
        if (metrics == UNPROVIDED) {
            metrics = all_arete_query_metrics();
        }
        final SubLObject query_runs = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
        return kbq_query_run.kbq_analyze_query_runs(query_runs, metrics);
    }

    public static final SubLObject kct_analyze_test_set_run_alt(SubLObject test_set_run, SubLObject metrics) {
        if (metrics == UNPROVIDED) {
            metrics = inference_datastructures_enumerated_types.all_arete_query_metrics();
        }
        {
            SubLObject test_runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_test_runs(test_set_run);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kct_analyze_test_runs(test_runs, metrics);
        }
    }

    public static SubLObject kct_analyze_test_set_run(final SubLObject test_set_run, SubLObject metrics) {
        if (metrics == UNPROVIDED) {
            metrics = all_arete_query_metrics();
        }
        final SubLObject test_runs = kbq_query_run.kct_test_set_run_test_runs(test_set_run);
        return kbq_query_run.kct_analyze_test_runs(test_runs, metrics);
    }

    public static final SubLObject kbq_analyze_query_runs_alt(SubLObject query_runs, SubLObject metrics) {
        {
            SubLObject analysis = NIL;
            {
                SubLObject total = length(query_runs);
                SubLObject partial_analysis = list($TOTAL, total);
                analysis = list_utilities.merge_plist(analysis, partial_analysis);
            }
            {
                SubLObject cdolist_list_var = metrics;
                SubLObject metric = NIL;
                for (metric = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , metric = cdolist_list_var.first()) {
                    {
                        SubLObject pcase_var = metric;
                        if (pcase_var.eql($ANSWER_COUNT)) {
                            {
                                SubLObject all_answer_counts = NIL;
                                SubLObject cdolist_list_var_54 = query_runs;
                                SubLObject query_run = NIL;
                                for (query_run = cdolist_list_var_54.first(); NIL != cdolist_list_var_54; cdolist_list_var_54 = cdolist_list_var_54.rest() , query_run = cdolist_list_var_54.first()) {
                                    {
                                        SubLObject var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $ANSWER_COUNT, ZERO_INTEGER);
                                        if (NIL != var) {
                                            all_answer_counts = cons(var, all_answer_counts);
                                        }
                                    }
                                }
                                {
                                    SubLObject total = length(all_answer_counts);
                                    SubLObject total_answerable = count_if(symbol_function(POSITIVE_INTEGER_P), all_answer_counts, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    SubLObject total_unanswerable = subtract(total, total_answerable);
                                    SubLObject total_error = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_count_erroring_query_runs(query_runs);
                                    SubLObject total_lumpy = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_count_lumpy_query_runs(query_runs);
                                    SubLObject sum_answer_count = number_utilities.summation(all_answer_counts);
                                    SubLObject mean_answer_count = (NIL != all_answer_counts) ? ((SubLObject) (number_utilities.mean(all_answer_counts))) : NIL;
                                    SubLObject median_answer_count = (NIL != all_answer_counts) ? ((SubLObject) (number_utilities.median(all_answer_counts, UNPROVIDED))) : NIL;
                                    SubLObject partial_analysis = list(new SubLObject[]{ $TOTAL_ANSWERABLE, total_answerable, $TOTAL_UNANSWERABLE, total_unanswerable, $TOTAL_ERROR, total_error, $TOTAL_LUMPY, total_lumpy, $SUM_ANSWER_COUNT, sum_answer_count, $MEAN_ANSWER_COUNT, mean_answer_count, $MEDIAN_ANSWER_COUNT, median_answer_count });
                                    analysis = list_utilities.merge_plist(analysis, partial_analysis);
                                }
                            }
                        } else {
                            if (pcase_var.eql($TOTAL_TIME)) {
                                {
                                    SubLObject all_total_times = NIL;
                                    SubLObject cdolist_list_var_55 = query_runs;
                                    SubLObject query_run = NIL;
                                    for (query_run = cdolist_list_var_55.first(); NIL != cdolist_list_var_55; cdolist_list_var_55 = cdolist_list_var_55.rest() , query_run = cdolist_list_var_55.first()) {
                                        {
                                            SubLObject var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $TOTAL_TIME, ZERO_INTEGER);
                                            if (NIL != var) {
                                                all_total_times = cons(var, all_total_times);
                                            }
                                        }
                                    }
                                    {
                                        SubLObject sum_total_time = number_utilities.summation(all_total_times);
                                        SubLObject mean_total_time = (NIL != all_total_times) ? ((SubLObject) (number_utilities.mean(all_total_times))) : NIL;
                                        SubLObject median_total_time = (NIL != all_total_times) ? ((SubLObject) (number_utilities.median(all_total_times, UNPROVIDED))) : NIL;
                                        SubLObject stdev_total_time = (NIL != all_total_times) ? ((SubLObject) (number_utilities.standard_deviation(all_total_times))) : NIL;
                                        SubLObject partial_analysis = list($SUM_TOTAL_TIME, sum_total_time, $MEAN_TOTAL_TIME, mean_total_time, $MEDIAN_TOTAL_TIME, median_total_time, $STDEV_TOTAL_TIME, stdev_total_time);
                                        analysis = list_utilities.merge_plist(analysis, partial_analysis);
                                    }
                                }
                            } else {
                                if (pcase_var.eql($COMPLETE_TOTAL_TIME)) {
                                    {
                                        SubLObject all_total_times = NIL;
                                        SubLObject cdolist_list_var_56 = query_runs;
                                        SubLObject query_run = NIL;
                                        for (query_run = cdolist_list_var_56.first(); NIL != cdolist_list_var_56; cdolist_list_var_56 = cdolist_list_var_56.rest() , query_run = cdolist_list_var_56.first()) {
                                            {
                                                SubLObject var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $COMPLETE_TOTAL_TIME, ZERO_INTEGER);
                                                if (NIL != var) {
                                                    all_total_times = cons(var, all_total_times);
                                                }
                                            }
                                        }
                                        {
                                            SubLObject sum_total_time = number_utilities.summation(all_total_times);
                                            SubLObject mean_total_time = (NIL != all_total_times) ? ((SubLObject) (number_utilities.mean(all_total_times))) : NIL;
                                            SubLObject median_total_time = (NIL != all_total_times) ? ((SubLObject) (number_utilities.median(all_total_times, UNPROVIDED))) : NIL;
                                            SubLObject stdev_total_time = (NIL != all_total_times) ? ((SubLObject) (number_utilities.standard_deviation(all_total_times))) : NIL;
                                            SubLObject partial_analysis = list($SUM_COMPLETE_TOTAL_TIME, sum_total_time, $MEAN_COMPLETE_TOTAL_TIME, mean_total_time, $MEDIAN_COMPLETE_TOTAL_TIME, median_total_time, $STDEV_COMPLETE_TOTAL_TIME, stdev_total_time);
                                            analysis = list_utilities.merge_plist(analysis, partial_analysis);
                                        }
                                    }
                                } else {
                                    if (pcase_var.eql($TIME_TO_FIRST_ANSWER)) {
                                        {
                                            SubLObject all_time_to_first_answers = NIL;
                                            SubLObject cdolist_list_var_57 = query_runs;
                                            SubLObject query_run = NIL;
                                            for (query_run = cdolist_list_var_57.first(); NIL != cdolist_list_var_57; cdolist_list_var_57 = cdolist_list_var_57.rest() , query_run = cdolist_list_var_57.first()) {
                                                {
                                                    SubLObject var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $TIME_TO_FIRST_ANSWER, UNPROVIDED);
                                                    if (NIL != var) {
                                                        all_time_to_first_answers = cons(var, all_time_to_first_answers);
                                                    }
                                                }
                                            }
                                            {
                                                SubLObject sum_time_to_first_answer = number_utilities.summation(all_time_to_first_answers);
                                                SubLObject mean_time_to_first_answer = (NIL != all_time_to_first_answers) ? ((SubLObject) (number_utilities.mean(all_time_to_first_answers))) : NIL;
                                                SubLObject median_time_to_first_answer = (NIL != all_time_to_first_answers) ? ((SubLObject) (number_utilities.median(all_time_to_first_answers, UNPROVIDED))) : NIL;
                                                SubLObject stdev_time_to_first_answer = (NIL != all_time_to_first_answers) ? ((SubLObject) (number_utilities.standard_deviation(all_time_to_first_answers))) : NIL;
                                                SubLObject partial_analysis = list($SUM_TIME_TO_FIRST_ANSWER, sum_time_to_first_answer, $MEAN_TIME_TO_FIRST_ANSWER, mean_time_to_first_answer, $MEDIAN_TIME_TO_FIRST_ANSWER, median_time_to_first_answer, $STDEV_TIME_TO_FIRST_ANSWER, stdev_time_to_first_answer);
                                                analysis = list_utilities.merge_plist(analysis, partial_analysis);
                                            }
                                        }
                                    } else {
                                        if (pcase_var.eql($COMPLETE_TIME_TO_FIRST_ANSWER)) {
                                            {
                                                SubLObject all_time_to_first_answers = NIL;
                                                SubLObject cdolist_list_var_58 = query_runs;
                                                SubLObject query_run = NIL;
                                                for (query_run = cdolist_list_var_58.first(); NIL != cdolist_list_var_58; cdolist_list_var_58 = cdolist_list_var_58.rest() , query_run = cdolist_list_var_58.first()) {
                                                    {
                                                        SubLObject var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $COMPLETE_TIME_TO_FIRST_ANSWER, UNPROVIDED);
                                                        if (NIL != var) {
                                                            all_time_to_first_answers = cons(var, all_time_to_first_answers);
                                                        }
                                                    }
                                                }
                                                {
                                                    SubLObject sum_time_to_first_answer = number_utilities.summation(all_time_to_first_answers);
                                                    SubLObject mean_time_to_first_answer = (NIL != all_time_to_first_answers) ? ((SubLObject) (number_utilities.mean(all_time_to_first_answers))) : NIL;
                                                    SubLObject median_time_to_first_answer = (NIL != all_time_to_first_answers) ? ((SubLObject) (number_utilities.median(all_time_to_first_answers, UNPROVIDED))) : NIL;
                                                    SubLObject stdev_time_to_first_answer = (NIL != all_time_to_first_answers) ? ((SubLObject) (number_utilities.standard_deviation(all_time_to_first_answers))) : NIL;
                                                    SubLObject partial_analysis = list($SUM_COMPLETE_TIME_TO_FIRST_ANSWER, sum_time_to_first_answer, $MEAN_COMPLETE_TIME_TO_FIRST_ANSWER, mean_time_to_first_answer, $MEDIAN_COMPLETE_TIME_TO_FIRST_ANSWER, median_time_to_first_answer, $STDEV_COMPLETE_TIME_TO_FIRST_ANSWER, stdev_time_to_first_answer);
                                                    analysis = list_utilities.merge_plist(analysis, partial_analysis);
                                                }
                                            }
                                        } else {
                                            if (pcase_var.eql($ANSWERABILITY_TIME)) {
                                                {
                                                    SubLObject all_answerability_times = NIL;
                                                    SubLObject cdolist_list_var_59 = query_runs;
                                                    SubLObject query_run = NIL;
                                                    for (query_run = cdolist_list_var_59.first(); NIL != cdolist_list_var_59; cdolist_list_var_59 = cdolist_list_var_59.rest() , query_run = cdolist_list_var_59.first()) {
                                                        {
                                                            SubLObject var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $ANSWERABILITY_TIME, UNPROVIDED);
                                                            if (NIL != var) {
                                                                all_answerability_times = cons(var, all_answerability_times);
                                                            }
                                                        }
                                                    }
                                                    {
                                                        SubLObject sum_answerability_time = number_utilities.summation(all_answerability_times);
                                                        SubLObject mean_answerability_time = (NIL != all_answerability_times) ? ((SubLObject) (number_utilities.mean(all_answerability_times))) : NIL;
                                                        SubLObject median_answerability_time = (NIL != all_answerability_times) ? ((SubLObject) (number_utilities.median(all_answerability_times, UNPROVIDED))) : NIL;
                                                        SubLObject stdev_answerability_time = (NIL != all_answerability_times) ? ((SubLObject) (number_utilities.standard_deviation(all_answerability_times))) : NIL;
                                                        SubLObject partial_analysis = list($SUM_ANSWERABILITY_TIME, sum_answerability_time, $MEAN_ANSWERABILITY_TIME, mean_answerability_time, $MEDIAN_ANSWERABILITY_TIME, median_answerability_time, $STDEV_ANSWERABILITY_TIME, stdev_answerability_time);
                                                        analysis = list_utilities.merge_plist(analysis, partial_analysis);
                                                    }
                                                }
                                            } else {
                                                if (pcase_var.eql($TIME_TO_LAST_ANSWER)) {
                                                    {
                                                        SubLObject all_time_to_last_answers = NIL;
                                                        SubLObject cdolist_list_var_60 = query_runs;
                                                        SubLObject query_run = NIL;
                                                        for (query_run = cdolist_list_var_60.first(); NIL != cdolist_list_var_60; cdolist_list_var_60 = cdolist_list_var_60.rest() , query_run = cdolist_list_var_60.first()) {
                                                            {
                                                                SubLObject var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $TIME_TO_LAST_ANSWER, UNPROVIDED);
                                                                if (NIL != var) {
                                                                    all_time_to_last_answers = cons(var, all_time_to_last_answers);
                                                                }
                                                            }
                                                        }
                                                        {
                                                            SubLObject sum_time_to_last_answer = number_utilities.summation(all_time_to_last_answers);
                                                            SubLObject mean_time_to_last_answer = (NIL != all_time_to_last_answers) ? ((SubLObject) (number_utilities.mean(all_time_to_last_answers))) : NIL;
                                                            SubLObject median_time_to_last_answer = (NIL != all_time_to_last_answers) ? ((SubLObject) (number_utilities.median(all_time_to_last_answers, UNPROVIDED))) : NIL;
                                                            SubLObject stdev_time_to_last_answer = (NIL != all_time_to_last_answers) ? ((SubLObject) (number_utilities.standard_deviation(all_time_to_last_answers))) : NIL;
                                                            SubLObject partial_analysis = list($SUM_TIME_TO_LAST_ANSWER, sum_time_to_last_answer, $MEAN_TIME_TO_LAST_ANSWER, mean_time_to_last_answer, $MEDIAN_TIME_TO_LAST_ANSWER, median_time_to_last_answer, $STDEV_TIME_TO_LAST_ANSWER, stdev_time_to_last_answer);
                                                            analysis = list_utilities.merge_plist(analysis, partial_analysis);
                                                        }
                                                    }
                                                } else {
                                                    if (pcase_var.eql($COMPLETE_TIME_PER_ANSWER)) {
                                                        {
                                                            SubLObject all_time_per_answers = NIL;
                                                            SubLObject cdolist_list_var_61 = query_runs;
                                                            SubLObject query_run = NIL;
                                                            for (query_run = cdolist_list_var_61.first(); NIL != cdolist_list_var_61; cdolist_list_var_61 = cdolist_list_var_61.rest() , query_run = cdolist_list_var_61.first()) {
                                                                {
                                                                    SubLObject var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $COMPLETE_TIME_PER_ANSWER, UNPROVIDED);
                                                                    if (NIL != var) {
                                                                        all_time_per_answers = cons(var, all_time_per_answers);
                                                                    }
                                                                }
                                                            }
                                                            {
                                                                SubLObject median_time_per_answer = (NIL != all_time_per_answers) ? ((SubLObject) (number_utilities.median(all_time_per_answers, UNPROVIDED))) : NIL;
                                                                SubLObject partial_analysis = list($MEDIAN_COMPLETE_TIME_PER_ANSWER, median_time_per_answer);
                                                                analysis = list_utilities.merge_plist(analysis, partial_analysis);
                                                            }
                                                        }
                                                    } else {
                                                        Errors.warn($str_alt437$ignoring_metric__S, metric);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ((NIL != subl_promotions.memberP($TOTAL_TIME, metrics, UNPROVIDED, UNPROVIDED)) && (NIL != subl_promotions.memberP($ANSWER_COUNT, metrics, UNPROVIDED, UNPROVIDED))) {
                {
                    SubLObject all_times_per_answer = NIL;
                    SubLObject cdolist_list_var = query_runs;
                    SubLObject query_run = NIL;
                    for (query_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run = cdolist_list_var.first()) {
                        {
                            SubLObject total_time = getf(query_run, $TOTAL_TIME, ZERO_INTEGER);
                            SubLObject answer_count = getf(query_run, $ANSWER_COUNT, ZERO_INTEGER);
                            if (NIL != subl_promotions.positive_integer_p(answer_count)) {
                                {
                                    SubLObject time_per_answer = divide(total_time, answer_count);
                                    SubLObject var = time_per_answer;
                                    if (NIL != var) {
                                        all_times_per_answer = cons(var, all_times_per_answer);
                                    }
                                }
                            }
                        }
                    }
                    {
                        SubLObject median_time_per_answer = (NIL != all_times_per_answer) ? ((SubLObject) (number_utilities.median(all_times_per_answer, UNPROVIDED))) : NIL;
                        SubLObject partial_analysis = list($MEDIAN_TIME_PER_ANSWER, median_time_per_answer);
                        analysis = list_utilities.merge_plist(analysis, partial_analysis);
                    }
                }
            }
            return analysis;
        }
    }

    public static SubLObject kbq_analyze_query_runs(final SubLObject query_runs, final SubLObject metrics) {
        SubLObject analysis = NIL;
        final SubLObject total = length(query_runs);
        final SubLObject partial_analysis = list($TOTAL, total);
        analysis = merge_plist(analysis, partial_analysis);
        SubLObject cdolist_list_var = metrics;
        SubLObject metric = NIL;
        metric = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject pcase_var = metric;
            if (pcase_var.eql($ANSWER_COUNT)) {
                SubLObject all_answer_counts = NIL;
                SubLObject cdolist_list_var_$73 = query_runs;
                SubLObject query_run = NIL;
                query_run = cdolist_list_var_$73.first();
                while (NIL != cdolist_list_var_$73) {
                    final SubLObject var = kbq_query_run.kbq_query_run_property_value(query_run, $ANSWER_COUNT, ZERO_INTEGER);
                    if (NIL != var) {
                        all_answer_counts = cons(var, all_answer_counts);
                    }
                    cdolist_list_var_$73 = cdolist_list_var_$73.rest();
                    query_run = cdolist_list_var_$73.first();
                } 
                final SubLObject total2 = length(all_answer_counts);
                final SubLObject total_answerable = count_if(symbol_function(POSITIVE_INTEGER_P), all_answer_counts, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                final SubLObject total_unanswerable = subtract(total2, total_answerable);
                final SubLObject total_error = kbq_query_run.kbq_count_erroring_query_runs(query_runs);
                final SubLObject total_lumpy = kbq_query_run.kbq_count_lumpy_query_runs(query_runs);
                final SubLObject sum_answer_count = summation(all_answer_counts);
                final SubLObject mean_answer_count = (NIL != all_answer_counts) ? mean(all_answer_counts) : NIL;
                final SubLObject median_answer_count = (NIL != all_answer_counts) ? median(all_answer_counts, UNPROVIDED, UNPROVIDED) : NIL;
                final SubLObject partial_analysis2 = list(new SubLObject[]{ $TOTAL_ANSWERABLE, total_answerable, $TOTAL_UNANSWERABLE, total_unanswerable, $TOTAL_ERROR, total_error, $TOTAL_LUMPY, total_lumpy, kbq_query_run.$SUM_ANSWER_COUNT, sum_answer_count, kbq_query_run.$MEAN_ANSWER_COUNT, mean_answer_count, kbq_query_run.$MEDIAN_ANSWER_COUNT, median_answer_count });
                analysis = merge_plist(analysis, partial_analysis2);
            } else
                if (pcase_var.eql($HYPOTHESIZATION_TIME)) {
                    SubLObject all_hypothesization_times = NIL;
                    SubLObject cdolist_list_var_$74 = query_runs;
                    SubLObject query_run = NIL;
                    query_run = cdolist_list_var_$74.first();
                    while (NIL != cdolist_list_var_$74) {
                        final SubLObject var = kbq_query_run.kbq_query_run_property_value(query_run, $HYPOTHESIZATION_TIME, ZERO_INTEGER);
                        if (NIL != var) {
                            all_hypothesization_times = cons(var, all_hypothesization_times);
                        }
                        cdolist_list_var_$74 = cdolist_list_var_$74.rest();
                        query_run = cdolist_list_var_$74.first();
                    } 
                    final SubLObject sum_hypothesization_time = summation(all_hypothesization_times);
                    final SubLObject mean_hypothesization_time = (NIL != all_hypothesization_times) ? mean(all_hypothesization_times) : NIL;
                    final SubLObject median_hypothesization_time = (NIL != all_hypothesization_times) ? median(all_hypothesization_times, UNPROVIDED, UNPROVIDED) : NIL;
                    final SubLObject stdev_hypothesization_time = (NIL != all_hypothesization_times) ? standard_deviation(all_hypothesization_times) : NIL;
                    final SubLObject partial_analysis3 = list(kbq_query_run.$SUM_HYPOTHESIZATION_TIME, sum_hypothesization_time, kbq_query_run.$MEAN_HYPOTHESIZATION_TIME, mean_hypothesization_time, kbq_query_run.$MEDIAN_HYPOTHESIZATION_TIME, median_hypothesization_time, kbq_query_run.$STDEV_HYPOTHESIZATION_TIME, stdev_hypothesization_time);
                    analysis = merge_plist(analysis, partial_analysis3);
                } else
                    if (pcase_var.eql($TOTAL_TIME)) {
                        SubLObject all_total_times = NIL;
                        SubLObject cdolist_list_var_$75 = query_runs;
                        SubLObject query_run = NIL;
                        query_run = cdolist_list_var_$75.first();
                        while (NIL != cdolist_list_var_$75) {
                            final SubLObject var = kbq_query_run.kbq_query_run_property_value(query_run, $TOTAL_TIME, ZERO_INTEGER);
                            if (NIL != var) {
                                all_total_times = cons(var, all_total_times);
                            }
                            cdolist_list_var_$75 = cdolist_list_var_$75.rest();
                            query_run = cdolist_list_var_$75.first();
                        } 
                        final SubLObject sum_total_time = summation(all_total_times);
                        final SubLObject mean_total_time = (NIL != all_total_times) ? mean(all_total_times) : NIL;
                        final SubLObject median_total_time = (NIL != all_total_times) ? median(all_total_times, UNPROVIDED, UNPROVIDED) : NIL;
                        final SubLObject stdev_total_time = (NIL != all_total_times) ? standard_deviation(all_total_times) : NIL;
                        final SubLObject partial_analysis3 = list(kbq_query_run.$SUM_TOTAL_TIME, sum_total_time, kbq_query_run.$MEAN_TOTAL_TIME, mean_total_time, kbq_query_run.$MEDIAN_TOTAL_TIME, median_total_time, kbq_query_run.$STDEV_TOTAL_TIME, stdev_total_time);
                        analysis = merge_plist(analysis, partial_analysis3);
                    } else
                        if (pcase_var.eql(kbq_query_run.$COMPLETE_TOTAL_TIME)) {
                            SubLObject all_total_times = NIL;
                            SubLObject cdolist_list_var_$76 = query_runs;
                            SubLObject query_run = NIL;
                            query_run = cdolist_list_var_$76.first();
                            while (NIL != cdolist_list_var_$76) {
                                final SubLObject var = kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$COMPLETE_TOTAL_TIME, ZERO_INTEGER);
                                if (NIL != var) {
                                    all_total_times = cons(var, all_total_times);
                                }
                                cdolist_list_var_$76 = cdolist_list_var_$76.rest();
                                query_run = cdolist_list_var_$76.first();
                            } 
                            final SubLObject sum_total_time = summation(all_total_times);
                            final SubLObject mean_total_time = (NIL != all_total_times) ? mean(all_total_times) : NIL;
                            final SubLObject median_total_time = (NIL != all_total_times) ? median(all_total_times, UNPROVIDED, UNPROVIDED) : NIL;
                            final SubLObject stdev_total_time = (NIL != all_total_times) ? standard_deviation(all_total_times) : NIL;
                            final SubLObject partial_analysis3 = list(kbq_query_run.$SUM_COMPLETE_TOTAL_TIME, sum_total_time, kbq_query_run.$MEAN_COMPLETE_TOTAL_TIME, mean_total_time, kbq_query_run.$MEDIAN_COMPLETE_TOTAL_TIME, median_total_time, kbq_query_run.$STDEV_COMPLETE_TOTAL_TIME, stdev_total_time);
                            analysis = merge_plist(analysis, partial_analysis3);
                        } else
                            if (pcase_var.eql(kbq_query_run.$TIME_TO_FIRST_ANSWER)) {
                                SubLObject all_time_to_first_answers = NIL;
                                SubLObject cdolist_list_var_$77 = query_runs;
                                SubLObject query_run = NIL;
                                query_run = cdolist_list_var_$77.first();
                                while (NIL != cdolist_list_var_$77) {
                                    final SubLObject var = kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$TIME_TO_FIRST_ANSWER, UNPROVIDED);
                                    if (NIL != var) {
                                        all_time_to_first_answers = cons(var, all_time_to_first_answers);
                                    }
                                    cdolist_list_var_$77 = cdolist_list_var_$77.rest();
                                    query_run = cdolist_list_var_$77.first();
                                } 
                                final SubLObject sum_time_to_first_answer = summation(all_time_to_first_answers);
                                final SubLObject mean_time_to_first_answer = (NIL != all_time_to_first_answers) ? mean(all_time_to_first_answers) : NIL;
                                final SubLObject median_time_to_first_answer = (NIL != all_time_to_first_answers) ? median(all_time_to_first_answers, UNPROVIDED, UNPROVIDED) : NIL;
                                final SubLObject stdev_time_to_first_answer = (NIL != all_time_to_first_answers) ? standard_deviation(all_time_to_first_answers) : NIL;
                                final SubLObject partial_analysis3 = list(kbq_query_run.$SUM_TIME_TO_FIRST_ANSWER, sum_time_to_first_answer, kbq_query_run.$MEAN_TIME_TO_FIRST_ANSWER, mean_time_to_first_answer, kbq_query_run.$MEDIAN_TIME_TO_FIRST_ANSWER, median_time_to_first_answer, kbq_query_run.$STDEV_TIME_TO_FIRST_ANSWER, stdev_time_to_first_answer);
                                analysis = merge_plist(analysis, partial_analysis3);
                            } else
                                if (pcase_var.eql(kbq_query_run.$COMPLETE_TIME_TO_FIRST_ANSWER)) {
                                    SubLObject all_time_to_first_answers = NIL;
                                    SubLObject cdolist_list_var_$78 = query_runs;
                                    SubLObject query_run = NIL;
                                    query_run = cdolist_list_var_$78.first();
                                    while (NIL != cdolist_list_var_$78) {
                                        final SubLObject var = kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$COMPLETE_TIME_TO_FIRST_ANSWER, UNPROVIDED);
                                        if (NIL != var) {
                                            all_time_to_first_answers = cons(var, all_time_to_first_answers);
                                        }
                                        cdolist_list_var_$78 = cdolist_list_var_$78.rest();
                                        query_run = cdolist_list_var_$78.first();
                                    } 
                                    final SubLObject sum_time_to_first_answer = summation(all_time_to_first_answers);
                                    final SubLObject mean_time_to_first_answer = (NIL != all_time_to_first_answers) ? mean(all_time_to_first_answers) : NIL;
                                    final SubLObject median_time_to_first_answer = (NIL != all_time_to_first_answers) ? median(all_time_to_first_answers, UNPROVIDED, UNPROVIDED) : NIL;
                                    final SubLObject stdev_time_to_first_answer = (NIL != all_time_to_first_answers) ? standard_deviation(all_time_to_first_answers) : NIL;
                                    final SubLObject partial_analysis3 = list(kbq_query_run.$SUM_COMPLETE_TIME_TO_FIRST_ANSWER, sum_time_to_first_answer, kbq_query_run.$MEAN_COMPLETE_TIME_TO_FIRST_ANSWER, mean_time_to_first_answer, kbq_query_run.$MEDIAN_COMPLETE_TIME_TO_FIRST_ANSWER, median_time_to_first_answer, kbq_query_run.$STDEV_COMPLETE_TIME_TO_FIRST_ANSWER, stdev_time_to_first_answer);
                                    analysis = merge_plist(analysis, partial_analysis3);
                                } else
                                    if (pcase_var.eql($ANSWERABILITY_TIME)) {
                                        SubLObject all_answerability_times = NIL;
                                        SubLObject cdolist_list_var_$79 = query_runs;
                                        SubLObject query_run = NIL;
                                        query_run = cdolist_list_var_$79.first();
                                        while (NIL != cdolist_list_var_$79) {
                                            final SubLObject var = kbq_query_run.kbq_query_run_property_value(query_run, $ANSWERABILITY_TIME, UNPROVIDED);
                                            if (NIL != var) {
                                                all_answerability_times = cons(var, all_answerability_times);
                                            }
                                            cdolist_list_var_$79 = cdolist_list_var_$79.rest();
                                            query_run = cdolist_list_var_$79.first();
                                        } 
                                        final SubLObject sum_answerability_time = summation(all_answerability_times);
                                        final SubLObject mean_answerability_time = (NIL != all_answerability_times) ? mean(all_answerability_times) : NIL;
                                        final SubLObject median_answerability_time = (NIL != all_answerability_times) ? median(all_answerability_times, UNPROVIDED, UNPROVIDED) : NIL;
                                        final SubLObject stdev_answerability_time = (NIL != all_answerability_times) ? standard_deviation(all_answerability_times) : NIL;
                                        final SubLObject partial_analysis3 = list(kbq_query_run.$SUM_ANSWERABILITY_TIME, sum_answerability_time, kbq_query_run.$MEAN_ANSWERABILITY_TIME, mean_answerability_time, kbq_query_run.$MEDIAN_ANSWERABILITY_TIME, median_answerability_time, kbq_query_run.$STDEV_ANSWERABILITY_TIME, stdev_answerability_time);
                                        analysis = merge_plist(analysis, partial_analysis3);
                                    } else
                                        if (pcase_var.eql(kbq_query_run.$TIME_TO_LAST_ANSWER)) {
                                            SubLObject all_time_to_last_answers = NIL;
                                            SubLObject cdolist_list_var_$80 = query_runs;
                                            SubLObject query_run = NIL;
                                            query_run = cdolist_list_var_$80.first();
                                            while (NIL != cdolist_list_var_$80) {
                                                final SubLObject var = kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$TIME_TO_LAST_ANSWER, UNPROVIDED);
                                                if (NIL != var) {
                                                    all_time_to_last_answers = cons(var, all_time_to_last_answers);
                                                }
                                                cdolist_list_var_$80 = cdolist_list_var_$80.rest();
                                                query_run = cdolist_list_var_$80.first();
                                            } 
                                            final SubLObject sum_time_to_last_answer = summation(all_time_to_last_answers);
                                            final SubLObject mean_time_to_last_answer = (NIL != all_time_to_last_answers) ? mean(all_time_to_last_answers) : NIL;
                                            final SubLObject median_time_to_last_answer = (NIL != all_time_to_last_answers) ? median(all_time_to_last_answers, UNPROVIDED, UNPROVIDED) : NIL;
                                            final SubLObject stdev_time_to_last_answer = (NIL != all_time_to_last_answers) ? standard_deviation(all_time_to_last_answers) : NIL;
                                            final SubLObject partial_analysis3 = list(kbq_query_run.$SUM_TIME_TO_LAST_ANSWER, sum_time_to_last_answer, kbq_query_run.$MEAN_TIME_TO_LAST_ANSWER, mean_time_to_last_answer, kbq_query_run.$MEDIAN_TIME_TO_LAST_ANSWER, median_time_to_last_answer, kbq_query_run.$STDEV_TIME_TO_LAST_ANSWER, stdev_time_to_last_answer);
                                            analysis = merge_plist(analysis, partial_analysis3);
                                        } else
                                            if (pcase_var.eql(kbq_query_run.$COMPLETE_TIME_PER_ANSWER)) {
                                                SubLObject all_time_per_answers = NIL;
                                                SubLObject cdolist_list_var_$81 = query_runs;
                                                SubLObject query_run = NIL;
                                                query_run = cdolist_list_var_$81.first();
                                                while (NIL != cdolist_list_var_$81) {
                                                    final SubLObject var = kbq_query_run.kbq_query_run_property_value(query_run, kbq_query_run.$COMPLETE_TIME_PER_ANSWER, UNPROVIDED);
                                                    if (NIL != var) {
                                                        all_time_per_answers = cons(var, all_time_per_answers);
                                                    }
                                                    cdolist_list_var_$81 = cdolist_list_var_$81.rest();
                                                    query_run = cdolist_list_var_$81.first();
                                                } 
                                                final SubLObject median_time_per_answer = (NIL != all_time_per_answers) ? median(all_time_per_answers, UNPROVIDED, UNPROVIDED) : NIL;
                                                final SubLObject partial_analysis4 = list(kbq_query_run.$MEDIAN_COMPLETE_TIME_PER_ANSWER, median_time_per_answer);
                                                analysis = merge_plist(analysis, partial_analysis4);
                                            } else {
                                                Errors.warn(kbq_query_run.$str492$ignoring_metric__S, metric);
                                            }








            cdolist_list_var = cdolist_list_var.rest();
            metric = cdolist_list_var.first();
        } 
        if ((NIL != memberP($TOTAL_TIME, metrics, UNPROVIDED, UNPROVIDED)) && (NIL != memberP($ANSWER_COUNT, metrics, UNPROVIDED, UNPROVIDED))) {
            SubLObject all_times_per_answer = NIL;
            SubLObject cdolist_list_var2 = query_runs;
            SubLObject query_run2 = NIL;
            query_run2 = cdolist_list_var2.first();
            while (NIL != cdolist_list_var2) {
                final SubLObject total_time = getf(query_run2, $TOTAL_TIME, ZERO_INTEGER);
                final SubLObject answer_count = getf(query_run2, $ANSWER_COUNT, ZERO_INTEGER);
                if (NIL != positive_integer_p(answer_count)) {
                    final SubLObject var;
                    final SubLObject time_per_answer = var = divide(total_time, answer_count);
                    if (NIL != var) {
                        all_times_per_answer = cons(var, all_times_per_answer);
                    }
                }
                cdolist_list_var2 = cdolist_list_var2.rest();
                query_run2 = cdolist_list_var2.first();
            } 
            final SubLObject median_time_per_answer2 = (NIL != all_times_per_answer) ? median(all_times_per_answer, UNPROVIDED, UNPROVIDED) : NIL;
            final SubLObject partial_analysis5 = list(kbq_query_run.$MEDIAN_TIME_PER_ANSWER, median_time_per_answer2);
            analysis = merge_plist(analysis, partial_analysis5);
        }
        return analysis;
    }

    public static final SubLObject kbq_query_set_run_total_answerable_alt(SubLObject query_set_run) {
        {
            SubLObject query_runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
            SubLObject all_answer_counts = NIL;
            SubLObject cdolist_list_var = query_runs;
            SubLObject query_run = NIL;
            for (query_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run = cdolist_list_var.first()) {
                {
                    SubLObject var = getf(query_run, $ANSWER_COUNT, ZERO_INTEGER);
                    if (NIL != var) {
                        all_answer_counts = cons(var, all_answer_counts);
                    }
                }
            }
            {
                SubLObject total_answerable = count_if(symbol_function(POSITIVE_INTEGER_P), all_answer_counts, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                return total_answerable;
            }
        }
    }

    public static SubLObject kbq_query_set_run_total_answerable(final SubLObject query_set_run) {
        final SubLObject query_runs = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
        SubLObject all_answer_counts = NIL;
        SubLObject cdolist_list_var = query_runs;
        SubLObject query_run = NIL;
        query_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject var = getf(query_run, $ANSWER_COUNT, ZERO_INTEGER);
            if (NIL != var) {
                all_answer_counts = cons(var, all_answer_counts);
            }
            cdolist_list_var = cdolist_list_var.rest();
            query_run = cdolist_list_var.first();
        } 
        final SubLObject total_answerable = count_if(symbol_function(POSITIVE_INTEGER_P), all_answer_counts, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return total_answerable;
    }

    public static final SubLObject kbq_query_set_run_last_query_from_file_alt(SubLObject filename) {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject last_query = NIL;
                SubLTrampolineFile.checkType(filename, STRINGP);
                {
                    SubLObject stream = NIL;
                    try {
                        {
                            SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                            try {
                                stream_macros.$stream_requires_locking$.bind(NIL, thread);
                                stream = compatibility.open_binary(filename, $INPUT, NIL);
                            } finally {
                                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                            }
                        }
                        if (!stream.isStream()) {
                            Errors.error($str_alt195$Unable_to_open__S, filename);
                        }
                        {
                            SubLObject stream_62 = stream;
                            {
                                SubLObject _prev_bind_0 = $cfasl_common_symbols$.currentBinding(thread);
                                try {
                                    $cfasl_common_symbols$.bind(NIL, thread);
                                    cfasl_set_common_symbols(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_cfasl_common_symbols());
                                    {
                                        SubLObject _prev_bind_0_63 = $cfasl_input_guid_string_resource$.currentBinding(thread);
                                        try {
                                            $cfasl_input_guid_string_resource$.bind(get_new_cfasl_input_guid_string_resource(), thread);
                                            {
                                                SubLObject query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_load_query_set_run_int(stream_62);
                                                {
                                                    SubLObject csome_list_var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
                                                    SubLObject query_run = NIL;
                                                    for (query_run = csome_list_var.first(); NIL != csome_list_var; csome_list_var = csome_list_var.rest() , query_run = csome_list_var.first()) {
                                                        last_query = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run);
                                                    }
                                                }
                                                {
                                                    SubLObject done_var = NIL;
                                                    while (NIL == done_var) {
                                                        {
                                                            SubLObject query_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_load_query_run_int(stream_62);
                                                            if (query_run == $EOF) {
                                                                done_var = T;
                                                            }
                                                            if (NIL == done_var) {
                                                                query_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_nclean_query_run(query_run);
                                                                last_query = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run);
                                                                done_var = NIL;
                                                            }
                                                        }
                                                    } 
                                                }
                                            }
                                        } finally {
                                            $cfasl_input_guid_string_resource$.rebind(_prev_bind_0_63, thread);
                                        }
                                    }
                                } finally {
                                    $cfasl_common_symbols$.rebind(_prev_bind_0, thread);
                                }
                            }
                        }
                    } finally {
                        {
                            SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                $is_thread_performing_cleanupP$.bind(T, thread);
                                if (stream.isStream()) {
                                    close(stream, UNPROVIDED);
                                }
                            } finally {
                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
                            }
                        }
                    }
                }
                return last_query;
            }
        }
    }

    public static SubLObject kbq_query_set_run_last_query_from_file(final SubLObject filename) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject last_query = NIL;
        assert NIL != stringp(filename) : "! stringp(filename) " + ("Types.stringp(filename) " + "CommonSymbols.NIL != Types.stringp(filename) ") + filename;
        SubLObject stream = NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind(NIL, thread);
                stream = compatibility.open_binary(filename, $INPUT);
            } finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error(kbq_query_run.$str225$Unable_to_open__S, filename);
            }
            final SubLObject stream_$82 = stream;
            final SubLObject _prev_bind_2 = $cfasl_common_symbols$.currentBinding(thread);
            try {
                $cfasl_common_symbols$.bind(NIL, thread);
                cfasl_set_common_symbols_simple(kbq_query_run.kbq_cfasl_common_symbols_simple());
                final SubLObject _prev_bind_0_$83 = $cfasl_input_guid_string_resource$.currentBinding(thread);
                try {
                    $cfasl_input_guid_string_resource$.bind(get_new_cfasl_input_guid_string_resource(), thread);
                    final SubLObject query_set_run = kbq_query_run.kbq_load_query_set_run_int(stream_$82);
                    SubLObject csome_list_var = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
                    SubLObject query_run = NIL;
                    query_run = csome_list_var.first();
                    while (NIL != csome_list_var) {
                        last_query = kbq_query_run.kbq_query_run_query(query_run);
                        csome_list_var = csome_list_var.rest();
                        query_run = csome_list_var.first();
                    } 
                    for (SubLObject done_var = NIL; NIL == done_var; done_var = NIL) {
                        query_run = kbq_query_run.kbq_load_query_run_int(stream_$82);
                        if (query_run == $EOF) {
                            done_var = T;
                        }
                        if (NIL == done_var) {
                            query_run = kbq_query_run.kbq_nclean_query_run(query_run);
                            last_query = kbq_query_run.kbq_query_run_query(query_run);
                        }
                    }
                } finally {
                    $cfasl_input_guid_string_resource$.rebind(_prev_bind_0_$83, thread);
                }
            } finally {
                $cfasl_common_symbols$.rebind(_prev_bind_2, thread);
            }
        } finally {
            final SubLObject _prev_bind_3 = $is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                $is_thread_performing_cleanupP$.bind(T, thread);
                final SubLObject _values = getValuesAsVector();
                if (stream.isStream()) {
                    close(stream, UNPROVIDED);
                }
                restoreValuesFromVector(_values);
            } finally {
                $is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        return last_query;
    }

    public static final SubLObject kbq_query_set_run_identify_probable_segfault_from_file_alt(SubLObject filename, SubLObject all_kbqs) {
        {
            SubLObject last_kbq = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_last_query_from_file(filename);
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_identify_probable_segfault_int(last_kbq, all_kbqs);
        }
    }

    public static SubLObject kbq_query_set_run_identify_probable_segfault_from_file(final SubLObject filename, final SubLObject all_kbqs) {
        final SubLObject last_kbq = kbq_query_run.kbq_query_set_run_last_query_from_file(filename);
        return kbq_query_run.kbq_query_set_run_identify_probable_segfault_int(last_kbq, all_kbqs);
    }

    public static final SubLObject kbq_query_set_run_identify_probable_segfault_alt(SubLObject query_set_run, SubLObject all_kbqs) {
        {
            SubLObject last_kbq = list_utilities.last_one(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_queries(query_set_run));
            return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_identify_probable_segfault_int(last_kbq, all_kbqs);
        }
    }

    public static SubLObject kbq_query_set_run_identify_probable_segfault(final SubLObject query_set_run, final SubLObject all_kbqs) {
        final SubLObject last_kbq = last_one(kbq_query_run.kbq_query_set_run_queries(query_set_run));
        return kbq_query_run.kbq_query_set_run_identify_probable_segfault_int(last_kbq, all_kbqs);
    }

    public static final SubLObject kbq_query_set_run_identify_probable_segfault_int_alt(SubLObject last_kbq, SubLObject all_kbqs) {
        {
            SubLObject last_pos = position(last_kbq, all_kbqs, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject segfault_pos = number_utilities.f_1X(last_pos);
            SubLObject segfaulting_kbq = nth(segfault_pos, all_kbqs);
            return values(segfaulting_kbq, segfault_pos);
        }
    }

    public static SubLObject kbq_query_set_run_identify_probable_segfault_int(final SubLObject last_kbq, final SubLObject all_kbqs) {
        final SubLObject last_pos = position(last_kbq, all_kbqs, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject segfault_pos = f_1X(last_pos);
        final SubLObject segfaulting_kbq = nth(segfault_pos, all_kbqs);
        return values(segfaulting_kbq, segfault_pos);
    }

    public static final SubLObject kct_analyze_test_runs_alt(SubLObject test_runs, SubLObject metrics) {
        {
            SubLObject total = length(test_runs);
            SubLObject total_success = count($SUCCESS, test_runs, symbol_function(EQ), symbol_function(KCT_TEST_RUN_STATUS), UNPROVIDED, UNPROVIDED);
            SubLObject total_failure = count($FAILURE, test_runs, symbol_function(EQ), symbol_function(KCT_TEST_RUN_STATUS), UNPROVIDED, UNPROVIDED);
            SubLObject test_analysis = list($TOTAL, total, $TOTAL_SUCCESS, total_success, $TOTAL_FAILURE, total_failure);
            if (total.isPositive()) {
                {
                    SubLObject success_pct = number_utilities.percent(total_success, total, UNPROVIDED);
                    SubLObject failure_pct = number_utilities.percent(total_failure, total, UNPROVIDED);
                    test_analysis = append(test_analysis, list($PERCENT_SUCCESS, success_pct, $PERCENT_FAILURE, failure_pct));
                }
            }
            {
                SubLObject query_runs = Mapping.mapcar(symbol_function(KCT_TEST_RUN_QUERY_RUN), test_runs);
                SubLObject query_run_analysis = remf(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_analyze_query_runs(query_runs, metrics), $TOTAL);
                return list_utilities.merge_plist(test_analysis, query_run_analysis);
            }
        }
    }

    public static SubLObject kct_analyze_test_runs(final SubLObject test_runs, final SubLObject metrics) {
        final SubLObject total = length(test_runs);
        final SubLObject total_success = count($SUCCESS, test_runs, symbol_function(EQ), symbol_function(kbq_query_run.KCT_TEST_RUN_STATUS), UNPROVIDED, UNPROVIDED);
        final SubLObject total_failure = count($FAILURE, test_runs, symbol_function(EQ), symbol_function(kbq_query_run.KCT_TEST_RUN_STATUS), UNPROVIDED, UNPROVIDED);
        SubLObject test_analysis = list($TOTAL, total, $TOTAL_SUCCESS, total_success, $TOTAL_FAILURE, total_failure);
        if (total.isPositive()) {
            final SubLObject success_pct = percent(total_success, total, UNPROVIDED);
            final SubLObject failure_pct = percent(total_failure, total, UNPROVIDED);
            test_analysis = append(test_analysis, list($PERCENT_SUCCESS, success_pct, $PERCENT_FAILURE, failure_pct));
        }
        final SubLObject query_runs = Mapping.mapcar(symbol_function(kbq_query_run.KCT_TEST_RUN_QUERY_RUN), test_runs);
        final SubLObject query_run_analysis = remf(kbq_query_run.kbq_analyze_query_runs(query_runs, metrics), $TOTAL);
        return merge_plist(test_analysis, query_run_analysis);
    }

    public static final SubLObject kct_test_set_run_identify_probable_segfault_alt(SubLObject test_set_run, SubLObject all_kcts) {
        {
            SubLObject last_kct = list_utilities.last_one(com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_tests(test_set_run));
            SubLObject last_pos = position(last_kct, all_kcts, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject segfault_pos = number_utilities.f_1X(last_pos);
            SubLObject segfaulting_kct = nth(segfault_pos, all_kcts);
            return values(segfaulting_kct, segfault_pos);
        }
    }

    public static SubLObject kct_test_set_run_identify_probable_segfault(final SubLObject test_set_run, final SubLObject all_kcts) {
        final SubLObject last_kct = last_one(kbq_query_run.kct_test_set_run_tests(test_set_run));
        final SubLObject last_pos = position(last_kct, all_kcts, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject segfault_pos = f_1X(last_pos);
        final SubLObject segfaulting_kct = nth(segfault_pos, all_kcts);
        return values(segfaulting_kct, segfault_pos);
    }

    public static final SubLObject analyze_kbq_experiments_alt(SubLObject baseline_denoting_symbol, SubLObject experiment_denoting_symbol, SubLObject corpus, SubLObject graph_metrics, SubLObject metrics, SubLObject display, SubLObject stream) {
        if (corpus == UNPROVIDED) {
            corpus = $str_alt144$;
        }
        if (graph_metrics == UNPROVIDED) {
            graph_metrics = $list_alt444;
        }
        if (metrics == UNPROVIDED) {
            metrics = lilliput.basic_lilliput_query_metrics();
        }
        if (display == UNPROVIDED) {
            display = $str_alt445$_0;
        }
        if (stream == UNPROVIDED) {
            stream = StreamsLow.$standard_output$.getDynamicValue();
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(baseline_denoting_symbol, BOUND_SYMBOL_P);
            SubLTrampolineFile.checkType(experiment_denoting_symbol, BOUND_SYMBOL_P);
            {
                SubLObject baseline = symbol_value(baseline_denoting_symbol);
                SubLObject baseline_name = symbol_name(baseline_denoting_symbol);
                SubLObject experiment = symbol_value(experiment_denoting_symbol);
                SubLObject experiment_name = symbol_name(experiment_denoting_symbol);
                thread.resetMultipleValues();
                {
                    SubLObject mutual_baseline = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_mutually_answerable_query_set_runs(baseline, experiment);
                    SubLObject mutual_experiment = thread.secondMultipleValue();
                    thread.resetMultipleValues();
                    format(stream, $str_alt447$____Answerability_analysis____);
                    thread.resetMultipleValues();
                    {
                        SubLObject only_1 = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_answerable_counts(baseline, experiment);
                        SubLObject mutual = thread.secondMultipleValue();
                        SubLObject only_2 = thread.thirdMultipleValue();
                        thread.resetMultipleValues();
                        format(T, $str_alt448$Total_____________s__s__s__, new SubLObject[]{ only_1, mutual, only_2 });
                    }
                    format(stream, $str_alt449$____Basic_analysis____);
                    com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_print_analysis(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_analyze_query_set_runs(baseline, experiment, metrics));
                    format(stream, $str_alt450$____Mutually_Answerable____);
                    com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_print_analysis(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_analyze_query_set_runs(mutual_baseline, mutual_experiment, metrics));
                    format(stream, $str_alt451$____Answerable____);
                    com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_print_analysis(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_analyze_query_set_runs(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_answerable_query_set_run(baseline), com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_answerable_query_set_run(experiment), metrics));
                    format(stream, $str_alt452$____Unanswerable____);
                    com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_print_analysis(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_analyze_query_set_runs(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_unanswerable_query_set_run(baseline), com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_unanswerable_query_set_run(experiment), metrics));
                    {
                        SubLObject cdolist_list_var = graph_metrics;
                        SubLObject metric = NIL;
                        for (metric = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , metric = cdolist_list_var.first()) {
                            {
                                SubLObject cdolist_list_var_64 = $list_alt453;
                                SubLObject sort_by = NIL;
                                for (sort_by = cdolist_list_var_64.first(); NIL != cdolist_list_var_64; cdolist_list_var_64 = cdolist_list_var_64.rest() , sort_by = cdolist_list_var_64.first()) {
                                    lilliput.lilliput_generate_sorted_property_comparison(baseline, experiment, baseline_name, experiment_name, metric, sort_by, corpus, display);
                                }
                            }
                            {
                                SubLObject cdolist_list_var_65 = $list_alt453;
                                SubLObject sort_by = NIL;
                                for (sort_by = cdolist_list_var_65.first(); NIL != cdolist_list_var_65; cdolist_list_var_65 = cdolist_list_var_65.rest() , sort_by = cdolist_list_var_65.first()) {
                                    lilliput.lilliput_generate_sorted_property_comparison(mutual_baseline, mutual_experiment, baseline_name, experiment_name, metric, sort_by, cconcatenate($str_alt454$Mutually_Answerable_, corpus), display);
                                }
                            }
                        }
                    }
                }
            }
            return NIL;
        }
    }

    public static SubLObject analyze_kbq_experiments(final SubLObject baseline_denoting_symbol, final SubLObject experiment_denoting_symbol, SubLObject corpus, SubLObject graph_metrics, SubLObject metrics, SubLObject display, SubLObject stream) {
        if (corpus == UNPROVIDED) {
            corpus = kbq_query_run.$str161$;
        }
        if (graph_metrics == UNPROVIDED) {
            graph_metrics = kbq_query_run.$list499;
        }
        if (metrics == UNPROVIDED) {
            metrics = lilliput.basic_lilliput_query_metrics();
        }
        if (display == UNPROVIDED) {
            display = kbq_query_run.$str500$_0;
        }
        if (stream == UNPROVIDED) {
            stream = StreamsLow.$standard_output$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != bound_symbol_p(baseline_denoting_symbol) : "! special_variable_state.bound_symbol_p(baseline_denoting_symbol) " + ("special_variable_state.bound_symbol_p(baseline_denoting_symbol) " + "CommonSymbols.NIL != special_variable_state.bound_symbol_p(baseline_denoting_symbol) ") + baseline_denoting_symbol;
        assert NIL != bound_symbol_p(experiment_denoting_symbol) : "! special_variable_state.bound_symbol_p(experiment_denoting_symbol) " + ("special_variable_state.bound_symbol_p(experiment_denoting_symbol) " + "CommonSymbols.NIL != special_variable_state.bound_symbol_p(experiment_denoting_symbol) ") + experiment_denoting_symbol;
        final SubLObject baseline = symbol_value(baseline_denoting_symbol);
        final SubLObject baseline_name = symbol_name(baseline_denoting_symbol);
        final SubLObject experiment = symbol_value(experiment_denoting_symbol);
        final SubLObject experiment_name = symbol_name(experiment_denoting_symbol);
        thread.resetMultipleValues();
        final SubLObject mutual_baseline = kbq_query_run.kbq_mutually_answerable_query_set_runs(baseline, experiment);
        final SubLObject mutual_experiment = thread.secondMultipleValue();
        thread.resetMultipleValues();
        format(stream, kbq_query_run.$str502$____Answerability_analysis____);
        thread.resetMultipleValues();
        final SubLObject only_1 = kbq_query_run.kbq_query_set_run_answerable_counts(baseline, experiment);
        final SubLObject mutual = thread.secondMultipleValue();
        final SubLObject only_2 = thread.thirdMultipleValue();
        thread.resetMultipleValues();
        format(T, kbq_query_run.$str503$Total_____________s__s__s__, new SubLObject[]{ only_1, mutual, only_2 });
        format(stream, kbq_query_run.$str504$____Basic_analysis____);
        kbq_query_run.kbq_print_analysis(kbq_query_run.kbq_analyze_query_set_runs(baseline, experiment, metrics));
        format(stream, kbq_query_run.$str505$____Mutually_Answerable____);
        kbq_query_run.kbq_print_analysis(kbq_query_run.kbq_analyze_query_set_runs(mutual_baseline, mutual_experiment, metrics));
        format(stream, kbq_query_run.$str506$____Answerable____);
        kbq_query_run.kbq_print_analysis(kbq_query_run.kbq_analyze_query_set_runs(kbq_query_run.kbq_answerable_query_set_run(baseline), kbq_query_run.kbq_answerable_query_set_run(experiment), metrics));
        format(stream, kbq_query_run.$str507$____Unanswerable____);
        kbq_query_run.kbq_print_analysis(kbq_query_run.kbq_analyze_query_set_runs(kbq_query_run.kbq_unanswerable_query_set_run(baseline), kbq_query_run.kbq_unanswerable_query_set_run(experiment), metrics));
        SubLObject cdolist_list_var = graph_metrics;
        SubLObject metric = NIL;
        metric = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject cdolist_list_var_$84 = kbq_query_run.$list508;
            SubLObject sort_by = NIL;
            sort_by = cdolist_list_var_$84.first();
            while (NIL != cdolist_list_var_$84) {
                lilliput.lilliput_generate_sorted_property_comparison(baseline, experiment, baseline_name, experiment_name, metric, sort_by, corpus, display);
                cdolist_list_var_$84 = cdolist_list_var_$84.rest();
                sort_by = cdolist_list_var_$84.first();
            } 
            SubLObject cdolist_list_var_$85 = kbq_query_run.$list508;
            sort_by = NIL;
            sort_by = cdolist_list_var_$85.first();
            while (NIL != cdolist_list_var_$85) {
                lilliput.lilliput_generate_sorted_property_comparison(mutual_baseline, mutual_experiment, baseline_name, experiment_name, metric, sort_by, cconcatenate(kbq_query_run.$$$Mutually_Answerable_, corpus), display);
                cdolist_list_var_$85 = cdolist_list_var_$85.rest();
                sort_by = cdolist_list_var_$85.first();
            } 
            cdolist_list_var = cdolist_list_var.rest();
            metric = cdolist_list_var.first();
        } 
        return NIL;
    }

    public static final SubLObject kbq_non_lumpy_query_set_run_alt(SubLObject query_set_run) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run, com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_lumpy_queries(query_set_run), T);
    }

    public static SubLObject kbq_non_lumpy_query_set_run(final SubLObject query_set_run) {
        return kbq_query_run.kbq_filter_query_set_run_to_queries(query_set_run, kbq_query_run.kbq_lumpy_queries(query_set_run), T);
    }

    /**
     *
     *
     * @return list of query-specs affected by bug 20862
     * @see kbq-erroring-queries
     */
    @LispMethod(comment = "@return list of query-specs affected by bug 20862\r\n@see kbq-erroring-queries")
    public static final SubLObject kbq_lumpy_queries_alt(SubLObject query_set_run) {
        {
            SubLObject queries = NIL;
            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
            SubLObject query_run = NIL;
            for (query_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , query_run = cdolist_list_var.first()) {
                if (NIL != com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_lumpy_query_runP(query_run)) {
                    queries = cons(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(query_run), queries);
                }
            }
            return nreverse(queries);
        }
    }

    /**
     *
     *
     * @return list of query-specs affected by bug 20862
     * @see kbq-erroring-queries
     */
    @LispMethod(comment = "@return list of query-specs affected by bug 20862\r\n@see kbq-erroring-queries")
    public static SubLObject kbq_lumpy_queries(final SubLObject query_set_run) {
        SubLObject queries = NIL;
        SubLObject cdolist_list_var = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
        SubLObject query_run = NIL;
        query_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != kbq_query_run.kbq_lumpy_query_runP(query_run)) {
                queries = cons(kbq_query_run.kbq_query_run_query(query_run), queries);
            }
            cdolist_list_var = cdolist_list_var.rest();
            query_run = cdolist_list_var.first();
        } 
        return nreverse(queries);
    }

    /**
     *
     *
     * @return integerp; how many queries in QUERY-SET-RUN were affected by bug 20862
     * @see kbq-erroring-query-count
     */
    @LispMethod(comment = "@return integerp; how many queries in QUERY-SET-RUN were affected by bug 20862\r\n@see kbq-erroring-query-count")
    public static final SubLObject kbq_lumpy_query_count_alt(SubLObject query_set_run) {
        return com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_count_lumpy_query_runs(com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run));
    }

    /**
     *
     *
     * @return integerp; how many queries in QUERY-SET-RUN were affected by bug 20862
     * @see kbq-erroring-query-count
     */
    @LispMethod(comment = "@return integerp; how many queries in QUERY-SET-RUN were affected by bug 20862\r\n@see kbq-erroring-query-count")
    public static SubLObject kbq_lumpy_query_count(final SubLObject query_set_run) {
        return kbq_query_run.kbq_count_lumpy_query_runs(kbq_query_run.kbq_query_set_run_query_runs(query_set_run));
    }

    public static final SubLObject kbq_count_lumpy_query_runs_alt(SubLObject query_runs) {
        return count_if($sym455$KBQ_LUMPY_QUERY_RUN_, query_runs, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject kbq_count_lumpy_query_runs(final SubLObject query_runs) {
        return count_if(kbq_query_run.$sym510$KBQ_LUMPY_QUERY_RUN_, query_runs, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject kbq_lumpy_query_runP_alt(SubLObject query_run) {
        {
            SubLObject halt_reason = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_halt_reason(query_run);
            if (NIL != inference_datastructures_enumerated_types.inference_error_suspend_status_p(halt_reason)) {
                if (NIL != string_utilities.substringP($$$Unable_to_compute_any_metrics, inference_datastructures_enumerated_types.inference_error_suspend_status_message(halt_reason), UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
                    return T;
                }
            }
        }
        return NIL;
    }

    public static SubLObject kbq_lumpy_query_runP(final SubLObject query_run) {
        final SubLObject halt_reason = kbq_query_run.kbq_query_run_halt_reason(query_run);
        if ((NIL != inference_error_suspend_status_p(halt_reason)) && (NIL != substringP(kbq_query_run.$$$Unable_to_compute_any_metrics, inference_error_suspend_status_message(halt_reason), UNPROVIDED, UNPROVIDED, UNPROVIDED))) {
            return T;
        }
        return NIL;
    }

    public static final SubLObject show_kct_test_set_run_summary_alt(SubLObject test_set_run, SubLObject stream) {
        if (stream == UNPROVIDED) {
            stream = StreamsLow.$standard_output$.getDynamicValue();
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            {
                SubLObject test_runs = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_set_run_test_runs(test_set_run);
                SubLObject total = length(test_runs);
                SubLObject successes = count($SUCCESS, test_runs, symbol_function(EQ), symbol_function(KCT_TEST_RUN_STATUS), UNPROVIDED, UNPROVIDED);
                SubLObject failures = count($FAILURE, test_runs, symbol_function(EQ), symbol_function(KCT_TEST_RUN_STATUS), UNPROVIDED, UNPROVIDED);
                {
                    SubLObject _prev_bind_0 = $read_default_float_format$.currentBinding(thread);
                    try {
                        $read_default_float_format$.bind(DOUBLE_FLOAT, thread);
                        format(stream, $str_alt458$_____Total_Tests____4D, total);
                        format(stream, $str_alt459$______Successes_____4D___S___, successes, number_utilities.significant_digits(multiply($int$100, divide(successes, total)), THREE_INTEGER));
                        format(stream, $str_alt460$______Failures______4D___S___, failures, number_utilities.significant_digits(multiply($int$100, divide(failures, total)), THREE_INTEGER));
                        {
                            SubLObject analysis = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_analyze_test_set_run(test_set_run, UNPROVIDED);
                            format(stream, $str_alt461$_______Test_Set_Metrics__);
                            list_utilities.pretty_print_plist(analysis, stream);
                        }
                        {
                            SubLObject cdolist_list_var = test_runs;
                            SubLObject test_run = NIL;
                            for (test_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , test_run = cdolist_list_var.first()) {
                                {
                                    SubLObject test = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_test(test_run);
                                    SubLObject status = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_status(test_run);
                                    SubLObject query_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kct_test_run_query_run(test_run);
                                    SubLObject halt_reason = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_property_value(query_run, $HALT_REASON, UNPROVIDED);
                                    format(stream, $str_alt462$____Test____S, test);
                                    format(stream, $str_alt463$__Status____S, status);
                                    format(stream, $str_alt464$__Halt_Reason____S, halt_reason);
                                    {
                                        SubLObject remainder = NIL;
                                        for (remainder = query_run; NIL != remainder; remainder = cddr(remainder)) {
                                            {
                                                SubLObject property = remainder.first();
                                                SubLObject value = cadr(remainder);
                                                if (NIL != inference_datastructures_enumerated_types.query_metric_p(property)) {
                                                    if (NIL != value) {
                                                        format(stream, $str_alt465$___S__S, property, value);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } finally {
                        $read_default_float_format$.rebind(_prev_bind_0, thread);
                    }
                }
            }
            return NIL;
        }
    }

    public static SubLObject show_kct_test_set_run_summary(final SubLObject test_set_run, SubLObject stream) {
        if (stream == UNPROVIDED) {
            stream = StreamsLow.$standard_output$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject test_runs = kbq_query_run.kct_test_set_run_test_runs(test_set_run);
        final SubLObject total = length(test_runs);
        final SubLObject successes = count($SUCCESS, test_runs, symbol_function(EQ), symbol_function(kbq_query_run.KCT_TEST_RUN_STATUS), UNPROVIDED, UNPROVIDED);
        final SubLObject failures = count($FAILURE, test_runs, symbol_function(EQ), symbol_function(kbq_query_run.KCT_TEST_RUN_STATUS), UNPROVIDED, UNPROVIDED);
        final SubLObject _prev_bind_0 = $read_default_float_format$.currentBinding(thread);
        try {
            $read_default_float_format$.bind(DOUBLE_FLOAT, thread);
            format(stream, kbq_query_run.$str513$_____Total_Tests____4D, total);
            format(stream, kbq_query_run.$str514$______Successes_____4D___S___, successes, significant_digits(multiply($int$100, divide(successes, total)), THREE_INTEGER));
            format(stream, kbq_query_run.$str515$______Failures______4D___S___, failures, significant_digits(multiply($int$100, divide(failures, total)), THREE_INTEGER));
            final SubLObject analysis = kbq_query_run.kct_analyze_test_set_run(test_set_run, UNPROVIDED);
            format(stream, kbq_query_run.$str516$_______Test_Set_Metrics__);
            pretty_print_plist(analysis, stream);
            SubLObject cdolist_list_var = test_runs;
            SubLObject test_run = NIL;
            test_run = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                final SubLObject test = kbq_query_run.kct_test_run_test(test_run);
                final SubLObject status = kbq_query_run.kct_test_run_status(test_run);
                final SubLObject query_run = kbq_query_run.kct_test_run_query_run(test_run);
                final SubLObject halt_reason = kbq_query_run.kbq_query_run_property_value(query_run, $HALT_REASON, UNPROVIDED);
                format(stream, kbq_query_run.$str517$____Test____S, test);
                format(stream, kbq_query_run.$str518$__Status____S, status);
                format(stream, kbq_query_run.$str519$__Halt_Reason____S, halt_reason);
                SubLObject remainder;
                SubLObject property;
                SubLObject value;
                for (remainder = NIL, remainder = query_run; NIL != remainder; remainder = cddr(remainder)) {
                    property = remainder.first();
                    value = cadr(remainder);
                    if ((NIL != query_metric_p(property)) && (NIL != value)) {
                        format(stream, kbq_query_run.$str520$___S__S, property, value);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                test_run = cdolist_list_var.first();
            } 
        } finally {
            $read_default_float_format$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    public static final SubLObject kbq_show_halt_reason_histogram_alt(SubLObject query_set_run) {
        return list_utilities.pretty_print_histogram(list_utilities.histogram(Mapping.mapcar(KBQ_QUERY_RUN_HALT_REASON, com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run)), symbol_function($sym83$_), symbol_function(EQUAL), UNPROVIDED));
    }

    public static SubLObject kbq_show_halt_reason_histogram(final SubLObject query_set_run) {
        return pretty_print_histogram(histogram(Mapping.mapcar(kbq_query_run.KBQ_QUERY_RUN_HALT_REASON, kbq_query_run.kbq_query_set_run_query_runs(query_set_run)), symbol_function(kbq_query_run.$sym86$_), symbol_function(EQUAL), UNPROVIDED));
    }

    public static SubLObject trim_analysis_if_zero(final SubLObject plist) {
        if (ZERO_INTEGER.eql(getf(plist, $TOTAL, UNPROVIDED))) {
            return kbq_query_run.$list522;
        }
        return plist;
    }

    public static final SubLObject kbq_query_literal_count_alt(SubLObject query) {
        {
            SubLObject sentence = czer_utilities.unwrap_if_ist_permissive(kb_query.kbq_sentence(query), kb_query.kbq_mt(query));
            while (NIL != el_existential_p(sentence)) {
                if (NIL != el_existential_p(sentence)) {
                    sentence = cycl_utilities.formula_arg2(sentence, UNPROVIDED);
                }
            } 
            if (NIL == el_conjunction_p(sentence)) {
                return ONE_INTEGER;
            }
            return formula_arity(sentence, UNPROVIDED);
        }
    }

    public static SubLObject kbq_query_literal_count(final SubLObject query) {
        SubLObject sentence;
        for (sentence = unwrap_if_ist_permissive(kb_query.kbq_sentence(query), kb_query.kbq_mt(query)); NIL != el_existential_p(sentence); sentence = formula_arg2(sentence, UNPROVIDED)) {
            if (NIL != el_existential_p(sentence)) {
            }
        }
        if (NIL == el_conjunction_p(sentence)) {
            return ONE_INTEGER;
        }
        return formula_arity(sentence, UNPROVIDED);
    }

    public static final SubLObject kbq_single_literal_query_p_alt(SubLObject query) {
        {
            SubLObject sentence = czer_utilities.unwrap_if_ist_permissive(kb_query.kbq_sentence(query), kb_query.kbq_mt(query));
            while (NIL != el_existential_p(sentence)) {
                if (NIL != el_existential_p(sentence)) {
                    sentence = cycl_utilities.formula_arg2(sentence, UNPROVIDED);
                }
            } 
            return cycl_grammar.cycl_literal_p(sentence);
        }
    }

    public static SubLObject kbq_single_literal_query_p(final SubLObject query) {
        SubLObject sentence;
        for (sentence = unwrap_if_ist_permissive(kb_query.kbq_sentence(query), kb_query.kbq_mt(query)); NIL != el_existential_p(sentence); sentence = formula_arg2(sentence, UNPROVIDED)) {
            if (NIL != el_existential_p(sentence)) {
            }
        }
        return cycl_literal_p(sentence);
    }

    public static final SubLObject kbq_progress_stream_alt() {
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            return $kbq_progress_stream$.getDynamicValue(thread);
        }
    }

    public static SubLObject kbq_progress_stream() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return kbq_query_run.$kbq_progress_stream$.getDynamicValue(thread);
    }

    public static final SubLObject kbq_benchmark_run_and_report_alt(SubLObject filename, SubLObject title, SubLObject test_col) {
        com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_benchmark_run(filename, title, test_col, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_benchmark_report(filename, UNPROVIDED);
        return NIL;
    }

    public static SubLObject kbq_benchmark_run_and_report(final SubLObject filename, final SubLObject title, final SubLObject test_col) {
        kbq_query_run.kbq_benchmark_run(filename, title, test_col, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        kbq_query_run.kbq_benchmark_report(filename, UNPROVIDED);
        return NIL;
    }

    public static final SubLObject kbq_benchmark_run_in_background_alt(SubLObject filename, SubLObject title, SubLObject test_col) {
        subl_promotions.make_process_with_args(cconcatenate($str_alt468$Running_kbq_benchmark__kbq_benchm, new SubLObject[]{ format_nil.format_nil_s_no_copy(filename), $str_alt469$_ }), KBQ_BENCHMARK_RUN, list(filename, title, test_col));
        format_nil.force_format(T, $str_alt471$kbq_benchmark__kbq_benchmark_repo, filename, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return NIL;
    }

    public static SubLObject kbq_benchmark_run_in_background(final SubLObject filename, final SubLObject title, final SubLObject test_col) {
        make_process_with_args(cconcatenate(kbq_query_run.$str524$Running_kbq_benchmark__kbq_benchm, new SubLObject[]{ format_nil_s_no_copy(filename), kbq_query_run.$str525$_ }), kbq_query_run.KBQ_BENCHMARK_RUN, list(filename, title, test_col));
        force_format(T, kbq_query_run.$str527$kbq_benchmark__kbq_benchmark_repo, filename, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return NIL;
    }

    public static final SubLObject kbq_benchmark_run_alt(SubLObject filename, SubLObject title, SubLObject test_col, SubLObject overriding_query_properties, SubLObject skip, SubLObject count) {
        if (overriding_query_properties == UNPROVIDED) {
            overriding_query_properties = NIL;
        }
        if (skip == UNPROVIDED) {
            skip = ZERO_INTEGER;
        }
        if (count == UNPROVIDED) {
            count = NIL;
        }
        {
            final SubLThread thread = SubLProcess.currentSubLThread();
            SubLTrampolineFile.checkType(filename, STRINGP);
            SubLTrampolineFile.checkType(title, STRINGP);
            SubLTrampolineFile.checkType(test_col, FORT_P);
            if (NIL != overriding_query_properties) {
                SubLTrampolineFile.checkType(overriding_query_properties, LISTP);
            }
            {
                SubLObject comment = NIL;
                SubLObject stream = NIL;
                try {
                    stream = make_private_string_output_stream();
                    if (title.isString()) {
                        format(stream, $str_alt474$_______A______, title);
                    }
                    if (NIL != overriding_query_properties) {
                        format(stream, $str_alt475$____overriding_query_properties__, overriding_query_properties);
                    }
                    format(stream, $str_alt476$Tests_run_in_System__A_KB__A__, system_info.cyc_revision_string(), operation_communication.kb_version_string());
                    comment = get_output_stream_string(stream);
                } finally {
                    {
                        SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            close(stream, UNPROVIDED);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
                return com.cyc.cycjava.cycl.inference.kbq_query_run.run_kbq_experiment_internal(list(new SubLObject[]{ $QUERY_SPEC_SET, bq_cons($$TheSet, append(Mapping.mapcar(KCT_QUERY_SPECIFICATION, isa.all_instances_in_all_mts(test_col)), NIL)), $FILENAME, filename, $ANALYSIS_FILENAME, NIL, $KEEPALIVE_FILENAME, NIL, $COMMENT, comment, $OVERRIDING_QUERY_PROPERTIES, overriding_query_properties, $METRICS, $list_alt479, $OUTLIER_TIMEOUT, $kbq_benchmark_outlier_timeout$.getDynamicValue(thread), $INCREMENTAL, T, $INCLUDE_RESULTS, T, $RANDOMIZE, NIL, $SKIP, skip, $COUNT, count, $IF_FILE_EXISTS, $AUGMENT_OR_RERUN_ERRORS }));
            }
        }
    }

    public static SubLObject kbq_benchmark_run(final SubLObject filename, final SubLObject title, final SubLObject test_col, SubLObject overriding_query_properties, SubLObject skip, SubLObject count) {
        if (overriding_query_properties == UNPROVIDED) {
            overriding_query_properties = NIL;
        }
        if (skip == UNPROVIDED) {
            skip = ZERO_INTEGER;
        }
        if (count == UNPROVIDED) {
            count = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != stringp(filename) : "! stringp(filename) " + ("Types.stringp(filename) " + "CommonSymbols.NIL != Types.stringp(filename) ") + filename;
        assert NIL != stringp(title) : "! stringp(title) " + ("Types.stringp(title) " + "CommonSymbols.NIL != Types.stringp(title) ") + title;
        assert NIL != fort_p(test_col) : "! forts.fort_p(test_col) " + ("forts.fort_p(test_col) " + "CommonSymbols.NIL != forts.fort_p(test_col) ") + test_col;
        if (((NIL != overriding_query_properties) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == listp(overriding_query_properties))) {
            throw new AssertionError(overriding_query_properties);
        }
        SubLObject comment = NIL;
        SubLObject stream = NIL;
        try {
            stream = make_private_string_output_stream();
            if (title.isString()) {
                format(stream, kbq_query_run.$str530$_______A______, title);
            }
            if (NIL != overriding_query_properties) {
                format(stream, kbq_query_run.$str531$____overriding_query_properties__, overriding_query_properties);
            }
            format(stream, kbq_query_run.$str532$Tests_run_in_System__A_KB__A__, cyc_revision_string(), kb_version_string());
            comment = get_output_stream_string(stream);
        } finally {
            final SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                $is_thread_performing_cleanupP$.bind(T, thread);
                final SubLObject _values = getValuesAsVector();
                close(stream, UNPROVIDED);
                restoreValuesFromVector(_values);
            } finally {
                $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
            }
        }
        return kbq_query_run.run_kbq_experiment_internal(list(new SubLObject[]{ kbq_query_run.$QUERY_SPEC_SET, bq_cons(kbq_query_run.$$TheSet, append(Mapping.mapcar(kbq_query_run.KCT_QUERY_SPECIFICATION, all_instances_in_all_mts(test_col)), NIL)), $FILENAME, filename, $ANALYSIS_FILENAME, NIL, $KEEPALIVE_FILENAME, NIL, $COMMENT, comment, kbq_query_run.$OVERRIDING_QUERY_PROPERTIES, overriding_query_properties, $METRICS, kbq_query_run.$list535, $OUTLIER_TIMEOUT, kbq_query_run.$kbq_benchmark_outlier_timeout$.getDynamicValue(thread), $INCREMENTAL, T, $INCLUDE_RESULTS, T, $RANDOMIZE, NIL, $SKIP, skip, $COUNT, count, kbq_query_run.$IF_FILE_EXISTS, kbq_query_run.$AUGMENT_OR_RERUN_ERRORS }));
    }

    public static final SubLObject kbq_benchmark_report_alt(SubLObject filename, SubLObject stream) {
        if (stream == UNPROVIDED) {
            stream = StreamsLow.$standard_output$.getDynamicValue();
        }
        {
            SubLObject query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_load_query_set_run(filename);
            SubLObject comment = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_comment(query_set_run);
            SubLObject total_num = ZERO_INTEGER;
            SubLObject total_ttfa = ZERO_INTEGER;
            SubLObject total_ttfs = ZERO_INTEGER;
            SubLObject total_sksi_call_count = ZERO_INTEGER;
            SubLObject total_sksi = ZERO_INTEGER;
            SubLObject total_total_time = ZERO_INTEGER;
            format(stream, comment);
            format(stream, $str_alt480$__ANS__TTFS____TTFA__SQ____SKSI__);
            format(stream, $str_alt481$_________________________________);
            {
                SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
                SubLObject kbq_run = NIL;
                for (kbq_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , kbq_run = cdolist_list_var.first()) {
                    {
                        SubLObject query = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(kbq_run);
                        SubLObject halt_reason = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_halt_reason(kbq_run);
                        SubLObject test = (NIL != nart_handles.valid_nartP(query, UNPROVIDED)) ? ((SubLObject) (cycl_utilities.nat_arg1(query, UNPROVIDED))) : NIL;
                        SubLObject num = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, $ANSWER_COUNT, ZERO_INTEGER);
                        SubLObject sksi_start_times = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, $SKSI_QUERY_START_TIMES, ZERO_INTEGER);
                        SubLObject sksi_call_count = (sksi_start_times.isCons()) ? ((SubLObject) (length(sksi_start_times))) : NIL;
                        SubLObject ttfs = (sksi_start_times.isCons()) ? ((SubLObject) (sksi_start_times.first())) : NIL;
                        SubLObject ttfa = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, $TIME_TO_FIRST_ANSWER, ZERO_INTEGER);
                        SubLObject sksi_query_total_time = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, $SKSI_QUERY_TOTAL_TIME, ZERO_INTEGER);
                        SubLObject total_time = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, $TOTAL_TIME, ZERO_INTEGER);
                        if (NIL != number_utilities.positive_number_p(num)) {
                            total_num = add(total_num, num);
                        }
                        if (NIL != number_utilities.positive_number_p(ttfa)) {
                            total_ttfa = add(total_ttfa, ttfa);
                        }
                        if (NIL != number_utilities.positive_number_p(ttfs)) {
                            total_ttfs = add(total_ttfs, ttfs);
                        }
                        if (NIL != number_utilities.positive_number_p(sksi_call_count)) {
                            total_sksi_call_count = add(total_sksi_call_count, sksi_call_count);
                        }
                        if (NIL != number_utilities.positive_number_p(sksi_query_total_time)) {
                            total_sksi = add(total_sksi, sksi_query_total_time);
                        }
                        if (NIL != number_utilities.positive_number_p(total_time)) {
                            total_total_time = add(total_total_time, total_time);
                        }
                        format(stream, $str_alt484$_5D__5_1F__7_1F_4D__7_1F__7_1F__7, new SubLObject[]{ num, ttfs, ttfa, sksi_call_count, sksi_query_total_time, NIL != number_utilities.positive_number_p(sksi_query_total_time) ? ((SubLObject) (subtract(total_time, sksi_query_total_time))) : total_time, total_time, NIL != number_utilities.positive_number_p(sksi_query_total_time) ? ((SubLObject) (number_utilities.percent(sksi_query_total_time, total_time, THREE_INTEGER))) : ZERO_INTEGER, test, halt_reason == $EXHAUST_TOTAL ? ((SubLObject) ($str_alt144$)) : format(NIL, $str_alt486$___A_, halt_reason) });
                    }
                }
            }
            format(stream, $str_alt481$_________________________________);
            format(stream, $str_alt487$_5D__5_1F__7_1F_4D__7_1F__7_1F__7, new SubLObject[]{ total_num, total_ttfs, total_ttfa, total_sksi_call_count, total_sksi, NIL != number_utilities.positive_number_p(total_sksi) ? ((SubLObject) (subtract(total_total_time, total_sksi))) : total_total_time, total_total_time, NIL != number_utilities.positive_number_p(total_sksi) ? ((SubLObject) (number_utilities.percent(total_sksi, total_total_time, THREE_INTEGER))) : ZERO_INTEGER });
        }
        return NIL;
    }

    public static SubLObject kbq_benchmark_report(final SubLObject filename, SubLObject stream) {
        if (stream == UNPROVIDED) {
            stream = StreamsLow.$standard_output$.getDynamicValue();
        }
        final SubLObject query_set_run = kbq_query_run.kbq_load_query_set_run(filename);
        final SubLObject comment = kbq_query_run.kbq_query_set_run_comment(query_set_run);
        SubLObject total_num = ZERO_INTEGER;
        SubLObject total_ttfa = ZERO_INTEGER;
        SubLObject total_ttfs = ZERO_INTEGER;
        SubLObject total_sksi_call_count = ZERO_INTEGER;
        SubLObject total_sksi = ZERO_INTEGER;
        SubLObject total_total_time = ZERO_INTEGER;
        format(stream, comment);
        format(stream, kbq_query_run.$str536$__ANS__TTFS____TTFA__SQ____SKSI__);
        format(stream, kbq_query_run.$str537$_________________________________);
        SubLObject cdolist_list_var = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
        SubLObject kbq_run = NIL;
        kbq_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject query = kbq_query_run.kbq_query_run_query(kbq_run);
            final SubLObject halt_reason = kbq_query_run.kbq_query_run_halt_reason(kbq_run);
            final SubLObject test = (NIL != valid_nartP(query, UNPROVIDED)) ? nat_arg1(query, UNPROVIDED) : NIL;
            final SubLObject num = kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, $ANSWER_COUNT, ZERO_INTEGER);
            final SubLObject sksi_start_times = kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, kbq_query_run.$SKSI_QUERY_START_TIMES, ZERO_INTEGER);
            final SubLObject sksi_call_count = (sksi_start_times.isCons()) ? length(sksi_start_times) : NIL;
            final SubLObject ttfs = (sksi_start_times.isCons()) ? sksi_start_times.first() : NIL;
            final SubLObject ttfa = kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, kbq_query_run.$TIME_TO_FIRST_ANSWER, ZERO_INTEGER);
            final SubLObject sksi_query_total_time = kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, kbq_query_run.$SKSI_QUERY_TOTAL_TIME, ZERO_INTEGER);
            final SubLObject total_time = kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, $TOTAL_TIME, ZERO_INTEGER);
            if (NIL != positive_number_p(num)) {
                total_num = add(total_num, num);
            }
            if (NIL != positive_number_p(ttfa)) {
                total_ttfa = add(total_ttfa, ttfa);
            }
            if (NIL != positive_number_p(ttfs)) {
                total_ttfs = add(total_ttfs, ttfs);
            }
            if (NIL != positive_number_p(sksi_call_count)) {
                total_sksi_call_count = add(total_sksi_call_count, sksi_call_count);
            }
            if (NIL != positive_number_p(sksi_query_total_time)) {
                total_sksi = add(total_sksi, sksi_query_total_time);
            }
            if (NIL != positive_number_p(total_time)) {
                total_total_time = add(total_total_time, total_time);
            }
            format(stream, kbq_query_run.$str540$_5D__5_1F__7_1F_4D__7_1F__7_1F__7, new SubLObject[]{ num, ttfs, ttfa, sksi_call_count, sksi_query_total_time, NIL != positive_number_p(sksi_query_total_time) ? subtract(total_time, sksi_query_total_time) : total_time, total_time, NIL != positive_number_p(sksi_query_total_time) ? percent(sksi_query_total_time, total_time, THREE_INTEGER) : ZERO_INTEGER, test, halt_reason == $EXHAUST_TOTAL ? kbq_query_run.$str161$ : format(NIL, kbq_query_run.$str542$___A_, halt_reason) });
            cdolist_list_var = cdolist_list_var.rest();
            kbq_run = cdolist_list_var.first();
        } 
        format(stream, kbq_query_run.$str537$_________________________________);
        format(stream, kbq_query_run.$str543$_5D__5_1F__7_1F_4D__7_1F__7_1F__7, new SubLObject[]{ total_num, total_ttfs, total_ttfa, total_sksi_call_count, total_sksi, NIL != positive_number_p(total_sksi) ? subtract(total_total_time, total_sksi) : total_total_time, total_total_time, NIL != positive_number_p(total_sksi) ? percent(total_sksi, total_total_time, THREE_INTEGER) : ZERO_INTEGER });
        return NIL;
    }

    public static final SubLObject kbq_benchmark_report_for_test_alt(SubLObject filename, SubLObject test_fort, SubLObject stream) {
        if (stream == UNPROVIDED) {
            stream = StreamsLow.$standard_output$.getDynamicValue();
        }
        {
            SubLObject query_set_run = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_load_query_set_run(filename);
            SubLObject comment = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_comment(query_set_run);
            SubLObject short_filename = list_utilities.last_one(string_utilities.string_tokenize(string_utilities.post_remove(filename, $str_alt355$_cfasl, UNPROVIDED), $list_alt488, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
            SubLObject one_line_comment = string_utilities.string_first_n($int$60, Strings.string_trim(cons(CHAR_asterisk, string_utilities.whitespace_chars()), string_utilities.string_tokenize(comment, list(string_utilities.$new_line_string$.getGlobalValue()), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED).first()));
            SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
            SubLObject kbq_run = NIL;
            for (kbq_run = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest() , kbq_run = cdolist_list_var.first()) {
                {
                    SubLObject query = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_query_run_query(kbq_run);
                    SubLObject test = (NIL != nart_handles.valid_nartP(query, UNPROVIDED)) ? ((SubLObject) (cycl_utilities.nat_arg1(query, UNPROVIDED))) : NIL;
                    SubLObject num = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, $ANSWER_COUNT, ZERO_INTEGER);
                    SubLObject sksi_start_times = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, $SKSI_QUERY_START_TIMES, ZERO_INTEGER);
                    SubLObject sksi_call_count = (sksi_start_times.isCons()) ? ((SubLObject) (length(sksi_start_times))) : NIL;
                    SubLObject ttfs = (sksi_start_times.isCons()) ? ((SubLObject) (sksi_start_times.first())) : NIL;
                    SubLObject ttfa = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, $TIME_TO_FIRST_ANSWER, ZERO_INTEGER);
                    SubLObject sksi_query_total_time = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, $SKSI_QUERY_TOTAL_TIME, ZERO_INTEGER);
                    SubLObject total_time = com.cyc.cycjava.cycl.inference.kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, $TOTAL_TIME, ZERO_INTEGER);
                    if (test_fort.equal(test)) {
                        format(stream, $str_alt490$_15A___5D__5_1F__7_1F_4D__7_1F__7, new SubLObject[]{ short_filename, num, ttfs, ttfa, sksi_call_count, sksi_query_total_time, NIL != number_utilities.positive_number_p(sksi_query_total_time) ? ((SubLObject) (subtract(total_time, sksi_query_total_time))) : total_time, total_time, NIL != number_utilities.positive_number_p(sksi_query_total_time) ? ((SubLObject) (number_utilities.percent(sksi_query_total_time, total_time, THREE_INTEGER))) : ZERO_INTEGER, one_line_comment });
                        force_output(T);
                    }
                }
            }
        }
        return NIL;
    }

    public static SubLObject kbq_benchmark_report_for_test(final SubLObject filename, final SubLObject test_fort, SubLObject stream) {
        if (stream == UNPROVIDED) {
            stream = StreamsLow.$standard_output$.getDynamicValue();
        }
        final SubLObject query_set_run = kbq_query_run.kbq_load_query_set_run(filename);
        final SubLObject comment = kbq_query_run.kbq_query_set_run_comment(query_set_run);
        final SubLObject short_filename = last_one(string_tokenize(post_remove(filename, kbq_query_run.$str406$_cfasl, UNPROVIDED), kbq_query_run.$list544, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
        final SubLObject one_line_comment = string_first_n(kbq_query_run.$int$60, Strings.string_trim(cons(CHAR_asterisk, whitespace_chars()), string_tokenize(comment, list($new_line_string$.getGlobalValue()), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED).first()));
        SubLObject cdolist_list_var = kbq_query_run.kbq_query_set_run_query_runs(query_set_run);
        SubLObject kbq_run = NIL;
        kbq_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject query = kbq_query_run.kbq_query_run_query(kbq_run);
            final SubLObject test = (NIL != valid_nartP(query, UNPROVIDED)) ? nat_arg1(query, UNPROVIDED) : NIL;
            final SubLObject num = kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, $ANSWER_COUNT, ZERO_INTEGER);
            final SubLObject sksi_start_times = kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, kbq_query_run.$SKSI_QUERY_START_TIMES, ZERO_INTEGER);
            final SubLObject sksi_call_count = (sksi_start_times.isCons()) ? length(sksi_start_times) : NIL;
            final SubLObject ttfs = (sksi_start_times.isCons()) ? sksi_start_times.first() : NIL;
            final SubLObject ttfa = kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, kbq_query_run.$TIME_TO_FIRST_ANSWER, ZERO_INTEGER);
            final SubLObject sksi_query_total_time = kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, kbq_query_run.$SKSI_QUERY_TOTAL_TIME, ZERO_INTEGER);
            final SubLObject total_time = kbq_query_run.kbq_extract_query_run_metric_value(kbq_run, $TOTAL_TIME, ZERO_INTEGER);
            if (test_fort.equal(test)) {
                format(stream, kbq_query_run.$str546$_15A___5D__5_1F__7_1F_4D__7_1F__7, new SubLObject[]{ short_filename, num, ttfs, ttfa, sksi_call_count, sksi_query_total_time, NIL != positive_number_p(sksi_query_total_time) ? subtract(total_time, sksi_query_total_time) : total_time, total_time, NIL != positive_number_p(sksi_query_total_time) ? percent(sksi_query_total_time, total_time, THREE_INTEGER) : ZERO_INTEGER, one_line_comment });
                force_output(T);
            }
            cdolist_list_var = cdolist_list_var.rest();
            kbq_run = cdolist_list_var.first();
        } 
        return NIL;
    }

    public static SubLObject kct_run_support_set(final SubLObject kct_filename) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject kct_result = kbq_query_run.kct_load_test_set_run(kct_filename);
        final SubLObject result_set = new_set(symbol_function(EQL), UNPROVIDED);
        final SubLObject list_var;
        final SubLObject test_runs = list_var = getf(kct_result, $TEST_RUNS, UNPROVIDED);
        final SubLObject _prev_bind_0 = $progress_note$.currentBinding(thread);
        final SubLObject _prev_bind_2 = $progress_start_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = $progress_total$.currentBinding(thread);
        final SubLObject _prev_bind_4 = $progress_sofar$.currentBinding(thread);
        final SubLObject _prev_bind_5 = $last_percent_progress_index$.currentBinding(thread);
        final SubLObject _prev_bind_6 = $last_percent_progress_prediction$.currentBinding(thread);
        final SubLObject _prev_bind_7 = $within_noting_percent_progress$.currentBinding(thread);
        final SubLObject _prev_bind_8 = $percent_progress_start_time$.currentBinding(thread);
        try {
            $progress_note$.bind(NIL != format(NIL, kbq_query_run.$str547$Running__A_queries_using__proof_s, length(test_runs)) ? format(NIL, kbq_query_run.$str547$Running__A_queries_using__proof_s, length(test_runs)) : kbq_query_run.$$$cdolist, thread);
            $progress_start_time$.bind(get_universal_time(), thread);
            $progress_total$.bind(length(list_var), thread);
            $progress_sofar$.bind(ZERO_INTEGER, thread);
            $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
            $last_percent_progress_prediction$.bind(NIL, thread);
            $within_noting_percent_progress$.bind(T, thread);
            $percent_progress_start_time$.bind(get_universal_time(), thread);
            try {
                noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
                SubLObject csome_list_var = list_var;
                SubLObject test_run = NIL;
                test_run = csome_list_var.first();
                while (NIL != csome_list_var) {
                    final SubLObject query_run = getf(test_run, $QUERY_RUN, UNPROVIDED);
                    final SubLObject query = getf(query_run, $QUERY, UNPROVIDED);
                    final SubLObject proof_spec = getf(query_run, kbq_query_run.$INFERENCE_PROOF_SPEC, UNPROVIDED);
                    SubLObject overriding_query_properties = NIL;
                    final SubLObject _prev_bind_0_$86 = $kbq_run_query_non_continuable_enabledP$.currentBinding(thread);
                    try {
                        $kbq_run_query_non_continuable_enabledP$.bind(NIL, thread);
                        if (NIL != proof_spec) {
                            overriding_query_properties = putf(overriding_query_properties, $PROOF_SPEC, proof_spec);
                        }
                        overriding_query_properties = putf(overriding_query_properties, kbq_query_run.$kw549$COMPUTE_ANSWER_JUSTIFICATIONS_, T);
                        overriding_query_properties = putf(overriding_query_properties, $CONTINUABLE_, T);
                        thread.resetMultipleValues();
                        final SubLObject inference = kbq_query_run.kbq_run_query_and_maybe_destroy(query, NIL, kbq_query_run.$kbq_outlier_timeout$.getDynamicValue(thread), overriding_query_properties, UNPROVIDED);
                        final SubLObject never_runP = thread.secondMultipleValue();
                        final SubLObject timed_outP = thread.thirdMultipleValue();
                        final SubLObject result = thread.fourthMultipleValue();
                        final SubLObject halt_reason = thread.fifthMultipleValue();
                        final SubLObject metric_values = thread.sixthMultipleValue();
                        thread.resetMultipleValues();
                        if (NIL != inference) {
                            SubLObject cdolist_list_var = inference_utilities.inference_expanded_justification(inference);
                            SubLObject support = NIL;
                            support = cdolist_list_var.first();
                            while (NIL != cdolist_list_var) {
                                set_add(support, result_set);
                                cdolist_list_var = cdolist_list_var.rest();
                                support = cdolist_list_var.first();
                            } 
                        }
                        destroy_inference_and_problem_store(inference);
                    } finally {
                        $kbq_run_query_non_continuable_enabledP$.rebind(_prev_bind_0_$86, thread);
                    }
                    $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
                    note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
                    csome_list_var = csome_list_var.rest();
                    test_run = csome_list_var.first();
                } 
            } finally {
                final SubLObject _prev_bind_0_$87 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values = getValuesAsVector();
                    noting_percent_progress_postamble();
                    restoreValuesFromVector(_values);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$87, thread);
                }
            }
        } finally {
            $percent_progress_start_time$.rebind(_prev_bind_8, thread);
            $within_noting_percent_progress$.rebind(_prev_bind_7, thread);
            $last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
            $last_percent_progress_index$.rebind(_prev_bind_5, thread);
            $progress_sofar$.rebind(_prev_bind_4, thread);
            $progress_total$.rebind(_prev_bind_3, thread);
            $progress_start_time$.rebind(_prev_bind_2, thread);
            $progress_note$.rebind(_prev_bind_0, thread);
        }
        return result_set;
    }

    public static SubLObject kct_run_supports_report(final SubLObject kct_filename, SubLObject stream) {
        if (stream == UNPROVIDED) {
            stream = StreamsLow.$standard_output$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject kct_result = kbq_query_run.kct_load_test_set_run(kct_filename);
        final SubLObject list_var;
        final SubLObject test_runs = list_var = getf(kct_result, $TEST_RUNS, UNPROVIDED);
        final SubLObject _prev_bind_0 = $progress_note$.currentBinding(thread);
        final SubLObject _prev_bind_2 = $progress_start_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = $progress_total$.currentBinding(thread);
        final SubLObject _prev_bind_4 = $progress_sofar$.currentBinding(thread);
        final SubLObject _prev_bind_5 = $last_percent_progress_index$.currentBinding(thread);
        final SubLObject _prev_bind_6 = $last_percent_progress_prediction$.currentBinding(thread);
        final SubLObject _prev_bind_7 = $within_noting_percent_progress$.currentBinding(thread);
        final SubLObject _prev_bind_8 = $percent_progress_start_time$.currentBinding(thread);
        try {
            $progress_note$.bind(NIL != format(NIL, kbq_query_run.$str547$Running__A_queries_using__proof_s, length(test_runs)) ? format(NIL, kbq_query_run.$str547$Running__A_queries_using__proof_s, length(test_runs)) : kbq_query_run.$$$cdolist, thread);
            $progress_start_time$.bind(get_universal_time(), thread);
            $progress_total$.bind(length(list_var), thread);
            $progress_sofar$.bind(ZERO_INTEGER, thread);
            $last_percent_progress_index$.bind(ZERO_INTEGER, thread);
            $last_percent_progress_prediction$.bind(NIL, thread);
            $within_noting_percent_progress$.bind(T, thread);
            $percent_progress_start_time$.bind(get_universal_time(), thread);
            try {
                noting_percent_progress_preamble($progress_note$.getDynamicValue(thread));
                SubLObject csome_list_var = list_var;
                SubLObject test_run = NIL;
                test_run = csome_list_var.first();
                while (NIL != csome_list_var) {
                    final SubLObject test = getf(test_run, $TEST, UNPROVIDED);
                    final SubLObject query_run = getf(test_run, $QUERY_RUN, UNPROVIDED);
                    final SubLObject query = getf(query_run, $QUERY, UNPROVIDED);
                    final SubLObject proof_spec = getf(query_run, kbq_query_run.$INFERENCE_PROOF_SPEC, UNPROVIDED);
                    SubLObject overriding_query_properties = NIL;
                    final SubLObject _prev_bind_0_$88 = $kbq_run_query_non_continuable_enabledP$.currentBinding(thread);
                    try {
                        $kbq_run_query_non_continuable_enabledP$.bind(NIL, thread);
                        if (NIL != proof_spec) {
                            overriding_query_properties = putf(overriding_query_properties, $PROOF_SPEC, proof_spec);
                        }
                        overriding_query_properties = putf(overriding_query_properties, kbq_query_run.$kw549$COMPUTE_ANSWER_JUSTIFICATIONS_, T);
                        overriding_query_properties = putf(overriding_query_properties, $CONTINUABLE_, T);
                        thread.resetMultipleValues();
                        final SubLObject inference = kbq_query_run.kbq_run_query_and_maybe_destroy(query, NIL, kbq_query_run.$kbq_outlier_timeout$.getDynamicValue(thread), overriding_query_properties, UNPROVIDED);
                        final SubLObject never_runP = thread.secondMultipleValue();
                        final SubLObject timed_outP = thread.thirdMultipleValue();
                        final SubLObject result = thread.fourthMultipleValue();
                        final SubLObject halt_reason = thread.fifthMultipleValue();
                        final SubLObject metric_values = thread.sixthMultipleValue();
                        thread.resetMultipleValues();
                        if (NIL == inference) {
                        }
                        if ((NIL != inference) && (!inference_answer_count(inference).isZero())) {
                            format(stream, kbq_query_run.$str550$______Test___A, pretty_print_cycl_to_string(test, UNPROVIDED));
                            format(stream, kbq_query_run.$str551$__Query___A, pretty_print_cycl_to_string(kb_query.kbq_sentence(query), UNPROVIDED));
                            final SubLObject answer_count = inference_answer_count(inference);
                            SubLObject answer_number = ONE_INTEGER;
                            final SubLObject idx = inference_answer_id_index(inference);
                            if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
                                final SubLObject idx_$89 = idx;
                                if (NIL == id_index_dense_objects_empty_p(idx_$89, $SKIP)) {
                                    final SubLObject vector_var = id_index_dense_objects(idx_$89);
                                    final SubLObject backwardP_var = NIL;
                                    SubLObject length;
                                    SubLObject v_iteration;
                                    SubLObject id;
                                    SubLObject v_answer;
                                    SubLObject answer_values;
                                    SubLObject v_answer_$90;
                                    SubLObject supports;
                                    SubLObject support_mts;
                                    SubLObject cdolist_list_var;
                                    SubLObject support_mt;
                                    SubLObject cdolist_list_var_$91;
                                    SubLObject support;
                                    for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
                                        id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
                                        v_answer = aref(vector_var, id);
                                        if ((NIL == id_index_tombstone_p(v_answer)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
                                            if (NIL != id_index_tombstone_p(v_answer)) {
                                                v_answer = $SKIP;
                                            }
                                            answer_values = bindings_values(inference_answer_bindings(v_answer));
                                            v_answer_$90 = (NIL != singletonP(answer_values)) ? answer_values.first() : NIL != answer_values ? answer_values : kbq_query_run.$$True;
                                            format(stream, kbq_query_run.$str553$____Answer___A__A____A, new SubLObject[]{ answer_number, answer_count, pretty_print_cycl_to_string(v_answer_$90, UNPROVIDED) });
                                            format(stream, kbq_query_run.$str554$__Justification__);
                                            supports = inference_utilities.inference_answer_expanded_justification(v_answer);
                                            supports = remove_if(kbq_query_run.UNKNOWN_SENTENCE_SUPPORT_P, supports, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            support_mts = Sort.sort(fast_remove_duplicates(Mapping.mapcar(SUPPORT_MT, supports), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), kbq_query_run.$sym557$GENERALITY_ESTIMATE_, UNPROVIDED);
                                            support_mts = cdolist_list_var = remove(kbq_query_run.$$UniversalVocabularyMt, support_mts, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            support_mt = NIL;
                                            support_mt = cdolist_list_var.first();
                                            while (NIL != cdolist_list_var) {
                                                format(stream, kbq_query_run.$str559$___Mt___A, pretty_print_cycl_to_string(support_mt, UNPROVIDED));
                                                cdolist_list_var_$91 = supports;
                                                support = NIL;
                                                support = cdolist_list_var_$91.first();
                                                while (NIL != cdolist_list_var_$91) {
                                                    if ((NIL != kbeq(support_mt, arguments.support_mt(support))) || ((NIL != kbeq(arguments.support_mt(support), kbq_query_run.$$UniversalVocabularyMt)) && (NIL != kbeq(support_mt, kbq_query_run.$$BaseKB)))) {
                                                        format(stream, kbq_query_run.$str195$_A, pretty_print_cycl_to_string(arguments.support_el_sentence(support), ONE_INTEGER));
                                                    }
                                                    cdolist_list_var_$91 = cdolist_list_var_$91.rest();
                                                    support = cdolist_list_var_$91.first();
                                                } 
                                                cdolist_list_var = cdolist_list_var.rest();
                                                support_mt = cdolist_list_var.first();
                                            } 
                                            answer_number = add(answer_number, ONE_INTEGER);
                                        }
                                    }
                                }
                                final SubLObject idx_$90 = idx;
                                if (NIL == id_index_sparse_objects_empty_p(idx_$90)) {
                                    final SubLObject cdohash_table = id_index_sparse_objects(idx_$90);
                                    SubLObject id2 = NIL;
                                    SubLObject v_answer2 = NIL;
                                    final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
                                    try {
                                        while (iteratorHasNext(cdohash_iterator)) {
                                            final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
                                            id2 = getEntryKey(cdohash_entry);
                                            v_answer2 = getEntryValue(cdohash_entry);
                                            final SubLObject answer_values2 = bindings_values(inference_answer_bindings(v_answer2));
                                            final SubLObject v_answer_$91 = (NIL != singletonP(answer_values2)) ? answer_values2.first() : NIL != answer_values2 ? answer_values2 : kbq_query_run.$$True;
                                            format(stream, kbq_query_run.$str553$____Answer___A__A____A, new SubLObject[]{ answer_number, answer_count, pretty_print_cycl_to_string(v_answer_$91, UNPROVIDED) });
                                            format(stream, kbq_query_run.$str554$__Justification__);
                                            SubLObject supports2 = inference_utilities.inference_answer_expanded_justification(v_answer2);
                                            supports2 = remove_if(kbq_query_run.UNKNOWN_SENTENCE_SUPPORT_P, supports2, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            SubLObject support_mts2 = Sort.sort(fast_remove_duplicates(Mapping.mapcar(SUPPORT_MT, supports2), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), kbq_query_run.$sym557$GENERALITY_ESTIMATE_, UNPROVIDED);
                                            SubLObject cdolist_list_var2;
                                            support_mts2 = cdolist_list_var2 = remove(kbq_query_run.$$UniversalVocabularyMt, support_mts2, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            SubLObject support_mt2 = NIL;
                                            support_mt2 = cdolist_list_var2.first();
                                            while (NIL != cdolist_list_var2) {
                                                format(stream, kbq_query_run.$str559$___Mt___A, pretty_print_cycl_to_string(support_mt2, UNPROVIDED));
                                                SubLObject cdolist_list_var_$92 = supports2;
                                                SubLObject support2 = NIL;
                                                support2 = cdolist_list_var_$92.first();
                                                while (NIL != cdolist_list_var_$92) {
                                                    if ((NIL != kbeq(support_mt2, arguments.support_mt(support2))) || ((NIL != kbeq(arguments.support_mt(support2), kbq_query_run.$$UniversalVocabularyMt)) && (NIL != kbeq(support_mt2, kbq_query_run.$$BaseKB)))) {
                                                        format(stream, kbq_query_run.$str195$_A, pretty_print_cycl_to_string(arguments.support_el_sentence(support2), ONE_INTEGER));
                                                    }
                                                    cdolist_list_var_$92 = cdolist_list_var_$92.rest();
                                                    support2 = cdolist_list_var_$92.first();
                                                } 
                                                cdolist_list_var2 = cdolist_list_var2.rest();
                                                support_mt2 = cdolist_list_var2.first();
                                            } 
                                            answer_number = add(answer_number, ONE_INTEGER);
                                        } 
                                    } finally {
                                        releaseEntrySetIterator(cdohash_iterator);
                                    }
                                }
                            }
                            destroy_inference_and_problem_store(inference);
                        }
                    } finally {
                        $kbq_run_query_non_continuable_enabledP$.rebind(_prev_bind_0_$88, thread);
                    }
                    $progress_sofar$.setDynamicValue(add($progress_sofar$.getDynamicValue(thread), ONE_INTEGER), thread);
                    note_percent_progress($progress_sofar$.getDynamicValue(thread), $progress_total$.getDynamicValue(thread));
                    csome_list_var = csome_list_var.rest();
                    test_run = csome_list_var.first();
                } 
            } finally {
                final SubLObject _prev_bind_0_$89 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values = getValuesAsVector();
                    noting_percent_progress_postamble();
                    restoreValuesFromVector(_values);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$89, thread);
                }
            }
        } finally {
            $percent_progress_start_time$.rebind(_prev_bind_8, thread);
            $within_noting_percent_progress$.rebind(_prev_bind_7, thread);
            $last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
            $last_percent_progress_index$.rebind(_prev_bind_5, thread);
            $progress_sofar$.rebind(_prev_bind_4, thread);
            $progress_total$.rebind(_prev_bind_3, thread);
            $progress_start_time$.rebind(_prev_bind_2, thread);
            $progress_note$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    public static SubLObject unknown_sentence_support_p(final SubLObject support) {
        return makeBoolean((NIL != arguments.hl_support_p(support)) && (NIL != el_formula_with_operator_p(arguments.support_el_sentence(support), kbq_query_run.$$unknownSentence)));
    }

    public static SubLObject kcts_using_only_these_sksi_sources(final SubLObject v_sources) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject kcts = NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind(kbq_query_run.$$EverythingPSC, thread);
            final SubLObject node_var = kbq_query_run.$$SKSIContentTest;
            final SubLObject _prev_bind_0_$96 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
            final SubLObject _prev_bind_1_$97 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
            try {
                sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module(kbq_query_run.$$isa), thread);
                sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                try {
                    SubLObject node_var_$98 = node_var;
                    final SubLObject deck_type = $STACK;
                    final SubLObject recur_deck = deck.create_deck(deck_type);
                    final SubLObject _prev_bind_0_$97 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        try {
                            final SubLObject tv_var = NIL;
                            final SubLObject _prev_bind_0_$98 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$98 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_tv$.bind(NIL != tv_var ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind(NIL != tv_var ? RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread), thread);
                                if (((NIL != tv_var) && (NIL != sbhl_paranoia.sbhl_object_type_checking_p())) && (NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var))) {
                                    final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                    if (pcase_var.eql($ERROR)) {
                                        sbhl_paranoia.sbhl_error(ONE_INTEGER, kbq_query_run.$str568$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    } else
                                        if (pcase_var.eql($CERROR)) {
                                            sbhl_paranoia.sbhl_cerror(ONE_INTEGER, kbq_query_run.$$$continue_anyway, kbq_query_run.$str568$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        } else
                                            if (pcase_var.eql($WARN)) {
                                                Errors.warn(kbq_query_run.$str568$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                            } else {
                                                Errors.warn(kbq_query_run.$str573$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror(kbq_query_run.$$$continue_anyway, kbq_query_run.$str568$_A_is_not_a__A, tv_var, SBHL_TRUE_TV_P);
                                            }


                                }
                                final SubLObject _prev_bind_0_$99 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$99 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(kbq_query_run.$$isa)), thread);
                                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(kbq_query_run.$$isa))), thread);
                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(kbq_query_run.$$isa))), thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(kbq_query_run.$$isa)), thread);
                                    if ((NIL != sbhl_paranoia.suspend_sbhl_type_checkingP()) || (NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module(UNPROVIDED)))) {
                                        final SubLObject _prev_bind_0_$100 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$100 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$106 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(kbq_query_run.$$isa))), thread);
                                            sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL, thread);
                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_var_$98, UNPROVIDED);
                                            while (NIL != node_var_$98) {
                                                final SubLObject tt_node_var = node_var_$98;
                                                SubLObject cdolist_list_var;
                                                final SubLObject accessible_modules = cdolist_list_var = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module(kbq_query_run.$$isa));
                                                SubLObject module_var = NIL;
                                                module_var = cdolist_list_var.first();
                                                while (NIL != cdolist_list_var) {
                                                    final SubLObject _prev_bind_0_$101 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$101 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    try {
                                                        sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                        final SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                            final SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                            if (NIL != d_link) {
                                                                final SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(kbq_query_run.$$isa)), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != mt_links) {
                                                                    SubLObject iteration_state;
                                                                    for (iteration_state = do_dictionary_contents_state(dictionary_contents(mt_links)); NIL == do_dictionary_contents_doneP(iteration_state); iteration_state = do_dictionary_contents_next(iteration_state)) {
                                                                        thread.resetMultipleValues();
                                                                        final SubLObject mt = do_dictionary_contents_key_value(iteration_state);
                                                                        final SubLObject tv_links = thread.secondMultipleValue();
                                                                        thread.resetMultipleValues();
                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt)) {
                                                                            final SubLObject _prev_bind_0_$102 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
                                                                                SubLObject iteration_state_$110;
                                                                                for (iteration_state_$110 = do_dictionary_contents_state(dictionary_contents(tv_links)); NIL == do_dictionary_contents_doneP(iteration_state_$110); iteration_state_$110 = do_dictionary_contents_next(iteration_state_$110)) {
                                                                                    thread.resetMultipleValues();
                                                                                    final SubLObject tv = do_dictionary_contents_key_value(iteration_state_$110);
                                                                                    final SubLObject link_nodes = thread.secondMultipleValue();
                                                                                    thread.resetMultipleValues();
                                                                                    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
                                                                                        final SubLObject _prev_bind_0_$103 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
                                                                                            final SubLObject sol = link_nodes;
                                                                                            if (NIL != set_p(sol)) {
                                                                                                final SubLObject set_contents_var = do_set_internal(sol);
                                                                                                SubLObject basis_object;
                                                                                                SubLObject state;
                                                                                                SubLObject kct;
                                                                                                SubLObject query;
                                                                                                SubLObject required_sources;
                                                                                                for (basis_object = do_set_contents_basis_object(set_contents_var), state = NIL, state = do_set_contents_initial_state(basis_object, set_contents_var); NIL == do_set_contents_doneP(basis_object, state); state = do_set_contents_update_state(state)) {
                                                                                                    kct = do_set_contents_next(basis_object, state);
                                                                                                    if ((NIL != do_set_contents_element_validP(state, kct)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(kct, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(kct, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        query = kct_utils.kct_query_specification(kct, UNPROVIDED);
                                                                                                        required_sources = (NIL != query) ? kb_mapping_utilities.pred_values(query, kbq_query_run.$$sksiModulesNeeded, UNPROVIDED, UNPROVIDED, UNPROVIDED) : NIL;
                                                                                                        if (NIL != subsetp(required_sources, v_sources, UNPROVIDED, UNPROVIDED)) {
                                                                                                            kcts = cons(kct, kcts);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } else
                                                                                                if (sol.isList()) {
                                                                                                    SubLObject csome_list_var = sol;
                                                                                                    SubLObject kct2 = NIL;
                                                                                                    kct2 = csome_list_var.first();
                                                                                                    while (NIL != csome_list_var) {
                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(kct2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(kct2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                            final SubLObject query2 = kct_utils.kct_query_specification(kct2, UNPROVIDED);
                                                                                                            final SubLObject required_sources2 = (NIL != query2) ? kb_mapping_utilities.pred_values(query2, kbq_query_run.$$sksiModulesNeeded, UNPROVIDED, UNPROVIDED, UNPROVIDED) : NIL;
                                                                                                            if (NIL != subsetp(required_sources2, v_sources, UNPROVIDED, UNPROVIDED)) {
                                                                                                                kcts = cons(kct2, kcts);
                                                                                                            }
                                                                                                        }
                                                                                                        csome_list_var = csome_list_var.rest();
                                                                                                        kct2 = csome_list_var.first();
                                                                                                    } 
                                                                                                } else {
                                                                                                    Errors.error(kbq_query_run.$str574$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                }

                                                                                        } finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$103, thread);
                                                                                        }
                                                                                    }
                                                                                }
                                                                                do_dictionary_contents_finalize(iteration_state_$110);
                                                                            } finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$102, thread);
                                                                            }
                                                                        }
                                                                    }
                                                                    do_dictionary_contents_finalize(iteration_state);
                                                                }
                                                            } else {
                                                                sbhl_paranoia.sbhl_error(FIVE_INTEGER, kbq_query_run.$str575$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            }
                                                            if (NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module(UNPROVIDED))) {
                                                                SubLObject csome_list_var2 = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                SubLObject instance_tuple = NIL;
                                                                instance_tuple = csome_list_var2.first();
                                                                while (NIL != csome_list_var2) {
                                                                    SubLObject current;
                                                                    final SubLObject datum = current = instance_tuple;
                                                                    SubLObject link_node = NIL;
                                                                    SubLObject mt2 = NIL;
                                                                    SubLObject tv2 = NIL;
                                                                    destructuring_bind_must_consp(current, datum, kbq_query_run.$list576);
                                                                    link_node = current.first();
                                                                    current = current.rest();
                                                                    destructuring_bind_must_consp(current, datum, kbq_query_run.$list576);
                                                                    mt2 = current.first();
                                                                    current = current.rest();
                                                                    destructuring_bind_must_consp(current, datum, kbq_query_run.$list576);
                                                                    tv2 = current.first();
                                                                    current = current.rest();
                                                                    if (NIL == current) {
                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt2)) {
                                                                            final SubLObject _prev_bind_0_$104 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt2, thread);
                                                                                if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv2)) {
                                                                                    final SubLObject _prev_bind_0_$105 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                    try {
                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv2, thread);
                                                                                        final SubLObject sol;
                                                                                        final SubLObject link_nodes2 = sol = list(link_node);
                                                                                        if (NIL != set_p(sol)) {
                                                                                            final SubLObject set_contents_var = do_set_internal(sol);
                                                                                            SubLObject basis_object;
                                                                                            SubLObject state;
                                                                                            SubLObject kct;
                                                                                            SubLObject query;
                                                                                            SubLObject required_sources;
                                                                                            for (basis_object = do_set_contents_basis_object(set_contents_var), state = NIL, state = do_set_contents_initial_state(basis_object, set_contents_var); NIL == do_set_contents_doneP(basis_object, state); state = do_set_contents_update_state(state)) {
                                                                                                kct = do_set_contents_next(basis_object, state);
                                                                                                if ((NIL != do_set_contents_element_validP(state, kct)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(kct, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(kct, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                    query = kct_utils.kct_query_specification(kct, UNPROVIDED);
                                                                                                    required_sources = (NIL != query) ? kb_mapping_utilities.pred_values(query, kbq_query_run.$$sksiModulesNeeded, UNPROVIDED, UNPROVIDED, UNPROVIDED) : NIL;
                                                                                                    if (NIL != subsetp(required_sources, v_sources, UNPROVIDED, UNPROVIDED)) {
                                                                                                        kcts = cons(kct, kcts);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } else
                                                                                            if (sol.isList()) {
                                                                                                SubLObject csome_list_var_$114 = sol;
                                                                                                SubLObject kct2 = NIL;
                                                                                                kct2 = csome_list_var_$114.first();
                                                                                                while (NIL != csome_list_var_$114) {
                                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(kct2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(kct2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        final SubLObject query2 = kct_utils.kct_query_specification(kct2, UNPROVIDED);
                                                                                                        final SubLObject required_sources2 = (NIL != query2) ? kb_mapping_utilities.pred_values(query2, kbq_query_run.$$sksiModulesNeeded, UNPROVIDED, UNPROVIDED, UNPROVIDED) : NIL;
                                                                                                        if (NIL != subsetp(required_sources2, v_sources, UNPROVIDED, UNPROVIDED)) {
                                                                                                            kcts = cons(kct2, kcts);
                                                                                                        }
                                                                                                    }
                                                                                                    csome_list_var_$114 = csome_list_var_$114.rest();
                                                                                                    kct2 = csome_list_var_$114.first();
                                                                                                } 
                                                                                            } else {
                                                                                                Errors.error(kbq_query_run.$str574$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                            }

                                                                                    } finally {
                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$105, thread);
                                                                                    }
                                                                                }
                                                                            } finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$104, thread);
                                                                            }
                                                                        }
                                                                    } else {
                                                                        cdestructuring_bind_error(datum, kbq_query_run.$list576);
                                                                    }
                                                                    csome_list_var2 = csome_list_var2.rest();
                                                                    instance_tuple = csome_list_var2.first();
                                                                } 
                                                            }
                                                        } else
                                                            if (NIL != obsolete.cnat_p(node, UNPROVIDED)) {
                                                                SubLObject cdolist_list_var_$115;
                                                                final SubLObject new_list = cdolist_list_var_$115 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(kbq_query_run.$$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(kbq_query_run.$$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                SubLObject generating_fn = NIL;
                                                                generating_fn = cdolist_list_var_$115.first();
                                                                while (NIL != cdolist_list_var_$115) {
                                                                    final SubLObject _prev_bind_0_$106 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                        final SubLObject sol2;
                                                                        final SubLObject link_nodes3 = sol2 = funcall(generating_fn, node);
                                                                        if (NIL != set_p(sol2)) {
                                                                            final SubLObject set_contents_var2 = do_set_internal(sol2);
                                                                            SubLObject basis_object2;
                                                                            SubLObject state2;
                                                                            SubLObject kct3;
                                                                            SubLObject query3;
                                                                            SubLObject required_sources3;
                                                                            for (basis_object2 = do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = do_set_contents_initial_state(basis_object2, set_contents_var2); NIL == do_set_contents_doneP(basis_object2, state2); state2 = do_set_contents_update_state(state2)) {
                                                                                kct3 = do_set_contents_next(basis_object2, state2);
                                                                                if ((NIL != do_set_contents_element_validP(state2, kct3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(kct3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread)))) {
                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(kct3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                    query3 = kct_utils.kct_query_specification(kct3, UNPROVIDED);
                                                                                    required_sources3 = (NIL != query3) ? kb_mapping_utilities.pred_values(query3, kbq_query_run.$$sksiModulesNeeded, UNPROVIDED, UNPROVIDED, UNPROVIDED) : NIL;
                                                                                    if (NIL != subsetp(required_sources3, v_sources, UNPROVIDED, UNPROVIDED)) {
                                                                                        kcts = cons(kct3, kcts);
                                                                                    }
                                                                                }
                                                                            }
                                                                        } else
                                                                            if (sol2.isList()) {
                                                                                SubLObject csome_list_var3 = sol2;
                                                                                SubLObject kct4 = NIL;
                                                                                kct4 = csome_list_var3.first();
                                                                                while (NIL != csome_list_var3) {
                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(kct4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(kct4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                        final SubLObject query4 = kct_utils.kct_query_specification(kct4, UNPROVIDED);
                                                                                        final SubLObject required_sources4 = (NIL != query4) ? kb_mapping_utilities.pred_values(query4, kbq_query_run.$$sksiModulesNeeded, UNPROVIDED, UNPROVIDED, UNPROVIDED) : NIL;
                                                                                        if (NIL != subsetp(required_sources4, v_sources, UNPROVIDED, UNPROVIDED)) {
                                                                                            kcts = cons(kct4, kcts);
                                                                                        }
                                                                                    }
                                                                                    csome_list_var3 = csome_list_var3.rest();
                                                                                    kct4 = csome_list_var3.first();
                                                                                } 
                                                                            } else {
                                                                                Errors.error(kbq_query_run.$str574$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                            }

                                                                    } finally {
                                                                        sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$106, thread);
                                                                    }
                                                                    cdolist_list_var_$115 = cdolist_list_var_$115.rest();
                                                                    generating_fn = cdolist_list_var_$115.first();
                                                                } 
                                                            }

                                                    } finally {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$101, thread);
                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$101, thread);
                                                    }
                                                    cdolist_list_var = cdolist_list_var.rest();
                                                    module_var = cdolist_list_var.first();
                                                } 
                                                SubLObject cdolist_list_var2;
                                                final SubLObject accessible_modules2 = cdolist_list_var2 = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(kbq_query_run.$$isa)));
                                                SubLObject module_var2 = NIL;
                                                module_var2 = cdolist_list_var2.first();
                                                while (NIL != cdolist_list_var2) {
                                                    final SubLObject _prev_bind_0_$107 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$102 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    try {
                                                        sbhl_module_vars.$sbhl_module$.bind(module_var2, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(NIL != sbhl_search_vars.flip_genl_inverse_modeP(UNPROVIDED, UNPROVIDED) ? makeBoolean(NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread), thread);
                                                        final SubLObject node2 = function_terms.naut_to_nart(node_var_$98);
                                                        if (NIL != sbhl_link_vars.sbhl_node_object_p(node2)) {
                                                            final SubLObject d_link2 = sbhl_graphs.get_sbhl_graph_link(node2, sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                            if (NIL != d_link2) {
                                                                final SubLObject mt_links2 = sbhl_links.get_sbhl_mt_links(d_link2, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                if (NIL != mt_links2) {
                                                                    SubLObject iteration_state2;
                                                                    for (iteration_state2 = do_dictionary_contents_state(dictionary_contents(mt_links2)); NIL == do_dictionary_contents_doneP(iteration_state2); iteration_state2 = do_dictionary_contents_next(iteration_state2)) {
                                                                        thread.resetMultipleValues();
                                                                        final SubLObject mt3 = do_dictionary_contents_key_value(iteration_state2);
                                                                        final SubLObject tv_links2 = thread.secondMultipleValue();
                                                                        thread.resetMultipleValues();
                                                                        if (NIL != mt_relevance_macros.relevant_mtP(mt3)) {
                                                                            final SubLObject _prev_bind_0_$108 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt3, thread);
                                                                                SubLObject iteration_state_$111;
                                                                                for (iteration_state_$111 = do_dictionary_contents_state(dictionary_contents(tv_links2)); NIL == do_dictionary_contents_doneP(iteration_state_$111); iteration_state_$111 = do_dictionary_contents_next(iteration_state_$111)) {
                                                                                    thread.resetMultipleValues();
                                                                                    final SubLObject tv2 = do_dictionary_contents_key_value(iteration_state_$111);
                                                                                    final SubLObject link_nodes4 = thread.secondMultipleValue();
                                                                                    thread.resetMultipleValues();
                                                                                    if (NIL != sbhl_search_vars.relevant_sbhl_tvP(tv2)) {
                                                                                        final SubLObject _prev_bind_0_$109 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv2, thread);
                                                                                            final SubLObject sol3 = link_nodes4;
                                                                                            if (NIL != set_p(sol3)) {
                                                                                                final SubLObject set_contents_var3 = do_set_internal(sol3);
                                                                                                SubLObject basis_object3;
                                                                                                SubLObject state3;
                                                                                                SubLObject node_vars_link_node;
                                                                                                for (basis_object3 = do_set_contents_basis_object(set_contents_var3), state3 = NIL, state3 = do_set_contents_initial_state(basis_object3, set_contents_var3); NIL == do_set_contents_doneP(basis_object3, state3); state3 = do_set_contents_update_state(state3)) {
                                                                                                    node_vars_link_node = do_set_contents_next(basis_object3, state3);
                                                                                                    if ((NIL != do_set_contents_element_validP(state3, node_vars_link_node)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, UNPROVIDED))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, UNPROVIDED);
                                                                                                        deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                    }
                                                                                                }
                                                                                            } else
                                                                                                if (sol3.isList()) {
                                                                                                    SubLObject csome_list_var4 = sol3;
                                                                                                    SubLObject node_vars_link_node2 = NIL;
                                                                                                    node_vars_link_node2 = csome_list_var4.first();
                                                                                                    while (NIL != csome_list_var4) {
                                                                                                        if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, UNPROVIDED)) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, UNPROVIDED);
                                                                                                            deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                                        }
                                                                                                        csome_list_var4 = csome_list_var4.rest();
                                                                                                        node_vars_link_node2 = csome_list_var4.first();
                                                                                                    } 
                                                                                                } else {
                                                                                                    Errors.error(kbq_query_run.$str574$_A_is_neither_SET_P_nor_LISTP_, sol3);
                                                                                                }

                                                                                        } finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$109, thread);
                                                                                        }
                                                                                    }
                                                                                }
                                                                                do_dictionary_contents_finalize(iteration_state_$111);
                                                                            } finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$108, thread);
                                                                            }
                                                                        }
                                                                    }
                                                                    do_dictionary_contents_finalize(iteration_state2);
                                                                }
                                                            } else {
                                                                sbhl_paranoia.sbhl_error(FIVE_INTEGER, kbq_query_run.$str575$attempting_to_bind_direction_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                            }
                                                        } else
                                                            if (NIL != obsolete.cnat_p(node2, UNPROVIDED)) {
                                                                SubLObject cdolist_list_var_$116;
                                                                final SubLObject new_list2 = cdolist_list_var_$116 = (NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module(UNPROVIDED));
                                                                SubLObject generating_fn2 = NIL;
                                                                generating_fn2 = cdolist_list_var_$116.first();
                                                                while (NIL != cdolist_list_var_$116) {
                                                                    final SubLObject _prev_bind_0_$110 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                                                        final SubLObject sol4;
                                                                        final SubLObject link_nodes5 = sol4 = funcall(generating_fn2, node2);
                                                                        if (NIL != set_p(sol4)) {
                                                                            final SubLObject set_contents_var4 = do_set_internal(sol4);
                                                                            SubLObject basis_object4;
                                                                            SubLObject state4;
                                                                            SubLObject node_vars_link_node3;
                                                                            for (basis_object4 = do_set_contents_basis_object(set_contents_var4), state4 = NIL, state4 = do_set_contents_initial_state(basis_object4, set_contents_var4); NIL == do_set_contents_doneP(basis_object4, state4); state4 = do_set_contents_update_state(state4)) {
                                                                                node_vars_link_node3 = do_set_contents_next(basis_object4, state4);
                                                                                if ((NIL != do_set_contents_element_validP(state4, node_vars_link_node3)) && (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, UNPROVIDED))) {
                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, UNPROVIDED);
                                                                                    deck.deck_push(node_vars_link_node3, recur_deck);
                                                                                }
                                                                            }
                                                                        } else
                                                                            if (sol4.isList()) {
                                                                                SubLObject csome_list_var5 = sol4;
                                                                                SubLObject node_vars_link_node4 = NIL;
                                                                                node_vars_link_node4 = csome_list_var5.first();
                                                                                while (NIL != csome_list_var5) {
                                                                                    if (NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, UNPROVIDED)) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, UNPROVIDED);
                                                                                        deck.deck_push(node_vars_link_node4, recur_deck);
                                                                                    }
                                                                                    csome_list_var5 = csome_list_var5.rest();
                                                                                    node_vars_link_node4 = csome_list_var5.first();
                                                                                } 
                                                                            } else {
                                                                                Errors.error(kbq_query_run.$str574$_A_is_neither_SET_P_nor_LISTP_, sol4);
                                                                            }

                                                                    } finally {
                                                                        sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$110, thread);
                                                                    }
                                                                    cdolist_list_var_$116 = cdolist_list_var_$116.rest();
                                                                    generating_fn2 = cdolist_list_var_$116.first();
                                                                } 
                                                            }

                                                    } finally {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$102, thread);
                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$107, thread);
                                                    }
                                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                                    module_var2 = cdolist_list_var2.first();
                                                } 
                                                node_var_$98 = deck.deck_pop(recur_deck);
                                            } 
                                        } finally {
                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$106, thread);
                                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$100, thread);
                                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$100, thread);
                                        }
                                    } else {
                                        sbhl_paranoia.sbhl_warn(TWO_INTEGER, kbq_query_run.$str577$Node__a_does_not_pass_sbhl_type_t, node_var, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module(UNPROVIDED)), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    }
                                } finally {
                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$99, thread);
                                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$99, thread);
                                }
                            } finally {
                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$98, thread);
                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$98, thread);
                            }
                        } finally {
                            final SubLObject _prev_bind_0_$111 = $is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                $is_thread_performing_cleanupP$.bind(T, thread);
                                final SubLObject _values = getValuesAsVector();
                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                restoreValuesFromVector(_values);
                            } finally {
                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$111, thread);
                            }
                        }
                    } finally {
                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$97, thread);
                    }
                } finally {
                    final SubLObject _prev_bind_0_$112 = $is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        $is_thread_performing_cleanupP$.bind(T, thread);
                        final SubLObject _values2 = getValuesAsVector();
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                        restoreValuesFromVector(_values2);
                    } finally {
                        $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$112, thread);
                    }
                }
            } finally {
                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1_$97, thread);
                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$96, thread);
            }
        } finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return nreverse(kcts);
    }

    public static SubLObject kcts_for_sksi_source(SubLObject source) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject kcts = NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind(RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind(kbq_query_run.$$EverythingPSC, thread);
            final SubLObject pred_var = kbq_query_run.$$sksiModulesNeeded;
            if (NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(source, TWO_INTEGER, pred_var)) {
                final SubLObject iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(source, TWO_INTEGER, pred_var);
                SubLObject done_var = NIL;
                final SubLObject token_var = NIL;
                while (NIL == done_var) {
                    final SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
                    final SubLObject valid = makeBoolean(!token_var.eql(final_index_spec));
                    if (NIL != valid) {
                        SubLObject final_index_iterator = NIL;
                        try {
                            final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, $GAF, NIL, NIL);
                            SubLObject done_var_$126 = NIL;
                            final SubLObject token_var_$127 = NIL;
                            while (NIL == done_var_$126) {
                                final SubLObject gaf = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_$127);
                                final SubLObject valid_$128 = makeBoolean(!token_var_$127.eql(gaf));
                                if (NIL != valid_$128) {
                                    final SubLObject query_spec = assertions_high.gaf_arg1(gaf);
                                    SubLObject cdolist_list_var = kct_utils.query_specification_kcts(query_spec, UNPROVIDED);
                                    SubLObject kct = NIL;
                                    kct = cdolist_list_var.first();
                                    while (NIL != cdolist_list_var) {
                                        if (NIL != isaP(kct, kbq_query_run.$$SKSIContentTest, UNPROVIDED, UNPROVIDED)) {
                                            kcts = cons(kct, kcts);
                                        }
                                        cdolist_list_var = cdolist_list_var.rest();
                                        kct = cdolist_list_var.first();
                                    } 
                                }
                                done_var_$126 = makeBoolean(NIL == valid_$128);
                            } 
                        } finally {
                            final SubLObject _prev_bind_0_$129 = $is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                $is_thread_performing_cleanupP$.bind(T, thread);
                                final SubLObject _values = getValuesAsVector();
                                if (NIL != final_index_iterator) {
                                    kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
                                }
                                restoreValuesFromVector(_values);
                            } finally {
                                $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$129, thread);
                            }
                        }
                    }
                    done_var = makeBoolean(NIL == valid);
                } 
            }
        } finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return nreverse(kcts);
    }

    public static SubLObject succeeding_kcts_for_sksi_source(final SubLObject test_set_run, SubLObject source) {
        return kbq_query_run.kct_test_set_run_tests(kbq_query_run.kct_succeeding_test_set_run(kbq_query_run.kct_filter_test_set_run_to_tests(test_set_run, kbq_query_run.kcts_for_sksi_source(source), UNPROVIDED)));
    }

    public static SubLObject failing_kcts_for_sksi_source(final SubLObject test_set_run, SubLObject source) {
        return kbq_query_run.kct_test_set_run_tests(kbq_query_run.kct_failing_test_set_run(kbq_query_run.kct_filter_test_set_run_to_tests(test_set_run, kbq_query_run.kcts_for_sksi_source(source), UNPROVIDED)));
    }

    public static SubLObject answerable_kcts_for_sksi_source(final SubLObject test_set_run, SubLObject source) {
        return kbq_query_run.kct_test_set_run_tests(kbq_query_run.kct_answerable_test_set_run(kbq_query_run.kct_filter_test_set_run_to_tests(test_set_run, kbq_query_run.kcts_for_sksi_source(source), UNPROVIDED)));
    }

    public static SubLObject unanswerable_kcts_for_sksi_source(final SubLObject test_set_run, SubLObject source) {
        return kbq_query_run.kct_test_set_run_tests(kbq_query_run.kct_unanswerable_test_set_run(kbq_query_run.kct_filter_test_set_run_to_tests(test_set_run, kbq_query_run.kcts_for_sksi_source(source), UNPROVIDED)));
    }

    public static SubLObject erroring_kcts_for_sksi_source(final SubLObject test_set_run, SubLObject source) {
        return kbq_query_run.kct_test_set_run_tests(kbq_query_run.kct_erroring_test_set_run(kbq_query_run.kct_filter_test_set_run_to_tests(test_set_run, kbq_query_run.kcts_for_sksi_source(source), UNPROVIDED)));
    }

    public static SubLObject show_errors_for_sksi_source(final SubLObject test_set_run, SubLObject source) {
        SubLObject cdolist_list_var = kbq_query_run.kct_test_set_run_test_runs(kbq_query_run.kct_erroring_test_set_run(kbq_query_run.kct_filter_test_set_run_to_tests(test_set_run, kbq_query_run.kcts_for_sksi_source(source), UNPROVIDED)));
        SubLObject test_run = NIL;
        test_run = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            format(T, kbq_query_run.$str579$_a___s____, kbq_query_run.kct_test_run_test(test_run), kbq_query_run.kbq_query_run_halt_reason(kbq_query_run.kct_test_run_query_run(test_run)));
            cdolist_list_var = cdolist_list_var.rest();
            test_run = cdolist_list_var.first();
        } 
        return NIL;
    }

    public static SubLObject analyze_sksi_test_set_run(final SubLObject test_set_run, final SubLObject sksi_sources_we_care_about) {
        format(T, kbq_query_run.$str580$__________Overview___________All_);
        pretty_print_plist(kbq_query_run.kct_analyze_test_set_run(test_set_run, UNPROVIDED), UNPROVIDED);
        format(T, kbq_query_run.$str581$__All___SKSIContentTests_marked_a);
        final SubLObject regression_test_set_run = kbq_query_run.kct_regression_test_set_run(test_set_run);
        pretty_print_plist(kbq_query_run.kct_analyze_test_set_run(regression_test_set_run, UNPROVIDED), UNPROVIDED);
        final SubLObject care_test_set_run = kbq_query_run.kct_filter_test_set_run_to_tests(test_set_run, kbq_query_run.kcts_using_only_these_sksi_sources(sksi_sources_we_care_about), UNPROVIDED);
        format(T, kbq_query_run.$str582$____SKSIContentTests_using_source, sksi_sources_we_care_about);
        pretty_print_plist(kbq_query_run.kct_analyze_test_set_run(care_test_set_run, UNPROVIDED), UNPROVIDED);
        final SubLObject regression_care_test_set_run = kbq_query_run.kct_regression_test_set_run(care_test_set_run);
        format(T, kbq_query_run.$str583$____SKSIContentTests_marked_as___);
        pretty_print_plist(kbq_query_run.kct_analyze_test_set_run(regression_care_test_set_run, UNPROVIDED), UNPROVIDED);
        format(T, kbq_query_run.$str584$______________________Breakdown_b);
        SubLObject cdolist_list_var = sksi_sources_we_care_about;
        SubLObject source = NIL;
        source = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            final SubLObject source_test_set_run = kbq_query_run.kct_filter_test_set_run_to_tests(test_set_run, kbq_query_run.kcts_for_sksi_source(source), UNPROVIDED);
            final SubLObject analysis = kbq_query_run.trim_analysis_if_zero(kbq_query_run.kct_analyze_test_set_run(source_test_set_run, all_arete_query_metrics()));
            final SubLObject regression_source_test_set_run = kbq_query_run.kct_filter_test_set_run_by_test(source_test_set_run, kbq_query_run.$str244$Filtered_to___KBContentRegression, kbq_query_run.$sym243$KB_CONTENT_REGRESSION_TEST_, kbq_query_run.KCT_TEST_RUN_TEST);
            final SubLObject regression_tests_analysis = kbq_query_run.trim_analysis_if_zero(kbq_query_run.kct_analyze_test_set_run(regression_source_test_set_run, all_arete_query_metrics()));
            format(T, kbq_query_run.$str585$_a__, source);
            SubLObject cdotimes_end_var;
            SubLObject i;
            for (cdotimes_end_var = length(str(source)), i = NIL, i = ZERO_INTEGER; i.numL(cdotimes_end_var); i = add(i, ONE_INTEGER)) {
                format(T, kbq_query_run.$str586$_);
            }
            format(T, kbq_query_run.$str587$______SKSIContentTests_that_use__, source);
            pretty_print_plist(analysis, UNPROVIDED);
            format(T, kbq_query_run.$str588$____SKSIContentTests_marked_as___, source);
            pretty_print_plist(regression_tests_analysis, UNPROVIDED);
            format(T, kbq_query_run.$str589$__Failure_analysis_______);
            cdolist_list_var = cdolist_list_var.rest();
            source = cdolist_list_var.first();
        } 
        return NIL;
    }

    public static final SubLObject declare_kbq_query_run_file_alt() {
        declareFunction("kct_success_result_p", "KCT-SUCCESS-RESULT-P", 1, 0, false);
        declareFunction("kct_failure_result_p", "KCT-FAILURE-RESULT-P", 1, 0, false);
        declareFunction("kct_error_result_p", "KCT-ERROR-RESULT-P", 1, 0, false);
        declareFunction("kbq_cfasl_common_symbols", "KBQ-CFASL-COMMON-SYMBOLS", 0, 0, false);
        declareMacro("with_kbq_query_set_run", "WITH-KBQ-QUERY-SET-RUN");
        declareFunction("kbq_query_run_p", "KBQ-QUERY-RUN-P", 1, 0, false);
        declareFunction("kbq_discard_query_run_result", "KBQ-DISCARD-QUERY-RUN-RESULT", 1, 0, false);
        declareFunction("kbq_discard_query_run_properties", "KBQ-DISCARD-QUERY-RUN-PROPERTIES", 2, 0, false);
        declareFunction("kbq_query_run_query", "KBQ-QUERY-RUN-QUERY", 1, 0, false);
        declareFunction("kbq_query_run_result", "KBQ-QUERY-RUN-RESULT", 1, 0, false);
        declareFunction("kbq_extract_query_run_metric_value", "KBQ-EXTRACT-QUERY-RUN-METRIC-VALUE", 2, 1, false);
        declareFunction("kbq_query_run_answerableP", "KBQ-QUERY-RUN-ANSWERABLE?", 1, 0, false);
        declareFunction("kbq_query_run_unanswerableP", "KBQ-QUERY-RUN-UNANSWERABLE?", 1, 0, false);
        declareFunction("kbq_query_run_answer_count", "KBQ-QUERY-RUN-ANSWER-COUNT", 1, 0, false);
        declareFunction("kbq_query_run_total_time", "KBQ-QUERY-RUN-TOTAL-TIME", 1, 0, false);
        declareFunction("kbq_query_run_complete_total_time", "KBQ-QUERY-RUN-COMPLETE-TOTAL-TIME", 1, 0, false);
        declareFunction("kbq_query_run_time_to_first_answer", "KBQ-QUERY-RUN-TIME-TO-FIRST-ANSWER", 1, 0, false);
        declareFunction("kbq_query_run_time_to_last_answer", "KBQ-QUERY-RUN-TIME-TO-LAST-ANSWER", 1, 0, false);
        declareFunction("kbq_query_run_complete_time_to_first_answer", "KBQ-QUERY-RUN-COMPLETE-TIME-TO-FIRST-ANSWER", 1, 0, false);
        declareFunction("kbq_query_run_complete_time_to_last_answer", "KBQ-QUERY-RUN-COMPLETE-TIME-TO-LAST-ANSWER", 1, 0, false);
        declareFunction("kbq_query_run_total_steps", "KBQ-QUERY-RUN-TOTAL-STEPS", 1, 0, false);
        declareFunction("kbq_query_run_steps_to_first_answer", "KBQ-QUERY-RUN-STEPS-TO-FIRST-ANSWER", 1, 0, false);
        declareFunction("kbq_query_run_steps_to_last_answer", "KBQ-QUERY-RUN-STEPS-TO-LAST-ANSWER", 1, 0, false);
        declareFunction("kbq_extract_query_run_property_value", "KBQ-EXTRACT-QUERY-RUN-PROPERTY-VALUE", 2, 0, false);
        declareFunction("kbq_query_run_property_value", "KBQ-QUERY-RUN-PROPERTY-VALUE", 2, 1, false);
        declareFunction("kbq_internal_real_time_to_seconds", "KBQ-INTERNAL-REAL-TIME-TO-SECONDS", 1, 0, false);
        declareFunction("kbq_seconds_to_internal_real_time", "KBQ-SECONDS-TO-INTERNAL-REAL-TIME", 1, 0, false);
        declareFunction("kbq_query_run_halt_reason", "KBQ-QUERY-RUN-HALT-REASON", 1, 0, false);
        declareFunction("kbq_query_run_timed_outP", "KBQ-QUERY-RUN-TIMED-OUT?", 1, 0, false);
        declareFunction("kbq_query_run_tautologyP", "KBQ-QUERY-RUN-TAUTOLOGY?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_less_than_1000_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-1000-SECONDS?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_less_than_100_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-100-SECONDS?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_less_than_10_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-10-SECONDS?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_less_than_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-A-SECOND?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_less_than_a_tenth_of_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-A-TENTH-OF-A-SECOND?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_less_than_a_hundredth_of_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-A-HUNDREDTH-OF-A-SECOND?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_more_than_1000_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-1000-SECONDS?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_more_than_100_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-100-SECONDS?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_more_than_10_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-10-SECONDS?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_more_than_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-A-SECOND?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_more_than_a_tenth_of_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-A-TENTH-OF-A-SECOND?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_more_than_a_hundredth_of_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-A-HUNDREDTH-OF-A-SECOND?", 1, 0, false);
        declareFunction("kbq_query_run_more_than_1000_answersP", "KBQ-QUERY-RUN-MORE-THAN-1000-ANSWERS?", 1, 0, false);
        declareFunction("kbq_query_run_inference_proof_spec_cons_count", "KBQ-QUERY-RUN-INFERENCE-PROOF-SPEC-CONS-COUNT", 1, 0, false);
        declareFunction("kbq_sentence_truth_query_runP", "KBQ-SENTENCE-TRUTH-QUERY-RUN?", 1, 0, false);
        declareFunction("compute_new_root_relative_answer_times", "COMPUTE-NEW-ROOT-RELATIVE-ANSWER-TIMES", 2, 0, false);
        declareFunction("kct_test_run_p", "KCT-TEST-RUN-P", 1, 0, false);
        declareFunction("kct_make_test_run", "KCT-MAKE-TEST-RUN", 3, 0, false);
        declareFunction("kct_test_run_test", "KCT-TEST-RUN-TEST", 1, 0, false);
        declareFunction("kct_test_run_query_run", "KCT-TEST-RUN-QUERY-RUN", 1, 0, false);
        declareFunction("kct_test_run_status", "KCT-TEST-RUN-STATUS", 1, 0, false);
        declareFunction("kbq_query_set_run_p", "KBQ-QUERY-SET-RUN-P", 1, 0, false);
        declareFunction("kbq_make_query_set_run", "KBQ-MAKE-QUERY-SET-RUN", 1, 1, false);
        declareFunction("kbq_nmerge_query_set_runs", "KBQ-NMERGE-QUERY-SET-RUNS", 1, 1, false);
        declareFunction("kbq_discard_query_set_run_results", "KBQ-DISCARD-QUERY-SET-RUN-RESULTS", 1, 0, false);
        declareFunction("kbq_discard_query_set_run_properties", "KBQ-DISCARD-QUERY-SET-RUN-PROPERTIES", 2, 0, false);
        declareFunction("kbq_make_query_set_run_from_test_set_run", "KBQ-MAKE-QUERY-SET-RUN-FROM-TEST-SET-RUN", 1, 0, false);
        declareFunction("kbq_query_set_run_property_value", "KBQ-QUERY-SET-RUN-PROPERTY-VALUE", 2, 1, false);
        declareFunction("kbq_query_set_run_comment", "KBQ-QUERY-SET-RUN-COMMENT", 1, 0, false);
        declareFunction("kbq_query_set_run_query_runs", "KBQ-QUERY-SET-RUN-QUERY-RUNS", 1, 0, false);
        declareFunction("kbq_query_set_run_patch_level", "KBQ-QUERY-SET-RUN-PATCH-LEVEL", 1, 0, false);
        declareFunction("kbq_query_set_run_internal_time_units_per_second", "KBQ-QUERY-SET-RUN-INTERNAL-TIME-UNITS-PER-SECOND", 1, 0, false);
        declareFunction("kbq_query_set_run_put_query_run_property", "KBQ-QUERY-SET-RUN-PUT-QUERY-RUN-PROPERTY", 3, 0, false);
        declareFunction("kbq_extract_query_property_values", "KBQ-EXTRACT-QUERY-PROPERTY-VALUES", 2, 0, false);
        declareFunction("kbq_extract_metric_values", "KBQ-EXTRACT-METRIC-VALUES", 2, 1, false);
        declareFunction("kbq_extract_property_values", "KBQ-EXTRACT-PROPERTY-VALUES", 2, 1, false);
        declareFunction("kbq_query_set_run_queries", "KBQ-QUERY-SET-RUN-QUERIES", 1, 0, false);
        declareFunction("kbq_query_set_run_query_count", "KBQ-QUERY-SET-RUN-QUERY-COUNT", 1, 0, false);
        declareFunction("kbq_query_set_run_valid_queries", "KBQ-QUERY-SET-RUN-VALID-QUERIES", 1, 0, false);
        declareFunction("kbq_query_set_run_runnable_queries", "KBQ-QUERY-SET-RUN-RUNNABLE-QUERIES", 1, 0, false);
        declareFunction("kbq_query_set_run_remove_invalid_queries", "KBQ-QUERY-SET-RUN-REMOVE-INVALID-QUERIES", 1, 0, false);
        declareFunction("kbq_query_set_run_remove_unrunnable_queries", "KBQ-QUERY-SET-RUN-REMOVE-UNRUNNABLE-QUERIES", 1, 0, false);
        declareFunction("kbq_compute_pad_table", "KBQ-COMPUTE-PAD-TABLE", 1, 0, false);
        declareFunction("kbq_queries_within_n_of_median", "KBQ-QUERIES-WITHIN-N-OF-MEDIAN", 2, 1, false);
        declareFunction("kbq_median_metric", "KBQ-MEDIAN-METRIC", 1, 0, false);
        declareFunction("kbq_mean_metric", "KBQ-MEAN-METRIC", 1, 0, false);
        declareFunction("kbq_function_for_metric", "KBQ-FUNCTION-FOR-METRIC", 1, 0, false);
        declareFunction("kct_test_set_run_p", "KCT-TEST-SET-RUN-P", 1, 0, false);
        declareFunction("kct_make_test_set_run", "KCT-MAKE-TEST-SET-RUN", 1, 1, false);
        declareFunction("kct_nmerge_test_set_runs", "KCT-NMERGE-TEST-SET-RUNS", 1, 1, false);
        declareFunction("kct_test_set_run_comment", "KCT-TEST-SET-RUN-COMMENT", 1, 0, false);
        declareFunction("kct_test_set_run_internal_time_units_per_second", "KCT-TEST-SET-RUN-INTERNAL-TIME-UNITS-PER-SECOND", 1, 0, false);
        declareFunction("kct_test_set_run_test_runs", "KCT-TEST-SET-RUN-TEST-RUNS", 1, 0, false);
        declareFunction("kct_test_set_run_tests", "KCT-TEST-SET-RUN-TESTS", 1, 0, false);
        declareFunction("kct_test_set_run_valid_tests", "KCT-TEST-SET-RUN-VALID-TESTS", 1, 0, false);
        declareFunction("kct_test_set_run_remove_invalid_tests", "KCT-TEST-SET-RUN-REMOVE-INVALID-TESTS", 1, 0, false);
        declareFunction("kbq_run_query", "KBQ-RUN-QUERY", 1, 4, false);
        declareFunction("kbq_run_query_and_maybe_destroy", "KBQ-RUN-QUERY-AND-MAYBE-DESTROY", 4, 0, false);
        declareFunction("kbq_run_query_int", "KBQ-RUN-QUERY-INT", 3, 0, false);
        declareFunction("any_kct_followup_test_formula_gafsP", "ANY-KCT-FOLLOWUP-TEST-FORMULA-GAFS?", 1, 0, false);
        declareFunction("kct_run_test", "KCT-RUN-TEST", 1, 5, false);
        declareFunction("kb_test_metrics_to_query_metrics", "KB-TEST-METRICS-TO-QUERY-METRICS", 1, 0, false);
        declareFunction("kb_test_metric_to_query_metric", "KB-TEST-METRIC-TO-QUERY-METRIC", 1, 0, false);
        declareFunction("kct_compute_test_status", "KCT-COMPUTE-TEST-STATUS", 2, 0, false);
        declareFunction("kct_compute_janus_test_status", "KCT-COMPUTE-JANUS-TEST-STATUS", 2, 0, false);
        declareFunction("kct_followup_test_formula_all_holdsP", "KCT-FOLLOWUP-TEST-FORMULA-ALL-HOLDS?", 7, 0, false);
        declareFunction("kct_followup_test_formula_some_holdsP", "KCT-FOLLOWUP-TEST-FORMULA-SOME-HOLDS?", 6, 0, false);
        declareFunction("kct_followup_test_formula_none_holdsP", "KCT-FOLLOWUP-TEST-FORMULA-NONE-HOLDS?", 6, 0, false);
        declareFunction("kct_followup_test_formula_result", "KCT-FOLLOWUP-TEST-FORMULA-RESULT", 6, 0, false);
        declareFunction("kct_test_query_results_satisfy_exact_set_of_binding_sets", "KCT-TEST-QUERY-RESULTS-SATISFY-EXACT-SET-OF-BINDING-SETS", 2, 0, false);
        declareFunction("kct_test_query_results_satisfy_wanted_binding_sets", "KCT-TEST-QUERY-RESULTS-SATISFY-WANTED-BINDING-SETS", 2, 0, false);
        declareFunction("kct_test_query_results_satisfy_unwanted_binding_sets", "KCT-TEST-QUERY-RESULTS-SATISFY-UNWANTED-BINDING-SETS", 2, 0, false);
        declareFunction("kct_test_query_results_satisfy_binding_sets_cardinality", "KCT-TEST-QUERY-RESULTS-SATISFY-BINDING-SETS-CARDINALITY", 2, 0, false);
        declareFunction("kct_test_query_results_satisfy_binding_sets_min_cardinality", "KCT-TEST-QUERY-RESULTS-SATISFY-BINDING-SETS-MIN-CARDINALITY", 2, 0, false);
        declareFunction("kct_test_query_results_satisfy_binding_sets_max_cardinality", "KCT-TEST-QUERY-RESULTS-SATISFY-BINDING-SETS-MAX-CARDINALITY", 2, 0, false);
        declareFunction("why_kct_failure", "WHY-KCT-FAILURE", 2, 0, false);
        declareFunction("why_kct_binding_cardinality_failure", "WHY-KCT-BINDING-CARDINALITY-FAILURE", 2, 0, false);
        declareFunction("why_kct_binding_match_failure", "WHY-KCT-BINDING-MATCH-FAILURE", 2, 0, false);
        declareFunction("kct_format_binding_sets_list", "KCT-FORMAT-BINDING-SETS-LIST", 1, 0, false);
        declareFunction("kbq_run_query_set", "KBQ-RUN-QUERY-SET", 1, 12, false);
        declareFunction("abort_kbq_run_query_set", "ABORT-KBQ-RUN-QUERY-SET", 0, 0, false);
        declareFunction("kbq_query_spec_set_elements", "KBQ-QUERY-SPEC-SET-ELEMENTS", 1, 2, false);
        declareFunction("all_instantiations_via_inference", "ALL-INSTANTIATIONS-VIA-INFERENCE", 2, 0, false);
        declareFunction("kbq_test_collection_to_query_set", "KBQ-TEST-COLLECTION-TO-QUERY-SET", 1, 0, false);
        declareFunction("kct_run_test_set", "KCT-RUN-TEST-SET", 1, 13, false);
        declareFunction("abort_kct_run_test_set", "ABORT-KCT-RUN-TEST-SET", 0, 0, false);
        declareFunction("kct_test_spec_set_elements", "KCT-TEST-SPEC-SET-ELEMENTS", 1, 2, false);
        declareMacro("run_kbq_experiment", "RUN-KBQ-EXPERIMENT");
        declareFunction("run_kbq_experiment_internal", "RUN-KBQ-EXPERIMENT-INTERNAL", 1, 0, false);
        declareFunction("print_kbq_experiment_analysis_to_file", "PRINT-KBQ-EXPERIMENT-ANALYSIS-TO-FILE", 3, 0, false);
        declareFunction("kbq_erroring_queries", "KBQ-ERRORING-QUERIES", 1, 0, false);
        declareFunction("kbq_erroring_query_count", "KBQ-ERRORING-QUERY-COUNT", 1, 0, false);
        declareFunction("kbq_count_erroring_query_runs", "KBQ-COUNT-ERRORING-QUERY-RUNS", 1, 0, false);
        declareFunction("kbq_erroring_query_runP", "KBQ-ERRORING-QUERY-RUN?", 1, 0, false);
        declareFunction("kbq_if_file_exists_handling_p", "KBQ-IF-FILE-EXISTS-HANDLING-P", 1, 0, false);
        declareFunction("kbq_experiment_augmentability_status", "KBQ-EXPERIMENT-AUGMENTABILITY-STATUS", 2, 0, false);
        declareFunction("kbq_setup_file_handling", "KBQ-SETUP-FILE-HANDLING", 3, 0, false);
        declareFunction("kbq_queries_not_yet_run", "KBQ-QUERIES-NOT-YET-RUN", 2, 0, false);
        declareFunction("kbq_compute_rerun_errors_filename", "KBQ-COMPUTE-RERUN-ERRORS-FILENAME", 1, 0, false);
        declareFunction("kbq_candidate_rerun_errors_filename", "KBQ-CANDIDATE-RERUN-ERRORS-FILENAME", 2, 0, false);
        declareFunction("kbq_load_query_set_run_and_merge_reruns", "KBQ-LOAD-QUERY-SET-RUN-AND-MERGE-RERUNS", 1, 0, false);
        declareFunction("kbq_merge_query_set_run_with_rerun", "KBQ-MERGE-QUERY-SET-RUN-WITH-RERUN", 2, 0, false);
        declareMacro("run_kct_experiment", "RUN-KCT-EXPERIMENT");
        declareFunction("run_kct_experiment_internal", "RUN-KCT-EXPERIMENT-INTERNAL", 1, 0, false);
        declareFunction("print_kct_experiment_analysis_to_file", "PRINT-KCT-EXPERIMENT-ANALYSIS-TO-FILE", 3, 0, false);
        declareFunction("kct_erroring_tests", "KCT-ERRORING-TESTS", 1, 0, false);
        declareFunction("kct_erroring_test_count", "KCT-ERRORING-TEST-COUNT", 1, 0, false);
        declareFunction("kct_count_erroring_test_runs", "KCT-COUNT-ERRORING-TEST-RUNS", 1, 0, false);
        declareFunction("kct_erroring_test_runP", "KCT-ERRORING-TEST-RUN?", 1, 0, false);
        declareFunction("kct_setup_file_handling", "KCT-SETUP-FILE-HANDLING", 3, 0, false);
        declareFunction("kct_tests_not_yet_run", "KCT-TESTS-NOT-YET-RUN", 2, 0, false);
        declareFunction("kct_compute_rerun_errors_filename", "KCT-COMPUTE-RERUN-ERRORS-FILENAME", 1, 0, false);
        declareFunction("kct_candidate_rerun_errors_filename", "KCT-CANDIDATE-RERUN-ERRORS-FILENAME", 2, 0, false);
        declareFunction("kct_load_test_set_run_and_merge_reruns", "KCT-LOAD-TEST-SET-RUN-AND-MERGE-RERUNS", 1, 0, false);
        declareFunction("kct_merge_test_set_run_with_rerun", "KCT-MERGE-TEST-SET-RUN-WITH-RERUN", 2, 0, false);
        declareFunction("kbq_runstate_validP", "KBQ-RUNSTATE-VALID?", 0, 0, false);
        declareFunction("kbq_runstate_inference_already_setP", "KBQ-RUNSTATE-INFERENCE-ALREADY-SET?", 0, 0, false);
        declareFunction("set_kbq_runstate_inference", "SET-KBQ-RUNSTATE-INFERENCE", 1, 0, false);
        declareFunction("possibly_set_kbq_runstate_inference", "POSSIBLY-SET-KBQ-RUNSTATE-INFERENCE", 1, 0, false);
        declareFunction("find_kbq_runstate_by_id", "FIND-KBQ-RUNSTATE-BY-ID", 1, 0, false);
        declareFunction("find_kbq_runstate_by_id_string", "FIND-KBQ-RUNSTATE-BY-ID-STRING", 1, 0, false);
        declareFunction("find_kct_runstate_by_id", "FIND-KCT-RUNSTATE-BY-ID", 1, 0, false);
        declareFunction("find_kct_runstate_by_id_string", "FIND-KCT-RUNSTATE-BY-ID-STRING", 1, 0, false);
        declareFunction("find_kct_set_runstate_by_id", "FIND-KCT-SET-RUNSTATE-BY-ID", 1, 0, false);
        declareFunction("find_kct_set_runstate_by_id_string", "FIND-KCT-SET-RUNSTATE-BY-ID-STRING", 1, 0, false);
        declareFunction("next_runstate_id", "NEXT-RUNSTATE-ID", 0, 0, false);
        declareFunction("runstate_add_object", "RUNSTATE-ADD-OBJECT", 2, 0, false);
        declareFunction("runstate_rem_object", "RUNSTATE-REM-OBJECT", 1, 0, false);
        declareFunction("runstate_find_object_by_id", "RUNSTATE-FIND-OBJECT-BY-ID", 1, 0, false);
        declareFunction("runstate_constant", "RUNSTATE-CONSTANT", 1, 0, false);
        declareFunction("runstate_result_status", "RUNSTATE-RESULT-STATUS", 1, 0, false);
        declareFunction("runstate_result_text", "RUNSTATE-RESULT-TEXT", 1, 0, false);
        declareFunction("runstate_run_status", "RUNSTATE-RUN-STATUS", 1, 0, false);
        declareFunction("runstate_inference", "RUNSTATE-INFERENCE", 1, 0, false);
        declareFunction("runstate_start", "RUNSTATE-START", 1, 0, false);
        declareFunction("runstate_end", "RUNSTATE-END", 1, 0, false);
        declareFunction("set_runstate_run_status", "SET-RUNSTATE-RUN-STATUS", 2, 0, false);
        declareFunction("destroy_runstate", "DESTROY-RUNSTATE", 1, 0, false);
        declareFunction("kbq_runstate_print_function_trampoline", "KBQ-RUNSTATE-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        declareFunction("kbq_runstate_p", "KBQ-RUNSTATE-P", 1, 0, false);
        new com.cyc.cycjava.cycl.inference.kbq_query_run.$kbq_runstate_p$UnaryFunction();
        declareFunction("kbqr_id", "KBQR-ID", 1, 0, false);
        declareFunction("kbqr_lock", "KBQR-LOCK", 1, 0, false);
        declareFunction("kbqr_query_spec", "KBQR-QUERY-SPEC", 1, 0, false);
        declareFunction("kbqr_inference", "KBQR-INFERENCE", 1, 0, false);
        declareFunction("kbqr_result", "KBQR-RESULT", 1, 0, false);
        declareFunction("kbqr_test_runstate", "KBQR-TEST-RUNSTATE", 1, 0, false);
        declareFunction("kbqr_run_status", "KBQR-RUN-STATUS", 1, 0, false);
        declareFunction("_csetf_kbqr_id", "_CSETF-KBQR-ID", 2, 0, false);
        declareFunction("_csetf_kbqr_lock", "_CSETF-KBQR-LOCK", 2, 0, false);
        declareFunction("_csetf_kbqr_query_spec", "_CSETF-KBQR-QUERY-SPEC", 2, 0, false);
        declareFunction("_csetf_kbqr_inference", "_CSETF-KBQR-INFERENCE", 2, 0, false);
        declareFunction("_csetf_kbqr_result", "_CSETF-KBQR-RESULT", 2, 0, false);
        declareFunction("_csetf_kbqr_test_runstate", "_CSETF-KBQR-TEST-RUNSTATE", 2, 0, false);
        declareFunction("_csetf_kbqr_run_status", "_CSETF-KBQR-RUN-STATUS", 2, 0, false);
        declareFunction("make_kbq_runstate", "MAKE-KBQ-RUNSTATE", 0, 1, false);
        declareFunction("new_kbq_runstate", "NEW-KBQ-RUNSTATE", 2, 0, false);
        declareFunction("destroy_kbq_runstate", "DESTROY-KBQ-RUNSTATE", 1, 0, false);
        declareFunction("kbq_runstate_query_spec", "KBQ-RUNSTATE-QUERY-SPEC", 1, 0, false);
        declareFunction("kbq_runstate_lock", "KBQ-RUNSTATE-LOCK", 1, 0, false);
        declareFunction("kbq_runstate_inference", "KBQ-RUNSTATE-INFERENCE", 1, 0, false);
        declareFunction("kbq_runstate_result", "KBQ-RUNSTATE-RESULT", 1, 0, false);
        declareFunction("kbq_runstate_test_runstate", "KBQ-RUNSTATE-TEST-RUNSTATE", 1, 0, false);
        declareFunction("kbq_runstate_run_status", "KBQ-RUNSTATE-RUN-STATUS", 1, 0, false);
        declareFunction("set_kbqr_inference", "SET-KBQR-INFERENCE", 2, 0, false);
        declareFunction("set_kbqr_result", "SET-KBQR-RESULT", 2, 0, false);
        declareFunction("set_kbqr_run_status", "SET-KBQR-RUN-STATUS", 2, 0, false);
        declareFunction("possibly_set_kbqr_run_status", "POSSIBLY-SET-KBQR-RUN-STATUS", 2, 0, false);
        declareFunction("kct_runstate_print_function_trampoline", "KCT-RUNSTATE-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        declareFunction("kct_runstate_p", "KCT-RUNSTATE-P", 1, 0, false);
        new com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_runstate_p$UnaryFunction();
        declareFunction("kctr_id", "KCTR-ID", 1, 0, false);
        declareFunction("kctr_lock", "KCTR-LOCK", 1, 0, false);
        declareFunction("kctr_test_spec", "KCTR-TEST-SPEC", 1, 0, false);
        declareFunction("kctr_result", "KCTR-RESULT", 1, 0, false);
        declareFunction("kctr_query_runstate", "KCTR-QUERY-RUNSTATE", 1, 0, false);
        declareFunction("kctr_test_set_runstate", "KCTR-TEST-SET-RUNSTATE", 1, 0, false);
        declareFunction("kctr_run_status", "KCTR-RUN-STATUS", 1, 0, false);
        declareFunction("kctr_start", "KCTR-START", 1, 0, false);
        declareFunction("kctr_end", "KCTR-END", 1, 0, false);
        declareFunction("_csetf_kctr_id", "_CSETF-KCTR-ID", 2, 0, false);
        declareFunction("_csetf_kctr_lock", "_CSETF-KCTR-LOCK", 2, 0, false);
        declareFunction("_csetf_kctr_test_spec", "_CSETF-KCTR-TEST-SPEC", 2, 0, false);
        declareFunction("_csetf_kctr_result", "_CSETF-KCTR-RESULT", 2, 0, false);
        declareFunction("_csetf_kctr_query_runstate", "_CSETF-KCTR-QUERY-RUNSTATE", 2, 0, false);
        declareFunction("_csetf_kctr_test_set_runstate", "_CSETF-KCTR-TEST-SET-RUNSTATE", 2, 0, false);
        declareFunction("_csetf_kctr_run_status", "_CSETF-KCTR-RUN-STATUS", 2, 0, false);
        declareFunction("_csetf_kctr_start", "_CSETF-KCTR-START", 2, 0, false);
        declareFunction("_csetf_kctr_end", "_CSETF-KCTR-END", 2, 0, false);
        declareFunction("make_kct_runstate", "MAKE-KCT-RUNSTATE", 0, 1, false);
        declareFunction("new_kct_runstate", "NEW-KCT-RUNSTATE", 1, 1, false);
        declareFunction("destroy_kct_runstate", "DESTROY-KCT-RUNSTATE", 1, 0, false);
        declareFunction("kct_runstate_test_spec", "KCT-RUNSTATE-TEST-SPEC", 1, 0, false);
        declareFunction("kct_runstate_lock", "KCT-RUNSTATE-LOCK", 1, 0, false);
        declareFunction("kct_runstate_result", "KCT-RUNSTATE-RESULT", 1, 0, false);
        declareFunction("kct_runstate_query_runstate", "KCT-RUNSTATE-QUERY-RUNSTATE", 1, 0, false);
        declareFunction("kct_runstate_test_set_runstate", "KCT-RUNSTATE-TEST-SET-RUNSTATE", 1, 0, false);
        declareFunction("kct_runstate_inference", "KCT-RUNSTATE-INFERENCE", 1, 0, false);
        declareFunction("kct_runstate_result_status", "KCT-RUNSTATE-RESULT-STATUS", 1, 0, false);
        declareFunction("kct_runstate_failure_explanation", "KCT-RUNSTATE-FAILURE-EXPLANATION", 1, 0, false);
        declareFunction("kct_runstate_metric_value", "KCT-RUNSTATE-METRIC-VALUE", 2, 0, false);
        declareFunction("kct_runstate_run_status", "KCT-RUNSTATE-RUN-STATUS", 1, 0, false);
        declareFunction("kct_runstate_start", "KCT-RUNSTATE-START", 1, 0, false);
        declareFunction("kct_runstate_end", "KCT-RUNSTATE-END", 1, 0, false);
        declareFunction("set_kctr_result", "SET-KCTR-RESULT", 2, 0, false);
        declareFunction("set_kctr_query_runstate", "SET-KCTR-QUERY-RUNSTATE", 2, 0, false);
        declareFunction("set_kctr_test_set_runstate", "SET-KCTR-TEST-SET-RUNSTATE", 2, 0, false);
        declareFunction("set_kctr_run_status", "SET-KCTR-RUN-STATUS", 2, 0, false);
        declareFunction("set_kctr_start", "SET-KCTR-START", 1, 1, false);
        declareFunction("set_kctr_end", "SET-KCTR-END", 1, 1, false);
        declareFunction("kct_set_runstate_print_function_trampoline", "KCT-SET-RUNSTATE-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        declareFunction("kct_set_runstate_p", "KCT-SET-RUNSTATE-P", 1, 0, false);
        new com.cyc.cycjava.cycl.inference.kbq_query_run.$kct_set_runstate_p$UnaryFunction();
        declareFunction("kctsr_id", "KCTSR-ID", 1, 0, false);
        declareFunction("kctsr_lock", "KCTSR-LOCK", 1, 0, false);
        declareFunction("kctsr_test_set", "KCTSR-TEST-SET", 1, 0, false);
        declareFunction("kctsr_result", "KCTSR-RESULT", 1, 0, false);
        declareFunction("kctsr_test_runstates", "KCTSR-TEST-RUNSTATES", 1, 0, false);
        declareFunction("kctsr_run_status", "KCTSR-RUN-STATUS", 1, 0, false);
        declareFunction("kctsr_start", "KCTSR-START", 1, 0, false);
        declareFunction("kctsr_end", "KCTSR-END", 1, 0, false);
        declareFunction("_csetf_kctsr_id", "_CSETF-KCTSR-ID", 2, 0, false);
        declareFunction("_csetf_kctsr_lock", "_CSETF-KCTSR-LOCK", 2, 0, false);
        declareFunction("_csetf_kctsr_test_set", "_CSETF-KCTSR-TEST-SET", 2, 0, false);
        declareFunction("_csetf_kctsr_result", "_CSETF-KCTSR-RESULT", 2, 0, false);
        declareFunction("_csetf_kctsr_test_runstates", "_CSETF-KCTSR-TEST-RUNSTATES", 2, 0, false);
        declareFunction("_csetf_kctsr_run_status", "_CSETF-KCTSR-RUN-STATUS", 2, 0, false);
        declareFunction("_csetf_kctsr_start", "_CSETF-KCTSR-START", 2, 0, false);
        declareFunction("_csetf_kctsr_end", "_CSETF-KCTSR-END", 2, 0, false);
        declareFunction("make_kct_set_runstate", "MAKE-KCT-SET-RUNSTATE", 0, 1, false);
        declareFunction("new_kct_set_runstate", "NEW-KCT-SET-RUNSTATE", 1, 0, false);
        declareFunction("destroy_kct_set_runstate", "DESTROY-KCT-SET-RUNSTATE", 1, 0, false);
        declareFunction("kct_set_runstate_test_set", "KCT-SET-RUNSTATE-TEST-SET", 1, 0, false);
        declareFunction("kct_set_runstate_lock", "KCT-SET-RUNSTATE-LOCK", 1, 0, false);
        declareFunction("kct_set_runstate_result", "KCT-SET-RUNSTATE-RESULT", 1, 0, false);
        declareFunction("kct_set_runstate_test_runstates", "KCT-SET-RUNSTATE-TEST-RUNSTATES", 1, 0, false);
        declareFunction("kct_set_runstate_result_status", "KCT-SET-RUNSTATE-RESULT-STATUS", 1, 0, false);
        declareFunction("kct_set_runstate_run_status", "KCT-SET-RUNSTATE-RUN-STATUS", 1, 0, false);
        declareFunction("kct_set_runstate_start", "KCT-SET-RUNSTATE-START", 1, 0, false);
        declareFunction("kct_set_runstate_end", "KCT-SET-RUNSTATE-END", 1, 0, false);
        declareFunction("set_kctsr_result", "SET-KCTSR-RESULT", 2, 0, false);
        declareFunction("kctsr_test_runstate_add", "KCTSR-TEST-RUNSTATE-ADD", 2, 0, false);
        declareFunction("kctsr_test_runstate_remove", "KCTSR-TEST-RUNSTATE-REMOVE", 2, 0, false);
        declareFunction("set_kctsr_run_status", "SET-KCTSR-RUN-STATUS", 2, 0, false);
        declareFunction("set_kctsr_start", "SET-KCTSR-START", 1, 1, false);
        declareFunction("set_kctsr_end", "SET-KCTSR-END", 1, 1, false);
        declareFunction("kbq_save_query_set_run", "KBQ-SAVE-QUERY-SET-RUN", 2, 0, false);
        declareFunction("kct_save_test_set_run", "KCT-SAVE-TEST-SET-RUN", 2, 0, false);
        declareFunction("kbq_save_query_set_run_without_results", "KBQ-SAVE-QUERY-SET-RUN-WITHOUT-RESULTS", 2, 0, false);
        declareFunction("kbq_open_query_set_run_output_stream", "KBQ-OPEN-QUERY-SET-RUN-OUTPUT-STREAM", 1, 1, false);
        declareFunction("kct_open_test_set_run_output_stream", "KCT-OPEN-TEST-SET-RUN-OUTPUT-STREAM", 1, 1, false);
        declareFunction("kbq_save_query_set_run_preamble", "KBQ-SAVE-QUERY-SET-RUN-PREAMBLE", 1, 1, false);
        declareFunction("kct_save_test_set_run_preamble", "KCT-SAVE-TEST-SET-RUN-PREAMBLE", 1, 1, false);
        declareFunction("kbq_save_query_run", "KBQ-SAVE-QUERY-RUN", 2, 0, false);
        declareFunction("kct_save_test_run", "KCT-SAVE-TEST-RUN", 2, 0, false);
        declareMacro("do_query_set_run", "DO-QUERY-SET-RUN");
        declareMacro("do_query_set_run_query_runs", "DO-QUERY-SET-RUN-QUERY-RUNS");
        declareFunction("kbq_load_query_set_run", "KBQ-LOAD-QUERY-SET-RUN", 1, 0, false);
        declareFunction("kbq_load_query_set_run_int", "KBQ-LOAD-QUERY-SET-RUN-INT", 1, 0, false);
        declareFunction("kbq_load_query_run_int", "KBQ-LOAD-QUERY-RUN-INT", 1, 0, false);
        declareFunction("kbq_query_set_run_nmerge_query_runs", "KBQ-QUERY-SET-RUN-NMERGE-QUERY-RUNS", 2, 0, false);
        declareFunction("kct_load_test_set_run", "KCT-LOAD-TEST-SET-RUN", 1, 0, false);
        declareFunction("kct_test_set_run_nmerge_test_runs", "KCT-TEST-SET-RUN-NMERGE-TEST-RUNS", 2, 0, false);
        declareFunction("kbq_nclean_query_set_run", "KBQ-NCLEAN-QUERY-SET-RUN", 1, 0, false);
        declareFunction("kct_nclean_test_set_run", "KCT-NCLEAN-TEST-SET-RUN", 1, 0, false);
        declareFunction("kbq_nclean_query_run", "KBQ-NCLEAN-QUERY-RUN", 1, 0, false);
        declareFunction("kbq_strip_results_from_query_set_run_file", "KBQ-STRIP-RESULTS-FROM-QUERY-SET-RUN-FILE", 1, 1, false);
        declareFunction("kbq_strip_suffix_from_filename", "KBQ-STRIP-SUFFIX-FROM-FILENAME", 1, 0, false);
        declareFunction("kct_strip_suffix_from_filename", "KCT-STRIP-SUFFIX-FROM-FILENAME", 1, 0, false);
        declareFunction("kbq_filter_query_set_run_by_property_value", "KBQ-FILTER-QUERY-SET-RUN-BY-PROPERTY-VALUE", 4, 1, false);
        declareFunction("kbq_filter_query_set_run_by_test", "KBQ-FILTER-QUERY-SET-RUN-BY-TEST", 3, 1, false);
        declareFunction("kct_filter_test_set_run_by_test", "KCT-FILTER-TEST-SET-RUN-BY-TEST", 3, 1, false);
        declareFunction("kbq_answerable_query_set_run", "KBQ-ANSWERABLE-QUERY-SET-RUN", 1, 0, false);
        declareFunction("kct_succeeding_test_set_run", "KCT-SUCCEEDING-TEST-SET-RUN", 1, 0, false);
        declareFunction("kbq_unanswerable_query_set_run", "KBQ-UNANSWERABLE-QUERY-SET-RUN", 1, 0, false);
        declareFunction("kct_failing_test_set_run", "KCT-FAILING-TEST-SET-RUN", 1, 0, false);
        declareFunction("kct_common_sense_test_set_run", "KCT-COMMON-SENSE-TEST-SET-RUN", 1, 0, false);
        declareFunction("kbq_same_property_value_queries", "KBQ-SAME-PROPERTY-VALUE-QUERIES", 3, 2, false);
        declareFunction("kbq_mutually_answerable_queries", "KBQ-MUTUALLY-ANSWERABLE-QUERIES", 1, 0, false);
        declareFunction("kbq_mutually_unanswerable_queries", "KBQ-MUTUALLY-UNANSWERABLE-QUERIES", 1, 0, false);
        declareFunction("kbq_fast_queries", "KBQ-FAST-QUERIES", 1, 1, false);
        declareFunction("kct_mutually_succeeding_tests", "KCT-MUTUALLY-SUCCEEDING-TESTS", 1, 0, false);
        declareFunction("kct_mutually_failing_tests", "KCT-MUTUALLY-FAILING-TESTS", 1, 0, false);
        declareFunction("kbq_mutually_answerable_query_set_runs", "KBQ-MUTUALLY-ANSWERABLE-QUERY-SET-RUNS", 2, 0, false);
        declareFunction("kbq_mutually_unanswerable_query_set_runs", "KBQ-MUTUALLY-UNANSWERABLE-QUERY-SET-RUNS", 2, 0, false);
        declareFunction("kbq_query_set_runs_common_queries", "KBQ-QUERY-SET-RUNS-COMMON-QUERIES", 1, 0, false);
        declareFunction("kbq_common_queries_query_set_runs", "KBQ-COMMON-QUERIES-QUERY-SET-RUNS", 1, 0, false);
        declareFunction("kbq_common_queries_two_query_set_runs", "KBQ-COMMON-QUERIES-TWO-QUERY-SET-RUNS", 2, 0, false);
        declareFunction("kct_common_tests_test_set_runs", "KCT-COMMON-TESTS-TEST-SET-RUNS", 1, 0, false);
        declareFunction("kct_mutually_succeeding_test_set_runs", "KCT-MUTUALLY-SUCCEEDING-TEST-SET-RUNS", 2, 0, false);
        declareFunction("kct_mutually_failing_test_set_runs", "KCT-MUTUALLY-FAILING-TEST-SET-RUNS", 2, 0, false);
        declareFunction("kbq_same_answer_count_query_set_runs", "KBQ-SAME-ANSWER-COUNT-QUERY-SET-RUNS", 2, 0, false);
        declareFunction("kbq_different_answer_count_query_set_runs", "KBQ-DIFFERENT-ANSWER-COUNT-QUERY-SET-RUNS", 2, 0, false);
        declareFunction("kbq_filter_to_queries_int", "KBQ-FILTER-TO-QUERIES-INT", 3, 0, false);
        declareFunction("kbq_filter_query_set_run_to_queries_lambda", "KBQ-FILTER-QUERY-SET-RUN-TO-QUERIES-LAMBDA", 1, 0, false);
        declareFunction("kbq_filter_query_set_run_to_queries_not_lambda", "KBQ-FILTER-QUERY-SET-RUN-TO-QUERIES-NOT-LAMBDA", 1, 0, false);
        declareFunction("kbq_filter_query_set_run_to_queries", "KBQ-FILTER-QUERY-SET-RUN-TO-QUERIES", 2, 1, false);
        declareFunction("kct_filter_test_set_run_to_tests_lambda", "KCT-FILTER-TEST-SET-RUN-TO-TESTS-LAMBDA", 1, 0, false);
        declareFunction("kct_filter_test_set_run_to_tests_not_lambda", "KCT-FILTER-TEST-SET-RUN-TO-TESTS-NOT-LAMBDA", 1, 0, false);
        declareFunction("kct_filter_test_set_run_to_tests", "KCT-FILTER-TEST-SET-RUN-TO-TESTS", 2, 1, false);
        declareFunction("kbq_filter_query_set_run_to_query_collection", "KBQ-FILTER-QUERY-SET-RUN-TO-QUERY-COLLECTION", 2, 1, false);
        declareFunction("kct_filter_test_set_run_to_test_collection", "KCT-FILTER-TEST-SET-RUN-TO-TEST-COLLECTION", 2, 1, false);
        declareFunction("clear_cached_all_instances_among", "CLEAR-CACHED-ALL-INSTANCES-AMONG", 0, 0, false);
        new com.cyc.cycjava.cycl.inference.kbq_query_run.$clear_cached_all_instances_among$ZeroArityFunction();
        declareFunction("remove_cached_all_instances_among", "REMOVE-CACHED-ALL-INSTANCES-AMONG", 3, 0, false);
        declareFunction("cached_all_instances_among_internal", "CACHED-ALL-INSTANCES-AMONG-INTERNAL", 3, 0, false);
        declareFunction("cached_all_instances_among", "CACHED-ALL-INSTANCES-AMONG", 3, 0, false);
        declareFunction("kbq_queries_common_to_all_query_set_runs", "KBQ-QUERIES-COMMON-TO-ALL-QUERY-SET-RUNS", 1, 0, false);
        declareFunction("kct_tests_common_to_all_test_set_runs", "KCT-TESTS-COMMON-TO-ALL-TEST-SET-RUNS", 1, 0, false);
        declareFunction("kct_consistently_succeeding_tests", "KCT-CONSISTENTLY-SUCCEEDING-TESTS", 1, 0, false);
        declareFunction("kct_consistently_succeeding_test_set_runs", "KCT-CONSISTENTLY-SUCCEEDING-TEST-SET-RUNS", 1, 0, false);
        declareFunction("queries_that_became_unanswerable", "QUERIES-THAT-BECAME-UNANSWERABLE", 2, 0, false);
        declareFunction("queries_that_changed_answer_count", "QUERIES-THAT-CHANGED-ANSWER-COUNT", 2, 0, false);
        declareFunction("kbq_query_runs_with_worst_slowdown", "KBQ-QUERY-RUNS-WITH-WORST-SLOWDOWN", 2, 2, false);
        declareFunction("kbq_query_runs_with_worst_slowdown_robust", "KBQ-QUERY-RUNS-WITH-WORST-SLOWDOWN-ROBUST", 2, 2, false);
        declareFunction("kbq_slowest_query_runs", "KBQ-SLOWEST-QUERY-RUNS", 1, 2, false);
        declareFunction("kct_slowest_test_runs", "KCT-SLOWEST-TEST-RUNS", 1, 2, false);
        declareFunction("kbq_compare_query_set_run_answers", "KBQ-COMPARE-QUERY-SET-RUN-ANSWERS", 2, 0, false);
        declareFunction("kbq_summarize_compare_query_set_run_answers", "KBQ-SUMMARIZE-COMPARE-QUERY-SET-RUN-ANSWERS", 2, 0, false);
        declareFunction("kbq_sort_query_runs", "KBQ-SORT-QUERY-RUNS", 2, 0, false);
        declareFunction("kbq_lookup_query_run", "KBQ-LOOKUP-QUERY-RUN", 2, 0, false);
        declareFunction("kbq_lookup_query_run_from_query_runs", "KBQ-LOOKUP-QUERY-RUN-FROM-QUERY-RUNS", 2, 0, false);
        declareFunction("kbq_lookup_query_runs", "KBQ-LOOKUP-QUERY-RUNS", 2, 0, false);
        declareFunction("kbq_query_equal", "KBQ-QUERY-EQUAL", 2, 0, false);
        declareFunction("kbq_compare_query_run_answers", "KBQ-COMPARE-QUERY-RUN-ANSWERS", 2, 0, false);
        declareFunction("kbq_compare_query_set_runs_by_property", "KBQ-COMPARE-QUERY-SET-RUNS-BY-PROPERTY", 3, 1, false);
        declareFunction("show_query_runs_that_became_unanswerable", "SHOW-QUERY-RUNS-THAT-BECAME-UNANSWERABLE", 2, 3, false);
        declareFunction("show_query_runs_that_changed_answer_count", "SHOW-QUERY-RUNS-THAT-CHANGED-ANSWER-COUNT", 2, 3, false);
        declareFunction("show_query_runs_int", "SHOW-QUERY-RUNS-INT", 6, 0, false);
        declareFunction("kbq_query_set_run_answerable_counts", "KBQ-QUERY-SET-RUN-ANSWERABLE-COUNTS", 2, 0, false);
        declareFunction("kct_compare_test_set_run_statuses", "KCT-COMPARE-TEST-SET-RUN-STATUSES", 2, 0, false);
        declareFunction("kct_summarize_compare_test_set_run_statuses", "KCT-SUMMARIZE-COMPARE-TEST-SET-RUN-STATUSES", 2, 0, false);
        declareFunction("kct_lookup_test_run", "KCT-LOOKUP-TEST-RUN", 2, 0, false);
        declareFunction("kct_test_equal", "KCT-TEST-EQUAL", 2, 0, false);
        declareFunction("kct_compare_test_run_statuses", "KCT-COMPARE-TEST-RUN-STATUSES", 2, 0, false);
        declareFunction("kbq_analyze_query_set_runs", "KBQ-ANALYZE-QUERY-SET-RUNS", 2, 1, false);
        declareFunction("kct_analyze_test_set_runs", "KCT-ANALYZE-TEST-SET-RUNS", 2, 1, false);
        declareFunction("kbq_compare_analysis", "KBQ-COMPARE-ANALYSIS", 2, 0, false);
        declareFunction("significant_digits_if_float", "SIGNIFICANT-DIGITS-IF-FLOAT", 2, 0, false);
        declareFunction("kbq_print_analysis", "KBQ-PRINT-ANALYSIS", 1, 0, false);
        declareFunction("kbq_analyze_query_set_run", "KBQ-ANALYZE-QUERY-SET-RUN", 1, 1, false);
        declareFunction("kct_analyze_test_set_run", "KCT-ANALYZE-TEST-SET-RUN", 1, 1, false);
        declareFunction("kbq_analyze_query_runs", "KBQ-ANALYZE-QUERY-RUNS", 2, 0, false);
        declareFunction("kbq_query_set_run_total_answerable", "KBQ-QUERY-SET-RUN-TOTAL-ANSWERABLE", 1, 0, false);
        declareFunction("kbq_query_set_run_last_query_from_file", "KBQ-QUERY-SET-RUN-LAST-QUERY-FROM-FILE", 1, 0, false);
        declareFunction("kbq_query_set_run_identify_probable_segfault_from_file", "KBQ-QUERY-SET-RUN-IDENTIFY-PROBABLE-SEGFAULT-FROM-FILE", 2, 0, false);
        declareFunction("kbq_query_set_run_identify_probable_segfault", "KBQ-QUERY-SET-RUN-IDENTIFY-PROBABLE-SEGFAULT", 2, 0, false);
        declareFunction("kbq_query_set_run_identify_probable_segfault_int", "KBQ-QUERY-SET-RUN-IDENTIFY-PROBABLE-SEGFAULT-INT", 2, 0, false);
        declareFunction("kct_analyze_test_runs", "KCT-ANALYZE-TEST-RUNS", 2, 0, false);
        declareFunction("kct_test_set_run_identify_probable_segfault", "KCT-TEST-SET-RUN-IDENTIFY-PROBABLE-SEGFAULT", 2, 0, false);
        declareFunction("analyze_kbq_experiments", "ANALYZE-KBQ-EXPERIMENTS", 2, 5, false);
        declareFunction("kbq_non_lumpy_query_set_run", "KBQ-NON-LUMPY-QUERY-SET-RUN", 1, 0, false);
        declareFunction("kbq_lumpy_queries", "KBQ-LUMPY-QUERIES", 1, 0, false);
        declareFunction("kbq_lumpy_query_count", "KBQ-LUMPY-QUERY-COUNT", 1, 0, false);
        declareFunction("kbq_count_lumpy_query_runs", "KBQ-COUNT-LUMPY-QUERY-RUNS", 1, 0, false);
        declareFunction("kbq_lumpy_query_runP", "KBQ-LUMPY-QUERY-RUN?", 1, 0, false);
        declareFunction("show_kct_test_set_run_summary", "SHOW-KCT-TEST-SET-RUN-SUMMARY", 1, 1, false);
        declareFunction("kbq_show_halt_reason_histogram", "KBQ-SHOW-HALT-REASON-HISTOGRAM", 1, 0, false);
        declareFunction("kbq_query_literal_count", "KBQ-QUERY-LITERAL-COUNT", 1, 0, false);
        declareFunction("kbq_single_literal_query_p", "KBQ-SINGLE-LITERAL-QUERY-P", 1, 0, false);
        declareFunction("kbq_progress_stream", "KBQ-PROGRESS-STREAM", 0, 0, false);
        declareFunction("kbq_benchmark_run_and_report", "KBQ-BENCHMARK-RUN-AND-REPORT", 3, 0, false);
        declareFunction("kbq_benchmark_run_in_background", "KBQ-BENCHMARK-RUN-IN-BACKGROUND", 3, 0, false);
        declareFunction("kbq_benchmark_run", "KBQ-BENCHMARK-RUN", 3, 3, false);
        declareFunction("kbq_benchmark_report", "KBQ-BENCHMARK-REPORT", 1, 1, false);
        declareFunction("kbq_benchmark_report_for_test", "KBQ-BENCHMARK-REPORT-FOR-TEST", 2, 1, false);
        return NIL;
    }

    public static SubLObject declare_kbq_query_run_file() {
        if (SubLFiles.USE_V1) {
            declareFunction("kct_success_result_p", "KCT-SUCCESS-RESULT-P", 1, 0, false);
            declareFunction("kct_failure_result_p", "KCT-FAILURE-RESULT-P", 1, 0, false);
            declareFunction("kct_error_result_p", "KCT-ERROR-RESULT-P", 1, 0, false);
            declareFunction("kbq_cfasl_common_symbols", "KBQ-CFASL-COMMON-SYMBOLS", 0, 0, false);
            declareFunction("kbq_cfasl_common_symbols_simple", "KBQ-CFASL-COMMON-SYMBOLS-SIMPLE", 0, 0, false);
            declareMacro("with_kbq_query_set_run", "WITH-KBQ-QUERY-SET-RUN");
            declareFunction("kbq_query_run_p", "KBQ-QUERY-RUN-P", 1, 0, false);
            declareFunction("kbq_discard_query_run_result", "KBQ-DISCARD-QUERY-RUN-RESULT", 1, 0, false);
            declareFunction("kbq_discard_query_run_properties", "KBQ-DISCARD-QUERY-RUN-PROPERTIES", 2, 0, false);
            declareFunction("kbq_query_run_query", "KBQ-QUERY-RUN-QUERY", 1, 0, false);
            declareFunction("kbq_query_run_result", "KBQ-QUERY-RUN-RESULT", 1, 0, false);
            declareFunction("kbq_extract_query_run_metric_value", "KBQ-EXTRACT-QUERY-RUN-METRIC-VALUE", 2, 1, false);
            declareFunction("kbq_query_run_answerableP", "KBQ-QUERY-RUN-ANSWERABLE?", 1, 0, false);
            declareFunction("kbq_query_run_unanswerableP", "KBQ-QUERY-RUN-UNANSWERABLE?", 1, 0, false);
            declareFunction("kbq_query_run_answer_count", "KBQ-QUERY-RUN-ANSWER-COUNT", 1, 0, false);
            declareFunction("kbq_query_run_hypothesization_time", "KBQ-QUERY-RUN-HYPOTHESIZATION-TIME", 1, 0, false);
            declareFunction("kbq_query_run_total_time", "KBQ-QUERY-RUN-TOTAL-TIME", 1, 0, false);
            declareFunction("kbq_query_run_complete_total_time", "KBQ-QUERY-RUN-COMPLETE-TOTAL-TIME", 1, 0, false);
            declareFunction("kbq_query_run_time_to_first_answer", "KBQ-QUERY-RUN-TIME-TO-FIRST-ANSWER", 1, 0, false);
            declareFunction("kbq_query_run_time_to_last_answer", "KBQ-QUERY-RUN-TIME-TO-LAST-ANSWER", 1, 0, false);
            declareFunction("kbq_query_run_complete_time_to_first_answer", "KBQ-QUERY-RUN-COMPLETE-TIME-TO-FIRST-ANSWER", 1, 0, false);
            declareFunction("kbq_query_run_complete_time_to_last_answer", "KBQ-QUERY-RUN-COMPLETE-TIME-TO-LAST-ANSWER", 1, 0, false);
            declareFunction("kbq_query_run_total_steps", "KBQ-QUERY-RUN-TOTAL-STEPS", 1, 0, false);
            declareFunction("kbq_query_run_steps_to_first_answer", "KBQ-QUERY-RUN-STEPS-TO-FIRST-ANSWER", 1, 0, false);
            declareFunction("kbq_query_run_steps_to_last_answer", "KBQ-QUERY-RUN-STEPS-TO-LAST-ANSWER", 1, 0, false);
            declareFunction("kbq_extract_query_run_property_value", "KBQ-EXTRACT-QUERY-RUN-PROPERTY-VALUE", 2, 0, false);
            declareFunction("kbq_query_run_property_value", "KBQ-QUERY-RUN-PROPERTY-VALUE", 2, 1, false);
            declareFunction("kbq_internal_real_time_to_seconds", "KBQ-INTERNAL-REAL-TIME-TO-SECONDS", 1, 0, false);
            declareFunction("kbq_seconds_to_internal_real_time", "KBQ-SECONDS-TO-INTERNAL-REAL-TIME", 1, 0, false);
            declareFunction("kbq_query_run_halt_reason", "KBQ-QUERY-RUN-HALT-REASON", 1, 0, false);
            declareFunction("kbq_query_run_timed_outP", "KBQ-QUERY-RUN-TIMED-OUT?", 1, 0, false);
            declareFunction("kbq_query_run_tautologyP", "KBQ-QUERY-RUN-TAUTOLOGY?", 1, 0, false);
            declareFunction("kbq_query_run_total_time_less_than_1000_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-1000-SECONDS?", 1, 0, false);
            declareFunction("kbq_query_run_total_time_less_than_100_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-100-SECONDS?", 1, 0, false);
            declareFunction("kbq_query_run_total_time_less_than_10_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-10-SECONDS?", 1, 0, false);
            declareFunction("kbq_query_run_total_time_less_than_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-A-SECOND?", 1, 0, false);
            declareFunction("kbq_query_run_total_time_less_than_a_tenth_of_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-A-TENTH-OF-A-SECOND?", 1, 0, false);
            declareFunction("kbq_query_run_total_time_less_than_a_hundredth_of_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-A-HUNDREDTH-OF-A-SECOND?", 1, 0, false);
            declareFunction("kbq_query_run_total_time_more_than_1000_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-1000-SECONDS?", 1, 0, false);
            declareFunction("kbq_query_run_total_time_more_than_100_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-100-SECONDS?", 1, 0, false);
            declareFunction("kbq_query_run_total_time_more_than_10_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-10-SECONDS?", 1, 0, false);
            declareFunction("kbq_query_run_total_time_more_than_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-A-SECOND?", 1, 0, false);
            declareFunction("kbq_query_run_total_time_more_than_a_tenth_of_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-A-TENTH-OF-A-SECOND?", 1, 0, false);
            declareFunction("kbq_query_run_total_time_more_than_a_hundredth_of_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-A-HUNDREDTH-OF-A-SECOND?", 1, 0, false);
            declareFunction("kbq_query_run_more_than_1000_answersP", "KBQ-QUERY-RUN-MORE-THAN-1000-ANSWERS?", 1, 0, false);
            declareFunction("kbq_query_run_inference_proof_spec_cons_count", "KBQ-QUERY-RUN-INFERENCE-PROOF-SPEC-CONS-COUNT", 1, 0, false);
            declareFunction("kbq_sentence_truth_query_runP", "KBQ-SENTENCE-TRUTH-QUERY-RUN?", 1, 0, false);
            declareFunction("compute_new_root_relative_answer_times", "COMPUTE-NEW-ROOT-RELATIVE-ANSWER-TIMES", 2, 0, false);
            declareFunction("kct_test_run_p", "KCT-TEST-RUN-P", 1, 0, false);
            declareFunction("kct_make_test_run", "KCT-MAKE-TEST-RUN", 3, 0, false);
            declareFunction("kct_test_run_test", "KCT-TEST-RUN-TEST", 1, 0, false);
            declareFunction("kct_test_run_query_run", "KCT-TEST-RUN-QUERY-RUN", 1, 0, false);
            declareFunction("kct_test_run_status", "KCT-TEST-RUN-STATUS", 1, 0, false);
            declareFunction("kct_test_run_answer_count", "KCT-TEST-RUN-ANSWER-COUNT", 1, 0, false);
            declareFunction("kbq_query_set_run_p", "KBQ-QUERY-SET-RUN-P", 1, 0, false);
            declareFunction("kbq_make_query_set_run", "KBQ-MAKE-QUERY-SET-RUN", 1, 1, false);
            declareFunction("kbq_nmerge_query_set_runs", "KBQ-NMERGE-QUERY-SET-RUNS", 1, 1, false);
            declareFunction("kbq_discard_query_set_run_results", "KBQ-DISCARD-QUERY-SET-RUN-RESULTS", 1, 0, false);
            declareFunction("kbq_discard_query_set_run_properties", "KBQ-DISCARD-QUERY-SET-RUN-PROPERTIES", 2, 0, false);
            declareFunction("kbq_make_query_set_run_from_test_set_run", "KBQ-MAKE-QUERY-SET-RUN-FROM-TEST-SET-RUN", 1, 0, false);
            declareFunction("kbq_query_set_run_property_value", "KBQ-QUERY-SET-RUN-PROPERTY-VALUE", 2, 1, false);
            declareFunction("kbq_query_set_run_comment", "KBQ-QUERY-SET-RUN-COMMENT", 1, 0, false);
            declareFunction("kbq_query_set_run_query_runs", "KBQ-QUERY-SET-RUN-QUERY-RUNS", 1, 0, false);
            declareFunction("kbq_query_set_run_patch_level", "KBQ-QUERY-SET-RUN-PATCH-LEVEL", 1, 0, false);
            declareFunction("kbq_query_set_run_internal_time_units_per_second", "KBQ-QUERY-SET-RUN-INTERNAL-TIME-UNITS-PER-SECOND", 1, 0, false);
            declareFunction("kbq_query_set_run_put_query_run_property", "KBQ-QUERY-SET-RUN-PUT-QUERY-RUN-PROPERTY", 3, 0, false);
            declareFunction("kbq_extract_query_property_values", "KBQ-EXTRACT-QUERY-PROPERTY-VALUES", 2, 0, false);
            declareFunction("kbq_extract_metric_values", "KBQ-EXTRACT-METRIC-VALUES", 2, 1, false);
            declareFunction("kbq_extract_property_values", "KBQ-EXTRACT-PROPERTY-VALUES", 2, 1, false);
            declareFunction("kbq_query_set_run_queries", "KBQ-QUERY-SET-RUN-QUERIES", 1, 0, false);
            declareFunction("kbq_query_set_run_query_count", "KBQ-QUERY-SET-RUN-QUERY-COUNT", 1, 0, false);
            declareFunction("kbq_query_set_run_valid_queries", "KBQ-QUERY-SET-RUN-VALID-QUERIES", 1, 0, false);
            declareFunction("kbq_query_set_run_runnable_queries", "KBQ-QUERY-SET-RUN-RUNNABLE-QUERIES", 1, 0, false);
            declareFunction("kbq_query_set_run_remove_invalid_queries", "KBQ-QUERY-SET-RUN-REMOVE-INVALID-QUERIES", 1, 0, false);
            declareFunction("kbq_query_set_run_remove_unrunnable_queries", "KBQ-QUERY-SET-RUN-REMOVE-UNRUNNABLE-QUERIES", 1, 0, false);
            declareFunction("kbq_compute_pad_table", "KBQ-COMPUTE-PAD-TABLE", 1, 0, false);
            declareFunction("kbq_queries_within_n_of_median", "KBQ-QUERIES-WITHIN-N-OF-MEDIAN", 2, 1, false);
            declareFunction("kbq_median_metric", "KBQ-MEDIAN-METRIC", 1, 0, false);
            declareFunction("kbq_mean_metric", "KBQ-MEAN-METRIC", 1, 0, false);
            declareFunction("kbq_function_for_metric", "KBQ-FUNCTION-FOR-METRIC", 1, 0, false);
            declareFunction("kct_test_set_run_p", "KCT-TEST-SET-RUN-P", 1, 0, false);
            declareFunction("kct_make_test_set_run", "KCT-MAKE-TEST-SET-RUN", 1, 1, false);
            declareFunction("kct_nmerge_test_set_runs", "KCT-NMERGE-TEST-SET-RUNS", 1, 1, false);
            declareFunction("kct_test_set_run_comment", "KCT-TEST-SET-RUN-COMMENT", 1, 0, false);
            declareFunction("kct_test_set_run_internal_time_units_per_second", "KCT-TEST-SET-RUN-INTERNAL-TIME-UNITS-PER-SECOND", 1, 0, false);
            declareFunction("kct_test_set_run_test_runs", "KCT-TEST-SET-RUN-TEST-RUNS", 1, 0, false);
            declareFunction("kct_test_set_run_tests", "KCT-TEST-SET-RUN-TESTS", 1, 0, false);
            declareFunction("kct_test_set_run_valid_tests", "KCT-TEST-SET-RUN-VALID-TESTS", 1, 0, false);
            declareFunction("kct_test_set_run_remove_invalid_tests", "KCT-TEST-SET-RUN-REMOVE-INVALID-TESTS", 1, 0, false);
            declareFunction("kbq_run_query", "KBQ-RUN-QUERY", 1, 5, false);
            declareFunction("abort_kbq_run_query", "ABORT-KBQ-RUN-QUERY", 0, 0, false);
            declareFunction("kbq_run_query_and_maybe_destroy", "KBQ-RUN-QUERY-AND-MAYBE-DESTROY", 4, 1, false);
            declareFunction("kbq_run_query_problem_store", "KBQ-RUN-QUERY-PROBLEM-STORE", 1, 1, false);
            declareFunction("kbq_run_query_int", "KBQ-RUN-QUERY-INT", 3, 1, false);
            declareFunction("ensure_sksi_modules_needed", "ENSURE-SKSI-MODULES-NEEDED", 1, 0, false);
            declareFunction("ensure_only_sksi_modules_needed", "ENSURE-ONLY-SKSI-MODULES-NEEDED", 1, 0, false);
            declareFunction("sksi_modules_needed", "SKSI-MODULES-NEEDED", 1, 0, false);
            declareFunction("query_sksi_modules_needed", "QUERY-SKSI-MODULES-NEEDED", 1, 0, false);
            declareFunction("any_kct_followup_test_formula_gafsP", "ANY-KCT-FOLLOWUP-TEST-FORMULA-GAFS?", 1, 0, false);
            declareFunction("kct_run_test", "KCT-RUN-TEST", 1, 5, false);
            declareFunction("kb_test_metrics_to_query_metrics", "KB-TEST-METRICS-TO-QUERY-METRICS", 1, 0, false);
            declareFunction("kb_test_metric_to_query_metric", "KB-TEST-METRIC-TO-QUERY-METRIC", 1, 0, false);
            declareFunction("kct_compute_test_status", "KCT-COMPUTE-TEST-STATUS", 3, 0, false);
            declareFunction("kct_compute_janus_test_status", "KCT-COMPUTE-JANUS-TEST-STATUS", 2, 0, false);
            declareFunction("kct_followup_test_formula_all_holdsP", "KCT-FOLLOWUP-TEST-FORMULA-ALL-HOLDS?", 7, 0, false);
            declareFunction("kct_followup_test_formula_some_holdsP", "KCT-FOLLOWUP-TEST-FORMULA-SOME-HOLDS?", 6, 0, false);
            declareFunction("kct_followup_test_formula_none_holdsP", "KCT-FOLLOWUP-TEST-FORMULA-NONE-HOLDS?", 6, 0, false);
            declareFunction("kct_followup_test_formula_result", "KCT-FOLLOWUP-TEST-FORMULA-RESULT", 6, 0, false);
            declareFunction("kct_test_query_results_satisfy_exact_set_of_binding_sets", "KCT-TEST-QUERY-RESULTS-SATISFY-EXACT-SET-OF-BINDING-SETS", 3, 0, false);
            declareFunction("kct_test_query_results_satisfy_wanted_binding_sets", "KCT-TEST-QUERY-RESULTS-SATISFY-WANTED-BINDING-SETS", 3, 0, false);
            declareFunction("kct_test_query_results_satisfy_unwanted_binding_sets", "KCT-TEST-QUERY-RESULTS-SATISFY-UNWANTED-BINDING-SETS", 3, 0, false);
            declareFunction("kct_test_query_results_satisfy_binding_sets_cardinality", "KCT-TEST-QUERY-RESULTS-SATISFY-BINDING-SETS-CARDINALITY", 2, 0, false);
            declareFunction("kct_test_query_results_satisfy_binding_sets_min_cardinality", "KCT-TEST-QUERY-RESULTS-SATISFY-BINDING-SETS-MIN-CARDINALITY", 2, 0, false);
            declareFunction("kct_test_query_results_satisfy_binding_sets_max_cardinality", "KCT-TEST-QUERY-RESULTS-SATISFY-BINDING-SETS-MAX-CARDINALITY", 2, 0, false);
            declareFunction("kct_test_query_results_satisfy_best_multiple_choice_option", "KCT-TEST-QUERY-RESULTS-SATISFY-BEST-MULTIPLE-CHOICE-OPTION", 2, 0, false);
            declareFunction("why_kct_failure", "WHY-KCT-FAILURE", 3, 0, false);
            declareFunction("why_kct_multiple_choice_option_failure", "WHY-KCT-MULTIPLE-CHOICE-OPTION-FAILURE", 2, 0, false);
            declareFunction("why_kct_binding_cardinality_failure", "WHY-KCT-BINDING-CARDINALITY-FAILURE", 2, 0, false);
            declareFunction("why_kct_binding_match_failure", "WHY-KCT-BINDING-MATCH-FAILURE", 3, 0, false);
            declareFunction("kct_format_binding_sets_list", "KCT-FORMAT-BINDING-SETS-LIST", 1, 0, false);
            declareFunction("kbq_run_query_set", "KBQ-RUN-QUERY-SET", 1, 12, false);
            declareFunction("abort_kbq_run_query_set", "ABORT-KBQ-RUN-QUERY-SET", 0, 0, false);
            declareFunction("kbq_query_spec_set_elements", "KBQ-QUERY-SPEC-SET-ELEMENTS", 1, 2, false);
            declareFunction("sort_queries_by_sksi_modules_needed", "SORT-QUERIES-BY-SKSI-MODULES-NEEDED", 1, 0, false);
            declareFunction("sort_tests_by_sksi_modules_needed", "SORT-TESTS-BY-SKSI-MODULES-NEEDED", 1, 0, false);
            declareFunction("sort_terms_by_sksi_modules_needed", "SORT-TERMS-BY-SKSI-MODULES-NEEDED", 2, 0, false);
            declareFunction("sksi_modules_needed_sorted_memoized_internal", "SKSI-MODULES-NEEDED-SORTED-MEMOIZED-INTERNAL", 1, 0, false);
            declareFunction("sksi_modules_needed_sorted_memoized", "SKSI-MODULES-NEEDED-SORTED-MEMOIZED", 1, 0, false);
            declareFunction("query_sksi_modules_needed_sorted_memoized_internal", "QUERY-SKSI-MODULES-NEEDED-SORTED-MEMOIZED-INTERNAL", 1, 0, false);
            declareFunction("query_sksi_modules_needed_sorted_memoized", "QUERY-SKSI-MODULES-NEEDED-SORTED-MEMOIZED", 1, 0, false);
            declareFunction("all_instantiations_via_inference", "ALL-INSTANTIATIONS-VIA-INFERENCE", 2, 0, false);
            declareFunction("kbq_test_collection_to_query_set", "KBQ-TEST-COLLECTION-TO-QUERY-SET", 1, 0, false);
            declareFunction("run_kbq_query_spec_set_and_process_inferences", "RUN-KBQ-QUERY-SPEC-SET-AND-PROCESS-INFERENCES", 2, 1, false);
            declareFunction("run_kbq_and_process_inferences", "RUN-KBQ-AND-PROCESS-INFERENCES", 3, 0, false);
            declareFunction("run_kbq_and_generate_inferences", "RUN-KBQ-AND-GENERATE-INFERENCES", 3, 0, false);
            declareFunction("process_all_kbq_inferences", "PROCESS-ALL-KBQ-INFERENCES", 4, 0, false);
            declareFunction("kct_run_test_set", "KCT-RUN-TEST-SET", 1, 13, false);
            declareFunction("abort_kct_run_test_set", "ABORT-KCT-RUN-TEST-SET", 0, 0, false);
            declareFunction("kct_test_spec_set_elements", "KCT-TEST-SPEC-SET-ELEMENTS", 1, 2, false);
            declareMacro("run_kbq_experiment", "RUN-KBQ-EXPERIMENT");
            declareFunction("last_query_set_run", "LAST-QUERY-SET-RUN", 0, 0, false);
            declareFunction("run_kbq_experiment_internal", "RUN-KBQ-EXPERIMENT-INTERNAL", 1, 0, false);
            declareFunction("print_kbq_experiment_analysis_to_file", "PRINT-KBQ-EXPERIMENT-ANALYSIS-TO-FILE", 3, 0, false);
            declareFunction("kbq_erroring_queries", "KBQ-ERRORING-QUERIES", 1, 0, false);
            declareFunction("kbq_erroring_query_count", "KBQ-ERRORING-QUERY-COUNT", 1, 0, false);
            declareFunction("kbq_count_erroring_query_runs", "KBQ-COUNT-ERRORING-QUERY-RUNS", 1, 0, false);
            declareFunction("kbq_erroring_query_runP", "KBQ-ERRORING-QUERY-RUN?", 1, 0, false);
            declareFunction("kbq_if_file_exists_handling_p", "KBQ-IF-FILE-EXISTS-HANDLING-P", 1, 0, false);
            declareFunction("kbq_experiment_augmentability_status", "KBQ-EXPERIMENT-AUGMENTABILITY-STATUS", 2, 0, false);
            declareFunction("kbq_setup_file_handling", "KBQ-SETUP-FILE-HANDLING", 3, 0, false);
            declareFunction("kbq_queries_not_yet_run", "KBQ-QUERIES-NOT-YET-RUN", 2, 0, false);
            declareFunction("kbq_compute_rerun_errors_filename", "KBQ-COMPUTE-RERUN-ERRORS-FILENAME", 1, 0, false);
            declareFunction("kbq_candidate_rerun_errors_filename", "KBQ-CANDIDATE-RERUN-ERRORS-FILENAME", 2, 0, false);
            declareFunction("kbq_load_query_set_run_and_merge_reruns", "KBQ-LOAD-QUERY-SET-RUN-AND-MERGE-RERUNS", 1, 0, false);
            declareFunction("kbq_merge_query_set_run_with_rerun", "KBQ-MERGE-QUERY-SET-RUN-WITH-RERUN", 2, 0, false);
            declareMacro("run_kct_experiment", "RUN-KCT-EXPERIMENT");
            declareFunction("run_kct_experiment_internal", "RUN-KCT-EXPERIMENT-INTERNAL", 1, 0, false);
            declareFunction("print_kct_experiment_analysis_to_file", "PRINT-KCT-EXPERIMENT-ANALYSIS-TO-FILE", 4, 0, false);
            declareFunction("print_experiment_csv_to_file", "PRINT-EXPERIMENT-CSV-TO-FILE", 2, 0, false);
            declareFunction("kct_erroring_tests", "KCT-ERRORING-TESTS", 1, 0, false);
            declareFunction("kct_erroring_test_count", "KCT-ERRORING-TEST-COUNT", 1, 0, false);
            declareFunction("kct_count_erroring_test_runs", "KCT-COUNT-ERRORING-TEST-RUNS", 1, 0, false);
            declareFunction("kct_erroring_test_runP", "KCT-ERRORING-TEST-RUN?", 1, 0, false);
            declareFunction("kct_setup_file_handling", "KCT-SETUP-FILE-HANDLING", 3, 0, false);
            declareFunction("kct_tests_not_yet_run", "KCT-TESTS-NOT-YET-RUN", 2, 0, false);
            declareFunction("kct_compute_rerun_errors_filename", "KCT-COMPUTE-RERUN-ERRORS-FILENAME", 1, 0, false);
            declareFunction("kct_candidate_rerun_errors_filename", "KCT-CANDIDATE-RERUN-ERRORS-FILENAME", 2, 0, false);
            declareFunction("kct_load_test_set_run_and_merge_reruns", "KCT-LOAD-TEST-SET-RUN-AND-MERGE-RERUNS", 1, 0, false);
            declareFunction("kct_merge_test_set_run_with_rerun", "KCT-MERGE-TEST-SET-RUN-WITH-RERUN", 2, 0, false);
            declareFunction("kbq_runstate_validP", "KBQ-RUNSTATE-VALID?", 0, 0, false);
            declareFunction("kbq_runstate_inference_already_setP", "KBQ-RUNSTATE-INFERENCE-ALREADY-SET?", 0, 0, false);
            declareFunction("set_kbq_runstate_inference", "SET-KBQ-RUNSTATE-INFERENCE", 1, 0, false);
            declareFunction("possibly_set_kbq_runstate_inference", "POSSIBLY-SET-KBQ-RUNSTATE-INFERENCE", 1, 0, false);
            declareFunction("find_kbq_runstate_by_id", "FIND-KBQ-RUNSTATE-BY-ID", 1, 0, false);
            declareFunction("find_kbq_runstate_by_id_string", "FIND-KBQ-RUNSTATE-BY-ID-STRING", 1, 0, false);
            declareFunction("find_kct_runstate_by_id", "FIND-KCT-RUNSTATE-BY-ID", 1, 0, false);
            declareFunction("find_kct_runstate_by_id_string", "FIND-KCT-RUNSTATE-BY-ID-STRING", 1, 0, false);
            declareFunction("find_kct_set_runstate_by_id", "FIND-KCT-SET-RUNSTATE-BY-ID", 1, 0, false);
            declareFunction("find_kct_set_runstate_by_id_string", "FIND-KCT-SET-RUNSTATE-BY-ID-STRING", 1, 0, false);
            declareFunction("next_runstate_id", "NEXT-RUNSTATE-ID", 0, 0, false);
            declareFunction("runstate_add_object", "RUNSTATE-ADD-OBJECT", 2, 0, false);
            declareFunction("runstate_rem_object", "RUNSTATE-REM-OBJECT", 1, 0, false);
            declareFunction("runstate_find_object_by_id", "RUNSTATE-FIND-OBJECT-BY-ID", 1, 0, false);
            declareFunction("runstate_constant", "RUNSTATE-CONSTANT", 1, 0, false);
            declareFunction("runstate_result_status", "RUNSTATE-RESULT-STATUS", 1, 0, false);
            declareFunction("runstate_result_text", "RUNSTATE-RESULT-TEXT", 1, 0, false);
            declareFunction("runstate_run_status", "RUNSTATE-RUN-STATUS", 1, 0, false);
            declareFunction("runstate_inference", "RUNSTATE-INFERENCE", 1, 0, false);
            declareFunction("runstate_start", "RUNSTATE-START", 1, 0, false);
            declareFunction("runstate_end", "RUNSTATE-END", 1, 0, false);
            declareFunction("set_runstate_run_status", "SET-RUNSTATE-RUN-STATUS", 2, 0, false);
            declareFunction("destroy_runstate", "DESTROY-RUNSTATE", 1, 0, false);
            declareFunction("kbq_runstate_print_function_trampoline", "KBQ-RUNSTATE-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
            declareFunction("kbq_runstate_p", "KBQ-RUNSTATE-P", 1, 0, false);
            new kbq_query_run.$kbq_runstate_p$UnaryFunction();
            declareFunction("kbqr_id", "KBQR-ID", 1, 0, false);
            declareFunction("kbqr_lock", "KBQR-LOCK", 1, 0, false);
            declareFunction("kbqr_query_spec", "KBQR-QUERY-SPEC", 1, 0, false);
            declareFunction("kbqr_inference", "KBQR-INFERENCE", 1, 0, false);
            declareFunction("kbqr_result", "KBQR-RESULT", 1, 0, false);
            declareFunction("kbqr_test_runstate", "KBQR-TEST-RUNSTATE", 1, 0, false);
            declareFunction("kbqr_run_status", "KBQR-RUN-STATUS", 1, 0, false);
            declareFunction("_csetf_kbqr_id", "_CSETF-KBQR-ID", 2, 0, false);
            declareFunction("_csetf_kbqr_lock", "_CSETF-KBQR-LOCK", 2, 0, false);
            declareFunction("_csetf_kbqr_query_spec", "_CSETF-KBQR-QUERY-SPEC", 2, 0, false);
            declareFunction("_csetf_kbqr_inference", "_CSETF-KBQR-INFERENCE", 2, 0, false);
            declareFunction("_csetf_kbqr_result", "_CSETF-KBQR-RESULT", 2, 0, false);
            declareFunction("_csetf_kbqr_test_runstate", "_CSETF-KBQR-TEST-RUNSTATE", 2, 0, false);
            declareFunction("_csetf_kbqr_run_status", "_CSETF-KBQR-RUN-STATUS", 2, 0, false);
            declareFunction("make_kbq_runstate", "MAKE-KBQ-RUNSTATE", 0, 1, false);
            declareFunction("visit_defstruct_kbq_runstate", "VISIT-DEFSTRUCT-KBQ-RUNSTATE", 2, 0, false);
            declareFunction("visit_defstruct_object_kbq_runstate_method", "VISIT-DEFSTRUCT-OBJECT-KBQ-RUNSTATE-METHOD", 2, 0, false);
            declareFunction("new_kbq_runstate", "NEW-KBQ-RUNSTATE", 2, 0, false);
            declareFunction("destroy_kbq_runstate", "DESTROY-KBQ-RUNSTATE", 1, 0, false);
            declareFunction("kbq_runstate_query_spec", "KBQ-RUNSTATE-QUERY-SPEC", 1, 0, false);
            declareFunction("kbq_runstate_lock", "KBQ-RUNSTATE-LOCK", 1, 0, false);
            declareFunction("kbq_runstate_inference", "KBQ-RUNSTATE-INFERENCE", 1, 0, false);
            declareFunction("kbq_runstate_result", "KBQ-RUNSTATE-RESULT", 1, 0, false);
            declareFunction("kbq_runstate_test_runstate", "KBQ-RUNSTATE-TEST-RUNSTATE", 1, 0, false);
            declareFunction("kbq_runstate_run_status", "KBQ-RUNSTATE-RUN-STATUS", 1, 0, false);
            declareFunction("set_kbqr_inference", "SET-KBQR-INFERENCE", 2, 0, false);
            declareFunction("set_kbqr_result", "SET-KBQR-RESULT", 2, 0, false);
            declareFunction("set_kbqr_run_status", "SET-KBQR-RUN-STATUS", 2, 0, false);
            declareFunction("possibly_set_kbqr_run_status", "POSSIBLY-SET-KBQR-RUN-STATUS", 2, 0, false);
            declareFunction("kct_runstate_print_function_trampoline", "KCT-RUNSTATE-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
            declareFunction("kct_runstate_p", "KCT-RUNSTATE-P", 1, 0, false);
            new kbq_query_run.$kct_runstate_p$UnaryFunction();
            declareFunction("kctr_id", "KCTR-ID", 1, 0, false);
            declareFunction("kctr_lock", "KCTR-LOCK", 1, 0, false);
            declareFunction("kctr_test_spec", "KCTR-TEST-SPEC", 1, 0, false);
            declareFunction("kctr_result", "KCTR-RESULT", 1, 0, false);
            declareFunction("kctr_query_runstate", "KCTR-QUERY-RUNSTATE", 1, 0, false);
            declareFunction("kctr_test_set_runstate", "KCTR-TEST-SET-RUNSTATE", 1, 0, false);
            declareFunction("kctr_run_status", "KCTR-RUN-STATUS", 1, 0, false);
            declareFunction("kctr_start", "KCTR-START", 1, 0, false);
            declareFunction("kctr_end", "KCTR-END", 1, 0, false);
            declareFunction("_csetf_kctr_id", "_CSETF-KCTR-ID", 2, 0, false);
            declareFunction("_csetf_kctr_lock", "_CSETF-KCTR-LOCK", 2, 0, false);
            declareFunction("_csetf_kctr_test_spec", "_CSETF-KCTR-TEST-SPEC", 2, 0, false);
            declareFunction("_csetf_kctr_result", "_CSETF-KCTR-RESULT", 2, 0, false);
            declareFunction("_csetf_kctr_query_runstate", "_CSETF-KCTR-QUERY-RUNSTATE", 2, 0, false);
            declareFunction("_csetf_kctr_test_set_runstate", "_CSETF-KCTR-TEST-SET-RUNSTATE", 2, 0, false);
            declareFunction("_csetf_kctr_run_status", "_CSETF-KCTR-RUN-STATUS", 2, 0, false);
            declareFunction("_csetf_kctr_start", "_CSETF-KCTR-START", 2, 0, false);
            declareFunction("_csetf_kctr_end", "_CSETF-KCTR-END", 2, 0, false);
            declareFunction("make_kct_runstate", "MAKE-KCT-RUNSTATE", 0, 1, false);
            declareFunction("visit_defstruct_kct_runstate", "VISIT-DEFSTRUCT-KCT-RUNSTATE", 2, 0, false);
            declareFunction("visit_defstruct_object_kct_runstate_method", "VISIT-DEFSTRUCT-OBJECT-KCT-RUNSTATE-METHOD", 2, 0, false);
            declareFunction("new_kct_runstate", "NEW-KCT-RUNSTATE", 1, 1, false);
            declareFunction("destroy_kct_runstate", "DESTROY-KCT-RUNSTATE", 1, 0, false);
            declareFunction("kct_runstate_test_spec", "KCT-RUNSTATE-TEST-SPEC", 1, 0, false);
            declareFunction("kct_runstate_lock", "KCT-RUNSTATE-LOCK", 1, 0, false);
            declareFunction("kct_runstate_result", "KCT-RUNSTATE-RESULT", 1, 0, false);
            declareFunction("kct_runstate_query_runstate", "KCT-RUNSTATE-QUERY-RUNSTATE", 1, 0, false);
            declareFunction("kct_runstate_test_set_runstate", "KCT-RUNSTATE-TEST-SET-RUNSTATE", 1, 0, false);
            declareFunction("kct_runstate_inference", "KCT-RUNSTATE-INFERENCE", 1, 0, false);
            declareFunction("kct_runstate_result_status", "KCT-RUNSTATE-RESULT-STATUS", 1, 0, false);
            declareFunction("kct_runstate_failure_explanation", "KCT-RUNSTATE-FAILURE-EXPLANATION", 1, 0, false);
            declareFunction("kct_runstate_metric_value", "KCT-RUNSTATE-METRIC-VALUE", 2, 0, false);
            declareFunction("kct_runstate_run_status", "KCT-RUNSTATE-RUN-STATUS", 1, 0, false);
            declareFunction("kct_runstate_start", "KCT-RUNSTATE-START", 1, 0, false);
            declareFunction("kct_runstate_end", "KCT-RUNSTATE-END", 1, 0, false);
            declareFunction("set_kctr_result", "SET-KCTR-RESULT", 2, 0, false);
            declareFunction("set_kctr_query_runstate", "SET-KCTR-QUERY-RUNSTATE", 2, 0, false);
            declareFunction("set_kctr_test_set_runstate", "SET-KCTR-TEST-SET-RUNSTATE", 2, 0, false);
            declareFunction("set_kctr_run_status", "SET-KCTR-RUN-STATUS", 2, 0, false);
            declareFunction("set_kctr_start", "SET-KCTR-START", 1, 1, false);
            declareFunction("set_kctr_end", "SET-KCTR-END", 1, 1, false);
            declareFunction("kct_set_runstate_print_function_trampoline", "KCT-SET-RUNSTATE-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
            declareFunction("kct_set_runstate_p", "KCT-SET-RUNSTATE-P", 1, 0, false);
            new kbq_query_run.$kct_set_runstate_p$UnaryFunction();
            declareFunction("kctsr_id", "KCTSR-ID", 1, 0, false);
            declareFunction("kctsr_lock", "KCTSR-LOCK", 1, 0, false);
            declareFunction("kctsr_test_set", "KCTSR-TEST-SET", 1, 0, false);
            declareFunction("kctsr_result", "KCTSR-RESULT", 1, 0, false);
            declareFunction("kctsr_test_runstates", "KCTSR-TEST-RUNSTATES", 1, 0, false);
            declareFunction("kctsr_run_status", "KCTSR-RUN-STATUS", 1, 0, false);
            declareFunction("kctsr_start", "KCTSR-START", 1, 0, false);
            declareFunction("kctsr_end", "KCTSR-END", 1, 0, false);
            declareFunction("_csetf_kctsr_id", "_CSETF-KCTSR-ID", 2, 0, false);
            declareFunction("_csetf_kctsr_lock", "_CSETF-KCTSR-LOCK", 2, 0, false);
            declareFunction("_csetf_kctsr_test_set", "_CSETF-KCTSR-TEST-SET", 2, 0, false);
            declareFunction("_csetf_kctsr_result", "_CSETF-KCTSR-RESULT", 2, 0, false);
            declareFunction("_csetf_kctsr_test_runstates", "_CSETF-KCTSR-TEST-RUNSTATES", 2, 0, false);
            declareFunction("_csetf_kctsr_run_status", "_CSETF-KCTSR-RUN-STATUS", 2, 0, false);
            declareFunction("_csetf_kctsr_start", "_CSETF-KCTSR-START", 2, 0, false);
            declareFunction("_csetf_kctsr_end", "_CSETF-KCTSR-END", 2, 0, false);
            declareFunction("make_kct_set_runstate", "MAKE-KCT-SET-RUNSTATE", 0, 1, false);
            declareFunction("visit_defstruct_kct_set_runstate", "VISIT-DEFSTRUCT-KCT-SET-RUNSTATE", 2, 0, false);
            declareFunction("visit_defstruct_object_kct_set_runstate_method", "VISIT-DEFSTRUCT-OBJECT-KCT-SET-RUNSTATE-METHOD", 2, 0, false);
            declareFunction("new_kct_set_runstate", "NEW-KCT-SET-RUNSTATE", 1, 0, false);
            declareFunction("destroy_kct_set_runstate", "DESTROY-KCT-SET-RUNSTATE", 1, 0, false);
            declareFunction("kct_set_runstate_test_set", "KCT-SET-RUNSTATE-TEST-SET", 1, 0, false);
            declareFunction("kct_set_runstate_lock", "KCT-SET-RUNSTATE-LOCK", 1, 0, false);
            declareFunction("kct_set_runstate_result", "KCT-SET-RUNSTATE-RESULT", 1, 0, false);
            declareFunction("kct_set_runstate_test_runstates", "KCT-SET-RUNSTATE-TEST-RUNSTATES", 1, 0, false);
            declareFunction("kct_set_runstate_result_status", "KCT-SET-RUNSTATE-RESULT-STATUS", 1, 0, false);
            declareFunction("kct_set_runstate_run_status", "KCT-SET-RUNSTATE-RUN-STATUS", 1, 0, false);
            declareFunction("kct_set_runstate_start", "KCT-SET-RUNSTATE-START", 1, 0, false);
            declareFunction("kct_set_runstate_end", "KCT-SET-RUNSTATE-END", 1, 0, false);
            declareFunction("set_kctsr_result", "SET-KCTSR-RESULT", 2, 0, false);
            declareFunction("kctsr_test_runstate_add", "KCTSR-TEST-RUNSTATE-ADD", 2, 0, false);
            declareFunction("kctsr_test_runstate_remove", "KCTSR-TEST-RUNSTATE-REMOVE", 2, 0, false);
            declareFunction("set_kctsr_run_status", "SET-KCTSR-RUN-STATUS", 2, 0, false);
            declareFunction("set_kctsr_start", "SET-KCTSR-START", 1, 1, false);
            declareFunction("set_kctsr_end", "SET-KCTSR-END", 1, 1, false);
            declareFunction("kbq_save_query_set_run", "KBQ-SAVE-QUERY-SET-RUN", 2, 0, false);
            declareFunction("kct_save_test_set_run", "KCT-SAVE-TEST-SET-RUN", 2, 0, false);
            declareFunction("kbq_save_query_set_run_without_results", "KBQ-SAVE-QUERY-SET-RUN-WITHOUT-RESULTS", 2, 0, false);
            declareFunction("kbq_open_query_set_run_output_stream", "KBQ-OPEN-QUERY-SET-RUN-OUTPUT-STREAM", 1, 1, false);
            declareFunction("kct_open_test_set_run_output_stream", "KCT-OPEN-TEST-SET-RUN-OUTPUT-STREAM", 1, 1, false);
            declareFunction("kbq_save_query_set_run_preamble", "KBQ-SAVE-QUERY-SET-RUN-PREAMBLE", 1, 1, false);
            declareFunction("kct_save_test_set_run_preamble", "KCT-SAVE-TEST-SET-RUN-PREAMBLE", 1, 1, false);
            declareFunction("kbq_save_query_run", "KBQ-SAVE-QUERY-RUN", 2, 0, false);
            declareFunction("kct_save_test_run", "KCT-SAVE-TEST-RUN", 2, 0, false);
            declareMacro("do_query_set_run", "DO-QUERY-SET-RUN");
            declareMacro("do_query_set_run_query_runs", "DO-QUERY-SET-RUN-QUERY-RUNS");
            declareFunction("kbq_load_query_set_run", "KBQ-LOAD-QUERY-SET-RUN", 1, 0, false);
            declareFunction("kbq_load_query_set_run_int", "KBQ-LOAD-QUERY-SET-RUN-INT", 1, 0, false);
            declareFunction("kbq_load_query_run_int", "KBQ-LOAD-QUERY-RUN-INT", 1, 0, false);
            declareFunction("kbq_query_set_run_nmerge_query_runs", "KBQ-QUERY-SET-RUN-NMERGE-QUERY-RUNS", 2, 0, false);
            declareFunction("kct_load_test_set_run", "KCT-LOAD-TEST-SET-RUN", 1, 0, false);
            declareFunction("kct_test_set_run_nmerge_test_runs", "KCT-TEST-SET-RUN-NMERGE-TEST-RUNS", 2, 0, false);
            declareFunction("kbq_nclean_query_set_run", "KBQ-NCLEAN-QUERY-SET-RUN", 1, 0, false);
            declareFunction("kct_nclean_test_set_run", "KCT-NCLEAN-TEST-SET-RUN", 1, 0, false);
            declareFunction("kbq_nclean_query_run", "KBQ-NCLEAN-QUERY-RUN", 1, 0, false);
            declareFunction("kbq_strip_results_from_query_set_run_file", "KBQ-STRIP-RESULTS-FROM-QUERY-SET-RUN-FILE", 1, 1, false);
            declareFunction("kbq_strip_suffix_from_filename", "KBQ-STRIP-SUFFIX-FROM-FILENAME", 1, 0, false);
            declareFunction("kct_strip_suffix_from_filename", "KCT-STRIP-SUFFIX-FROM-FILENAME", 1, 0, false);
            declareFunction("kbq_filter_query_set_run_by_property_value", "KBQ-FILTER-QUERY-SET-RUN-BY-PROPERTY-VALUE", 4, 1, false);
            declareFunction("kbq_filter_query_set_run_by_test", "KBQ-FILTER-QUERY-SET-RUN-BY-TEST", 3, 1, false);
            declareFunction("kct_filter_test_set_run_by_test", "KCT-FILTER-TEST-SET-RUN-BY-TEST", 3, 1, false);
            declareFunction("kbq_answerable_query_set_run", "KBQ-ANSWERABLE-QUERY-SET-RUN", 1, 0, false);
            declareFunction("kct_answerable_test_set_run", "KCT-ANSWERABLE-TEST-SET-RUN", 1, 0, false);
            declareFunction("kct_succeeding_test_set_run", "KCT-SUCCEEDING-TEST-SET-RUN", 1, 0, false);
            declareFunction("kbq_unanswerable_query_set_run", "KBQ-UNANSWERABLE-QUERY-SET-RUN", 1, 0, false);
            declareFunction("kct_unanswerable_test_set_run", "KCT-UNANSWERABLE-TEST-SET-RUN", 1, 0, false);
            declareFunction("kct_failing_test_set_run", "KCT-FAILING-TEST-SET-RUN", 1, 0, false);
            declareFunction("kct_erroring_test_set_run", "KCT-ERRORING-TEST-SET-RUN", 1, 0, false);
            declareFunction("kct_common_sense_test_set_run", "KCT-COMMON-SENSE-TEST-SET-RUN", 1, 0, false);
            declareFunction("kct_regression_test_set_run", "KCT-REGRESSION-TEST-SET-RUN", 1, 0, false);
            declareFunction("kct_subcollection_test_set_run", "KCT-SUBCOLLECTION-TEST-SET-RUN", 2, 0, false);
            declareFunction("kct_failing_tests", "KCT-FAILING-TESTS", 1, 0, false);
            declareFunction("kct_succeeding_tests", "KCT-SUCCEEDING-TESTS", 1, 0, false);
            declareFunction("kct_answerable_tests", "KCT-ANSWERABLE-TESTS", 1, 0, false);
            declareFunction("kct_unanswerable_tests", "KCT-UNANSWERABLE-TESTS", 1, 0, false);
            declareFunction("kct_newly_failing_tests", "KCT-NEWLY-FAILING-TESTS", 2, 0, false);
            declareFunction("kbq_same_property_value_queries", "KBQ-SAME-PROPERTY-VALUE-QUERIES", 3, 2, false);
            declareFunction("kbq_mutually_answerable_queries", "KBQ-MUTUALLY-ANSWERABLE-QUERIES", 1, 0, false);
            declareFunction("kbq_mutually_unanswerable_queries", "KBQ-MUTUALLY-UNANSWERABLE-QUERIES", 1, 0, false);
            declareFunction("kbq_fast_queries", "KBQ-FAST-QUERIES", 1, 1, false);
            declareFunction("kct_mutually_succeeding_tests", "KCT-MUTUALLY-SUCCEEDING-TESTS", 1, 0, false);
            declareFunction("kct_mutually_failing_tests", "KCT-MUTUALLY-FAILING-TESTS", 1, 0, false);
            declareFunction("kbq_mutually_answerable_query_set_runs", "KBQ-MUTUALLY-ANSWERABLE-QUERY-SET-RUNS", 2, 0, false);
            declareFunction("kbq_mutually_unanswerable_query_set_runs", "KBQ-MUTUALLY-UNANSWERABLE-QUERY-SET-RUNS", 2, 0, false);
            declareFunction("kbq_query_set_runs_common_queries", "KBQ-QUERY-SET-RUNS-COMMON-QUERIES", 1, 0, false);
            declareFunction("kbq_common_queries_query_set_runs", "KBQ-COMMON-QUERIES-QUERY-SET-RUNS", 1, 0, false);
            declareFunction("kbq_common_queries_two_query_set_runs", "KBQ-COMMON-QUERIES-TWO-QUERY-SET-RUNS", 2, 0, false);
            declareFunction("kct_common_tests_test_set_runs", "KCT-COMMON-TESTS-TEST-SET-RUNS", 1, 0, false);
            declareFunction("kct_mutually_succeeding_test_set_runs", "KCT-MUTUALLY-SUCCEEDING-TEST-SET-RUNS", 2, 0, false);
            declareFunction("kct_mutually_failing_test_set_runs", "KCT-MUTUALLY-FAILING-TEST-SET-RUNS", 2, 0, false);
            declareFunction("kbq_same_answer_count_query_set_runs", "KBQ-SAME-ANSWER-COUNT-QUERY-SET-RUNS", 2, 0, false);
            declareFunction("kbq_different_answer_count_query_set_runs", "KBQ-DIFFERENT-ANSWER-COUNT-QUERY-SET-RUNS", 2, 0, false);
            declareFunction("kbq_filter_to_queries_int", "KBQ-FILTER-TO-QUERIES-INT", 3, 0, false);
            declareFunction("kbq_filter_query_set_run_to_queries_lambda", "KBQ-FILTER-QUERY-SET-RUN-TO-QUERIES-LAMBDA", 1, 0, false);
            declareFunction("kbq_filter_query_set_run_to_queries_not_lambda", "KBQ-FILTER-QUERY-SET-RUN-TO-QUERIES-NOT-LAMBDA", 1, 0, false);
            declareFunction("kbq_filter_query_set_run_to_queries", "KBQ-FILTER-QUERY-SET-RUN-TO-QUERIES", 2, 1, false);
            declareFunction("kct_filter_test_set_run_to_tests_lambda", "KCT-FILTER-TEST-SET-RUN-TO-TESTS-LAMBDA", 1, 0, false);
            declareFunction("kct_filter_test_set_run_to_tests_not_lambda", "KCT-FILTER-TEST-SET-RUN-TO-TESTS-NOT-LAMBDA", 1, 0, false);
            declareFunction("kct_filter_test_set_run_to_tests", "KCT-FILTER-TEST-SET-RUN-TO-TESTS", 2, 1, false);
            declareFunction("kbq_filter_query_set_run_to_query_collection", "KBQ-FILTER-QUERY-SET-RUN-TO-QUERY-COLLECTION", 2, 1, false);
            declareFunction("kct_filter_test_set_run_to_test_collection", "KCT-FILTER-TEST-SET-RUN-TO-TEST-COLLECTION", 2, 1, false);
            declareFunction("clear_cached_all_instances_among", "CLEAR-CACHED-ALL-INSTANCES-AMONG", 0, 0, false);
            new kbq_query_run.$clear_cached_all_instances_among$ZeroArityFunction();
            declareFunction("remove_cached_all_instances_among", "REMOVE-CACHED-ALL-INSTANCES-AMONG", 3, 0, false);
            declareFunction("cached_all_instances_among_internal", "CACHED-ALL-INSTANCES-AMONG-INTERNAL", 3, 0, false);
            declareFunction("cached_all_instances_among", "CACHED-ALL-INSTANCES-AMONG", 3, 0, false);
            declareFunction("kbq_queries_common_to_all_query_set_runs", "KBQ-QUERIES-COMMON-TO-ALL-QUERY-SET-RUNS", 1, 0, false);
            declareFunction("kct_tests_common_to_all_test_set_runs", "KCT-TESTS-COMMON-TO-ALL-TEST-SET-RUNS", 1, 0, false);
            declareFunction("kct_consistently_succeeding_tests", "KCT-CONSISTENTLY-SUCCEEDING-TESTS", 1, 0, false);
            declareFunction("kct_consistently_succeeding_test_set_runs", "KCT-CONSISTENTLY-SUCCEEDING-TEST-SET-RUNS", 1, 0, false);
            declareFunction("queries_that_became_unanswerable", "QUERIES-THAT-BECAME-UNANSWERABLE", 2, 0, false);
            declareFunction("queries_that_changed_answer_count", "QUERIES-THAT-CHANGED-ANSWER-COUNT", 2, 0, false);
            declareFunction("kbq_query_runs_with_worst_slowdown", "KBQ-QUERY-RUNS-WITH-WORST-SLOWDOWN", 2, 2, false);
            declareFunction("kbq_query_runs_with_worst_slowdown_robust", "KBQ-QUERY-RUNS-WITH-WORST-SLOWDOWN-ROBUST", 2, 2, false);
            declareFunction("kbq_slowest_query_runs", "KBQ-SLOWEST-QUERY-RUNS", 1, 2, false);
            declareFunction("kct_slowest_test_runs", "KCT-SLOWEST-TEST-RUNS", 1, 2, false);
            declareFunction("kbq_compare_query_set_run_answers", "KBQ-COMPARE-QUERY-SET-RUN-ANSWERS", 2, 0, false);
            declareFunction("kbq_summarize_compare_query_set_run_answers", "KBQ-SUMMARIZE-COMPARE-QUERY-SET-RUN-ANSWERS", 2, 0, false);
            declareFunction("kbq_sort_query_runs", "KBQ-SORT-QUERY-RUNS", 2, 0, false);
            declareFunction("kbq_lookup_query_run", "KBQ-LOOKUP-QUERY-RUN", 2, 0, false);
            declareFunction("kbq_lookup_query_run_from_query_runs", "KBQ-LOOKUP-QUERY-RUN-FROM-QUERY-RUNS", 2, 0, false);
            declareFunction("kbq_lookup_query_runs", "KBQ-LOOKUP-QUERY-RUNS", 2, 0, false);
            declareFunction("kbq_query_equal", "KBQ-QUERY-EQUAL", 2, 0, false);
            declareFunction("kbq_compare_query_run_answers", "KBQ-COMPARE-QUERY-RUN-ANSWERS", 2, 0, false);
            declareFunction("kbq_compare_query_set_runs_by_property", "KBQ-COMPARE-QUERY-SET-RUNS-BY-PROPERTY", 3, 1, false);
            declareFunction("show_query_runs_that_became_unanswerable", "SHOW-QUERY-RUNS-THAT-BECAME-UNANSWERABLE", 2, 3, false);
            declareFunction("show_query_runs_that_changed_answer_count", "SHOW-QUERY-RUNS-THAT-CHANGED-ANSWER-COUNT", 2, 3, false);
            declareFunction("show_query_runs_int", "SHOW-QUERY-RUNS-INT", 6, 0, false);
            declareFunction("kbq_query_set_run_answerable_counts", "KBQ-QUERY-SET-RUN-ANSWERABLE-COUNTS", 2, 0, false);
            declareFunction("kct_compare_test_set_run_statuses", "KCT-COMPARE-TEST-SET-RUN-STATUSES", 2, 0, false);
            declareFunction("kct_summarize_compare_test_set_run_statuses", "KCT-SUMMARIZE-COMPARE-TEST-SET-RUN-STATUSES", 2, 0, false);
            declareFunction("kct_lookup_test_run", "KCT-LOOKUP-TEST-RUN", 2, 0, false);
            declareFunction("kct_test_equal", "KCT-TEST-EQUAL", 2, 0, false);
            declareFunction("kct_compare_test_run_statuses", "KCT-COMPARE-TEST-RUN-STATUSES", 2, 0, false);
            declareFunction("kbq_analyze_query_set_runs", "KBQ-ANALYZE-QUERY-SET-RUNS", 2, 1, false);
            declareFunction("kct_analyze_test_set_runs", "KCT-ANALYZE-TEST-SET-RUNS", 2, 1, false);
            declareFunction("kbq_compare_analysis", "KBQ-COMPARE-ANALYSIS", 2, 0, false);
            declareFunction("significant_digits_if_float", "SIGNIFICANT-DIGITS-IF-FLOAT", 2, 0, false);
            declareFunction("kbq_print_analysis", "KBQ-PRINT-ANALYSIS", 1, 0, false);
            declareFunction("kbq_analyze_query_set_run", "KBQ-ANALYZE-QUERY-SET-RUN", 1, 1, false);
            declareFunction("kct_analyze_test_set_run", "KCT-ANALYZE-TEST-SET-RUN", 1, 1, false);
            declareFunction("kbq_analyze_query_runs", "KBQ-ANALYZE-QUERY-RUNS", 2, 0, false);
            declareFunction("kbq_query_set_run_total_answerable", "KBQ-QUERY-SET-RUN-TOTAL-ANSWERABLE", 1, 0, false);
            declareFunction("kbq_query_set_run_last_query_from_file", "KBQ-QUERY-SET-RUN-LAST-QUERY-FROM-FILE", 1, 0, false);
            declareFunction("kbq_query_set_run_identify_probable_segfault_from_file", "KBQ-QUERY-SET-RUN-IDENTIFY-PROBABLE-SEGFAULT-FROM-FILE", 2, 0, false);
            declareFunction("kbq_query_set_run_identify_probable_segfault", "KBQ-QUERY-SET-RUN-IDENTIFY-PROBABLE-SEGFAULT", 2, 0, false);
            declareFunction("kbq_query_set_run_identify_probable_segfault_int", "KBQ-QUERY-SET-RUN-IDENTIFY-PROBABLE-SEGFAULT-INT", 2, 0, false);
            declareFunction("kct_analyze_test_runs", "KCT-ANALYZE-TEST-RUNS", 2, 0, false);
            declareFunction("kct_test_set_run_identify_probable_segfault", "KCT-TEST-SET-RUN-IDENTIFY-PROBABLE-SEGFAULT", 2, 0, false);
            declareFunction("analyze_kbq_experiments", "ANALYZE-KBQ-EXPERIMENTS", 2, 5, false);
            declareFunction("kbq_non_lumpy_query_set_run", "KBQ-NON-LUMPY-QUERY-SET-RUN", 1, 0, false);
            declareFunction("kbq_lumpy_queries", "KBQ-LUMPY-QUERIES", 1, 0, false);
            declareFunction("kbq_lumpy_query_count", "KBQ-LUMPY-QUERY-COUNT", 1, 0, false);
            declareFunction("kbq_count_lumpy_query_runs", "KBQ-COUNT-LUMPY-QUERY-RUNS", 1, 0, false);
            declareFunction("kbq_lumpy_query_runP", "KBQ-LUMPY-QUERY-RUN?", 1, 0, false);
            declareFunction("show_kct_test_set_run_summary", "SHOW-KCT-TEST-SET-RUN-SUMMARY", 1, 1, false);
            declareFunction("kbq_show_halt_reason_histogram", "KBQ-SHOW-HALT-REASON-HISTOGRAM", 1, 0, false);
            declareFunction("trim_analysis_if_zero", "TRIM-ANALYSIS-IF-ZERO", 1, 0, false);
            declareFunction("kbq_query_literal_count", "KBQ-QUERY-LITERAL-COUNT", 1, 0, false);
            declareFunction("kbq_single_literal_query_p", "KBQ-SINGLE-LITERAL-QUERY-P", 1, 0, false);
            declareFunction("kbq_progress_stream", "KBQ-PROGRESS-STREAM", 0, 0, false);
            declareFunction("kbq_benchmark_run_and_report", "KBQ-BENCHMARK-RUN-AND-REPORT", 3, 0, false);
            declareFunction("kbq_benchmark_run_in_background", "KBQ-BENCHMARK-RUN-IN-BACKGROUND", 3, 0, false);
            declareFunction("kbq_benchmark_run", "KBQ-BENCHMARK-RUN", 3, 3, false);
            declareFunction("kbq_benchmark_report", "KBQ-BENCHMARK-REPORT", 1, 1, false);
            declareFunction("kbq_benchmark_report_for_test", "KBQ-BENCHMARK-REPORT-FOR-TEST", 2, 1, false);
            declareFunction("kct_run_support_set", "KCT-RUN-SUPPORT-SET", 1, 0, false);
            declareFunction("kct_run_supports_report", "KCT-RUN-SUPPORTS-REPORT", 1, 1, false);
            declareFunction("unknown_sentence_support_p", "UNKNOWN-SENTENCE-SUPPORT-P", 1, 0, false);
            declareFunction("kcts_using_only_these_sksi_sources", "KCTS-USING-ONLY-THESE-SKSI-SOURCES", 1, 0, false);
            declareFunction("kcts_for_sksi_source", "KCTS-FOR-SKSI-SOURCE", 1, 0, false);
            declareFunction("succeeding_kcts_for_sksi_source", "SUCCEEDING-KCTS-FOR-SKSI-SOURCE", 2, 0, false);
            declareFunction("failing_kcts_for_sksi_source", "FAILING-KCTS-FOR-SKSI-SOURCE", 2, 0, false);
            declareFunction("answerable_kcts_for_sksi_source", "ANSWERABLE-KCTS-FOR-SKSI-SOURCE", 2, 0, false);
            declareFunction("unanswerable_kcts_for_sksi_source", "UNANSWERABLE-KCTS-FOR-SKSI-SOURCE", 2, 0, false);
            declareFunction("erroring_kcts_for_sksi_source", "ERRORING-KCTS-FOR-SKSI-SOURCE", 2, 0, false);
            declareFunction("show_errors_for_sksi_source", "SHOW-ERRORS-FOR-SKSI-SOURCE", 2, 0, false);
            declareFunction("analyze_sksi_test_set_run", "ANALYZE-SKSI-TEST-SET-RUN", 2, 0, false);
        }
        if (SubLFiles.USE_V2) {
            declareFunction("kbq_run_query", "KBQ-RUN-QUERY", 1, 4, false);
            declareFunction("kbq_run_query_and_maybe_destroy", "KBQ-RUN-QUERY-AND-MAYBE-DESTROY", 4, 0, false);
            declareFunction("kbq_run_query_int", "KBQ-RUN-QUERY-INT", 3, 0, false);
            declareFunction("kct_compute_test_status", "KCT-COMPUTE-TEST-STATUS", 2, 0, false);
            declareFunction("kct_test_query_results_satisfy_exact_set_of_binding_sets", "KCT-TEST-QUERY-RESULTS-SATISFY-EXACT-SET-OF-BINDING-SETS", 2, 0, false);
            declareFunction("kct_test_query_results_satisfy_wanted_binding_sets", "KCT-TEST-QUERY-RESULTS-SATISFY-WANTED-BINDING-SETS", 2, 0, false);
            declareFunction("kct_test_query_results_satisfy_unwanted_binding_sets", "KCT-TEST-QUERY-RESULTS-SATISFY-UNWANTED-BINDING-SETS", 2, 0, false);
            declareFunction("why_kct_failure", "WHY-KCT-FAILURE", 2, 0, false);
            declareFunction("why_kct_binding_match_failure", "WHY-KCT-BINDING-MATCH-FAILURE", 2, 0, false);
            declareFunction("print_kct_experiment_analysis_to_file", "PRINT-KCT-EXPERIMENT-ANALYSIS-TO-FILE", 3, 0, false);
        }
        return NIL;
    }

    public static SubLObject declare_kbq_query_run_file_Previous() {
        declareFunction("kct_success_result_p", "KCT-SUCCESS-RESULT-P", 1, 0, false);
        declareFunction("kct_failure_result_p", "KCT-FAILURE-RESULT-P", 1, 0, false);
        declareFunction("kct_error_result_p", "KCT-ERROR-RESULT-P", 1, 0, false);
        declareFunction("kbq_cfasl_common_symbols", "KBQ-CFASL-COMMON-SYMBOLS", 0, 0, false);
        declareFunction("kbq_cfasl_common_symbols_simple", "KBQ-CFASL-COMMON-SYMBOLS-SIMPLE", 0, 0, false);
        declareMacro("with_kbq_query_set_run", "WITH-KBQ-QUERY-SET-RUN");
        declareFunction("kbq_query_run_p", "KBQ-QUERY-RUN-P", 1, 0, false);
        declareFunction("kbq_discard_query_run_result", "KBQ-DISCARD-QUERY-RUN-RESULT", 1, 0, false);
        declareFunction("kbq_discard_query_run_properties", "KBQ-DISCARD-QUERY-RUN-PROPERTIES", 2, 0, false);
        declareFunction("kbq_query_run_query", "KBQ-QUERY-RUN-QUERY", 1, 0, false);
        declareFunction("kbq_query_run_result", "KBQ-QUERY-RUN-RESULT", 1, 0, false);
        declareFunction("kbq_extract_query_run_metric_value", "KBQ-EXTRACT-QUERY-RUN-METRIC-VALUE", 2, 1, false);
        declareFunction("kbq_query_run_answerableP", "KBQ-QUERY-RUN-ANSWERABLE?", 1, 0, false);
        declareFunction("kbq_query_run_unanswerableP", "KBQ-QUERY-RUN-UNANSWERABLE?", 1, 0, false);
        declareFunction("kbq_query_run_answer_count", "KBQ-QUERY-RUN-ANSWER-COUNT", 1, 0, false);
        declareFunction("kbq_query_run_hypothesization_time", "KBQ-QUERY-RUN-HYPOTHESIZATION-TIME", 1, 0, false);
        declareFunction("kbq_query_run_total_time", "KBQ-QUERY-RUN-TOTAL-TIME", 1, 0, false);
        declareFunction("kbq_query_run_complete_total_time", "KBQ-QUERY-RUN-COMPLETE-TOTAL-TIME", 1, 0, false);
        declareFunction("kbq_query_run_time_to_first_answer", "KBQ-QUERY-RUN-TIME-TO-FIRST-ANSWER", 1, 0, false);
        declareFunction("kbq_query_run_time_to_last_answer", "KBQ-QUERY-RUN-TIME-TO-LAST-ANSWER", 1, 0, false);
        declareFunction("kbq_query_run_complete_time_to_first_answer", "KBQ-QUERY-RUN-COMPLETE-TIME-TO-FIRST-ANSWER", 1, 0, false);
        declareFunction("kbq_query_run_complete_time_to_last_answer", "KBQ-QUERY-RUN-COMPLETE-TIME-TO-LAST-ANSWER", 1, 0, false);
        declareFunction("kbq_query_run_total_steps", "KBQ-QUERY-RUN-TOTAL-STEPS", 1, 0, false);
        declareFunction("kbq_query_run_steps_to_first_answer", "KBQ-QUERY-RUN-STEPS-TO-FIRST-ANSWER", 1, 0, false);
        declareFunction("kbq_query_run_steps_to_last_answer", "KBQ-QUERY-RUN-STEPS-TO-LAST-ANSWER", 1, 0, false);
        declareFunction("kbq_extract_query_run_property_value", "KBQ-EXTRACT-QUERY-RUN-PROPERTY-VALUE", 2, 0, false);
        declareFunction("kbq_query_run_property_value", "KBQ-QUERY-RUN-PROPERTY-VALUE", 2, 1, false);
        declareFunction("kbq_internal_real_time_to_seconds", "KBQ-INTERNAL-REAL-TIME-TO-SECONDS", 1, 0, false);
        declareFunction("kbq_seconds_to_internal_real_time", "KBQ-SECONDS-TO-INTERNAL-REAL-TIME", 1, 0, false);
        declareFunction("kbq_query_run_halt_reason", "KBQ-QUERY-RUN-HALT-REASON", 1, 0, false);
        declareFunction("kbq_query_run_timed_outP", "KBQ-QUERY-RUN-TIMED-OUT?", 1, 0, false);
        declareFunction("kbq_query_run_tautologyP", "KBQ-QUERY-RUN-TAUTOLOGY?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_less_than_1000_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-1000-SECONDS?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_less_than_100_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-100-SECONDS?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_less_than_10_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-10-SECONDS?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_less_than_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-A-SECOND?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_less_than_a_tenth_of_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-A-TENTH-OF-A-SECOND?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_less_than_a_hundredth_of_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-LESS-THAN-A-HUNDREDTH-OF-A-SECOND?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_more_than_1000_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-1000-SECONDS?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_more_than_100_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-100-SECONDS?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_more_than_10_secondsP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-10-SECONDS?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_more_than_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-A-SECOND?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_more_than_a_tenth_of_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-A-TENTH-OF-A-SECOND?", 1, 0, false);
        declareFunction("kbq_query_run_total_time_more_than_a_hundredth_of_a_secondP", "KBQ-QUERY-RUN-TOTAL-TIME-MORE-THAN-A-HUNDREDTH-OF-A-SECOND?", 1, 0, false);
        declareFunction("kbq_query_run_more_than_1000_answersP", "KBQ-QUERY-RUN-MORE-THAN-1000-ANSWERS?", 1, 0, false);
        declareFunction("kbq_query_run_inference_proof_spec_cons_count", "KBQ-QUERY-RUN-INFERENCE-PROOF-SPEC-CONS-COUNT", 1, 0, false);
        declareFunction("kbq_sentence_truth_query_runP", "KBQ-SENTENCE-TRUTH-QUERY-RUN?", 1, 0, false);
        declareFunction("compute_new_root_relative_answer_times", "COMPUTE-NEW-ROOT-RELATIVE-ANSWER-TIMES", 2, 0, false);
        declareFunction("kct_test_run_p", "KCT-TEST-RUN-P", 1, 0, false);
        declareFunction("kct_make_test_run", "KCT-MAKE-TEST-RUN", 3, 0, false);
        declareFunction("kct_test_run_test", "KCT-TEST-RUN-TEST", 1, 0, false);
        declareFunction("kct_test_run_query_run", "KCT-TEST-RUN-QUERY-RUN", 1, 0, false);
        declareFunction("kct_test_run_status", "KCT-TEST-RUN-STATUS", 1, 0, false);
        declareFunction("kct_test_run_answer_count", "KCT-TEST-RUN-ANSWER-COUNT", 1, 0, false);
        declareFunction("kbq_query_set_run_p", "KBQ-QUERY-SET-RUN-P", 1, 0, false);
        declareFunction("kbq_make_query_set_run", "KBQ-MAKE-QUERY-SET-RUN", 1, 1, false);
        declareFunction("kbq_nmerge_query_set_runs", "KBQ-NMERGE-QUERY-SET-RUNS", 1, 1, false);
        declareFunction("kbq_discard_query_set_run_results", "KBQ-DISCARD-QUERY-SET-RUN-RESULTS", 1, 0, false);
        declareFunction("kbq_discard_query_set_run_properties", "KBQ-DISCARD-QUERY-SET-RUN-PROPERTIES", 2, 0, false);
        declareFunction("kbq_make_query_set_run_from_test_set_run", "KBQ-MAKE-QUERY-SET-RUN-FROM-TEST-SET-RUN", 1, 0, false);
        declareFunction("kbq_query_set_run_property_value", "KBQ-QUERY-SET-RUN-PROPERTY-VALUE", 2, 1, false);
        declareFunction("kbq_query_set_run_comment", "KBQ-QUERY-SET-RUN-COMMENT", 1, 0, false);
        declareFunction("kbq_query_set_run_query_runs", "KBQ-QUERY-SET-RUN-QUERY-RUNS", 1, 0, false);
        declareFunction("kbq_query_set_run_patch_level", "KBQ-QUERY-SET-RUN-PATCH-LEVEL", 1, 0, false);
        declareFunction("kbq_query_set_run_internal_time_units_per_second", "KBQ-QUERY-SET-RUN-INTERNAL-TIME-UNITS-PER-SECOND", 1, 0, false);
        declareFunction("kbq_query_set_run_put_query_run_property", "KBQ-QUERY-SET-RUN-PUT-QUERY-RUN-PROPERTY", 3, 0, false);
        declareFunction("kbq_extract_query_property_values", "KBQ-EXTRACT-QUERY-PROPERTY-VALUES", 2, 0, false);
        declareFunction("kbq_extract_metric_values", "KBQ-EXTRACT-METRIC-VALUES", 2, 1, false);
        declareFunction("kbq_extract_property_values", "KBQ-EXTRACT-PROPERTY-VALUES", 2, 1, false);
        declareFunction("kbq_query_set_run_queries", "KBQ-QUERY-SET-RUN-QUERIES", 1, 0, false);
        declareFunction("kbq_query_set_run_query_count", "KBQ-QUERY-SET-RUN-QUERY-COUNT", 1, 0, false);
        declareFunction("kbq_query_set_run_valid_queries", "KBQ-QUERY-SET-RUN-VALID-QUERIES", 1, 0, false);
        declareFunction("kbq_query_set_run_runnable_queries", "KBQ-QUERY-SET-RUN-RUNNABLE-QUERIES", 1, 0, false);
        declareFunction("kbq_query_set_run_remove_invalid_queries", "KBQ-QUERY-SET-RUN-REMOVE-INVALID-QUERIES", 1, 0, false);
        declareFunction("kbq_query_set_run_remove_unrunnable_queries", "KBQ-QUERY-SET-RUN-REMOVE-UNRUNNABLE-QUERIES", 1, 0, false);
        declareFunction("kbq_compute_pad_table", "KBQ-COMPUTE-PAD-TABLE", 1, 0, false);
        declareFunction("kbq_queries_within_n_of_median", "KBQ-QUERIES-WITHIN-N-OF-MEDIAN", 2, 1, false);
        declareFunction("kbq_median_metric", "KBQ-MEDIAN-METRIC", 1, 0, false);
        declareFunction("kbq_mean_metric", "KBQ-MEAN-METRIC", 1, 0, false);
        declareFunction("kbq_function_for_metric", "KBQ-FUNCTION-FOR-METRIC", 1, 0, false);
        declareFunction("kct_test_set_run_p", "KCT-TEST-SET-RUN-P", 1, 0, false);
        declareFunction("kct_make_test_set_run", "KCT-MAKE-TEST-SET-RUN", 1, 1, false);
        declareFunction("kct_nmerge_test_set_runs", "KCT-NMERGE-TEST-SET-RUNS", 1, 1, false);
        declareFunction("kct_test_set_run_comment", "KCT-TEST-SET-RUN-COMMENT", 1, 0, false);
        declareFunction("kct_test_set_run_internal_time_units_per_second", "KCT-TEST-SET-RUN-INTERNAL-TIME-UNITS-PER-SECOND", 1, 0, false);
        declareFunction("kct_test_set_run_test_runs", "KCT-TEST-SET-RUN-TEST-RUNS", 1, 0, false);
        declareFunction("kct_test_set_run_tests", "KCT-TEST-SET-RUN-TESTS", 1, 0, false);
        declareFunction("kct_test_set_run_valid_tests", "KCT-TEST-SET-RUN-VALID-TESTS", 1, 0, false);
        declareFunction("kct_test_set_run_remove_invalid_tests", "KCT-TEST-SET-RUN-REMOVE-INVALID-TESTS", 1, 0, false);
        declareFunction("kbq_run_query", "KBQ-RUN-QUERY", 1, 5, false);
        declareFunction("abort_kbq_run_query", "ABORT-KBQ-RUN-QUERY", 0, 0, false);
        declareFunction("kbq_run_query_and_maybe_destroy", "KBQ-RUN-QUERY-AND-MAYBE-DESTROY", 4, 1, false);
        declareFunction("kbq_run_query_problem_store", "KBQ-RUN-QUERY-PROBLEM-STORE", 1, 1, false);
        declareFunction("kbq_run_query_int", "KBQ-RUN-QUERY-INT", 3, 1, false);
        declareFunction("ensure_sksi_modules_needed", "ENSURE-SKSI-MODULES-NEEDED", 1, 0, false);
        declareFunction("ensure_only_sksi_modules_needed", "ENSURE-ONLY-SKSI-MODULES-NEEDED", 1, 0, false);
        declareFunction("sksi_modules_needed", "SKSI-MODULES-NEEDED", 1, 0, false);
        declareFunction("query_sksi_modules_needed", "QUERY-SKSI-MODULES-NEEDED", 1, 0, false);
        declareFunction("any_kct_followup_test_formula_gafsP", "ANY-KCT-FOLLOWUP-TEST-FORMULA-GAFS?", 1, 0, false);
        declareFunction("kct_run_test", "KCT-RUN-TEST", 1, 5, false);
        declareFunction("kb_test_metrics_to_query_metrics", "KB-TEST-METRICS-TO-QUERY-METRICS", 1, 0, false);
        declareFunction("kb_test_metric_to_query_metric", "KB-TEST-METRIC-TO-QUERY-METRIC", 1, 0, false);
        declareFunction("kct_compute_test_status", "KCT-COMPUTE-TEST-STATUS", 3, 0, false);
        declareFunction("kct_compute_janus_test_status", "KCT-COMPUTE-JANUS-TEST-STATUS", 2, 0, false);
        declareFunction("kct_followup_test_formula_all_holdsP", "KCT-FOLLOWUP-TEST-FORMULA-ALL-HOLDS?", 7, 0, false);
        declareFunction("kct_followup_test_formula_some_holdsP", "KCT-FOLLOWUP-TEST-FORMULA-SOME-HOLDS?", 6, 0, false);
        declareFunction("kct_followup_test_formula_none_holdsP", "KCT-FOLLOWUP-TEST-FORMULA-NONE-HOLDS?", 6, 0, false);
        declareFunction("kct_followup_test_formula_result", "KCT-FOLLOWUP-TEST-FORMULA-RESULT", 6, 0, false);
        declareFunction("kct_test_query_results_satisfy_exact_set_of_binding_sets", "KCT-TEST-QUERY-RESULTS-SATISFY-EXACT-SET-OF-BINDING-SETS", 3, 0, false);
        declareFunction("kct_test_query_results_satisfy_wanted_binding_sets", "KCT-TEST-QUERY-RESULTS-SATISFY-WANTED-BINDING-SETS", 3, 0, false);
        declareFunction("kct_test_query_results_satisfy_unwanted_binding_sets", "KCT-TEST-QUERY-RESULTS-SATISFY-UNWANTED-BINDING-SETS", 3, 0, false);
        declareFunction("kct_test_query_results_satisfy_binding_sets_cardinality", "KCT-TEST-QUERY-RESULTS-SATISFY-BINDING-SETS-CARDINALITY", 2, 0, false);
        declareFunction("kct_test_query_results_satisfy_binding_sets_min_cardinality", "KCT-TEST-QUERY-RESULTS-SATISFY-BINDING-SETS-MIN-CARDINALITY", 2, 0, false);
        declareFunction("kct_test_query_results_satisfy_binding_sets_max_cardinality", "KCT-TEST-QUERY-RESULTS-SATISFY-BINDING-SETS-MAX-CARDINALITY", 2, 0, false);
        declareFunction("kct_test_query_results_satisfy_best_multiple_choice_option", "KCT-TEST-QUERY-RESULTS-SATISFY-BEST-MULTIPLE-CHOICE-OPTION", 2, 0, false);
        declareFunction("why_kct_failure", "WHY-KCT-FAILURE", 3, 0, false);
        declareFunction("why_kct_multiple_choice_option_failure", "WHY-KCT-MULTIPLE-CHOICE-OPTION-FAILURE", 2, 0, false);
        declareFunction("why_kct_binding_cardinality_failure", "WHY-KCT-BINDING-CARDINALITY-FAILURE", 2, 0, false);
        declareFunction("why_kct_binding_match_failure", "WHY-KCT-BINDING-MATCH-FAILURE", 3, 0, false);
        declareFunction("kct_format_binding_sets_list", "KCT-FORMAT-BINDING-SETS-LIST", 1, 0, false);
        declareFunction("kbq_run_query_set", "KBQ-RUN-QUERY-SET", 1, 12, false);
        declareFunction("abort_kbq_run_query_set", "ABORT-KBQ-RUN-QUERY-SET", 0, 0, false);
        declareFunction("kbq_query_spec_set_elements", "KBQ-QUERY-SPEC-SET-ELEMENTS", 1, 2, false);
        declareFunction("sort_queries_by_sksi_modules_needed", "SORT-QUERIES-BY-SKSI-MODULES-NEEDED", 1, 0, false);
        declareFunction("sort_tests_by_sksi_modules_needed", "SORT-TESTS-BY-SKSI-MODULES-NEEDED", 1, 0, false);
        declareFunction("sort_terms_by_sksi_modules_needed", "SORT-TERMS-BY-SKSI-MODULES-NEEDED", 2, 0, false);
        declareFunction("sksi_modules_needed_sorted_memoized_internal", "SKSI-MODULES-NEEDED-SORTED-MEMOIZED-INTERNAL", 1, 0, false);
        declareFunction("sksi_modules_needed_sorted_memoized", "SKSI-MODULES-NEEDED-SORTED-MEMOIZED", 1, 0, false);
        declareFunction("query_sksi_modules_needed_sorted_memoized_internal", "QUERY-SKSI-MODULES-NEEDED-SORTED-MEMOIZED-INTERNAL", 1, 0, false);
        declareFunction("query_sksi_modules_needed_sorted_memoized", "QUERY-SKSI-MODULES-NEEDED-SORTED-MEMOIZED", 1, 0, false);
        declareFunction("all_instantiations_via_inference", "ALL-INSTANTIATIONS-VIA-INFERENCE", 2, 0, false);
        declareFunction("kbq_test_collection_to_query_set", "KBQ-TEST-COLLECTION-TO-QUERY-SET", 1, 0, false);
        declareFunction("run_kbq_query_spec_set_and_process_inferences", "RUN-KBQ-QUERY-SPEC-SET-AND-PROCESS-INFERENCES", 2, 1, false);
        declareFunction("run_kbq_and_process_inferences", "RUN-KBQ-AND-PROCESS-INFERENCES", 3, 0, false);
        declareFunction("run_kbq_and_generate_inferences", "RUN-KBQ-AND-GENERATE-INFERENCES", 3, 0, false);
        declareFunction("process_all_kbq_inferences", "PROCESS-ALL-KBQ-INFERENCES", 4, 0, false);
        declareFunction("kct_run_test_set", "KCT-RUN-TEST-SET", 1, 13, false);
        declareFunction("abort_kct_run_test_set", "ABORT-KCT-RUN-TEST-SET", 0, 0, false);
        declareFunction("kct_test_spec_set_elements", "KCT-TEST-SPEC-SET-ELEMENTS", 1, 2, false);
        declareMacro("run_kbq_experiment", "RUN-KBQ-EXPERIMENT");
        declareFunction("last_query_set_run", "LAST-QUERY-SET-RUN", 0, 0, false);
        declareFunction("run_kbq_experiment_internal", "RUN-KBQ-EXPERIMENT-INTERNAL", 1, 0, false);
        declareFunction("print_kbq_experiment_analysis_to_file", "PRINT-KBQ-EXPERIMENT-ANALYSIS-TO-FILE", 3, 0, false);
        declareFunction("kbq_erroring_queries", "KBQ-ERRORING-QUERIES", 1, 0, false);
        declareFunction("kbq_erroring_query_count", "KBQ-ERRORING-QUERY-COUNT", 1, 0, false);
        declareFunction("kbq_count_erroring_query_runs", "KBQ-COUNT-ERRORING-QUERY-RUNS", 1, 0, false);
        declareFunction("kbq_erroring_query_runP", "KBQ-ERRORING-QUERY-RUN?", 1, 0, false);
        declareFunction("kbq_if_file_exists_handling_p", "KBQ-IF-FILE-EXISTS-HANDLING-P", 1, 0, false);
        declareFunction("kbq_experiment_augmentability_status", "KBQ-EXPERIMENT-AUGMENTABILITY-STATUS", 2, 0, false);
        declareFunction("kbq_setup_file_handling", "KBQ-SETUP-FILE-HANDLING", 3, 0, false);
        declareFunction("kbq_queries_not_yet_run", "KBQ-QUERIES-NOT-YET-RUN", 2, 0, false);
        declareFunction("kbq_compute_rerun_errors_filename", "KBQ-COMPUTE-RERUN-ERRORS-FILENAME", 1, 0, false);
        declareFunction("kbq_candidate_rerun_errors_filename", "KBQ-CANDIDATE-RERUN-ERRORS-FILENAME", 2, 0, false);
        declareFunction("kbq_load_query_set_run_and_merge_reruns", "KBQ-LOAD-QUERY-SET-RUN-AND-MERGE-RERUNS", 1, 0, false);
        declareFunction("kbq_merge_query_set_run_with_rerun", "KBQ-MERGE-QUERY-SET-RUN-WITH-RERUN", 2, 0, false);
        declareMacro("run_kct_experiment", "RUN-KCT-EXPERIMENT");
        declareFunction("run_kct_experiment_internal", "RUN-KCT-EXPERIMENT-INTERNAL", 1, 0, false);
        declareFunction("print_kct_experiment_analysis_to_file", "PRINT-KCT-EXPERIMENT-ANALYSIS-TO-FILE", 4, 0, false);
        declareFunction("print_experiment_csv_to_file", "PRINT-EXPERIMENT-CSV-TO-FILE", 2, 0, false);
        declareFunction("kct_erroring_tests", "KCT-ERRORING-TESTS", 1, 0, false);
        declareFunction("kct_erroring_test_count", "KCT-ERRORING-TEST-COUNT", 1, 0, false);
        declareFunction("kct_count_erroring_test_runs", "KCT-COUNT-ERRORING-TEST-RUNS", 1, 0, false);
        declareFunction("kct_erroring_test_runP", "KCT-ERRORING-TEST-RUN?", 1, 0, false);
        declareFunction("kct_setup_file_handling", "KCT-SETUP-FILE-HANDLING", 3, 0, false);
        declareFunction("kct_tests_not_yet_run", "KCT-TESTS-NOT-YET-RUN", 2, 0, false);
        declareFunction("kct_compute_rerun_errors_filename", "KCT-COMPUTE-RERUN-ERRORS-FILENAME", 1, 0, false);
        declareFunction("kct_candidate_rerun_errors_filename", "KCT-CANDIDATE-RERUN-ERRORS-FILENAME", 2, 0, false);
        declareFunction("kct_load_test_set_run_and_merge_reruns", "KCT-LOAD-TEST-SET-RUN-AND-MERGE-RERUNS", 1, 0, false);
        declareFunction("kct_merge_test_set_run_with_rerun", "KCT-MERGE-TEST-SET-RUN-WITH-RERUN", 2, 0, false);
        declareFunction("kbq_runstate_validP", "KBQ-RUNSTATE-VALID?", 0, 0, false);
        declareFunction("kbq_runstate_inference_already_setP", "KBQ-RUNSTATE-INFERENCE-ALREADY-SET?", 0, 0, false);
        declareFunction("set_kbq_runstate_inference", "SET-KBQ-RUNSTATE-INFERENCE", 1, 0, false);
        declareFunction("possibly_set_kbq_runstate_inference", "POSSIBLY-SET-KBQ-RUNSTATE-INFERENCE", 1, 0, false);
        declareFunction("find_kbq_runstate_by_id", "FIND-KBQ-RUNSTATE-BY-ID", 1, 0, false);
        declareFunction("find_kbq_runstate_by_id_string", "FIND-KBQ-RUNSTATE-BY-ID-STRING", 1, 0, false);
        declareFunction("find_kct_runstate_by_id", "FIND-KCT-RUNSTATE-BY-ID", 1, 0, false);
        declareFunction("find_kct_runstate_by_id_string", "FIND-KCT-RUNSTATE-BY-ID-STRING", 1, 0, false);
        declareFunction("find_kct_set_runstate_by_id", "FIND-KCT-SET-RUNSTATE-BY-ID", 1, 0, false);
        declareFunction("find_kct_set_runstate_by_id_string", "FIND-KCT-SET-RUNSTATE-BY-ID-STRING", 1, 0, false);
        declareFunction("next_runstate_id", "NEXT-RUNSTATE-ID", 0, 0, false);
        declareFunction("runstate_add_object", "RUNSTATE-ADD-OBJECT", 2, 0, false);
        declareFunction("runstate_rem_object", "RUNSTATE-REM-OBJECT", 1, 0, false);
        declareFunction("runstate_find_object_by_id", "RUNSTATE-FIND-OBJECT-BY-ID", 1, 0, false);
        declareFunction("runstate_constant", "RUNSTATE-CONSTANT", 1, 0, false);
        declareFunction("runstate_result_status", "RUNSTATE-RESULT-STATUS", 1, 0, false);
        declareFunction("runstate_result_text", "RUNSTATE-RESULT-TEXT", 1, 0, false);
        declareFunction("runstate_run_status", "RUNSTATE-RUN-STATUS", 1, 0, false);
        declareFunction("runstate_inference", "RUNSTATE-INFERENCE", 1, 0, false);
        declareFunction("runstate_start", "RUNSTATE-START", 1, 0, false);
        declareFunction("runstate_end", "RUNSTATE-END", 1, 0, false);
        declareFunction("set_runstate_run_status", "SET-RUNSTATE-RUN-STATUS", 2, 0, false);
        declareFunction("destroy_runstate", "DESTROY-RUNSTATE", 1, 0, false);
        declareFunction("kbq_runstate_print_function_trampoline", "KBQ-RUNSTATE-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        declareFunction("kbq_runstate_p", "KBQ-RUNSTATE-P", 1, 0, false);
        new kbq_query_run.$kbq_runstate_p$UnaryFunction();
        declareFunction("kbqr_id", "KBQR-ID", 1, 0, false);
        declareFunction("kbqr_lock", "KBQR-LOCK", 1, 0, false);
        declareFunction("kbqr_query_spec", "KBQR-QUERY-SPEC", 1, 0, false);
        declareFunction("kbqr_inference", "KBQR-INFERENCE", 1, 0, false);
        declareFunction("kbqr_result", "KBQR-RESULT", 1, 0, false);
        declareFunction("kbqr_test_runstate", "KBQR-TEST-RUNSTATE", 1, 0, false);
        declareFunction("kbqr_run_status", "KBQR-RUN-STATUS", 1, 0, false);
        declareFunction("_csetf_kbqr_id", "_CSETF-KBQR-ID", 2, 0, false);
        declareFunction("_csetf_kbqr_lock", "_CSETF-KBQR-LOCK", 2, 0, false);
        declareFunction("_csetf_kbqr_query_spec", "_CSETF-KBQR-QUERY-SPEC", 2, 0, false);
        declareFunction("_csetf_kbqr_inference", "_CSETF-KBQR-INFERENCE", 2, 0, false);
        declareFunction("_csetf_kbqr_result", "_CSETF-KBQR-RESULT", 2, 0, false);
        declareFunction("_csetf_kbqr_test_runstate", "_CSETF-KBQR-TEST-RUNSTATE", 2, 0, false);
        declareFunction("_csetf_kbqr_run_status", "_CSETF-KBQR-RUN-STATUS", 2, 0, false);
        declareFunction("make_kbq_runstate", "MAKE-KBQ-RUNSTATE", 0, 1, false);
        declareFunction("visit_defstruct_kbq_runstate", "VISIT-DEFSTRUCT-KBQ-RUNSTATE", 2, 0, false);
        declareFunction("visit_defstruct_object_kbq_runstate_method", "VISIT-DEFSTRUCT-OBJECT-KBQ-RUNSTATE-METHOD", 2, 0, false);
        declareFunction("new_kbq_runstate", "NEW-KBQ-RUNSTATE", 2, 0, false);
        declareFunction("destroy_kbq_runstate", "DESTROY-KBQ-RUNSTATE", 1, 0, false);
        declareFunction("kbq_runstate_query_spec", "KBQ-RUNSTATE-QUERY-SPEC", 1, 0, false);
        declareFunction("kbq_runstate_lock", "KBQ-RUNSTATE-LOCK", 1, 0, false);
        declareFunction("kbq_runstate_inference", "KBQ-RUNSTATE-INFERENCE", 1, 0, false);
        declareFunction("kbq_runstate_result", "KBQ-RUNSTATE-RESULT", 1, 0, false);
        declareFunction("kbq_runstate_test_runstate", "KBQ-RUNSTATE-TEST-RUNSTATE", 1, 0, false);
        declareFunction("kbq_runstate_run_status", "KBQ-RUNSTATE-RUN-STATUS", 1, 0, false);
        declareFunction("set_kbqr_inference", "SET-KBQR-INFERENCE", 2, 0, false);
        declareFunction("set_kbqr_result", "SET-KBQR-RESULT", 2, 0, false);
        declareFunction("set_kbqr_run_status", "SET-KBQR-RUN-STATUS", 2, 0, false);
        declareFunction("possibly_set_kbqr_run_status", "POSSIBLY-SET-KBQR-RUN-STATUS", 2, 0, false);
        declareFunction("kct_runstate_print_function_trampoline", "KCT-RUNSTATE-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        declareFunction("kct_runstate_p", "KCT-RUNSTATE-P", 1, 0, false);
        new kbq_query_run.$kct_runstate_p$UnaryFunction();
        declareFunction("kctr_id", "KCTR-ID", 1, 0, false);
        declareFunction("kctr_lock", "KCTR-LOCK", 1, 0, false);
        declareFunction("kctr_test_spec", "KCTR-TEST-SPEC", 1, 0, false);
        declareFunction("kctr_result", "KCTR-RESULT", 1, 0, false);
        declareFunction("kctr_query_runstate", "KCTR-QUERY-RUNSTATE", 1, 0, false);
        declareFunction("kctr_test_set_runstate", "KCTR-TEST-SET-RUNSTATE", 1, 0, false);
        declareFunction("kctr_run_status", "KCTR-RUN-STATUS", 1, 0, false);
        declareFunction("kctr_start", "KCTR-START", 1, 0, false);
        declareFunction("kctr_end", "KCTR-END", 1, 0, false);
        declareFunction("_csetf_kctr_id", "_CSETF-KCTR-ID", 2, 0, false);
        declareFunction("_csetf_kctr_lock", "_CSETF-KCTR-LOCK", 2, 0, false);
        declareFunction("_csetf_kctr_test_spec", "_CSETF-KCTR-TEST-SPEC", 2, 0, false);
        declareFunction("_csetf_kctr_result", "_CSETF-KCTR-RESULT", 2, 0, false);
        declareFunction("_csetf_kctr_query_runstate", "_CSETF-KCTR-QUERY-RUNSTATE", 2, 0, false);
        declareFunction("_csetf_kctr_test_set_runstate", "_CSETF-KCTR-TEST-SET-RUNSTATE", 2, 0, false);
        declareFunction("_csetf_kctr_run_status", "_CSETF-KCTR-RUN-STATUS", 2, 0, false);
        declareFunction("_csetf_kctr_start", "_CSETF-KCTR-START", 2, 0, false);
        declareFunction("_csetf_kctr_end", "_CSETF-KCTR-END", 2, 0, false);
        declareFunction("make_kct_runstate", "MAKE-KCT-RUNSTATE", 0, 1, false);
        declareFunction("visit_defstruct_kct_runstate", "VISIT-DEFSTRUCT-KCT-RUNSTATE", 2, 0, false);
        declareFunction("visit_defstruct_object_kct_runstate_method", "VISIT-DEFSTRUCT-OBJECT-KCT-RUNSTATE-METHOD", 2, 0, false);
        declareFunction("new_kct_runstate", "NEW-KCT-RUNSTATE", 1, 1, false);
        declareFunction("destroy_kct_runstate", "DESTROY-KCT-RUNSTATE", 1, 0, false);
        declareFunction("kct_runstate_test_spec", "KCT-RUNSTATE-TEST-SPEC", 1, 0, false);
        declareFunction("kct_runstate_lock", "KCT-RUNSTATE-LOCK", 1, 0, false);
        declareFunction("kct_runstate_result", "KCT-RUNSTATE-RESULT", 1, 0, false);
        declareFunction("kct_runstate_query_runstate", "KCT-RUNSTATE-QUERY-RUNSTATE", 1, 0, false);
        declareFunction("kct_runstate_test_set_runstate", "KCT-RUNSTATE-TEST-SET-RUNSTATE", 1, 0, false);
        declareFunction("kct_runstate_inference", "KCT-RUNSTATE-INFERENCE", 1, 0, false);
        declareFunction("kct_runstate_result_status", "KCT-RUNSTATE-RESULT-STATUS", 1, 0, false);
        declareFunction("kct_runstate_failure_explanation", "KCT-RUNSTATE-FAILURE-EXPLANATION", 1, 0, false);
        declareFunction("kct_runstate_metric_value", "KCT-RUNSTATE-METRIC-VALUE", 2, 0, false);
        declareFunction("kct_runstate_run_status", "KCT-RUNSTATE-RUN-STATUS", 1, 0, false);
        declareFunction("kct_runstate_start", "KCT-RUNSTATE-START", 1, 0, false);
        declareFunction("kct_runstate_end", "KCT-RUNSTATE-END", 1, 0, false);
        declareFunction("set_kctr_result", "SET-KCTR-RESULT", 2, 0, false);
        declareFunction("set_kctr_query_runstate", "SET-KCTR-QUERY-RUNSTATE", 2, 0, false);
        declareFunction("set_kctr_test_set_runstate", "SET-KCTR-TEST-SET-RUNSTATE", 2, 0, false);
        declareFunction("set_kctr_run_status", "SET-KCTR-RUN-STATUS", 2, 0, false);
        declareFunction("set_kctr_start", "SET-KCTR-START", 1, 1, false);
        declareFunction("set_kctr_end", "SET-KCTR-END", 1, 1, false);
        declareFunction("kct_set_runstate_print_function_trampoline", "KCT-SET-RUNSTATE-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        declareFunction("kct_set_runstate_p", "KCT-SET-RUNSTATE-P", 1, 0, false);
        new kbq_query_run.$kct_set_runstate_p$UnaryFunction();
        declareFunction("kctsr_id", "KCTSR-ID", 1, 0, false);
        declareFunction("kctsr_lock", "KCTSR-LOCK", 1, 0, false);
        declareFunction("kctsr_test_set", "KCTSR-TEST-SET", 1, 0, false);
        declareFunction("kctsr_result", "KCTSR-RESULT", 1, 0, false);
        declareFunction("kctsr_test_runstates", "KCTSR-TEST-RUNSTATES", 1, 0, false);
        declareFunction("kctsr_run_status", "KCTSR-RUN-STATUS", 1, 0, false);
        declareFunction("kctsr_start", "KCTSR-START", 1, 0, false);
        declareFunction("kctsr_end", "KCTSR-END", 1, 0, false);
        declareFunction("_csetf_kctsr_id", "_CSETF-KCTSR-ID", 2, 0, false);
        declareFunction("_csetf_kctsr_lock", "_CSETF-KCTSR-LOCK", 2, 0, false);
        declareFunction("_csetf_kctsr_test_set", "_CSETF-KCTSR-TEST-SET", 2, 0, false);
        declareFunction("_csetf_kctsr_result", "_CSETF-KCTSR-RESULT", 2, 0, false);
        declareFunction("_csetf_kctsr_test_runstates", "_CSETF-KCTSR-TEST-RUNSTATES", 2, 0, false);
        declareFunction("_csetf_kctsr_run_status", "_CSETF-KCTSR-RUN-STATUS", 2, 0, false);
        declareFunction("_csetf_kctsr_start", "_CSETF-KCTSR-START", 2, 0, false);
        declareFunction("_csetf_kctsr_end", "_CSETF-KCTSR-END", 2, 0, false);
        declareFunction("make_kct_set_runstate", "MAKE-KCT-SET-RUNSTATE", 0, 1, false);
        declareFunction("visit_defstruct_kct_set_runstate", "VISIT-DEFSTRUCT-KCT-SET-RUNSTATE", 2, 0, false);
        declareFunction("visit_defstruct_object_kct_set_runstate_method", "VISIT-DEFSTRUCT-OBJECT-KCT-SET-RUNSTATE-METHOD", 2, 0, false);
        declareFunction("new_kct_set_runstate", "NEW-KCT-SET-RUNSTATE", 1, 0, false);
        declareFunction("destroy_kct_set_runstate", "DESTROY-KCT-SET-RUNSTATE", 1, 0, false);
        declareFunction("kct_set_runstate_test_set", "KCT-SET-RUNSTATE-TEST-SET", 1, 0, false);
        declareFunction("kct_set_runstate_lock", "KCT-SET-RUNSTATE-LOCK", 1, 0, false);
        declareFunction("kct_set_runstate_result", "KCT-SET-RUNSTATE-RESULT", 1, 0, false);
        declareFunction("kct_set_runstate_test_runstates", "KCT-SET-RUNSTATE-TEST-RUNSTATES", 1, 0, false);
        declareFunction("kct_set_runstate_result_status", "KCT-SET-RUNSTATE-RESULT-STATUS", 1, 0, false);
        declareFunction("kct_set_runstate_run_status", "KCT-SET-RUNSTATE-RUN-STATUS", 1, 0, false);
        declareFunction("kct_set_runstate_start", "KCT-SET-RUNSTATE-START", 1, 0, false);
        declareFunction("kct_set_runstate_end", "KCT-SET-RUNSTATE-END", 1, 0, false);
        declareFunction("set_kctsr_result", "SET-KCTSR-RESULT", 2, 0, false);
        declareFunction("kctsr_test_runstate_add", "KCTSR-TEST-RUNSTATE-ADD", 2, 0, false);
        declareFunction("kctsr_test_runstate_remove", "KCTSR-TEST-RUNSTATE-REMOVE", 2, 0, false);
        declareFunction("set_kctsr_run_status", "SET-KCTSR-RUN-STATUS", 2, 0, false);
        declareFunction("set_kctsr_start", "SET-KCTSR-START", 1, 1, false);
        declareFunction("set_kctsr_end", "SET-KCTSR-END", 1, 1, false);
        declareFunction("kbq_save_query_set_run", "KBQ-SAVE-QUERY-SET-RUN", 2, 0, false);
        declareFunction("kct_save_test_set_run", "KCT-SAVE-TEST-SET-RUN", 2, 0, false);
        declareFunction("kbq_save_query_set_run_without_results", "KBQ-SAVE-QUERY-SET-RUN-WITHOUT-RESULTS", 2, 0, false);
        declareFunction("kbq_open_query_set_run_output_stream", "KBQ-OPEN-QUERY-SET-RUN-OUTPUT-STREAM", 1, 1, false);
        declareFunction("kct_open_test_set_run_output_stream", "KCT-OPEN-TEST-SET-RUN-OUTPUT-STREAM", 1, 1, false);
        declareFunction("kbq_save_query_set_run_preamble", "KBQ-SAVE-QUERY-SET-RUN-PREAMBLE", 1, 1, false);
        declareFunction("kct_save_test_set_run_preamble", "KCT-SAVE-TEST-SET-RUN-PREAMBLE", 1, 1, false);
        declareFunction("kbq_save_query_run", "KBQ-SAVE-QUERY-RUN", 2, 0, false);
        declareFunction("kct_save_test_run", "KCT-SAVE-TEST-RUN", 2, 0, false);
        declareMacro("do_query_set_run", "DO-QUERY-SET-RUN");
        declareMacro("do_query_set_run_query_runs", "DO-QUERY-SET-RUN-QUERY-RUNS");
        declareFunction("kbq_load_query_set_run", "KBQ-LOAD-QUERY-SET-RUN", 1, 0, false);
        declareFunction("kbq_load_query_set_run_int", "KBQ-LOAD-QUERY-SET-RUN-INT", 1, 0, false);
        declareFunction("kbq_load_query_run_int", "KBQ-LOAD-QUERY-RUN-INT", 1, 0, false);
        declareFunction("kbq_query_set_run_nmerge_query_runs", "KBQ-QUERY-SET-RUN-NMERGE-QUERY-RUNS", 2, 0, false);
        declareFunction("kct_load_test_set_run", "KCT-LOAD-TEST-SET-RUN", 1, 0, false);
        declareFunction("kct_test_set_run_nmerge_test_runs", "KCT-TEST-SET-RUN-NMERGE-TEST-RUNS", 2, 0, false);
        declareFunction("kbq_nclean_query_set_run", "KBQ-NCLEAN-QUERY-SET-RUN", 1, 0, false);
        declareFunction("kct_nclean_test_set_run", "KCT-NCLEAN-TEST-SET-RUN", 1, 0, false);
        declareFunction("kbq_nclean_query_run", "KBQ-NCLEAN-QUERY-RUN", 1, 0, false);
        declareFunction("kbq_strip_results_from_query_set_run_file", "KBQ-STRIP-RESULTS-FROM-QUERY-SET-RUN-FILE", 1, 1, false);
        declareFunction("kbq_strip_suffix_from_filename", "KBQ-STRIP-SUFFIX-FROM-FILENAME", 1, 0, false);
        declareFunction("kct_strip_suffix_from_filename", "KCT-STRIP-SUFFIX-FROM-FILENAME", 1, 0, false);
        declareFunction("kbq_filter_query_set_run_by_property_value", "KBQ-FILTER-QUERY-SET-RUN-BY-PROPERTY-VALUE", 4, 1, false);
        declareFunction("kbq_filter_query_set_run_by_test", "KBQ-FILTER-QUERY-SET-RUN-BY-TEST", 3, 1, false);
        declareFunction("kct_filter_test_set_run_by_test", "KCT-FILTER-TEST-SET-RUN-BY-TEST", 3, 1, false);
        declareFunction("kbq_answerable_query_set_run", "KBQ-ANSWERABLE-QUERY-SET-RUN", 1, 0, false);
        declareFunction("kct_answerable_test_set_run", "KCT-ANSWERABLE-TEST-SET-RUN", 1, 0, false);
        declareFunction("kct_succeeding_test_set_run", "KCT-SUCCEEDING-TEST-SET-RUN", 1, 0, false);
        declareFunction("kbq_unanswerable_query_set_run", "KBQ-UNANSWERABLE-QUERY-SET-RUN", 1, 0, false);
        declareFunction("kct_unanswerable_test_set_run", "KCT-UNANSWERABLE-TEST-SET-RUN", 1, 0, false);
        declareFunction("kct_failing_test_set_run", "KCT-FAILING-TEST-SET-RUN", 1, 0, false);
        declareFunction("kct_erroring_test_set_run", "KCT-ERRORING-TEST-SET-RUN", 1, 0, false);
        declareFunction("kct_common_sense_test_set_run", "KCT-COMMON-SENSE-TEST-SET-RUN", 1, 0, false);
        declareFunction("kct_regression_test_set_run", "KCT-REGRESSION-TEST-SET-RUN", 1, 0, false);
        declareFunction("kct_subcollection_test_set_run", "KCT-SUBCOLLECTION-TEST-SET-RUN", 2, 0, false);
        declareFunction("kct_failing_tests", "KCT-FAILING-TESTS", 1, 0, false);
        declareFunction("kct_succeeding_tests", "KCT-SUCCEEDING-TESTS", 1, 0, false);
        declareFunction("kct_answerable_tests", "KCT-ANSWERABLE-TESTS", 1, 0, false);
        declareFunction("kct_unanswerable_tests", "KCT-UNANSWERABLE-TESTS", 1, 0, false);
        declareFunction("kct_newly_failing_tests", "KCT-NEWLY-FAILING-TESTS", 2, 0, false);
        declareFunction("kbq_same_property_value_queries", "KBQ-SAME-PROPERTY-VALUE-QUERIES", 3, 2, false);
        declareFunction("kbq_mutually_answerable_queries", "KBQ-MUTUALLY-ANSWERABLE-QUERIES", 1, 0, false);
        declareFunction("kbq_mutually_unanswerable_queries", "KBQ-MUTUALLY-UNANSWERABLE-QUERIES", 1, 0, false);
        declareFunction("kbq_fast_queries", "KBQ-FAST-QUERIES", 1, 1, false);
        declareFunction("kct_mutually_succeeding_tests", "KCT-MUTUALLY-SUCCEEDING-TESTS", 1, 0, false);
        declareFunction("kct_mutually_failing_tests", "KCT-MUTUALLY-FAILING-TESTS", 1, 0, false);
        declareFunction("kbq_mutually_answerable_query_set_runs", "KBQ-MUTUALLY-ANSWERABLE-QUERY-SET-RUNS", 2, 0, false);
        declareFunction("kbq_mutually_unanswerable_query_set_runs", "KBQ-MUTUALLY-UNANSWERABLE-QUERY-SET-RUNS", 2, 0, false);
        declareFunction("kbq_query_set_runs_common_queries", "KBQ-QUERY-SET-RUNS-COMMON-QUERIES", 1, 0, false);
        declareFunction("kbq_common_queries_query_set_runs", "KBQ-COMMON-QUERIES-QUERY-SET-RUNS", 1, 0, false);
        declareFunction("kbq_common_queries_two_query_set_runs", "KBQ-COMMON-QUERIES-TWO-QUERY-SET-RUNS", 2, 0, false);
        declareFunction("kct_common_tests_test_set_runs", "KCT-COMMON-TESTS-TEST-SET-RUNS", 1, 0, false);
        declareFunction("kct_mutually_succeeding_test_set_runs", "KCT-MUTUALLY-SUCCEEDING-TEST-SET-RUNS", 2, 0, false);
        declareFunction("kct_mutually_failing_test_set_runs", "KCT-MUTUALLY-FAILING-TEST-SET-RUNS", 2, 0, false);
        declareFunction("kbq_same_answer_count_query_set_runs", "KBQ-SAME-ANSWER-COUNT-QUERY-SET-RUNS", 2, 0, false);
        declareFunction("kbq_different_answer_count_query_set_runs", "KBQ-DIFFERENT-ANSWER-COUNT-QUERY-SET-RUNS", 2, 0, false);
        declareFunction("kbq_filter_to_queries_int", "KBQ-FILTER-TO-QUERIES-INT", 3, 0, false);
        declareFunction("kbq_filter_query_set_run_to_queries_lambda", "KBQ-FILTER-QUERY-SET-RUN-TO-QUERIES-LAMBDA", 1, 0, false);
        declareFunction("kbq_filter_query_set_run_to_queries_not_lambda", "KBQ-FILTER-QUERY-SET-RUN-TO-QUERIES-NOT-LAMBDA", 1, 0, false);
        declareFunction("kbq_filter_query_set_run_to_queries", "KBQ-FILTER-QUERY-SET-RUN-TO-QUERIES", 2, 1, false);
        declareFunction("kct_filter_test_set_run_to_tests_lambda", "KCT-FILTER-TEST-SET-RUN-TO-TESTS-LAMBDA", 1, 0, false);
        declareFunction("kct_filter_test_set_run_to_tests_not_lambda", "KCT-FILTER-TEST-SET-RUN-TO-TESTS-NOT-LAMBDA", 1, 0, false);
        declareFunction("kct_filter_test_set_run_to_tests", "KCT-FILTER-TEST-SET-RUN-TO-TESTS", 2, 1, false);
        declareFunction("kbq_filter_query_set_run_to_query_collection", "KBQ-FILTER-QUERY-SET-RUN-TO-QUERY-COLLECTION", 2, 1, false);
        declareFunction("kct_filter_test_set_run_to_test_collection", "KCT-FILTER-TEST-SET-RUN-TO-TEST-COLLECTION", 2, 1, false);
        declareFunction("clear_cached_all_instances_among", "CLEAR-CACHED-ALL-INSTANCES-AMONG", 0, 0, false);
        new kbq_query_run.$clear_cached_all_instances_among$ZeroArityFunction();
        declareFunction("remove_cached_all_instances_among", "REMOVE-CACHED-ALL-INSTANCES-AMONG", 3, 0, false);
        declareFunction("cached_all_instances_among_internal", "CACHED-ALL-INSTANCES-AMONG-INTERNAL", 3, 0, false);
        declareFunction("cached_all_instances_among", "CACHED-ALL-INSTANCES-AMONG", 3, 0, false);
        declareFunction("kbq_queries_common_to_all_query_set_runs", "KBQ-QUERIES-COMMON-TO-ALL-QUERY-SET-RUNS", 1, 0, false);
        declareFunction("kct_tests_common_to_all_test_set_runs", "KCT-TESTS-COMMON-TO-ALL-TEST-SET-RUNS", 1, 0, false);
        declareFunction("kct_consistently_succeeding_tests", "KCT-CONSISTENTLY-SUCCEEDING-TESTS", 1, 0, false);
        declareFunction("kct_consistently_succeeding_test_set_runs", "KCT-CONSISTENTLY-SUCCEEDING-TEST-SET-RUNS", 1, 0, false);
        declareFunction("queries_that_became_unanswerable", "QUERIES-THAT-BECAME-UNANSWERABLE", 2, 0, false);
        declareFunction("queries_that_changed_answer_count", "QUERIES-THAT-CHANGED-ANSWER-COUNT", 2, 0, false);
        declareFunction("kbq_query_runs_with_worst_slowdown", "KBQ-QUERY-RUNS-WITH-WORST-SLOWDOWN", 2, 2, false);
        declareFunction("kbq_query_runs_with_worst_slowdown_robust", "KBQ-QUERY-RUNS-WITH-WORST-SLOWDOWN-ROBUST", 2, 2, false);
        declareFunction("kbq_slowest_query_runs", "KBQ-SLOWEST-QUERY-RUNS", 1, 2, false);
        declareFunction("kct_slowest_test_runs", "KCT-SLOWEST-TEST-RUNS", 1, 2, false);
        declareFunction("kbq_compare_query_set_run_answers", "KBQ-COMPARE-QUERY-SET-RUN-ANSWERS", 2, 0, false);
        declareFunction("kbq_summarize_compare_query_set_run_answers", "KBQ-SUMMARIZE-COMPARE-QUERY-SET-RUN-ANSWERS", 2, 0, false);
        declareFunction("kbq_sort_query_runs", "KBQ-SORT-QUERY-RUNS", 2, 0, false);
        declareFunction("kbq_lookup_query_run", "KBQ-LOOKUP-QUERY-RUN", 2, 0, false);
        declareFunction("kbq_lookup_query_run_from_query_runs", "KBQ-LOOKUP-QUERY-RUN-FROM-QUERY-RUNS", 2, 0, false);
        declareFunction("kbq_lookup_query_runs", "KBQ-LOOKUP-QUERY-RUNS", 2, 0, false);
        declareFunction("kbq_query_equal", "KBQ-QUERY-EQUAL", 2, 0, false);
        declareFunction("kbq_compare_query_run_answers", "KBQ-COMPARE-QUERY-RUN-ANSWERS", 2, 0, false);
        declareFunction("kbq_compare_query_set_runs_by_property", "KBQ-COMPARE-QUERY-SET-RUNS-BY-PROPERTY", 3, 1, false);
        declareFunction("show_query_runs_that_became_unanswerable", "SHOW-QUERY-RUNS-THAT-BECAME-UNANSWERABLE", 2, 3, false);
        declareFunction("show_query_runs_that_changed_answer_count", "SHOW-QUERY-RUNS-THAT-CHANGED-ANSWER-COUNT", 2, 3, false);
        declareFunction("show_query_runs_int", "SHOW-QUERY-RUNS-INT", 6, 0, false);
        declareFunction("kbq_query_set_run_answerable_counts", "KBQ-QUERY-SET-RUN-ANSWERABLE-COUNTS", 2, 0, false);
        declareFunction("kct_compare_test_set_run_statuses", "KCT-COMPARE-TEST-SET-RUN-STATUSES", 2, 0, false);
        declareFunction("kct_summarize_compare_test_set_run_statuses", "KCT-SUMMARIZE-COMPARE-TEST-SET-RUN-STATUSES", 2, 0, false);
        declareFunction("kct_lookup_test_run", "KCT-LOOKUP-TEST-RUN", 2, 0, false);
        declareFunction("kct_test_equal", "KCT-TEST-EQUAL", 2, 0, false);
        declareFunction("kct_compare_test_run_statuses", "KCT-COMPARE-TEST-RUN-STATUSES", 2, 0, false);
        declareFunction("kbq_analyze_query_set_runs", "KBQ-ANALYZE-QUERY-SET-RUNS", 2, 1, false);
        declareFunction("kct_analyze_test_set_runs", "KCT-ANALYZE-TEST-SET-RUNS", 2, 1, false);
        declareFunction("kbq_compare_analysis", "KBQ-COMPARE-ANALYSIS", 2, 0, false);
        declareFunction("significant_digits_if_float", "SIGNIFICANT-DIGITS-IF-FLOAT", 2, 0, false);
        declareFunction("kbq_print_analysis", "KBQ-PRINT-ANALYSIS", 1, 0, false);
        declareFunction("kbq_analyze_query_set_run", "KBQ-ANALYZE-QUERY-SET-RUN", 1, 1, false);
        declareFunction("kct_analyze_test_set_run", "KCT-ANALYZE-TEST-SET-RUN", 1, 1, false);
        declareFunction("kbq_analyze_query_runs", "KBQ-ANALYZE-QUERY-RUNS", 2, 0, false);
        declareFunction("kbq_query_set_run_total_answerable", "KBQ-QUERY-SET-RUN-TOTAL-ANSWERABLE", 1, 0, false);
        declareFunction("kbq_query_set_run_last_query_from_file", "KBQ-QUERY-SET-RUN-LAST-QUERY-FROM-FILE", 1, 0, false);
        declareFunction("kbq_query_set_run_identify_probable_segfault_from_file", "KBQ-QUERY-SET-RUN-IDENTIFY-PROBABLE-SEGFAULT-FROM-FILE", 2, 0, false);
        declareFunction("kbq_query_set_run_identify_probable_segfault", "KBQ-QUERY-SET-RUN-IDENTIFY-PROBABLE-SEGFAULT", 2, 0, false);
        declareFunction("kbq_query_set_run_identify_probable_segfault_int", "KBQ-QUERY-SET-RUN-IDENTIFY-PROBABLE-SEGFAULT-INT", 2, 0, false);
        declareFunction("kct_analyze_test_runs", "KCT-ANALYZE-TEST-RUNS", 2, 0, false);
        declareFunction("kct_test_set_run_identify_probable_segfault", "KCT-TEST-SET-RUN-IDENTIFY-PROBABLE-SEGFAULT", 2, 0, false);
        declareFunction("analyze_kbq_experiments", "ANALYZE-KBQ-EXPERIMENTS", 2, 5, false);
        declareFunction("kbq_non_lumpy_query_set_run", "KBQ-NON-LUMPY-QUERY-SET-RUN", 1, 0, false);
        declareFunction("kbq_lumpy_queries", "KBQ-LUMPY-QUERIES", 1, 0, false);
        declareFunction("kbq_lumpy_query_count", "KBQ-LUMPY-QUERY-COUNT", 1, 0, false);
        declareFunction("kbq_count_lumpy_query_runs", "KBQ-COUNT-LUMPY-QUERY-RUNS", 1, 0, false);
        declareFunction("kbq_lumpy_query_runP", "KBQ-LUMPY-QUERY-RUN?", 1, 0, false);
        declareFunction("show_kct_test_set_run_summary", "SHOW-KCT-TEST-SET-RUN-SUMMARY", 1, 1, false);
        declareFunction("kbq_show_halt_reason_histogram", "KBQ-SHOW-HALT-REASON-HISTOGRAM", 1, 0, false);
        declareFunction("trim_analysis_if_zero", "TRIM-ANALYSIS-IF-ZERO", 1, 0, false);
        declareFunction("kbq_query_literal_count", "KBQ-QUERY-LITERAL-COUNT", 1, 0, false);
        declareFunction("kbq_single_literal_query_p", "KBQ-SINGLE-LITERAL-QUERY-P", 1, 0, false);
        declareFunction("kbq_progress_stream", "KBQ-PROGRESS-STREAM", 0, 0, false);
        declareFunction("kbq_benchmark_run_and_report", "KBQ-BENCHMARK-RUN-AND-REPORT", 3, 0, false);
        declareFunction("kbq_benchmark_run_in_background", "KBQ-BENCHMARK-RUN-IN-BACKGROUND", 3, 0, false);
        declareFunction("kbq_benchmark_run", "KBQ-BENCHMARK-RUN", 3, 3, false);
        declareFunction("kbq_benchmark_report", "KBQ-BENCHMARK-REPORT", 1, 1, false);
        declareFunction("kbq_benchmark_report_for_test", "KBQ-BENCHMARK-REPORT-FOR-TEST", 2, 1, false);
        declareFunction("kct_run_support_set", "KCT-RUN-SUPPORT-SET", 1, 0, false);
        declareFunction("kct_run_supports_report", "KCT-RUN-SUPPORTS-REPORT", 1, 1, false);
        declareFunction("unknown_sentence_support_p", "UNKNOWN-SENTENCE-SUPPORT-P", 1, 0, false);
        declareFunction("kcts_using_only_these_sksi_sources", "KCTS-USING-ONLY-THESE-SKSI-SOURCES", 1, 0, false);
        declareFunction("kcts_for_sksi_source", "KCTS-FOR-SKSI-SOURCE", 1, 0, false);
        declareFunction("succeeding_kcts_for_sksi_source", "SUCCEEDING-KCTS-FOR-SKSI-SOURCE", 2, 0, false);
        declareFunction("failing_kcts_for_sksi_source", "FAILING-KCTS-FOR-SKSI-SOURCE", 2, 0, false);
        declareFunction("answerable_kcts_for_sksi_source", "ANSWERABLE-KCTS-FOR-SKSI-SOURCE", 2, 0, false);
        declareFunction("unanswerable_kcts_for_sksi_source", "UNANSWERABLE-KCTS-FOR-SKSI-SOURCE", 2, 0, false);
        declareFunction("erroring_kcts_for_sksi_source", "ERRORING-KCTS-FOR-SKSI-SOURCE", 2, 0, false);
        declareFunction("show_errors_for_sksi_source", "SHOW-ERRORS-FOR-SKSI-SOURCE", 2, 0, false);
        declareFunction("analyze_sksi_test_set_run", "ANALYZE-SKSI-TEST-SET-RUN", 2, 0, false);
        return NIL;
    }

    static private final SubLList $list_alt3 = list(new SubLObject[]{ makeKeyword("ANSWER-COUNT-AT-60-SECONDS"), makeKeyword("PROBLEM-STORE-PROBLEM-COUNT"), makeKeyword("PROBLEM-STORE-PROOF-COUNT"), makeKeyword("ERROR"), makeKeyword("MAX-NUMBER"), makeKeyword("MAX-TIME"), makeKeyword("ANSWER-COUNT-AT-30-SECONDS"), makeKeyword("PROBABLY-APPROXIMATELY-DONE"), makeKeyword("TOTAL-TIME"), makeKeyword("TIME-TO-LAST-ANSWER"), makeKeyword("TIME-TO-FIRST-ANSWER"), makeKeyword("ANSWER-COUNT"), makeKeyword("EXHAUST-TOTAL"), makeKeyword("HALT-REASON"), makeKeyword("QUERY"), makeKeyword("QUERY-RUN") });

    static private final SubLList $list_alt4 = list(new SubLObject[]{ makeKeyword("TIME-PER-ANSWER"), makeKeyword("WASTED-TIME-AFTER-LAST-ANSWER"), makeKeyword("LATENCY-IMPROVEMENT-FROM-ITERATIVITY"), makeKeyword("PROBLEM-COUNT"), makeKeyword("PROOF-COUNT"), makeKeyword("LINK-COUNT"), makeKeyword("CONTENT-LINK-COUNT"), makeKeyword("REMOVAL-LINK-COUNT"), makeKeyword("REWRITE-LINK-COUNT"), makeKeyword("TRANSFORMATION-LINK-COUNT"), makeKeyword("STRUCTURAL-LINK-COUNT"), makeKeyword("JOIN-ORDERED-LINK-COUNT"), makeKeyword("JOIN-LINK-COUNT"), makeKeyword("SPLIT-LINK-COUNT"), makeKeyword("RESTRICTION-LINK-COUNT"), makeKeyword("RESIDUAL-TRANSFORMATION-LINK-COUNT"), makeKeyword("UNION-LINK-COUNT"), makeKeyword("GOOD-PROBLEM-COUNT"), makeKeyword("NEUTRAL-PROBLEM-COUNT"), makeKeyword("NO-GOOD-PROBLEM-COUNT"), makeKeyword("SINGLE-LITERAL-PROBLEM-COUNT"), makeKeyword("CONJUNCTIVE-PROBLEM-COUNT"), makeKeyword("JOIN-PROBLEM-COUNT"), makeKeyword("SPLIT-PROBLEM-COUNT"), makeKeyword("DISJUNCTIVE-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-PROBLEM-COUNT"), makeKeyword("EXAMINED-PROBLEM-COUNT"), makeKeyword("POSSIBLE-PROBLEM-COUNT"), makeKeyword("PENDING-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-GOOD-PROBLEM-COUNT"), makeKeyword("EXAMINED-GOOD-PROBLEM-COUNT"), makeKeyword("POSSIBLE-GOOD-PROBLEM-COUNT"), makeKeyword("PENDING-GOOD-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-NEUTRAL-PROBLEM-COUNT"), makeKeyword("EXAMINED-NEUTRAL-PROBLEM-COUNT"), makeKeyword("POSSIBLE-NEUTRAL-PROBLEM-COUNT"), makeKeyword("PENDING-NEUTRAL-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-NO-GOOD-PROBLEM-COUNT"), makeKeyword("EXAMINED-NO-GOOD-PROBLEM-COUNT"), makeKeyword("POSSIBLE-NO-GOOD-PROBLEM-COUNT"), makeKeyword("PENDING-NO-GOOD-PROBLEM-COUNT"), makeKeyword("GOOD-SINGLE-LITERAL-PROBLEM-COUNT"), makeKeyword("GOOD-CONJUNCTIVE-PROBLEM-COUNT"), makeKeyword("GOOD-JOIN-PROBLEM-COUNT"), makeKeyword("GOOD-SPLIT-PROBLEM-COUNT"), makeKeyword("GOOD-DISJUNCTIVE-PROBLEM-COUNT"), makeKeyword("NEUTRAL-SINGLE-LITERAL-PROBLEM-COUNT"), makeKeyword("NEUTRAL-CONJUNCTIVE-PROBLEM-COUNT"), makeKeyword("NEUTRAL-JOIN-PROBLEM-COUNT"), makeKeyword("NEUTRAL-SPLIT-PROBLEM-COUNT"), makeKeyword("NEUTRAL-DISJUNCTIVE-PROBLEM-COUNT"), makeKeyword("NO-GOOD-SINGLE-LITERAL-PROBLEM-COUNT"), makeKeyword("NO-GOOD-CONJUNCTIVE-PROBLEM-COUNT"), makeKeyword("NO-GOOD-JOIN-PROBLEM-COUNT"), makeKeyword("NO-GOOD-SPLIT-PROBLEM-COUNT"), makeKeyword("NO-GOOD-DISJUNCTIVE-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-SINGLE-LITERAL-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-CONJUNCTIVE-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-JOIN-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-SPLIT-PROBLEM-COUNT"), makeKeyword("UNEXAMINED-DISJUNCTIVE-PROBLEM-COUNT"), makeKeyword("EXAMINED-SINGLE-LITERAL-PROBLEM-COUNT"), makeKeyword("EXAMINED-CONJUNCTIVE-PROBLEM-COUNT"), makeKeyword("EXAMINED-JOIN-PROBLEM-COUNT"), makeKeyword("EXAMINED-SPLIT-PROBLEM-COUNT"), makeKeyword("EXAMINED-DISJUNCTIVE-PROBLEM-COUNT"), makeKeyword("POSSIBLE-SINGLE-LITERAL-PROBLEM-COUNT"), makeKeyword("POSSIBLE-CONJUNCTIVE-PROBLEM-COUNT"), makeKeyword("POSSIBLE-JOIN-PROBLEM-COUNT"), makeKeyword("POSSIBLE-SPLIT-PROBLEM-COUNT"), makeKeyword("POSSIBLE-DISJUNCTIVE-PROBLEM-COUNT"), makeKeyword("FINISHED-SINGLE-LITERAL-PROBLEM-COUNT"), makeKeyword("FINISHED-CONJUNCTIVE-PROBLEM-COUNT"), makeKeyword("FINISHED-JOIN-PROBLEM-COUNT"), makeKeyword("FINISHED-SPLIT-PROBLEM-COUNT"), makeKeyword("FINISHED-DISJUNCTIVE-PROBLEM-COUNT") });

    static private final SubLList $list_alt7 = list(makeKeyword("SUCCESS"), makeKeyword("FAILURE"), makeKeyword("STATUS"), $TEST);

    static private final SubLList $list_alt9 = list(list(makeSymbol("QUERY-SET-RUN")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLList $list_alt48 = list(makeSymbol("QUERY-FUNCALL"), makeSymbol("FUNC"));

    static private final SubLList $list_alt49 = list(makeSymbol("QUERY-FUNCALL"), makeSymbol("FUNC"), makeSymbol("ARG1"));

    static private final SubLList $list_alt51 = list(makeSymbol("QUERY-RUN-FUNCALL"), makeSymbol("FUNC"));

    static private final SubLList $list_alt52 = list(makeSymbol("QUERY-RUN-FUNCALL"), makeSymbol("FUNC"), makeSymbol("ARG1"));

    static private final SubLString $str_alt53$unrecognized_KBQ_property_spec__s = makeString("unrecognized KBQ property spec ~s");

    static private final SubLString $str_alt54$Use_the__with_kbq_query_set_run_m = makeString("Use the 'with-kbq-query-set-run macro to provide the scaling factor from internal real time to seconds.");

    static private final SubLString $str_alt55$Use_the__with_kbq_query_set_run__ = makeString("Use the 'with-kbq-query-set-run' macro to provide the scaling factor from internal real time to seconds.");

    static private final SubLList $list_alt56 = list(makeKeyword("MAX-TIME"), makeKeyword("OUTLIER-TIMEOUT"));

    static private final SubLList $list_alt77 = list(makeSymbol("&KEY"), makeSymbol("MACHINE"), makeSymbol("DATE"), makeSymbol("BOGOMIPS"), makeSymbol("INTERNAL-TIME-UNITS-PER-SECOND"), makeSymbol("PATCH-LEVEL"), makeSymbol("COMMENT"), makeSymbol("TEST-RUNS"));

    static private final SubLList $list_alt78 = list(makeKeyword("MACHINE"), $DATE, makeKeyword("BOGOMIPS"), makeKeyword("INTERNAL-TIME-UNITS-PER-SECOND"), makeKeyword("PATCH-LEVEL"), makeKeyword("COMMENT"), makeKeyword("TEST-RUNS"));

    static private final SubLSymbol $sym81$INVALID_FORT_ = makeSymbol("INVALID-FORT?");

    static private final SubLSymbol $sym82$KBQ_RUNNABLE_ = makeSymbol("KBQ-RUNNABLE?");

    static private final SubLSymbol $sym83$_ = makeSymbol("<");

    static private final SubLSymbol $sym84$SAFE__ = makeSymbol("SAFE-<");

    static private final SubLString $str_alt85$_s_____s__ = makeString("~s -> ~s~%");

    static private final SubLString $str_alt90$what_s_the_median_for__s = makeString("what's the median for ~s");

    static private final SubLString $str_alt94$what_s_the_mean_for__s = makeString("what's the mean for ~s");

    static private final SubLString $str_alt102$unknown_metric__s = makeString("unknown metric ~s");

    static private final SubLString $str_alt114$___A____ = makeString("~%~A~%~%");

    static private final SubLString $str_alt119$Outlier_____S = makeString("Outlier :~%~S");

    static private final SubLString $str_alt122$Unable_to_compute_any_metrics_for = makeString("Unable to compute any metrics for ~A");

    static private final SubLString $str_alt123$Unable_to_compute_all_desired_met = makeString("Unable to compute all desired metrics for ~A");

    static private final SubLString $str_alt124$KBQ_harness_error_for__A____A = makeString("KBQ harness error for ~A : ~A");

    static private final SubLString $str_alt125$Error_____S___A = makeString("Error :~%~S~%~A");

    static private final SubLString $str_alt127$Avoided__due_to__S______S = makeString("Avoided (due to ~S) :~%~S");

    static private final SubLString $str_alt135$Unsupported_metric__S = makeString("Unsupported metric ~S");

    static private final SubLList $list_alt136 = list(cons(reader_make_constant_shell("TestMetric-TotalTime"), makeKeyword("TOTAL-TIME")), cons(reader_make_constant_shell("TestMetric-TimeToFirstAnswer"), makeKeyword("TIME-TO-FIRST-ANSWER")), cons(reader_make_constant_shell("TestMetric-TimeToLastAnswer"), makeKeyword("TIME-TO-LAST-ANSWER")), cons(reader_make_constant_shell("TestMetric-AnswerCount"), makeKeyword("ANSWER-COUNT")), cons(reader_make_constant_shell("TestMetric-AnswerCountAt30Seconds"), makeKeyword("ANSWER-COUNT-AT-30-SECONDS")), cons(reader_make_constant_shell("TestMetric-AnswerCountAt60Seconds"), makeKeyword("ANSWER-COUNT-AT-60-SECONDS")), cons(reader_make_constant_shell("TestMetric-ProblemStoreProofCount"), makeKeyword("PROOF-COUNT")), cons(reader_make_constant_shell("TestMetric-ProblemStoreProblemCount"), makeKeyword("PROBLEM-COUNT")));

    static private final SubLList $list_alt138 = list(makeKeyword("CONDITIONAL-SENTENCE?"), NIL);

    static private final SubLString $str_alt139$Expected_exactly_ = makeString("Expected exactly ");

    static private final SubLString $str_alt140$_binding_sets__but_got_ = makeString(" binding sets, but got ");

    static private final SubLString $str_alt141$_ = makeString(".");

    static private final SubLString $str_alt142$Expected_at_least_ = makeString("Expected at least ");

    static private final SubLString $str_alt143$Expected_no_more_than_ = makeString("Expected no more than ");

    static private final SubLString $str_alt145$These_expected_bindings_were_miss = makeString("These expected bindings were missing: ");

    static private final SubLString $str_alt146$These_unwanted_bindings_were_retu = makeString("These unwanted bindings were returned: ");

    static private final SubLString $str_alt147$____ = makeString("    ");

    static private final SubLString $str_alt153$__Running__s = makeString("~&Running ~s");

    static private final SubLString $str_alt154$_________________________________ = makeString("~&~%;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;~%");

    static private final SubLString $str_alt155$______A____ = makeString("~&;; ~A~%~%");

    static private final SubLString $str_alt156$Unrunnable_query____S = makeString("Unrunnable query : ~S");

    static private final SubLSymbol $sym161$_OBJ = makeSymbol("?OBJ");

    static private final SubLList $list_alt162 = list(makeKeyword("ANSWER-LANGUAGE"), makeKeyword("HL"), makeKeyword("PRODUCTIVITY-LIMIT"), makeKeyword("POSITIVE-INFINITY"));

    static private final SubLList $list_alt163 = list(reader_make_constant_shell("evaluate"), makeKeyword("SET"), list(reader_make_constant_shell("SetExtentFn"), list(reader_make_constant_shell("TheSetOf"), makeSymbol("?QUERY"), list(reader_make_constant_shell("thereExists"), makeSymbol("?TEST"), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("knownSentence"), list(reader_make_constant_shell("isa"), makeSymbol("?TEST"), makeKeyword("TEST-COLLECTION"))), list(reader_make_constant_shell("assertedSentence"), list(reader_make_constant_shell("testQuerySpecification"), makeSymbol("?TEST"), makeSymbol("?QUERY"))))))));

    static private final SubLList $list_alt166 = list(makeKeyword("ANSWER-LANGUAGE"), makeKeyword("HL"));

    static private final SubLString $str_alt170$__Running__s__ = makeString("~&Running ~s~%");

    static private final SubLString $str_alt171$Unrunnable_test____S = makeString("Unrunnable test : ~S");

    static private final SubLList $list_alt172 = list(new SubLObject[]{ makeSymbol("&KEY"), makeSymbol("QUERY-SPEC-SET"), makeSymbol("FILENAME"), makeSymbol("ANALYSIS-FILENAME"), makeSymbol("KEEPALIVE-FILENAME"), makeSymbol("COMMENT"), makeSymbol("OVERRIDING-QUERY-PROPERTIES"), list(makeSymbol("METRICS"), list(QUOTE, list(makeSymbol("ALL-ARETE-QUERY-METRICS")))), list(makeSymbol("OUTLIER-TIMEOUT"), list(QUOTE, makeSymbol("*KBQ-DEFAULT-OUTLIER-TIMEOUT*"))), makeSymbol("INCREMENTAL"), list(makeSymbol("INCLUDE-RESULTS"), T), list(makeSymbol("RANDOMIZE"), NIL), list(makeSymbol("SKIP"), ZERO_INTEGER), makeSymbol("COUNT"), list(makeSymbol("IF-FILE-EXISTS"), makeKeyword("OVERWRITE")) });

    static private final SubLList $list_alt173 = list(new SubLObject[]{ makeKeyword("QUERY-SPEC-SET"), makeKeyword("FILENAME"), makeKeyword("ANALYSIS-FILENAME"), makeKeyword("KEEPALIVE-FILENAME"), makeKeyword("COMMENT"), makeKeyword("OVERRIDING-QUERY-PROPERTIES"), makeKeyword("METRICS"), makeKeyword("OUTLIER-TIMEOUT"), makeKeyword("INCREMENTAL"), makeKeyword("INCLUDE-RESULTS"), makeKeyword("RANDOMIZE"), $SKIP, makeKeyword("COUNT"), makeKeyword("IF-FILE-EXISTS") });

    static private final SubLList $list_alt178 = list(makeSymbol("ALL-ARETE-QUERY-METRICS"));

    static private final SubLString $str_alt192$__run_starting_at__A = makeString("~%run starting at ~A");

    static private final SubLString $str_alt193$__run_ended_at__A = makeString("~%run ended at ~A");

    static private final SubLString $str_alt194$__elapsed_time____A = makeString("~%elapsed time : ~A");

    static private final SubLString $str_alt195$Unable_to_open__S = makeString("Unable to open ~S");

    static private final SubLSymbol $sym196$KBQ_ERRORING_QUERY_RUN_ = makeSymbol("KBQ-ERRORING-QUERY-RUN?");

    static private final SubLList $list_alt197 = list(makeKeyword("OVERWRITE"), makeKeyword("AUGMENT"), makeKeyword("RERUN-ERRORS"), makeKeyword("AUGMENT-OR-RERUN-ERRORS"));

    static private final SubLString $str_alt202$unexpected_if_file_exists__s = makeString("unexpected if-file-exists ~s");

    static private final SubLString $str_alt203$_rerun_errors_ = makeString("-rerun-errors-");

    static private final SubLList $list_alt204 = list(new SubLObject[]{ makeSymbol("&KEY"), makeSymbol("TEST-SPEC-SET"), makeSymbol("FILENAME"), makeSymbol("ANALYSIS-FILENAME"), makeSymbol("KEEPALIVE-FILENAME"), makeSymbol("COMMENT"), makeSymbol("OVERRIDING-QUERY-PROPERTIES"), list(makeSymbol("OVERRIDING-METRICS"), list(QUOTE, list(makeSymbol("ALL-ARETE-QUERY-METRICS")))), list(makeSymbol("OUTLIER-TIMEOUT"), list(QUOTE, makeSymbol("*KBQ-OUTLIER-TIMEOUT*"))), makeSymbol("INCREMENTAL"), list(makeSymbol("INCLUDE-RESULTS"), T), list(makeSymbol("IF-FILE-EXISTS"), makeKeyword("OVERWRITE")), list(makeSymbol("EXPOSE-RUNSTATE"), NIL), list(makeSymbol("RANDOMIZE"), NIL), list(makeSymbol("SKIP"), ZERO_INTEGER), makeSymbol("COUNT") });

    static private final SubLList $list_alt205 = list(new SubLObject[]{ makeKeyword("TEST-SPEC-SET"), makeKeyword("FILENAME"), makeKeyword("ANALYSIS-FILENAME"), makeKeyword("KEEPALIVE-FILENAME"), makeKeyword("COMMENT"), makeKeyword("OVERRIDING-QUERY-PROPERTIES"), makeKeyword("OVERRIDING-METRICS"), makeKeyword("OUTLIER-TIMEOUT"), makeKeyword("INCREMENTAL"), makeKeyword("INCLUDE-RESULTS"), makeKeyword("IF-FILE-EXISTS"), makeKeyword("EXPOSE-RUNSTATE"), makeKeyword("RANDOMIZE"), $SKIP, makeKeyword("COUNT") });

    static private final SubLString $str_alt213$Filtered_to___KBContentRegression = makeString("Filtered to #$KBContentRegressionTests");

    static private final SubLSymbol $sym214$KB_CONTENT_REGRESSION_TEST_ = makeSymbol("KB-CONTENT-REGRESSION-TEST?");

    static private final SubLString $str_alt215$All_tests___ = makeString("All tests:~%");

    static private final SubLString $str_alt216$__Just_the_regression_tests___ = makeString("~%Just the regression tests:~%");

    static private final SubLSymbol $sym217$KCT_ERRORING_TEST_RUN_ = makeSymbol("KCT-ERRORING-TEST-RUN?");

    static private final SubLSymbol $sym218$KCT_TEST_RUNNABLE_ = makeSymbol("KCT-TEST-RUNNABLE?");

    static private final SubLString $str_alt221$Unknown_runstate_type___A = makeString("Unknown runstate type: ~A");

    static private final SubLString $str_alt222$Runstate_has_no_status___A = makeString("Runstate has no status: ~A");

    static private final SubLString $str_alt223$Explanations_aren_t_yet_implement = makeString("Explanations aren't yet implemented.");

    static private final SubLString $str_alt224$No_inference_defined_for_this_run = makeString("No inference defined for this runstate: ~A");

    static private final SubLString $str_alt225$No_start_defined_for_this_runstat = makeString("No start defined for this runstate: ~A");

    static private final SubLString $str_alt226$No_end_defined_for_this_runstate_ = makeString("No end defined for this runstate: ~A");

    static private final SubLList $list_alt230 = list(makeSymbol("ID"), makeSymbol("LOCK"), makeSymbol("QUERY-SPEC"), makeSymbol("INFERENCE"), makeSymbol("RESULT"), makeSymbol("TEST-RUNSTATE"), makeSymbol("RUN-STATUS"));

    static private final SubLList $list_alt231 = list(makeKeyword("ID"), $LOCK, makeKeyword("QUERY-SPEC"), makeKeyword("INFERENCE"), makeKeyword("RESULT"), makeKeyword("TEST-RUNSTATE"), makeKeyword("RUN-STATUS"));

    static private final SubLList $list_alt232 = list(makeSymbol("KBQR-ID"), makeSymbol("KBQR-LOCK"), makeSymbol("KBQR-QUERY-SPEC"), makeSymbol("KBQR-INFERENCE"), makeSymbol("KBQR-RESULT"), makeSymbol("KBQR-TEST-RUNSTATE"), makeSymbol("KBQR-RUN-STATUS"));

    static private final SubLList $list_alt233 = list(makeSymbol("_CSETF-KBQR-ID"), makeSymbol("_CSETF-KBQR-LOCK"), makeSymbol("_CSETF-KBQR-QUERY-SPEC"), makeSymbol("_CSETF-KBQR-INFERENCE"), makeSymbol("_CSETF-KBQR-RESULT"), makeSymbol("_CSETF-KBQR-TEST-RUNSTATE"), makeSymbol("_CSETF-KBQR-RUN-STATUS"));

    static private final SubLString $str_alt256$Invalid_slot__S_for_construction_ = makeString("Invalid slot ~S for construction function");

    static private final SubLList $list_alt263 = list(new SubLObject[]{ makeSymbol("ID"), makeSymbol("LOCK"), makeSymbol("TEST-SPEC"), makeSymbol("RESULT"), makeSymbol("QUERY-RUNSTATE"), makeSymbol("TEST-SET-RUNSTATE"), makeSymbol("RUN-STATUS"), makeSymbol("START"), makeSymbol("END") });

    static private final SubLList $list_alt264 = list(new SubLObject[]{ makeKeyword("ID"), $LOCK, makeKeyword("TEST-SPEC"), makeKeyword("RESULT"), makeKeyword("QUERY-RUNSTATE"), makeKeyword("TEST-SET-RUNSTATE"), makeKeyword("RUN-STATUS"), makeKeyword("START"), makeKeyword("END") });

    static private final SubLList $list_alt265 = list(new SubLObject[]{ makeSymbol("KCTR-ID"), makeSymbol("KCTR-LOCK"), makeSymbol("KCTR-TEST-SPEC"), makeSymbol("KCTR-RESULT"), makeSymbol("KCTR-QUERY-RUNSTATE"), makeSymbol("KCTR-TEST-SET-RUNSTATE"), makeSymbol("KCTR-RUN-STATUS"), makeSymbol("KCTR-START"), makeSymbol("KCTR-END") });

    static private final SubLList $list_alt266 = list(new SubLObject[]{ makeSymbol("_CSETF-KCTR-ID"), makeSymbol("_CSETF-KCTR-LOCK"), makeSymbol("_CSETF-KCTR-TEST-SPEC"), makeSymbol("_CSETF-KCTR-RESULT"), makeSymbol("_CSETF-KCTR-QUERY-RUNSTATE"), makeSymbol("_CSETF-KCTR-TEST-SET-RUNSTATE"), makeSymbol("_CSETF-KCTR-RUN-STATUS"), makeSymbol("_CSETF-KCTR-START"), makeSymbol("_CSETF-KCTR-END") });

    static private final SubLList $list_alt295 = list(makeSymbol("ID"), makeSymbol("LOCK"), makeSymbol("TEST-SET"), makeSymbol("RESULT"), makeSymbol("TEST-RUNSTATES"), makeSymbol("RUN-STATUS"), makeSymbol("START"), makeSymbol("END"));

    static private final SubLList $list_alt296 = list(makeKeyword("ID"), $LOCK, makeKeyword("TEST-SET"), makeKeyword("RESULT"), makeKeyword("TEST-RUNSTATES"), makeKeyword("RUN-STATUS"), makeKeyword("START"), makeKeyword("END"));

    static private final SubLList $list_alt297 = list(makeSymbol("KCTSR-ID"), makeSymbol("KCTSR-LOCK"), makeSymbol("KCTSR-TEST-SET"), makeSymbol("KCTSR-RESULT"), makeSymbol("KCTSR-TEST-RUNSTATES"), makeSymbol("KCTSR-RUN-STATUS"), makeSymbol("KCTSR-START"), makeSymbol("KCTSR-END"));

    static private final SubLList $list_alt298 = list(makeSymbol("_CSETF-KCTSR-ID"), makeSymbol("_CSETF-KCTSR-LOCK"), makeSymbol("_CSETF-KCTSR-TEST-SET"), makeSymbol("_CSETF-KCTSR-RESULT"), makeSymbol("_CSETF-KCTSR-TEST-RUNSTATES"), makeSymbol("_CSETF-KCTSR-RUN-STATUS"), makeSymbol("_CSETF-KCTSR-START"), makeSymbol("_CSETF-KCTSR-END"));

    static private final SubLList $list_alt324 = list(list(makeSymbol("QUERY-SET-RUN"), makeSymbol("QUERY-RUN"), makeSymbol("FILENAME"), makeSymbol("&KEY"), makeSymbol("DONE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLList $list_alt325 = list($DONE);

    static private final SubLSymbol $sym327$STREAM = makeUninternedSymbol("STREAM");

    static private final SubLSymbol $sym328$DONE_VAR = makeUninternedSymbol("DONE-VAR");

    static private final SubLList $list_alt331 = list(makeSymbol("STRINGP"));

    static private final SubLList $list_alt333 = list(makeKeyword("INPUT"));

    private static final SubLSymbol WITH_CFASL_COMMON_SYMBOLS = makeSymbol("WITH-CFASL-COMMON-SYMBOLS");

    static private final SubLList $list_alt335 = list(makeSymbol("KBQ-CFASL-COMMON-SYMBOLS"));

    static private final SubLList $list_alt343 = list(makeKeyword("EOF"));

    static private final SubLList $list_alt345 = list(T);

    static private final SubLList $list_alt348 = list(list(makeSymbol("QUERY-RUN"), makeSymbol("FILENAME"), makeSymbol("&KEY"), makeSymbol("DONE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLSymbol $sym349$QUERY_SET_RUN = makeUninternedSymbol("QUERY-SET-RUN");

    static private final SubLString $str_alt354$dwimming__s_to_NIL = makeString("dwimming ~s to NIL");

    static private final SubLString $str_alt355$_cfasl = makeString(".cfasl");

    static private final SubLString $str_alt356$_no_results = makeString("-no-results");

    static private final SubLString $str_alt357$Expected_a__a_file__got__s = makeString("Expected a ~a file, got ~s");

    static private final SubLString $str_alt358$answerable_sub_run_of_____A = makeString("answerable sub-run of :~%~A");

    static private final SubLString $str_alt360$succeeding_sub_run_of_____A = makeString("succeeding sub-run of :~%~A");

    static private final SubLString $str_alt362$unanswerable_sub_run_of_____A = makeString("unanswerable sub-run of :~%~A");

    static private final SubLString $str_alt363$failing_sub_run_of_____A = makeString("failing sub-run of :~%~A");

    static private final SubLString $str_alt365$__CommonSenseTest_sub_run_of_____ = makeString("#$CommonSenseTest sub-run of :~%~A");

    static private final SubLList $list_alt366 = list(makeSymbol("FILTERED-QUERY-SET-RUN-1"), makeSymbol("FILTERED-QUERY-SET-RUN-2"));

    public static final SubLSymbol $kw377$_MEMOIZED_ITEM_NOT_FOUND_ = makeKeyword("&MEMOIZED-ITEM-NOT-FOUND&");

    static private final SubLList $list_alt378 = cons(makeSymbol("FIRST-QUERY-SET-RUN"), makeSymbol("REST-QUERY-SET-RUNS"));

    static private final SubLList $list_alt379 = cons(makeSymbol("FIRST-TEST-SET-RUN"), makeSymbol("REST-TEST-SET-RUNS"));

    public static final SubLObject init_kbq_query_run_file_alt() {
        defparameter("*KCT-SET-RUNSTATE*", NIL);
        defparameter("*KCT-RUNSTATE*", NIL);
        defparameter("*KBQ-RUNSTATE*", NIL);
        deflexical("*KBQ-OLD-CFASL-COMMON-SYMBOLS*", $list_alt3);
        deflexical("*KBQ-NEW-CFASL-COMMON-SYMBOLS*", append($kbq_old_cfasl_common_symbols$.getGlobalValue(), $list_alt4));
        deflexical("*KBQ-CFASL-COMMON-SYMBOLS*", append($kbq_old_cfasl_common_symbols$.getGlobalValue(), $kbq_new_cfasl_common_symbols$.getGlobalValue()));
        deflexical("*KCT-OLD-CFASL-COMMON-SYMBOLS*", append($kbq_old_cfasl_common_symbols$.getGlobalValue(), $list_alt7));
        deflexical("*KCT-CFASL-COMMON-SYMBOLS*", append($kbq_old_cfasl_common_symbols$.getGlobalValue(), $list_alt7, $kbq_new_cfasl_common_symbols$.getGlobalValue()));
        defparameter("*KBQ-OUTLIER-TIMEOUT*", $int$600);
        defparameter("*KBQ-INTERNAL-TIME-UNITS-PER-SECOND*", NIL);
        defparameter("*KBQ-RUN-NUMBER*", ONE_INTEGER);
        deflexical("*KCT-TEST-METRIC-TABLE*", $list_alt136);
        deflexical("*KBQ-DEFAULT-OUTLIER-TIMEOUT*", $int$600);
        deflexical("*KBQ-TEST-COLLECTION-TO-QUERY-SET-QUERY*", $list_alt163);
        deflexical("*LAST-QUERY-SET-RUN*", NIL != boundp($last_query_set_run$) ? ((SubLObject) ($last_query_set_run$.getGlobalValue())) : NIL);
        deflexical("*LAST-TEST-SET-RUN*", NIL != boundp($last_test_set_run$) ? ((SubLObject) ($last_test_set_run$.getGlobalValue())) : NIL);
        deflexical("*RUNSTATE-ISG*", NIL != boundp($runstate_isg$) ? ((SubLObject) ($runstate_isg$.getGlobalValue())) : integer_sequence_generator.new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED));
        deflexical("*RUNSTATE-INDEX*", NIL != boundp($runstate_index$) ? ((SubLObject) ($runstate_index$.getGlobalValue())) : dictionary.new_dictionary(UNPROVIDED, UNPROVIDED));
        defconstant("*DTP-KBQ-RUNSTATE*", KBQ_RUNSTATE);
        defconstant("*DTP-KCT-RUNSTATE*", KCT_RUNSTATE);
        defconstant("*DTP-KCT-SET-RUNSTATE*", KCT_SET_RUNSTATE);
        deflexical("*QUERY-SET-RUN-FILE-EXTENSION*", $str_alt355$_cfasl);
        defparameter("*KBQ-FILTER-QUERY-SET-RUN-TO-QUERIES*", NIL);
        defparameter("*KCT-FILTER-TEST-SET-RUN-TO-TESTS*", NIL);
        deflexical("*CACHED-ALL-INSTANCES-AMONG-CACHING-STATE*", NIL);
        deflexical("*KBQ-SUMMARY-STATISTICS*", $list_alt405);
        defparameter("*KBQ-PROGRESS-STREAM*", NIL);
        defparameter("*KBQ-BENCHMARK-OUTLIER-TIMEOUT*", $int$3600);
        deflexical("*KBQ-TEST-QUERY-SET*", $list_alt491);
        return NIL;
    }

    public static SubLObject init_kbq_query_run_file() {
        if (SubLFiles.USE_V1) {
            defparameter("*KCT-SET-RUNSTATE*", NIL);
            defparameter("*KCT-RUNSTATE*", NIL);
            defparameter("*KBQ-RUNSTATE*", NIL);
            deflexical("*KBQ-OLD-CFASL-COMMON-SYMBOLS*", kbq_query_run.$list3);
            deflexical("*KBQ-NEW-CFASL-COMMON-SYMBOLS*", append(kbq_query_run.$kbq_old_cfasl_common_symbols$.getGlobalValue(), kbq_query_run.$list4));
            deflexical("*KBQ-CFASL-COMMON-SYMBOLS*", append(kbq_query_run.$kbq_old_cfasl_common_symbols$.getGlobalValue(), kbq_query_run.$kbq_new_cfasl_common_symbols$.getGlobalValue()));
            deflexical("*KBQ-CFASL-COMMON-SYMBOLS-SIMPLE*", NIL);
            deflexical("*KCT-OLD-CFASL-COMMON-SYMBOLS*", append(kbq_query_run.$kbq_old_cfasl_common_symbols$.getGlobalValue(), kbq_query_run.$list9));
            deflexical("*KCT-CFASL-COMMON-SYMBOLS*", append(kbq_query_run.$kbq_old_cfasl_common_symbols$.getGlobalValue(), kbq_query_run.$list9, kbq_query_run.$kbq_new_cfasl_common_symbols$.getGlobalValue()));
            defparameter("*KBQ-OUTLIER-TIMEOUT*", kbq_query_run.$int$600);
            defparameter("*KBQ-INTERNAL-TIME-UNITS-PER-SECOND*", NIL);
            defparameter("*KBQ-RUN-NUMBER*", ONE_INTEGER);
            deflexical("*KCT-TEST-METRIC-TABLE*", kbq_query_run.$list150);
            deflexical("*KBQ-DEFAULT-OUTLIER-TIMEOUT*", kbq_query_run.$int$600);
            deflexical("*KBQ-TEST-COLLECTION-TO-QUERY-SET-QUERY*", kbq_query_run.$list183);
            deflexical("*LAST-QUERY-SET-RUN*", SubLTrampolineFile.maybeDefault(kbq_query_run.$last_query_set_run$, kbq_query_run.$last_query_set_run$, NIL));
            deflexical("*LAST-TEST-SET-RUN*", SubLTrampolineFile.maybeDefault(kbq_query_run.$last_test_set_run$, kbq_query_run.$last_test_set_run$, NIL));
            deflexical("*RUNSTATE-ISG*", SubLTrampolineFile.maybeDefault(kbq_query_run.$runstate_isg$, kbq_query_run.$runstate_isg$, () -> new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED)));
            deflexical("*RUNSTATE-INDEX*", SubLTrampolineFile.maybeDefault(kbq_query_run.$runstate_index$, kbq_query_run.$runstate_index$, () -> new_dictionary(UNPROVIDED, UNPROVIDED)));
            defconstant("*DTP-KBQ-RUNSTATE*", kbq_query_run.KBQ_RUNSTATE);
            defconstant("*DTP-KCT-RUNSTATE*", kbq_query_run.KCT_RUNSTATE);
            defconstant("*DTP-KCT-SET-RUNSTATE*", kbq_query_run.KCT_SET_RUNSTATE);
            deflexical("*QUERY-SET-RUN-FILE-EXTENSION*", kbq_query_run.$str406$_cfasl);
            defparameter("*KBQ-FILTER-QUERY-SET-RUN-TO-QUERIES*", NIL);
            defparameter("*KCT-FILTER-TEST-SET-RUN-TO-TESTS*", NIL);
            deflexical("*CACHED-ALL-INSTANCES-AMONG-CACHING-STATE*", NIL);
            deflexical("*KBQ-SUMMARY-STATISTICS*", kbq_query_run.$list458);
            defparameter("*KBQ-PROGRESS-STREAM*", NIL);
            defparameter("*KBQ-BENCHMARK-OUTLIER-TIMEOUT*", kbq_query_run.$int$3600);
            deflexical("*KBQ-TEST-QUERY-SET*", kbq_query_run.$list590);
        }
        if (SubLFiles.USE_V2) {
            deflexical("*KCT-OLD-CFASL-COMMON-SYMBOLS*", append($kbq_old_cfasl_common_symbols$.getGlobalValue(), $list_alt7));
            deflexical("*KCT-CFASL-COMMON-SYMBOLS*", append($kbq_old_cfasl_common_symbols$.getGlobalValue(), $list_alt7, $kbq_new_cfasl_common_symbols$.getGlobalValue()));
            deflexical("*KCT-TEST-METRIC-TABLE*", $list_alt136);
            deflexical("*KBQ-TEST-COLLECTION-TO-QUERY-SET-QUERY*", $list_alt163);
            deflexical("*LAST-QUERY-SET-RUN*", NIL != boundp($last_query_set_run$) ? ((SubLObject) ($last_query_set_run$.getGlobalValue())) : NIL);
            deflexical("*LAST-TEST-SET-RUN*", NIL != boundp($last_test_set_run$) ? ((SubLObject) ($last_test_set_run$.getGlobalValue())) : NIL);
            deflexical("*RUNSTATE-ISG*", NIL != boundp($runstate_isg$) ? ((SubLObject) ($runstate_isg$.getGlobalValue())) : integer_sequence_generator.new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED));
            deflexical("*RUNSTATE-INDEX*", NIL != boundp($runstate_index$) ? ((SubLObject) ($runstate_index$.getGlobalValue())) : dictionary.new_dictionary(UNPROVIDED, UNPROVIDED));
            deflexical("*QUERY-SET-RUN-FILE-EXTENSION*", $str_alt355$_cfasl);
            deflexical("*KBQ-SUMMARY-STATISTICS*", $list_alt405);
            deflexical("*KBQ-TEST-QUERY-SET*", $list_alt491);
        }
        return NIL;
    }

    public static SubLObject init_kbq_query_run_file_Previous() {
        defparameter("*KCT-SET-RUNSTATE*", NIL);
        defparameter("*KCT-RUNSTATE*", NIL);
        defparameter("*KBQ-RUNSTATE*", NIL);
        deflexical("*KBQ-OLD-CFASL-COMMON-SYMBOLS*", kbq_query_run.$list3);
        deflexical("*KBQ-NEW-CFASL-COMMON-SYMBOLS*", append(kbq_query_run.$kbq_old_cfasl_common_symbols$.getGlobalValue(), kbq_query_run.$list4));
        deflexical("*KBQ-CFASL-COMMON-SYMBOLS*", append(kbq_query_run.$kbq_old_cfasl_common_symbols$.getGlobalValue(), kbq_query_run.$kbq_new_cfasl_common_symbols$.getGlobalValue()));
        deflexical("*KBQ-CFASL-COMMON-SYMBOLS-SIMPLE*", NIL);
        deflexical("*KCT-OLD-CFASL-COMMON-SYMBOLS*", append(kbq_query_run.$kbq_old_cfasl_common_symbols$.getGlobalValue(), kbq_query_run.$list9));
        deflexical("*KCT-CFASL-COMMON-SYMBOLS*", append(kbq_query_run.$kbq_old_cfasl_common_symbols$.getGlobalValue(), kbq_query_run.$list9, kbq_query_run.$kbq_new_cfasl_common_symbols$.getGlobalValue()));
        defparameter("*KBQ-OUTLIER-TIMEOUT*", kbq_query_run.$int$600);
        defparameter("*KBQ-INTERNAL-TIME-UNITS-PER-SECOND*", NIL);
        defparameter("*KBQ-RUN-NUMBER*", ONE_INTEGER);
        deflexical("*KCT-TEST-METRIC-TABLE*", kbq_query_run.$list150);
        deflexical("*KBQ-DEFAULT-OUTLIER-TIMEOUT*", kbq_query_run.$int$600);
        deflexical("*KBQ-TEST-COLLECTION-TO-QUERY-SET-QUERY*", kbq_query_run.$list183);
        deflexical("*LAST-QUERY-SET-RUN*", SubLTrampolineFile.maybeDefault(kbq_query_run.$last_query_set_run$, kbq_query_run.$last_query_set_run$, NIL));
        deflexical("*LAST-TEST-SET-RUN*", SubLTrampolineFile.maybeDefault(kbq_query_run.$last_test_set_run$, kbq_query_run.$last_test_set_run$, NIL));
        deflexical("*RUNSTATE-ISG*", SubLTrampolineFile.maybeDefault(kbq_query_run.$runstate_isg$, kbq_query_run.$runstate_isg$, () -> new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED)));
        deflexical("*RUNSTATE-INDEX*", SubLTrampolineFile.maybeDefault(kbq_query_run.$runstate_index$, kbq_query_run.$runstate_index$, () -> new_dictionary(UNPROVIDED, UNPROVIDED)));
        defconstant("*DTP-KBQ-RUNSTATE*", kbq_query_run.KBQ_RUNSTATE);
        defconstant("*DTP-KCT-RUNSTATE*", kbq_query_run.KCT_RUNSTATE);
        defconstant("*DTP-KCT-SET-RUNSTATE*", kbq_query_run.KCT_SET_RUNSTATE);
        deflexical("*QUERY-SET-RUN-FILE-EXTENSION*", kbq_query_run.$str406$_cfasl);
        defparameter("*KBQ-FILTER-QUERY-SET-RUN-TO-QUERIES*", NIL);
        defparameter("*KCT-FILTER-TEST-SET-RUN-TO-TESTS*", NIL);
        deflexical("*CACHED-ALL-INSTANCES-AMONG-CACHING-STATE*", NIL);
        deflexical("*KBQ-SUMMARY-STATISTICS*", kbq_query_run.$list458);
        defparameter("*KBQ-PROGRESS-STREAM*", NIL);
        defparameter("*KBQ-BENCHMARK-OUTLIER-TIMEOUT*", kbq_query_run.$int$3600);
        deflexical("*KBQ-TEST-QUERY-SET*", kbq_query_run.$list590);
        return NIL;
    }

    static private final SubLSymbol $sym381$_ = makeSymbol(">");

    static private final SubLList $list_alt384 = list(makeSymbol("&KEY"), makeSymbol("QUERY"), makeSymbol("MISSING-FROM-1"), makeSymbol("MISSING-FROM-2"));

    static private final SubLList $list_alt385 = list(makeKeyword("QUERY"), makeKeyword("MISSING-FROM-1"), makeKeyword("MISSING-FROM-2"));

    static private final SubLString $str_alt393$_S_and__S_are_different_queries = makeString("~S and ~S are different queries");

    static private final SubLString $str_alt394$_S_has_no_result = makeString("~S has no result");

    static private final SubLString $str_alt395$query_set_runs_contained_differen = makeString("query set runs contained different queries");

    static private final SubLString $str_alt396$_s__s__s__s__s__ = makeString("~s ~s ~s ~s ~s~%");

    static private final SubLString $str_alt397$_s__s__s__ = makeString("~s ~s ~s~%");

    static private final SubLString $str_alt401$unexpected_change__S = makeString("unexpected change ~S");

    static private final SubLString $str_alt402$_S_and__S_are_different_tests = makeString("~S and ~S are different tests");

    static private final SubLString $str_alt403$_S_has_no_status = makeString("~S has no status");

    static private final SubLList $list_alt405 = list(new SubLObject[]{ makeKeyword("TOTAL"), makeKeyword("INCREASE"), makeKeyword("TOTAL-SUCCESS"), makeKeyword("INCREASE"), makeKeyword("TOTAL-FAILURE"), makeKeyword("DECREASE"), makeKeyword("TOTAL-ERROR"), makeKeyword("DECREASE"), makeKeyword("TOTAL-LUMPY"), makeKeyword("DECREASE"), makeKeyword("TOTAL-ANSWERABLE"), makeKeyword("INCREASE"), makeKeyword("TOTAL-UNANSWERABLE"), makeKeyword("DECREASE"), makeKeyword("SUM-ANSWER-COUNT"), makeKeyword("INCREASE"), makeKeyword("MEAN-ANSWER-COUNT"), makeKeyword("INCREASE"), makeKeyword("MEDIAN-ANSWER-COUNT"), makeKeyword("INCREASE"), makeKeyword("MEAN-TIME-TO-FIRST-ANSWER"), makeKeyword("DECREASE"), makeKeyword("MEDIAN-TIME-TO-FIRST-ANSWER"), makeKeyword("DECREASE"), makeKeyword("STDEV-TIME-TO-FIRST-ANSWER"), makeKeyword("NEITHER"), makeKeyword("MEAN-COMPLETE-TIME-TO-FIRST-ANSWER"), makeKeyword("DECREASE"), makeKeyword("MEDIAN-COMPLETE-TIME-TO-FIRST-ANSWER"), makeKeyword("DECREASE"), makeKeyword("STDEV-COMPLETE-TIME-TO-FIRST-ANSWER"), makeKeyword("NEITHER"), makeKeyword("MEAN-TIME-TO-LAST-ANSWER"), makeKeyword("DECREASE"), makeKeyword("MEDIAN-TIME-TO-LAST-ANSWER"), makeKeyword("DECREASE"), makeKeyword("STDEV-TIME-TO-LAST-ANSWER"), makeKeyword("NEITHER"), makeKeyword("SUM-ANSWERABILITY-TIME"), makeKeyword("DECREASE"), makeKeyword("MEAN-ANSWERABILITY-TIME"), makeKeyword("DECREASE"), makeKeyword("STDEV-ANSWERABILITY-TIME"), makeKeyword("NEITHER"), makeKeyword("MEDIAN-ANSWERABILITY-TIME"), makeKeyword("DECREASE"), makeKeyword("SUM-TOTAL-TIME"), makeKeyword("DECREASE"), makeKeyword("MEAN-TOTAL-TIME"), makeKeyword("DECREASE"), makeKeyword("STDEV-TOTAL-TIME"), makeKeyword("NEITHER"), makeKeyword("MEDIAN-TOTAL-TIME"), makeKeyword("DECREASE"), makeKeyword("SUM-COMPLETE-TOTAL-TIME"), makeKeyword("DECREASE"), makeKeyword("MEAN-COMPLETE-TOTAL-TIME"), makeKeyword("DECREASE"), makeKeyword("STDEV-COMPLETE-TOTAL-TIME"), makeKeyword("NEITHER"), makeKeyword("MEDIAN-COMPLETE-TOTAL-TIME"), makeKeyword("DECREASE"), makeKeyword("MEDIAN-TIME-PER-ANSWER"), makeKeyword("DECREASE"), makeKeyword("MEDIAN-COMPLETE-TIME-PER-ANSWER"), makeKeyword("DECREASE") });

    public static final SubLObject setup_kbq_query_run_file_alt() {
        register_macro_helper(KBQ_CFASL_COMMON_SYMBOLS, DO_QUERY_SET_RUN);
        declare_defglobal($last_query_set_run$);
        register_macro_helper(RUN_KBQ_EXPERIMENT_INTERNAL, RUN_KBQ_EXPERIMENT);
        declare_defglobal($last_test_set_run$);
        register_macro_helper(RUN_KCT_EXPERIMENT_INTERNAL, RUN_KCT_EXPERIMENT);
        declare_defglobal($runstate_isg$);
        declare_defglobal($runstate_index$);
        register_method($print_object_method_table$.getGlobalValue(), $dtp_kbq_runstate$.getGlobalValue(), symbol_function(KBQ_RUNSTATE_PRINT_FUNCTION_TRAMPOLINE));
        def_csetf(KBQR_ID, _CSETF_KBQR_ID);
        def_csetf(KBQR_LOCK, _CSETF_KBQR_LOCK);
        def_csetf(KBQR_QUERY_SPEC, _CSETF_KBQR_QUERY_SPEC);
        def_csetf(KBQR_INFERENCE, _CSETF_KBQR_INFERENCE);
        def_csetf(KBQR_RESULT, _CSETF_KBQR_RESULT);
        def_csetf(KBQR_TEST_RUNSTATE, _CSETF_KBQR_TEST_RUNSTATE);
        def_csetf(KBQR_RUN_STATUS, _CSETF_KBQR_RUN_STATUS);
        identity(KBQ_RUNSTATE);
        register_method($print_object_method_table$.getGlobalValue(), $dtp_kct_runstate$.getGlobalValue(), symbol_function(KCT_RUNSTATE_PRINT_FUNCTION_TRAMPOLINE));
        def_csetf(KCTR_ID, _CSETF_KCTR_ID);
        def_csetf(KCTR_LOCK, _CSETF_KCTR_LOCK);
        def_csetf(KCTR_TEST_SPEC, _CSETF_KCTR_TEST_SPEC);
        def_csetf(KCTR_RESULT, _CSETF_KCTR_RESULT);
        def_csetf(KCTR_QUERY_RUNSTATE, _CSETF_KCTR_QUERY_RUNSTATE);
        def_csetf(KCTR_TEST_SET_RUNSTATE, _CSETF_KCTR_TEST_SET_RUNSTATE);
        def_csetf(KCTR_RUN_STATUS, _CSETF_KCTR_RUN_STATUS);
        def_csetf(KCTR_START, _CSETF_KCTR_START);
        def_csetf(KCTR_END, _CSETF_KCTR_END);
        identity(KCT_RUNSTATE);
        register_method($print_object_method_table$.getGlobalValue(), $dtp_kct_set_runstate$.getGlobalValue(), symbol_function(KCT_SET_RUNSTATE_PRINT_FUNCTION_TRAMPOLINE));
        def_csetf(KCTSR_ID, _CSETF_KCTSR_ID);
        def_csetf(KCTSR_LOCK, _CSETF_KCTSR_LOCK);
        def_csetf(KCTSR_TEST_SET, _CSETF_KCTSR_TEST_SET);
        def_csetf(KCTSR_RESULT, _CSETF_KCTSR_RESULT);
        def_csetf(KCTSR_TEST_RUNSTATES, _CSETF_KCTSR_TEST_RUNSTATES);
        def_csetf(KCTSR_RUN_STATUS, _CSETF_KCTSR_RUN_STATUS);
        def_csetf(KCTSR_START, _CSETF_KCTSR_START);
        def_csetf(KCTSR_END, _CSETF_KCTSR_END);
        identity(KCT_SET_RUNSTATE);
        register_macro_helper(KBQ_LOAD_QUERY_SET_RUN_INT, DO_QUERY_SET_RUN);
        register_macro_helper(KBQ_LOAD_QUERY_RUN_INT, DO_QUERY_SET_RUN);
        register_macro_helper(KBQ_NCLEAN_QUERY_RUN, DO_QUERY_SET_RUN);
        note_globally_cached_function(CACHED_ALL_INSTANCES_AMONG);
        define_test_case_table_int(COMPUTE_NEW_ROOT_RELATIVE_ANSWER_TIMES, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$pace, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), $list_alt499);
        return NIL;
    }

    public static SubLObject setup_kbq_query_run_file() {
        if (SubLFiles.USE_V1) {
            register_macro_helper(kbq_query_run.KBQ_CFASL_COMMON_SYMBOLS, kbq_query_run.DO_QUERY_SET_RUN);
            register_macro_helper(kbq_query_run.KBQ_CFASL_COMMON_SYMBOLS_SIMPLE, kbq_query_run.DO_QUERY_SET_RUN);
            register_external_symbol(kbq_query_run.ENSURE_SKSI_MODULES_NEEDED);
            memoization_state.note_memoized_function(kbq_query_run.SKSI_MODULES_NEEDED_SORTED_MEMOIZED);
            memoization_state.note_memoized_function(kbq_query_run.QUERY_SKSI_MODULES_NEEDED_SORTED_MEMOIZED);
            declare_defglobal(kbq_query_run.$last_query_set_run$);
            register_macro_helper(kbq_query_run.RUN_KBQ_EXPERIMENT_INTERNAL, kbq_query_run.RUN_KBQ_EXPERIMENT);
            declare_defglobal(kbq_query_run.$last_test_set_run$);
            register_macro_helper(kbq_query_run.RUN_KCT_EXPERIMENT_INTERNAL, kbq_query_run.RUN_KCT_EXPERIMENT);
            declare_defglobal(kbq_query_run.$runstate_isg$);
            declare_defglobal(kbq_query_run.$runstate_index$);
            register_method($print_object_method_table$.getGlobalValue(), kbq_query_run.$dtp_kbq_runstate$.getGlobalValue(), symbol_function(kbq_query_run.KBQ_RUNSTATE_PRINT_FUNCTION_TRAMPOLINE));
            SubLSpecialOperatorDeclarations.proclaim(kbq_query_run.$list277);
            def_csetf(kbq_query_run.KBQR_ID, kbq_query_run._CSETF_KBQR_ID);
            def_csetf(kbq_query_run.KBQR_LOCK, kbq_query_run._CSETF_KBQR_LOCK);
            def_csetf(kbq_query_run.KBQR_QUERY_SPEC, kbq_query_run._CSETF_KBQR_QUERY_SPEC);
            def_csetf(kbq_query_run.KBQR_INFERENCE, kbq_query_run._CSETF_KBQR_INFERENCE);
            def_csetf(kbq_query_run.KBQR_RESULT, kbq_query_run._CSETF_KBQR_RESULT);
            def_csetf(kbq_query_run.KBQR_TEST_RUNSTATE, kbq_query_run._CSETF_KBQR_TEST_RUNSTATE);
            def_csetf(kbq_query_run.KBQR_RUN_STATUS, kbq_query_run._CSETF_KBQR_RUN_STATUS);
            identity(kbq_query_run.KBQ_RUNSTATE);
            register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), kbq_query_run.$dtp_kbq_runstate$.getGlobalValue(), symbol_function(kbq_query_run.VISIT_DEFSTRUCT_OBJECT_KBQ_RUNSTATE_METHOD));
            register_method($print_object_method_table$.getGlobalValue(), kbq_query_run.$dtp_kct_runstate$.getGlobalValue(), symbol_function(kbq_query_run.KCT_RUNSTATE_PRINT_FUNCTION_TRAMPOLINE));
            SubLSpecialOperatorDeclarations.proclaim(kbq_query_run.$list315);
            def_csetf(kbq_query_run.KCTR_ID, kbq_query_run._CSETF_KCTR_ID);
            def_csetf(kbq_query_run.KCTR_LOCK, kbq_query_run._CSETF_KCTR_LOCK);
            def_csetf(kbq_query_run.KCTR_TEST_SPEC, kbq_query_run._CSETF_KCTR_TEST_SPEC);
            def_csetf(kbq_query_run.KCTR_RESULT, kbq_query_run._CSETF_KCTR_RESULT);
            def_csetf(kbq_query_run.KCTR_QUERY_RUNSTATE, kbq_query_run._CSETF_KCTR_QUERY_RUNSTATE);
            def_csetf(kbq_query_run.KCTR_TEST_SET_RUNSTATE, kbq_query_run._CSETF_KCTR_TEST_SET_RUNSTATE);
            def_csetf(kbq_query_run.KCTR_RUN_STATUS, kbq_query_run._CSETF_KCTR_RUN_STATUS);
            def_csetf(kbq_query_run.KCTR_START, kbq_query_run._CSETF_KCTR_START);
            def_csetf(kbq_query_run.KCTR_END, kbq_query_run._CSETF_KCTR_END);
            identity(kbq_query_run.KCT_RUNSTATE);
            register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), kbq_query_run.$dtp_kct_runstate$.getGlobalValue(), symbol_function(kbq_query_run.VISIT_DEFSTRUCT_OBJECT_KCT_RUNSTATE_METHOD));
            register_method($print_object_method_table$.getGlobalValue(), kbq_query_run.$dtp_kct_set_runstate$.getGlobalValue(), symbol_function(kbq_query_run.KCT_SET_RUNSTATE_PRINT_FUNCTION_TRAMPOLINE));
            SubLSpecialOperatorDeclarations.proclaim(kbq_query_run.$list349);
            def_csetf(kbq_query_run.KCTSR_ID, kbq_query_run._CSETF_KCTSR_ID);
            def_csetf(kbq_query_run.KCTSR_LOCK, kbq_query_run._CSETF_KCTSR_LOCK);
            def_csetf(kbq_query_run.KCTSR_TEST_SET, kbq_query_run._CSETF_KCTSR_TEST_SET);
            def_csetf(kbq_query_run.KCTSR_RESULT, kbq_query_run._CSETF_KCTSR_RESULT);
            def_csetf(kbq_query_run.KCTSR_TEST_RUNSTATES, kbq_query_run._CSETF_KCTSR_TEST_RUNSTATES);
            def_csetf(kbq_query_run.KCTSR_RUN_STATUS, kbq_query_run._CSETF_KCTSR_RUN_STATUS);
            def_csetf(kbq_query_run.KCTSR_START, kbq_query_run._CSETF_KCTSR_START);
            def_csetf(kbq_query_run.KCTSR_END, kbq_query_run._CSETF_KCTSR_END);
            identity(kbq_query_run.KCT_SET_RUNSTATE);
            register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), kbq_query_run.$dtp_kct_set_runstate$.getGlobalValue(), symbol_function(kbq_query_run.VISIT_DEFSTRUCT_OBJECT_KCT_SET_RUNSTATE_METHOD));
            register_macro_helper(kbq_query_run.KBQ_LOAD_QUERY_SET_RUN_INT, kbq_query_run.DO_QUERY_SET_RUN);
            register_macro_helper(kbq_query_run.KBQ_LOAD_QUERY_RUN_INT, kbq_query_run.DO_QUERY_SET_RUN);
            register_macro_helper(kbq_query_run.KBQ_NCLEAN_QUERY_RUN, kbq_query_run.DO_QUERY_SET_RUN);
            memoization_state.note_globally_cached_function(kbq_query_run.CACHED_ALL_INSTANCES_AMONG);
            define_test_case_table_int(kbq_query_run.COMPUTE_NEW_ROOT_RELATIVE_ANSWER_TIMES, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), kbq_query_run.$list597);
        }
        if (SubLFiles.USE_V2) {
            define_test_case_table_int(COMPUTE_NEW_ROOT_RELATIVE_ANSWER_TIMES, list(new SubLObject[]{ $TEST, NIL, $OWNER, $$$pace, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), $list_alt499);
        }
        return NIL;
    }

    public static SubLObject setup_kbq_query_run_file_Previous() {
        register_macro_helper(kbq_query_run.KBQ_CFASL_COMMON_SYMBOLS, kbq_query_run.DO_QUERY_SET_RUN);
        register_macro_helper(kbq_query_run.KBQ_CFASL_COMMON_SYMBOLS_SIMPLE, kbq_query_run.DO_QUERY_SET_RUN);
        register_external_symbol(kbq_query_run.ENSURE_SKSI_MODULES_NEEDED);
        memoization_state.note_memoized_function(kbq_query_run.SKSI_MODULES_NEEDED_SORTED_MEMOIZED);
        memoization_state.note_memoized_function(kbq_query_run.QUERY_SKSI_MODULES_NEEDED_SORTED_MEMOIZED);
        declare_defglobal(kbq_query_run.$last_query_set_run$);
        register_macro_helper(kbq_query_run.RUN_KBQ_EXPERIMENT_INTERNAL, kbq_query_run.RUN_KBQ_EXPERIMENT);
        declare_defglobal(kbq_query_run.$last_test_set_run$);
        register_macro_helper(kbq_query_run.RUN_KCT_EXPERIMENT_INTERNAL, kbq_query_run.RUN_KCT_EXPERIMENT);
        declare_defglobal(kbq_query_run.$runstate_isg$);
        declare_defglobal(kbq_query_run.$runstate_index$);
        register_method($print_object_method_table$.getGlobalValue(), kbq_query_run.$dtp_kbq_runstate$.getGlobalValue(), symbol_function(kbq_query_run.KBQ_RUNSTATE_PRINT_FUNCTION_TRAMPOLINE));
        SubLSpecialOperatorDeclarations.proclaim(kbq_query_run.$list277);
        def_csetf(kbq_query_run.KBQR_ID, kbq_query_run._CSETF_KBQR_ID);
        def_csetf(kbq_query_run.KBQR_LOCK, kbq_query_run._CSETF_KBQR_LOCK);
        def_csetf(kbq_query_run.KBQR_QUERY_SPEC, kbq_query_run._CSETF_KBQR_QUERY_SPEC);
        def_csetf(kbq_query_run.KBQR_INFERENCE, kbq_query_run._CSETF_KBQR_INFERENCE);
        def_csetf(kbq_query_run.KBQR_RESULT, kbq_query_run._CSETF_KBQR_RESULT);
        def_csetf(kbq_query_run.KBQR_TEST_RUNSTATE, kbq_query_run._CSETF_KBQR_TEST_RUNSTATE);
        def_csetf(kbq_query_run.KBQR_RUN_STATUS, kbq_query_run._CSETF_KBQR_RUN_STATUS);
        identity(kbq_query_run.KBQ_RUNSTATE);
        register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), kbq_query_run.$dtp_kbq_runstate$.getGlobalValue(), symbol_function(kbq_query_run.VISIT_DEFSTRUCT_OBJECT_KBQ_RUNSTATE_METHOD));
        register_method($print_object_method_table$.getGlobalValue(), kbq_query_run.$dtp_kct_runstate$.getGlobalValue(), symbol_function(kbq_query_run.KCT_RUNSTATE_PRINT_FUNCTION_TRAMPOLINE));
        SubLSpecialOperatorDeclarations.proclaim(kbq_query_run.$list315);
        def_csetf(kbq_query_run.KCTR_ID, kbq_query_run._CSETF_KCTR_ID);
        def_csetf(kbq_query_run.KCTR_LOCK, kbq_query_run._CSETF_KCTR_LOCK);
        def_csetf(kbq_query_run.KCTR_TEST_SPEC, kbq_query_run._CSETF_KCTR_TEST_SPEC);
        def_csetf(kbq_query_run.KCTR_RESULT, kbq_query_run._CSETF_KCTR_RESULT);
        def_csetf(kbq_query_run.KCTR_QUERY_RUNSTATE, kbq_query_run._CSETF_KCTR_QUERY_RUNSTATE);
        def_csetf(kbq_query_run.KCTR_TEST_SET_RUNSTATE, kbq_query_run._CSETF_KCTR_TEST_SET_RUNSTATE);
        def_csetf(kbq_query_run.KCTR_RUN_STATUS, kbq_query_run._CSETF_KCTR_RUN_STATUS);
        def_csetf(kbq_query_run.KCTR_START, kbq_query_run._CSETF_KCTR_START);
        def_csetf(kbq_query_run.KCTR_END, kbq_query_run._CSETF_KCTR_END);
        identity(kbq_query_run.KCT_RUNSTATE);
        register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), kbq_query_run.$dtp_kct_runstate$.getGlobalValue(), symbol_function(kbq_query_run.VISIT_DEFSTRUCT_OBJECT_KCT_RUNSTATE_METHOD));
        register_method($print_object_method_table$.getGlobalValue(), kbq_query_run.$dtp_kct_set_runstate$.getGlobalValue(), symbol_function(kbq_query_run.KCT_SET_RUNSTATE_PRINT_FUNCTION_TRAMPOLINE));
        SubLSpecialOperatorDeclarations.proclaim(kbq_query_run.$list349);
        def_csetf(kbq_query_run.KCTSR_ID, kbq_query_run._CSETF_KCTSR_ID);
        def_csetf(kbq_query_run.KCTSR_LOCK, kbq_query_run._CSETF_KCTSR_LOCK);
        def_csetf(kbq_query_run.KCTSR_TEST_SET, kbq_query_run._CSETF_KCTSR_TEST_SET);
        def_csetf(kbq_query_run.KCTSR_RESULT, kbq_query_run._CSETF_KCTSR_RESULT);
        def_csetf(kbq_query_run.KCTSR_TEST_RUNSTATES, kbq_query_run._CSETF_KCTSR_TEST_RUNSTATES);
        def_csetf(kbq_query_run.KCTSR_RUN_STATUS, kbq_query_run._CSETF_KCTSR_RUN_STATUS);
        def_csetf(kbq_query_run.KCTSR_START, kbq_query_run._CSETF_KCTSR_START);
        def_csetf(kbq_query_run.KCTSR_END, kbq_query_run._CSETF_KCTSR_END);
        identity(kbq_query_run.KCT_SET_RUNSTATE);
        register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), kbq_query_run.$dtp_kct_set_runstate$.getGlobalValue(), symbol_function(kbq_query_run.VISIT_DEFSTRUCT_OBJECT_KCT_SET_RUNSTATE_METHOD));
        register_macro_helper(kbq_query_run.KBQ_LOAD_QUERY_SET_RUN_INT, kbq_query_run.DO_QUERY_SET_RUN);
        register_macro_helper(kbq_query_run.KBQ_LOAD_QUERY_RUN_INT, kbq_query_run.DO_QUERY_SET_RUN);
        register_macro_helper(kbq_query_run.KBQ_NCLEAN_QUERY_RUN, kbq_query_run.DO_QUERY_SET_RUN);
        memoization_state.note_globally_cached_function(kbq_query_run.CACHED_ALL_INSTANCES_AMONG);
        define_test_case_table_int(kbq_query_run.COMPUTE_NEW_ROOT_RELATIVE_ANSWER_TIMES, list(new SubLObject[]{ $TEST, NIL, $OWNER, NIL, $CLASSES, NIL, $KB, $TINY, $WORKING_, T }), kbq_query_run.$list597);
        return NIL;
    }

    static private final SubLList $list_alt406 = list(makeKeyword("INCREASE"), makeKeyword("DECREASE"), makeKeyword("NEITHER"));

    static private final SubLString $str_alt409$empty__ = makeString("empty~%");

    @Override
    public void declareFunctions() {
        kbq_query_run.declare_kbq_query_run_file();
    }

    @Override
    public void initializeVariables() {
        kbq_query_run.init_kbq_query_run_file();
    }

    @Override
    public void runTopLevelForms() {
        kbq_query_run.setup_kbq_query_run_file();
    }

    static {
    }

    static private final SubLString $str_alt437$ignoring_metric__S = makeString("ignoring metric ~S");

    static private final SubLList $list_alt444 = list(makeKeyword("COMPLETE-TIME-TO-FIRST-ANSWER"), makeKeyword("COMPLETE-TOTAL-TIME"), makeKeyword("ANSWERABILITY-TIME"), makeKeyword("ANSWER-COUNT"));

    static private final SubLString $str_alt445$_0 = makeString(":0");

    static private final SubLString $str_alt447$____Answerability_analysis____ = makeString("~%~%Answerability analysis: ~%");

    static private final SubLString $str_alt448$Total_____________s__s__s__ = makeString("Total:           ~s ~s ~s~%");

    static private final SubLString $str_alt449$____Basic_analysis____ = makeString("~%~%Basic analysis: ~%");

    static private final SubLString $str_alt450$____Mutually_Answerable____ = makeString("~%~%Mutually Answerable: ~%");

    static private final SubLString $str_alt451$____Answerable____ = makeString("~%~%Answerable: ~%");

    static private final SubLString $str_alt452$____Unanswerable____ = makeString("~%~%Unanswerable: ~%");

    static private final SubLList $list_alt453 = list($BOTH, makeKeyword("BASELINE"));

    static private final SubLString $str_alt454$Mutually_Answerable_ = makeString("Mutually Answerable ");

    static private final SubLSymbol $sym455$KBQ_LUMPY_QUERY_RUN_ = makeSymbol("KBQ-LUMPY-QUERY-RUN?");

    static private final SubLString $str_alt458$_____Total_Tests____4D = makeString("~%;; Total Tests : ~4D");

    static private final SubLString $str_alt459$______Successes_____4D___S___ = makeString("~%;;  Successes  : ~4D (~S %)");

    static private final SubLString $str_alt460$______Failures______4D___S___ = makeString("~%;;  Failures   : ~4D (~S %)");

    public static final class $kbq_runstate_p$UnaryFunction extends UnaryFunction {
        public $kbq_runstate_p$UnaryFunction() {
            super(extractFunctionNamed("KBQ-RUNSTATE-P"));
        }

        @Override
        public SubLObject processItem(final SubLObject arg1) {
            return kbq_query_run.kbq_runstate_p(arg1);
        }
    }

    static private final SubLString $str_alt461$_______Test_Set_Metrics__ = makeString("~%~%;; Test Set Metrics~%");

    static private final SubLString $str_alt462$____Test____S = makeString("~%~%Test : ~S");

    static private final SubLString $str_alt463$__Status____S = makeString("~%Status : ~S");

    static private final SubLString $str_alt464$__Halt_Reason____S = makeString("~%Halt Reason : ~S");

    static private final SubLString $str_alt465$___S__S = makeString("~%~S ~S");

    static private final SubLString $str_alt468$Running_kbq_benchmark__kbq_benchm = makeString("Running kbq benchmark (kbq-benchmark-report ");

    static private final SubLString $str_alt469$_ = makeString(")");

    static private final SubLString $str_alt471$kbq_benchmark__kbq_benchmark_repo = makeString("kbq benchmark (kbq-benchmark-report ~S) in background");

    static private final SubLString $str_alt474$_______A______ = makeString("~&*** ~A ***~%");

    static private final SubLString $str_alt475$____overriding_query_properties__ = makeString("*** overriding-query-properties: ~A ***~%");

    static private final SubLString $str_alt476$Tests_run_in_System__A_KB__A__ = makeString("Tests run in System ~A KB ~A~%");

    static private final SubLList $list_alt479 = list(makeKeyword("ANSWER-COUNT"), makeKeyword("TIME-TO-FIRST-ANSWER"), makeKeyword("SKSI-QUERY-TOTAL-TIME"), makeKeyword("SKSI-QUERY-START-TIMES"), makeKeyword("TOTAL-TIME"));

    static private final SubLString $str_alt480$__ANS__TTFS____TTFA__SQ____SKSI__ = makeString(" #ANS  TTFS    TTFA #SQ    SKSI +  CYC =  TOTAL   (%SQ)  TEST~%");

    static private final SubLString $str_alt481$_________________________________ = makeString("---------------------------------------------------------------------~%");

    static private final SubLString $str_alt484$_5D__5_1F__7_1F_4D__7_1F__7_1F__7 = makeString("~5D ~5,1F ~7,1F~4D ~7,1F ~7,1F ~7,1F (~4,1F%) ~A~A~%");

    static private final SubLString $str_alt486$___A_ = makeString(" (~A)");

    static private final SubLString $str_alt487$_5D__5_1F__7_1F_4D__7_1F__7_1F__7 = makeString("~5D ~5,1F ~7,1F~4D ~7,1F ~7,1F ~7,1F (~4,1F%)~%");

    static private final SubLList $list_alt488 = list(makeString("/"));

    static private final SubLString $str_alt490$_15A___5D__5_1F__7_1F_4D__7_1F__7 = makeString("~15A: ~5D ~5,1F ~7,1F~4D ~7,1F ~7,1F ~7,1F (~4,1F%) ~30A~%");

    public static final class $kct_runstate_p$UnaryFunction extends UnaryFunction {
        public $kct_runstate_p$UnaryFunction() {
            super(extractFunctionNamed("KCT-RUNSTATE-P"));
        }

        @Override
        public SubLObject processItem(final SubLObject arg1) {
            return kbq_query_run.kct_runstate_p(arg1);
        }
    }

    static private final SubLList $list_alt491 = list(new SubLObject[]{ reader_make_constant_shell("TheSet"), list(reader_make_constant_shell("QueryFn")), list(reader_make_constant_shell("QueryFn"), list(reader_make_constant_shell("Quote"), list(reader_make_constant_shell("ist"), reader_make_constant_shell("BaseKB"), list(reader_make_constant_shell("isa"))))), list(reader_make_constant_shell("QueryFn"), list(reader_make_constant_shell("Quote"), list(reader_make_constant_shell("ist"), reader_make_constant_shell("BaseKB"), list(reader_make_constant_shell("and"))))), list(reader_make_constant_shell("QueryFn"), list(reader_make_constant_shell("Quote"), list(reader_make_constant_shell("or")))), list(reader_make_constant_shell("QueryFn"), list(reader_make_constant_shell("Quote"), list(reader_make_constant_shell("ist"), reader_make_constant_shell("BaseKB"), list(reader_make_constant_shell("isa"), makeInteger(212), reader_make_constant_shell("Dog"))))), list(reader_make_constant_shell("QueryFn"), list(reader_make_constant_shell("Quote"), list(reader_make_constant_shell("trueSubL"), list(reader_make_constant_shell("SubLQuoteFn"), list(makeSymbol("WITH-INFERENCE-ERROR-HANDLING"), list(makeSymbol("ERROR"), makeString("zyxwvut"))))))), list(reader_make_constant_shell("QueryFn"), list(reader_make_constant_shell("Quote"), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("integerBetween"), ONE_INTEGER, makeSymbol("?N"), TWO_INTEGER), list(reader_make_constant_shell("performSubL"), list(reader_make_constant_shell("ExpandSubLFn"), list(makeSymbol("?N")), list(makeSymbol("PWHEN"), list(makeSymbol("="), makeSymbol("?N"), TWO_INTEGER), list(makeSymbol("WITH-INFERENCE-ERROR-HANDLING"), list(makeSymbol("ERROR"), makeString("zyxwvut"))))))))), list(reader_make_constant_shell("QueryFn"), list(reader_make_constant_shell("Quote"), list(reader_make_constant_shell("performSubL"), list(reader_make_constant_shell("SubLQuoteFn"), list(makeSymbol("SLEEP"), FOUR_INTEGER))))), list(reader_make_constant_shell("QueryFn"), list(reader_make_constant_shell("Quote"), list(reader_make_constant_shell("and"), list(reader_make_constant_shell("integerBetween"), ONE_INTEGER, makeSymbol("?N"), TWO_INTEGER), list(reader_make_constant_shell("performSubL"), list(reader_make_constant_shell("ExpandSubLFn"), list(makeSymbol("?N")), list(makeSymbol("SLEEP"), TWO_INTEGER)))))) });

    public static final class $kct_set_runstate_p$UnaryFunction extends UnaryFunction {
        public $kct_set_runstate_p$UnaryFunction() {
            super(extractFunctionNamed("KCT-SET-RUNSTATE-P"));
        }

        @Override
        public SubLObject processItem(final SubLObject arg1) {
            return kbq_query_run.kct_set_runstate_p(arg1);
        }
    }

    public static final class $clear_cached_all_instances_among$ZeroArityFunction extends ZeroArityFunction {
        public $clear_cached_all_instances_among$ZeroArityFunction() {
            super(extractFunctionNamed("CLEAR-CACHED-ALL-INSTANCES-AMONG"));
        }

        @Override
        public SubLObject processItem() {
            return kbq_query_run.clear_cached_all_instances_among();
        }
    }

    static private final SubLString $$$pace = makeString("pace");

    static private final SubLList $list_alt499 = list(list(list(list(ZERO_INTEGER, TEN_INTEGER, TWENTY_INTEGER, makeInteger(30), makeInteger(40), makeInteger(50), makeInteger(500)), list(ONE_INTEGER, TWO_INTEGER, THREE_INTEGER, makeInteger(35), makeInteger(36), makeInteger(212))), list(list(ZERO_INTEGER, ONE_INTEGER, TWO_INTEGER, THREE_INTEGER), list(THREE_INTEGER, FIVE_INTEGER, SIX_INTEGER), list(FIVE_INTEGER, makeInteger(162)))), list(list(list(ZERO_INTEGER, TEN_INTEGER, TWENTY_INTEGER, makeInteger(30), makeInteger(40), makeInteger(50)), list(ONE_INTEGER, TWO_INTEGER, THREE_INTEGER, makeInteger(35), makeInteger(36), makeInteger(212))), list(list(ZERO_INTEGER, ONE_INTEGER, TWO_INTEGER, THREE_INTEGER), list(THREE_INTEGER, FIVE_INTEGER, SIX_INTEGER), list(FIVE_INTEGER, makeInteger(162)))));
}

/**
 * Total time: 5514 ms synthetic
 */
