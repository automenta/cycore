/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 */
package com.cyc.cycjava.cycl.inference.harness;

import static com.cyc.cycjava.cycl.access_macros.register_external_symbol;
import static com.cyc.cycjava.cycl.access_macros.register_macro_helper;
import static com.cyc.cycjava.cycl.accumulation.accumulation_add;
import static com.cyc.cycjava.cycl.accumulation.accumulation_contents;
import static com.cyc.cycjava.cycl.assertions_high.rule_assertionP;
import static com.cyc.cycjava.cycl.bindings.apply_bindings;
import static com.cyc.cycjava.cycl.bindings.apply_bindings_backwards;
import static com.cyc.cycjava.cycl.clauses.neg_lits;
import static com.cyc.cycjava.cycl.clauses.pos_lits;
import static com.cyc.cycjava.cycl.cycl_utilities.expression_find;
import static com.cyc.cycjava.cycl.cycl_utilities.expression_subst;
import static com.cyc.cycjava.cycl.cycl_utilities.hl_to_el;
import static com.cyc.cycjava.cycl.dictionary.clear_dictionary;
import static com.cyc.cycjava.cycl.dictionary.dictionary_enter;
import static com.cyc.cycjava.cycl.dictionary.dictionary_lookup;
import static com.cyc.cycjava.cycl.dictionary.dictionary_lookup_without_values;
import static com.cyc.cycjava.cycl.dictionary.dictionary_remove;
import static com.cyc.cycjava.cycl.dictionary.new_dictionary;
import static com.cyc.cycjava.cycl.dictionary_utilities.dictionary_increment;
import static com.cyc.cycjava.cycl.dictionary_utilities.dictionary_to_alist;
import static com.cyc.cycjava.cycl.el_utilities.make_ist_sentence;
import static com.cyc.cycjava.cycl.el_utilities.possibly_inference_sentence_p;
import static com.cyc.cycjava.cycl.format_cycl_expression.format_cycl_expression_to_string;
import static com.cyc.cycjava.cycl.id_index.clear_id_index;
import static com.cyc.cycjava.cycl.id_index.do_id_index_empty_p;
import static com.cyc.cycjava.cycl.id_index.do_id_index_id_and_object_validP;
import static com.cyc.cycjava.cycl.id_index.do_id_index_next_id;
import static com.cyc.cycjava.cycl.id_index.do_id_index_next_state;
import static com.cyc.cycjava.cycl.id_index.do_id_index_state_object;
import static com.cyc.cycjava.cycl.id_index.id_index_count;
import static com.cyc.cycjava.cycl.id_index.id_index_dense_objects;
import static com.cyc.cycjava.cycl.id_index.id_index_dense_objects_empty_p;
import static com.cyc.cycjava.cycl.id_index.id_index_enter_autoextend;
import static com.cyc.cycjava.cycl.id_index.id_index_lookup;
import static com.cyc.cycjava.cycl.id_index.id_index_next_id;
import static com.cyc.cycjava.cycl.id_index.id_index_objects_empty_p;
import static com.cyc.cycjava.cycl.id_index.id_index_remove;
import static com.cyc.cycjava.cycl.id_index.id_index_reserve;
import static com.cyc.cycjava.cycl.id_index.id_index_skip_tombstones_p;
import static com.cyc.cycjava.cycl.id_index.id_index_sparse_id_threshold;
import static com.cyc.cycjava.cycl.id_index.id_index_sparse_objects;
import static com.cyc.cycjava.cycl.id_index.id_index_sparse_objects_empty_p;
import static com.cyc.cycjava.cycl.id_index.id_index_tombstone_p;
import static com.cyc.cycjava.cycl.id_index.new_id_index;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_proof.all_proof_subproofs;
import static com.cyc.cycjava.cycl.inference.harness.inference_datastructures_proof.proof_supported_problem;
import static com.cyc.cycjava.cycl.inference.harness.inference_modules.hl_module_allowedP;
import static com.cyc.cycjava.cycl.inference.harness.inference_modules.hl_module_name;
import static com.cyc.cycjava.cycl.inference.harness.inference_worker_answer.answer_link_supporting_mapped_problem;
import static com.cyc.cycjava.cycl.inference.inference_event.post_inference_new_answer_event;
import static com.cyc.cycjava.cycl.inference.inference_event.post_inference_new_transformation_depth_reached_event;
import static com.cyc.cycjava.cycl.inference.inference_event.post_inference_status_change_event;
import static com.cyc.cycjava.cycl.inference.inference_event.post_sksi_query_event;
import static com.cyc.cycjava.cycl.inference.inference_pad_data.$non_tkb_final_bogomips$;
import static com.cyc.cycjava.cycl.inference.inference_pad_data.$non_tkb_final_times_to_first_answer$;
import static com.cyc.cycjava.cycl.kb_utilities.hl_external_id_string;
import static com.cyc.cycjava.cycl.keyhash_utilities.fast_intersection;
import static com.cyc.cycjava.cycl.list_utilities.alist_to_plist;
import static com.cyc.cycjava.cycl.list_utilities.fast_set_difference;
import static com.cyc.cycjava.cycl.list_utilities.member_eqP;
import static com.cyc.cycjava.cycl.list_utilities.non_dotted_list_p;
import static com.cyc.cycjava.cycl.list_utilities.quotify;
import static com.cyc.cycjava.cycl.list_utilities.remove_if_not;
import static com.cyc.cycjava.cycl.list_utilities.safe_E;
import static com.cyc.cycjava.cycl.list_utilities.safe_difference;
import static com.cyc.cycjava.cycl.list_utilities.sublisp_boolean;
import static com.cyc.cycjava.cycl.list_utilities.tree_gather;
import static com.cyc.cycjava.cycl.misc_utilities.scale_by_bogomips;
import static com.cyc.cycjava.cycl.number_utilities.f_1X;
import static com.cyc.cycjava.cycl.number_utilities.f_1_;
import static com.cyc.cycjava.cycl.number_utilities.percentile_sorted;
import static com.cyc.cycjava.cycl.number_utilities.positive_infinity;
import static com.cyc.cycjava.cycl.number_utilities.positive_infinity_p;
import static com.cyc.cycjava.cycl.numeric_date_utilities.elapsed_internal_real_time;
import static com.cyc.cycjava.cycl.numeric_date_utilities.elapsed_internal_real_time_to_elapsed_seconds;
import static com.cyc.cycjava.cycl.numeric_date_utilities.elapsed_seconds_to_elapsed_internal_real_time;
import static com.cyc.cycjava.cycl.numeric_date_utilities.internal_real_time_seconds_from_now;
import static com.cyc.cycjava.cycl.numeric_date_utilities.universal_time_seconds_from_now;
import static com.cyc.cycjava.cycl.queues.clear_queue;
import static com.cyc.cycjava.cycl.queues.create_queue;
import static com.cyc.cycjava.cycl.queues.dequeue;
import static com.cyc.cycjava.cycl.queues.enqueue;
import static com.cyc.cycjava.cycl.queues.queue_empty_p;
import static com.cyc.cycjava.cycl.queues.queue_size;
import static com.cyc.cycjava.cycl.queues.remqueue;
import static com.cyc.cycjava.cycl.set.clear_set;
import static com.cyc.cycjava.cycl.set.do_set_internal;
import static com.cyc.cycjava.cycl.set.new_set;
import static com.cyc.cycjava.cycl.set.set_add;
import static com.cyc.cycjava.cycl.set.set_element_list;
import static com.cyc.cycjava.cycl.set.set_memberP;
import static com.cyc.cycjava.cycl.set.set_p;
import static com.cyc.cycjava.cycl.set.set_remove;
import static com.cyc.cycjava.cycl.set.set_size;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_basis_object;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_doneP;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_element_validP;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_initial_state;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_next;
import static com.cyc.cycjava.cycl.set_contents.do_set_contents_update_state;
import static com.cyc.cycjava.cycl.set_contents.new_set_contents;
import static com.cyc.cycjava.cycl.set_contents.set_contents_add;
import static com.cyc.cycjava.cycl.set_contents.set_contents_element_list;
import static com.cyc.cycjava.cycl.set_utilities.construct_set_from_list;
import static com.cyc.cycjava.cycl.sksi.sksi_infrastructure.sksi_infrastructure_macros.$sksi_sql_query_count$;
import static com.cyc.cycjava.cycl.sksi.sksi_infrastructure.sksi_infrastructure_macros.$sksi_sql_query_time$;
import static com.cyc.cycjava.cycl.sksi.sksi_infrastructure.sksi_infrastructure_macros.sksi_profiling_onP;
import static com.cyc.cycjava.cycl.subl_macro_promotions.declare_defglobal;
import static com.cyc.cycjava.cycl.subl_promotions.elapsed_universal_time;
import static com.cyc.cycjava.cycl.subl_promotions.memberP;
import static com.cyc.cycjava.cycl.subl_promotions.non_negative_integer_p;
import static com.cyc.cycjava.cycl.subl_promotions.positive_integer_p;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_greater;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_quote;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_space;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.append;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.cons;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.listS;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.bind;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.currentBinding;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.rebind;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.eq;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.equal;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.identity;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.pointer;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.funcall;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntryKey;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntrySetIterator;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntryValue;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.gethash_without_values;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.iteratorHasNext;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.iteratorNextEntry;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.make_hash_table;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.releaseEntrySetIterator;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.remhash;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.sethash;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Locks.make_lock;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Locks.release_lock;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Locks.seize_lock;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.add;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.divide;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.logxor;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.numGE;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.numL;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.plusp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.subtract;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.truncate;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow.format;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow.write;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.delete;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.find;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.length;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.nreverse;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.def_csetf;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.makeStructDeclNative;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.register_method;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.boundp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_function;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.$is_thread_performing_cleanupP$;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.current_process;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.process_unblock;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Time.get_internal_real_time;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Time.get_universal_time;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.booleanp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.consp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.listp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.numberp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.processp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.sublisp_null;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.type_of;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.getValuesAsVector;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.restoreValuesFromVector;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.values;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors.aref;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeBoolean;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeInteger;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeKeyword;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeString;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeSymbol;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeUninternedSymbol;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.cdestructuring_bind_error;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.destructuring_bind_must_consp;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.property_list_member;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.cadr;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.cddr;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.copy_tree;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.getf;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.member;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.nsublis;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.putf;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.second;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.set_difference;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.subsetp;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.$print_case$;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.$print_object_method_table$;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.$print_readably$;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.print_not_readable;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader.bq_cons;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.close;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.get_output_stream_string;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.make_private_string_output_stream;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.write_char;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.write_string;
import static com.cyc.tool.subl.util.SubLFiles.declareFunction;
import static com.cyc.tool.subl.util.SubLFiles.declareMacro;
import static com.cyc.tool.subl.util.SubLFiles.defconstant;
import static com.cyc.tool.subl.util.SubLFiles.deflexical;

import java.util.Iterator;
import java.util.Map;

import org.armedbear.lisp.Lisp;

import com.cyc.cycjava.cycl.V12;
import com.cyc.cycjava.cycl.accumulation;
import com.cyc.cycjava.cycl.arguments;
import com.cyc.cycjava.cycl.assertion_utilities;
import com.cyc.cycjava.cycl.assertions_high;
import com.cyc.cycjava.cycl.bindings;
import com.cyc.cycjava.cycl.clauses;
import com.cyc.cycjava.cycl.cycl_utilities;
import com.cyc.cycjava.cycl.date_utilities;
import com.cyc.cycjava.cycl.dictionary;
import com.cyc.cycjava.cycl.dictionary_utilities;
import com.cyc.cycjava.cycl.format_cycl_expression;
import com.cyc.cycjava.cycl.hlmt;
import com.cyc.cycjava.cycl.kb_control_vars;
import com.cyc.cycjava.cycl.kb_utilities;
import com.cyc.cycjava.cycl.keyhash_utilities;
import com.cyc.cycjava.cycl.list_utilities;
import com.cyc.cycjava.cycl.misc_utilities;
import com.cyc.cycjava.cycl.number_utilities;
import com.cyc.cycjava.cycl.numeric_date_utilities;
import com.cyc.cycjava.cycl.queues;
import com.cyc.cycjava.cycl.set;
import com.cyc.cycjava.cycl.set_contents;
import com.cyc.cycjava.cycl.set_utilities;
import com.cyc.cycjava.cycl.subl_promotions;
import com.cyc.cycjava.cycl.inference.inference_event;
import com.cyc.cycjava.cycl.inference.inference_pad_data;
import com.cyc.cycjava.cycl.inference.leviathan;
import com.cyc.cycjava.cycl.sksi.sksi_infrastructure.sksi_infrastructure_macros;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sort;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Strings;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLSpecialOperatorDeclarations;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDecl;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDeclNative;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sxhash;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.UnaryFunction;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLStructNative;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLInteger;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_macros;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.visitation;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLFiles;
import com.cyc.tool.subl.util.SubLFiles.LispMethod;
import com.cyc.tool.subl.util.SubLTrampolineFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;

/**
 * Copyright (c) 1995 - 2019 Cycorp, Inc.  All rights reserved.
 * module:      INFERENCE-DATASTRUCTURES-INFERENCE
 * source file: /cyc/top/cycl/inference/harness/inference-datastructures-inference.lisp
 * created:     2019/07/03 17:37:39
 */
public final class inference_datastructures_inference extends SubLTranslatedFile implements V12 {
    public static final SubLFile me = new inference_datastructures_inference();

 public static final String myName = "com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference";


    // deflexical
    // Definitions
    @LispMethod(comment = "deflexical")
    private static final SubLSymbol $inference_types$ = makeSymbol("*INFERENCE-TYPES*");

    // defconstant
    @LispMethod(comment = "defconstant")
    public static final SubLSymbol $dtp_inference$ = makeSymbol("*DTP-INFERENCE*");

    // defconstant
    @LispMethod(comment = "defconstant")
    public static final SubLSymbol $dtp_inference_answer$ = makeSymbol("*DTP-INFERENCE-ANSWER*");

    // defconstant
    @LispMethod(comment = "defconstant")
    public static final SubLSymbol $dtp_inference_answer_justification$ = makeSymbol("*DTP-INFERENCE-ANSWER-JUSTIFICATION*");

    // Internal Constants
    @LispMethod(comment = "Internal Constants")
    static private final SubLList $list0 = list(makeKeyword("SIMPLEST"));

    static private final SubLList $list3 = list(new SubLObject[] { makeSymbol("SUID"), makeSymbol("PROBLEM-STORE"), makeSymbol("FORWARD-PROPAGATE"), makeSymbol("INPUT-MT"), makeSymbol("INPUT-EL-QUERY"), makeSymbol("INPUT-NON-EXPLANATORY-EL-QUERY"), makeSymbol("INPUT-QUERY-PROPERTIES"),
	    makeSymbol("MT"), makeSymbol("EL-QUERY"), makeSymbol("EL-BINDINGS"), makeSymbol("HL-QUERY"), makeSymbol("EXPLANATORY-SUBQUERY"), makeSymbol("NON-EXPLANATORY-SUBQUERY"), makeSymbol("FREE-HL-VARS"), makeSymbol("HYPOTHETICAL-BINDINGS"), makeSymbol("ANSWER-ID-INDEX"),
	    makeSymbol("ANSWER-BINDINGS-INDEX"), makeSymbol("NEW-ANSWER-ID-START"), makeSymbol("NEW-ANSWER-JUSTIFICATIONS"), makeSymbol("STATUS"), makeSymbol("SUSPEND-STATUS"), makeSymbol("ROOT-LINK"), makeSymbol("RELEVANT-PROBLEMS"), makeSymbol("STRATEGY-SET"), makeSymbol("CONTROL-PROCESS"),
	    makeSymbol("INTERRUPTING-PROCESSES"), makeSymbol("MAX-TRANSFORMATION-DEPTH-REACHED"), makeSymbol("DISJUNCTION-FREE-EL-VARS-POLICY"), makeSymbol("RESULT-UNIQUENESS-CRITERION"), makeSymbol("ALLOW-HL-PREDICATE-TRANSFORMATION?"), makeSymbol("ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?"),
	    makeSymbol("ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?"), makeSymbol("ALLOW-INDETERMINATE-RESULTS?"), makeSymbol("ALLOWED-RULES"), makeSymbol("FORBIDDEN-RULES"), makeSymbol("ALLOWED-MODULES"), makeSymbol("ALLOW-ABNORMALITY-CHECKING?"), makeSymbol("TRANSITIVE-CLOSURE-MODE"),
	    makeSymbol("PROBLEM-STORE-PRIVATE?"), makeSymbol("CONTINUABLE?"), makeSymbol("BROWSABLE?"), makeSymbol("RETURN-TYPE"), makeSymbol("ANSWER-LANGUAGE"), makeSymbol("CACHE-RESULTS?"), makeSymbol("BLOCKING?"), makeSymbol("MAX-NUMBER"), makeSymbol("MAX-TIME"), makeSymbol("MAX-STEP"),
	    makeSymbol("MODE"), makeSymbol("FORWARD-MAX-TIME"), makeSymbol("MAX-PROOF-DEPTH"), makeSymbol("MAX-TRANSFORMATION-DEPTH"), makeSymbol("MIN-RULE-UTILITY"), makeSymbol("PROBABLY-APPROXIMATELY-DONE"), makeSymbol("METRICS-TEMPLATE"), makeSymbol("START-UNIVERSAL-TIME"),
	    makeSymbol("START-INTERNAL-REAL-TIME"), makeSymbol("END-INTERNAL-REAL-TIME"), makeSymbol("PAD-INTERNAL-REAL-TIME"), makeSymbol("HYPOTHESIZATION-TIME"), makeSymbol("CUMULATIVE-TIME"), makeSymbol("STEP-COUNT"), makeSymbol("CUMULATIVE-STEP-COUNT"), makeSymbol("EVENTS"),
	    makeSymbol("HALT-CONDITIONS"), makeSymbol("ACCUMULATORS"), makeSymbol("PROOF-WATERMARK"), makeSymbol("PROBLEM-WORKING-TIME-DATA"), makeSymbol("TYPE"), makeSymbol("DATA"), makeSymbol("PROPERTIES") });

    static private final SubLList $list4 = list(new SubLObject[] { $SUID, makeKeyword("PROBLEM-STORE"), makeKeyword("FORWARD-PROPAGATE"), makeKeyword("INPUT-MT"), makeKeyword("INPUT-EL-QUERY"), makeKeyword("INPUT-NON-EXPLANATORY-EL-QUERY"), makeKeyword("INPUT-QUERY-PROPERTIES"),
	    makeKeyword("MT"), makeKeyword("EL-QUERY"), makeKeyword("EL-BINDINGS"), makeKeyword("HL-QUERY"), makeKeyword("EXPLANATORY-SUBQUERY"), makeKeyword("NON-EXPLANATORY-SUBQUERY"), makeKeyword("FREE-HL-VARS"), makeKeyword("HYPOTHETICAL-BINDINGS"), makeKeyword("ANSWER-ID-INDEX"),
	    makeKeyword("ANSWER-BINDINGS-INDEX"), makeKeyword("NEW-ANSWER-ID-START"), makeKeyword("NEW-ANSWER-JUSTIFICATIONS"), makeKeyword("STATUS"), makeKeyword("SUSPEND-STATUS"), makeKeyword("ROOT-LINK"), makeKeyword("RELEVANT-PROBLEMS"), makeKeyword("STRATEGY-SET"),
	    makeKeyword("CONTROL-PROCESS"), makeKeyword("INTERRUPTING-PROCESSES"), makeKeyword("MAX-TRANSFORMATION-DEPTH-REACHED"), makeKeyword("DISJUNCTION-FREE-EL-VARS-POLICY"), makeKeyword("RESULT-UNIQUENESS-CRITERION"), makeKeyword("ALLOW-HL-PREDICATE-TRANSFORMATION?"),
	    makeKeyword("ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?"), makeKeyword("ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?"), makeKeyword("ALLOW-INDETERMINATE-RESULTS?"), makeKeyword("ALLOWED-RULES"), makeKeyword("FORBIDDEN-RULES"), makeKeyword("ALLOWED-MODULES"),
	    makeKeyword("ALLOW-ABNORMALITY-CHECKING?"), makeKeyword("TRANSITIVE-CLOSURE-MODE"), makeKeyword("PROBLEM-STORE-PRIVATE?"), makeKeyword("CONTINUABLE?"), makeKeyword("BROWSABLE?"), makeKeyword("RETURN-TYPE"), makeKeyword("ANSWER-LANGUAGE"), makeKeyword("CACHE-RESULTS?"),
	    makeKeyword("BLOCKING?"), makeKeyword("MAX-NUMBER"), makeKeyword("MAX-TIME"), makeKeyword("MAX-STEP"), $MODE, makeKeyword("FORWARD-MAX-TIME"), makeKeyword("MAX-PROOF-DEPTH"), makeKeyword("MAX-TRANSFORMATION-DEPTH"), makeKeyword("MIN-RULE-UTILITY"),
	    makeKeyword("PROBABLY-APPROXIMATELY-DONE"), makeKeyword("METRICS-TEMPLATE"), makeKeyword("START-UNIVERSAL-TIME"), makeKeyword("START-INTERNAL-REAL-TIME"), makeKeyword("END-INTERNAL-REAL-TIME"), makeKeyword("PAD-INTERNAL-REAL-TIME"), makeKeyword("HYPOTHESIZATION-TIME"),
	    makeKeyword("CUMULATIVE-TIME"), makeKeyword("STEP-COUNT"), makeKeyword("CUMULATIVE-STEP-COUNT"), makeKeyword("EVENTS"), makeKeyword("HALT-CONDITIONS"), makeKeyword("ACCUMULATORS"), makeKeyword("PROOF-WATERMARK"), makeKeyword("PROBLEM-WORKING-TIME-DATA"), $TYPE,
	    $DATA, makeKeyword("PROPERTIES") });

    static private final SubLList $list5 = list(new SubLObject[] { makeSymbol("INFRNC-SUID"), makeSymbol("INFRNC-PROBLEM-STORE"), makeSymbol("INFRNC-FORWARD-PROPAGATE"), makeSymbol("INFRNC-INPUT-MT"), makeSymbol("INFRNC-INPUT-EL-QUERY"), makeSymbol("INFRNC-INPUT-NON-EXPLANATORY-EL-QUERY"),
	    makeSymbol("INFRNC-INPUT-QUERY-PROPERTIES"), makeSymbol("INFRNC-MT"), makeSymbol("INFRNC-EL-QUERY"), makeSymbol("INFRNC-EL-BINDINGS"), makeSymbol("INFRNC-HL-QUERY"), makeSymbol("INFRNC-EXPLANATORY-SUBQUERY"), makeSymbol("INFRNC-NON-EXPLANATORY-SUBQUERY"),
	    makeSymbol("INFRNC-FREE-HL-VARS"), makeSymbol("INFRNC-HYPOTHETICAL-BINDINGS"), makeSymbol("INFRNC-ANSWER-ID-INDEX"), makeSymbol("INFRNC-ANSWER-BINDINGS-INDEX"), makeSymbol("INFRNC-NEW-ANSWER-ID-START"), makeSymbol("INFRNC-NEW-ANSWER-JUSTIFICATIONS"), makeSymbol("INFRNC-STATUS"),
	    makeSymbol("INFRNC-SUSPEND-STATUS"), makeSymbol("INFRNC-ROOT-LINK"), makeSymbol("INFRNC-RELEVANT-PROBLEMS"), makeSymbol("INFRNC-STRATEGY-SET"), makeSymbol("INFRNC-CONTROL-PROCESS"), makeSymbol("INFRNC-INTERRUPTING-PROCESSES"), makeSymbol("INFRNC-MAX-TRANSFORMATION-DEPTH-REACHED"),
	    makeSymbol("INFRNC-DISJUNCTION-FREE-EL-VARS-POLICY"), makeSymbol("INFRNC-RESULT-UNIQUENESS-CRITERION"), makeSymbol("INFRNC-ALLOW-HL-PREDICATE-TRANSFORMATION?"), makeSymbol("INFRNC-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?"), makeSymbol("INFRNC-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?"),
	    makeSymbol("INFRNC-ALLOW-INDETERMINATE-RESULTS?"), makeSymbol("INFRNC-ALLOWED-RULES"), makeSymbol("INFRNC-FORBIDDEN-RULES"), makeSymbol("INFRNC-ALLOWED-MODULES"), makeSymbol("INFRNC-ALLOW-ABNORMALITY-CHECKING?"), makeSymbol("INFRNC-TRANSITIVE-CLOSURE-MODE"),
	    makeSymbol("INFRNC-PROBLEM-STORE-PRIVATE?"), makeSymbol("INFRNC-CONTINUABLE?"), makeSymbol("INFRNC-BROWSABLE?"), makeSymbol("INFRNC-RETURN-TYPE"), makeSymbol("INFRNC-ANSWER-LANGUAGE"), makeSymbol("INFRNC-CACHE-RESULTS?"), makeSymbol("INFRNC-BLOCKING?"), makeSymbol("INFRNC-MAX-NUMBER"),
	    makeSymbol("INFRNC-MAX-TIME"), makeSymbol("INFRNC-MAX-STEP"), makeSymbol("INFRNC-MODE"), makeSymbol("INFRNC-FORWARD-MAX-TIME"), makeSymbol("INFRNC-MAX-PROOF-DEPTH"), makeSymbol("INFRNC-MAX-TRANSFORMATION-DEPTH"), makeSymbol("INFRNC-MIN-RULE-UTILITY"),
	    makeSymbol("INFRNC-PROBABLY-APPROXIMATELY-DONE"), makeSymbol("INFRNC-METRICS-TEMPLATE"), makeSymbol("INFRNC-START-UNIVERSAL-TIME"), makeSymbol("INFRNC-START-INTERNAL-REAL-TIME"), makeSymbol("INFRNC-END-INTERNAL-REAL-TIME"), makeSymbol("INFRNC-PAD-INTERNAL-REAL-TIME"),
	    makeSymbol("INFRNC-HYPOTHESIZATION-TIME"), makeSymbol("INFRNC-CUMULATIVE-TIME"), makeSymbol("INFRNC-STEP-COUNT"), makeSymbol("INFRNC-CUMULATIVE-STEP-COUNT"), makeSymbol("INFRNC-EVENTS"), makeSymbol("INFRNC-HALT-CONDITIONS"), makeSymbol("INFRNC-ACCUMULATORS"),
	    makeSymbol("INFRNC-PROOF-WATERMARK"), makeSymbol("INFRNC-PROBLEM-WORKING-TIME-DATA"), makeSymbol("INFRNC-TYPE"), makeSymbol("INFRNC-DATA"), makeSymbol("INFRNC-PROPERTIES") });

    static private final SubLList $list6 = list(new SubLObject[] { makeSymbol("_CSETF-INFRNC-SUID"), makeSymbol("_CSETF-INFRNC-PROBLEM-STORE"), makeSymbol("_CSETF-INFRNC-FORWARD-PROPAGATE"), makeSymbol("_CSETF-INFRNC-INPUT-MT"), makeSymbol("_CSETF-INFRNC-INPUT-EL-QUERY"),
	    makeSymbol("_CSETF-INFRNC-INPUT-NON-EXPLANATORY-EL-QUERY"), makeSymbol("_CSETF-INFRNC-INPUT-QUERY-PROPERTIES"), makeSymbol("_CSETF-INFRNC-MT"), makeSymbol("_CSETF-INFRNC-EL-QUERY"), makeSymbol("_CSETF-INFRNC-EL-BINDINGS"), makeSymbol("_CSETF-INFRNC-HL-QUERY"),
	    makeSymbol("_CSETF-INFRNC-EXPLANATORY-SUBQUERY"), makeSymbol("_CSETF-INFRNC-NON-EXPLANATORY-SUBQUERY"), makeSymbol("_CSETF-INFRNC-FREE-HL-VARS"), makeSymbol("_CSETF-INFRNC-HYPOTHETICAL-BINDINGS"), makeSymbol("_CSETF-INFRNC-ANSWER-ID-INDEX"),
	    makeSymbol("_CSETF-INFRNC-ANSWER-BINDINGS-INDEX"), makeSymbol("_CSETF-INFRNC-NEW-ANSWER-ID-START"), makeSymbol("_CSETF-INFRNC-NEW-ANSWER-JUSTIFICATIONS"), makeSymbol("_CSETF-INFRNC-STATUS"), makeSymbol("_CSETF-INFRNC-SUSPEND-STATUS"), makeSymbol("_CSETF-INFRNC-ROOT-LINK"),
	    makeSymbol("_CSETF-INFRNC-RELEVANT-PROBLEMS"), makeSymbol("_CSETF-INFRNC-STRATEGY-SET"), makeSymbol("_CSETF-INFRNC-CONTROL-PROCESS"), makeSymbol("_CSETF-INFRNC-INTERRUPTING-PROCESSES"), makeSymbol("_CSETF-INFRNC-MAX-TRANSFORMATION-DEPTH-REACHED"),
	    makeSymbol("_CSETF-INFRNC-DISJUNCTION-FREE-EL-VARS-POLICY"), makeSymbol("_CSETF-INFRNC-RESULT-UNIQUENESS-CRITERION"), makeSymbol("_CSETF-INFRNC-ALLOW-HL-PREDICATE-TRANSFORMATION?"), makeSymbol("_CSETF-INFRNC-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?"),
	    makeSymbol("_CSETF-INFRNC-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?"), makeSymbol("_CSETF-INFRNC-ALLOW-INDETERMINATE-RESULTS?"), makeSymbol("_CSETF-INFRNC-ALLOWED-RULES"), makeSymbol("_CSETF-INFRNC-FORBIDDEN-RULES"), makeSymbol("_CSETF-INFRNC-ALLOWED-MODULES"),
	    makeSymbol("_CSETF-INFRNC-ALLOW-ABNORMALITY-CHECKING?"), makeSymbol("_CSETF-INFRNC-TRANSITIVE-CLOSURE-MODE"), makeSymbol("_CSETF-INFRNC-PROBLEM-STORE-PRIVATE?"), makeSymbol("_CSETF-INFRNC-CONTINUABLE?"), makeSymbol("_CSETF-INFRNC-BROWSABLE?"), makeSymbol("_CSETF-INFRNC-RETURN-TYPE"),
	    makeSymbol("_CSETF-INFRNC-ANSWER-LANGUAGE"), makeSymbol("_CSETF-INFRNC-CACHE-RESULTS?"), makeSymbol("_CSETF-INFRNC-BLOCKING?"), makeSymbol("_CSETF-INFRNC-MAX-NUMBER"), makeSymbol("_CSETF-INFRNC-MAX-TIME"), makeSymbol("_CSETF-INFRNC-MAX-STEP"), makeSymbol("_CSETF-INFRNC-MODE"),
	    makeSymbol("_CSETF-INFRNC-FORWARD-MAX-TIME"), makeSymbol("_CSETF-INFRNC-MAX-PROOF-DEPTH"), makeSymbol("_CSETF-INFRNC-MAX-TRANSFORMATION-DEPTH"), makeSymbol("_CSETF-INFRNC-MIN-RULE-UTILITY"), makeSymbol("_CSETF-INFRNC-PROBABLY-APPROXIMATELY-DONE"),
	    makeSymbol("_CSETF-INFRNC-METRICS-TEMPLATE"), makeSymbol("_CSETF-INFRNC-START-UNIVERSAL-TIME"), makeSymbol("_CSETF-INFRNC-START-INTERNAL-REAL-TIME"), makeSymbol("_CSETF-INFRNC-END-INTERNAL-REAL-TIME"), makeSymbol("_CSETF-INFRNC-PAD-INTERNAL-REAL-TIME"),
	    makeSymbol("_CSETF-INFRNC-HYPOTHESIZATION-TIME"), makeSymbol("_CSETF-INFRNC-CUMULATIVE-TIME"), makeSymbol("_CSETF-INFRNC-STEP-COUNT"), makeSymbol("_CSETF-INFRNC-CUMULATIVE-STEP-COUNT"), makeSymbol("_CSETF-INFRNC-EVENTS"), makeSymbol("_CSETF-INFRNC-HALT-CONDITIONS"),
	    makeSymbol("_CSETF-INFRNC-ACCUMULATORS"), makeSymbol("_CSETF-INFRNC-PROOF-WATERMARK"), makeSymbol("_CSETF-INFRNC-PROBLEM-WORKING-TIME-DATA"), makeSymbol("_CSETF-INFRNC-TYPE"), makeSymbol("_CSETF-INFRNC-DATA"), makeSymbol("_CSETF-INFRNC-PROPERTIES") });

    private static final SubLSymbol PRINT_INFERENCE = makeSymbol("PRINT-INFERENCE");

    private static final SubLInteger $int$50 = makeInteger(50);

    private static final SubLInteger $int$51 = makeInteger(51);

    private static final SubLInteger $int$52 = makeInteger(52);

    private static final SubLInteger $int$53 = makeInteger(53);

    private static final SubLInteger $int$54 = makeInteger(54);

    private static final SubLInteger $int$55 = makeInteger(55);

    private static final SubLInteger $int$56 = makeInteger(56);

    private static final SubLInteger $int$57 = makeInteger(57);

    private static final SubLInteger $int$58 = makeInteger(58);

    private static final SubLInteger $int$59 = makeInteger(59);

    private static final SubLInteger $int$60 = makeInteger(60);

    private static final SubLInteger $int$61 = makeInteger(61);

    private static final SubLInteger $int$62 = makeInteger(62);

    private static final SubLInteger $int$63 = makeInteger(63);

    private static final SubLInteger $int$65 = makeInteger(65);

    private static final SubLInteger $int$66 = makeInteger(66);

    private static final SubLInteger $int$67 = makeInteger(67);

    private static final SubLInteger $int$68 = makeInteger(68);

    private static final SubLInteger $int$69 = makeInteger(69);

    private static final SubLInteger $int$70 = makeInteger(70);

    private static final SubLInteger $int$71 = makeInteger(71);

    private static final SubLInteger $int$72 = makeInteger(72);

    private static final SubLSymbol INFERENCE_PRINT_FUNCTION_TRAMPOLINE = makeSymbol("INFERENCE-PRINT-FUNCTION-TRAMPOLINE");

    private static final SubLList $list61 = list(makeSymbol("OPTIMIZE-FUNCALL"), makeSymbol("INFERENCE-P"));

    private static final SubLSymbol INFRNC_SUID = makeSymbol("INFRNC-SUID");

    private static final SubLSymbol _CSETF_INFRNC_SUID = makeSymbol("_CSETF-INFRNC-SUID");

    private static final SubLSymbol INFRNC_PROBLEM_STORE = makeSymbol("INFRNC-PROBLEM-STORE");

    private static final SubLSymbol _CSETF_INFRNC_PROBLEM_STORE = makeSymbol("_CSETF-INFRNC-PROBLEM-STORE");

    private static final SubLSymbol INFRNC_FORWARD_PROPAGATE = makeSymbol("INFRNC-FORWARD-PROPAGATE");

    private static final SubLSymbol _CSETF_INFRNC_FORWARD_PROPAGATE = makeSymbol("_CSETF-INFRNC-FORWARD-PROPAGATE");

    private static final SubLSymbol INFRNC_INPUT_MT = makeSymbol("INFRNC-INPUT-MT");

    private static final SubLSymbol _CSETF_INFRNC_INPUT_MT = makeSymbol("_CSETF-INFRNC-INPUT-MT");

    private static final SubLSymbol INFRNC_INPUT_EL_QUERY = makeSymbol("INFRNC-INPUT-EL-QUERY");

    private static final SubLSymbol _CSETF_INFRNC_INPUT_EL_QUERY = makeSymbol("_CSETF-INFRNC-INPUT-EL-QUERY");

    private static final SubLSymbol INFRNC_INPUT_NON_EXPLANATORY_EL_QUERY = makeSymbol("INFRNC-INPUT-NON-EXPLANATORY-EL-QUERY");

    private static final SubLSymbol _CSETF_INFRNC_INPUT_NON_EXPLANATORY_EL_QUERY = makeSymbol("_CSETF-INFRNC-INPUT-NON-EXPLANATORY-EL-QUERY");

    private static final SubLSymbol INFRNC_INPUT_QUERY_PROPERTIES = makeSymbol("INFRNC-INPUT-QUERY-PROPERTIES");

    private static final SubLSymbol _CSETF_INFRNC_INPUT_QUERY_PROPERTIES = makeSymbol("_CSETF-INFRNC-INPUT-QUERY-PROPERTIES");

    private static final SubLSymbol INFRNC_MT = makeSymbol("INFRNC-MT");

    private static final SubLSymbol _CSETF_INFRNC_MT = makeSymbol("_CSETF-INFRNC-MT");

    private static final SubLSymbol INFRNC_EL_QUERY = makeSymbol("INFRNC-EL-QUERY");

    private static final SubLSymbol _CSETF_INFRNC_EL_QUERY = makeSymbol("_CSETF-INFRNC-EL-QUERY");

    private static final SubLSymbol INFRNC_EL_BINDINGS = makeSymbol("INFRNC-EL-BINDINGS");

    private static final SubLSymbol _CSETF_INFRNC_EL_BINDINGS = makeSymbol("_CSETF-INFRNC-EL-BINDINGS");

    private static final SubLSymbol INFRNC_HL_QUERY = makeSymbol("INFRNC-HL-QUERY");

    private static final SubLSymbol _CSETF_INFRNC_HL_QUERY = makeSymbol("_CSETF-INFRNC-HL-QUERY");

    private static final SubLSymbol INFRNC_EXPLANATORY_SUBQUERY = makeSymbol("INFRNC-EXPLANATORY-SUBQUERY");

    private static final SubLSymbol _CSETF_INFRNC_EXPLANATORY_SUBQUERY = makeSymbol("_CSETF-INFRNC-EXPLANATORY-SUBQUERY");

    private static final SubLSymbol INFRNC_NON_EXPLANATORY_SUBQUERY = makeSymbol("INFRNC-NON-EXPLANATORY-SUBQUERY");

    private static final SubLSymbol _CSETF_INFRNC_NON_EXPLANATORY_SUBQUERY = makeSymbol("_CSETF-INFRNC-NON-EXPLANATORY-SUBQUERY");

    private static final SubLSymbol INFRNC_FREE_HL_VARS = makeSymbol("INFRNC-FREE-HL-VARS");

    private static final SubLSymbol _CSETF_INFRNC_FREE_HL_VARS = makeSymbol("_CSETF-INFRNC-FREE-HL-VARS");

    private static final SubLSymbol INFRNC_HYPOTHETICAL_BINDINGS = makeSymbol("INFRNC-HYPOTHETICAL-BINDINGS");

    private static final SubLSymbol _CSETF_INFRNC_HYPOTHETICAL_BINDINGS = makeSymbol("_CSETF-INFRNC-HYPOTHETICAL-BINDINGS");

    private static final SubLSymbol INFRNC_ANSWER_ID_INDEX = makeSymbol("INFRNC-ANSWER-ID-INDEX");

    private static final SubLSymbol _CSETF_INFRNC_ANSWER_ID_INDEX = makeSymbol("_CSETF-INFRNC-ANSWER-ID-INDEX");

    private static final SubLSymbol INFRNC_ANSWER_BINDINGS_INDEX = makeSymbol("INFRNC-ANSWER-BINDINGS-INDEX");

    private static final SubLSymbol _CSETF_INFRNC_ANSWER_BINDINGS_INDEX = makeSymbol("_CSETF-INFRNC-ANSWER-BINDINGS-INDEX");

    private static final SubLSymbol INFRNC_NEW_ANSWER_ID_START = makeSymbol("INFRNC-NEW-ANSWER-ID-START");

    private static final SubLSymbol _CSETF_INFRNC_NEW_ANSWER_ID_START = makeSymbol("_CSETF-INFRNC-NEW-ANSWER-ID-START");

    private static final SubLSymbol INFRNC_NEW_ANSWER_JUSTIFICATIONS = makeSymbol("INFRNC-NEW-ANSWER-JUSTIFICATIONS");

    private static final SubLSymbol _CSETF_INFRNC_NEW_ANSWER_JUSTIFICATIONS = makeSymbol("_CSETF-INFRNC-NEW-ANSWER-JUSTIFICATIONS");

    private static final SubLSymbol INFRNC_STATUS = makeSymbol("INFRNC-STATUS");

    private static final SubLSymbol _CSETF_INFRNC_STATUS = makeSymbol("_CSETF-INFRNC-STATUS");

    private static final SubLSymbol INFRNC_SUSPEND_STATUS = makeSymbol("INFRNC-SUSPEND-STATUS");

    private static final SubLSymbol _CSETF_INFRNC_SUSPEND_STATUS = makeSymbol("_CSETF-INFRNC-SUSPEND-STATUS");

    private static final SubLSymbol INFRNC_ROOT_LINK = makeSymbol("INFRNC-ROOT-LINK");

    private static final SubLSymbol _CSETF_INFRNC_ROOT_LINK = makeSymbol("_CSETF-INFRNC-ROOT-LINK");

    private static final SubLSymbol INFRNC_RELEVANT_PROBLEMS = makeSymbol("INFRNC-RELEVANT-PROBLEMS");

    private static final SubLSymbol _CSETF_INFRNC_RELEVANT_PROBLEMS = makeSymbol("_CSETF-INFRNC-RELEVANT-PROBLEMS");

    private static final SubLSymbol INFRNC_STRATEGY_SET = makeSymbol("INFRNC-STRATEGY-SET");

    private static final SubLSymbol _CSETF_INFRNC_STRATEGY_SET = makeSymbol("_CSETF-INFRNC-STRATEGY-SET");

    private static final SubLSymbol INFRNC_CONTROL_PROCESS = makeSymbol("INFRNC-CONTROL-PROCESS");

    private static final SubLSymbol _CSETF_INFRNC_CONTROL_PROCESS = makeSymbol("_CSETF-INFRNC-CONTROL-PROCESS");

    private static final SubLSymbol INFRNC_INTERRUPTING_PROCESSES = makeSymbol("INFRNC-INTERRUPTING-PROCESSES");

    private static final SubLSymbol _CSETF_INFRNC_INTERRUPTING_PROCESSES = makeSymbol("_CSETF-INFRNC-INTERRUPTING-PROCESSES");

    private static final SubLSymbol INFRNC_MAX_TRANSFORMATION_DEPTH_REACHED = makeSymbol("INFRNC-MAX-TRANSFORMATION-DEPTH-REACHED");

    private static final SubLSymbol _CSETF_INFRNC_MAX_TRANSFORMATION_DEPTH_REACHED = makeSymbol("_CSETF-INFRNC-MAX-TRANSFORMATION-DEPTH-REACHED");

    private static final SubLSymbol INFRNC_DISJUNCTION_FREE_EL_VARS_POLICY = makeSymbol("INFRNC-DISJUNCTION-FREE-EL-VARS-POLICY");

    private static final SubLSymbol _CSETF_INFRNC_DISJUNCTION_FREE_EL_VARS_POLICY = makeSymbol("_CSETF-INFRNC-DISJUNCTION-FREE-EL-VARS-POLICY");

    private static final SubLSymbol INFRNC_RESULT_UNIQUENESS_CRITERION = makeSymbol("INFRNC-RESULT-UNIQUENESS-CRITERION");

    private static final SubLSymbol _CSETF_INFRNC_RESULT_UNIQUENESS_CRITERION = makeSymbol("_CSETF-INFRNC-RESULT-UNIQUENESS-CRITERION");

    private static final SubLSymbol $sym120$INFRNC_ALLOW_HL_PREDICATE_TRANSFORMATION_ = makeSymbol("INFRNC-ALLOW-HL-PREDICATE-TRANSFORMATION?");

    private static final SubLSymbol $sym121$_CSETF_INFRNC_ALLOW_HL_PREDICATE_TRANSFORMATION_ = makeSymbol("_CSETF-INFRNC-ALLOW-HL-PREDICATE-TRANSFORMATION?");

    private static final SubLSymbol $sym122$INFRNC_ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_ = makeSymbol("INFRNC-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?");

    private static final SubLSymbol $sym123$_CSETF_INFRNC_ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_ = makeSymbol("_CSETF-INFRNC-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?");

    private static final SubLSymbol $sym124$INFRNC_ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_ = makeSymbol("INFRNC-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?");

    private static final SubLSymbol $sym125$_CSETF_INFRNC_ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_ = makeSymbol("_CSETF-INFRNC-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?");

    private static final SubLSymbol $sym126$INFRNC_ALLOW_INDETERMINATE_RESULTS_ = makeSymbol("INFRNC-ALLOW-INDETERMINATE-RESULTS?");

    private static final SubLSymbol $sym127$_CSETF_INFRNC_ALLOW_INDETERMINATE_RESULTS_ = makeSymbol("_CSETF-INFRNC-ALLOW-INDETERMINATE-RESULTS?");

    private static final SubLSymbol INFRNC_ALLOWED_RULES = makeSymbol("INFRNC-ALLOWED-RULES");

    private static final SubLSymbol _CSETF_INFRNC_ALLOWED_RULES = makeSymbol("_CSETF-INFRNC-ALLOWED-RULES");

    private static final SubLSymbol INFRNC_FORBIDDEN_RULES = makeSymbol("INFRNC-FORBIDDEN-RULES");

    private static final SubLSymbol _CSETF_INFRNC_FORBIDDEN_RULES = makeSymbol("_CSETF-INFRNC-FORBIDDEN-RULES");

    private static final SubLSymbol INFRNC_ALLOWED_MODULES = makeSymbol("INFRNC-ALLOWED-MODULES");

    private static final SubLSymbol _CSETF_INFRNC_ALLOWED_MODULES = makeSymbol("_CSETF-INFRNC-ALLOWED-MODULES");

    private static final SubLSymbol $sym134$INFRNC_ALLOW_ABNORMALITY_CHECKING_ = makeSymbol("INFRNC-ALLOW-ABNORMALITY-CHECKING?");

    private static final SubLSymbol $sym135$_CSETF_INFRNC_ALLOW_ABNORMALITY_CHECKING_ = makeSymbol("_CSETF-INFRNC-ALLOW-ABNORMALITY-CHECKING?");

    private static final SubLSymbol INFRNC_TRANSITIVE_CLOSURE_MODE = makeSymbol("INFRNC-TRANSITIVE-CLOSURE-MODE");

    private static final SubLSymbol _CSETF_INFRNC_TRANSITIVE_CLOSURE_MODE = makeSymbol("_CSETF-INFRNC-TRANSITIVE-CLOSURE-MODE");

    private static final SubLSymbol $sym138$INFRNC_PROBLEM_STORE_PRIVATE_ = makeSymbol("INFRNC-PROBLEM-STORE-PRIVATE?");

    private static final SubLSymbol $sym139$_CSETF_INFRNC_PROBLEM_STORE_PRIVATE_ = makeSymbol("_CSETF-INFRNC-PROBLEM-STORE-PRIVATE?");

    private static final SubLSymbol $sym140$INFRNC_CONTINUABLE_ = makeSymbol("INFRNC-CONTINUABLE?");

    private static final SubLSymbol $sym141$_CSETF_INFRNC_CONTINUABLE_ = makeSymbol("_CSETF-INFRNC-CONTINUABLE?");

    private static final SubLSymbol $sym142$INFRNC_BROWSABLE_ = makeSymbol("INFRNC-BROWSABLE?");

    private static final SubLSymbol $sym143$_CSETF_INFRNC_BROWSABLE_ = makeSymbol("_CSETF-INFRNC-BROWSABLE?");

    private static final SubLSymbol INFRNC_RETURN_TYPE = makeSymbol("INFRNC-RETURN-TYPE");

    private static final SubLSymbol _CSETF_INFRNC_RETURN_TYPE = makeSymbol("_CSETF-INFRNC-RETURN-TYPE");

    private static final SubLSymbol INFRNC_ANSWER_LANGUAGE = makeSymbol("INFRNC-ANSWER-LANGUAGE");

    private static final SubLSymbol _CSETF_INFRNC_ANSWER_LANGUAGE = makeSymbol("_CSETF-INFRNC-ANSWER-LANGUAGE");

    private static final SubLSymbol $sym148$INFRNC_CACHE_RESULTS_ = makeSymbol("INFRNC-CACHE-RESULTS?");

    private static final SubLSymbol $sym149$_CSETF_INFRNC_CACHE_RESULTS_ = makeSymbol("_CSETF-INFRNC-CACHE-RESULTS?");

    private static final SubLSymbol $sym150$INFRNC_BLOCKING_ = makeSymbol("INFRNC-BLOCKING?");

    private static final SubLSymbol $sym151$_CSETF_INFRNC_BLOCKING_ = makeSymbol("_CSETF-INFRNC-BLOCKING?");

    private static final SubLSymbol INFRNC_MAX_NUMBER = makeSymbol("INFRNC-MAX-NUMBER");

    private static final SubLSymbol _CSETF_INFRNC_MAX_NUMBER = makeSymbol("_CSETF-INFRNC-MAX-NUMBER");

    private static final SubLSymbol INFRNC_MAX_TIME = makeSymbol("INFRNC-MAX-TIME");

    private static final SubLSymbol _CSETF_INFRNC_MAX_TIME = makeSymbol("_CSETF-INFRNC-MAX-TIME");

    private static final SubLSymbol INFRNC_MAX_STEP = makeSymbol("INFRNC-MAX-STEP");

    private static final SubLSymbol _CSETF_INFRNC_MAX_STEP = makeSymbol("_CSETF-INFRNC-MAX-STEP");

    private static final SubLSymbol INFRNC_MODE = makeSymbol("INFRNC-MODE");

    private static final SubLSymbol _CSETF_INFRNC_MODE = makeSymbol("_CSETF-INFRNC-MODE");

    private static final SubLSymbol INFRNC_FORWARD_MAX_TIME = makeSymbol("INFRNC-FORWARD-MAX-TIME");

    private static final SubLSymbol _CSETF_INFRNC_FORWARD_MAX_TIME = makeSymbol("_CSETF-INFRNC-FORWARD-MAX-TIME");

    private static final SubLSymbol INFRNC_MAX_PROOF_DEPTH = makeSymbol("INFRNC-MAX-PROOF-DEPTH");

    private static final SubLSymbol _CSETF_INFRNC_MAX_PROOF_DEPTH = makeSymbol("_CSETF-INFRNC-MAX-PROOF-DEPTH");

    private static final SubLSymbol INFRNC_MAX_TRANSFORMATION_DEPTH = makeSymbol("INFRNC-MAX-TRANSFORMATION-DEPTH");

    private static final SubLSymbol _CSETF_INFRNC_MAX_TRANSFORMATION_DEPTH = makeSymbol("_CSETF-INFRNC-MAX-TRANSFORMATION-DEPTH");

    private static final SubLSymbol INFRNC_MIN_RULE_UTILITY = makeSymbol("INFRNC-MIN-RULE-UTILITY");

    private static final SubLSymbol _CSETF_INFRNC_MIN_RULE_UTILITY = makeSymbol("_CSETF-INFRNC-MIN-RULE-UTILITY");

    private static final SubLSymbol INFRNC_PROBABLY_APPROXIMATELY_DONE = makeSymbol("INFRNC-PROBABLY-APPROXIMATELY-DONE");

    private static final SubLSymbol _CSETF_INFRNC_PROBABLY_APPROXIMATELY_DONE = makeSymbol("_CSETF-INFRNC-PROBABLY-APPROXIMATELY-DONE");

    private static final SubLSymbol INFRNC_METRICS_TEMPLATE = makeSymbol("INFRNC-METRICS-TEMPLATE");

    private static final SubLSymbol _CSETF_INFRNC_METRICS_TEMPLATE = makeSymbol("_CSETF-INFRNC-METRICS-TEMPLATE");

    private static final SubLSymbol INFRNC_START_UNIVERSAL_TIME = makeSymbol("INFRNC-START-UNIVERSAL-TIME");

    private static final SubLSymbol _CSETF_INFRNC_START_UNIVERSAL_TIME = makeSymbol("_CSETF-INFRNC-START-UNIVERSAL-TIME");

    private static final SubLSymbol INFRNC_START_INTERNAL_REAL_TIME = makeSymbol("INFRNC-START-INTERNAL-REAL-TIME");

    private static final SubLSymbol _CSETF_INFRNC_START_INTERNAL_REAL_TIME = makeSymbol("_CSETF-INFRNC-START-INTERNAL-REAL-TIME");

    private static final SubLSymbol INFRNC_END_INTERNAL_REAL_TIME = makeSymbol("INFRNC-END-INTERNAL-REAL-TIME");

    private static final SubLSymbol _CSETF_INFRNC_END_INTERNAL_REAL_TIME = makeSymbol("_CSETF-INFRNC-END-INTERNAL-REAL-TIME");

    private static final SubLSymbol INFRNC_PAD_INTERNAL_REAL_TIME = makeSymbol("INFRNC-PAD-INTERNAL-REAL-TIME");

    private static final SubLSymbol _CSETF_INFRNC_PAD_INTERNAL_REAL_TIME = makeSymbol("_CSETF-INFRNC-PAD-INTERNAL-REAL-TIME");

    private static final SubLSymbol INFRNC_HYPOTHESIZATION_TIME = makeSymbol("INFRNC-HYPOTHESIZATION-TIME");

    private static final SubLSymbol _CSETF_INFRNC_HYPOTHESIZATION_TIME = makeSymbol("_CSETF-INFRNC-HYPOTHESIZATION-TIME");

    private static final SubLSymbol INFRNC_CUMULATIVE_TIME = makeSymbol("INFRNC-CUMULATIVE-TIME");

    private static final SubLSymbol _CSETF_INFRNC_CUMULATIVE_TIME = makeSymbol("_CSETF-INFRNC-CUMULATIVE-TIME");

    private static final SubLSymbol INFRNC_STEP_COUNT = makeSymbol("INFRNC-STEP-COUNT");

    private static final SubLSymbol _CSETF_INFRNC_STEP_COUNT = makeSymbol("_CSETF-INFRNC-STEP-COUNT");

    private static final SubLSymbol INFRNC_CUMULATIVE_STEP_COUNT = makeSymbol("INFRNC-CUMULATIVE-STEP-COUNT");

    private static final SubLSymbol _CSETF_INFRNC_CUMULATIVE_STEP_COUNT = makeSymbol("_CSETF-INFRNC-CUMULATIVE-STEP-COUNT");

    private static final SubLSymbol INFRNC_EVENTS = makeSymbol("INFRNC-EVENTS");

    private static final SubLSymbol _CSETF_INFRNC_EVENTS = makeSymbol("_CSETF-INFRNC-EVENTS");

    private static final SubLSymbol INFRNC_HALT_CONDITIONS = makeSymbol("INFRNC-HALT-CONDITIONS");

    private static final SubLSymbol _CSETF_INFRNC_HALT_CONDITIONS = makeSymbol("_CSETF-INFRNC-HALT-CONDITIONS");

    private static final SubLSymbol INFRNC_ACCUMULATORS = makeSymbol("INFRNC-ACCUMULATORS");

    private static final SubLSymbol _CSETF_INFRNC_ACCUMULATORS = makeSymbol("_CSETF-INFRNC-ACCUMULATORS");

    private static final SubLSymbol INFRNC_PROOF_WATERMARK = makeSymbol("INFRNC-PROOF-WATERMARK");

    private static final SubLSymbol _CSETF_INFRNC_PROOF_WATERMARK = makeSymbol("_CSETF-INFRNC-PROOF-WATERMARK");

    private static final SubLSymbol INFRNC_PROBLEM_WORKING_TIME_DATA = makeSymbol("INFRNC-PROBLEM-WORKING-TIME-DATA");

    private static final SubLSymbol _CSETF_INFRNC_PROBLEM_WORKING_TIME_DATA = makeSymbol("_CSETF-INFRNC-PROBLEM-WORKING-TIME-DATA");

    private static final SubLSymbol INFRNC_TYPE = makeSymbol("INFRNC-TYPE");

    private static final SubLSymbol _CSETF_INFRNC_TYPE = makeSymbol("_CSETF-INFRNC-TYPE");

    private static final SubLSymbol INFRNC_DATA = makeSymbol("INFRNC-DATA");

    private static final SubLSymbol _CSETF_INFRNC_DATA = makeSymbol("_CSETF-INFRNC-DATA");

    private static final SubLSymbol INFRNC_PROPERTIES = makeSymbol("INFRNC-PROPERTIES");

    private static final SubLSymbol _CSETF_INFRNC_PROPERTIES = makeSymbol("_CSETF-INFRNC-PROPERTIES");

    private static final SubLSymbol $INPUT_EL_QUERY = makeKeyword("INPUT-EL-QUERY");

    private static final SubLSymbol $INPUT_NON_EXPLANATORY_EL_QUERY = makeKeyword("INPUT-NON-EXPLANATORY-EL-QUERY");

    private static final SubLSymbol $INPUT_QUERY_PROPERTIES = makeKeyword("INPUT-QUERY-PROPERTIES");

    private static final SubLSymbol $NON_EXPLANATORY_SUBQUERY = makeKeyword("NON-EXPLANATORY-SUBQUERY");

    private static final SubLSymbol $FREE_HL_VARS = makeKeyword("FREE-HL-VARS");

    private static final SubLSymbol $ANSWER_ID_INDEX = makeKeyword("ANSWER-ID-INDEX");

    private static final SubLSymbol $ANSWER_BINDINGS_INDEX = makeKeyword("ANSWER-BINDINGS-INDEX");

    private static final SubLSymbol $NEW_ANSWER_ID_START = makeKeyword("NEW-ANSWER-ID-START");

    private static final SubLSymbol $NEW_ANSWER_JUSTIFICATIONS = makeKeyword("NEW-ANSWER-JUSTIFICATIONS");

    private static final SubLSymbol $MAX_TRANSFORMATION_DEPTH_REACHED = makeKeyword("MAX-TRANSFORMATION-DEPTH-REACHED");

    private static final SubLSymbol $DISJUNCTION_FREE_EL_VARS_POLICY = makeKeyword("DISJUNCTION-FREE-EL-VARS-POLICY");

    private static final SubLSymbol $RESULT_UNIQUENESS_CRITERION = makeKeyword("RESULT-UNIQUENESS-CRITERION");

    private static final SubLSymbol $kw233$ALLOW_HL_PREDICATE_TRANSFORMATION_ = makeKeyword("ALLOW-HL-PREDICATE-TRANSFORMATION?");

    private static final SubLSymbol $kw234$ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_ = makeKeyword("ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?");

    private static final SubLSymbol $kw235$ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_ = makeKeyword("ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?");

    private static final SubLSymbol $kw236$ALLOW_INDETERMINATE_RESULTS_ = makeKeyword("ALLOW-INDETERMINATE-RESULTS?");

    private static final SubLSymbol $kw240$ALLOW_ABNORMALITY_CHECKING_ = makeKeyword("ALLOW-ABNORMALITY-CHECKING?");

    private static final SubLSymbol $TRANSITIVE_CLOSURE_MODE = makeKeyword("TRANSITIVE-CLOSURE-MODE");

    private static final SubLSymbol $kw242$PROBLEM_STORE_PRIVATE_ = makeKeyword("PROBLEM-STORE-PRIVATE?");

    private static final SubLSymbol $kw247$CACHE_RESULTS_ = makeKeyword("CACHE-RESULTS?");

    private static final SubLSymbol $FORWARD_MAX_TIME = makeKeyword("FORWARD-MAX-TIME");

    private static final SubLSymbol $MAX_PROOF_DEPTH = makeKeyword("MAX-PROOF-DEPTH");

    private static final SubLSymbol $MAX_TRANSFORMATION_DEPTH = makeKeyword("MAX-TRANSFORMATION-DEPTH");

    private static final SubLSymbol $MIN_RULE_UTILITY = makeKeyword("MIN-RULE-UTILITY");

    private static final SubLSymbol $PROBABLY_APPROXIMATELY_DONE = makeKeyword("PROBABLY-APPROXIMATELY-DONE");

    private static final SubLSymbol $START_UNIVERSAL_TIME = makeKeyword("START-UNIVERSAL-TIME");

    private static final SubLSymbol $START_INTERNAL_REAL_TIME = makeKeyword("START-INTERNAL-REAL-TIME");

    private static final SubLSymbol $END_INTERNAL_REAL_TIME = makeKeyword("END-INTERNAL-REAL-TIME");

    private static final SubLSymbol $PAD_INTERNAL_REAL_TIME = makeKeyword("PAD-INTERNAL-REAL-TIME");

    private static final SubLSymbol $CUMULATIVE_STEP_COUNT = makeKeyword("CUMULATIVE-STEP-COUNT");

    private static final SubLSymbol $PROBLEM_WORKING_TIME_DATA = makeKeyword("PROBLEM-WORKING-TIME-DATA");

    private static final SubLString $str275$Invalid_slot__S_for_construction_ = makeString("Invalid slot ~S for construction function");

    private static final SubLSymbol MAKE_INFERENCE = makeSymbol("MAKE-INFERENCE");

    private static final SubLSymbol VISIT_DEFSTRUCT_OBJECT_INFERENCE_METHOD = makeSymbol("VISIT-DEFSTRUCT-OBJECT-INFERENCE-METHOD");

    private static final SubLString $str282$_Invalid_INFERENCE__s_ = makeString("<Invalid INFERENCE ~s>");

    private static final SubLString $str283$_INFERENCE__a__a__a__s_in__s_ = makeString("<INFERENCE ~a.~a:~a:~s in ~s>");

    private static final SubLSymbol SXHASH_INFERENCE_METHOD = makeSymbol("SXHASH-INFERENCE-METHOD");

    static private final SubLList $list290 = list(list(makeSymbol("PROBLEM-VAR"), makeSymbol("INFERENCE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol INFERENCE_RELEVANT_PROBLEMS = makeSymbol("INFERENCE-RELEVANT-PROBLEMS");

    private static final SubLList $list293 = list(list(makeSymbol("JUST-VAR"), makeSymbol("INFERENCE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol DO_QUEUE_ELEMENTS = makeSymbol("DO-QUEUE-ELEMENTS");

    private static final SubLSymbol INFERENCE_NEW_ANSWER_JUSTIFICATIONS = makeSymbol("INFERENCE-NEW-ANSWER-JUSTIFICATIONS");

    private static final SubLList $list296 = list(list(makeSymbol("ANSWER-VAR"), makeSymbol("INFERENCE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol $sym297$START_ID = makeUninternedSymbol("START-ID");

    private static final SubLSymbol $sym298$END_ID = makeUninternedSymbol("END-ID");

    private static final SubLSymbol $sym299$ID = makeUninternedSymbol("ID");

    private static final SubLSymbol $sym300$INF = makeUninternedSymbol("INF");

    private static final SubLSymbol INFERENCE_NEW_ANSWER_ID_START = makeSymbol("INFERENCE-NEW-ANSWER-ID-START");

    private static final SubLSymbol INFERENCE_NEXT_NEW_ANSWER_ID = makeSymbol("INFERENCE-NEXT-NEW-ANSWER-ID");

    private static final SubLSymbol $sym305$1_ = makeSymbol("1+");

    private static final SubLSymbol $sym306$__ = makeSymbol(">=");

    private static final SubLSymbol FIND_INFERENCE_ANSWER_BY_ID = makeSymbol("FIND-INFERENCE-ANSWER-BY-ID");

    private static final SubLList $list308 = list(list(makeSymbol("ANSWER-VAR"), makeSymbol("INFERENCE"), makeSymbol("&KEY"), makeSymbol("ORDERED")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLList $list309 = list(makeKeyword("ORDERED"));

    private static final SubLSymbol $ALLOW_OTHER_KEYS = makeKeyword("ALLOW-OTHER-KEYS");

    private static final SubLSymbol $sym312$ID = makeUninternedSymbol("ID");

    private static final SubLSymbol INFERENCE_ANSWER_ID_INDEX = makeSymbol("INFERENCE-ANSWER-ID-INDEX");

    private static final SubLList $list316 = list(list(makeSymbol("ANSWER-VAR"), makeSymbol("INFERENCE"), makeSymbol("START-INDEX")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol $sym317$START_ID = makeUninternedSymbol("START-ID");

    private static final SubLSymbol $sym318$END_ID = makeUninternedSymbol("END-ID");

    private static final SubLSymbol $sym319$ID = makeUninternedSymbol("ID");

    private static final SubLSymbol $sym320$INF = makeUninternedSymbol("INF");

    private static final SubLSymbol $sym322$ANSWER = makeUninternedSymbol("ANSWER");

    private static final SubLSymbol DO_INFERENCE_ANSWERS = makeSymbol("DO-INFERENCE-ANSWERS");

    private static final SubLSymbol DO_INFERENCE_ANSWER_JUSTIFICATIONS = makeSymbol("DO-INFERENCE-ANSWER-JUSTIFICATIONS");

    private static final SubLList $list325 = list(list(makeSymbol("PROCESS-VAR"), makeSymbol("INFERENCE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol DO_QUEUE_DEQUEUE = makeSymbol("DO-QUEUE-DEQUEUE");

    private static final SubLSymbol INFERENCE_INTERRUPTING_PROCESSES = makeSymbol("INFERENCE-INTERRUPTING-PROCESSES");

    private static final SubLList $list328 = list(list(makeSymbol("PROOF-VAR"), makeSymbol("INFERENCE"), makeSymbol("&KEY"), makeSymbol("PROOF-STATUS")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLList $list329 = list(makeKeyword("PROOF-STATUS"));

    private static final SubLSymbol $sym331$ROOT_PROBLEM = makeUninternedSymbol("ROOT-PROBLEM");

    private static final SubLSymbol INFERENCE_ROOT_PROBLEM = makeSymbol("INFERENCE-ROOT-PROBLEM");

    private static final SubLSymbol DO_PROBLEM_PROOFS = makeSymbol("DO-PROBLEM-PROOFS");

    private static final SubLList $list335 = list(list(makeSymbol("RULE-VAR"), makeSymbol("INFERENCE"), makeSymbol("&KEY"), makeSymbol("DONE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLList $list336 = list($DONE);

    private static final SubLSymbol INFERENCE_ALLOWED_RULES = makeSymbol("INFERENCE-ALLOWED-RULES");

    private static final SubLList $list339 = list(list(makeSymbol("INFERENCE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol INFERENCE_PROBLEM_WORKING_TIME_LOCK = makeSymbol("INFERENCE-PROBLEM-WORKING-TIME-LOCK");

    private static final SubLSymbol $IGNORE_ERRORS_TARGET = makeKeyword("IGNORE-ERRORS-TARGET");

    private static final SubLSymbol IGNORE_ERRORS_HANDLER = makeSymbol("IGNORE-ERRORS-HANDLER", "SUBLISP");

    private static final SubLSymbol DO_INFERENCE_NEW_ANSWERS = makeSymbol("DO-INFERENCE-NEW-ANSWERS");

    private static final SubLSymbol DO_INFERENCE_NEW_ANSWER_JUSTIFICATIONS = makeSymbol("DO-INFERENCE-NEW-ANSWER-JUSTIFICATIONS");

    private static final SubLSymbol FORWARD_PROPAGATE_P = makeSymbol("FORWARD-PROPAGATE-P");

    private static final SubLSymbol POSSIBLY_INFERENCE_SENTENCE_P = makeSymbol("POSSIBLY-INFERENCE-SENTENCE-P");

    private static final SubLSymbol BINDING_LIST_P = makeSymbol("BINDING-LIST-P");

    private static final SubLSymbol PROBLEM_QUERY_P = makeSymbol("PROBLEM-QUERY-P");

    private static final SubLSymbol EXPLANATORY_SUBQUERY_SPEC_P = makeSymbol("EXPLANATORY-SUBQUERY-SPEC-P");

    private static final SubLSymbol NON_EXPLANATORY_SUBQUERY_SPEC_P = makeSymbol("NON-EXPLANATORY-SUBQUERY-SPEC-P");

    private static final SubLSymbol INFERENCE_STATUS_P = makeSymbol("INFERENCE-STATUS-P");

    private static final SubLSymbol INFERENCE_SUSPEND_STATUS_P = makeSymbol("INFERENCE-SUSPEND-STATUS-P");

    private static final SubLSymbol ANSWER_LINK_P = makeSymbol("ANSWER-LINK-P");

    private static final SubLSymbol INFERENCE_DISJUNCTION_FREE_EL_VARS_POLICY_P = makeSymbol("INFERENCE-DISJUNCTION-FREE-EL-VARS-POLICY-P");

    private static final SubLSymbol RESULT_UNIQUENESS_CRITERION_P = makeSymbol("RESULT-UNIQUENESS-CRITERION-P");

    private static final SubLSymbol ALLOWED_MODULES_SPEC_P = makeSymbol("ALLOWED-MODULES-SPEC-P");

    private static final SubLSymbol INFERENCE_TRANSITIVE_CLOSURE_MODE_P = makeSymbol("INFERENCE-TRANSITIVE-CLOSURE-MODE-P");

    private static final SubLSymbol INFERENCE_RETURN_TYPE_P = makeSymbol("INFERENCE-RETURN-TYPE-P");

    private static final SubLSymbol INFERENCE_ANSWER_LANGUAGE_P = makeSymbol("INFERENCE-ANSWER-LANGUAGE-P");

    private static final SubLSymbol INFERENCE_MODE_P = makeSymbol("INFERENCE-MODE-P");

    private static final SubLString $str373$Forward_max_time__s_cannot_be_gre = makeString("Forward max time ~s cannot be greater than max time ~s");

    private static final SubLSymbol RULE_UTILITY_P = makeSymbol("RULE-UTILITY-P");

    private static final SubLSymbol PROBABILITY_P = makeSymbol("PROBABILITY-P");

    private static final SubLSymbol QUERY_METRIC_P = makeSymbol("QUERY-METRIC-P");

    private static final SubLSymbol POTENTIALLY_INFINITE_INTEGER_P = makeSymbol("POTENTIALLY-INFINITE-INTEGER-P");

    private static final SubLSymbol INFERENCE_EVENT_TYPE_P = makeSymbol("INFERENCE-EVENT-TYPE-P");

    private static final SubLSymbol INFERENCE_HALT_CONDITION_P = makeSymbol("INFERENCE-HALT-CONDITION-P");

    private static final SubLSymbol INFERENCE_TYPE_P = makeSymbol("INFERENCE-TYPE-P");

    private static final SubLList $list385 = list(list(makeSymbol("STORE-ID-VAR"), makeSymbol("INFERENCE-ID-VAR"), makeSymbol("INFERENCE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol $sym386$INFERENCE_VAR = makeUninternedSymbol("INFERENCE-VAR");

    private static final SubLSymbol INFERENCE_PROBLEM_STORE_SUID = makeSymbol("INFERENCE-PROBLEM-STORE-SUID");

    private static final SubLSymbol INFERENCE_SUID = makeSymbol("INFERENCE-SUID");

    private static final SubLSymbol SUCCESSFUL_INFERENCE_P = makeSymbol("SUCCESSFUL-INFERENCE-P");

    private static final SubLList $list392 = list(makeSymbol("MT"), makeSymbol("ASENT"));

    private static final SubLList $list395 = list(makeSymbol("HL-MT"), makeSymbol("ASENT"));

    private static final SubLString $str398$_new_cyc_query_A = makeString("(new-cyc-query~A");

    private static final SubLString $str399$_____A = makeString("~%  ~A");

    private static final SubLString $str400$_A = makeString("~A");

    private static final SubLString $str401$_____list______ = makeString("~%  (list~%    ");

    private static final SubLString $str403$_S__find_problem_store_by_id__S__ = makeString("~S (find-problem-store-by-id ~S)~%    ");

    private static final SubLString $str405$_S__list = makeString("~S (list");

    private static final SubLString $str406$_________find_object_by_hl_extern = makeString("~&      (find-object-by-hl-external-id-string ~S)");

    private static final SubLString $str407$_______ = makeString(")~%    ");

    private static final SubLString $str408$_S__S______ = makeString("~S ~S~%    ");

    private static final SubLString $str409$_ = makeString(")");

    private static final SubLList $list413 = list(makeSymbol("PROBLEM-STORE-SUID"), makeSymbol("INFERENCE-SUID"), makeSymbol("ANSWER-SUID"));

    private static final SubLSymbol INFERENCE_ACCUMULATOR_TYPE_P = makeSymbol("INFERENCE-ACCUMULATOR-TYPE-P");

    private static final SubLSymbol ACCUMULATOR_P = makeSymbol("ACCUMULATOR-P");

    private static final SubLSymbol $pad_times_to_first_answer$ = makeSymbol("*PAD-TIMES-TO-FIRST-ANSWER*");

    private static final SubLSymbol $sym419$_ = makeSymbol("<");

    private static final SubLSymbol $LOOK_NO_DEEPER_FOR_ADDITIONAL_ANSWERS = makeKeyword("LOOK-NO-DEEPER-FOR-ADDITIONAL-ANSWERS");

    private static final SubLString $str421$got_a_null_answer_for__s = makeString("got a null answer for ~s");

    private static final SubLSymbol INFERENCE_STATIC_PROPERTIES_P = makeSymbol("INFERENCE-STATIC-PROPERTIES-P");

    private static final SubLSymbol ALLOWED_RULES_SPEC_P = makeSymbol("ALLOWED-RULES-SPEC-P");

    private static final SubLSymbol FORBIDDEN_RULES_SPEC_P = makeSymbol("FORBIDDEN-RULES-SPEC-P");

    private static final SubLSymbol QUERY_DYNAMIC_PROPERTIES_P = makeSymbol("QUERY-DYNAMIC-PROPERTIES-P");

    private static final SubLSymbol STRATEGY_P = makeSymbol("STRATEGY-P");

    private static final SubLSymbol INFERENCE_ANSWER_JUSTIFICATION_P = makeSymbol("INFERENCE-ANSWER-JUSTIFICATION-P");

    private static final SubLString $str435$variables__S_were_removed = makeString("variables ~S were removed");

    private static final SubLString $str436$variables__S_were_added = makeString("variables ~S were added");

    private static final SubLString $str437$variables__S_contain_duplications = makeString("variables ~S contain duplications");

    private static final SubLSymbol SIMPLEST_INFERENCE_P = makeSymbol("SIMPLEST-INFERENCE-P");

    private static final SubLSymbol STRATEGY_TYPE_P = makeSymbol("STRATEGY-TYPE-P");

    private static final SubLList $list442 = list(makeSymbol("SUID"), makeSymbol("INFERENCE"), makeSymbol("BINDINGS"), makeSymbol("JUSTIFICATIONS"), makeSymbol("ELAPSED-CREATION-TIME"), makeSymbol("STEP-COUNT"));

    private static final SubLList $list443 = list($SUID, makeKeyword("INFERENCE"), makeKeyword("BINDINGS"), makeKeyword("JUSTIFICATIONS"), makeKeyword("ELAPSED-CREATION-TIME"), makeKeyword("STEP-COUNT"));

    private static final SubLList $list444 = list(makeSymbol("INF-ANSWER-SUID"), makeSymbol("INF-ANSWER-INFERENCE"), makeSymbol("INF-ANSWER-BINDINGS"), makeSymbol("INF-ANSWER-JUSTIFICATIONS"), makeSymbol("INF-ANSWER-ELAPSED-CREATION-TIME"), makeSymbol("INF-ANSWER-STEP-COUNT"));

    static private final SubLList $list445 = list(makeSymbol("_CSETF-INF-ANSWER-SUID"), makeSymbol("_CSETF-INF-ANSWER-INFERENCE"), makeSymbol("_CSETF-INF-ANSWER-BINDINGS"), makeSymbol("_CSETF-INF-ANSWER-JUSTIFICATIONS"), makeSymbol("_CSETF-INF-ANSWER-ELAPSED-CREATION-TIME"),
	    makeSymbol("_CSETF-INF-ANSWER-STEP-COUNT"));

    private static final SubLSymbol PRINT_INFERENCE_ANSWER = makeSymbol("PRINT-INFERENCE-ANSWER");

    private static final SubLSymbol INFERENCE_ANSWER_PRINT_FUNCTION_TRAMPOLINE = makeSymbol("INFERENCE-ANSWER-PRINT-FUNCTION-TRAMPOLINE");

    static private final SubLList $list448 = list(makeSymbol("OPTIMIZE-FUNCALL"), makeSymbol("INFERENCE-ANSWER-P"));

    private static final SubLSymbol INF_ANSWER_SUID = makeSymbol("INF-ANSWER-SUID");

    private static final SubLSymbol _CSETF_INF_ANSWER_SUID = makeSymbol("_CSETF-INF-ANSWER-SUID");

    private static final SubLSymbol INF_ANSWER_INFERENCE = makeSymbol("INF-ANSWER-INFERENCE");

    private static final SubLSymbol _CSETF_INF_ANSWER_INFERENCE = makeSymbol("_CSETF-INF-ANSWER-INFERENCE");

    private static final SubLSymbol INF_ANSWER_BINDINGS = makeSymbol("INF-ANSWER-BINDINGS");

    private static final SubLSymbol _CSETF_INF_ANSWER_BINDINGS = makeSymbol("_CSETF-INF-ANSWER-BINDINGS");

    private static final SubLSymbol INF_ANSWER_JUSTIFICATIONS = makeSymbol("INF-ANSWER-JUSTIFICATIONS");

    private static final SubLSymbol _CSETF_INF_ANSWER_JUSTIFICATIONS = makeSymbol("_CSETF-INF-ANSWER-JUSTIFICATIONS");

    private static final SubLSymbol INF_ANSWER_ELAPSED_CREATION_TIME = makeSymbol("INF-ANSWER-ELAPSED-CREATION-TIME");

    private static final SubLSymbol _CSETF_INF_ANSWER_ELAPSED_CREATION_TIME = makeSymbol("_CSETF-INF-ANSWER-ELAPSED-CREATION-TIME");

    private static final SubLSymbol INF_ANSWER_STEP_COUNT = makeSymbol("INF-ANSWER-STEP-COUNT");

    private static final SubLSymbol _CSETF_INF_ANSWER_STEP_COUNT = makeSymbol("_CSETF-INF-ANSWER-STEP-COUNT");

    private static final SubLSymbol $ELAPSED_CREATION_TIME = makeKeyword("ELAPSED-CREATION-TIME");

    private static final SubLSymbol MAKE_INFERENCE_ANSWER = makeSymbol("MAKE-INFERENCE-ANSWER");

    private static final SubLSymbol VISIT_DEFSTRUCT_OBJECT_INFERENCE_ANSWER_METHOD = makeSymbol("VISIT-DEFSTRUCT-OBJECT-INFERENCE-ANSWER-METHOD");

    private static final SubLString $str466$_Invalid_INFERENCE_ANSWER__s_ = makeString("<Invalid INFERENCE-ANSWER ~s>");

    private static final SubLString $str467$_INFERENCE_ANSWER__a_for_INFERENC = makeString("<INFERENCE-ANSWER ~a for INFERENCE ~a.~a:~a>");

    private static final SubLSymbol SXHASH_INFERENCE_ANSWER_METHOD = makeSymbol("SXHASH-INFERENCE-ANSWER-METHOD");

    private static final SubLSymbol BINDINGS_P = makeSymbol("BINDINGS-P");

    private static final SubLList $list470 = list(list(makeSymbol("JUST-VAR"), makeSymbol("INFERENCE-ANSWER")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol INFERENCE_ANSWER_JUSTIFICATIONS = makeSymbol("INFERENCE-ANSWER-JUSTIFICATIONS");

    private static final SubLList $list473 = list(list(makeSymbol("JUST-VAR"), makeSymbol("INDEX-VAR"), makeSymbol("INFERENCE-ANSWER")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol JUSTIFICATION_EQUAL = makeSymbol("JUSTIFICATION-EQUAL");

    private static final SubLSymbol INFERENCE_ANSWER_JUSTIFICATION_SUPPORTS = makeSymbol("INFERENCE-ANSWER-JUSTIFICATION-SUPPORTS");

    private static final SubLString $str479$_S_was_not_an_inference_answer_la = makeString("~S was not an inference-answer-language-p");

    private static final SubLSymbol INFERENCE_ANSWER_EL_SENTENCE = makeSymbol("INFERENCE-ANSWER-EL-SENTENCE");

    private static final SubLSymbol INFERENCE_ANSWER_JUSTIFICATION = makeSymbol("INFERENCE-ANSWER-JUSTIFICATION");

    private static final SubLList $list482 = list(makeSymbol("ANSWER"), makeSymbol("SUPPORTS"), makeSymbol("PRAGMA-SUPPORTS"), makeSymbol("PROOFS"));

    private static final SubLList $list483 = list(makeKeyword("ANSWER"), makeKeyword("SUPPORTS"), makeKeyword("PRAGMA-SUPPORTS"), makeKeyword("PROOFS"));

    private static final SubLList $list484 = list(makeSymbol("INF-ANS-JUST-ANSWER"), makeSymbol("INF-ANS-JUST-SUPPORTS"), makeSymbol("INF-ANS-JUST-PRAGMA-SUPPORTS"), makeSymbol("INF-ANS-JUST-PROOFS"));

    private static final SubLList $list485 = list(makeSymbol("_CSETF-INF-ANS-JUST-ANSWER"), makeSymbol("_CSETF-INF-ANS-JUST-SUPPORTS"), makeSymbol("_CSETF-INF-ANS-JUST-PRAGMA-SUPPORTS"), makeSymbol("_CSETF-INF-ANS-JUST-PROOFS"));

    private static final SubLSymbol PRINT_INFERENCE_ANSWER_JUSTIFICATION = makeSymbol("PRINT-INFERENCE-ANSWER-JUSTIFICATION");

    private static final SubLSymbol INFERENCE_ANSWER_JUSTIFICATION_PRINT_FUNCTION_TRAMPOLINE = makeSymbol("INFERENCE-ANSWER-JUSTIFICATION-PRINT-FUNCTION-TRAMPOLINE");

    static private final SubLList $list488 = list(makeSymbol("OPTIMIZE-FUNCALL"), makeSymbol("INFERENCE-ANSWER-JUSTIFICATION-P"));

    private static final SubLSymbol INF_ANS_JUST_ANSWER = makeSymbol("INF-ANS-JUST-ANSWER");

    private static final SubLSymbol _CSETF_INF_ANS_JUST_ANSWER = makeSymbol("_CSETF-INF-ANS-JUST-ANSWER");

    private static final SubLSymbol INF_ANS_JUST_SUPPORTS = makeSymbol("INF-ANS-JUST-SUPPORTS");

    private static final SubLSymbol _CSETF_INF_ANS_JUST_SUPPORTS = makeSymbol("_CSETF-INF-ANS-JUST-SUPPORTS");

    private static final SubLSymbol INF_ANS_JUST_PRAGMA_SUPPORTS = makeSymbol("INF-ANS-JUST-PRAGMA-SUPPORTS");

    private static final SubLSymbol _CSETF_INF_ANS_JUST_PRAGMA_SUPPORTS = makeSymbol("_CSETF-INF-ANS-JUST-PRAGMA-SUPPORTS");

    private static final SubLSymbol INF_ANS_JUST_PROOFS = makeSymbol("INF-ANS-JUST-PROOFS");

    private static final SubLSymbol _CSETF_INF_ANS_JUST_PROOFS = makeSymbol("_CSETF-INF-ANS-JUST-PROOFS");

    private static final SubLSymbol MAKE_INFERENCE_ANSWER_JUSTIFICATION = makeSymbol("MAKE-INFERENCE-ANSWER-JUSTIFICATION");

    private static final SubLSymbol VISIT_DEFSTRUCT_OBJECT_INFERENCE_ANSWER_JUSTIFICATION_METHOD = makeSymbol("VISIT-DEFSTRUCT-OBJECT-INFERENCE-ANSWER-JUSTIFICATION-METHOD");

    private static final SubLString $str503$_INF_ANS_JUST__s_ = makeString("<INF-ANS-JUST:~s>");

    private static final SubLSymbol SXHASH_INFERENCE_ANSWER_JUSTIFICATION_METHOD = makeSymbol("SXHASH-INFERENCE-ANSWER-JUSTIFICATION-METHOD");

    private static final SubLList $list507 = list(list(makeSymbol("PROOF-VAR"), makeSymbol("JUSTIFICATION")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol INFERENCE_ANSWER_JUSTIFICATION_PROOFS = makeSymbol("INFERENCE-ANSWER-JUSTIFICATION-PROOFS");

    private static final SubLList $list509 = list(list(makeSymbol("JUSTIFICATION-VAR"), makeSymbol("PROOF")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol $sym510$INFERENCE = makeUninternedSymbol("INFERENCE");

    private static final SubLSymbol $sym511$ANSWER = makeUninternedSymbol("ANSWER");

    private static final SubLSymbol $sym512$PROOF_VAR = makeUninternedSymbol("PROOF-VAR");

    private static final SubLSymbol DO_PROBLEM_SUPPORTED_INFERENCES = makeSymbol("DO-PROBLEM-SUPPORTED-INFERENCES");

    private static final SubLSymbol PROOF_SUPPORTED_PROBLEM = makeSymbol("PROOF-SUPPORTED-PROBLEM");

    private static final SubLSymbol $sym515$MEMBER_ = makeSymbol("MEMBER?");

    private static final SubLList $list516 = list(list(makeSymbol("FUNCTION"), EQL));

    private static final SubLList $list517 = list(list(makeSymbol("SUBPROOF-VAR"), makeSymbol("INFERENCE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol $sym518$ANSWER = makeUninternedSymbol("ANSWER");

    private static final SubLSymbol $sym519$JUSTIFICATION = makeUninternedSymbol("JUSTIFICATION");

    private static final SubLSymbol $sym520$PROOF = makeUninternedSymbol("PROOF");

    private static final SubLSymbol DO_INFERENCE_ANSWER_JUSTIFICATION_PROOFS = makeSymbol("DO-INFERENCE-ANSWER-JUSTIFICATION-PROOFS");

    private static final SubLSymbol DO_PROOF_ALL_SUBPROOFS = makeSymbol("DO-PROOF-ALL-SUBPROOFS");

    private static final SubLSymbol $sym523$RULE_ASSERTION_ = makeSymbol("RULE-ASSERTION?");

    private static final SubLSymbol INFERENCE_METRICS = makeSymbol("INFERENCE-METRICS");

    private static final SubLSymbol INFERENCE_QUERY_METRIC_P = makeSymbol("INFERENCE-QUERY-METRIC-P");

    private static final SubLSymbol $sym530$TERM__ = makeSymbol("TERM-<");

    private static final SubLSymbol $NEW_ROOT_TIMES = makeKeyword("NEW-ROOT-TIMES");

    private static final SubLSymbol $NEW_ROOT_COUNT = makeKeyword("NEW-ROOT-COUNT");

    private static final SubLSymbol $PROBLEM_CREATION_TIMES = makeKeyword("PROBLEM-CREATION-TIMES");

    private static final SubLSymbol $INFERENCE_ANSWER_QUERY_PROPERTIES = makeKeyword("INFERENCE-ANSWER-QUERY-PROPERTIES");

    private static final SubLSymbol $INFERENCE_STRONGEST_QUERY_PROPERTIES = makeKeyword("INFERENCE-STRONGEST-QUERY-PROPERTIES");

    private static final SubLSymbol $INFERENCE_MOST_EFFICIENT_QUERY_PROPERTIES = makeKeyword("INFERENCE-MOST-EFFICIENT-QUERY-PROPERTIES");

    private static final SubLString $str539$time_to_implement_metric__S = makeString("time to implement metric ~S");

    private static final SubLSymbol PROOF_SUID = makeSymbol("PROOF-SUID");

    private static final SubLSymbol $sym541$_ = makeSymbol(">");

    private static final SubLList $list543 = list(list(makeSymbol("TABLE-VAR"), makeSymbol("INFERENCE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLSymbol $sym544$INFERENCE_VAR = makeUninternedSymbol("INFERENCE-VAR");

    private static final SubLSymbol WITH_INFERENCE_PROBLEM_WORKING_TIME_LOCK = makeSymbol("WITH-INFERENCE-PROBLEM-WORKING-TIME-LOCK");

    private static final SubLSymbol INFERENCE_PROBLEM_WORKING_TIME_TABLE = makeSymbol("INFERENCE-PROBLEM-WORKING-TIME-TABLE");

    private static final SubLString $str547$Inference_problem_working_time_lo = makeString("Inference problem working time lock");

    private static final SubLSymbol $NEW_TRANSFORMATION_DEPTH_REACHED = makeKeyword("NEW-TRANSFORMATION-DEPTH-REACHED");

    private static final SubLSymbol $sym551$INFERENCES_VAR = makeUninternedSymbol("INFERENCES-VAR");

    private static final SubLSymbol $sym552$INFERENCE_VAR = makeUninternedSymbol("INFERENCE-VAR");

    private static final SubLSymbol $sym553$TACTIC_VAR = makeUninternedSymbol("TACTIC-VAR");

    private static final SubLSymbol $sym554$START_TIME = makeUninternedSymbol("START-TIME");

    private static final SubLList $list555 = list(list(makeSymbol("CURRENT-CONTROLLING-INFERENCES")));

    private static final SubLList $list556 = list(list(makeSymbol("CURRENT-CONTROLLING-INFERENCE")));

    private static final SubLList $list557 = list(list(makeSymbol("CURRENTLY-EXECUTING-TACTIC")));

    private static final SubLSymbol POSSIBLY_SIGNAL_SKSI_QUERY_START = makeSymbol("POSSIBLY-SIGNAL-SKSI-QUERY-START");

    private static final SubLSymbol INFERENCE_TIME_SO_FAR = makeSymbol("INFERENCE-TIME-SO-FAR");

    private static final SubLList $list562 = list(NIL);

    private static final SubLSymbol POSSIBLY_ADD_INFERENCE_SKSI_QUERY_START_TIME = makeSymbol("POSSIBLY-ADD-INFERENCE-SKSI-QUERY-START-TIME");

    private static final SubLSymbol POSSIBLY_SIGNAL_SKSI_QUERY_END = makeSymbol("POSSIBLY-SIGNAL-SKSI-QUERY-END");

    private static final SubLSymbol POSSIBLY_INCREMENT_INFERENCE_SKSI_QUERY_TOTAL_TIME = makeSymbol("POSSIBLY-INCREMENT-INFERENCE-SKSI-QUERY-TOTAL-TIME");

    private static final SubLSymbol $sym566$_ = makeSymbol("-");

    private static final SubLSymbol INFERENCE_WITHIN_SKSI_QUERY_EXECUTION = makeSymbol("INFERENCE-WITHIN-SKSI-QUERY-EXECUTION");

    private static final SubLSymbol $SKSI_QUERY_TOTAL_TIME = makeKeyword("SKSI-QUERY-TOTAL-TIME");

    private static final SubLSymbol $SKSI_QUERY_START_TIMES = makeKeyword("SKSI-QUERY-START-TIMES");

    private static final SubLList $list574 = list(list(makeSymbol("&KEY"), makeSymbol("SPARQL"), makeSymbol("RESULT-SET")), makeSymbol("&BODY"), makeSymbol("BODY"));

    private static final SubLList $list575 = list(makeKeyword("SPARQL"), makeKeyword("RESULT-SET"));

    private static final SubLSymbol $sym578$INFERENCES = makeUninternedSymbol("INFERENCES");

    private static final SubLSymbol $sym579$INFERENCE = makeUninternedSymbol("INFERENCE");

    private static final SubLSymbol $sym580$START = makeUninternedSymbol("START");

    private static final SubLSymbol $sym581$END = makeUninternedSymbol("END");

    private static final SubLSymbol $sym582$COUNT = makeUninternedSymbol("COUNT");

    private static final SubLSymbol LAST_ONE = makeSymbol("LAST-ONE");

    private static final SubLSymbol INFERENCE_CUMULATIVE_TIME_SO_FAR = makeSymbol("INFERENCE-CUMULATIVE-TIME-SO-FAR");

    private static final SubLSymbol POSSIBLY_ADD_INFERENCE_SPARQL_QUERY_PROFILE = makeSymbol("POSSIBLY-ADD-INFERENCE-SPARQL-QUERY-PROFILE");

    private static final SubLSymbol INFERENCE_WITHIN_SPARQL_QUERY_EXECUTION = makeSymbol("INFERENCE-WITHIN-SPARQL-QUERY-EXECUTION");

    private static final SubLSymbol $SPARQL_QUERY_PROFILE = makeKeyword("SPARQL-QUERY-PROFILE");

    private static final SubLSymbol $SKSI_QUERY_TOTAL_TIME_ACC = makeKeyword("SKSI-QUERY-TOTAL-TIME-ACC");

    private static final SubLSymbol $SKSI_QUERY_START_TIMES_ACC = makeKeyword("SKSI-QUERY-START-TIMES-ACC");

    private static final SubLSymbol $SPARQL_QUERY_PROFILE_ACC = makeKeyword("SPARQL-QUERY-PROFILE-ACC");

    public static final SubLObject inference_type_p_alt(SubLObject v_object) {
	return subl_promotions.memberP(v_object, $inference_types$.getGlobalValue(), symbol_function(EQ), UNPROVIDED);
    }

    public static SubLObject inference_type_p(final SubLObject v_object) {
	return memberP(v_object, inference_datastructures_inference.$inference_types$.getGlobalValue(), symbol_function(EQ), UNPROVIDED);
    }

    public static final SubLObject inference_print_function_trampoline_alt(SubLObject v_object, SubLObject stream) {
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.print_inference(v_object, stream, ZERO_INTEGER);
	return NIL;
    }

    public static SubLObject inference_print_function_trampoline(final SubLObject v_object, final SubLObject stream) {
	inference_datastructures_inference.print_inference(v_object, stream, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject inference_p_alt(SubLObject v_object) {
	return v_object.getClass() == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native.class ? ((SubLObject) (T)) : NIL;
    }

    public static SubLObject inference_p(final SubLObject v_object) {
	return v_object.getClass() == inference_datastructures_inference.$inference_native.class ? T : NIL;
    }

    public static final SubLObject infrnc_suid_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$suid;
    }

    public static SubLObject infrnc_suid(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField2();
    }

    public static final SubLObject infrnc_problem_store_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$problem_store;
    }

    public static SubLObject infrnc_problem_store(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField3();
    }

    public static final SubLObject infrnc_forward_propagate_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$forward_propagate;
    }

    public static SubLObject infrnc_forward_propagate(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField4();
    }

    public static final SubLObject infrnc_input_mt_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$input_mt;
    }

    public static SubLObject infrnc_input_mt(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField5();
    }

    public static final SubLObject infrnc_input_el_query_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$input_el_query;
    }

    public static SubLObject infrnc_input_el_query(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField6();
    }

    public static final SubLObject infrnc_input_non_explanatory_el_query_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$input_non_explanatory_el_query;
    }

    public static SubLObject infrnc_input_non_explanatory_el_query(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField7();
    }

    public static final SubLObject infrnc_input_query_properties_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$input_query_properties;
    }

    public static SubLObject infrnc_input_query_properties(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField8();
    }

    public static final SubLObject infrnc_mt_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$mt;
    }

    public static SubLObject infrnc_mt(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField9();
    }

    public static final SubLObject infrnc_el_query_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$el_query;
    }

    public static SubLObject infrnc_el_query(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField10();
    }

    public static final SubLObject infrnc_el_bindings_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$el_bindings;
    }

    public static SubLObject infrnc_el_bindings(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField11();
    }

    public static final SubLObject infrnc_hl_query_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$hl_query;
    }

    public static SubLObject infrnc_hl_query(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField12();
    }

    public static final SubLObject infrnc_explanatory_subquery_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$explanatory_subquery;
    }

    public static SubLObject infrnc_explanatory_subquery(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField13();
    }

    public static final SubLObject infrnc_non_explanatory_subquery_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$explanatory_subquery;
    }

    public static SubLObject infrnc_non_explanatory_subquery(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField14();
    }

    public static final SubLObject infrnc_free_hl_vars_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$free_hl_vars;
    }

    public static SubLObject infrnc_free_hl_vars(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField15();
    }

    public static final SubLObject infrnc_hypothetical_bindings_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$hypothetical_bindings;
    }

    public static SubLObject infrnc_hypothetical_bindings(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField16();
    }

    public static final SubLObject infrnc_answer_id_index_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$answer_id_index;
    }

    public static SubLObject infrnc_answer_id_index(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField17();
    }

    public static final SubLObject infrnc_answer_bindings_index_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$answer_bindings_index;
    }

    public static SubLObject infrnc_answer_bindings_index(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField18();
    }

    public static final SubLObject infrnc_new_answer_id_start_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$new_answer_id_start;
    }

    public static SubLObject infrnc_new_answer_id_start(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField19();
    }

    public static final SubLObject infrnc_new_answer_justifications_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$new_answer_justifications;
    }

    public static SubLObject infrnc_new_answer_justifications(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.getField20();
    }

    public static final SubLObject infrnc_status_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$status;
    }

    public static SubLObject infrnc_status(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$status;
    }

    public static final SubLObject infrnc_suspend_status_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$suspend_status;
    }

    public static SubLObject infrnc_suspend_status(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$suspend_status;
    }

    public static final SubLObject infrnc_root_link_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$root_link;
    }

    public static SubLObject infrnc_root_link(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$root_link;
    }

    public static final SubLObject infrnc_relevant_problems_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$relevant_problems;
    }

    public static SubLObject infrnc_relevant_problems(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$relevant_problems;
    }

    public static final SubLObject infrnc_strategy_set_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$strategy_set;
    }

    public static SubLObject infrnc_strategy_set(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$strategy_set;
    }

    public static final SubLObject infrnc_control_process_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$control_process;
    }

    public static SubLObject infrnc_control_process(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$control_process;
    }

    public static final SubLObject infrnc_interrupting_processes_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$interrupting_processes;
    }

    public static SubLObject infrnc_interrupting_processes(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$interrupting_processes;
    }

    public static final SubLObject infrnc_max_transformation_depth_reached_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$max_transformation_depth_reached;
    }

    public static SubLObject infrnc_max_transformation_depth_reached(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$max_transformation_depth_reached;
    }

    public static final SubLObject infrnc_disjunction_free_el_vars_policy_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$disjunction_free_el_vars_policy;
    }

    public static SubLObject infrnc_disjunction_free_el_vars_policy(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$disjunction_free_el_vars_policy;
    }

    public static final SubLObject infrnc_result_uniqueness_criterion_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$result_uniqueness_criterion;
    }

    public static SubLObject infrnc_result_uniqueness_criterion(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$result_uniqueness_criterion;
    }

    public static final SubLObject infrnc_allow_hl_predicate_transformationP_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$allow_hl_predicate_transformationP;
    }

    public static SubLObject infrnc_allow_hl_predicate_transformationP(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$allow_hl_predicate_transformationP;
    }

    public static final SubLObject infrnc_allow_unbound_predicate_transformationP_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$allow_unbound_predicate_transformationP;
    }

    public static SubLObject infrnc_allow_unbound_predicate_transformationP(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$allow_unbound_predicate_transformationP;
    }

    public static final SubLObject infrnc_allow_evaluatable_predicate_transformationP_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$allow_evaluatable_predicate_transformationP;
    }

    public static SubLObject infrnc_allow_evaluatable_predicate_transformationP(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$allow_evaluatable_predicate_transformationP;
    }

    public static final SubLObject infrnc_allow_indeterminate_resultsP_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$allow_indeterminate_resultsP;
    }

    public static SubLObject infrnc_allow_indeterminate_resultsP(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$allow_indeterminate_resultsP;
    }

    public static final SubLObject infrnc_allowed_rules_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$allowed_rules;
    }

    public static SubLObject infrnc_allowed_rules(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$allowed_rules;
    }

    public static final SubLObject infrnc_forbidden_rules_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$forbidden_rules;
    }

    public static SubLObject infrnc_forbidden_rules(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$forbidden_rules;
    }

    public static final SubLObject infrnc_allowed_modules_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$allowed_modules;
    }

    public static SubLObject infrnc_allowed_modules(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$allowed_modules;
    }

    public static final SubLObject infrnc_allow_abnormality_checkingP_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$allow_abnormality_checkingP;
    }

    public static SubLObject infrnc_allow_abnormality_checkingP(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$allow_abnormality_checkingP;
    }

    public static final SubLObject infrnc_transitive_closure_mode_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$transitive_closure_mode;
    }

    public static SubLObject infrnc_transitive_closure_mode(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$transitive_closure_mode;
    }

    public static final SubLObject infrnc_problem_store_privateP_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$problem_store_privateP;
    }

    public static SubLObject infrnc_problem_store_privateP(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$problem_store_privateP;
    }

    public static final SubLObject infrnc_continuableP_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$continuableP;
    }

    public static SubLObject infrnc_continuableP(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$continuableP;
    }

    public static final SubLObject infrnc_browsableP_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$browsableP;
    }

    public static SubLObject infrnc_browsableP(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$browsableP;
    }

    public static final SubLObject infrnc_return_type_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$return_type;
    }

    public static SubLObject infrnc_return_type(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$return_type;
    }

    public static final SubLObject infrnc_answer_language_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$answer_language;
    }

    public static SubLObject infrnc_answer_language(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$answer_language;
    }

    public static final SubLObject infrnc_cache_resultsP_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$cache_resultsP;
    }

    public static SubLObject infrnc_cache_resultsP(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$cache_resultsP;
    }

    public static final SubLObject infrnc_blockingP_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$blockingP;
    }

    public static SubLObject infrnc_blockingP(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$blockingP;
    }

    public static final SubLObject infrnc_max_number_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$max_number;
    }

    public static SubLObject infrnc_max_number(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$max_number;
    }

    public static final SubLObject infrnc_max_time_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$max_time;
    }

    public static SubLObject infrnc_max_time(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$max_time;
    }

    public static final SubLObject infrnc_max_step_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$max_step;
    }

    public static SubLObject infrnc_max_step(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$max_step;
    }

    public static final SubLObject infrnc_mode_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$mode;
    }

    public static SubLObject infrnc_mode(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$mode;
    }

    public static final SubLObject infrnc_forward_max_time_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$forward_max_time;
    }

    public static SubLObject infrnc_forward_max_time(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$forward_max_time;
    }

    public static final SubLObject infrnc_max_proof_depth_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$max_proof_depth;
    }

    public static SubLObject infrnc_max_proof_depth(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$max_proof_depth;
    }

    public static final SubLObject infrnc_max_transformation_depth_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$max_transformation_depth;
    }

    public static SubLObject infrnc_max_transformation_depth(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$max_transformation_depth;
    }

    public static SubLObject infrnc_min_rule_utility(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$min_rule_utility;
    }

    public static final SubLObject infrnc_probably_approximately_done_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$probably_approximately_done;
    }

    public static SubLObject infrnc_probably_approximately_done(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$probably_approximately_done;
    }

    public static final SubLObject infrnc_metrics_template_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$metrics_template;
    }

    public static SubLObject infrnc_metrics_template(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$metrics_template;
    }

    public static final SubLObject infrnc_start_universal_time_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$start_universal_time;
    }

    public static SubLObject infrnc_start_universal_time(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$start_universal_time;
    }

    public static final SubLObject infrnc_start_internal_real_time_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$start_internal_real_time;
    }

    public static SubLObject infrnc_start_internal_real_time(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$start_internal_real_time;
    }

    public static final SubLObject infrnc_end_internal_real_time_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$end_internal_real_time;
    }

    public static SubLObject infrnc_end_internal_real_time(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$end_internal_real_time;
    }

    public static final SubLObject infrnc_pad_internal_real_time_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$pad_internal_real_time;
    }

    public static SubLObject infrnc_pad_internal_real_time(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$pad_internal_real_time;
    }

    public static SubLObject infrnc_hypothesization_time(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$hypothesization_time;
    }

    public static final SubLObject infrnc_cumulative_time_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$cumulative_time;
    }

    public static SubLObject infrnc_cumulative_time(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$cumulative_time;
    }

    public static final SubLObject infrnc_step_count_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$step_count;
    }

    public static SubLObject infrnc_step_count(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$step_count;
    }

    public static final SubLObject infrnc_cumulative_step_count_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$cumulative_step_count;
    }

    public static SubLObject infrnc_cumulative_step_count(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$cumulative_step_count;
    }

    public static final SubLObject infrnc_events_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$events;
    }

    public static SubLObject infrnc_events(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$events;
    }

    public static final SubLObject infrnc_halt_conditions_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$halt_conditions;
    }

    public static SubLObject infrnc_halt_conditions(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$halt_conditions;
    }

    public static final SubLObject infrnc_accumulators_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$accumulators;
    }

    public static SubLObject infrnc_accumulators(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$accumulators;
    }

    public static final SubLObject infrnc_proof_watermark_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$proof_watermark;
    }

    public static SubLObject infrnc_proof_watermark(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$proof_watermark;
    }

    public static final SubLObject infrnc_problem_working_time_data_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$problem_working_time_data;
    }

    public static SubLObject infrnc_problem_working_time_data(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$problem_working_time_data;
    }

    public static final SubLObject infrnc_type_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$type;
    }

    public static SubLObject infrnc_type(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$type;
    }

    public static final SubLObject infrnc_data_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$data;
    }

    public static SubLObject infrnc_data(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$data;
    }

    public static SubLObject infrnc_properties(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$properties;
    }

    public static final SubLObject _csetf_infrnc_suid_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$suid = (value);
    }

    public static SubLObject _csetf_infrnc_suid(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField2(value);
    }

    public static final SubLObject _csetf_infrnc_problem_store_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$problem_store = (value);
    }

    public static SubLObject _csetf_infrnc_problem_store(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField3(value);
    }

    public static final SubLObject _csetf_infrnc_forward_propagate_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$forward_propagate = (value);
    }

    public static SubLObject _csetf_infrnc_forward_propagate(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField4(value);
    }

    public static final SubLObject _csetf_infrnc_input_mt_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$input_mt = (value);
    }

    public static SubLObject _csetf_infrnc_input_mt(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField5(value);
    }

    public static final SubLObject _csetf_infrnc_input_el_query_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$input_el_query = (value);
    }

    public static SubLObject _csetf_infrnc_input_el_query(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField6(value);
    }

    public static final SubLObject _csetf_infrnc_input_non_explanatory_el_query_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$input_non_explanatory_el_query = (value);
    }

    public static SubLObject _csetf_infrnc_input_non_explanatory_el_query(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField7(value);
    }

    public static final SubLObject _csetf_infrnc_input_query_properties_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$input_query_properties = (value);
    }

    public static SubLObject _csetf_infrnc_input_query_properties(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField8(value);
    }

    public static final SubLObject _csetf_infrnc_mt_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$mt = (value);
    }

    public static SubLObject _csetf_infrnc_mt(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField9(value);
    }

    public static final SubLObject _csetf_infrnc_el_query_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$el_query = (value);
    }

    public static SubLObject _csetf_infrnc_el_query(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField10(value);
    }

    public static final SubLObject _csetf_infrnc_el_bindings_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$el_bindings = (value);
    }

    public static SubLObject _csetf_infrnc_el_bindings(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField11(value);
    }

    public static final SubLObject _csetf_infrnc_hl_query_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$hl_query = (value);
    }

    public static SubLObject _csetf_infrnc_hl_query(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField12(value);
    }

    public static final SubLObject _csetf_infrnc_explanatory_subquery_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$explanatory_subquery = (value);
    }

    public static SubLObject _csetf_infrnc_explanatory_subquery(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField13(value);
    }

    public static final SubLObject _csetf_infrnc_non_explanatory_subquery_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$explanatory_subquery = (value);
    }

    public static SubLObject _csetf_infrnc_non_explanatory_subquery(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField14(value);
    }

    public static final SubLObject _csetf_infrnc_free_hl_vars_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$free_hl_vars = (value);
    }

    public static SubLObject _csetf_infrnc_free_hl_vars(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField15(value);
    }

    public static final SubLObject _csetf_infrnc_hypothetical_bindings_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$hypothetical_bindings = (value);
    }

    public static SubLObject _csetf_infrnc_hypothetical_bindings(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField16(value);
    }

    public static final SubLObject _csetf_infrnc_answer_id_index_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$answer_id_index = (value);
    }

    public static SubLObject _csetf_infrnc_answer_id_index(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField17(value);
    }

    public static final SubLObject _csetf_infrnc_answer_bindings_index_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$answer_bindings_index = (value);
    }

    public static SubLObject _csetf_infrnc_answer_bindings_index(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField18(value);
    }

    public static final SubLObject _csetf_infrnc_new_answer_id_start_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$new_answer_id_start = (value);
    }

    public static SubLObject _csetf_infrnc_new_answer_id_start(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField19(value);
    }

    public static final SubLObject _csetf_infrnc_new_answer_justifications_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return (($inference_native) v_object).$new_answer_justifications = (value);
    }

    public static SubLObject _csetf_infrnc_new_answer_justifications(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return v_object.setField20(value);
    }

    public static final SubLObject _csetf_infrnc_status_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$status = value;
    }

    public static SubLObject _csetf_infrnc_status(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$status = value;
    }

    public static final SubLObject _csetf_infrnc_suspend_status_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$suspend_status = value;
    }

    public static SubLObject _csetf_infrnc_suspend_status(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$suspend_status = value;
    }

    public static final SubLObject _csetf_infrnc_root_link_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$root_link = value;
    }

    public static SubLObject _csetf_infrnc_root_link(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$root_link = value;
    }

    public static final SubLObject _csetf_infrnc_relevant_problems_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$relevant_problems = value;
    }

    public static SubLObject _csetf_infrnc_relevant_problems(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$relevant_problems = value;
    }

    public static final SubLObject _csetf_infrnc_strategy_set_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$strategy_set = value;
    }

    public static SubLObject _csetf_infrnc_strategy_set(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$strategy_set = value;
    }

    public static final SubLObject _csetf_infrnc_control_process_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$control_process = value;
    }

    public static SubLObject _csetf_infrnc_control_process(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$control_process = value;
    }

    public static final SubLObject _csetf_infrnc_interrupting_processes_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$interrupting_processes = value;
    }

    public static SubLObject _csetf_infrnc_interrupting_processes(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$interrupting_processes = value;
    }

    public static final SubLObject _csetf_infrnc_max_transformation_depth_reached_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$max_transformation_depth_reached = value;
    }

    public static SubLObject _csetf_infrnc_max_transformation_depth_reached(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$max_transformation_depth_reached = value;
    }

    public static final SubLObject _csetf_infrnc_disjunction_free_el_vars_policy_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$disjunction_free_el_vars_policy = value;
    }

    public static SubLObject _csetf_infrnc_disjunction_free_el_vars_policy(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$disjunction_free_el_vars_policy = value;
    }

    public static final SubLObject _csetf_infrnc_result_uniqueness_criterion_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$result_uniqueness_criterion = value;
    }

    public static SubLObject _csetf_infrnc_result_uniqueness_criterion(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$result_uniqueness_criterion = value;
    }

    public static final SubLObject _csetf_infrnc_allow_hl_predicate_transformationP_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$allow_hl_predicate_transformationP = value;
    }

    public static SubLObject _csetf_infrnc_allow_hl_predicate_transformationP(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$allow_hl_predicate_transformationP = value;
    }

    public static final SubLObject _csetf_infrnc_allow_unbound_predicate_transformationP_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$allow_unbound_predicate_transformationP = value;
    }

    public static SubLObject _csetf_infrnc_allow_unbound_predicate_transformationP(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$allow_unbound_predicate_transformationP = value;
    }

    public static final SubLObject _csetf_infrnc_allow_evaluatable_predicate_transformationP_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$allow_evaluatable_predicate_transformationP = value;
    }

    public static SubLObject _csetf_infrnc_allow_evaluatable_predicate_transformationP(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$allow_evaluatable_predicate_transformationP = value;
    }

    public static final SubLObject _csetf_infrnc_allow_indeterminate_resultsP_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$allow_indeterminate_resultsP = value;
    }

    public static SubLObject _csetf_infrnc_allow_indeterminate_resultsP(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$allow_indeterminate_resultsP = value;
    }

    public static final SubLObject _csetf_infrnc_allowed_rules_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$allowed_rules = value;
    }

    public static SubLObject _csetf_infrnc_allowed_rules(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$allowed_rules = value;
    }

    public static final SubLObject _csetf_infrnc_forbidden_rules_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$forbidden_rules = value;
    }

    public static SubLObject _csetf_infrnc_forbidden_rules(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$forbidden_rules = value;
    }

    public static final SubLObject _csetf_infrnc_allowed_modules_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$allowed_modules = value;
    }

    public static SubLObject _csetf_infrnc_allowed_modules(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$allowed_modules = value;
    }

    public static final SubLObject _csetf_infrnc_allow_abnormality_checkingP_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$allow_abnormality_checkingP = value;
    }

    public static SubLObject _csetf_infrnc_allow_abnormality_checkingP(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$allow_abnormality_checkingP = value;
    }

    public static final SubLObject _csetf_infrnc_transitive_closure_mode_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$transitive_closure_mode = value;
    }

    public static SubLObject _csetf_infrnc_transitive_closure_mode(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$transitive_closure_mode = value;
    }

    public static final SubLObject _csetf_infrnc_problem_store_privateP_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$problem_store_privateP = value;
    }

    public static SubLObject _csetf_infrnc_problem_store_privateP(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$problem_store_privateP = value;
    }

    public static final SubLObject _csetf_infrnc_continuableP_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$continuableP = value;
    }

    public static SubLObject _csetf_infrnc_continuableP(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$continuableP = value;
    }

    public static final SubLObject _csetf_infrnc_browsableP_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$browsableP = value;
    }

    public static SubLObject _csetf_infrnc_browsableP(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$browsableP = value;
    }

    public static final SubLObject _csetf_infrnc_return_type_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$return_type = value;
    }

    public static SubLObject _csetf_infrnc_return_type(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$return_type = value;
    }

    public static final SubLObject _csetf_infrnc_answer_language_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$answer_language = value;
    }

    public static SubLObject _csetf_infrnc_answer_language(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$answer_language = value;
    }

    public static final SubLObject _csetf_infrnc_cache_resultsP_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$cache_resultsP = value;
    }

    public static SubLObject _csetf_infrnc_cache_resultsP(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$cache_resultsP = value;
    }

    public static final SubLObject _csetf_infrnc_blockingP_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$blockingP = value;
    }

    public static SubLObject _csetf_infrnc_blockingP(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$blockingP = value;
    }

    public static final SubLObject _csetf_infrnc_max_number_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$max_number = value;
    }

    public static SubLObject _csetf_infrnc_max_number(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$max_number = value;
    }

    public static final SubLObject _csetf_infrnc_max_time_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$max_time = value;
    }

    public static SubLObject _csetf_infrnc_max_time(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$max_time = value;
    }

    public static final SubLObject _csetf_infrnc_max_step_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$max_step = value;
    }

    public static SubLObject _csetf_infrnc_max_step(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$max_step = value;
    }

    public static final SubLObject _csetf_infrnc_mode_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$mode = value;
    }

    public static SubLObject _csetf_infrnc_mode(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$mode = value;
    }

    public static final SubLObject _csetf_infrnc_forward_max_time_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$forward_max_time = value;
    }

    public static SubLObject _csetf_infrnc_forward_max_time(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$forward_max_time = value;
    }

    public static final SubLObject _csetf_infrnc_max_proof_depth_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$max_proof_depth = value;
    }

    public static SubLObject _csetf_infrnc_max_proof_depth(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$max_proof_depth = value;
    }

    public static final SubLObject _csetf_infrnc_max_transformation_depth_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$max_transformation_depth = value;
    }

    public static SubLObject _csetf_infrnc_max_transformation_depth(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$max_transformation_depth = value;
    }

    public static SubLObject _csetf_infrnc_min_rule_utility(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$min_rule_utility = value;
    }

    public static final SubLObject _csetf_infrnc_probably_approximately_done_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$probably_approximately_done = value;
    }

    public static SubLObject _csetf_infrnc_probably_approximately_done(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$probably_approximately_done = value;
    }

    public static final SubLObject _csetf_infrnc_metrics_template_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$metrics_template = value;
    }

    public static SubLObject _csetf_infrnc_metrics_template(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$metrics_template = value;
    }

    public static final SubLObject _csetf_infrnc_start_universal_time_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$start_universal_time = value;
    }

    public static SubLObject _csetf_infrnc_start_universal_time(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$start_universal_time = value;
    }

    public static final SubLObject _csetf_infrnc_start_internal_real_time_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$start_internal_real_time = value;
    }

    public static SubLObject _csetf_infrnc_start_internal_real_time(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$start_internal_real_time = value;
    }

    public static final SubLObject _csetf_infrnc_end_internal_real_time_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$end_internal_real_time = value;
    }

    public static SubLObject _csetf_infrnc_end_internal_real_time(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$end_internal_real_time = value;
    }

    public static final SubLObject _csetf_infrnc_pad_internal_real_time_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$pad_internal_real_time = value;
    }

    public static SubLObject _csetf_infrnc_pad_internal_real_time(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$pad_internal_real_time = value;
    }

    public static SubLObject _csetf_infrnc_hypothesization_time(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$hypothesization_time = value;
    }

    public static final SubLObject _csetf_infrnc_cumulative_time_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$cumulative_time = value;
    }

    public static SubLObject _csetf_infrnc_cumulative_time(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$cumulative_time = value;
    }

    public static final SubLObject _csetf_infrnc_step_count_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$step_count = value;
    }

    public static SubLObject _csetf_infrnc_step_count(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$step_count = value;
    }

    public static final SubLObject _csetf_infrnc_cumulative_step_count_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$cumulative_step_count = value;
    }

    public static SubLObject _csetf_infrnc_cumulative_step_count(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$cumulative_step_count = value;
    }

    public static final SubLObject _csetf_infrnc_events_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$events = value;
    }

    public static SubLObject _csetf_infrnc_events(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$events = value;
    }

    public static final SubLObject _csetf_infrnc_halt_conditions_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$halt_conditions = value;
    }

    public static SubLObject _csetf_infrnc_halt_conditions(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$halt_conditions = value;
    }

    public static final SubLObject _csetf_infrnc_accumulators_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$accumulators = value;
    }

    public static SubLObject _csetf_infrnc_accumulators(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$accumulators = value;
    }

    public static final SubLObject _csetf_infrnc_proof_watermark_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$proof_watermark = value;
    }

    public static SubLObject _csetf_infrnc_proof_watermark(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$proof_watermark = value;
    }

    public static final SubLObject _csetf_infrnc_problem_working_time_data_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$problem_working_time_data = value;
    }

    public static SubLObject _csetf_infrnc_problem_working_time_data(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$problem_working_time_data = value;
    }

    public static final SubLObject _csetf_infrnc_type_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$type = value;
    }

    public static SubLObject _csetf_infrnc_type(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$type = value;
    }

    public static final SubLObject _csetf_infrnc_data_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_P);
	return ((com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native) (v_object)).$data = value;
    }

    public static SubLObject _csetf_infrnc_data(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$data = value;
    }

    public static SubLObject _csetf_infrnc_properties(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(v_object) : "! inference_datastructures_inference.inference_p(v_object) " + "inference_datastructures_inference.inference_p error :" + v_object;
	return ((inference_datastructures_inference.$inference_native) (v_object)).$properties = value;
    }

    public static final SubLObject make_inference_alt(SubLObject arglist) {
	if (arglist == UNPROVIDED) {
	    arglist = NIL;
	}
	{
	    SubLObject v_new = new com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_native();
	    SubLObject next = NIL;
	    for (next = arglist; NIL != next; next = cddr(next)) {
		{
		    SubLObject current_arg = next.first();
		    SubLObject current_value = cadr(next);
		    SubLObject pcase_var = current_arg;
		    if (pcase_var.eql($SUID)) {
			com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_suid(v_new, current_value);
		    } else {
			if (pcase_var.eql($PROBLEM_STORE)) {
			    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_problem_store(v_new, current_value);
			} else {
			    if (pcase_var.eql($FORWARD_PROPAGATE)) {
				com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_forward_propagate(v_new, current_value);
			    } else {
				if (pcase_var.eql($INPUT_MT)) {
				    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_input_mt(v_new, current_value);
				} else {
				    if (pcase_var.eql($INPUT_EL_QUERY)) {
					com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_input_el_query(v_new, current_value);
				    } else {
					if (pcase_var.eql($INPUT_NON_EXPLANATORY_EL_QUERY)) {
					    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_input_non_explanatory_el_query(v_new, current_value);
					} else {
					    if (pcase_var.eql($INPUT_QUERY_PROPERTIES)) {
						com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_input_query_properties(v_new, current_value);
					    } else {
						if (pcase_var.eql($MT)) {
						    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_mt(v_new, current_value);
						} else {
						    if (pcase_var.eql($EL_QUERY)) {
							com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_el_query(v_new, current_value);
						    } else {
							if (pcase_var.eql($EL_BINDINGS)) {
							    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_el_bindings(v_new, current_value);
							} else {
							    if (pcase_var.eql($HL_QUERY)) {
								com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_hl_query(v_new, current_value);
							    } else {
								if (pcase_var.eql($EXPLANATORY_SUBQUERY)) {
								    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_explanatory_subquery(v_new, current_value);
								} else {
								    if (pcase_var.eql($NON_EXPLANATORY_SUBQUERY)) {
									com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_non_explanatory_subquery(v_new, current_value);
								    } else {
									if (pcase_var.eql($FREE_HL_VARS)) {
									    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_free_hl_vars(v_new, current_value);
									} else {
									    if (pcase_var.eql($HYPOTHETICAL_BINDINGS)) {
										com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_hypothetical_bindings(v_new, current_value);
									    } else {
										if (pcase_var.eql($ANSWER_ID_INDEX)) {
										    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_answer_id_index(v_new, current_value);
										} else {
										    if (pcase_var.eql($ANSWER_BINDINGS_INDEX)) {
											com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_answer_bindings_index(v_new, current_value);
										    } else {
											if (pcase_var.eql($NEW_ANSWER_ID_START)) {
											    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_new_answer_id_start(v_new, current_value);
											} else {
											    if (pcase_var.eql($NEW_ANSWER_JUSTIFICATIONS)) {
												com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_new_answer_justifications(v_new, current_value);
											    } else {
												if (pcase_var.eql($STATUS)) {
												    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_status(v_new, current_value);
												} else {
												    if (pcase_var.eql($SUSPEND_STATUS)) {
													com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_suspend_status(v_new, current_value);
												    } else {
													if (pcase_var.eql($ROOT_LINK)) {
													    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_root_link(v_new, current_value);
													} else {
													    if (pcase_var.eql($RELEVANT_PROBLEMS)) {
														com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_relevant_problems(v_new, current_value);
													    } else {
														if (pcase_var.eql($STRATEGY_SET)) {
														    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_strategy_set(v_new, current_value);
														} else {
														    if (pcase_var.eql($CONTROL_PROCESS)) {
															com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_control_process(v_new, current_value);
														    } else {
															if (pcase_var.eql($INTERRUPTING_PROCESSES)) {
															    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_interrupting_processes(v_new, current_value);
															} else {
															    if (pcase_var.eql($MAX_TRANSFORMATION_DEPTH_REACHED)) {
																com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_transformation_depth_reached(v_new, current_value);
															    } else {
																if (pcase_var.eql($DISJUNCTION_FREE_EL_VARS_POLICY)) {
																    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_disjunction_free_el_vars_policy(v_new, current_value);
																} else {
																    if (pcase_var.eql($RESULT_UNIQUENESS_CRITERION)) {
																	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_result_uniqueness_criterion(v_new, current_value);
																    } else {
																	if (pcase_var.eql($kw223$ALLOW_HL_PREDICATE_TRANSFORMATION_)) {
																	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allow_hl_predicate_transformationP(v_new, current_value);
																	} else {
																	    if (pcase_var.eql($kw224$ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_)) {
																		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allow_unbound_predicate_transformationP(v_new, current_value);
																	    } else {
																		if (pcase_var.eql($kw225$ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_)) {
																		    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allow_evaluatable_predicate_transformationP(v_new,
																			    current_value);
																		} else {
																		    if (pcase_var.eql($kw226$ALLOW_INDETERMINATE_RESULTS_)) {
																			com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allow_indeterminate_resultsP(v_new, current_value);
																		    } else {
																			if (pcase_var.eql($ALLOWED_RULES)) {
																			    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allowed_rules(v_new, current_value);
																			} else {
																			    if (pcase_var.eql($FORBIDDEN_RULES)) {
																				com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_forbidden_rules(v_new, current_value);
																			    } else {
																				if (pcase_var.eql($ALLOWED_MODULES)) {
																				    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allowed_modules(v_new, current_value);
																				} else {
																				    if (pcase_var.eql($kw230$ALLOW_ABNORMALITY_CHECKING_)) {
																					com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allow_abnormality_checkingP(v_new,
																						current_value);
																				    } else {
																					if (pcase_var.eql($TRANSITIVE_CLOSURE_MODE)) {
																					    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_transitive_closure_mode(v_new,
																						    current_value);
																					} else {
																					    if (pcase_var.eql($kw232$PROBLEM_STORE_PRIVATE_)) {
																						com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_problem_store_privateP(v_new,
																							current_value);
																					    } else {
																						if (pcase_var.eql($CONTINUABLE_)) {
																						    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_continuableP(v_new,
																							    current_value);
																						} else {
																						    if (pcase_var.eql($BROWSABLE_)) {
																							com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_browsableP(v_new,
																								current_value);
																						    } else {
																							if (pcase_var.eql($RETURN_TYPE)) {
																							    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_return_type(v_new,
																								    current_value);
																							} else {
																							    if (pcase_var.eql($ANSWER_LANGUAGE)) {
																								com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_answer_language(
																									v_new, current_value);
																							    } else {
																								if (pcase_var.eql($kw237$CACHE_RESULTS_)) {
																								    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_cache_resultsP(
																									    v_new, current_value);
																								} else {
																								    if (pcase_var.eql($BLOCKING_)) {
																									com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_blockingP(
																										v_new, current_value);
																								    } else {
																									if (pcase_var.eql($MAX_NUMBER)) {
																									    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_number(
																										    v_new, current_value);
																									} else {
																									    if (pcase_var.eql($MAX_TIME)) {
																										com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_time(
																											v_new, current_value);
																									    } else {
																										if (pcase_var.eql($MAX_STEP)) {
																										    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_step(
																											    v_new, current_value);
																										} else {
																										    if (pcase_var.eql($MODE)) {
																											com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_mode(
																												v_new, current_value);
																										    } else {
																											if (pcase_var.eql($FORWARD_MAX_TIME)) {
																											    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_forward_max_time(
																												    v_new, current_value);
																											} else {
																											    if (pcase_var.eql($MAX_PROOF_DEPTH)) {
																												com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_proof_depth(
																													v_new, current_value);
																											    } else {
																												if (pcase_var.eql($MAX_TRANSFORMATION_DEPTH)) {
																												    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_transformation_depth(
																													    v_new, current_value);
																												} else {
																												    if (pcase_var.eql($PROBABLY_APPROXIMATELY_DONE)) {
																													com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_probably_approximately_done(
																														v_new, current_value);
																												    } else {
																													if (pcase_var.eql($METRICS_TEMPLATE)) {
																													    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_metrics_template(
																														    v_new, current_value);
																													} else {
																													    if (pcase_var.eql($START_UNIVERSAL_TIME)) {
																														com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_start_universal_time(
																															v_new, current_value);
																													    } else {
																														if (pcase_var.eql($START_INTERNAL_REAL_TIME)) {
																														    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_start_internal_real_time(
																															    v_new, current_value);
																														} else {
																														    if (pcase_var.eql($END_INTERNAL_REAL_TIME)) {
																															com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_end_internal_real_time(
																																v_new, current_value);
																														    } else {
																															if (pcase_var.eql($PAD_INTERNAL_REAL_TIME)) {
																															    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_pad_internal_real_time(
																																    v_new, current_value);
																															} else {
																															    if (pcase_var.eql($CUMULATIVE_TIME)) {
																																com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_cumulative_time(
																																	v_new, current_value);
																															    } else {
																																if (pcase_var.eql($STEP_COUNT)) {
																																    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_step_count(
																																	    v_new, current_value);
																																} else {
																																    if (pcase_var.eql(
																																	    $CUMULATIVE_STEP_COUNT)) {
																																	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_cumulative_step_count(
																																		v_new, current_value);
																																    } else {
																																	if (pcase_var.eql($EVENTS)) {
																																	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_events(
																																		    v_new, current_value);
																																	} else {
																																	    if (pcase_var.eql(
																																		    $HALT_CONDITIONS)) {
																																		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_halt_conditions(
																																			v_new,
																																			current_value);
																																	    } else {
																																		if (pcase_var.eql(
																																			$ACCUMULATORS)) {
																																		    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_accumulators(
																																			    v_new,
																																			    current_value);
																																		} else {
																																		    if (pcase_var.eql(
																																			    $PROOF_WATERMARK)) {
																																			com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_proof_watermark(
																																				v_new,
																																				current_value);
																																		    } else {
																																			if (pcase_var.eql(
																																				$PROBLEM_WORKING_TIME_DATA)) {
																																			    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_problem_working_time_data(
																																				    v_new,
																																				    current_value);
																																			} else {
																																			    if (pcase_var.eql(
																																				    $TYPE)) {
																																				com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_type(
																																					v_new,
																																					current_value);
																																			    } else {
																																				if (pcase_var.eql(
																																					$DATA)) {
																																				    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_data(
																																					    v_new,
																																					    current_value);
																																				} else {
																																				    Errors.error(
																																					    $str_alt262$Invalid_slot__S_for_construction_,
																																					    current_arg);
																																				}
																																			    }
																																			}
																																		    }
																																		}
																																	    }
																																	}
																																    }
																																}
																															    }
																															}
																														    }
																														}
																													    }
																													}
																												    }
																												}
																											    }
																											}
																										    }
																										}
																									    }
																									}
																								    }
																								}
																							    }
																							}
																						    }
																						}
																					    }
																					}
																				    }
																				}
																			    }
																			}
																		    }
																		}
																	    }
																	}
																    }
																}
															    }
															}
														    }
														}
													    }
													}
												    }
												}
											    }
											}
										    }
										}
									    }
									}
								    }
								}
							    }
							}
						    }
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	    return v_new;
	}
    }

    public static SubLObject make_inference(SubLObject arglist) {
	if (arglist == UNPROVIDED) {
	    arglist = NIL;
	}
	final SubLObject v_new = new inference_datastructures_inference.$inference_native();
	SubLObject next;
	SubLObject current_arg;
	SubLObject current_value;
	SubLObject pcase_var;
	for (next = NIL, next = arglist; NIL != next; next = cddr(next)) {
	    current_arg = next.first();
	    current_value = cadr(next);
	    pcase_var = current_arg;
	    if (pcase_var.eql($SUID)) {
		inference_datastructures_inference._csetf_infrnc_suid(v_new, current_value);
	    } else if (pcase_var.eql($PROBLEM_STORE)) {
		inference_datastructures_inference._csetf_infrnc_problem_store(v_new, current_value);
	    } else if (pcase_var.eql($FORWARD_PROPAGATE)) {
		inference_datastructures_inference._csetf_infrnc_forward_propagate(v_new, current_value);
	    } else if (pcase_var.eql($INPUT_MT)) {
		inference_datastructures_inference._csetf_infrnc_input_mt(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$INPUT_EL_QUERY)) {
		inference_datastructures_inference._csetf_infrnc_input_el_query(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$INPUT_NON_EXPLANATORY_EL_QUERY)) {
		inference_datastructures_inference._csetf_infrnc_input_non_explanatory_el_query(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$INPUT_QUERY_PROPERTIES)) {
		inference_datastructures_inference._csetf_infrnc_input_query_properties(v_new, current_value);
	    } else if (pcase_var.eql($MT)) {
		inference_datastructures_inference._csetf_infrnc_mt(v_new, current_value);
	    } else if (pcase_var.eql($EL_QUERY)) {
		inference_datastructures_inference._csetf_infrnc_el_query(v_new, current_value);
	    } else if (pcase_var.eql($EL_BINDINGS)) {
		inference_datastructures_inference._csetf_infrnc_el_bindings(v_new, current_value);
	    } else if (pcase_var.eql($HL_QUERY)) {
		inference_datastructures_inference._csetf_infrnc_hl_query(v_new, current_value);
	    } else if (pcase_var.eql($EXPLANATORY_SUBQUERY)) {
		inference_datastructures_inference._csetf_infrnc_explanatory_subquery(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$NON_EXPLANATORY_SUBQUERY)) {
		inference_datastructures_inference._csetf_infrnc_non_explanatory_subquery(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$FREE_HL_VARS)) {
		inference_datastructures_inference._csetf_infrnc_free_hl_vars(v_new, current_value);
	    } else if (pcase_var.eql($HYPOTHETICAL_BINDINGS)) {
		inference_datastructures_inference._csetf_infrnc_hypothetical_bindings(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$ANSWER_ID_INDEX)) {
		inference_datastructures_inference._csetf_infrnc_answer_id_index(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$ANSWER_BINDINGS_INDEX)) {
		inference_datastructures_inference._csetf_infrnc_answer_bindings_index(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$NEW_ANSWER_ID_START)) {
		inference_datastructures_inference._csetf_infrnc_new_answer_id_start(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$NEW_ANSWER_JUSTIFICATIONS)) {
		inference_datastructures_inference._csetf_infrnc_new_answer_justifications(v_new, current_value);
	    } else if (pcase_var.eql($STATUS)) {
		inference_datastructures_inference._csetf_infrnc_status(v_new, current_value);
	    } else if (pcase_var.eql($SUSPEND_STATUS)) {
		inference_datastructures_inference._csetf_infrnc_suspend_status(v_new, current_value);
	    } else if (pcase_var.eql($ROOT_LINK)) {
		inference_datastructures_inference._csetf_infrnc_root_link(v_new, current_value);
	    } else if (pcase_var.eql($RELEVANT_PROBLEMS)) {
		inference_datastructures_inference._csetf_infrnc_relevant_problems(v_new, current_value);
	    } else if (pcase_var.eql($STRATEGY_SET)) {
		inference_datastructures_inference._csetf_infrnc_strategy_set(v_new, current_value);
	    } else if (pcase_var.eql($CONTROL_PROCESS)) {
		inference_datastructures_inference._csetf_infrnc_control_process(v_new, current_value);
	    } else if (pcase_var.eql($INTERRUPTING_PROCESSES)) {
		inference_datastructures_inference._csetf_infrnc_interrupting_processes(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$MAX_TRANSFORMATION_DEPTH_REACHED)) {
		inference_datastructures_inference._csetf_infrnc_max_transformation_depth_reached(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$DISJUNCTION_FREE_EL_VARS_POLICY)) {
		inference_datastructures_inference._csetf_infrnc_disjunction_free_el_vars_policy(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$RESULT_UNIQUENESS_CRITERION)) {
		inference_datastructures_inference._csetf_infrnc_result_uniqueness_criterion(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$kw233$ALLOW_HL_PREDICATE_TRANSFORMATION_)) {
		inference_datastructures_inference._csetf_infrnc_allow_hl_predicate_transformationP(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$kw234$ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_)) {
		inference_datastructures_inference._csetf_infrnc_allow_unbound_predicate_transformationP(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$kw235$ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_)) {
		inference_datastructures_inference._csetf_infrnc_allow_evaluatable_predicate_transformationP(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$kw236$ALLOW_INDETERMINATE_RESULTS_)) {
		inference_datastructures_inference._csetf_infrnc_allow_indeterminate_resultsP(v_new, current_value);
	    } else if (pcase_var.eql($ALLOWED_RULES)) {
		inference_datastructures_inference._csetf_infrnc_allowed_rules(v_new, current_value);
	    } else if (pcase_var.eql($FORBIDDEN_RULES)) {
		inference_datastructures_inference._csetf_infrnc_forbidden_rules(v_new, current_value);
	    } else if (pcase_var.eql($ALLOWED_MODULES)) {
		inference_datastructures_inference._csetf_infrnc_allowed_modules(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$kw240$ALLOW_ABNORMALITY_CHECKING_)) {
		inference_datastructures_inference._csetf_infrnc_allow_abnormality_checkingP(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$TRANSITIVE_CLOSURE_MODE)) {
		inference_datastructures_inference._csetf_infrnc_transitive_closure_mode(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$kw242$PROBLEM_STORE_PRIVATE_)) {
		inference_datastructures_inference._csetf_infrnc_problem_store_privateP(v_new, current_value);
	    } else if (pcase_var.eql($CONTINUABLE_)) {
		inference_datastructures_inference._csetf_infrnc_continuableP(v_new, current_value);
	    } else if (pcase_var.eql($BROWSABLE_)) {
		inference_datastructures_inference._csetf_infrnc_browsableP(v_new, current_value);
	    } else if (pcase_var.eql($RETURN_TYPE)) {
		inference_datastructures_inference._csetf_infrnc_return_type(v_new, current_value);
	    } else if (pcase_var.eql($ANSWER_LANGUAGE)) {
		inference_datastructures_inference._csetf_infrnc_answer_language(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$kw247$CACHE_RESULTS_)) {
		inference_datastructures_inference._csetf_infrnc_cache_resultsP(v_new, current_value);
	    } else if (pcase_var.eql($BLOCKING_)) {
		inference_datastructures_inference._csetf_infrnc_blockingP(v_new, current_value);
	    } else if (pcase_var.eql($MAX_NUMBER)) {
		inference_datastructures_inference._csetf_infrnc_max_number(v_new, current_value);
	    } else if (pcase_var.eql($MAX_TIME)) {
		inference_datastructures_inference._csetf_infrnc_max_time(v_new, current_value);
	    } else if (pcase_var.eql($MAX_STEP)) {
		inference_datastructures_inference._csetf_infrnc_max_step(v_new, current_value);
	    } else if (pcase_var.eql($MODE)) {
		inference_datastructures_inference._csetf_infrnc_mode(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$FORWARD_MAX_TIME)) {
		inference_datastructures_inference._csetf_infrnc_forward_max_time(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$MAX_PROOF_DEPTH)) {
		inference_datastructures_inference._csetf_infrnc_max_proof_depth(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$MAX_TRANSFORMATION_DEPTH)) {
		inference_datastructures_inference._csetf_infrnc_max_transformation_depth(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$MIN_RULE_UTILITY)) {
		inference_datastructures_inference._csetf_infrnc_min_rule_utility(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$PROBABLY_APPROXIMATELY_DONE)) {
		inference_datastructures_inference._csetf_infrnc_probably_approximately_done(v_new, current_value);
	    } else if (pcase_var.eql($METRICS_TEMPLATE)) {
		inference_datastructures_inference._csetf_infrnc_metrics_template(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$START_UNIVERSAL_TIME)) {
		inference_datastructures_inference._csetf_infrnc_start_universal_time(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$START_INTERNAL_REAL_TIME)) {
		inference_datastructures_inference._csetf_infrnc_start_internal_real_time(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$END_INTERNAL_REAL_TIME)) {
		inference_datastructures_inference._csetf_infrnc_end_internal_real_time(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$PAD_INTERNAL_REAL_TIME)) {
		inference_datastructures_inference._csetf_infrnc_pad_internal_real_time(v_new, current_value);
	    } else if (pcase_var.eql($HYPOTHESIZATION_TIME)) {
		inference_datastructures_inference._csetf_infrnc_hypothesization_time(v_new, current_value);
	    } else if (pcase_var.eql($CUMULATIVE_TIME)) {
		inference_datastructures_inference._csetf_infrnc_cumulative_time(v_new, current_value);
	    } else if (pcase_var.eql($STEP_COUNT)) {
		inference_datastructures_inference._csetf_infrnc_step_count(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$CUMULATIVE_STEP_COUNT)) {
		inference_datastructures_inference._csetf_infrnc_cumulative_step_count(v_new, current_value);
	    } else if (pcase_var.eql($EVENTS)) {
		inference_datastructures_inference._csetf_infrnc_events(v_new, current_value);
	    } else if (pcase_var.eql($HALT_CONDITIONS)) {
		inference_datastructures_inference._csetf_infrnc_halt_conditions(v_new, current_value);
	    } else if (pcase_var.eql($ACCUMULATORS)) {
		inference_datastructures_inference._csetf_infrnc_accumulators(v_new, current_value);
	    } else if (pcase_var.eql($PROOF_WATERMARK)) {
		inference_datastructures_inference._csetf_infrnc_proof_watermark(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$PROBLEM_WORKING_TIME_DATA)) {
		inference_datastructures_inference._csetf_infrnc_problem_working_time_data(v_new, current_value);
	    } else if (pcase_var.eql($TYPE)) {
		inference_datastructures_inference._csetf_infrnc_type(v_new, current_value);
	    } else if (pcase_var.eql($DATA)) {
		inference_datastructures_inference._csetf_infrnc_data(v_new, current_value);
	    } else if (pcase_var.eql($PROPERTIES)) {
		inference_datastructures_inference._csetf_infrnc_properties(v_new, current_value);
	    } else {
		Errors.error(inference_datastructures_inference.$str275$Invalid_slot__S_for_construction_, current_arg);
	    }

	}
	return v_new;
    }

    public static SubLObject visit_defstruct_inference(final SubLObject obj, final SubLObject visitor_fn) {
	funcall(visitor_fn, obj, $BEGIN, inference_datastructures_inference.MAKE_INFERENCE, inference_datastructures_inference.$int$71);
	funcall(visitor_fn, obj, $SLOT, $SUID, inference_datastructures_inference.infrnc_suid(obj));
	funcall(visitor_fn, obj, $SLOT, $PROBLEM_STORE, inference_datastructures_inference.infrnc_problem_store(obj));
	funcall(visitor_fn, obj, $SLOT, $FORWARD_PROPAGATE, inference_datastructures_inference.infrnc_forward_propagate(obj));
	funcall(visitor_fn, obj, $SLOT, $INPUT_MT, inference_datastructures_inference.infrnc_input_mt(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$INPUT_EL_QUERY, inference_datastructures_inference.infrnc_input_el_query(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$INPUT_NON_EXPLANATORY_EL_QUERY, inference_datastructures_inference.infrnc_input_non_explanatory_el_query(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$INPUT_QUERY_PROPERTIES, inference_datastructures_inference.infrnc_input_query_properties(obj));
	funcall(visitor_fn, obj, $SLOT, $MT, inference_datastructures_inference.infrnc_mt(obj));
	funcall(visitor_fn, obj, $SLOT, $EL_QUERY, inference_datastructures_inference.infrnc_el_query(obj));
	funcall(visitor_fn, obj, $SLOT, $EL_BINDINGS, inference_datastructures_inference.infrnc_el_bindings(obj));
	funcall(visitor_fn, obj, $SLOT, $HL_QUERY, inference_datastructures_inference.infrnc_hl_query(obj));
	funcall(visitor_fn, obj, $SLOT, $EXPLANATORY_SUBQUERY, inference_datastructures_inference.infrnc_explanatory_subquery(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$NON_EXPLANATORY_SUBQUERY, inference_datastructures_inference.infrnc_non_explanatory_subquery(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$FREE_HL_VARS, inference_datastructures_inference.infrnc_free_hl_vars(obj));
	funcall(visitor_fn, obj, $SLOT, $HYPOTHETICAL_BINDINGS, inference_datastructures_inference.infrnc_hypothetical_bindings(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$ANSWER_ID_INDEX, inference_datastructures_inference.infrnc_answer_id_index(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$ANSWER_BINDINGS_INDEX, inference_datastructures_inference.infrnc_answer_bindings_index(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$NEW_ANSWER_ID_START, inference_datastructures_inference.infrnc_new_answer_id_start(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$NEW_ANSWER_JUSTIFICATIONS, inference_datastructures_inference.infrnc_new_answer_justifications(obj));
	funcall(visitor_fn, obj, $SLOT, $STATUS, inference_datastructures_inference.infrnc_status(obj));
	funcall(visitor_fn, obj, $SLOT, $SUSPEND_STATUS, inference_datastructures_inference.infrnc_suspend_status(obj));
	funcall(visitor_fn, obj, $SLOT, $ROOT_LINK, inference_datastructures_inference.infrnc_root_link(obj));
	funcall(visitor_fn, obj, $SLOT, $RELEVANT_PROBLEMS, inference_datastructures_inference.infrnc_relevant_problems(obj));
	funcall(visitor_fn, obj, $SLOT, $STRATEGY_SET, inference_datastructures_inference.infrnc_strategy_set(obj));
	funcall(visitor_fn, obj, $SLOT, $CONTROL_PROCESS, inference_datastructures_inference.infrnc_control_process(obj));
	funcall(visitor_fn, obj, $SLOT, $INTERRUPTING_PROCESSES, inference_datastructures_inference.infrnc_interrupting_processes(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$MAX_TRANSFORMATION_DEPTH_REACHED, inference_datastructures_inference.infrnc_max_transformation_depth_reached(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$DISJUNCTION_FREE_EL_VARS_POLICY, inference_datastructures_inference.infrnc_disjunction_free_el_vars_policy(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$RESULT_UNIQUENESS_CRITERION, inference_datastructures_inference.infrnc_result_uniqueness_criterion(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$kw233$ALLOW_HL_PREDICATE_TRANSFORMATION_, inference_datastructures_inference.infrnc_allow_hl_predicate_transformationP(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$kw234$ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_, inference_datastructures_inference.infrnc_allow_unbound_predicate_transformationP(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$kw235$ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_, inference_datastructures_inference.infrnc_allow_evaluatable_predicate_transformationP(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$kw236$ALLOW_INDETERMINATE_RESULTS_, inference_datastructures_inference.infrnc_allow_indeterminate_resultsP(obj));
	funcall(visitor_fn, obj, $SLOT, $ALLOWED_RULES, inference_datastructures_inference.infrnc_allowed_rules(obj));
	funcall(visitor_fn, obj, $SLOT, $FORBIDDEN_RULES, inference_datastructures_inference.infrnc_forbidden_rules(obj));
	funcall(visitor_fn, obj, $SLOT, $ALLOWED_MODULES, inference_datastructures_inference.infrnc_allowed_modules(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$kw240$ALLOW_ABNORMALITY_CHECKING_, inference_datastructures_inference.infrnc_allow_abnormality_checkingP(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$TRANSITIVE_CLOSURE_MODE, inference_datastructures_inference.infrnc_transitive_closure_mode(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$kw242$PROBLEM_STORE_PRIVATE_, inference_datastructures_inference.infrnc_problem_store_privateP(obj));
	funcall(visitor_fn, obj, $SLOT, $CONTINUABLE_, inference_datastructures_inference.infrnc_continuableP(obj));
	funcall(visitor_fn, obj, $SLOT, $BROWSABLE_, inference_datastructures_inference.infrnc_browsableP(obj));
	funcall(visitor_fn, obj, $SLOT, $RETURN_TYPE, inference_datastructures_inference.infrnc_return_type(obj));
	funcall(visitor_fn, obj, $SLOT, $ANSWER_LANGUAGE, inference_datastructures_inference.infrnc_answer_language(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$kw247$CACHE_RESULTS_, inference_datastructures_inference.infrnc_cache_resultsP(obj));
	funcall(visitor_fn, obj, $SLOT, $BLOCKING_, inference_datastructures_inference.infrnc_blockingP(obj));
	funcall(visitor_fn, obj, $SLOT, $MAX_NUMBER, inference_datastructures_inference.infrnc_max_number(obj));
	funcall(visitor_fn, obj, $SLOT, $MAX_TIME, inference_datastructures_inference.infrnc_max_time(obj));
	funcall(visitor_fn, obj, $SLOT, $MAX_STEP, inference_datastructures_inference.infrnc_max_step(obj));
	funcall(visitor_fn, obj, $SLOT, $MODE, inference_datastructures_inference.infrnc_mode(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$FORWARD_MAX_TIME, inference_datastructures_inference.infrnc_forward_max_time(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$MAX_PROOF_DEPTH, inference_datastructures_inference.infrnc_max_proof_depth(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$MAX_TRANSFORMATION_DEPTH, inference_datastructures_inference.infrnc_max_transformation_depth(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$MIN_RULE_UTILITY, inference_datastructures_inference.infrnc_min_rule_utility(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$PROBABLY_APPROXIMATELY_DONE, inference_datastructures_inference.infrnc_probably_approximately_done(obj));
	funcall(visitor_fn, obj, $SLOT, $METRICS_TEMPLATE, inference_datastructures_inference.infrnc_metrics_template(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$START_UNIVERSAL_TIME, inference_datastructures_inference.infrnc_start_universal_time(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$START_INTERNAL_REAL_TIME, inference_datastructures_inference.infrnc_start_internal_real_time(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$END_INTERNAL_REAL_TIME, inference_datastructures_inference.infrnc_end_internal_real_time(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$PAD_INTERNAL_REAL_TIME, inference_datastructures_inference.infrnc_pad_internal_real_time(obj));
	funcall(visitor_fn, obj, $SLOT, $HYPOTHESIZATION_TIME, inference_datastructures_inference.infrnc_hypothesization_time(obj));
	funcall(visitor_fn, obj, $SLOT, $CUMULATIVE_TIME, inference_datastructures_inference.infrnc_cumulative_time(obj));
	funcall(visitor_fn, obj, $SLOT, $STEP_COUNT, inference_datastructures_inference.infrnc_step_count(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$CUMULATIVE_STEP_COUNT, inference_datastructures_inference.infrnc_cumulative_step_count(obj));
	funcall(visitor_fn, obj, $SLOT, $EVENTS, inference_datastructures_inference.infrnc_events(obj));
	funcall(visitor_fn, obj, $SLOT, $HALT_CONDITIONS, inference_datastructures_inference.infrnc_halt_conditions(obj));
	funcall(visitor_fn, obj, $SLOT, $ACCUMULATORS, inference_datastructures_inference.infrnc_accumulators(obj));
	funcall(visitor_fn, obj, $SLOT, $PROOF_WATERMARK, inference_datastructures_inference.infrnc_proof_watermark(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$PROBLEM_WORKING_TIME_DATA, inference_datastructures_inference.infrnc_problem_working_time_data(obj));
	funcall(visitor_fn, obj, $SLOT, $TYPE, inference_datastructures_inference.infrnc_type(obj));
	funcall(visitor_fn, obj, $SLOT, $DATA, inference_datastructures_inference.infrnc_data(obj));
	funcall(visitor_fn, obj, $SLOT, $PROPERTIES, inference_datastructures_inference.infrnc_properties(obj));
	funcall(visitor_fn, obj, $END, inference_datastructures_inference.MAKE_INFERENCE, inference_datastructures_inference.$int$71);
	return obj;
    }

    public static SubLObject visit_defstruct_object_inference_method(final SubLObject obj, final SubLObject visitor_fn) {
	return inference_datastructures_inference.visit_defstruct_inference(obj, visitor_fn);
    }

    public static final SubLObject valid_inference_p_alt(SubLObject v_object) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(v_object)) && (NIL == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_invalid_p(v_object)));
    }

    public static SubLObject valid_inference_p(final SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_p(v_object)) && (NIL == inference_datastructures_inference.inference_invalid_p(v_object)));
    }

    public static final SubLObject invalid_inference_p_alt(SubLObject v_object) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(v_object)) && (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_invalid_p(v_object)));
    }

    public static SubLObject invalid_inference_p(final SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_p(v_object)) && (NIL != inference_datastructures_inference.inference_invalid_p(v_object)));
    }

    public static final SubLObject inference_invalid_p_alt(SubLObject inference) {
	return eq($DEAD, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_status(inference));
    }

    public static SubLObject inference_invalid_p(final SubLObject inference) {
	return eq($DEAD, inference_datastructures_inference.inference_status(inference));
    }

    public static final SubLObject print_inference_alt(SubLObject v_object, SubLObject stream, SubLObject depth) {
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_invalid_p(v_object)) {
	    format(stream, $str_alt264$_Invalid_INFERENCE__s_, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_suid(v_object));
	} else {
	    format(stream, $str_alt265$_INFERENCE__a__a__a__a_in__a_,
		    new SubLObject[] { inference_datastructures_problem_store.problem_store_suid(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store(v_object)),
			    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_suid(v_object), com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_status(v_object),
			    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_input_el_query(v_object), com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_input_mt(v_object) });
	}
	return NIL;
    }

    public static SubLObject print_inference(final SubLObject v_object, final SubLObject stream, final SubLObject depth) {
	if (NIL != inference_datastructures_inference.inference_invalid_p(v_object)) {
	    format(stream, inference_datastructures_inference.$str282$_Invalid_INFERENCE__s_, inference_datastructures_inference.infrnc_suid(v_object));
	} else {
	    format(stream, inference_datastructures_inference.$str283$_INFERENCE__a__a__a__s_in__s_, new SubLObject[] { inference_datastructures_problem_store.problem_store_suid(inference_datastructures_inference.inference_problem_store(v_object)),
		    inference_datastructures_inference.inference_suid(v_object), inference_datastructures_inference.inference_status(v_object), inference_datastructures_inference.inference_input_el_query(v_object), inference_datastructures_inference.inference_input_mt(v_object) });
	}
	return NIL;
    }

    public static final SubLObject sxhash_inference_method_alt(SubLObject v_object) {
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_suid(v_object);
    }

    public static SubLObject sxhash_inference_method(final SubLObject v_object) {
	return inference_datastructures_inference.infrnc_suid(v_object);
    }

    public static final SubLObject new_inference_p_alt(SubLObject v_object) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(v_object)) && ($NEW == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_status(v_object)));
    }

    public static SubLObject new_inference_p(final SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_p(v_object)) && ($NEW == inference_datastructures_inference.inference_status(v_object)));
    }

    public static final SubLObject prepared_inference_p_alt(SubLObject v_object) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(v_object)) && ($PREPARED == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_status(v_object)));
    }

    public static SubLObject prepared_inference_p(final SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_p(v_object)) && ($PREPARED == inference_datastructures_inference.inference_status(v_object)));
    }

    public static final SubLObject ready_inference_p_alt(SubLObject v_object) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(v_object)) && ($READY == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_status(v_object)));
    }

    public static SubLObject ready_inference_p(final SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_p(v_object)) && ($READY == inference_datastructures_inference.inference_status(v_object)));
    }

    public static final SubLObject running_inference_p_alt(SubLObject v_object) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(v_object)) && ($RUNNING == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_status(v_object)));
    }

    public static SubLObject running_inference_p(final SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_p(v_object)) && ($RUNNING == inference_datastructures_inference.inference_status(v_object)));
    }

    public static final SubLObject suspended_inference_p_alt(SubLObject v_object) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(v_object)) && ($SUSPENDED == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_status(v_object)));
    }

    public static SubLObject suspended_inference_p(final SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_p(v_object)) && ($SUSPENDED == inference_datastructures_inference.inference_status(v_object)));
    }

    public static final SubLObject continuable_inference_p_alt(SubLObject v_object) {
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(v_object)) {
	    {
		SubLObject status = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_status(v_object);
		if (NIL != inference_datastructures_enumerated_types.continuable_inference_status_p(status)) {
		    if ($SUSPENDED == status) {
			if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_continuableP(v_object)) {
			    {
				SubLObject suspend_status = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_suspend_status(v_object);
				return inference_datastructures_enumerated_types.continuable_inference_suspend_status_p(suspend_status);
			    }
			}
		    } else {
			return T;
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject continuable_inference_p(final SubLObject v_object) {
	if (NIL != inference_datastructures_inference.inference_p(v_object)) {
	    final SubLObject status = inference_datastructures_inference.inference_status(v_object);
	    if (NIL != inference_datastructures_enumerated_types.continuable_inference_status_p(status)) {
		if ($SUSPENDED != status) {
		    return T;
		}
		if (NIL != inference_datastructures_inference.inference_continuableP(v_object)) {
		    final SubLObject suspend_status = inference_datastructures_inference.inference_suspend_status(v_object);
		    return inference_datastructures_enumerated_types.continuable_inference_suspend_status_p(suspend_status);
		}
	    }
	}
	return NIL;
    }

    public static final SubLObject exhausted_inference_p_alt(SubLObject v_object) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.suspended_inference_p(v_object))
		&& (NIL != inference_datastructures_enumerated_types.exhausted_inference_suspend_status_p(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_suspend_status(v_object))));
    }

    public static SubLObject exhausted_inference_p(final SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_inference.suspended_inference_p(v_object)) && (NIL != inference_datastructures_enumerated_types.exhausted_inference_suspend_status_p(inference_datastructures_inference.inference_suspend_status(v_object))));
    }

    public static final SubLObject do_inference_relevant_problems_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt272);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject problem_var = NIL;
		    SubLObject inference = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt272);
		    problem_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt272);
		    inference = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    return listS(DO_SET, list(problem_var, list(INFERENCE_RELEVANT_PROBLEMS, inference)), append(body, NIL));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt272);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject do_inference_relevant_problems(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list290);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject problem_var = NIL;
	SubLObject inference = NIL;
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list290);
	problem_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list290);
	inference = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    return listS(DO_SET, list(problem_var, list(inference_datastructures_inference.INFERENCE_RELEVANT_PROBLEMS, inference)), append(body, NIL));
	}
	cdestructuring_bind_error(datum, inference_datastructures_inference.$list290);
	return NIL;
    }

    public static final SubLObject do_inference_new_answer_justifications_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt275);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject just_var = NIL;
		    SubLObject inference = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt275);
		    just_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt275);
		    inference = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    return listS(DO_QUEUE_ELEMENTS, list(just_var, list(INFERENCE_NEW_ANSWER_JUSTIFICATIONS, inference)), append(body, NIL));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt275);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject do_inference_new_answer_justifications(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list293);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject just_var = NIL;
	SubLObject inference = NIL;
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list293);
	just_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list293);
	inference = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    return listS(inference_datastructures_inference.DO_QUEUE_ELEMENTS, list(just_var, list(inference_datastructures_inference.INFERENCE_NEW_ANSWER_JUSTIFICATIONS, inference)), append(body, NIL));
	}
	cdestructuring_bind_error(datum, inference_datastructures_inference.$list293);
	return NIL;
    }

    public static final SubLObject do_inference_new_answers_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt278);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject answer_var = NIL;
		    SubLObject inference = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt278);
		    answer_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt278);
		    inference = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    SubLObject start_id = $sym279$START_ID;
			    SubLObject end_id = $sym280$END_ID;
			    SubLObject id = $sym281$ID;
			    SubLObject inf = $sym282$INF;
			    return list(CLET, list(list(inf, inference), list(start_id, list(INFERENCE_NEW_ANSWER_ID_START, inference)), list(end_id, list(INFERENCE_NEXT_NEW_ANSWER_ID, inference))),
				    list(CDO, list(list(id, start_id, list($sym287$1_, id))), list(list($sym288$__, id, end_id)), listS(CLET, list(list(answer_var, list(FIND_INFERENCE_ANSWER_BY_ID, inf, id))), append(body, NIL))));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt278);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject do_inference_new_answers(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list296);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject answer_var = NIL;
	SubLObject inference = NIL;
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list296);
	answer_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list296);
	inference = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    final SubLObject start_id = inference_datastructures_inference.$sym297$START_ID;
	    final SubLObject end_id = inference_datastructures_inference.$sym298$END_ID;
	    final SubLObject id = inference_datastructures_inference.$sym299$ID;
	    final SubLObject inf = inference_datastructures_inference.$sym300$INF;
	    return list(CLET, list(list(inf, inference), list(start_id, list(inference_datastructures_inference.INFERENCE_NEW_ANSWER_ID_START, inference)), list(end_id, list(inference_datastructures_inference.INFERENCE_NEXT_NEW_ANSWER_ID, inference))),
		    list(CDO, list(list(id, start_id, list(inference_datastructures_inference.$sym305$1_, id))), list(list(inference_datastructures_inference.$sym306$__, id, end_id)),
			    listS(CLET, list(list(answer_var, list(inference_datastructures_inference.FIND_INFERENCE_ANSWER_BY_ID, inf, id))), append(body, NIL))));
	}
	cdestructuring_bind_error(datum, inference_datastructures_inference.$list296);
	return NIL;
    }

    public static final SubLObject do_inference_answers_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt290);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject answer_var = NIL;
		    SubLObject inference = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt290);
		    answer_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt290);
		    inference = current.first();
		    current = current.rest();
		    {
			SubLObject allow_other_keys_p = NIL;
			SubLObject rest = current;
			SubLObject bad = NIL;
			SubLObject current_1 = NIL;
			for (; NIL != rest;) {
			    destructuring_bind_must_consp(rest, datum, $list_alt290);
			    current_1 = rest.first();
			    rest = rest.rest();
			    destructuring_bind_must_consp(rest, datum, $list_alt290);
			    if (NIL == member(current_1, $list_alt291, UNPROVIDED, UNPROVIDED)) {
				bad = T;
			    }
			    if (current_1 == $ALLOW_OTHER_KEYS) {
				allow_other_keys_p = rest.first();
			    }
			    rest = rest.rest();
			}
			if ((NIL != bad) && (NIL == allow_other_keys_p)) {
			    cdestructuring_bind_error(datum, $list_alt290);
			}
			{
			    SubLObject ordered_tail = property_list_member($ORDERED, current);
			    SubLObject ordered = (NIL != ordered_tail) ? ((SubLObject) (cadr(ordered_tail))) : NIL;
			    current = temp;
			    {
				SubLObject body = current;
				SubLObject id = $sym294$ID;
				return listS(DO_ID_INDEX, list(id, answer_var, list(INFERENCE_ANSWER_ID_INDEX, inference), $ORDERED, ordered), list(IGNORE, id), append(body, NIL));
			    }
			}
		    }
		}
	    }
	}
    }

    public static SubLObject do_inference_answers(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list308);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject answer_var = NIL;
	SubLObject inference = NIL;
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list308);
	answer_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list308);
	inference = current.first();
	current = current.rest();
	SubLObject allow_other_keys_p = NIL;
	SubLObject rest = current;
	SubLObject bad = NIL;
	SubLObject current_$1 = NIL;
	while (NIL != rest) {
	    destructuring_bind_must_consp(rest, datum, inference_datastructures_inference.$list308);
	    current_$1 = rest.first();
	    rest = rest.rest();
	    destructuring_bind_must_consp(rest, datum, inference_datastructures_inference.$list308);
	    if (NIL == member(current_$1, inference_datastructures_inference.$list309, UNPROVIDED, UNPROVIDED)) {
		bad = T;
	    }
	    if (current_$1 == inference_datastructures_inference.$ALLOW_OTHER_KEYS) {
		allow_other_keys_p = rest.first();
	    }
	    rest = rest.rest();
	}
	if ((NIL != bad) && (NIL == allow_other_keys_p)) {
	    cdestructuring_bind_error(datum, inference_datastructures_inference.$list308);
	}
	final SubLObject ordered_tail = property_list_member($ORDERED, current);
	final SubLObject ordered = (NIL != ordered_tail) ? cadr(ordered_tail) : NIL;
	final SubLObject body;
	current = body = temp;
	final SubLObject id = inference_datastructures_inference.$sym312$ID;
	return listS(DO_ID_INDEX, list(id, answer_var, list(inference_datastructures_inference.INFERENCE_ANSWER_ID_INDEX, inference), $ORDERED, ordered), list(IGNORE, id), append(body, NIL));
    }

    /**
     * Iterates over the answers for INFERENCE starting
     * from START-INDEX binding ANSWER-VAR to each answer.
     * START-INDEX is modified to reflect the index that
     * should be used for the next use of this macro in order
     * not to redundantly iterate over previous answers.
     */
    @LispMethod(comment = "Iterates over the answers for INFERENCE starting\r\nfrom START-INDEX binding ANSWER-VAR to each answer.\r\nSTART-INDEX is modified to reflect the index that\r\nshould be used for the next use of this macro in order\r\nnot to redundantly iterate over previous answers.\nIterates over the answers for INFERENCE starting\nfrom START-INDEX binding ANSWER-VAR to each answer.\nSTART-INDEX is modified to reflect the index that\nshould be used for the next use of this macro in order\nnot to redundantly iterate over previous answers.")
    public static final SubLObject do_inference_answers_from_index_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt298);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject answer_var = NIL;
		    SubLObject inference = NIL;
		    SubLObject start_index = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt298);
		    answer_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt298);
		    inference = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt298);
		    start_index = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    SubLObject start_id = $sym299$START_ID;
			    SubLObject end_id = $sym300$END_ID;
			    SubLObject id = $sym301$ID;
			    SubLObject inf = $sym302$INF;
			    return list(CLET, list(list(inf, inference), list(start_id, start_index), list(end_id, list(INFERENCE_NEXT_NEW_ANSWER_ID, inference))),
				    list(CDO, list(list(id, start_id, list($sym287$1_, id))), list(list($sym288$__, id, end_id)), listS(CLET, list(list(answer_var, list(FIND_INFERENCE_ANSWER_BY_ID, inf, id))), append(body, NIL))), list(CSETQ, start_index, end_id));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt298);
		    }
		}
	    }
	}
	return NIL;
    }

    /**
     * Iterates over the answers for INFERENCE starting
     * from START-INDEX binding ANSWER-VAR to each answer.
     * START-INDEX is modified to reflect the index that
     * should be used for the next use of this macro in order
     * not to redundantly iterate over previous answers.
     */
    @LispMethod(comment = "Iterates over the answers for INFERENCE starting\r\nfrom START-INDEX binding ANSWER-VAR to each answer.\r\nSTART-INDEX is modified to reflect the index that\r\nshould be used for the next use of this macro in order\r\nnot to redundantly iterate over previous answers.\nIterates over the answers for INFERENCE starting\nfrom START-INDEX binding ANSWER-VAR to each answer.\nSTART-INDEX is modified to reflect the index that\nshould be used for the next use of this macro in order\nnot to redundantly iterate over previous answers.")
    public static SubLObject do_inference_answers_from_index(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list316);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject answer_var = NIL;
	SubLObject inference = NIL;
	SubLObject start_index = NIL;
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list316);
	answer_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list316);
	inference = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list316);
	start_index = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    final SubLObject start_id = inference_datastructures_inference.$sym317$START_ID;
	    final SubLObject end_id = inference_datastructures_inference.$sym318$END_ID;
	    final SubLObject id = inference_datastructures_inference.$sym319$ID;
	    final SubLObject inf = inference_datastructures_inference.$sym320$INF;
	    return list(CLET, list(list(inf, inference), list(start_id, start_index), list(end_id, list(inference_datastructures_inference.INFERENCE_NEXT_NEW_ANSWER_ID, inference))), list(CDO, list(list(id, start_id, list(inference_datastructures_inference.$sym305$1_, id))),
		    list(list(inference_datastructures_inference.$sym306$__, id, end_id)), listS(CLET, list(list(answer_var, list(inference_datastructures_inference.FIND_INFERENCE_ANSWER_BY_ID, inf, id))), append(body, NIL))), list(CSETQ, start_index, end_id));
	}
	cdestructuring_bind_error(datum, inference_datastructures_inference.$list316);
	return NIL;
    }

    public static final SubLObject do_inference_justifications_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt275);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject just_var = NIL;
		    SubLObject inference = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt275);
		    just_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt275);
		    inference = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    SubLObject v_answer = $sym304$ANSWER;
			    return list(DO_INFERENCE_ANSWERS, list(v_answer, inference), listS(DO_INFERENCE_ANSWER_JUSTIFICATIONS, list(just_var, v_answer), append(body, NIL)));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt275);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject do_inference_justifications(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list293);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject just_var = NIL;
	SubLObject inference = NIL;
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list293);
	just_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list293);
	inference = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    final SubLObject v_answer = inference_datastructures_inference.$sym322$ANSWER;
	    return list(inference_datastructures_inference.DO_INFERENCE_ANSWERS, list(v_answer, inference), listS(inference_datastructures_inference.DO_INFERENCE_ANSWER_JUSTIFICATIONS, list(just_var, v_answer), append(body, NIL)));
	}
	cdestructuring_bind_error(datum, inference_datastructures_inference.$list293);
	return NIL;
    }

    public static final SubLObject do_inference_interrupting_processes_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt307);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject process_var = NIL;
		    SubLObject inference = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt307);
		    process_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt307);
		    inference = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    return listS(DO_QUEUE_DEQUEUE, list(process_var, list(INFERENCE_INTERRUPTING_PROCESSES, inference)), append(body, NIL));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt307);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject do_inference_interrupting_processes(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list325);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject process_var = NIL;
	SubLObject inference = NIL;
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list325);
	process_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list325);
	inference = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    return listS(inference_datastructures_inference.DO_QUEUE_DEQUEUE, list(process_var, list(inference_datastructures_inference.INFERENCE_INTERRUPTING_PROCESSES, inference)), append(body, NIL));
	}
	cdestructuring_bind_error(datum, inference_datastructures_inference.$list325);
	return NIL;
    }

    public static final SubLObject do_inference_root_proofs_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt310);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject proof_var = NIL;
		    SubLObject inference = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt310);
		    proof_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt310);
		    inference = current.first();
		    current = current.rest();
		    {
			SubLObject allow_other_keys_p = NIL;
			SubLObject rest = current;
			SubLObject bad = NIL;
			SubLObject current_2 = NIL;
			for (; NIL != rest;) {
			    destructuring_bind_must_consp(rest, datum, $list_alt310);
			    current_2 = rest.first();
			    rest = rest.rest();
			    destructuring_bind_must_consp(rest, datum, $list_alt310);
			    if (NIL == member(current_2, $list_alt311, UNPROVIDED, UNPROVIDED)) {
				bad = T;
			    }
			    if (current_2 == $ALLOW_OTHER_KEYS) {
				allow_other_keys_p = rest.first();
			    }
			    rest = rest.rest();
			}
			if ((NIL != bad) && (NIL == allow_other_keys_p)) {
			    cdestructuring_bind_error(datum, $list_alt310);
			}
			{
			    SubLObject proof_status_tail = property_list_member($PROOF_STATUS, current);
			    SubLObject proof_status = (NIL != proof_status_tail) ? ((SubLObject) (cadr(proof_status_tail))) : NIL;
			    current = temp;
			    {
				SubLObject body = current;
				SubLObject root_problem = $sym313$ROOT_PROBLEM;
				return list(CLET, list(list(root_problem, list(INFERENCE_ROOT_PROBLEM, inference))), list(PWHEN, root_problem, listS(DO_PROBLEM_PROOFS, list(proof_var, root_problem, $PROOF_STATUS, proof_status), append(body, NIL))));
			    }
			}
		    }
		}
	    }
	}
    }

    public static SubLObject do_inference_root_proofs(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list328);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject proof_var = NIL;
	SubLObject inference = NIL;
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list328);
	proof_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list328);
	inference = current.first();
	current = current.rest();
	SubLObject allow_other_keys_p = NIL;
	SubLObject rest = current;
	SubLObject bad = NIL;
	SubLObject current_$2 = NIL;
	while (NIL != rest) {
	    destructuring_bind_must_consp(rest, datum, inference_datastructures_inference.$list328);
	    current_$2 = rest.first();
	    rest = rest.rest();
	    destructuring_bind_must_consp(rest, datum, inference_datastructures_inference.$list328);
	    if (NIL == member(current_$2, inference_datastructures_inference.$list329, UNPROVIDED, UNPROVIDED)) {
		bad = T;
	    }
	    if (current_$2 == inference_datastructures_inference.$ALLOW_OTHER_KEYS) {
		allow_other_keys_p = rest.first();
	    }
	    rest = rest.rest();
	}
	if ((NIL != bad) && (NIL == allow_other_keys_p)) {
	    cdestructuring_bind_error(datum, inference_datastructures_inference.$list328);
	}
	final SubLObject proof_status_tail = property_list_member($PROOF_STATUS, current);
	final SubLObject proof_status = (NIL != proof_status_tail) ? cadr(proof_status_tail) : NIL;
	final SubLObject body;
	current = body = temp;
	final SubLObject root_problem = inference_datastructures_inference.$sym331$ROOT_PROBLEM;
	return list(CLET, list(list(root_problem, list(inference_datastructures_inference.INFERENCE_ROOT_PROBLEM, inference))), list(PWHEN, root_problem, listS(inference_datastructures_inference.DO_PROBLEM_PROOFS, list(proof_var, root_problem, $PROOF_STATUS, proof_status), append(body, NIL))));
    }

    public static final SubLObject do_inference_allowed_rules_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt317);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject rule_var = NIL;
		    SubLObject inference = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt317);
		    rule_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt317);
		    inference = current.first();
		    current = current.rest();
		    {
			SubLObject allow_other_keys_p = NIL;
			SubLObject rest = current;
			SubLObject bad = NIL;
			SubLObject current_3 = NIL;
			for (; NIL != rest;) {
			    destructuring_bind_must_consp(rest, datum, $list_alt317);
			    current_3 = rest.first();
			    rest = rest.rest();
			    destructuring_bind_must_consp(rest, datum, $list_alt317);
			    if (NIL == member(current_3, $list_alt318, UNPROVIDED, UNPROVIDED)) {
				bad = T;
			    }
			    if (current_3 == $ALLOW_OTHER_KEYS) {
				allow_other_keys_p = rest.first();
			    }
			    rest = rest.rest();
			}
			if ((NIL != bad) && (NIL == allow_other_keys_p)) {
			    cdestructuring_bind_error(datum, $list_alt317);
			}
			{
			    SubLObject done_tail = property_list_member($DONE, current);
			    SubLObject done = (NIL != done_tail) ? ((SubLObject) (cadr(done_tail))) : NIL;
			    current = temp;
			    {
				SubLObject body = current;
				return listS(DO_SET, list(rule_var, list(INFERENCE_ALLOWED_RULES, inference), $DONE, done), append(body, NIL));
			    }
			}
		    }
		}
	    }
	}
    }

    public static SubLObject do_inference_allowed_rules(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list335);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject rule_var = NIL;
	SubLObject inference = NIL;
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list335);
	rule_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list335);
	inference = current.first();
	current = current.rest();
	SubLObject allow_other_keys_p = NIL;
	SubLObject rest = current;
	SubLObject bad = NIL;
	SubLObject current_$3 = NIL;
	while (NIL != rest) {
	    destructuring_bind_must_consp(rest, datum, inference_datastructures_inference.$list335);
	    current_$3 = rest.first();
	    rest = rest.rest();
	    destructuring_bind_must_consp(rest, datum, inference_datastructures_inference.$list335);
	    if (NIL == member(current_$3, inference_datastructures_inference.$list336, UNPROVIDED, UNPROVIDED)) {
		bad = T;
	    }
	    if (current_$3 == inference_datastructures_inference.$ALLOW_OTHER_KEYS) {
		allow_other_keys_p = rest.first();
	    }
	    rest = rest.rest();
	}
	if ((NIL != bad) && (NIL == allow_other_keys_p)) {
	    cdestructuring_bind_error(datum, inference_datastructures_inference.$list335);
	}
	final SubLObject done_tail = property_list_member($DONE, current);
	final SubLObject done = (NIL != done_tail) ? cadr(done_tail) : NIL;
	final SubLObject body;
	current = body = temp;
	return listS(DO_SET, list(rule_var, list(inference_datastructures_inference.INFERENCE_ALLOWED_RULES, inference), $DONE, done), append(body, NIL));
    }

    public static final SubLObject with_inference_problem_working_time_lock_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt321);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject inference = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt321);
		    inference = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    return listS(WITH_LOCK_HELD, list(list(INFERENCE_PROBLEM_WORKING_TIME_LOCK, inference)), append(body, NIL));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt321);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject with_inference_problem_working_time_lock(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list339);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject inference = NIL;
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list339);
	inference = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    return listS(WITH_LOCK_HELD, list(list(inference_datastructures_inference.INFERENCE_PROBLEM_WORKING_TIME_LOCK, inference)), append(body, NIL));
	}
	cdestructuring_bind_error(datum, inference_datastructures_inference.$list339);
	return NIL;
    }

    /**
     * Allocates a new inference object and sets up its internal datastructures.
     */
    @LispMethod(comment = "Allocates a new inference object and sets up its internal datastructures.")
    public static final SubLObject new_inference_alt(SubLObject store) {
	SubLTrampolineFile.checkType(store, PROBLEM_STORE_P);
	{
	    SubLObject inf = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.make_inference(UNPROVIDED);
	    SubLObject suid = inference_datastructures_problem_store.problem_store_new_inference_id(store);
	    inference_metrics.increment_inference_historical_count();
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_suid(inf, suid);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_problem_store(inf, store);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_forward_propagate(inf, NIL);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_hypothetical_bindings(inf, NIL);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_answer_id_index(inf, new_id_index(TEN_INTEGER, ZERO_INTEGER));
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_answer_bindings_index(inf, dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED));
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_new_answer_justifications(inf, queues.create_queue());
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.reset_inference_new_answers(inf);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_status(inf, $NEW);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_relevant_problems(inf, set.new_set(symbol_function(EQ), UNPROVIDED));
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_strategy_set(inf, set.new_set(symbol_function(EQ), UNPROVIDED));
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.clear_inference_control_process(inf);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_interrupting_processes(inf, queues.create_queue());
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_transformation_depth_reached(inf, ZERO_INTEGER);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_answer_language(inf, inference_datastructures_enumerated_types.$inference_default_answer_language$.getGlobalValue());
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_disjunction_free_el_vars_policy(inf, inference_datastructures_enumerated_types.$default_inference_disjunction_free_el_vars_policy$.getGlobalValue());
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_cache_results(inf, NIL);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_continuable(inf, inference_datastructures_enumerated_types.$inference_default_continuableP$.getGlobalValue());
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_browsable(inf, inference_datastructures_enumerated_types.$inference_default_browsableP$.getGlobalValue());
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_max_number(inf, inference_datastructures_enumerated_types.$default_max_number$.getGlobalValue());
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_max_time(inf, inference_datastructures_enumerated_types.$default_max_time$.getGlobalValue());
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_max_step(inf, inference_datastructures_enumerated_types.$default_max_step$.getGlobalValue());
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_mode(inf, inference_datastructures_enumerated_types.$default_inference_mode$.getGlobalValue());
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_forward_max_time(inf, inference_datastructures_enumerated_types.$default_forward_max_time$.getGlobalValue());
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_cumulative_time(inf, ZERO_INTEGER);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_step_count(inf, ZERO_INTEGER);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_cumulative_step_count(inf, ZERO_INTEGER);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_max_proof_depth(inf, inference_datastructures_enumerated_types.$default_max_proof_depth$.getGlobalValue());
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_max_transformation_depth(inf, inference_datastructures_enumerated_types.$default_max_transformation_depth$.getGlobalValue());
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_probably_approximately_done(inf, inference_datastructures_enumerated_types.$default_probably_approximately_done$.getGlobalValue());
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_metrics_template(inf, inference_datastructures_enumerated_types.$default_inference_metrics_template$.getGlobalValue());
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_accumulators(inf, dictionary.new_dictionary(symbol_function(EQ), UNPROVIDED));
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_proof_watermark(inf, ZERO_INTEGER);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.clear_inference_blocking(inf);
	    inference_datastructures_problem_store.add_problem_store_inference(store, inf);
	    return inf;
	}
    }

    /**
     * Allocates a new inference object and sets up its internal datastructures.
     */
    @LispMethod(comment = "Allocates a new inference object and sets up its internal datastructures.")
    public static SubLObject new_inference(final SubLObject store) {
	assert NIL != inference_datastructures_problem_store.problem_store_p(store) : "! inference_datastructures_problem_store.problem_store_p(store) "
		+ ("inference_datastructures_problem_store.problem_store_p(store) " + "CommonSymbols.NIL != inference_datastructures_problem_store.problem_store_p(store) ") + store;
	final SubLObject inf = inference_datastructures_inference.make_inference(UNPROVIDED);
	final SubLObject suid = inference_datastructures_problem_store.problem_store_new_inference_id(store);
	inference_metrics.increment_inference_historical_count();
	inference_datastructures_inference._csetf_infrnc_suid(inf, suid);
	inference_datastructures_inference._csetf_infrnc_problem_store(inf, store);
	inference_datastructures_inference._csetf_infrnc_forward_propagate(inf, NIL);
	inference_datastructures_inference._csetf_infrnc_hypothetical_bindings(inf, NIL);
	inference_datastructures_inference._csetf_infrnc_answer_id_index(inf, new_id_index(TEN_INTEGER, ZERO_INTEGER));
	inference_datastructures_inference._csetf_infrnc_answer_bindings_index(inf, new_dictionary(symbol_function(EQUAL), UNPROVIDED));
	inference_datastructures_inference._csetf_infrnc_new_answer_justifications(inf, create_queue(UNPROVIDED));
	inference_datastructures_inference.reset_inference_new_answers(inf);
	inference_datastructures_inference.set_inference_status(inf, $NEW);
	inference_datastructures_inference._csetf_infrnc_relevant_problems(inf, new_set(symbol_function(EQ), UNPROVIDED));
	inference_datastructures_inference._csetf_infrnc_strategy_set(inf, new_set(symbol_function(EQ), UNPROVIDED));
	inference_datastructures_inference.clear_inference_control_process(inf);
	inference_datastructures_inference._csetf_infrnc_interrupting_processes(inf, create_queue(UNPROVIDED));
	inference_datastructures_inference._csetf_infrnc_max_transformation_depth_reached(inf, ZERO_INTEGER);
	inference_datastructures_inference.set_inference_answer_language(inf, inference_datastructures_enumerated_types.$inference_default_answer_language$.getGlobalValue());
	inference_datastructures_inference.set_inference_disjunction_free_el_vars_policy(inf, inference_datastructures_enumerated_types.$default_inference_disjunction_free_el_vars_policy$.getGlobalValue());
	inference_datastructures_inference.set_inference_cache_results(inf, NIL);
	inference_datastructures_inference.set_inference_continuable(inf, inference_datastructures_enumerated_types.$inference_default_continuableP$.getGlobalValue());
	inference_datastructures_inference.set_inference_browsable(inf, inference_datastructures_enumerated_types.$inference_default_browsableP$.getGlobalValue());
	inference_datastructures_inference.set_inference_max_number(inf, inference_datastructures_enumerated_types.$default_max_number$.getGlobalValue());
	inference_datastructures_inference.set_inference_max_time(inf, inference_datastructures_enumerated_types.$default_max_time$.getGlobalValue());
	inference_datastructures_inference.set_inference_max_step(inf, inference_datastructures_enumerated_types.$default_max_step$.getGlobalValue());
	inference_datastructures_inference.set_inference_mode(inf, inference_datastructures_enumerated_types.$default_inference_mode$.getGlobalValue());
	inference_datastructures_inference.set_inference_forward_max_time(inf, inference_datastructures_enumerated_types.$default_forward_max_time$.getGlobalValue());
	inference_datastructures_inference.set_inference_hypothesization_time(inf, ZERO_INTEGER);
	inference_datastructures_inference.set_inference_cumulative_time(inf, ZERO_INTEGER);
	inference_datastructures_inference.set_inference_step_count(inf, ZERO_INTEGER);
	inference_datastructures_inference.set_inference_cumulative_step_count(inf, ZERO_INTEGER);
	inference_datastructures_inference.set_inference_max_proof_depth(inf, inference_datastructures_enumerated_types.$default_max_proof_depth$.getGlobalValue());
	inference_datastructures_inference.set_inference_max_transformation_depth(inf, inference_datastructures_enumerated_types.$default_max_transformation_depth$.getGlobalValue());
	inference_datastructures_inference.set_inference_min_rule_utility(inf, inference_datastructures_enumerated_types.$default_min_rule_utility$.getGlobalValue());
	inference_datastructures_inference.set_inference_probably_approximately_done(inf, inference_datastructures_enumerated_types.$default_probably_approximately_done$.getGlobalValue());
	inference_datastructures_inference.set_inference_metrics_template(inf, inference_datastructures_enumerated_types.$default_inference_metrics_template$.getGlobalValue());
	inference_datastructures_inference._csetf_infrnc_accumulators(inf, new_dictionary(symbol_function(EQ), UNPROVIDED));
	inference_datastructures_inference._csetf_infrnc_proof_watermark(inf, ZERO_INTEGER);
	inference_datastructures_inference.clear_inference_blocking(inf);
	inference_datastructures_problem_store.add_problem_store_inference(store, inf);
	return inf;
    }

    public static final SubLObject new_tautological_inference_alt(SubLObject store) {
	{
	    SubLObject inference = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.new_inference(store);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_status(inference, $TAUTOLOGY);
	    return inference;
	}
    }

    public static SubLObject new_tautological_inference(final SubLObject store) {
	final SubLObject inference = inference_datastructures_inference.new_inference(store);
	inference_datastructures_inference.set_inference_status(inference, $TAUTOLOGY);
	return inference;
    }

    /**
     * Destroy all the inferences
     */
    @LispMethod(comment = "Destroy all the inferences")
    public static final SubLObject destroy_all_inferences_alt() {
	{
	    SubLObject inferences = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.all_inferences();
	    SubLObject cdolist_list_var = inferences;
	    SubLObject inference = NIL;
	    for (inference = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), inference = cdolist_list_var.first()) {
		{
		    SubLObject ignore_errors_tag = NIL;
		    try {
			{
			    SubLObject _prev_bind_0 = currentBinding(Errors.$error_handler$);
			    try {
				bind(Errors.$error_handler$, symbol_function(IGNORE_ERRORS_HANDLER));
				try {
				    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.destroy_inference(inference);
				} catch (Throwable catch_var) {
				    Errors.handleThrowable(catch_var, NIL);
				}
			    } finally {
				rebind(Errors.$error_handler$, _prev_bind_0);
			    }
			}
		    } catch (Throwable ccatch_env_var) {
			ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, $IGNORE_ERRORS_TARGET);
		    }
		}
	    }
	    return length(inferences);
	}
    }

    /**
     * Destroy all the inferences
     */
    @LispMethod(comment = "Destroy all the inferences")
    public static SubLObject destroy_all_inferences() {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject cdolist_list_var;
	final SubLObject inferences = cdolist_list_var = inference_datastructures_inference.all_inferences();
	SubLObject inference = NIL;
	inference = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    SubLObject ignore_errors_tag = NIL;
	    try {
		thread.throwStack.push(inference_datastructures_inference.$IGNORE_ERRORS_TARGET);
		final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
		try {
		    Errors.$error_handler$.bind(symbol_function(inference_datastructures_inference.IGNORE_ERRORS_HANDLER), thread);
		    try {
			inference_datastructures_inference.destroy_inference(inference);
		    } catch (final Throwable catch_var) {
			Errors.handleThrowable(catch_var, NIL);
		    }
		} finally {
		    Errors.$error_handler$.rebind(_prev_bind_0, thread);
		}
	    } catch (final Throwable ccatch_env_var) {
		ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, inference_datastructures_inference.$IGNORE_ERRORS_TARGET);
	    } finally {
		thread.throwStack.pop();
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    inference = cdolist_list_var.first();
	}
	return length(inferences);
    }

    /**
     * Disposes of the INFERENCE datastructure.  This gets
     * rid of all pointers to its referenced substructures so
     * that the GC can collect them all.
     */
    @LispMethod(comment = "Disposes of the INFERENCE datastructure.  This gets\r\nrid of all pointers to its referenced substructures so\r\nthat the GC can collect them all.\nDisposes of the INFERENCE datastructure.  This gets\nrid of all pointers to its referenced substructures so\nthat the GC can collect them all.")
    public static final SubLObject destroy_inference_alt(SubLObject inference) {
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.valid_inference_p(inference)) {
	    try {
		inference_strategist.inference_abort_if_running(inference);
	    } finally {
		{
		    SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
		    try {
			bind($is_thread_performing_cleanupP$, T);
			com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.note_inference_invalid(inference);
			{
			    SubLObject inference_var = inference;
			    SubLObject set_contents_var = set.do_set_internal(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_strategy_set(inference_var));
			    SubLObject basis_object = set_contents.do_set_contents_basis_object(set_contents_var);
			    SubLObject state = NIL;
			    for (state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
				{
				    SubLObject strategy = set_contents.do_set_contents_next(basis_object, state);
				    if (NIL != set_contents.do_set_contents_element_validP(state, strategy)) {
					inference_datastructures_strategy.destroy_inference_strategy(strategy);
				    }
				}
			    }
			}
			{
			    SubLObject root_link = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_root_link(inference);
			    inference_datastructures_problem_link.destroy_problem_link(root_link);
			}
			{
			    SubLObject store = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store(inference);
			    inference_datastructures_problem_store.remove_problem_store_inference(store, inference);
			}
			com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.destroy_inference_int(inference);
		    } finally {
			rebind($is_thread_performing_cleanupP$, _prev_bind_0);
		    }
		}
	    }
	}
	return NIL;
    }

    /**
     * Disposes of the INFERENCE datastructure.  This gets
     * rid of all pointers to its referenced substructures so
     * that the GC can collect them all.
     */
    @LispMethod(comment = "Disposes of the INFERENCE datastructure.  This gets\r\nrid of all pointers to its referenced substructures so\r\nthat the GC can collect them all.\nDisposes of the INFERENCE datastructure.  This gets\nrid of all pointers to its referenced substructures so\nthat the GC can collect them all.")
    public static SubLObject destroy_inference(final SubLObject inference) {
	if (NIL != inference_datastructures_inference.valid_inference_p(inference)) {
	    try {
		inference_strategist.inference_abort_if_running(inference);
	    } finally {
		final SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
		try {
		    bind($is_thread_performing_cleanupP$, T);
		    final SubLObject _values = getValuesAsVector();
		    inference_datastructures_inference.note_inference_invalid(inference);
		    final SubLObject set_var = inference_datastructures_inference.inference_strategy_set(inference);
		    final SubLObject set_contents_var = do_set_internal(set_var);
		    SubLObject basis_object;
		    SubLObject state;
		    SubLObject strategy;
		    for (basis_object = do_set_contents_basis_object(set_contents_var), state = NIL, state = do_set_contents_initial_state(basis_object, set_contents_var); NIL == do_set_contents_doneP(basis_object, state); state = do_set_contents_update_state(state)) {
			strategy = do_set_contents_next(basis_object, state);
			if (NIL != do_set_contents_element_validP(state, strategy)) {
			    inference_datastructures_strategy.destroy_inference_strategy(strategy);
			}
		    }
		    final SubLObject root_link = inference_datastructures_inference.inference_root_link(inference);
		    inference_datastructures_problem_link.destroy_problem_link(root_link);
		    final SubLObject store = inference_datastructures_inference.inference_problem_store(inference);
		    inference_datastructures_problem_store.remove_problem_store_inference(store, inference);
		    inference_datastructures_inference.destroy_inference_int(inference);
		    restoreValuesFromVector(_values);
		} finally {
		    rebind($is_thread_performing_cleanupP$, _prev_bind_0);
		}
	    }
	}
	return NIL;
    }

    /**
     * Destroys INFERENCE and the problem store that INFERENCE
     * is using.  Before calling this function, ensure that no
     * other inference is sharing INFERENCE's problem store.
     */
    @LispMethod(comment = "Destroys INFERENCE and the problem store that INFERENCE\r\nis using.  Before calling this function, ensure that no\r\nother inference is sharing INFERENCE\'s problem store.\nDestroys INFERENCE and the problem store that INFERENCE\nis using.  Before calling this function, ensure that no\nother inference is sharing INFERENCE\'s problem store.")
    public static final SubLObject destroy_inference_and_problem_store_alt(SubLObject inference) {
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(inference)) {
	    {
		SubLObject store = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store(inference);
		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.destroy_inference(inference);
		inference_datastructures_problem_store.destroy_problem_store(store);
	    }
	}
	return NIL;
    }

    /**
     * Destroys INFERENCE and the problem store that INFERENCE
     * is using.  Before calling this function, ensure that no
     * other inference is sharing INFERENCE's problem store.
     */
    @LispMethod(comment = "Destroys INFERENCE and the problem store that INFERENCE\r\nis using.  Before calling this function, ensure that no\r\nother inference is sharing INFERENCE\'s problem store.\nDestroys INFERENCE and the problem store that INFERENCE\nis using.  Before calling this function, ensure that no\nother inference is sharing INFERENCE\'s problem store.")
    public static SubLObject destroy_inference_and_problem_store(final SubLObject inference) {
	if (NIL != inference_datastructures_inference.inference_p(inference)) {
	    final SubLObject store = inference_datastructures_inference.inference_problem_store(inference);
	    inference_datastructures_inference.destroy_inference(inference);
	    inference_datastructures_problem_store.destroy_problem_store(store);
	}
	return NIL;
    }

    public static final SubLObject destroy_problem_store_inference_alt(SubLObject inference) {
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.valid_inference_p(inference)) {
	    inference_strategist.inference_abort_if_running(inference);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.note_inference_invalid(inference);
	    return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.destroy_inference_int(inference);
	}
	return NIL;
    }

    public static SubLObject destroy_problem_store_inference(final SubLObject inference) {
	if (NIL != inference_datastructures_inference.valid_inference_p(inference)) {
	    inference_strategist.inference_abort_if_running(inference);
	    inference_datastructures_inference.note_inference_invalid(inference);
	    return inference_datastructures_inference.destroy_inference_int(inference);
	}
	return NIL;
    }

    public static final SubLObject destroy_inference_int_alt(SubLObject inf) {
	inference_datastructures_forward_propagate.destroy_forward_propagate(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_forward_propagate(inf));
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_problem_store(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_forward_propagate(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_input_mt(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_input_el_query(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_input_non_explanatory_el_query(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_input_query_properties(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_mt(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_el_query(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_el_bindings(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_hl_query(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_explanatory_subquery(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_non_explanatory_subquery(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_free_hl_vars(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_hypothetical_bindings(inf, $FREE);
	clear_id_index(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_answer_id_index(inf));
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_answer_id_index(inf, $FREE);
	dictionary.clear_dictionary(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_answer_bindings_index(inf));
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_answer_bindings_index(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_new_answer_id_start(inf, $FREE);
	queues.clear_queue(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_new_answer_justifications(inf));
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_new_answer_justifications(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_suspend_status(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_root_link(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.clear_inference_relevant_problems(inf);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_relevant_problems(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.clear_inference_strategy_set(inf);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_strategy_set(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.clear_inference_control_process(inf);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_control_process(inf, $FREE);
	queues.clear_queue(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_interrupting_processes(inf));
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_interrupting_processes(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_transformation_depth_reached(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.clear_inference_blocking(inf);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_blockingP(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_disjunction_free_el_vars_policy(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_result_uniqueness_criterion(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allow_hl_predicate_transformationP(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allow_unbound_predicate_transformationP(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allow_evaluatable_predicate_transformationP(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allow_indeterminate_resultsP(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allowed_rules(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_forbidden_rules(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allowed_modules(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allow_abnormality_checkingP(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_transitive_closure_mode(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_problem_store_privateP(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_continuableP(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_browsableP(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_return_type(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_answer_language(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_cache_resultsP(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_number(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_time(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_step(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_mode(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_forward_max_time(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_proof_depth(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_transformation_depth(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_probably_approximately_done(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_metrics_template(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_start_universal_time(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_start_internal_real_time(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_end_internal_real_time(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_pad_internal_real_time(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_cumulative_time(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_step_count(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_cumulative_step_count(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_events(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_halt_conditions(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_accumulators(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_proof_watermark(inf, $FREE);
	{
	    SubLObject lock = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_working_time_lock(inf);
	    if (!lock.isLock()) {
		lock = NIL;
	    }
	    if (NIL != lock) {
		{
		    SubLObject lock_4 = lock;
		    SubLObject release = NIL;
		    try {
			release = seize_lock(lock_4);
			com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_problem_working_time_data(inf, $FREE);
		    } finally {
			if (NIL != release) {
			    release_lock(lock_4);
			}
		    }
		}
	    } else {
		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_problem_working_time_data(inf, $FREE);
	    }
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_type(inf, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_data(inf, $FREE);
	return NIL;
    }

    public static SubLObject destroy_inference_int(final SubLObject inf) {
	inference_datastructures_forward_propagate.destroy_forward_propagate(inference_datastructures_inference.infrnc_forward_propagate(inf));
	inference_datastructures_inference._csetf_infrnc_problem_store(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_forward_propagate(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_input_mt(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_input_el_query(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_input_non_explanatory_el_query(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_input_query_properties(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_mt(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_el_query(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_el_bindings(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_hl_query(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_explanatory_subquery(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_non_explanatory_subquery(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_free_hl_vars(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_hypothetical_bindings(inf, $FREE);
	clear_id_index(inference_datastructures_inference.infrnc_answer_id_index(inf));
	inference_datastructures_inference._csetf_infrnc_answer_id_index(inf, $FREE);
	clear_dictionary(inference_datastructures_inference.infrnc_answer_bindings_index(inf));
	inference_datastructures_inference._csetf_infrnc_answer_bindings_index(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_new_answer_id_start(inf, $FREE);
	clear_queue(inference_datastructures_inference.infrnc_new_answer_justifications(inf));
	inference_datastructures_inference._csetf_infrnc_new_answer_justifications(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_suspend_status(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_root_link(inf, $FREE);
	inference_datastructures_inference.clear_inference_relevant_problems(inf);
	inference_datastructures_inference._csetf_infrnc_relevant_problems(inf, $FREE);
	inference_datastructures_inference.clear_inference_strategy_set(inf);
	inference_datastructures_inference._csetf_infrnc_strategy_set(inf, $FREE);
	inference_datastructures_inference.clear_inference_control_process(inf);
	inference_datastructures_inference._csetf_infrnc_control_process(inf, $FREE);
	clear_queue(inference_datastructures_inference.infrnc_interrupting_processes(inf));
	inference_datastructures_inference._csetf_infrnc_interrupting_processes(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_max_transformation_depth_reached(inf, $FREE);
	inference_datastructures_inference.clear_inference_blocking(inf);
	inference_datastructures_inference._csetf_infrnc_blockingP(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_disjunction_free_el_vars_policy(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_result_uniqueness_criterion(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_allow_hl_predicate_transformationP(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_allow_unbound_predicate_transformationP(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_allow_evaluatable_predicate_transformationP(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_allow_indeterminate_resultsP(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_allowed_rules(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_forbidden_rules(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_allowed_modules(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_allow_abnormality_checkingP(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_transitive_closure_mode(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_problem_store_privateP(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_continuableP(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_browsableP(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_return_type(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_answer_language(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_cache_resultsP(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_max_number(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_max_time(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_max_step(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_mode(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_forward_max_time(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_max_proof_depth(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_max_transformation_depth(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_min_rule_utility(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_probably_approximately_done(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_metrics_template(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_start_universal_time(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_start_internal_real_time(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_end_internal_real_time(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_pad_internal_real_time(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_hypothesization_time(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_cumulative_time(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_step_count(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_cumulative_step_count(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_events(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_halt_conditions(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_accumulators(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_proof_watermark(inf, $FREE);
	SubLObject lock = inference_datastructures_inference.inference_problem_working_time_lock(inf);
	if (!lock.isLock()) {
	    lock = NIL;
	}
	if (NIL != lock) {
	    SubLObject release = NIL;
	    try {
		release = seize_lock(lock);
		inference_datastructures_inference._csetf_infrnc_problem_working_time_data(inf, $FREE);
	    } finally {
		if (NIL != release) {
		    release_lock(lock);
		}
	    }
	} else {
	    inference_datastructures_inference._csetf_infrnc_problem_working_time_data(inf, $FREE);
	}
	inference_datastructures_inference._csetf_infrnc_type(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_data(inf, $FREE);
	inference_datastructures_inference._csetf_infrnc_properties(inf, $FREE);
	return NIL;
    }

    public static final SubLObject note_inference_invalid_alt(SubLObject inference) {
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_status(inference, $DEAD);
	return inference;
    }

    public static SubLObject note_inference_invalid(final SubLObject inference) {
	inference_datastructures_inference.set_inference_status(inference, $DEAD);
	return inference;
    }

    public static final SubLObject inference_suid_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_suid(inference);
    }

    public static SubLObject inference_suid(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_suid(inference);
    }

    public static final SubLObject inference_problem_store_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_problem_store(inference);
    }

    public static SubLObject inference_problem_store(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_problem_store(inference);
    }

    public static final SubLObject inference_forward_propagate_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_forward_propagate(inference);
    }

    public static SubLObject inference_forward_propagate(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_forward_propagate(inference);
    }

    public static final SubLObject inference_input_mt_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_input_mt(inference);
    }

    public static SubLObject inference_input_mt(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_input_mt(inference);
    }

    public static final SubLObject inference_input_el_query_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_input_el_query(inference);
    }

    public static SubLObject inference_input_el_query(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_input_el_query(inference);
    }

    public static final SubLObject inference_input_non_explanatory_el_query_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_input_non_explanatory_el_query(inference);
    }

    public static SubLObject inference_input_non_explanatory_el_query(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_input_non_explanatory_el_query(inference);
    }

    /**
     * Return query-properties-p; the input query properties for INFERENCE.
     */
    @LispMethod(comment = "Return query-properties-p; the input query properties for INFERENCE.")
    public static final SubLObject inference_input_query_properties_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_input_query_properties(inference);
    }

    /**
     * Return query-properties-p; the input query properties for INFERENCE.
     */
    @LispMethod(comment = "Return query-properties-p; the input query properties for INFERENCE.")
    public static SubLObject inference_input_query_properties(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_input_query_properties(inference);
    }

    public static final SubLObject inference_mt_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_mt(inference);
    }

    public static SubLObject inference_mt(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_mt(inference);
    }

    public static final SubLObject inference_el_query_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_el_query(inference);
    }

    public static SubLObject inference_el_query(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_el_query(inference);
    }

    public static SubLObject inference_el_ist_query(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return make_ist_sentence(inference_datastructures_inference.infrnc_mt(inference), inference_datastructures_inference.infrnc_el_query(inference));
    }

    /**
     * Returns bindings which map HL proven query wrt INFERENCE ->
     * EL proven query wrt INFERENCE
     */
    @LispMethod(comment = "Returns bindings which map HL proven query wrt INFERENCE ->\r\nEL proven query wrt INFERENCE\nReturns bindings which map HL proven query wrt INFERENCE ->\nEL proven query wrt INFERENCE")
    public static final SubLObject inference_el_bindings_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_el_bindings(inference);
    }

    /**
     * Returns bindings which map HL proven query wrt INFERENCE ->
     * EL proven query wrt INFERENCE
     */
    @LispMethod(comment = "Returns bindings which map HL proven query wrt INFERENCE ->\r\nEL proven query wrt INFERENCE\nReturns bindings which map HL proven query wrt INFERENCE ->\nEL proven query wrt INFERENCE")
    public static SubLObject inference_el_bindings(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_el_bindings(inference);
    }

    public static final SubLObject inference_hl_query_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_hl_query(inference);
    }

    public static SubLObject inference_hl_query(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_hl_query(inference);
    }

    public static final SubLObject inference_explanatory_subquery_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_explanatory_subquery(inference);
    }

    public static SubLObject inference_explanatory_subquery(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_explanatory_subquery(inference);
    }

    public static final SubLObject inference_non_explanatory_subquery_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_non_explanatory_subquery(inference);
    }

    public static SubLObject inference_non_explanatory_subquery(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_non_explanatory_subquery(inference);
    }

    public static final SubLObject inference_free_hl_vars_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_free_hl_vars(inference);
    }

    public static SubLObject inference_free_hl_vars(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_free_hl_vars(inference);
    }

    public static final SubLObject inference_hypothetical_bindings_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_hypothetical_bindings(inference);
    }

    public static SubLObject inference_hypothetical_bindings(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_hypothetical_bindings(inference);
    }

    public static final SubLObject inference_answer_id_index_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_answer_id_index(inference);
    }

    public static SubLObject inference_answer_id_index(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_answer_id_index(inference);
    }

    public static final SubLObject inference_answer_bindings_index_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_answer_bindings_index(inference);
    }

    public static SubLObject inference_answer_bindings_index(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_answer_bindings_index(inference);
    }

    public static final SubLObject inference_new_answer_id_start_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_new_answer_id_start(inference);
    }

    public static SubLObject inference_new_answer_id_start(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_new_answer_id_start(inference);
    }

    public static final SubLObject inference_new_answer_justifications_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_new_answer_justifications(inference);
    }

    public static SubLObject inference_new_answer_justifications(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_new_answer_justifications(inference);
    }

    public static final SubLObject inference_status_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_status(inference);
    }

    public static SubLObject inference_status(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_status(inference);
    }

    public static final SubLObject inference_suspend_status_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_suspend_status(inference);
    }

    public static SubLObject inference_suspend_status(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_suspend_status(inference);
    }

    public static final SubLObject inference_root_link_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_root_link(inference);
    }

    public static SubLObject inference_root_link(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_root_link(inference);
    }

    public static final SubLObject inference_relevant_problems_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_relevant_problems(inference);
    }

    public static SubLObject inference_relevant_problems(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_relevant_problems(inference);
    }

    public static final SubLObject inference_strategy_set_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_strategy_set(inference);
    }

    public static SubLObject inference_strategy_set(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_strategy_set(inference);
    }

    public static final SubLObject inference_control_process_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_control_process(inference);
    }

    public static SubLObject inference_control_process(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_control_process(inference);
    }

    public static final SubLObject inference_interrupting_processes_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_interrupting_processes(inference);
    }

    public static SubLObject inference_interrupting_processes(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_interrupting_processes(inference);
    }

    public static final SubLObject inference_max_transformation_depth_reached_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_max_transformation_depth_reached(inference);
    }

    public static SubLObject inference_max_transformation_depth_reached(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_max_transformation_depth_reached(inference);
    }

    public static final SubLObject inference_answer_language_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_answer_language(inference);
    }

    public static SubLObject inference_answer_language(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_answer_language(inference);
    }

    public static final SubLObject inference_cache_resultsP_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_cache_resultsP(inference);
    }

    public static SubLObject inference_cache_resultsP(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_cache_resultsP(inference);
    }

    public static final SubLObject inference_blockingP_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_blockingP(inference);
    }

    public static SubLObject inference_blockingP(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_blockingP(inference);
    }

    public static final SubLObject inference_disjunction_free_el_vars_policy_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_disjunction_free_el_vars_policy(inference);
    }

    public static SubLObject inference_disjunction_free_el_vars_policy(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_disjunction_free_el_vars_policy(inference);
    }

    public static final SubLObject inference_result_uniqueness_criterion_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_result_uniqueness_criterion(inference);
    }

    public static SubLObject inference_result_uniqueness_criterion(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_result_uniqueness_criterion(inference);
    }

    public static final SubLObject inference_allow_hl_predicate_transformationP_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_allow_hl_predicate_transformationP(inference);
    }

    public static SubLObject inference_allow_hl_predicate_transformationP(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_allow_hl_predicate_transformationP(inference);
    }

    public static final SubLObject inference_allow_unbound_predicate_transformationP_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_allow_unbound_predicate_transformationP(inference);
    }

    public static SubLObject inference_allow_unbound_predicate_transformationP(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_allow_unbound_predicate_transformationP(inference);
    }

    public static final SubLObject inference_allow_evaluatable_predicate_transformationP_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_allow_evaluatable_predicate_transformationP(inference);
    }

    public static SubLObject inference_allow_evaluatable_predicate_transformationP(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_allow_evaluatable_predicate_transformationP(inference);
    }

    public static final SubLObject inference_allow_indeterminate_resultsP_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_allow_indeterminate_resultsP(inference);
    }

    public static SubLObject inference_allow_indeterminate_resultsP(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_allow_indeterminate_resultsP(inference);
    }

    public static final SubLObject inference_allowed_rules_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_allowed_rules(inference);
    }

    public static SubLObject inference_allowed_rules(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_allowed_rules(inference);
    }

    public static final SubLObject inference_forbidden_rules_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_forbidden_rules(inference);
    }

    public static SubLObject inference_forbidden_rules(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_forbidden_rules(inference);
    }

    public static final SubLObject inference_allowed_modules_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_allowed_modules(inference);
    }

    public static SubLObject inference_allowed_modules(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_allowed_modules(inference);
    }

    public static final SubLObject inference_allow_abnormality_checkingP_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_allow_abnormality_checkingP(inference);
    }

    public static SubLObject inference_allow_abnormality_checkingP(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_allow_abnormality_checkingP(inference);
    }

    public static final SubLObject inference_transitive_closure_mode_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_transitive_closure_mode(inference);
    }

    public static SubLObject inference_transitive_closure_mode(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_transitive_closure_mode(inference);
    }

    public static final SubLObject inference_problem_store_privateP_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_problem_store_privateP(inference);
    }

    public static SubLObject inference_problem_store_privateP(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_problem_store_privateP(inference);
    }

    /**
     *
     *
     * @return booleanp, whether INFERENCE was specified to be continuable.
     */
    @LispMethod(comment = "@return booleanp, whether INFERENCE was specified to be continuable.")
    public static final SubLObject inference_continuableP_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_continuableP(inference);
    }

    /**
     *
     *
     * @return booleanp, whether INFERENCE was specified to be continuable.
     */
    @LispMethod(comment = "@return booleanp, whether INFERENCE was specified to be continuable.")
    public static SubLObject inference_continuableP(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_continuableP(inference);
    }

    /**
     *
     *
     * @return booleanp, whether INFERENCE was specified to be browsable.
     */
    @LispMethod(comment = "@return booleanp, whether INFERENCE was specified to be browsable.")
    public static final SubLObject inference_browsableP_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_browsableP(inference);
    }

    /**
     *
     *
     * @return booleanp, whether INFERENCE was specified to be browsable.
     */
    @LispMethod(comment = "@return booleanp, whether INFERENCE was specified to be browsable.")
    public static SubLObject inference_browsableP(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_browsableP(inference);
    }

    /**
     *
     *
     * @return inference-return-type-p, the return type of inference stored in :return.
     */
    @LispMethod(comment = "@return inference-return-type-p, the return type of inference stored in :return.")
    public static final SubLObject inference_return_type_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_return_type(inference);
    }

    /**
     *
     *
     * @return inference-return-type-p, the return type of inference stored in :return.
     */
    @LispMethod(comment = "@return inference-return-type-p, the return type of inference stored in :return.")
    public static SubLObject inference_return_type(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_return_type(inference);
    }

    /**
     *
     *
     * @return nil or universal-time-p
    NIL indicates there is no time cutoff
     */
    @LispMethod(comment = "@return nil or universal-time-p\r\nNIL indicates there is no time cutoff")
    public static final SubLObject inference_max_time_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_max_time(inference);
    }

    /**
     *
     *
     * @return nil or universal-time-p
    NIL indicates there is no time cutoff
     */
    @LispMethod(comment = "@return nil or universal-time-p\r\nNIL indicates there is no time cutoff")
    public static SubLObject inference_max_time(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_max_time(inference);
    }

    /**
     *
     *
     * @return nil or non-negative-integer-p
    NIL indicates there is no step cutoff
     */
    @LispMethod(comment = "@return nil or non-negative-integer-p\r\nNIL indicates there is no step cutoff")
    public static final SubLObject inference_max_step_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_max_step(inference);
    }

    /**
     *
     *
     * @return nil or non-negative-integer-p
    NIL indicates there is no step cutoff
     */
    @LispMethod(comment = "@return nil or non-negative-integer-p\r\nNIL indicates there is no step cutoff")
    public static SubLObject inference_max_step(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_max_step(inference);
    }

    /**
     *
     *
     * @return inference-mode-p
     */
    @LispMethod(comment = "@return inference-mode-p")
    public static final SubLObject inference_mode_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_mode(inference);
    }

    /**
     *
     *
     * @return inference-mode-p
     */
    @LispMethod(comment = "@return inference-mode-p")
    public static SubLObject inference_mode(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_mode(inference);
    }

    /**
     *
     *
     * @return nil or universal-time-p
    NIL indicates there is no time cutoff
     */
    @LispMethod(comment = "@return nil or universal-time-p\r\nNIL indicates there is no time cutoff")
    public static final SubLObject inference_forward_max_time_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_forward_max_time(inference);
    }

    /**
     *
     *
     * @return nil or universal-time-p
    NIL indicates there is no time cutoff
     */
    @LispMethod(comment = "@return nil or universal-time-p\r\nNIL indicates there is no time cutoff")
    public static SubLObject inference_forward_max_time(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_forward_max_time(inference);
    }

    /**
     *
     *
     * @return nil or non-negative-integer-p
    NIL indicates there is no number limit
     */
    @LispMethod(comment = "@return nil or non-negative-integer-p\r\nNIL indicates there is no number limit")
    public static final SubLObject inference_max_number_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_max_number(inference);
    }

    /**
     *
     *
     * @return nil or non-negative-integer-p
    NIL indicates there is no number limit
     */
    @LispMethod(comment = "@return nil or non-negative-integer-p\r\nNIL indicates there is no number limit")
    public static SubLObject inference_max_number(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_max_number(inference);
    }

    /**
     *
     *
     * @return nil or non-negative-integer-p
    NIL indicates there is no limit on proof depth
     */
    @LispMethod(comment = "@return nil or non-negative-integer-p\r\nNIL indicates there is no limit on proof depth")
    public static final SubLObject inference_max_proof_depth_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_max_proof_depth(inference);
    }

    /**
     *
     *
     * @return nil or non-negative-integer-p
    NIL indicates there is no limit on proof depth
     */
    @LispMethod(comment = "@return nil or non-negative-integer-p\r\nNIL indicates there is no limit on proof depth")
    public static SubLObject inference_max_proof_depth(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_max_proof_depth(inference);
    }

    public static final SubLObject inference_max_transformation_depth_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_max_transformation_depth(inference);
    }

    public static SubLObject inference_max_transformation_depth(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_max_transformation_depth(inference);
    }

    public static SubLObject inference_min_rule_utility(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_min_rule_utility(inference);
    }

    /**
     *
     *
     * @return probability-p
    1 means we must be 100% sure we are done before halting
     */
    @LispMethod(comment = "@return probability-p\r\n1 means we must be 100% sure we are done before halting")
    public static final SubLObject inference_probably_approximately_done_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_probably_approximately_done(inference);
    }

    /**
     *
     *
     * @return probability-p
    1 means we must be 100% sure we are done before halting
     */
    @LispMethod(comment = "@return probability-p\r\n1 means we must be 100% sure we are done before halting")
    public static SubLObject inference_probably_approximately_done(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_probably_approximately_done(inference);
    }

    public static final SubLObject inference_metrics_template_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_metrics_template(inference);
    }

    public static SubLObject inference_metrics_template(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_metrics_template(inference);
    }

    public static final SubLObject inference_start_universal_time_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_start_universal_time(inference);
    }

    public static SubLObject inference_start_universal_time(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_start_universal_time(inference);
    }

    public static final SubLObject inference_start_internal_real_time_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_start_internal_real_time(inference);
    }

    public static SubLObject inference_start_internal_real_time(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_start_internal_real_time(inference);
    }

    public static final SubLObject inference_end_internal_real_time_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_end_internal_real_time(inference);
    }

    public static SubLObject inference_end_internal_real_time(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_end_internal_real_time(inference);
    }

    public static final SubLObject inference_pad_internal_real_time_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_pad_internal_real_time(inference);
    }

    public static SubLObject inference_pad_internal_real_time(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_pad_internal_real_time(inference);
    }

    public static SubLObject inference_hypothesization_time(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_hypothesization_time(inference);
    }

    /**
     * This is the total time spent in all of INFERENCE's previous continuations.  Use @xref inference-cumulative-time-so-far
     * if you want to include the time spent so far in the current continuation.
     */
    @LispMethod(comment = "This is the total time spent in all of INFERENCE\'s previous continuations.  Use @xref inference-cumulative-time-so-far\r\nif you want to include the time spent so far in the current continuation.\nThis is the total time spent in all of INFERENCE\'s previous continuations.  Use @xref inference-cumulative-time-so-far\nif you want to include the time spent so far in the current continuation.")
    public static final SubLObject inference_cumulative_time_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_cumulative_time(inference);
    }

    /**
     * This is the total time spent in all of INFERENCE's previous continuations.  Use @xref inference-cumulative-time-so-far
     * if you want to include the time spent so far in the current continuation.
     */
    @LispMethod(comment = "This is the total time spent in all of INFERENCE\'s previous continuations.  Use @xref inference-cumulative-time-so-far\r\nif you want to include the time spent so far in the current continuation.\nThis is the total time spent in all of INFERENCE\'s previous continuations.  Use @xref inference-cumulative-time-so-far\nif you want to include the time spent so far in the current continuation.")
    public static SubLObject inference_cumulative_time(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_cumulative_time(inference);
    }

    /**
     * The number of inference steps performed so far for this continuation of the inference
     */
    @LispMethod(comment = "The number of inference steps performed so far for this continuation of the inference")
    public static final SubLObject inference_step_count_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_step_count(inference);
    }

    /**
     * The number of inference steps performed so far for this continuation of the inference
     */
    @LispMethod(comment = "The number of inference steps performed so far for this continuation of the inference")
    public static SubLObject inference_step_count(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_step_count(inference);
    }

    /**
     * The number of inference steps performed so far for this inference, summed over all continuations
     */
    @LispMethod(comment = "The number of inference steps performed so far for this inference, summed over all continuations")
    public static final SubLObject inference_cumulative_step_count_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_cumulative_step_count(inference);
    }

    /**
     * The number of inference steps performed so far for this inference, summed over all continuations
     */
    @LispMethod(comment = "The number of inference steps performed so far for this inference, summed over all continuations")
    public static SubLObject inference_cumulative_step_count(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_cumulative_step_count(inference);
    }

    public static final SubLObject inference_problem_working_time_data_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_problem_working_time_data(inference);
    }

    public static SubLObject inference_problem_working_time_data(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_problem_working_time_data(inference);
    }

    public static final SubLObject inference_events_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_events(inference);
    }

    public static SubLObject inference_events(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_events(inference);
    }

    public static final SubLObject inference_accumulators_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_accumulators(inference);
    }

    public static SubLObject inference_accumulators(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_accumulators(inference);
    }

    public static final SubLObject inference_proof_watermark_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_proof_watermark(inference);
    }

    public static SubLObject inference_proof_watermark(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_proof_watermark(inference);
    }

    public static final SubLObject inference_type_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_type(inference);
    }

    public static SubLObject inference_type(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_type(inference);
    }

    public static final SubLObject inference_data_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_data(inference);
    }

    public static SubLObject inference_data(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_data(inference);
    }

    public static SubLObject inference_properties(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return inference_datastructures_inference.infrnc_properties(inference);
    }

    public static final SubLObject set_inference_forward_propagate_alt(SubLObject inference, SubLObject forward_propagate) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	if (NIL != forward_propagate) {
	    SubLTrampolineFile.checkType(forward_propagate, FORWARD_PROPAGATE_P);
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_forward_propagate(inference, forward_propagate);
	return inference;
    }

    public static SubLObject set_inference_forward_propagate(final SubLObject inference, final SubLObject forward_propagate) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	if (((NIL != forward_propagate) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == inference_datastructures_forward_propagate.forward_propagate_p(forward_propagate))) {
	    throw new AssertionError(forward_propagate);
	}
	inference_datastructures_inference._csetf_infrnc_forward_propagate(inference, forward_propagate);
	return inference;
    }

    public static final SubLObject set_inference_input_mt_alt(SubLObject inference, SubLObject mt) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	if (NIL != mt) {
	    SubLTrampolineFile.checkType(mt, POSSIBLY_MT_P);
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_input_mt(inference, mt);
	return inference;
    }

    public static SubLObject set_inference_input_mt(final SubLObject inference, final SubLObject mt) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	if (((NIL != mt) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == hlmt.possibly_mt_p(mt))) {
	    throw new AssertionError(mt);
	}
	inference_datastructures_inference._csetf_infrnc_input_mt(inference, mt);
	return inference;
    }

    public static final SubLObject set_inference_input_el_query_alt(SubLObject inference, SubLObject el_query) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	if (NIL != el_query) {
	    SubLTrampolineFile.checkType(el_query, POSSIBLY_INFERENCE_SENTENCE_P);
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_input_el_query(inference, el_query);
	return inference;
    }

    public static SubLObject set_inference_input_el_query(final SubLObject inference, final SubLObject el_query) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	if (((NIL != el_query) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == possibly_inference_sentence_p(el_query))) {
	    throw new AssertionError(el_query);
	}
	inference_datastructures_inference._csetf_infrnc_input_el_query(inference, el_query);
	return inference;
    }

    public static final SubLObject set_inference_input_non_explanatory_el_query_alt(SubLObject inference, SubLObject el_query) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	if (NIL != el_query) {
	    SubLTrampolineFile.checkType(el_query, POSSIBLY_INFERENCE_SENTENCE_P);
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_input_non_explanatory_el_query(inference, el_query);
	return inference;
    }

    public static SubLObject set_inference_input_non_explanatory_el_query(final SubLObject inference, final SubLObject el_query) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	if (((NIL != el_query) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == possibly_inference_sentence_p(el_query))) {
	    throw new AssertionError(el_query);
	}
	inference_datastructures_inference._csetf_infrnc_input_non_explanatory_el_query(inference, el_query);
	return inference;
    }

    public static final SubLObject set_inference_input_query_properties_alt(SubLObject inference, SubLObject query_properties) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	if (NIL != query_properties) {
	    SubLTrampolineFile.checkType(query_properties, QUERY_PROPERTIES_P);
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_input_query_properties(inference, query_properties);
	return inference;
    }

    public static SubLObject set_inference_input_query_properties(final SubLObject inference, final SubLObject query_properties) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	if (((NIL != query_properties) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == inference_datastructures_enumerated_types.query_properties_p(query_properties))) {
	    throw new AssertionError(query_properties);
	}
	inference_datastructures_inference._csetf_infrnc_input_query_properties(inference, query_properties);
	return inference;
    }

    public static final SubLObject set_inference_mt_alt(SubLObject inference, SubLObject mt) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	if (NIL != mt) {
	    SubLTrampolineFile.checkType(mt, HLMT_P);
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_mt(inference, mt);
	return inference;
    }

    public static SubLObject set_inference_mt(final SubLObject inference, final SubLObject mt) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	if (((NIL != mt) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == hlmt.hlmt_p(mt))) {
	    throw new AssertionError(mt);
	}
	inference_datastructures_inference._csetf_infrnc_mt(inference, mt);
	return inference;
    }

    public static final SubLObject set_inference_el_query_alt(SubLObject inference, SubLObject el_query) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	if (NIL != el_query) {
	    SubLTrampolineFile.checkType(el_query, POSSIBLY_INFERENCE_SENTENCE_P);
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_el_query(inference, el_query);
	return inference;
    }

    public static SubLObject set_inference_el_query(final SubLObject inference, final SubLObject el_query) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	if (((NIL != el_query) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == possibly_inference_sentence_p(el_query))) {
	    throw new AssertionError(el_query);
	}
	inference_datastructures_inference._csetf_infrnc_el_query(inference, el_query);
	return inference;
    }

    public static final SubLObject set_inference_el_bindings_alt(SubLObject inference, SubLObject el_bindings) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(el_bindings, BINDING_LIST_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_el_bindings(inference, el_bindings);
	return inference;
    }

    public static SubLObject set_inference_el_bindings(final SubLObject inference, final SubLObject el_bindings) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != bindings.binding_list_p(el_bindings) : "! bindings.binding_list_p(el_bindings) " + ("bindings.binding_list_p(el_bindings) " + "CommonSymbols.NIL != bindings.binding_list_p(el_bindings) ") + el_bindings;
	inference_datastructures_inference._csetf_infrnc_el_bindings(inference, el_bindings);
	return inference;
    }

    public static final SubLObject set_inference_hl_query_alt(SubLObject inference, SubLObject hl_query) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(hl_query, PROBLEM_QUERY_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_hl_query(inference, hl_query);
	return inference;
    }

    public static SubLObject set_inference_hl_query(final SubLObject inference, final SubLObject hl_query) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_problem_query.problem_query_p(hl_query) : "! inference_datastructures_problem_query.problem_query_p(hl_query) "
		+ ("inference_datastructures_problem_query.problem_query_p(hl_query) " + "CommonSymbols.NIL != inference_datastructures_problem_query.problem_query_p(hl_query) ") + hl_query;
	inference_datastructures_inference._csetf_infrnc_hl_query(inference, hl_query);
	return inference;
    }

    public static final SubLObject set_inference_explanatory_subquery_alt(SubLObject inference, SubLObject explanatory_subquery) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(explanatory_subquery, EXPLANATORY_SUBQUERY_SPEC_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_explanatory_subquery(inference, explanatory_subquery);
	return inference;
    }

    public static SubLObject set_inference_explanatory_subquery(final SubLObject inference, final SubLObject explanatory_subquery) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_problem_query.explanatory_subquery_spec_p(explanatory_subquery) : "! inference_datastructures_problem_query.explanatory_subquery_spec_p(explanatory_subquery) "
		+ ("inference_datastructures_problem_query.explanatory_subquery_spec_p(explanatory_subquery) " + "CommonSymbols.NIL != inference_datastructures_problem_query.explanatory_subquery_spec_p(explanatory_subquery) ") + explanatory_subquery;
	inference_datastructures_inference._csetf_infrnc_explanatory_subquery(inference, explanatory_subquery);
	return inference;
    }

    public static final SubLObject set_inference_non_explanatory_subquery_alt(SubLObject inference, SubLObject non_explanatory_subquery) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(non_explanatory_subquery, NON_EXPLANATORY_SUBQUERY_SPEC_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_non_explanatory_subquery(inference, non_explanatory_subquery);
	return inference;
    }

    public static SubLObject set_inference_non_explanatory_subquery(final SubLObject inference, final SubLObject non_explanatory_subquery) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_problem_query.non_explanatory_subquery_spec_p(non_explanatory_subquery) : "! inference_datastructures_problem_query.non_explanatory_subquery_spec_p(non_explanatory_subquery) "
		+ ("inference_datastructures_problem_query.non_explanatory_subquery_spec_p(non_explanatory_subquery) " + "CommonSymbols.NIL != inference_datastructures_problem_query.non_explanatory_subquery_spec_p(non_explanatory_subquery) ") + non_explanatory_subquery;
	inference_datastructures_inference._csetf_infrnc_non_explanatory_subquery(inference, non_explanatory_subquery);
	return inference;
    }

    public static final SubLObject set_inference_free_hl_vars_alt(SubLObject inference, SubLObject free_hl_vars) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(free_hl_vars, LISTP);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_free_hl_vars(inference, free_hl_vars);
	return inference;
    }

    public static SubLObject set_inference_free_hl_vars(final SubLObject inference, final SubLObject free_hl_vars) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != listp(free_hl_vars) : "! listp(free_hl_vars) " + ("Types.listp(free_hl_vars) " + "CommonSymbols.NIL != Types.listp(free_hl_vars) ") + free_hl_vars;
	inference_datastructures_inference._csetf_infrnc_free_hl_vars(inference, free_hl_vars);
	return inference;
    }

    public static final SubLObject set_inference_hypothetical_bindings_alt(SubLObject inference, SubLObject hypothetical_bindings) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	if (NIL != hypothetical_bindings) {
	    SubLTrampolineFile.checkType(hypothetical_bindings, BINDING_LIST_P);
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_hypothetical_bindings(inference, hypothetical_bindings);
	return inference;
    }

    public static SubLObject set_inference_hypothetical_bindings(final SubLObject inference, final SubLObject hypothetical_bindings) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	if (((NIL != hypothetical_bindings) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == bindings.binding_list_p(hypothetical_bindings))) {
	    throw new AssertionError(hypothetical_bindings);
	}
	inference_datastructures_inference._csetf_infrnc_hypothetical_bindings(inference, hypothetical_bindings);
	return inference;
    }

    public static final SubLObject set_inference_status_alt(SubLObject inference, SubLObject status) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(status, INFERENCE_STATUS_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_status(inference, status);
	if (NIL == inference_datastructures_enumerated_types.inference_suspend_status_applicableP(status)) {
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_suspend_status(inference, NIL);
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.possibly_signal_inference_status_change(inference);
	return inference;
    }

    public static SubLObject set_inference_status(final SubLObject inference, final SubLObject status) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_enumerated_types.inference_status_p(status) : "! inference_datastructures_enumerated_types.inference_status_p(status) "
		+ ("inference_datastructures_enumerated_types.inference_status_p(status) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.inference_status_p(status) ") + status;
	inference_datastructures_inference._csetf_infrnc_status(inference, status);
	if (NIL == inference_datastructures_enumerated_types.inference_suspend_status_applicableP(status)) {
	    inference_datastructures_inference._csetf_infrnc_suspend_status(inference, NIL);
	}
	inference_datastructures_inference.possibly_signal_inference_status_change(inference);
	return inference;
    }

    public static final SubLObject set_inference_suspend_status_alt(SubLObject inference, SubLObject suspend_status) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(suspend_status, INFERENCE_SUSPEND_STATUS_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_suspend_status(inference, suspend_status);
	return inference;
    }

    public static SubLObject set_inference_suspend_status(final SubLObject inference, final SubLObject suspend_status) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_enumerated_types.inference_suspend_status_p(suspend_status) : "! inference_datastructures_enumerated_types.inference_suspend_status_p(suspend_status) "
		+ ("inference_datastructures_enumerated_types.inference_suspend_status_p(suspend_status) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.inference_suspend_status_p(suspend_status) ") + suspend_status;
	inference_datastructures_inference._csetf_infrnc_suspend_status(inference, suspend_status);
	return inference;
    }

    public static final SubLObject set_inference_root_link_alt(SubLObject inference, SubLObject root_link) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(root_link, ANSWER_LINK_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_root_link(inference, root_link);
	return inference;
    }

    public static SubLObject set_inference_root_link(final SubLObject inference, final SubLObject root_link) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_worker_answer.answer_link_p(root_link) : "! inference_worker_answer.answer_link_p(root_link) " + ("inference_worker_answer.answer_link_p(root_link) " + "CommonSymbols.NIL != inference_worker_answer.answer_link_p(root_link) ") + root_link;
	inference_datastructures_inference._csetf_infrnc_root_link(inference, root_link);
	return inference;
    }

    public static final SubLObject set_inference_control_process_alt(SubLObject inference, SubLObject process) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	if (NIL != process) {
	    SubLTrampolineFile.checkType(process, PROCESSP);
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_control_process(inference, process);
	return inference;
    }

    public static SubLObject set_inference_control_process(final SubLObject inference, final SubLObject process) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	if (((NIL != process) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == processp(process))) {
	    throw new AssertionError(process);
	}
	inference_datastructures_inference._csetf_infrnc_control_process(inference, process);
	return inference;
    }

    public static final SubLObject set_inference_max_transformation_depth_reached_alt(SubLObject inference, SubLObject depth) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(depth, NON_NEGATIVE_INTEGER_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_transformation_depth_reached(inference, depth);
	return inference;
    }

    public static SubLObject set_inference_max_transformation_depth_reached(final SubLObject inference, final SubLObject depth) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != non_negative_integer_p(depth) : "! subl_promotions.non_negative_integer_p(depth) " + ("subl_promotions.non_negative_integer_p(depth) " + "CommonSymbols.NIL != subl_promotions.non_negative_integer_p(depth) ") + depth;
	inference_datastructures_inference._csetf_infrnc_max_transformation_depth_reached(inference, depth);
	return inference;
    }

    public static final SubLObject set_inference_disjunction_free_el_vars_policy_alt(SubLObject inference, SubLObject disjunction_free_el_vars_policy) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(disjunction_free_el_vars_policy, INFERENCE_DISJUNCTION_FREE_EL_VARS_POLICY_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_disjunction_free_el_vars_policy(inference, disjunction_free_el_vars_policy);
	return inference;
    }

    public static SubLObject set_inference_disjunction_free_el_vars_policy(final SubLObject inference, final SubLObject disjunction_free_el_vars_policy) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_enumerated_types.inference_disjunction_free_el_vars_policy_p(disjunction_free_el_vars_policy) : "! inference_datastructures_enumerated_types.inference_disjunction_free_el_vars_policy_p(disjunction_free_el_vars_policy) "
		+ ("inference_datastructures_enumerated_types.inference_disjunction_free_el_vars_policy_p(disjunction_free_el_vars_policy) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.inference_disjunction_free_el_vars_policy_p(disjunction_free_el_vars_policy) ")
		+ disjunction_free_el_vars_policy;
	inference_datastructures_inference._csetf_infrnc_disjunction_free_el_vars_policy(inference, disjunction_free_el_vars_policy);
	return inference;
    }

    public static final SubLObject set_inference_result_uniqueness_criterion_alt(SubLObject inference, SubLObject criterion) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(criterion, RESULT_UNIQUENESS_CRITERION_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_result_uniqueness_criterion(inference, criterion);
	return inference;
    }

    public static SubLObject set_inference_result_uniqueness_criterion(final SubLObject inference, final SubLObject criterion) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_enumerated_types.result_uniqueness_criterion_p(criterion) : "! inference_datastructures_enumerated_types.result_uniqueness_criterion_p(criterion) "
		+ ("inference_datastructures_enumerated_types.result_uniqueness_criterion_p(criterion) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.result_uniqueness_criterion_p(criterion) ") + criterion;
	inference_datastructures_inference._csetf_infrnc_result_uniqueness_criterion(inference, criterion);
	return inference;
    }

    public static final SubLObject set_inference_allow_hl_predicate_transformation_alt(SubLObject inference, SubLObject allowP) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(allowP, BOOLEANP);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allow_hl_predicate_transformationP(inference, allowP);
	return inference;
    }

    public static SubLObject set_inference_allow_hl_predicate_transformation(final SubLObject inference, final SubLObject allowP) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != booleanp(allowP) : "! booleanp(allowP) " + ("Types.booleanp(allowP) " + "CommonSymbols.NIL != Types.booleanp(allowP) ") + allowP;
	inference_datastructures_inference._csetf_infrnc_allow_hl_predicate_transformationP(inference, allowP);
	return inference;
    }

    public static final SubLObject set_inference_allow_unbound_predicate_transformation_alt(SubLObject inference, SubLObject allowP) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(allowP, BOOLEANP);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allow_unbound_predicate_transformationP(inference, allowP);
	return inference;
    }

    public static SubLObject set_inference_allow_unbound_predicate_transformation(final SubLObject inference, final SubLObject allowP) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != booleanp(allowP) : "! booleanp(allowP) " + ("Types.booleanp(allowP) " + "CommonSymbols.NIL != Types.booleanp(allowP) ") + allowP;
	inference_datastructures_inference._csetf_infrnc_allow_unbound_predicate_transformationP(inference, allowP);
	return inference;
    }

    public static final SubLObject set_inference_allow_evaluatable_predicate_transformation_alt(SubLObject inference, SubLObject allowP) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(allowP, BOOLEANP);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allow_evaluatable_predicate_transformationP(inference, allowP);
	return inference;
    }

    public static SubLObject set_inference_allow_evaluatable_predicate_transformation(final SubLObject inference, final SubLObject allowP) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != booleanp(allowP) : "! booleanp(allowP) " + ("Types.booleanp(allowP) " + "CommonSymbols.NIL != Types.booleanp(allowP) ") + allowP;
	inference_datastructures_inference._csetf_infrnc_allow_evaluatable_predicate_transformationP(inference, allowP);
	return inference;
    }

    public static final SubLObject set_inference_allow_indeterminate_results_alt(SubLObject inference, SubLObject allowP) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(allowP, BOOLEANP);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allow_indeterminate_resultsP(inference, allowP);
	return inference;
    }

    public static SubLObject set_inference_allow_indeterminate_results(final SubLObject inference, final SubLObject allowP) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != booleanp(allowP) : "! booleanp(allowP) " + ("Types.booleanp(allowP) " + "CommonSymbols.NIL != Types.booleanp(allowP) ") + allowP;
	inference_datastructures_inference._csetf_infrnc_allow_indeterminate_resultsP(inference, allowP);
	return inference;
    }

    public static final SubLObject set_inference_allowed_rules_alt(SubLObject inference, SubLObject allowed_rules) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allowed_rules(inference, allowed_rules);
	return inference;
    }

    public static SubLObject set_inference_allowed_rules(final SubLObject inference, final SubLObject allowed_rules) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	inference_datastructures_inference._csetf_infrnc_allowed_rules(inference, allowed_rules);
	return inference;
    }

    public static final SubLObject set_inference_forbidden_rules_alt(SubLObject inference, SubLObject forbidden_rules) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_forbidden_rules(inference, forbidden_rules);
	return inference;
    }

    public static SubLObject set_inference_forbidden_rules(final SubLObject inference, final SubLObject forbidden_rules) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	inference_datastructures_inference._csetf_infrnc_forbidden_rules(inference, forbidden_rules);
	return inference;
    }

    public static final SubLObject set_inference_allowed_modules_alt(SubLObject inference, SubLObject allowed_modules) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(allowed_modules, ALLOWED_MODULES_SPEC_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allowed_modules(inference, allowed_modules);
	return inference;
    }

    public static SubLObject set_inference_allowed_modules(final SubLObject inference, final SubLObject allowed_modules) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_modules.allowed_modules_spec_p(allowed_modules) : "! inference_modules.allowed_modules_spec_p(allowed_modules) " + ("inference_modules.allowed_modules_spec_p(allowed_modules) " + "CommonSymbols.NIL != inference_modules.allowed_modules_spec_p(allowed_modules) ")
		+ allowed_modules;
	inference_datastructures_inference._csetf_infrnc_allowed_modules(inference, allowed_modules);
	return inference;
    }

    public static final SubLObject set_inference_allow_abnormality_checking_alt(SubLObject inference, SubLObject allowP) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(allowP, BOOLEANP);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_allow_abnormality_checkingP(inference, allowP);
	return inference;
    }

    public static SubLObject set_inference_allow_abnormality_checking(final SubLObject inference, final SubLObject allowP) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != booleanp(allowP) : "! booleanp(allowP) " + ("Types.booleanp(allowP) " + "CommonSymbols.NIL != Types.booleanp(allowP) ") + allowP;
	inference_datastructures_inference._csetf_infrnc_allow_abnormality_checkingP(inference, allowP);
	return inference;
    }

    public static final SubLObject set_inference_transitive_closure_mode_alt(SubLObject inference, SubLObject transitive_closure_mode) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(transitive_closure_mode, INFERENCE_TRANSITIVE_CLOSURE_MODE_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_transitive_closure_mode(inference, transitive_closure_mode);
	return inference;
    }

    public static SubLObject set_inference_transitive_closure_mode(final SubLObject inference, final SubLObject transitive_closure_mode) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_enumerated_types.inference_transitive_closure_mode_p(transitive_closure_mode) : "! inference_datastructures_enumerated_types.inference_transitive_closure_mode_p(transitive_closure_mode) "
		+ ("inference_datastructures_enumerated_types.inference_transitive_closure_mode_p(transitive_closure_mode) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.inference_transitive_closure_mode_p(transitive_closure_mode) ") + transitive_closure_mode;
	inference_datastructures_inference._csetf_infrnc_transitive_closure_mode(inference, transitive_closure_mode);
	return inference;
    }

    public static final SubLObject set_inference_problem_store_private_alt(SubLObject inference, SubLObject privateP) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(privateP, BOOLEANP);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_problem_store_privateP(inference, privateP);
	return inference;
    }

    public static SubLObject set_inference_problem_store_private(final SubLObject inference, final SubLObject privateP) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != booleanp(privateP) : "! booleanp(privateP) " + ("Types.booleanp(privateP) " + "CommonSymbols.NIL != Types.booleanp(privateP) ") + privateP;
	inference_datastructures_inference._csetf_infrnc_problem_store_privateP(inference, privateP);
	return inference;
    }

    public static final SubLObject set_inference_continuable_alt(SubLObject inference, SubLObject continuableP) {
	SubLTrampolineFile.checkType(continuableP, BOOLEANP);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_continuableP(inference, continuableP);
	return inference;
    }

    public static SubLObject set_inference_continuable(final SubLObject inference, final SubLObject continuableP) {
	assert NIL != booleanp(continuableP) : "! booleanp(continuableP) " + ("Types.booleanp(continuableP) " + "CommonSymbols.NIL != Types.booleanp(continuableP) ") + continuableP;
	inference_datastructures_inference._csetf_infrnc_continuableP(inference, continuableP);
	return inference;
    }

    public static final SubLObject set_inference_browsable_alt(SubLObject inference, SubLObject browsableP) {
	SubLTrampolineFile.checkType(browsableP, BOOLEANP);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_browsableP(inference, browsableP);
	return inference;
    }

    public static SubLObject set_inference_browsable(final SubLObject inference, final SubLObject browsableP) {
	assert NIL != booleanp(browsableP) : "! booleanp(browsableP) " + ("Types.booleanp(browsableP) " + "CommonSymbols.NIL != Types.booleanp(browsableP) ") + browsableP;
	inference_datastructures_inference._csetf_infrnc_browsableP(inference, browsableP);
	return inference;
    }

    public static final SubLObject set_inference_return_type_alt(SubLObject inference, SubLObject return_type) {
	SubLTrampolineFile.checkType(return_type, INFERENCE_RETURN_TYPE_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_return_type(inference, return_type);
	return inference;
    }

    public static SubLObject set_inference_return_type(final SubLObject inference, final SubLObject return_type) {
	assert NIL != inference_datastructures_enumerated_types.inference_return_type_p(return_type) : "! inference_datastructures_enumerated_types.inference_return_type_p(return_type) "
		+ ("inference_datastructures_enumerated_types.inference_return_type_p(return_type) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.inference_return_type_p(return_type) ") + return_type;
	inference_datastructures_inference._csetf_infrnc_return_type(inference, return_type);
	return inference;
    }

    public static final SubLObject set_inference_answer_language_alt(SubLObject inference, SubLObject answer_language) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(answer_language, INFERENCE_ANSWER_LANGUAGE_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_answer_language(inference, answer_language);
	return inference;
    }

    public static SubLObject set_inference_answer_language(final SubLObject inference, final SubLObject answer_language) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_enumerated_types.inference_answer_language_p(answer_language) : "! inference_datastructures_enumerated_types.inference_answer_language_p(answer_language) "
		+ ("inference_datastructures_enumerated_types.inference_answer_language_p(answer_language) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.inference_answer_language_p(answer_language) ") + answer_language;
	inference_datastructures_inference._csetf_infrnc_answer_language(inference, answer_language);
	return inference;
    }

    public static final SubLObject set_inference_cache_results_alt(SubLObject inference, SubLObject cache_resultsP) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(cache_resultsP, BOOLEANP);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_cache_resultsP(inference, cache_resultsP);
	return inference;
    }

    public static SubLObject set_inference_cache_results(final SubLObject inference, final SubLObject cache_resultsP) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != booleanp(cache_resultsP) : "! booleanp(cache_resultsP) " + ("Types.booleanp(cache_resultsP) " + "CommonSymbols.NIL != Types.booleanp(cache_resultsP) ") + cache_resultsP;
	inference_datastructures_inference._csetf_infrnc_cache_resultsP(inference, cache_resultsP);
	return inference;
    }

    public static final SubLObject note_inference_blocking_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_blockingP(inference, T);
	return inference;
    }

    public static SubLObject note_inference_blocking(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	inference_datastructures_inference._csetf_infrnc_blockingP(inference, T);
	return inference;
    }

    public static final SubLObject clear_inference_blocking_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_blockingP(inference, NIL);
	return inference;
    }

    public static SubLObject clear_inference_blocking(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	inference_datastructures_inference._csetf_infrnc_blockingP(inference, NIL);
	return inference;
    }

    public static final SubLObject set_inference_max_number_alt(SubLObject inference, SubLObject max_number) {
	if (NIL != max_number) {
	    SubLTrampolineFile.checkType(max_number, NON_NEGATIVE_INTEGER_P);
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_number(inference, max_number);
	return inference;
    }

    public static SubLObject set_inference_max_number(final SubLObject inference, final SubLObject max_number) {
	if (((NIL != max_number) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == non_negative_integer_p(max_number))) {
	    throw new AssertionError(max_number);
	}
	inference_datastructures_inference._csetf_infrnc_max_number(inference, max_number);
	return inference;
    }

    public static final SubLObject set_inference_max_time_alt(SubLObject inference, SubLObject max_time) {
	if (NIL != max_time) {
	    SubLTrampolineFile.checkType(max_time, NON_NEGATIVE_NUMBER_P);
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_time(inference, max_time);
	return inference;
    }

    public static SubLObject set_inference_max_time(final SubLObject inference, final SubLObject max_time) {
	if (((NIL != max_time) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == number_utilities.non_negative_number_p(max_time))) {
	    throw new AssertionError(max_time);
	}
	inference_datastructures_inference._csetf_infrnc_max_time(inference, max_time);
	return inference;
    }

    public static final SubLObject set_inference_max_step_alt(SubLObject inference, SubLObject max_step) {
	if (NIL != max_step) {
	    SubLTrampolineFile.checkType(max_step, NON_NEGATIVE_INTEGER_P);
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_step(inference, max_step);
	return inference;
    }

    public static SubLObject set_inference_max_step(final SubLObject inference, final SubLObject max_step) {
	if (((NIL != max_step) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == non_negative_integer_p(max_step))) {
	    throw new AssertionError(max_step);
	}
	inference_datastructures_inference._csetf_infrnc_max_step(inference, max_step);
	return inference;
    }

    public static final SubLObject set_inference_mode_alt(SubLObject inference, SubLObject mode) {
	SubLTrampolineFile.checkType(mode, INFERENCE_MODE_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_mode(inference, mode);
	return inference;
    }

    public static SubLObject set_inference_mode(final SubLObject inference, final SubLObject mode) {
	assert NIL != inference_datastructures_enumerated_types.inference_mode_p(mode) : "! inference_datastructures_enumerated_types.inference_mode_p(mode) "
		+ ("inference_datastructures_enumerated_types.inference_mode_p(mode) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.inference_mode_p(mode) ") + mode;
	inference_datastructures_inference._csetf_infrnc_mode(inference, mode);
	return inference;
    }

    public static final SubLObject set_inference_forward_max_time_alt(SubLObject inference, SubLObject forward_max_time) {
	if (NIL != forward_max_time) {
	    SubLTrampolineFile.checkType(forward_max_time, NON_NEGATIVE_NUMBER_P);
	}
	{
	    SubLObject max_time = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_max_time(inference);
	    if ((max_time.isInteger() && forward_max_time.isInteger()) && max_time.numL(forward_max_time)) {
		Errors.error($str_alt355$Forward_max_time__s_cannot_be_gre, forward_max_time, max_time);
	    }
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_forward_max_time(inference, forward_max_time);
	return inference;
    }

    public static SubLObject set_inference_forward_max_time(final SubLObject inference, final SubLObject forward_max_time) {
	if (((NIL != forward_max_time) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == number_utilities.non_negative_number_p(forward_max_time))) {
	    throw new AssertionError(forward_max_time);
	}
	final SubLObject max_time = inference_datastructures_inference.inference_max_time(inference);
	if ((max_time.isInteger() && forward_max_time.isInteger()) && max_time.numL(forward_max_time)) {
	    Errors.error(inference_datastructures_inference.$str373$Forward_max_time__s_cannot_be_gre, forward_max_time, max_time);
	}
	inference_datastructures_inference._csetf_infrnc_forward_max_time(inference, forward_max_time);
	return inference;
    }

    public static final SubLObject set_inference_max_proof_depth_alt(SubLObject inference, SubLObject max_proof_depth) {
	if (NIL != max_proof_depth) {
	    SubLTrampolineFile.checkType(max_proof_depth, NON_NEGATIVE_INTEGER_P);
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_proof_depth(inference, max_proof_depth);
	return inference;
    }

    public static SubLObject set_inference_max_proof_depth(final SubLObject inference, final SubLObject max_proof_depth) {
	if (((NIL != max_proof_depth) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == non_negative_integer_p(max_proof_depth))) {
	    throw new AssertionError(max_proof_depth);
	}
	inference_datastructures_inference._csetf_infrnc_max_proof_depth(inference, max_proof_depth);
	return inference;
    }

    public static final SubLObject set_inference_max_transformation_depth_alt(SubLObject inference, SubLObject max_transformation_depth) {
	if (NIL != max_transformation_depth) {
	    SubLTrampolineFile.checkType(max_transformation_depth, NON_NEGATIVE_INTEGER_P);
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_max_transformation_depth(inference, max_transformation_depth);
	return inference;
    }

    public static SubLObject set_inference_max_transformation_depth(final SubLObject inference, final SubLObject max_transformation_depth) {
	if (((NIL != max_transformation_depth) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == non_negative_integer_p(max_transformation_depth))) {
	    throw new AssertionError(max_transformation_depth);
	}
	inference_datastructures_inference._csetf_infrnc_max_transformation_depth(inference, max_transformation_depth);
	return inference;
    }

    public static SubLObject set_inference_min_rule_utility(final SubLObject inference, final SubLObject min_rule_utility) {
	assert NIL != inference_analysis.rule_utility_p(min_rule_utility) : "! inference_analysis.rule_utility_p(min_rule_utility) " + ("inference_analysis.rule_utility_p(min_rule_utility) " + "CommonSymbols.NIL != inference_analysis.rule_utility_p(min_rule_utility) ") + min_rule_utility;
	inference_datastructures_inference._csetf_infrnc_min_rule_utility(inference, min_rule_utility);
	return inference;
    }

    public static final SubLObject set_inference_probably_approximately_done_alt(SubLObject inference, SubLObject probability) {
	SubLTrampolineFile.checkType(probability, PROBABILITY_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_probably_approximately_done(inference, probability);
	return inference;
    }

    public static SubLObject set_inference_probably_approximately_done(final SubLObject inference, final SubLObject probability) {
	assert NIL != number_utilities.probability_p(probability) : "! number_utilities.probability_p(probability) " + ("number_utilities.probability_p(probability) " + "CommonSymbols.NIL != number_utilities.probability_p(probability) ") + probability;
	inference_datastructures_inference._csetf_infrnc_probably_approximately_done(inference, probability);
	return inference;
    }

    public static final SubLObject set_inference_metrics_template_alt(SubLObject inference, SubLObject metrics_template) {
	{
	    SubLObject list_var = metrics_template;
	    SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
	    {
		SubLObject cdolist_list_var = list_var;
		SubLObject elem = NIL;
		for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), elem = cdolist_list_var.first()) {
		    SubLTrampolineFile.checkType(elem, QUERY_METRIC_P);
		}
	    }
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_metrics_template(inference, metrics_template);
	return inference;
    }

    public static SubLObject set_inference_metrics_template(final SubLObject inference, final SubLObject metrics_template) {
	assert NIL != list_utilities.non_dotted_list_p(metrics_template) : "! list_utilities.non_dotted_list_p(metrics_template) " + ("list_utilities.non_dotted_list_p(metrics_template) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(metrics_template) ") + metrics_template;
	SubLObject cdolist_list_var = metrics_template;
	SubLObject elem = NIL;
	elem = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    assert NIL != inference_datastructures_enumerated_types.query_metric_p(elem) : "! inference_datastructures_enumerated_types.query_metric_p(elem) "
		    + ("inference_datastructures_enumerated_types.query_metric_p(elem) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.query_metric_p(elem) ") + elem;
	    cdolist_list_var = cdolist_list_var.rest();
	    elem = cdolist_list_var.first();
	}
	inference_datastructures_inference._csetf_infrnc_metrics_template(inference, metrics_template);
	return inference;
    }

    public static final SubLObject set_inference_start_universal_time_alt(SubLObject inference, SubLObject universal_time) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(universal_time, UNIVERSAL_TIME_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_start_universal_time(inference, universal_time);
	return inference;
    }

    public static SubLObject set_inference_start_universal_time(final SubLObject inference, final SubLObject universal_time) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != numeric_date_utilities.universal_time_p(universal_time) : "! numeric_date_utilities.universal_time_p(universal_time) " + ("numeric_date_utilities.universal_time_p(universal_time) " + "CommonSymbols.NIL != numeric_date_utilities.universal_time_p(universal_time) ")
		+ universal_time;
	inference_datastructures_inference._csetf_infrnc_start_universal_time(inference, universal_time);
	return inference;
    }

    public static final SubLObject set_inference_start_internal_real_time_alt(SubLObject inference, SubLObject internal_real_time) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(internal_real_time, NON_NEGATIVE_INTEGER_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_start_internal_real_time(inference, internal_real_time);
	return inference;
    }

    public static SubLObject set_inference_start_internal_real_time(final SubLObject inference, final SubLObject internal_real_time) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != non_negative_integer_p(internal_real_time) : "! subl_promotions.non_negative_integer_p(internal_real_time) " + ("subl_promotions.non_negative_integer_p(internal_real_time) " + "CommonSymbols.NIL != subl_promotions.non_negative_integer_p(internal_real_time) ")
		+ internal_real_time;
	inference_datastructures_inference._csetf_infrnc_start_internal_real_time(inference, internal_real_time);
	return inference;
    }

    public static final SubLObject set_inference_end_internal_real_time_alt(SubLObject inference, SubLObject end_internal_real_time) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	if (NIL != end_internal_real_time) {
	    SubLTrampolineFile.checkType(end_internal_real_time, NON_NEGATIVE_INTEGER_P);
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_end_internal_real_time(inference, end_internal_real_time);
	return inference;
    }

    public static SubLObject set_inference_end_internal_real_time(final SubLObject inference, final SubLObject end_internal_real_time) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	if (((NIL != end_internal_real_time) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == non_negative_integer_p(end_internal_real_time))) {
	    throw new AssertionError(end_internal_real_time);
	}
	inference_datastructures_inference._csetf_infrnc_end_internal_real_time(inference, end_internal_real_time);
	return inference;
    }

    public static final SubLObject set_inference_pad_internal_real_time_alt(SubLObject inference, SubLObject pad_internal_real_time) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	if (NIL != pad_internal_real_time) {
	    SubLTrampolineFile.checkType(pad_internal_real_time, POTENTIALLY_INFINITE_INTEGER_P);
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_pad_internal_real_time(inference, pad_internal_real_time);
	return inference;
    }

    public static SubLObject set_inference_pad_internal_real_time(final SubLObject inference, final SubLObject pad_internal_real_time) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	if (((NIL != pad_internal_real_time) && (!SubLTrampolineFile.assertionsDisabledInClass)) && (NIL == number_utilities.potentially_infinite_integer_p(pad_internal_real_time))) {
	    throw new AssertionError(pad_internal_real_time);
	}
	inference_datastructures_inference._csetf_infrnc_pad_internal_real_time(inference, pad_internal_real_time);
	return inference;
    }

    public static SubLObject set_inference_hypothesization_time(final SubLObject inference, final SubLObject hypothesization_time) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != numberp(hypothesization_time) : "! numberp(hypothesization_time) " + ("Types.numberp(hypothesization_time) " + "CommonSymbols.NIL != Types.numberp(hypothesization_time) ") + hypothesization_time;
	inference_datastructures_inference._csetf_infrnc_hypothesization_time(inference, hypothesization_time);
	return inference;
    }

    public static final SubLObject set_inference_cumulative_time_alt(SubLObject inference, SubLObject cumulative_time) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(cumulative_time, NUMBERP);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_cumulative_time(inference, cumulative_time);
	return inference;
    }

    public static SubLObject set_inference_cumulative_time(final SubLObject inference, final SubLObject cumulative_time) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != numberp(cumulative_time) : "! numberp(cumulative_time) " + ("Types.numberp(cumulative_time) " + "CommonSymbols.NIL != Types.numberp(cumulative_time) ") + cumulative_time;
	inference_datastructures_inference._csetf_infrnc_cumulative_time(inference, cumulative_time);
	return inference;
    }

    public static final SubLObject set_inference_step_count_alt(SubLObject inference, SubLObject step_count) {
	SubLTrampolineFile.checkType(step_count, NON_NEGATIVE_INTEGER_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_step_count(inference, step_count);
	return inference;
    }

    public static SubLObject set_inference_step_count(final SubLObject inference, final SubLObject step_count) {
	assert NIL != non_negative_integer_p(step_count) : "! subl_promotions.non_negative_integer_p(step_count) " + ("subl_promotions.non_negative_integer_p(step_count) " + "CommonSymbols.NIL != subl_promotions.non_negative_integer_p(step_count) ") + step_count;
	inference_datastructures_inference._csetf_infrnc_step_count(inference, step_count);
	return inference;
    }

    public static final SubLObject increment_inference_step_count_alt(SubLObject inference) {
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_step_count(inference, add(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_step_count(inference), ONE_INTEGER));
	return inference;
    }

    public static SubLObject increment_inference_step_count(final SubLObject inference) {
	inference_datastructures_inference._csetf_infrnc_step_count(inference, add(inference_datastructures_inference.infrnc_step_count(inference), ONE_INTEGER));
	return inference;
    }

    public static final SubLObject set_inference_cumulative_step_count_alt(SubLObject inference, SubLObject cumulative_step_count) {
	SubLTrampolineFile.checkType(cumulative_step_count, NON_NEGATIVE_INTEGER_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_cumulative_step_count(inference, cumulative_step_count);
	return inference;
    }

    public static SubLObject set_inference_cumulative_step_count(final SubLObject inference, final SubLObject cumulative_step_count) {
	assert NIL != non_negative_integer_p(cumulative_step_count) : "! subl_promotions.non_negative_integer_p(cumulative_step_count) " + ("subl_promotions.non_negative_integer_p(cumulative_step_count) " + "CommonSymbols.NIL != subl_promotions.non_negative_integer_p(cumulative_step_count) ")
		+ cumulative_step_count;
	inference_datastructures_inference._csetf_infrnc_cumulative_step_count(inference, cumulative_step_count);
	return inference;
    }

    public static final SubLObject increment_inference_cumulative_step_count_alt(SubLObject inference) {
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_cumulative_step_count(inference, add(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_cumulative_step_count(inference), ONE_INTEGER));
	return inference;
    }

    public static SubLObject increment_inference_cumulative_step_count(final SubLObject inference) {
	inference_datastructures_inference._csetf_infrnc_cumulative_step_count(inference, add(inference_datastructures_inference.infrnc_cumulative_step_count(inference), ONE_INTEGER));
	return inference;
    }

    public static final SubLObject set_inference_problem_working_time_data_alt(SubLObject inference, SubLObject data) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(data, LISTP);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_problem_working_time_data(inference, data);
	return inference;
    }

    public static SubLObject set_inference_problem_working_time_data(final SubLObject inference, final SubLObject data) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != listp(data) : "! listp(data) " + ("Types.listp(data) " + "CommonSymbols.NIL != Types.listp(data) ") + data;
	inference_datastructures_inference._csetf_infrnc_problem_working_time_data(inference, data);
	return inference;
    }

    public static final SubLObject set_inference_events_alt(SubLObject inference, SubLObject event_types) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	{
	    SubLObject list_var = event_types;
	    SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
	    {
		SubLObject cdolist_list_var = list_var;
		SubLObject elem = NIL;
		for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), elem = cdolist_list_var.first()) {
		    SubLTrampolineFile.checkType(elem, INFERENCE_EVENT_TYPE_P);
		}
	    }
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_events(inference, event_types);
	return inference;
    }

    public static SubLObject set_inference_events(final SubLObject inference, final SubLObject event_types) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != list_utilities.non_dotted_list_p(event_types) : "! list_utilities.non_dotted_list_p(event_types) " + ("list_utilities.non_dotted_list_p(event_types) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(event_types) ") + event_types;
	SubLObject cdolist_list_var = event_types;
	SubLObject elem = NIL;
	elem = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    assert NIL != inference_datastructures_enumerated_types.inference_event_type_p(elem) : "! inference_datastructures_enumerated_types.inference_event_type_p(elem) "
		    + ("inference_datastructures_enumerated_types.inference_event_type_p(elem) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.inference_event_type_p(elem) ") + elem;
	    cdolist_list_var = cdolist_list_var.rest();
	    elem = cdolist_list_var.first();
	}
	inference_datastructures_inference._csetf_infrnc_events(inference, event_types);
	return inference;
    }

    public static final SubLObject set_inference_halt_conditions_alt(SubLObject inference, SubLObject halt_conditions) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	{
	    SubLObject list_var = halt_conditions;
	    SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
	    {
		SubLObject cdolist_list_var = list_var;
		SubLObject elem = NIL;
		for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), elem = cdolist_list_var.first()) {
		    SubLTrampolineFile.checkType(elem, INFERENCE_HALT_CONDITION_P);
		}
	    }
	}
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_halt_conditions(inference, halt_conditions);
	return inference;
    }

    public static SubLObject set_inference_halt_conditions(final SubLObject inference, final SubLObject halt_conditions) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != list_utilities.non_dotted_list_p(halt_conditions) : "! list_utilities.non_dotted_list_p(halt_conditions) " + ("list_utilities.non_dotted_list_p(halt_conditions) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(halt_conditions) ") + halt_conditions;
	SubLObject cdolist_list_var = halt_conditions;
	SubLObject elem = NIL;
	elem = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    assert NIL != inference_datastructures_enumerated_types.inference_halt_condition_p(elem) : "! inference_datastructures_enumerated_types.inference_halt_condition_p(elem) "
		    + ("inference_datastructures_enumerated_types.inference_halt_condition_p(elem) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.inference_halt_condition_p(elem) ") + elem;
	    cdolist_list_var = cdolist_list_var.rest();
	    elem = cdolist_list_var.first();
	}
	inference_datastructures_inference._csetf_infrnc_halt_conditions(inference, halt_conditions);
	return inference;
    }

    public static final SubLObject set_inference_type_alt(SubLObject inference, SubLObject type) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(type, INFERENCE_TYPE_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_type(inference, type);
	return inference;
    }

    public static SubLObject set_inference_type(final SubLObject inference, final SubLObject type) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_inference.inference_type_p(type) : "! inference_datastructures_inference.inference_type_p(type) " + ("inference_datastructures_inference.inference_type_p(type) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_type_p(type) ")
		+ type;
	inference_datastructures_inference._csetf_infrnc_type(inference, type);
	return inference;
    }

    public static final SubLObject set_inference_data_alt(SubLObject inference, SubLObject data) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_data(inference, data);
	return inference;
    }

    public static SubLObject set_inference_data(final SubLObject inference, final SubLObject data) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	inference_datastructures_inference._csetf_infrnc_data(inference, data);
	return inference;
    }

    public static SubLObject set_inference_properties(final SubLObject inference, final SubLObject v_properties) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != list_utilities.property_list_p(v_properties) : "! list_utilities.property_list_p(v_properties) " + ("list_utilities.property_list_p(v_properties) " + "CommonSymbols.NIL != list_utilities.property_list_p(v_properties) ") + v_properties;
	inference_datastructures_inference._csetf_infrnc_properties(inference, v_properties);
	return inference;
    }

    public static SubLObject set_inference_property(final SubLObject inference, final SubLObject key, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	SubLObject v_properties = inference_datastructures_inference.infrnc_properties(inference);
	v_properties = putf(v_properties, key, value);
	inference_datastructures_inference._csetf_infrnc_properties(inference, v_properties);
	return inference;
    }

    public static SubLObject push_inference_property(final SubLObject inference, final SubLObject key, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	SubLObject v_properties = inference_datastructures_inference.infrnc_properties(inference);
	v_properties = putf(v_properties, key, cons(value, list_utilities.plist_lookup(v_properties, key, NIL)));
	inference_datastructures_inference._csetf_infrnc_properties(inference, v_properties);
	return inference;
    }

    public static final SubLObject inference_ids_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return list(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store_suid(inference), com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_suid(inference));
    }

    public static SubLObject inference_ids(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return list(inference_datastructures_inference.inference_problem_store_suid(inference), inference_datastructures_inference.inference_suid(inference));
    }

    public static final SubLObject with_inference_ids_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt365);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject store_id_var = NIL;
		    SubLObject inference_id_var = NIL;
		    SubLObject inference = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt365);
		    store_id_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt365);
		    inference_id_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt365);
		    inference = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    SubLObject inference_var = $sym366$INFERENCE_VAR;
			    return listS(CLET, list(list(inference_var, inference), list(store_id_var, list(INFERENCE_PROBLEM_STORE_SUID, inference_var)), list(inference_id_var, list(INFERENCE_SUID, inference_var))), append(body, NIL));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt365);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject with_inference_ids(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list385);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject store_id_var = NIL;
	SubLObject inference_id_var = NIL;
	SubLObject inference = NIL;
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list385);
	store_id_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list385);
	inference_id_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list385);
	inference = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    final SubLObject inference_var = inference_datastructures_inference.$sym386$INFERENCE_VAR;
	    return listS(CLET, list(list(inference_var, inference), list(store_id_var, list(inference_datastructures_inference.INFERENCE_PROBLEM_STORE_SUID, inference_var)), list(inference_id_var, list(inference_datastructures_inference.INFERENCE_SUID, inference_var))), append(body, NIL));
	}
	cdestructuring_bind_error(datum, inference_datastructures_inference.$list385);
	return NIL;
    }

    public static final SubLObject inference_problem_store_suid_alt(SubLObject inference) {
	return inference_datastructures_problem_store.problem_store_suid(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store(inference));
    }

    public static SubLObject inference_problem_store_suid(final SubLObject inference) {
	return inference_datastructures_problem_store.problem_store_suid(inference_datastructures_inference.inference_problem_store(inference));
    }

    /**
     * Return all inferences.
     */
    @LispMethod(comment = "Return all inferences.")
    public static final SubLObject all_inferences_alt() {
	{
	    SubLObject inferences = NIL;
	    SubLObject idx = inference_datastructures_problem_store.problem_store_id_index();
	    if (NIL == do_id_index_empty_p(idx, $SKIP)) {
		{
		    SubLObject id = do_id_index_next_id(idx, NIL, NIL, NIL);
		    SubLObject state_var = do_id_index_next_state(idx, NIL, id, NIL);
		    SubLObject store = NIL;
		    while (NIL != id) {
			store = do_id_index_state_object(idx, $SKIP, id, state_var);
			if (NIL != do_id_index_id_and_object_validP(id, store, $SKIP)) {
			    {
				SubLObject idx_5 = inference_datastructures_problem_store.problem_store_inference_id_index(store);
				if (NIL == do_id_index_empty_p(idx_5, $SKIP)) {
				    {
					SubLObject id_6 = do_id_index_next_id(idx_5, NIL, NIL, NIL);
					SubLObject state_var_7 = do_id_index_next_state(idx_5, NIL, id_6, NIL);
					SubLObject inference = NIL;
					while (NIL != id_6) {
					    inference = do_id_index_state_object(idx_5, $SKIP, id_6, state_var_7);
					    if (NIL != do_id_index_id_and_object_validP(id_6, inference, $SKIP)) {
						inferences = cons(inference, inferences);
					    }
					    id_6 = do_id_index_next_id(idx_5, NIL, id_6, state_var_7);
					    state_var_7 = do_id_index_next_state(idx_5, NIL, id_6, state_var_7);
					}
				    }
				}
			    }
			}
			id = do_id_index_next_id(idx, NIL, id, state_var);
			state_var = do_id_index_next_state(idx, NIL, id, state_var);
		    }
		}
	    }
	    return nreverse(inferences);
	}
    }

    /**
     * Return all inferences.
     */
    @LispMethod(comment = "Return all inferences.")
    public static SubLObject all_inferences() {
	SubLObject inferences = NIL;
	final SubLObject idx = inference_datastructures_problem_store.problem_store_id_index();
	if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
	    final SubLObject idx_$4 = idx;
	    if (NIL == id_index_dense_objects_empty_p(idx_$4, $SKIP)) {
		final SubLObject vector_var = id_index_dense_objects(idx_$4);
		final SubLObject backwardP_var = NIL;
		SubLObject length;
		SubLObject v_iteration;
		SubLObject id;
		SubLObject store;
		SubLObject idx_$5;
		SubLObject idx_$6;
		SubLObject vector_var_$7;
		SubLObject backwardP_var_$8;
		SubLObject length_$9;
		SubLObject v_iteration_$10;
		SubLObject id_$11;
		SubLObject inference;
		SubLObject idx_$7;
		SubLObject cdohash_table;
		SubLObject id_$12;
		SubLObject inference2;
		Iterator cdohash_iterator;
		Map.Entry cdohash_entry;
		for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
		    id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
		    store = aref(vector_var, id);
		    if ((NIL == id_index_tombstone_p(store)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
			if (NIL != id_index_tombstone_p(store)) {
			    store = $SKIP;
			}
			idx_$5 = inference_datastructures_problem_store.problem_store_inference_id_index(store);
			if (NIL == id_index_objects_empty_p(idx_$5, $SKIP)) {
			    idx_$6 = idx_$5;
			    if (NIL == id_index_dense_objects_empty_p(idx_$6, $SKIP)) {
				vector_var_$7 = id_index_dense_objects(idx_$6);
				backwardP_var_$8 = NIL;
				for (length_$9 = length(vector_var_$7), v_iteration_$10 = NIL, v_iteration_$10 = ZERO_INTEGER; v_iteration_$10.numL(length_$9); v_iteration_$10 = add(v_iteration_$10, ONE_INTEGER)) {
				    id_$11 = (NIL != backwardP_var_$8) ? subtract(length_$9, v_iteration_$10, ONE_INTEGER) : v_iteration_$10;
				    inference = aref(vector_var_$7, id_$11);
				    if ((NIL == id_index_tombstone_p(inference)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
					if (NIL != id_index_tombstone_p(inference)) {
					    inference = $SKIP;
					}
					inferences = cons(inference, inferences);
				    }
				}
			    }
			    idx_$7 = idx_$5;
			    if (NIL == id_index_sparse_objects_empty_p(idx_$7)) {
				cdohash_table = id_index_sparse_objects(idx_$7);
				id_$12 = NIL;
				inference2 = NIL;
				cdohash_iterator = getEntrySetIterator(cdohash_table);
				try {
				    while (iteratorHasNext(cdohash_iterator)) {
					cdohash_entry = iteratorNextEntry(cdohash_iterator);
					id_$12 = getEntryKey(cdohash_entry);
					inference2 = getEntryValue(cdohash_entry);
					inferences = cons(inference2, inferences);
				    }
				} finally {
				    releaseEntrySetIterator(cdohash_iterator);
				}
			    }
			}
		    }
		}
	    }
	    final SubLObject idx_$8 = idx;
	    if (NIL == id_index_sparse_objects_empty_p(idx_$8)) {
		final SubLObject cdohash_table2 = id_index_sparse_objects(idx_$8);
		SubLObject id2 = NIL;
		SubLObject store2 = NIL;
		final Iterator cdohash_iterator2 = getEntrySetIterator(cdohash_table2);
		try {
		    while (iteratorHasNext(cdohash_iterator2)) {
			final Map.Entry cdohash_entry2 = iteratorNextEntry(cdohash_iterator2);
			id2 = getEntryKey(cdohash_entry2);
			store2 = getEntryValue(cdohash_entry2);
			final SubLObject idx_$9 = inference_datastructures_problem_store.problem_store_inference_id_index(store2);
			if (NIL == id_index_objects_empty_p(idx_$9, $SKIP)) {
			    final SubLObject idx_$10 = idx_$9;
			    if (NIL == id_index_dense_objects_empty_p(idx_$10, $SKIP)) {
				final SubLObject vector_var2 = id_index_dense_objects(idx_$10);
				final SubLObject backwardP_var2 = NIL;
				SubLObject length2;
				SubLObject v_iteration2;
				SubLObject id_$13;
				SubLObject inference3;
				for (length2 = length(vector_var2), v_iteration2 = NIL, v_iteration2 = ZERO_INTEGER; v_iteration2.numL(length2); v_iteration2 = add(v_iteration2, ONE_INTEGER)) {
				    id_$13 = (NIL != backwardP_var2) ? subtract(length2, v_iteration2, ONE_INTEGER) : v_iteration2;
				    inference3 = aref(vector_var2, id_$13);
				    if ((NIL == id_index_tombstone_p(inference3)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
					if (NIL != id_index_tombstone_p(inference3)) {
					    inference3 = $SKIP;
					}
					inferences = cons(inference3, inferences);
				    }
				}
			    }
			    final SubLObject idx_$11 = idx_$9;
			    if (NIL != id_index_sparse_objects_empty_p(idx_$11)) {
				continue;
			    }
			    final SubLObject cdohash_table_$19 = id_index_sparse_objects(idx_$11);
			    SubLObject id_$14 = NIL;
			    SubLObject inference4 = NIL;
			    final Iterator cdohash_iterator_$21 = getEntrySetIterator(cdohash_table_$19);
			    try {
				while (iteratorHasNext(cdohash_iterator_$21)) {
				    final Map.Entry cdohash_entry_$22 = iteratorNextEntry(cdohash_iterator_$21);
				    id_$14 = getEntryKey(cdohash_entry_$22);
				    inference4 = getEntryValue(cdohash_entry_$22);
				    inferences = cons(inference4, inferences);
				}
			    } finally {
				releaseEntrySetIterator(cdohash_iterator_$21);
			    }
			}
		    }
		} finally {
		    releaseEntrySetIterator(cdohash_iterator2);
		}
	    }
	}
	return nreverse(inferences);
    }

    public static SubLObject all_successful_inferences() {
	return list_utilities.delete_if_not(inference_datastructures_inference.SUCCESSFUL_INFERENCE_P, inference_datastructures_inference.all_inferences(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    /**
     * Return a list of all strategies used by INFERENCE.
     */
    @LispMethod(comment = "Return a list of all strategies used by INFERENCE.")
    public static final SubLObject inference_strategies_alt(SubLObject inference) {
	return set.set_element_list(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_strategy_set(inference));
    }

    /**
     * Return a list of all strategies used by INFERENCE.
     */
    @LispMethod(comment = "Return a list of all strategies used by INFERENCE.")
    public static SubLObject inference_strategies(final SubLObject inference) {
	return set_element_list(inference_datastructures_inference.inference_strategy_set(inference));
    }

    /**
     *
     *
     * @return LISTP; of the microtheories of the contextualized literals in the HL query of INFERENCE.
     */
    @LispMethod(comment = "@return LISTP; of the microtheories of the contextualized literals in the HL query of INFERENCE.")
    public static final SubLObject inference_hl_mts_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	{
	    SubLObject hl_query = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_hl_query(inference);
	    SubLObject mts = NIL;
	    SubLObject cdolist_list_var = hl_query;
	    SubLObject contextualized_clause = NIL;
	    for (contextualized_clause = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), contextualized_clause = cdolist_list_var.first()) {
		{
		    SubLObject sense = $NEG;
		    SubLObject index_var = ZERO_INTEGER;
		    SubLObject cdolist_list_var_8 = clauses.neg_lits(contextualized_clause);
		    SubLObject contextualized_asent = NIL;
		    for (contextualized_asent = cdolist_list_var_8.first(); NIL != cdolist_list_var_8; cdolist_list_var_8 = cdolist_list_var_8.rest(), contextualized_asent = cdolist_list_var_8.first()) {
			{
			    SubLObject datum = contextualized_asent;
			    SubLObject current = datum;
			    SubLObject mt = NIL;
			    SubLObject asent = NIL;
			    destructuring_bind_must_consp(current, datum, $list_alt371);
			    mt = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt371);
			    asent = current.first();
			    current = current.rest();
			    if (NIL == current) {
				{
				    SubLObject item_var = mt;
				    if (NIL == member(item_var, mts, HLMT_EQUAL, symbol_function(IDENTITY))) {
					mts = cons(item_var, mts);
				    }
				}
			    } else {
				cdestructuring_bind_error(datum, $list_alt371);
			    }
			}
			index_var = add(index_var, ONE_INTEGER);
		    }
		}
		{
		    SubLObject sense = $POS;
		    SubLObject index_var = ZERO_INTEGER;
		    SubLObject cdolist_list_var_9 = clauses.pos_lits(contextualized_clause);
		    SubLObject contextualized_asent = NIL;
		    for (contextualized_asent = cdolist_list_var_9.first(); NIL != cdolist_list_var_9; cdolist_list_var_9 = cdolist_list_var_9.rest(), contextualized_asent = cdolist_list_var_9.first()) {
			{
			    SubLObject datum = contextualized_asent;
			    SubLObject current = datum;
			    SubLObject mt = NIL;
			    SubLObject asent = NIL;
			    destructuring_bind_must_consp(current, datum, $list_alt371);
			    mt = current.first();
			    current = current.rest();
			    destructuring_bind_must_consp(current, datum, $list_alt371);
			    asent = current.first();
			    current = current.rest();
			    if (NIL == current) {
				{
				    SubLObject item_var = mt;
				    if (NIL == member(item_var, mts, HLMT_EQUAL, symbol_function(IDENTITY))) {
					mts = cons(item_var, mts);
				    }
				}
			    } else {
				cdestructuring_bind_error(datum, $list_alt371);
			    }
			}
			index_var = add(index_var, ONE_INTEGER);
		    }
		}
	    }
	    return nreverse(mts);
	}
    }

    /**
     *
     *
     * @return LISTP; of the microtheories of the contextualized literals in the HL query of INFERENCE.
     */
    @LispMethod(comment = "@return LISTP; of the microtheories of the contextualized literals in the HL query of INFERENCE.")
    public static SubLObject inference_hl_mts(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	final SubLObject hl_query = inference_datastructures_inference.inference_hl_query(inference);
	SubLObject mts = NIL;
	SubLObject cdolist_list_var = hl_query;
	SubLObject contextualized_clause = NIL;
	contextualized_clause = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    SubLObject sense = $NEG;
	    SubLObject index_var = ZERO_INTEGER;
	    SubLObject cdolist_list_var_$23 = neg_lits(contextualized_clause);
	    SubLObject contextualized_asent = NIL;
	    contextualized_asent = cdolist_list_var_$23.first();
	    while (NIL != cdolist_list_var_$23) {
		SubLObject current;
		final SubLObject datum = current = contextualized_asent;
		SubLObject mt = NIL;
		SubLObject asent = NIL;
		destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list392);
		mt = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list392);
		asent = current.first();
		current = current.rest();
		if (NIL == current) {
		    final SubLObject item_var = mt;
		    if (NIL == member(item_var, mts, HLMT_EQUAL, symbol_function(IDENTITY))) {
			mts = cons(item_var, mts);
		    }
		} else {
		    cdestructuring_bind_error(datum, inference_datastructures_inference.$list392);
		}
		index_var = add(index_var, ONE_INTEGER);
		cdolist_list_var_$23 = cdolist_list_var_$23.rest();
		contextualized_asent = cdolist_list_var_$23.first();
	    }
	    sense = $POS;
	    index_var = ZERO_INTEGER;
	    SubLObject cdolist_list_var_$24 = pos_lits(contextualized_clause);
	    contextualized_asent = NIL;
	    contextualized_asent = cdolist_list_var_$24.first();
	    while (NIL != cdolist_list_var_$24) {
		SubLObject current;
		final SubLObject datum = current = contextualized_asent;
		SubLObject mt = NIL;
		SubLObject asent = NIL;
		destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list392);
		mt = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list392);
		asent = current.first();
		current = current.rest();
		if (NIL == current) {
		    final SubLObject item_var = mt;
		    if (NIL == member(item_var, mts, HLMT_EQUAL, symbol_function(IDENTITY))) {
			mts = cons(item_var, mts);
		    }
		} else {
		    cdestructuring_bind_error(datum, inference_datastructures_inference.$list392);
		}
		index_var = add(index_var, ONE_INTEGER);
		cdolist_list_var_$24 = cdolist_list_var_$24.rest();
		contextualized_asent = cdolist_list_var_$24.first();
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    contextualized_clause = cdolist_list_var.first();
	}
	return nreverse(mts);
    }

    /**
     *
     *
     * @return hlmt-p; the microtheory of the first contextualized literal in the HL query of INFERENCE.
     */
    @LispMethod(comment = "@return hlmt-p; the microtheory of the first contextualized literal in the HL query of INFERENCE.")
    public static final SubLObject inference_first_hl_query_mt_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	{
	    SubLObject hl_query = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_hl_query(inference);
	    SubLObject result = NIL;
	    SubLObject rest = NIL;
	    for (rest = hl_query; !((NIL != result) || (NIL == rest)); rest = rest.rest()) {
		{
		    SubLObject contextualized_clause = rest.first();
		    {
			SubLObject sense = $NEG;
			SubLObject index_var = ZERO_INTEGER;
			SubLObject cdolist_list_var = clauses.neg_lits(contextualized_clause);
			SubLObject contextualized_asent = NIL;
			for (contextualized_asent = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), contextualized_asent = cdolist_list_var.first()) {
			    {
				SubLObject datum = contextualized_asent;
				SubLObject current = datum;
				SubLObject hl_mt = NIL;
				SubLObject asent = NIL;
				destructuring_bind_must_consp(current, datum, $list_alt374);
				hl_mt = current.first();
				current = current.rest();
				destructuring_bind_must_consp(current, datum, $list_alt374);
				asent = current.first();
				current = current.rest();
				if (NIL == current) {
				    result = hl_mt;
				} else {
				    cdestructuring_bind_error(datum, $list_alt374);
				}
			    }
			    index_var = add(index_var, ONE_INTEGER);
			}
		    }
		    {
			SubLObject sense = $POS;
			SubLObject index_var = ZERO_INTEGER;
			SubLObject cdolist_list_var = clauses.pos_lits(contextualized_clause);
			SubLObject contextualized_asent = NIL;
			for (contextualized_asent = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), contextualized_asent = cdolist_list_var.first()) {
			    {
				SubLObject datum = contextualized_asent;
				SubLObject current = datum;
				SubLObject hl_mt = NIL;
				SubLObject asent = NIL;
				destructuring_bind_must_consp(current, datum, $list_alt374);
				hl_mt = current.first();
				current = current.rest();
				destructuring_bind_must_consp(current, datum, $list_alt374);
				asent = current.first();
				current = current.rest();
				if (NIL == current) {
				    result = hl_mt;
				} else {
				    cdestructuring_bind_error(datum, $list_alt374);
				}
			    }
			    index_var = add(index_var, ONE_INTEGER);
			}
		    }
		}
	    }
	    return result;
	}
    }

    /**
     *
     *
     * @return hlmt-p; the microtheory of the first contextualized literal in the HL query of INFERENCE.
     */
    @LispMethod(comment = "@return hlmt-p; the microtheory of the first contextualized literal in the HL query of INFERENCE.")
    public static SubLObject inference_first_hl_query_mt(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	final SubLObject hl_query = inference_datastructures_inference.inference_hl_query(inference);
	SubLObject result;
	SubLObject rest;
	SubLObject contextualized_clause;
	SubLObject sense;
	SubLObject index_var;
	SubLObject cdolist_list_var;
	SubLObject contextualized_asent;
	SubLObject current;
	SubLObject datum;
	SubLObject hl_mt;
	SubLObject asent;
	for (result = NIL, rest = NIL, rest = hl_query; (NIL == result) && (NIL != rest); rest = rest.rest()) {
	    contextualized_clause = rest.first();
	    sense = $NEG;
	    index_var = ZERO_INTEGER;
	    cdolist_list_var = neg_lits(contextualized_clause);
	    contextualized_asent = NIL;
	    contextualized_asent = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		datum = current = contextualized_asent;
		hl_mt = NIL;
		asent = NIL;
		destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list395);
		hl_mt = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list395);
		asent = current.first();
		current = current.rest();
		if (NIL == current) {
		    result = hl_mt;
		} else {
		    cdestructuring_bind_error(datum, inference_datastructures_inference.$list395);
		}
		index_var = add(index_var, ONE_INTEGER);
		cdolist_list_var = cdolist_list_var.rest();
		contextualized_asent = cdolist_list_var.first();
	    }
	    sense = $POS;
	    index_var = ZERO_INTEGER;
	    cdolist_list_var = pos_lits(contextualized_clause);
	    contextualized_asent = NIL;
	    contextualized_asent = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		datum = current = contextualized_asent;
		hl_mt = NIL;
		asent = NIL;
		destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list395);
		hl_mt = current.first();
		current = current.rest();
		destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list395);
		asent = current.first();
		current = current.rest();
		if (NIL == current) {
		    result = hl_mt;
		} else {
		    cdestructuring_bind_error(datum, inference_datastructures_inference.$list395);
		}
		index_var = add(index_var, ONE_INTEGER);
		cdolist_list_var = cdolist_list_var.rest();
		contextualized_asent = cdolist_list_var.first();
	    }
	}
	return result;
    }

    public static final SubLObject inference_no_free_hl_varsP_alt(SubLObject inference) {
	return sublisp_null(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_free_hl_vars(inference));
    }

    public static SubLObject inference_no_free_hl_varsP(final SubLObject inference) {
	return sublisp_null(inference_datastructures_inference.inference_free_hl_vars(inference));
    }

    public static final SubLObject inference_free_el_vars_alt(SubLObject inference) {
	{
	    SubLObject el_bindings = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_el_bindings(inference);
	    SubLObject free_hl_vars = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_free_hl_vars(inference);
	    return apply_bindings_backwards(el_bindings, free_hl_vars);
	}
    }

    public static SubLObject inference_free_el_vars(final SubLObject inference) {
	final SubLObject el_bindings = inference_datastructures_inference.inference_el_bindings(inference);
	final SubLObject free_hl_vars = inference_datastructures_inference.inference_free_hl_vars(inference);
	return bindings.apply_bindings_backwards(el_bindings, free_hl_vars);
    }

    public static final SubLObject inference_input_query_property_alt(SubLObject inference, SubLObject property, SubLObject v_default) {
	if (v_default == UNPROVIDED) {
	    v_default = NIL;
	}
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(property, QUERY_PROPERTY_P);
	return getf(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_input_query_properties(inference), property, v_default);
    }

    public static SubLObject inference_input_query_property(final SubLObject inference, final SubLObject property, SubLObject v_default) {
	if (v_default == UNPROVIDED) {
	    v_default = NIL;
	}
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_enumerated_types.query_property_p(property) : "! inference_datastructures_enumerated_types.query_property_p(property) "
		+ ("inference_datastructures_enumerated_types.query_property_p(property) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.query_property_p(property) ") + property;
	return getf(inference_datastructures_inference.infrnc_input_query_properties(inference), property, v_default);
    }

    /**
     * Return SENTENCE, MT, and QUERY-PROPERTIES suitable for reinvoking an
     * inference equivalent to INFERENCE via :
     * (NEW-CYC-QUERY SENTENCE MT QUERY-PROPERTIES).
     */
    @LispMethod(comment = "Return SENTENCE, MT, and QUERY-PROPERTIES suitable for reinvoking an\r\ninference equivalent to INFERENCE via :\r\n(NEW-CYC-QUERY SENTENCE MT QUERY-PROPERTIES).\nReturn SENTENCE, MT, and QUERY-PROPERTIES suitable for reinvoking an\ninference equivalent to INFERENCE via :\n(NEW-CYC-QUERY SENTENCE MT QUERY-PROPERTIES).")
    public static final SubLObject inference_to_new_cyc_query_arguments_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	{
	    SubLObject sentence = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_input_el_query(inference);
	    if (NIL == sentence) {
		sentence = cycl_utilities.hl_to_el(inference_czer.contextualized_dnf_clauses_formula(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_hl_query(inference), UNPROVIDED));
	    }
	    return values(sentence, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_input_mt(inference), inference_datastructures_enumerated_types.inference_input_non_default_query_properties(inference));
	}
    }

    /**
     * Return SENTENCE, MT, and QUERY-PROPERTIES suitable for reinvoking an
     * inference equivalent to INFERENCE via :
     * (NEW-CYC-QUERY SENTENCE MT QUERY-PROPERTIES).
     */
    @LispMethod(comment = "Return SENTENCE, MT, and QUERY-PROPERTIES suitable for reinvoking an\r\ninference equivalent to INFERENCE via :\r\n(NEW-CYC-QUERY SENTENCE MT QUERY-PROPERTIES).\nReturn SENTENCE, MT, and QUERY-PROPERTIES suitable for reinvoking an\ninference equivalent to INFERENCE via :\n(NEW-CYC-QUERY SENTENCE MT QUERY-PROPERTIES).")
    public static SubLObject inference_to_new_cyc_query_arguments(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	SubLObject sentence = inference_datastructures_inference.inference_input_el_query(inference);
	if (NIL == sentence) {
	    sentence = hl_to_el(inference_czer.contextualized_dnf_clauses_formula(inference_datastructures_inference.inference_hl_query(inference), UNPROVIDED));
	}
	return values(sentence, inference_datastructures_inference.inference_input_mt(inference), inference_datastructures_enumerated_types.inference_input_non_default_query_properties(inference));
    }

    /**
     * Return a NEW-CYC-QUERY form suitable for reinvoking an inference equivalent to INFERENCE.
     */
    @LispMethod(comment = "Return a NEW-CYC-QUERY form suitable for reinvoking an inference equivalent to INFERENCE.")
    public static final SubLObject inference_to_new_cyc_query_form_alt(SubLObject inference) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    thread.resetMultipleValues();
	    {
		SubLObject sentence = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_to_new_cyc_query_arguments(inference);
		SubLObject mt = thread.secondMultipleValue();
		SubLObject query_properties = thread.thirdMultipleValue();
		thread.resetMultipleValues();
		return listS(NEW_CYC_QUERY, quotify(sentence), append((NIL != mt) || (NIL != query_properties) ? ((SubLObject) (list(quotify(mt)))) : NIL, NIL != query_properties ? ((SubLObject) (list(quotify(query_properties)))) : NIL, NIL));
	    }
	}
    }

    /**
     * Return a NEW-CYC-QUERY form suitable for reinvoking an inference equivalent to INFERENCE.
     */
    @LispMethod(comment = "Return a NEW-CYC-QUERY form suitable for reinvoking an inference equivalent to INFERENCE.")
    public static SubLObject inference_to_new_cyc_query_form(final SubLObject inference) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	thread.resetMultipleValues();
	final SubLObject sentence = inference_datastructures_inference.inference_to_new_cyc_query_arguments(inference);
	final SubLObject mt = thread.secondMultipleValue();
	final SubLObject query_properties = thread.thirdMultipleValue();
	thread.resetMultipleValues();
	return listS(NEW_CYC_QUERY, list_utilities.quotify(sentence), append((NIL != mt) || (NIL != query_properties) ? list(list_utilities.quotify(mt)) : NIL, NIL != query_properties ? list(list_utilities.quotify(query_properties)) : NIL, NIL));
    }

    /**
     * Return a readable string representation of a
     * NEW-CYC-QUERY form suitable for reinvoking an inference equivalent to INFERENCE.
     */
    @LispMethod(comment = "Return a readable string representation of a\r\nNEW-CYC-QUERY form suitable for reinvoking an inference equivalent to INFERENCE.\nReturn a readable string representation of a\nNEW-CYC-QUERY form suitable for reinvoking an inference equivalent to INFERENCE.")
    public static final SubLObject inference_to_new_cyc_query_form_string_alt(SubLObject inference) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    thread.resetMultipleValues();
	    {
		SubLObject sentence = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_to_new_cyc_query_arguments(inference);
		SubLObject mt = thread.secondMultipleValue();
		SubLObject query_properties = thread.thirdMultipleValue();
		thread.resetMultipleValues();
		sentence = cycl_utilities.hl_to_el(sentence);
		mt = cycl_utilities.hl_to_el(mt);
		return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_args_to_new_cyc_query_form_string(sentence, mt, query_properties);
	    }
	}
    }

    /**
     * Return a readable string representation of a
     * NEW-CYC-QUERY form suitable for reinvoking an inference equivalent to INFERENCE.
     */
    @LispMethod(comment = "Return a readable string representation of a\r\nNEW-CYC-QUERY form suitable for reinvoking an inference equivalent to INFERENCE.\nReturn a readable string representation of a\nNEW-CYC-QUERY form suitable for reinvoking an inference equivalent to INFERENCE.")
    public static SubLObject inference_to_new_cyc_query_form_string(final SubLObject inference) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	thread.resetMultipleValues();
	SubLObject sentence = inference_datastructures_inference.inference_to_new_cyc_query_arguments(inference);
	SubLObject mt = thread.secondMultipleValue();
	final SubLObject query_properties = thread.thirdMultipleValue();
	thread.resetMultipleValues();
	sentence = hl_to_el(sentence);
	mt = hl_to_el(mt);
	return inference_datastructures_inference.inference_args_to_new_cyc_query_form_string(sentence, mt, query_properties);
    }

    public static final SubLObject inference_args_to_new_cyc_query_form_string_alt(SubLObject sentence, SubLObject mt, SubLObject query_properties) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject result = NIL;
		SubLObject stream = NIL;
		try {
		    stream = make_private_string_output_stream();
		    {
			SubLObject sentence_string = format_cycl_expression.format_cycl_expression_to_string(sentence, ONE_INTEGER);
			Strings.set_char(sentence_string, TWO_INTEGER, CHAR_quote);
			format(stream, $str_alt377$_new_cyc_query_A, sentence_string);
		    }
		    if ((NIL != mt) || (NIL != query_properties)) {
			{
			    SubLObject mt_string = format_cycl_expression.format_cycl_expression_to_string(mt, ONE_INTEGER);
			    if (mt.isAtom()) {
				format(stream, $str_alt378$_____A, mt_string);
			    } else {
				Strings.set_char(mt_string, TWO_INTEGER, CHAR_quote);
				format(stream, $str_alt379$_A, mt_string);
			    }
			}
		    }
		    if (NIL != query_properties) {
			format(stream, $str_alt380$______);
			{
			    SubLObject _prev_bind_0 = $print_case$.currentBinding(thread);
			    try {
				$print_case$.bind($DOWNCASE, thread);
				{
				    SubLObject remainder = NIL;
				    for (remainder = query_properties; NIL != remainder; remainder = cddr(remainder)) {
					{
					    SubLObject property = remainder.first();
					    SubLObject value = cadr(remainder);
					    if (property == $PROBLEM_STORE) {
						format(stream, $str_alt382$_S___find_problem_store_by_id__S_, property, inference_datastructures_problem_store.problem_store_suid(value));
					    } else {
						if ((property == $ALLOWED_RULES) && (value != $ALL)) {
						    format(stream, $str_alt384$_S___list__, property);
						    {
							SubLObject cdolist_list_var = value;
							SubLObject one_value = NIL;
							for (one_value = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), one_value = cdolist_list_var.first()) {
							    format(stream, $str_alt385$_______find_object_by_hl_external, kb_utilities.hl_external_id_string(one_value));
							}
						    }
						    format(stream, $str_alt386$_______);
						} else {
						    format(stream, $str_alt387$_S__S______, property, value);
						}
					    }
					}
				    }
				}
			    } finally {
				$print_case$.rebind(_prev_bind_0, thread);
			    }
			}
			format(stream, $str_alt388$_);
		    }
		    format(stream, $str_alt388$_);
		    result = get_output_stream_string(stream);
		} finally {
		    {
			SubLObject _prev_bind_0 = $is_thread_performing_cleanupP$.currentBinding(thread);
			try {
			    $is_thread_performing_cleanupP$.bind(T, thread);
			    close(stream, UNPROVIDED);
			} finally {
			    $is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
			}
		    }
		}
		return result;
	    }
	}
    }

    public static SubLObject inference_args_to_new_cyc_query_form_string(final SubLObject sentence, final SubLObject mt, final SubLObject query_properties) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject result = NIL;
	SubLObject stream = NIL;
	try {
	    stream = make_private_string_output_stream();
	    final SubLObject sentence_string = format_cycl_expression_to_string(sentence, ONE_INTEGER);
	    Strings.set_char(sentence_string, TWO_INTEGER, CHAR_quote);
	    format(stream, inference_datastructures_inference.$str398$_new_cyc_query_A, sentence_string);
	    if ((NIL != mt) || (NIL != query_properties)) {
		final SubLObject mt_string = format_cycl_expression_to_string(mt, ONE_INTEGER);
		if (mt.isAtom()) {
		    format(stream, inference_datastructures_inference.$str399$_____A, mt_string);
		} else {
		    Strings.set_char(mt_string, TWO_INTEGER, CHAR_quote);
		    format(stream, inference_datastructures_inference.$str400$_A, mt_string);
		}
	    }
	    if (NIL != query_properties) {
		format(stream, inference_datastructures_inference.$str401$_____list______);
		final SubLObject _prev_bind_0 = $print_case$.currentBinding(thread);
		try {
		    $print_case$.bind($DOWNCASE, thread);
		    SubLObject remainder;
		    SubLObject property;
		    SubLObject value;
		    SubLObject cdolist_list_var;
		    SubLObject one_value;
		    for (remainder = NIL, remainder = query_properties; NIL != remainder; remainder = cddr(remainder)) {
			property = remainder.first();
			value = cadr(remainder);
			if (property == $PROBLEM_STORE) {
			    format(stream, inference_datastructures_inference.$str403$_S__find_problem_store_by_id__S__, property, inference_datastructures_problem_store.problem_store_suid(value));
			} else if (((property == $ALLOWED_RULES) || (property == $FORBIDDEN_RULES)) && (value != $ALL)) {
			    format(stream, inference_datastructures_inference.$str405$_S__list, property);
			    cdolist_list_var = value;
			    one_value = NIL;
			    one_value = cdolist_list_var.first();
			    while (NIL != cdolist_list_var) {
				format(stream, inference_datastructures_inference.$str406$_________find_object_by_hl_extern, hl_external_id_string(one_value));
				cdolist_list_var = cdolist_list_var.rest();
				one_value = cdolist_list_var.first();
			    }
			    format(stream, inference_datastructures_inference.$str407$_______);
			} else if (NIL != list_utilities.self_evaluating_form_p(value)) {
			    format(stream, inference_datastructures_inference.$str408$_S__S______, property, value);
			} else {
			    format(stream, inference_datastructures_inference.$str408$_S__S______, property, list_utilities.quotify(value));
			}

		    }
		} finally {
		    $print_case$.rebind(_prev_bind_0, thread);
		}
		format(stream, inference_datastructures_inference.$str409$_);
	    }
	    format(stream, inference_datastructures_inference.$str409$_);
	    result = get_output_stream_string(stream);
	} finally {
	    final SubLObject _prev_bind_2 = $is_thread_performing_cleanupP$.currentBinding(thread);
	    try {
		$is_thread_performing_cleanupP$.bind(T, thread);
		final SubLObject _values = getValuesAsVector();
		close(stream, UNPROVIDED);
		restoreValuesFromVector(_values);
	    } finally {
		$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
	    }
	}
	return result;
    }

    public static final SubLObject inference_root_mapped_problem_alt(SubLObject inference) {
	{
	    SubLObject root_link = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_root_link(inference);
	    if (NIL != root_link) {
		return answer_link_supporting_mapped_problem(root_link);
	    }
	}
	return NIL;
    }

    public static SubLObject inference_root_mapped_problem(final SubLObject inference) {
	final SubLObject root_link = inference_datastructures_inference.inference_root_link(inference);
	if (NIL != root_link) {
	    return inference_worker_answer.answer_link_supporting_mapped_problem(root_link);
	}
	return NIL;
    }

    public static final SubLObject inference_root_problem_alt(SubLObject inference) {
	{
	    SubLObject root_mapped_problem = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_root_mapped_problem(inference);
	    if (NIL != root_mapped_problem) {
		return inference_datastructures_problem_link.mapped_problem_problem(root_mapped_problem);
	    }
	}
	return NIL;
    }

    public static SubLObject inference_root_problem(final SubLObject inference) {
	final SubLObject root_mapped_problem = inference_datastructures_inference.inference_root_mapped_problem(inference);
	if (NIL != root_mapped_problem) {
	    return inference_datastructures_problem_link.mapped_problem_problem(root_mapped_problem);
	}
	return NIL;
    }

    public static final SubLObject inference_unique_wrt_proofsP_alt(SubLObject inference) {
	return eq($PROOF, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_result_uniqueness_criterion(inference));
    }

    public static SubLObject inference_unique_wrt_proofsP(final SubLObject inference) {
	return eq($PROOF, inference_datastructures_inference.inference_result_uniqueness_criterion(inference));
    }

    public static final SubLObject inference_unique_wrt_bindingsP_alt(SubLObject inference) {
	return eq($BINDINGS, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_result_uniqueness_criterion(inference));
    }

    public static SubLObject inference_unique_wrt_bindingsP(final SubLObject inference) {
	return eq($BINDINGS, inference_datastructures_inference.inference_result_uniqueness_criterion(inference));
    }

    public static final SubLObject inference_compute_answer_justificationsP_alt(SubLObject inference) {
	return inference_datastructures_problem_store.problem_store_compute_answer_justificationsP(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store(inference));
    }

    public static SubLObject inference_compute_answer_justificationsP(final SubLObject inference) {
	return inference_datastructures_problem_store.problem_store_compute_answer_justificationsP(inference_datastructures_inference.inference_problem_store(inference));
    }

    public static final SubLObject inference_computes_metricsP_alt(SubLObject inference) {
	return sublisp_boolean(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_metrics_template(inference));
    }

    public static SubLObject inference_computes_metricsP(final SubLObject inference) {
	return list_utilities.sublisp_boolean(inference_datastructures_inference.inference_metrics_template(inference));
    }

    public static final SubLObject inference_computes_metricP_alt(SubLObject inference, SubLObject metric) {
	return member_eqP(metric, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_metrics_template(inference));
    }

    public static SubLObject inference_computes_metricP(final SubLObject inference, final SubLObject metric) {
	return list_utilities.member_eqP(metric, inference_datastructures_inference.inference_metrics_template(inference));
    }

    /**
     * Return T iff INFERENCE not only has a private problem store, but the current set
     * of dynamic properties will never be extended.
     */
    @LispMethod(comment = "Return T iff INFERENCE not only has a private problem store, but the current set\r\nof dynamic properties will never be extended.\nReturn T iff INFERENCE not only has a private problem store, but the current set\nof dynamic properties will never be extended.")
    public static final SubLObject inference_problem_store_private_wrt_dynamic_propertiesP_alt(SubLObject inference) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store_privateP(inference)) && (NIL == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_continuableP(inference)));
    }

    /**
     * Return T iff INFERENCE not only has a private problem store, but the current set
     * of dynamic properties will never be extended.
     */
    @LispMethod(comment = "Return T iff INFERENCE not only has a private problem store, but the current set\r\nof dynamic properties will never be extended.\nReturn T iff INFERENCE not only has a private problem store, but the current set\nof dynamic properties will never be extended.")
    public static SubLObject inference_problem_store_private_wrt_dynamic_propertiesP(final SubLObject inference) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_problem_store_privateP(inference)) && (NIL == inference_datastructures_inference.inference_continuableP(inference)));
    }

    /**
     * Return T iff INFERENCE has dynamic properties that indicate that
     * it is expected to run until it suspends with a suspend status
     * that satisfies exhausted-inference-suspend-status-p.
     */
    @LispMethod(comment = "Return T iff INFERENCE has dynamic properties that indicate that\r\nit is expected to run until it suspends with a suspend status\r\nthat satisfies exhausted-inference-suspend-status-p.\nReturn T iff INFERENCE has dynamic properties that indicate that\nit is expected to run until it suspends with a suspend status\nthat satisfies exhausted-inference-suspend-status-p.")
    public static final SubLObject inference_dynamic_properties_exhaustiveP_alt(SubLObject inference) {
	return makeBoolean((((NIL == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_max_time(inference)) && (NIL == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_max_step(inference)))
		&& (NIL == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_max_number(inference)))
		&& (!(((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.simplest_inference_p(inference))
			&& (NIL != inference_datastructures_strategy.strategy_unique_wrt_bindingsP(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.simplest_inference_strategy(inference))))
			&& (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_no_free_hl_varsP(inference)))));
    }

    /**
     * Return T iff INFERENCE has dynamic properties that indicate that
     * it is expected to run until it suspends with a suspend status
     * that satisfies exhausted-inference-suspend-status-p.
     */
    @LispMethod(comment = "Return T iff INFERENCE has dynamic properties that indicate that\r\nit is expected to run until it suspends with a suspend status\r\nthat satisfies exhausted-inference-suspend-status-p.\nReturn T iff INFERENCE has dynamic properties that indicate that\nit is expected to run until it suspends with a suspend status\nthat satisfies exhausted-inference-suspend-status-p.")
    public static SubLObject inference_dynamic_properties_exhaustiveP(final SubLObject inference) {
	return makeBoolean((((NIL == inference_datastructures_inference.inference_max_time(inference)) && (NIL == inference_datastructures_inference.inference_max_step(inference))) && (NIL == inference_datastructures_inference.inference_max_number(inference)))
		&& (((NIL == inference_datastructures_inference.simplest_inference_p(inference)) || (NIL == inference_datastructures_strategy.strategy_unique_wrt_bindingsP(inference_datastructures_inference.simplest_inference_strategy(inference))))
			|| (NIL == inference_datastructures_inference.inference_no_free_hl_varsP(inference))));
    }

    public static final SubLObject inference_allows_use_of_all_rulesP_alt(SubLObject inference) {
	return makeBoolean(($ALL == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_allowed_rules(inference)) && ($NONE == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_forbidden_rules(inference)));
    }

    public static SubLObject inference_allows_use_of_all_rulesP(final SubLObject inference) {
	return makeBoolean(($ALL == inference_datastructures_inference.inference_allowed_rules(inference)) && ($NONE == inference_datastructures_inference.inference_forbidden_rules(inference)));
    }

    public static final SubLObject inference_allows_use_of_ruleP_alt(SubLObject inference, SubLObject rule) {
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_allows_use_of_all_rulesP(inference)) {
	    return T;
	} else {
	    if ($NONE == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_forbidden_rules(inference)) {
		return set.set_memberP(rule, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_allowed_rules(inference));
	    } else {
		if ($ALL == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_allowed_rules(inference)) {
		    return makeBoolean(NIL == set.set_memberP(rule, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_forbidden_rules(inference)));
		}
	    }
	}
	return NIL;
    }

    public static SubLObject inference_allows_use_of_ruleP(final SubLObject inference, final SubLObject rule) {
	if (NIL != inference_datastructures_inference.inference_allows_use_of_all_rulesP(inference)) {
	    return T;
	}
	if ($NONE == inference_datastructures_inference.inference_forbidden_rules(inference)) {
	    return set_memberP(rule, inference_datastructures_inference.inference_allowed_rules(inference));
	}
	if ($ALL == inference_datastructures_inference.inference_allowed_rules(inference)) {
	    return makeBoolean(NIL == set_memberP(rule, inference_datastructures_inference.inference_forbidden_rules(inference)));
	}
	return NIL;
    }

    public static final SubLObject inference_filter_rules_alt(SubLObject inference, SubLObject rules) {
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_allows_use_of_all_rulesP(inference)) {
	    return rules;
	}
	{
	    SubLObject inference_allowed_rules_list = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_allowed_rules_list(inference);
	    SubLObject inference_forbidden_rules_list = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_forbidden_rules_list(inference);
	    SubLObject filtered_rules = NIL;
	    if ($NONE == inference_forbidden_rules_list) {
		filtered_rules = keyhash_utilities.fast_intersection(rules, inference_allowed_rules_list, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	    } else {
		if ($ALL == inference_allowed_rules_list) {
		    filtered_rules = fast_set_difference(rules, inference_forbidden_rules_list, UNPROVIDED);
		} else {
		    filtered_rules = keyhash_utilities.fast_intersection(rules, inference_allowed_rules_list, UNPROVIDED, UNPROVIDED, UNPROVIDED);
		    filtered_rules = fast_set_difference(filtered_rules, inference_forbidden_rules_list, UNPROVIDED);
		}
	    }
	    return filtered_rules;
	}
    }

    public static SubLObject inference_filter_rules(final SubLObject inference, final SubLObject rules) {
	if (NIL != inference_datastructures_inference.inference_allows_use_of_all_rulesP(inference)) {
	    return rules;
	}
	final SubLObject inference_allowed_rules_list = inference_datastructures_inference.inference_allowed_rules_list(inference);
	final SubLObject inference_forbidden_rules_list = inference_datastructures_inference.inference_forbidden_rules_list(inference);
	SubLObject filtered_rules = NIL;
	if ($NONE == inference_forbidden_rules_list) {
	    filtered_rules = fast_intersection(rules, inference_allowed_rules_list, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	} else if ($ALL == inference_allowed_rules_list) {
	    filtered_rules = list_utilities.fast_set_difference(rules, inference_forbidden_rules_list, UNPROVIDED);
	} else {
	    filtered_rules = fast_intersection(rules, inference_allowed_rules_list, UNPROVIDED, UNPROVIDED, UNPROVIDED);
	    filtered_rules = list_utilities.fast_set_difference(filtered_rules, inference_forbidden_rules_list, UNPROVIDED);
	}

	return filtered_rules;
    }

    public static final SubLObject inference_allows_use_of_all_modulesP_alt(SubLObject inference) {
	return eq($ALL, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_allowed_modules(inference));
    }

    public static SubLObject inference_allows_use_of_all_modulesP(final SubLObject inference) {
	return eq($ALL, inference_datastructures_inference.inference_allowed_modules(inference));
    }

    public static final SubLObject inference_allows_use_of_moduleP_alt(SubLObject inference, SubLObject hl_module) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_allows_use_of_all_modulesP(inference))
		|| (NIL != hl_module_allowedP(hl_module, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_allowed_modules(inference))));
    }

    public static SubLObject inference_allows_use_of_moduleP(final SubLObject inference, final SubLObject hl_module) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_allows_use_of_all_modulesP(inference)) || (NIL != inference_modules.hl_module_allowedP(hl_module, inference_datastructures_inference.inference_allowed_modules(inference))));
    }

    public static final SubLObject inference_forget_extra_resultsP_alt(SubLObject inference) {
	return inference_datastructures_enumerated_types.inference_properties_forget_extra_resultsP(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_input_query_properties(inference));
    }

    public static SubLObject inference_forget_extra_resultsP(final SubLObject inference) {
	return inference_datastructures_enumerated_types.inference_properties_forget_extra_resultsP(inference_datastructures_inference.inference_input_query_properties(inference));
    }

    public static final SubLObject inference_has_some_answerP_alt(SubLObject inference) {
	{
	    SubLObject v_id_index = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_id_index(inference);
	    return plusp(id_index_count(v_id_index));
	}
    }

    public static SubLObject inference_has_some_answerP(final SubLObject inference) {
	final SubLObject v_id_index = inference_datastructures_inference.inference_answer_id_index(inference);
	return plusp(id_index_count(v_id_index));
    }

    public static final SubLObject find_inference_answer_by_id_alt(SubLObject inference, SubLObject id) {
	SubLTrampolineFile.checkType(id, NON_NEGATIVE_INTEGER_P);
	{
	    SubLObject v_id_index = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_id_index(inference);
	    return id_index_lookup(v_id_index, id, UNPROVIDED);
	}
    }

    public static SubLObject find_inference_answer_by_id(final SubLObject inference, final SubLObject id) {
	assert NIL != non_negative_integer_p(id) : "! subl_promotions.non_negative_integer_p(id) " + ("subl_promotions.non_negative_integer_p(id) " + "CommonSymbols.NIL != subl_promotions.non_negative_integer_p(id) ") + id;
	final SubLObject v_id_index = inference_datastructures_inference.inference_answer_id_index(inference);
	return id_index_lookup(v_id_index, id, UNPROVIDED);
    }

    public static final SubLObject find_inference_answer_by_ids_alt(SubLObject store_id, SubLObject inference_id, SubLObject answer_id) {
	{
	    SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(store_id, inference_id);
	    if (NIL != inference) {
		{
		    SubLObject v_answer = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.find_inference_answer_by_id(inference, answer_id);
		    return v_answer;
		}
	    }
	}
	return NIL;
    }

    public static SubLObject find_inference_answer_by_ids(final SubLObject store_id, final SubLObject inference_id, final SubLObject answer_id) {
	final SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(store_id, inference_id);
	if (NIL != inference) {
	    final SubLObject v_answer = inference_datastructures_inference.find_inference_answer_by_id(inference, answer_id);
	    return v_answer;
	}
	return NIL;
    }

    public static SubLObject inference_answer_signature(final SubLObject v_answer) {
	return list(inference_datastructures_problem_store.problem_store_suid(inference_datastructures_inference.inference_answer_problem_store(v_answer)), inference_datastructures_inference.inference_suid(inference_datastructures_inference.inference_answer_inference(v_answer)),
		inference_datastructures_inference.inference_answer_suid(v_answer));
    }

    public static SubLObject find_inference_answer_from_signature(final SubLObject signature) {
	SubLObject problem_store_suid = NIL;
	SubLObject inference_suid = NIL;
	SubLObject answer_suid = NIL;
	destructuring_bind_must_consp(signature, signature, inference_datastructures_inference.$list413);
	problem_store_suid = signature.first();
	SubLObject current = signature.rest();
	destructuring_bind_must_consp(current, signature, inference_datastructures_inference.$list413);
	inference_suid = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, signature, inference_datastructures_inference.$list413);
	answer_suid = current.first();
	current = current.rest();
	if (NIL == current) {
	    return inference_datastructures_inference.find_inference_answer_by_ids(problem_store_suid, inference_suid, answer_suid);
	}
	cdestructuring_bind_error(signature, inference_datastructures_inference.$list413);
	return NIL;
    }

    public static final SubLObject inference_first_answer_alt(SubLObject inference) {
	{
	    SubLObject limit = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_next_new_answer_id(inference);
	    SubLObject v_answer = NIL;
	    if (NIL == v_answer) {
		{
		    SubLObject end_var = limit;
		    SubLObject id = NIL;
		    for (id = ZERO_INTEGER; !((NIL != v_answer) || id.numGE(end_var)); id = f_1X(id)) {
			v_answer = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.find_inference_answer_by_id(inference, id);
		    }
		}
	    }
	    return v_answer;
	}
    }

    public static SubLObject inference_first_answer(final SubLObject inference) {
	return inference_datastructures_inference.inference_first_answer_with_id_or_greater(inference, ZERO_INTEGER);
    }

    public static final SubLObject inference_last_answer_alt(SubLObject inference) {
	{
	    SubLObject limit = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_next_new_answer_id(inference);
	    SubLObject v_answer = NIL;
	    if (NIL == v_answer) {
		{
		    SubLObject end_var = MINUS_ONE_INTEGER;
		    SubLObject id = NIL;
		    for (id = f_1_(limit); !((NIL != v_answer) || id.numLE(end_var)); id = add(id, MINUS_ONE_INTEGER)) {
			v_answer = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.find_inference_answer_by_id(inference, id);
		    }
		}
	    }
	    return v_answer;
	}
    }

    public static SubLObject inference_last_answer(final SubLObject inference) {
	final SubLObject limit = inference_datastructures_inference.inference_next_new_answer_id(inference);
	SubLObject v_answer = NIL;
	if (NIL == v_answer) {
	    SubLObject end_var;
	    SubLObject id;
	    for (end_var = MINUS_ONE_INTEGER, id = NIL, id = number_utilities.f_1_(limit); (NIL == v_answer) && (!id.numLE(end_var)); v_answer = inference_datastructures_inference.find_inference_answer_by_id(inference, id), id = add(id, MINUS_ONE_INTEGER)) {
	    }
	}
	return v_answer;
    }

    public static SubLObject inference_first_answer_with_id_or_greater(final SubLObject inference, final SubLObject min_id) {
	final SubLObject limit = inference_datastructures_inference.inference_next_new_answer_id(inference);
	SubLObject v_answer = NIL;
	if (NIL == v_answer) {
	    SubLObject end_var;
	    SubLObject id;
	    for (end_var = limit, id = NIL, id = min_id; (NIL == v_answer) && (!id.numGE(end_var)); v_answer = inference_datastructures_inference.find_inference_answer_by_id(inference, id), id = number_utilities.f_1X(id)) {
	    }
	}
	return v_answer;
    }

    public static final SubLObject inference_first_answer_elapsed_time_alt(SubLObject inference) {
	{
	    SubLObject first_answer = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_first_answer(inference);
	    if (NIL != first_answer) {
		return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_elapsed_time(first_answer, NIL);
	    }
	}
	return NIL;
    }

    public static SubLObject inference_first_answer_elapsed_time(final SubLObject inference) {
	final SubLObject first_answer = inference_datastructures_inference.inference_first_answer(inference);
	if (NIL != first_answer) {
	    return inference_datastructures_inference.inference_answer_elapsed_time(first_answer, NIL);
	}
	return NIL;
    }

    public static final SubLObject inference_first_answer_step_count_alt(SubLObject inference) {
	{
	    SubLObject first_answer = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_first_answer(inference);
	    if (NIL != first_answer) {
		return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_step_count(first_answer);
	    }
	}
	return NIL;
    }

    public static SubLObject inference_first_answer_step_count(final SubLObject inference) {
	final SubLObject first_answer = inference_datastructures_inference.inference_first_answer(inference);
	if (NIL != first_answer) {
	    return inference_datastructures_inference.inference_answer_step_count(first_answer);
	}
	return NIL;
    }

    public static final SubLObject inference_last_answer_elapsed_time_alt(SubLObject inference) {
	{
	    SubLObject last_answer = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_last_answer(inference);
	    if (NIL != last_answer) {
		return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_elapsed_time(last_answer, NIL);
	    }
	}
	return NIL;
    }

    public static SubLObject inference_last_answer_elapsed_time(final SubLObject inference) {
	final SubLObject last_answer = inference_datastructures_inference.inference_last_answer(inference);
	if (NIL != last_answer) {
	    return inference_datastructures_inference.inference_answer_elapsed_time(last_answer, NIL);
	}
	return NIL;
    }

    public static final SubLObject inference_last_answer_step_count_alt(SubLObject inference) {
	{
	    SubLObject first_answer = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_last_answer(inference);
	    if (NIL != first_answer) {
		return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_step_count(first_answer);
	    }
	}
	return NIL;
    }

    public static SubLObject inference_last_answer_step_count(final SubLObject inference) {
	final SubLObject first_answer = inference_datastructures_inference.inference_last_answer(inference);
	if (NIL != first_answer) {
	    return inference_datastructures_inference.inference_answer_step_count(first_answer);
	}
	return NIL;
    }

    public static SubLObject inference_last_answer_id(final SubLObject inference) {
	final SubLObject last_answer = inference_datastructures_inference.inference_last_answer(inference);
	return NIL != last_answer ? inference_datastructures_inference.inference_answer_suid(last_answer) : NIL;
    }

    /**
     * Return the total number of answers for INFERENCE which were obtained
     * within ELAPSED-SECONDS number of seconds of processing.
     *
     * @return non-negative-integer-p
     */
    @LispMethod(comment = "Return the total number of answers for INFERENCE which were obtained\r\nwithin ELAPSED-SECONDS number of seconds of processing.\r\n\r\n@return non-negative-integer-p\nReturn the total number of answers for INFERENCE which were obtained\nwithin ELAPSED-SECONDS number of seconds of processing.")
    public static final SubLObject inference_answer_count_at_elapsed_time_alt(SubLObject inference, SubLObject elapsed_seconds) {
	{
	    SubLObject elapsed_internal_real_time = elapsed_seconds_to_elapsed_internal_real_time(elapsed_seconds);
	    SubLObject count = ZERO_INTEGER;
	    SubLObject idx = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_id_index(inference);
	    if (NIL == do_id_index_empty_p(idx, $SKIP)) {
		{
		    SubLObject id = do_id_index_next_id(idx, NIL, NIL, NIL);
		    SubLObject state_var = do_id_index_next_state(idx, NIL, id, NIL);
		    SubLObject v_answer = NIL;
		    while (NIL != id) {
			v_answer = do_id_index_state_object(idx, $SKIP, id, state_var);
			if (NIL != do_id_index_id_and_object_validP(id, v_answer, $SKIP)) {
			    if (com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_elapsed_creation_time(v_answer).numLE(elapsed_internal_real_time)) {
				count = add(count, ONE_INTEGER);
			    }
			}
			id = do_id_index_next_id(idx, NIL, id, state_var);
			state_var = do_id_index_next_state(idx, NIL, id, state_var);
		    }
		}
	    }
	    return count;
	}
    }

    /**
     * Return the total number of answers for INFERENCE which were obtained
     * within ELAPSED-SECONDS number of seconds of processing.
     *
     * @return non-negative-integer-p
     */
    @LispMethod(comment = "Return the total number of answers for INFERENCE which were obtained\r\nwithin ELAPSED-SECONDS number of seconds of processing.\r\n\r\n@return non-negative-integer-p\nReturn the total number of answers for INFERENCE which were obtained\nwithin ELAPSED-SECONDS number of seconds of processing.")
    public static SubLObject inference_answer_count_at_elapsed_time(final SubLObject inference, final SubLObject elapsed_seconds) {
	final SubLObject elapsed_internal_real_time = numeric_date_utilities.elapsed_seconds_to_elapsed_internal_real_time(elapsed_seconds);
	SubLObject count = ZERO_INTEGER;
	final SubLObject idx = inference_datastructures_inference.inference_answer_id_index(inference);
	if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
	    final SubLObject idx_$25 = idx;
	    if (NIL == id_index_dense_objects_empty_p(idx_$25, $SKIP)) {
		final SubLObject vector_var = id_index_dense_objects(idx_$25);
		final SubLObject backwardP_var = NIL;
		SubLObject length;
		SubLObject v_iteration;
		SubLObject id;
		SubLObject v_answer;
		for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
		    id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
		    v_answer = aref(vector_var, id);
		    if ((NIL == id_index_tombstone_p(v_answer)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
			if (NIL != id_index_tombstone_p(v_answer)) {
			    v_answer = $SKIP;
			}
			if (inference_datastructures_inference.inference_answer_elapsed_creation_time(v_answer).numLE(elapsed_internal_real_time)) {
			    count = add(count, ONE_INTEGER);
			}
		    }
		}
	    }
	    final SubLObject idx_$26 = idx;
	    if (NIL == id_index_sparse_objects_empty_p(idx_$26)) {
		final SubLObject cdohash_table = id_index_sparse_objects(idx_$26);
		SubLObject id2 = NIL;
		SubLObject v_answer2 = NIL;
		final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
		try {
		    while (iteratorHasNext(cdohash_iterator)) {
			final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
			id2 = getEntryKey(cdohash_entry);
			v_answer2 = getEntryValue(cdohash_entry);
			if (inference_datastructures_inference.inference_answer_elapsed_creation_time(v_answer2).numLE(elapsed_internal_real_time)) {
			    count = add(count, ONE_INTEGER);
			}
		    }
		} finally {
		    releaseEntrySetIterator(cdohash_iterator);
		}
	    }
	}
	return count;
    }

    public static final SubLObject inference_answer_count_at_30_seconds_alt(SubLObject inference) {
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_count_at_elapsed_time(inference, $int$30);
    }

    public static SubLObject inference_answer_count_at_30_seconds(final SubLObject inference) {
	return inference_datastructures_inference.inference_answer_count_at_elapsed_time(inference, inference_datastructures_inference.$int$30);
    }

    public static final SubLObject inference_answer_count_at_60_seconds_alt(SubLObject inference) {
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_count_at_elapsed_time(inference, $int$60);
    }

    public static SubLObject inference_answer_count_at_60_seconds(final SubLObject inference) {
	return inference_datastructures_inference.inference_answer_count_at_elapsed_time(inference, inference_datastructures_inference.$int$60);
    }

    public static final SubLObject inference_answer_times_alt(SubLObject inference) {
	{
	    SubLObject times = NIL;
	    SubLObject idx = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_id_index(inference);
	    if (NIL == do_id_index_empty_p(idx, $SKIP)) {
		{
		    SubLObject id = do_id_index_next_id(idx, T, NIL, NIL);
		    SubLObject state_var = do_id_index_next_state(idx, T, id, NIL);
		    SubLObject v_answer = NIL;
		    while (NIL != id) {
			v_answer = do_id_index_state_object(idx, $SKIP, id, state_var);
			if (NIL != do_id_index_id_and_object_validP(id, v_answer, $SKIP)) {
			    times = cons(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_elapsed_creation_time(v_answer), times);
			}
			id = do_id_index_next_id(idx, T, id, state_var);
			state_var = do_id_index_next_state(idx, T, id, state_var);
		    }
		}
	    }
	    return nreverse(times);
	}
    }

    public static SubLObject inference_answer_times(final SubLObject inference) {
	SubLObject times = NIL;
	final SubLObject idx = inference_datastructures_inference.inference_answer_id_index(inference);
	if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
	    final SubLObject idx_$27 = idx;
	    if (NIL == id_index_dense_objects_empty_p(idx_$27, $SKIP)) {
		final SubLObject vector_var = id_index_dense_objects(idx_$27);
		final SubLObject backwardP_var = NIL;
		SubLObject length;
		SubLObject v_iteration;
		SubLObject id;
		SubLObject v_answer;
		for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
		    id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
		    v_answer = aref(vector_var, id);
		    if ((NIL == id_index_tombstone_p(v_answer)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
			if (NIL != id_index_tombstone_p(v_answer)) {
			    v_answer = $SKIP;
			}
			times = cons(inference_datastructures_inference.inference_answer_elapsed_creation_time(v_answer), times);
		    }
		}
	    }
	    final SubLObject idx_$28 = idx;
	    if ((NIL == id_index_sparse_objects_empty_p(idx_$28)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
		final SubLObject sparse = id_index_sparse_objects(idx_$28);
		SubLObject id2 = id_index_sparse_id_threshold(idx_$28);
		final SubLObject end_id = id_index_next_id(idx_$28);
		final SubLObject v_default = (NIL != id_index_skip_tombstones_p($SKIP)) ? NIL : $SKIP;
		while (id2.numL(end_id)) {
		    final SubLObject v_answer2 = gethash_without_values(id2, sparse, v_default);
		    if ((NIL == id_index_skip_tombstones_p($SKIP)) || (NIL == id_index_tombstone_p(v_answer2))) {
			times = cons(inference_datastructures_inference.inference_answer_elapsed_creation_time(v_answer2), times);
		    }
		    id2 = add(id2, ONE_INTEGER);
		}
	    }
	}
	return nreverse(times);
    }

    public static final SubLObject inference_answer_step_counts_alt(SubLObject inference) {
	{
	    SubLObject times = NIL;
	    SubLObject idx = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_id_index(inference);
	    if (NIL == do_id_index_empty_p(idx, $SKIP)) {
		{
		    SubLObject id = do_id_index_next_id(idx, T, NIL, NIL);
		    SubLObject state_var = do_id_index_next_state(idx, T, id, NIL);
		    SubLObject v_answer = NIL;
		    while (NIL != id) {
			v_answer = do_id_index_state_object(idx, $SKIP, id, state_var);
			if (NIL != do_id_index_id_and_object_validP(id, v_answer, $SKIP)) {
			    times = cons(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_step_count(v_answer), times);
			}
			id = do_id_index_next_id(idx, T, id, state_var);
			state_var = do_id_index_next_state(idx, T, id, state_var);
		    }
		}
	    }
	    return nreverse(times);
	}
    }

    public static SubLObject inference_answer_step_counts(final SubLObject inference) {
	SubLObject times = NIL;
	final SubLObject idx = inference_datastructures_inference.inference_answer_id_index(inference);
	if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
	    final SubLObject idx_$29 = idx;
	    if (NIL == id_index_dense_objects_empty_p(idx_$29, $SKIP)) {
		final SubLObject vector_var = id_index_dense_objects(idx_$29);
		final SubLObject backwardP_var = NIL;
		SubLObject length;
		SubLObject v_iteration;
		SubLObject id;
		SubLObject v_answer;
		for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
		    id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
		    v_answer = aref(vector_var, id);
		    if ((NIL == id_index_tombstone_p(v_answer)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
			if (NIL != id_index_tombstone_p(v_answer)) {
			    v_answer = $SKIP;
			}
			times = cons(inference_datastructures_inference.inference_answer_step_count(v_answer), times);
		    }
		}
	    }
	    final SubLObject idx_$30 = idx;
	    if ((NIL == id_index_sparse_objects_empty_p(idx_$30)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
		final SubLObject sparse = id_index_sparse_objects(idx_$30);
		SubLObject id2 = id_index_sparse_id_threshold(idx_$30);
		final SubLObject end_id = id_index_next_id(idx_$30);
		final SubLObject v_default = (NIL != id_index_skip_tombstones_p($SKIP)) ? NIL : $SKIP;
		while (id2.numL(end_id)) {
		    final SubLObject v_answer2 = gethash_without_values(id2, sparse, v_default);
		    if ((NIL == id_index_skip_tombstones_p($SKIP)) || (NIL == id_index_tombstone_p(v_answer2))) {
			times = cons(inference_datastructures_inference.inference_answer_step_count(v_answer2), times);
		    }
		    id2 = add(id2, ONE_INTEGER);
		}
	    }
	}
	return nreverse(times);
    }

    public static SubLObject inference_new_root_metrics(final SubLObject inference) {
	if (NIL != inference_datastructures_inference.simplest_inference_p(inference)) {
	    final SubLObject strategy = inference_datastructures_inference.simplest_inference_strategy(inference);
	    if (NIL != striping_tactician.striping_tactician_p(strategy)) {
		return striping_tactician.striping_tactician_new_root_metrics(strategy);
	    }
	}
	return NIL;
    }

    public static final SubLObject inference_end_universal_time_alt(SubLObject inference) {
	{
	    SubLObject end_real_time = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_end_internal_real_time(inference);
	    if (NIL != end_real_time) {
		{
		    SubLObject start_real_time = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_start_internal_real_time(inference);
		    SubLObject elapsed = elapsed_internal_real_time(start_real_time, end_real_time);
		    SubLObject seconds = elapsed_internal_real_time_to_elapsed_seconds(elapsed);
		    SubLObject start_time = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_start_universal_time(inference);
		    SubLObject end_time = universal_time_seconds_from_now(seconds, start_time);
		    return end_time;
		}
	    }
	}
	return NIL;
    }

    public static SubLObject inference_end_universal_time(final SubLObject inference) {
	final SubLObject end_real_time = inference_datastructures_inference.inference_end_internal_real_time(inference);
	if (NIL != end_real_time) {
	    final SubLObject start_real_time = inference_datastructures_inference.inference_start_internal_real_time(inference);
	    final SubLObject elapsed = numeric_date_utilities.elapsed_internal_real_time(start_real_time, end_real_time);
	    final SubLObject seconds = numeric_date_utilities.elapsed_internal_real_time_to_elapsed_seconds(elapsed);
	    final SubLObject start_time = inference_datastructures_inference.inference_start_universal_time(inference);
	    final SubLObject end_time = numeric_date_utilities.universal_time_seconds_from_now(seconds, start_time);
	    return end_time;
	}
	return NIL;
    }

    public static final SubLObject inference_maintain_term_working_setP_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	return sublisp_boolean(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_working_time_data(inference));
    }

    public static SubLObject inference_maintain_term_working_setP(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	return list_utilities.sublisp_boolean(inference_datastructures_inference.inference_problem_working_time_data(inference));
    }

    public static final SubLObject inference_halt_condition_presentP_alt(SubLObject inference, SubLObject halt_condition) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(halt_condition, INFERENCE_HALT_CONDITION_P);
	return member_eqP(halt_condition, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_halt_conditions(inference));
    }

    public static SubLObject inference_halt_condition_presentP(final SubLObject inference, final SubLObject halt_condition) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_enumerated_types.inference_halt_condition_p(halt_condition) : "! inference_datastructures_enumerated_types.inference_halt_condition_p(halt_condition) "
		+ ("inference_datastructures_enumerated_types.inference_halt_condition_p(halt_condition) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.inference_halt_condition_p(halt_condition) ") + halt_condition;
	return list_utilities.member_eqP(halt_condition, inference_datastructures_inference.infrnc_halt_conditions(inference));
    }

    public static final SubLObject add_inference_accumulator_alt(SubLObject inference, SubLObject accumulator_type, SubLObject accumulator) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(accumulator_type, INFERENCE_ACCUMULATOR_TYPE_P);
	SubLTrampolineFile.checkType(accumulator, ACCUMULATOR_P);
	{
	    SubLObject dict = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_accumulators(inference);
	    dictionary.dictionary_enter(dict, accumulator_type, accumulator);
	}
	return NIL;
    }

    public static SubLObject add_inference_accumulator(final SubLObject inference, final SubLObject accumulator_type, final SubLObject accumulator) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_enumerated_types.inference_accumulator_type_p(accumulator_type) : "! inference_datastructures_enumerated_types.inference_accumulator_type_p(accumulator_type) "
		+ ("inference_datastructures_enumerated_types.inference_accumulator_type_p(accumulator_type) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.inference_accumulator_type_p(accumulator_type) ") + accumulator_type;
	assert NIL != accumulation.accumulator_p(accumulator) : "! accumulation.accumulator_p(accumulator) " + ("accumulation.accumulator_p(accumulator) " + "CommonSymbols.NIL != accumulation.accumulator_p(accumulator) ") + accumulator;
	final SubLObject dict = inference_datastructures_inference.inference_accumulators(inference);
	dictionary_enter(dict, accumulator_type, accumulator);
	return NIL;
    }

    public static final SubLObject inference_accumulator_alt(SubLObject inference, SubLObject accumulator_type) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(accumulator_type, INFERENCE_ACCUMULATOR_TYPE_P);
	{
	    SubLObject dict = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_accumulators(inference);
	    SubLObject accumulator = dictionary.dictionary_lookup_without_values(dict, accumulator_type, UNPROVIDED);
	    if (NIL == accumulator) {
		accumulator = inference_datastructures_enumerated_types.initialize_inference_accumulator(accumulator_type);
		dictionary.dictionary_enter(dict, accumulator_type, accumulator);
	    }
	    return accumulator;
	}
    }

    public static SubLObject inference_accumulator(final SubLObject inference, final SubLObject accumulator_type) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_enumerated_types.inference_accumulator_type_p(accumulator_type) : "! inference_datastructures_enumerated_types.inference_accumulator_type_p(accumulator_type) "
		+ ("inference_datastructures_enumerated_types.inference_accumulator_type_p(accumulator_type) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.inference_accumulator_type_p(accumulator_type) ") + accumulator_type;
	final SubLObject dict = inference_datastructures_inference.inference_accumulators(inference);
	SubLObject accumulator = dictionary_lookup_without_values(dict, accumulator_type, UNPROVIDED);
	if (NIL == accumulator) {
	    accumulator = inference_datastructures_enumerated_types.initialize_inference_accumulator(accumulator_type);
	    dictionary_enter(dict, accumulator_type, accumulator);
	}
	return accumulator;
    }

    public static final SubLObject inference_accumulator_contents_alt(SubLObject inference, SubLObject accumulator_type) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(accumulator_type, INFERENCE_ACCUMULATOR_TYPE_P);
	return accumulation_contents(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_accumulator(inference, accumulator_type), UNPROVIDED);
    }

    public static SubLObject inference_accumulator_contents(final SubLObject inference, final SubLObject accumulator_type) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_enumerated_types.inference_accumulator_type_p(accumulator_type) : "! inference_datastructures_enumerated_types.inference_accumulator_type_p(accumulator_type) "
		+ ("inference_datastructures_enumerated_types.inference_accumulator_type_p(accumulator_type) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.inference_accumulator_type_p(accumulator_type) ") + accumulator_type;
	return accumulation.accumulation_contents(inference_datastructures_inference.inference_accumulator(inference, accumulator_type), UNPROVIDED);
    }

    /**
     * Notes ELEMENT on INFERENCE's accumulator of type ACCUMULATOR-TYPE.
     */
    @LispMethod(comment = "Notes ELEMENT on INFERENCE\'s accumulator of type ACCUMULATOR-TYPE.")
    public static final SubLObject inference_accumulate_alt(SubLObject inference, SubLObject accumulator_type, SubLObject element) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(accumulator_type, INFERENCE_ACCUMULATOR_TYPE_P);
	return accumulation_add(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_accumulator(inference, accumulator_type), element);
    }

    /**
     * Notes ELEMENT on INFERENCE's accumulator of type ACCUMULATOR-TYPE.
     */
    @LispMethod(comment = "Notes ELEMENT on INFERENCE\'s accumulator of type ACCUMULATOR-TYPE.")
    public static SubLObject inference_accumulate(final SubLObject inference, final SubLObject accumulator_type, final SubLObject element) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_enumerated_types.inference_accumulator_type_p(accumulator_type) : "! inference_datastructures_enumerated_types.inference_accumulator_type_p(accumulator_type) "
		+ ("inference_datastructures_enumerated_types.inference_accumulator_type_p(accumulator_type) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.inference_accumulator_type_p(accumulator_type) ") + accumulator_type;
	return accumulation.accumulation_add(inference_datastructures_inference.inference_accumulator(inference, accumulator_type), element);
    }

    public static final SubLObject set_inference_proof_watermark_alt(SubLObject inference, SubLObject proof_watermark) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(proof_watermark, NON_NEGATIVE_INTEGER_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_proof_watermark(inference, proof_watermark);
	return inference;
    }

    public static SubLObject set_inference_proof_watermark(final SubLObject inference, final SubLObject proof_watermark) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != non_negative_integer_p(proof_watermark) : "! subl_promotions.non_negative_integer_p(proof_watermark) " + ("subl_promotions.non_negative_integer_p(proof_watermark) " + "CommonSymbols.NIL != subl_promotions.non_negative_integer_p(proof_watermark) ") + proof_watermark;
	inference_datastructures_inference._csetf_infrnc_proof_watermark(inference, proof_watermark);
	return inference;
    }

    public static final SubLObject compute_inference_pad_internal_real_time_alt(SubLObject inference) {
	{
	    SubLObject pad_probability = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_probably_approximately_done(inference);
	    SubLObject pad_seconds = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.probably_approximately_done_cutoff_time(pad_probability);
	    if (NIL != positive_infinity_p(pad_seconds)) {
		return positive_infinity();
	    } else {
		{
		    SubLObject pad_seconds_remaining = subtract(pad_seconds, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_cumulative_time(inference));
		    SubLObject start_time = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_start_internal_real_time(inference);
		    SubLObject pad_time = internal_real_time_seconds_from_now(pad_seconds_remaining, start_time);
		    return pad_time;
		}
	    }
	}
    }

    public static SubLObject compute_inference_pad_internal_real_time(final SubLObject inference) {
	final SubLObject pad_probability = inference_datastructures_inference.inference_probably_approximately_done(inference);
	final SubLObject pad_seconds = inference_datastructures_inference.probably_approximately_done_cutoff_time(pad_probability);
	if (NIL != number_utilities.positive_infinity_p(pad_seconds)) {
	    return number_utilities.positive_infinity();
	}
	final SubLObject pad_seconds_remaining = subtract(pad_seconds, inference_datastructures_inference.inference_cumulative_time(inference));
	final SubLObject start_time = inference_datastructures_inference.inference_start_internal_real_time(inference);
	final SubLObject pad_time = numeric_date_utilities.internal_real_time_seconds_from_now(pad_seconds_remaining, start_time);
	return pad_time;
    }

    public static final SubLObject initialize_pad_table_alt(SubLObject filename) {
	{
	    SubLObject scaled_times_to_first_answer = misc_utilities.scale_by_bogomips(inference_pad_data.$non_tkb_final_times_to_first_answer$.getGlobalValue(), inference_pad_data.$non_tkb_final_bogomips$.getGlobalValue());
	    $pad_times_to_first_answer$.setGlobalValue(scaled_times_to_first_answer);
	}
	return length($pad_times_to_first_answer$.getGlobalValue());
    }

    public static SubLObject initialize_pad_table(final SubLObject filename) {
	final SubLObject scaled_times_to_first_answer = scale_by_bogomips($non_tkb_final_times_to_first_answer$.getGlobalValue(), $non_tkb_final_bogomips$.getGlobalValue());
	inference_datastructures_inference.$pad_times_to_first_answer$.setGlobalValue(scaled_times_to_first_answer);
	return length(inference_datastructures_inference.$pad_times_to_first_answer$.getGlobalValue());
    }

    public static final SubLObject pad_table_initializedP_alt() {
	return consp($pad_times_to_first_answer$.getGlobalValue());
    }

    public static SubLObject pad_table_initializedP() {
	return consp(inference_datastructures_inference.$pad_times_to_first_answer$.getGlobalValue());
    }

    /**
     *
     *
     * @return positive-potentially-infinite-number-p (seconds or :positive-infinity)
     */
    @LispMethod(comment = "@return positive-potentially-infinite-number-p (seconds or :positive-infinity)")
    public static final SubLObject probably_approximately_done_cutoff_time_alt(SubLObject probability) {
	if ((NIL != safe_E(ONE_INTEGER, probability)) || (NIL == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.pad_table_initializedP())) {
	    return $POSITIVE_INFINITY;
	} else {
	    return percentile_sorted($pad_times_to_first_answer$.getGlobalValue(), probability);
	}
    }

    /**
     *
     *
     * @return positive-potentially-infinite-number-p (seconds or :positive-infinity)
     */
    @LispMethod(comment = "@return positive-potentially-infinite-number-p (seconds or :positive-infinity)")
    public static SubLObject probably_approximately_done_cutoff_time(final SubLObject probability) {
	if ((NIL != list_utilities.safe_E(ONE_INTEGER, probability)) || (NIL == inference_datastructures_inference.pad_table_initializedP())) {
	    return $POSITIVE_INFINITY;
	}
	return number_utilities.percentile_sorted(inference_datastructures_inference.$pad_times_to_first_answer$.getGlobalValue(), probability);
    }

    public static final SubLObject compute_pad_from_time_alt(SubLObject time) {
	if (NIL == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.pad_table_initializedP()) {
	    return NIL;
	}
	{
	    SubLObject times = member(time, $pad_times_to_first_answer$.getGlobalValue(), symbol_function($sym397$_), UNPROVIDED);
	    SubLObject pad = NIL;
	    SubLObject total = NIL;
	    SubLObject index = NIL;
	    if (NIL == times) {
		return NIL;
	    }
	    total = length($pad_times_to_first_answer$.getGlobalValue());
	    index = subtract(total, length(times));
	    pad = divide(index, total);
	    return pad;
	}
    }

    public static SubLObject compute_pad_from_time(final SubLObject time) {
	if (NIL == inference_datastructures_inference.pad_table_initializedP()) {
	    return NIL;
	}
	final SubLObject times = member(time, inference_datastructures_inference.$pad_times_to_first_answer$.getGlobalValue(), symbol_function(inference_datastructures_inference.$sym419$_), UNPROVIDED);
	SubLObject pad = NIL;
	SubLObject total = NIL;
	SubLObject index = NIL;
	if (NIL == times) {
	    return NIL;
	}
	total = length(inference_datastructures_inference.$pad_times_to_first_answer$.getGlobalValue());
	index = subtract(total, length(times));
	pad = divide(index, total);
	return pad;
    }

    public static final SubLObject inference_note_transformation_depth_alt(SubLObject inference, SubLObject depth) {
	probably_approximately_done.pad_note_transformation_depth(depth);
	{
	    SubLObject max_transformation_depth_reached = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_max_transformation_depth_reached(inference);
	    if (depth.numG(max_transformation_depth_reached)) {
		return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_note_new_transformation_depth_reached(inference, depth);
	    }
	}
	return NIL;
    }

    public static SubLObject inference_note_transformation_depth(final SubLObject inference, final SubLObject depth) {
	final SubLObject max_transformation_depth_reached = inference_datastructures_inference.inference_max_transformation_depth_reached(inference);
	if (depth.numG(max_transformation_depth_reached)) {
	    return inference_datastructures_inference.inference_note_new_transformation_depth_reached(inference, depth);
	}
	return NIL;
    }

    public static final SubLObject inference_note_new_transformation_depth_reached_alt(SubLObject inference, SubLObject depth) {
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_max_transformation_depth_reached(inference, depth);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.possibly_signal_inference_new_transformation_depth_reached(inference, depth);
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_halt_condition_presentP(inference, $LOOK_NO_DEEPER_FOR_ADDITIONAL_ANSWERS)) {
	    if (NIL != subl_promotions.positive_integer_p(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_count(inference))) {
		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_suspend_status(inference, $LOOK_NO_DEEPER_FOR_ADDITIONAL_ANSWERS);
		return $LOOK_NO_DEEPER_FOR_ADDITIONAL_ANSWERS;
	    }
	}
	return NIL;
    }

    public static SubLObject inference_note_new_transformation_depth_reached(final SubLObject inference, final SubLObject depth) {
	inference_datastructures_inference.set_inference_max_transformation_depth_reached(inference, depth);
	inference_datastructures_inference.possibly_signal_inference_new_transformation_depth_reached(inference, depth);
	if ((NIL != inference_datastructures_inference.inference_halt_condition_presentP(inference, inference_datastructures_inference.$LOOK_NO_DEEPER_FOR_ADDITIONAL_ANSWERS)) && (NIL != positive_integer_p(inference_datastructures_inference.inference_answer_count(inference)))) {
	    inference_datastructures_inference.set_inference_suspend_status(inference, inference_datastructures_inference.$LOOK_NO_DEEPER_FOR_ADDITIONAL_ANSWERS);
	    return inference_datastructures_inference.$LOOK_NO_DEEPER_FOR_ADDITIONAL_ANSWERS;
	}
	return NIL;
    }

    public static final SubLObject find_inference_answer_by_bindings_alt(SubLObject inference, SubLObject v_bindings) {
	SubLTrampolineFile.checkType(v_bindings, BINDING_LIST_P);
	{
	    SubLObject dict = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_bindings_index(inference);
	    return dictionary.dictionary_lookup(dict, v_bindings, UNPROVIDED);
	}
    }

    public static SubLObject find_inference_answer_by_bindings(final SubLObject inference, final SubLObject v_bindings) {
	assert NIL != bindings.binding_list_p(v_bindings) : "! bindings.binding_list_p(v_bindings) " + ("bindings.binding_list_p(v_bindings) " + "CommonSymbols.NIL != bindings.binding_list_p(v_bindings) ") + v_bindings;
	final SubLObject dict = inference_datastructures_inference.inference_answer_bindings_index(inference);
	return dictionary_lookup(dict, v_bindings, UNPROVIDED);
    }

    public static final SubLObject new_inference_answer_id_alt(SubLObject inference) {
	{
	    SubLObject v_id_index = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_id_index(inference);
	    return id_index_reserve(v_id_index);
	}
    }

    public static SubLObject new_inference_answer_id(final SubLObject inference) {
	final SubLObject v_id_index = inference_datastructures_inference.inference_answer_id_index(inference);
	return id_index_reserve(v_id_index);
    }

    public static SubLObject inference_count() {
	SubLObject count = ZERO_INTEGER;
	final SubLObject idx = inference_datastructures_problem_store.problem_store_id_index();
	if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
	    final SubLObject idx_$31 = idx;
	    if (NIL == id_index_dense_objects_empty_p(idx_$31, $SKIP)) {
		final SubLObject vector_var = id_index_dense_objects(idx_$31);
		final SubLObject backwardP_var = NIL;
		SubLObject length;
		SubLObject v_iteration;
		SubLObject id;
		SubLObject store;
		for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
		    id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
		    store = aref(vector_var, id);
		    if ((NIL == id_index_tombstone_p(store)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
			if (NIL != id_index_tombstone_p(store)) {
			    store = $SKIP;
			}
			count = add(count, inference_datastructures_problem_store.problem_store_inference_count(store));
		    }
		}
	    }
	    final SubLObject idx_$32 = idx;
	    if (NIL == id_index_sparse_objects_empty_p(idx_$32)) {
		final SubLObject cdohash_table = id_index_sparse_objects(idx_$32);
		SubLObject id2 = NIL;
		SubLObject store2 = NIL;
		final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
		try {
		    while (iteratorHasNext(cdohash_iterator)) {
			final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
			id2 = getEntryKey(cdohash_entry);
			store2 = getEntryValue(cdohash_entry);
			count = add(count, inference_datastructures_problem_store.problem_store_inference_count(store2));
		    }
		} finally {
		    releaseEntrySetIterator(cdohash_iterator);
		}
	    }
	}
	return count;
    }

    public static final SubLObject inference_all_answers(SubLObject inference) {
	{
	    SubLObject answers = NIL;
	    SubLObject idx = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_id_index(inference);
	    if (NIL == do_id_index_empty_p(idx, $SKIP)) {
		{
		    SubLObject id = do_id_index_next_id(idx, NIL, NIL, NIL);
		    SubLObject state_var = do_id_index_next_state(idx, NIL, id, NIL);
		    SubLObject v_answer = NIL;
		    while (NIL != id) {
			v_answer = do_id_index_state_object(idx, $SKIP, id, state_var);
			if (NIL != do_id_index_id_and_object_validP(id, v_answer, $SKIP)) {
			    answers = cons(v_answer, answers);
			}
			id = do_id_index_next_id(idx, NIL, id, state_var);
			state_var = do_id_index_next_state(idx, NIL, id, state_var);
		    }
		}
	    }
	    return nreverse(answers);
	}
    }

    public static SubLObject inference_all_answers(final SubLObject inference, SubLObject start_id) {
	if (start_id == UNPROVIDED) {
	    start_id = ZERO_INTEGER;
	}
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != non_negative_integer_p(start_id) : "! subl_promotions.non_negative_integer_p(start_id) " + ("subl_promotions.non_negative_integer_p(start_id) " + "CommonSymbols.NIL != subl_promotions.non_negative_integer_p(start_id) ") + start_id;
	SubLObject answers = NIL;
	final SubLObject start_id_$33 = start_id;
	SubLObject end_id;
	SubLObject id;
	SubLObject v_answer;
	for (end_id = inference_datastructures_inference.inference_next_new_answer_id(inference), id = NIL, id = start_id_$33; !id.numGE(end_id); id = number_utilities.f_1X(id)) {
	    v_answer = inference_datastructures_inference.find_inference_answer_by_id(inference, id);
	    answers = cons(v_answer, answers);
	}
	start_id = end_id;
	return nreverse(answers);
    }

    public static final SubLObject inference_all_new_answers_alt(SubLObject inference) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject answers = NIL;
		SubLObject inf = inference;
		SubLObject start_id = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_new_answer_id_start(inference);
		SubLObject end_id = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_next_new_answer_id(inference);
		SubLObject id = NIL;
		for (id = start_id; !id.numGE(end_id); id = f_1X(id)) {
		    {
			SubLObject v_answer = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.find_inference_answer_by_id(inf, id);
			if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
			    if (NIL == v_answer) {
				Errors.error($str_alt399$got_a_null_answer_for__s, inference);
			    }
			}
			answers = cons(v_answer, answers);
		    }
		}
		return nreverse(answers);
	    }
	}
    }

    public static SubLObject inference_all_new_answers(final SubLObject inference) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	SubLObject answers = NIL;
	final SubLObject start_id = inference_datastructures_inference.inference_new_answer_id_start(inference);
	SubLObject end_id;
	SubLObject id;
	SubLObject v_answer;
	for (end_id = inference_datastructures_inference.inference_next_new_answer_id(inference), id = NIL, id = start_id; !id.numGE(end_id); id = number_utilities.f_1X(id)) {
	    v_answer = inference_datastructures_inference.find_inference_answer_by_id(inference, id);
	    if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == v_answer)) {
		Errors.error(inference_datastructures_inference.$str421$got_a_null_answer_for__s, inference);
	    }
	    answers = cons(v_answer, answers);
	}
	return nreverse(answers);
    }

    /**
     *
     *
     * @return :all or listp
     */
    @LispMethod(comment = "@return :all or listp")
    public static final SubLObject inference_allowed_rules_list_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	{
	    SubLObject allowed_rules = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_allowed_rules(inference);
	    return NIL != set.set_p(allowed_rules) ? ((SubLObject) (set.set_element_list(allowed_rules))) : allowed_rules;
	}
    }

    /**
     *
     *
     * @return :all or listp
     */
    @LispMethod(comment = "@return :all or listp")
    public static SubLObject inference_allowed_rules_list(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	final SubLObject allowed_rules = inference_datastructures_inference.infrnc_allowed_rules(inference);
	return NIL != set_p(allowed_rules) ? set_element_list(allowed_rules) : allowed_rules;
    }

    /**
     *
     *
     * @return potentially-infinite-integer-p
     */
    @LispMethod(comment = "@return potentially-infinite-integer-p")
    public static final SubLObject inference_allowed_rule_count_alt(SubLObject inference) {
	{
	    SubLObject allowed_rules = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_allowed_rules(inference);
	    return NIL != set.set_p(allowed_rules) ? ((SubLObject) (set.set_size(allowed_rules))) : $POSITIVE_INFINITY;
	}
    }

    /**
     *
     *
     * @return potentially-infinite-integer-p
     */
    @LispMethod(comment = "@return potentially-infinite-integer-p")
    public static SubLObject inference_allowed_rule_count(final SubLObject inference) {
	final SubLObject allowed_rules = inference_datastructures_inference.infrnc_allowed_rules(inference);
	return NIL != set_p(allowed_rules) ? set_size(allowed_rules) : $POSITIVE_INFINITY;
    }

    /**
     *
     *
     * @return :none or listp
     */
    @LispMethod(comment = "@return :none or listp")
    public static final SubLObject inference_forbidden_rules_list_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	{
	    SubLObject forbidden_rules = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_forbidden_rules(inference);
	    return NIL != set.set_p(forbidden_rules) ? ((SubLObject) (set.set_element_list(forbidden_rules))) : forbidden_rules;
	}
    }

    /**
     *
     *
     * @return :none or listp
     */
    @LispMethod(comment = "@return :none or listp")
    public static SubLObject inference_forbidden_rules_list(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	final SubLObject forbidden_rules = inference_datastructures_inference.infrnc_forbidden_rules(inference);
	return NIL != set_p(forbidden_rules) ? set_element_list(forbidden_rules) : forbidden_rules;
    }

    /**
     *
     *
     * @return potentially-infinite-integer-p
     */
    @LispMethod(comment = "@return potentially-infinite-integer-p")
    public static final SubLObject inference_forbidden_rule_count_alt(SubLObject inference) {
	{
	    SubLObject forbidden_rules = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_forbidden_rules(inference);
	    return NIL != set.set_p(forbidden_rules) ? ((SubLObject) (set.set_size(forbidden_rules))) : ZERO_INTEGER;
	}
    }

    /**
     *
     *
     * @return potentially-infinite-integer-p
     */
    @LispMethod(comment = "@return potentially-infinite-integer-p")
    public static SubLObject inference_forbidden_rule_count(final SubLObject inference) {
	final SubLObject forbidden_rules = inference_datastructures_inference.infrnc_forbidden_rules(inference);
	return NIL != set_p(forbidden_rules) ? set_size(forbidden_rules) : ZERO_INTEGER;
    }

    public static final SubLObject inference_interrupt_signaledP_alt(SubLObject inference) {
	return makeBoolean(NIL == queues.queue_empty_p(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_interrupting_processes(inference)));
    }

    public static SubLObject inference_interrupt_signaledP(final SubLObject inference) {
	return makeBoolean(NIL == queue_empty_p(inference_datastructures_inference.inference_interrupting_processes(inference)));
    }

    public static final SubLObject inference_no_interrupt_signaledP_alt(SubLObject inference) {
	return queues.queue_empty_p(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_interrupting_processes(inference));
    }

    public static SubLObject inference_no_interrupt_signaledP(final SubLObject inference) {
	return queue_empty_p(inference_datastructures_inference.inference_interrupting_processes(inference));
    }

    public static final SubLObject inference_interrupt_handledP_alt(SubLObject inference) {
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_no_interrupt_signaledP(inference);
    }

    public static SubLObject inference_interrupt_handledP(final SubLObject inference) {
	return inference_datastructures_inference.inference_no_interrupt_signaledP(inference);
    }

    public static final SubLObject inference_answer_count_alt(SubLObject inference) {
	return id_index_count(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_id_index(inference));
    }

    public static SubLObject inference_answer_count(final SubLObject inference) {
	return id_index_count(inference_datastructures_inference.inference_answer_id_index(inference));
    }

    public static final SubLObject inference_new_answer_count_alt(SubLObject inference) {
	return subtract(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_count(inference), com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_new_answer_id_start(inference));
    }

    public static SubLObject inference_new_answer_count(final SubLObject inference) {
	return subtract(inference_datastructures_inference.inference_answer_count(inference), inference_datastructures_inference.inference_new_answer_id_start(inference));
    }

    public static SubLObject successful_inference_p(final SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_p(v_object)) && inference_datastructures_inference.inference_answer_count(v_object).isPositive());
    }

    public static final SubLObject inference_new_justification_count_alt(SubLObject inference) {
	return queues.queue_size(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_new_answer_justifications(inference));
    }

    public static SubLObject inference_new_justification_count(final SubLObject inference) {
	return queue_size(inference_datastructures_inference.inference_new_answer_justifications(inference));
    }

    public static final SubLObject inference_new_result_count_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_unique_wrt_proofsP(inference)) {
	    return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_new_justification_count(inference);
	} else {
	    return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_new_answer_count(inference);
	}
    }

    public static SubLObject inference_new_result_count(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	if (NIL != inference_datastructures_inference.inference_unique_wrt_proofsP(inference)) {
	    return inference_datastructures_inference.inference_new_justification_count(inference);
	}
	return inference_datastructures_inference.inference_new_answer_count(inference);
    }

    public static final SubLObject forward_inference_p_alt(SubLObject inference) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(inference))
		&& (NIL != inference_datastructures_problem_store.problem_store_forwardP(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store(inference))));
    }

    public static SubLObject forward_inference_p(final SubLObject inference) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_p(inference)) && (NIL != inference_datastructures_problem_store.problem_store_forwardP(inference_datastructures_inference.inference_problem_store(inference))));
    }

    public static final SubLObject backward_inference_p_alt(SubLObject inference) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(inference)) && (NIL == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.forward_inference_p(inference)));
    }

    public static SubLObject backward_inference_p(final SubLObject inference) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_p(inference)) && (NIL == inference_datastructures_inference.forward_inference_p(inference)));
    }

    public static final SubLObject abductive_inference_p_alt(SubLObject inference) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(inference))
		&& (NIL != inference_datastructures_problem_store.problem_store_abduction_allowedP(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store(inference))));
    }

    public static SubLObject abductive_inference_p(final SubLObject inference) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_p(inference)) && (NIL != inference_datastructures_problem_store.problem_store_abduction_allowedP(inference_datastructures_inference.inference_problem_store(inference))));
    }

    /**
     *
     *
     * @return provability-status-p; the provability status of INFERENCE.
     */
    @LispMethod(comment = "@return provability-status-p; the provability status of INFERENCE.")
    public static final SubLObject inference_provability_status_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_has_some_answerP(inference)) {
	    return $GOOD;
	} else {
	    if (NIL != inference_worker.no_good_problem_p(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_root_problem(inference), $TACTICAL)) {
		return $NO_GOOD;
	    } else {
		return $NEUTRAL;
	    }
	}
    }

    /**
     *
     *
     * @return provability-status-p; the provability status of INFERENCE.
     */
    @LispMethod(comment = "@return provability-status-p; the provability status of INFERENCE.")
    public static SubLObject inference_provability_status(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	if (NIL != inference_datastructures_inference.inference_has_some_answerP(inference)) {
	    return $GOOD;
	}
	if (NIL != inference_worker.no_good_problem_p(inference_datastructures_inference.inference_root_problem(inference), $TACTICAL)) {
	    return $NO_GOOD;
	}
	return $NEUTRAL;
    }

    /**
     * Return T iff OBJECT is an inference that has an answer.
     */
    @LispMethod(comment = "Return T iff OBJECT is an inference that has an answer.")
    public static final SubLObject good_inference_p_alt(SubLObject v_object) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(v_object)) && ($GOOD == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_provability_status(v_object)));
    }

    /**
     * Return T iff OBJECT is an inference that has an answer.
     */
    @LispMethod(comment = "Return T iff OBJECT is an inference that has an answer.")
    public static SubLObject good_inference_p(final SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_p(v_object)) && ($GOOD == inference_datastructures_inference.inference_provability_status(v_object)));
    }

    /**
     * Return T iff OBJECT is an inference that might get an answer but currently hasn't.
     */
    @LispMethod(comment = "Return T iff OBJECT is an inference that might get an answer but currently hasn\'t.")
    public static final SubLObject neutral_inference_p_alt(SubLObject v_object) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(v_object)) && ($NEUTRAL == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_provability_status(v_object)));
    }

    /**
     * Return T iff OBJECT is an inference that might get an answer but currently hasn't.
     */
    @LispMethod(comment = "Return T iff OBJECT is an inference that might get an answer but currently hasn\'t.")
    public static SubLObject neutral_inference_p(final SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_p(v_object)) && ($NEUTRAL == inference_datastructures_inference.inference_provability_status(v_object)));
    }

    /**
     * Return T iff OBJECT is an inference that will never get an answer.
     */
    @LispMethod(comment = "Return T iff OBJECT is an inference that will never get an answer.")
    public static final SubLObject no_good_inference_p_alt(SubLObject v_object) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(v_object)) && ($NO_GOOD == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_provability_status(v_object)));
    }

    /**
     * Return T iff OBJECT is an inference that will never get an answer.
     */
    @LispMethod(comment = "Return T iff OBJECT is an inference that will never get an answer.")
    public static SubLObject no_good_inference_p(final SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_p(v_object)) && ($NO_GOOD == inference_datastructures_inference.inference_provability_status(v_object)));
    }

    /**
     *
     *
     * @return booleanp; whether OBJECT is an inference that is asking a closed query.
     */
    @LispMethod(comment = "@return booleanp; whether OBJECT is an inference that is asking a closed query.")
    public static final SubLObject closed_inference_p_alt(SubLObject v_object) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(v_object)) && (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_no_free_hl_varsP(v_object)));
    }

    /**
     *
     *
     * @return booleanp; whether OBJECT is an inference that is asking a closed query.
     */
    @LispMethod(comment = "@return booleanp; whether OBJECT is an inference that is asking a closed query.")
    public static SubLObject closed_inference_p(final SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_p(v_object)) && (NIL != inference_datastructures_inference.inference_no_free_hl_varsP(v_object)));
    }

    public static final SubLObject inference_set_static_properties_alt(SubLObject inference, SubLObject static_properties) {
	SubLTrampolineFile.checkType(static_properties, INFERENCE_STATIC_PROPERTIES_P);
	{
	    SubLObject disjunction_free_el_vars_policy = inference_datastructures_enumerated_types.inference_properties_disjunction_free_el_vars_policy(static_properties);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_disjunction_free_el_vars_policy(inference, disjunction_free_el_vars_policy);
	}
	{
	    SubLObject uniqueness_criterion = inference_datastructures_enumerated_types.inference_properties_uniqueness_criterion(static_properties);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_result_uniqueness_criterion(inference, uniqueness_criterion);
	}
	{
	    SubLObject allow_hl_predicate_transformationP = inference_datastructures_enumerated_types.inference_properties_allow_hl_predicate_transformationP(static_properties);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_allow_hl_predicate_transformation(inference, allow_hl_predicate_transformationP);
	}
	{
	    SubLObject allow_unbound_predicate_transformationP = inference_datastructures_enumerated_types.inference_properties_allow_unbound_predicate_transformationP(static_properties);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_allow_unbound_predicate_transformation(inference, allow_unbound_predicate_transformationP);
	}
	{
	    SubLObject allow_evaluatable_predicate_transformationP = inference_datastructures_enumerated_types.inference_properties_allow_evaluatable_predicate_transformationP(static_properties);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_allow_evaluatable_predicate_transformation(inference, allow_evaluatable_predicate_transformationP);
	}
	{
	    SubLObject allow_indeterminate_resultsP = inference_datastructures_enumerated_types.inference_properties_allow_indeterminate_resultsP(static_properties);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_allow_indeterminate_results(inference, allow_indeterminate_resultsP);
	}
	{
	    SubLObject allowed_rules = inference_datastructures_enumerated_types.inference_properties_allowed_rules(static_properties);
	    SubLTrampolineFile.checkType(allowed_rules, ALLOWED_RULES_SPEC_P);
	    if ($ALL == allowed_rules) {
		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_allowed_rules(inference, $ALL);
	    } else {
		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_allowed_rules(inference, set_utilities.construct_set_from_list(allowed_rules, symbol_function(EQ), UNPROVIDED));
	    }
	}
	{
	    SubLObject forbidden_rules = inference_datastructures_enumerated_types.inference_properties_forbidden_rules(static_properties);
	    SubLTrampolineFile.checkType(forbidden_rules, FORBIDDEN_RULES_SPEC_P);
	    if ($NONE == forbidden_rules) {
		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_forbidden_rules(inference, $NONE);
	    } else {
		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_forbidden_rules(inference, set_utilities.construct_set_from_list(forbidden_rules, symbol_function(EQ), UNPROVIDED));
	    }
	}
	{
	    SubLObject allowed_modules = inference_datastructures_enumerated_types.inference_properties_allowed_modules(static_properties);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_allowed_modules(inference, allowed_modules);
	}
	{
	    SubLObject allow_abnormality_checkingP = inference_datastructures_enumerated_types.inference_properties_allow_abnormality_checkingP(static_properties);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_allow_abnormality_checking(inference, allow_abnormality_checkingP);
	}
	{
	    SubLObject transitive_closure_mode = inference_datastructures_enumerated_types.inference_properties_transitive_closure_mode(static_properties);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_transitive_closure_mode(inference, transitive_closure_mode);
	}
	{
	    SubLObject maintain_term_working_setP = inference_datastructures_enumerated_types.inference_properties_maintain_term_working_setP(static_properties);
	    if (NIL != maintain_term_working_setP) {
		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.initialize_inference_problem_working_time_data(inference);
	    }
	}
	{
	    SubLObject events = inference_datastructures_enumerated_types.inference_properties_events(static_properties);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_events(inference, events);
	}
	{
	    SubLObject halt_conditions = inference_datastructures_enumerated_types.inference_properties_halt_conditions(static_properties);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_halt_conditions(inference, halt_conditions);
	}
	return inference;
    }

    public static SubLObject inference_set_static_properties(final SubLObject inference, final SubLObject static_properties) {
	assert NIL != inference_datastructures_enumerated_types.inference_static_properties_p(static_properties) : "! inference_datastructures_enumerated_types.inference_static_properties_p(static_properties) "
		+ ("inference_datastructures_enumerated_types.inference_static_properties_p(static_properties) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.inference_static_properties_p(static_properties) ") + static_properties;
	final SubLObject disjunction_free_el_vars_policy = inference_datastructures_enumerated_types.inference_properties_disjunction_free_el_vars_policy(static_properties);
	inference_datastructures_inference.set_inference_disjunction_free_el_vars_policy(inference, disjunction_free_el_vars_policy);
	final SubLObject uniqueness_criterion = inference_datastructures_enumerated_types.inference_properties_uniqueness_criterion(static_properties);
	inference_datastructures_inference.set_inference_result_uniqueness_criterion(inference, uniqueness_criterion);
	final SubLObject allow_hl_predicate_transformationP = inference_datastructures_enumerated_types.inference_properties_allow_hl_predicate_transformationP(static_properties);
	inference_datastructures_inference.set_inference_allow_hl_predicate_transformation(inference, allow_hl_predicate_transformationP);
	final SubLObject allow_unbound_predicate_transformationP = inference_datastructures_enumerated_types.inference_properties_allow_unbound_predicate_transformationP(static_properties);
	inference_datastructures_inference.set_inference_allow_unbound_predicate_transformation(inference, allow_unbound_predicate_transformationP);
	final SubLObject allow_evaluatable_predicate_transformationP = inference_datastructures_enumerated_types.inference_properties_allow_evaluatable_predicate_transformationP(static_properties);
	inference_datastructures_inference.set_inference_allow_evaluatable_predicate_transformation(inference, allow_evaluatable_predicate_transformationP);
	final SubLObject allow_indeterminate_resultsP = inference_datastructures_enumerated_types.inference_properties_allow_indeterminate_resultsP(static_properties);
	inference_datastructures_inference.set_inference_allow_indeterminate_results(inference, allow_indeterminate_resultsP);
	final SubLObject allowed_rules = inference_datastructures_enumerated_types.inference_properties_allowed_rules(static_properties);
	assert NIL != inference_utilities.allowed_rules_spec_p(allowed_rules) : "! inference_utilities.allowed_rules_spec_p(allowed_rules) " + ("inference_utilities.allowed_rules_spec_p(allowed_rules) " + "CommonSymbols.NIL != inference_utilities.allowed_rules_spec_p(allowed_rules) ")
		+ allowed_rules;
	if ($ALL == allowed_rules) {
	    inference_datastructures_inference.set_inference_allowed_rules(inference, $ALL);
	} else {
	    inference_datastructures_inference.set_inference_allowed_rules(inference, construct_set_from_list(allowed_rules, symbol_function(EQL), UNPROVIDED));
	}
	final SubLObject forbidden_rules = inference_datastructures_enumerated_types.inference_properties_forbidden_rules(static_properties);
	assert NIL != inference_utilities.forbidden_rules_spec_p(forbidden_rules) : "! inference_utilities.forbidden_rules_spec_p(forbidden_rules) "
		+ ("inference_utilities.forbidden_rules_spec_p(forbidden_rules) " + "CommonSymbols.NIL != inference_utilities.forbidden_rules_spec_p(forbidden_rules) ") + forbidden_rules;
	if ($NONE == forbidden_rules) {
	    inference_datastructures_inference.set_inference_forbidden_rules(inference, $NONE);
	} else {
	    inference_datastructures_inference.set_inference_forbidden_rules(inference, construct_set_from_list(forbidden_rules, symbol_function(EQL), UNPROVIDED));
	}
	final SubLObject allowed_modules = inference_datastructures_enumerated_types.inference_properties_allowed_modules(static_properties);
	inference_datastructures_inference.set_inference_allowed_modules(inference, allowed_modules);
	final SubLObject allow_abnormality_checkingP = inference_datastructures_enumerated_types.inference_properties_allow_abnormality_checkingP(static_properties);
	inference_datastructures_inference.set_inference_allow_abnormality_checking(inference, allow_abnormality_checkingP);
	final SubLObject transitive_closure_mode = inference_datastructures_enumerated_types.inference_properties_transitive_closure_mode(static_properties);
	inference_datastructures_inference.set_inference_transitive_closure_mode(inference, transitive_closure_mode);
	final SubLObject maintain_term_working_setP = inference_datastructures_enumerated_types.inference_properties_maintain_term_working_setP(static_properties);
	if (NIL != maintain_term_working_setP) {
	    inference_datastructures_inference.initialize_inference_problem_working_time_data(inference);
	}
	final SubLObject events = inference_datastructures_enumerated_types.inference_properties_events(static_properties);
	inference_datastructures_inference.set_inference_events(inference, events);
	final SubLObject halt_conditions = inference_datastructures_enumerated_types.inference_properties_halt_conditions(static_properties);
	inference_datastructures_inference.set_inference_halt_conditions(inference, halt_conditions);
	return inference;
    }

    public static final SubLObject update_inference_input_query_properties_alt(SubLObject inference, SubLObject input_dynamic_properties) {
	SubLTrampolineFile.checkType(input_dynamic_properties, QUERY_DYNAMIC_PROPERTIES_P);
	{
	    SubLObject input_query_properties = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_input_query_properties(inference);
	    SubLObject static_mode = inference_datastructures_enumerated_types.inference_properties_mode(input_query_properties);
	    SubLObject dynamic_mode = inference_datastructures_enumerated_types.inference_properties_mode(input_dynamic_properties);
	    SubLObject mode_mismatchP = makeBoolean(static_mode != dynamic_mode);
	    if (NIL != mode_mismatchP) {
		input_query_properties = inference_datastructures_enumerated_types.extract_query_static_properties(inference_strategist.explicify_inference_mode_defaults(input_query_properties));
		input_query_properties = putf(input_query_properties, $INFERENCE_MODE, dynamic_mode);
		input_query_properties = inference_strategist.implicify_inference_mode_defaults(input_query_properties);
	    }
	    {
		SubLObject remainder = NIL;
		for (remainder = input_dynamic_properties; NIL != remainder; remainder = cddr(remainder)) {
		    {
			SubLObject property = remainder.first();
			SubLObject value = cadr(remainder);
			input_query_properties = putf(input_query_properties, property, value);
		    }
		}
	    }
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_input_query_properties(inference, input_query_properties);
	}
	return NIL;
    }

    public static SubLObject update_inference_input_query_properties(final SubLObject inference, final SubLObject input_dynamic_properties) {
	assert NIL != inference_datastructures_enumerated_types.query_dynamic_properties_p(input_dynamic_properties) : "! inference_datastructures_enumerated_types.query_dynamic_properties_p(input_dynamic_properties) "
		+ ("inference_datastructures_enumerated_types.query_dynamic_properties_p(input_dynamic_properties) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.query_dynamic_properties_p(input_dynamic_properties) ") + input_dynamic_properties;
	SubLObject input_query_properties = inference_datastructures_inference.infrnc_input_query_properties(inference);
	final SubLObject static_mode = inference_datastructures_enumerated_types.inference_properties_mode(input_query_properties);
	final SubLObject dynamic_mode = inference_datastructures_enumerated_types.inference_properties_mode(input_dynamic_properties);
	final SubLObject mode_mismatchP = makeBoolean(!static_mode.eql(dynamic_mode));
	if (NIL != mode_mismatchP) {
	    input_query_properties = inference_datastructures_enumerated_types.extract_query_static_properties(inference_strategist.explicify_inference_mode_defaults(input_query_properties));
	    input_query_properties = putf(input_query_properties, $INFERENCE_MODE, dynamic_mode);
	    input_query_properties = inference_strategist.implicify_inference_mode_defaults(input_query_properties);
	}
	SubLObject remainder;
	SubLObject property;
	SubLObject value;
	for (remainder = NIL, remainder = input_dynamic_properties; NIL != remainder; remainder = cddr(remainder)) {
	    property = remainder.first();
	    value = cadr(remainder);
	    input_query_properties = putf(input_query_properties, property, value);
	}
	inference_datastructures_inference.set_inference_input_query_properties(inference, input_query_properties);
	return NIL;
    }

    public static final SubLObject add_inference_relevant_problem_alt(SubLObject inference, SubLObject problem) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(problem, PROBLEM_P);
	set.set_add(problem, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_relevant_problems(inference));
	return inference;
    }

    public static SubLObject add_inference_relevant_problem(final SubLObject inference, final SubLObject problem) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_problem.problem_p(problem) : "! inference_datastructures_problem.problem_p(problem) " + ("inference_datastructures_problem.problem_p(problem) " + "CommonSymbols.NIL != inference_datastructures_problem.problem_p(problem) ") + problem;
	set_add(problem, inference_datastructures_inference.infrnc_relevant_problems(inference));
	return inference;
    }

    public static final SubLObject remove_inference_relevant_problem_alt(SubLObject inference, SubLObject problem) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(problem, PROBLEM_P);
	set.set_remove(problem, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_relevant_problems(inference));
	return inference;
    }

    public static SubLObject remove_inference_relevant_problem(final SubLObject inference, final SubLObject problem) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_problem.problem_p(problem) : "! inference_datastructures_problem.problem_p(problem) " + ("inference_datastructures_problem.problem_p(problem) " + "CommonSymbols.NIL != inference_datastructures_problem.problem_p(problem) ") + problem;
	set_remove(problem, inference_datastructures_inference.infrnc_relevant_problems(inference));
	return inference;
    }

    public static final SubLObject clear_inference_relevant_problems_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	set.clear_set(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_relevant_problems(inference));
	return inference;
    }

    public static SubLObject clear_inference_relevant_problems(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	clear_set(inference_datastructures_inference.infrnc_relevant_problems(inference));
	return inference;
    }

    public static final SubLObject add_inference_strategy_alt(SubLObject inference, SubLObject strategy) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(strategy, STRATEGY_P);
	set.set_add(strategy, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_strategy_set(inference));
	return inference;
    }

    public static SubLObject add_inference_strategy(final SubLObject inference, final SubLObject strategy) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_strategy.strategy_p(strategy) : "! inference_datastructures_strategy.strategy_p(strategy) " + ("inference_datastructures_strategy.strategy_p(strategy) " + "CommonSymbols.NIL != inference_datastructures_strategy.strategy_p(strategy) ") + strategy;
	set_add(strategy, inference_datastructures_inference.infrnc_strategy_set(inference));
	return inference;
    }

    public static final SubLObject remove_inference_strategy_alt(SubLObject inference, SubLObject strategy) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(strategy, STRATEGY_P);
	set.set_remove(strategy, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_strategy_set(inference));
	return inference;
    }

    public static SubLObject remove_inference_strategy(final SubLObject inference, final SubLObject strategy) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_strategy.strategy_p(strategy) : "! inference_datastructures_strategy.strategy_p(strategy) " + ("inference_datastructures_strategy.strategy_p(strategy) " + "CommonSymbols.NIL != inference_datastructures_strategy.strategy_p(strategy) ") + strategy;
	set_remove(strategy, inference_datastructures_inference.infrnc_strategy_set(inference));
	return inference;
    }

    public static final SubLObject clear_inference_strategy_set_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	set.clear_set(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.infrnc_strategy_set(inference));
	return inference;
    }

    public static SubLObject clear_inference_strategy_set(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	clear_set(inference_datastructures_inference.infrnc_strategy_set(inference));
	return inference;
    }

    public static final SubLObject reset_inference_new_answer_id_alt(SubLObject inference) {
	{
	    SubLObject next_id = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_next_new_answer_id(inference);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_new_answer_id_start(inference, next_id);
	}
	return inference;
    }

    public static SubLObject reset_inference_new_answer_id(final SubLObject inference) {
	final SubLObject next_id = inference_datastructures_inference.inference_next_new_answer_id(inference);
	inference_datastructures_inference._csetf_infrnc_new_answer_id_start(inference, next_id);
	return inference;
    }

    public static final SubLObject inference_next_new_answer_id_alt(SubLObject inference) {
	{
	    SubLObject v_id_index = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_id_index(inference);
	    return id_index_next_id(v_id_index);
	}
    }

    public static SubLObject inference_next_new_answer_id(final SubLObject inference) {
	final SubLObject v_id_index = inference_datastructures_inference.inference_answer_id_index(inference);
	return id_index_next_id(v_id_index);
    }

    public static final SubLObject add_inference_new_answer_by_id_alt(SubLObject inference, SubLObject v_answer) {
	SubLTrampolineFile.checkType(v_answer, INFERENCE_ANSWER_P);
	{
	    SubLObject id = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_suid(v_answer);
	    SubLObject v_id_index = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_id_index(inference);
	    id_index_enter_autoextend(v_id_index, id, v_answer);
	}
	return inference;
    }

    public static SubLObject add_inference_new_answer_by_id(final SubLObject inference, final SubLObject v_answer) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_answer) : "! inference_datastructures_inference.inference_answer_p(v_answer) "
		+ ("inference_datastructures_inference.inference_answer_p(v_answer) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(v_answer) ") + v_answer;
	final SubLObject id = inference_datastructures_inference.inference_answer_suid(v_answer);
	final SubLObject v_id_index = inference_datastructures_inference.inference_answer_id_index(inference);
	id_index_enter_autoextend(v_id_index, id, v_answer, NIL);
	return inference;
    }

    public static final SubLObject remove_inference_new_answer_by_id_alt(SubLObject inference, SubLObject v_answer) {
	SubLTrampolineFile.checkType(v_answer, INFERENCE_ANSWER_P);
	{
	    SubLObject id = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_suid(v_answer);
	    SubLObject v_id_index = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_id_index(inference);
	    id_index_remove(v_id_index, id);
	}
	return inference;
    }

    public static SubLObject remove_inference_new_answer_by_id(final SubLObject inference, final SubLObject v_answer) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_answer) : "! inference_datastructures_inference.inference_answer_p(v_answer) "
		+ ("inference_datastructures_inference.inference_answer_p(v_answer) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(v_answer) ") + v_answer;
	final SubLObject id = inference_datastructures_inference.inference_answer_suid(v_answer);
	final SubLObject v_id_index = inference_datastructures_inference.inference_answer_id_index(inference);
	id_index_remove(v_id_index, id);
	return inference;
    }

    public static final SubLObject add_inference_new_answer_by_bindings_alt(SubLObject inference, SubLObject v_answer) {
	SubLTrampolineFile.checkType(v_answer, INFERENCE_ANSWER_P);
	{
	    SubLObject v_bindings = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_bindings(v_answer);
	    SubLObject index = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_bindings_index(inference);
	    dictionary.dictionary_enter(index, v_bindings, v_answer);
	}
	return inference;
    }

    public static SubLObject add_inference_new_answer_by_bindings(final SubLObject inference, final SubLObject v_answer) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_answer) : "! inference_datastructures_inference.inference_answer_p(v_answer) "
		+ ("inference_datastructures_inference.inference_answer_p(v_answer) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(v_answer) ") + v_answer;
	final SubLObject v_bindings = inference_datastructures_inference.inference_answer_bindings(v_answer);
	final SubLObject index = inference_datastructures_inference.inference_answer_bindings_index(inference);
	dictionary_enter(index, v_bindings, v_answer);
	return inference;
    }

    public static final SubLObject remove_inference_new_answer_by_bindings_alt(SubLObject inference, SubLObject v_answer) {
	SubLTrampolineFile.checkType(v_answer, INFERENCE_ANSWER_P);
	{
	    SubLObject v_bindings = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_bindings(v_answer);
	    SubLObject index = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_bindings_index(inference);
	    dictionary.dictionary_remove(index, v_bindings);
	}
	return inference;
    }

    public static SubLObject remove_inference_new_answer_by_bindings(final SubLObject inference, final SubLObject v_answer) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_answer) : "! inference_datastructures_inference.inference_answer_p(v_answer) "
		+ ("inference_datastructures_inference.inference_answer_p(v_answer) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(v_answer) ") + v_answer;
	final SubLObject v_bindings = inference_datastructures_inference.inference_answer_bindings(v_answer);
	final SubLObject index = inference_datastructures_inference.inference_answer_bindings_index(inference);
	dictionary_remove(index, v_bindings);
	return inference;
    }

    public static final SubLObject reset_inference_new_answer_justifications_alt(SubLObject inference) {
	queues.clear_queue(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_new_answer_justifications(inference));
	return inference;
    }

    public static SubLObject reset_inference_new_answer_justifications(final SubLObject inference) {
	clear_queue(inference_datastructures_inference.inference_new_answer_justifications(inference));
	return inference;
    }

    /**
     * Does not check for duplication with existing new justifications
     */
    @LispMethod(comment = "Does not check for duplication with existing new justifications")
    public static final SubLObject add_inference_new_answer_justification_alt(SubLObject inference, SubLObject answer_justification) {
	SubLTrampolineFile.checkType(answer_justification, INFERENCE_ANSWER_JUSTIFICATION_P);
	queues.enqueue(answer_justification, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_new_answer_justifications(inference));
	return inference;
    }

    /**
     * Does not check for duplication with existing new justifications
     */
    @LispMethod(comment = "Does not check for duplication with existing new justifications")
    public static SubLObject add_inference_new_answer_justification(final SubLObject inference, final SubLObject answer_justification) {
	assert NIL != inference_datastructures_inference.inference_answer_justification_p(answer_justification) : "! inference_datastructures_inference.inference_answer_justification_p(answer_justification) "
		+ ("inference_datastructures_inference.inference_answer_justification_p(answer_justification) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_justification_p(answer_justification) ") + answer_justification;
	enqueue(answer_justification, inference_datastructures_inference.inference_new_answer_justifications(inference));
	return inference;
    }

    /**
     * Does not check for duplication with existing new justifications
     */
    @LispMethod(comment = "Does not check for duplication with existing new justifications")
    public static final SubLObject remove_inference_new_answer_justification_alt(SubLObject inference, SubLObject answer_justification) {
	SubLTrampolineFile.checkType(answer_justification, INFERENCE_ANSWER_JUSTIFICATION_P);
	queues.remqueue(answer_justification, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_new_answer_justifications(inference), UNPROVIDED);
	return inference;
    }

    /**
     * Does not check for duplication with existing new justifications
     */
    @LispMethod(comment = "Does not check for duplication with existing new justifications")
    public static SubLObject remove_inference_new_answer_justification(final SubLObject inference, final SubLObject answer_justification) {
	assert NIL != inference_datastructures_inference.inference_answer_justification_p(answer_justification) : "! inference_datastructures_inference.inference_answer_justification_p(answer_justification) "
		+ ("inference_datastructures_inference.inference_answer_justification_p(answer_justification) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_justification_p(answer_justification) ") + answer_justification;
	remqueue(answer_justification, inference_datastructures_inference.inference_new_answer_justifications(inference), UNPROVIDED);
	return inference;
    }

    public static final SubLObject clear_inference_control_process_alt(SubLObject inference) {
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_control_process(inference, NIL);
    }

    public static SubLObject clear_inference_control_process(final SubLObject inference) {
	return inference_datastructures_inference.set_inference_control_process(inference, NIL);
    }

    public static final SubLObject set_inference_control_process_to_me_alt(SubLObject inference) {
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_control_process(inference, current_process());
    }

    public static SubLObject set_inference_control_process_to_me(final SubLObject inference) {
	return inference_datastructures_inference.set_inference_control_process(inference, current_process());
    }

    public static final SubLObject note_inference_interrupt_signaled_alt(SubLObject inference, SubLObject process) {
	SubLTrampolineFile.checkType(process, PROCESSP);
	queues.enqueue(process, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_interrupting_processes(inference));
	return inference;
    }

    public static SubLObject note_inference_interrupt_signaled(final SubLObject inference, final SubLObject process) {
	assert NIL != processp(process) : "! processp(process) " + ("Types.processp(process) " + "CommonSymbols.NIL != Types.processp(process) ") + process;
	enqueue(process, inference_datastructures_inference.inference_interrupting_processes(inference));
	return inference;
    }

    public static final SubLObject increment_inference_cumulative_time_alt(SubLObject inference, SubLObject time_delta) {
	{
	    SubLObject cumulative_time = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_cumulative_time(inference);
	    cumulative_time = add(cumulative_time, time_delta);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_cumulative_time(inference, cumulative_time);
	}
	return inference;
    }

    public static SubLObject increment_inference_cumulative_time(final SubLObject inference, final SubLObject time_delta) {
	SubLObject cumulative_time = inference_datastructures_inference.inference_cumulative_time(inference);
	cumulative_time = add(cumulative_time, time_delta);
	inference_datastructures_inference.set_inference_cumulative_time(inference, cumulative_time);
	return inference;
    }

    /**
     * Change the sort of the free HL variables for INFERENCE to NEW-HL-VARS.
     */
    @LispMethod(comment = "Change the sort of the free HL variables for INFERENCE to NEW-HL-VARS.")
    public static final SubLObject reorder_inference_free_hl_vars_alt(SubLObject inference, SubLObject new_hl_vars) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    {
		SubLObject old_hl_vars = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_free_hl_vars(inference);
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == subsetp(old_hl_vars, new_hl_vars, symbol_function(EQ), UNPROVIDED)) {
			Errors.error($str_alt413$variables__S_were_removed, set_difference(old_hl_vars, new_hl_vars, symbol_function(EQ), UNPROVIDED));
		    }
		}
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (NIL == subsetp(new_hl_vars, old_hl_vars, symbol_function(EQ), UNPROVIDED)) {
			Errors.error($str_alt414$variables__S_were_added, set_difference(new_hl_vars, old_hl_vars, symbol_function(EQ), UNPROVIDED));
		    }
		}
		if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) {
		    if (!length(old_hl_vars).numE(length(new_hl_vars))) {
			Errors.error($str_alt415$variables__S_contain_duplications, new_hl_vars);
		    }
		}
		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_free_hl_vars(inference, new_hl_vars);
		return inference;
	    }
	}
    }

    /**
     * Change the sort of the free HL variables for INFERENCE to NEW-HL-VARS.
     */
    @LispMethod(comment = "Change the sort of the free HL variables for INFERENCE to NEW-HL-VARS.")
    public static SubLObject reorder_inference_free_hl_vars(final SubLObject inference, final SubLObject new_hl_vars) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	final SubLObject old_hl_vars = inference_datastructures_inference.inference_free_hl_vars(inference);
	if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == subsetp(old_hl_vars, new_hl_vars, symbol_function(EQL), UNPROVIDED))) {
	    Errors.error(inference_datastructures_inference.$str435$variables__S_were_removed, set_difference(old_hl_vars, new_hl_vars, symbol_function(EQL), UNPROVIDED));
	}
	if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == subsetp(new_hl_vars, old_hl_vars, symbol_function(EQL), UNPROVIDED))) {
	    Errors.error(inference_datastructures_inference.$str436$variables__S_were_added, set_difference(new_hl_vars, old_hl_vars, symbol_function(EQL), UNPROVIDED));
	}
	if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (!length(old_hl_vars).numE(length(new_hl_vars)))) {
	    Errors.error(inference_datastructures_inference.$str437$variables__S_contain_duplications, new_hl_vars);
	}
	inference_datastructures_inference.set_inference_free_hl_vars(inference, new_hl_vars);
	return inference;
    }

    /**
     * Change the sort of the free EL variables for INFERENCE to NEW-EL-VARS.
     */
    @LispMethod(comment = "Change the sort of the free EL variables for INFERENCE to NEW-EL-VARS.")
    public static final SubLObject reorder_inference_free_el_vars_alt(SubLObject inference, SubLObject new_el_vars) {
	{
	    SubLObject el_bindings = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_el_bindings(inference);
	    SubLObject new_hl_vars = apply_bindings(el_bindings, new_el_vars);
	    return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.reorder_inference_free_hl_vars(inference, new_hl_vars);
	}
    }

    /**
     * Change the sort of the free EL variables for INFERENCE to NEW-EL-VARS.
     */
    @LispMethod(comment = "Change the sort of the free EL variables for INFERENCE to NEW-EL-VARS.")
    public static SubLObject reorder_inference_free_el_vars(final SubLObject inference, final SubLObject new_el_vars) {
	final SubLObject el_bindings = inference_datastructures_inference.inference_el_bindings(inference);
	final SubLObject new_hl_vars = bindings.apply_bindings(el_bindings, new_el_vars);
	return inference_datastructures_inference.reorder_inference_free_hl_vars(inference, new_hl_vars);
    }

    public static final SubLObject reset_inference_new_answers_alt(SubLObject inference) {
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.reset_inference_new_answer_id(inference);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.reset_inference_new_answer_justifications(inference);
	return inference;
    }

    public static SubLObject reset_inference_new_answers(final SubLObject inference) {
	inference_datastructures_inference.reset_inference_new_answer_id(inference);
	inference_datastructures_inference.reset_inference_new_answer_justifications(inference);
	return inference;
    }

    public static final SubLObject add_inference_new_answer_alt(SubLObject inference, SubLObject v_answer) {
	SubLTrampolineFile.checkType(v_answer, INFERENCE_ANSWER_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.add_inference_new_answer_by_id(inference, v_answer);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.add_inference_new_answer_by_bindings(inference, v_answer);
	return inference;
    }

    public static SubLObject add_inference_new_answer(final SubLObject inference, final SubLObject v_answer) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_answer) : "! inference_datastructures_inference.inference_answer_p(v_answer) "
		+ ("inference_datastructures_inference.inference_answer_p(v_answer) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(v_answer) ") + v_answer;
	inference_datastructures_inference.add_inference_new_answer_by_id(inference, v_answer);
	inference_datastructures_inference.add_inference_new_answer_by_bindings(inference, v_answer);
	return inference;
    }

    public static final SubLObject remove_inference_new_answer_alt(SubLObject inference, SubLObject v_answer) {
	SubLTrampolineFile.checkType(v_answer, INFERENCE_ANSWER_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.remove_inference_new_answer_by_id(inference, v_answer);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.remove_inference_new_answer_by_bindings(inference, v_answer);
	return inference;
    }

    public static SubLObject remove_inference_new_answer(final SubLObject inference, final SubLObject v_answer) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_answer) : "! inference_datastructures_inference.inference_answer_p(v_answer) "
		+ ("inference_datastructures_inference.inference_answer_p(v_answer) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(v_answer) ") + v_answer;
	inference_datastructures_inference.remove_inference_new_answer_by_id(inference, v_answer);
	inference_datastructures_inference.remove_inference_new_answer_by_bindings(inference, v_answer);
	return inference;
    }

    public static final SubLObject initialize_inference_time_properties_alt(SubLObject inference) {
	{
	    SubLObject real_time_now = get_internal_real_time();
	    SubLObject now = get_universal_time();
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_start_internal_real_time(inference, real_time_now);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_start_universal_time(inference, now);
	    {
		SubLObject max_time = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_max_time(inference);
		SubLObject end_time = (NIL != max_time) ? ((SubLObject) (internal_real_time_seconds_from_now(max_time, real_time_now))) : NIL;
		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_end_internal_real_time(inference, end_time);
	    }
	    {
		SubLObject pad_time = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.compute_inference_pad_internal_real_time(inference);
		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_pad_internal_real_time(inference, pad_time);
	    }
	}
	return inference;
    }

    public static SubLObject initialize_inference_time_properties(final SubLObject inference) {
	final SubLObject real_time_now = get_internal_real_time();
	final SubLObject now = get_universal_time();
	inference_datastructures_inference.set_inference_start_internal_real_time(inference, real_time_now);
	inference_datastructures_inference.set_inference_start_universal_time(inference, now);
	final SubLObject max_time = inference_datastructures_inference.inference_max_time(inference);
	final SubLObject end_time = (NIL != max_time) ? numeric_date_utilities.internal_real_time_seconds_from_now(max_time, real_time_now) : NIL;
	inference_datastructures_inference.set_inference_end_internal_real_time(inference, end_time);
	final SubLObject pad_time = inference_datastructures_inference.compute_inference_pad_internal_real_time(inference);
	inference_datastructures_inference.set_inference_pad_internal_real_time(inference, pad_time);
	return inference;
    }

    public static final SubLObject finalize_inference_time_properties_alt(SubLObject inference) {
	{
	    SubLObject delta_time = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_time_so_far(inference, NIL);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.increment_inference_cumulative_time(inference, delta_time);
	}
	return inference;
    }

    public static SubLObject finalize_inference_time_properties(final SubLObject inference) {
	final SubLObject delta_time = inference_datastructures_inference.inference_time_so_far(inference, NIL);
	inference_datastructures_inference.increment_inference_cumulative_time(inference, delta_time);
	return inference;
    }

    public static final SubLObject inference_elapsed_internal_real_time_since_start_alt(SubLObject inference) {
	{
	    SubLObject start = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_start_internal_real_time(inference);
	    SubLObject elapsed = elapsed_internal_real_time(start, UNPROVIDED);
	    return elapsed;
	}
    }

    public static SubLObject inference_elapsed_internal_real_time_since_start(final SubLObject inference) {
	final SubLObject start = inference_datastructures_inference.inference_start_internal_real_time(inference);
	final SubLObject elapsed = numeric_date_utilities.elapsed_internal_real_time(start, UNPROVIDED);
	return elapsed;
    }

    public static final SubLObject inference_elapsed_universal_time_since_start_alt(SubLObject inference) {
	{
	    SubLObject start = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_start_universal_time(inference);
	    SubLObject elapsed = subl_promotions.elapsed_universal_time(start, UNPROVIDED);
	    return elapsed;
	}
    }

    public static SubLObject inference_elapsed_universal_time_since_start(final SubLObject inference) {
	final SubLObject start = inference_datastructures_inference.inference_start_universal_time(inference);
	final SubLObject elapsed = elapsed_universal_time(start, UNPROVIDED);
	return elapsed;
    }

    /**
     *
     *
     * @return the time spent so far on the current continuation of this INFERENCE.
     */
    @LispMethod(comment = "@return the time spent so far on the current continuation of this INFERENCE.")
    public static final SubLObject inference_time_so_far_alt(SubLObject inference, SubLObject seconds_granularityP) {
	if (seconds_granularityP == UNPROVIDED) {
	    seconds_granularityP = T;
	}
	{
	    SubLObject seconds = ZERO_INTEGER;
	    if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.running_inference_p(inference)) {
		if (NIL != seconds_granularityP) {
		    seconds = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_elapsed_universal_time_since_start(inference);
		} else {
		    {
			SubLObject elapsed = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_elapsed_internal_real_time_since_start(inference);
			seconds = elapsed_internal_real_time_to_elapsed_seconds(elapsed);
		    }
		}
	    }
	    return seconds;
	}
    }

    /**
     *
     *
     * @return the time spent so far on the current continuation of this INFERENCE.
     */
    @LispMethod(comment = "@return the time spent so far on the current continuation of this INFERENCE.")
    public static SubLObject inference_time_so_far(final SubLObject inference, SubLObject seconds_granularityP) {
	if (seconds_granularityP == UNPROVIDED) {
	    seconds_granularityP = T;
	}
	SubLObject seconds = ZERO_INTEGER;
	if (NIL != inference_datastructures_inference.running_inference_p(inference)) {
	    if (NIL != seconds_granularityP) {
		seconds = inference_datastructures_inference.inference_elapsed_universal_time_since_start(inference);
	    } else {
		final SubLObject elapsed = inference_datastructures_inference.inference_elapsed_internal_real_time_since_start(inference);
		seconds = numeric_date_utilities.elapsed_internal_real_time_to_elapsed_seconds(elapsed);
	    }
	}
	return seconds;
    }

    /**
     * Return the remaining run time for INFERENCE, if it is both
     * currently running and has some :MAX-TIME specified.
     * Otherwise, return NIL.
     */
    @LispMethod(comment = "Return the remaining run time for INFERENCE, if it is both\r\ncurrently running and has some :MAX-TIME specified.\r\nOtherwise, return NIL.\nReturn the remaining run time for INFERENCE, if it is both\ncurrently running and has some :MAX-TIME specified.\nOtherwise, return NIL.")
    public static final SubLObject inference_remaining_time_alt(SubLObject inference, SubLObject seconds_granularityP) {
	if (seconds_granularityP == UNPROVIDED) {
	    seconds_granularityP = T;
	}
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	{
	    SubLObject end = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_end_internal_real_time(inference);
	    if ((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.running_inference_p(inference)) && end.isInteger()) {
		{
		    SubLObject now = get_internal_real_time();
		    SubLObject remaining = elapsed_internal_real_time(now, end);
		    SubLObject remaining_seconds = elapsed_internal_real_time_to_elapsed_seconds(remaining);
		    if (NIL != seconds_granularityP) {
			remaining_seconds = truncate(remaining_seconds, UNPROVIDED);
		    }
		    return remaining_seconds;
		}
	    }
	}
	return NIL;
    }

    /**
     * Return the remaining run time for INFERENCE, if it is both
     * currently running and has some :MAX-TIME specified.
     * Otherwise, return NIL.
     */
    @LispMethod(comment = "Return the remaining run time for INFERENCE, if it is both\r\ncurrently running and has some :MAX-TIME specified.\r\nOtherwise, return NIL.\nReturn the remaining run time for INFERENCE, if it is both\ncurrently running and has some :MAX-TIME specified.\nOtherwise, return NIL.")
    public static SubLObject inference_remaining_time(final SubLObject inference, SubLObject seconds_granularityP) {
	if (seconds_granularityP == UNPROVIDED) {
	    seconds_granularityP = T;
	}
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	final SubLObject end = inference_datastructures_inference.inference_end_internal_real_time(inference);
	if ((NIL != inference_datastructures_inference.running_inference_p(inference)) && end.isInteger()) {
	    final SubLObject now = get_internal_real_time();
	    final SubLObject remaining = numeric_date_utilities.elapsed_internal_real_time(now, end);
	    SubLObject remaining_seconds = numeric_date_utilities.elapsed_internal_real_time_to_elapsed_seconds(remaining);
	    if (NIL != seconds_granularityP) {
		remaining_seconds = truncate(remaining_seconds, UNPROVIDED);
	    }
	    return remaining_seconds;
	}
	return NIL;
    }

    /**
     *
     *
     * @return the total time spent on this INFERENCE including all previous continuations as well as the current one.
     */
    @LispMethod(comment = "@return the total time spent on this INFERENCE including all previous continuations as well as the current one.")
    public static final SubLObject inference_cumulative_time_so_far_alt(SubLObject inference, SubLObject seconds_granularityP) {
	if (seconds_granularityP == UNPROVIDED) {
	    seconds_granularityP = T;
	}
	{
	    SubLObject cumulative = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_cumulative_time(inference);
	    SubLObject so_far = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_time_so_far(inference, NIL);
	    SubLObject total = add(cumulative, so_far);
	    if (NIL != seconds_granularityP) {
		total = truncate(total, UNPROVIDED);
	    }
	    return total;
	}
    }

    /**
     *
     *
     * @return the total time spent on this INFERENCE including all previous continuations as well as the current one.
     */
    @LispMethod(comment = "@return the total time spent on this INFERENCE including all previous continuations as well as the current one.")
    public static SubLObject inference_cumulative_time_so_far(final SubLObject inference, SubLObject seconds_granularityP) {
	if (seconds_granularityP == UNPROVIDED) {
	    seconds_granularityP = T;
	}
	final SubLObject cumulative = inference_datastructures_inference.inference_cumulative_time(inference);
	final SubLObject so_far = inference_datastructures_inference.inference_time_so_far(inference, NIL);
	SubLObject total = add(cumulative, so_far);
	if (NIL != seconds_granularityP) {
	    total = truncate(total, UNPROVIDED);
	}
	return total;
    }

    /**
     * Signals an interrupt from the current process.
     */
    @LispMethod(comment = "Signals an interrupt from the current process.")
    public static final SubLObject inference_signal_interrupt_alt(SubLObject inference) {
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.note_inference_interrupt_signaled(inference, current_process());
	return inference;
    }

    /**
     * Signals an interrupt from the current process.
     */
    @LispMethod(comment = "Signals an interrupt from the current process.")
    public static SubLObject inference_signal_interrupt(final SubLObject inference) {
	inference_datastructures_inference.note_inference_interrupt_signaled(inference, current_process());
	return inference;
    }

    /**
     *
     *
     * @return boolean; whether there were any interrupts handled
     */
    @LispMethod(comment = "@return boolean; whether there were any interrupts handled")
    public static final SubLObject inference_handle_interrupts_alt(SubLObject inference) {
	{
	    SubLObject interrupt_handledP = NIL;
	    if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.valid_inference_p(inference)) {
		{
		    SubLObject q = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_interrupting_processes(inference);
		    SubLObject done_var = queues.queue_empty_p(q);
		    while (NIL == done_var) {
			{
			    SubLObject process = queues.dequeue(q);
			    process_unblock(process);
			    interrupt_handledP = T;
			    done_var = queues.queue_empty_p(q);
			}
		    }
		}
	    }
	    return interrupt_handledP;
	}
    }

    /**
     *
     *
     * @return boolean; whether there were any interrupts handled
     */
    @LispMethod(comment = "@return boolean; whether there were any interrupts handled")
    public static SubLObject inference_handle_interrupts(final SubLObject inference) {
	SubLObject interrupt_handledP = NIL;
	if (NIL != inference_datastructures_inference.valid_inference_p(inference)) {
	    for (SubLObject q = inference_datastructures_inference.inference_interrupting_processes(inference), done_var = queue_empty_p(q); NIL == done_var; done_var = queue_empty_p(q)) {
		final SubLObject process = dequeue(q);
		process_unblock(process);
		interrupt_handledP = T;
	    }
	}
	return interrupt_handledP;
    }

    public static final SubLObject simplest_inference_p_alt(SubLObject v_object) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(v_object)) && ($SIMPLEST == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_type(v_object)));
    }

    public static SubLObject simplest_inference_p(final SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_p(v_object)) && ($SIMPLEST == inference_datastructures_inference.inference_type(v_object)));
    }

    public static final SubLObject new_simplest_inference_alt(SubLObject store) {
	SubLTrampolineFile.checkType(store, PROBLEM_STORE_P);
	{
	    SubLObject inference = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.new_inference(store);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_type(inference, $SIMPLEST);
	    return inference;
	}
    }

    public static SubLObject new_simplest_inference(final SubLObject store) {
	assert NIL != inference_datastructures_problem_store.problem_store_p(store) : "! inference_datastructures_problem_store.problem_store_p(store) "
		+ ("inference_datastructures_problem_store.problem_store_p(store) " + "CommonSymbols.NIL != inference_datastructures_problem_store.problem_store_p(store) ") + store;
	final SubLObject inference = inference_datastructures_inference.new_inference(store);
	inference_datastructures_inference.set_inference_type(inference, $SIMPLEST);
	return inference;
    }

    public static final SubLObject simplest_inference_strategy_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, SIMPLEST_INFERENCE_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_data(inference);
    }

    public static SubLObject simplest_inference_strategy(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.simplest_inference_p(inference) : "! inference_datastructures_inference.simplest_inference_p(inference) "
		+ ("inference_datastructures_inference.simplest_inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.simplest_inference_p(inference) ") + inference;
	return inference_datastructures_inference.inference_data(inference);
    }

    public static final SubLObject set_simplest_inference_strategy_alt(SubLObject inference, SubLObject strategy) {
	SubLTrampolineFile.checkType(inference, SIMPLEST_INFERENCE_P);
	SubLTrampolineFile.checkType(strategy, STRATEGY_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_infrnc_data(inference, strategy);
	return inference;
    }

    public static SubLObject set_simplest_inference_strategy(final SubLObject inference, final SubLObject strategy) {
	assert NIL != inference_datastructures_inference.simplest_inference_p(inference) : "! inference_datastructures_inference.simplest_inference_p(inference) "
		+ ("inference_datastructures_inference.simplest_inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.simplest_inference_p(inference) ") + inference;
	assert NIL != inference_datastructures_strategy.strategy_p(strategy) : "! inference_datastructures_strategy.strategy_p(strategy) " + ("inference_datastructures_strategy.strategy_p(strategy) " + "CommonSymbols.NIL != inference_datastructures_strategy.strategy_p(strategy) ") + strategy;
	inference_datastructures_inference._csetf_infrnc_data(inference, strategy);
	return inference;
    }

    public static final SubLObject new_simplest_inference_of_type_alt(SubLObject store, SubLObject strategy_type) {
	SubLTrampolineFile.checkType(store, PROBLEM_STORE_P);
	SubLTrampolineFile.checkType(strategy_type, STRATEGY_TYPE_P);
	{
	    SubLObject inference = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.new_simplest_inference(store);
	    SubLObject strategy = inference_datastructures_strategy.new_strategy(strategy_type, inference);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_simplest_inference_strategy(inference, strategy);
	    inference_tactician.clear_strategy_step_count();
	    return inference;
	}
    }

    public static SubLObject new_simplest_inference_of_type(final SubLObject store, final SubLObject strategy_type) {
	assert NIL != inference_datastructures_problem_store.problem_store_p(store) : "! inference_datastructures_problem_store.problem_store_p(store) "
		+ ("inference_datastructures_problem_store.problem_store_p(store) " + "CommonSymbols.NIL != inference_datastructures_problem_store.problem_store_p(store) ") + store;
	assert NIL != inference_datastructures_strategy.strategy_type_p(strategy_type) : "! inference_datastructures_strategy.strategy_type_p(strategy_type) "
		+ ("inference_datastructures_strategy.strategy_type_p(strategy_type) " + "CommonSymbols.NIL != inference_datastructures_strategy.strategy_type_p(strategy_type) ") + strategy_type;
	final SubLObject inference = inference_datastructures_inference.new_simplest_inference(store);
	final SubLObject strategy = inference_datastructures_strategy.new_strategy(strategy_type, inference);
	inference_datastructures_inference.set_simplest_inference_strategy(inference, strategy);
	inference_tactician.clear_strategy_step_count();
	return inference;
    }

    /**
     * Allocates a new inference object and sets up its internal datastructures.
     * Attaches it to a newly created problem store.
     */
    @LispMethod(comment = "Allocates a new inference object and sets up its internal datastructures.\r\nAttaches it to a newly created problem store.\nAllocates a new inference object and sets up its internal datastructures.\nAttaches it to a newly created problem store.")
    public static final SubLObject new_simplest_inference_with_new_store_alt(SubLObject strategy_type) {
	{
	    SubLObject new_store = inference_datastructures_problem_store.new_problem_store(UNPROVIDED);
	    return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.new_simplest_inference_of_type(new_store, strategy_type);
	}
    }

    /**
     * Allocates a new inference object and sets up its internal datastructures.
     * Attaches it to a newly created problem store.
     */
    @LispMethod(comment = "Allocates a new inference object and sets up its internal datastructures.\r\nAttaches it to a newly created problem store.\nAllocates a new inference object and sets up its internal datastructures.\nAttaches it to a newly created problem store.")
    public static SubLObject new_simplest_inference_with_new_store(final SubLObject strategy_type) {
	final SubLObject new_store = inference_datastructures_problem_store.new_problem_store(UNPROVIDED);
	return inference_datastructures_inference.new_simplest_inference_of_type(new_store, strategy_type);
    }

    public static final SubLObject inference_answer_print_function_trampoline_alt(SubLObject v_object, SubLObject stream) {
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.print_inference_answer(v_object, stream, ZERO_INTEGER);
	return NIL;
    }

    public static SubLObject inference_answer_print_function_trampoline(final SubLObject v_object, final SubLObject stream) {
	inference_datastructures_inference.print_inference_answer(v_object, stream, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject inference_answer_p_alt(SubLObject v_object) {
	return v_object.getClass() == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_answer_native.class ? ((SubLObject) (T)) : NIL;
    }

    public static SubLObject inference_answer_p(final SubLObject v_object) {
	return v_object.getClass() == inference_datastructures_inference.$inference_answer_native.class ? T : NIL;
    }

    public static final SubLObject inf_answer_suid_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_ANSWER_P);
	return v_object.getField2();
    }

    public static SubLObject inf_answer_suid(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_object) : "! inference_datastructures_inference.inference_answer_p(v_object) " + "inference_datastructures_inference.inference_answer_p error :" + v_object;
	return v_object.getField2();
    }

    public static final SubLObject inf_answer_inference_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_ANSWER_P);
	return v_object.getField3();
    }

    public static SubLObject inf_answer_inference(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_object) : "! inference_datastructures_inference.inference_answer_p(v_object) " + "inference_datastructures_inference.inference_answer_p error :" + v_object;
	return v_object.getField3();
    }

    public static final SubLObject inf_answer_bindings_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_ANSWER_P);
	return v_object.getField4();
    }

    public static SubLObject inf_answer_bindings(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_object) : "! inference_datastructures_inference.inference_answer_p(v_object) " + "inference_datastructures_inference.inference_answer_p error :" + v_object;
	return v_object.getField4();
    }

    public static final SubLObject inf_answer_justifications_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_ANSWER_P);
	return v_object.getField5();
    }

    public static SubLObject inf_answer_justifications(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_object) : "! inference_datastructures_inference.inference_answer_p(v_object) " + "inference_datastructures_inference.inference_answer_p error :" + v_object;
	return v_object.getField5();
    }

    public static final SubLObject inf_answer_elapsed_creation_time_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_ANSWER_P);
	return v_object.getField6();
    }

    public static SubLObject inf_answer_elapsed_creation_time(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_object) : "! inference_datastructures_inference.inference_answer_p(v_object) " + "inference_datastructures_inference.inference_answer_p error :" + v_object;
	return v_object.getField6();
    }

    public static final SubLObject inf_answer_step_count_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_ANSWER_P);
	return v_object.getField7();
    }

    public static SubLObject inf_answer_step_count(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_object) : "! inference_datastructures_inference.inference_answer_p(v_object) " + "inference_datastructures_inference.inference_answer_p error :" + v_object;
	return v_object.getField7();
    }

    public static final SubLObject _csetf_inf_answer_suid_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_ANSWER_P);
	return v_object.setField2(value);
    }

    public static SubLObject _csetf_inf_answer_suid(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_object) : "! inference_datastructures_inference.inference_answer_p(v_object) " + "inference_datastructures_inference.inference_answer_p error :" + v_object;
	return v_object.setField2(value);
    }

    public static final SubLObject _csetf_inf_answer_inference_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_ANSWER_P);
	return v_object.setField3(value);
    }

    public static SubLObject _csetf_inf_answer_inference(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_object) : "! inference_datastructures_inference.inference_answer_p(v_object) " + "inference_datastructures_inference.inference_answer_p error :" + v_object;
	return v_object.setField3(value);
    }

    public static final SubLObject _csetf_inf_answer_bindings_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_ANSWER_P);
	return v_object.setField4(value);
    }

    public static SubLObject _csetf_inf_answer_bindings(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_object) : "! inference_datastructures_inference.inference_answer_p(v_object) " + "inference_datastructures_inference.inference_answer_p error :" + v_object;
	return v_object.setField4(value);
    }

    public static final SubLObject _csetf_inf_answer_justifications_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_ANSWER_P);
	return v_object.setField5(value);
    }

    public static SubLObject _csetf_inf_answer_justifications(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_object) : "! inference_datastructures_inference.inference_answer_p(v_object) " + "inference_datastructures_inference.inference_answer_p error :" + v_object;
	return v_object.setField5(value);
    }

    public static final SubLObject _csetf_inf_answer_elapsed_creation_time_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_ANSWER_P);
	return v_object.setField6(value);
    }

    public static SubLObject _csetf_inf_answer_elapsed_creation_time(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_object) : "! inference_datastructures_inference.inference_answer_p(v_object) " + "inference_datastructures_inference.inference_answer_p error :" + v_object;
	return v_object.setField6(value);
    }

    public static final SubLObject _csetf_inf_answer_step_count_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, INFERENCE_ANSWER_P);
	return v_object.setField7(value);
    }

    public static SubLObject _csetf_inf_answer_step_count(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_object) : "! inference_datastructures_inference.inference_answer_p(v_object) " + "inference_datastructures_inference.inference_answer_p error :" + v_object;
	return v_object.setField7(value);
    }

    public static final SubLObject make_inference_answer_alt(SubLObject arglist) {
	if (arglist == UNPROVIDED) {
	    arglist = NIL;
	}
	{
	    SubLObject v_new = new com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_answer_native();
	    SubLObject next = NIL;
	    for (next = arglist; NIL != next; next = cddr(next)) {
		{
		    SubLObject current_arg = next.first();
		    SubLObject current_value = cadr(next);
		    SubLObject pcase_var = current_arg;
		    if (pcase_var.eql($SUID)) {
			com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_answer_suid(v_new, current_value);
		    } else {
			if (pcase_var.eql($INFERENCE)) {
			    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_answer_inference(v_new, current_value);
			} else {
			    if (pcase_var.eql($BINDINGS)) {
				com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_answer_bindings(v_new, current_value);
			    } else {
				if (pcase_var.eql($JUSTIFICATIONS)) {
				    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_answer_justifications(v_new, current_value);
				} else {
				    if (pcase_var.eql($ELAPSED_CREATION_TIME)) {
					com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_answer_elapsed_creation_time(v_new, current_value);
				    } else {
					if (pcase_var.eql($STEP_COUNT)) {
					    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_answer_step_count(v_new, current_value);
					} else {
					    Errors.error($str_alt262$Invalid_slot__S_for_construction_, current_arg);
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	    return v_new;
	}
    }

    public static SubLObject make_inference_answer(SubLObject arglist) {
	if (arglist == UNPROVIDED) {
	    arglist = NIL;
	}
	final SubLObject v_new = new inference_datastructures_inference.$inference_answer_native();
	SubLObject next;
	SubLObject current_arg;
	SubLObject current_value;
	SubLObject pcase_var;
	for (next = NIL, next = arglist; NIL != next; next = cddr(next)) {
	    current_arg = next.first();
	    current_value = cadr(next);
	    pcase_var = current_arg;
	    if (pcase_var.eql($SUID)) {
		inference_datastructures_inference._csetf_inf_answer_suid(v_new, current_value);
	    } else if (pcase_var.eql($INFERENCE)) {
		inference_datastructures_inference._csetf_inf_answer_inference(v_new, current_value);
	    } else if (pcase_var.eql($BINDINGS)) {
		inference_datastructures_inference._csetf_inf_answer_bindings(v_new, current_value);
	    } else if (pcase_var.eql($JUSTIFICATIONS)) {
		inference_datastructures_inference._csetf_inf_answer_justifications(v_new, current_value);
	    } else if (pcase_var.eql(inference_datastructures_inference.$ELAPSED_CREATION_TIME)) {
		inference_datastructures_inference._csetf_inf_answer_elapsed_creation_time(v_new, current_value);
	    } else if (pcase_var.eql($STEP_COUNT)) {
		inference_datastructures_inference._csetf_inf_answer_step_count(v_new, current_value);
	    } else {
		Errors.error(inference_datastructures_inference.$str275$Invalid_slot__S_for_construction_, current_arg);
	    }

	}
	return v_new;
    }

    public static SubLObject visit_defstruct_inference_answer(final SubLObject obj, final SubLObject visitor_fn) {
	funcall(visitor_fn, obj, $BEGIN, inference_datastructures_inference.MAKE_INFERENCE_ANSWER, SIX_INTEGER);
	funcall(visitor_fn, obj, $SLOT, $SUID, inference_datastructures_inference.inf_answer_suid(obj));
	funcall(visitor_fn, obj, $SLOT, $INFERENCE, inference_datastructures_inference.inf_answer_inference(obj));
	funcall(visitor_fn, obj, $SLOT, $BINDINGS, inference_datastructures_inference.inf_answer_bindings(obj));
	funcall(visitor_fn, obj, $SLOT, $JUSTIFICATIONS, inference_datastructures_inference.inf_answer_justifications(obj));
	funcall(visitor_fn, obj, $SLOT, inference_datastructures_inference.$ELAPSED_CREATION_TIME, inference_datastructures_inference.inf_answer_elapsed_creation_time(obj));
	funcall(visitor_fn, obj, $SLOT, $STEP_COUNT, inference_datastructures_inference.inf_answer_step_count(obj));
	funcall(visitor_fn, obj, $END, inference_datastructures_inference.MAKE_INFERENCE_ANSWER, SIX_INTEGER);
	return obj;
    }

    public static SubLObject visit_defstruct_object_inference_answer_method(final SubLObject obj, final SubLObject visitor_fn) {
	return inference_datastructures_inference.visit_defstruct_inference_answer(obj, visitor_fn);
    }

    public static final SubLObject valid_inference_answer_p_alt(SubLObject v_object) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_p(v_object)) && (NIL == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_invalid_p(v_object)));
    }

    public static SubLObject valid_inference_answer_p(final SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_answer_p(v_object)) && (NIL == inference_datastructures_inference.inference_answer_invalid_p(v_object)));
    }

    public static final SubLObject inference_answer_invalid_p_alt(SubLObject inference_answer) {
	return eq($FREE, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_bindings(inference_answer));
    }

    public static SubLObject inference_answer_invalid_p(final SubLObject inference_answer) {
	return eq($FREE, inference_datastructures_inference.inference_answer_bindings(inference_answer));
    }

    public static final SubLObject print_inference_answer_alt(SubLObject v_object, SubLObject stream, SubLObject depth) {
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_invalid_p(v_object)) {
	    format(stream, $str_alt441$_Invalid_INFERENCE_ANSWER__s_, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inf_answer_suid(v_object));
	} else {
	    {
		SubLObject inference = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_inference(v_object);
		SubLObject inf_suid = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_suid(inference);
		SubLObject store = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store(inference);
		SubLObject store_suid = (NIL != inference_datastructures_problem_store.problem_store_p(store)) ? ((SubLObject) (inference_datastructures_problem_store.problem_store_suid(store))) : NIL;
		format(stream, $str_alt442$_INFERENCE_ANSWER__a_for_INFERENC,
			new SubLObject[] { com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_suid(v_object), store_suid, inf_suid, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_bindings(v_object) });
	    }
	}
	return NIL;
    }

    public static SubLObject print_inference_answer(final SubLObject v_object, final SubLObject stream, final SubLObject depth) {
	if (NIL != inference_datastructures_inference.inference_answer_invalid_p(v_object)) {
	    format(stream, inference_datastructures_inference.$str466$_Invalid_INFERENCE_ANSWER__s_, inference_datastructures_inference.inf_answer_suid(v_object));
	} else {
	    final SubLObject inference = inference_datastructures_inference.inference_answer_inference(v_object);
	    final SubLObject inf_suid = inference_datastructures_inference.inference_suid(inference);
	    final SubLObject store = inference_datastructures_inference.inference_problem_store(inference);
	    final SubLObject store_suid = (NIL != inference_datastructures_problem_store.problem_store_p(store)) ? inference_datastructures_problem_store.problem_store_suid(store) : NIL;
	    format(stream, inference_datastructures_inference.$str467$_INFERENCE_ANSWER__a_for_INFERENC, new SubLObject[] { inference_datastructures_inference.inference_answer_suid(v_object), store_suid, inf_suid, inference_datastructures_inference.inference_answer_bindings(v_object) });
	}
	return NIL;
    }

    public static final SubLObject sxhash_inference_answer_method_alt(SubLObject v_object) {
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inf_answer_suid(v_object);
    }

    public static SubLObject sxhash_inference_answer_method(final SubLObject v_object) {
	return inference_datastructures_inference.inf_answer_suid(v_object);
    }

    public static final SubLObject new_inference_answer_alt(SubLObject inference, SubLObject v_bindings) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(v_bindings, BINDINGS_P);
	{
	    SubLObject v_answer = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.make_inference_answer(UNPROVIDED);
	    SubLObject suid = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.new_inference_answer_id(inference);
	    if (suid.isZero()) {
		inference_metrics.increment_successful_inference_historical_count();
	    }
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_answer_suid(v_answer, suid);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_answer_inference(v_answer, inference);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_answer_bindings(v_answer, v_bindings);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_answer_justifications(v_answer, NIL);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.initialize_inference_answer_elapsed_creation_time(v_answer);
	    {
		SubLObject step_count = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_cumulative_step_count(inference);
		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_answer_step_count(v_answer, step_count);
	    }
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.add_inference_new_answer(inference, v_answer);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.possibly_signal_new_inference_answer(inference, v_answer);
	    probably_approximately_done.pad_note_answer();
	    return v_answer;
	}
    }

    public static SubLObject new_inference_answer(final SubLObject inference, final SubLObject v_bindings) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != bindings.bindings_p(v_bindings) : "! bindings.bindings_p(v_bindings) " + ("bindings.bindings_p(v_bindings) " + "CommonSymbols.NIL != bindings.bindings_p(v_bindings) ") + v_bindings;
	final SubLObject v_answer = inference_datastructures_inference.make_inference_answer(UNPROVIDED);
	final SubLObject suid = inference_datastructures_inference.new_inference_answer_id(inference);
	if (suid.isZero()) {
	    inference_metrics.increment_successful_inference_historical_count();
	}
	inference_datastructures_inference._csetf_inf_answer_suid(v_answer, suid);
	inference_datastructures_inference._csetf_inf_answer_inference(v_answer, inference);
	inference_datastructures_inference.set_inference_answer_bindings(v_answer, v_bindings);
	inference_datastructures_inference._csetf_inf_answer_justifications(v_answer, NIL);
	inference_datastructures_inference.initialize_inference_answer_elapsed_creation_time(v_answer);
	final SubLObject step_count = inference_datastructures_inference.inference_cumulative_step_count(inference);
	inference_datastructures_inference.set_inference_answer_step_count(v_answer, step_count);
	inference_datastructures_inference.add_inference_new_answer(inference, v_answer);
	inference_datastructures_inference.possibly_signal_new_inference_answer(inference, v_answer);
	return v_answer;
    }

    /**
     *
     *
     * @return 0 inference-answer-p
     * @return 1 booleanp; whether a new answer was created
     */
    @LispMethod(comment = "@return 0 inference-answer-p\r\n@return 1 booleanp; whether a new answer was created")
    public static final SubLObject find_or_create_inference_answer_alt(SubLObject inference, SubLObject v_bindings) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	{
	    SubLObject v_answer = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.find_inference_answer_by_bindings(inference, v_bindings);
	    SubLObject newP = NIL;
	    if (NIL == v_answer) {
		v_answer = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.new_inference_answer(inference, v_bindings);
		newP = T;
	    }
	    return values(v_answer, newP);
	}
    }

    /**
     *
     *
     * @return 0 inference-answer-p
     * @return 1 booleanp; whether a new answer was created
     */
    @LispMethod(comment = "@return 0 inference-answer-p\r\n@return 1 booleanp; whether a new answer was created")
    public static SubLObject find_or_create_inference_answer(final SubLObject inference, final SubLObject v_bindings) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	SubLObject v_answer = inference_datastructures_inference.find_inference_answer_by_bindings(inference, v_bindings);
	SubLObject newP = NIL;
	if (NIL == v_answer) {
	    v_answer = inference_datastructures_inference.new_inference_answer(inference, v_bindings);
	    newP = T;
	}
	return values(v_answer, newP);
    }

    public static final SubLObject do_inference_answer_justifications_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt445);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject just_var = NIL;
		    SubLObject inference_answer = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt445);
		    just_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt445);
		    inference_answer = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    return listS(DO_LIST, list(just_var, list(INFERENCE_ANSWER_JUSTIFICATIONS, inference_answer)), append(body, NIL));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt445);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject do_inference_answer_justifications(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list470);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject just_var = NIL;
	SubLObject inference_answer = NIL;
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list470);
	just_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list470);
	inference_answer = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    return listS(DO_LIST, list(just_var, list(inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATIONS, inference_answer)), append(body, NIL));
	}
	cdestructuring_bind_error(datum, inference_datastructures_inference.$list470);
	return NIL;
    }

    public static final SubLObject do_inference_answer_justifications_numbered_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt448);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject just_var = NIL;
		    SubLObject index_var = NIL;
		    SubLObject inference_answer = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt448);
		    just_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt448);
		    index_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt448);
		    inference_answer = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    return listS(CDOLIST_NUMBERED, list(just_var, index_var, list(INFERENCE_ANSWER_JUSTIFICATIONS, inference_answer)), append(body, NIL));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt448);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject do_inference_answer_justifications_numbered(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list473);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject just_var = NIL;
	SubLObject index_var = NIL;
	SubLObject inference_answer = NIL;
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list473);
	just_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list473);
	index_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list473);
	inference_answer = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    return listS(CDOLIST_NUMBERED, list(just_var, index_var, list(inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATIONS, inference_answer)), append(body, NIL));
	}
	cdestructuring_bind_error(datum, inference_datastructures_inference.$list473);
	return NIL;
    }

    public static final SubLObject destroy_inference_answer_alt(SubLObject v_answer) {
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.valid_inference_answer_p(v_answer)) {
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.note_inference_answer_invalid(v_answer);
	    {
		SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justifications(v_answer);
		SubLObject justification = NIL;
		for (justification = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), justification = cdolist_list_var.first()) {
		    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.destroy_inference_answer_justification(justification);
		}
	    }
	    {
		SubLObject inference = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_inference(v_answer);
		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.remove_inference_new_answer(inference, v_answer);
	    }
	    return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.destroy_inference_answer_int(v_answer);
	}
	return NIL;
    }

    public static SubLObject destroy_inference_answer(final SubLObject v_answer) {
	if (NIL != inference_datastructures_inference.valid_inference_answer_p(v_answer)) {
	    inference_datastructures_inference.note_inference_answer_invalid(v_answer);
	    SubLObject cdolist_list_var = inference_datastructures_inference.inference_answer_justifications(v_answer);
	    SubLObject justification = NIL;
	    justification = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		inference_datastructures_inference.destroy_inference_answer_justification(justification);
		cdolist_list_var = cdolist_list_var.rest();
		justification = cdolist_list_var.first();
	    }
	    final SubLObject inference = inference_datastructures_inference.inference_answer_inference(v_answer);
	    inference_datastructures_inference.remove_inference_new_answer(inference, v_answer);
	    return inference_datastructures_inference.destroy_inference_answer_int(v_answer);
	}
	return NIL;
    }

    public static final SubLObject destroy_inference_answer_int_alt(SubLObject v_answer) {
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_answer_justifications(v_answer, $FREE);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_answer_inference(v_answer, $FREE);
	return v_answer;
    }

    public static SubLObject destroy_inference_answer_int(final SubLObject v_answer) {
	inference_datastructures_inference._csetf_inf_answer_justifications(v_answer, $FREE);
	inference_datastructures_inference._csetf_inf_answer_inference(v_answer, $FREE);
	return v_answer;
    }

    public static final SubLObject note_inference_answer_invalid_alt(SubLObject v_answer) {
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_answer_bindings(v_answer, $FREE);
	return v_answer;
    }

    public static SubLObject note_inference_answer_invalid(final SubLObject v_answer) {
	inference_datastructures_inference._csetf_inf_answer_bindings(v_answer, $FREE);
	return v_answer;
    }

    public static final SubLObject inference_answer_suid_alt(SubLObject inference_answer) {
	SubLTrampolineFile.checkType(inference_answer, INFERENCE_ANSWER_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inf_answer_suid(inference_answer);
    }

    public static SubLObject inference_answer_suid(final SubLObject inference_answer) {
	assert NIL != inference_datastructures_inference.inference_answer_p(inference_answer) : "! inference_datastructures_inference.inference_answer_p(inference_answer) "
		+ ("inference_datastructures_inference.inference_answer_p(inference_answer) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(inference_answer) ") + inference_answer;
	return inference_datastructures_inference.inf_answer_suid(inference_answer);
    }

    public static final SubLObject inference_answer_inference_alt(SubLObject inference_answer) {
	SubLTrampolineFile.checkType(inference_answer, INFERENCE_ANSWER_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inf_answer_inference(inference_answer);
    }

    public static SubLObject inference_answer_inference(final SubLObject inference_answer) {
	assert NIL != inference_datastructures_inference.inference_answer_p(inference_answer) : "! inference_datastructures_inference.inference_answer_p(inference_answer) "
		+ ("inference_datastructures_inference.inference_answer_p(inference_answer) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(inference_answer) ") + inference_answer;
	return inference_datastructures_inference.inf_answer_inference(inference_answer);
    }

    public static final SubLObject inference_answer_bindings_alt(SubLObject inference_answer) {
	SubLTrampolineFile.checkType(inference_answer, INFERENCE_ANSWER_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inf_answer_bindings(inference_answer);
    }

    public static SubLObject inference_answer_bindings(final SubLObject inference_answer) {
	assert NIL != inference_datastructures_inference.inference_answer_p(inference_answer) : "! inference_datastructures_inference.inference_answer_p(inference_answer) "
		+ ("inference_datastructures_inference.inference_answer_p(inference_answer) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(inference_answer) ") + inference_answer;
	return inference_datastructures_inference.inf_answer_bindings(inference_answer);
    }

    public static final SubLObject inference_answer_justifications_alt(SubLObject inference_answer) {
	SubLTrampolineFile.checkType(inference_answer, INFERENCE_ANSWER_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inf_answer_justifications(inference_answer);
    }

    public static SubLObject inference_answer_justifications(final SubLObject inference_answer) {
	assert NIL != inference_datastructures_inference.inference_answer_p(inference_answer) : "! inference_datastructures_inference.inference_answer_p(inference_answer) "
		+ ("inference_datastructures_inference.inference_answer_p(inference_answer) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(inference_answer) ") + inference_answer;
	return inference_datastructures_inference.inf_answer_justifications(inference_answer);
    }

    public static final SubLObject inference_answer_elapsed_creation_time_alt(SubLObject inference_answer) {
	SubLTrampolineFile.checkType(inference_answer, INFERENCE_ANSWER_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inf_answer_elapsed_creation_time(inference_answer);
    }

    public static SubLObject inference_answer_elapsed_creation_time(final SubLObject inference_answer) {
	assert NIL != inference_datastructures_inference.inference_answer_p(inference_answer) : "! inference_datastructures_inference.inference_answer_p(inference_answer) "
		+ ("inference_datastructures_inference.inference_answer_p(inference_answer) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(inference_answer) ") + inference_answer;
	return inference_datastructures_inference.inf_answer_elapsed_creation_time(inference_answer);
    }

    public static final SubLObject inference_answer_step_count_alt(SubLObject inference_answer) {
	SubLTrampolineFile.checkType(inference_answer, INFERENCE_ANSWER_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inf_answer_step_count(inference_answer);
    }

    public static SubLObject inference_answer_step_count(final SubLObject inference_answer) {
	assert NIL != inference_datastructures_inference.inference_answer_p(inference_answer) : "! inference_datastructures_inference.inference_answer_p(inference_answer) "
		+ ("inference_datastructures_inference.inference_answer_p(inference_answer) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(inference_answer) ") + inference_answer;
	return inference_datastructures_inference.inf_answer_step_count(inference_answer);
    }

    public static final SubLObject set_inference_answer_bindings_alt(SubLObject inference_answer, SubLObject v_bindings) {
	SubLTrampolineFile.checkType(v_bindings, BINDINGS_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_answer_bindings(inference_answer, v_bindings);
	return inference_answer;
    }

    public static SubLObject set_inference_answer_bindings(final SubLObject inference_answer, final SubLObject v_bindings) {
	assert NIL != bindings.bindings_p(v_bindings) : "! bindings.bindings_p(v_bindings) " + ("bindings.bindings_p(v_bindings) " + "CommonSymbols.NIL != bindings.bindings_p(v_bindings) ") + v_bindings;
	inference_datastructures_inference._csetf_inf_answer_bindings(inference_answer, v_bindings);
	return inference_answer;
    }

    public static final SubLObject set_inference_answer_elapsed_creation_time_alt(SubLObject inference_answer, SubLObject elapsed_creation_time) {
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_answer_elapsed_creation_time(inference_answer, elapsed_creation_time);
	return inference_answer;
    }

    public static SubLObject set_inference_answer_elapsed_creation_time(final SubLObject inference_answer, final SubLObject elapsed_creation_time) {
	inference_datastructures_inference._csetf_inf_answer_elapsed_creation_time(inference_answer, elapsed_creation_time);
	return inference_answer;
    }

    public static final SubLObject set_inference_answer_step_count_alt(SubLObject inference_answer, SubLObject step_count) {
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_answer_step_count(inference_answer, step_count);
	return inference_answer;
    }

    public static SubLObject set_inference_answer_step_count(final SubLObject inference_answer, final SubLObject step_count) {
	inference_datastructures_inference._csetf_inf_answer_step_count(inference_answer, step_count);
	return inference_answer;
    }

    public static final SubLObject inference_answer_problem_store_alt(SubLObject inference_answer) {
	SubLTrampolineFile.checkType(inference_answer, INFERENCE_ANSWER_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_inference(inference_answer));
    }

    public static SubLObject inference_answer_problem_store(final SubLObject inference_answer) {
	assert NIL != inference_datastructures_inference.inference_answer_p(inference_answer) : "! inference_datastructures_inference.inference_answer_p(inference_answer) "
		+ ("inference_datastructures_inference.inference_answer_p(inference_answer) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(inference_answer) ") + inference_answer;
	return inference_datastructures_inference.inference_problem_store(inference_datastructures_inference.inference_answer_inference(inference_answer));
    }

    public static final SubLObject inference_answer_free_el_vars_alt(SubLObject inference_answer) {
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_free_el_vars(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_inference(inference_answer));
    }

    public static SubLObject inference_answer_free_el_vars(final SubLObject inference_answer) {
	return inference_datastructures_inference.inference_free_el_vars(inference_datastructures_inference.inference_answer_inference(inference_answer));
    }

    public static final SubLObject inference_answer_elapsed_time_alt(SubLObject inference_answer, SubLObject seconds_granularityP) {
	if (seconds_granularityP == UNPROVIDED) {
	    seconds_granularityP = T;
	}
	SubLTrampolineFile.checkType(inference_answer, INFERENCE_ANSWER_P);
	{
	    SubLObject elapsed_time = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_elapsed_creation_time(inference_answer);
	    SubLObject seconds = elapsed_internal_real_time_to_elapsed_seconds(elapsed_time);
	    if (NIL != seconds_granularityP) {
		seconds = truncate(seconds, UNPROVIDED);
	    }
	    return seconds;
	}
    }

    public static SubLObject inference_answer_elapsed_time(final SubLObject inference_answer, SubLObject seconds_granularityP) {
	if (seconds_granularityP == UNPROVIDED) {
	    seconds_granularityP = T;
	}
	assert NIL != inference_datastructures_inference.inference_answer_p(inference_answer) : "! inference_datastructures_inference.inference_answer_p(inference_answer) "
		+ ("inference_datastructures_inference.inference_answer_p(inference_answer) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(inference_answer) ") + inference_answer;
	final SubLObject elapsed_time = inference_datastructures_inference.inference_answer_elapsed_creation_time(inference_answer);
	SubLObject seconds = numeric_date_utilities.elapsed_internal_real_time_to_elapsed_seconds(elapsed_time);
	if (NIL != seconds_granularityP) {
	    seconds = truncate(seconds, UNPROVIDED);
	}
	return seconds;
    }

    /**
     *
     *
     * @return universal-time-p; the universal-time at which INFERENCE-ANSWER was created.
     */
    @LispMethod(comment = "@return universal-time-p; the universal-time at which INFERENCE-ANSWER was created.")
    public static final SubLObject inference_answer_creation_time_alt(SubLObject inference_answer) {
	{
	    SubLObject inference = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_inference(inference_answer);
	    SubLObject start = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_start_universal_time(inference);
	    SubLObject elapsed = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_elapsed_time(inference_answer, T);
	    return universal_time_seconds_from_now(elapsed, start);
	}
    }

    /**
     *
     *
     * @return universal-time-p; the universal-time at which INFERENCE-ANSWER was created.
     */
    @LispMethod(comment = "@return universal-time-p; the universal-time at which INFERENCE-ANSWER was created.")
    public static SubLObject inference_answer_creation_time(final SubLObject inference_answer) {
	final SubLObject inference = inference_datastructures_inference.inference_answer_inference(inference_answer);
	final SubLObject start = inference_datastructures_inference.inference_start_universal_time(inference);
	final SubLObject elapsed = inference_datastructures_inference.inference_answer_elapsed_time(inference_answer, T);
	return numeric_date_utilities.universal_time_seconds_from_now(elapsed, start);
    }

    /**
     *
     *
     * @return nil or inference-answer-justification-p
     */
    @LispMethod(comment = "@return nil or inference-answer-justification-p")
    public static final SubLObject find_inference_answer_justification_alt(SubLObject inference_answer, SubLObject hl_justification) {
	{
	    SubLObject existing_justifications = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justifications(inference_answer);
	    return find(hl_justification, existing_justifications, JUSTIFICATION_EQUAL, INFERENCE_ANSWER_JUSTIFICATION_SUPPORTS, UNPROVIDED, UNPROVIDED);
	}
    }

    /**
     *
     *
     * @return nil or inference-answer-justification-p
     */
    @LispMethod(comment = "@return nil or inference-answer-justification-p")
    public static SubLObject find_inference_answer_justification(final SubLObject inference_answer, final SubLObject hl_justification) {
	final SubLObject existing_justifications = inference_datastructures_inference.inference_answer_justifications(inference_answer);
	return find(hl_justification, existing_justifications, inference_datastructures_inference.JUSTIFICATION_EQUAL, inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATION_SUPPORTS, UNPROVIDED, UNPROVIDED);
    }

    public static final SubLObject inference_answer_result_bindings_alt(SubLObject v_answer) {
	{
	    SubLObject inference = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_inference(v_answer);
	    SubLObject answer_language = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_language(inference);
	    SubLObject pcase_var = answer_language;
	    if (pcase_var.eql($HL)) {
		return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_bindings(v_answer);
	    } else {
		if (pcase_var.eql($EL)) {
		    return inference_kernel.inference_answer_el_bindings(v_answer);
		} else {
		    Errors.error($str_alt454$_S_was_not_an_inference_answer_la, answer_language);
		}
	    }
	}
	return NIL;
    }

    public static SubLObject inference_answer_result_bindings(final SubLObject v_answer) {
	final SubLObject inference = inference_datastructures_inference.inference_answer_inference(v_answer);
	final SubLObject pcase_var;
	final SubLObject answer_language = pcase_var = inference_datastructures_inference.inference_answer_language(inference);
	if (pcase_var.eql($HL)) {
	    return inference_datastructures_inference.inference_answer_bindings(v_answer);
	}
	if (pcase_var.eql($EL)) {
	    return inference_kernel.inference_answer_el_bindings(v_answer);
	}
	Errors.error(inference_datastructures_inference.$str479$_S_was_not_an_inference_answer_la, answer_language);
	return NIL;
    }

    public static final SubLObject inference_answer_bindings_equalP_alt(SubLObject answer1, SubLObject answer2) {
	SubLTrampolineFile.checkType(answer1, INFERENCE_ANSWER_P);
	SubLTrampolineFile.checkType(answer2, INFERENCE_ANSWER_P);
	return equal(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_bindings(answer1), com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_bindings(answer2));
    }

    public static SubLObject inference_answer_bindings_equalP(final SubLObject answer1, final SubLObject answer2) {
	assert NIL != inference_datastructures_inference.inference_answer_p(answer1) : "! inference_datastructures_inference.inference_answer_p(answer1) "
		+ ("inference_datastructures_inference.inference_answer_p(answer1) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(answer1) ") + answer1;
	assert NIL != inference_datastructures_inference.inference_answer_p(answer2) : "! inference_datastructures_inference.inference_answer_p(answer2) "
		+ ("inference_datastructures_inference.inference_answer_p(answer2) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(answer2) ") + answer2;
	return equal(inference_datastructures_inference.inference_answer_bindings(answer1), inference_datastructures_inference.inference_answer_bindings(answer2));
    }

    public static final SubLObject inference_answer_newP_alt(SubLObject inference_answer) {
	SubLTrampolineFile.checkType(inference_answer, INFERENCE_ANSWER_P);
	{
	    SubLObject inference = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_inference(inference_answer);
	    SubLObject answer_id = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_suid(inference_answer);
	    SubLObject new_answer_id_start = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_new_answer_id_start(inference);
	    return numGE(answer_id, new_answer_id_start);
	}
    }

    public static SubLObject inference_answer_newP(final SubLObject inference_answer) {
	assert NIL != inference_datastructures_inference.inference_answer_p(inference_answer) : "! inference_datastructures_inference.inference_answer_p(inference_answer) "
		+ ("inference_datastructures_inference.inference_answer_p(inference_answer) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(inference_answer) ") + inference_answer;
	final SubLObject inference = inference_datastructures_inference.inference_answer_inference(inference_answer);
	final SubLObject answer_id = inference_datastructures_inference.inference_answer_suid(inference_answer);
	final SubLObject new_answer_id_start = inference_datastructures_inference.inference_new_answer_id_start(inference);
	return numGE(answer_id, new_answer_id_start);
    }

    public static final SubLObject inference_answer_L_alt(SubLObject answer1, SubLObject answer2) {
	return numL(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_suid(answer1), com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_suid(answer2));
    }

    public static SubLObject inference_answer_L(final SubLObject answer1, final SubLObject answer2) {
	return numL(inference_datastructures_inference.inference_answer_suid(answer1), inference_datastructures_inference.inference_answer_suid(answer2));
    }

    public static final SubLObject inference_answer_el_sentence_alt(SubLObject inference_answer) {
	SubLTrampolineFile.checkType(inference_answer, INFERENCE_ANSWER_P);
	{
	    SubLObject inference = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_inference(inference_answer);
	    SubLObject el_sentence = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_input_el_query(inference);
	    SubLObject result_bindings = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_result_bindings(inference_answer);
	    SubLObject answer_el_sentence = apply_bindings(result_bindings, el_sentence);
	    return answer_el_sentence;
	}
    }

    public static SubLObject inference_answer_el_sentence(final SubLObject inference_answer) {
	assert NIL != inference_datastructures_inference.inference_answer_p(inference_answer) : "! inference_datastructures_inference.inference_answer_p(inference_answer) "
		+ ("inference_datastructures_inference.inference_answer_p(inference_answer) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(inference_answer) ") + inference_answer;
	final SubLObject inference = inference_datastructures_inference.inference_answer_inference(inference_answer);
	final SubLObject el_sentence = inference_datastructures_inference.inference_input_el_query(inference);
	final SubLObject result_bindings = inference_datastructures_inference.inference_answer_result_bindings(inference_answer);
	final SubLObject answer_el_sentence = bindings.apply_bindings(result_bindings, el_sentence);
	return answer_el_sentence;
    }

    public static SubLObject inference_answer_justification_count(final SubLObject inference_answer) {
	return length(inference_datastructures_inference.inference_answer_justifications(inference_answer));
    }

    public static final SubLObject add_inference_answer_justification_alt(SubLObject inference_answer, SubLObject justification) {
	SubLTrampolineFile.checkType(justification, INFERENCE_ANSWER_JUSTIFICATION_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_answer_justifications(inference_answer, cons(justification, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inf_answer_justifications(inference_answer)));
	return inference_answer;
    }

    public static SubLObject add_inference_answer_justification(final SubLObject inference_answer, final SubLObject justification) {
	assert NIL != inference_datastructures_inference.inference_answer_justification_p(justification) : "! inference_datastructures_inference.inference_answer_justification_p(justification) "
		+ ("inference_datastructures_inference.inference_answer_justification_p(justification) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_justification_p(justification) ") + justification;
	inference_datastructures_inference._csetf_inf_answer_justifications(inference_answer, cons(justification, inference_datastructures_inference.inf_answer_justifications(inference_answer)));
	return inference_answer;
    }

    public static final SubLObject remove_inference_answer_justification_alt(SubLObject inference_answer, SubLObject justification) {
	SubLTrampolineFile.checkType(justification, INFERENCE_ANSWER_JUSTIFICATION_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_answer_justifications(inference_answer,
		delete(justification, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inf_answer_justifications(inference_answer), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
	return inference_answer;
    }

    public static SubLObject remove_inference_answer_justification(final SubLObject inference_answer, final SubLObject justification) {
	assert NIL != inference_datastructures_inference.inference_answer_justification_p(justification) : "! inference_datastructures_inference.inference_answer_justification_p(justification) "
		+ ("inference_datastructures_inference.inference_answer_justification_p(justification) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_justification_p(justification) ") + justification;
	inference_datastructures_inference._csetf_inf_answer_justifications(inference_answer, delete(justification, inference_datastructures_inference.inf_answer_justifications(inference_answer), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
	return inference_answer;
    }

    public static final SubLObject initialize_inference_answer_elapsed_creation_time_alt(SubLObject inference_answer) {
	{
	    SubLObject inference = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_inference(inference_answer);
	    SubLObject start = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_start_internal_real_time(inference);
	    SubLObject elapsed = elapsed_internal_real_time(start, UNPROVIDED);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_answer_elapsed_creation_time(inference_answer, elapsed);
	    return inference_answer;
	}
    }

    public static SubLObject initialize_inference_answer_elapsed_creation_time(final SubLObject inference_answer) {
	final SubLObject inference = inference_datastructures_inference.inference_answer_inference(inference_answer);
	final SubLObject start = inference_datastructures_inference.inference_start_internal_real_time(inference);
	final SubLObject elapsed = numeric_date_utilities.elapsed_internal_real_time(start, UNPROVIDED);
	inference_datastructures_inference.set_inference_answer_elapsed_creation_time(inference_answer, elapsed);
	return inference_answer;
    }

    public static final SubLObject inference_answer_justification_print_function_trampoline_alt(SubLObject v_object, SubLObject stream) {
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.print_inference_answer_justification(v_object, stream, ZERO_INTEGER);
	return NIL;
    }

    public static SubLObject inference_answer_justification_print_function_trampoline(final SubLObject v_object, final SubLObject stream) {
	inference_datastructures_inference.print_inference_answer_justification(v_object, stream, ZERO_INTEGER);
	return NIL;
    }

    public static final SubLObject inference_answer_justification_p_alt(SubLObject v_object) {
	return v_object.getClass() == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_answer_justification_native.class ? ((SubLObject) (T)) : NIL;
    }

    public static SubLObject inference_answer_justification_p(final SubLObject v_object) {
	return v_object.getClass() == inference_datastructures_inference.$inference_answer_justification_native.class ? T : NIL;
    }

    public static final SubLObject inf_ans_just_answer_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATION_P);
	return (($inference_answer_justification_native) v_object).$answer;
    }

    public static SubLObject inf_ans_just_answer(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_answer_justification_p(v_object) : "! inference_datastructures_inference.inference_answer_justification_p(v_object) " + "inference_datastructures_inference.inference_answer_justification_p error :" + v_object;
	return v_object.getField2();
    }

    public static final SubLObject inf_ans_just_supports_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATION_P);
	return (($inference_answer_justification_native) v_object).$supports;
    }

    public static SubLObject inf_ans_just_supports(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_answer_justification_p(v_object) : "! inference_datastructures_inference.inference_answer_justification_p(v_object) " + "inference_datastructures_inference.inference_answer_justification_p error :" + v_object;
	return v_object.getField3();
    }

    public static SubLObject inf_ans_just_pragma_supports(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_answer_justification_p(v_object) : "! inference_datastructures_inference.inference_answer_justification_p(v_object) " + "inference_datastructures_inference.inference_answer_justification_p error :" + v_object;
	return v_object.getField4();
    }

    public static final SubLObject inf_ans_just_proofs_alt(SubLObject v_object) {
	SubLTrampolineFile.checkType(v_object, inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATION_P);
	return (($inference_answer_justification_native) v_object).$proofs;
    }

    public static SubLObject inf_ans_just_proofs(final SubLObject v_object) {
	assert NIL != inference_datastructures_inference.inference_answer_justification_p(v_object) : "! inference_datastructures_inference.inference_answer_justification_p(v_object) " + "inference_datastructures_inference.inference_answer_justification_p error :" + v_object;
	return v_object.getField5();
    }

    public static final SubLObject _csetf_inf_ans_just_answer_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATION_P);
	return (($inference_answer_justification_native) v_object).$answer = (value);
    }

    public static SubLObject _csetf_inf_ans_just_answer(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_answer_justification_p(v_object) : "! inference_datastructures_inference.inference_answer_justification_p(v_object) " + "inference_datastructures_inference.inference_answer_justification_p error :" + v_object;
	return v_object.setField2(value);
    }

    public static final SubLObject _csetf_inf_ans_just_supports_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATION_P);
	return (($inference_answer_justification_native) v_object).$supports = (value);
    }

    public static SubLObject _csetf_inf_ans_just_supports(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_answer_justification_p(v_object) : "! inference_datastructures_inference.inference_answer_justification_p(v_object) " + "inference_datastructures_inference.inference_answer_justification_p error :" + v_object;
	return v_object.setField3(value);
    }

    public static SubLObject _csetf_inf_ans_just_pragma_supports(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_answer_justification_p(v_object) : "! inference_datastructures_inference.inference_answer_justification_p(v_object) " + "inference_datastructures_inference.inference_answer_justification_p error :" + v_object;
	return v_object.setField4(value);
    }

    public static final SubLObject _csetf_inf_ans_just_proofs_alt(SubLObject v_object, SubLObject value) {
	SubLTrampolineFile.checkType(v_object, inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATION_P);
	return (($inference_answer_justification_native) v_object).$proofs = (value);
    }

    public static SubLObject _csetf_inf_ans_just_proofs(final SubLObject v_object, final SubLObject value) {
	assert NIL != inference_datastructures_inference.inference_answer_justification_p(v_object) : "! inference_datastructures_inference.inference_answer_justification_p(v_object) " + "inference_datastructures_inference.inference_answer_justification_p error :" + v_object;
	return v_object.setField5(value);
    }

    public static final SubLObject make_inference_answer_justification_alt(SubLObject arglist) {
	if (arglist == UNPROVIDED) {
	    arglist = NIL;
	}
	{
	    SubLObject v_new = new com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_answer_justification_native();
	    SubLObject next = NIL;
	    for (next = arglist; NIL != next; next = cddr(next)) {
		{
		    SubLObject current_arg = next.first();
		    SubLObject current_value = cadr(next);
		    SubLObject pcase_var = current_arg;
		    if (pcase_var.eql($ANSWER)) {
			com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_ans_just_answer(v_new, current_value);
		    } else {
			if (pcase_var.eql($SUPPORTS)) {
			    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_ans_just_supports(v_new, current_value);
			} else {
			    if (pcase_var.eql($PROOFS)) {
				com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_ans_just_proofs(v_new, current_value);
			    } else {
				Errors.error($str_alt262$Invalid_slot__S_for_construction_, current_arg);
			    }
			}
		    }
		}
	    }
	    return v_new;
	}
    }

    public static SubLObject make_inference_answer_justification(SubLObject arglist) {
	if (arglist == UNPROVIDED) {
	    arglist = NIL;
	}
	final SubLObject v_new = new inference_datastructures_inference.$inference_answer_justification_native();
	SubLObject next;
	SubLObject current_arg;
	SubLObject current_value;
	SubLObject pcase_var;
	for (next = NIL, next = arglist; NIL != next; next = cddr(next)) {
	    current_arg = next.first();
	    current_value = cadr(next);
	    pcase_var = current_arg;
	    if (pcase_var.eql($ANSWER)) {
		inference_datastructures_inference._csetf_inf_ans_just_answer(v_new, current_value);
	    } else if (pcase_var.eql($SUPPORTS)) {
		inference_datastructures_inference._csetf_inf_ans_just_supports(v_new, current_value);
	    } else if (pcase_var.eql($PRAGMA_SUPPORTS)) {
		inference_datastructures_inference._csetf_inf_ans_just_pragma_supports(v_new, current_value);
	    } else if (pcase_var.eql($PROOFS)) {
		inference_datastructures_inference._csetf_inf_ans_just_proofs(v_new, current_value);
	    } else {
		Errors.error(inference_datastructures_inference.$str275$Invalid_slot__S_for_construction_, current_arg);
	    }

	}
	return v_new;
    }

    public static SubLObject visit_defstruct_inference_answer_justification(final SubLObject obj, final SubLObject visitor_fn) {
	funcall(visitor_fn, obj, $BEGIN, inference_datastructures_inference.MAKE_INFERENCE_ANSWER_JUSTIFICATION, FOUR_INTEGER);
	funcall(visitor_fn, obj, $SLOT, $ANSWER, inference_datastructures_inference.inf_ans_just_answer(obj));
	funcall(visitor_fn, obj, $SLOT, $SUPPORTS, inference_datastructures_inference.inf_ans_just_supports(obj));
	funcall(visitor_fn, obj, $SLOT, $PRAGMA_SUPPORTS, inference_datastructures_inference.inf_ans_just_pragma_supports(obj));
	funcall(visitor_fn, obj, $SLOT, $PROOFS, inference_datastructures_inference.inf_ans_just_proofs(obj));
	funcall(visitor_fn, obj, $END, inference_datastructures_inference.MAKE_INFERENCE_ANSWER_JUSTIFICATION, FOUR_INTEGER);
	return obj;
    }

    public static SubLObject visit_defstruct_object_inference_answer_justification_method(final SubLObject obj, final SubLObject visitor_fn) {
	return inference_datastructures_inference.visit_defstruct_inference_answer_justification(obj, visitor_fn);
    }

    public static final SubLObject valid_inference_answer_justification_p_alt(SubLObject v_object) {
	return makeBoolean((NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_p(v_object)) && (NIL == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_invalid_p(v_object)));
    }

    public static SubLObject valid_inference_answer_justification_p(final SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_inference.inference_answer_justification_p(v_object)) && (NIL == inference_datastructures_inference.inference_answer_justification_invalid_p(v_object)));
    }

    public static final SubLObject inference_answer_justification_invalid_p_alt(SubLObject inference_answer_justification) {
	return eq($FREE, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_supports(inference_answer_justification));
    }

    public static SubLObject inference_answer_justification_invalid_p(final SubLObject inference_answer_justification) {
	return eq($FREE, inference_datastructures_inference.inference_answer_justification_supports(inference_answer_justification));
    }

    public static final SubLObject print_inference_answer_justification_alt(SubLObject v_object, SubLObject stream, SubLObject depth) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_invalid_p(v_object)) {
		if (NIL != $print_readably$.getDynamicValue(thread)) {
		    print_not_readable(v_object, stream);
		} else {
		    {
			SubLObject v_object_10 = v_object;
			SubLObject stream_11 = stream;
			write_string($str_alt472$__, stream_11, UNPROVIDED, UNPROVIDED);
			write(type_of(v_object_10), new SubLObject[] { $STREAM, stream_11 });
			write_char(CHAR_space, stream_11);
			write(pointer(v_object_10), new SubLObject[] { $STREAM, stream_11, $BASE, SIXTEEN_INTEGER });
			write_char(CHAR_greater, stream_11);
		    }
		}
	    } else {
		format(stream, $str_alt475$_INF_ANS_JUST__s_, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_supports(v_object));
	    }
	    return NIL;
	}
    }

    public static SubLObject print_inference_answer_justification(final SubLObject v_object, final SubLObject stream, final SubLObject depth) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	if (NIL != inference_datastructures_inference.inference_answer_justification_invalid_p(v_object)) {
	    if (NIL != $print_readably$.getDynamicValue(thread)) {
		print_not_readable(v_object, stream);
	    } else {
		print_macros.print_unreadable_object_preamble(stream, v_object, T, NIL);
		print_macros.print_unreadable_object_postamble(stream, v_object, T, T);
	    }
	} else {
	    format(stream, inference_datastructures_inference.$str503$_INF_ANS_JUST__s_, inference_datastructures_inference.inference_answer_justification_supports(v_object));
	}
	return NIL;
    }

    public static final SubLObject sxhash_inference_answer_justification_method_alt(SubLObject v_object) {
	return logxor(Sxhash.sxhash(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inf_ans_just_answer(v_object)), Sxhash.sxhash(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inf_ans_just_supports(v_object)));
    }

    public static SubLObject sxhash_inference_answer_justification_method(final SubLObject v_object) {
	return logxor(Sxhash.sxhash(inference_datastructures_inference.inf_ans_just_answer(v_object)), Sxhash.sxhash(inference_datastructures_inference.inf_ans_just_supports(v_object)));
    }

    public static final SubLObject list_of_inference_answer_justification_p_alt(SubLObject v_object) {
	if (NIL != non_dotted_list_p(v_object)) {
	    {
		SubLObject cdolist_list_var = v_object;
		SubLObject subobject = NIL;
		for (subobject = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), subobject = cdolist_list_var.first()) {
		    if (NIL == com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_p(subobject)) {
			return NIL;
		    }
		}
		return T;
	    }
	} else {
	    return NIL;
	}
    }

    public static SubLObject list_of_inference_answer_justification_p(final SubLObject v_object) {
	if (NIL != list_utilities.non_dotted_list_p(v_object)) {
	    SubLObject cdolist_list_var = v_object;
	    SubLObject subobject = NIL;
	    subobject = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		if (NIL == inference_datastructures_inference.inference_answer_justification_p(subobject)) {
		    return NIL;
		}
		cdolist_list_var = cdolist_list_var.rest();
		subobject = cdolist_list_var.first();
	    }
	    return T;
	}
	return NIL;
    }

    public static final SubLObject new_inference_answer_justification(SubLObject v_answer, SubLObject supports) {
	SubLTrampolineFile.checkType(v_answer, INFERENCE_ANSWER_P);
	SubLTrampolineFile.checkType(supports, HL_JUSTIFICATION_P);
	{
	    SubLObject just = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.make_inference_answer_justification(UNPROVIDED);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_ans_just_answer(just, v_answer);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_ans_just_supports(just, supports);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.add_inference_answer_justification(v_answer, just);
	    return just;
	}
    }

    public static SubLObject new_inference_answer_justification(final SubLObject v_answer, final SubLObject supports, final SubLObject pragma_supports) {
	assert NIL != inference_datastructures_inference.inference_answer_p(v_answer) : "! inference_datastructures_inference.inference_answer_p(v_answer) "
		+ ("inference_datastructures_inference.inference_answer_p(v_answer) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_p(v_answer) ") + v_answer;
	assert NIL != arguments.hl_justification_p(supports) : "! arguments.hl_justification_p(supports) " + ("arguments.hl_justification_p(supports) " + "CommonSymbols.NIL != arguments.hl_justification_p(supports) ") + supports;
	final SubLObject just = inference_datastructures_inference.make_inference_answer_justification(UNPROVIDED);
	inference_datastructures_inference._csetf_inf_ans_just_answer(just, v_answer);
	inference_datastructures_inference._csetf_inf_ans_just_supports(just, supports);
	inference_datastructures_inference._csetf_inf_ans_just_pragma_supports(just, pragma_supports);
	inference_datastructures_inference.add_inference_answer_justification(v_answer, just);
	return just;
    }

    /**
     *
     *
     * @return 0 inference-answer-justification-p
     * @return 1 booleanp; whether a new justification was created
     */
    @LispMethod(comment = "@return 0 inference-answer-justification-p\r\n@return 1 booleanp; whether a new justification was created")
    public static final SubLObject find_or_create_inference_answer_justification(SubLObject inference, SubLObject v_bindings, SubLObject supports) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	{
	    SubLObject v_answer = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.find_or_create_inference_answer(inference, v_bindings);
	    SubLObject justification = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.find_inference_answer_justification(v_answer, supports);
	    SubLObject newP = NIL;
	    if (NIL == justification) {
		justification = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.new_inference_answer_justification(v_answer, supports);
		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.add_inference_new_answer_justification(inference, justification);
		newP = T;
	    }
	    return values(justification, newP);
	}
    }

    public static SubLObject find_or_create_inference_answer_justification(final SubLObject inference, final SubLObject v_bindings, SubLObject supports, final SubLObject pragma_supports) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	supports = arguments.canonicalize_hl_justification(supports);
	final SubLObject v_answer = inference_datastructures_inference.find_or_create_inference_answer(inference, v_bindings);
	SubLObject justification = inference_datastructures_inference.find_inference_answer_justification(v_answer, supports);
	SubLObject newP = NIL;
	if (NIL == justification) {
	    justification = inference_datastructures_inference.new_inference_answer_justification(v_answer, supports, pragma_supports);
	    inference_datastructures_inference.add_inference_new_answer_justification(inference, justification);
	    newP = T;
	}
	return values(justification, newP);
    }

    public static SubLObject subst_indexical_referents_into_answer_bindings(SubLObject v_bindings, final SubLObject supports) {
	SubLObject bindings_values = bindings.bindings_values(v_bindings);
	SubLObject replaced_somethingP = NIL;
	if (NIL != kb_control_vars.date_kb_loaded_p()) {
	    final SubLObject now_value = date_utilities.indexical_now();
	    if (NIL != expression_find(now_value, bindings_values, NIL, symbol_function(EQUAL), UNPROVIDED)) {
		bindings_values = expression_subst(inference_datastructures_inference.$$Now, now_value, bindings_values, symbol_function(EQUAL), UNPROVIDED);
		replaced_somethingP = T;
	    }
	}
	if (NIL != replaced_somethingP) {
	    v_bindings = bindings.make_variable_bindings(bindings.bindings_variables(v_bindings), bindings_values);
	}
	return v_bindings;
    }

    public static final SubLObject destroy_inference_answer_justification_alt(SubLObject justification) {
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.valid_inference_answer_justification_p(justification)) {
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.note_inference_answer_justification_invalid(justification);
	    {
		SubLObject inference = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_inference(justification);
		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.remove_inference_new_answer_justification(inference, justification);
	    }
	    {
		SubLObject v_answer = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_answer(justification);
		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.remove_inference_answer_justification(v_answer, justification);
	    }
	    return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.destroy_inference_answer_justification_int(justification);
	}
	return NIL;
    }

    public static SubLObject destroy_inference_answer_justification(final SubLObject justification) {
	if (NIL != inference_datastructures_inference.valid_inference_answer_justification_p(justification)) {
	    inference_datastructures_inference.note_inference_answer_justification_invalid(justification);
	    final SubLObject inference = inference_datastructures_inference.inference_answer_justification_inference(justification);
	    inference_datastructures_inference.remove_inference_new_answer_justification(inference, justification);
	    final SubLObject v_answer = inference_datastructures_inference.inference_answer_justification_answer(justification);
	    inference_datastructures_inference.remove_inference_answer_justification(v_answer, justification);
	    return inference_datastructures_inference.destroy_inference_answer_justification_int(justification);
	}
	return NIL;
    }

    public static final SubLObject destroy_inference_answer_justification_int_alt(SubLObject justification) {
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_ans_just_answer(justification, $FREE);
	return justification;
    }

    public static SubLObject destroy_inference_answer_justification_int(final SubLObject justification) {
	inference_datastructures_inference._csetf_inf_ans_just_answer(justification, $FREE);
	return justification;
    }

    public static final SubLObject note_inference_answer_justification_invalid_alt(SubLObject justification) {
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_ans_just_supports(justification, $FREE);
	return justification;
    }

    public static SubLObject note_inference_answer_justification_invalid(final SubLObject justification) {
	inference_datastructures_inference._csetf_inf_ans_just_supports(justification, $FREE);
	inference_datastructures_inference._csetf_inf_ans_just_pragma_supports(justification, $FREE);
	return justification;
    }

    public static final SubLObject inference_answer_justification_answer_alt(SubLObject justification) {
	SubLTrampolineFile.checkType(justification, INFERENCE_ANSWER_JUSTIFICATION_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inf_ans_just_answer(justification);
    }

    public static SubLObject inference_answer_justification_answer(final SubLObject justification) {
	assert NIL != inference_datastructures_inference.inference_answer_justification_p(justification) : "! inference_datastructures_inference.inference_answer_justification_p(justification) "
		+ ("inference_datastructures_inference.inference_answer_justification_p(justification) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_justification_p(justification) ") + justification;
	return inference_datastructures_inference.inf_ans_just_answer(justification);
    }

    public static final SubLObject inference_answer_justification_supports_alt(SubLObject justification) {
	SubLTrampolineFile.checkType(justification, INFERENCE_ANSWER_JUSTIFICATION_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inf_ans_just_supports(justification);
    }

    public static SubLObject inference_answer_justification_supports(final SubLObject justification) {
	assert NIL != inference_datastructures_inference.inference_answer_justification_p(justification) : "! inference_datastructures_inference.inference_answer_justification_p(justification) "
		+ ("inference_datastructures_inference.inference_answer_justification_p(justification) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_justification_p(justification) ") + justification;
	return inference_datastructures_inference.inf_ans_just_supports(justification);
    }

    public static SubLObject inference_answer_justification_pragmatic_supports(final SubLObject justification) {
	assert NIL != inference_datastructures_inference.inference_answer_justification_p(justification) : "! inference_datastructures_inference.inference_answer_justification_p(justification) "
		+ ("inference_datastructures_inference.inference_answer_justification_p(justification) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_justification_p(justification) ") + justification;
	return inference_datastructures_inference.inf_ans_just_pragma_supports(justification);
    }

    public static final SubLObject inference_answer_justification_proofs_alt(SubLObject justification) {
	SubLTrampolineFile.checkType(justification, INFERENCE_ANSWER_JUSTIFICATION_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inf_ans_just_proofs(justification);
    }

    public static SubLObject inference_answer_justification_proofs(final SubLObject justification) {
	assert NIL != inference_datastructures_inference.inference_answer_justification_p(justification) : "! inference_datastructures_inference.inference_answer_justification_p(justification) "
		+ ("inference_datastructures_inference.inference_answer_justification_p(justification) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_answer_justification_p(justification) ") + justification;
	return inference_datastructures_inference.inf_ans_just_proofs(justification);
    }

    public static final SubLObject do_inference_answer_justification_proofs_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt478);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject proof_var = NIL;
		    SubLObject justification = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt478);
		    proof_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt478);
		    justification = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    return listS(DO_LIST, list(proof_var, list(INFERENCE_ANSWER_JUSTIFICATION_PROOFS, justification)), append(body, NIL));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt478);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject do_inference_answer_justification_proofs(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list507);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject proof_var = NIL;
	SubLObject justification = NIL;
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list507);
	proof_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list507);
	justification = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    return listS(DO_LIST, list(proof_var, list(inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATION_PROOFS, justification)), append(body, NIL));
	}
	cdestructuring_bind_error(datum, inference_datastructures_inference.$list507);
	return NIL;
    }

    public static final SubLObject do_proof_dependent_inference_answer_justifications_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt480);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject justification_var = NIL;
		    SubLObject proof = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt480);
		    justification_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt480);
		    proof = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    SubLObject inference = $sym481$INFERENCE;
			    SubLObject v_answer = $sym482$ANSWER;
			    SubLObject proof_var = $sym483$PROOF_VAR;
			    return list(CLET, list(list(proof_var, proof)), list(DO_PROBLEM_SUPPORTED_INFERENCES, list(inference, list(PROOF_SUPPORTED_PROBLEM, proof_var)), list(DO_INFERENCE_ANSWERS, list(v_answer, inference),
				    list(DO_INFERENCE_ANSWER_JUSTIFICATIONS, list(justification_var, v_answer), listS(PWHEN, listS($sym486$MEMBER_, proof_var, list(INFERENCE_ANSWER_JUSTIFICATION_PROOFS, justification_var), $list_alt487), append(body, NIL))))));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt480);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject do_proof_dependent_inference_answer_justifications(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list509);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject justification_var = NIL;
	SubLObject proof = NIL;
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list509);
	justification_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list509);
	proof = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    final SubLObject inference = inference_datastructures_inference.$sym510$INFERENCE;
	    final SubLObject v_answer = inference_datastructures_inference.$sym511$ANSWER;
	    final SubLObject proof_var = inference_datastructures_inference.$sym512$PROOF_VAR;
	    return list(CLET, list(list(proof_var, proof)),
		    list(inference_datastructures_inference.DO_PROBLEM_SUPPORTED_INFERENCES, list(inference, list(inference_datastructures_inference.PROOF_SUPPORTED_PROBLEM, proof_var)),
			    list(inference_datastructures_inference.DO_INFERENCE_ANSWERS, list(v_answer, inference), list(inference_datastructures_inference.DO_INFERENCE_ANSWER_JUSTIFICATIONS, list(justification_var, v_answer),
				    listS(PWHEN, listS(inference_datastructures_inference.$sym515$MEMBER_, proof_var, list(inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATION_PROOFS, justification_var), inference_datastructures_inference.$list516), append(body, NIL))))));
	}
	cdestructuring_bind_error(datum, inference_datastructures_inference.$list509);
	return NIL;
    }

    /**
     * Iterates over every subproof of every proof of every answer obtained for INFERENCE.
     */
    @LispMethod(comment = "Iterates over every subproof of every proof of every answer obtained for INFERENCE.")
    public static final SubLObject do_inference_all_subproofs_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt488);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject subproof_var = NIL;
		    SubLObject inference = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt488);
		    subproof_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt488);
		    inference = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    SubLObject v_answer = $sym489$ANSWER;
			    SubLObject justification = $sym490$JUSTIFICATION;
			    SubLObject proof = $sym491$PROOF;
			    return list(DO_INFERENCE_ANSWERS, list(v_answer, inference),
				    list(DO_INFERENCE_ANSWER_JUSTIFICATIONS, list(justification, v_answer), list(DO_INFERENCE_ANSWER_JUSTIFICATION_PROOFS, list(proof, justification), listS(DO_PROOF_ALL_SUBPROOFS, list(subproof_var, proof), append(body, NIL)))));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt488);
		    }
		}
	    }
	}
	return NIL;
    }

    /**
     * Iterates over every subproof of every proof of every answer obtained for INFERENCE.
     */
    @LispMethod(comment = "Iterates over every subproof of every proof of every answer obtained for INFERENCE.")
    public static SubLObject do_inference_all_subproofs(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list517);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject subproof_var = NIL;
	SubLObject inference = NIL;
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list517);
	subproof_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list517);
	inference = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    final SubLObject v_answer = inference_datastructures_inference.$sym518$ANSWER;
	    final SubLObject justification = inference_datastructures_inference.$sym519$JUSTIFICATION;
	    final SubLObject proof = inference_datastructures_inference.$sym520$PROOF;
	    return list(inference_datastructures_inference.DO_INFERENCE_ANSWERS, list(v_answer, inference), list(inference_datastructures_inference.DO_INFERENCE_ANSWER_JUSTIFICATIONS, list(justification, v_answer),
		    list(inference_datastructures_inference.DO_INFERENCE_ANSWER_JUSTIFICATION_PROOFS, list(proof, justification), listS(inference_datastructures_inference.DO_PROOF_ALL_SUBPROOFS, list(subproof_var, proof), append(body, NIL)))));
	}
	cdestructuring_bind_error(datum, inference_datastructures_inference.$list517);
	return NIL;
    }

    public static final SubLObject inference_answer_first_justification_alt(SubLObject v_answer) {
	{
	    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justifications(v_answer);
	    SubLObject justification = NIL;
	    for (justification = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), justification = cdolist_list_var.first()) {
		return justification;
	    }
	}
	return NIL;
    }

    public static SubLObject inference_answer_first_justification(final SubLObject v_answer) {
	final SubLObject cdolist_list_var = inference_datastructures_inference.inference_answer_justifications(v_answer);
	SubLObject justification = NIL;
	justification = cdolist_list_var.first();
	if (NIL != cdolist_list_var) {
	    return justification;
	}
	return NIL;
    }

    public static final SubLObject inference_answer_justification_first_proof_alt(SubLObject justification) {
	{
	    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_proofs(justification);
	    SubLObject proof = NIL;
	    for (proof = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), proof = cdolist_list_var.first()) {
		return proof;
	    }
	}
	return NIL;
    }

    public static SubLObject inference_answer_justification_first_proof(final SubLObject justification) {
	final SubLObject cdolist_list_var = inference_datastructures_inference.inference_answer_justification_proofs(justification);
	SubLObject proof = NIL;
	proof = cdolist_list_var.first();
	if (NIL != cdolist_list_var) {
	    return proof;
	}
	return NIL;
    }

    public static final SubLObject inference_first_proof_alt(SubLObject inference) {
	{
	    SubLObject v_answer = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_first_answer(inference);
	    if (NIL != v_answer) {
		{
		    SubLObject justification = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_first_justification(v_answer);
		    if (NIL != justification) {
			{
			    SubLObject proof = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_first_proof(justification);
			    return proof;
			}
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject inference_first_proof(final SubLObject inference) {
	final SubLObject v_answer = inference_datastructures_inference.inference_first_answer(inference);
	if (NIL != v_answer) {
	    final SubLObject justification = inference_datastructures_inference.inference_answer_first_justification(v_answer);
	    if (NIL != justification) {
		final SubLObject proof = inference_datastructures_inference.inference_answer_justification_first_proof(justification);
		return proof;
	    }
	}
	return NIL;
    }

    public static final SubLObject inference_answer_justification_inference_alt(SubLObject justification) {
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_inference(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_answer(justification));
    }

    public static SubLObject inference_answer_justification_inference(final SubLObject justification) {
	return inference_datastructures_inference.inference_answer_inference(inference_datastructures_inference.inference_answer_justification_answer(justification));
    }

    public static final SubLObject inference_answer_justification_store_alt(SubLObject justification) {
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store(
		com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_inference(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_answer(justification)));
    }

    public static SubLObject inference_answer_justification_store(final SubLObject justification) {
	return inference_datastructures_inference.inference_problem_store(inference_datastructures_inference.inference_answer_inference(inference_datastructures_inference.inference_answer_justification_answer(justification)));
    }

    public static final SubLObject inference_answer_justification_rules_alt(SubLObject justification) {
	{
	    SubLObject supports = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_supports(justification);
	    SubLObject rules = Sort.sort(remove_if_not(symbol_function($sym494$RULE_ASSERTION_), supports, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), symbol_function($sym397$_), symbol_function(ASSERTION_ID));
	    return rules;
	}
    }

    public static SubLObject inference_answer_justification_rules(final SubLObject justification) {
	final SubLObject supports = inference_datastructures_inference.inference_answer_justification_supports(justification);
	final SubLObject rules = assertion_utilities.sort_assertions(list_utilities.remove_if_not(symbol_function(inference_datastructures_inference.$sym523$RULE_ASSERTION_), supports, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
	return rules;
    }

    public static final SubLObject add_inference_answer_justification_proof_alt(SubLObject justification, SubLObject proof) {
	SubLTrampolineFile.checkType(proof, PROOF_P);
	com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference._csetf_inf_ans_just_proofs(justification, cons(proof, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inf_ans_just_proofs(justification)));
	return justification;
    }

    public static SubLObject add_inference_answer_justification_proof(final SubLObject justification, final SubLObject proof) {
	assert NIL != inference_datastructures_proof.proof_p(proof) : "! inference_datastructures_proof.proof_p(proof) " + ("inference_datastructures_proof.proof_p(proof) " + "CommonSymbols.NIL != inference_datastructures_proof.proof_p(proof) ") + proof;
	inference_datastructures_inference._csetf_inf_ans_just_proofs(justification, cons(proof, inference_datastructures_inference.inf_ans_just_proofs(justification)));
	return justification;
    }

    public static final SubLObject new_inference_answer_justification_from_proof(SubLObject v_answer, SubLObject supports, SubLObject proof) {
	{
	    SubLObject justification = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.new_inference_answer_justification(v_answer, supports);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.add_inference_answer_justification_proof(justification, proof);
	    return justification;
	}
    }

    public static SubLObject new_inference_answer_justification_from_proof(final SubLObject v_answer, final SubLObject supports, final SubLObject pragma_supports, final SubLObject proof) {
	final SubLObject justification = inference_datastructures_inference.new_inference_answer_justification(v_answer, supports, pragma_supports);
	inference_datastructures_inference.add_inference_answer_justification_proof(justification, proof);
	return justification;
    }

    public static final SubLObject inference_answer_justification_to_tms_deduction_spec_alt(SubLObject justification, SubLObject truth) {
	{
	    SubLObject supports = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_supports(justification);
	    SubLObject tv = argumentation.compute_supports_tv(supports, truth);
	    return list($SUPPORTS, supports, $TV, tv);
	}
    }

    public static SubLObject inference_answer_justification_to_tms_deduction_spec(final SubLObject justification, final SubLObject truth) {
	final SubLObject supports = inference_datastructures_inference.inference_answer_justification_supports(justification);
	final SubLObject tv = argumentation.compute_supports_tv(supports, truth);
	return list($SUPPORTS, supports, $TV, tv);
    }

    public static final SubLObject inference_answer_justification_to_true_tms_deduction_spec_alt(SubLObject justification) {
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_to_tms_deduction_spec(justification, $TRUE);
    }

    public static SubLObject inference_answer_justification_to_true_tms_deduction_spec(final SubLObject justification) {
	return inference_datastructures_inference.inference_answer_justification_to_tms_deduction_spec(justification, $TRUE);
    }

    public static final SubLObject inference_answer_justification_to_false_tms_deduction_spec_alt(SubLObject justification) {
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_to_tms_deduction_spec(justification, $FALSE);
    }

    public static SubLObject inference_answer_justification_to_false_tms_deduction_spec(final SubLObject justification) {
	return inference_datastructures_inference.inference_answer_justification_to_tms_deduction_spec(justification, $FALSE);
    }

    public static final SubLObject destroy_proof_inference_answer_justifications_alt(SubLObject proof) {
	{
	    SubLObject proof_var = proof;
	    SubLObject set_contents_var = inference_datastructures_problem.problem_dependent_links(proof_supported_problem(proof_var));
	    SubLObject basis_object = set_contents.do_set_contents_basis_object(set_contents_var);
	    SubLObject state = NIL;
	    for (state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
		{
		    SubLObject link = set_contents.do_set_contents_next(basis_object, state);
		    if (NIL != set_contents.do_set_contents_element_validP(state, link)) {
			{
			    SubLObject inference = inference_datastructures_problem_link.problem_link_supported_inference(link);
			    if (NIL != inference) {
				{
				    SubLObject idx = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_id_index(inference);
				    if (NIL == do_id_index_empty_p(idx, $SKIP)) {
					{
					    SubLObject id = do_id_index_next_id(idx, NIL, NIL, NIL);
					    SubLObject state_var = do_id_index_next_state(idx, NIL, id, NIL);
					    SubLObject v_answer = NIL;
					    while (NIL != id) {
						v_answer = do_id_index_state_object(idx, $SKIP, id, state_var);
						if (NIL != do_id_index_id_and_object_validP(id, v_answer, $SKIP)) {
						    {
							SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justifications(v_answer);
							SubLObject justification = NIL;
							for (justification = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), justification = cdolist_list_var.first()) {
							    if (NIL != subl_promotions.memberP(proof_var, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_proofs(justification), symbol_function(EQ), UNPROVIDED)) {
								com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.destroy_inference_answer_justification(justification);
							    }
							}
						    }
						}
						id = do_id_index_next_id(idx, NIL, id, state_var);
						state_var = do_id_index_next_state(idx, NIL, id, state_var);
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject destroy_proof_inference_answer_justifications(final SubLObject proof) {
	final SubLObject set_contents_var = inference_datastructures_problem.problem_dependent_links(inference_datastructures_proof.proof_supported_problem(proof));
	SubLObject basis_object;
	SubLObject state;
	SubLObject link;
	SubLObject inference;
	SubLObject idx;
	SubLObject idx_$34;
	SubLObject vector_var;
	SubLObject backwardP_var;
	SubLObject length;
	SubLObject v_iteration;
	SubLObject id;
	SubLObject v_answer;
	SubLObject cdolist_list_var;
	SubLObject justification;
	SubLObject idx_$35;
	SubLObject cdohash_table;
	SubLObject id2;
	SubLObject v_answer2;
	Iterator cdohash_iterator;
	Map.Entry cdohash_entry;
	SubLObject cdolist_list_var2;
	SubLObject justification2;
	for (basis_object = do_set_contents_basis_object(set_contents_var), state = NIL, state = do_set_contents_initial_state(basis_object, set_contents_var); NIL == do_set_contents_doneP(basis_object, state); state = do_set_contents_update_state(state)) {
	    link = do_set_contents_next(basis_object, state);
	    if (NIL != do_set_contents_element_validP(state, link)) {
		inference = inference_datastructures_problem_link.problem_link_supported_inference(link);
		if (NIL != inference) {
		    idx = inference_datastructures_inference.inference_answer_id_index(inference);
		    if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
			idx_$34 = idx;
			if (NIL == id_index_dense_objects_empty_p(idx_$34, $SKIP)) {
			    vector_var = id_index_dense_objects(idx_$34);
			    backwardP_var = NIL;
			    for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
				id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
				v_answer = aref(vector_var, id);
				if ((NIL == id_index_tombstone_p(v_answer)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
				    if (NIL != id_index_tombstone_p(v_answer)) {
					v_answer = $SKIP;
				    }
				    cdolist_list_var = inference_datastructures_inference.inference_answer_justifications(v_answer);
				    justification = NIL;
				    justification = cdolist_list_var.first();
				    while (NIL != cdolist_list_var) {
					if (NIL != memberP(proof, inference_datastructures_inference.inference_answer_justification_proofs(justification), symbol_function(EQL), UNPROVIDED)) {
					    inference_datastructures_inference.destroy_inference_answer_justification(justification);
					}
					cdolist_list_var = cdolist_list_var.rest();
					justification = cdolist_list_var.first();
				    }
				}
			    }
			}
			idx_$35 = idx;
			if (NIL == id_index_sparse_objects_empty_p(idx_$35)) {
			    cdohash_table = id_index_sparse_objects(idx_$35);
			    id2 = NIL;
			    v_answer2 = NIL;
			    cdohash_iterator = getEntrySetIterator(cdohash_table);
			    try {
				while (iteratorHasNext(cdohash_iterator)) {
				    cdohash_entry = iteratorNextEntry(cdohash_iterator);
				    id2 = getEntryKey(cdohash_entry);
				    v_answer2 = getEntryValue(cdohash_entry);
				    cdolist_list_var2 = inference_datastructures_inference.inference_answer_justifications(v_answer2);
				    justification2 = NIL;
				    justification2 = cdolist_list_var2.first();
				    while (NIL != cdolist_list_var2) {
					if (NIL != memberP(proof, inference_datastructures_inference.inference_answer_justification_proofs(justification2), symbol_function(EQL), UNPROVIDED)) {
					    inference_datastructures_inference.destroy_inference_answer_justification(justification2);
					}
					cdolist_list_var2 = cdolist_list_var2.rest();
					justification2 = cdolist_list_var2.first();
				    }
				}
			    } finally {
				releaseEntrySetIterator(cdohash_iterator);
			    }
			}
		    }
		}
	    }
	}
	return NIL;
    }

    public static final SubLObject inference_time_per_answer_alt(SubLObject inference) {
	{
	    SubLObject total_time = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_cumulative_time(inference);
	    SubLObject answer_count = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_count(inference);
	    SubLObject time_per_answer = NIL;
	    if (total_time.isNumber() && (NIL != subl_promotions.positive_integer_p(answer_count))) {
		time_per_answer = divide(total_time, answer_count);
	    }
	    return time_per_answer;
	}
    }

    public static SubLObject inference_time_per_answer(final SubLObject inference) {
	final SubLObject total_time = inference_datastructures_inference.inference_cumulative_time(inference);
	final SubLObject answer_count = inference_datastructures_inference.inference_answer_count(inference);
	SubLObject time_per_answer = NIL;
	if (total_time.isNumber() && (NIL != positive_integer_p(answer_count))) {
	    time_per_answer = divide(total_time, answer_count);
	}
	return time_per_answer;
    }

    public static final SubLObject inference_steps_per_answer_alt(SubLObject inference) {
	{
	    SubLObject total_steps = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_cumulative_step_count(inference);
	    SubLObject answer_count = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_count(inference);
	    SubLObject steps_per_answer = NIL;
	    if (total_steps.isNumber() && (NIL != subl_promotions.positive_integer_p(answer_count))) {
		steps_per_answer = divide(total_steps, answer_count);
	    }
	    return steps_per_answer;
	}
    }

    public static SubLObject inference_steps_per_answer(final SubLObject inference) {
	final SubLObject total_steps = inference_datastructures_inference.inference_cumulative_step_count(inference);
	final SubLObject answer_count = inference_datastructures_inference.inference_answer_count(inference);
	SubLObject steps_per_answer = NIL;
	if (total_steps.isNumber() && (NIL != positive_integer_p(answer_count))) {
	    steps_per_answer = divide(total_steps, answer_count);
	}
	return steps_per_answer;
    }

    public static final SubLObject inference_wasted_time_after_last_answer_alt(SubLObject inference) {
	{
	    SubLObject total_time = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_cumulative_time(inference);
	    SubLObject last_answer_time = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_last_answer_elapsed_time(inference);
	    SubLObject wasted_time_after_last_answer = safe_difference(total_time, last_answer_time);
	    return wasted_time_after_last_answer;
	}
    }

    public static SubLObject inference_wasted_time_after_last_answer(final SubLObject inference) {
	final SubLObject total_time = inference_datastructures_inference.inference_cumulative_time(inference);
	final SubLObject last_answer_time = inference_datastructures_inference.inference_last_answer_elapsed_time(inference);
	final SubLObject wasted_time_after_last_answer = list_utilities.safe_difference(total_time, last_answer_time);
	return wasted_time_after_last_answer;
    }

    public static final SubLObject inference_latency_improvement_from_iterativity_alt(SubLObject inference) {
	{
	    SubLObject total_time = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_cumulative_time(inference);
	    SubLObject first_answer_time = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_first_answer_elapsed_time(inference);
	    SubLObject latency_improvement_from_iterativity = safe_difference(total_time, first_answer_time);
	    return latency_improvement_from_iterativity;
	}
    }

    public static SubLObject inference_latency_improvement_from_iterativity(final SubLObject inference) {
	final SubLObject total_time = inference_datastructures_inference.inference_cumulative_time(inference);
	final SubLObject first_answer_time = inference_datastructures_inference.inference_first_answer_elapsed_time(inference);
	final SubLObject latency_improvement_from_iterativity = list_utilities.safe_difference(total_time, first_answer_time);
	return latency_improvement_from_iterativity;
    }

    public static SubLObject inference_metrics(final SubLObject inference) {
	final SubLObject template = inference_datastructures_inference.inference_metrics_template(inference);
	final SubLObject metrics = list_utilities.tree_gather(template, symbol_function(inference_datastructures_inference.INFERENCE_QUERY_METRIC_P), UNPROVIDED, UNPROVIDED, UNPROVIDED);
	return inference_datastructures_inference.inference_compute_metrics_plist(inference, metrics);
    }

    public static final SubLObject inference_compute_metrics_alt(SubLObject inference) {
	{
	    SubLObject template = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_metrics_template(inference);
	    SubLObject metrics = tree_gather(template, symbol_function(INFERENCE_QUERY_METRIC_P), UNPROVIDED, UNPROVIDED, UNPROVIDED);
	    SubLObject v_answer = copy_tree(template);
	    SubLObject metrics_bindings = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_compute_metrics_alist(inference, metrics);
	    v_answer = nsublis(metrics_bindings, v_answer, symbol_function(EQ), UNPROVIDED);
	    return v_answer;
	}
    }

    public static SubLObject inference_compute_metrics(final SubLObject inference) {
	final SubLObject template = inference_datastructures_inference.inference_metrics_template(inference);
	final SubLObject metrics = list_utilities.tree_gather(template, symbol_function(inference_datastructures_inference.INFERENCE_QUERY_METRIC_P), UNPROVIDED, UNPROVIDED, UNPROVIDED);
	SubLObject v_answer = copy_tree(template);
	final SubLObject metrics_bindings = inference_datastructures_inference.inference_compute_metrics_alist(inference, metrics);
	v_answer = nsublis(metrics_bindings, v_answer, symbol_function(EQL), UNPROVIDED);
	return v_answer;
    }

    /**
     * Return a plist of METRIC VALUE pairs where
     * METRIC is a metric in METRICS and
     * VALUE is the result of that metric when computed on INFERENCE.
     */
    @LispMethod(comment = "Return a plist of METRIC VALUE pairs where\r\nMETRIC is a metric in METRICS and\r\nVALUE is the result of that metric when computed on INFERENCE.\nReturn a plist of METRIC VALUE pairs where\nMETRIC is a metric in METRICS and\nVALUE is the result of that metric when computed on INFERENCE.")
    public static final SubLObject inference_compute_metrics_plist_alt(SubLObject inference, SubLObject metrics) {
	{
	    SubLObject alist = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_compute_metrics_alist(inference, metrics);
	    alist = Sort.sort(alist, symbol_function($sym501$TERM__), symbol_function(CAR));
	    return alist_to_plist(alist);
	}
    }

    /**
     * Return a plist of METRIC VALUE pairs where
     * METRIC is a metric in METRICS and
     * VALUE is the result of that metric when computed on INFERENCE.
     */
    @LispMethod(comment = "Return a plist of METRIC VALUE pairs where\r\nMETRIC is a metric in METRICS and\r\nVALUE is the result of that metric when computed on INFERENCE.\nReturn a plist of METRIC VALUE pairs where\nMETRIC is a metric in METRICS and\nVALUE is the result of that metric when computed on INFERENCE.")
    public static SubLObject inference_compute_metrics_plist(final SubLObject inference, final SubLObject metrics) {
	SubLObject alist = inference_datastructures_inference.inference_compute_metrics_alist(inference, metrics);
	alist = Sort.sort(alist, symbol_function(inference_datastructures_inference.$sym530$TERM__), symbol_function(CAR));
	return list_utilities.alist_to_plist(alist);
    }

    /**
     * Return an alist of the form (METRIC . VALUE) where
     * METRIC is a metric in METRICS and
     * VALUE is the result of that metric when computed on INFERENCE.
     */
    @LispMethod(comment = "Return an alist of the form (METRIC . VALUE) where\r\nMETRIC is a metric in METRICS and\r\nVALUE is the result of that metric when computed on INFERENCE.\nReturn an alist of the form (METRIC . VALUE) where\nMETRIC is a metric in METRICS and\nVALUE is the result of that metric when computed on INFERENCE.")
    public static final SubLObject inference_compute_metrics_alist_alt(SubLObject inference, SubLObject metrics) {
	{
	    SubLObject store = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store(inference);
	    SubLObject metrics_bindings = NIL;
	    SubLObject answer_query_properties = NIL;
	    SubLObject cdolist_list_var = metrics;
	    SubLObject metric = NIL;
	    for (metric = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), metric = cdolist_list_var.first()) {
		{
		    SubLObject metric_object = inference_metrics.inference_metric_lookup(metric);
		    if (NIL != metric_object) {
			{
			    SubLObject result = inference_metrics.inference_metric_evaluate(metric_object, inference, store);
			    metrics_bindings = cons(cons(metric, result), metrics_bindings);
			}
		    } else {
			{
			    SubLObject pcase_var = metric;
			    if (pcase_var.eql($NEW_ROOT_TIMES)) {
				{
				    SubLObject strategy = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.simplest_inference_strategy(inference);
				    if (NIL != inference_balanced_tactician_datastructures.balanced_strategy_p(strategy)) {
					{
					    SubLObject new_root_times = inference_balanced_tactician_datastructures.balanced_strategy_historical_new_root_times(strategy);
					    metrics_bindings = cons(cons($NEW_ROOT_TIMES, new_root_times), metrics_bindings);
					}
				    }
				}
			    } else {
				if (pcase_var.eql($NEW_ROOT_COUNT)) {
				    {
					SubLObject strategy = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.simplest_inference_strategy(inference);
					if (NIL != inference_balanced_tactician_datastructures.balanced_strategy_p(strategy)) {
					    {
						SubLObject new_root_count = inference_balanced_tactician_datastructures.balanced_strategy_historical_new_root_count(strategy);
						metrics_bindings = cons(cons($NEW_ROOT_COUNT, new_root_count), metrics_bindings);
					    }
					}
				    }
				} else {
				    if (pcase_var.eql($PROBLEM_CREATION_TIMES)) {
					{
					    SubLObject problem_creation_times = leviathan.historical_problem_creation_times();
					    metrics_bindings = cons(cons($PROBLEM_CREATION_TIMES, problem_creation_times), metrics_bindings);
					}
				    } else {
					if (pcase_var.eql($INFERENCE_ANSWER_QUERY_PROPERTIES)) {
					    if (NIL == answer_query_properties) {
						answer_query_properties = inference_parameters.inference_compute_inference_answer_query_properties(inference);
					    }
					    metrics_bindings = cons(cons($INFERENCE_ANSWER_QUERY_PROPERTIES, answer_query_properties), metrics_bindings);
					} else {
					    if (pcase_var.eql($INFERENCE_STRONGEST_QUERY_PROPERTIES)) {
						if (NIL == answer_query_properties) {
						    answer_query_properties = inference_parameters.inference_compute_inference_answer_query_properties(inference);
						}
						if (NIL != answer_query_properties) {
						    metrics_bindings = cons(cons($INFERENCE_STRONGEST_QUERY_PROPERTIES, inference_parameters.compute_most_complete_query_properties(answer_query_properties)), metrics_bindings);
						}
					    } else {
						if (pcase_var.eql($INFERENCE_MOST_EFFICIENT_QUERY_PROPERTIES)) {
						    {
							SubLObject proof_query_properties = inference_parameters.inference_compute_proof_query_properties(inference);
							SubLObject strengthened_properties = inference_parameters.compute_most_efficient_query_properties(proof_query_properties);
							metrics_bindings = cons(cons($INFERENCE_MOST_EFFICIENT_QUERY_PROPERTIES, strengthened_properties), metrics_bindings);
						    }
						} else {
						    Errors.sublisp_break($str_alt509$time_to_implement_metric__S, new SubLObject[] { metric });
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	    return metrics_bindings;
	}
    }

    /**
     * Return an alist of the form (METRIC . VALUE) where
     * METRIC is a metric in METRICS and
     * VALUE is the result of that metric when computed on INFERENCE.
     */
    @LispMethod(comment = "Return an alist of the form (METRIC . VALUE) where\r\nMETRIC is a metric in METRICS and\r\nVALUE is the result of that metric when computed on INFERENCE.\nReturn an alist of the form (METRIC . VALUE) where\nMETRIC is a metric in METRICS and\nVALUE is the result of that metric when computed on INFERENCE.")
    public static SubLObject inference_compute_metrics_alist(final SubLObject inference, final SubLObject metrics) {
	final SubLObject store = inference_datastructures_inference.inference_problem_store(inference);
	SubLObject metrics_bindings = NIL;
	SubLObject answer_query_properties = NIL;
	SubLObject cdolist_list_var = metrics;
	SubLObject metric = NIL;
	metric = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    final SubLObject metric_object = inference_metrics.inference_metric_lookup(metric);
	    if (NIL != metric_object) {
		final SubLObject result = inference_metrics.inference_metric_evaluate(metric_object, inference, store);
		metrics_bindings = cons(cons(metric, result), metrics_bindings);
	    } else {
		final SubLObject pcase_var = metric;
		if (!pcase_var.eql(inference_datastructures_inference.$NEW_ROOT_TIMES)) {
		    if (!pcase_var.eql(inference_datastructures_inference.$NEW_ROOT_COUNT)) {
			if (pcase_var.eql(inference_datastructures_inference.$PROBLEM_CREATION_TIMES)) {
			    final SubLObject problem_creation_times = leviathan.historical_problem_creation_times();
			    metrics_bindings = cons(cons(inference_datastructures_inference.$PROBLEM_CREATION_TIMES, problem_creation_times), metrics_bindings);
			} else if (pcase_var.eql(inference_datastructures_inference.$INFERENCE_ANSWER_QUERY_PROPERTIES)) {
			    if (NIL == answer_query_properties) {
				answer_query_properties = inference_parameters.inference_compute_inference_answer_query_properties(inference);
			    }
			    metrics_bindings = cons(cons(inference_datastructures_inference.$INFERENCE_ANSWER_QUERY_PROPERTIES, answer_query_properties), metrics_bindings);
			} else if (pcase_var.eql(inference_datastructures_inference.$INFERENCE_STRONGEST_QUERY_PROPERTIES)) {
			    if (NIL == answer_query_properties) {
				answer_query_properties = inference_parameters.inference_compute_inference_answer_query_properties(inference);
			    }
			    if (NIL != answer_query_properties) {
				metrics_bindings = cons(cons(inference_datastructures_inference.$INFERENCE_STRONGEST_QUERY_PROPERTIES, inference_parameters.compute_most_complete_query_properties(answer_query_properties)), metrics_bindings);
			    }
			} else if (pcase_var.eql(inference_datastructures_inference.$INFERENCE_MOST_EFFICIENT_QUERY_PROPERTIES)) {
			    final SubLObject proof_query_properties = inference_parameters.inference_compute_proof_query_properties(inference);
			    final SubLObject strengthened_properties = inference_parameters.compute_most_efficient_query_properties(proof_query_properties);
			    metrics_bindings = cons(cons(inference_datastructures_inference.$INFERENCE_MOST_EFFICIENT_QUERY_PROPERTIES, strengthened_properties), metrics_bindings);
			} else if (pcase_var.eql($INFERENCE_IDS)) {
			    metrics_bindings = cons(cons($INFERENCE_IDS, list(inference_datastructures_problem_store.problem_store_suid(store), inference_datastructures_inference.inference_suid(inference))), metrics_bindings);
			} else {
			    Errors.sublisp_break(inference_datastructures_inference.$str539$time_to_implement_metric__S, new SubLObject[] { metric });
			}

		    }
		}
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    metric = cdolist_list_var.first();
	}
	return metrics_bindings;
    }

    /**
     * Return a list of all the rules used in some justification for some answer for INFERENCE.
     */
    @LispMethod(comment = "Return a list of all the rules used in some justification for some answer for INFERENCE.")
    public static final SubLObject inference_transformation_rules_in_answers_alt(SubLObject inference) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	{
	    SubLObject success_rules = set_contents.new_set_contents(ZERO_INTEGER, symbol_function(EQ));
	    SubLObject idx = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_id_index(inference);
	    if (NIL == do_id_index_empty_p(idx, $SKIP)) {
		{
		    SubLObject id = do_id_index_next_id(idx, NIL, NIL, NIL);
		    SubLObject state_var = do_id_index_next_state(idx, NIL, id, NIL);
		    SubLObject v_answer = NIL;
		    while (NIL != id) {
			v_answer = do_id_index_state_object(idx, $SKIP, id, state_var);
			if (NIL != do_id_index_id_and_object_validP(id, v_answer, $SKIP)) {
			    {
				SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justifications(v_answer);
				SubLObject justification = NIL;
				for (justification = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), justification = cdolist_list_var.first()) {
				    {
					SubLObject cdolist_list_var_12 = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_supports(justification);
					SubLObject rule = NIL;
					for (rule = cdolist_list_var_12.first(); NIL != cdolist_list_var_12; cdolist_list_var_12 = cdolist_list_var_12.rest(), rule = cdolist_list_var_12.first()) {
					    if (NIL != assertions_high.rule_assertionP(rule)) {
						success_rules = set_contents.set_contents_add(rule, success_rules, symbol_function(EQ));
					    }
					}
				    }
				}
			    }
			}
			id = do_id_index_next_id(idx, NIL, id, state_var);
			state_var = do_id_index_next_state(idx, NIL, id, state_var);
		    }
		}
	    }
	    return set_contents.set_contents_element_list(success_rules);
	}
    }

    /**
     * Return a list of all the rules used in some justification for some answer for INFERENCE.
     */
    @LispMethod(comment = "Return a list of all the rules used in some justification for some answer for INFERENCE.")
    public static SubLObject inference_transformation_rules_in_answers(final SubLObject inference) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	SubLObject success_rules = new_set_contents(ZERO_INTEGER, symbol_function(EQL));
	final SubLObject idx = inference_datastructures_inference.inference_answer_id_index(inference);
	if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
	    final SubLObject idx_$36 = idx;
	    if (NIL == id_index_dense_objects_empty_p(idx_$36, $SKIP)) {
		final SubLObject vector_var = id_index_dense_objects(idx_$36);
		final SubLObject backwardP_var = NIL;
		SubLObject length;
		SubLObject v_iteration;
		SubLObject id;
		SubLObject v_answer;
		SubLObject cdolist_list_var;
		SubLObject justification;
		SubLObject cdolist_list_var_$37;
		SubLObject rule;
		for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
		    id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
		    v_answer = aref(vector_var, id);
		    if ((NIL == id_index_tombstone_p(v_answer)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
			if (NIL != id_index_tombstone_p(v_answer)) {
			    v_answer = $SKIP;
			}
			cdolist_list_var = inference_datastructures_inference.inference_answer_justifications(v_answer);
			justification = NIL;
			justification = cdolist_list_var.first();
			while (NIL != cdolist_list_var) {
			    cdolist_list_var_$37 = inference_datastructures_inference.inference_answer_justification_supports(justification);
			    rule = NIL;
			    rule = cdolist_list_var_$37.first();
			    while (NIL != cdolist_list_var_$37) {
				if (NIL != rule_assertionP(rule)) {
				    success_rules = set_contents_add(rule, success_rules, symbol_function(EQL));
				}
				cdolist_list_var_$37 = cdolist_list_var_$37.rest();
				rule = cdolist_list_var_$37.first();
			    }
			    cdolist_list_var = cdolist_list_var.rest();
			    justification = cdolist_list_var.first();
			}
		    }
		}
	    }
	    final SubLObject idx_$37 = idx;
	    if (NIL == id_index_sparse_objects_empty_p(idx_$37)) {
		final SubLObject cdohash_table = id_index_sparse_objects(idx_$37);
		SubLObject id2 = NIL;
		SubLObject v_answer2 = NIL;
		final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
		try {
		    while (iteratorHasNext(cdohash_iterator)) {
			final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
			id2 = getEntryKey(cdohash_entry);
			v_answer2 = getEntryValue(cdohash_entry);
			SubLObject cdolist_list_var2 = inference_datastructures_inference.inference_answer_justifications(v_answer2);
			SubLObject justification2 = NIL;
			justification2 = cdolist_list_var2.first();
			while (NIL != cdolist_list_var2) {
			    SubLObject cdolist_list_var_$38 = inference_datastructures_inference.inference_answer_justification_supports(justification2);
			    SubLObject rule2 = NIL;
			    rule2 = cdolist_list_var_$38.first();
			    while (NIL != cdolist_list_var_$38) {
				if (NIL != rule_assertionP(rule2)) {
				    success_rules = set_contents_add(rule2, success_rules, symbol_function(EQL));
				}
				cdolist_list_var_$38 = cdolist_list_var_$38.rest();
				rule2 = cdolist_list_var_$38.first();
			    }
			    cdolist_list_var2 = cdolist_list_var2.rest();
			    justification2 = cdolist_list_var2.first();
			}
		    }
		} finally {
		    releaseEntrySetIterator(cdohash_iterator);
		}
	    }
	}
	return set_contents_element_list(success_rules);
    }

    public static final SubLObject inference_all_answer_proofs_alt(SubLObject inference) {
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_has_some_answerP(inference)) {
	    {
		SubLObject answer_proofs = set.new_set(symbol_function(EQ), UNPROVIDED);
		SubLObject idx = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_id_index(inference);
		if (NIL == do_id_index_empty_p(idx, $SKIP)) {
		    {
			SubLObject id = do_id_index_next_id(idx, NIL, NIL, NIL);
			SubLObject state_var = do_id_index_next_state(idx, NIL, id, NIL);
			SubLObject v_answer = NIL;
			while (NIL != id) {
			    v_answer = do_id_index_state_object(idx, $SKIP, id, state_var);
			    if (NIL != do_id_index_id_and_object_validP(id, v_answer, $SKIP)) {
				{
				    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justifications(v_answer);
				    SubLObject justification = NIL;
				    for (justification = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), justification = cdolist_list_var.first()) {
					{
					    SubLObject cdolist_list_var_13 = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_proofs(justification);
					    SubLObject proof = NIL;
					    for (proof = cdolist_list_var_13.first(); NIL != cdolist_list_var_13; cdolist_list_var_13 = cdolist_list_var_13.rest(), proof = cdolist_list_var_13.first()) {
						set.set_add(proof, answer_proofs);
					    }
					}
				    }
				}
			    }
			    id = do_id_index_next_id(idx, NIL, id, state_var);
			    state_var = do_id_index_next_state(idx, NIL, id, state_var);
			}
		    }
		}
		return Sort.sort(set.set_element_list(answer_proofs), symbol_function($sym397$_), symbol_function(PROOF_SUID));
	    }
	}
	return NIL;
    }

    public static SubLObject inference_all_answer_proofs(final SubLObject inference) {
	if (NIL != inference_datastructures_inference.inference_has_some_answerP(inference)) {
	    final SubLObject answer_proofs = new_set(symbol_function(EQL), UNPROVIDED);
	    final SubLObject idx = inference_datastructures_inference.inference_answer_id_index(inference);
	    if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
		final SubLObject idx_$40 = idx;
		if (NIL == id_index_dense_objects_empty_p(idx_$40, $SKIP)) {
		    final SubLObject vector_var = id_index_dense_objects(idx_$40);
		    final SubLObject backwardP_var = NIL;
		    SubLObject length;
		    SubLObject v_iteration;
		    SubLObject id;
		    SubLObject v_answer;
		    SubLObject cdolist_list_var;
		    SubLObject justification;
		    SubLObject cdolist_list_var_$41;
		    SubLObject proof;
		    for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
			id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
			v_answer = aref(vector_var, id);
			if ((NIL == id_index_tombstone_p(v_answer)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
			    if (NIL != id_index_tombstone_p(v_answer)) {
				v_answer = $SKIP;
			    }
			    cdolist_list_var = inference_datastructures_inference.inference_answer_justifications(v_answer);
			    justification = NIL;
			    justification = cdolist_list_var.first();
			    while (NIL != cdolist_list_var) {
				cdolist_list_var_$41 = inference_datastructures_inference.inference_answer_justification_proofs(justification);
				proof = NIL;
				proof = cdolist_list_var_$41.first();
				while (NIL != cdolist_list_var_$41) {
				    set_add(proof, answer_proofs);
				    cdolist_list_var_$41 = cdolist_list_var_$41.rest();
				    proof = cdolist_list_var_$41.first();
				}
				cdolist_list_var = cdolist_list_var.rest();
				justification = cdolist_list_var.first();
			    }
			}
		    }
		}
		final SubLObject idx_$41 = idx;
		if (NIL == id_index_sparse_objects_empty_p(idx_$41)) {
		    final SubLObject cdohash_table = id_index_sparse_objects(idx_$41);
		    SubLObject id2 = NIL;
		    SubLObject v_answer2 = NIL;
		    final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
		    try {
			while (iteratorHasNext(cdohash_iterator)) {
			    final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
			    id2 = getEntryKey(cdohash_entry);
			    v_answer2 = getEntryValue(cdohash_entry);
			    SubLObject cdolist_list_var2 = inference_datastructures_inference.inference_answer_justifications(v_answer2);
			    SubLObject justification2 = NIL;
			    justification2 = cdolist_list_var2.first();
			    while (NIL != cdolist_list_var2) {
				SubLObject cdolist_list_var_$42 = inference_datastructures_inference.inference_answer_justification_proofs(justification2);
				SubLObject proof2 = NIL;
				proof2 = cdolist_list_var_$42.first();
				while (NIL != cdolist_list_var_$42) {
				    set_add(proof2, answer_proofs);
				    cdolist_list_var_$42 = cdolist_list_var_$42.rest();
				    proof2 = cdolist_list_var_$42.first();
				}
				cdolist_list_var2 = cdolist_list_var2.rest();
				justification2 = cdolist_list_var2.first();
			    }
			}
		    } finally {
			releaseEntrySetIterator(cdohash_iterator);
		    }
		}
	    }
	    return Sort.sort(set_element_list(answer_proofs), symbol_function(inference_datastructures_inference.$sym419$_), symbol_function(inference_datastructures_inference.PROOF_SUID));
	}
	return NIL;
    }

    public static final SubLObject inference_all_answer_subproofs_alt(SubLObject inference) {
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_has_some_answerP(inference)) {
	    {
		SubLObject answer_subproofs = set.new_set(symbol_function(EQ), UNPROVIDED);
		SubLObject idx = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_id_index(inference);
		if (NIL == do_id_index_empty_p(idx, $SKIP)) {
		    {
			SubLObject id = do_id_index_next_id(idx, NIL, NIL, NIL);
			SubLObject state_var = do_id_index_next_state(idx, NIL, id, NIL);
			SubLObject v_answer = NIL;
			while (NIL != id) {
			    v_answer = do_id_index_state_object(idx, $SKIP, id, state_var);
			    if (NIL != do_id_index_id_and_object_validP(id, v_answer, $SKIP)) {
				{
				    SubLObject cdolist_list_var = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justifications(v_answer);
				    SubLObject justification = NIL;
				    for (justification = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), justification = cdolist_list_var.first()) {
					{
					    SubLObject cdolist_list_var_14 = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_justification_proofs(justification);
					    SubLObject proof = NIL;
					    for (proof = cdolist_list_var_14.first(); NIL != cdolist_list_var_14; cdolist_list_var_14 = cdolist_list_var_14.rest(), proof = cdolist_list_var_14.first()) {
						{
						    SubLObject cdolist_list_var_15 = all_proof_subproofs(proof);
						    SubLObject subproof = NIL;
						    for (subproof = cdolist_list_var_15.first(); NIL != cdolist_list_var_15; cdolist_list_var_15 = cdolist_list_var_15.rest(), subproof = cdolist_list_var_15.first()) {
							set.set_add(subproof, answer_subproofs);
						    }
						}
					    }
					}
				    }
				}
			    }
			    id = do_id_index_next_id(idx, NIL, id, state_var);
			    state_var = do_id_index_next_state(idx, NIL, id, state_var);
			}
		    }
		}
		return Sort.sort(set.set_element_list(answer_subproofs), symbol_function($sym397$_), symbol_function(PROOF_SUID));
	    }
	}
	return NIL;
    }

    public static SubLObject inference_all_answer_subproofs(final SubLObject inference) {
	if (NIL != inference_datastructures_inference.inference_has_some_answerP(inference)) {
	    SubLObject answer_subproofs = new_set_contents(ZERO_INTEGER, symbol_function(EQL));
	    final SubLObject idx = inference_datastructures_inference.inference_answer_id_index(inference);
	    if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
		final SubLObject idx_$44 = idx;
		if (NIL == id_index_dense_objects_empty_p(idx_$44, $SKIP)) {
		    final SubLObject vector_var = id_index_dense_objects(idx_$44);
		    final SubLObject backwardP_var = NIL;
		    SubLObject length;
		    SubLObject v_iteration;
		    SubLObject id;
		    SubLObject v_answer;
		    SubLObject cdolist_list_var;
		    SubLObject justification;
		    SubLObject cdolist_list_var_$45;
		    SubLObject proof;
		    SubLObject cdolist_list_var_$46;
		    SubLObject subproof;
		    for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
			id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
			v_answer = aref(vector_var, id);
			if ((NIL == id_index_tombstone_p(v_answer)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
			    if (NIL != id_index_tombstone_p(v_answer)) {
				v_answer = $SKIP;
			    }
			    cdolist_list_var = inference_datastructures_inference.inference_answer_justifications(v_answer);
			    justification = NIL;
			    justification = cdolist_list_var.first();
			    while (NIL != cdolist_list_var) {
				cdolist_list_var_$45 = inference_datastructures_inference.inference_answer_justification_proofs(justification);
				proof = NIL;
				proof = cdolist_list_var_$45.first();
				while (NIL != cdolist_list_var_$45) {
				    cdolist_list_var_$46 = inference_datastructures_proof.all_proof_subproofs(proof);
				    subproof = NIL;
				    subproof = cdolist_list_var_$46.first();
				    while (NIL != cdolist_list_var_$46) {
					answer_subproofs = set_contents_add(subproof, answer_subproofs, symbol_function(EQL));
					cdolist_list_var_$46 = cdolist_list_var_$46.rest();
					subproof = cdolist_list_var_$46.first();
				    }
				    cdolist_list_var_$45 = cdolist_list_var_$45.rest();
				    proof = cdolist_list_var_$45.first();
				}
				cdolist_list_var = cdolist_list_var.rest();
				justification = cdolist_list_var.first();
			    }
			}
		    }
		}
		final SubLObject idx_$45 = idx;
		if (NIL == id_index_sparse_objects_empty_p(idx_$45)) {
		    final SubLObject cdohash_table = id_index_sparse_objects(idx_$45);
		    SubLObject id2 = NIL;
		    SubLObject v_answer2 = NIL;
		    final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
		    try {
			while (iteratorHasNext(cdohash_iterator)) {
			    final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
			    id2 = getEntryKey(cdohash_entry);
			    v_answer2 = getEntryValue(cdohash_entry);
			    SubLObject cdolist_list_var2 = inference_datastructures_inference.inference_answer_justifications(v_answer2);
			    SubLObject justification2 = NIL;
			    justification2 = cdolist_list_var2.first();
			    while (NIL != cdolist_list_var2) {
				SubLObject cdolist_list_var_$47 = inference_datastructures_inference.inference_answer_justification_proofs(justification2);
				SubLObject proof2 = NIL;
				proof2 = cdolist_list_var_$47.first();
				while (NIL != cdolist_list_var_$47) {
				    SubLObject cdolist_list_var_$48 = inference_datastructures_proof.all_proof_subproofs(proof2);
				    SubLObject subproof2 = NIL;
				    subproof2 = cdolist_list_var_$48.first();
				    while (NIL != cdolist_list_var_$48) {
					answer_subproofs = set_contents_add(subproof2, answer_subproofs, symbol_function(EQL));
					cdolist_list_var_$48 = cdolist_list_var_$48.rest();
					subproof2 = cdolist_list_var_$48.first();
				    }
				    cdolist_list_var_$47 = cdolist_list_var_$47.rest();
				    proof2 = cdolist_list_var_$47.first();
				}
				cdolist_list_var2 = cdolist_list_var2.rest();
				justification2 = cdolist_list_var2.first();
			    }
			}
		    } finally {
			releaseEntrySetIterator(cdohash_iterator);
		    }
		}
	    }
	    return Sort.sort(set_contents_element_list(answer_subproofs), symbol_function(inference_datastructures_inference.$sym419$_), symbol_function(inference_datastructures_inference.PROOF_SUID));
	}
	return NIL;
    }

    // Internal Constants
    @LispMethod(comment = "Internal Constants")
    static private final SubLList $list_alt0 = list(makeKeyword("SIMPLEST"));

    static private final SubLList $list_alt3 = list(new SubLObject[] { makeSymbol("SUID"), makeSymbol("PROBLEM-STORE"), makeSymbol("FORWARD-PROPAGATE"), makeSymbol("INPUT-MT"), makeSymbol("INPUT-EL-QUERY"), makeSymbol("INPUT-NON-EXPLANATORY-EL-QUERY"), makeSymbol("INPUT-QUERY-PROPERTIES"),
	    makeSymbol("MT"), makeSymbol("EL-QUERY"), makeSymbol("EL-BINDINGS"), makeSymbol("HL-QUERY"), makeSymbol("EXPLANATORY-SUBQUERY"), makeSymbol("NON-EXPLANATORY-SUBQUERY"), makeSymbol("FREE-HL-VARS"), makeSymbol("HYPOTHETICAL-BINDINGS"), makeSymbol("ANSWER-ID-INDEX"),
	    makeSymbol("ANSWER-BINDINGS-INDEX"), makeSymbol("NEW-ANSWER-ID-START"), makeSymbol("NEW-ANSWER-JUSTIFICATIONS"), makeSymbol("STATUS"), makeSymbol("SUSPEND-STATUS"), makeSymbol("ROOT-LINK"), makeSymbol("RELEVANT-PROBLEMS"), makeSymbol("STRATEGY-SET"), makeSymbol("CONTROL-PROCESS"),
	    makeSymbol("INTERRUPTING-PROCESSES"), makeSymbol("MAX-TRANSFORMATION-DEPTH-REACHED"), makeSymbol("DISJUNCTION-FREE-EL-VARS-POLICY"), makeSymbol("RESULT-UNIQUENESS-CRITERION"), makeSymbol("ALLOW-HL-PREDICATE-TRANSFORMATION?"), makeSymbol("ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?"),
	    makeSymbol("ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?"), makeSymbol("ALLOW-INDETERMINATE-RESULTS?"), makeSymbol("ALLOWED-RULES"), makeSymbol("FORBIDDEN-RULES"), makeSymbol("ALLOWED-MODULES"), makeSymbol("ALLOW-ABNORMALITY-CHECKING?"), makeSymbol("TRANSITIVE-CLOSURE-MODE"),
	    makeSymbol("PROBLEM-STORE-PRIVATE?"), makeSymbol("CONTINUABLE?"), makeSymbol("BROWSABLE?"), makeSymbol("RETURN-TYPE"), makeSymbol("ANSWER-LANGUAGE"), makeSymbol("CACHE-RESULTS?"), makeSymbol("BLOCKING?"), makeSymbol("MAX-NUMBER"), makeSymbol("MAX-TIME"), makeSymbol("MAX-STEP"),
	    makeSymbol("MODE"), makeSymbol("FORWARD-MAX-TIME"), makeSymbol("MAX-PROOF-DEPTH"), makeSymbol("MAX-TRANSFORMATION-DEPTH"), makeSymbol("PROBABLY-APPROXIMATELY-DONE"), makeSymbol("METRICS-TEMPLATE"), makeSymbol("START-UNIVERSAL-TIME"), makeSymbol("START-INTERNAL-REAL-TIME"),
	    makeSymbol("END-INTERNAL-REAL-TIME"), makeSymbol("PAD-INTERNAL-REAL-TIME"), makeSymbol("CUMULATIVE-TIME"), makeSymbol("STEP-COUNT"), makeSymbol("CUMULATIVE-STEP-COUNT"), makeSymbol("EVENTS"), makeSymbol("HALT-CONDITIONS"), makeSymbol("ACCUMULATORS"), makeSymbol("PROOF-WATERMARK"),
	    makeSymbol("PROBLEM-WORKING-TIME-DATA"), makeSymbol("TYPE"), makeSymbol("DATA") });

    static private final SubLList $list_alt4 = list(new SubLObject[] { $SUID, makeKeyword("PROBLEM-STORE"), makeKeyword("FORWARD-PROPAGATE"), makeKeyword("INPUT-MT"), makeKeyword("INPUT-EL-QUERY"), makeKeyword("INPUT-NON-EXPLANATORY-EL-QUERY"), makeKeyword("INPUT-QUERY-PROPERTIES"),
	    makeKeyword("MT"), makeKeyword("EL-QUERY"), makeKeyword("EL-BINDINGS"), makeKeyword("HL-QUERY"), makeKeyword("EXPLANATORY-SUBQUERY"), makeKeyword("NON-EXPLANATORY-SUBQUERY"), makeKeyword("FREE-HL-VARS"), makeKeyword("HYPOTHETICAL-BINDINGS"), makeKeyword("ANSWER-ID-INDEX"),
	    makeKeyword("ANSWER-BINDINGS-INDEX"), makeKeyword("NEW-ANSWER-ID-START"), makeKeyword("NEW-ANSWER-JUSTIFICATIONS"), makeKeyword("STATUS"), makeKeyword("SUSPEND-STATUS"), makeKeyword("ROOT-LINK"), makeKeyword("RELEVANT-PROBLEMS"), makeKeyword("STRATEGY-SET"),
	    makeKeyword("CONTROL-PROCESS"), makeKeyword("INTERRUPTING-PROCESSES"), makeKeyword("MAX-TRANSFORMATION-DEPTH-REACHED"), makeKeyword("DISJUNCTION-FREE-EL-VARS-POLICY"), makeKeyword("RESULT-UNIQUENESS-CRITERION"), makeKeyword("ALLOW-HL-PREDICATE-TRANSFORMATION?"),
	    makeKeyword("ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?"), makeKeyword("ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?"), makeKeyword("ALLOW-INDETERMINATE-RESULTS?"), makeKeyword("ALLOWED-RULES"), makeKeyword("FORBIDDEN-RULES"), makeKeyword("ALLOWED-MODULES"),
	    makeKeyword("ALLOW-ABNORMALITY-CHECKING?"), makeKeyword("TRANSITIVE-CLOSURE-MODE"), makeKeyword("PROBLEM-STORE-PRIVATE?"), makeKeyword("CONTINUABLE?"), makeKeyword("BROWSABLE?"), makeKeyword("RETURN-TYPE"), makeKeyword("ANSWER-LANGUAGE"), makeKeyword("CACHE-RESULTS?"),
	    makeKeyword("BLOCKING?"), makeKeyword("MAX-NUMBER"), makeKeyword("MAX-TIME"), makeKeyword("MAX-STEP"), $MODE, makeKeyword("FORWARD-MAX-TIME"), makeKeyword("MAX-PROOF-DEPTH"), makeKeyword("MAX-TRANSFORMATION-DEPTH"), makeKeyword("PROBABLY-APPROXIMATELY-DONE"),
	    makeKeyword("METRICS-TEMPLATE"), makeKeyword("START-UNIVERSAL-TIME"), makeKeyword("START-INTERNAL-REAL-TIME"), makeKeyword("END-INTERNAL-REAL-TIME"), makeKeyword("PAD-INTERNAL-REAL-TIME"), makeKeyword("CUMULATIVE-TIME"), makeKeyword("STEP-COUNT"), makeKeyword("CUMULATIVE-STEP-COUNT"),
	    makeKeyword("EVENTS"), makeKeyword("HALT-CONDITIONS"), makeKeyword("ACCUMULATORS"), makeKeyword("PROOF-WATERMARK"), makeKeyword("PROBLEM-WORKING-TIME-DATA"), $TYPE, $DATA });

    static private final SubLList $list_alt5 = list(new SubLObject[] { makeSymbol("INFRNC-SUID"), makeSymbol("INFRNC-PROBLEM-STORE"), makeSymbol("INFRNC-FORWARD-PROPAGATE"), makeSymbol("INFRNC-INPUT-MT"), makeSymbol("INFRNC-INPUT-EL-QUERY"), makeSymbol("INFRNC-INPUT-NON-EXPLANATORY-EL-QUERY"),
	    makeSymbol("INFRNC-INPUT-QUERY-PROPERTIES"), makeSymbol("INFRNC-MT"), makeSymbol("INFRNC-EL-QUERY"), makeSymbol("INFRNC-EL-BINDINGS"), makeSymbol("INFRNC-HL-QUERY"), makeSymbol("INFRNC-EXPLANATORY-SUBQUERY"), makeSymbol("INFRNC-NON-EXPLANATORY-SUBQUERY"),
	    makeSymbol("INFRNC-FREE-HL-VARS"), makeSymbol("INFRNC-HYPOTHETICAL-BINDINGS"), makeSymbol("INFRNC-ANSWER-ID-INDEX"), makeSymbol("INFRNC-ANSWER-BINDINGS-INDEX"), makeSymbol("INFRNC-NEW-ANSWER-ID-START"), makeSymbol("INFRNC-NEW-ANSWER-JUSTIFICATIONS"), makeSymbol("INFRNC-STATUS"),
	    makeSymbol("INFRNC-SUSPEND-STATUS"), makeSymbol("INFRNC-ROOT-LINK"), makeSymbol("INFRNC-RELEVANT-PROBLEMS"), makeSymbol("INFRNC-STRATEGY-SET"), makeSymbol("INFRNC-CONTROL-PROCESS"), makeSymbol("INFRNC-INTERRUPTING-PROCESSES"), makeSymbol("INFRNC-MAX-TRANSFORMATION-DEPTH-REACHED"),
	    makeSymbol("INFRNC-DISJUNCTION-FREE-EL-VARS-POLICY"), makeSymbol("INFRNC-RESULT-UNIQUENESS-CRITERION"), makeSymbol("INFRNC-ALLOW-HL-PREDICATE-TRANSFORMATION?"), makeSymbol("INFRNC-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?"), makeSymbol("INFRNC-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?"),
	    makeSymbol("INFRNC-ALLOW-INDETERMINATE-RESULTS?"), makeSymbol("INFRNC-ALLOWED-RULES"), makeSymbol("INFRNC-FORBIDDEN-RULES"), makeSymbol("INFRNC-ALLOWED-MODULES"), makeSymbol("INFRNC-ALLOW-ABNORMALITY-CHECKING?"), makeSymbol("INFRNC-TRANSITIVE-CLOSURE-MODE"),
	    makeSymbol("INFRNC-PROBLEM-STORE-PRIVATE?"), makeSymbol("INFRNC-CONTINUABLE?"), makeSymbol("INFRNC-BROWSABLE?"), makeSymbol("INFRNC-RETURN-TYPE"), makeSymbol("INFRNC-ANSWER-LANGUAGE"), makeSymbol("INFRNC-CACHE-RESULTS?"), makeSymbol("INFRNC-BLOCKING?"), makeSymbol("INFRNC-MAX-NUMBER"),
	    makeSymbol("INFRNC-MAX-TIME"), makeSymbol("INFRNC-MAX-STEP"), makeSymbol("INFRNC-MODE"), makeSymbol("INFRNC-FORWARD-MAX-TIME"), makeSymbol("INFRNC-MAX-PROOF-DEPTH"), makeSymbol("INFRNC-MAX-TRANSFORMATION-DEPTH"), makeSymbol("INFRNC-PROBABLY-APPROXIMATELY-DONE"),
	    makeSymbol("INFRNC-METRICS-TEMPLATE"), makeSymbol("INFRNC-START-UNIVERSAL-TIME"), makeSymbol("INFRNC-START-INTERNAL-REAL-TIME"), makeSymbol("INFRNC-END-INTERNAL-REAL-TIME"), makeSymbol("INFRNC-PAD-INTERNAL-REAL-TIME"), makeSymbol("INFRNC-CUMULATIVE-TIME"),
	    makeSymbol("INFRNC-STEP-COUNT"), makeSymbol("INFRNC-CUMULATIVE-STEP-COUNT"), makeSymbol("INFRNC-EVENTS"), makeSymbol("INFRNC-HALT-CONDITIONS"), makeSymbol("INFRNC-ACCUMULATORS"), makeSymbol("INFRNC-PROOF-WATERMARK"), makeSymbol("INFRNC-PROBLEM-WORKING-TIME-DATA"),
	    makeSymbol("INFRNC-TYPE"), makeSymbol("INFRNC-DATA") });

    public static SubLObject inference_answer_justification_all_subproofs(final SubLObject answer_justification) {
	SubLObject answer_subproofs = new_set_contents(ZERO_INTEGER, symbol_function(EQL));
	SubLObject cdolist_list_var = inference_datastructures_inference.inference_answer_justification_proofs(answer_justification);
	SubLObject proof = NIL;
	proof = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    SubLObject cdolist_list_var_$50 = inference_datastructures_proof.all_proof_subproofs(proof);
	    SubLObject subproof = NIL;
	    subproof = cdolist_list_var_$50.first();
	    while (NIL != cdolist_list_var_$50) {
		answer_subproofs = set_contents_add(subproof, answer_subproofs, symbol_function(EQL));
		cdolist_list_var_$50 = cdolist_list_var_$50.rest();
		subproof = cdolist_list_var_$50.first();
	    }
	    cdolist_list_var = cdolist_list_var.rest();
	    proof = cdolist_list_var.first();
	}
	return Sort.sort(set_contents_element_list(answer_subproofs), symbol_function(inference_datastructures_inference.$sym419$_), symbol_function(inference_datastructures_inference.PROOF_SUID));
    }

    public static SubLObject inference_all_answer_supports(final SubLObject inference) {
	if (NIL != inference_datastructures_inference.inference_has_some_answerP(inference)) {
	    SubLObject supports = new_set_contents(ZERO_INTEGER, symbol_function(EQUAL));
	    final SubLObject idx = inference_datastructures_inference.inference_answer_id_index(inference);
	    if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
		final SubLObject idx_$51 = idx;
		if (NIL == id_index_dense_objects_empty_p(idx_$51, $SKIP)) {
		    final SubLObject vector_var = id_index_dense_objects(idx_$51);
		    final SubLObject backwardP_var = NIL;
		    SubLObject length;
		    SubLObject v_iteration;
		    SubLObject id;
		    SubLObject v_answer;
		    SubLObject cdolist_list_var;
		    SubLObject justification;
		    SubLObject cdolist_list_var_$52;
		    SubLObject support;
		    for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
			id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
			v_answer = aref(vector_var, id);
			if ((NIL == id_index_tombstone_p(v_answer)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
			    if (NIL != id_index_tombstone_p(v_answer)) {
				v_answer = $SKIP;
			    }
			    cdolist_list_var = inference_datastructures_inference.inference_answer_justifications(v_answer);
			    justification = NIL;
			    justification = cdolist_list_var.first();
			    while (NIL != cdolist_list_var) {
				cdolist_list_var_$52 = inference_datastructures_inference.inference_answer_justification_supports(justification);
				support = NIL;
				support = cdolist_list_var_$52.first();
				while (NIL != cdolist_list_var_$52) {
				    supports = set_contents_add(support, supports, symbol_function(EQUAL));
				    cdolist_list_var_$52 = cdolist_list_var_$52.rest();
				    support = cdolist_list_var_$52.first();
				}
				cdolist_list_var = cdolist_list_var.rest();
				justification = cdolist_list_var.first();
			    }
			}
		    }
		}
		final SubLObject idx_$52 = idx;
		if (NIL == id_index_sparse_objects_empty_p(idx_$52)) {
		    final SubLObject cdohash_table = id_index_sparse_objects(idx_$52);
		    SubLObject id2 = NIL;
		    SubLObject v_answer2 = NIL;
		    final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
		    try {
			while (iteratorHasNext(cdohash_iterator)) {
			    final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
			    id2 = getEntryKey(cdohash_entry);
			    v_answer2 = getEntryValue(cdohash_entry);
			    SubLObject cdolist_list_var2 = inference_datastructures_inference.inference_answer_justifications(v_answer2);
			    SubLObject justification2 = NIL;
			    justification2 = cdolist_list_var2.first();
			    while (NIL != cdolist_list_var2) {
				SubLObject cdolist_list_var_$53 = inference_datastructures_inference.inference_answer_justification_supports(justification2);
				SubLObject support2 = NIL;
				support2 = cdolist_list_var_$53.first();
				while (NIL != cdolist_list_var_$53) {
				    supports = set_contents_add(support2, supports, symbol_function(EQUAL));
				    cdolist_list_var_$53 = cdolist_list_var_$53.rest();
				    support2 = cdolist_list_var_$53.first();
				}
				cdolist_list_var2 = cdolist_list_var2.rest();
				justification2 = cdolist_list_var2.first();
			    }
			}
		    } finally {
			releaseEntrySetIterator(cdohash_iterator);
		    }
		}
	    }
	    return arguments.sort_supports(set_contents_element_list(supports));
	}
	return NIL;
    }

    static private final SubLList $list_alt6 = list(new SubLObject[] { makeSymbol("_CSETF-INFRNC-SUID"), makeSymbol("_CSETF-INFRNC-PROBLEM-STORE"), makeSymbol("_CSETF-INFRNC-FORWARD-PROPAGATE"), makeSymbol("_CSETF-INFRNC-INPUT-MT"), makeSymbol("_CSETF-INFRNC-INPUT-EL-QUERY"),
	    makeSymbol("_CSETF-INFRNC-INPUT-NON-EXPLANATORY-EL-QUERY"), makeSymbol("_CSETF-INFRNC-INPUT-QUERY-PROPERTIES"), makeSymbol("_CSETF-INFRNC-MT"), makeSymbol("_CSETF-INFRNC-EL-QUERY"), makeSymbol("_CSETF-INFRNC-EL-BINDINGS"), makeSymbol("_CSETF-INFRNC-HL-QUERY"),
	    makeSymbol("_CSETF-INFRNC-EXPLANATORY-SUBQUERY"), makeSymbol("_CSETF-INFRNC-NON-EXPLANATORY-SUBQUERY"), makeSymbol("_CSETF-INFRNC-FREE-HL-VARS"), makeSymbol("_CSETF-INFRNC-HYPOTHETICAL-BINDINGS"), makeSymbol("_CSETF-INFRNC-ANSWER-ID-INDEX"),
	    makeSymbol("_CSETF-INFRNC-ANSWER-BINDINGS-INDEX"), makeSymbol("_CSETF-INFRNC-NEW-ANSWER-ID-START"), makeSymbol("_CSETF-INFRNC-NEW-ANSWER-JUSTIFICATIONS"), makeSymbol("_CSETF-INFRNC-STATUS"), makeSymbol("_CSETF-INFRNC-SUSPEND-STATUS"), makeSymbol("_CSETF-INFRNC-ROOT-LINK"),
	    makeSymbol("_CSETF-INFRNC-RELEVANT-PROBLEMS"), makeSymbol("_CSETF-INFRNC-STRATEGY-SET"), makeSymbol("_CSETF-INFRNC-CONTROL-PROCESS"), makeSymbol("_CSETF-INFRNC-INTERRUPTING-PROCESSES"), makeSymbol("_CSETF-INFRNC-MAX-TRANSFORMATION-DEPTH-REACHED"),
	    makeSymbol("_CSETF-INFRNC-DISJUNCTION-FREE-EL-VARS-POLICY"), makeSymbol("_CSETF-INFRNC-RESULT-UNIQUENESS-CRITERION"), makeSymbol("_CSETF-INFRNC-ALLOW-HL-PREDICATE-TRANSFORMATION?"), makeSymbol("_CSETF-INFRNC-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?"),
	    makeSymbol("_CSETF-INFRNC-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?"), makeSymbol("_CSETF-INFRNC-ALLOW-INDETERMINATE-RESULTS?"), makeSymbol("_CSETF-INFRNC-ALLOWED-RULES"), makeSymbol("_CSETF-INFRNC-FORBIDDEN-RULES"), makeSymbol("_CSETF-INFRNC-ALLOWED-MODULES"),
	    makeSymbol("_CSETF-INFRNC-ALLOW-ABNORMALITY-CHECKING?"), makeSymbol("_CSETF-INFRNC-TRANSITIVE-CLOSURE-MODE"), makeSymbol("_CSETF-INFRNC-PROBLEM-STORE-PRIVATE?"), makeSymbol("_CSETF-INFRNC-CONTINUABLE?"), makeSymbol("_CSETF-INFRNC-BROWSABLE?"), makeSymbol("_CSETF-INFRNC-RETURN-TYPE"),
	    makeSymbol("_CSETF-INFRNC-ANSWER-LANGUAGE"), makeSymbol("_CSETF-INFRNC-CACHE-RESULTS?"), makeSymbol("_CSETF-INFRNC-BLOCKING?"), makeSymbol("_CSETF-INFRNC-MAX-NUMBER"), makeSymbol("_CSETF-INFRNC-MAX-TIME"), makeSymbol("_CSETF-INFRNC-MAX-STEP"), makeSymbol("_CSETF-INFRNC-MODE"),
	    makeSymbol("_CSETF-INFRNC-FORWARD-MAX-TIME"), makeSymbol("_CSETF-INFRNC-MAX-PROOF-DEPTH"), makeSymbol("_CSETF-INFRNC-MAX-TRANSFORMATION-DEPTH"), makeSymbol("_CSETF-INFRNC-PROBABLY-APPROXIMATELY-DONE"), makeSymbol("_CSETF-INFRNC-METRICS-TEMPLATE"),
	    makeSymbol("_CSETF-INFRNC-START-UNIVERSAL-TIME"), makeSymbol("_CSETF-INFRNC-START-INTERNAL-REAL-TIME"), makeSymbol("_CSETF-INFRNC-END-INTERNAL-REAL-TIME"), makeSymbol("_CSETF-INFRNC-PAD-INTERNAL-REAL-TIME"), makeSymbol("_CSETF-INFRNC-CUMULATIVE-TIME"),
	    makeSymbol("_CSETF-INFRNC-STEP-COUNT"), makeSymbol("_CSETF-INFRNC-CUMULATIVE-STEP-COUNT"), makeSymbol("_CSETF-INFRNC-EVENTS"), makeSymbol("_CSETF-INFRNC-HALT-CONDITIONS"), makeSymbol("_CSETF-INFRNC-ACCUMULATORS"), makeSymbol("_CSETF-INFRNC-PROOF-WATERMARK"),
	    makeSymbol("_CSETF-INFRNC-PROBLEM-WORKING-TIME-DATA"), makeSymbol("_CSETF-INFRNC-TYPE"), makeSymbol("_CSETF-INFRNC-DATA") });

    public static final SubLObject inference_all_answer_modules_alt(SubLObject inference) {
	{
	    SubLObject answer_subproofs = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_all_answer_subproofs(inference);
	    if (NIL != answer_subproofs) {
		{
		    SubLObject module_counts = dictionary.new_dictionary(symbol_function(EQ), UNPROVIDED);
		    SubLObject cdolist_list_var = answer_subproofs;
		    SubLObject proof = NIL;
		    for (proof = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), proof = cdolist_list_var.first()) {
			{
			    SubLObject module_name = NIL;
			    if (NIL != inference_worker.content_proof_p(proof)) {
				{
				    SubLObject hl_module = inference_worker.content_proof_hl_module(proof);
				    module_name = hl_module_name(hl_module);
				}
			    } else {
				if (NIL != inference_worker.logical_proof_p(proof)) {
				    module_name = inference_worker.structural_proof_type(proof);
				}
			    }
			    if (NIL != module_name) {
				dictionary_utilities.dictionary_increment(module_counts, module_name, UNPROVIDED);
			    }
			}
		    }
		    return Sort.sort(dictionary_utilities.dictionary_to_alist(module_counts), symbol_function($sym511$_), symbol_function(CDR));
		}
	    }
	}
	return NIL;
    }

    public static SubLObject inference_all_answer_modules(final SubLObject inference) {
	final SubLObject answer_subproofs = inference_datastructures_inference.inference_all_answer_subproofs(inference);
	if (NIL != answer_subproofs) {
	    final SubLObject module_counts = new_dictionary(symbol_function(EQL), UNPROVIDED);
	    SubLObject cdolist_list_var = answer_subproofs;
	    SubLObject proof = NIL;
	    proof = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		SubLObject module_name = NIL;
		if (NIL != inference_worker.content_proof_p(proof)) {
		    final SubLObject hl_module = inference_worker.content_proof_hl_module(proof);
		    module_name = inference_modules.hl_module_name(hl_module);
		} else if (NIL != inference_worker.logical_proof_p(proof)) {
		    module_name = inference_worker.structural_proof_type(proof);
		}

		if (NIL != module_name) {
		    dictionary_increment(module_counts, module_name, UNPROVIDED);
		}
		cdolist_list_var = cdolist_list_var.rest();
		proof = cdolist_list_var.first();
	    }
	    return Sort.sort(dictionary_to_alist(module_counts), symbol_function(inference_datastructures_inference.$sym541$_), symbol_function(CDR));
	}
	return NIL;
    }

    public static final SubLObject problem_relevant_to_some_strategyP_alt(SubLObject problem) {
	return sublisp_boolean(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.first_problem_relevant_strategy(problem));
    }

    public static SubLObject problem_relevant_to_some_strategyP(final SubLObject problem) {
	return list_utilities.sublisp_boolean(inference_datastructures_inference.first_problem_relevant_strategy(problem));
    }

    public static final SubLObject first_problem_relevant_strategy_alt(SubLObject problem) {
	{
	    SubLObject prob = problem;
	    SubLObject store = inference_datastructures_problem.problem_store(prob);
	    SubLObject idx = inference_datastructures_problem_store.problem_store_inference_id_index(store);
	    if (NIL == do_id_index_empty_p(idx, $SKIP)) {
		{
		    SubLObject id = do_id_index_next_id(idx, NIL, NIL, NIL);
		    SubLObject state_var = do_id_index_next_state(idx, NIL, id, NIL);
		    SubLObject inference = NIL;
		    while (NIL != id) {
			inference = do_id_index_state_object(idx, $SKIP, id, state_var);
			if (NIL != do_id_index_id_and_object_validP(id, inference, $SKIP)) {
			    if (NIL != inference_datastructures_problem.problem_relevant_to_inferenceP(prob, inference)) {
				{
				    SubLObject inference_var = inference;
				    SubLObject set_contents_var = set.do_set_internal(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_strategy_set(inference_var));
				    SubLObject basis_object = set_contents.do_set_contents_basis_object(set_contents_var);
				    SubLObject state = NIL;
				    for (state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
					{
					    SubLObject strategy = set_contents.do_set_contents_next(basis_object, state);
					    if (NIL != set_contents.do_set_contents_element_validP(state, strategy)) {
						return strategy;
					    }
					}
				    }
				}
			    }
			}
			id = do_id_index_next_id(idx, NIL, id, state_var);
			state_var = do_id_index_next_state(idx, NIL, id, state_var);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject first_problem_relevant_strategy(final SubLObject problem) {
	final SubLObject store = inference_datastructures_problem.problem_store(problem);
	final SubLObject idx = inference_datastructures_problem_store.problem_store_inference_id_index(store);
	if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
	    final SubLObject idx_$55 = idx;
	    if (NIL == id_index_dense_objects_empty_p(idx_$55, $SKIP)) {
		final SubLObject vector_var = id_index_dense_objects(idx_$55);
		final SubLObject backwardP_var = NIL;
		SubLObject length;
		SubLObject v_iteration;
		SubLObject id;
		SubLObject inference;
		SubLObject inference_var;
		SubLObject set_var;
		SubLObject set_contents_var;
		SubLObject basis_object;
		SubLObject state;
		SubLObject strategy;
		for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
		    id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
		    inference = aref(vector_var, id);
		    if ((NIL == id_index_tombstone_p(inference)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
			if (NIL != id_index_tombstone_p(inference)) {
			    inference = $SKIP;
			}
			if (NIL != inference_datastructures_problem.problem_relevant_to_inferenceP(problem, inference)) {
			    inference_var = inference;
			    set_var = inference_datastructures_inference.inference_strategy_set(inference_var);
			    set_contents_var = do_set_internal(set_var);
			    for (basis_object = do_set_contents_basis_object(set_contents_var), state = NIL, state = do_set_contents_initial_state(basis_object, set_contents_var); NIL == do_set_contents_doneP(basis_object, state); state = do_set_contents_update_state(state)) {
				strategy = do_set_contents_next(basis_object, state);
				if (NIL != do_set_contents_element_validP(state, strategy)) {
				    return strategy;
				}
			    }
			}
		    }
		}
	    }
	    final SubLObject idx_$56 = idx;
	    if (NIL == id_index_sparse_objects_empty_p(idx_$56)) {
		final SubLObject cdohash_table = id_index_sparse_objects(idx_$56);
		SubLObject id2 = NIL;
		SubLObject inference2 = NIL;
		final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
		try {
		    while (iteratorHasNext(cdohash_iterator)) {
			final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
			id2 = getEntryKey(cdohash_entry);
			inference2 = getEntryValue(cdohash_entry);
			if (NIL != inference_datastructures_problem.problem_relevant_to_inferenceP(problem, inference2)) {
			    final SubLObject inference_var2 = inference2;
			    final SubLObject set_var2 = inference_datastructures_inference.inference_strategy_set(inference_var2);
			    final SubLObject set_contents_var2 = do_set_internal(set_var2);
			    SubLObject basis_object2;
			    SubLObject state2;
			    SubLObject strategy2;
			    for (basis_object2 = do_set_contents_basis_object(set_contents_var2), state2 = NIL, state2 = do_set_contents_initial_state(basis_object2, set_contents_var2); NIL == do_set_contents_doneP(basis_object2, state2); state2 = do_set_contents_update_state(state2)) {
				strategy2 = do_set_contents_next(basis_object2, state2);
				if (NIL != do_set_contents_element_validP(state2, strategy2)) {
				    return strategy2;
				}
			    }
			}
		    }
		} finally {
		    releaseEntrySetIterator(cdohash_iterator);
		}
	    }
	}
	return NIL;
    }

    public static final SubLObject problem_or_inference_p_alt(SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_problem.problem_p(v_object)) || (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_p(v_object)));
    }

    public static SubLObject problem_or_inference_p(final SubLObject v_object) {
	return makeBoolean((NIL != inference_datastructures_problem.problem_p(v_object)) || (NIL != inference_datastructures_inference.inference_p(v_object)));
    }

    public static final SubLObject with_inference_problem_working_time_table_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt513);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject table_var = NIL;
		    SubLObject inference = NIL;
		    destructuring_bind_must_consp(current, datum, $list_alt513);
		    table_var = current.first();
		    current = current.rest();
		    destructuring_bind_must_consp(current, datum, $list_alt513);
		    inference = current.first();
		    current = current.rest();
		    if (NIL == current) {
			current = temp;
			{
			    SubLObject body = current;
			    SubLObject inference_var = $sym514$INFERENCE_VAR;
			    return list(CLET, list(list(inference_var, inference)), list(WITH_INFERENCE_PROBLEM_WORKING_TIME_LOCK, list(inference_var), listS(CLET, list(list(table_var, list(INFERENCE_PROBLEM_WORKING_TIME_TABLE, inference_var))), append(body, NIL))));
			}
		    } else {
			cdestructuring_bind_error(datum, $list_alt513);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject with_inference_problem_working_time_table(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list543);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject table_var = NIL;
	SubLObject inference = NIL;
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list543);
	table_var = current.first();
	current = current.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list543);
	inference = current.first();
	current = current.rest();
	if (NIL == current) {
	    final SubLObject body;
	    current = body = temp;
	    final SubLObject inference_var = inference_datastructures_inference.$sym544$INFERENCE_VAR;
	    return list(CLET, list(list(inference_var, inference)),
		    list(inference_datastructures_inference.WITH_INFERENCE_PROBLEM_WORKING_TIME_LOCK, list(inference_var), listS(CLET, list(list(table_var, list(inference_datastructures_inference.INFERENCE_PROBLEM_WORKING_TIME_TABLE, inference_var))), append(body, NIL))));
	}
	cdestructuring_bind_error(datum, inference_datastructures_inference.$list543);
	return NIL;
    }

    public static final SubLObject inference_problem_working_time_lock_alt(SubLObject inference) {
	{
	    SubLObject data = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_working_time_data(inference);
	    return data.first();
	}
    }

    public static SubLObject inference_problem_working_time_lock(final SubLObject inference) {
	final SubLObject data = inference_datastructures_inference.inference_problem_working_time_data(inference);
	return data.first();
    }

    /**
     * Should only be modified when holding the lock
     */
    @LispMethod(comment = "Should only be modified when holding the lock")
    public static final SubLObject inference_problem_working_time_table_alt(SubLObject inference) {
	{
	    SubLObject data = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_working_time_data(inference);
	    return second(data);
	}
    }

    /**
     * Should only be modified when holding the lock
     */
    @LispMethod(comment = "Should only be modified when holding the lock")
    public static SubLObject inference_problem_working_time_table(final SubLObject inference) {
	final SubLObject data = inference_datastructures_inference.inference_problem_working_time_data(inference);
	return second(data);
    }

    public static final SubLObject initialize_inference_problem_working_time_data_alt(SubLObject inference) {
	{
	    SubLObject lock = make_lock($str_alt517$Inference_problem_working_time_lo);
	    SubLObject table = make_hash_table($int$24, UNPROVIDED, UNPROVIDED);
	    SubLObject data = list(lock, table);
	    com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.set_inference_problem_working_time_data(inference, data);
	    return data;
	}
    }

    public static SubLObject initialize_inference_problem_working_time_data(final SubLObject inference) {
	final SubLObject lock = make_lock(inference_datastructures_inference.$str547$Inference_problem_working_time_lo);
	final SubLObject table = make_hash_table(inference_datastructures_inference.$int$24, UNPROVIDED, UNPROVIDED);
	final SubLObject data = list(lock, table);
	inference_datastructures_inference.set_inference_problem_working_time_data(inference, data);
	return data;
    }

    public static final SubLObject inference_note_tactic_executed_alt(SubLObject inference, SubLObject tactic) {
	{
	    SubLObject result = NIL;
	    if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_maintain_term_working_setP(inference)) {
		{
		    SubLObject problem = inference_datastructures_tactic.tactic_problem(tactic);
		    SubLObject now = get_internal_real_time();
		    SubLObject inference_var = inference;
		    SubLObject lock = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_working_time_lock(inference_var);
		    SubLObject release = NIL;
		    try {
			release = seize_lock(lock);
			{
			    SubLObject table = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_working_time_table(inference_var);
			    SubLObject already_being_worked_on = gethash_without_values(problem, table, UNPROVIDED);
			    if (NIL == already_being_worked_on) {
				sethash(problem, table, now);
				result = T;
			    }
			}
		    } finally {
			if (NIL != release) {
			    release_lock(lock);
			}
		    }
		}
	    }
	    return result;
	}
    }

    public static SubLObject inference_note_tactic_executed(final SubLObject inference, final SubLObject tactic) {
	SubLObject result = NIL;
	if (NIL != inference_datastructures_inference.inference_maintain_term_working_setP(inference)) {
	    final SubLObject problem = inference_datastructures_tactic.tactic_problem(tactic);
	    final SubLObject now = get_internal_real_time();
	    final SubLObject lock = inference_datastructures_inference.inference_problem_working_time_lock(inference);
	    SubLObject release = NIL;
	    try {
		release = seize_lock(lock);
		final SubLObject table = inference_datastructures_inference.inference_problem_working_time_table(inference);
		final SubLObject already_being_worked_on = gethash_without_values(problem, table, UNPROVIDED);
		if (NIL == already_being_worked_on) {
		    sethash(problem, table, now);
		    result = T;
		}
	    } finally {
		if (NIL != release) {
		    release_lock(lock);
		}
	    }
	}
	return result;
    }

    static private final SubLSymbol $sym116$INFRNC_ALLOW_HL_PREDICATE_TRANSFORMATION_ = makeSymbol("INFRNC-ALLOW-HL-PREDICATE-TRANSFORMATION?");

    static private final SubLSymbol $sym117$_CSETF_INFRNC_ALLOW_HL_PREDICATE_TRANSFORMATION_ = makeSymbol("_CSETF-INFRNC-ALLOW-HL-PREDICATE-TRANSFORMATION?");

    static private final SubLSymbol $sym118$INFRNC_ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_ = makeSymbol("INFRNC-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?");

    static private final SubLSymbol $sym119$_CSETF_INFRNC_ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_ = makeSymbol("_CSETF-INFRNC-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?");

    static private final SubLSymbol $sym120$INFRNC_ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_ = makeSymbol("INFRNC-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?");

    static private final SubLSymbol $sym121$_CSETF_INFRNC_ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_ = makeSymbol("_CSETF-INFRNC-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?");

    static private final SubLSymbol $sym122$INFRNC_ALLOW_INDETERMINATE_RESULTS_ = makeSymbol("INFRNC-ALLOW-INDETERMINATE-RESULTS?");

    public static final SubLObject inference_note_problem_pending_alt(SubLObject inference, SubLObject problem) {
	{
	    SubLObject result = NIL;
	    if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_maintain_term_working_setP(inference)) {
		{
		    SubLObject inference_var = inference;
		    SubLObject lock = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_working_time_lock(inference_var);
		    SubLObject release = NIL;
		    try {
			release = seize_lock(lock);
			{
			    SubLObject table = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_working_time_table(inference_var);
			    remhash(problem, table);
			    result = T;
			}
		    } finally {
			if (NIL != release) {
			    release_lock(lock);
			}
		    }
		}
	    }
	    return result;
	}
    }

    public static SubLObject inference_note_problem_pending(final SubLObject inference, final SubLObject problem) {
	SubLObject result = NIL;
	if (NIL != inference_datastructures_inference.inference_maintain_term_working_setP(inference)) {
	    final SubLObject lock = inference_datastructures_inference.inference_problem_working_time_lock(inference);
	    SubLObject release = NIL;
	    try {
		release = seize_lock(lock);
		final SubLObject table = inference_datastructures_inference.inference_problem_working_time_table(inference);
		remhash(problem, table);
		result = T;
	    } finally {
		if (NIL != release) {
		    release_lock(lock);
		}
	    }
	}
	return result;
    }

    static private final SubLSymbol $sym123$_CSETF_INFRNC_ALLOW_INDETERMINATE_RESULTS_ = makeSymbol("_CSETF-INFRNC-ALLOW-INDETERMINATE-RESULTS?");

    public static final SubLObject signal_inference_eventP_alt(SubLObject inference, SubLObject event_type) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(event_type, INFERENCE_EVENT_TYPE_P);
	return member_eqP(event_type, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_events(inference));
    }

    public static SubLObject signal_inference_eventP(final SubLObject inference, final SubLObject event_type) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != inference_datastructures_enumerated_types.inference_event_type_p(event_type) : "! inference_datastructures_enumerated_types.inference_event_type_p(event_type) "
		+ ("inference_datastructures_enumerated_types.inference_event_type_p(event_type) " + "CommonSymbols.NIL != inference_datastructures_enumerated_types.inference_event_type_p(event_type) ") + event_type;
	return list_utilities.member_eqP(event_type, inference_datastructures_inference.inference_events(inference));
    }

    static private final SubLSymbol $sym130$INFRNC_ALLOW_ABNORMALITY_CHECKING_ = makeSymbol("INFRNC-ALLOW-ABNORMALITY-CHECKING?");

    static private final SubLSymbol $sym131$_CSETF_INFRNC_ALLOW_ABNORMALITY_CHECKING_ = makeSymbol("_CSETF-INFRNC-ALLOW-ABNORMALITY-CHECKING?");

    static private final SubLSymbol $sym134$INFRNC_PROBLEM_STORE_PRIVATE_ = makeSymbol("INFRNC-PROBLEM-STORE-PRIVATE?");

    static private final SubLSymbol $sym135$_CSETF_INFRNC_PROBLEM_STORE_PRIVATE_ = makeSymbol("_CSETF-INFRNC-PROBLEM-STORE-PRIVATE?");

    /**
     * Called immediately after the creation of NEW-ANSWER
     */
    @LispMethod(comment = "Called immediately after the creation of NEW-ANSWER")
    public static final SubLObject possibly_signal_new_inference_answer_alt(SubLObject inference, SubLObject new_answer) {
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.signal_inference_eventP(inference, $NEW_ANSWER)) {
	    return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.signal_new_inference_answer(inference, new_answer);
	}
	return NIL;
    }

    /**
     * Called immediately after the creation of NEW-ANSWER
     */
    @LispMethod(comment = "Called immediately after the creation of NEW-ANSWER")
    public static SubLObject possibly_signal_new_inference_answer(final SubLObject inference, final SubLObject new_answer) {
	if (NIL != inference_datastructures_inference.signal_inference_eventP(inference, $NEW_ANSWER)) {
	    return inference_datastructures_inference.signal_new_inference_answer(inference, new_answer);
	}
	return NIL;
    }

    static private final SubLSymbol $sym136$INFRNC_CONTINUABLE_ = makeSymbol("INFRNC-CONTINUABLE?");

    static private final SubLSymbol $sym137$_CSETF_INFRNC_CONTINUABLE_ = makeSymbol("_CSETF-INFRNC-CONTINUABLE?");

    public static final SubLObject signal_new_inference_answer_alt(SubLObject inference, SubLObject new_answer) {
	{
	    SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store(inference));
	    SubLObject inference_id = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_suid(inference);
	    SubLObject new_answer_id = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_answer_suid(new_answer);
	    return inference_event.post_inference_new_answer_event(store_id, inference_id, new_answer_id);
	}
    }

    public static SubLObject signal_new_inference_answer(final SubLObject inference, final SubLObject new_answer) {
	final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(inference_datastructures_inference.inference_problem_store(inference));
	final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
	final SubLObject new_answer_id = inference_datastructures_inference.inference_answer_suid(new_answer);
	return post_inference_new_answer_event(store_id, inference_id, new_answer_id);
    }

    static private final SubLSymbol $sym138$INFRNC_BROWSABLE_ = makeSymbol("INFRNC-BROWSABLE?");

    static private final SubLSymbol $sym139$_CSETF_INFRNC_BROWSABLE_ = makeSymbol("_CSETF-INFRNC-BROWSABLE?");

    /**
     * Called immediately after the status change
     */
    @LispMethod(comment = "Called immediately after the status change")
    public static final SubLObject possibly_signal_inference_status_change_alt(SubLObject inference) {
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.signal_inference_eventP(inference, $STATUS_CHANGE)) {
	    return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.signal_inference_status_change(inference, com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_status(inference));
	}
	return NIL;
    }

    /**
     * Called immediately after the status change
     */
    @LispMethod(comment = "Called immediately after the status change")
    public static SubLObject possibly_signal_inference_status_change(final SubLObject inference) {
	if (NIL != inference_datastructures_inference.signal_inference_eventP(inference, $STATUS_CHANGE)) {
	    return inference_datastructures_inference.signal_inference_status_change(inference, inference_datastructures_inference.inference_status(inference));
	}
	return NIL;
    }

    static private final SubLSymbol $sym144$INFRNC_CACHE_RESULTS_ = makeSymbol("INFRNC-CACHE-RESULTS?");

    static private final SubLSymbol $sym145$_CSETF_INFRNC_CACHE_RESULTS_ = makeSymbol("_CSETF-INFRNC-CACHE-RESULTS?");

    public static final SubLObject signal_inference_status_change_alt(SubLObject inference, SubLObject new_status) {
	{
	    SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store(inference));
	    SubLObject inference_id = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_suid(inference);
	    return inference_event.post_inference_status_change_event(store_id, inference_id, new_status);
	}
    }

    public static SubLObject signal_inference_status_change(final SubLObject inference, final SubLObject new_status) {
	final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(inference_datastructures_inference.inference_problem_store(inference));
	final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
	return post_inference_status_change_event(store_id, inference_id, new_status);
    }

    static private final SubLSymbol $sym146$INFRNC_BLOCKING_ = makeSymbol("INFRNC-BLOCKING?");

    static private final SubLSymbol $sym147$_CSETF_INFRNC_BLOCKING_ = makeSymbol("_CSETF-INFRNC-BLOCKING?");

    public static final SubLObject possibly_signal_inference_new_transformation_depth_reached_alt(SubLObject inference, SubLObject new_depth) {
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.signal_inference_eventP(inference, $NEW_TRANSFORMATION_DEPTH_REACHED)) {
	    return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.signal_inference_new_transformation_depth_reached(inference, new_depth);
	}
	return NIL;
    }

    public static SubLObject possibly_signal_inference_new_transformation_depth_reached(final SubLObject inference, final SubLObject new_depth) {
	if (NIL != inference_datastructures_inference.signal_inference_eventP(inference, inference_datastructures_inference.$NEW_TRANSFORMATION_DEPTH_REACHED)) {
	    return inference_datastructures_inference.signal_inference_new_transformation_depth_reached(inference, new_depth);
	}
	return NIL;
    }

    public static final SubLObject signal_inference_new_transformation_depth_reached_alt(SubLObject inference, SubLObject new_depth) {
	{
	    SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_problem_store(inference));
	    SubLObject inference_id = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_suid(inference);
	    return inference_event.post_inference_new_transformation_depth_reached_event(store_id, inference_id, new_depth);
	}
    }

    public static SubLObject signal_inference_new_transformation_depth_reached(final SubLObject inference, final SubLObject new_depth) {
	final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(inference_datastructures_inference.inference_problem_store(inference));
	final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
	return post_inference_new_transformation_depth_reached_event(store_id, inference_id, new_depth);
    }

    public static final SubLObject inference_within_sksi_query_execution_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    SubLObject body = current;
	    SubLObject inferences_var = $sym521$INFERENCES_VAR;
	    SubLObject inference_var = $sym522$INFERENCE_VAR;
	    SubLObject tactic_var = $sym523$TACTIC_VAR;
	    SubLObject start_time = $sym524$START_TIME;
	    return list(CLET, list(bq_cons(inferences_var, $list_alt525), bq_cons(inference_var, $list_alt526), bq_cons(tactic_var, $list_alt527), start_time),
		    list(CUNWIND_PROTECT,
			    listS(PROGN, list(POSSIBLY_SIGNAL_SKSI_QUERY_START, inference_var, tactic_var), list(CSETQ, start_time, listS(INFERENCE_TIME_SO_FAR, inference_var, $list_alt532)), list(POSSIBLY_ADD_INFERENCE_SKSI_QUERY_START_TIME, inferences_var, start_time), append(body, NIL)),
			    list(POSSIBLY_SIGNAL_SKSI_QUERY_END, inference_var, tactic_var), list(POSSIBLY_INCREMENT_INFERENCE_SKSI_QUERY_TOTAL_TIME, inferences_var, list($sym536$_, listS(INFERENCE_TIME_SO_FAR, inference_var, $list_alt532), start_time))));
	}
    }

    public static SubLObject inference_within_sksi_query_execution(final SubLObject macroform, final SubLObject environment) {
	final SubLObject datum = macroform.rest();
	final SubLObject body;
	final SubLObject current = body = datum;
	final SubLObject inferences_var = inference_datastructures_inference.$sym551$INFERENCES_VAR;
	final SubLObject inference_var = inference_datastructures_inference.$sym552$INFERENCE_VAR;
	final SubLObject tactic_var = inference_datastructures_inference.$sym553$TACTIC_VAR;
	final SubLObject start_time = inference_datastructures_inference.$sym554$START_TIME;
	return list(CLET, list(bq_cons(inferences_var, inference_datastructures_inference.$list555), bq_cons(inference_var, inference_datastructures_inference.$list556), bq_cons(tactic_var, inference_datastructures_inference.$list557), start_time),
		list(CUNWIND_PROTECT,
			listS(PROGN, list(inference_datastructures_inference.POSSIBLY_SIGNAL_SKSI_QUERY_START, inference_var, tactic_var), list(CSETQ, start_time, listS(inference_datastructures_inference.INFERENCE_TIME_SO_FAR, inference_var, inference_datastructures_inference.$list562)),
				list(inference_datastructures_inference.POSSIBLY_ADD_INFERENCE_SKSI_QUERY_START_TIME, inferences_var, start_time), append(body, NIL)),
			list(inference_datastructures_inference.POSSIBLY_SIGNAL_SKSI_QUERY_END, inference_var, tactic_var), list(inference_datastructures_inference.POSSIBLY_INCREMENT_INFERENCE_SKSI_QUERY_TOTAL_TIME, inferences_var,
				list(inference_datastructures_inference.$sym566$_, listS(inference_datastructures_inference.INFERENCE_TIME_SO_FAR, inference_var, inference_datastructures_inference.$list562), start_time))));
    }

    public static final SubLObject possibly_signal_sksi_query_start_alt(SubLObject inference, SubLObject tactic) {
	if ((NIL != inference) && (NIL != tactic)) {
	    {
		SubLObject start_time = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_time_so_far(inference, NIL);
		SubLObject v_properties = list($START_TIME, start_time);
		return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.possibly_signal_sksi_query(inference, tactic, $START, v_properties);
	    }
	}
	return NIL;
    }

    public static SubLObject possibly_signal_sksi_query_start(final SubLObject inference, final SubLObject tactic) {
	if ((NIL != inference) && (NIL != tactic)) {
	    final SubLObject start_time = inference_datastructures_inference.inference_time_so_far(inference, NIL);
	    final SubLObject v_properties = list($START_TIME, start_time);
	    return inference_datastructures_inference.possibly_signal_sksi_query(inference, tactic, $START, v_properties);
	}
	return NIL;
    }

    public static final SubLObject possibly_signal_sksi_query_end_alt(SubLObject inference, SubLObject tactic) {
	if ((NIL != inference) && (NIL != tactic)) {
	    {
		SubLObject end_time = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_time_so_far(inference, NIL);
		SubLObject v_properties = list($END_TIME, end_time);
		return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.possibly_signal_sksi_query(inference, tactic, $END, v_properties);
	    }
	}
	return NIL;
    }

    public static SubLObject possibly_signal_sksi_query_end(final SubLObject inference, final SubLObject tactic) {
	if ((NIL != inference) && (NIL != tactic)) {
	    final SubLObject end_time = inference_datastructures_inference.inference_time_so_far(inference, NIL);
	    final SubLObject v_properties = list($END_TIME, end_time);
	    return inference_datastructures_inference.possibly_signal_sksi_query(inference, tactic, $END, v_properties);
	}
	return NIL;
    }

    public static final SubLObject possibly_increment_inference_sksi_query_total_time_alt(SubLObject inferences, SubLObject elapsed_seconds) {
	{
	    final SubLThread thread = SubLProcess.currentSubLThread();
	    if ((NIL != inferences) && (NIL != elapsed_seconds)) {
		if (NIL != sksi_infrastructure_macros.sksi_profiling_onP()) {
		    sksi_infrastructure_macros.$sksi_sql_query_time$.setDynamicValue(add(sksi_infrastructure_macros.$sksi_sql_query_time$.getDynamicValue(thread), elapsed_seconds), thread);
		    sksi_infrastructure_macros.$sksi_sql_query_count$.setDynamicValue(add(sksi_infrastructure_macros.$sksi_sql_query_count$.getDynamicValue(thread), ONE_INTEGER), thread);
		}
		{
		    SubLObject cdolist_list_var = inferences;
		    SubLObject inference = NIL;
		    for (inference = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), inference = cdolist_list_var.first()) {
			if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_computes_metricP(inference, $SKSI_QUERY_TOTAL_TIME)) {
			    return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.increment_inference_sksi_query_total_time(inference, elapsed_seconds);
			}
		    }
		}
	    }
	    return NIL;
	}
    }

    public static SubLObject possibly_increment_inference_sksi_query_total_time(final SubLObject inferences, final SubLObject elapsed_seconds) {
	final SubLThread thread = SubLProcess.currentSubLThread();
	if ((NIL != inferences) && (NIL != elapsed_seconds)) {
	    if (NIL != sksi_profiling_onP()) {
		$sksi_sql_query_time$.setDynamicValue(add($sksi_sql_query_time$.getDynamicValue(thread), elapsed_seconds), thread);
		$sksi_sql_query_count$.setDynamicValue(add($sksi_sql_query_count$.getDynamicValue(thread), ONE_INTEGER), thread);
	    }
	    SubLObject cdolist_list_var = inferences;
	    SubLObject inference = NIL;
	    inference = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		if (NIL != inference_datastructures_inference.inference_computes_metricP(inference, inference_datastructures_inference.$SKSI_QUERY_TOTAL_TIME)) {
		    return inference_datastructures_inference.increment_inference_sksi_query_total_time(inference, elapsed_seconds);
		}
		cdolist_list_var = cdolist_list_var.rest();
		inference = cdolist_list_var.first();
	    }
	}
	return NIL;
    }

    public static final SubLObject possibly_add_inference_sksi_query_start_time_alt(SubLObject inferences, SubLObject elapsed_seconds) {
	if ((NIL != inferences) && (NIL != elapsed_seconds)) {
	    if (NIL != sksi_infrastructure_macros.sksi_profiling_onP()) {
	    }
	    {
		SubLObject cdolist_list_var = inferences;
		SubLObject inference = NIL;
		for (inference = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), inference = cdolist_list_var.first()) {
		    if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_computes_metricP(inference, $SKSI_QUERY_START_TIMES)) {
			return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.add_inference_sksi_query_start_time(inference, elapsed_seconds);
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject possibly_add_inference_sksi_query_start_time(final SubLObject inferences, final SubLObject elapsed_seconds) {
	if ((NIL != inferences) && (NIL != elapsed_seconds)) {
	    if (NIL != sksi_profiling_onP()) {
	    }
	    SubLObject cdolist_list_var = inferences;
	    SubLObject inference = NIL;
	    inference = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		if (NIL != inference_datastructures_inference.inference_computes_metricP(inference, inference_datastructures_inference.$SKSI_QUERY_START_TIMES)) {
		    return inference_datastructures_inference.add_inference_sksi_query_start_time(inference, elapsed_seconds);
		}
		cdolist_list_var = cdolist_list_var.rest();
		inference = cdolist_list_var.first();
	    }
	}
	return NIL;
    }

    public static final SubLObject possibly_signal_sksi_query_alt(SubLObject inference, SubLObject tactic, SubLObject status, SubLObject v_properties) {
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.signal_inference_eventP(inference, $SKSI_QUERY)) {
	    return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.signal_sksi_query(inference, tactic, status, v_properties);
	}
	return NIL;
    }

    public static SubLObject possibly_signal_sksi_query(final SubLObject inference, final SubLObject tactic, final SubLObject status, SubLObject v_properties) {
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	if (NIL != inference_datastructures_inference.signal_inference_eventP(inference, $SKSI_QUERY)) {
	    return inference_datastructures_inference.signal_sksi_query(inference, tactic, status, v_properties);
	}
	return NIL;
    }

    public static final SubLObject signal_sksi_query_alt(SubLObject inference, SubLObject tactic, SubLObject status, SubLObject v_properties) {
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	{
	    SubLObject problem = inference_datastructures_tactic.tactic_problem(tactic);
	    SubLObject store = inference_datastructures_problem.problem_store(problem);
	    SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
	    SubLObject inference_id = com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_suid(inference);
	    SubLObject problem_id = inference_datastructures_problem.problem_suid(problem);
	    SubLObject tactic_id = inference_datastructures_tactic.tactic_suid(tactic);
	    return inference_event.post_sksi_query_event(store_id, inference_id, problem_id, tactic_id, status, v_properties);
	}
    }

    public static SubLObject signal_sksi_query(final SubLObject inference, final SubLObject tactic, final SubLObject status, SubLObject v_properties) {
	if (v_properties == UNPROVIDED) {
	    v_properties = NIL;
	}
	final SubLObject problem = inference_datastructures_tactic.tactic_problem(tactic);
	final SubLObject store = inference_datastructures_problem.problem_store(problem);
	final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
	final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
	final SubLObject problem_id = inference_datastructures_problem.problem_suid(problem);
	final SubLObject tactic_id = inference_datastructures_tactic.tactic_suid(tactic);
	return post_sksi_query_event(store_id, inference_id, problem_id, tactic_id, status, v_properties);
    }

    public static final SubLSymbol $kw223$ALLOW_HL_PREDICATE_TRANSFORMATION_ = makeKeyword("ALLOW-HL-PREDICATE-TRANSFORMATION?");

    public static final SubLSymbol $kw224$ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_ = makeKeyword("ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?");

    public static final SubLSymbol $kw225$ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_ = makeKeyword("ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?");

    public static final SubLObject inference_within_sparql_query_execution_alt(SubLObject macroform, SubLObject environment) {
	{
	    SubLObject datum = macroform.rest();
	    SubLObject current = datum;
	    destructuring_bind_must_consp(current, datum, $list_alt545);
	    {
		SubLObject temp = current.rest();
		current = current.first();
		{
		    SubLObject allow_other_keys_p = NIL;
		    SubLObject rest = current;
		    SubLObject bad = NIL;
		    SubLObject current_16 = NIL;
		    for (; NIL != rest;) {
			destructuring_bind_must_consp(rest, datum, $list_alt545);
			current_16 = rest.first();
			rest = rest.rest();
			destructuring_bind_must_consp(rest, datum, $list_alt545);
			if (NIL == member(current_16, $list_alt546, UNPROVIDED, UNPROVIDED)) {
			    bad = T;
			}
			if (current_16 == $ALLOW_OTHER_KEYS) {
			    allow_other_keys_p = rest.first();
			}
			rest = rest.rest();
		    }
		    if ((NIL != bad) && (NIL == allow_other_keys_p)) {
			cdestructuring_bind_error(datum, $list_alt545);
		    }
		    {
			SubLObject sparql_tail = property_list_member($SPARQL, current);
			SubLObject sparql = (NIL != sparql_tail) ? ((SubLObject) (cadr(sparql_tail))) : NIL;
			SubLObject result_set_tail = property_list_member($RESULT_SET, current);
			SubLObject result_set = (NIL != result_set_tail) ? ((SubLObject) (cadr(result_set_tail))) : NIL;
			current = temp;
			{
			    SubLObject body = current;
			    SubLObject inferences = $sym549$INFERENCES;
			    SubLObject inference = $sym550$INFERENCE;
			    SubLObject start = $sym551$START;
			    SubLObject end = $sym552$END;
			    SubLObject count = $sym553$COUNT;
			    return list(CLET, list(bq_cons(inferences, $list_alt525), list(inference, list(LAST_ONE, inferences)), start, end, count),
				    list(CUNWIND_PROTECT, listS(PROGN, list(CSETQ, start, list(FWHEN, inference, listS(INFERENCE_CUMULATIVE_TIME_SO_FAR, inference, $list_alt532))), append(body, NIL)),
					    list(CSETQ, end, list(FWHEN, inference, listS(INFERENCE_CUMULATIVE_TIME_SO_FAR, inference, $list_alt532))), list(CSETQ, count, list(LENGTH, result_set)), list(POSSIBLY_ADD_INFERENCE_SPARQL_QUERY_PROFILE, inferences, start, end, count)));
			}
		    }
		}
	    }
	}
    }

    public static SubLObject inference_within_sparql_query_execution(final SubLObject macroform, final SubLObject environment) {
	SubLObject current;
	final SubLObject datum = current = macroform.rest();
	destructuring_bind_must_consp(current, datum, inference_datastructures_inference.$list574);
	final SubLObject temp = current.rest();
	current = current.first();
	SubLObject allow_other_keys_p = NIL;
	SubLObject rest = current;
	SubLObject bad = NIL;
	SubLObject current_$57 = NIL;
	while (NIL != rest) {
	    destructuring_bind_must_consp(rest, datum, inference_datastructures_inference.$list574);
	    current_$57 = rest.first();
	    rest = rest.rest();
	    destructuring_bind_must_consp(rest, datum, inference_datastructures_inference.$list574);
	    if (NIL == member(current_$57, inference_datastructures_inference.$list575, UNPROVIDED, UNPROVIDED)) {
		bad = T;
	    }
	    if (current_$57 == inference_datastructures_inference.$ALLOW_OTHER_KEYS) {
		allow_other_keys_p = rest.first();
	    }
	    rest = rest.rest();
	}
	if ((NIL != bad) && (NIL == allow_other_keys_p)) {
	    cdestructuring_bind_error(datum, inference_datastructures_inference.$list574);
	}
	final SubLObject sparql_tail = property_list_member($SPARQL, current);
	final SubLObject sparql = (NIL != sparql_tail) ? cadr(sparql_tail) : NIL;
	final SubLObject result_set_tail = property_list_member($RESULT_SET, current);
	final SubLObject result_set = (NIL != result_set_tail) ? cadr(result_set_tail) : NIL;
	final SubLObject body;
	current = body = temp;
	final SubLObject inferences = inference_datastructures_inference.$sym578$INFERENCES;
	final SubLObject inference = inference_datastructures_inference.$sym579$INFERENCE;
	final SubLObject start = inference_datastructures_inference.$sym580$START;
	final SubLObject end = inference_datastructures_inference.$sym581$END;
	final SubLObject count = inference_datastructures_inference.$sym582$COUNT;
	return list(CLET, list(bq_cons(inferences, inference_datastructures_inference.$list555), list(inference, list(inference_datastructures_inference.LAST_ONE, inferences)), start, end, count),
		list(CUNWIND_PROTECT, listS(PROGN, list(CSETQ, start, list(FWHEN, inference, listS(inference_datastructures_inference.INFERENCE_CUMULATIVE_TIME_SO_FAR, inference, inference_datastructures_inference.$list562))), append(body, NIL)),
			list(CSETQ, end, list(FWHEN, inference, listS(inference_datastructures_inference.INFERENCE_CUMULATIVE_TIME_SO_FAR, inference, inference_datastructures_inference.$list562))), list(CSETQ, count, list(LENGTH, result_set)),
			list(inference_datastructures_inference.POSSIBLY_ADD_INFERENCE_SPARQL_QUERY_PROFILE, inferences, start, end, count)));
    }

    public static final SubLSymbol $kw226$ALLOW_INDETERMINATE_RESULTS_ = makeKeyword("ALLOW-INDETERMINATE-RESULTS?");

    public static final SubLSymbol $kw230$ALLOW_ABNORMALITY_CHECKING_ = makeKeyword("ALLOW-ABNORMALITY-CHECKING?");

    public static final SubLSymbol $kw232$PROBLEM_STORE_PRIVATE_ = makeKeyword("PROBLEM-STORE-PRIVATE?");

    public static final SubLSymbol $kw237$CACHE_RESULTS_ = makeKeyword("CACHE-RESULTS?");

    static private final SubLString $str_alt262$Invalid_slot__S_for_construction_ = makeString("Invalid slot ~S for construction function");

    static private final SubLString $str_alt264$_Invalid_INFERENCE__s_ = makeString("<Invalid INFERENCE ~s>");

    static private final SubLString $str_alt265$_INFERENCE__a__a__a__a_in__a_ = makeString("<INFERENCE ~a.~a:~a:~a in ~a>");

    static private final SubLList $list_alt272 = list(list(makeSymbol("PROBLEM-VAR"), makeSymbol("INFERENCE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    public static final SubLObject possibly_add_inference_sparql_query_profile_alt(SubLObject inferences, SubLObject start, SubLObject end, SubLObject count) {
	if ((((NIL != inferences) && (NIL != start)) && (NIL != end)) && (NIL != count)) {
	    {
		SubLObject cdolist_list_var = inferences;
		SubLObject inference = NIL;
		for (inference = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), inference = cdolist_list_var.first()) {
		    if (NIL != com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_computes_metricP(inference, $SPARQL_QUERY_PROFILE)) {
			{
			    SubLObject profile = list(start, end, count);
			    return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.add_inference_sparql_query_profile(inference, profile);
			}
		    }
		}
	    }
	}
	return NIL;
    }

    public static SubLObject possibly_add_inference_sparql_query_profile(final SubLObject inferences, final SubLObject start, final SubLObject end, final SubLObject count) {
	if ((((NIL != inferences) && (NIL != start)) && (NIL != end)) && (NIL != count)) {
	    SubLObject cdolist_list_var = inferences;
	    SubLObject inference = NIL;
	    inference = cdolist_list_var.first();
	    while (NIL != cdolist_list_var) {
		if (NIL != inference_datastructures_inference.inference_computes_metricP(inference, inference_datastructures_inference.$SPARQL_QUERY_PROFILE)) {
		    final SubLObject profile = list(start, end, count);
		    return inference_datastructures_inference.add_inference_sparql_query_profile(inference, profile);
		}
		cdolist_list_var = cdolist_list_var.rest();
		inference = cdolist_list_var.first();
	    }
	}
	return NIL;
    }

    static private final SubLList $list_alt275 = list(list(makeSymbol("JUST-VAR"), makeSymbol("INFERENCE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLList $list_alt278 = list(list(makeSymbol("ANSWER-VAR"), makeSymbol("INFERENCE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLSymbol $sym279$START_ID = makeUninternedSymbol("START-ID");

    static private final SubLSymbol $sym280$END_ID = makeUninternedSymbol("END-ID");

    static private final SubLSymbol $sym281$ID = makeUninternedSymbol("ID");

    public static final SubLObject increment_inference_sksi_query_total_time_alt(SubLObject inference, SubLObject elapsed_seconds) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(elapsed_seconds, NON_NEGATIVE_NUMBER_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_accumulate(inference, $SKSI_QUERY_TOTAL_TIME_ACC, elapsed_seconds);
    }

    public static SubLObject increment_inference_sksi_query_total_time(final SubLObject inference, final SubLObject elapsed_seconds) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != number_utilities.non_negative_number_p(elapsed_seconds) : "! number_utilities.non_negative_number_p(elapsed_seconds) " + ("number_utilities.non_negative_number_p(elapsed_seconds) " + "CommonSymbols.NIL != number_utilities.non_negative_number_p(elapsed_seconds) ")
		+ elapsed_seconds;
	return inference_datastructures_inference.inference_accumulate(inference, inference_datastructures_inference.$SKSI_QUERY_TOTAL_TIME_ACC, elapsed_seconds);
    }

    static private final SubLSymbol $sym282$INF = makeUninternedSymbol("INF");

    static private final SubLSymbol $sym287$1_ = makeSymbol("1+");

    static private final SubLSymbol $sym288$__ = makeSymbol(">=");

    static private final SubLList $list_alt290 = list(list(makeSymbol("ANSWER-VAR"), makeSymbol("INFERENCE"), makeSymbol("&KEY"), makeSymbol("ORDERED")), makeSymbol("&BODY"), makeSymbol("BODY"));

    public static final SubLObject add_inference_sksi_query_start_time_alt(SubLObject inference, SubLObject elapsed_seconds) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(elapsed_seconds, NON_NEGATIVE_NUMBER_P);
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_accumulate(inference, $SKSI_QUERY_START_TIMES_ACC, elapsed_seconds);
    }

    public static SubLObject add_inference_sksi_query_start_time(final SubLObject inference, final SubLObject elapsed_seconds) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != number_utilities.non_negative_number_p(elapsed_seconds) : "! number_utilities.non_negative_number_p(elapsed_seconds) " + ("number_utilities.non_negative_number_p(elapsed_seconds) " + "CommonSymbols.NIL != number_utilities.non_negative_number_p(elapsed_seconds) ")
		+ elapsed_seconds;
	return inference_datastructures_inference.inference_accumulate(inference, inference_datastructures_inference.$SKSI_QUERY_START_TIMES_ACC, elapsed_seconds);
    }

    static private final SubLList $list_alt291 = list(makeKeyword("ORDERED"));

    static private final SubLSymbol $sym294$ID = makeUninternedSymbol("ID");

    static private final SubLList $list_alt298 = list(list(makeSymbol("ANSWER-VAR"), makeSymbol("INFERENCE"), makeSymbol("START-INDEX")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLSymbol $sym299$START_ID = makeUninternedSymbol("START-ID");

    public static final SubLObject add_inference_sparql_query_profile_alt(SubLObject inference, SubLObject profile) {
	SubLTrampolineFile.checkType(inference, INFERENCE_P);
	SubLTrampolineFile.checkType(profile, LISTP);
	{
	    SubLObject list_var = profile;
	    SubLTrampolineFile.checkType(list_var, NON_DOTTED_LIST_P);
	    {
		SubLObject cdolist_list_var = list_var;
		SubLObject elem = NIL;
		for (elem = cdolist_list_var.first(); NIL != cdolist_list_var; cdolist_list_var = cdolist_list_var.rest(), elem = cdolist_list_var.first()) {
		    SubLTrampolineFile.checkType(elem, NON_NEGATIVE_NUMBER_P);
		}
	    }
	}
	return com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.inference_accumulate(inference, $SPARQL_QUERY_PROFILE_ACC, profile);
    }

    public static SubLObject add_inference_sparql_query_profile(final SubLObject inference, final SubLObject profile) {
	assert NIL != inference_datastructures_inference.inference_p(inference) : "! inference_datastructures_inference.inference_p(inference) " + ("inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) ")
		+ inference;
	assert NIL != listp(profile) : "! listp(profile) " + ("Types.listp(profile) " + "CommonSymbols.NIL != Types.listp(profile) ") + profile;
	assert NIL != list_utilities.non_dotted_list_p(profile) : "! list_utilities.non_dotted_list_p(profile) " + ("list_utilities.non_dotted_list_p(profile) " + "CommonSymbols.NIL != list_utilities.non_dotted_list_p(profile) ") + profile;
	SubLObject cdolist_list_var = profile;
	SubLObject elem = NIL;
	elem = cdolist_list_var.first();
	while (NIL != cdolist_list_var) {
	    assert NIL != number_utilities.non_negative_number_p(elem) : "! number_utilities.non_negative_number_p(elem) " + ("number_utilities.non_negative_number_p(elem) " + "CommonSymbols.NIL != number_utilities.non_negative_number_p(elem) ") + elem;
	    cdolist_list_var = cdolist_list_var.rest();
	    elem = cdolist_list_var.first();
	}
	return inference_datastructures_inference.inference_accumulate(inference, inference_datastructures_inference.$SPARQL_QUERY_PROFILE_ACC, profile);
    }

    static private final SubLSymbol $sym300$END_ID = makeUninternedSymbol("END-ID");

    static private final SubLSymbol $sym301$ID = makeUninternedSymbol("ID");

    static private final SubLSymbol $sym302$INF = makeUninternedSymbol("INF");

    static private final SubLSymbol $sym304$ANSWER = makeUninternedSymbol("ANSWER");

    static private final SubLList $list_alt307 = list(list(makeSymbol("PROCESS-VAR"), makeSymbol("INFERENCE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLList $list_alt310 = list(list(makeSymbol("PROOF-VAR"), makeSymbol("INFERENCE"), makeSymbol("&KEY"), makeSymbol("PROOF-STATUS")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLList $list_alt311 = list(makeKeyword("PROOF-STATUS"));

    public static final SubLObject declare_inference_datastructures_inference_file_alt() {
	declareFunction("inference_type_p", "INFERENCE-TYPE-P", 1, 0, false);
	declareFunction("inference_print_function_trampoline", "INFERENCE-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
	declareFunction("inference_p", "INFERENCE-P", 1, 0, false);
	new com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_p$UnaryFunction();
	declareFunction("infrnc_suid", "INFRNC-SUID", 1, 0, false);
	declareFunction("infrnc_problem_store", "INFRNC-PROBLEM-STORE", 1, 0, false);
	declareFunction("infrnc_forward_propagate", "INFRNC-FORWARD-PROPAGATE", 1, 0, false);
	declareFunction("infrnc_input_mt", "INFRNC-INPUT-MT", 1, 0, false);
	declareFunction("infrnc_input_el_query", "INFRNC-INPUT-EL-QUERY", 1, 0, false);
	declareFunction("infrnc_input_non_explanatory_el_query", "INFRNC-INPUT-NON-EXPLANATORY-EL-QUERY", 1, 0, false);
	declareFunction("infrnc_input_query_properties", "INFRNC-INPUT-QUERY-PROPERTIES", 1, 0, false);
	declareFunction("infrnc_mt", "INFRNC-MT", 1, 0, false);
	declareFunction("infrnc_el_query", "INFRNC-EL-QUERY", 1, 0, false);
	declareFunction("infrnc_el_bindings", "INFRNC-EL-BINDINGS", 1, 0, false);
	declareFunction("infrnc_hl_query", "INFRNC-HL-QUERY", 1, 0, false);
	declareFunction("infrnc_explanatory_subquery", "INFRNC-EXPLANATORY-SUBQUERY", 1, 0, false);
	declareFunction("infrnc_non_explanatory_subquery", "INFRNC-NON-EXPLANATORY-SUBQUERY", 1, 0, false);
	declareFunction("infrnc_free_hl_vars", "INFRNC-FREE-HL-VARS", 1, 0, false);
	declareFunction("infrnc_hypothetical_bindings", "INFRNC-HYPOTHETICAL-BINDINGS", 1, 0, false);
	declareFunction("infrnc_answer_id_index", "INFRNC-ANSWER-ID-INDEX", 1, 0, false);
	declareFunction("infrnc_answer_bindings_index", "INFRNC-ANSWER-BINDINGS-INDEX", 1, 0, false);
	declareFunction("infrnc_new_answer_id_start", "INFRNC-NEW-ANSWER-ID-START", 1, 0, false);
	declareFunction("infrnc_new_answer_justifications", "INFRNC-NEW-ANSWER-JUSTIFICATIONS", 1, 0, false);
	declareFunction("infrnc_status", "INFRNC-STATUS", 1, 0, false);
	declareFunction("infrnc_suspend_status", "INFRNC-SUSPEND-STATUS", 1, 0, false);
	declareFunction("infrnc_root_link", "INFRNC-ROOT-LINK", 1, 0, false);
	declareFunction("infrnc_relevant_problems", "INFRNC-RELEVANT-PROBLEMS", 1, 0, false);
	declareFunction("infrnc_strategy_set", "INFRNC-STRATEGY-SET", 1, 0, false);
	declareFunction("infrnc_control_process", "INFRNC-CONTROL-PROCESS", 1, 0, false);
	declareFunction("infrnc_interrupting_processes", "INFRNC-INTERRUPTING-PROCESSES", 1, 0, false);
	declareFunction("infrnc_max_transformation_depth_reached", "INFRNC-MAX-TRANSFORMATION-DEPTH-REACHED", 1, 0, false);
	declareFunction("infrnc_disjunction_free_el_vars_policy", "INFRNC-DISJUNCTION-FREE-EL-VARS-POLICY", 1, 0, false);
	declareFunction("infrnc_result_uniqueness_criterion", "INFRNC-RESULT-UNIQUENESS-CRITERION", 1, 0, false);
	declareFunction("infrnc_allow_hl_predicate_transformationP", "INFRNC-ALLOW-HL-PREDICATE-TRANSFORMATION?", 1, 0, false);
	declareFunction("infrnc_allow_unbound_predicate_transformationP", "INFRNC-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?", 1, 0, false);
	declareFunction("infrnc_allow_evaluatable_predicate_transformationP", "INFRNC-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?", 1, 0, false);
	declareFunction("infrnc_allow_indeterminate_resultsP", "INFRNC-ALLOW-INDETERMINATE-RESULTS?", 1, 0, false);
	declareFunction("infrnc_allowed_rules", "INFRNC-ALLOWED-RULES", 1, 0, false);
	declareFunction("infrnc_forbidden_rules", "INFRNC-FORBIDDEN-RULES", 1, 0, false);
	declareFunction("infrnc_allowed_modules", "INFRNC-ALLOWED-MODULES", 1, 0, false);
	declareFunction("infrnc_allow_abnormality_checkingP", "INFRNC-ALLOW-ABNORMALITY-CHECKING?", 1, 0, false);
	declareFunction("infrnc_transitive_closure_mode", "INFRNC-TRANSITIVE-CLOSURE-MODE", 1, 0, false);
	declareFunction("infrnc_problem_store_privateP", "INFRNC-PROBLEM-STORE-PRIVATE?", 1, 0, false);
	declareFunction("infrnc_continuableP", "INFRNC-CONTINUABLE?", 1, 0, false);
	declareFunction("infrnc_browsableP", "INFRNC-BROWSABLE?", 1, 0, false);
	declareFunction("infrnc_return_type", "INFRNC-RETURN-TYPE", 1, 0, false);
	declareFunction("infrnc_answer_language", "INFRNC-ANSWER-LANGUAGE", 1, 0, false);
	declareFunction("infrnc_cache_resultsP", "INFRNC-CACHE-RESULTS?", 1, 0, false);
	declareFunction("infrnc_blockingP", "INFRNC-BLOCKING?", 1, 0, false);
	declareFunction("infrnc_max_number", "INFRNC-MAX-NUMBER", 1, 0, false);
	declareFunction("infrnc_max_time", "INFRNC-MAX-TIME", 1, 0, false);
	declareFunction("infrnc_max_step", "INFRNC-MAX-STEP", 1, 0, false);
	declareFunction("infrnc_mode", "INFRNC-MODE", 1, 0, false);
	declareFunction("infrnc_forward_max_time", "INFRNC-FORWARD-MAX-TIME", 1, 0, false);
	declareFunction("infrnc_max_proof_depth", "INFRNC-MAX-PROOF-DEPTH", 1, 0, false);
	declareFunction("infrnc_max_transformation_depth", "INFRNC-MAX-TRANSFORMATION-DEPTH", 1, 0, false);
	declareFunction("infrnc_probably_approximately_done", "INFRNC-PROBABLY-APPROXIMATELY-DONE", 1, 0, false);
	declareFunction("infrnc_metrics_template", "INFRNC-METRICS-TEMPLATE", 1, 0, false);
	declareFunction("infrnc_start_universal_time", "INFRNC-START-UNIVERSAL-TIME", 1, 0, false);
	declareFunction("infrnc_start_internal_real_time", "INFRNC-START-INTERNAL-REAL-TIME", 1, 0, false);
	declareFunction("infrnc_end_internal_real_time", "INFRNC-END-INTERNAL-REAL-TIME", 1, 0, false);
	declareFunction("infrnc_pad_internal_real_time", "INFRNC-PAD-INTERNAL-REAL-TIME", 1, 0, false);
	declareFunction("infrnc_cumulative_time", "INFRNC-CUMULATIVE-TIME", 1, 0, false);
	declareFunction("infrnc_step_count", "INFRNC-STEP-COUNT", 1, 0, false);
	declareFunction("infrnc_cumulative_step_count", "INFRNC-CUMULATIVE-STEP-COUNT", 1, 0, false);
	declareFunction("infrnc_events", "INFRNC-EVENTS", 1, 0, false);
	declareFunction("infrnc_halt_conditions", "INFRNC-HALT-CONDITIONS", 1, 0, false);
	declareFunction("infrnc_accumulators", "INFRNC-ACCUMULATORS", 1, 0, false);
	declareFunction("infrnc_proof_watermark", "INFRNC-PROOF-WATERMARK", 1, 0, false);
	declareFunction("infrnc_problem_working_time_data", "INFRNC-PROBLEM-WORKING-TIME-DATA", 1, 0, false);
	declareFunction("infrnc_type", "INFRNC-TYPE", 1, 0, false);
	declareFunction("infrnc_data", "INFRNC-DATA", 1, 0, false);
	declareFunction("_csetf_infrnc_suid", "_CSETF-INFRNC-SUID", 2, 0, false);
	declareFunction("_csetf_infrnc_problem_store", "_CSETF-INFRNC-PROBLEM-STORE", 2, 0, false);
	declareFunction("_csetf_infrnc_forward_propagate", "_CSETF-INFRNC-FORWARD-PROPAGATE", 2, 0, false);
	declareFunction("_csetf_infrnc_input_mt", "_CSETF-INFRNC-INPUT-MT", 2, 0, false);
	declareFunction("_csetf_infrnc_input_el_query", "_CSETF-INFRNC-INPUT-EL-QUERY", 2, 0, false);
	declareFunction("_csetf_infrnc_input_non_explanatory_el_query", "_CSETF-INFRNC-INPUT-NON-EXPLANATORY-EL-QUERY", 2, 0, false);
	declareFunction("_csetf_infrnc_input_query_properties", "_CSETF-INFRNC-INPUT-QUERY-PROPERTIES", 2, 0, false);
	declareFunction("_csetf_infrnc_mt", "_CSETF-INFRNC-MT", 2, 0, false);
	declareFunction("_csetf_infrnc_el_query", "_CSETF-INFRNC-EL-QUERY", 2, 0, false);
	declareFunction("_csetf_infrnc_el_bindings", "_CSETF-INFRNC-EL-BINDINGS", 2, 0, false);
	declareFunction("_csetf_infrnc_hl_query", "_CSETF-INFRNC-HL-QUERY", 2, 0, false);
	declareFunction("_csetf_infrnc_explanatory_subquery", "_CSETF-INFRNC-EXPLANATORY-SUBQUERY", 2, 0, false);
	declareFunction("_csetf_infrnc_non_explanatory_subquery", "_CSETF-INFRNC-NON-EXPLANATORY-SUBQUERY", 2, 0, false);
	declareFunction("_csetf_infrnc_free_hl_vars", "_CSETF-INFRNC-FREE-HL-VARS", 2, 0, false);
	declareFunction("_csetf_infrnc_hypothetical_bindings", "_CSETF-INFRNC-HYPOTHETICAL-BINDINGS", 2, 0, false);
	declareFunction("_csetf_infrnc_answer_id_index", "_CSETF-INFRNC-ANSWER-ID-INDEX", 2, 0, false);
	declareFunction("_csetf_infrnc_answer_bindings_index", "_CSETF-INFRNC-ANSWER-BINDINGS-INDEX", 2, 0, false);
	declareFunction("_csetf_infrnc_new_answer_id_start", "_CSETF-INFRNC-NEW-ANSWER-ID-START", 2, 0, false);
	declareFunction("_csetf_infrnc_new_answer_justifications", "_CSETF-INFRNC-NEW-ANSWER-JUSTIFICATIONS", 2, 0, false);
	declareFunction("_csetf_infrnc_status", "_CSETF-INFRNC-STATUS", 2, 0, false);
	declareFunction("_csetf_infrnc_suspend_status", "_CSETF-INFRNC-SUSPEND-STATUS", 2, 0, false);
	declareFunction("_csetf_infrnc_root_link", "_CSETF-INFRNC-ROOT-LINK", 2, 0, false);
	declareFunction("_csetf_infrnc_relevant_problems", "_CSETF-INFRNC-RELEVANT-PROBLEMS", 2, 0, false);
	declareFunction("_csetf_infrnc_strategy_set", "_CSETF-INFRNC-STRATEGY-SET", 2, 0, false);
	declareFunction("_csetf_infrnc_control_process", "_CSETF-INFRNC-CONTROL-PROCESS", 2, 0, false);
	declareFunction("_csetf_infrnc_interrupting_processes", "_CSETF-INFRNC-INTERRUPTING-PROCESSES", 2, 0, false);
	declareFunction("_csetf_infrnc_max_transformation_depth_reached", "_CSETF-INFRNC-MAX-TRANSFORMATION-DEPTH-REACHED", 2, 0, false);
	declareFunction("_csetf_infrnc_disjunction_free_el_vars_policy", "_CSETF-INFRNC-DISJUNCTION-FREE-EL-VARS-POLICY", 2, 0, false);
	declareFunction("_csetf_infrnc_result_uniqueness_criterion", "_CSETF-INFRNC-RESULT-UNIQUENESS-CRITERION", 2, 0, false);
	declareFunction("_csetf_infrnc_allow_hl_predicate_transformationP", "_CSETF-INFRNC-ALLOW-HL-PREDICATE-TRANSFORMATION?", 2, 0, false);
	declareFunction("_csetf_infrnc_allow_unbound_predicate_transformationP", "_CSETF-INFRNC-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?", 2, 0, false);
	declareFunction("_csetf_infrnc_allow_evaluatable_predicate_transformationP", "_CSETF-INFRNC-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?", 2, 0, false);
	declareFunction("_csetf_infrnc_allow_indeterminate_resultsP", "_CSETF-INFRNC-ALLOW-INDETERMINATE-RESULTS?", 2, 0, false);
	declareFunction("_csetf_infrnc_allowed_rules", "_CSETF-INFRNC-ALLOWED-RULES", 2, 0, false);
	declareFunction("_csetf_infrnc_forbidden_rules", "_CSETF-INFRNC-FORBIDDEN-RULES", 2, 0, false);
	declareFunction("_csetf_infrnc_allowed_modules", "_CSETF-INFRNC-ALLOWED-MODULES", 2, 0, false);
	declareFunction("_csetf_infrnc_allow_abnormality_checkingP", "_CSETF-INFRNC-ALLOW-ABNORMALITY-CHECKING?", 2, 0, false);
	declareFunction("_csetf_infrnc_transitive_closure_mode", "_CSETF-INFRNC-TRANSITIVE-CLOSURE-MODE", 2, 0, false);
	declareFunction("_csetf_infrnc_problem_store_privateP", "_CSETF-INFRNC-PROBLEM-STORE-PRIVATE?", 2, 0, false);
	declareFunction("_csetf_infrnc_continuableP", "_CSETF-INFRNC-CONTINUABLE?", 2, 0, false);
	declareFunction("_csetf_infrnc_browsableP", "_CSETF-INFRNC-BROWSABLE?", 2, 0, false);
	declareFunction("_csetf_infrnc_return_type", "_CSETF-INFRNC-RETURN-TYPE", 2, 0, false);
	declareFunction("_csetf_infrnc_answer_language", "_CSETF-INFRNC-ANSWER-LANGUAGE", 2, 0, false);
	declareFunction("_csetf_infrnc_cache_resultsP", "_CSETF-INFRNC-CACHE-RESULTS?", 2, 0, false);
	declareFunction("_csetf_infrnc_blockingP", "_CSETF-INFRNC-BLOCKING?", 2, 0, false);
	declareFunction("_csetf_infrnc_max_number", "_CSETF-INFRNC-MAX-NUMBER", 2, 0, false);
	declareFunction("_csetf_infrnc_max_time", "_CSETF-INFRNC-MAX-TIME", 2, 0, false);
	declareFunction("_csetf_infrnc_max_step", "_CSETF-INFRNC-MAX-STEP", 2, 0, false);
	declareFunction("_csetf_infrnc_mode", "_CSETF-INFRNC-MODE", 2, 0, false);
	declareFunction("_csetf_infrnc_forward_max_time", "_CSETF-INFRNC-FORWARD-MAX-TIME", 2, 0, false);
	declareFunction("_csetf_infrnc_max_proof_depth", "_CSETF-INFRNC-MAX-PROOF-DEPTH", 2, 0, false);
	declareFunction("_csetf_infrnc_max_transformation_depth", "_CSETF-INFRNC-MAX-TRANSFORMATION-DEPTH", 2, 0, false);
	declareFunction("_csetf_infrnc_probably_approximately_done", "_CSETF-INFRNC-PROBABLY-APPROXIMATELY-DONE", 2, 0, false);
	declareFunction("_csetf_infrnc_metrics_template", "_CSETF-INFRNC-METRICS-TEMPLATE", 2, 0, false);
	declareFunction("_csetf_infrnc_start_universal_time", "_CSETF-INFRNC-START-UNIVERSAL-TIME", 2, 0, false);
	declareFunction("_csetf_infrnc_start_internal_real_time", "_CSETF-INFRNC-START-INTERNAL-REAL-TIME", 2, 0, false);
	declareFunction("_csetf_infrnc_end_internal_real_time", "_CSETF-INFRNC-END-INTERNAL-REAL-TIME", 2, 0, false);
	declareFunction("_csetf_infrnc_pad_internal_real_time", "_CSETF-INFRNC-PAD-INTERNAL-REAL-TIME", 2, 0, false);
	declareFunction("_csetf_infrnc_cumulative_time", "_CSETF-INFRNC-CUMULATIVE-TIME", 2, 0, false);
	declareFunction("_csetf_infrnc_step_count", "_CSETF-INFRNC-STEP-COUNT", 2, 0, false);
	declareFunction("_csetf_infrnc_cumulative_step_count", "_CSETF-INFRNC-CUMULATIVE-STEP-COUNT", 2, 0, false);
	declareFunction("_csetf_infrnc_events", "_CSETF-INFRNC-EVENTS", 2, 0, false);
	declareFunction("_csetf_infrnc_halt_conditions", "_CSETF-INFRNC-HALT-CONDITIONS", 2, 0, false);
	declareFunction("_csetf_infrnc_accumulators", "_CSETF-INFRNC-ACCUMULATORS", 2, 0, false);
	declareFunction("_csetf_infrnc_proof_watermark", "_CSETF-INFRNC-PROOF-WATERMARK", 2, 0, false);
	declareFunction("_csetf_infrnc_problem_working_time_data", "_CSETF-INFRNC-PROBLEM-WORKING-TIME-DATA", 2, 0, false);
	declareFunction("_csetf_infrnc_type", "_CSETF-INFRNC-TYPE", 2, 0, false);
	declareFunction("_csetf_infrnc_data", "_CSETF-INFRNC-DATA", 2, 0, false);
	declareFunction("make_inference", "MAKE-INFERENCE", 0, 1, false);
	declareFunction("valid_inference_p", "VALID-INFERENCE-P", 1, 0, false);
	declareFunction("invalid_inference_p", "INVALID-INFERENCE-P", 1, 0, false);
	declareFunction("inference_invalid_p", "INFERENCE-INVALID-P", 1, 0, false);
	declareFunction("print_inference", "PRINT-INFERENCE", 3, 0, false);
	declareFunction("sxhash_inference_method", "SXHASH-INFERENCE-METHOD", 1, 0, false);
	new com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$sxhash_inference_method$UnaryFunction();
	declareFunction("new_inference_p", "NEW-INFERENCE-P", 1, 0, false);
	declareFunction("prepared_inference_p", "PREPARED-INFERENCE-P", 1, 0, false);
	declareFunction("ready_inference_p", "READY-INFERENCE-P", 1, 0, false);
	declareFunction("running_inference_p", "RUNNING-INFERENCE-P", 1, 0, false);
	declareFunction("suspended_inference_p", "SUSPENDED-INFERENCE-P", 1, 0, false);
	declareFunction("continuable_inference_p", "CONTINUABLE-INFERENCE-P", 1, 0, false);
	declareFunction("exhausted_inference_p", "EXHAUSTED-INFERENCE-P", 1, 0, false);
	declareMacro("do_inference_relevant_problems", "DO-INFERENCE-RELEVANT-PROBLEMS");
	declareMacro("do_inference_new_answer_justifications", "DO-INFERENCE-NEW-ANSWER-JUSTIFICATIONS");
	declareMacro("do_inference_new_answers", "DO-INFERENCE-NEW-ANSWERS");
	declareMacro("do_inference_answers", "DO-INFERENCE-ANSWERS");
	declareMacro("do_inference_answers_from_index", "DO-INFERENCE-ANSWERS-FROM-INDEX");
	declareMacro("do_inference_justifications", "DO-INFERENCE-JUSTIFICATIONS");
	declareMacro("do_inference_interrupting_processes", "DO-INFERENCE-INTERRUPTING-PROCESSES");
	declareMacro("do_inference_root_proofs", "DO-INFERENCE-ROOT-PROOFS");
	declareMacro("do_inference_allowed_rules", "DO-INFERENCE-ALLOWED-RULES");
	declareMacro("with_inference_problem_working_time_lock", "WITH-INFERENCE-PROBLEM-WORKING-TIME-LOCK");
	declareFunction("new_inference", "NEW-INFERENCE", 1, 0, false);
	declareFunction("new_tautological_inference", "NEW-TAUTOLOGICAL-INFERENCE", 1, 0, false);
	declareFunction("destroy_all_inferences", "DESTROY-ALL-INFERENCES", 0, 0, false);
	declareFunction("destroy_inference", "DESTROY-INFERENCE", 1, 0, false);
	declareFunction("destroy_inference_and_problem_store", "DESTROY-INFERENCE-AND-PROBLEM-STORE", 1, 0, false);
	declareFunction("destroy_problem_store_inference", "DESTROY-PROBLEM-STORE-INFERENCE", 1, 0, false);
	declareFunction("destroy_inference_int", "DESTROY-INFERENCE-INT", 1, 0, false);
	declareFunction("note_inference_invalid", "NOTE-INFERENCE-INVALID", 1, 0, false);
	declareFunction("inference_suid", "INFERENCE-SUID", 1, 0, false);
	declareFunction("inference_problem_store", "INFERENCE-PROBLEM-STORE", 1, 0, false);
	declareFunction("inference_forward_propagate", "INFERENCE-FORWARD-PROPAGATE", 1, 0, false);
	declareFunction("inference_input_mt", "INFERENCE-INPUT-MT", 1, 0, false);
	declareFunction("inference_input_el_query", "INFERENCE-INPUT-EL-QUERY", 1, 0, false);
	declareFunction("inference_input_non_explanatory_el_query", "INFERENCE-INPUT-NON-EXPLANATORY-EL-QUERY", 1, 0, false);
	declareFunction("inference_input_query_properties", "INFERENCE-INPUT-QUERY-PROPERTIES", 1, 0, false);
	declareFunction("inference_mt", "INFERENCE-MT", 1, 0, false);
	declareFunction("inference_el_query", "INFERENCE-EL-QUERY", 1, 0, false);
	declareFunction("inference_el_bindings", "INFERENCE-EL-BINDINGS", 1, 0, false);
	declareFunction("inference_hl_query", "INFERENCE-HL-QUERY", 1, 0, false);
	declareFunction("inference_explanatory_subquery", "INFERENCE-EXPLANATORY-SUBQUERY", 1, 0, false);
	declareFunction("inference_non_explanatory_subquery", "INFERENCE-NON-EXPLANATORY-SUBQUERY", 1, 0, false);
	declareFunction("inference_free_hl_vars", "INFERENCE-FREE-HL-VARS", 1, 0, false);
	declareFunction("inference_hypothetical_bindings", "INFERENCE-HYPOTHETICAL-BINDINGS", 1, 0, false);
	declareFunction("inference_answer_id_index", "INFERENCE-ANSWER-ID-INDEX", 1, 0, false);
	declareFunction("inference_answer_bindings_index", "INFERENCE-ANSWER-BINDINGS-INDEX", 1, 0, false);
	declareFunction("inference_new_answer_id_start", "INFERENCE-NEW-ANSWER-ID-START", 1, 0, false);
	declareFunction("inference_new_answer_justifications", "INFERENCE-NEW-ANSWER-JUSTIFICATIONS", 1, 0, false);
	declareFunction("inference_status", "INFERENCE-STATUS", 1, 0, false);
	declareFunction("inference_suspend_status", "INFERENCE-SUSPEND-STATUS", 1, 0, false);
	declareFunction("inference_root_link", "INFERENCE-ROOT-LINK", 1, 0, false);
	declareFunction("inference_relevant_problems", "INFERENCE-RELEVANT-PROBLEMS", 1, 0, false);
	declareFunction("inference_strategy_set", "INFERENCE-STRATEGY-SET", 1, 0, false);
	declareFunction("inference_control_process", "INFERENCE-CONTROL-PROCESS", 1, 0, false);
	declareFunction("inference_interrupting_processes", "INFERENCE-INTERRUPTING-PROCESSES", 1, 0, false);
	declareFunction("inference_max_transformation_depth_reached", "INFERENCE-MAX-TRANSFORMATION-DEPTH-REACHED", 1, 0, false);
	declareFunction("inference_answer_language", "INFERENCE-ANSWER-LANGUAGE", 1, 0, false);
	declareFunction("inference_cache_resultsP", "INFERENCE-CACHE-RESULTS?", 1, 0, false);
	declareFunction("inference_blockingP", "INFERENCE-BLOCKING?", 1, 0, false);
	declareFunction("inference_disjunction_free_el_vars_policy", "INFERENCE-DISJUNCTION-FREE-EL-VARS-POLICY", 1, 0, false);
	declareFunction("inference_result_uniqueness_criterion", "INFERENCE-RESULT-UNIQUENESS-CRITERION", 1, 0, false);
	declareFunction("inference_allow_hl_predicate_transformationP", "INFERENCE-ALLOW-HL-PREDICATE-TRANSFORMATION?", 1, 0, false);
	declareFunction("inference_allow_unbound_predicate_transformationP", "INFERENCE-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?", 1, 0, false);
	declareFunction("inference_allow_evaluatable_predicate_transformationP", "INFERENCE-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?", 1, 0, false);
	declareFunction("inference_allow_indeterminate_resultsP", "INFERENCE-ALLOW-INDETERMINATE-RESULTS?", 1, 0, false);
	declareFunction("inference_allowed_rules", "INFERENCE-ALLOWED-RULES", 1, 0, false);
	declareFunction("inference_forbidden_rules", "INFERENCE-FORBIDDEN-RULES", 1, 0, false);
	declareFunction("inference_allowed_modules", "INFERENCE-ALLOWED-MODULES", 1, 0, false);
	declareFunction("inference_allow_abnormality_checkingP", "INFERENCE-ALLOW-ABNORMALITY-CHECKING?", 1, 0, false);
	declareFunction("inference_transitive_closure_mode", "INFERENCE-TRANSITIVE-CLOSURE-MODE", 1, 0, false);
	declareFunction("inference_problem_store_privateP", "INFERENCE-PROBLEM-STORE-PRIVATE?", 1, 0, false);
	declareFunction("inference_continuableP", "INFERENCE-CONTINUABLE?", 1, 0, false);
	declareFunction("inference_browsableP", "INFERENCE-BROWSABLE?", 1, 0, false);
	declareFunction("inference_return_type", "INFERENCE-RETURN-TYPE", 1, 0, false);
	declareFunction("inference_max_time", "INFERENCE-MAX-TIME", 1, 0, false);
	declareFunction("inference_max_step", "INFERENCE-MAX-STEP", 1, 0, false);
	declareFunction("inference_mode", "INFERENCE-MODE", 1, 0, false);
	declareFunction("inference_forward_max_time", "INFERENCE-FORWARD-MAX-TIME", 1, 0, false);
	declareFunction("inference_max_number", "INFERENCE-MAX-NUMBER", 1, 0, false);
	declareFunction("inference_max_proof_depth", "INFERENCE-MAX-PROOF-DEPTH", 1, 0, false);
	declareFunction("inference_max_transformation_depth", "INFERENCE-MAX-TRANSFORMATION-DEPTH", 1, 0, false);
	declareFunction("inference_probably_approximately_done", "INFERENCE-PROBABLY-APPROXIMATELY-DONE", 1, 0, false);
	declareFunction("inference_metrics_template", "INFERENCE-METRICS-TEMPLATE", 1, 0, false);
	declareFunction("inference_start_universal_time", "INFERENCE-START-UNIVERSAL-TIME", 1, 0, false);
	declareFunction("inference_start_internal_real_time", "INFERENCE-START-INTERNAL-REAL-TIME", 1, 0, false);
	declareFunction("inference_end_internal_real_time", "INFERENCE-END-INTERNAL-REAL-TIME", 1, 0, false);
	declareFunction("inference_pad_internal_real_time", "INFERENCE-PAD-INTERNAL-REAL-TIME", 1, 0, false);
	declareFunction("inference_cumulative_time", "INFERENCE-CUMULATIVE-TIME", 1, 0, false);
	declareFunction("inference_step_count", "INFERENCE-STEP-COUNT", 1, 0, false);
	declareFunction("inference_cumulative_step_count", "INFERENCE-CUMULATIVE-STEP-COUNT", 1, 0, false);
	declareFunction("inference_problem_working_time_data", "INFERENCE-PROBLEM-WORKING-TIME-DATA", 1, 0, false);
	declareFunction("inference_events", "INFERENCE-EVENTS", 1, 0, false);
	declareFunction("inference_accumulators", "INFERENCE-ACCUMULATORS", 1, 0, false);
	declareFunction("inference_proof_watermark", "INFERENCE-PROOF-WATERMARK", 1, 0, false);
	declareFunction("inference_type", "INFERENCE-TYPE", 1, 0, false);
	declareFunction("inference_data", "INFERENCE-DATA", 1, 0, false);
	declareFunction("set_inference_forward_propagate", "SET-INFERENCE-FORWARD-PROPAGATE", 2, 0, false);
	declareFunction("set_inference_input_mt", "SET-INFERENCE-INPUT-MT", 2, 0, false);
	declareFunction("set_inference_input_el_query", "SET-INFERENCE-INPUT-EL-QUERY", 2, 0, false);
	declareFunction("set_inference_input_non_explanatory_el_query", "SET-INFERENCE-INPUT-NON-EXPLANATORY-EL-QUERY", 2, 0, false);
	declareFunction("set_inference_input_query_properties", "SET-INFERENCE-INPUT-QUERY-PROPERTIES", 2, 0, false);
	declareFunction("set_inference_mt", "SET-INFERENCE-MT", 2, 0, false);
	declareFunction("set_inference_el_query", "SET-INFERENCE-EL-QUERY", 2, 0, false);
	declareFunction("set_inference_el_bindings", "SET-INFERENCE-EL-BINDINGS", 2, 0, false);
	declareFunction("set_inference_hl_query", "SET-INFERENCE-HL-QUERY", 2, 0, false);
	declareFunction("set_inference_explanatory_subquery", "SET-INFERENCE-EXPLANATORY-SUBQUERY", 2, 0, false);
	declareFunction("set_inference_non_explanatory_subquery", "SET-INFERENCE-NON-EXPLANATORY-SUBQUERY", 2, 0, false);
	declareFunction("set_inference_free_hl_vars", "SET-INFERENCE-FREE-HL-VARS", 2, 0, false);
	declareFunction("set_inference_hypothetical_bindings", "SET-INFERENCE-HYPOTHETICAL-BINDINGS", 2, 0, false);
	declareFunction("set_inference_status", "SET-INFERENCE-STATUS", 2, 0, false);
	declareFunction("set_inference_suspend_status", "SET-INFERENCE-SUSPEND-STATUS", 2, 0, false);
	declareFunction("set_inference_root_link", "SET-INFERENCE-ROOT-LINK", 2, 0, false);
	declareFunction("set_inference_control_process", "SET-INFERENCE-CONTROL-PROCESS", 2, 0, false);
	declareFunction("set_inference_max_transformation_depth_reached", "SET-INFERENCE-MAX-TRANSFORMATION-DEPTH-REACHED", 2, 0, false);
	declareFunction("set_inference_disjunction_free_el_vars_policy", "SET-INFERENCE-DISJUNCTION-FREE-EL-VARS-POLICY", 2, 0, false);
	declareFunction("set_inference_result_uniqueness_criterion", "SET-INFERENCE-RESULT-UNIQUENESS-CRITERION", 2, 0, false);
	declareFunction("set_inference_allow_hl_predicate_transformation", "SET-INFERENCE-ALLOW-HL-PREDICATE-TRANSFORMATION", 2, 0, false);
	declareFunction("set_inference_allow_unbound_predicate_transformation", "SET-INFERENCE-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION", 2, 0, false);
	declareFunction("set_inference_allow_evaluatable_predicate_transformation", "SET-INFERENCE-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION", 2, 0, false);
	declareFunction("set_inference_allow_indeterminate_results", "SET-INFERENCE-ALLOW-INDETERMINATE-RESULTS", 2, 0, false);
	declareFunction("set_inference_allowed_rules", "SET-INFERENCE-ALLOWED-RULES", 2, 0, false);
	declareFunction("set_inference_forbidden_rules", "SET-INFERENCE-FORBIDDEN-RULES", 2, 0, false);
	declareFunction("set_inference_allowed_modules", "SET-INFERENCE-ALLOWED-MODULES", 2, 0, false);
	declareFunction("set_inference_allow_abnormality_checking", "SET-INFERENCE-ALLOW-ABNORMALITY-CHECKING", 2, 0, false);
	declareFunction("set_inference_transitive_closure_mode", "SET-INFERENCE-TRANSITIVE-CLOSURE-MODE", 2, 0, false);
	declareFunction("set_inference_problem_store_private", "SET-INFERENCE-PROBLEM-STORE-PRIVATE", 2, 0, false);
	declareFunction("set_inference_continuable", "SET-INFERENCE-CONTINUABLE", 2, 0, false);
	declareFunction("set_inference_browsable", "SET-INFERENCE-BROWSABLE", 2, 0, false);
	declareFunction("set_inference_return_type", "SET-INFERENCE-RETURN-TYPE", 2, 0, false);
	declareFunction("set_inference_answer_language", "SET-INFERENCE-ANSWER-LANGUAGE", 2, 0, false);
	declareFunction("set_inference_cache_results", "SET-INFERENCE-CACHE-RESULTS", 2, 0, false);
	declareFunction("note_inference_blocking", "NOTE-INFERENCE-BLOCKING", 1, 0, false);
	declareFunction("clear_inference_blocking", "CLEAR-INFERENCE-BLOCKING", 1, 0, false);
	declareFunction("set_inference_max_number", "SET-INFERENCE-MAX-NUMBER", 2, 0, false);
	declareFunction("set_inference_max_time", "SET-INFERENCE-MAX-TIME", 2, 0, false);
	declareFunction("set_inference_max_step", "SET-INFERENCE-MAX-STEP", 2, 0, false);
	declareFunction("set_inference_mode", "SET-INFERENCE-MODE", 2, 0, false);
	declareFunction("set_inference_forward_max_time", "SET-INFERENCE-FORWARD-MAX-TIME", 2, 0, false);
	declareFunction("set_inference_max_proof_depth", "SET-INFERENCE-MAX-PROOF-DEPTH", 2, 0, false);
	declareFunction("set_inference_max_transformation_depth", "SET-INFERENCE-MAX-TRANSFORMATION-DEPTH", 2, 0, false);
	declareFunction("set_inference_probably_approximately_done", "SET-INFERENCE-PROBABLY-APPROXIMATELY-DONE", 2, 0, false);
	declareFunction("set_inference_metrics_template", "SET-INFERENCE-METRICS-TEMPLATE", 2, 0, false);
	declareFunction("set_inference_start_universal_time", "SET-INFERENCE-START-UNIVERSAL-TIME", 2, 0, false);
	declareFunction("set_inference_start_internal_real_time", "SET-INFERENCE-START-INTERNAL-REAL-TIME", 2, 0, false);
	declareFunction("set_inference_end_internal_real_time", "SET-INFERENCE-END-INTERNAL-REAL-TIME", 2, 0, false);
	declareFunction("set_inference_pad_internal_real_time", "SET-INFERENCE-PAD-INTERNAL-REAL-TIME", 2, 0, false);
	declareFunction("set_inference_cumulative_time", "SET-INFERENCE-CUMULATIVE-TIME", 2, 0, false);
	declareFunction("set_inference_step_count", "SET-INFERENCE-STEP-COUNT", 2, 0, false);
	declareFunction("increment_inference_step_count", "INCREMENT-INFERENCE-STEP-COUNT", 1, 0, false);
	declareFunction("set_inference_cumulative_step_count", "SET-INFERENCE-CUMULATIVE-STEP-COUNT", 2, 0, false);
	declareFunction("increment_inference_cumulative_step_count", "INCREMENT-INFERENCE-CUMULATIVE-STEP-COUNT", 1, 0, false);
	declareFunction("set_inference_problem_working_time_data", "SET-INFERENCE-PROBLEM-WORKING-TIME-DATA", 2, 0, false);
	declareFunction("set_inference_events", "SET-INFERENCE-EVENTS", 2, 0, false);
	declareFunction("set_inference_halt_conditions", "SET-INFERENCE-HALT-CONDITIONS", 2, 0, false);
	declareFunction("set_inference_type", "SET-INFERENCE-TYPE", 2, 0, false);
	declareFunction("set_inference_data", "SET-INFERENCE-DATA", 2, 0, false);
	declareFunction("inference_ids", "INFERENCE-IDS", 1, 0, false);
	declareMacro("with_inference_ids", "WITH-INFERENCE-IDS");
	declareFunction("inference_problem_store_suid", "INFERENCE-PROBLEM-STORE-SUID", 1, 0, false);
	declareFunction("all_inferences", "ALL-INFERENCES", 0, 0, false);
	declareFunction("inference_strategies", "INFERENCE-STRATEGIES", 1, 0, false);
	declareFunction("inference_hl_mts", "INFERENCE-HL-MTS", 1, 0, false);
	declareFunction("inference_first_hl_query_mt", "INFERENCE-FIRST-HL-QUERY-MT", 1, 0, false);
	declareFunction("inference_no_free_hl_varsP", "INFERENCE-NO-FREE-HL-VARS?", 1, 0, false);
	declareFunction("inference_free_el_vars", "INFERENCE-FREE-EL-VARS", 1, 0, false);
	declareFunction("inference_input_query_property", "INFERENCE-INPUT-QUERY-PROPERTY", 2, 1, false);
	declareFunction("inference_to_new_cyc_query_arguments", "INFERENCE-TO-NEW-CYC-QUERY-ARGUMENTS", 1, 0, false);
	declareFunction("inference_to_new_cyc_query_form", "INFERENCE-TO-NEW-CYC-QUERY-FORM", 1, 0, false);
	declareFunction("inference_to_new_cyc_query_form_string", "INFERENCE-TO-NEW-CYC-QUERY-FORM-STRING", 1, 0, false);
	declareFunction("inference_args_to_new_cyc_query_form_string", "INFERENCE-ARGS-TO-NEW-CYC-QUERY-FORM-STRING", 3, 0, false);
	declareFunction("inference_root_mapped_problem", "INFERENCE-ROOT-MAPPED-PROBLEM", 1, 0, false);
	declareFunction("inference_root_problem", "INFERENCE-ROOT-PROBLEM", 1, 0, false);
	declareFunction("inference_unique_wrt_proofsP", "INFERENCE-UNIQUE-WRT-PROOFS?", 1, 0, false);
	declareFunction("inference_unique_wrt_bindingsP", "INFERENCE-UNIQUE-WRT-BINDINGS?", 1, 0, false);
	declareFunction("inference_compute_answer_justificationsP", "INFERENCE-COMPUTE-ANSWER-JUSTIFICATIONS?", 1, 0, false);
	declareFunction("inference_computes_metricsP", "INFERENCE-COMPUTES-METRICS?", 1, 0, false);
	declareFunction("inference_computes_metricP", "INFERENCE-COMPUTES-METRIC?", 2, 0, false);
	declareFunction("inference_problem_store_private_wrt_dynamic_propertiesP", "INFERENCE-PROBLEM-STORE-PRIVATE-WRT-DYNAMIC-PROPERTIES?", 1, 0, false);
	declareFunction("inference_dynamic_properties_exhaustiveP", "INFERENCE-DYNAMIC-PROPERTIES-EXHAUSTIVE?", 1, 0, false);
	declareFunction("inference_allows_use_of_all_rulesP", "INFERENCE-ALLOWS-USE-OF-ALL-RULES?", 1, 0, false);
	declareFunction("inference_allows_use_of_ruleP", "INFERENCE-ALLOWS-USE-OF-RULE?", 2, 0, false);
	declareFunction("inference_filter_rules", "INFERENCE-FILTER-RULES", 2, 0, false);
	declareFunction("inference_allows_use_of_all_modulesP", "INFERENCE-ALLOWS-USE-OF-ALL-MODULES?", 1, 0, false);
	declareFunction("inference_allows_use_of_moduleP", "INFERENCE-ALLOWS-USE-OF-MODULE?", 2, 0, false);
	declareFunction("inference_forget_extra_resultsP", "INFERENCE-FORGET-EXTRA-RESULTS?", 1, 0, false);
	declareFunction("inference_has_some_answerP", "INFERENCE-HAS-SOME-ANSWER?", 1, 0, false);
	declareFunction("find_inference_answer_by_id", "FIND-INFERENCE-ANSWER-BY-ID", 2, 0, false);
	declareFunction("find_inference_answer_by_ids", "FIND-INFERENCE-ANSWER-BY-IDS", 3, 0, false);
	declareFunction("inference_first_answer", "INFERENCE-FIRST-ANSWER", 1, 0, false);
	declareFunction("inference_last_answer", "INFERENCE-LAST-ANSWER", 1, 0, false);
	declareFunction("inference_first_answer_elapsed_time", "INFERENCE-FIRST-ANSWER-ELAPSED-TIME", 1, 0, false);
	declareFunction("inference_first_answer_step_count", "INFERENCE-FIRST-ANSWER-STEP-COUNT", 1, 0, false);
	declareFunction("inference_last_answer_elapsed_time", "INFERENCE-LAST-ANSWER-ELAPSED-TIME", 1, 0, false);
	declareFunction("inference_last_answer_step_count", "INFERENCE-LAST-ANSWER-STEP-COUNT", 1, 0, false);
	declareFunction("inference_answer_count_at_elapsed_time", "INFERENCE-ANSWER-COUNT-AT-ELAPSED-TIME", 2, 0, false);
	declareFunction("inference_answer_count_at_30_seconds", "INFERENCE-ANSWER-COUNT-AT-30-SECONDS", 1, 0, false);
	declareFunction("inference_answer_count_at_60_seconds", "INFERENCE-ANSWER-COUNT-AT-60-SECONDS", 1, 0, false);
	declareFunction("inference_answer_times", "INFERENCE-ANSWER-TIMES", 1, 0, false);
	declareFunction("inference_answer_step_counts", "INFERENCE-ANSWER-STEP-COUNTS", 1, 0, false);
	declareFunction("inference_end_universal_time", "INFERENCE-END-UNIVERSAL-TIME", 1, 0, false);
	declareFunction("inference_maintain_term_working_setP", "INFERENCE-MAINTAIN-TERM-WORKING-SET?", 1, 0, false);
	declareFunction("inference_halt_condition_presentP", "INFERENCE-HALT-CONDITION-PRESENT?", 2, 0, false);
	declareFunction("add_inference_accumulator", "ADD-INFERENCE-ACCUMULATOR", 3, 0, false);
	declareFunction("inference_accumulator", "INFERENCE-ACCUMULATOR", 2, 0, false);
	declareFunction("inference_accumulator_contents", "INFERENCE-ACCUMULATOR-CONTENTS", 2, 0, false);
	declareFunction("inference_accumulate", "INFERENCE-ACCUMULATE", 3, 0, false);
	declareFunction("set_inference_proof_watermark", "SET-INFERENCE-PROOF-WATERMARK", 2, 0, false);
	declareFunction("compute_inference_pad_internal_real_time", "COMPUTE-INFERENCE-PAD-INTERNAL-REAL-TIME", 1, 0, false);
	declareFunction("initialize_pad_table", "INITIALIZE-PAD-TABLE", 1, 0, false);
	declareFunction("pad_table_initializedP", "PAD-TABLE-INITIALIZED?", 0, 0, false);
	declareFunction("probably_approximately_done_cutoff_time", "PROBABLY-APPROXIMATELY-DONE-CUTOFF-TIME", 1, 0, false);
	declareFunction("compute_pad_from_time", "COMPUTE-PAD-FROM-TIME", 1, 0, false);
	declareFunction("inference_note_transformation_depth", "INFERENCE-NOTE-TRANSFORMATION-DEPTH", 2, 0, false);
	declareFunction("inference_note_new_transformation_depth_reached", "INFERENCE-NOTE-NEW-TRANSFORMATION-DEPTH-REACHED", 2, 0, false);
	declareFunction("find_inference_answer_by_bindings", "FIND-INFERENCE-ANSWER-BY-BINDINGS", 2, 0, false);
	declareFunction("new_inference_answer_id", "NEW-INFERENCE-ANSWER-ID", 1, 0, false);
	declareFunction("inference_all_answers", "INFERENCE-ALL-ANSWERS", 1, 0, false);
	declareFunction("inference_all_new_answers", "INFERENCE-ALL-NEW-ANSWERS", 1, 0, false);
	declareFunction("inference_allowed_rules_list", "INFERENCE-ALLOWED-RULES-LIST", 1, 0, false);
	declareFunction("inference_allowed_rule_count", "INFERENCE-ALLOWED-RULE-COUNT", 1, 0, false);
	declareFunction("inference_forbidden_rules_list", "INFERENCE-FORBIDDEN-RULES-LIST", 1, 0, false);
	declareFunction("inference_forbidden_rule_count", "INFERENCE-FORBIDDEN-RULE-COUNT", 1, 0, false);
	declareFunction("inference_interrupt_signaledP", "INFERENCE-INTERRUPT-SIGNALED?", 1, 0, false);
	declareFunction("inference_no_interrupt_signaledP", "INFERENCE-NO-INTERRUPT-SIGNALED?", 1, 0, false);
	declareFunction("inference_interrupt_handledP", "INFERENCE-INTERRUPT-HANDLED?", 1, 0, false);
	declareFunction("inference_answer_count", "INFERENCE-ANSWER-COUNT", 1, 0, false);
	declareFunction("inference_new_answer_count", "INFERENCE-NEW-ANSWER-COUNT", 1, 0, false);
	declareFunction("inference_new_justification_count", "INFERENCE-NEW-JUSTIFICATION-COUNT", 1, 0, false);
	declareFunction("inference_new_result_count", "INFERENCE-NEW-RESULT-COUNT", 1, 0, false);
	declareFunction("forward_inference_p", "FORWARD-INFERENCE-P", 1, 0, false);
	declareFunction("backward_inference_p", "BACKWARD-INFERENCE-P", 1, 0, false);
	declareFunction("abductive_inference_p", "ABDUCTIVE-INFERENCE-P", 1, 0, false);
	declareFunction("inference_provability_status", "INFERENCE-PROVABILITY-STATUS", 1, 0, false);
	declareFunction("good_inference_p", "GOOD-INFERENCE-P", 1, 0, false);
	declareFunction("neutral_inference_p", "NEUTRAL-INFERENCE-P", 1, 0, false);
	declareFunction("no_good_inference_p", "NO-GOOD-INFERENCE-P", 1, 0, false);
	declareFunction("closed_inference_p", "CLOSED-INFERENCE-P", 1, 0, false);
	declareFunction("inference_set_static_properties", "INFERENCE-SET-STATIC-PROPERTIES", 2, 0, false);
	declareFunction("update_inference_input_query_properties", "UPDATE-INFERENCE-INPUT-QUERY-PROPERTIES", 2, 0, false);
	declareFunction("add_inference_relevant_problem", "ADD-INFERENCE-RELEVANT-PROBLEM", 2, 0, false);
	declareFunction("remove_inference_relevant_problem", "REMOVE-INFERENCE-RELEVANT-PROBLEM", 2, 0, false);
	declareFunction("clear_inference_relevant_problems", "CLEAR-INFERENCE-RELEVANT-PROBLEMS", 1, 0, false);
	declareFunction("add_inference_strategy", "ADD-INFERENCE-STRATEGY", 2, 0, false);
	declareFunction("remove_inference_strategy", "REMOVE-INFERENCE-STRATEGY", 2, 0, false);
	declareFunction("clear_inference_strategy_set", "CLEAR-INFERENCE-STRATEGY-SET", 1, 0, false);
	declareFunction("reset_inference_new_answer_id", "RESET-INFERENCE-NEW-ANSWER-ID", 1, 0, false);
	declareFunction("inference_next_new_answer_id", "INFERENCE-NEXT-NEW-ANSWER-ID", 1, 0, false);
	declareFunction("add_inference_new_answer_by_id", "ADD-INFERENCE-NEW-ANSWER-BY-ID", 2, 0, false);
	declareFunction("remove_inference_new_answer_by_id", "REMOVE-INFERENCE-NEW-ANSWER-BY-ID", 2, 0, false);
	declareFunction("add_inference_new_answer_by_bindings", "ADD-INFERENCE-NEW-ANSWER-BY-BINDINGS", 2, 0, false);
	declareFunction("remove_inference_new_answer_by_bindings", "REMOVE-INFERENCE-NEW-ANSWER-BY-BINDINGS", 2, 0, false);
	declareFunction("reset_inference_new_answer_justifications", "RESET-INFERENCE-NEW-ANSWER-JUSTIFICATIONS", 1, 0, false);
	declareFunction("add_inference_new_answer_justification", "ADD-INFERENCE-NEW-ANSWER-JUSTIFICATION", 2, 0, false);
	declareFunction("remove_inference_new_answer_justification", "REMOVE-INFERENCE-NEW-ANSWER-JUSTIFICATION", 2, 0, false);
	declareFunction("clear_inference_control_process", "CLEAR-INFERENCE-CONTROL-PROCESS", 1, 0, false);
	declareFunction("set_inference_control_process_to_me", "SET-INFERENCE-CONTROL-PROCESS-TO-ME", 1, 0, false);
	declareFunction("note_inference_interrupt_signaled", "NOTE-INFERENCE-INTERRUPT-SIGNALED", 2, 0, false);
	declareFunction("increment_inference_cumulative_time", "INCREMENT-INFERENCE-CUMULATIVE-TIME", 2, 0, false);
	declareFunction("reorder_inference_free_hl_vars", "REORDER-INFERENCE-FREE-HL-VARS", 2, 0, false);
	declareFunction("reorder_inference_free_el_vars", "REORDER-INFERENCE-FREE-EL-VARS", 2, 0, false);
	declareFunction("reset_inference_new_answers", "RESET-INFERENCE-NEW-ANSWERS", 1, 0, false);
	declareFunction("add_inference_new_answer", "ADD-INFERENCE-NEW-ANSWER", 2, 0, false);
	declareFunction("remove_inference_new_answer", "REMOVE-INFERENCE-NEW-ANSWER", 2, 0, false);
	declareFunction("initialize_inference_time_properties", "INITIALIZE-INFERENCE-TIME-PROPERTIES", 1, 0, false);
	declareFunction("finalize_inference_time_properties", "FINALIZE-INFERENCE-TIME-PROPERTIES", 1, 0, false);
	declareFunction("inference_elapsed_internal_real_time_since_start", "INFERENCE-ELAPSED-INTERNAL-REAL-TIME-SINCE-START", 1, 0, false);
	declareFunction("inference_elapsed_universal_time_since_start", "INFERENCE-ELAPSED-UNIVERSAL-TIME-SINCE-START", 1, 0, false);
	declareFunction("inference_time_so_far", "INFERENCE-TIME-SO-FAR", 1, 1, false);
	declareFunction("inference_remaining_time", "INFERENCE-REMAINING-TIME", 1, 1, false);
	declareFunction("inference_cumulative_time_so_far", "INFERENCE-CUMULATIVE-TIME-SO-FAR", 1, 1, false);
	declareFunction("inference_signal_interrupt", "INFERENCE-SIGNAL-INTERRUPT", 1, 0, false);
	declareFunction("inference_handle_interrupts", "INFERENCE-HANDLE-INTERRUPTS", 1, 0, false);
	declareFunction("simplest_inference_p", "SIMPLEST-INFERENCE-P", 1, 0, false);
	declareFunction("new_simplest_inference", "NEW-SIMPLEST-INFERENCE", 1, 0, false);
	declareFunction("simplest_inference_strategy", "SIMPLEST-INFERENCE-STRATEGY", 1, 0, false);
	declareFunction("set_simplest_inference_strategy", "SET-SIMPLEST-INFERENCE-STRATEGY", 2, 0, false);
	declareFunction("new_simplest_inference_of_type", "NEW-SIMPLEST-INFERENCE-OF-TYPE", 2, 0, false);
	declareFunction("new_simplest_inference_with_new_store", "NEW-SIMPLEST-INFERENCE-WITH-NEW-STORE", 1, 0, false);
	declareFunction("inference_answer_print_function_trampoline", "INFERENCE-ANSWER-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
	declareFunction("inference_answer_p", "INFERENCE-ANSWER-P", 1, 0, false);
	new com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_answer_p$UnaryFunction();
	declareFunction("inf_answer_suid", "INF-ANSWER-SUID", 1, 0, false);
	declareFunction("inf_answer_inference", "INF-ANSWER-INFERENCE", 1, 0, false);
	declareFunction("inf_answer_bindings", "INF-ANSWER-BINDINGS", 1, 0, false);
	declareFunction("inf_answer_justifications", "INF-ANSWER-JUSTIFICATIONS", 1, 0, false);
	declareFunction("inf_answer_elapsed_creation_time", "INF-ANSWER-ELAPSED-CREATION-TIME", 1, 0, false);
	declareFunction("inf_answer_step_count", "INF-ANSWER-STEP-COUNT", 1, 0, false);
	declareFunction("_csetf_inf_answer_suid", "_CSETF-INF-ANSWER-SUID", 2, 0, false);
	declareFunction("_csetf_inf_answer_inference", "_CSETF-INF-ANSWER-INFERENCE", 2, 0, false);
	declareFunction("_csetf_inf_answer_bindings", "_CSETF-INF-ANSWER-BINDINGS", 2, 0, false);
	declareFunction("_csetf_inf_answer_justifications", "_CSETF-INF-ANSWER-JUSTIFICATIONS", 2, 0, false);
	declareFunction("_csetf_inf_answer_elapsed_creation_time", "_CSETF-INF-ANSWER-ELAPSED-CREATION-TIME", 2, 0, false);
	declareFunction("_csetf_inf_answer_step_count", "_CSETF-INF-ANSWER-STEP-COUNT", 2, 0, false);
	declareFunction("make_inference_answer", "MAKE-INFERENCE-ANSWER", 0, 1, false);
	declareFunction("valid_inference_answer_p", "VALID-INFERENCE-ANSWER-P", 1, 0, false);
	declareFunction("inference_answer_invalid_p", "INFERENCE-ANSWER-INVALID-P", 1, 0, false);
	declareFunction("print_inference_answer", "PRINT-INFERENCE-ANSWER", 3, 0, false);
	declareFunction("sxhash_inference_answer_method", "SXHASH-INFERENCE-ANSWER-METHOD", 1, 0, false);
	declareFunction("new_inference_answer", "NEW-INFERENCE-ANSWER", 2, 0, false);
	declareFunction("find_or_create_inference_answer", "FIND-OR-CREATE-INFERENCE-ANSWER", 2, 0, false);
	declareMacro("do_inference_answer_justifications", "DO-INFERENCE-ANSWER-JUSTIFICATIONS");
	declareMacro("do_inference_answer_justifications_numbered", "DO-INFERENCE-ANSWER-JUSTIFICATIONS-NUMBERED");
	declareFunction("destroy_inference_answer", "DESTROY-INFERENCE-ANSWER", 1, 0, false);
	declareFunction("destroy_inference_answer_int", "DESTROY-INFERENCE-ANSWER-INT", 1, 0, false);
	declareFunction("note_inference_answer_invalid", "NOTE-INFERENCE-ANSWER-INVALID", 1, 0, false);
	declareFunction("inference_answer_suid", "INFERENCE-ANSWER-SUID", 1, 0, false);
	declareFunction("inference_answer_inference", "INFERENCE-ANSWER-INFERENCE", 1, 0, false);
	declareFunction("inference_answer_bindings", "INFERENCE-ANSWER-BINDINGS", 1, 0, false);
	declareFunction("inference_answer_justifications", "INFERENCE-ANSWER-JUSTIFICATIONS", 1, 0, false);
	declareFunction("inference_answer_elapsed_creation_time", "INFERENCE-ANSWER-ELAPSED-CREATION-TIME", 1, 0, false);
	declareFunction("inference_answer_step_count", "INFERENCE-ANSWER-STEP-COUNT", 1, 0, false);
	declareFunction("set_inference_answer_bindings", "SET-INFERENCE-ANSWER-BINDINGS", 2, 0, false);
	declareFunction("set_inference_answer_elapsed_creation_time", "SET-INFERENCE-ANSWER-ELAPSED-CREATION-TIME", 2, 0, false);
	declareFunction("set_inference_answer_step_count", "SET-INFERENCE-ANSWER-STEP-COUNT", 2, 0, false);
	declareFunction("inference_answer_problem_store", "INFERENCE-ANSWER-PROBLEM-STORE", 1, 0, false);
	declareFunction("inference_answer_free_el_vars", "INFERENCE-ANSWER-FREE-EL-VARS", 1, 0, false);
	declareFunction("inference_answer_elapsed_time", "INFERENCE-ANSWER-ELAPSED-TIME", 1, 1, false);
	declareFunction("inference_answer_creation_time", "INFERENCE-ANSWER-CREATION-TIME", 1, 0, false);
	declareFunction("find_inference_answer_justification", "FIND-INFERENCE-ANSWER-JUSTIFICATION", 2, 0, false);
	declareFunction("inference_answer_result_bindings", "INFERENCE-ANSWER-RESULT-BINDINGS", 1, 0, false);
	declareFunction("inference_answer_bindings_equalP", "INFERENCE-ANSWER-BINDINGS-EQUAL?", 2, 0, false);
	declareFunction("inference_answer_newP", "INFERENCE-ANSWER-NEW?", 1, 0, false);
	declareFunction("inference_answer_L", "INFERENCE-ANSWER-<", 2, 0, false);
	declareFunction("inference_answer_el_sentence", "INFERENCE-ANSWER-EL-SENTENCE", 1, 0, false);
	declareFunction("add_inference_answer_justification", "ADD-INFERENCE-ANSWER-JUSTIFICATION", 2, 0, false);
	declareFunction("remove_inference_answer_justification", "REMOVE-INFERENCE-ANSWER-JUSTIFICATION", 2, 0, false);
	declareFunction("initialize_inference_answer_elapsed_creation_time", "INITIALIZE-INFERENCE-ANSWER-ELAPSED-CREATION-TIME", 1, 0, false);
	declareFunction("inference_answer_justification_print_function_trampoline", "INFERENCE-ANSWER-JUSTIFICATION-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
	declareFunction("inference_answer_justification_p", "INFERENCE-ANSWER-JUSTIFICATION-P", 1, 0, false);
	new com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_answer_justification_p$UnaryFunction();
	declareFunction("inf_ans_just_answer", "INF-ANS-JUST-ANSWER", 1, 0, false);
	declareFunction("inf_ans_just_supports", "INF-ANS-JUST-SUPPORTS", 1, 0, false);
	declareFunction("inf_ans_just_proofs", "INF-ANS-JUST-PROOFS", 1, 0, false);
	declareFunction("_csetf_inf_ans_just_answer", "_CSETF-INF-ANS-JUST-ANSWER", 2, 0, false);
	declareFunction("_csetf_inf_ans_just_supports", "_CSETF-INF-ANS-JUST-SUPPORTS", 2, 0, false);
	declareFunction("_csetf_inf_ans_just_proofs", "_CSETF-INF-ANS-JUST-PROOFS", 2, 0, false);
	declareFunction("make_inference_answer_justification", "MAKE-INFERENCE-ANSWER-JUSTIFICATION", 0, 1, false);
	declareFunction("valid_inference_answer_justification_p", "VALID-INFERENCE-ANSWER-JUSTIFICATION-P", 1, 0, false);
	declareFunction("inference_answer_justification_invalid_p", "INFERENCE-ANSWER-JUSTIFICATION-INVALID-P", 1, 0, false);
	declareFunction("print_inference_answer_justification", "PRINT-INFERENCE-ANSWER-JUSTIFICATION", 3, 0, false);
	declareFunction("sxhash_inference_answer_justification_method", "SXHASH-INFERENCE-ANSWER-JUSTIFICATION-METHOD", 1, 0, false);
	declareFunction("list_of_inference_answer_justification_p", "LIST-OF-INFERENCE-ANSWER-JUSTIFICATION-P", 1, 0, false);
	declareFunction("new_inference_answer_justification", "NEW-INFERENCE-ANSWER-JUSTIFICATION", 2, 0, false);
	declareFunction("find_or_create_inference_answer_justification", "FIND-OR-CREATE-INFERENCE-ANSWER-JUSTIFICATION", 3, 0, false);
	declareFunction("destroy_inference_answer_justification", "DESTROY-INFERENCE-ANSWER-JUSTIFICATION", 1, 0, false);
	declareFunction("destroy_inference_answer_justification_int", "DESTROY-INFERENCE-ANSWER-JUSTIFICATION-INT", 1, 0, false);
	declareFunction("note_inference_answer_justification_invalid", "NOTE-INFERENCE-ANSWER-JUSTIFICATION-INVALID", 1, 0, false);
	declareFunction("inference_answer_justification_answer", "INFERENCE-ANSWER-JUSTIFICATION-ANSWER", 1, 0, false);
	declareFunction("inference_answer_justification_supports", "INFERENCE-ANSWER-JUSTIFICATION-SUPPORTS", 1, 0, false);
	new com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference.$inference_answer_justification_supports$UnaryFunction();
	declareFunction("inference_answer_justification_proofs", "INFERENCE-ANSWER-JUSTIFICATION-PROOFS", 1, 0, false);
	declareMacro("do_inference_answer_justification_proofs", "DO-INFERENCE-ANSWER-JUSTIFICATION-PROOFS");
	declareMacro("do_proof_dependent_inference_answer_justifications", "DO-PROOF-DEPENDENT-INFERENCE-ANSWER-JUSTIFICATIONS");
	declareMacro("do_inference_all_subproofs", "DO-INFERENCE-ALL-SUBPROOFS");
	declareFunction("inference_answer_first_justification", "INFERENCE-ANSWER-FIRST-JUSTIFICATION", 1, 0, false);
	declareFunction("inference_answer_justification_first_proof", "INFERENCE-ANSWER-JUSTIFICATION-FIRST-PROOF", 1, 0, false);
	declareFunction("inference_first_proof", "INFERENCE-FIRST-PROOF", 1, 0, false);
	declareFunction("inference_answer_justification_inference", "INFERENCE-ANSWER-JUSTIFICATION-INFERENCE", 1, 0, false);
	declareFunction("inference_answer_justification_store", "INFERENCE-ANSWER-JUSTIFICATION-STORE", 1, 0, false);
	declareFunction("inference_answer_justification_rules", "INFERENCE-ANSWER-JUSTIFICATION-RULES", 1, 0, false);
	declareFunction("add_inference_answer_justification_proof", "ADD-INFERENCE-ANSWER-JUSTIFICATION-PROOF", 2, 0, false);
	declareFunction("new_inference_answer_justification_from_proof", "NEW-INFERENCE-ANSWER-JUSTIFICATION-FROM-PROOF", 3, 0, false);
	declareFunction("inference_answer_justification_to_tms_deduction_spec", "INFERENCE-ANSWER-JUSTIFICATION-TO-TMS-DEDUCTION-SPEC", 2, 0, false);
	declareFunction("inference_answer_justification_to_true_tms_deduction_spec", "INFERENCE-ANSWER-JUSTIFICATION-TO-TRUE-TMS-DEDUCTION-SPEC", 1, 0, false);
	declareFunction("inference_answer_justification_to_false_tms_deduction_spec", "INFERENCE-ANSWER-JUSTIFICATION-TO-FALSE-TMS-DEDUCTION-SPEC", 1, 0, false);
	declareFunction("destroy_proof_inference_answer_justifications", "DESTROY-PROOF-INFERENCE-ANSWER-JUSTIFICATIONS", 1, 0, false);
	declareFunction("inference_time_per_answer", "INFERENCE-TIME-PER-ANSWER", 1, 0, false);
	declareFunction("inference_steps_per_answer", "INFERENCE-STEPS-PER-ANSWER", 1, 0, false);
	declareFunction("inference_wasted_time_after_last_answer", "INFERENCE-WASTED-TIME-AFTER-LAST-ANSWER", 1, 0, false);
	declareFunction("inference_latency_improvement_from_iterativity", "INFERENCE-LATENCY-IMPROVEMENT-FROM-ITERATIVITY", 1, 0, false);
	declareFunction("inference_compute_metrics", "INFERENCE-COMPUTE-METRICS", 1, 0, false);
	declareFunction("inference_compute_metrics_plist", "INFERENCE-COMPUTE-METRICS-PLIST", 2, 0, false);
	declareFunction("inference_compute_metrics_alist", "INFERENCE-COMPUTE-METRICS-ALIST", 2, 0, false);
	declareFunction("inference_transformation_rules_in_answers", "INFERENCE-TRANSFORMATION-RULES-IN-ANSWERS", 1, 0, false);
	declareFunction("inference_all_answer_proofs", "INFERENCE-ALL-ANSWER-PROOFS", 1, 0, false);
	declareFunction("inference_all_answer_subproofs", "INFERENCE-ALL-ANSWER-SUBPROOFS", 1, 0, false);
	declareFunction("inference_all_answer_modules", "INFERENCE-ALL-ANSWER-MODULES", 1, 0, false);
	declareFunction("problem_relevant_to_some_strategyP", "PROBLEM-RELEVANT-TO-SOME-STRATEGY?", 1, 0, false);
	declareFunction("first_problem_relevant_strategy", "FIRST-PROBLEM-RELEVANT-STRATEGY", 1, 0, false);
	declareFunction("problem_or_inference_p", "PROBLEM-OR-INFERENCE-P", 1, 0, false);
	declareMacro("with_inference_problem_working_time_table", "WITH-INFERENCE-PROBLEM-WORKING-TIME-TABLE");
	declareFunction("inference_problem_working_time_lock", "INFERENCE-PROBLEM-WORKING-TIME-LOCK", 1, 0, false);
	declareFunction("inference_problem_working_time_table", "INFERENCE-PROBLEM-WORKING-TIME-TABLE", 1, 0, false);
	declareFunction("initialize_inference_problem_working_time_data", "INITIALIZE-INFERENCE-PROBLEM-WORKING-TIME-DATA", 1, 0, false);
	declareFunction("inference_note_tactic_executed", "INFERENCE-NOTE-TACTIC-EXECUTED", 2, 0, false);
	declareFunction("inference_note_problem_pending", "INFERENCE-NOTE-PROBLEM-PENDING", 2, 0, false);
	declareFunction("signal_inference_eventP", "SIGNAL-INFERENCE-EVENT?", 2, 0, false);
	declareFunction("possibly_signal_new_inference_answer", "POSSIBLY-SIGNAL-NEW-INFERENCE-ANSWER", 2, 0, false);
	declareFunction("signal_new_inference_answer", "SIGNAL-NEW-INFERENCE-ANSWER", 2, 0, false);
	declareFunction("possibly_signal_inference_status_change", "POSSIBLY-SIGNAL-INFERENCE-STATUS-CHANGE", 1, 0, false);
	declareFunction("signal_inference_status_change", "SIGNAL-INFERENCE-STATUS-CHANGE", 2, 0, false);
	declareFunction("possibly_signal_inference_new_transformation_depth_reached", "POSSIBLY-SIGNAL-INFERENCE-NEW-TRANSFORMATION-DEPTH-REACHED", 2, 0, false);
	declareFunction("signal_inference_new_transformation_depth_reached", "SIGNAL-INFERENCE-NEW-TRANSFORMATION-DEPTH-REACHED", 2, 0, false);
	declareMacro("inference_within_sksi_query_execution", "INFERENCE-WITHIN-SKSI-QUERY-EXECUTION");
	declareFunction("possibly_signal_sksi_query_start", "POSSIBLY-SIGNAL-SKSI-QUERY-START", 2, 0, false);
	declareFunction("possibly_signal_sksi_query_end", "POSSIBLY-SIGNAL-SKSI-QUERY-END", 2, 0, false);
	declareFunction("possibly_increment_inference_sksi_query_total_time", "POSSIBLY-INCREMENT-INFERENCE-SKSI-QUERY-TOTAL-TIME", 2, 0, false);
	declareFunction("possibly_add_inference_sksi_query_start_time", "POSSIBLY-ADD-INFERENCE-SKSI-QUERY-START-TIME", 2, 0, false);
	declareFunction("possibly_signal_sksi_query", "POSSIBLY-SIGNAL-SKSI-QUERY", 3, 1, false);
	declareFunction("signal_sksi_query", "SIGNAL-SKSI-QUERY", 3, 1, false);
	declareMacro("inference_within_sparql_query_execution", "INFERENCE-WITHIN-SPARQL-QUERY-EXECUTION");
	declareFunction("possibly_add_inference_sparql_query_profile", "POSSIBLY-ADD-INFERENCE-SPARQL-QUERY-PROFILE", 4, 0, false);
	declareFunction("increment_inference_sksi_query_total_time", "INCREMENT-INFERENCE-SKSI-QUERY-TOTAL-TIME", 2, 0, false);
	declareFunction("add_inference_sksi_query_start_time", "ADD-INFERENCE-SKSI-QUERY-START-TIME", 2, 0, false);
	declareFunction("add_inference_sparql_query_profile", "ADD-INFERENCE-SPARQL-QUERY-PROFILE", 2, 0, false);
	return NIL;
    }

    public static SubLObject declare_inference_datastructures_inference_file() {
	if (SubLFiles.USE_V1) {
	    declareFunction("inference_type_p", "INFERENCE-TYPE-P", 1, 0, false);
	    declareFunction("inference_print_function_trampoline", "INFERENCE-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
	    declareFunction("inference_p", "INFERENCE-P", 1, 0, false);
	    new inference_datastructures_inference.$inference_p$UnaryFunction();
	    declareFunction("infrnc_suid", "INFRNC-SUID", 1, 0, false);
	    declareFunction("infrnc_problem_store", "INFRNC-PROBLEM-STORE", 1, 0, false);
	    declareFunction("infrnc_forward_propagate", "INFRNC-FORWARD-PROPAGATE", 1, 0, false);
	    declareFunction("infrnc_input_mt", "INFRNC-INPUT-MT", 1, 0, false);
	    declareFunction("infrnc_input_el_query", "INFRNC-INPUT-EL-QUERY", 1, 0, false);
	    declareFunction("infrnc_input_non_explanatory_el_query", "INFRNC-INPUT-NON-EXPLANATORY-EL-QUERY", 1, 0, false);
	    declareFunction("infrnc_input_query_properties", "INFRNC-INPUT-QUERY-PROPERTIES", 1, 0, false);
	    declareFunction("infrnc_mt", "INFRNC-MT", 1, 0, false);
	    declareFunction("infrnc_el_query", "INFRNC-EL-QUERY", 1, 0, false);
	    declareFunction("infrnc_el_bindings", "INFRNC-EL-BINDINGS", 1, 0, false);
	    declareFunction("infrnc_hl_query", "INFRNC-HL-QUERY", 1, 0, false);
	    declareFunction("infrnc_explanatory_subquery", "INFRNC-EXPLANATORY-SUBQUERY", 1, 0, false);
	    declareFunction("infrnc_non_explanatory_subquery", "INFRNC-NON-EXPLANATORY-SUBQUERY", 1, 0, false);
	    declareFunction("infrnc_free_hl_vars", "INFRNC-FREE-HL-VARS", 1, 0, false);
	    declareFunction("infrnc_hypothetical_bindings", "INFRNC-HYPOTHETICAL-BINDINGS", 1, 0, false);
	    declareFunction("infrnc_answer_id_index", "INFRNC-ANSWER-ID-INDEX", 1, 0, false);
	    declareFunction("infrnc_answer_bindings_index", "INFRNC-ANSWER-BINDINGS-INDEX", 1, 0, false);
	    declareFunction("infrnc_new_answer_id_start", "INFRNC-NEW-ANSWER-ID-START", 1, 0, false);
	    declareFunction("infrnc_new_answer_justifications", "INFRNC-NEW-ANSWER-JUSTIFICATIONS", 1, 0, false);
	    declareFunction("infrnc_status", "INFRNC-STATUS", 1, 0, false);
	    declareFunction("infrnc_suspend_status", "INFRNC-SUSPEND-STATUS", 1, 0, false);
	    declareFunction("infrnc_root_link", "INFRNC-ROOT-LINK", 1, 0, false);
	    declareFunction("infrnc_relevant_problems", "INFRNC-RELEVANT-PROBLEMS", 1, 0, false);
	    declareFunction("infrnc_strategy_set", "INFRNC-STRATEGY-SET", 1, 0, false);
	    declareFunction("infrnc_control_process", "INFRNC-CONTROL-PROCESS", 1, 0, false);
	    declareFunction("infrnc_interrupting_processes", "INFRNC-INTERRUPTING-PROCESSES", 1, 0, false);
	    declareFunction("infrnc_max_transformation_depth_reached", "INFRNC-MAX-TRANSFORMATION-DEPTH-REACHED", 1, 0, false);
	    declareFunction("infrnc_disjunction_free_el_vars_policy", "INFRNC-DISJUNCTION-FREE-EL-VARS-POLICY", 1, 0, false);
	    declareFunction("infrnc_result_uniqueness_criterion", "INFRNC-RESULT-UNIQUENESS-CRITERION", 1, 0, false);
	    declareFunction("infrnc_allow_hl_predicate_transformationP", "INFRNC-ALLOW-HL-PREDICATE-TRANSFORMATION?", 1, 0, false);
	    declareFunction("infrnc_allow_unbound_predicate_transformationP", "INFRNC-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?", 1, 0, false);
	    declareFunction("infrnc_allow_evaluatable_predicate_transformationP", "INFRNC-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?", 1, 0, false);
	    declareFunction("infrnc_allow_indeterminate_resultsP", "INFRNC-ALLOW-INDETERMINATE-RESULTS?", 1, 0, false);
	    declareFunction("infrnc_allowed_rules", "INFRNC-ALLOWED-RULES", 1, 0, false);
	    declareFunction("infrnc_forbidden_rules", "INFRNC-FORBIDDEN-RULES", 1, 0, false);
	    declareFunction("infrnc_allowed_modules", "INFRNC-ALLOWED-MODULES", 1, 0, false);
	    declareFunction("infrnc_allow_abnormality_checkingP", "INFRNC-ALLOW-ABNORMALITY-CHECKING?", 1, 0, false);
	    declareFunction("infrnc_transitive_closure_mode", "INFRNC-TRANSITIVE-CLOSURE-MODE", 1, 0, false);
	    declareFunction("infrnc_problem_store_privateP", "INFRNC-PROBLEM-STORE-PRIVATE?", 1, 0, false);
	    declareFunction("infrnc_continuableP", "INFRNC-CONTINUABLE?", 1, 0, false);
	    declareFunction("infrnc_browsableP", "INFRNC-BROWSABLE?", 1, 0, false);
	    declareFunction("infrnc_return_type", "INFRNC-RETURN-TYPE", 1, 0, false);
	    declareFunction("infrnc_answer_language", "INFRNC-ANSWER-LANGUAGE", 1, 0, false);
	    declareFunction("infrnc_cache_resultsP", "INFRNC-CACHE-RESULTS?", 1, 0, false);
	    declareFunction("infrnc_blockingP", "INFRNC-BLOCKING?", 1, 0, false);
	    declareFunction("infrnc_max_number", "INFRNC-MAX-NUMBER", 1, 0, false);
	    declareFunction("infrnc_max_time", "INFRNC-MAX-TIME", 1, 0, false);
	    declareFunction("infrnc_max_step", "INFRNC-MAX-STEP", 1, 0, false);
	    declareFunction("infrnc_mode", "INFRNC-MODE", 1, 0, false);
	    declareFunction("infrnc_forward_max_time", "INFRNC-FORWARD-MAX-TIME", 1, 0, false);
	    declareFunction("infrnc_max_proof_depth", "INFRNC-MAX-PROOF-DEPTH", 1, 0, false);
	    declareFunction("infrnc_max_transformation_depth", "INFRNC-MAX-TRANSFORMATION-DEPTH", 1, 0, false);
	    declareFunction("infrnc_min_rule_utility", "INFRNC-MIN-RULE-UTILITY", 1, 0, false);
	    declareFunction("infrnc_probably_approximately_done", "INFRNC-PROBABLY-APPROXIMATELY-DONE", 1, 0, false);
	    declareFunction("infrnc_metrics_template", "INFRNC-METRICS-TEMPLATE", 1, 0, false);
	    declareFunction("infrnc_start_universal_time", "INFRNC-START-UNIVERSAL-TIME", 1, 0, false);
	    declareFunction("infrnc_start_internal_real_time", "INFRNC-START-INTERNAL-REAL-TIME", 1, 0, false);
	    declareFunction("infrnc_end_internal_real_time", "INFRNC-END-INTERNAL-REAL-TIME", 1, 0, false);
	    declareFunction("infrnc_pad_internal_real_time", "INFRNC-PAD-INTERNAL-REAL-TIME", 1, 0, false);
	    declareFunction("infrnc_hypothesization_time", "INFRNC-HYPOTHESIZATION-TIME", 1, 0, false);
	    declareFunction("infrnc_cumulative_time", "INFRNC-CUMULATIVE-TIME", 1, 0, false);
	    declareFunction("infrnc_step_count", "INFRNC-STEP-COUNT", 1, 0, false);
	    declareFunction("infrnc_cumulative_step_count", "INFRNC-CUMULATIVE-STEP-COUNT", 1, 0, false);
	    declareFunction("infrnc_events", "INFRNC-EVENTS", 1, 0, false);
	    declareFunction("infrnc_halt_conditions", "INFRNC-HALT-CONDITIONS", 1, 0, false);
	    declareFunction("infrnc_accumulators", "INFRNC-ACCUMULATORS", 1, 0, false);
	    declareFunction("infrnc_proof_watermark", "INFRNC-PROOF-WATERMARK", 1, 0, false);
	    declareFunction("infrnc_problem_working_time_data", "INFRNC-PROBLEM-WORKING-TIME-DATA", 1, 0, false);
	    declareFunction("infrnc_type", "INFRNC-TYPE", 1, 0, false);
	    declareFunction("infrnc_data", "INFRNC-DATA", 1, 0, false);
	    declareFunction("infrnc_properties", "INFRNC-PROPERTIES", 1, 0, false);
	    declareFunction("_csetf_infrnc_suid", "_CSETF-INFRNC-SUID", 2, 0, false);
	    declareFunction("_csetf_infrnc_problem_store", "_CSETF-INFRNC-PROBLEM-STORE", 2, 0, false);
	    declareFunction("_csetf_infrnc_forward_propagate", "_CSETF-INFRNC-FORWARD-PROPAGATE", 2, 0, false);
	    declareFunction("_csetf_infrnc_input_mt", "_CSETF-INFRNC-INPUT-MT", 2, 0, false);
	    declareFunction("_csetf_infrnc_input_el_query", "_CSETF-INFRNC-INPUT-EL-QUERY", 2, 0, false);
	    declareFunction("_csetf_infrnc_input_non_explanatory_el_query", "_CSETF-INFRNC-INPUT-NON-EXPLANATORY-EL-QUERY", 2, 0, false);
	    declareFunction("_csetf_infrnc_input_query_properties", "_CSETF-INFRNC-INPUT-QUERY-PROPERTIES", 2, 0, false);
	    declareFunction("_csetf_infrnc_mt", "_CSETF-INFRNC-MT", 2, 0, false);
	    declareFunction("_csetf_infrnc_el_query", "_CSETF-INFRNC-EL-QUERY", 2, 0, false);
	    declareFunction("_csetf_infrnc_el_bindings", "_CSETF-INFRNC-EL-BINDINGS", 2, 0, false);
	    declareFunction("_csetf_infrnc_hl_query", "_CSETF-INFRNC-HL-QUERY", 2, 0, false);
	    declareFunction("_csetf_infrnc_explanatory_subquery", "_CSETF-INFRNC-EXPLANATORY-SUBQUERY", 2, 0, false);
	    declareFunction("_csetf_infrnc_non_explanatory_subquery", "_CSETF-INFRNC-NON-EXPLANATORY-SUBQUERY", 2, 0, false);
	    declareFunction("_csetf_infrnc_free_hl_vars", "_CSETF-INFRNC-FREE-HL-VARS", 2, 0, false);
	    declareFunction("_csetf_infrnc_hypothetical_bindings", "_CSETF-INFRNC-HYPOTHETICAL-BINDINGS", 2, 0, false);
	    declareFunction("_csetf_infrnc_answer_id_index", "_CSETF-INFRNC-ANSWER-ID-INDEX", 2, 0, false);
	    declareFunction("_csetf_infrnc_answer_bindings_index", "_CSETF-INFRNC-ANSWER-BINDINGS-INDEX", 2, 0, false);
	    declareFunction("_csetf_infrnc_new_answer_id_start", "_CSETF-INFRNC-NEW-ANSWER-ID-START", 2, 0, false);
	    declareFunction("_csetf_infrnc_new_answer_justifications", "_CSETF-INFRNC-NEW-ANSWER-JUSTIFICATIONS", 2, 0, false);
	    declareFunction("_csetf_infrnc_status", "_CSETF-INFRNC-STATUS", 2, 0, false);
	    declareFunction("_csetf_infrnc_suspend_status", "_CSETF-INFRNC-SUSPEND-STATUS", 2, 0, false);
	    declareFunction("_csetf_infrnc_root_link", "_CSETF-INFRNC-ROOT-LINK", 2, 0, false);
	    declareFunction("_csetf_infrnc_relevant_problems", "_CSETF-INFRNC-RELEVANT-PROBLEMS", 2, 0, false);
	    declareFunction("_csetf_infrnc_strategy_set", "_CSETF-INFRNC-STRATEGY-SET", 2, 0, false);
	    declareFunction("_csetf_infrnc_control_process", "_CSETF-INFRNC-CONTROL-PROCESS", 2, 0, false);
	    declareFunction("_csetf_infrnc_interrupting_processes", "_CSETF-INFRNC-INTERRUPTING-PROCESSES", 2, 0, false);
	    declareFunction("_csetf_infrnc_max_transformation_depth_reached", "_CSETF-INFRNC-MAX-TRANSFORMATION-DEPTH-REACHED", 2, 0, false);
	    declareFunction("_csetf_infrnc_disjunction_free_el_vars_policy", "_CSETF-INFRNC-DISJUNCTION-FREE-EL-VARS-POLICY", 2, 0, false);
	    declareFunction("_csetf_infrnc_result_uniqueness_criterion", "_CSETF-INFRNC-RESULT-UNIQUENESS-CRITERION", 2, 0, false);
	    declareFunction("_csetf_infrnc_allow_hl_predicate_transformationP", "_CSETF-INFRNC-ALLOW-HL-PREDICATE-TRANSFORMATION?", 2, 0, false);
	    declareFunction("_csetf_infrnc_allow_unbound_predicate_transformationP", "_CSETF-INFRNC-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?", 2, 0, false);
	    declareFunction("_csetf_infrnc_allow_evaluatable_predicate_transformationP", "_CSETF-INFRNC-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?", 2, 0, false);
	    declareFunction("_csetf_infrnc_allow_indeterminate_resultsP", "_CSETF-INFRNC-ALLOW-INDETERMINATE-RESULTS?", 2, 0, false);
	    declareFunction("_csetf_infrnc_allowed_rules", "_CSETF-INFRNC-ALLOWED-RULES", 2, 0, false);
	    declareFunction("_csetf_infrnc_forbidden_rules", "_CSETF-INFRNC-FORBIDDEN-RULES", 2, 0, false);
	    declareFunction("_csetf_infrnc_allowed_modules", "_CSETF-INFRNC-ALLOWED-MODULES", 2, 0, false);
	    declareFunction("_csetf_infrnc_allow_abnormality_checkingP", "_CSETF-INFRNC-ALLOW-ABNORMALITY-CHECKING?", 2, 0, false);
	    declareFunction("_csetf_infrnc_transitive_closure_mode", "_CSETF-INFRNC-TRANSITIVE-CLOSURE-MODE", 2, 0, false);
	    declareFunction("_csetf_infrnc_problem_store_privateP", "_CSETF-INFRNC-PROBLEM-STORE-PRIVATE?", 2, 0, false);
	    declareFunction("_csetf_infrnc_continuableP", "_CSETF-INFRNC-CONTINUABLE?", 2, 0, false);
	    declareFunction("_csetf_infrnc_browsableP", "_CSETF-INFRNC-BROWSABLE?", 2, 0, false);
	    declareFunction("_csetf_infrnc_return_type", "_CSETF-INFRNC-RETURN-TYPE", 2, 0, false);
	    declareFunction("_csetf_infrnc_answer_language", "_CSETF-INFRNC-ANSWER-LANGUAGE", 2, 0, false);
	    declareFunction("_csetf_infrnc_cache_resultsP", "_CSETF-INFRNC-CACHE-RESULTS?", 2, 0, false);
	    declareFunction("_csetf_infrnc_blockingP", "_CSETF-INFRNC-BLOCKING?", 2, 0, false);
	    declareFunction("_csetf_infrnc_max_number", "_CSETF-INFRNC-MAX-NUMBER", 2, 0, false);
	    declareFunction("_csetf_infrnc_max_time", "_CSETF-INFRNC-MAX-TIME", 2, 0, false);
	    declareFunction("_csetf_infrnc_max_step", "_CSETF-INFRNC-MAX-STEP", 2, 0, false);
	    declareFunction("_csetf_infrnc_mode", "_CSETF-INFRNC-MODE", 2, 0, false);
	    declareFunction("_csetf_infrnc_forward_max_time", "_CSETF-INFRNC-FORWARD-MAX-TIME", 2, 0, false);
	    declareFunction("_csetf_infrnc_max_proof_depth", "_CSETF-INFRNC-MAX-PROOF-DEPTH", 2, 0, false);
	    declareFunction("_csetf_infrnc_max_transformation_depth", "_CSETF-INFRNC-MAX-TRANSFORMATION-DEPTH", 2, 0, false);
	    declareFunction("_csetf_infrnc_min_rule_utility", "_CSETF-INFRNC-MIN-RULE-UTILITY", 2, 0, false);
	    declareFunction("_csetf_infrnc_probably_approximately_done", "_CSETF-INFRNC-PROBABLY-APPROXIMATELY-DONE", 2, 0, false);
	    declareFunction("_csetf_infrnc_metrics_template", "_CSETF-INFRNC-METRICS-TEMPLATE", 2, 0, false);
	    declareFunction("_csetf_infrnc_start_universal_time", "_CSETF-INFRNC-START-UNIVERSAL-TIME", 2, 0, false);
	    declareFunction("_csetf_infrnc_start_internal_real_time", "_CSETF-INFRNC-START-INTERNAL-REAL-TIME", 2, 0, false);
	    declareFunction("_csetf_infrnc_end_internal_real_time", "_CSETF-INFRNC-END-INTERNAL-REAL-TIME", 2, 0, false);
	    declareFunction("_csetf_infrnc_pad_internal_real_time", "_CSETF-INFRNC-PAD-INTERNAL-REAL-TIME", 2, 0, false);
	    declareFunction("_csetf_infrnc_hypothesization_time", "_CSETF-INFRNC-HYPOTHESIZATION-TIME", 2, 0, false);
	    declareFunction("_csetf_infrnc_cumulative_time", "_CSETF-INFRNC-CUMULATIVE-TIME", 2, 0, false);
	    declareFunction("_csetf_infrnc_step_count", "_CSETF-INFRNC-STEP-COUNT", 2, 0, false);
	    declareFunction("_csetf_infrnc_cumulative_step_count", "_CSETF-INFRNC-CUMULATIVE-STEP-COUNT", 2, 0, false);
	    declareFunction("_csetf_infrnc_events", "_CSETF-INFRNC-EVENTS", 2, 0, false);
	    declareFunction("_csetf_infrnc_halt_conditions", "_CSETF-INFRNC-HALT-CONDITIONS", 2, 0, false);
	    declareFunction("_csetf_infrnc_accumulators", "_CSETF-INFRNC-ACCUMULATORS", 2, 0, false);
	    declareFunction("_csetf_infrnc_proof_watermark", "_CSETF-INFRNC-PROOF-WATERMARK", 2, 0, false);
	    declareFunction("_csetf_infrnc_problem_working_time_data", "_CSETF-INFRNC-PROBLEM-WORKING-TIME-DATA", 2, 0, false);
	    declareFunction("_csetf_infrnc_type", "_CSETF-INFRNC-TYPE", 2, 0, false);
	    declareFunction("_csetf_infrnc_data", "_CSETF-INFRNC-DATA", 2, 0, false);
	    declareFunction("_csetf_infrnc_properties", "_CSETF-INFRNC-PROPERTIES", 2, 0, false);
	    declareFunction("make_inference", "MAKE-INFERENCE", 0, 1, false);
	    declareFunction("visit_defstruct_inference", "VISIT-DEFSTRUCT-INFERENCE", 2, 0, false);
	    declareFunction("visit_defstruct_object_inference_method", "VISIT-DEFSTRUCT-OBJECT-INFERENCE-METHOD", 2, 0, false);
	    declareFunction("valid_inference_p", "VALID-INFERENCE-P", 1, 0, false);
	    declareFunction("invalid_inference_p", "INVALID-INFERENCE-P", 1, 0, false);
	    declareFunction("inference_invalid_p", "INFERENCE-INVALID-P", 1, 0, false);
	    declareFunction("print_inference", "PRINT-INFERENCE", 3, 0, false);
	    declareFunction("sxhash_inference_method", "SXHASH-INFERENCE-METHOD", 1, 0, false);
	    new inference_datastructures_inference.$sxhash_inference_method$UnaryFunction();
	    declareFunction("new_inference_p", "NEW-INFERENCE-P", 1, 0, false);
	    declareFunction("prepared_inference_p", "PREPARED-INFERENCE-P", 1, 0, false);
	    declareFunction("ready_inference_p", "READY-INFERENCE-P", 1, 0, false);
	    declareFunction("running_inference_p", "RUNNING-INFERENCE-P", 1, 0, false);
	    declareFunction("suspended_inference_p", "SUSPENDED-INFERENCE-P", 1, 0, false);
	    declareFunction("continuable_inference_p", "CONTINUABLE-INFERENCE-P", 1, 0, false);
	    declareFunction("exhausted_inference_p", "EXHAUSTED-INFERENCE-P", 1, 0, false);
	    declareMacro("do_inference_relevant_problems", "DO-INFERENCE-RELEVANT-PROBLEMS");
	    declareMacro("do_inference_new_answer_justifications", "DO-INFERENCE-NEW-ANSWER-JUSTIFICATIONS");
	    declareMacro("do_inference_new_answers", "DO-INFERENCE-NEW-ANSWERS");
	    declareMacro("do_inference_answers", "DO-INFERENCE-ANSWERS");
	    declareMacro("do_inference_answers_from_index", "DO-INFERENCE-ANSWERS-FROM-INDEX");
	    declareMacro("do_inference_justifications", "DO-INFERENCE-JUSTIFICATIONS");
	    declareMacro("do_inference_interrupting_processes", "DO-INFERENCE-INTERRUPTING-PROCESSES");
	    declareMacro("do_inference_root_proofs", "DO-INFERENCE-ROOT-PROOFS");
	    declareMacro("do_inference_allowed_rules", "DO-INFERENCE-ALLOWED-RULES");
	    declareMacro("with_inference_problem_working_time_lock", "WITH-INFERENCE-PROBLEM-WORKING-TIME-LOCK");
	    declareFunction("new_inference", "NEW-INFERENCE", 1, 0, false);
	    declareFunction("new_tautological_inference", "NEW-TAUTOLOGICAL-INFERENCE", 1, 0, false);
	    declareFunction("destroy_all_inferences", "DESTROY-ALL-INFERENCES", 0, 0, false);
	    declareFunction("destroy_inference", "DESTROY-INFERENCE", 1, 0, false);
	    declareFunction("destroy_inference_and_problem_store", "DESTROY-INFERENCE-AND-PROBLEM-STORE", 1, 0, false);
	    declareFunction("destroy_problem_store_inference", "DESTROY-PROBLEM-STORE-INFERENCE", 1, 0, false);
	    declareFunction("destroy_inference_int", "DESTROY-INFERENCE-INT", 1, 0, false);
	    declareFunction("note_inference_invalid", "NOTE-INFERENCE-INVALID", 1, 0, false);
	    declareFunction("inference_suid", "INFERENCE-SUID", 1, 0, false);
	    declareFunction("inference_problem_store", "INFERENCE-PROBLEM-STORE", 1, 0, false);
	    declareFunction("inference_forward_propagate", "INFERENCE-FORWARD-PROPAGATE", 1, 0, false);
	    declareFunction("inference_input_mt", "INFERENCE-INPUT-MT", 1, 0, false);
	    declareFunction("inference_input_el_query", "INFERENCE-INPUT-EL-QUERY", 1, 0, false);
	    declareFunction("inference_input_non_explanatory_el_query", "INFERENCE-INPUT-NON-EXPLANATORY-EL-QUERY", 1, 0, false);
	    declareFunction("inference_input_query_properties", "INFERENCE-INPUT-QUERY-PROPERTIES", 1, 0, false);
	    declareFunction("inference_mt", "INFERENCE-MT", 1, 0, false);
	    declareFunction("inference_el_query", "INFERENCE-EL-QUERY", 1, 0, false);
	    declareFunction("inference_el_ist_query", "INFERENCE-EL-IST-QUERY", 1, 0, false);
	    declareFunction("inference_el_bindings", "INFERENCE-EL-BINDINGS", 1, 0, false);
	    declareFunction("inference_hl_query", "INFERENCE-HL-QUERY", 1, 0, false);
	    declareFunction("inference_explanatory_subquery", "INFERENCE-EXPLANATORY-SUBQUERY", 1, 0, false);
	    declareFunction("inference_non_explanatory_subquery", "INFERENCE-NON-EXPLANATORY-SUBQUERY", 1, 0, false);
	    declareFunction("inference_free_hl_vars", "INFERENCE-FREE-HL-VARS", 1, 0, false);
	    declareFunction("inference_hypothetical_bindings", "INFERENCE-HYPOTHETICAL-BINDINGS", 1, 0, false);
	    declareFunction("inference_answer_id_index", "INFERENCE-ANSWER-ID-INDEX", 1, 0, false);
	    declareFunction("inference_answer_bindings_index", "INFERENCE-ANSWER-BINDINGS-INDEX", 1, 0, false);
	    declareFunction("inference_new_answer_id_start", "INFERENCE-NEW-ANSWER-ID-START", 1, 0, false);
	    declareFunction("inference_new_answer_justifications", "INFERENCE-NEW-ANSWER-JUSTIFICATIONS", 1, 0, false);
	    declareFunction("inference_status", "INFERENCE-STATUS", 1, 0, false);
	    declareFunction("inference_suspend_status", "INFERENCE-SUSPEND-STATUS", 1, 0, false);
	    declareFunction("inference_root_link", "INFERENCE-ROOT-LINK", 1, 0, false);
	    declareFunction("inference_relevant_problems", "INFERENCE-RELEVANT-PROBLEMS", 1, 0, false);
	    declareFunction("inference_strategy_set", "INFERENCE-STRATEGY-SET", 1, 0, false);
	    declareFunction("inference_control_process", "INFERENCE-CONTROL-PROCESS", 1, 0, false);
	    declareFunction("inference_interrupting_processes", "INFERENCE-INTERRUPTING-PROCESSES", 1, 0, false);
	    declareFunction("inference_max_transformation_depth_reached", "INFERENCE-MAX-TRANSFORMATION-DEPTH-REACHED", 1, 0, false);
	    declareFunction("inference_answer_language", "INFERENCE-ANSWER-LANGUAGE", 1, 0, false);
	    declareFunction("inference_cache_resultsP", "INFERENCE-CACHE-RESULTS?", 1, 0, false);
	    declareFunction("inference_blockingP", "INFERENCE-BLOCKING?", 1, 0, false);
	    declareFunction("inference_disjunction_free_el_vars_policy", "INFERENCE-DISJUNCTION-FREE-EL-VARS-POLICY", 1, 0, false);
	    declareFunction("inference_result_uniqueness_criterion", "INFERENCE-RESULT-UNIQUENESS-CRITERION", 1, 0, false);
	    declareFunction("inference_allow_hl_predicate_transformationP", "INFERENCE-ALLOW-HL-PREDICATE-TRANSFORMATION?", 1, 0, false);
	    declareFunction("inference_allow_unbound_predicate_transformationP", "INFERENCE-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?", 1, 0, false);
	    declareFunction("inference_allow_evaluatable_predicate_transformationP", "INFERENCE-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?", 1, 0, false);
	    declareFunction("inference_allow_indeterminate_resultsP", "INFERENCE-ALLOW-INDETERMINATE-RESULTS?", 1, 0, false);
	    declareFunction("inference_allowed_rules", "INFERENCE-ALLOWED-RULES", 1, 0, false);
	    declareFunction("inference_forbidden_rules", "INFERENCE-FORBIDDEN-RULES", 1, 0, false);
	    declareFunction("inference_allowed_modules", "INFERENCE-ALLOWED-MODULES", 1, 0, false);
	    declareFunction("inference_allow_abnormality_checkingP", "INFERENCE-ALLOW-ABNORMALITY-CHECKING?", 1, 0, false);
	    declareFunction("inference_transitive_closure_mode", "INFERENCE-TRANSITIVE-CLOSURE-MODE", 1, 0, false);
	    declareFunction("inference_problem_store_privateP", "INFERENCE-PROBLEM-STORE-PRIVATE?", 1, 0, false);
	    declareFunction("inference_continuableP", "INFERENCE-CONTINUABLE?", 1, 0, false);
	    declareFunction("inference_browsableP", "INFERENCE-BROWSABLE?", 1, 0, false);
	    declareFunction("inference_return_type", "INFERENCE-RETURN-TYPE", 1, 0, false);
	    declareFunction("inference_max_time", "INFERENCE-MAX-TIME", 1, 0, false);
	    declareFunction("inference_max_step", "INFERENCE-MAX-STEP", 1, 0, false);
	    declareFunction("inference_mode", "INFERENCE-MODE", 1, 0, false);
	    declareFunction("inference_forward_max_time", "INFERENCE-FORWARD-MAX-TIME", 1, 0, false);
	    declareFunction("inference_max_number", "INFERENCE-MAX-NUMBER", 1, 0, false);
	    declareFunction("inference_max_proof_depth", "INFERENCE-MAX-PROOF-DEPTH", 1, 0, false);
	    declareFunction("inference_max_transformation_depth", "INFERENCE-MAX-TRANSFORMATION-DEPTH", 1, 0, false);
	    declareFunction("inference_min_rule_utility", "INFERENCE-MIN-RULE-UTILITY", 1, 0, false);
	    declareFunction("inference_probably_approximately_done", "INFERENCE-PROBABLY-APPROXIMATELY-DONE", 1, 0, false);
	    declareFunction("inference_metrics_template", "INFERENCE-METRICS-TEMPLATE", 1, 0, false);
	    declareFunction("inference_start_universal_time", "INFERENCE-START-UNIVERSAL-TIME", 1, 0, false);
	    declareFunction("inference_start_internal_real_time", "INFERENCE-START-INTERNAL-REAL-TIME", 1, 0, false);
	    declareFunction("inference_end_internal_real_time", "INFERENCE-END-INTERNAL-REAL-TIME", 1, 0, false);
	    declareFunction("inference_pad_internal_real_time", "INFERENCE-PAD-INTERNAL-REAL-TIME", 1, 0, false);
	    declareFunction("inference_hypothesization_time", "INFERENCE-HYPOTHESIZATION-TIME", 1, 0, false);
	    declareFunction("inference_cumulative_time", "INFERENCE-CUMULATIVE-TIME", 1, 0, false);
	    declareFunction("inference_step_count", "INFERENCE-STEP-COUNT", 1, 0, false);
	    declareFunction("inference_cumulative_step_count", "INFERENCE-CUMULATIVE-STEP-COUNT", 1, 0, false);
	    declareFunction("inference_problem_working_time_data", "INFERENCE-PROBLEM-WORKING-TIME-DATA", 1, 0, false);
	    declareFunction("inference_events", "INFERENCE-EVENTS", 1, 0, false);
	    declareFunction("inference_accumulators", "INFERENCE-ACCUMULATORS", 1, 0, false);
	    declareFunction("inference_proof_watermark", "INFERENCE-PROOF-WATERMARK", 1, 0, false);
	    declareFunction("inference_type", "INFERENCE-TYPE", 1, 0, false);
	    declareFunction("inference_data", "INFERENCE-DATA", 1, 0, false);
	    declareFunction("inference_properties", "INFERENCE-PROPERTIES", 1, 0, false);
	    declareFunction("set_inference_forward_propagate", "SET-INFERENCE-FORWARD-PROPAGATE", 2, 0, false);
	    declareFunction("set_inference_input_mt", "SET-INFERENCE-INPUT-MT", 2, 0, false);
	    declareFunction("set_inference_input_el_query", "SET-INFERENCE-INPUT-EL-QUERY", 2, 0, false);
	    declareFunction("set_inference_input_non_explanatory_el_query", "SET-INFERENCE-INPUT-NON-EXPLANATORY-EL-QUERY", 2, 0, false);
	    declareFunction("set_inference_input_query_properties", "SET-INFERENCE-INPUT-QUERY-PROPERTIES", 2, 0, false);
	    declareFunction("set_inference_mt", "SET-INFERENCE-MT", 2, 0, false);
	    declareFunction("set_inference_el_query", "SET-INFERENCE-EL-QUERY", 2, 0, false);
	    declareFunction("set_inference_el_bindings", "SET-INFERENCE-EL-BINDINGS", 2, 0, false);
	    declareFunction("set_inference_hl_query", "SET-INFERENCE-HL-QUERY", 2, 0, false);
	    declareFunction("set_inference_explanatory_subquery", "SET-INFERENCE-EXPLANATORY-SUBQUERY", 2, 0, false);
	    declareFunction("set_inference_non_explanatory_subquery", "SET-INFERENCE-NON-EXPLANATORY-SUBQUERY", 2, 0, false);
	    declareFunction("set_inference_free_hl_vars", "SET-INFERENCE-FREE-HL-VARS", 2, 0, false);
	    declareFunction("set_inference_hypothetical_bindings", "SET-INFERENCE-HYPOTHETICAL-BINDINGS", 2, 0, false);
	    declareFunction("set_inference_status", "SET-INFERENCE-STATUS", 2, 0, false);
	    declareFunction("set_inference_suspend_status", "SET-INFERENCE-SUSPEND-STATUS", 2, 0, false);
	    declareFunction("set_inference_root_link", "SET-INFERENCE-ROOT-LINK", 2, 0, false);
	    declareFunction("set_inference_control_process", "SET-INFERENCE-CONTROL-PROCESS", 2, 0, false);
	    declareFunction("set_inference_max_transformation_depth_reached", "SET-INFERENCE-MAX-TRANSFORMATION-DEPTH-REACHED", 2, 0, false);
	    declareFunction("set_inference_disjunction_free_el_vars_policy", "SET-INFERENCE-DISJUNCTION-FREE-EL-VARS-POLICY", 2, 0, false);
	    declareFunction("set_inference_result_uniqueness_criterion", "SET-INFERENCE-RESULT-UNIQUENESS-CRITERION", 2, 0, false);
	    declareFunction("set_inference_allow_hl_predicate_transformation", "SET-INFERENCE-ALLOW-HL-PREDICATE-TRANSFORMATION", 2, 0, false);
	    declareFunction("set_inference_allow_unbound_predicate_transformation", "SET-INFERENCE-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION", 2, 0, false);
	    declareFunction("set_inference_allow_evaluatable_predicate_transformation", "SET-INFERENCE-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION", 2, 0, false);
	    declareFunction("set_inference_allow_indeterminate_results", "SET-INFERENCE-ALLOW-INDETERMINATE-RESULTS", 2, 0, false);
	    declareFunction("set_inference_allowed_rules", "SET-INFERENCE-ALLOWED-RULES", 2, 0, false);
	    declareFunction("set_inference_forbidden_rules", "SET-INFERENCE-FORBIDDEN-RULES", 2, 0, false);
	    declareFunction("set_inference_allowed_modules", "SET-INFERENCE-ALLOWED-MODULES", 2, 0, false);
	    declareFunction("set_inference_allow_abnormality_checking", "SET-INFERENCE-ALLOW-ABNORMALITY-CHECKING", 2, 0, false);
	    declareFunction("set_inference_transitive_closure_mode", "SET-INFERENCE-TRANSITIVE-CLOSURE-MODE", 2, 0, false);
	    declareFunction("set_inference_problem_store_private", "SET-INFERENCE-PROBLEM-STORE-PRIVATE", 2, 0, false);
	    declareFunction("set_inference_continuable", "SET-INFERENCE-CONTINUABLE", 2, 0, false);
	    declareFunction("set_inference_browsable", "SET-INFERENCE-BROWSABLE", 2, 0, false);
	    declareFunction("set_inference_return_type", "SET-INFERENCE-RETURN-TYPE", 2, 0, false);
	    declareFunction("set_inference_answer_language", "SET-INFERENCE-ANSWER-LANGUAGE", 2, 0, false);
	    declareFunction("set_inference_cache_results", "SET-INFERENCE-CACHE-RESULTS", 2, 0, false);
	    declareFunction("note_inference_blocking", "NOTE-INFERENCE-BLOCKING", 1, 0, false);
	    declareFunction("clear_inference_blocking", "CLEAR-INFERENCE-BLOCKING", 1, 0, false);
	    declareFunction("set_inference_max_number", "SET-INFERENCE-MAX-NUMBER", 2, 0, false);
	    declareFunction("set_inference_max_time", "SET-INFERENCE-MAX-TIME", 2, 0, false);
	    declareFunction("set_inference_max_step", "SET-INFERENCE-MAX-STEP", 2, 0, false);
	    declareFunction("set_inference_mode", "SET-INFERENCE-MODE", 2, 0, false);
	    declareFunction("set_inference_forward_max_time", "SET-INFERENCE-FORWARD-MAX-TIME", 2, 0, false);
	    declareFunction("set_inference_max_proof_depth", "SET-INFERENCE-MAX-PROOF-DEPTH", 2, 0, false);
	    declareFunction("set_inference_max_transformation_depth", "SET-INFERENCE-MAX-TRANSFORMATION-DEPTH", 2, 0, false);
	    declareFunction("set_inference_min_rule_utility", "SET-INFERENCE-MIN-RULE-UTILITY", 2, 0, false);
	    declareFunction("set_inference_probably_approximately_done", "SET-INFERENCE-PROBABLY-APPROXIMATELY-DONE", 2, 0, false);
	    declareFunction("set_inference_metrics_template", "SET-INFERENCE-METRICS-TEMPLATE", 2, 0, false);
	    declareFunction("set_inference_start_universal_time", "SET-INFERENCE-START-UNIVERSAL-TIME", 2, 0, false);
	    declareFunction("set_inference_start_internal_real_time", "SET-INFERENCE-START-INTERNAL-REAL-TIME", 2, 0, false);
	    declareFunction("set_inference_end_internal_real_time", "SET-INFERENCE-END-INTERNAL-REAL-TIME", 2, 0, false);
	    declareFunction("set_inference_pad_internal_real_time", "SET-INFERENCE-PAD-INTERNAL-REAL-TIME", 2, 0, false);
	    declareFunction("set_inference_hypothesization_time", "SET-INFERENCE-HYPOTHESIZATION-TIME", 2, 0, false);
	    declareFunction("set_inference_cumulative_time", "SET-INFERENCE-CUMULATIVE-TIME", 2, 0, false);
	    declareFunction("set_inference_step_count", "SET-INFERENCE-STEP-COUNT", 2, 0, false);
	    declareFunction("increment_inference_step_count", "INCREMENT-INFERENCE-STEP-COUNT", 1, 0, false);
	    declareFunction("set_inference_cumulative_step_count", "SET-INFERENCE-CUMULATIVE-STEP-COUNT", 2, 0, false);
	    declareFunction("increment_inference_cumulative_step_count", "INCREMENT-INFERENCE-CUMULATIVE-STEP-COUNT", 1, 0, false);
	    declareFunction("set_inference_problem_working_time_data", "SET-INFERENCE-PROBLEM-WORKING-TIME-DATA", 2, 0, false);
	    declareFunction("set_inference_events", "SET-INFERENCE-EVENTS", 2, 0, false);
	    declareFunction("set_inference_halt_conditions", "SET-INFERENCE-HALT-CONDITIONS", 2, 0, false);
	    declareFunction("set_inference_type", "SET-INFERENCE-TYPE", 2, 0, false);
	    declareFunction("set_inference_data", "SET-INFERENCE-DATA", 2, 0, false);
	    declareFunction("set_inference_properties", "SET-INFERENCE-PROPERTIES", 2, 0, false);
	    declareFunction("set_inference_property", "SET-INFERENCE-PROPERTY", 3, 0, false);
	    declareFunction("push_inference_property", "PUSH-INFERENCE-PROPERTY", 3, 0, false);
	    declareFunction("inference_ids", "INFERENCE-IDS", 1, 0, false);
	    declareMacro("with_inference_ids", "WITH-INFERENCE-IDS");
	    declareFunction("inference_problem_store_suid", "INFERENCE-PROBLEM-STORE-SUID", 1, 0, false);
	    declareFunction("all_inferences", "ALL-INFERENCES", 0, 0, false);
	    declareFunction("all_successful_inferences", "ALL-SUCCESSFUL-INFERENCES", 0, 0, false);
	    declareFunction("inference_strategies", "INFERENCE-STRATEGIES", 1, 0, false);
	    declareFunction("inference_hl_mts", "INFERENCE-HL-MTS", 1, 0, false);
	    declareFunction("inference_first_hl_query_mt", "INFERENCE-FIRST-HL-QUERY-MT", 1, 0, false);
	    declareFunction("inference_no_free_hl_varsP", "INFERENCE-NO-FREE-HL-VARS?", 1, 0, false);
	    declareFunction("inference_free_el_vars", "INFERENCE-FREE-EL-VARS", 1, 0, false);
	    declareFunction("inference_input_query_property", "INFERENCE-INPUT-QUERY-PROPERTY", 2, 1, false);
	    declareFunction("inference_to_new_cyc_query_arguments", "INFERENCE-TO-NEW-CYC-QUERY-ARGUMENTS", 1, 0, false);
	    declareFunction("inference_to_new_cyc_query_form", "INFERENCE-TO-NEW-CYC-QUERY-FORM", 1, 0, false);
	    declareFunction("inference_to_new_cyc_query_form_string", "INFERENCE-TO-NEW-CYC-QUERY-FORM-STRING", 1, 0, false);
	    declareFunction("inference_args_to_new_cyc_query_form_string", "INFERENCE-ARGS-TO-NEW-CYC-QUERY-FORM-STRING", 3, 0, false);
	    declareFunction("inference_root_mapped_problem", "INFERENCE-ROOT-MAPPED-PROBLEM", 1, 0, false);
	    declareFunction("inference_root_problem", "INFERENCE-ROOT-PROBLEM", 1, 0, false);
	    declareFunction("inference_unique_wrt_proofsP", "INFERENCE-UNIQUE-WRT-PROOFS?", 1, 0, false);
	    declareFunction("inference_unique_wrt_bindingsP", "INFERENCE-UNIQUE-WRT-BINDINGS?", 1, 0, false);
	    declareFunction("inference_compute_answer_justificationsP", "INFERENCE-COMPUTE-ANSWER-JUSTIFICATIONS?", 1, 0, false);
	    declareFunction("inference_computes_metricsP", "INFERENCE-COMPUTES-METRICS?", 1, 0, false);
	    declareFunction("inference_computes_metricP", "INFERENCE-COMPUTES-METRIC?", 2, 0, false);
	    declareFunction("inference_problem_store_private_wrt_dynamic_propertiesP", "INFERENCE-PROBLEM-STORE-PRIVATE-WRT-DYNAMIC-PROPERTIES?", 1, 0, false);
	    declareFunction("inference_dynamic_properties_exhaustiveP", "INFERENCE-DYNAMIC-PROPERTIES-EXHAUSTIVE?", 1, 0, false);
	    declareFunction("inference_allows_use_of_all_rulesP", "INFERENCE-ALLOWS-USE-OF-ALL-RULES?", 1, 0, false);
	    declareFunction("inference_allows_use_of_ruleP", "INFERENCE-ALLOWS-USE-OF-RULE?", 2, 0, false);
	    declareFunction("inference_filter_rules", "INFERENCE-FILTER-RULES", 2, 0, false);
	    declareFunction("inference_allows_use_of_all_modulesP", "INFERENCE-ALLOWS-USE-OF-ALL-MODULES?", 1, 0, false);
	    declareFunction("inference_allows_use_of_moduleP", "INFERENCE-ALLOWS-USE-OF-MODULE?", 2, 0, false);
	    declareFunction("inference_forget_extra_resultsP", "INFERENCE-FORGET-EXTRA-RESULTS?", 1, 0, false);
	    declareFunction("inference_has_some_answerP", "INFERENCE-HAS-SOME-ANSWER?", 1, 0, false);
	    declareFunction("find_inference_answer_by_id", "FIND-INFERENCE-ANSWER-BY-ID", 2, 0, false);
	    declareFunction("find_inference_answer_by_ids", "FIND-INFERENCE-ANSWER-BY-IDS", 3, 0, false);
	    declareFunction("inference_answer_signature", "INFERENCE-ANSWER-SIGNATURE", 1, 0, false);
	    declareFunction("find_inference_answer_from_signature", "FIND-INFERENCE-ANSWER-FROM-SIGNATURE", 1, 0, false);
	    declareFunction("inference_first_answer", "INFERENCE-FIRST-ANSWER", 1, 0, false);
	    declareFunction("inference_last_answer", "INFERENCE-LAST-ANSWER", 1, 0, false);
	    declareFunction("inference_first_answer_with_id_or_greater", "INFERENCE-FIRST-ANSWER-WITH-ID-OR-GREATER", 2, 0, false);
	    declareFunction("inference_first_answer_elapsed_time", "INFERENCE-FIRST-ANSWER-ELAPSED-TIME", 1, 0, false);
	    declareFunction("inference_first_answer_step_count", "INFERENCE-FIRST-ANSWER-STEP-COUNT", 1, 0, false);
	    declareFunction("inference_last_answer_elapsed_time", "INFERENCE-LAST-ANSWER-ELAPSED-TIME", 1, 0, false);
	    declareFunction("inference_last_answer_step_count", "INFERENCE-LAST-ANSWER-STEP-COUNT", 1, 0, false);
	    declareFunction("inference_last_answer_id", "INFERENCE-LAST-ANSWER-ID", 1, 0, false);
	    declareFunction("inference_answer_count_at_elapsed_time", "INFERENCE-ANSWER-COUNT-AT-ELAPSED-TIME", 2, 0, false);
	    declareFunction("inference_answer_count_at_30_seconds", "INFERENCE-ANSWER-COUNT-AT-30-SECONDS", 1, 0, false);
	    declareFunction("inference_answer_count_at_60_seconds", "INFERENCE-ANSWER-COUNT-AT-60-SECONDS", 1, 0, false);
	    declareFunction("inference_answer_times", "INFERENCE-ANSWER-TIMES", 1, 0, false);
	    declareFunction("inference_answer_step_counts", "INFERENCE-ANSWER-STEP-COUNTS", 1, 0, false);
	    declareFunction("inference_new_root_metrics", "INFERENCE-NEW-ROOT-METRICS", 1, 0, false);
	    declareFunction("inference_end_universal_time", "INFERENCE-END-UNIVERSAL-TIME", 1, 0, false);
	    declareFunction("inference_maintain_term_working_setP", "INFERENCE-MAINTAIN-TERM-WORKING-SET?", 1, 0, false);
	    declareFunction("inference_halt_condition_presentP", "INFERENCE-HALT-CONDITION-PRESENT?", 2, 0, false);
	    declareFunction("add_inference_accumulator", "ADD-INFERENCE-ACCUMULATOR", 3, 0, false);
	    declareFunction("inference_accumulator", "INFERENCE-ACCUMULATOR", 2, 0, false);
	    declareFunction("inference_accumulator_contents", "INFERENCE-ACCUMULATOR-CONTENTS", 2, 0, false);
	    declareFunction("inference_accumulate", "INFERENCE-ACCUMULATE", 3, 0, false);
	    declareFunction("set_inference_proof_watermark", "SET-INFERENCE-PROOF-WATERMARK", 2, 0, false);
	    declareFunction("compute_inference_pad_internal_real_time", "COMPUTE-INFERENCE-PAD-INTERNAL-REAL-TIME", 1, 0, false);
	    declareFunction("initialize_pad_table", "INITIALIZE-PAD-TABLE", 1, 0, false);
	    declareFunction("pad_table_initializedP", "PAD-TABLE-INITIALIZED?", 0, 0, false);
	    declareFunction("probably_approximately_done_cutoff_time", "PROBABLY-APPROXIMATELY-DONE-CUTOFF-TIME", 1, 0, false);
	    declareFunction("compute_pad_from_time", "COMPUTE-PAD-FROM-TIME", 1, 0, false);
	    declareFunction("inference_note_transformation_depth", "INFERENCE-NOTE-TRANSFORMATION-DEPTH", 2, 0, false);
	    declareFunction("inference_note_new_transformation_depth_reached", "INFERENCE-NOTE-NEW-TRANSFORMATION-DEPTH-REACHED", 2, 0, false);
	    declareFunction("find_inference_answer_by_bindings", "FIND-INFERENCE-ANSWER-BY-BINDINGS", 2, 0, false);
	    declareFunction("new_inference_answer_id", "NEW-INFERENCE-ANSWER-ID", 1, 0, false);
	    declareFunction("inference_count", "INFERENCE-COUNT", 0, 0, false);
	    declareFunction("inference_all_answers", "INFERENCE-ALL-ANSWERS", 1, 1, false);
	    declareFunction("inference_all_new_answers", "INFERENCE-ALL-NEW-ANSWERS", 1, 0, false);
	    declareFunction("inference_allowed_rules_list", "INFERENCE-ALLOWED-RULES-LIST", 1, 0, false);
	    declareFunction("inference_allowed_rule_count", "INFERENCE-ALLOWED-RULE-COUNT", 1, 0, false);
	    declareFunction("inference_forbidden_rules_list", "INFERENCE-FORBIDDEN-RULES-LIST", 1, 0, false);
	    declareFunction("inference_forbidden_rule_count", "INFERENCE-FORBIDDEN-RULE-COUNT", 1, 0, false);
	    declareFunction("inference_interrupt_signaledP", "INFERENCE-INTERRUPT-SIGNALED?", 1, 0, false);
	    declareFunction("inference_no_interrupt_signaledP", "INFERENCE-NO-INTERRUPT-SIGNALED?", 1, 0, false);
	    declareFunction("inference_interrupt_handledP", "INFERENCE-INTERRUPT-HANDLED?", 1, 0, false);
	    declareFunction("inference_answer_count", "INFERENCE-ANSWER-COUNT", 1, 0, false);
	    declareFunction("inference_new_answer_count", "INFERENCE-NEW-ANSWER-COUNT", 1, 0, false);
	    declareFunction("successful_inference_p", "SUCCESSFUL-INFERENCE-P", 1, 0, false);
	    declareFunction("inference_new_justification_count", "INFERENCE-NEW-JUSTIFICATION-COUNT", 1, 0, false);
	    declareFunction("inference_new_result_count", "INFERENCE-NEW-RESULT-COUNT", 1, 0, false);
	    declareFunction("forward_inference_p", "FORWARD-INFERENCE-P", 1, 0, false);
	    declareFunction("backward_inference_p", "BACKWARD-INFERENCE-P", 1, 0, false);
	    declareFunction("abductive_inference_p", "ABDUCTIVE-INFERENCE-P", 1, 0, false);
	    declareFunction("inference_provability_status", "INFERENCE-PROVABILITY-STATUS", 1, 0, false);
	    declareFunction("good_inference_p", "GOOD-INFERENCE-P", 1, 0, false);
	    declareFunction("neutral_inference_p", "NEUTRAL-INFERENCE-P", 1, 0, false);
	    declareFunction("no_good_inference_p", "NO-GOOD-INFERENCE-P", 1, 0, false);
	    declareFunction("closed_inference_p", "CLOSED-INFERENCE-P", 1, 0, false);
	    declareFunction("inference_set_static_properties", "INFERENCE-SET-STATIC-PROPERTIES", 2, 0, false);
	    declareFunction("update_inference_input_query_properties", "UPDATE-INFERENCE-INPUT-QUERY-PROPERTIES", 2, 0, false);
	    declareFunction("add_inference_relevant_problem", "ADD-INFERENCE-RELEVANT-PROBLEM", 2, 0, false);
	    declareFunction("remove_inference_relevant_problem", "REMOVE-INFERENCE-RELEVANT-PROBLEM", 2, 0, false);
	    declareFunction("clear_inference_relevant_problems", "CLEAR-INFERENCE-RELEVANT-PROBLEMS", 1, 0, false);
	    declareFunction("add_inference_strategy", "ADD-INFERENCE-STRATEGY", 2, 0, false);
	    declareFunction("remove_inference_strategy", "REMOVE-INFERENCE-STRATEGY", 2, 0, false);
	    declareFunction("clear_inference_strategy_set", "CLEAR-INFERENCE-STRATEGY-SET", 1, 0, false);
	    declareFunction("reset_inference_new_answer_id", "RESET-INFERENCE-NEW-ANSWER-ID", 1, 0, false);
	    declareFunction("inference_next_new_answer_id", "INFERENCE-NEXT-NEW-ANSWER-ID", 1, 0, false);
	    declareFunction("add_inference_new_answer_by_id", "ADD-INFERENCE-NEW-ANSWER-BY-ID", 2, 0, false);
	    declareFunction("remove_inference_new_answer_by_id", "REMOVE-INFERENCE-NEW-ANSWER-BY-ID", 2, 0, false);
	    declareFunction("add_inference_new_answer_by_bindings", "ADD-INFERENCE-NEW-ANSWER-BY-BINDINGS", 2, 0, false);
	    declareFunction("remove_inference_new_answer_by_bindings", "REMOVE-INFERENCE-NEW-ANSWER-BY-BINDINGS", 2, 0, false);
	    declareFunction("reset_inference_new_answer_justifications", "RESET-INFERENCE-NEW-ANSWER-JUSTIFICATIONS", 1, 0, false);
	    declareFunction("add_inference_new_answer_justification", "ADD-INFERENCE-NEW-ANSWER-JUSTIFICATION", 2, 0, false);
	    declareFunction("remove_inference_new_answer_justification", "REMOVE-INFERENCE-NEW-ANSWER-JUSTIFICATION", 2, 0, false);
	    declareFunction("clear_inference_control_process", "CLEAR-INFERENCE-CONTROL-PROCESS", 1, 0, false);
	    declareFunction("set_inference_control_process_to_me", "SET-INFERENCE-CONTROL-PROCESS-TO-ME", 1, 0, false);
	    declareFunction("note_inference_interrupt_signaled", "NOTE-INFERENCE-INTERRUPT-SIGNALED", 2, 0, false);
	    declareFunction("increment_inference_cumulative_time", "INCREMENT-INFERENCE-CUMULATIVE-TIME", 2, 0, false);
	    declareFunction("reorder_inference_free_hl_vars", "REORDER-INFERENCE-FREE-HL-VARS", 2, 0, false);
	    declareFunction("reorder_inference_free_el_vars", "REORDER-INFERENCE-FREE-EL-VARS", 2, 0, false);
	    declareFunction("reset_inference_new_answers", "RESET-INFERENCE-NEW-ANSWERS", 1, 0, false);
	    declareFunction("add_inference_new_answer", "ADD-INFERENCE-NEW-ANSWER", 2, 0, false);
	    declareFunction("remove_inference_new_answer", "REMOVE-INFERENCE-NEW-ANSWER", 2, 0, false);
	    declareFunction("initialize_inference_time_properties", "INITIALIZE-INFERENCE-TIME-PROPERTIES", 1, 0, false);
	    declareFunction("finalize_inference_time_properties", "FINALIZE-INFERENCE-TIME-PROPERTIES", 1, 0, false);
	    declareFunction("inference_elapsed_internal_real_time_since_start", "INFERENCE-ELAPSED-INTERNAL-REAL-TIME-SINCE-START", 1, 0, false);
	    declareFunction("inference_elapsed_universal_time_since_start", "INFERENCE-ELAPSED-UNIVERSAL-TIME-SINCE-START", 1, 0, false);
	    declareFunction("inference_time_so_far", "INFERENCE-TIME-SO-FAR", 1, 1, false);
	    declareFunction("inference_remaining_time", "INFERENCE-REMAINING-TIME", 1, 1, false);
	    declareFunction("inference_cumulative_time_so_far", "INFERENCE-CUMULATIVE-TIME-SO-FAR", 1, 1, false);
	    declareFunction("inference_signal_interrupt", "INFERENCE-SIGNAL-INTERRUPT", 1, 0, false);
	    declareFunction("inference_handle_interrupts", "INFERENCE-HANDLE-INTERRUPTS", 1, 0, false);
	    declareFunction("simplest_inference_p", "SIMPLEST-INFERENCE-P", 1, 0, false);
	    declareFunction("new_simplest_inference", "NEW-SIMPLEST-INFERENCE", 1, 0, false);
	    declareFunction("simplest_inference_strategy", "SIMPLEST-INFERENCE-STRATEGY", 1, 0, false);
	    declareFunction("set_simplest_inference_strategy", "SET-SIMPLEST-INFERENCE-STRATEGY", 2, 0, false);
	    declareFunction("new_simplest_inference_of_type", "NEW-SIMPLEST-INFERENCE-OF-TYPE", 2, 0, false);
	    declareFunction("new_simplest_inference_with_new_store", "NEW-SIMPLEST-INFERENCE-WITH-NEW-STORE", 1, 0, false);
	    declareFunction("inference_answer_print_function_trampoline", "INFERENCE-ANSWER-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
	    declareFunction("inference_answer_p", "INFERENCE-ANSWER-P", 1, 0, false);
	    new inference_datastructures_inference.$inference_answer_p$UnaryFunction();
	    declareFunction("inf_answer_suid", "INF-ANSWER-SUID", 1, 0, false);
	    declareFunction("inf_answer_inference", "INF-ANSWER-INFERENCE", 1, 0, false);
	    declareFunction("inf_answer_bindings", "INF-ANSWER-BINDINGS", 1, 0, false);
	    declareFunction("inf_answer_justifications", "INF-ANSWER-JUSTIFICATIONS", 1, 0, false);
	    declareFunction("inf_answer_elapsed_creation_time", "INF-ANSWER-ELAPSED-CREATION-TIME", 1, 0, false);
	    declareFunction("inf_answer_step_count", "INF-ANSWER-STEP-COUNT", 1, 0, false);
	    declareFunction("_csetf_inf_answer_suid", "_CSETF-INF-ANSWER-SUID", 2, 0, false);
	    declareFunction("_csetf_inf_answer_inference", "_CSETF-INF-ANSWER-INFERENCE", 2, 0, false);
	    declareFunction("_csetf_inf_answer_bindings", "_CSETF-INF-ANSWER-BINDINGS", 2, 0, false);
	    declareFunction("_csetf_inf_answer_justifications", "_CSETF-INF-ANSWER-JUSTIFICATIONS", 2, 0, false);
	    declareFunction("_csetf_inf_answer_elapsed_creation_time", "_CSETF-INF-ANSWER-ELAPSED-CREATION-TIME", 2, 0, false);
	    declareFunction("_csetf_inf_answer_step_count", "_CSETF-INF-ANSWER-STEP-COUNT", 2, 0, false);
	    declareFunction("make_inference_answer", "MAKE-INFERENCE-ANSWER", 0, 1, false);
	    declareFunction("visit_defstruct_inference_answer", "VISIT-DEFSTRUCT-INFERENCE-ANSWER", 2, 0, false);
	    declareFunction("visit_defstruct_object_inference_answer_method", "VISIT-DEFSTRUCT-OBJECT-INFERENCE-ANSWER-METHOD", 2, 0, false);
	    declareFunction("valid_inference_answer_p", "VALID-INFERENCE-ANSWER-P", 1, 0, false);
	    declareFunction("inference_answer_invalid_p", "INFERENCE-ANSWER-INVALID-P", 1, 0, false);
	    declareFunction("print_inference_answer", "PRINT-INFERENCE-ANSWER", 3, 0, false);
	    declareFunction("sxhash_inference_answer_method", "SXHASH-INFERENCE-ANSWER-METHOD", 1, 0, false);
	    declareFunction("new_inference_answer", "NEW-INFERENCE-ANSWER", 2, 0, false);
	    declareFunction("find_or_create_inference_answer", "FIND-OR-CREATE-INFERENCE-ANSWER", 2, 0, false);
	    declareMacro("do_inference_answer_justifications", "DO-INFERENCE-ANSWER-JUSTIFICATIONS");
	    declareMacro("do_inference_answer_justifications_numbered", "DO-INFERENCE-ANSWER-JUSTIFICATIONS-NUMBERED");
	    declareFunction("destroy_inference_answer", "DESTROY-INFERENCE-ANSWER", 1, 0, false);
	    declareFunction("destroy_inference_answer_int", "DESTROY-INFERENCE-ANSWER-INT", 1, 0, false);
	    declareFunction("note_inference_answer_invalid", "NOTE-INFERENCE-ANSWER-INVALID", 1, 0, false);
	    declareFunction("inference_answer_suid", "INFERENCE-ANSWER-SUID", 1, 0, false);
	    declareFunction("inference_answer_inference", "INFERENCE-ANSWER-INFERENCE", 1, 0, false);
	    declareFunction("inference_answer_bindings", "INFERENCE-ANSWER-BINDINGS", 1, 0, false);
	    declareFunction("inference_answer_justifications", "INFERENCE-ANSWER-JUSTIFICATIONS", 1, 0, false);
	    declareFunction("inference_answer_elapsed_creation_time", "INFERENCE-ANSWER-ELAPSED-CREATION-TIME", 1, 0, false);
	    declareFunction("inference_answer_step_count", "INFERENCE-ANSWER-STEP-COUNT", 1, 0, false);
	    declareFunction("set_inference_answer_bindings", "SET-INFERENCE-ANSWER-BINDINGS", 2, 0, false);
	    declareFunction("set_inference_answer_elapsed_creation_time", "SET-INFERENCE-ANSWER-ELAPSED-CREATION-TIME", 2, 0, false);
	    declareFunction("set_inference_answer_step_count", "SET-INFERENCE-ANSWER-STEP-COUNT", 2, 0, false);
	    declareFunction("inference_answer_problem_store", "INFERENCE-ANSWER-PROBLEM-STORE", 1, 0, false);
	    declareFunction("inference_answer_free_el_vars", "INFERENCE-ANSWER-FREE-EL-VARS", 1, 0, false);
	    declareFunction("inference_answer_elapsed_time", "INFERENCE-ANSWER-ELAPSED-TIME", 1, 1, false);
	    declareFunction("inference_answer_creation_time", "INFERENCE-ANSWER-CREATION-TIME", 1, 0, false);
	    declareFunction("find_inference_answer_justification", "FIND-INFERENCE-ANSWER-JUSTIFICATION", 2, 0, false);
	    declareFunction("inference_answer_result_bindings", "INFERENCE-ANSWER-RESULT-BINDINGS", 1, 0, false);
	    declareFunction("inference_answer_bindings_equalP", "INFERENCE-ANSWER-BINDINGS-EQUAL?", 2, 0, false);
	    declareFunction("inference_answer_newP", "INFERENCE-ANSWER-NEW?", 1, 0, false);
	    declareFunction("inference_answer_L", "INFERENCE-ANSWER-<", 2, 0, false);
	    declareFunction("inference_answer_el_sentence", "INFERENCE-ANSWER-EL-SENTENCE", 1, 0, false);
	    declareFunction("inference_answer_justification_count", "INFERENCE-ANSWER-JUSTIFICATION-COUNT", 1, 0, false);
	    declareFunction("add_inference_answer_justification", "ADD-INFERENCE-ANSWER-JUSTIFICATION", 2, 0, false);
	    declareFunction("remove_inference_answer_justification", "REMOVE-INFERENCE-ANSWER-JUSTIFICATION", 2, 0, false);
	    declareFunction("initialize_inference_answer_elapsed_creation_time", "INITIALIZE-INFERENCE-ANSWER-ELAPSED-CREATION-TIME", 1, 0, false);
	    declareFunction("inference_answer_justification_print_function_trampoline", "INFERENCE-ANSWER-JUSTIFICATION-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
	    declareFunction("inference_answer_justification_p", "INFERENCE-ANSWER-JUSTIFICATION-P", 1, 0, false);
	    new inference_datastructures_inference.$inference_answer_justification_p$UnaryFunction();
	    declareFunction("inf_ans_just_answer", "INF-ANS-JUST-ANSWER", 1, 0, false);
	    declareFunction("inf_ans_just_supports", "INF-ANS-JUST-SUPPORTS", 1, 0, false);
	    declareFunction("inf_ans_just_pragma_supports", "INF-ANS-JUST-PRAGMA-SUPPORTS", 1, 0, false);
	    declareFunction("inf_ans_just_proofs", "INF-ANS-JUST-PROOFS", 1, 0, false);
	    declareFunction("_csetf_inf_ans_just_answer", "_CSETF-INF-ANS-JUST-ANSWER", 2, 0, false);
	    declareFunction("_csetf_inf_ans_just_supports", "_CSETF-INF-ANS-JUST-SUPPORTS", 2, 0, false);
	    declareFunction("_csetf_inf_ans_just_pragma_supports", "_CSETF-INF-ANS-JUST-PRAGMA-SUPPORTS", 2, 0, false);
	    declareFunction("_csetf_inf_ans_just_proofs", "_CSETF-INF-ANS-JUST-PROOFS", 2, 0, false);
	    declareFunction("make_inference_answer_justification", "MAKE-INFERENCE-ANSWER-JUSTIFICATION", 0, 1, false);
	    declareFunction("visit_defstruct_inference_answer_justification", "VISIT-DEFSTRUCT-INFERENCE-ANSWER-JUSTIFICATION", 2, 0, false);
	    declareFunction("visit_defstruct_object_inference_answer_justification_method", "VISIT-DEFSTRUCT-OBJECT-INFERENCE-ANSWER-JUSTIFICATION-METHOD", 2, 0, false);
	    declareFunction("valid_inference_answer_justification_p", "VALID-INFERENCE-ANSWER-JUSTIFICATION-P", 1, 0, false);
	    declareFunction("inference_answer_justification_invalid_p", "INFERENCE-ANSWER-JUSTIFICATION-INVALID-P", 1, 0, false);
	    declareFunction("print_inference_answer_justification", "PRINT-INFERENCE-ANSWER-JUSTIFICATION", 3, 0, false);
	    declareFunction("sxhash_inference_answer_justification_method", "SXHASH-INFERENCE-ANSWER-JUSTIFICATION-METHOD", 1, 0, false);
	    declareFunction("list_of_inference_answer_justification_p", "LIST-OF-INFERENCE-ANSWER-JUSTIFICATION-P", 1, 0, false);
	    declareFunction("new_inference_answer_justification", "NEW-INFERENCE-ANSWER-JUSTIFICATION", 3, 0, false);
	    declareFunction("find_or_create_inference_answer_justification", "FIND-OR-CREATE-INFERENCE-ANSWER-JUSTIFICATION", 4, 0, false);
	    declareFunction("subst_indexical_referents_into_answer_bindings", "SUBST-INDEXICAL-REFERENTS-INTO-ANSWER-BINDINGS", 2, 0, false);
	    declareFunction("destroy_inference_answer_justification", "DESTROY-INFERENCE-ANSWER-JUSTIFICATION", 1, 0, false);
	    declareFunction("destroy_inference_answer_justification_int", "DESTROY-INFERENCE-ANSWER-JUSTIFICATION-INT", 1, 0, false);
	    declareFunction("note_inference_answer_justification_invalid", "NOTE-INFERENCE-ANSWER-JUSTIFICATION-INVALID", 1, 0, false);
	    declareFunction("inference_answer_justification_answer", "INFERENCE-ANSWER-JUSTIFICATION-ANSWER", 1, 0, false);
	    declareFunction("inference_answer_justification_supports", "INFERENCE-ANSWER-JUSTIFICATION-SUPPORTS", 1, 0, false);
	    new inference_datastructures_inference.$inference_answer_justification_supports$UnaryFunction();
	    declareFunction("inference_answer_justification_pragmatic_supports", "INFERENCE-ANSWER-JUSTIFICATION-PRAGMATIC-SUPPORTS", 1, 0, false);
	    declareFunction("inference_answer_justification_proofs", "INFERENCE-ANSWER-JUSTIFICATION-PROOFS", 1, 0, false);
	    declareMacro("do_inference_answer_justification_proofs", "DO-INFERENCE-ANSWER-JUSTIFICATION-PROOFS");
	    declareMacro("do_proof_dependent_inference_answer_justifications", "DO-PROOF-DEPENDENT-INFERENCE-ANSWER-JUSTIFICATIONS");
	    declareMacro("do_inference_all_subproofs", "DO-INFERENCE-ALL-SUBPROOFS");
	    declareFunction("inference_answer_first_justification", "INFERENCE-ANSWER-FIRST-JUSTIFICATION", 1, 0, false);
	    declareFunction("inference_answer_justification_first_proof", "INFERENCE-ANSWER-JUSTIFICATION-FIRST-PROOF", 1, 0, false);
	    declareFunction("inference_first_proof", "INFERENCE-FIRST-PROOF", 1, 0, false);
	    declareFunction("inference_answer_justification_inference", "INFERENCE-ANSWER-JUSTIFICATION-INFERENCE", 1, 0, false);
	    declareFunction("inference_answer_justification_store", "INFERENCE-ANSWER-JUSTIFICATION-STORE", 1, 0, false);
	    declareFunction("inference_answer_justification_rules", "INFERENCE-ANSWER-JUSTIFICATION-RULES", 1, 0, false);
	    declareFunction("add_inference_answer_justification_proof", "ADD-INFERENCE-ANSWER-JUSTIFICATION-PROOF", 2, 0, false);
	    declareFunction("new_inference_answer_justification_from_proof", "NEW-INFERENCE-ANSWER-JUSTIFICATION-FROM-PROOF", 4, 0, false);
	    declareFunction("inference_answer_justification_to_tms_deduction_spec", "INFERENCE-ANSWER-JUSTIFICATION-TO-TMS-DEDUCTION-SPEC", 2, 0, false);
	    declareFunction("inference_answer_justification_to_true_tms_deduction_spec", "INFERENCE-ANSWER-JUSTIFICATION-TO-TRUE-TMS-DEDUCTION-SPEC", 1, 0, false);
	    declareFunction("inference_answer_justification_to_false_tms_deduction_spec", "INFERENCE-ANSWER-JUSTIFICATION-TO-FALSE-TMS-DEDUCTION-SPEC", 1, 0, false);
	    declareFunction("destroy_proof_inference_answer_justifications", "DESTROY-PROOF-INFERENCE-ANSWER-JUSTIFICATIONS", 1, 0, false);
	    declareFunction("inference_time_per_answer", "INFERENCE-TIME-PER-ANSWER", 1, 0, false);
	    declareFunction("inference_steps_per_answer", "INFERENCE-STEPS-PER-ANSWER", 1, 0, false);
	    declareFunction("inference_wasted_time_after_last_answer", "INFERENCE-WASTED-TIME-AFTER-LAST-ANSWER", 1, 0, false);
	    declareFunction("inference_latency_improvement_from_iterativity", "INFERENCE-LATENCY-IMPROVEMENT-FROM-ITERATIVITY", 1, 0, false);
	    declareFunction("inference_metrics", "INFERENCE-METRICS", 1, 0, false);
	    declareFunction("inference_compute_metrics", "INFERENCE-COMPUTE-METRICS", 1, 0, false);
	    declareFunction("inference_compute_metrics_plist", "INFERENCE-COMPUTE-METRICS-PLIST", 2, 0, false);
	    declareFunction("inference_compute_metrics_alist", "INFERENCE-COMPUTE-METRICS-ALIST", 2, 0, false);
	    declareFunction("inference_transformation_rules_in_answers", "INFERENCE-TRANSFORMATION-RULES-IN-ANSWERS", 1, 0, false);
	    declareFunction("inference_all_answer_proofs", "INFERENCE-ALL-ANSWER-PROOFS", 1, 0, false);
	    declareFunction("inference_all_answer_subproofs", "INFERENCE-ALL-ANSWER-SUBPROOFS", 1, 0, false);
	    declareFunction("inference_answer_justification_all_subproofs", "INFERENCE-ANSWER-JUSTIFICATION-ALL-SUBPROOFS", 1, 0, false);
	    declareFunction("inference_all_answer_supports", "INFERENCE-ALL-ANSWER-SUPPORTS", 1, 0, false);
	    declareFunction("inference_all_answer_modules", "INFERENCE-ALL-ANSWER-MODULES", 1, 0, false);
	    declareFunction("problem_relevant_to_some_strategyP", "PROBLEM-RELEVANT-TO-SOME-STRATEGY?", 1, 0, false);
	    declareFunction("first_problem_relevant_strategy", "FIRST-PROBLEM-RELEVANT-STRATEGY", 1, 0, false);
	    declareFunction("problem_or_inference_p", "PROBLEM-OR-INFERENCE-P", 1, 0, false);
	    declareMacro("with_inference_problem_working_time_table", "WITH-INFERENCE-PROBLEM-WORKING-TIME-TABLE");
	    declareFunction("inference_problem_working_time_lock", "INFERENCE-PROBLEM-WORKING-TIME-LOCK", 1, 0, false);
	    declareFunction("inference_problem_working_time_table", "INFERENCE-PROBLEM-WORKING-TIME-TABLE", 1, 0, false);
	    declareFunction("initialize_inference_problem_working_time_data", "INITIALIZE-INFERENCE-PROBLEM-WORKING-TIME-DATA", 1, 0, false);
	    declareFunction("inference_note_tactic_executed", "INFERENCE-NOTE-TACTIC-EXECUTED", 2, 0, false);
	    declareFunction("inference_note_problem_pending", "INFERENCE-NOTE-PROBLEM-PENDING", 2, 0, false);
	    declareFunction("signal_inference_eventP", "SIGNAL-INFERENCE-EVENT?", 2, 0, false);
	    declareFunction("possibly_signal_new_inference_answer", "POSSIBLY-SIGNAL-NEW-INFERENCE-ANSWER", 2, 0, false);
	    declareFunction("signal_new_inference_answer", "SIGNAL-NEW-INFERENCE-ANSWER", 2, 0, false);
	    declareFunction("possibly_signal_inference_status_change", "POSSIBLY-SIGNAL-INFERENCE-STATUS-CHANGE", 1, 0, false);
	    declareFunction("signal_inference_status_change", "SIGNAL-INFERENCE-STATUS-CHANGE", 2, 0, false);
	    declareFunction("possibly_signal_inference_new_transformation_depth_reached", "POSSIBLY-SIGNAL-INFERENCE-NEW-TRANSFORMATION-DEPTH-REACHED", 2, 0, false);
	    declareFunction("signal_inference_new_transformation_depth_reached", "SIGNAL-INFERENCE-NEW-TRANSFORMATION-DEPTH-REACHED", 2, 0, false);
	    declareMacro("inference_within_sksi_query_execution", "INFERENCE-WITHIN-SKSI-QUERY-EXECUTION");
	    declareFunction("possibly_signal_sksi_query_start", "POSSIBLY-SIGNAL-SKSI-QUERY-START", 2, 0, false);
	    declareFunction("possibly_signal_sksi_query_end", "POSSIBLY-SIGNAL-SKSI-QUERY-END", 2, 0, false);
	    declareFunction("possibly_increment_inference_sksi_query_total_time", "POSSIBLY-INCREMENT-INFERENCE-SKSI-QUERY-TOTAL-TIME", 2, 0, false);
	    declareFunction("possibly_add_inference_sksi_query_start_time", "POSSIBLY-ADD-INFERENCE-SKSI-QUERY-START-TIME", 2, 0, false);
	    declareFunction("possibly_signal_sksi_query", "POSSIBLY-SIGNAL-SKSI-QUERY", 3, 1, false);
	    declareFunction("signal_sksi_query", "SIGNAL-SKSI-QUERY", 3, 1, false);
	    declareMacro("inference_within_sparql_query_execution", "INFERENCE-WITHIN-SPARQL-QUERY-EXECUTION");
	    declareFunction("possibly_add_inference_sparql_query_profile", "POSSIBLY-ADD-INFERENCE-SPARQL-QUERY-PROFILE", 4, 0, false);
	    declareFunction("increment_inference_sksi_query_total_time", "INCREMENT-INFERENCE-SKSI-QUERY-TOTAL-TIME", 2, 0, false);
	    declareFunction("add_inference_sksi_query_start_time", "ADD-INFERENCE-SKSI-QUERY-START-TIME", 2, 0, false);
	    declareFunction("add_inference_sparql_query_profile", "ADD-INFERENCE-SPARQL-QUERY-PROFILE", 2, 0, false);
	}
	if (SubLFiles.USE_V2) {
	    declareFunction("inference_all_answers", "INFERENCE-ALL-ANSWERS", 1, 0, false);
	    declareFunction("new_inference_answer_justification", "NEW-INFERENCE-ANSWER-JUSTIFICATION", 2, 0, false);
	    declareFunction("find_or_create_inference_answer_justification", "FIND-OR-CREATE-INFERENCE-ANSWER-JUSTIFICATION", 3, 0, false);
	    declareFunction("new_inference_answer_justification_from_proof", "NEW-INFERENCE-ANSWER-JUSTIFICATION-FROM-PROOF", 3, 0, false);
	}
	return NIL;
    }

    public static SubLObject declare_inference_datastructures_inference_file_Previous() {
	declareFunction("inference_type_p", "INFERENCE-TYPE-P", 1, 0, false);
	declareFunction("inference_print_function_trampoline", "INFERENCE-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
	declareFunction("inference_p", "INFERENCE-P", 1, 0, false);
	new inference_datastructures_inference.$inference_p$UnaryFunction();
	declareFunction("infrnc_suid", "INFRNC-SUID", 1, 0, false);
	declareFunction("infrnc_problem_store", "INFRNC-PROBLEM-STORE", 1, 0, false);
	declareFunction("infrnc_forward_propagate", "INFRNC-FORWARD-PROPAGATE", 1, 0, false);
	declareFunction("infrnc_input_mt", "INFRNC-INPUT-MT", 1, 0, false);
	declareFunction("infrnc_input_el_query", "INFRNC-INPUT-EL-QUERY", 1, 0, false);
	declareFunction("infrnc_input_non_explanatory_el_query", "INFRNC-INPUT-NON-EXPLANATORY-EL-QUERY", 1, 0, false);
	declareFunction("infrnc_input_query_properties", "INFRNC-INPUT-QUERY-PROPERTIES", 1, 0, false);
	declareFunction("infrnc_mt", "INFRNC-MT", 1, 0, false);
	declareFunction("infrnc_el_query", "INFRNC-EL-QUERY", 1, 0, false);
	declareFunction("infrnc_el_bindings", "INFRNC-EL-BINDINGS", 1, 0, false);
	declareFunction("infrnc_hl_query", "INFRNC-HL-QUERY", 1, 0, false);
	declareFunction("infrnc_explanatory_subquery", "INFRNC-EXPLANATORY-SUBQUERY", 1, 0, false);
	declareFunction("infrnc_non_explanatory_subquery", "INFRNC-NON-EXPLANATORY-SUBQUERY", 1, 0, false);
	declareFunction("infrnc_free_hl_vars", "INFRNC-FREE-HL-VARS", 1, 0, false);
	declareFunction("infrnc_hypothetical_bindings", "INFRNC-HYPOTHETICAL-BINDINGS", 1, 0, false);
	declareFunction("infrnc_answer_id_index", "INFRNC-ANSWER-ID-INDEX", 1, 0, false);
	declareFunction("infrnc_answer_bindings_index", "INFRNC-ANSWER-BINDINGS-INDEX", 1, 0, false);
	declareFunction("infrnc_new_answer_id_start", "INFRNC-NEW-ANSWER-ID-START", 1, 0, false);
	declareFunction("infrnc_new_answer_justifications", "INFRNC-NEW-ANSWER-JUSTIFICATIONS", 1, 0, false);
	declareFunction("infrnc_status", "INFRNC-STATUS", 1, 0, false);
	declareFunction("infrnc_suspend_status", "INFRNC-SUSPEND-STATUS", 1, 0, false);
	declareFunction("infrnc_root_link", "INFRNC-ROOT-LINK", 1, 0, false);
	declareFunction("infrnc_relevant_problems", "INFRNC-RELEVANT-PROBLEMS", 1, 0, false);
	declareFunction("infrnc_strategy_set", "INFRNC-STRATEGY-SET", 1, 0, false);
	declareFunction("infrnc_control_process", "INFRNC-CONTROL-PROCESS", 1, 0, false);
	declareFunction("infrnc_interrupting_processes", "INFRNC-INTERRUPTING-PROCESSES", 1, 0, false);
	declareFunction("infrnc_max_transformation_depth_reached", "INFRNC-MAX-TRANSFORMATION-DEPTH-REACHED", 1, 0, false);
	declareFunction("infrnc_disjunction_free_el_vars_policy", "INFRNC-DISJUNCTION-FREE-EL-VARS-POLICY", 1, 0, false);
	declareFunction("infrnc_result_uniqueness_criterion", "INFRNC-RESULT-UNIQUENESS-CRITERION", 1, 0, false);
	declareFunction("infrnc_allow_hl_predicate_transformationP", "INFRNC-ALLOW-HL-PREDICATE-TRANSFORMATION?", 1, 0, false);
	declareFunction("infrnc_allow_unbound_predicate_transformationP", "INFRNC-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?", 1, 0, false);
	declareFunction("infrnc_allow_evaluatable_predicate_transformationP", "INFRNC-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?", 1, 0, false);
	declareFunction("infrnc_allow_indeterminate_resultsP", "INFRNC-ALLOW-INDETERMINATE-RESULTS?", 1, 0, false);
	declareFunction("infrnc_allowed_rules", "INFRNC-ALLOWED-RULES", 1, 0, false);
	declareFunction("infrnc_forbidden_rules", "INFRNC-FORBIDDEN-RULES", 1, 0, false);
	declareFunction("infrnc_allowed_modules", "INFRNC-ALLOWED-MODULES", 1, 0, false);
	declareFunction("infrnc_allow_abnormality_checkingP", "INFRNC-ALLOW-ABNORMALITY-CHECKING?", 1, 0, false);
	declareFunction("infrnc_transitive_closure_mode", "INFRNC-TRANSITIVE-CLOSURE-MODE", 1, 0, false);
	declareFunction("infrnc_problem_store_privateP", "INFRNC-PROBLEM-STORE-PRIVATE?", 1, 0, false);
	declareFunction("infrnc_continuableP", "INFRNC-CONTINUABLE?", 1, 0, false);
	declareFunction("infrnc_browsableP", "INFRNC-BROWSABLE?", 1, 0, false);
	declareFunction("infrnc_return_type", "INFRNC-RETURN-TYPE", 1, 0, false);
	declareFunction("infrnc_answer_language", "INFRNC-ANSWER-LANGUAGE", 1, 0, false);
	declareFunction("infrnc_cache_resultsP", "INFRNC-CACHE-RESULTS?", 1, 0, false);
	declareFunction("infrnc_blockingP", "INFRNC-BLOCKING?", 1, 0, false);
	declareFunction("infrnc_max_number", "INFRNC-MAX-NUMBER", 1, 0, false);
	declareFunction("infrnc_max_time", "INFRNC-MAX-TIME", 1, 0, false);
	declareFunction("infrnc_max_step", "INFRNC-MAX-STEP", 1, 0, false);
	declareFunction("infrnc_mode", "INFRNC-MODE", 1, 0, false);
	declareFunction("infrnc_forward_max_time", "INFRNC-FORWARD-MAX-TIME", 1, 0, false);
	declareFunction("infrnc_max_proof_depth", "INFRNC-MAX-PROOF-DEPTH", 1, 0, false);
	declareFunction("infrnc_max_transformation_depth", "INFRNC-MAX-TRANSFORMATION-DEPTH", 1, 0, false);
	declareFunction("infrnc_min_rule_utility", "INFRNC-MIN-RULE-UTILITY", 1, 0, false);
	declareFunction("infrnc_probably_approximately_done", "INFRNC-PROBABLY-APPROXIMATELY-DONE", 1, 0, false);
	declareFunction("infrnc_metrics_template", "INFRNC-METRICS-TEMPLATE", 1, 0, false);
	declareFunction("infrnc_start_universal_time", "INFRNC-START-UNIVERSAL-TIME", 1, 0, false);
	declareFunction("infrnc_start_internal_real_time", "INFRNC-START-INTERNAL-REAL-TIME", 1, 0, false);
	declareFunction("infrnc_end_internal_real_time", "INFRNC-END-INTERNAL-REAL-TIME", 1, 0, false);
	declareFunction("infrnc_pad_internal_real_time", "INFRNC-PAD-INTERNAL-REAL-TIME", 1, 0, false);
	declareFunction("infrnc_hypothesization_time", "INFRNC-HYPOTHESIZATION-TIME", 1, 0, false);
	declareFunction("infrnc_cumulative_time", "INFRNC-CUMULATIVE-TIME", 1, 0, false);
	declareFunction("infrnc_step_count", "INFRNC-STEP-COUNT", 1, 0, false);
	declareFunction("infrnc_cumulative_step_count", "INFRNC-CUMULATIVE-STEP-COUNT", 1, 0, false);
	declareFunction("infrnc_events", "INFRNC-EVENTS", 1, 0, false);
	declareFunction("infrnc_halt_conditions", "INFRNC-HALT-CONDITIONS", 1, 0, false);
	declareFunction("infrnc_accumulators", "INFRNC-ACCUMULATORS", 1, 0, false);
	declareFunction("infrnc_proof_watermark", "INFRNC-PROOF-WATERMARK", 1, 0, false);
	declareFunction("infrnc_problem_working_time_data", "INFRNC-PROBLEM-WORKING-TIME-DATA", 1, 0, false);
	declareFunction("infrnc_type", "INFRNC-TYPE", 1, 0, false);
	declareFunction("infrnc_data", "INFRNC-DATA", 1, 0, false);
	declareFunction("infrnc_properties", "INFRNC-PROPERTIES", 1, 0, false);
	declareFunction("_csetf_infrnc_suid", "_CSETF-INFRNC-SUID", 2, 0, false);
	declareFunction("_csetf_infrnc_problem_store", "_CSETF-INFRNC-PROBLEM-STORE", 2, 0, false);
	declareFunction("_csetf_infrnc_forward_propagate", "_CSETF-INFRNC-FORWARD-PROPAGATE", 2, 0, false);
	declareFunction("_csetf_infrnc_input_mt", "_CSETF-INFRNC-INPUT-MT", 2, 0, false);
	declareFunction("_csetf_infrnc_input_el_query", "_CSETF-INFRNC-INPUT-EL-QUERY", 2, 0, false);
	declareFunction("_csetf_infrnc_input_non_explanatory_el_query", "_CSETF-INFRNC-INPUT-NON-EXPLANATORY-EL-QUERY", 2, 0, false);
	declareFunction("_csetf_infrnc_input_query_properties", "_CSETF-INFRNC-INPUT-QUERY-PROPERTIES", 2, 0, false);
	declareFunction("_csetf_infrnc_mt", "_CSETF-INFRNC-MT", 2, 0, false);
	declareFunction("_csetf_infrnc_el_query", "_CSETF-INFRNC-EL-QUERY", 2, 0, false);
	declareFunction("_csetf_infrnc_el_bindings", "_CSETF-INFRNC-EL-BINDINGS", 2, 0, false);
	declareFunction("_csetf_infrnc_hl_query", "_CSETF-INFRNC-HL-QUERY", 2, 0, false);
	declareFunction("_csetf_infrnc_explanatory_subquery", "_CSETF-INFRNC-EXPLANATORY-SUBQUERY", 2, 0, false);
	declareFunction("_csetf_infrnc_non_explanatory_subquery", "_CSETF-INFRNC-NON-EXPLANATORY-SUBQUERY", 2, 0, false);
	declareFunction("_csetf_infrnc_free_hl_vars", "_CSETF-INFRNC-FREE-HL-VARS", 2, 0, false);
	declareFunction("_csetf_infrnc_hypothetical_bindings", "_CSETF-INFRNC-HYPOTHETICAL-BINDINGS", 2, 0, false);
	declareFunction("_csetf_infrnc_answer_id_index", "_CSETF-INFRNC-ANSWER-ID-INDEX", 2, 0, false);
	declareFunction("_csetf_infrnc_answer_bindings_index", "_CSETF-INFRNC-ANSWER-BINDINGS-INDEX", 2, 0, false);
	declareFunction("_csetf_infrnc_new_answer_id_start", "_CSETF-INFRNC-NEW-ANSWER-ID-START", 2, 0, false);
	declareFunction("_csetf_infrnc_new_answer_justifications", "_CSETF-INFRNC-NEW-ANSWER-JUSTIFICATIONS", 2, 0, false);
	declareFunction("_csetf_infrnc_status", "_CSETF-INFRNC-STATUS", 2, 0, false);
	declareFunction("_csetf_infrnc_suspend_status", "_CSETF-INFRNC-SUSPEND-STATUS", 2, 0, false);
	declareFunction("_csetf_infrnc_root_link", "_CSETF-INFRNC-ROOT-LINK", 2, 0, false);
	declareFunction("_csetf_infrnc_relevant_problems", "_CSETF-INFRNC-RELEVANT-PROBLEMS", 2, 0, false);
	declareFunction("_csetf_infrnc_strategy_set", "_CSETF-INFRNC-STRATEGY-SET", 2, 0, false);
	declareFunction("_csetf_infrnc_control_process", "_CSETF-INFRNC-CONTROL-PROCESS", 2, 0, false);
	declareFunction("_csetf_infrnc_interrupting_processes", "_CSETF-INFRNC-INTERRUPTING-PROCESSES", 2, 0, false);
	declareFunction("_csetf_infrnc_max_transformation_depth_reached", "_CSETF-INFRNC-MAX-TRANSFORMATION-DEPTH-REACHED", 2, 0, false);
	declareFunction("_csetf_infrnc_disjunction_free_el_vars_policy", "_CSETF-INFRNC-DISJUNCTION-FREE-EL-VARS-POLICY", 2, 0, false);
	declareFunction("_csetf_infrnc_result_uniqueness_criterion", "_CSETF-INFRNC-RESULT-UNIQUENESS-CRITERION", 2, 0, false);
	declareFunction("_csetf_infrnc_allow_hl_predicate_transformationP", "_CSETF-INFRNC-ALLOW-HL-PREDICATE-TRANSFORMATION?", 2, 0, false);
	declareFunction("_csetf_infrnc_allow_unbound_predicate_transformationP", "_CSETF-INFRNC-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?", 2, 0, false);
	declareFunction("_csetf_infrnc_allow_evaluatable_predicate_transformationP", "_CSETF-INFRNC-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?", 2, 0, false);
	declareFunction("_csetf_infrnc_allow_indeterminate_resultsP", "_CSETF-INFRNC-ALLOW-INDETERMINATE-RESULTS?", 2, 0, false);
	declareFunction("_csetf_infrnc_allowed_rules", "_CSETF-INFRNC-ALLOWED-RULES", 2, 0, false);
	declareFunction("_csetf_infrnc_forbidden_rules", "_CSETF-INFRNC-FORBIDDEN-RULES", 2, 0, false);
	declareFunction("_csetf_infrnc_allowed_modules", "_CSETF-INFRNC-ALLOWED-MODULES", 2, 0, false);
	declareFunction("_csetf_infrnc_allow_abnormality_checkingP", "_CSETF-INFRNC-ALLOW-ABNORMALITY-CHECKING?", 2, 0, false);
	declareFunction("_csetf_infrnc_transitive_closure_mode", "_CSETF-INFRNC-TRANSITIVE-CLOSURE-MODE", 2, 0, false);
	declareFunction("_csetf_infrnc_problem_store_privateP", "_CSETF-INFRNC-PROBLEM-STORE-PRIVATE?", 2, 0, false);
	declareFunction("_csetf_infrnc_continuableP", "_CSETF-INFRNC-CONTINUABLE?", 2, 0, false);
	declareFunction("_csetf_infrnc_browsableP", "_CSETF-INFRNC-BROWSABLE?", 2, 0, false);
	declareFunction("_csetf_infrnc_return_type", "_CSETF-INFRNC-RETURN-TYPE", 2, 0, false);
	declareFunction("_csetf_infrnc_answer_language", "_CSETF-INFRNC-ANSWER-LANGUAGE", 2, 0, false);
	declareFunction("_csetf_infrnc_cache_resultsP", "_CSETF-INFRNC-CACHE-RESULTS?", 2, 0, false);
	declareFunction("_csetf_infrnc_blockingP", "_CSETF-INFRNC-BLOCKING?", 2, 0, false);
	declareFunction("_csetf_infrnc_max_number", "_CSETF-INFRNC-MAX-NUMBER", 2, 0, false);
	declareFunction("_csetf_infrnc_max_time", "_CSETF-INFRNC-MAX-TIME", 2, 0, false);
	declareFunction("_csetf_infrnc_max_step", "_CSETF-INFRNC-MAX-STEP", 2, 0, false);
	declareFunction("_csetf_infrnc_mode", "_CSETF-INFRNC-MODE", 2, 0, false);
	declareFunction("_csetf_infrnc_forward_max_time", "_CSETF-INFRNC-FORWARD-MAX-TIME", 2, 0, false);
	declareFunction("_csetf_infrnc_max_proof_depth", "_CSETF-INFRNC-MAX-PROOF-DEPTH", 2, 0, false);
	declareFunction("_csetf_infrnc_max_transformation_depth", "_CSETF-INFRNC-MAX-TRANSFORMATION-DEPTH", 2, 0, false);
	declareFunction("_csetf_infrnc_min_rule_utility", "_CSETF-INFRNC-MIN-RULE-UTILITY", 2, 0, false);
	declareFunction("_csetf_infrnc_probably_approximately_done", "_CSETF-INFRNC-PROBABLY-APPROXIMATELY-DONE", 2, 0, false);
	declareFunction("_csetf_infrnc_metrics_template", "_CSETF-INFRNC-METRICS-TEMPLATE", 2, 0, false);
	declareFunction("_csetf_infrnc_start_universal_time", "_CSETF-INFRNC-START-UNIVERSAL-TIME", 2, 0, false);
	declareFunction("_csetf_infrnc_start_internal_real_time", "_CSETF-INFRNC-START-INTERNAL-REAL-TIME", 2, 0, false);
	declareFunction("_csetf_infrnc_end_internal_real_time", "_CSETF-INFRNC-END-INTERNAL-REAL-TIME", 2, 0, false);
	declareFunction("_csetf_infrnc_pad_internal_real_time", "_CSETF-INFRNC-PAD-INTERNAL-REAL-TIME", 2, 0, false);
	declareFunction("_csetf_infrnc_hypothesization_time", "_CSETF-INFRNC-HYPOTHESIZATION-TIME", 2, 0, false);
	declareFunction("_csetf_infrnc_cumulative_time", "_CSETF-INFRNC-CUMULATIVE-TIME", 2, 0, false);
	declareFunction("_csetf_infrnc_step_count", "_CSETF-INFRNC-STEP-COUNT", 2, 0, false);
	declareFunction("_csetf_infrnc_cumulative_step_count", "_CSETF-INFRNC-CUMULATIVE-STEP-COUNT", 2, 0, false);
	declareFunction("_csetf_infrnc_events", "_CSETF-INFRNC-EVENTS", 2, 0, false);
	declareFunction("_csetf_infrnc_halt_conditions", "_CSETF-INFRNC-HALT-CONDITIONS", 2, 0, false);
	declareFunction("_csetf_infrnc_accumulators", "_CSETF-INFRNC-ACCUMULATORS", 2, 0, false);
	declareFunction("_csetf_infrnc_proof_watermark", "_CSETF-INFRNC-PROOF-WATERMARK", 2, 0, false);
	declareFunction("_csetf_infrnc_problem_working_time_data", "_CSETF-INFRNC-PROBLEM-WORKING-TIME-DATA", 2, 0, false);
	declareFunction("_csetf_infrnc_type", "_CSETF-INFRNC-TYPE", 2, 0, false);
	declareFunction("_csetf_infrnc_data", "_CSETF-INFRNC-DATA", 2, 0, false);
	declareFunction("_csetf_infrnc_properties", "_CSETF-INFRNC-PROPERTIES", 2, 0, false);
	declareFunction("make_inference", "MAKE-INFERENCE", 0, 1, false);
	declareFunction("visit_defstruct_inference", "VISIT-DEFSTRUCT-INFERENCE", 2, 0, false);
	declareFunction("visit_defstruct_object_inference_method", "VISIT-DEFSTRUCT-OBJECT-INFERENCE-METHOD", 2, 0, false);
	declareFunction("valid_inference_p", "VALID-INFERENCE-P", 1, 0, false);
	declareFunction("invalid_inference_p", "INVALID-INFERENCE-P", 1, 0, false);
	declareFunction("inference_invalid_p", "INFERENCE-INVALID-P", 1, 0, false);
	declareFunction("print_inference", "PRINT-INFERENCE", 3, 0, false);
	declareFunction("sxhash_inference_method", "SXHASH-INFERENCE-METHOD", 1, 0, false);
	new inference_datastructures_inference.$sxhash_inference_method$UnaryFunction();
	declareFunction("new_inference_p", "NEW-INFERENCE-P", 1, 0, false);
	declareFunction("prepared_inference_p", "PREPARED-INFERENCE-P", 1, 0, false);
	declareFunction("ready_inference_p", "READY-INFERENCE-P", 1, 0, false);
	declareFunction("running_inference_p", "RUNNING-INFERENCE-P", 1, 0, false);
	declareFunction("suspended_inference_p", "SUSPENDED-INFERENCE-P", 1, 0, false);
	declareFunction("continuable_inference_p", "CONTINUABLE-INFERENCE-P", 1, 0, false);
	declareFunction("exhausted_inference_p", "EXHAUSTED-INFERENCE-P", 1, 0, false);
	declareMacro("do_inference_relevant_problems", "DO-INFERENCE-RELEVANT-PROBLEMS");
	declareMacro("do_inference_new_answer_justifications", "DO-INFERENCE-NEW-ANSWER-JUSTIFICATIONS");
	declareMacro("do_inference_new_answers", "DO-INFERENCE-NEW-ANSWERS");
	declareMacro("do_inference_answers", "DO-INFERENCE-ANSWERS");
	declareMacro("do_inference_answers_from_index", "DO-INFERENCE-ANSWERS-FROM-INDEX");
	declareMacro("do_inference_justifications", "DO-INFERENCE-JUSTIFICATIONS");
	declareMacro("do_inference_interrupting_processes", "DO-INFERENCE-INTERRUPTING-PROCESSES");
	declareMacro("do_inference_root_proofs", "DO-INFERENCE-ROOT-PROOFS");
	declareMacro("do_inference_allowed_rules", "DO-INFERENCE-ALLOWED-RULES");
	declareMacro("with_inference_problem_working_time_lock", "WITH-INFERENCE-PROBLEM-WORKING-TIME-LOCK");
	declareFunction("new_inference", "NEW-INFERENCE", 1, 0, false);
	declareFunction("new_tautological_inference", "NEW-TAUTOLOGICAL-INFERENCE", 1, 0, false);
	declareFunction("destroy_all_inferences", "DESTROY-ALL-INFERENCES", 0, 0, false);
	declareFunction("destroy_inference", "DESTROY-INFERENCE", 1, 0, false);
	declareFunction("destroy_inference_and_problem_store", "DESTROY-INFERENCE-AND-PROBLEM-STORE", 1, 0, false);
	declareFunction("destroy_problem_store_inference", "DESTROY-PROBLEM-STORE-INFERENCE", 1, 0, false);
	declareFunction("destroy_inference_int", "DESTROY-INFERENCE-INT", 1, 0, false);
	declareFunction("note_inference_invalid", "NOTE-INFERENCE-INVALID", 1, 0, false);
	declareFunction("inference_suid", "INFERENCE-SUID", 1, 0, false);
	declareFunction("inference_problem_store", "INFERENCE-PROBLEM-STORE", 1, 0, false);
	declareFunction("inference_forward_propagate", "INFERENCE-FORWARD-PROPAGATE", 1, 0, false);
	declareFunction("inference_input_mt", "INFERENCE-INPUT-MT", 1, 0, false);
	declareFunction("inference_input_el_query", "INFERENCE-INPUT-EL-QUERY", 1, 0, false);
	declareFunction("inference_input_non_explanatory_el_query", "INFERENCE-INPUT-NON-EXPLANATORY-EL-QUERY", 1, 0, false);
	declareFunction("inference_input_query_properties", "INFERENCE-INPUT-QUERY-PROPERTIES", 1, 0, false);
	declareFunction("inference_mt", "INFERENCE-MT", 1, 0, false);
	declareFunction("inference_el_query", "INFERENCE-EL-QUERY", 1, 0, false);
	declareFunction("inference_el_ist_query", "INFERENCE-EL-IST-QUERY", 1, 0, false);
	declareFunction("inference_el_bindings", "INFERENCE-EL-BINDINGS", 1, 0, false);
	declareFunction("inference_hl_query", "INFERENCE-HL-QUERY", 1, 0, false);
	declareFunction("inference_explanatory_subquery", "INFERENCE-EXPLANATORY-SUBQUERY", 1, 0, false);
	declareFunction("inference_non_explanatory_subquery", "INFERENCE-NON-EXPLANATORY-SUBQUERY", 1, 0, false);
	declareFunction("inference_free_hl_vars", "INFERENCE-FREE-HL-VARS", 1, 0, false);
	declareFunction("inference_hypothetical_bindings", "INFERENCE-HYPOTHETICAL-BINDINGS", 1, 0, false);
	declareFunction("inference_answer_id_index", "INFERENCE-ANSWER-ID-INDEX", 1, 0, false);
	declareFunction("inference_answer_bindings_index", "INFERENCE-ANSWER-BINDINGS-INDEX", 1, 0, false);
	declareFunction("inference_new_answer_id_start", "INFERENCE-NEW-ANSWER-ID-START", 1, 0, false);
	declareFunction("inference_new_answer_justifications", "INFERENCE-NEW-ANSWER-JUSTIFICATIONS", 1, 0, false);
	declareFunction("inference_status", "INFERENCE-STATUS", 1, 0, false);
	declareFunction("inference_suspend_status", "INFERENCE-SUSPEND-STATUS", 1, 0, false);
	declareFunction("inference_root_link", "INFERENCE-ROOT-LINK", 1, 0, false);
	declareFunction("inference_relevant_problems", "INFERENCE-RELEVANT-PROBLEMS", 1, 0, false);
	declareFunction("inference_strategy_set", "INFERENCE-STRATEGY-SET", 1, 0, false);
	declareFunction("inference_control_process", "INFERENCE-CONTROL-PROCESS", 1, 0, false);
	declareFunction("inference_interrupting_processes", "INFERENCE-INTERRUPTING-PROCESSES", 1, 0, false);
	declareFunction("inference_max_transformation_depth_reached", "INFERENCE-MAX-TRANSFORMATION-DEPTH-REACHED", 1, 0, false);
	declareFunction("inference_answer_language", "INFERENCE-ANSWER-LANGUAGE", 1, 0, false);
	declareFunction("inference_cache_resultsP", "INFERENCE-CACHE-RESULTS?", 1, 0, false);
	declareFunction("inference_blockingP", "INFERENCE-BLOCKING?", 1, 0, false);
	declareFunction("inference_disjunction_free_el_vars_policy", "INFERENCE-DISJUNCTION-FREE-EL-VARS-POLICY", 1, 0, false);
	declareFunction("inference_result_uniqueness_criterion", "INFERENCE-RESULT-UNIQUENESS-CRITERION", 1, 0, false);
	declareFunction("inference_allow_hl_predicate_transformationP", "INFERENCE-ALLOW-HL-PREDICATE-TRANSFORMATION?", 1, 0, false);
	declareFunction("inference_allow_unbound_predicate_transformationP", "INFERENCE-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?", 1, 0, false);
	declareFunction("inference_allow_evaluatable_predicate_transformationP", "INFERENCE-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?", 1, 0, false);
	declareFunction("inference_allow_indeterminate_resultsP", "INFERENCE-ALLOW-INDETERMINATE-RESULTS?", 1, 0, false);
	declareFunction("inference_allowed_rules", "INFERENCE-ALLOWED-RULES", 1, 0, false);
	declareFunction("inference_forbidden_rules", "INFERENCE-FORBIDDEN-RULES", 1, 0, false);
	declareFunction("inference_allowed_modules", "INFERENCE-ALLOWED-MODULES", 1, 0, false);
	declareFunction("inference_allow_abnormality_checkingP", "INFERENCE-ALLOW-ABNORMALITY-CHECKING?", 1, 0, false);
	declareFunction("inference_transitive_closure_mode", "INFERENCE-TRANSITIVE-CLOSURE-MODE", 1, 0, false);
	declareFunction("inference_problem_store_privateP", "INFERENCE-PROBLEM-STORE-PRIVATE?", 1, 0, false);
	declareFunction("inference_continuableP", "INFERENCE-CONTINUABLE?", 1, 0, false);
	declareFunction("inference_browsableP", "INFERENCE-BROWSABLE?", 1, 0, false);
	declareFunction("inference_return_type", "INFERENCE-RETURN-TYPE", 1, 0, false);
	declareFunction("inference_max_time", "INFERENCE-MAX-TIME", 1, 0, false);
	declareFunction("inference_max_step", "INFERENCE-MAX-STEP", 1, 0, false);
	declareFunction("inference_mode", "INFERENCE-MODE", 1, 0, false);
	declareFunction("inference_forward_max_time", "INFERENCE-FORWARD-MAX-TIME", 1, 0, false);
	declareFunction("inference_max_number", "INFERENCE-MAX-NUMBER", 1, 0, false);
	declareFunction("inference_max_proof_depth", "INFERENCE-MAX-PROOF-DEPTH", 1, 0, false);
	declareFunction("inference_max_transformation_depth", "INFERENCE-MAX-TRANSFORMATION-DEPTH", 1, 0, false);
	declareFunction("inference_min_rule_utility", "INFERENCE-MIN-RULE-UTILITY", 1, 0, false);
	declareFunction("inference_probably_approximately_done", "INFERENCE-PROBABLY-APPROXIMATELY-DONE", 1, 0, false);
	declareFunction("inference_metrics_template", "INFERENCE-METRICS-TEMPLATE", 1, 0, false);
	declareFunction("inference_start_universal_time", "INFERENCE-START-UNIVERSAL-TIME", 1, 0, false);
	declareFunction("inference_start_internal_real_time", "INFERENCE-START-INTERNAL-REAL-TIME", 1, 0, false);
	declareFunction("inference_end_internal_real_time", "INFERENCE-END-INTERNAL-REAL-TIME", 1, 0, false);
	declareFunction("inference_pad_internal_real_time", "INFERENCE-PAD-INTERNAL-REAL-TIME", 1, 0, false);
	declareFunction("inference_hypothesization_time", "INFERENCE-HYPOTHESIZATION-TIME", 1, 0, false);
	declareFunction("inference_cumulative_time", "INFERENCE-CUMULATIVE-TIME", 1, 0, false);
	declareFunction("inference_step_count", "INFERENCE-STEP-COUNT", 1, 0, false);
	declareFunction("inference_cumulative_step_count", "INFERENCE-CUMULATIVE-STEP-COUNT", 1, 0, false);
	declareFunction("inference_problem_working_time_data", "INFERENCE-PROBLEM-WORKING-TIME-DATA", 1, 0, false);
	declareFunction("inference_events", "INFERENCE-EVENTS", 1, 0, false);
	declareFunction("inference_accumulators", "INFERENCE-ACCUMULATORS", 1, 0, false);
	declareFunction("inference_proof_watermark", "INFERENCE-PROOF-WATERMARK", 1, 0, false);
	declareFunction("inference_type", "INFERENCE-TYPE", 1, 0, false);
	declareFunction("inference_data", "INFERENCE-DATA", 1, 0, false);
	declareFunction("inference_properties", "INFERENCE-PROPERTIES", 1, 0, false);
	declareFunction("set_inference_forward_propagate", "SET-INFERENCE-FORWARD-PROPAGATE", 2, 0, false);
	declareFunction("set_inference_input_mt", "SET-INFERENCE-INPUT-MT", 2, 0, false);
	declareFunction("set_inference_input_el_query", "SET-INFERENCE-INPUT-EL-QUERY", 2, 0, false);
	declareFunction("set_inference_input_non_explanatory_el_query", "SET-INFERENCE-INPUT-NON-EXPLANATORY-EL-QUERY", 2, 0, false);
	declareFunction("set_inference_input_query_properties", "SET-INFERENCE-INPUT-QUERY-PROPERTIES", 2, 0, false);
	declareFunction("set_inference_mt", "SET-INFERENCE-MT", 2, 0, false);
	declareFunction("set_inference_el_query", "SET-INFERENCE-EL-QUERY", 2, 0, false);
	declareFunction("set_inference_el_bindings", "SET-INFERENCE-EL-BINDINGS", 2, 0, false);
	declareFunction("set_inference_hl_query", "SET-INFERENCE-HL-QUERY", 2, 0, false);
	declareFunction("set_inference_explanatory_subquery", "SET-INFERENCE-EXPLANATORY-SUBQUERY", 2, 0, false);
	declareFunction("set_inference_non_explanatory_subquery", "SET-INFERENCE-NON-EXPLANATORY-SUBQUERY", 2, 0, false);
	declareFunction("set_inference_free_hl_vars", "SET-INFERENCE-FREE-HL-VARS", 2, 0, false);
	declareFunction("set_inference_hypothetical_bindings", "SET-INFERENCE-HYPOTHETICAL-BINDINGS", 2, 0, false);
	declareFunction("set_inference_status", "SET-INFERENCE-STATUS", 2, 0, false);
	declareFunction("set_inference_suspend_status", "SET-INFERENCE-SUSPEND-STATUS", 2, 0, false);
	declareFunction("set_inference_root_link", "SET-INFERENCE-ROOT-LINK", 2, 0, false);
	declareFunction("set_inference_control_process", "SET-INFERENCE-CONTROL-PROCESS", 2, 0, false);
	declareFunction("set_inference_max_transformation_depth_reached", "SET-INFERENCE-MAX-TRANSFORMATION-DEPTH-REACHED", 2, 0, false);
	declareFunction("set_inference_disjunction_free_el_vars_policy", "SET-INFERENCE-DISJUNCTION-FREE-EL-VARS-POLICY", 2, 0, false);
	declareFunction("set_inference_result_uniqueness_criterion", "SET-INFERENCE-RESULT-UNIQUENESS-CRITERION", 2, 0, false);
	declareFunction("set_inference_allow_hl_predicate_transformation", "SET-INFERENCE-ALLOW-HL-PREDICATE-TRANSFORMATION", 2, 0, false);
	declareFunction("set_inference_allow_unbound_predicate_transformation", "SET-INFERENCE-ALLOW-UNBOUND-PREDICATE-TRANSFORMATION", 2, 0, false);
	declareFunction("set_inference_allow_evaluatable_predicate_transformation", "SET-INFERENCE-ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION", 2, 0, false);
	declareFunction("set_inference_allow_indeterminate_results", "SET-INFERENCE-ALLOW-INDETERMINATE-RESULTS", 2, 0, false);
	declareFunction("set_inference_allowed_rules", "SET-INFERENCE-ALLOWED-RULES", 2, 0, false);
	declareFunction("set_inference_forbidden_rules", "SET-INFERENCE-FORBIDDEN-RULES", 2, 0, false);
	declareFunction("set_inference_allowed_modules", "SET-INFERENCE-ALLOWED-MODULES", 2, 0, false);
	declareFunction("set_inference_allow_abnormality_checking", "SET-INFERENCE-ALLOW-ABNORMALITY-CHECKING", 2, 0, false);
	declareFunction("set_inference_transitive_closure_mode", "SET-INFERENCE-TRANSITIVE-CLOSURE-MODE", 2, 0, false);
	declareFunction("set_inference_problem_store_private", "SET-INFERENCE-PROBLEM-STORE-PRIVATE", 2, 0, false);
	declareFunction("set_inference_continuable", "SET-INFERENCE-CONTINUABLE", 2, 0, false);
	declareFunction("set_inference_browsable", "SET-INFERENCE-BROWSABLE", 2, 0, false);
	declareFunction("set_inference_return_type", "SET-INFERENCE-RETURN-TYPE", 2, 0, false);
	declareFunction("set_inference_answer_language", "SET-INFERENCE-ANSWER-LANGUAGE", 2, 0, false);
	declareFunction("set_inference_cache_results", "SET-INFERENCE-CACHE-RESULTS", 2, 0, false);
	declareFunction("note_inference_blocking", "NOTE-INFERENCE-BLOCKING", 1, 0, false);
	declareFunction("clear_inference_blocking", "CLEAR-INFERENCE-BLOCKING", 1, 0, false);
	declareFunction("set_inference_max_number", "SET-INFERENCE-MAX-NUMBER", 2, 0, false);
	declareFunction("set_inference_max_time", "SET-INFERENCE-MAX-TIME", 2, 0, false);
	declareFunction("set_inference_max_step", "SET-INFERENCE-MAX-STEP", 2, 0, false);
	declareFunction("set_inference_mode", "SET-INFERENCE-MODE", 2, 0, false);
	declareFunction("set_inference_forward_max_time", "SET-INFERENCE-FORWARD-MAX-TIME", 2, 0, false);
	declareFunction("set_inference_max_proof_depth", "SET-INFERENCE-MAX-PROOF-DEPTH", 2, 0, false);
	declareFunction("set_inference_max_transformation_depth", "SET-INFERENCE-MAX-TRANSFORMATION-DEPTH", 2, 0, false);
	declareFunction("set_inference_min_rule_utility", "SET-INFERENCE-MIN-RULE-UTILITY", 2, 0, false);
	declareFunction("set_inference_probably_approximately_done", "SET-INFERENCE-PROBABLY-APPROXIMATELY-DONE", 2, 0, false);
	declareFunction("set_inference_metrics_template", "SET-INFERENCE-METRICS-TEMPLATE", 2, 0, false);
	declareFunction("set_inference_start_universal_time", "SET-INFERENCE-START-UNIVERSAL-TIME", 2, 0, false);
	declareFunction("set_inference_start_internal_real_time", "SET-INFERENCE-START-INTERNAL-REAL-TIME", 2, 0, false);
	declareFunction("set_inference_end_internal_real_time", "SET-INFERENCE-END-INTERNAL-REAL-TIME", 2, 0, false);
	declareFunction("set_inference_pad_internal_real_time", "SET-INFERENCE-PAD-INTERNAL-REAL-TIME", 2, 0, false);
	declareFunction("set_inference_hypothesization_time", "SET-INFERENCE-HYPOTHESIZATION-TIME", 2, 0, false);
	declareFunction("set_inference_cumulative_time", "SET-INFERENCE-CUMULATIVE-TIME", 2, 0, false);
	declareFunction("set_inference_step_count", "SET-INFERENCE-STEP-COUNT", 2, 0, false);
	declareFunction("increment_inference_step_count", "INCREMENT-INFERENCE-STEP-COUNT", 1, 0, false);
	declareFunction("set_inference_cumulative_step_count", "SET-INFERENCE-CUMULATIVE-STEP-COUNT", 2, 0, false);
	declareFunction("increment_inference_cumulative_step_count", "INCREMENT-INFERENCE-CUMULATIVE-STEP-COUNT", 1, 0, false);
	declareFunction("set_inference_problem_working_time_data", "SET-INFERENCE-PROBLEM-WORKING-TIME-DATA", 2, 0, false);
	declareFunction("set_inference_events", "SET-INFERENCE-EVENTS", 2, 0, false);
	declareFunction("set_inference_halt_conditions", "SET-INFERENCE-HALT-CONDITIONS", 2, 0, false);
	declareFunction("set_inference_type", "SET-INFERENCE-TYPE", 2, 0, false);
	declareFunction("set_inference_data", "SET-INFERENCE-DATA", 2, 0, false);
	declareFunction("set_inference_properties", "SET-INFERENCE-PROPERTIES", 2, 0, false);
	declareFunction("set_inference_property", "SET-INFERENCE-PROPERTY", 3, 0, false);
	declareFunction("push_inference_property", "PUSH-INFERENCE-PROPERTY", 3, 0, false);
	declareFunction("inference_ids", "INFERENCE-IDS", 1, 0, false);
	declareMacro("with_inference_ids", "WITH-INFERENCE-IDS");
	declareFunction("inference_problem_store_suid", "INFERENCE-PROBLEM-STORE-SUID", 1, 0, false);
	declareFunction("all_inferences", "ALL-INFERENCES", 0, 0, false);
	declareFunction("all_successful_inferences", "ALL-SUCCESSFUL-INFERENCES", 0, 0, false);
	declareFunction("inference_strategies", "INFERENCE-STRATEGIES", 1, 0, false);
	declareFunction("inference_hl_mts", "INFERENCE-HL-MTS", 1, 0, false);
	declareFunction("inference_first_hl_query_mt", "INFERENCE-FIRST-HL-QUERY-MT", 1, 0, false);
	declareFunction("inference_no_free_hl_varsP", "INFERENCE-NO-FREE-HL-VARS?", 1, 0, false);
	declareFunction("inference_free_el_vars", "INFERENCE-FREE-EL-VARS", 1, 0, false);
	declareFunction("inference_input_query_property", "INFERENCE-INPUT-QUERY-PROPERTY", 2, 1, false);
	declareFunction("inference_to_new_cyc_query_arguments", "INFERENCE-TO-NEW-CYC-QUERY-ARGUMENTS", 1, 0, false);
	declareFunction("inference_to_new_cyc_query_form", "INFERENCE-TO-NEW-CYC-QUERY-FORM", 1, 0, false);
	declareFunction("inference_to_new_cyc_query_form_string", "INFERENCE-TO-NEW-CYC-QUERY-FORM-STRING", 1, 0, false);
	declareFunction("inference_args_to_new_cyc_query_form_string", "INFERENCE-ARGS-TO-NEW-CYC-QUERY-FORM-STRING", 3, 0, false);
	declareFunction("inference_root_mapped_problem", "INFERENCE-ROOT-MAPPED-PROBLEM", 1, 0, false);
	declareFunction("inference_root_problem", "INFERENCE-ROOT-PROBLEM", 1, 0, false);
	declareFunction("inference_unique_wrt_proofsP", "INFERENCE-UNIQUE-WRT-PROOFS?", 1, 0, false);
	declareFunction("inference_unique_wrt_bindingsP", "INFERENCE-UNIQUE-WRT-BINDINGS?", 1, 0, false);
	declareFunction("inference_compute_answer_justificationsP", "INFERENCE-COMPUTE-ANSWER-JUSTIFICATIONS?", 1, 0, false);
	declareFunction("inference_computes_metricsP", "INFERENCE-COMPUTES-METRICS?", 1, 0, false);
	declareFunction("inference_computes_metricP", "INFERENCE-COMPUTES-METRIC?", 2, 0, false);
	declareFunction("inference_problem_store_private_wrt_dynamic_propertiesP", "INFERENCE-PROBLEM-STORE-PRIVATE-WRT-DYNAMIC-PROPERTIES?", 1, 0, false);
	declareFunction("inference_dynamic_properties_exhaustiveP", "INFERENCE-DYNAMIC-PROPERTIES-EXHAUSTIVE?", 1, 0, false);
	declareFunction("inference_allows_use_of_all_rulesP", "INFERENCE-ALLOWS-USE-OF-ALL-RULES?", 1, 0, false);
	declareFunction("inference_allows_use_of_ruleP", "INFERENCE-ALLOWS-USE-OF-RULE?", 2, 0, false);
	declareFunction("inference_filter_rules", "INFERENCE-FILTER-RULES", 2, 0, false);
	declareFunction("inference_allows_use_of_all_modulesP", "INFERENCE-ALLOWS-USE-OF-ALL-MODULES?", 1, 0, false);
	declareFunction("inference_allows_use_of_moduleP", "INFERENCE-ALLOWS-USE-OF-MODULE?", 2, 0, false);
	declareFunction("inference_forget_extra_resultsP", "INFERENCE-FORGET-EXTRA-RESULTS?", 1, 0, false);
	declareFunction("inference_has_some_answerP", "INFERENCE-HAS-SOME-ANSWER?", 1, 0, false);
	declareFunction("find_inference_answer_by_id", "FIND-INFERENCE-ANSWER-BY-ID", 2, 0, false);
	declareFunction("find_inference_answer_by_ids", "FIND-INFERENCE-ANSWER-BY-IDS", 3, 0, false);
	declareFunction("inference_answer_signature", "INFERENCE-ANSWER-SIGNATURE", 1, 0, false);
	declareFunction("find_inference_answer_from_signature", "FIND-INFERENCE-ANSWER-FROM-SIGNATURE", 1, 0, false);
	declareFunction("inference_first_answer", "INFERENCE-FIRST-ANSWER", 1, 0, false);
	declareFunction("inference_last_answer", "INFERENCE-LAST-ANSWER", 1, 0, false);
	declareFunction("inference_first_answer_with_id_or_greater", "INFERENCE-FIRST-ANSWER-WITH-ID-OR-GREATER", 2, 0, false);
	declareFunction("inference_first_answer_elapsed_time", "INFERENCE-FIRST-ANSWER-ELAPSED-TIME", 1, 0, false);
	declareFunction("inference_first_answer_step_count", "INFERENCE-FIRST-ANSWER-STEP-COUNT", 1, 0, false);
	declareFunction("inference_last_answer_elapsed_time", "INFERENCE-LAST-ANSWER-ELAPSED-TIME", 1, 0, false);
	declareFunction("inference_last_answer_step_count", "INFERENCE-LAST-ANSWER-STEP-COUNT", 1, 0, false);
	declareFunction("inference_last_answer_id", "INFERENCE-LAST-ANSWER-ID", 1, 0, false);
	declareFunction("inference_answer_count_at_elapsed_time", "INFERENCE-ANSWER-COUNT-AT-ELAPSED-TIME", 2, 0, false);
	declareFunction("inference_answer_count_at_30_seconds", "INFERENCE-ANSWER-COUNT-AT-30-SECONDS", 1, 0, false);
	declareFunction("inference_answer_count_at_60_seconds", "INFERENCE-ANSWER-COUNT-AT-60-SECONDS", 1, 0, false);
	declareFunction("inference_answer_times", "INFERENCE-ANSWER-TIMES", 1, 0, false);
	declareFunction("inference_answer_step_counts", "INFERENCE-ANSWER-STEP-COUNTS", 1, 0, false);
	declareFunction("inference_new_root_metrics", "INFERENCE-NEW-ROOT-METRICS", 1, 0, false);
	declareFunction("inference_end_universal_time", "INFERENCE-END-UNIVERSAL-TIME", 1, 0, false);
	declareFunction("inference_maintain_term_working_setP", "INFERENCE-MAINTAIN-TERM-WORKING-SET?", 1, 0, false);
	declareFunction("inference_halt_condition_presentP", "INFERENCE-HALT-CONDITION-PRESENT?", 2, 0, false);
	declareFunction("add_inference_accumulator", "ADD-INFERENCE-ACCUMULATOR", 3, 0, false);
	declareFunction("inference_accumulator", "INFERENCE-ACCUMULATOR", 2, 0, false);
	declareFunction("inference_accumulator_contents", "INFERENCE-ACCUMULATOR-CONTENTS", 2, 0, false);
	declareFunction("inference_accumulate", "INFERENCE-ACCUMULATE", 3, 0, false);
	declareFunction("set_inference_proof_watermark", "SET-INFERENCE-PROOF-WATERMARK", 2, 0, false);
	declareFunction("compute_inference_pad_internal_real_time", "COMPUTE-INFERENCE-PAD-INTERNAL-REAL-TIME", 1, 0, false);
	declareFunction("initialize_pad_table", "INITIALIZE-PAD-TABLE", 1, 0, false);
	declareFunction("pad_table_initializedP", "PAD-TABLE-INITIALIZED?", 0, 0, false);
	declareFunction("probably_approximately_done_cutoff_time", "PROBABLY-APPROXIMATELY-DONE-CUTOFF-TIME", 1, 0, false);
	declareFunction("compute_pad_from_time", "COMPUTE-PAD-FROM-TIME", 1, 0, false);
	declareFunction("inference_note_transformation_depth", "INFERENCE-NOTE-TRANSFORMATION-DEPTH", 2, 0, false);
	declareFunction("inference_note_new_transformation_depth_reached", "INFERENCE-NOTE-NEW-TRANSFORMATION-DEPTH-REACHED", 2, 0, false);
	declareFunction("find_inference_answer_by_bindings", "FIND-INFERENCE-ANSWER-BY-BINDINGS", 2, 0, false);
	declareFunction("new_inference_answer_id", "NEW-INFERENCE-ANSWER-ID", 1, 0, false);
	declareFunction("inference_count", "INFERENCE-COUNT", 0, 0, false);
	declareFunction("inference_all_answers", "INFERENCE-ALL-ANSWERS", 1, 1, false);
	declareFunction("inference_all_new_answers", "INFERENCE-ALL-NEW-ANSWERS", 1, 0, false);
	declareFunction("inference_allowed_rules_list", "INFERENCE-ALLOWED-RULES-LIST", 1, 0, false);
	declareFunction("inference_allowed_rule_count", "INFERENCE-ALLOWED-RULE-COUNT", 1, 0, false);
	declareFunction("inference_forbidden_rules_list", "INFERENCE-FORBIDDEN-RULES-LIST", 1, 0, false);
	declareFunction("inference_forbidden_rule_count", "INFERENCE-FORBIDDEN-RULE-COUNT", 1, 0, false);
	declareFunction("inference_interrupt_signaledP", "INFERENCE-INTERRUPT-SIGNALED?", 1, 0, false);
	declareFunction("inference_no_interrupt_signaledP", "INFERENCE-NO-INTERRUPT-SIGNALED?", 1, 0, false);
	declareFunction("inference_interrupt_handledP", "INFERENCE-INTERRUPT-HANDLED?", 1, 0, false);
	declareFunction("inference_answer_count", "INFERENCE-ANSWER-COUNT", 1, 0, false);
	declareFunction("inference_new_answer_count", "INFERENCE-NEW-ANSWER-COUNT", 1, 0, false);
	declareFunction("successful_inference_p", "SUCCESSFUL-INFERENCE-P", 1, 0, false);
	declareFunction("inference_new_justification_count", "INFERENCE-NEW-JUSTIFICATION-COUNT", 1, 0, false);
	declareFunction("inference_new_result_count", "INFERENCE-NEW-RESULT-COUNT", 1, 0, false);
	declareFunction("forward_inference_p", "FORWARD-INFERENCE-P", 1, 0, false);
	declareFunction("backward_inference_p", "BACKWARD-INFERENCE-P", 1, 0, false);
	declareFunction("abductive_inference_p", "ABDUCTIVE-INFERENCE-P", 1, 0, false);
	declareFunction("inference_provability_status", "INFERENCE-PROVABILITY-STATUS", 1, 0, false);
	declareFunction("good_inference_p", "GOOD-INFERENCE-P", 1, 0, false);
	declareFunction("neutral_inference_p", "NEUTRAL-INFERENCE-P", 1, 0, false);
	declareFunction("no_good_inference_p", "NO-GOOD-INFERENCE-P", 1, 0, false);
	declareFunction("closed_inference_p", "CLOSED-INFERENCE-P", 1, 0, false);
	declareFunction("inference_set_static_properties", "INFERENCE-SET-STATIC-PROPERTIES", 2, 0, false);
	declareFunction("update_inference_input_query_properties", "UPDATE-INFERENCE-INPUT-QUERY-PROPERTIES", 2, 0, false);
	declareFunction("add_inference_relevant_problem", "ADD-INFERENCE-RELEVANT-PROBLEM", 2, 0, false);
	declareFunction("remove_inference_relevant_problem", "REMOVE-INFERENCE-RELEVANT-PROBLEM", 2, 0, false);
	declareFunction("clear_inference_relevant_problems", "CLEAR-INFERENCE-RELEVANT-PROBLEMS", 1, 0, false);
	declareFunction("add_inference_strategy", "ADD-INFERENCE-STRATEGY", 2, 0, false);
	declareFunction("remove_inference_strategy", "REMOVE-INFERENCE-STRATEGY", 2, 0, false);
	declareFunction("clear_inference_strategy_set", "CLEAR-INFERENCE-STRATEGY-SET", 1, 0, false);
	declareFunction("reset_inference_new_answer_id", "RESET-INFERENCE-NEW-ANSWER-ID", 1, 0, false);
	declareFunction("inference_next_new_answer_id", "INFERENCE-NEXT-NEW-ANSWER-ID", 1, 0, false);
	declareFunction("add_inference_new_answer_by_id", "ADD-INFERENCE-NEW-ANSWER-BY-ID", 2, 0, false);
	declareFunction("remove_inference_new_answer_by_id", "REMOVE-INFERENCE-NEW-ANSWER-BY-ID", 2, 0, false);
	declareFunction("add_inference_new_answer_by_bindings", "ADD-INFERENCE-NEW-ANSWER-BY-BINDINGS", 2, 0, false);
	declareFunction("remove_inference_new_answer_by_bindings", "REMOVE-INFERENCE-NEW-ANSWER-BY-BINDINGS", 2, 0, false);
	declareFunction("reset_inference_new_answer_justifications", "RESET-INFERENCE-NEW-ANSWER-JUSTIFICATIONS", 1, 0, false);
	declareFunction("add_inference_new_answer_justification", "ADD-INFERENCE-NEW-ANSWER-JUSTIFICATION", 2, 0, false);
	declareFunction("remove_inference_new_answer_justification", "REMOVE-INFERENCE-NEW-ANSWER-JUSTIFICATION", 2, 0, false);
	declareFunction("clear_inference_control_process", "CLEAR-INFERENCE-CONTROL-PROCESS", 1, 0, false);
	declareFunction("set_inference_control_process_to_me", "SET-INFERENCE-CONTROL-PROCESS-TO-ME", 1, 0, false);
	declareFunction("note_inference_interrupt_signaled", "NOTE-INFERENCE-INTERRUPT-SIGNALED", 2, 0, false);
	declareFunction("increment_inference_cumulative_time", "INCREMENT-INFERENCE-CUMULATIVE-TIME", 2, 0, false);
	declareFunction("reorder_inference_free_hl_vars", "REORDER-INFERENCE-FREE-HL-VARS", 2, 0, false);
	declareFunction("reorder_inference_free_el_vars", "REORDER-INFERENCE-FREE-EL-VARS", 2, 0, false);
	declareFunction("reset_inference_new_answers", "RESET-INFERENCE-NEW-ANSWERS", 1, 0, false);
	declareFunction("add_inference_new_answer", "ADD-INFERENCE-NEW-ANSWER", 2, 0, false);
	declareFunction("remove_inference_new_answer", "REMOVE-INFERENCE-NEW-ANSWER", 2, 0, false);
	declareFunction("initialize_inference_time_properties", "INITIALIZE-INFERENCE-TIME-PROPERTIES", 1, 0, false);
	declareFunction("finalize_inference_time_properties", "FINALIZE-INFERENCE-TIME-PROPERTIES", 1, 0, false);
	declareFunction("inference_elapsed_internal_real_time_since_start", "INFERENCE-ELAPSED-INTERNAL-REAL-TIME-SINCE-START", 1, 0, false);
	declareFunction("inference_elapsed_universal_time_since_start", "INFERENCE-ELAPSED-UNIVERSAL-TIME-SINCE-START", 1, 0, false);
	declareFunction("inference_time_so_far", "INFERENCE-TIME-SO-FAR", 1, 1, false);
	declareFunction("inference_remaining_time", "INFERENCE-REMAINING-TIME", 1, 1, false);
	declareFunction("inference_cumulative_time_so_far", "INFERENCE-CUMULATIVE-TIME-SO-FAR", 1, 1, false);
	declareFunction("inference_signal_interrupt", "INFERENCE-SIGNAL-INTERRUPT", 1, 0, false);
	declareFunction("inference_handle_interrupts", "INFERENCE-HANDLE-INTERRUPTS", 1, 0, false);
	declareFunction("simplest_inference_p", "SIMPLEST-INFERENCE-P", 1, 0, false);
	declareFunction("new_simplest_inference", "NEW-SIMPLEST-INFERENCE", 1, 0, false);
	declareFunction("simplest_inference_strategy", "SIMPLEST-INFERENCE-STRATEGY", 1, 0, false);
	declareFunction("set_simplest_inference_strategy", "SET-SIMPLEST-INFERENCE-STRATEGY", 2, 0, false);
	declareFunction("new_simplest_inference_of_type", "NEW-SIMPLEST-INFERENCE-OF-TYPE", 2, 0, false);
	declareFunction("new_simplest_inference_with_new_store", "NEW-SIMPLEST-INFERENCE-WITH-NEW-STORE", 1, 0, false);
	declareFunction("inference_answer_print_function_trampoline", "INFERENCE-ANSWER-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
	declareFunction("inference_answer_p", "INFERENCE-ANSWER-P", 1, 0, false);
	new inference_datastructures_inference.$inference_answer_p$UnaryFunction();
	declareFunction("inf_answer_suid", "INF-ANSWER-SUID", 1, 0, false);
	declareFunction("inf_answer_inference", "INF-ANSWER-INFERENCE", 1, 0, false);
	declareFunction("inf_answer_bindings", "INF-ANSWER-BINDINGS", 1, 0, false);
	declareFunction("inf_answer_justifications", "INF-ANSWER-JUSTIFICATIONS", 1, 0, false);
	declareFunction("inf_answer_elapsed_creation_time", "INF-ANSWER-ELAPSED-CREATION-TIME", 1, 0, false);
	declareFunction("inf_answer_step_count", "INF-ANSWER-STEP-COUNT", 1, 0, false);
	declareFunction("_csetf_inf_answer_suid", "_CSETF-INF-ANSWER-SUID", 2, 0, false);
	declareFunction("_csetf_inf_answer_inference", "_CSETF-INF-ANSWER-INFERENCE", 2, 0, false);
	declareFunction("_csetf_inf_answer_bindings", "_CSETF-INF-ANSWER-BINDINGS", 2, 0, false);
	declareFunction("_csetf_inf_answer_justifications", "_CSETF-INF-ANSWER-JUSTIFICATIONS", 2, 0, false);
	declareFunction("_csetf_inf_answer_elapsed_creation_time", "_CSETF-INF-ANSWER-ELAPSED-CREATION-TIME", 2, 0, false);
	declareFunction("_csetf_inf_answer_step_count", "_CSETF-INF-ANSWER-STEP-COUNT", 2, 0, false);
	declareFunction("make_inference_answer", "MAKE-INFERENCE-ANSWER", 0, 1, false);
	declareFunction("visit_defstruct_inference_answer", "VISIT-DEFSTRUCT-INFERENCE-ANSWER", 2, 0, false);
	declareFunction("visit_defstruct_object_inference_answer_method", "VISIT-DEFSTRUCT-OBJECT-INFERENCE-ANSWER-METHOD", 2, 0, false);
	declareFunction("valid_inference_answer_p", "VALID-INFERENCE-ANSWER-P", 1, 0, false);
	declareFunction("inference_answer_invalid_p", "INFERENCE-ANSWER-INVALID-P", 1, 0, false);
	declareFunction("print_inference_answer", "PRINT-INFERENCE-ANSWER", 3, 0, false);
	declareFunction("sxhash_inference_answer_method", "SXHASH-INFERENCE-ANSWER-METHOD", 1, 0, false);
	declareFunction("new_inference_answer", "NEW-INFERENCE-ANSWER", 2, 0, false);
	declareFunction("find_or_create_inference_answer", "FIND-OR-CREATE-INFERENCE-ANSWER", 2, 0, false);
	declareMacro("do_inference_answer_justifications", "DO-INFERENCE-ANSWER-JUSTIFICATIONS");
	declareMacro("do_inference_answer_justifications_numbered", "DO-INFERENCE-ANSWER-JUSTIFICATIONS-NUMBERED");
	declareFunction("destroy_inference_answer", "DESTROY-INFERENCE-ANSWER", 1, 0, false);
	declareFunction("destroy_inference_answer_int", "DESTROY-INFERENCE-ANSWER-INT", 1, 0, false);
	declareFunction("note_inference_answer_invalid", "NOTE-INFERENCE-ANSWER-INVALID", 1, 0, false);
	declareFunction("inference_answer_suid", "INFERENCE-ANSWER-SUID", 1, 0, false);
	declareFunction("inference_answer_inference", "INFERENCE-ANSWER-INFERENCE", 1, 0, false);
	declareFunction("inference_answer_bindings", "INFERENCE-ANSWER-BINDINGS", 1, 0, false);
	declareFunction("inference_answer_justifications", "INFERENCE-ANSWER-JUSTIFICATIONS", 1, 0, false);
	declareFunction("inference_answer_elapsed_creation_time", "INFERENCE-ANSWER-ELAPSED-CREATION-TIME", 1, 0, false);
	declareFunction("inference_answer_step_count", "INFERENCE-ANSWER-STEP-COUNT", 1, 0, false);
	declareFunction("set_inference_answer_bindings", "SET-INFERENCE-ANSWER-BINDINGS", 2, 0, false);
	declareFunction("set_inference_answer_elapsed_creation_time", "SET-INFERENCE-ANSWER-ELAPSED-CREATION-TIME", 2, 0, false);
	declareFunction("set_inference_answer_step_count", "SET-INFERENCE-ANSWER-STEP-COUNT", 2, 0, false);
	declareFunction("inference_answer_problem_store", "INFERENCE-ANSWER-PROBLEM-STORE", 1, 0, false);
	declareFunction("inference_answer_free_el_vars", "INFERENCE-ANSWER-FREE-EL-VARS", 1, 0, false);
	declareFunction("inference_answer_elapsed_time", "INFERENCE-ANSWER-ELAPSED-TIME", 1, 1, false);
	declareFunction("inference_answer_creation_time", "INFERENCE-ANSWER-CREATION-TIME", 1, 0, false);
	declareFunction("find_inference_answer_justification", "FIND-INFERENCE-ANSWER-JUSTIFICATION", 2, 0, false);
	declareFunction("inference_answer_result_bindings", "INFERENCE-ANSWER-RESULT-BINDINGS", 1, 0, false);
	declareFunction("inference_answer_bindings_equalP", "INFERENCE-ANSWER-BINDINGS-EQUAL?", 2, 0, false);
	declareFunction("inference_answer_newP", "INFERENCE-ANSWER-NEW?", 1, 0, false);
	declareFunction("inference_answer_L", "INFERENCE-ANSWER-<", 2, 0, false);
	declareFunction("inference_answer_el_sentence", "INFERENCE-ANSWER-EL-SENTENCE", 1, 0, false);
	declareFunction("inference_answer_justification_count", "INFERENCE-ANSWER-JUSTIFICATION-COUNT", 1, 0, false);
	declareFunction("add_inference_answer_justification", "ADD-INFERENCE-ANSWER-JUSTIFICATION", 2, 0, false);
	declareFunction("remove_inference_answer_justification", "REMOVE-INFERENCE-ANSWER-JUSTIFICATION", 2, 0, false);
	declareFunction("initialize_inference_answer_elapsed_creation_time", "INITIALIZE-INFERENCE-ANSWER-ELAPSED-CREATION-TIME", 1, 0, false);
	declareFunction("inference_answer_justification_print_function_trampoline", "INFERENCE-ANSWER-JUSTIFICATION-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
	declareFunction("inference_answer_justification_p", "INFERENCE-ANSWER-JUSTIFICATION-P", 1, 0, false);
	new inference_datastructures_inference.$inference_answer_justification_p$UnaryFunction();
	declareFunction("inf_ans_just_answer", "INF-ANS-JUST-ANSWER", 1, 0, false);
	declareFunction("inf_ans_just_supports", "INF-ANS-JUST-SUPPORTS", 1, 0, false);
	declareFunction("inf_ans_just_pragma_supports", "INF-ANS-JUST-PRAGMA-SUPPORTS", 1, 0, false);
	declareFunction("inf_ans_just_proofs", "INF-ANS-JUST-PROOFS", 1, 0, false);
	declareFunction("_csetf_inf_ans_just_answer", "_CSETF-INF-ANS-JUST-ANSWER", 2, 0, false);
	declareFunction("_csetf_inf_ans_just_supports", "_CSETF-INF-ANS-JUST-SUPPORTS", 2, 0, false);
	declareFunction("_csetf_inf_ans_just_pragma_supports", "_CSETF-INF-ANS-JUST-PRAGMA-SUPPORTS", 2, 0, false);
	declareFunction("_csetf_inf_ans_just_proofs", "_CSETF-INF-ANS-JUST-PROOFS", 2, 0, false);
	declareFunction("make_inference_answer_justification", "MAKE-INFERENCE-ANSWER-JUSTIFICATION", 0, 1, false);
	declareFunction("visit_defstruct_inference_answer_justification", "VISIT-DEFSTRUCT-INFERENCE-ANSWER-JUSTIFICATION", 2, 0, false);
	declareFunction("visit_defstruct_object_inference_answer_justification_method", "VISIT-DEFSTRUCT-OBJECT-INFERENCE-ANSWER-JUSTIFICATION-METHOD", 2, 0, false);
	declareFunction("valid_inference_answer_justification_p", "VALID-INFERENCE-ANSWER-JUSTIFICATION-P", 1, 0, false);
	declareFunction("inference_answer_justification_invalid_p", "INFERENCE-ANSWER-JUSTIFICATION-INVALID-P", 1, 0, false);
	declareFunction("print_inference_answer_justification", "PRINT-INFERENCE-ANSWER-JUSTIFICATION", 3, 0, false);
	declareFunction("sxhash_inference_answer_justification_method", "SXHASH-INFERENCE-ANSWER-JUSTIFICATION-METHOD", 1, 0, false);
	declareFunction("list_of_inference_answer_justification_p", "LIST-OF-INFERENCE-ANSWER-JUSTIFICATION-P", 1, 0, false);
	declareFunction("new_inference_answer_justification", "NEW-INFERENCE-ANSWER-JUSTIFICATION", 3, 0, false);
	declareFunction("find_or_create_inference_answer_justification", "FIND-OR-CREATE-INFERENCE-ANSWER-JUSTIFICATION", 4, 0, false);
	declareFunction("subst_indexical_referents_into_answer_bindings", "SUBST-INDEXICAL-REFERENTS-INTO-ANSWER-BINDINGS", 2, 0, false);
	declareFunction("destroy_inference_answer_justification", "DESTROY-INFERENCE-ANSWER-JUSTIFICATION", 1, 0, false);
	declareFunction("destroy_inference_answer_justification_int", "DESTROY-INFERENCE-ANSWER-JUSTIFICATION-INT", 1, 0, false);
	declareFunction("note_inference_answer_justification_invalid", "NOTE-INFERENCE-ANSWER-JUSTIFICATION-INVALID", 1, 0, false);
	declareFunction("inference_answer_justification_answer", "INFERENCE-ANSWER-JUSTIFICATION-ANSWER", 1, 0, false);
	declareFunction("inference_answer_justification_supports", "INFERENCE-ANSWER-JUSTIFICATION-SUPPORTS", 1, 0, false);
	new inference_datastructures_inference.$inference_answer_justification_supports$UnaryFunction();
	declareFunction("inference_answer_justification_pragmatic_supports", "INFERENCE-ANSWER-JUSTIFICATION-PRAGMATIC-SUPPORTS", 1, 0, false);
	declareFunction("inference_answer_justification_proofs", "INFERENCE-ANSWER-JUSTIFICATION-PROOFS", 1, 0, false);
	declareMacro("do_inference_answer_justification_proofs", "DO-INFERENCE-ANSWER-JUSTIFICATION-PROOFS");
	declareMacro("do_proof_dependent_inference_answer_justifications", "DO-PROOF-DEPENDENT-INFERENCE-ANSWER-JUSTIFICATIONS");
	declareMacro("do_inference_all_subproofs", "DO-INFERENCE-ALL-SUBPROOFS");
	declareFunction("inference_answer_first_justification", "INFERENCE-ANSWER-FIRST-JUSTIFICATION", 1, 0, false);
	declareFunction("inference_answer_justification_first_proof", "INFERENCE-ANSWER-JUSTIFICATION-FIRST-PROOF", 1, 0, false);
	declareFunction("inference_first_proof", "INFERENCE-FIRST-PROOF", 1, 0, false);
	declareFunction("inference_answer_justification_inference", "INFERENCE-ANSWER-JUSTIFICATION-INFERENCE", 1, 0, false);
	declareFunction("inference_answer_justification_store", "INFERENCE-ANSWER-JUSTIFICATION-STORE", 1, 0, false);
	declareFunction("inference_answer_justification_rules", "INFERENCE-ANSWER-JUSTIFICATION-RULES", 1, 0, false);
	declareFunction("add_inference_answer_justification_proof", "ADD-INFERENCE-ANSWER-JUSTIFICATION-PROOF", 2, 0, false);
	declareFunction("new_inference_answer_justification_from_proof", "NEW-INFERENCE-ANSWER-JUSTIFICATION-FROM-PROOF", 4, 0, false);
	declareFunction("inference_answer_justification_to_tms_deduction_spec", "INFERENCE-ANSWER-JUSTIFICATION-TO-TMS-DEDUCTION-SPEC", 2, 0, false);
	declareFunction("inference_answer_justification_to_true_tms_deduction_spec", "INFERENCE-ANSWER-JUSTIFICATION-TO-TRUE-TMS-DEDUCTION-SPEC", 1, 0, false);
	declareFunction("inference_answer_justification_to_false_tms_deduction_spec", "INFERENCE-ANSWER-JUSTIFICATION-TO-FALSE-TMS-DEDUCTION-SPEC", 1, 0, false);
	declareFunction("destroy_proof_inference_answer_justifications", "DESTROY-PROOF-INFERENCE-ANSWER-JUSTIFICATIONS", 1, 0, false);
	declareFunction("inference_time_per_answer", "INFERENCE-TIME-PER-ANSWER", 1, 0, false);
	declareFunction("inference_steps_per_answer", "INFERENCE-STEPS-PER-ANSWER", 1, 0, false);
	declareFunction("inference_wasted_time_after_last_answer", "INFERENCE-WASTED-TIME-AFTER-LAST-ANSWER", 1, 0, false);
	declareFunction("inference_latency_improvement_from_iterativity", "INFERENCE-LATENCY-IMPROVEMENT-FROM-ITERATIVITY", 1, 0, false);
	declareFunction("inference_metrics", "INFERENCE-METRICS", 1, 0, false);
	declareFunction("inference_compute_metrics", "INFERENCE-COMPUTE-METRICS", 1, 0, false);
	declareFunction("inference_compute_metrics_plist", "INFERENCE-COMPUTE-METRICS-PLIST", 2, 0, false);
	declareFunction("inference_compute_metrics_alist", "INFERENCE-COMPUTE-METRICS-ALIST", 2, 0, false);
	declareFunction("inference_transformation_rules_in_answers", "INFERENCE-TRANSFORMATION-RULES-IN-ANSWERS", 1, 0, false);
	declareFunction("inference_all_answer_proofs", "INFERENCE-ALL-ANSWER-PROOFS", 1, 0, false);
	declareFunction("inference_all_answer_subproofs", "INFERENCE-ALL-ANSWER-SUBPROOFS", 1, 0, false);
	declareFunction("inference_answer_justification_all_subproofs", "INFERENCE-ANSWER-JUSTIFICATION-ALL-SUBPROOFS", 1, 0, false);
	declareFunction("inference_all_answer_supports", "INFERENCE-ALL-ANSWER-SUPPORTS", 1, 0, false);
	declareFunction("inference_all_answer_modules", "INFERENCE-ALL-ANSWER-MODULES", 1, 0, false);
	declareFunction("problem_relevant_to_some_strategyP", "PROBLEM-RELEVANT-TO-SOME-STRATEGY?", 1, 0, false);
	declareFunction("first_problem_relevant_strategy", "FIRST-PROBLEM-RELEVANT-STRATEGY", 1, 0, false);
	declareFunction("problem_or_inference_p", "PROBLEM-OR-INFERENCE-P", 1, 0, false);
	declareMacro("with_inference_problem_working_time_table", "WITH-INFERENCE-PROBLEM-WORKING-TIME-TABLE");
	declareFunction("inference_problem_working_time_lock", "INFERENCE-PROBLEM-WORKING-TIME-LOCK", 1, 0, false);
	declareFunction("inference_problem_working_time_table", "INFERENCE-PROBLEM-WORKING-TIME-TABLE", 1, 0, false);
	declareFunction("initialize_inference_problem_working_time_data", "INITIALIZE-INFERENCE-PROBLEM-WORKING-TIME-DATA", 1, 0, false);
	declareFunction("inference_note_tactic_executed", "INFERENCE-NOTE-TACTIC-EXECUTED", 2, 0, false);
	declareFunction("inference_note_problem_pending", "INFERENCE-NOTE-PROBLEM-PENDING", 2, 0, false);
	declareFunction("signal_inference_eventP", "SIGNAL-INFERENCE-EVENT?", 2, 0, false);
	declareFunction("possibly_signal_new_inference_answer", "POSSIBLY-SIGNAL-NEW-INFERENCE-ANSWER", 2, 0, false);
	declareFunction("signal_new_inference_answer", "SIGNAL-NEW-INFERENCE-ANSWER", 2, 0, false);
	declareFunction("possibly_signal_inference_status_change", "POSSIBLY-SIGNAL-INFERENCE-STATUS-CHANGE", 1, 0, false);
	declareFunction("signal_inference_status_change", "SIGNAL-INFERENCE-STATUS-CHANGE", 2, 0, false);
	declareFunction("possibly_signal_inference_new_transformation_depth_reached", "POSSIBLY-SIGNAL-INFERENCE-NEW-TRANSFORMATION-DEPTH-REACHED", 2, 0, false);
	declareFunction("signal_inference_new_transformation_depth_reached", "SIGNAL-INFERENCE-NEW-TRANSFORMATION-DEPTH-REACHED", 2, 0, false);
	declareMacro("inference_within_sksi_query_execution", "INFERENCE-WITHIN-SKSI-QUERY-EXECUTION");
	declareFunction("possibly_signal_sksi_query_start", "POSSIBLY-SIGNAL-SKSI-QUERY-START", 2, 0, false);
	declareFunction("possibly_signal_sksi_query_end", "POSSIBLY-SIGNAL-SKSI-QUERY-END", 2, 0, false);
	declareFunction("possibly_increment_inference_sksi_query_total_time", "POSSIBLY-INCREMENT-INFERENCE-SKSI-QUERY-TOTAL-TIME", 2, 0, false);
	declareFunction("possibly_add_inference_sksi_query_start_time", "POSSIBLY-ADD-INFERENCE-SKSI-QUERY-START-TIME", 2, 0, false);
	declareFunction("possibly_signal_sksi_query", "POSSIBLY-SIGNAL-SKSI-QUERY", 3, 1, false);
	declareFunction("signal_sksi_query", "SIGNAL-SKSI-QUERY", 3, 1, false);
	declareMacro("inference_within_sparql_query_execution", "INFERENCE-WITHIN-SPARQL-QUERY-EXECUTION");
	declareFunction("possibly_add_inference_sparql_query_profile", "POSSIBLY-ADD-INFERENCE-SPARQL-QUERY-PROFILE", 4, 0, false);
	declareFunction("increment_inference_sksi_query_total_time", "INCREMENT-INFERENCE-SKSI-QUERY-TOTAL-TIME", 2, 0, false);
	declareFunction("add_inference_sksi_query_start_time", "ADD-INFERENCE-SKSI-QUERY-START-TIME", 2, 0, false);
	declareFunction("add_inference_sparql_query_profile", "ADD-INFERENCE-SPARQL-QUERY-PROFILE", 2, 0, false);
	return NIL;
    }

    static private final SubLSymbol $sym313$ROOT_PROBLEM = makeUninternedSymbol("ROOT-PROBLEM");

    static private final SubLList $list_alt317 = list(list(makeSymbol("RULE-VAR"), makeSymbol("INFERENCE"), makeSymbol("&KEY"), makeSymbol("DONE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLList $list_alt318 = list($DONE);

    static private final SubLList $list_alt321 = list(list(makeSymbol("INFERENCE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLString $str_alt355$Forward_max_time__s_cannot_be_gre = makeString("Forward max time ~s cannot be greater than max time ~s");

    static private final SubLList $list_alt365 = list(list(makeSymbol("STORE-ID-VAR"), makeSymbol("INFERENCE-ID-VAR"), makeSymbol("INFERENCE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLSymbol $sym366$INFERENCE_VAR = makeUninternedSymbol("INFERENCE-VAR");

    static private final SubLList $list_alt371 = list(makeSymbol("MT"), makeSymbol("ASENT"));

    static private final SubLList $list_alt374 = list(makeSymbol("HL-MT"), makeSymbol("ASENT"));

    static private final SubLString $str_alt377$_new_cyc_query_A = makeString("(new-cyc-query~A");

    static private final SubLString $str_alt378$_____A = makeString("~%  ~A");

    static private final SubLString $str_alt379$_A = makeString("~A");

    static private final SubLString $str_alt380$______ = makeString("~%  `(");

    static private final SubLString $str_alt382$_S___find_problem_store_by_id__S_ = makeString("~S ,(find-problem-store-by-id ~S)~%    ");

    static private final SubLString $str_alt384$_S___list__ = makeString("~S ,(list~%");

    static private final SubLString $str_alt385$_______find_object_by_hl_external = makeString("      (find-object-by-hl-external-id-string ~S)");

    static private final SubLString $str_alt386$_______ = makeString(")~%    ");

    static private final SubLString $str_alt387$_S__S______ = makeString("~S ~S~%    ");

    static private final SubLString $str_alt388$_ = makeString(")");

    static private final SubLSymbol $sym397$_ = makeSymbol("<");

    static private final SubLString $str_alt399$got_a_null_answer_for__s = makeString("got a null answer for ~s");

    static private final SubLString $str_alt413$variables__S_were_removed = makeString("variables ~S were removed");

    static private final SubLString $str_alt414$variables__S_were_added = makeString("variables ~S were added");

    static private final SubLString $str_alt415$variables__S_contain_duplications = makeString("variables ~S contain duplications");

    static private final SubLList $list_alt420 = list(makeSymbol("SUID"), makeSymbol("INFERENCE"), makeSymbol("BINDINGS"), makeSymbol("JUSTIFICATIONS"), makeSymbol("ELAPSED-CREATION-TIME"), makeSymbol("STEP-COUNT"));

    static private final SubLList $list_alt421 = list($SUID, makeKeyword("INFERENCE"), makeKeyword("BINDINGS"), makeKeyword("JUSTIFICATIONS"), makeKeyword("ELAPSED-CREATION-TIME"), makeKeyword("STEP-COUNT"));

    static private final SubLList $list_alt422 = list(makeSymbol("INF-ANSWER-SUID"), makeSymbol("INF-ANSWER-INFERENCE"), makeSymbol("INF-ANSWER-BINDINGS"), makeSymbol("INF-ANSWER-JUSTIFICATIONS"), makeSymbol("INF-ANSWER-ELAPSED-CREATION-TIME"), makeSymbol("INF-ANSWER-STEP-COUNT"));

    static private final SubLList $list_alt423 = list(makeSymbol("_CSETF-INF-ANSWER-SUID"), makeSymbol("_CSETF-INF-ANSWER-INFERENCE"), makeSymbol("_CSETF-INF-ANSWER-BINDINGS"), makeSymbol("_CSETF-INF-ANSWER-JUSTIFICATIONS"), makeSymbol("_CSETF-INF-ANSWER-ELAPSED-CREATION-TIME"),
	    makeSymbol("_CSETF-INF-ANSWER-STEP-COUNT"));

    static private final SubLString $str_alt441$_Invalid_INFERENCE_ANSWER__s_ = makeString("<Invalid INFERENCE-ANSWER ~s>");

    static private final SubLString $str_alt442$_INFERENCE_ANSWER__a_for_INFERENC = makeString("<INFERENCE-ANSWER ~a for INFERENCE ~a.~a:~a>");

    static private final SubLList $list_alt445 = list(list(makeSymbol("JUST-VAR"), makeSymbol("INFERENCE-ANSWER")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLList $list_alt448 = list(list(makeSymbol("JUST-VAR"), makeSymbol("INDEX-VAR"), makeSymbol("INFERENCE-ANSWER")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLString $str_alt454$_S_was_not_an_inference_answer_la = makeString("~S was not an inference-answer-language-p");

    static private final SubLList $list_alt457 = list(makeSymbol("ANSWER"), makeSymbol("SUPPORTS"), makeSymbol("PROOFS"));

    static private final SubLList $list_alt458 = list(makeKeyword("ANSWER"), makeKeyword("SUPPORTS"), makeKeyword("PROOFS"));

    static private final SubLList $list_alt459 = list(makeSymbol("INF-ANS-JUST-ANSWER"), makeSymbol("INF-ANS-JUST-SUPPORTS"), makeSymbol("INF-ANS-JUST-PROOFS"));

    static private final SubLList $list_alt460 = list(makeSymbol("_CSETF-INF-ANS-JUST-ANSWER"), makeSymbol("_CSETF-INF-ANS-JUST-SUPPORTS"), makeSymbol("_CSETF-INF-ANS-JUST-PROOFS"));

    static private final SubLString $str_alt472$__ = makeString("#<");

    static private final SubLString $str_alt475$_INF_ANS_JUST__s_ = makeString("<INF-ANS-JUST:~s>");

    static private final SubLList $list_alt478 = list(list(makeSymbol("PROOF-VAR"), makeSymbol("JUSTIFICATION")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLList $list_alt480 = list(list(makeSymbol("JUSTIFICATION-VAR"), makeSymbol("PROOF")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLSymbol $sym481$INFERENCE = makeUninternedSymbol("INFERENCE");

    static private final SubLSymbol $sym482$ANSWER = makeUninternedSymbol("ANSWER");

    static private final SubLSymbol $sym483$PROOF_VAR = makeUninternedSymbol("PROOF-VAR");

    static private final SubLSymbol $sym486$MEMBER_ = makeSymbol("MEMBER?");

    static private final SubLList $list_alt487 = list(list(makeSymbol("FUNCTION"), EQ));

    static private final SubLList $list_alt488 = list(list(makeSymbol("SUBPROOF-VAR"), makeSymbol("INFERENCE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLSymbol $sym489$ANSWER = makeUninternedSymbol("ANSWER");

    static private final SubLSymbol $sym490$JUSTIFICATION = makeUninternedSymbol("JUSTIFICATION");

    static private final SubLSymbol $sym491$PROOF = makeUninternedSymbol("PROOF");

    static private final SubLSymbol $sym494$RULE_ASSERTION_ = makeSymbol("RULE-ASSERTION?");

    static private final SubLSymbol $sym501$TERM__ = makeSymbol("TERM-<");

    static private final SubLString $str_alt509$time_to_implement_metric__S = makeString("time to implement metric ~S");

    static private final SubLSymbol $sym511$_ = makeSymbol(">");

    static private final SubLList $list_alt513 = list(list(makeSymbol("TABLE-VAR"), makeSymbol("INFERENCE")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLSymbol $sym514$INFERENCE_VAR = makeUninternedSymbol("INFERENCE-VAR");

    static private final SubLString $str_alt517$Inference_problem_working_time_lo = makeString("Inference problem working time lock");

    static private final SubLSymbol $sym521$INFERENCES_VAR = makeUninternedSymbol("INFERENCES-VAR");

    static private final SubLSymbol $sym522$INFERENCE_VAR = makeUninternedSymbol("INFERENCE-VAR");

    static private final SubLSymbol $sym523$TACTIC_VAR = makeUninternedSymbol("TACTIC-VAR");

    static private final SubLSymbol $sym524$START_TIME = makeUninternedSymbol("START-TIME");

    static private final SubLList $list_alt525 = list(list(makeSymbol("CURRENT-CONTROLLING-INFERENCES")));

    static private final SubLList $list_alt526 = list(list(makeSymbol("CURRENT-CONTROLLING-INFERENCE")));

    static private final SubLList $list_alt527 = list(list(makeSymbol("CURRENTLY-EXECUTING-TACTIC")));

    static private final SubLList $list_alt532 = list(NIL);

    static private final SubLSymbol $sym536$_ = makeSymbol("-");

    static private final SubLList $list_alt545 = list(list(makeSymbol("&KEY"), makeSymbol("SPARQL"), makeSymbol("RESULT-SET")), makeSymbol("&BODY"), makeSymbol("BODY"));

    static private final SubLList $list_alt546 = list(makeKeyword("SPARQL"), makeKeyword("RESULT-SET"));

    static private final SubLSymbol $sym549$INFERENCES = makeUninternedSymbol("INFERENCES");

    static private final SubLSymbol $sym550$INFERENCE = makeUninternedSymbol("INFERENCE");

    static private final SubLSymbol $sym551$START = makeUninternedSymbol("START");

    static private final SubLSymbol $sym552$END = makeUninternedSymbol("END");

    static private final SubLSymbol $sym553$COUNT = makeUninternedSymbol("COUNT");

    public static final SubLObject init_inference_datastructures_inference_file_alt() {
	deflexical("*INFERENCE-TYPES*", $list_alt0);
	defconstant("*DTP-INFERENCE*", INFERENCE);
	deflexical("*PAD-TIMES-TO-FIRST-ANSWER*", NIL != boundp($pad_times_to_first_answer$) ? ((SubLObject) ($pad_times_to_first_answer$.getGlobalValue())) : $UNINITIALIZED);
	defconstant("*DTP-INFERENCE-ANSWER*", INFERENCE_ANSWER);
	defconstant("*DTP-INFERENCE-ANSWER-JUSTIFICATION*", INFERENCE_ANSWER_JUSTIFICATION);
	return NIL;
    }

    public static SubLObject init_inference_datastructures_inference_file() {
	if (SubLFiles.USE_V1) {
	    deflexical("*INFERENCE-TYPES*", inference_datastructures_inference.$list0);
	    defconstant("*DTP-INFERENCE*", INFERENCE);
	    deflexical("*PAD-TIMES-TO-FIRST-ANSWER*", SubLTrampolineFile.maybeDefault(inference_datastructures_inference.$pad_times_to_first_answer$, inference_datastructures_inference.$pad_times_to_first_answer$, $UNINITIALIZED));
	    defconstant("*DTP-INFERENCE-ANSWER*", INFERENCE_ANSWER);
	    defconstant("*DTP-INFERENCE-ANSWER-JUSTIFICATION*", inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATION);
	}
	if (SubLFiles.USE_V2) {
	    deflexical("*PAD-TIMES-TO-FIRST-ANSWER*", NIL != boundp($pad_times_to_first_answer$) ? ((SubLObject) ($pad_times_to_first_answer$.getGlobalValue())) : $UNINITIALIZED);
	}
	return NIL;
    }

    public static SubLObject init_inference_datastructures_inference_file_Previous() {
	deflexical("*INFERENCE-TYPES*", inference_datastructures_inference.$list0);
	defconstant("*DTP-INFERENCE*", INFERENCE);
	deflexical("*PAD-TIMES-TO-FIRST-ANSWER*", SubLTrampolineFile.maybeDefault(inference_datastructures_inference.$pad_times_to_first_answer$, inference_datastructures_inference.$pad_times_to_first_answer$, $UNINITIALIZED));
	defconstant("*DTP-INFERENCE-ANSWER*", INFERENCE_ANSWER);
	defconstant("*DTP-INFERENCE-ANSWER-JUSTIFICATION*", inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATION);
	return NIL;
    }

    public static final SubLObject setup_inference_datastructures_inference_file_alt() {
	register_method($print_object_method_table$.getGlobalValue(), $dtp_inference$.getGlobalValue(), symbol_function(INFERENCE_PRINT_FUNCTION_TRAMPOLINE));
	def_csetf(INFRNC_SUID, _CSETF_INFRNC_SUID);
	def_csetf(INFRNC_PROBLEM_STORE, _CSETF_INFRNC_PROBLEM_STORE);
	def_csetf(INFRNC_FORWARD_PROPAGATE, _CSETF_INFRNC_FORWARD_PROPAGATE);
	def_csetf(INFRNC_INPUT_MT, _CSETF_INFRNC_INPUT_MT);
	def_csetf(INFRNC_INPUT_EL_QUERY, _CSETF_INFRNC_INPUT_EL_QUERY);
	def_csetf(INFRNC_INPUT_NON_EXPLANATORY_EL_QUERY, _CSETF_INFRNC_INPUT_NON_EXPLANATORY_EL_QUERY);
	def_csetf(INFRNC_INPUT_QUERY_PROPERTIES, _CSETF_INFRNC_INPUT_QUERY_PROPERTIES);
	def_csetf(INFRNC_MT, _CSETF_INFRNC_MT);
	def_csetf(INFRNC_EL_QUERY, _CSETF_INFRNC_EL_QUERY);
	def_csetf(INFRNC_EL_BINDINGS, _CSETF_INFRNC_EL_BINDINGS);
	def_csetf(INFRNC_HL_QUERY, _CSETF_INFRNC_HL_QUERY);
	def_csetf(INFRNC_EXPLANATORY_SUBQUERY, _CSETF_INFRNC_EXPLANATORY_SUBQUERY);
	def_csetf(INFRNC_NON_EXPLANATORY_SUBQUERY, _CSETF_INFRNC_NON_EXPLANATORY_SUBQUERY);
	def_csetf(INFRNC_FREE_HL_VARS, _CSETF_INFRNC_FREE_HL_VARS);
	def_csetf(INFRNC_HYPOTHETICAL_BINDINGS, _CSETF_INFRNC_HYPOTHETICAL_BINDINGS);
	def_csetf(INFRNC_ANSWER_ID_INDEX, _CSETF_INFRNC_ANSWER_ID_INDEX);
	def_csetf(INFRNC_ANSWER_BINDINGS_INDEX, _CSETF_INFRNC_ANSWER_BINDINGS_INDEX);
	def_csetf(INFRNC_NEW_ANSWER_ID_START, _CSETF_INFRNC_NEW_ANSWER_ID_START);
	def_csetf(INFRNC_NEW_ANSWER_JUSTIFICATIONS, _CSETF_INFRNC_NEW_ANSWER_JUSTIFICATIONS);
	def_csetf(INFRNC_STATUS, _CSETF_INFRNC_STATUS);
	def_csetf(INFRNC_SUSPEND_STATUS, _CSETF_INFRNC_SUSPEND_STATUS);
	def_csetf(INFRNC_ROOT_LINK, _CSETF_INFRNC_ROOT_LINK);
	def_csetf(INFRNC_RELEVANT_PROBLEMS, _CSETF_INFRNC_RELEVANT_PROBLEMS);
	def_csetf(INFRNC_STRATEGY_SET, _CSETF_INFRNC_STRATEGY_SET);
	def_csetf(INFRNC_CONTROL_PROCESS, _CSETF_INFRNC_CONTROL_PROCESS);
	def_csetf(INFRNC_INTERRUPTING_PROCESSES, _CSETF_INFRNC_INTERRUPTING_PROCESSES);
	def_csetf(INFRNC_MAX_TRANSFORMATION_DEPTH_REACHED, _CSETF_INFRNC_MAX_TRANSFORMATION_DEPTH_REACHED);
	def_csetf(INFRNC_DISJUNCTION_FREE_EL_VARS_POLICY, _CSETF_INFRNC_DISJUNCTION_FREE_EL_VARS_POLICY);
	def_csetf(INFRNC_RESULT_UNIQUENESS_CRITERION, _CSETF_INFRNC_RESULT_UNIQUENESS_CRITERION);
	def_csetf($sym116$INFRNC_ALLOW_HL_PREDICATE_TRANSFORMATION_, $sym117$_CSETF_INFRNC_ALLOW_HL_PREDICATE_TRANSFORMATION_);
	def_csetf($sym118$INFRNC_ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_, $sym119$_CSETF_INFRNC_ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_);
	def_csetf($sym120$INFRNC_ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_, $sym121$_CSETF_INFRNC_ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_);
	def_csetf($sym122$INFRNC_ALLOW_INDETERMINATE_RESULTS_, $sym123$_CSETF_INFRNC_ALLOW_INDETERMINATE_RESULTS_);
	def_csetf(INFRNC_ALLOWED_RULES, _CSETF_INFRNC_ALLOWED_RULES);
	def_csetf(INFRNC_FORBIDDEN_RULES, _CSETF_INFRNC_FORBIDDEN_RULES);
	def_csetf(INFRNC_ALLOWED_MODULES, _CSETF_INFRNC_ALLOWED_MODULES);
	def_csetf($sym130$INFRNC_ALLOW_ABNORMALITY_CHECKING_, $sym131$_CSETF_INFRNC_ALLOW_ABNORMALITY_CHECKING_);
	def_csetf(INFRNC_TRANSITIVE_CLOSURE_MODE, _CSETF_INFRNC_TRANSITIVE_CLOSURE_MODE);
	def_csetf($sym134$INFRNC_PROBLEM_STORE_PRIVATE_, $sym135$_CSETF_INFRNC_PROBLEM_STORE_PRIVATE_);
	def_csetf($sym136$INFRNC_CONTINUABLE_, $sym137$_CSETF_INFRNC_CONTINUABLE_);
	def_csetf($sym138$INFRNC_BROWSABLE_, $sym139$_CSETF_INFRNC_BROWSABLE_);
	def_csetf(INFRNC_RETURN_TYPE, _CSETF_INFRNC_RETURN_TYPE);
	def_csetf(INFRNC_ANSWER_LANGUAGE, _CSETF_INFRNC_ANSWER_LANGUAGE);
	def_csetf($sym144$INFRNC_CACHE_RESULTS_, $sym145$_CSETF_INFRNC_CACHE_RESULTS_);
	def_csetf($sym146$INFRNC_BLOCKING_, $sym147$_CSETF_INFRNC_BLOCKING_);
	def_csetf(INFRNC_MAX_NUMBER, _CSETF_INFRNC_MAX_NUMBER);
	def_csetf(INFRNC_MAX_TIME, _CSETF_INFRNC_MAX_TIME);
	def_csetf(INFRNC_MAX_STEP, _CSETF_INFRNC_MAX_STEP);
	def_csetf(INFRNC_MODE, _CSETF_INFRNC_MODE);
	def_csetf(INFRNC_FORWARD_MAX_TIME, _CSETF_INFRNC_FORWARD_MAX_TIME);
	def_csetf(INFRNC_MAX_PROOF_DEPTH, _CSETF_INFRNC_MAX_PROOF_DEPTH);
	def_csetf(INFRNC_MAX_TRANSFORMATION_DEPTH, _CSETF_INFRNC_MAX_TRANSFORMATION_DEPTH);
	def_csetf(INFRNC_PROBABLY_APPROXIMATELY_DONE, _CSETF_INFRNC_PROBABLY_APPROXIMATELY_DONE);
	def_csetf(INFRNC_METRICS_TEMPLATE, _CSETF_INFRNC_METRICS_TEMPLATE);
	def_csetf(INFRNC_START_UNIVERSAL_TIME, _CSETF_INFRNC_START_UNIVERSAL_TIME);
	def_csetf(INFRNC_START_INTERNAL_REAL_TIME, _CSETF_INFRNC_START_INTERNAL_REAL_TIME);
	def_csetf(INFRNC_END_INTERNAL_REAL_TIME, _CSETF_INFRNC_END_INTERNAL_REAL_TIME);
	def_csetf(INFRNC_PAD_INTERNAL_REAL_TIME, _CSETF_INFRNC_PAD_INTERNAL_REAL_TIME);
	def_csetf(INFRNC_CUMULATIVE_TIME, _CSETF_INFRNC_CUMULATIVE_TIME);
	def_csetf(INFRNC_STEP_COUNT, _CSETF_INFRNC_STEP_COUNT);
	def_csetf(INFRNC_CUMULATIVE_STEP_COUNT, _CSETF_INFRNC_CUMULATIVE_STEP_COUNT);
	def_csetf(INFRNC_EVENTS, _CSETF_INFRNC_EVENTS);
	def_csetf(INFRNC_HALT_CONDITIONS, _CSETF_INFRNC_HALT_CONDITIONS);
	def_csetf(INFRNC_ACCUMULATORS, _CSETF_INFRNC_ACCUMULATORS);
	def_csetf(INFRNC_PROOF_WATERMARK, _CSETF_INFRNC_PROOF_WATERMARK);
	def_csetf(INFRNC_PROBLEM_WORKING_TIME_DATA, _CSETF_INFRNC_PROBLEM_WORKING_TIME_DATA);
	def_csetf(INFRNC_TYPE, _CSETF_INFRNC_TYPE);
	def_csetf(INFRNC_DATA, _CSETF_INFRNC_DATA);
	identity(INFERENCE);
	register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), $dtp_inference$.getGlobalValue(), symbol_function(SXHASH_INFERENCE_METHOD));
	register_macro_helper(INFERENCE_ANSWER_ID_INDEX, DO_INFERENCE_ANSWERS);
	register_macro_helper(INFERENCE_NEW_ANSWER_ID_START, DO_INFERENCE_NEW_ANSWERS);
	register_macro_helper(INFERENCE_NEW_ANSWER_JUSTIFICATIONS, DO_INFERENCE_NEW_ANSWER_JUSTIFICATIONS);
	declare_defglobal($pad_times_to_first_answer$);
	register_macro_helper(INFERENCE_NEXT_NEW_ANSWER_ID, DO_INFERENCE_NEW_ANSWERS);
	register_method($print_object_method_table$.getGlobalValue(), $dtp_inference_answer$.getGlobalValue(), symbol_function(INFERENCE_ANSWER_PRINT_FUNCTION_TRAMPOLINE));
	def_csetf(INF_ANSWER_SUID, _CSETF_INF_ANSWER_SUID);
	def_csetf(INF_ANSWER_INFERENCE, _CSETF_INF_ANSWER_INFERENCE);
	def_csetf(INF_ANSWER_BINDINGS, _CSETF_INF_ANSWER_BINDINGS);
	def_csetf(INF_ANSWER_JUSTIFICATIONS, _CSETF_INF_ANSWER_JUSTIFICATIONS);
	def_csetf(INF_ANSWER_ELAPSED_CREATION_TIME, _CSETF_INF_ANSWER_ELAPSED_CREATION_TIME);
	def_csetf(INF_ANSWER_STEP_COUNT, _CSETF_INF_ANSWER_STEP_COUNT);
	identity(INFERENCE_ANSWER);
	register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), $dtp_inference_answer$.getGlobalValue(), symbol_function(SXHASH_INFERENCE_ANSWER_METHOD));
	register_macro_helper(INFERENCE_ANSWER_JUSTIFICATIONS, DO_INFERENCE_ANSWER_JUSTIFICATIONS);
	register_external_symbol(INFERENCE_ANSWER_EL_SENTENCE);
	register_method($print_object_method_table$.getGlobalValue(), $dtp_inference_answer_justification$.getGlobalValue(), symbol_function(INFERENCE_ANSWER_JUSTIFICATION_PRINT_FUNCTION_TRAMPOLINE));
	def_csetf(INF_ANS_JUST_ANSWER, _CSETF_INF_ANS_JUST_ANSWER);
	def_csetf(INF_ANS_JUST_SUPPORTS, _CSETF_INF_ANS_JUST_SUPPORTS);
	def_csetf(INF_ANS_JUST_PROOFS, _CSETF_INF_ANS_JUST_PROOFS);
	identity(INFERENCE_ANSWER_JUSTIFICATION);
	register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), $dtp_inference_answer_justification$.getGlobalValue(), symbol_function(SXHASH_INFERENCE_ANSWER_JUSTIFICATION_METHOD));
	register_macro_helper(INFERENCE_PROBLEM_WORKING_TIME_LOCK, WITH_INFERENCE_PROBLEM_WORKING_TIME_LOCK);
	register_macro_helper(POSSIBLY_SIGNAL_SKSI_QUERY_START, INFERENCE_WITHIN_SKSI_QUERY_EXECUTION);
	register_macro_helper(POSSIBLY_SIGNAL_SKSI_QUERY_END, INFERENCE_WITHIN_SKSI_QUERY_EXECUTION);
	register_macro_helper(POSSIBLY_INCREMENT_INFERENCE_SKSI_QUERY_TOTAL_TIME, INFERENCE_WITHIN_SKSI_QUERY_EXECUTION);
	register_macro_helper(POSSIBLY_ADD_INFERENCE_SKSI_QUERY_START_TIME, INFERENCE_WITHIN_SKSI_QUERY_EXECUTION);
	register_macro_helper(POSSIBLY_ADD_INFERENCE_SPARQL_QUERY_PROFILE, INFERENCE_WITHIN_SPARQL_QUERY_EXECUTION);
	return NIL;
    }

    public static SubLObject setup_inference_datastructures_inference_file() {
	if (SubLFiles.USE_V1) {
	    register_method($print_object_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference$.getGlobalValue(), symbol_function(inference_datastructures_inference.INFERENCE_PRINT_FUNCTION_TRAMPOLINE));
	    SubLSpecialOperatorDeclarations.proclaim(inference_datastructures_inference.$list61);
	    def_csetf(inference_datastructures_inference.INFRNC_SUID, inference_datastructures_inference._CSETF_INFRNC_SUID);
	    def_csetf(inference_datastructures_inference.INFRNC_PROBLEM_STORE, inference_datastructures_inference._CSETF_INFRNC_PROBLEM_STORE);
	    def_csetf(inference_datastructures_inference.INFRNC_FORWARD_PROPAGATE, inference_datastructures_inference._CSETF_INFRNC_FORWARD_PROPAGATE);
	    def_csetf(inference_datastructures_inference.INFRNC_INPUT_MT, inference_datastructures_inference._CSETF_INFRNC_INPUT_MT);
	    def_csetf(inference_datastructures_inference.INFRNC_INPUT_EL_QUERY, inference_datastructures_inference._CSETF_INFRNC_INPUT_EL_QUERY);
	    def_csetf(inference_datastructures_inference.INFRNC_INPUT_NON_EXPLANATORY_EL_QUERY, inference_datastructures_inference._CSETF_INFRNC_INPUT_NON_EXPLANATORY_EL_QUERY);
	    def_csetf(inference_datastructures_inference.INFRNC_INPUT_QUERY_PROPERTIES, inference_datastructures_inference._CSETF_INFRNC_INPUT_QUERY_PROPERTIES);
	    def_csetf(inference_datastructures_inference.INFRNC_MT, inference_datastructures_inference._CSETF_INFRNC_MT);
	    def_csetf(inference_datastructures_inference.INFRNC_EL_QUERY, inference_datastructures_inference._CSETF_INFRNC_EL_QUERY);
	    def_csetf(inference_datastructures_inference.INFRNC_EL_BINDINGS, inference_datastructures_inference._CSETF_INFRNC_EL_BINDINGS);
	    def_csetf(inference_datastructures_inference.INFRNC_HL_QUERY, inference_datastructures_inference._CSETF_INFRNC_HL_QUERY);
	    def_csetf(inference_datastructures_inference.INFRNC_EXPLANATORY_SUBQUERY, inference_datastructures_inference._CSETF_INFRNC_EXPLANATORY_SUBQUERY);
	    def_csetf(inference_datastructures_inference.INFRNC_NON_EXPLANATORY_SUBQUERY, inference_datastructures_inference._CSETF_INFRNC_NON_EXPLANATORY_SUBQUERY);
	    def_csetf(inference_datastructures_inference.INFRNC_FREE_HL_VARS, inference_datastructures_inference._CSETF_INFRNC_FREE_HL_VARS);
	    def_csetf(inference_datastructures_inference.INFRNC_HYPOTHETICAL_BINDINGS, inference_datastructures_inference._CSETF_INFRNC_HYPOTHETICAL_BINDINGS);
	    def_csetf(inference_datastructures_inference.INFRNC_ANSWER_ID_INDEX, inference_datastructures_inference._CSETF_INFRNC_ANSWER_ID_INDEX);
	    def_csetf(inference_datastructures_inference.INFRNC_ANSWER_BINDINGS_INDEX, inference_datastructures_inference._CSETF_INFRNC_ANSWER_BINDINGS_INDEX);
	    def_csetf(inference_datastructures_inference.INFRNC_NEW_ANSWER_ID_START, inference_datastructures_inference._CSETF_INFRNC_NEW_ANSWER_ID_START);
	    def_csetf(inference_datastructures_inference.INFRNC_NEW_ANSWER_JUSTIFICATIONS, inference_datastructures_inference._CSETF_INFRNC_NEW_ANSWER_JUSTIFICATIONS);
	    def_csetf(inference_datastructures_inference.INFRNC_STATUS, inference_datastructures_inference._CSETF_INFRNC_STATUS);
	    def_csetf(inference_datastructures_inference.INFRNC_SUSPEND_STATUS, inference_datastructures_inference._CSETF_INFRNC_SUSPEND_STATUS);
	    def_csetf(inference_datastructures_inference.INFRNC_ROOT_LINK, inference_datastructures_inference._CSETF_INFRNC_ROOT_LINK);
	    def_csetf(inference_datastructures_inference.INFRNC_RELEVANT_PROBLEMS, inference_datastructures_inference._CSETF_INFRNC_RELEVANT_PROBLEMS);
	    def_csetf(inference_datastructures_inference.INFRNC_STRATEGY_SET, inference_datastructures_inference._CSETF_INFRNC_STRATEGY_SET);
	    def_csetf(inference_datastructures_inference.INFRNC_CONTROL_PROCESS, inference_datastructures_inference._CSETF_INFRNC_CONTROL_PROCESS);
	    def_csetf(inference_datastructures_inference.INFRNC_INTERRUPTING_PROCESSES, inference_datastructures_inference._CSETF_INFRNC_INTERRUPTING_PROCESSES);
	    def_csetf(inference_datastructures_inference.INFRNC_MAX_TRANSFORMATION_DEPTH_REACHED, inference_datastructures_inference._CSETF_INFRNC_MAX_TRANSFORMATION_DEPTH_REACHED);
	    def_csetf(inference_datastructures_inference.INFRNC_DISJUNCTION_FREE_EL_VARS_POLICY, inference_datastructures_inference._CSETF_INFRNC_DISJUNCTION_FREE_EL_VARS_POLICY);
	    def_csetf(inference_datastructures_inference.INFRNC_RESULT_UNIQUENESS_CRITERION, inference_datastructures_inference._CSETF_INFRNC_RESULT_UNIQUENESS_CRITERION);
	    def_csetf(inference_datastructures_inference.$sym120$INFRNC_ALLOW_HL_PREDICATE_TRANSFORMATION_, inference_datastructures_inference.$sym121$_CSETF_INFRNC_ALLOW_HL_PREDICATE_TRANSFORMATION_);
	    def_csetf(inference_datastructures_inference.$sym122$INFRNC_ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_, inference_datastructures_inference.$sym123$_CSETF_INFRNC_ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_);
	    def_csetf(inference_datastructures_inference.$sym124$INFRNC_ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_, inference_datastructures_inference.$sym125$_CSETF_INFRNC_ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_);
	    def_csetf(inference_datastructures_inference.$sym126$INFRNC_ALLOW_INDETERMINATE_RESULTS_, inference_datastructures_inference.$sym127$_CSETF_INFRNC_ALLOW_INDETERMINATE_RESULTS_);
	    def_csetf(inference_datastructures_inference.INFRNC_ALLOWED_RULES, inference_datastructures_inference._CSETF_INFRNC_ALLOWED_RULES);
	    def_csetf(inference_datastructures_inference.INFRNC_FORBIDDEN_RULES, inference_datastructures_inference._CSETF_INFRNC_FORBIDDEN_RULES);
	    def_csetf(inference_datastructures_inference.INFRNC_ALLOWED_MODULES, inference_datastructures_inference._CSETF_INFRNC_ALLOWED_MODULES);
	    def_csetf(inference_datastructures_inference.$sym134$INFRNC_ALLOW_ABNORMALITY_CHECKING_, inference_datastructures_inference.$sym135$_CSETF_INFRNC_ALLOW_ABNORMALITY_CHECKING_);
	    def_csetf(inference_datastructures_inference.INFRNC_TRANSITIVE_CLOSURE_MODE, inference_datastructures_inference._CSETF_INFRNC_TRANSITIVE_CLOSURE_MODE);
	    def_csetf(inference_datastructures_inference.$sym138$INFRNC_PROBLEM_STORE_PRIVATE_, inference_datastructures_inference.$sym139$_CSETF_INFRNC_PROBLEM_STORE_PRIVATE_);
	    def_csetf(inference_datastructures_inference.$sym140$INFRNC_CONTINUABLE_, inference_datastructures_inference.$sym141$_CSETF_INFRNC_CONTINUABLE_);
	    def_csetf(inference_datastructures_inference.$sym142$INFRNC_BROWSABLE_, inference_datastructures_inference.$sym143$_CSETF_INFRNC_BROWSABLE_);
	    def_csetf(inference_datastructures_inference.INFRNC_RETURN_TYPE, inference_datastructures_inference._CSETF_INFRNC_RETURN_TYPE);
	    def_csetf(inference_datastructures_inference.INFRNC_ANSWER_LANGUAGE, inference_datastructures_inference._CSETF_INFRNC_ANSWER_LANGUAGE);
	    def_csetf(inference_datastructures_inference.$sym148$INFRNC_CACHE_RESULTS_, inference_datastructures_inference.$sym149$_CSETF_INFRNC_CACHE_RESULTS_);
	    def_csetf(inference_datastructures_inference.$sym150$INFRNC_BLOCKING_, inference_datastructures_inference.$sym151$_CSETF_INFRNC_BLOCKING_);
	    def_csetf(inference_datastructures_inference.INFRNC_MAX_NUMBER, inference_datastructures_inference._CSETF_INFRNC_MAX_NUMBER);
	    def_csetf(inference_datastructures_inference.INFRNC_MAX_TIME, inference_datastructures_inference._CSETF_INFRNC_MAX_TIME);
	    def_csetf(inference_datastructures_inference.INFRNC_MAX_STEP, inference_datastructures_inference._CSETF_INFRNC_MAX_STEP);
	    def_csetf(inference_datastructures_inference.INFRNC_MODE, inference_datastructures_inference._CSETF_INFRNC_MODE);
	    def_csetf(inference_datastructures_inference.INFRNC_FORWARD_MAX_TIME, inference_datastructures_inference._CSETF_INFRNC_FORWARD_MAX_TIME);
	    def_csetf(inference_datastructures_inference.INFRNC_MAX_PROOF_DEPTH, inference_datastructures_inference._CSETF_INFRNC_MAX_PROOF_DEPTH);
	    def_csetf(inference_datastructures_inference.INFRNC_MAX_TRANSFORMATION_DEPTH, inference_datastructures_inference._CSETF_INFRNC_MAX_TRANSFORMATION_DEPTH);
	    def_csetf(inference_datastructures_inference.INFRNC_MIN_RULE_UTILITY, inference_datastructures_inference._CSETF_INFRNC_MIN_RULE_UTILITY);
	    def_csetf(inference_datastructures_inference.INFRNC_PROBABLY_APPROXIMATELY_DONE, inference_datastructures_inference._CSETF_INFRNC_PROBABLY_APPROXIMATELY_DONE);
	    def_csetf(inference_datastructures_inference.INFRNC_METRICS_TEMPLATE, inference_datastructures_inference._CSETF_INFRNC_METRICS_TEMPLATE);
	    def_csetf(inference_datastructures_inference.INFRNC_START_UNIVERSAL_TIME, inference_datastructures_inference._CSETF_INFRNC_START_UNIVERSAL_TIME);
	    def_csetf(inference_datastructures_inference.INFRNC_START_INTERNAL_REAL_TIME, inference_datastructures_inference._CSETF_INFRNC_START_INTERNAL_REAL_TIME);
	    def_csetf(inference_datastructures_inference.INFRNC_END_INTERNAL_REAL_TIME, inference_datastructures_inference._CSETF_INFRNC_END_INTERNAL_REAL_TIME);
	    def_csetf(inference_datastructures_inference.INFRNC_PAD_INTERNAL_REAL_TIME, inference_datastructures_inference._CSETF_INFRNC_PAD_INTERNAL_REAL_TIME);
	    def_csetf(inference_datastructures_inference.INFRNC_HYPOTHESIZATION_TIME, inference_datastructures_inference._CSETF_INFRNC_HYPOTHESIZATION_TIME);
	    def_csetf(inference_datastructures_inference.INFRNC_CUMULATIVE_TIME, inference_datastructures_inference._CSETF_INFRNC_CUMULATIVE_TIME);
	    def_csetf(inference_datastructures_inference.INFRNC_STEP_COUNT, inference_datastructures_inference._CSETF_INFRNC_STEP_COUNT);
	    def_csetf(inference_datastructures_inference.INFRNC_CUMULATIVE_STEP_COUNT, inference_datastructures_inference._CSETF_INFRNC_CUMULATIVE_STEP_COUNT);
	    def_csetf(inference_datastructures_inference.INFRNC_EVENTS, inference_datastructures_inference._CSETF_INFRNC_EVENTS);
	    def_csetf(inference_datastructures_inference.INFRNC_HALT_CONDITIONS, inference_datastructures_inference._CSETF_INFRNC_HALT_CONDITIONS);
	    def_csetf(inference_datastructures_inference.INFRNC_ACCUMULATORS, inference_datastructures_inference._CSETF_INFRNC_ACCUMULATORS);
	    def_csetf(inference_datastructures_inference.INFRNC_PROOF_WATERMARK, inference_datastructures_inference._CSETF_INFRNC_PROOF_WATERMARK);
	    def_csetf(inference_datastructures_inference.INFRNC_PROBLEM_WORKING_TIME_DATA, inference_datastructures_inference._CSETF_INFRNC_PROBLEM_WORKING_TIME_DATA);
	    def_csetf(inference_datastructures_inference.INFRNC_TYPE, inference_datastructures_inference._CSETF_INFRNC_TYPE);
	    def_csetf(inference_datastructures_inference.INFRNC_DATA, inference_datastructures_inference._CSETF_INFRNC_DATA);
	    def_csetf(inference_datastructures_inference.INFRNC_PROPERTIES, inference_datastructures_inference._CSETF_INFRNC_PROPERTIES);
	    identity(INFERENCE);
	    register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference$.getGlobalValue(), symbol_function(inference_datastructures_inference.VISIT_DEFSTRUCT_OBJECT_INFERENCE_METHOD));
	    register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference$.getGlobalValue(), symbol_function(inference_datastructures_inference.SXHASH_INFERENCE_METHOD));
	    register_macro_helper(inference_datastructures_inference.INFERENCE_ANSWER_ID_INDEX, inference_datastructures_inference.DO_INFERENCE_ANSWERS);
	    register_macro_helper(inference_datastructures_inference.INFERENCE_NEW_ANSWER_ID_START, inference_datastructures_inference.DO_INFERENCE_NEW_ANSWERS);
	    register_macro_helper(inference_datastructures_inference.INFERENCE_NEW_ANSWER_JUSTIFICATIONS, inference_datastructures_inference.DO_INFERENCE_NEW_ANSWER_JUSTIFICATIONS);
	    declare_defglobal(inference_datastructures_inference.$pad_times_to_first_answer$);
	    register_macro_helper(inference_datastructures_inference.INFERENCE_NEXT_NEW_ANSWER_ID, inference_datastructures_inference.DO_INFERENCE_NEW_ANSWERS);
	    register_method($print_object_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference_answer$.getGlobalValue(), symbol_function(inference_datastructures_inference.INFERENCE_ANSWER_PRINT_FUNCTION_TRAMPOLINE));
	    SubLSpecialOperatorDeclarations.proclaim(inference_datastructures_inference.$list448);
	    def_csetf(inference_datastructures_inference.INF_ANSWER_SUID, inference_datastructures_inference._CSETF_INF_ANSWER_SUID);
	    def_csetf(inference_datastructures_inference.INF_ANSWER_INFERENCE, inference_datastructures_inference._CSETF_INF_ANSWER_INFERENCE);
	    def_csetf(inference_datastructures_inference.INF_ANSWER_BINDINGS, inference_datastructures_inference._CSETF_INF_ANSWER_BINDINGS);
	    def_csetf(inference_datastructures_inference.INF_ANSWER_JUSTIFICATIONS, inference_datastructures_inference._CSETF_INF_ANSWER_JUSTIFICATIONS);
	    def_csetf(inference_datastructures_inference.INF_ANSWER_ELAPSED_CREATION_TIME, inference_datastructures_inference._CSETF_INF_ANSWER_ELAPSED_CREATION_TIME);
	    def_csetf(inference_datastructures_inference.INF_ANSWER_STEP_COUNT, inference_datastructures_inference._CSETF_INF_ANSWER_STEP_COUNT);
	    identity(INFERENCE_ANSWER);
	    register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference_answer$.getGlobalValue(), symbol_function(inference_datastructures_inference.VISIT_DEFSTRUCT_OBJECT_INFERENCE_ANSWER_METHOD));
	    register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference_answer$.getGlobalValue(), symbol_function(inference_datastructures_inference.SXHASH_INFERENCE_ANSWER_METHOD));
	    register_macro_helper(inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATIONS, inference_datastructures_inference.DO_INFERENCE_ANSWER_JUSTIFICATIONS);
	    register_external_symbol(inference_datastructures_inference.INFERENCE_ANSWER_EL_SENTENCE);
	    register_method($print_object_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference_answer_justification$.getGlobalValue(), symbol_function(inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATION_PRINT_FUNCTION_TRAMPOLINE));
	    SubLSpecialOperatorDeclarations.proclaim(inference_datastructures_inference.$list488);
	    def_csetf(inference_datastructures_inference.INF_ANS_JUST_ANSWER, inference_datastructures_inference._CSETF_INF_ANS_JUST_ANSWER);
	    def_csetf(inference_datastructures_inference.INF_ANS_JUST_SUPPORTS, inference_datastructures_inference._CSETF_INF_ANS_JUST_SUPPORTS);
	    def_csetf(inference_datastructures_inference.INF_ANS_JUST_PRAGMA_SUPPORTS, inference_datastructures_inference._CSETF_INF_ANS_JUST_PRAGMA_SUPPORTS);
	    def_csetf(inference_datastructures_inference.INF_ANS_JUST_PROOFS, inference_datastructures_inference._CSETF_INF_ANS_JUST_PROOFS);
	    identity(inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATION);
	    register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference_answer_justification$.getGlobalValue(), symbol_function(inference_datastructures_inference.VISIT_DEFSTRUCT_OBJECT_INFERENCE_ANSWER_JUSTIFICATION_METHOD));
	    register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference_answer_justification$.getGlobalValue(), symbol_function(inference_datastructures_inference.SXHASH_INFERENCE_ANSWER_JUSTIFICATION_METHOD));
	    register_external_symbol(inference_datastructures_inference.INFERENCE_METRICS);
	    register_macro_helper(inference_datastructures_inference.INFERENCE_PROBLEM_WORKING_TIME_LOCK, inference_datastructures_inference.WITH_INFERENCE_PROBLEM_WORKING_TIME_LOCK);
	    register_macro_helper(inference_datastructures_inference.POSSIBLY_SIGNAL_SKSI_QUERY_START, inference_datastructures_inference.INFERENCE_WITHIN_SKSI_QUERY_EXECUTION);
	    register_macro_helper(inference_datastructures_inference.POSSIBLY_SIGNAL_SKSI_QUERY_END, inference_datastructures_inference.INFERENCE_WITHIN_SKSI_QUERY_EXECUTION);
	    register_macro_helper(inference_datastructures_inference.POSSIBLY_INCREMENT_INFERENCE_SKSI_QUERY_TOTAL_TIME, inference_datastructures_inference.INFERENCE_WITHIN_SKSI_QUERY_EXECUTION);
	    register_macro_helper(inference_datastructures_inference.POSSIBLY_ADD_INFERENCE_SKSI_QUERY_START_TIME, inference_datastructures_inference.INFERENCE_WITHIN_SKSI_QUERY_EXECUTION);
	    register_macro_helper(inference_datastructures_inference.POSSIBLY_ADD_INFERENCE_SPARQL_QUERY_PROFILE, inference_datastructures_inference.INFERENCE_WITHIN_SPARQL_QUERY_EXECUTION);
	}
	if (SubLFiles.USE_V2) {
	    def_csetf($sym116$INFRNC_ALLOW_HL_PREDICATE_TRANSFORMATION_, $sym117$_CSETF_INFRNC_ALLOW_HL_PREDICATE_TRANSFORMATION_);
	    def_csetf($sym118$INFRNC_ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_, $sym119$_CSETF_INFRNC_ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_);
	    def_csetf($sym120$INFRNC_ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_, $sym121$_CSETF_INFRNC_ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_);
	    def_csetf($sym122$INFRNC_ALLOW_INDETERMINATE_RESULTS_, $sym123$_CSETF_INFRNC_ALLOW_INDETERMINATE_RESULTS_);
	    def_csetf($sym130$INFRNC_ALLOW_ABNORMALITY_CHECKING_, $sym131$_CSETF_INFRNC_ALLOW_ABNORMALITY_CHECKING_);
	    def_csetf($sym134$INFRNC_PROBLEM_STORE_PRIVATE_, $sym135$_CSETF_INFRNC_PROBLEM_STORE_PRIVATE_);
	    def_csetf($sym136$INFRNC_CONTINUABLE_, $sym137$_CSETF_INFRNC_CONTINUABLE_);
	    def_csetf($sym138$INFRNC_BROWSABLE_, $sym139$_CSETF_INFRNC_BROWSABLE_);
	    def_csetf($sym144$INFRNC_CACHE_RESULTS_, $sym145$_CSETF_INFRNC_CACHE_RESULTS_);
	    def_csetf($sym146$INFRNC_BLOCKING_, $sym147$_CSETF_INFRNC_BLOCKING_);
	}
	return NIL;
    }

    public static SubLObject setup_inference_datastructures_inference_file_Previous() {
	register_method($print_object_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference$.getGlobalValue(), symbol_function(inference_datastructures_inference.INFERENCE_PRINT_FUNCTION_TRAMPOLINE));
	SubLSpecialOperatorDeclarations.proclaim(inference_datastructures_inference.$list61);
	def_csetf(inference_datastructures_inference.INFRNC_SUID, inference_datastructures_inference._CSETF_INFRNC_SUID);
	def_csetf(inference_datastructures_inference.INFRNC_PROBLEM_STORE, inference_datastructures_inference._CSETF_INFRNC_PROBLEM_STORE);
	def_csetf(inference_datastructures_inference.INFRNC_FORWARD_PROPAGATE, inference_datastructures_inference._CSETF_INFRNC_FORWARD_PROPAGATE);
	def_csetf(inference_datastructures_inference.INFRNC_INPUT_MT, inference_datastructures_inference._CSETF_INFRNC_INPUT_MT);
	def_csetf(inference_datastructures_inference.INFRNC_INPUT_EL_QUERY, inference_datastructures_inference._CSETF_INFRNC_INPUT_EL_QUERY);
	def_csetf(inference_datastructures_inference.INFRNC_INPUT_NON_EXPLANATORY_EL_QUERY, inference_datastructures_inference._CSETF_INFRNC_INPUT_NON_EXPLANATORY_EL_QUERY);
	def_csetf(inference_datastructures_inference.INFRNC_INPUT_QUERY_PROPERTIES, inference_datastructures_inference._CSETF_INFRNC_INPUT_QUERY_PROPERTIES);
	def_csetf(inference_datastructures_inference.INFRNC_MT, inference_datastructures_inference._CSETF_INFRNC_MT);
	def_csetf(inference_datastructures_inference.INFRNC_EL_QUERY, inference_datastructures_inference._CSETF_INFRNC_EL_QUERY);
	def_csetf(inference_datastructures_inference.INFRNC_EL_BINDINGS, inference_datastructures_inference._CSETF_INFRNC_EL_BINDINGS);
	def_csetf(inference_datastructures_inference.INFRNC_HL_QUERY, inference_datastructures_inference._CSETF_INFRNC_HL_QUERY);
	def_csetf(inference_datastructures_inference.INFRNC_EXPLANATORY_SUBQUERY, inference_datastructures_inference._CSETF_INFRNC_EXPLANATORY_SUBQUERY);
	def_csetf(inference_datastructures_inference.INFRNC_NON_EXPLANATORY_SUBQUERY, inference_datastructures_inference._CSETF_INFRNC_NON_EXPLANATORY_SUBQUERY);
	def_csetf(inference_datastructures_inference.INFRNC_FREE_HL_VARS, inference_datastructures_inference._CSETF_INFRNC_FREE_HL_VARS);
	def_csetf(inference_datastructures_inference.INFRNC_HYPOTHETICAL_BINDINGS, inference_datastructures_inference._CSETF_INFRNC_HYPOTHETICAL_BINDINGS);
	def_csetf(inference_datastructures_inference.INFRNC_ANSWER_ID_INDEX, inference_datastructures_inference._CSETF_INFRNC_ANSWER_ID_INDEX);
	def_csetf(inference_datastructures_inference.INFRNC_ANSWER_BINDINGS_INDEX, inference_datastructures_inference._CSETF_INFRNC_ANSWER_BINDINGS_INDEX);
	def_csetf(inference_datastructures_inference.INFRNC_NEW_ANSWER_ID_START, inference_datastructures_inference._CSETF_INFRNC_NEW_ANSWER_ID_START);
	def_csetf(inference_datastructures_inference.INFRNC_NEW_ANSWER_JUSTIFICATIONS, inference_datastructures_inference._CSETF_INFRNC_NEW_ANSWER_JUSTIFICATIONS);
	def_csetf(inference_datastructures_inference.INFRNC_STATUS, inference_datastructures_inference._CSETF_INFRNC_STATUS);
	def_csetf(inference_datastructures_inference.INFRNC_SUSPEND_STATUS, inference_datastructures_inference._CSETF_INFRNC_SUSPEND_STATUS);
	def_csetf(inference_datastructures_inference.INFRNC_ROOT_LINK, inference_datastructures_inference._CSETF_INFRNC_ROOT_LINK);
	def_csetf(inference_datastructures_inference.INFRNC_RELEVANT_PROBLEMS, inference_datastructures_inference._CSETF_INFRNC_RELEVANT_PROBLEMS);
	def_csetf(inference_datastructures_inference.INFRNC_STRATEGY_SET, inference_datastructures_inference._CSETF_INFRNC_STRATEGY_SET);
	def_csetf(inference_datastructures_inference.INFRNC_CONTROL_PROCESS, inference_datastructures_inference._CSETF_INFRNC_CONTROL_PROCESS);
	def_csetf(inference_datastructures_inference.INFRNC_INTERRUPTING_PROCESSES, inference_datastructures_inference._CSETF_INFRNC_INTERRUPTING_PROCESSES);
	def_csetf(inference_datastructures_inference.INFRNC_MAX_TRANSFORMATION_DEPTH_REACHED, inference_datastructures_inference._CSETF_INFRNC_MAX_TRANSFORMATION_DEPTH_REACHED);
	def_csetf(inference_datastructures_inference.INFRNC_DISJUNCTION_FREE_EL_VARS_POLICY, inference_datastructures_inference._CSETF_INFRNC_DISJUNCTION_FREE_EL_VARS_POLICY);
	def_csetf(inference_datastructures_inference.INFRNC_RESULT_UNIQUENESS_CRITERION, inference_datastructures_inference._CSETF_INFRNC_RESULT_UNIQUENESS_CRITERION);
	def_csetf(inference_datastructures_inference.$sym120$INFRNC_ALLOW_HL_PREDICATE_TRANSFORMATION_, inference_datastructures_inference.$sym121$_CSETF_INFRNC_ALLOW_HL_PREDICATE_TRANSFORMATION_);
	def_csetf(inference_datastructures_inference.$sym122$INFRNC_ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_, inference_datastructures_inference.$sym123$_CSETF_INFRNC_ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_);
	def_csetf(inference_datastructures_inference.$sym124$INFRNC_ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_, inference_datastructures_inference.$sym125$_CSETF_INFRNC_ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_);
	def_csetf(inference_datastructures_inference.$sym126$INFRNC_ALLOW_INDETERMINATE_RESULTS_, inference_datastructures_inference.$sym127$_CSETF_INFRNC_ALLOW_INDETERMINATE_RESULTS_);
	def_csetf(inference_datastructures_inference.INFRNC_ALLOWED_RULES, inference_datastructures_inference._CSETF_INFRNC_ALLOWED_RULES);
	def_csetf(inference_datastructures_inference.INFRNC_FORBIDDEN_RULES, inference_datastructures_inference._CSETF_INFRNC_FORBIDDEN_RULES);
	def_csetf(inference_datastructures_inference.INFRNC_ALLOWED_MODULES, inference_datastructures_inference._CSETF_INFRNC_ALLOWED_MODULES);
	def_csetf(inference_datastructures_inference.$sym134$INFRNC_ALLOW_ABNORMALITY_CHECKING_, inference_datastructures_inference.$sym135$_CSETF_INFRNC_ALLOW_ABNORMALITY_CHECKING_);
	def_csetf(inference_datastructures_inference.INFRNC_TRANSITIVE_CLOSURE_MODE, inference_datastructures_inference._CSETF_INFRNC_TRANSITIVE_CLOSURE_MODE);
	def_csetf(inference_datastructures_inference.$sym138$INFRNC_PROBLEM_STORE_PRIVATE_, inference_datastructures_inference.$sym139$_CSETF_INFRNC_PROBLEM_STORE_PRIVATE_);
	def_csetf(inference_datastructures_inference.$sym140$INFRNC_CONTINUABLE_, inference_datastructures_inference.$sym141$_CSETF_INFRNC_CONTINUABLE_);
	def_csetf(inference_datastructures_inference.$sym142$INFRNC_BROWSABLE_, inference_datastructures_inference.$sym143$_CSETF_INFRNC_BROWSABLE_);
	def_csetf(inference_datastructures_inference.INFRNC_RETURN_TYPE, inference_datastructures_inference._CSETF_INFRNC_RETURN_TYPE);
	def_csetf(inference_datastructures_inference.INFRNC_ANSWER_LANGUAGE, inference_datastructures_inference._CSETF_INFRNC_ANSWER_LANGUAGE);
	def_csetf(inference_datastructures_inference.$sym148$INFRNC_CACHE_RESULTS_, inference_datastructures_inference.$sym149$_CSETF_INFRNC_CACHE_RESULTS_);
	def_csetf(inference_datastructures_inference.$sym150$INFRNC_BLOCKING_, inference_datastructures_inference.$sym151$_CSETF_INFRNC_BLOCKING_);
	def_csetf(inference_datastructures_inference.INFRNC_MAX_NUMBER, inference_datastructures_inference._CSETF_INFRNC_MAX_NUMBER);
	def_csetf(inference_datastructures_inference.INFRNC_MAX_TIME, inference_datastructures_inference._CSETF_INFRNC_MAX_TIME);
	def_csetf(inference_datastructures_inference.INFRNC_MAX_STEP, inference_datastructures_inference._CSETF_INFRNC_MAX_STEP);
	def_csetf(inference_datastructures_inference.INFRNC_MODE, inference_datastructures_inference._CSETF_INFRNC_MODE);
	def_csetf(inference_datastructures_inference.INFRNC_FORWARD_MAX_TIME, inference_datastructures_inference._CSETF_INFRNC_FORWARD_MAX_TIME);
	def_csetf(inference_datastructures_inference.INFRNC_MAX_PROOF_DEPTH, inference_datastructures_inference._CSETF_INFRNC_MAX_PROOF_DEPTH);
	def_csetf(inference_datastructures_inference.INFRNC_MAX_TRANSFORMATION_DEPTH, inference_datastructures_inference._CSETF_INFRNC_MAX_TRANSFORMATION_DEPTH);
	def_csetf(inference_datastructures_inference.INFRNC_MIN_RULE_UTILITY, inference_datastructures_inference._CSETF_INFRNC_MIN_RULE_UTILITY);
	def_csetf(inference_datastructures_inference.INFRNC_PROBABLY_APPROXIMATELY_DONE, inference_datastructures_inference._CSETF_INFRNC_PROBABLY_APPROXIMATELY_DONE);
	def_csetf(inference_datastructures_inference.INFRNC_METRICS_TEMPLATE, inference_datastructures_inference._CSETF_INFRNC_METRICS_TEMPLATE);
	def_csetf(inference_datastructures_inference.INFRNC_START_UNIVERSAL_TIME, inference_datastructures_inference._CSETF_INFRNC_START_UNIVERSAL_TIME);
	def_csetf(inference_datastructures_inference.INFRNC_START_INTERNAL_REAL_TIME, inference_datastructures_inference._CSETF_INFRNC_START_INTERNAL_REAL_TIME);
	def_csetf(inference_datastructures_inference.INFRNC_END_INTERNAL_REAL_TIME, inference_datastructures_inference._CSETF_INFRNC_END_INTERNAL_REAL_TIME);
	def_csetf(inference_datastructures_inference.INFRNC_PAD_INTERNAL_REAL_TIME, inference_datastructures_inference._CSETF_INFRNC_PAD_INTERNAL_REAL_TIME);
	def_csetf(inference_datastructures_inference.INFRNC_HYPOTHESIZATION_TIME, inference_datastructures_inference._CSETF_INFRNC_HYPOTHESIZATION_TIME);
	def_csetf(inference_datastructures_inference.INFRNC_CUMULATIVE_TIME, inference_datastructures_inference._CSETF_INFRNC_CUMULATIVE_TIME);
	def_csetf(inference_datastructures_inference.INFRNC_STEP_COUNT, inference_datastructures_inference._CSETF_INFRNC_STEP_COUNT);
	def_csetf(inference_datastructures_inference.INFRNC_CUMULATIVE_STEP_COUNT, inference_datastructures_inference._CSETF_INFRNC_CUMULATIVE_STEP_COUNT);
	def_csetf(inference_datastructures_inference.INFRNC_EVENTS, inference_datastructures_inference._CSETF_INFRNC_EVENTS);
	def_csetf(inference_datastructures_inference.INFRNC_HALT_CONDITIONS, inference_datastructures_inference._CSETF_INFRNC_HALT_CONDITIONS);
	def_csetf(inference_datastructures_inference.INFRNC_ACCUMULATORS, inference_datastructures_inference._CSETF_INFRNC_ACCUMULATORS);
	def_csetf(inference_datastructures_inference.INFRNC_PROOF_WATERMARK, inference_datastructures_inference._CSETF_INFRNC_PROOF_WATERMARK);
	def_csetf(inference_datastructures_inference.INFRNC_PROBLEM_WORKING_TIME_DATA, inference_datastructures_inference._CSETF_INFRNC_PROBLEM_WORKING_TIME_DATA);
	def_csetf(inference_datastructures_inference.INFRNC_TYPE, inference_datastructures_inference._CSETF_INFRNC_TYPE);
	def_csetf(inference_datastructures_inference.INFRNC_DATA, inference_datastructures_inference._CSETF_INFRNC_DATA);
	def_csetf(inference_datastructures_inference.INFRNC_PROPERTIES, inference_datastructures_inference._CSETF_INFRNC_PROPERTIES);
	identity(INFERENCE);
	register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference$.getGlobalValue(), symbol_function(inference_datastructures_inference.VISIT_DEFSTRUCT_OBJECT_INFERENCE_METHOD));
	register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference$.getGlobalValue(), symbol_function(inference_datastructures_inference.SXHASH_INFERENCE_METHOD));
	register_macro_helper(inference_datastructures_inference.INFERENCE_ANSWER_ID_INDEX, inference_datastructures_inference.DO_INFERENCE_ANSWERS);
	register_macro_helper(inference_datastructures_inference.INFERENCE_NEW_ANSWER_ID_START, inference_datastructures_inference.DO_INFERENCE_NEW_ANSWERS);
	register_macro_helper(inference_datastructures_inference.INFERENCE_NEW_ANSWER_JUSTIFICATIONS, inference_datastructures_inference.DO_INFERENCE_NEW_ANSWER_JUSTIFICATIONS);
	declare_defglobal(inference_datastructures_inference.$pad_times_to_first_answer$);
	register_macro_helper(inference_datastructures_inference.INFERENCE_NEXT_NEW_ANSWER_ID, inference_datastructures_inference.DO_INFERENCE_NEW_ANSWERS);
	register_method($print_object_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference_answer$.getGlobalValue(), symbol_function(inference_datastructures_inference.INFERENCE_ANSWER_PRINT_FUNCTION_TRAMPOLINE));
	SubLSpecialOperatorDeclarations.proclaim(inference_datastructures_inference.$list448);
	def_csetf(inference_datastructures_inference.INF_ANSWER_SUID, inference_datastructures_inference._CSETF_INF_ANSWER_SUID);
	def_csetf(inference_datastructures_inference.INF_ANSWER_INFERENCE, inference_datastructures_inference._CSETF_INF_ANSWER_INFERENCE);
	def_csetf(inference_datastructures_inference.INF_ANSWER_BINDINGS, inference_datastructures_inference._CSETF_INF_ANSWER_BINDINGS);
	def_csetf(inference_datastructures_inference.INF_ANSWER_JUSTIFICATIONS, inference_datastructures_inference._CSETF_INF_ANSWER_JUSTIFICATIONS);
	def_csetf(inference_datastructures_inference.INF_ANSWER_ELAPSED_CREATION_TIME, inference_datastructures_inference._CSETF_INF_ANSWER_ELAPSED_CREATION_TIME);
	def_csetf(inference_datastructures_inference.INF_ANSWER_STEP_COUNT, inference_datastructures_inference._CSETF_INF_ANSWER_STEP_COUNT);
	identity(INFERENCE_ANSWER);
	register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference_answer$.getGlobalValue(), symbol_function(inference_datastructures_inference.VISIT_DEFSTRUCT_OBJECT_INFERENCE_ANSWER_METHOD));
	register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference_answer$.getGlobalValue(), symbol_function(inference_datastructures_inference.SXHASH_INFERENCE_ANSWER_METHOD));
	register_macro_helper(inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATIONS, inference_datastructures_inference.DO_INFERENCE_ANSWER_JUSTIFICATIONS);
	register_external_symbol(inference_datastructures_inference.INFERENCE_ANSWER_EL_SENTENCE);
	register_method($print_object_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference_answer_justification$.getGlobalValue(), symbol_function(inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATION_PRINT_FUNCTION_TRAMPOLINE));
	SubLSpecialOperatorDeclarations.proclaim(inference_datastructures_inference.$list488);
	def_csetf(inference_datastructures_inference.INF_ANS_JUST_ANSWER, inference_datastructures_inference._CSETF_INF_ANS_JUST_ANSWER);
	def_csetf(inference_datastructures_inference.INF_ANS_JUST_SUPPORTS, inference_datastructures_inference._CSETF_INF_ANS_JUST_SUPPORTS);
	def_csetf(inference_datastructures_inference.INF_ANS_JUST_PRAGMA_SUPPORTS, inference_datastructures_inference._CSETF_INF_ANS_JUST_PRAGMA_SUPPORTS);
	def_csetf(inference_datastructures_inference.INF_ANS_JUST_PROOFS, inference_datastructures_inference._CSETF_INF_ANS_JUST_PROOFS);
	identity(inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATION);
	register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference_answer_justification$.getGlobalValue(), symbol_function(inference_datastructures_inference.VISIT_DEFSTRUCT_OBJECT_INFERENCE_ANSWER_JUSTIFICATION_METHOD));
	register_method(Sxhash.$sxhash_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference_answer_justification$.getGlobalValue(), symbol_function(inference_datastructures_inference.SXHASH_INFERENCE_ANSWER_JUSTIFICATION_METHOD));
	register_external_symbol(inference_datastructures_inference.INFERENCE_METRICS);
	register_macro_helper(inference_datastructures_inference.INFERENCE_PROBLEM_WORKING_TIME_LOCK, inference_datastructures_inference.WITH_INFERENCE_PROBLEM_WORKING_TIME_LOCK);
	register_macro_helper(inference_datastructures_inference.POSSIBLY_SIGNAL_SKSI_QUERY_START, inference_datastructures_inference.INFERENCE_WITHIN_SKSI_QUERY_EXECUTION);
	register_macro_helper(inference_datastructures_inference.POSSIBLY_SIGNAL_SKSI_QUERY_END, inference_datastructures_inference.INFERENCE_WITHIN_SKSI_QUERY_EXECUTION);
	register_macro_helper(inference_datastructures_inference.POSSIBLY_INCREMENT_INFERENCE_SKSI_QUERY_TOTAL_TIME, inference_datastructures_inference.INFERENCE_WITHIN_SKSI_QUERY_EXECUTION);
	register_macro_helper(inference_datastructures_inference.POSSIBLY_ADD_INFERENCE_SKSI_QUERY_START_TIME, inference_datastructures_inference.INFERENCE_WITHIN_SKSI_QUERY_EXECUTION);
	register_macro_helper(inference_datastructures_inference.POSSIBLY_ADD_INFERENCE_SPARQL_QUERY_PROFILE, inference_datastructures_inference.INFERENCE_WITHIN_SPARQL_QUERY_EXECUTION);
	return NIL;
    }

    @Override
    public void declareFunctions() {
	inference_datastructures_inference.declare_inference_datastructures_inference_file();
    }

    @Override
    public void initializeVariables() {
	inference_datastructures_inference.init_inference_datastructures_inference_file();
    }

    @Override
    public void runTopLevelForms() {
	inference_datastructures_inference.setup_inference_datastructures_inference_file();
    }

    static {
    }

    public static final class $inference_native extends SubLStructNative {
	public SubLObject $suid;

	public SubLObject $problem_store;

	public SubLObject $forward_propagate;

	public SubLObject $input_mt;

	public SubLObject $input_el_query;

	public SubLObject $input_non_explanatory_el_query;

	public SubLObject $input_query_properties;

	public SubLObject $mt;

	public SubLObject $el_query;

	public SubLObject $el_bindings;

	public SubLObject $hl_query;

	public SubLObject $explanatory_subquery;

	public SubLObject $non_explanatory_subquery;

	public SubLObject $free_hl_vars;

	public SubLObject $hypothetical_bindings;

	public SubLObject $answer_id_index;

	public SubLObject $answer_bindings_index;

	public SubLObject $new_answer_id_start;

	public SubLObject $new_answer_justifications;

	public SubLObject $status;

	public SubLObject $suspend_status;

	public SubLObject $root_link;

	public SubLObject $relevant_problems;

	public SubLObject $strategy_set;

	public SubLObject $control_process;

	public SubLObject $interrupting_processes;

	public SubLObject $max_transformation_depth_reached;

	public SubLObject $disjunction_free_el_vars_policy;

	public SubLObject $result_uniqueness_criterion;

	public SubLObject $allow_hl_predicate_transformationP;

	public SubLObject $allow_unbound_predicate_transformationP;

	public SubLObject $allow_evaluatable_predicate_transformationP;

	public SubLObject $allow_indeterminate_resultsP;

	public SubLObject $allowed_rules;

	public SubLObject $forbidden_rules;

	public SubLObject $allowed_modules;

	public SubLObject $allow_abnormality_checkingP;

	public SubLObject $transitive_closure_mode;

	public SubLObject $problem_store_privateP;

	public SubLObject $continuableP;

	public SubLObject $browsableP;

	public SubLObject $return_type;

	public SubLObject $answer_language;

	public SubLObject $cache_resultsP;

	public SubLObject $blockingP;

	public SubLObject $max_number;

	public SubLObject $max_time;

	public SubLObject $max_step;

	public SubLObject $mode;

	public SubLObject $forward_max_time;

	public SubLObject $max_proof_depth;

	public SubLObject $max_transformation_depth;

	public SubLObject $min_rule_utility;

	public SubLObject $probably_approximately_done;

	public SubLObject $metrics_template;

	public SubLObject $start_universal_time;

	public SubLObject $start_internal_real_time;

	public SubLObject $end_internal_real_time;

	public SubLObject $pad_internal_real_time;

	public SubLObject $hypothesization_time;

	public SubLObject $cumulative_time;

	public SubLObject $step_count;

	public SubLObject $cumulative_step_count;

	public SubLObject $events;

	public SubLObject $halt_conditions;

	public SubLObject $accumulators;

	public SubLObject $proof_watermark;

	public SubLObject $problem_working_time_data;

	public SubLObject $type;

	public SubLObject $data;

	public SubLObject $properties;

	private static final SubLStructDeclNative structDecl;

	public $inference_native() {
	    this.$suid = Lisp.NIL;
	    this.$problem_store = Lisp.NIL;
	    this.$forward_propagate = Lisp.NIL;
	    this.$input_mt = Lisp.NIL;
	    this.$input_el_query = Lisp.NIL;
	    this.$input_non_explanatory_el_query = Lisp.NIL;
	    this.$input_query_properties = Lisp.NIL;
	    this.$mt = Lisp.NIL;
	    this.$el_query = Lisp.NIL;
	    this.$el_bindings = Lisp.NIL;
	    this.$hl_query = Lisp.NIL;
	    this.$explanatory_subquery = Lisp.NIL;
	    this.$non_explanatory_subquery = Lisp.NIL;
	    this.$free_hl_vars = Lisp.NIL;
	    this.$hypothetical_bindings = Lisp.NIL;
	    this.$answer_id_index = Lisp.NIL;
	    this.$answer_bindings_index = Lisp.NIL;
	    this.$new_answer_id_start = Lisp.NIL;
	    this.$new_answer_justifications = Lisp.NIL;
	    this.$status = Lisp.NIL;
	    this.$suspend_status = Lisp.NIL;
	    this.$root_link = Lisp.NIL;
	    this.$relevant_problems = Lisp.NIL;
	    this.$strategy_set = Lisp.NIL;
	    this.$control_process = Lisp.NIL;
	    this.$interrupting_processes = Lisp.NIL;
	    this.$max_transformation_depth_reached = Lisp.NIL;
	    this.$disjunction_free_el_vars_policy = Lisp.NIL;
	    this.$result_uniqueness_criterion = Lisp.NIL;
	    this.$allow_hl_predicate_transformationP = Lisp.NIL;
	    this.$allow_unbound_predicate_transformationP = Lisp.NIL;
	    this.$allow_evaluatable_predicate_transformationP = Lisp.NIL;
	    this.$allow_indeterminate_resultsP = Lisp.NIL;
	    this.$allowed_rules = Lisp.NIL;
	    this.$forbidden_rules = Lisp.NIL;
	    this.$allowed_modules = Lisp.NIL;
	    this.$allow_abnormality_checkingP = Lisp.NIL;
	    this.$transitive_closure_mode = Lisp.NIL;
	    this.$problem_store_privateP = Lisp.NIL;
	    this.$continuableP = Lisp.NIL;
	    this.$browsableP = Lisp.NIL;
	    this.$return_type = Lisp.NIL;
	    this.$answer_language = Lisp.NIL;
	    this.$cache_resultsP = Lisp.NIL;
	    this.$blockingP = Lisp.NIL;
	    this.$max_number = Lisp.NIL;
	    this.$max_time = Lisp.NIL;
	    this.$max_step = Lisp.NIL;
	    this.$mode = Lisp.NIL;
	    this.$forward_max_time = Lisp.NIL;
	    this.$max_proof_depth = Lisp.NIL;
	    this.$max_transformation_depth = Lisp.NIL;
	    this.$min_rule_utility = Lisp.NIL;
	    this.$probably_approximately_done = Lisp.NIL;
	    this.$metrics_template = Lisp.NIL;
	    this.$start_universal_time = Lisp.NIL;
	    this.$start_internal_real_time = Lisp.NIL;
	    this.$end_internal_real_time = Lisp.NIL;
	    this.$pad_internal_real_time = Lisp.NIL;
	    this.$hypothesization_time = Lisp.NIL;
	    this.$cumulative_time = Lisp.NIL;
	    this.$step_count = Lisp.NIL;
	    this.$cumulative_step_count = Lisp.NIL;
	    this.$events = Lisp.NIL;
	    this.$halt_conditions = Lisp.NIL;
	    this.$accumulators = Lisp.NIL;
	    this.$proof_watermark = Lisp.NIL;
	    this.$problem_working_time_data = Lisp.NIL;
	    this.$type = Lisp.NIL;
	    this.$data = Lisp.NIL;
	    this.$properties = Lisp.NIL;
	}

	@Override
	public SubLStructDecl getStructDecl() {
	    return structDecl;
	}

	@Override
	public SubLObject getField2() {
	    return this.$suid;
	}

	@Override
	public SubLObject getField3() {
	    return this.$problem_store;
	}

	@Override
	public SubLObject getField4() {
	    return this.$forward_propagate;
	}

	@Override
	public SubLObject getField5() {
	    return this.$input_mt;
	}

	@Override
	public SubLObject getField6() {
	    return this.$input_el_query;
	}

	@Override
	public SubLObject getField7() {
	    return this.$input_non_explanatory_el_query;
	}

	@Override
	public SubLObject getField8() {
	    return this.$input_query_properties;
	}

	@Override
	public SubLObject getField9() {
	    return this.$mt;
	}

	@Override
	public SubLObject getField10() {
	    return this.$el_query;
	}

	@Override
	public SubLObject getField11() {
	    return this.$el_bindings;
	}

	@Override
	public SubLObject getField12() {
	    return this.$hl_query;
	}

	@Override
	public SubLObject getField13() {
	    return this.$explanatory_subquery;
	}

	@Override
	public SubLObject getField14() {
	    return this.$non_explanatory_subquery;
	}

	@Override
	public SubLObject getField15() {
	    return this.$free_hl_vars;
	}

	@Override
	public SubLObject getField16() {
	    return this.$hypothetical_bindings;
	}

	@Override
	public SubLObject getField17() {
	    return this.$answer_id_index;
	}

	@Override
	public SubLObject getField18() {
	    return this.$answer_bindings_index;
	}

	@Override
	public SubLObject getField19() {
	    return this.$new_answer_id_start;
	}

	@Override
	public SubLObject getField20() {
	    return this.$new_answer_justifications;
	}

	public SubLObject getField21() {
	    return this.$status;
	}

	public SubLObject getField22() {
	    return this.$suspend_status;
	}

	public SubLObject getField23() {
	    return this.$root_link;
	}

	public SubLObject getField24() {
	    return this.$relevant_problems;
	}

	public SubLObject getField25() {
	    return this.$strategy_set;
	}

	public SubLObject getField26() {
	    return this.$control_process;
	}

	public SubLObject getField27() {
	    return this.$interrupting_processes;
	}

	public SubLObject getField28() {
	    return this.$max_transformation_depth_reached;
	}

	public SubLObject getField29() {
	    return this.$disjunction_free_el_vars_policy;
	}

	public SubLObject getField30() {
	    return this.$result_uniqueness_criterion;
	}

	public SubLObject getField31() {
	    return this.$allow_hl_predicate_transformationP;
	}

	public SubLObject getField32() {
	    return this.$allow_unbound_predicate_transformationP;
	}

	public SubLObject getField33() {
	    return this.$allow_evaluatable_predicate_transformationP;
	}

	public SubLObject getField34() {
	    return this.$allow_indeterminate_resultsP;
	}

	public SubLObject getField35() {
	    return this.$allowed_rules;
	}

	public SubLObject getField36() {
	    return this.$forbidden_rules;
	}

	public SubLObject getField37() {
	    return this.$allowed_modules;
	}

	public SubLObject getField38() {
	    return this.$allow_abnormality_checkingP;
	}

	public SubLObject getField39() {
	    return this.$transitive_closure_mode;
	}

	public SubLObject getField40() {
	    return this.$problem_store_privateP;
	}

	public SubLObject getField41() {
	    return this.$continuableP;
	}

	public SubLObject getField42() {
	    return this.$browsableP;
	}

	public SubLObject getField43() {
	    return this.$return_type;
	}

	public SubLObject getField44() {
	    return this.$answer_language;
	}

	public SubLObject getField45() {
	    return this.$cache_resultsP;
	}

	public SubLObject getField46() {
	    return this.$blockingP;
	}

	public SubLObject getField47() {
	    return this.$max_number;
	}

	public SubLObject getField48() {
	    return this.$max_time;
	}

	public SubLObject getField49() {
	    return this.$max_step;
	}

	public SubLObject getField50() {
	    return this.$mode;
	}

	public SubLObject getField51() {
	    return this.$forward_max_time;
	}

	public SubLObject getField52() {
	    return this.$max_proof_depth;
	}

	public SubLObject getField53() {
	    return this.$max_transformation_depth;
	}

	public SubLObject getField54() {
	    return this.$min_rule_utility;
	}

	public SubLObject getField55() {
	    return this.$probably_approximately_done;
	}

	public SubLObject getField56() {
	    return this.$metrics_template;
	}

	public SubLObject getField57() {
	    return this.$start_universal_time;
	}

	public SubLObject getField58() {
	    return this.$start_internal_real_time;
	}

	public SubLObject getField59() {
	    return this.$end_internal_real_time;
	}

	public SubLObject getField60() {
	    return this.$pad_internal_real_time;
	}

	public SubLObject getField61() {
	    return this.$hypothesization_time;
	}

	public SubLObject getField62() {
	    return this.$cumulative_time;
	}

	public SubLObject getField63() {
	    return this.$step_count;
	}

	public SubLObject getField64() {
	    return this.$cumulative_step_count;
	}

	public SubLObject getField65() {
	    return this.$events;
	}

	public SubLObject getField66() {
	    return this.$halt_conditions;
	}

	public SubLObject getField67() {
	    return this.$accumulators;
	}

	public SubLObject getField68() {
	    return this.$proof_watermark;
	}

	public SubLObject getField69() {
	    return this.$problem_working_time_data;
	}

	public SubLObject getField70() {
	    return this.$type;
	}

	public SubLObject getField71() {
	    return this.$data;
	}

	public SubLObject getField72() {
	    return this.$properties;
	}

	@Override
	public SubLObject setField2(final SubLObject value) {
	    return this.$suid = value;
	}

	@Override
	public SubLObject setField3(final SubLObject value) {
	    return this.$problem_store = value;
	}

	@Override
	public SubLObject setField4(final SubLObject value) {
	    return this.$forward_propagate = value;
	}

	@Override
	public SubLObject setField5(final SubLObject value) {
	    return this.$input_mt = value;
	}

	@Override
	public SubLObject setField6(final SubLObject value) {
	    return this.$input_el_query = value;
	}

	@Override
	public SubLObject setField7(final SubLObject value) {
	    return this.$input_non_explanatory_el_query = value;
	}

	@Override
	public SubLObject setField8(final SubLObject value) {
	    return this.$input_query_properties = value;
	}

	@Override
	public SubLObject setField9(final SubLObject value) {
	    return this.$mt = value;
	}

	@Override
	public SubLObject setField10(final SubLObject value) {
	    return this.$el_query = value;
	}

	@Override
	public SubLObject setField11(final SubLObject value) {
	    return this.$el_bindings = value;
	}

	@Override
	public SubLObject setField12(final SubLObject value) {
	    return this.$hl_query = value;
	}

	@Override
	public SubLObject setField13(final SubLObject value) {
	    return this.$explanatory_subquery = value;
	}

	@Override
	public SubLObject setField14(final SubLObject value) {
	    return this.$non_explanatory_subquery = value;
	}

	@Override
	public SubLObject setField15(final SubLObject value) {
	    return this.$free_hl_vars = value;
	}

	@Override
	public SubLObject setField16(final SubLObject value) {
	    return this.$hypothetical_bindings = value;
	}

	@Override
	public SubLObject setField17(final SubLObject value) {
	    return this.$answer_id_index = value;
	}

	@Override
	public SubLObject setField18(final SubLObject value) {
	    return this.$answer_bindings_index = value;
	}

	@Override
	public SubLObject setField19(final SubLObject value) {
	    return this.$new_answer_id_start = value;
	}

	@Override
	public SubLObject setField20(final SubLObject value) {
	    return this.$new_answer_justifications = value;
	}

	public SubLObject setField21(final SubLObject value) {
	    return this.$status = value;
	}

	public SubLObject setField22(final SubLObject value) {
	    return this.$suspend_status = value;
	}

	public SubLObject setField23(final SubLObject value) {
	    return this.$root_link = value;
	}

	public SubLObject setField24(final SubLObject value) {
	    return this.$relevant_problems = value;
	}

	public SubLObject setField25(final SubLObject value) {
	    return this.$strategy_set = value;
	}

	public SubLObject setField26(final SubLObject value) {
	    return this.$control_process = value;
	}

	public SubLObject setField27(final SubLObject value) {
	    return this.$interrupting_processes = value;
	}

	public SubLObject setField28(final SubLObject value) {
	    return this.$max_transformation_depth_reached = value;
	}

	public SubLObject setField29(final SubLObject value) {
	    return this.$disjunction_free_el_vars_policy = value;
	}

	public SubLObject setField30(final SubLObject value) {
	    return this.$result_uniqueness_criterion = value;
	}

	public SubLObject setField31(final SubLObject value) {
	    return this.$allow_hl_predicate_transformationP = value;
	}

	public SubLObject setField32(final SubLObject value) {
	    return this.$allow_unbound_predicate_transformationP = value;
	}

	public SubLObject setField33(final SubLObject value) {
	    return this.$allow_evaluatable_predicate_transformationP = value;
	}

	public SubLObject setField34(final SubLObject value) {
	    return this.$allow_indeterminate_resultsP = value;
	}

	public SubLObject setField35(final SubLObject value) {
	    return this.$allowed_rules = value;
	}

	public SubLObject setField36(final SubLObject value) {
	    return this.$forbidden_rules = value;
	}

	public SubLObject setField37(final SubLObject value) {
	    return this.$allowed_modules = value;
	}

	public SubLObject setField38(final SubLObject value) {
	    return this.$allow_abnormality_checkingP = value;
	}

	public SubLObject setField39(final SubLObject value) {
	    return this.$transitive_closure_mode = value;
	}

	public SubLObject setField40(final SubLObject value) {
	    return this.$problem_store_privateP = value;
	}

	public SubLObject setField41(final SubLObject value) {
	    return this.$continuableP = value;
	}

	public SubLObject setField42(final SubLObject value) {
	    return this.$browsableP = value;
	}

	public SubLObject setField43(final SubLObject value) {
	    return this.$return_type = value;
	}

	public SubLObject setField44(final SubLObject value) {
	    return this.$answer_language = value;
	}

	public SubLObject setField45(final SubLObject value) {
	    return this.$cache_resultsP = value;
	}

	public SubLObject setField46(final SubLObject value) {
	    return this.$blockingP = value;
	}

	public SubLObject setField47(final SubLObject value) {
	    return this.$max_number = value;
	}

	public SubLObject setField48(final SubLObject value) {
	    return this.$max_time = value;
	}

	public SubLObject setField49(final SubLObject value) {
	    return this.$max_step = value;
	}

	public SubLObject setField50(final SubLObject value) {
	    return this.$mode = value;
	}

	public SubLObject setField51(final SubLObject value) {
	    return this.$forward_max_time = value;
	}

	public SubLObject setField52(final SubLObject value) {
	    return this.$max_proof_depth = value;
	}

	public SubLObject setField53(final SubLObject value) {
	    return this.$max_transformation_depth = value;
	}

	public SubLObject setField54(final SubLObject value) {
	    return this.$min_rule_utility = value;
	}

	public SubLObject setField55(final SubLObject value) {
	    return this.$probably_approximately_done = value;
	}

	public SubLObject setField56(final SubLObject value) {
	    return this.$metrics_template = value;
	}

	public SubLObject setField57(final SubLObject value) {
	    return this.$start_universal_time = value;
	}

	public SubLObject setField58(final SubLObject value) {
	    return this.$start_internal_real_time = value;
	}

	public SubLObject setField59(final SubLObject value) {
	    return this.$end_internal_real_time = value;
	}

	public SubLObject setField60(final SubLObject value) {
	    return this.$pad_internal_real_time = value;
	}

	public SubLObject setField61(final SubLObject value) {
	    return this.$hypothesization_time = value;
	}

	public SubLObject setField62(final SubLObject value) {
	    return this.$cumulative_time = value;
	}

	public SubLObject setField63(final SubLObject value) {
	    return this.$step_count = value;
	}

	public SubLObject setField64(final SubLObject value) {
	    return this.$cumulative_step_count = value;
	}

	public SubLObject setField65(final SubLObject value) {
	    return this.$events = value;
	}

	public SubLObject setField66(final SubLObject value) {
	    return this.$halt_conditions = value;
	}

	public SubLObject setField67(final SubLObject value) {
	    return this.$accumulators = value;
	}

	public SubLObject setField68(final SubLObject value) {
	    return this.$proof_watermark = value;
	}

	public SubLObject setField69(final SubLObject value) {
	    return this.$problem_working_time_data = value;
	}

	public SubLObject setField70(final SubLObject value) {
	    return this.$type = value;
	}

	public SubLObject setField71(final SubLObject value) {
	    return this.$data = value;
	}

	public SubLObject setField72(final SubLObject value) {
	    return this.$properties = value;
	}

	static {
	    structDecl = makeStructDeclNative(inference_datastructures_inference.$inference_native.class, INFERENCE, INFERENCE_P, inference_datastructures_inference.$list3, inference_datastructures_inference.$list4,
		    new String[] { "$suid", "$problem_store", "$forward_propagate", "$input_mt", "$input_el_query", "$input_non_explanatory_el_query", "$input_query_properties", "$mt", "$el_query", "$el_bindings", "$hl_query", "$explanatory_subquery", "$non_explanatory_subquery", "$free_hl_vars",
			    "$hypothetical_bindings", "$answer_id_index", "$answer_bindings_index", "$new_answer_id_start", "$new_answer_justifications", "$status", "$suspend_status", "$root_link", "$relevant_problems", "$strategy_set", "$control_process", "$interrupting_processes",
			    "$max_transformation_depth_reached", "$disjunction_free_el_vars_policy", "$result_uniqueness_criterion", "$allow_hl_predicate_transformationP", "$allow_unbound_predicate_transformationP", "$allow_evaluatable_predicate_transformationP", "$allow_indeterminate_resultsP",
			    "$allowed_rules", "$forbidden_rules", "$allowed_modules", "$allow_abnormality_checkingP", "$transitive_closure_mode", "$problem_store_privateP", "$continuableP", "$browsableP", "$return_type", "$answer_language", "$cache_resultsP", "$blockingP", "$max_number",
			    "$max_time", "$max_step", "$mode", "$forward_max_time", "$max_proof_depth", "$max_transformation_depth", "$min_rule_utility", "$probably_approximately_done", "$metrics_template", "$start_universal_time", "$start_internal_real_time", "$end_internal_real_time",
			    "$pad_internal_real_time", "$hypothesization_time", "$cumulative_time", "$step_count", "$cumulative_step_count", "$events", "$halt_conditions", "$accumulators", "$proof_watermark", "$problem_working_time_data", "$type", "$data", "$properties" },
		    inference_datastructures_inference.$list5, inference_datastructures_inference.$list6, inference_datastructures_inference.PRINT_INFERENCE);
	}
    }

    public static final class $inference_p$UnaryFunction extends UnaryFunction {
	public $inference_p$UnaryFunction() {
	    super(extractFunctionNamed("INFERENCE-P"));
	}

	@Override
	public SubLObject processItem(final SubLObject arg1) {
	    return inference_datastructures_inference.inference_p(arg1);
	}
    }

    public static final class $sxhash_inference_method$UnaryFunction extends UnaryFunction {
	public $sxhash_inference_method$UnaryFunction() {
	    super(extractFunctionNamed("SXHASH-INFERENCE-METHOD"));
	}

	@Override
	public SubLObject processItem(final SubLObject arg1) {
	    return inference_datastructures_inference.sxhash_inference_method(arg1);
	}
    }

    public static final class $inference_answer_native extends SubLStructNative {
	public SubLObject $suid;

	public SubLObject $inference;

	public SubLObject $bindings;

	public SubLObject $justifications;

	public SubLObject $elapsed_creation_time;

	public SubLObject $step_count;

	private static final SubLStructDeclNative structDecl;

	public $inference_answer_native() {
	    this.$suid = Lisp.NIL;
	    this.$inference = Lisp.NIL;
	    this.$bindings = Lisp.NIL;
	    this.$justifications = Lisp.NIL;
	    this.$elapsed_creation_time = Lisp.NIL;
	    this.$step_count = Lisp.NIL;
	}

	@Override
	public SubLStructDecl getStructDecl() {
	    return structDecl;
	}

	@Override
	public SubLObject getField2() {
	    return this.$suid;
	}

	@Override
	public SubLObject getField3() {
	    return this.$inference;
	}

	@Override
	public SubLObject getField4() {
	    return this.$bindings;
	}

	@Override
	public SubLObject getField5() {
	    return this.$justifications;
	}

	@Override
	public SubLObject getField6() {
	    return this.$elapsed_creation_time;
	}

	@Override
	public SubLObject getField7() {
	    return this.$step_count;
	}

	@Override
	public SubLObject setField2(final SubLObject value) {
	    return this.$suid = value;
	}

	@Override
	public SubLObject setField3(final SubLObject value) {
	    return this.$inference = value;
	}

	@Override
	public SubLObject setField4(final SubLObject value) {
	    return this.$bindings = value;
	}

	@Override
	public SubLObject setField5(final SubLObject value) {
	    return this.$justifications = value;
	}

	@Override
	public SubLObject setField6(final SubLObject value) {
	    return this.$elapsed_creation_time = value;
	}

	@Override
	public SubLObject setField7(final SubLObject value) {
	    return this.$step_count = value;
	}

	static {
	    structDecl = makeStructDeclNative(inference_datastructures_inference.$inference_answer_native.class, INFERENCE_ANSWER, INFERENCE_ANSWER_P, inference_datastructures_inference.$list442, inference_datastructures_inference.$list443,
		    new String[] { "$suid", "$inference", "$bindings", "$justifications", "$elapsed_creation_time", "$step_count" }, inference_datastructures_inference.$list444, inference_datastructures_inference.$list445, inference_datastructures_inference.PRINT_INFERENCE_ANSWER);
	}
    }

    public static final class $inference_answer_p$UnaryFunction extends UnaryFunction {
	public $inference_answer_p$UnaryFunction() {
	    super(extractFunctionNamed("INFERENCE-ANSWER-P"));
	}

	@Override
	public SubLObject processItem(final SubLObject arg1) {
	    return inference_datastructures_inference.inference_answer_p(arg1);
	}
    }

    public static final class $inference_answer_justification_native extends SubLStructNative {
	public SubLObject $answer;

	public SubLObject $supports;

	public SubLObject $pragma_supports;

	public SubLObject $proofs;

	private static final SubLStructDeclNative structDecl;

	public $inference_answer_justification_native() {
	    this.$answer = Lisp.NIL;
	    this.$supports = Lisp.NIL;
	    this.$pragma_supports = Lisp.NIL;
	    this.$proofs = Lisp.NIL;
	}

	@Override
	public SubLStructDecl getStructDecl() {
	    return structDecl;
	}

	@Override
	public SubLObject getField2() {
	    return this.$answer;
	}

	@Override
	public SubLObject getField3() {
	    return this.$supports;
	}

	@Override
	public SubLObject getField4() {
	    return this.$pragma_supports;
	}

	@Override
	public SubLObject getField5() {
	    return this.$proofs;
	}

	@Override
	public SubLObject setField2(final SubLObject value) {
	    return this.$answer = value;
	}

	@Override
	public SubLObject setField3(final SubLObject value) {
	    return this.$supports = value;
	}

	@Override
	public SubLObject setField4(final SubLObject value) {
	    return this.$pragma_supports = value;
	}

	@Override
	public SubLObject setField5(final SubLObject value) {
	    return this.$proofs = value;
	}

	static {
	    structDecl = makeStructDeclNative(inference_datastructures_inference.$inference_answer_justification_native.class, inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATION, inference_datastructures_inference.INFERENCE_ANSWER_JUSTIFICATION_P,
		    inference_datastructures_inference.$list482, inference_datastructures_inference.$list483, new String[] { "$answer", "$supports", "$pragma_supports", "$proofs" }, inference_datastructures_inference.$list484, inference_datastructures_inference.$list485,
		    inference_datastructures_inference.PRINT_INFERENCE_ANSWER_JUSTIFICATION);
	}
    }

    public static final class $inference_answer_justification_p$UnaryFunction extends UnaryFunction {
	public $inference_answer_justification_p$UnaryFunction() {
	    super(extractFunctionNamed("INFERENCE-ANSWER-JUSTIFICATION-P"));
	}

	@Override
	public SubLObject processItem(final SubLObject arg1) {
	    return inference_datastructures_inference.inference_answer_justification_p(arg1);
	}
    }

    public static final class $inference_answer_justification_supports$UnaryFunction extends UnaryFunction {
	public $inference_answer_justification_supports$UnaryFunction() {
	    super(extractFunctionNamed("INFERENCE-ANSWER-JUSTIFICATION-SUPPORTS"));
	}

	@Override
	public SubLObject processItem(final SubLObject arg1) {
	    return inference_datastructures_inference.inference_answer_justification_supports(arg1);
	}
    }
}

/**
 * Total time: 3488 ms synthetic
 */
